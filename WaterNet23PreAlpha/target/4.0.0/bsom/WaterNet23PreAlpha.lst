
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013e10  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c7e30  000c7e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c7e54  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  2003db80  000c7e58  0002db80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a78  2003dd78  2003dd78  0003dd78  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8050  000c8050  00038050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8078  000c8078  00038078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022d284  00000000  00000000  0003807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f3f  00000000  00000000  00265300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000709da  00000000  00000000  0028623f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f60  00000000  00000000  002f6c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000113b8  00000000  00000000  002fbb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff38  00000000  00000000  0030cf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0008741f  00000000  00000000  0035ce69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015beb6  00000000  00000000  003e4288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fc84  00000000  00000000  00540140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00f fd25 	bl	c3a80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00f fd47 	bl	c3ad0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db80 	.word	0x2003db80
   b404c:	000c7e58 	.word	0x000c7e58
   b4050:	2003dd78 	.word	0x2003dd78
   b4054:	2003dd78 	.word	0x2003dd78
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d f9dd 	bl	c1420 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c7e04 	.word	0x000c7e04
   b4080:	000c7e28 	.word	0x000c7e28

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc4e 	b.w	b5924 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fbcf 	bl	b582c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d b97d 	b.w	c1390 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 bbdd 	b.w	bd854 <malloc>

000b409a <_Znaj>:
   b409a:	f009 bbdb 	b.w	bd854 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bbe1 	b.w	bd864 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 bbdf 	b.w	bd864 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 faca 	bl	bd648 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd289 	.word	0x000bd289
   b40bc:	000c5c30 	.word	0x000c5c30

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00d f8e0 	bl	c1300 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bc32 	b.w	c09ae <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddc4 	.word	0x2003ddc4
   b4150:	2003dd84 	.word	0x2003dd84
   b4154:	2003ddb4 	.word	0x2003ddb4
   b4158:	2003e0e8 	.word	0x2003e0e8
   b415c:	2003ddf1 	.word	0x2003ddf1
   b4160:	2003df14 	.word	0x2003df14
   b4164:	2003df0d 	.word	0x2003df0d
   b4168:	2003e5b4 	.word	0x2003e5b4
   b416c:	2003e5d4 	.word	0x2003e5d4
   b4170:	000c5c45 	.word	0x000c5c45

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 ba6d 	b.w	b6670 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 fa64 	bl	b6670 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 b9d4 	b.w	b655c <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 b8b5 	b.w	b6324 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f002 f800 	bl	b61c8 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 fff3 	bl	bd1d8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f009 f805 	bl	bd208 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 ffe5 	bl	bd1d8 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 fa1b 	bl	bd688 <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c6210 	.word	0x000c6210

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b fca2 	bl	bfbc0 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00b feda 	bl	c0036 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00d f83d 	bl	c1300 <_Z16_fetch_usbserialv>
   b4286:	f00d f82f 	bl	c12e8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00b fd6b 	bl	bfd6c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c6224 	.word	0x000c6224
   b42a0:	000c61f8 	.word	0x000c61f8

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f008 ffa4 	bl	bd218 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f008 ff9b 	bl	bd218 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00c fb85 	bl	c0a02 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00c bb31 	b.w	c0980 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c5c6f 	.word	0x000c5c6f
   b4344:	000c7397 	.word	0x000c7397
   b4348:	000c5c6b 	.word	0x000c5c6b
   b434c:	000c5c67 	.word	0x000c5c67
   b4350:	000c5c85 	.word	0x000c5c85
   b4354:	000c5c5e 	.word	0x000c5c5e

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00c fb4c 	bl	c0a02 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b510      	push	{r4, lr}
    if(driveMode == 0 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4b11      	ldr	r3, [pc, #68]	; (b43bc <_Z13motionHandlerv+0x48>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	b9eb      	cbnz	r3, b43b8 <_Z13motionHandlerv+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437c:	f008 ff94 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   b4380:	4b0f      	ldr	r3, [pc, #60]	; (b43c0 <_Z13motionHandlerv+0x4c>)
   b4382:	681b      	ldr	r3, [r3, #0]
   b4384:	1ac0      	subs	r0, r0, r3
   b4386:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b438a:	d915      	bls.n	b43b8 <_Z13motionHandlerv+0x44>
        setLSpeed = 90;
   b438c:	4b0d      	ldr	r3, [pc, #52]	; (b43c4 <_Z13motionHandlerv+0x50>)
        setRSpeed = 90;
   b438e:	4c0e      	ldr	r4, [pc, #56]	; (b43c8 <_Z13motionHandlerv+0x54>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4390:	480e      	ldr	r0, [pc, #56]	; (b43cc <_Z13motionHandlerv+0x58>)
        setLSpeed = 90;
   b4392:	215a      	movs	r1, #90	; 0x5a
   b4394:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4396:	4b0e      	ldr	r3, [pc, #56]	; (b43d0 <_Z13motionHandlerv+0x5c>)
        setRSpeed = 90;
   b4398:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b439a:	2201      	movs	r2, #1
   b439c:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b439e:	f00c fb78 	bl	c0a92 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	480b      	ldr	r0, [pc, #44]	; (b43d4 <_Z13motionHandlerv+0x60>)
   b43a6:	f00c fb74 	bl	c0a92 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43aa:	f00c ffa9 	bl	c1300 <_Z16_fetch_usbserialv>
   b43ae:	490a      	ldr	r1, [pc, #40]	; (b43d8 <_Z13motionHandlerv+0x64>)
   b43b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43b4:	f7ff ffd0 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b43b8:	bd10      	pop	{r4, pc}
   b43ba:	bf00      	nop
   b43bc:	2003ddf1 	.word	0x2003ddf1
   b43c0:	2003de30 	.word	0x2003de30
   b43c4:	2003e58c 	.word	0x2003e58c
   b43c8:	2003e58d 	.word	0x2003e58d
   b43cc:	2003dd94 	.word	0x2003dd94
   b43d0:	2003e5f0 	.word	0x2003e5f0
   b43d4:	2003dda4 	.word	0x2003dda4
   b43d8:	000c5ca2 	.word	0x000c5ca2

000b43dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b43de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e0:	4604      	mov	r4, r0
      if (_M_manager)
   b43e2:	b113      	cbz	r3, b43ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e4:	2203      	movs	r2, #3
   b43e6:	4601      	mov	r1, r0
   b43e8:	4798      	blx	r3
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
	...

000b43f0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43f2:	4b13      	ldr	r3, [pc, #76]	; (b4440 <_ZN5TimerD1Ev+0x50>)
   b43f4:	6003      	str	r3, [r0, #0]
   b43f6:	4604      	mov	r4, r0
        if (handle) {
   b43f8:	6880      	ldr	r0, [r0, #8]
   b43fa:	b1c8      	cbz	r0, b4430 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43fc:	2500      	movs	r5, #0
   b43fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4402:	e9cd 3500 	strd	r3, r5, [sp]
   b4406:	2102      	movs	r1, #2
   b4408:	462b      	mov	r3, r5
   b440a:	462a      	mov	r2, r5
   b440c:	f008 ff04 	bl	bd218 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	4629      	mov	r1, r5
   b4414:	f008 ff28 	bl	bd268 <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4420:	f008 fed2 	bl	bd1c8 <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f008 fee5 	bl	bd1f8 <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	bf00      	nop
   b4440:	000c61e4 	.word	0x000c61e4

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffd2 	bl	b43f0 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe27 	bl	b40a2 <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4458:	b5f0      	push	{r4, r5, r6, r7, lr}
   b445a:	468c      	mov	ip, r1
   b445c:	2500      	movs	r5, #0
   b445e:	4914      	ldr	r1, [pc, #80]	; (b44b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4460:	7105      	strb	r5, [r0, #4]
   b4462:	4604      	mov	r4, r0
   b4464:	6085      	str	r5, [r0, #8]
   b4466:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4468:	e892 0003 	ldmia.w	r2, {r0, r1}
   b446c:	b085      	sub	sp, #20
   b446e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4470:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4474:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4478:	e896 0003 	ldmia.w	r6, {r0, r1}
   b447c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4480:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4484:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b448a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b448c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b448e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4490:	6095      	str	r5, [r2, #8]
   b4492:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4496:	e9cd 3500 	strd	r3, r5, [sp]
   b449a:	4a06      	ldr	r2, [pc, #24]	; (b44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b449c:	4623      	mov	r3, r4
   b449e:	4661      	mov	r1, ip
   b44a0:	f104 0008 	add.w	r0, r4, #8
   b44a4:	f008 fea0 	bl	bd1e8 <os_timer_create>
    }
   b44a8:	4620      	mov	r0, r4
   b44aa:	b005      	add	sp, #20
   b44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44ae:	bf00      	nop
   b44b0:	000c61e4 	.word	0x000c61e4
   b44b4:	000b41e7 	.word	0x000b41e7

000b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b44bc:	2200      	movs	r2, #0
   b44be:	7c40      	ldrb	r0, [r0, #17]
   b44c0:	f009 f91c 	bl	bd6fc <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b44c4:	7c63      	ldrb	r3, [r4, #17]
   b44c6:	2b0f      	cmp	r3, #15
        d_.period = period;
   b44c8:	bf18      	it	ne
   b44ca:	8320      	strhne	r0, [r4, #24]
}
   b44cc:	bd10      	pop	{r4, pc}
	...

000b44d0 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(signalLED){
   b44d2:	4b29      	ldr	r3, [pc, #164]	; (b4578 <_Z10LEDHandlerv+0xa8>)
   b44d4:	4d29      	ldr	r5, [pc, #164]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44d6:	781b      	ldrb	r3, [r3, #0]
   b44d8:	b15b      	cbz	r3, b44f2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44da:	7c6b      	ldrb	r3, [r5, #17]
   b44dc:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44de:	bf1c      	itt	ne
   b44e0:	2302      	movne	r3, #2
   b44e2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44e4:	4b26      	ldr	r3, [pc, #152]	; (b4580 <_Z10LEDHandlerv+0xb0>)
   b44e6:	616b      	str	r3, [r5, #20]
        return;
    }
    if(offloadMode){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44e8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44ea:	4824      	ldr	r0, [pc, #144]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44ec:	f7ff ffe4 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(offloadMode){
   b44f2:	4b24      	ldr	r3, [pc, #144]	; (b4584 <_Z10LEDHandlerv+0xb4>)
   b44f4:	781b      	ldrb	r3, [r3, #0]
   b44f6:	b133      	cbz	r3, b4506 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44f8:	7c6b      	ldrb	r3, [r5, #17]
   b44fa:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44fc:	bf1c      	itt	ne
   b44fe:	2302      	movne	r3, #2
   b4500:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4502:	23ff      	movs	r3, #255	; 0xff
   b4504:	e7ef      	b.n	b44e6 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4506:	4b20      	ldr	r3, [pc, #128]	; (b4588 <_Z10LEDHandlerv+0xb8>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d12d      	bne.n	b456a <_Z10LEDHandlerv+0x9a>
    else if(logSensors){
   b450e:	4b1f      	ldr	r3, [pc, #124]	; (b458c <_Z10LEDHandlerv+0xbc>)
   b4510:	781b      	ldrb	r3, [r3, #0]
   b4512:	2b00      	cmp	r3, #0
   b4514:	d12c      	bne.n	b4570 <_Z10LEDHandlerv+0xa0>
    else if(driveMode == 0){
   b4516:	4b1e      	ldr	r3, [pc, #120]	; (b4590 <_Z10LEDHandlerv+0xc0>)
   b4518:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b451a:	2b00      	cmp	r3, #0
   b451c:	bf0b      	itete	eq
   b451e:	260a      	moveq	r6, #10
   b4520:	2614      	movne	r6, #20
   b4522:	2702      	moveq	r7, #2
   b4524:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b4526:	4b1b      	ldr	r3, [pc, #108]	; (b4594 <_Z10LEDHandlerv+0xc4>)
   b4528:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b452a:	4b1b      	ldr	r3, [pc, #108]	; (b4598 <_Z10LEDHandlerv+0xc8>)
   b452c:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b452e:	4b1b      	ldr	r3, [pc, #108]	; (b459c <_Z10LEDHandlerv+0xcc>)
    statusMode |= BLEAvail << 2;
   b4530:	00a4      	lsls	r4, r4, #2
   b4532:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b4536:	781a      	ldrb	r2, [r3, #0]
   b4538:	4314      	orrs	r4, r2
   b453a:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b453c:	f00c fee0 	bl	c1300 <_Z16_fetch_usbserialv>
   b4540:	4622      	mov	r2, r4
   b4542:	3c01      	subs	r4, #1
   b4544:	4916      	ldr	r1, [pc, #88]	; (b45a0 <_Z10LEDHandlerv+0xd0>)
   b4546:	b2e4      	uxtb	r4, r4
   b4548:	f7ff ff06 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b454c:	2c06      	cmp	r4, #6
   b454e:	bf98      	it	ls
   b4550:	4b14      	ldrls	r3, [pc, #80]	; (b45a4 <_Z10LEDHandlerv+0xd4>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4552:	7c6a      	ldrb	r2, [r5, #17]
   b4554:	bf94      	ite	ls
   b4556:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b455a:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b455e:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4560:	bf18      	it	ne
   b4562:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4564:	4631      	mov	r1, r6
    d_.color = color;
   b4566:	616b      	str	r3, [r5, #20]
   b4568:	e7bf      	b.n	b44ea <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b456a:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b456c:	2702      	movs	r7, #2
   b456e:	e7da      	b.n	b4526 <_Z10LEDHandlerv+0x56>
        SetSpeed = LED_SPEED_NORMAL;
   b4570:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b4572:	2701      	movs	r7, #1
   b4574:	e7d7      	b.n	b4526 <_Z10LEDHandlerv+0x56>
   b4576:	bf00      	nop
   b4578:	2003e58e 	.word	0x2003e58e
   b457c:	2003e594 	.word	0x2003e594
   b4580:	00ff6000 	.word	0x00ff6000
   b4584:	2003e0e8 	.word	0x2003e0e8
   b4588:	2003df14 	.word	0x2003df14
   b458c:	2003df0d 	.word	0x2003df0d
   b4590:	2003ddf1 	.word	0x2003ddf1
   b4594:	2003ddc4 	.word	0x2003ddc4
   b4598:	2003dd84 	.word	0x2003dd84
   b459c:	2003ddb4 	.word	0x2003ddb4
   b45a0:	000c5cec 	.word	0x000c5cec
   b45a4:	000c62f0 	.word	0x000c62f0

000b45a8 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45a8:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45aa:	460a      	mov	r2, r1
   b45ac:	4901      	ldr	r1, [pc, #4]	; (b45b4 <_ZN7FatFile4openEPKci+0xc>)
   b45ae:	6809      	ldr	r1, [r1, #0]
   b45b0:	f002 b811 	b.w	b65d6 <_ZN7FatFile4openEPS_PKci>
   b45b4:	2003e614 	.word	0x2003e614

000b45b8 <_Z11wdogHandlerv>:
void wdogHandler(){
   b45b8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45ba:	f009 f8c3 	bl	bd744 <spark_cloud_flag_connected>
   b45be:	4c2b      	ldr	r4, [pc, #172]	; (b466c <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b45c0:	b1e0      	cbz	r0, b45fc <_Z11wdogHandlerv+0x44>
   b45c2:	2301      	movs	r3, #1
        LTEAvail = false;
   b45c4:	7023      	strb	r3, [r4, #0]
   b45c6:	f008 fe6f 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b45ca:	4b29      	ldr	r3, [pc, #164]	; (b4670 <_Z11wdogHandlerv+0xb8>)
   b45cc:	4c29      	ldr	r4, [pc, #164]	; (b4674 <_Z11wdogHandlerv+0xbc>)
   b45ce:	681b      	ldr	r3, [r3, #0]
   b45d0:	f247 5230 	movw	r2, #30000	; 0x7530
   b45d4:	1ac0      	subs	r0, r0, r3
   b45d6:	4290      	cmp	r0, r2
   b45d8:	d823      	bhi.n	b4622 <_Z11wdogHandlerv+0x6a>
   b45da:	b313      	cbz	r3, b4622 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b45dc:	2301      	movs	r3, #1
        XBeeAvail = false;
   b45de:	7023      	strb	r3, [r4, #0]
   b45e0:	f008 fe62 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b45e4:	4b24      	ldr	r3, [pc, #144]	; (b4678 <_Z11wdogHandlerv+0xc0>)
   b45e6:	4c25      	ldr	r4, [pc, #148]	; (b467c <_Z11wdogHandlerv+0xc4>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	f247 5230 	movw	r2, #30000	; 0x7530
   b45ee:	1ac0      	subs	r0, r0, r3
   b45f0:	4290      	cmp	r0, r2
   b45f2:	d828      	bhi.n	b4646 <_Z11wdogHandlerv+0x8e>
   b45f4:	b33b      	cbz	r3, b4646 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b45f6:	2301      	movs	r3, #1
        BLEAvail = false;
   b45f8:	7023      	strb	r3, [r4, #0]
}
   b45fa:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45fc:	7823      	ldrb	r3, [r4, #0]
   b45fe:	2b00      	cmp	r3, #0
   b4600:	d0e1      	beq.n	b45c6 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4602:	481f      	ldr	r0, [pc, #124]	; (b4680 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4604:	7c03      	ldrb	r3, [r0, #16]
   b4606:	b92b      	cbnz	r3, b4614 <_Z11wdogHandlerv+0x5c>
   b4608:	491e      	ldr	r1, [pc, #120]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b460a:	f244 2202 	movw	r2, #16898	; 0x4202
   b460e:	3010      	adds	r0, #16
   b4610:	f7ff ffca 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4614:	491c      	ldr	r1, [pc, #112]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b4616:	481a      	ldr	r0, [pc, #104]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4618:	221e      	movs	r2, #30
   b461a:	f7ff fe9d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b461e:	2300      	movs	r3, #0
   b4620:	e7d0      	b.n	b45c4 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4622:	7823      	ldrb	r3, [r4, #0]
   b4624:	b16b      	cbz	r3, b4642 <_Z11wdogHandlerv+0x8a>
   b4626:	4816      	ldr	r0, [pc, #88]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4628:	7c03      	ldrb	r3, [r0, #16]
   b462a:	b92b      	cbnz	r3, b4638 <_Z11wdogHandlerv+0x80>
   b462c:	4915      	ldr	r1, [pc, #84]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b462e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4632:	3010      	adds	r0, #16
   b4634:	f7ff ffb8 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4638:	4913      	ldr	r1, [pc, #76]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b463a:	4811      	ldr	r0, [pc, #68]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b463c:	221e      	movs	r2, #30
   b463e:	f7ff fe8b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4642:	2300      	movs	r3, #0
   b4644:	e7cb      	b.n	b45de <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4646:	7822      	ldrb	r2, [r4, #0]
   b4648:	b172      	cbz	r2, b4668 <_Z11wdogHandlerv+0xb0>
   b464a:	b16b      	cbz	r3, b4668 <_Z11wdogHandlerv+0xb0>
   b464c:	480c      	ldr	r0, [pc, #48]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b464e:	7c03      	ldrb	r3, [r0, #16]
   b4650:	b92b      	cbnz	r3, b465e <_Z11wdogHandlerv+0xa6>
   b4652:	490c      	ldr	r1, [pc, #48]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b4654:	f244 2202 	movw	r2, #16898	; 0x4202
   b4658:	3010      	adds	r0, #16
   b465a:	f7ff ffa5 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b465e:	490b      	ldr	r1, [pc, #44]	; (b468c <_Z11wdogHandlerv+0xd4>)
   b4660:	4807      	ldr	r0, [pc, #28]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4662:	221e      	movs	r2, #30
   b4664:	f7ff fe78 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4668:	2300      	movs	r3, #0
   b466a:	e7c5      	b.n	b45f8 <_Z11wdogHandlerv+0x40>
   b466c:	2003ddb4 	.word	0x2003ddb4
   b4670:	2003ddc8 	.word	0x2003ddc8
   b4674:	2003ddc4 	.word	0x2003ddc4
   b4678:	2003dd90 	.word	0x2003dd90
   b467c:	2003dd84 	.word	0x2003dd84
   b4680:	2003deb4 	.word	0x2003deb4
   b4684:	2003de10 	.word	0x2003de10
   b4688:	000c5cf7 	.word	0x000c5cf7
   b468c:	000c5d48 	.word	0x000c5d48

000b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4690:	b530      	push	{r4, r5, lr}
   b4692:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4694:	4b1b      	ldr	r3, [pc, #108]	; (b4704 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4696:	9300      	str	r3, [sp, #0]
   b4698:	7913      	ldrb	r3, [r2, #4]
   b469a:	f88d 3004 	strb.w	r3, [sp, #4]
   b469e:	6893      	ldr	r3, [r2, #8]
   b46a0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46a2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b46a6:	8993      	ldrh	r3, [r2, #12]
   b46a8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46ac:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46ae:	460a      	mov	r2, r1
   b46b0:	466b      	mov	r3, sp
   b46b2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b46b6:	4628      	mov	r0, r5
   b46b8:	f002 febe 	bl	b7438 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b46bc:	b910      	cbnz	r0, b46c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b46be:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b46c0:	b005      	add	sp, #20
   b46c2:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b46c4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b46c6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b46ca:	4628      	mov	r0, r5
   b46cc:	f001 ff7c 	bl	b65c8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b46d0:	2101      	movs	r1, #1
   b46d2:	4620      	mov	r0, r4
   b46d4:	f002 fd5b 	bl	b718e <_ZN9FatVolume4initEh>
   b46d8:	4601      	mov	r1, r0
   b46da:	b168      	cbz	r0, b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b46dc:	4621      	mov	r1, r4
   b46de:	4628      	mov	r0, r5
   b46e0:	f001 fd6c 	bl	b61bc <_ZN7FatFile8openRootEP9FatVolume>
   b46e4:	2800      	cmp	r0, #0
   b46e6:	d0ea      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b46e8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b46ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   b46f0:	d0e5      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b46f2:	4b05      	ldr	r3, [pc, #20]	; (b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b46f4:	601d      	str	r5, [r3, #0]
    return true;
   b46f6:	e7e3      	b.n	b46c0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b46f8:	4620      	mov	r0, r4
   b46fa:	f002 fd48 	bl	b718e <_ZN9FatVolume4initEh>
   b46fe:	2800      	cmp	r0, #0
   b4700:	d1ec      	bne.n	b46dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4702:	e7dc      	b.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4704:	000c61d0 	.word	0x000c61d0
   b4708:	2003e614 	.word	0x2003e614

000b470c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4710:	b08a      	sub	sp, #40	; 0x28
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4712:	7883      	ldrb	r3, [r0, #2]
   b4714:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4716:	af04      	add	r7, sp, #16
   b4718:	4604      	mov	r4, r0
   b471a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b471c:	d14c      	bne.n	b47b8 <_Z14processCommandPKchb+0xac>
   b471e:	78c3      	ldrb	r3, [r0, #3]
   b4720:	2b42      	cmp	r3, #66	; 0x42
   b4722:	d175      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
        char dataStr[strlen(command)-8];
   b4724:	4620      	mov	r0, r4
   b4726:	f00f fa5e 	bl	c3be6 <strlen>
   b472a:	3801      	subs	r0, #1
   b472c:	f020 0007 	bic.w	r0, r0, #7
        }
   b4730:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4732:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4736:	4620      	mov	r0, r4
   b4738:	f00f fa55 	bl	c3be6 <strlen>
        char dataStr[strlen(command)-8];
   b473c:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b473e:	4428      	add	r0, r5
   b4740:	2600      	movs	r6, #0
   b4742:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4746:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4748:	71fe      	strb	r6, [r7, #7]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b474a:	803e      	strh	r6, [r7, #0]
   b474c:	70be      	strb	r6, [r7, #2]
   b474e:	f00f fa4a 	bl	c3be6 <strlen>
   b4752:	4420      	add	r0, r4
   b4754:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4758:	703b      	strb	r3, [r7, #0]
   b475a:	4620      	mov	r0, r4
   b475c:	f00f fa43 	bl	c3be6 <strlen>
   b4760:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4762:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4764:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4768:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b476a:	2210      	movs	r2, #16
   b476c:	4638      	mov	r0, r7
   b476e:	f010 f963 	bl	c4a38 <strtol>
   b4772:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4774:	fa5f f888 	uxtb.w	r8, r8
   b4778:	f00c fdc2 	bl	c1300 <_Z16_fetch_usbserialv>
   b477c:	4986      	ldr	r1, [pc, #536]	; (b4998 <_Z14processCommandPKchb+0x28c>)
   b477e:	4643      	mov	r3, r8
   b4780:	4642      	mov	r2, r8
   b4782:	f7ff fde9 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4786:	2604      	movs	r6, #4
   b4788:	4620      	mov	r0, r4
   b478a:	f00f fa2c 	bl	c3be6 <strlen>
   b478e:	3802      	subs	r0, #2
   b4790:	4286      	cmp	r6, r0
   b4792:	d216      	bcs.n	b47c2 <_Z14processCommandPKchb+0xb6>
            if(i < 7) cmdStr[i-4] = command[i];
   b4794:	2e06      	cmp	r6, #6
   b4796:	bf9b      	ittet	ls
   b4798:	f107 0318 	addls.w	r3, r7, #24
   b479c:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b479e:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b47a0:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b47a2:	bf8c      	ite	hi
   b47a4:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b47a6:	f803 2c18 	strbls.w	r2, [r3, #-24]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47aa:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b47ae:	bf88      	it	hi
   b47b0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47b4:	b2f6      	uxtb	r6, r6
   b47b6:	e7e7      	b.n	b4788 <_Z14processCommandPKchb+0x7c>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b47b8:	2b42      	cmp	r3, #66	; 0x42
   b47ba:	d129      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
   b47bc:	78c3      	ldrb	r3, [r0, #3]
   b47be:	2b31      	cmp	r3, #49	; 0x31
   b47c0:	e7af      	b.n	b4722 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47c2:	4540      	cmp	r0, r8
   b47c4:	d02e      	beq.n	b4824 <_Z14processCommandPKchb+0x118>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47c6:	f00c fd9b 	bl	c1300 <_Z16_fetch_usbserialv>
   b47ca:	4605      	mov	r5, r0
   b47cc:	4620      	mov	r0, r4
   b47ce:	f00f fa0a 	bl	c3be6 <strlen>
   b47d2:	1e82      	subs	r2, r0, #2
   b47d4:	4628      	mov	r0, r5
    return m_attr;
   b47d6:	4d71      	ldr	r5, [pc, #452]	; (b499c <_Z14processCommandPKchb+0x290>)
   b47d8:	4971      	ldr	r1, [pc, #452]	; (b49a0 <_Z14processCommandPKchb+0x294>)
   b47da:	4643      	mov	r3, r8
   b47dc:	f7ff fdbc 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47e0:	7c2b      	ldrb	r3, [r5, #16]
   b47e2:	b9cb      	cbnz	r3, b4818 <_Z14processCommandPKchb+0x10c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47e4:	496f      	ldr	r1, [pc, #444]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b47e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b47ea:	f105 0010 	add.w	r0, r5, #16
   b47ee:	f7ff fedb 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47f2:	496d      	ldr	r1, [pc, #436]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b47f4:	4622      	mov	r2, r4
   b47f6:	4628      	mov	r0, r5
   b47f8:	f7ff fdae 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47fc:	f105 0010 	add.w	r0, r5, #16
   b4800:	f001 fee2 	bl	b65c8 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4804:	f00c fd7c 	bl	c1300 <_Z16_fetch_usbserialv>
   b4808:	4968      	ldr	r1, [pc, #416]	; (b49ac <_Z14processCommandPKchb+0x2a0>)
   b480a:	f00c f8d0 	bl	c09ae <_ZN5Print7printlnEPKc>
            return;
   b480e:	46cd      	mov	sp, r9
}
   b4810:	3718      	adds	r7, #24
   b4812:	46bd      	mov	sp, r7
   b4814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4818:	4963      	ldr	r1, [pc, #396]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b481a:	4622      	mov	r2, r4
   b481c:	4628      	mov	r0, r5
   b481e:	f7ff fd9b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4822:	e7ef      	b.n	b4804 <_Z14processCommandPKchb+0xf8>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4824:	4962      	ldr	r1, [pc, #392]	; (b49b0 <_Z14processCommandPKchb+0x2a4>)
   b4826:	1d38      	adds	r0, r7, #4
   b4828:	f00f f9ae 	bl	c3b88 <strcmp>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0ee      	beq.n	b480e <_Z14processCommandPKchb+0x102>
        if(!strcmp(cmdStr,"ctl")){
   b4830:	4960      	ldr	r1, [pc, #384]	; (b49b4 <_Z14processCommandPKchb+0x2a8>)
   b4832:	1d38      	adds	r0, r7, #4
   b4834:	f00f f9a8 	bl	c3b88 <strcmp>
   b4838:	b968      	cbnz	r0, b4856 <_Z14processCommandPKchb+0x14a>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal 
   b483a:	4b5f      	ldr	r3, [pc, #380]	; (b49b8 <_Z14processCommandPKchb+0x2ac>)
   b483c:	9302      	str	r3, [sp, #8]
   b483e:	4b5f      	ldr	r3, [pc, #380]	; (b49bc <_Z14processCommandPKchb+0x2b0>)
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	4b5f      	ldr	r3, [pc, #380]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b4844:	9300      	str	r3, [sp, #0]
   b4846:	495f      	ldr	r1, [pc, #380]	; (b49c4 <_Z14processCommandPKchb+0x2b8>)
   b4848:	f107 0310 	add.w	r3, r7, #16
   b484c:	f107 0208 	add.w	r2, r7, #8
   b4850:	4628      	mov	r0, r5
   b4852:	f009 f81f 	bl	bd894 <sscanf>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4856:	495c      	ldr	r1, [pc, #368]	; (b49c8 <_Z14processCommandPKchb+0x2bc>)
   b4858:	1d38      	adds	r0, r7, #4
   b485a:	f00f f995 	bl	c3b88 <strcmp>
   b485e:	2800      	cmp	r0, #0
   b4860:	d13d      	bne.n	b48de <_Z14processCommandPKchb+0x1d2>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4862:	782b      	ldrb	r3, [r5, #0]
   b4864:	723b      	strb	r3, [r7, #8]
   b4866:	786b      	ldrb	r3, [r5, #1]
   b4868:	727b      	strb	r3, [r7, #9]
   b486a:	78ab      	ldrb	r3, [r5, #2]
   b486c:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b486e:	78eb      	ldrb	r3, [r5, #3]
   b4870:	743b      	strb	r3, [r7, #16]
   b4872:	792b      	ldrb	r3, [r5, #4]
   b4874:	747b      	strb	r3, [r7, #17]
            setLSpeed = atoi(lSpd);
   b4876:	f107 0008 	add.w	r0, r7, #8
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b487a:	796b      	ldrb	r3, [r5, #5]
   b487c:	74bb      	strb	r3, [r7, #18]
            setLSpeed = atoi(lSpd);
   b487e:	f00f f8e2 	bl	c3a46 <atoi>
   b4882:	4d52      	ldr	r5, [pc, #328]	; (b49cc <_Z14processCommandPKchb+0x2c0>)
            setRSpeed = atoi(rSpd);
   b4884:	4c52      	ldr	r4, [pc, #328]	; (b49d0 <_Z14processCommandPKchb+0x2c4>)
            setLSpeed = atoi(lSpd);
   b4886:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b4888:	f107 0010 	add.w	r0, r7, #16
   b488c:	f00f f8db 	bl	c3a46 <atoi>
   b4890:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4892:	f00c fd35 	bl	c1300 <_Z16_fetch_usbserialv>
   b4896:	782a      	ldrb	r2, [r5, #0]
   b4898:	7823      	ldrb	r3, [r4, #0]
   b489a:	494e      	ldr	r1, [pc, #312]	; (b49d4 <_Z14processCommandPKchb+0x2c8>)
   b489c:	f7ff fd5c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a0:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b48a2:	484d      	ldr	r0, [pc, #308]	; (b49d8 <_Z14processCommandPKchb+0x2cc>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a4:	3b5b      	subs	r3, #91	; 0x5b
   b48a6:	2b20      	cmp	r3, #32
   b48a8:	bf9c      	itt	ls
   b48aa:	237b      	movls	r3, #123	; 0x7b
   b48ac:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48ae:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48b0:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48b2:	3b5b      	subs	r3, #91	; 0x5b
   b48b4:	2b20      	cmp	r3, #32
   b48b6:	bf9c      	itt	ls
   b48b8:	237b      	movls	r3, #123	; 0x7b
   b48ba:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48bc:	f00c f8e9 	bl	c0a92 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b48c0:	7821      	ldrb	r1, [r4, #0]
   b48c2:	4846      	ldr	r0, [pc, #280]	; (b49dc <_Z14processCommandPKchb+0x2d0>)
   b48c4:	f00c f8e5 	bl	c0a92 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b48c8:	4b45      	ldr	r3, [pc, #276]	; (b49e0 <_Z14processCommandPKchb+0x2d4>)
   b48ca:	2201      	movs	r2, #1
   b48cc:	701a      	strb	r2, [r3, #0]
   b48ce:	f008 fceb 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b48d2:	4b44      	ldr	r3, [pc, #272]	; (b49e4 <_Z14processCommandPKchb+0x2d8>)
   b48d4:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b48d6:	4b3a      	ldr	r3, [pc, #232]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b48d8:	2200      	movs	r2, #0
   b48da:	701a      	strb	r2, [r3, #0]
   b48dc:	e797      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b48de:	4942      	ldr	r1, [pc, #264]	; (b49e8 <_Z14processCommandPKchb+0x2dc>)
   b48e0:	1d38      	adds	r0, r7, #4
   b48e2:	f00f f951 	bl	c3b88 <strcmp>
   b48e6:	b918      	cbnz	r0, b48f0 <_Z14processCommandPKchb+0x1e4>
            requestActive = mode;
   b48e8:	4b40      	ldr	r3, [pc, #256]	; (b49ec <_Z14processCommandPKchb+0x2e0>)
   b48ea:	f883 a000 	strb.w	sl, [r3]
   b48ee:	e78e      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"pts")){
   b48f0:	493f      	ldr	r1, [pc, #252]	; (b49f0 <_Z14processCommandPKchb+0x2e4>)
   b48f2:	1d38      	adds	r0, r7, #4
   b48f4:	f00f f948 	bl	c3b88 <strcmp>
   b48f8:	b9f0      	cbnz	r0, b4938 <_Z14processCommandPKchb+0x22c>
   b48fa:	4c28      	ldr	r4, [pc, #160]	; (b499c <_Z14processCommandPKchb+0x290>)
            Serial.println(dataStr);
   b48fc:	f00c fd00 	bl	c1300 <_Z16_fetch_usbserialv>
   b4900:	4629      	mov	r1, r5
   b4902:	f00c f854 	bl	c09ae <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4906:	7c23      	ldrb	r3, [r4, #16]
   b4908:	b983      	cbnz	r3, b492c <_Z14processCommandPKchb+0x220>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b490a:	4926      	ldr	r1, [pc, #152]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b490c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4910:	f104 0010 	add.w	r0, r4, #16
   b4914:	f7ff fe48 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4918:	4936      	ldr	r1, [pc, #216]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b491a:	462a      	mov	r2, r5
   b491c:	4620      	mov	r0, r4
   b491e:	f7ff fd1b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4922:	f104 0010 	add.w	r0, r4, #16
   b4926:	f001 fe4f 	bl	b65c8 <_ZN7FatFile5closeEv>
   b492a:	e770      	b.n	b480e <_Z14processCommandPKchb+0x102>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b492c:	4931      	ldr	r1, [pc, #196]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b492e:	462a      	mov	r2, r5
   b4930:	4620      	mov	r0, r4
   b4932:	f7ff fd11 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4936:	e76a      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4938:	492f      	ldr	r1, [pc, #188]	; (b49f8 <_Z14processCommandPKchb+0x2ec>)
   b493a:	1d38      	adds	r0, r7, #4
   b493c:	f00f f924 	bl	c3b88 <strcmp>
   b4940:	b920      	cbnz	r0, b494c <_Z14processCommandPKchb+0x240>
   b4942:	f008 fcb1 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4946:	4b2d      	ldr	r3, [pc, #180]	; (b49fc <_Z14processCommandPKchb+0x2f0>)
   b4948:	6018      	str	r0, [r3, #0]
   b494a:	e760      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"hwa")){
   b494c:	492c      	ldr	r1, [pc, #176]	; (b4a00 <_Z14processCommandPKchb+0x2f4>)
   b494e:	1d38      	adds	r0, r7, #4
   b4950:	f00f f91a 	bl	c3b88 <strcmp>
   b4954:	b910      	cbnz	r0, b495c <_Z14processCommandPKchb+0x250>
            waitForConnection = false;
   b4956:	4b2b      	ldr	r3, [pc, #172]	; (b4a04 <_Z14processCommandPKchb+0x2f8>)
   b4958:	7018      	strb	r0, [r3, #0]
   b495a:	e758      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b495c:	492a      	ldr	r1, [pc, #168]	; (b4a08 <_Z14processCommandPKchb+0x2fc>)
   b495e:	1d38      	adds	r0, r7, #4
   b4960:	f00f f912 	bl	c3b88 <strcmp>
   b4964:	2800      	cmp	r0, #0
   b4966:	f43f af52 	beq.w	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b496a:	4928      	ldr	r1, [pc, #160]	; (b4a0c <_Z14processCommandPKchb+0x300>)
   b496c:	1d38      	adds	r0, r7, #4
   b496e:	f00f f90b 	bl	c3b88 <strcmp>
   b4972:	2800      	cmp	r0, #0
   b4974:	f47f af4b 	bne.w	b480e <_Z14processCommandPKchb+0x102>
            offloadMode = true;
   b4978:	4b25      	ldr	r3, [pc, #148]	; (b4a10 <_Z14processCommandPKchb+0x304>)
            status.setSpeed(LED_SPEED_FAST);
   b497a:	4826      	ldr	r0, [pc, #152]	; (b4a14 <_Z14processCommandPKchb+0x308>)
            offloadMode = true;
   b497c:	2201      	movs	r2, #1
   b497e:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4980:	4b24      	ldr	r3, [pc, #144]	; (b4a14 <_Z14processCommandPKchb+0x308>)
   b4982:	7c5a      	ldrb	r2, [r3, #17]
   b4984:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4986:	bf1c      	itt	ne
   b4988:	2202      	movne	r2, #2
   b498a:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b498c:	211e      	movs	r1, #30
    d_.color = color;
   b498e:	22ff      	movs	r2, #255	; 0xff
   b4990:	615a      	str	r2, [r3, #20]
   b4992:	f7ff fd91 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4996:	e73a      	b.n	b480e <_Z14processCommandPKchb+0x102>
   b4998:	000c5d97 	.word	0x000c5d97
   b499c:	2003deb4 	.word	0x2003deb4
   b49a0:	000c5dac 	.word	0x000c5dac
   b49a4:	2003de10 	.word	0x2003de10
   b49a8:	000c5dc9 	.word	0x000c5dc9
   b49ac:	000c5df5 	.word	0x000c5df5
   b49b0:	000c5e16 	.word	0x000c5e16
   b49b4:	000c5e1a 	.word	0x000c5e1a
   b49b8:	2003e58e 	.word	0x2003e58e
   b49bc:	2003df0d 	.word	0x2003df0d
   b49c0:	2003ddf1 	.word	0x2003ddf1
   b49c4:	000c5e1e 	.word	0x000c5e1e
   b49c8:	000c5e2d 	.word	0x000c5e2d
   b49cc:	2003e58c 	.word	0x2003e58c
   b49d0:	2003e58d 	.word	0x2003e58d
   b49d4:	000c5e31 	.word	0x000c5e31
   b49d8:	2003dd94 	.word	0x2003dd94
   b49dc:	2003dda4 	.word	0x2003dda4
   b49e0:	2003e5f0 	.word	0x2003e5f0
   b49e4:	2003de30 	.word	0x2003de30
   b49e8:	000c5e5d 	.word	0x000c5e5d
   b49ec:	2003e0e9 	.word	0x2003e0e9
   b49f0:	000c5e61 	.word	0x000c5e61
   b49f4:	000c5e65 	.word	0x000c5e65
   b49f8:	000c5e88 	.word	0x000c5e88
   b49fc:	2003de34 	.word	0x2003de34
   b4a00:	000c5e8c 	.word	0x000c5e8c
   b4a04:	2003e5f1 	.word	0x2003e5f1
   b4a08:	000c5e90 	.word	0x000c5e90
   b4a0c:	000c5e94 	.word	0x000c5e94
   b4a10:	2003e0e8 	.word	0x2003e0e8
   b4a14:	2003e594 	.word	0x2003e594

000b4a18 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4a18:	b510      	push	{r4, lr}
   b4a1a:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4a1c:	2200      	movs	r2, #0
   b4a1e:	2104      	movs	r1, #4
   b4a20:	4620      	mov	r0, r4
   b4a22:	f7ff fe73 	bl	b470c <_Z14processCommandPKchb>
    if(logMessages){
   b4a26:	4b0b      	ldr	r3, [pc, #44]	; (b4a54 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4a28:	781b      	ldrb	r3, [r3, #0]
   b4a2a:	b193      	cbz	r3, b4a52 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4a2c:	480a      	ldr	r0, [pc, #40]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a2e:	7c03      	ldrb	r3, [r0, #16]
   b4a30:	b92b      	cbnz	r3, b4a3e <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4a32:	490a      	ldr	r1, [pc, #40]	; (b4a5c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4a34:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a38:	3010      	adds	r0, #16
   b4a3a:	f7ff fdb5 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4a3e:	4622      	mov	r2, r4
   b4a40:	4907      	ldr	r1, [pc, #28]	; (b4a60 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4a42:	4805      	ldr	r0, [pc, #20]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4a44:	f7ff fc88 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4a4c:	4805      	ldr	r0, [pc, #20]	; (b4a64 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4a4e:	f001 bdbb 	b.w	b65c8 <_ZN7FatFile5closeEv>
}
   b4a52:	bd10      	pop	{r4, pc}
   b4a54:	2003df0c 	.word	0x2003df0c
   b4a58:	2003deb4 	.word	0x2003deb4
   b4a5c:	2003de10 	.word	0x2003de10
   b4a60:	000c5e98 	.word	0x000c5e98
   b4a64:	2003dec4 	.word	0x2003dec4

000b4a68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a68:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4a6a:	f101 0308 	add.w	r3, r1, #8
   b4a6e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a72:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4a74:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a78:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4a7a:	460a      	mov	r2, r1
   b4a7c:	4601      	mov	r1, r0
   b4a7e:	4668      	mov	r0, sp
   b4a80:	f00e fffe 	bl	c3a80 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a84:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4a88:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4a8e:	b113      	cbz	r3, b4a96 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4a90:	2300      	movs	r3, #0
   b4a92:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4a96:	f00c fc33 	bl	c1300 <_Z16_fetch_usbserialv>
   b4a9a:	4916      	ldr	r1, [pc, #88]	; (b4af4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4a9c:	f00b ff87 	bl	c09ae <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4aa0:	f00c fc2e 	bl	c1300 <_Z16_fetch_usbserialv>
   b4aa4:	4629      	mov	r1, r5
   b4aa6:	f00b ff82 	bl	c09ae <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4aaa:	2201      	movs	r2, #1
   b4aac:	4611      	mov	r1, r2
   b4aae:	4628      	mov	r0, r5
   b4ab0:	f7ff fe2c 	bl	b470c <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4ab4:	782b      	ldrb	r3, [r5, #0]
   b4ab6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4aba:	2b41      	cmp	r3, #65	; 0x41
   b4abc:	d103      	bne.n	b4ac6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4abe:	f008 fbf3 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   b4ac2:	4b0d      	ldr	r3, [pc, #52]	; (b4af8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4ac4:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4ac6:	4b0d      	ldr	r3, [pc, #52]	; (b4afc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4ac8:	781b      	ldrb	r3, [r3, #0]
   b4aca:	b183      	cbz	r3, b4aee <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4acc:	480c      	ldr	r0, [pc, #48]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4ace:	7c03      	ldrb	r3, [r0, #16]
   b4ad0:	b92b      	cbnz	r3, b4ade <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4ad2:	490c      	ldr	r1, [pc, #48]	; (b4b04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4ad4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ad8:	3010      	adds	r0, #16
   b4ada:	f7ff fd65 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4ade:	490a      	ldr	r1, [pc, #40]	; (b4b08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4ae0:	4807      	ldr	r0, [pc, #28]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4ae2:	462a      	mov	r2, r5
   b4ae4:	f7ff fc38 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ae8:	4808      	ldr	r0, [pc, #32]	; (b4b0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4aea:	f001 fd6d 	bl	b65c8 <_ZN7FatFile5closeEv>
}
   b4aee:	46bd      	mov	sp, r7
   b4af0:	bdb0      	pop	{r4, r5, r7, pc}
   b4af2:	bf00      	nop
   b4af4:	000c5eb8 	.word	0x000c5eb8
   b4af8:	2003dd90 	.word	0x2003dd90
   b4afc:	2003df0c 	.word	0x2003df0c
   b4b00:	2003deb4 	.word	0x2003deb4
   b4b04:	2003de10 	.word	0x2003de10
   b4b08:	000c5ec8 	.word	0x000c5ec8
   b4b0c:	2003dec4 	.word	0x2003dec4

000b4b10 <_Z8setupLTEv>:
void setupLTE(){
   b4b10:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b12:	2400      	movs	r4, #0
   b4b14:	e9cd 4400 	strd	r4, r4, [sp]
   b4b18:	4904      	ldr	r1, [pc, #16]	; (b4b2c <_Z8setupLTEv+0x1c>)
   b4b1a:	4805      	ldr	r0, [pc, #20]	; (b4b30 <_Z8setupLTEv+0x20>)
   b4b1c:	2301      	movs	r3, #1
   b4b1e:	4622      	mov	r2, r4
   b4b20:	f008 fe20 	bl	bd764 <spark_subscribe>
    LTEAvail = false;
   b4b24:	4b03      	ldr	r3, [pc, #12]	; (b4b34 <_Z8setupLTEv+0x24>)
   b4b26:	701c      	strb	r4, [r3, #0]
}
   b4b28:	b002      	add	sp, #8
   b4b2a:	bd10      	pop	{r4, pc}
   b4b2c:	000b4a19 	.word	0x000b4a19
   b4b30:	000c5ee8 	.word	0x000c5ee8
   b4b34:	2003ddb4 	.word	0x2003ddb4

000b4b38 <_Z9setupXBeev>:
void setupXBee(){
   b4b38:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b3a:	f00c fd79 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b4b3e:	4908      	ldr	r1, [pc, #32]	; (b4b60 <_Z9setupXBeev+0x28>)
   b4b40:	f7ff fbd1 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b44:	2014      	movs	r0, #20
   b4b46:	f008 fef9 	bl	bd93c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b4a:	f00c fd71 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b4b4e:	4905      	ldr	r1, [pc, #20]	; (b4b64 <_Z9setupXBeev+0x2c>)
   b4b50:	f7ff fbc9 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b58:	2014      	movs	r0, #20
   b4b5a:	f008 beef 	b.w	bd93c <delay>
   b4b5e:	bf00      	nop
   b4b60:	000c7396 	.word	0x000c7396
   b4b64:	000c5c6d 	.word	0x000c5c6d

000b4b68 <_Z8setupGPSv>:
void setupGPS(){
   b4b68:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4b6a:	f00c fd21 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b4b6e:	2300      	movs	r3, #0
   b4b70:	4601      	mov	r1, r0
   b4b72:	9300      	str	r3, [sp, #0]
   b4b74:	4812      	ldr	r0, [pc, #72]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b76:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b7a:	2242      	movs	r2, #66	; 0x42
   b4b7c:	f007 ff2e 	bl	bc9dc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4b80:	b940      	cbnz	r0, b4b94 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b86:	f008 fed9 	bl	bd93c <delay>
        Serial.println("Error, Could not initialize GPS");
   b4b8a:	f00c fbb9 	bl	c1300 <_Z16_fetch_usbserialv>
   b4b8e:	490d      	ldr	r1, [pc, #52]	; (b4bc4 <_Z8setupGPSv+0x5c>)
   b4b90:	f00b ff0d 	bl	c09ae <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4b94:	f240 424c 	movw	r2, #1100	; 0x44c
   b4b98:	2101      	movs	r1, #1
   b4b9a:	4809      	ldr	r0, [pc, #36]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b9c:	f007 fe52 	bl	bc844 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4ba0:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ba4:	2201      	movs	r2, #1
   b4ba6:	2100      	movs	r1, #0
   b4ba8:	4805      	ldr	r0, [pc, #20]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4baa:	f007 fe2b 	bl	bc804 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4bae:	f00c fcff 	bl	c15b0 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4bb2:	4905      	ldr	r1, [pc, #20]	; (b4bc8 <_Z8setupGPSv+0x60>)
}
   b4bb4:	b003      	add	sp, #12
   b4bb6:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bba:	f00a bbe5 	b.w	bf388 <_ZN7TwoWire8setSpeedEm>
   b4bbe:	bf00      	nop
   b4bc0:	2003df68 	.word	0x2003df68
   b4bc4:	000c5eee 	.word	0x000c5eee
   b4bc8:	00061a80 	.word	0x00061a80
   b4bcc:	00000000 	.word	0x00000000

000b4bd0 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4bd0:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4bd2:	2015      	movs	r0, #21
   b4bd4:	f00c fcbe 	bl	c1554 <analogRead>
   b4bd8:	ee07 0a90 	vmov	s15, r0
   b4bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4be0:	4c37      	ldr	r4, [pc, #220]	; (b4cc0 <_Z12readPowerSysv+0xf0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4be2:	ee17 0a90 	vmov	r0, s15
   b4be6:	f00e fb67 	bl	c32b8 <__aeabi_f2d>
   b4bea:	a32d      	add	r3, pc, #180	; (adr r3, b4ca0 <_Z12readPowerSysv+0xd0>)
   b4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bf0:	f00e fbba 	bl	c3368 <__aeabi_dmul>
   b4bf4:	f00e feb0 	bl	c3958 <__aeabi_d2f>
   b4bf8:	4b32      	ldr	r3, [pc, #200]	; (b4cc4 <_Z12readPowerSysv+0xf4>)
   b4bfa:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4bfc:	f00e fb5c 	bl	c32b8 <__aeabi_f2d>
   b4c00:	a329      	add	r3, pc, #164	; (adr r3, b4ca8 <_Z12readPowerSysv+0xd8>)
   b4c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c06:	f00e f9f7 	bl	c2ff8 <__aeabi_dsub>
   b4c0a:	4b2f      	ldr	r3, [pc, #188]	; (b4cc8 <_Z12readPowerSysv+0xf8>)
   b4c0c:	2200      	movs	r2, #0
   b4c0e:	f00e fbab 	bl	c3368 <__aeabi_dmul>
   b4c12:	a327      	add	r3, pc, #156	; (adr r3, b4cb0 <_Z12readPowerSysv+0xe0>)
   b4c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c18:	f00e fcd0 	bl	c35bc <__aeabi_ddiv>
   b4c1c:	f00e fe54 	bl	c38c8 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4c20:	2864      	cmp	r0, #100	; 0x64
   b4c22:	4603      	mov	r3, r0
   b4c24:	bfa8      	it	ge
   b4c26:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4c2c:	2814      	cmp	r0, #20
   b4c2e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4c30:	4b26      	ldr	r3, [pc, #152]	; (b4ccc <_Z12readPowerSysv+0xfc>)
   b4c32:	bfcc      	ite	gt
   b4c34:	2000      	movgt	r0, #0
   b4c36:	2001      	movle	r0, #1
   b4c38:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4c3a:	2010      	movs	r0, #16
   b4c3c:	f00c fc8a 	bl	c1554 <analogRead>
   b4c40:	ee07 0a90 	vmov	s15, r0
   b4c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c48:	ee17 0a90 	vmov	r0, s15
   b4c4c:	f00e fb34 	bl	c32b8 <__aeabi_f2d>
   b4c50:	4b1f      	ldr	r3, [pc, #124]	; (b4cd0 <_Z12readPowerSysv+0x100>)
   b4c52:	2200      	movs	r2, #0
   b4c54:	f00e fb88 	bl	c3368 <__aeabi_dmul>
   b4c58:	a317      	add	r3, pc, #92	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c5e:	f00e fcad 	bl	c35bc <__aeabi_ddiv>
   b4c62:	f00e fe79 	bl	c3958 <__aeabi_d2f>
   b4c66:	4b1b      	ldr	r3, [pc, #108]	; (b4cd4 <_Z12readPowerSysv+0x104>)
   b4c68:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4c6a:	2011      	movs	r0, #17
   b4c6c:	f00c fc72 	bl	c1554 <analogRead>
   b4c70:	ee07 0a90 	vmov	s15, r0
   b4c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c78:	ee17 0a90 	vmov	r0, s15
   b4c7c:	f00e fb1c 	bl	c32b8 <__aeabi_f2d>
   b4c80:	4b15      	ldr	r3, [pc, #84]	; (b4cd8 <_Z12readPowerSysv+0x108>)
   b4c82:	2200      	movs	r2, #0
   b4c84:	f00e fb70 	bl	c3368 <__aeabi_dmul>
   b4c88:	a30b      	add	r3, pc, #44	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c8e:	f00e fc95 	bl	c35bc <__aeabi_ddiv>
   b4c92:	f00e fe61 	bl	c3958 <__aeabi_d2f>
   b4c96:	4b11      	ldr	r3, [pc, #68]	; (b4cdc <_Z12readPowerSysv+0x10c>)
   b4c98:	6018      	str	r0, [r3, #0]
}
   b4c9a:	7820      	ldrb	r0, [r4, #0]
   b4c9c:	bd10      	pop	{r4, pc}
   b4c9e:	bf00      	nop
   b4ca0:	6e04c059 	.word	0x6e04c059
   b4ca4:	3f73cddd 	.word	0x3f73cddd
   b4ca8:	66666666 	.word	0x66666666
   b4cac:	402a6666 	.word	0x402a6666
   b4cb0:	99999998 	.word	0x99999998
   b4cb4:	40099999 	.word	0x40099999
   b4cb8:	00000000 	.word	0x00000000
   b4cbc:	40affe00 	.word	0x40affe00
   b4cc0:	2003dde0 	.word	0x2003dde0
   b4cc4:	2003dde4 	.word	0x2003dde4
   b4cc8:	40590000 	.word	0x40590000
   b4ccc:	2003df14 	.word	0x2003df14
   b4cd0:	40408000 	.word	0x40408000
   b4cd4:	2003dddc 	.word	0x2003dddc
   b4cd8:	40308000 	.word	0x40308000
   b4cdc:	2003e590 	.word	0x2003e590

000b4ce0 <_Z15getPositionDatav>:
bool getPositionData(){
   b4ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ce4:	ed2d 8b04 	vpush	{d8-d9}
    if(myGPS.isConnected()){
   b4ce8:	4895      	ldr	r0, [pc, #596]	; (b4f40 <_Z15getPositionDatav+0x260>)
bool getPositionData(){
   b4cea:	b08c      	sub	sp, #48	; 0x30
    if(myGPS.isConnected()){
   b4cec:	f240 414c 	movw	r1, #1100	; 0x44c
   b4cf0:	f007 fe50 	bl	bc994 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b4cf4:	4604      	mov	r4, r0
   b4cf6:	2800      	cmp	r0, #0
   b4cf8:	f000 8111 	beq.w	b4f1e <_Z15getPositionDatav+0x23e>
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4cfc:	f240 414c 	movw	r1, #1100	; 0x44c
   b4d00:	488f      	ldr	r0, [pc, #572]	; (b4f40 <_Z15getPositionDatav+0x260>)
   b4d02:	ed9f 8a90 	vldr	s16, [pc, #576]	; b4f44 <_Z15getPositionDatav+0x264>
   b4d06:	4e90      	ldr	r6, [pc, #576]	; (b4f48 <_Z15getPositionDatav+0x268>)
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d08:	4d90      	ldr	r5, [pc, #576]	; (b4f4c <_Z15getPositionDatav+0x26c>)
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d0a:	f8df 8270 	ldr.w	r8, [pc, #624]	; b4f7c <_Z15getPositionDatav+0x29c>
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4d0e:	f007 fee4 	bl	bcada <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b4d12:	ee07 0a90 	vmov	s15, r0
   b4d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d1a:	f240 414c 	movw	r1, #1100	; 0x44c
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4d1e:	ee87 7a88 	vdiv.f32	s14, s15, s16
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d22:	4887      	ldr	r0, [pc, #540]	; (b4f40 <_Z15getPositionDatav+0x260>)
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4d24:	ed86 7a00 	vstr	s14, [r6]
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d28:	f007 feb4 	bl	bca94 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b4d2c:	ee07 0a90 	vmov	s15, r0
   b4d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        lis3mdl.read();      // get X Y and Z data at once
   b4d34:	4886      	ldr	r0, [pc, #536]	; (b4f50 <_Z15getPositionDatav+0x270>)
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d36:	ee87 7a88 	vdiv.f32	s14, s15, s16
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d3a:	ed9f 8a86 	vldr	s16, [pc, #536]	; b4f54 <_Z15getPositionDatav+0x274>
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d3e:	ed85 7a00 	vstr	s14, [r5]
        lis3mdl.read();      // get X Y and Z data at once
   b4d42:	f002 fdc3 	bl	b78cc <_ZN16Adafruit_LIS3MDL4readEv>
        lis3mdl.getEvent(&event);
   b4d46:	a903      	add	r1, sp, #12
   b4d48:	4881      	ldr	r0, [pc, #516]	; (b4f50 <_Z15getPositionDatav+0x270>)
   b4d4a:	f002 fe05 	bl	b7958 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4d4e:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
   b4d52:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4d56:	f00c fe57 	bl	c1a08 <atan2f>
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d5a:	ee60 7a08 	vmul.f32	s15, s0, s16
   b4d5e:	ee17 0a90 	vmov	r0, s15
   b4d62:	f00e faa9 	bl	c32b8 <__aeabi_f2d>
   b4d66:	a372      	add	r3, pc, #456	; (adr r3, b4f30 <_Z15getPositionDatav+0x250>)
   b4d68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d6c:	f00e fc26 	bl	c35bc <__aeabi_ddiv>
   b4d70:	f00e fdaa 	bl	c38c8 <__aeabi_d2iz>
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d74:	edd8 7a00 	vldr	s15, [r8]
   b4d78:	ed9f 6a77 	vldr	s12, [pc, #476]	; b4f58 <_Z15getPositionDatav+0x278>
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d7c:	4b77      	ldr	r3, [pc, #476]	; (b4f5c <_Z15getPositionDatav+0x27c>)
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d7e:	eef4 7ac6 	vcmpe.f32	s15, s12
   b4d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d86:	6018      	str	r0, [r3, #0]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d88:	f2c0 80c9 	blt.w	b4f1e <_Z15getPositionDatav+0x23e>
   b4d8c:	eddf 6a74 	vldr	s13, [pc, #464]	; b4f60 <_Z15getPositionDatav+0x280>
   b4d90:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d98:	f200 80c1 	bhi.w	b4f1e <_Z15getPositionDatav+0x23e>
   b4d9c:	4f71      	ldr	r7, [pc, #452]	; (b4f64 <_Z15getPositionDatav+0x284>)
   b4d9e:	ed97 7a00 	vldr	s14, [r7]
   b4da2:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b4da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4daa:	f2c0 80b8 	blt.w	b4f1e <_Z15getPositionDatav+0x23e>
   b4dae:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4db6:	f200 80b2 	bhi.w	b4f1e <_Z15getPositionDatav+0x23e>
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4dba:	edd5 0a00 	vldr	s1, [r5]
   b4dbe:	ed96 0a00 	vldr	s0, [r6]
   b4dc2:	ee77 0a60 	vsub.f32	s1, s14, s1
   b4dc6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b4dca:	f00c fe1d 	bl	c1a08 <atan2f>
   b4dce:	ee60 7a08 	vmul.f32	s15, s0, s16
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4dd2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4dd6:	ee17 0a90 	vmov	r0, s15
   b4dda:	f00e fa6d 	bl	c32b8 <__aeabi_f2d>
   b4dde:	a354      	add	r3, pc, #336	; (adr r3, b4f30 <_Z15getPositionDatav+0x250>)
   b4de0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4de4:	f00e fbea 	bl	c35bc <__aeabi_ddiv>
   b4de8:	f00e fd6e 	bl	c38c8 <__aeabi_d2iz>
            float dLat = deg2rad(targetLat-latitude);
   b4dec:	edd6 8a00 	vldr	s17, [r6]
   b4df0:	edd8 9a00 	vldr	s19, [r8]
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4df4:	4b5c      	ldr	r3, [pc, #368]	; (b4f68 <_Z15getPositionDatav+0x288>)
            travelDistance = 6371.0 * c; // Distance in km
   b4df6:	4e5d      	ldr	r6, [pc, #372]	; (b4f6c <_Z15getPositionDatav+0x28c>)
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4df8:	6018      	str	r0, [r3, #0]
  return deg * (3.14159/180);
   b4dfa:	ee79 7ae8 	vsub.f32	s15, s19, s17
   b4dfe:	ee17 0a90 	vmov	r0, s15
   b4e02:	f00e fa59 	bl	c32b8 <__aeabi_f2d>
   b4e06:	a34c      	add	r3, pc, #304	; (adr r3, b4f38 <_Z15getPositionDatav+0x258>)
   b4e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e0c:	f00e faac 	bl	c3368 <__aeabi_dmul>
   b4e10:	f00e fda2 	bl	c3958 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e14:	ee07 0a90 	vmov	s15, r0
   b4e18:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e1c:	f00c fd7e 	bl	c191c <sinf>
  return deg * (3.14159/180);
   b4e20:	ee18 0a90 	vmov	r0, s17
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e24:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b4e28:	f00e fa46 	bl	c32b8 <__aeabi_f2d>
   b4e2c:	a342      	add	r3, pc, #264	; (adr r3, b4f38 <_Z15getPositionDatav+0x258>)
   b4e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e32:	f00e fa99 	bl	c3368 <__aeabi_dmul>
   b4e36:	f00e fd8f 	bl	c3958 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e3a:	ee00 0a10 	vmov	s0, r0
   b4e3e:	f00c fd35 	bl	c18ac <cosf>
  return deg * (3.14159/180);
   b4e42:	ee19 0a90 	vmov	r0, s19
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e46:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b4e4a:	f00e fa35 	bl	c32b8 <__aeabi_f2d>
   b4e4e:	a33a      	add	r3, pc, #232	; (adr r3, b4f38 <_Z15getPositionDatav+0x258>)
   b4e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e54:	f00e fa88 	bl	c3368 <__aeabi_dmul>
   b4e58:	f00e fd7e 	bl	c3958 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e5c:	ee00 0a10 	vmov	s0, r0
   b4e60:	f00c fd24 	bl	c18ac <cosf>
            float dLon = deg2rad(targetLon-longitude);
   b4e64:	ed97 7a00 	vldr	s14, [r7]
   b4e68:	edd5 7a00 	vldr	s15, [r5]
  return deg * (3.14159/180);
   b4e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e70:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b4e74:	ee17 0a90 	vmov	r0, s15
   b4e78:	f00e fa1e 	bl	c32b8 <__aeabi_f2d>
   b4e7c:	a32e      	add	r3, pc, #184	; (adr r3, b4f38 <_Z15getPositionDatav+0x258>)
   b4e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e82:	f00e fa71 	bl	c3368 <__aeabi_dmul>
   b4e86:	f00e fd67 	bl	c3958 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e8a:	ee07 0a90 	vmov	s15, r0
   b4e8e:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e92:	f00c fd43 	bl	c191c <sinf>
   b4e96:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b4e9a:	ee68 8a80 	vmul.f32	s17, s17, s0
   b4e9e:	ee28 8a80 	vmul.f32	s16, s17, s0
   b4ea2:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4ea6:	eeb0 0a48 	vmov.f32	s0, s16
   b4eaa:	f00c fdaf 	bl	c1a0c <sqrtf>
            float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b4eae:	ee18 0a10 	vmov	r0, s16
   b4eb2:	ee10 5a10 	vmov	r5, s0
   b4eb6:	f00e f9ff 	bl	c32b8 <__aeabi_f2d>
   b4eba:	4602      	mov	r2, r0
   b4ebc:	460b      	mov	r3, r1
   b4ebe:	2000      	movs	r0, #0
   b4ec0:	492b      	ldr	r1, [pc, #172]	; (b4f70 <_Z15getPositionDatav+0x290>)
   b4ec2:	f00e f899 	bl	c2ff8 <__aeabi_dsub>
   b4ec6:	ec41 0b10 	vmov	d0, r0, r1
   b4eca:	f00c fd63 	bl	c1994 <sqrt>
      return atan2(__type(__y), __type(__x));
   b4ece:	4628      	mov	r0, r5
   b4ed0:	ed8d 0b00 	vstr	d0, [sp]
   b4ed4:	f00e f9f0 	bl	c32b8 <__aeabi_f2d>
   b4ed8:	ed9d 1b00 	vldr	d1, [sp]
   b4edc:	ec41 0b10 	vmov	d0, r0, r1
   b4ee0:	f00c fd56 	bl	c1990 <atan2>
   b4ee4:	ec53 2b10 	vmov	r2, r3, d0
   b4ee8:	ee10 0a10 	vmov	r0, s0
   b4eec:	4619      	mov	r1, r3
   b4eee:	f00e f885 	bl	c2ffc <__adddf3>
   b4ef2:	f00e fd31 	bl	c3958 <__aeabi_d2f>
            travelDistance = 6371.0 * c; // Distance in km
   b4ef6:	eddf 7a1f 	vldr	s15, [pc, #124]	; b4f74 <_Z15getPositionDatav+0x294>
   b4efa:	ee07 0a10 	vmov	s14, r0
   b4efe:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4f02:	edc6 7a00 	vstr	s15, [r6]
            Serial.printlnf("Distance: %f",travelDistance);
   b4f06:	f00c f9fb 	bl	c1300 <_Z16_fetch_usbserialv>
   b4f0a:	4605      	mov	r5, r0
   b4f0c:	6830      	ldr	r0, [r6, #0]
   b4f0e:	f00e f9d3 	bl	c32b8 <__aeabi_f2d>
   b4f12:	4602      	mov	r2, r0
   b4f14:	460b      	mov	r3, r1
   b4f16:	4628      	mov	r0, r5
   b4f18:	4917      	ldr	r1, [pc, #92]	; (b4f78 <_Z15getPositionDatav+0x298>)
   b4f1a:	f7ff fa1d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4f1e:	4620      	mov	r0, r4
   b4f20:	b00c      	add	sp, #48	; 0x30
   b4f22:	ecbd 8b04 	vpop	{d8-d9}
   b4f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f2a:	bf00      	nop
   b4f2c:	f3af 8000 	nop.w
   b4f30:	54442d18 	.word	0x54442d18
   b4f34:	400921fb 	.word	0x400921fb
   b4f38:	a50de270 	.word	0xa50de270
   b4f3c:	3f91df45 	.word	0x3f91df45
   b4f40:	2003df68 	.word	0x2003df68
   b4f44:	49742400 	.word	0x49742400
   b4f48:	2003de38 	.word	0x2003de38
   b4f4c:	2003df10 	.word	0x2003df10
   b4f50:	2003de58 	.word	0x2003de58
   b4f54:	43340000 	.word	0x43340000
   b4f58:	c2b40000 	.word	0xc2b40000
   b4f5c:	2003dde8 	.word	0x2003dde8
   b4f60:	42b40000 	.word	0x42b40000
   b4f64:	2003e5dc 	.word	0x2003e5dc
   b4f68:	2003e5e4 	.word	0x2003e5e4
   b4f6c:	2003e5e0 	.word	0x2003e5e0
   b4f70:	3ff00000 	.word	0x3ff00000
   b4f74:	45c71800 	.word	0x45c71800
   b4f78:	000c5f0e 	.word	0x000c5f0e
   b4f7c:	2003e5d8 	.word	0x2003e5d8

000b4f80 <_Z12updateMotorsv>:
void updateMotors(){
   b4f80:	b538      	push	{r3, r4, r5, lr}
    if(updateMotorControl){
   b4f82:	4d0e      	ldr	r5, [pc, #56]	; (b4fbc <_Z12updateMotorsv+0x3c>)
   b4f84:	782b      	ldrb	r3, [r5, #0]
   b4f86:	b1bb      	cbz	r3, b4fb8 <_Z12updateMotorsv+0x38>
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f88:	4b0d      	ldr	r3, [pc, #52]	; (b4fc0 <_Z12updateMotorsv+0x40>)
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f8a:	4c0e      	ldr	r4, [pc, #56]	; (b4fc4 <_Z12updateMotorsv+0x44>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f8c:	781a      	ldrb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4f8e:	480e      	ldr	r0, [pc, #56]	; (b4fc8 <_Z12updateMotorsv+0x48>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f90:	3a5b      	subs	r2, #91	; 0x5b
   b4f92:	2a20      	cmp	r2, #32
   b4f94:	bf9c      	itt	ls
   b4f96:	227b      	movls	r2, #123	; 0x7b
   b4f98:	701a      	strbls	r2, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f9a:	7822      	ldrb	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b4f9c:	7819      	ldrb	r1, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f9e:	3a5b      	subs	r2, #91	; 0x5b
   b4fa0:	2a20      	cmp	r2, #32
   b4fa2:	bf9c      	itt	ls
   b4fa4:	227b      	movls	r2, #123	; 0x7b
   b4fa6:	7022      	strbls	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b4fa8:	f00b fd73 	bl	c0a92 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4fac:	7821      	ldrb	r1, [r4, #0]
   b4fae:	4807      	ldr	r0, [pc, #28]	; (b4fcc <_Z12updateMotorsv+0x4c>)
   b4fb0:	f00b fd6f 	bl	c0a92 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4fb4:	2300      	movs	r3, #0
   b4fb6:	702b      	strb	r3, [r5, #0]
}
   b4fb8:	bd38      	pop	{r3, r4, r5, pc}
   b4fba:	bf00      	nop
   b4fbc:	2003e5f0 	.word	0x2003e5f0
   b4fc0:	2003e58c 	.word	0x2003e58c
   b4fc4:	2003e58d 	.word	0x2003e58d
   b4fc8:	2003dd94 	.word	0x2003dd94
   b4fcc:	2003dda4 	.word	0x2003dda4

000b4fd0 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4fd4:	4da4      	ldr	r5, [pc, #656]	; (b5268 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b4fd6:	b0ab      	sub	sp, #172	; 0xac
   b4fd8:	f008 f966 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4fdc:	682b      	ldr	r3, [r5, #0]
   b4fde:	4283      	cmp	r3, r0
   b4fe0:	f080 80f3 	bcs.w	b51ca <_Z13sensorHandlerv+0x1fa>
   b4fe4:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5298 <_Z13sensorHandlerv+0x2c8>
   b4fe8:	f89b 3000 	ldrb.w	r3, [fp]
   b4fec:	2b00      	cmp	r3, #0
   b4fee:	f000 80ec 	beq.w	b51ca <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b4ff2:	f00c fadd 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b4ff6:	2301      	movs	r3, #1
   b4ff8:	2214      	movs	r2, #20
   b4ffa:	2163      	movs	r1, #99	; 0x63
   b4ffc:	f00a f9e5 	bl	bf3ca <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5000:	f00c fad6 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5004:	6803      	ldr	r3, [r0, #0]
   b5006:	695b      	ldr	r3, [r3, #20]
   b5008:	4798      	blx	r3
        int c = 0;
   b500a:	ac16      	add	r4, sp, #88	; 0x58
   b500c:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b500e:	f00c facf 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5012:	6803      	ldr	r3, [r0, #0]
   b5014:	691b      	ldr	r3, [r3, #16]
   b5016:	4798      	blx	r3
   b5018:	b138      	cbz	r0, b502a <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b501a:	f00c fac9 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b501e:	6803      	ldr	r3, [r0, #0]
   b5020:	695b      	ldr	r3, [r3, #20]
   b5022:	4798      	blx	r3
   b5024:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5028:	e7f1      	b.n	b500e <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b502a:	4630      	mov	r0, r6
   b502c:	f00e fd08 	bl	c3a40 <atof>
   b5030:	ec51 0b10 	vmov	r0, r1, d0
   b5034:	f00e fc90 	bl	c3958 <__aeabi_d2f>
   b5038:	f8df a260 	ldr.w	sl, [pc, #608]	; b529c <_Z13sensorHandlerv+0x2cc>
   b503c:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b5040:	f00c fab6 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5044:	2301      	movs	r3, #1
   b5046:	2214      	movs	r2, #20
   b5048:	2164      	movs	r1, #100	; 0x64
   b504a:	f00a f9be 	bl	bf3ca <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b504e:	f00c faaf 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5052:	6803      	ldr	r3, [r0, #0]
   b5054:	695b      	ldr	r3, [r3, #20]
   b5056:	4798      	blx	r3
        c = 0;
   b5058:	ac1b      	add	r4, sp, #108	; 0x6c
   b505a:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b505c:	f00c faa8 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5060:	6803      	ldr	r3, [r0, #0]
   b5062:	691b      	ldr	r3, [r3, #16]
   b5064:	4798      	blx	r3
   b5066:	b138      	cbz	r0, b5078 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5068:	f00c faa2 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b506c:	6803      	ldr	r3, [r0, #0]
   b506e:	695b      	ldr	r3, [r3, #20]
   b5070:	4798      	blx	r3
   b5072:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5076:	e7f1      	b.n	b505c <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5078:	4630      	mov	r0, r6
   b507a:	f00e fce1 	bl	c3a40 <atof>
        Wire.requestFrom(COND, 20, 1);
   b507e:	f00c fa97 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5082:	2301      	movs	r3, #1
   b5084:	2214      	movs	r2, #20
   b5086:	2165      	movs	r1, #101	; 0x65
   b5088:	f00a f99f 	bl	bf3ca <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b508c:	f00c fa90 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5090:	6803      	ldr	r3, [r0, #0]
   b5092:	695b      	ldr	r3, [r3, #20]
   b5094:	4798      	blx	r3
        c = 0;
   b5096:	ac20      	add	r4, sp, #128	; 0x80
   b5098:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b509a:	f00c fa89 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b509e:	6803      	ldr	r3, [r0, #0]
   b50a0:	691b      	ldr	r3, [r3, #16]
   b50a2:	4798      	blx	r3
   b50a4:	b138      	cbz	r0, b50b6 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b50a6:	f00c fa83 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b50aa:	6803      	ldr	r3, [r0, #0]
   b50ac:	695b      	ldr	r3, [r3, #20]
   b50ae:	4798      	blx	r3
   b50b0:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b50b4:	e7f1      	b.n	b509a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b50b6:	4630      	mov	r0, r6
   b50b8:	f00e fcc2 	bl	c3a40 <atof>
   b50bc:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b50c0:	f00c fa76 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b50c4:	2301      	movs	r3, #1
   b50c6:	2214      	movs	r2, #20
   b50c8:	2166      	movs	r1, #102	; 0x66
   b50ca:	f00a f97e 	bl	bf3ca <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b50ce:	f00c fa6f 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b50d2:	6803      	ldr	r3, [r0, #0]
   b50d4:	695b      	ldr	r3, [r3, #20]
   b50d6:	4798      	blx	r3
        c = 0;
   b50d8:	af25      	add	r7, sp, #148	; 0x94
   b50da:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b50dc:	f00c fa68 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b50e0:	6803      	ldr	r3, [r0, #0]
   b50e2:	691b      	ldr	r3, [r3, #16]
   b50e4:	4798      	blx	r3
   b50e6:	4604      	mov	r4, r0
   b50e8:	b138      	cbz	r0, b50fa <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b50ea:	f00c fa61 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b50ee:	6803      	ldr	r3, [r0, #0]
   b50f0:	695b      	ldr	r3, [r3, #20]
   b50f2:	4798      	blx	r3
   b50f4:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b50f8:	e7f0      	b.n	b50dc <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b50fa:	4630      	mov	r0, r6
   b50fc:	f00e fca0 	bl	c3a40 <atof>
        if(logSensors){
   b5100:	4b5a      	ldr	r3, [pc, #360]	; (b526c <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b5102:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b5106:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b5108:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b510c:	2b00      	cmp	r3, #0
   b510e:	d05c      	beq.n	b51ca <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5110:	f00c f81a 	bl	c1148 <_ZN9TimeClass5monthEv>
   b5114:	9011      	str	r0, [sp, #68]	; 0x44
   b5116:	f00c f80b 	bl	c1130 <_ZN9TimeClass3dayEv>
   b511a:	4604      	mov	r4, r0
   b511c:	f00c f81c 	bl	c1158 <_ZN9TimeClass4yearEv>
   b5120:	4683      	mov	fp, r0
   b5122:	f00b ffe1 	bl	c10e8 <_ZN9TimeClass4hourEv>
   b5126:	9010      	str	r0, [sp, #64]	; 0x40
   b5128:	f00b ffea 	bl	c1100 <_ZN9TimeClass6minuteEv>
   b512c:	900f      	str	r0, [sp, #60]	; 0x3c
   b512e:	f00b fff3 	bl	c1118 <_ZN9TimeClass6secondEv>
   b5132:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b5134:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5136:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b5138:	9004      	str	r0, [sp, #16]
   b513a:	e9cd b201 	strd	fp, r2, [sp, #4]
   b513e:	9103      	str	r1, [sp, #12]
   b5140:	4a4b      	ldr	r2, [pc, #300]	; (b5270 <_Z13sensorHandlerv+0x2a0>)
   b5142:	9400      	str	r4, [sp, #0]
   b5144:	2110      	movs	r1, #16
   b5146:	a812      	add	r0, sp, #72	; 0x48
   b5148:	f008 fbac 	bl	bd8a4 <snprintf>
   b514c:	4849      	ldr	r0, [pc, #292]	; (b5274 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b514e:	7c03      	ldrb	r3, [r0, #16]
   b5150:	b92b      	cbnz	r3, b515e <_Z13sensorHandlerv+0x18e>
   b5152:	4949      	ldr	r1, [pc, #292]	; (b5278 <_Z13sensorHandlerv+0x2a8>)
   b5154:	f244 2202 	movw	r2, #16898	; 0x4202
   b5158:	3010      	adds	r0, #16
   b515a:	f7ff fa25 	bl	b45a8 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b515e:	4649      	mov	r1, r9
   b5160:	4640      	mov	r0, r8
   b5162:	f00e fbf9 	bl	c3958 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5166:	f00e f8a7 	bl	c32b8 <__aeabi_f2d>
   b516a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b516e:	4b43      	ldr	r3, [pc, #268]	; (b527c <_Z13sensorHandlerv+0x2ac>)
   b5170:	6818      	ldr	r0, [r3, #0]
   b5172:	f00e f8a1 	bl	c32b8 <__aeabi_f2d>
   b5176:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b517a:	4b41      	ldr	r3, [pc, #260]	; (b5280 <_Z13sensorHandlerv+0x2b0>)
   b517c:	6818      	ldr	r0, [r3, #0]
   b517e:	f00e f89b 	bl	c32b8 <__aeabi_f2d>
   b5182:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5186:	f8da 0000 	ldr.w	r0, [sl]
   b518a:	f00e f895 	bl	c32b8 <__aeabi_f2d>
   b518e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b5192:	4639      	mov	r1, r7
   b5194:	4630      	mov	r0, r6
   b5196:	f00e fbdf 	bl	c3958 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b519a:	f00e f88d 	bl	c32b8 <__aeabi_f2d>
   b519e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b51a2:	4b38      	ldr	r3, [pc, #224]	; (b5284 <_Z13sensorHandlerv+0x2b4>)
   b51a4:	6818      	ldr	r0, [r3, #0]
   b51a6:	f00e f887 	bl	c32b8 <__aeabi_f2d>
   b51aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b51ae:	4b36      	ldr	r3, [pc, #216]	; (b5288 <_Z13sensorHandlerv+0x2b8>)
   b51b0:	6818      	ldr	r0, [r3, #0]
   b51b2:	f00e f881 	bl	c32b8 <__aeabi_f2d>
   b51b6:	aa12      	add	r2, sp, #72	; 0x48
   b51b8:	e9cd 0100 	strd	r0, r1, [sp]
   b51bc:	4933      	ldr	r1, [pc, #204]	; (b528c <_Z13sensorHandlerv+0x2bc>)
   b51be:	482d      	ldr	r0, [pc, #180]	; (b5274 <_Z13sensorHandlerv+0x2a4>)
   b51c0:	f7ff f8ca 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b51c4:	4832      	ldr	r0, [pc, #200]	; (b5290 <_Z13sensorHandlerv+0x2c0>)
   b51c6:	f001 f9ff 	bl	b65c8 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b51ca:	4c32      	ldr	r4, [pc, #200]	; (b5294 <_Z13sensorHandlerv+0x2c4>)
   b51cc:	f008 f86c 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   b51d0:	6823      	ldr	r3, [r4, #0]
   b51d2:	4283      	cmp	r3, r0
   b51d4:	d244      	bcs.n	b5260 <_Z13sensorHandlerv+0x290>
   b51d6:	f008 f867 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b51da:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b51de:	6020      	str	r0, [r4, #0]
   b51e0:	f008 f862 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b51e4:	f200 3039 	addw	r0, r0, #825	; 0x339
   b51e8:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b51ea:	f00c f9e1 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b51ee:	2163      	movs	r1, #99	; 0x63
   b51f0:	f00a f904 	bl	bf3fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51f4:	f00c f9dc 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b51f8:	2172      	movs	r1, #114	; 0x72
   b51fa:	f7ff f81d 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b51fe:	f00c f9d7 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5202:	f00a f902 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b5206:	f00c f9d3 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b520a:	2164      	movs	r1, #100	; 0x64
   b520c:	f00a f8f6 	bl	bf3fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5210:	f00c f9ce 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5214:	2172      	movs	r1, #114	; 0x72
   b5216:	f7ff f80f 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b521a:	f00c f9c9 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b521e:	f00a f8f4 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b5222:	f00c f9c5 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5226:	2165      	movs	r1, #101	; 0x65
   b5228:	f00a f8e8 	bl	bf3fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b522c:	f00c f9c0 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5230:	2172      	movs	r1, #114	; 0x72
   b5232:	f7ff f801 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5236:	f00c f9bb 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b523a:	f00a f8e6 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b523e:	f00c f9b7 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5242:	2166      	movs	r1, #102	; 0x66
   b5244:	f00a f8da 	bl	bf3fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5248:	f00c f9b2 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b524c:	2172      	movs	r1, #114	; 0x72
   b524e:	f7fe fff3 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5252:	f00c f9ad 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5256:	f00a f8d8 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b525a:	4b0f      	ldr	r3, [pc, #60]	; (b5298 <_Z13sensorHandlerv+0x2c8>)
   b525c:	2201      	movs	r2, #1
   b525e:	701a      	strb	r2, [r3, #0]
}
   b5260:	b02b      	add	sp, #172	; 0xac
   b5262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5266:	bf00      	nop
   b5268:	2003ddec 	.word	0x2003ddec
   b526c:	2003df0d 	.word	0x2003df0d
   b5270:	000c5f1b 	.word	0x000c5f1b
   b5274:	2003df34 	.word	0x2003df34
   b5278:	2003ddf2 	.word	0x2003ddf2
   b527c:	2003e580 	.word	0x2003e580
   b5280:	2003e57c 	.word	0x2003e57c
   b5284:	2003df10 	.word	0x2003df10
   b5288:	2003de38 	.word	0x2003de38
   b528c:	000c5f34 	.word	0x000c5f34
   b5290:	2003df44 	.word	0x2003df44
   b5294:	2003e588 	.word	0x2003e588
   b5298:	2003ddf0 	.word	0x2003ddf0
   b529c:	2003e584 	.word	0x2003e584

000b52a0 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b52a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b52a4:	4e3c      	ldr	r6, [pc, #240]	; (b5398 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b52a6:	f8df 8104 	ldr.w	r8, [pc, #260]	; b53ac <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b52aa:	f8df 9104 	ldr.w	r9, [pc, #260]	; b53b0 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b52ae:	b089      	sub	sp, #36	; 0x24
   b52b0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b52b2:	f00c f9bd 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b52b6:	6803      	ldr	r3, [r0, #0]
   b52b8:	691b      	ldr	r3, [r3, #16]
   b52ba:	4798      	blx	r3
   b52bc:	2800      	cmp	r0, #0
   b52be:	d066      	beq.n	b538e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b52c0:	f00c f9b6 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b52c4:	220a      	movs	r2, #10
   b52c6:	4601      	mov	r1, r0
   b52c8:	4638      	mov	r0, r7
   b52ca:	f00b fd85 	bl	c0dd8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b52ce:	68bb      	ldr	r3, [r7, #8]
   b52d0:	3307      	adds	r3, #7
   b52d2:	f023 0307 	bic.w	r3, r3, #7
    }
   b52d6:	466d      	mov	r5, sp
        char buffer[data.length()];
   b52d8:	ebad 0d03 	sub.w	sp, sp, r3
   b52dc:	46ea      	mov	sl, sp
   b52de:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b52e0:	68b9      	ldr	r1, [r7, #8]
   b52e2:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b52e6:	458b      	cmp	fp, r1
   b52e8:	f103 0401 	add.w	r4, r3, #1
   b52ec:	d207      	bcs.n	b52fe <_Z11XBeeHandlerv+0x5e>
   b52ee:	4659      	mov	r1, fp
   b52f0:	4638      	mov	r0, r7
   b52f2:	f00b fe69 	bl	c0fc8 <_ZNK6String6charAtEj>
   b52f6:	4623      	mov	r3, r4
   b52f8:	f80a 000b 	strb.w	r0, [sl, fp]
   b52fc:	e7f0      	b.n	b52e0 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b52fe:	2901      	cmp	r1, #1
   b5300:	d90a      	bls.n	b5318 <_Z11XBeeHandlerv+0x78>
   b5302:	3901      	subs	r1, #1
   b5304:	4638      	mov	r0, r7
   b5306:	f00b fe5f 	bl	c0fc8 <_ZNK6String6charAtEj>
   b530a:	280d      	cmp	r0, #13
   b530c:	bf01      	itttt	eq
   b530e:	68bb      	ldreq	r3, [r7, #8]
   b5310:	4453      	addeq	r3, sl
   b5312:	2200      	moveq	r2, #0
   b5314:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5318:	2201      	movs	r2, #1
   b531a:	2102      	movs	r1, #2
   b531c:	4650      	mov	r0, sl
   b531e:	f7ff f9f5 	bl	b470c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5322:	f00b ffed 	bl	c1300 <_Z16_fetch_usbserialv>
   b5326:	4631      	mov	r1, r6
   b5328:	f00b fb41 	bl	c09ae <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b532c:	f00b ffe8 	bl	c1300 <_Z16_fetch_usbserialv>
   b5330:	6839      	ldr	r1, [r7, #0]
   b5332:	f00b fb3c 	bl	c09ae <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5336:	f89a 3000 	ldrb.w	r3, [sl]
   b533a:	3b42      	subs	r3, #66	; 0x42
   b533c:	2b01      	cmp	r3, #1
   b533e:	d803      	bhi.n	b5348 <_Z11XBeeHandlerv+0xa8>
   b5340:	f007 ffb2 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   b5344:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5348:	f899 3000 	ldrb.w	r3, [r9]
   b534c:	b1d3      	cbz	r3, b5384 <_Z11XBeeHandlerv+0xe4>
   b534e:	4813      	ldr	r0, [pc, #76]	; (b539c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5350:	7c03      	ldrb	r3, [r0, #16]
   b5352:	b92b      	cbnz	r3, b5360 <_Z11XBeeHandlerv+0xc0>
   b5354:	4912      	ldr	r1, [pc, #72]	; (b53a0 <_Z11XBeeHandlerv+0x100>)
   b5356:	f244 2202 	movw	r2, #16898	; 0x4202
   b535a:	3010      	adds	r0, #16
   b535c:	f7ff f924 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5360:	4639      	mov	r1, r7
   b5362:	f107 0010 	add.w	r0, r7, #16
   b5366:	f00b fde5 	bl	c0f34 <_ZN6StringC1ERKS_>
   b536a:	490e      	ldr	r1, [pc, #56]	; (b53a4 <_Z11XBeeHandlerv+0x104>)
   b536c:	480b      	ldr	r0, [pc, #44]	; (b539c <_Z11XBeeHandlerv+0xfc>)
   b536e:	f107 0210 	add.w	r2, r7, #16
   b5372:	f7fe fff1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5376:	f107 0010 	add.w	r0, r7, #16
   b537a:	f00b fd45 	bl	c0e08 <_ZN6StringD1Ev>
            logFile.close();
   b537e:	480a      	ldr	r0, [pc, #40]	; (b53a8 <_Z11XBeeHandlerv+0x108>)
   b5380:	f001 f922 	bl	b65c8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5384:	4638      	mov	r0, r7
   b5386:	f00b fd3f 	bl	c0e08 <_ZN6StringD1Ev>
   b538a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b538c:	e791      	b.n	b52b2 <_Z11XBeeHandlerv+0x12>
}
   b538e:	3724      	adds	r7, #36	; 0x24
   b5390:	46bd      	mov	sp, r7
   b5392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5396:	bf00      	nop
   b5398:	000c5f4c 	.word	0x000c5f4c
   b539c:	2003deb4 	.word	0x2003deb4
   b53a0:	2003de10 	.word	0x2003de10
   b53a4:	000c5f5e 	.word	0x000c5f5e
   b53a8:	2003dec4 	.word	0x2003dec4
   b53ac:	2003ddc8 	.word	0x2003ddc8
   b53b0:	2003df0c 	.word	0x2003df0c

000b53b4 <_Z13dataOffloaderv>:
void dataOffloader(){
   b53b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b53b8:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b53ba:	f00b ffa1 	bl	c1300 <_Z16_fetch_usbserialv>
   b53be:	4961      	ldr	r1, [pc, #388]	; (b5544 <_Z13dataOffloaderv+0x190>)
   b53c0:	f00b faf5 	bl	c09ae <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b53c4:	4960      	ldr	r1, [pc, #384]	; (b5548 <_Z13dataOffloaderv+0x194>)
   b53c6:	4861      	ldr	r0, [pc, #388]	; (b554c <_Z13dataOffloaderv+0x198>)
   b53c8:	2200      	movs	r2, #0
   b53ca:	f7ff f8ed 	bl	b45a8 <_ZN7FatFile4openEPKci>
   b53ce:	b948      	cbnz	r0, b53e4 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b53d0:	4b5f      	ldr	r3, [pc, #380]	; (b5550 <_Z13dataOffloaderv+0x19c>)
   b53d2:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b53d4:	f00b ff94 	bl	c1300 <_Z16_fetch_usbserialv>
   b53d8:	495e      	ldr	r1, [pc, #376]	; (b5554 <_Z13dataOffloaderv+0x1a0>)
}
   b53da:	b02d      	add	sp, #180	; 0xb4
   b53dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b53e0:	f00b bae5 	b.w	c09ae <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b53e4:	f00b ff8c 	bl	c1300 <_Z16_fetch_usbserialv>
   b53e8:	495b      	ldr	r1, [pc, #364]	; (b5558 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b53ea:	4d5c      	ldr	r5, [pc, #368]	; (b555c <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b53ec:	f00b fadf 	bl	c09ae <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b53f0:	f008 fe08 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53f4:	f008 fe64 	bl	be0c0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b53f8:	4604      	mov	r4, r0
   b53fa:	b948      	cbnz	r0, b5410 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b53fc:	f008 fe02 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5400:	4622      	mov	r2, r4
   b5402:	4629      	mov	r1, r5
   b5404:	f008 feaf 	bl	be166 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5408:	200a      	movs	r0, #10
   b540a:	f008 fa97 	bl	bd93c <delay>
    while(!BLE.connected()){
   b540e:	e7ef      	b.n	b53f0 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b5410:	f00b ff76 	bl	c1300 <_Z16_fetch_usbserialv>
   b5414:	4952      	ldr	r1, [pc, #328]	; (b5560 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5416:	4f4d      	ldr	r7, [pc, #308]	; (b554c <_Z13dataOffloaderv+0x198>)
   b5418:	4d52      	ldr	r5, [pc, #328]	; (b5564 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b541a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5588 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b541e:	f00b fac6 	bl	c09ae <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5422:	2200      	movs	r2, #0
   b5424:	4639      	mov	r1, r7
   b5426:	4628      	mov	r0, r5
   b5428:	f001 f85b 	bl	b64e2 <_ZN7FatFile8openNextEPS_i>
   b542c:	b1f8      	cbz	r0, b546e <_Z13dataOffloaderv+0xba>
   b542e:	f008 fde9 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5432:	f008 fe45 	bl	be0c0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5436:	b1d0      	cbz	r0, b546e <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5438:	221e      	movs	r2, #30
   b543a:	a901      	add	r1, sp, #4
   b543c:	4628      	mov	r0, r5
   b543e:	f001 fa17 	bl	b6870 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5442:	f00b ff5d 	bl	c1300 <_Z16_fetch_usbserialv>
   b5446:	4641      	mov	r1, r8
   b5448:	aa01      	add	r2, sp, #4
   b544a:	f7fe ff85 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b544e:	a801      	add	r0, sp, #4
   b5450:	f00e fbc9 	bl	c3be6 <strlen>
   b5454:	ab01      	add	r3, sp, #4
   b5456:	3804      	subs	r0, #4
   b5458:	4418      	add	r0, r3
   b545a:	f00e fbcd 	bl	c3bf8 <strlwr>
   b545e:	4942      	ldr	r1, [pc, #264]	; (b5568 <_Z13dataOffloaderv+0x1b4>)
   b5460:	f00e fc23 	bl	c3caa <strstr>
   b5464:	b9d8      	cbnz	r0, b549e <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5466:	4628      	mov	r0, r5
   b5468:	f001 f8ae 	bl	b65c8 <_ZN7FatFile5closeEv>
   b546c:	e7d9      	b.n	b5422 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b546e:	4837      	ldr	r0, [pc, #220]	; (b554c <_Z13dataOffloaderv+0x198>)
   b5470:	f001 f8aa 	bl	b65c8 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5474:	2226      	movs	r2, #38	; 0x26
   b5476:	2100      	movs	r1, #0
   b5478:	a809      	add	r0, sp, #36	; 0x24
   b547a:	f00e fb29 	bl	c3ad0 <memset>
    strcpy(fileCode,"filedone");
   b547e:	493b      	ldr	r1, [pc, #236]	; (b556c <_Z13dataOffloaderv+0x1b8>)
   b5480:	a809      	add	r0, sp, #36	; 0x24
   b5482:	f00e fb8b 	bl	c3b9c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5486:	2300      	movs	r3, #0
   b5488:	2226      	movs	r2, #38	; 0x26
   b548a:	a909      	add	r1, sp, #36	; 0x24
   b548c:	4838      	ldr	r0, [pc, #224]	; (b5570 <_Z13dataOffloaderv+0x1bc>)
   b548e:	f008 fca9 	bl	bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5492:	4b2f      	ldr	r3, [pc, #188]	; (b5550 <_Z13dataOffloaderv+0x19c>)
   b5494:	2200      	movs	r2, #0
   b5496:	701a      	strb	r2, [r3, #0]
}
   b5498:	b02d      	add	sp, #180	; 0xb4
   b549a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b549e:	2226      	movs	r2, #38	; 0x26
   b54a0:	2100      	movs	r1, #0
   b54a2:	a809      	add	r0, sp, #36	; 0x24
   b54a4:	f00e fb14 	bl	c3ad0 <memset>
            strcpy(fileCode,"filename");
   b54a8:	4932      	ldr	r1, [pc, #200]	; (b5574 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b54aa:	4e33      	ldr	r6, [pc, #204]	; (b5578 <_Z13dataOffloaderv+0x1c4>)
   b54ac:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5570 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b54b0:	a809      	add	r0, sp, #36	; 0x24
   b54b2:	f00e fb73 	bl	c3b9c <strcpy>
            strcat(fileCode,namebuf);
   b54b6:	a901      	add	r1, sp, #4
   b54b8:	a809      	add	r0, sp, #36	; 0x24
   b54ba:	f00e fb3f 	bl	c3b3c <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b54be:	f00b ff1f 	bl	c1300 <_Z16_fetch_usbserialv>
   b54c2:	492e      	ldr	r1, [pc, #184]	; (b557c <_Z13dataOffloaderv+0x1c8>)
   b54c4:	aa09      	add	r2, sp, #36	; 0x24
   b54c6:	f7fe ff47 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b54ca:	2300      	movs	r3, #0
   b54cc:	2226      	movs	r2, #38	; 0x26
   b54ce:	a909      	add	r1, sp, #36	; 0x24
   b54d0:	4827      	ldr	r0, [pc, #156]	; (b5570 <_Z13dataOffloaderv+0x1bc>)
   b54d2:	f008 fc87 	bl	bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b54d6:	f00b ff13 	bl	c1300 <_Z16_fetch_usbserialv>
   b54da:	4929      	ldr	r1, [pc, #164]	; (b5580 <_Z13dataOffloaderv+0x1cc>)
   b54dc:	aa01      	add	r2, sp, #4
   b54de:	f7fe ff3b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b54e2:	2096      	movs	r0, #150	; 0x96
   b54e4:	f008 fa2a 	bl	bd93c <delay>
            noInterrupts();
   b54e8:	f009 ff92 	bl	bf410 <_Z12noInterruptsv>
            while(myFile.available()){
   b54ec:	4630      	mov	r0, r6
   b54ee:	f7fe fdf6 	bl	b40de <_ZN4File9availableEv>
   b54f2:	4604      	mov	r4, r0
   b54f4:	b188      	cbz	r0, b551a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b54f6:	2264      	movs	r2, #100	; 0x64
   b54f8:	2100      	movs	r1, #0
   b54fa:	a813      	add	r0, sp, #76	; 0x4c
   b54fc:	f00e fae8 	bl	c3ad0 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5500:	aa13      	add	r2, sp, #76	; 0x4c
   b5502:	2364      	movs	r3, #100	; 0x64
   b5504:	210d      	movs	r1, #13
   b5506:	4630      	mov	r0, r6
   b5508:	f00b fc4e 	bl	c0da8 <_ZN6Stream14readBytesUntilEcPcj>
   b550c:	2300      	movs	r3, #0
   b550e:	2264      	movs	r2, #100	; 0x64
   b5510:	a913      	add	r1, sp, #76	; 0x4c
   b5512:	4648      	mov	r0, r9
   b5514:	f008 fc66 	bl	bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5518:	e7e8      	b.n	b54ec <_Z13dataOffloaderv+0x138>
            interrupts();
   b551a:	f009 ff7b 	bl	bf414 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b551e:	2226      	movs	r2, #38	; 0x26
   b5520:	4621      	mov	r1, r4
   b5522:	a809      	add	r0, sp, #36	; 0x24
   b5524:	f00e fad4 	bl	c3ad0 <memset>
            strcpy(fileCode,"filecomp");
   b5528:	4916      	ldr	r1, [pc, #88]	; (b5584 <_Z13dataOffloaderv+0x1d0>)
   b552a:	a809      	add	r0, sp, #36	; 0x24
   b552c:	f00e fb36 	bl	c3b9c <strcpy>
   b5530:	4623      	mov	r3, r4
   b5532:	2226      	movs	r2, #38	; 0x26
   b5534:	a909      	add	r1, sp, #36	; 0x24
   b5536:	480e      	ldr	r0, [pc, #56]	; (b5570 <_Z13dataOffloaderv+0x1bc>)
   b5538:	f008 fc54 	bl	bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b553c:	2096      	movs	r0, #150	; 0x96
   b553e:	f008 f9fd 	bl	bd93c <delay>
   b5542:	e790      	b.n	b5466 <_Z13dataOffloaderv+0xb2>
   b5544:	000c5f7f 	.word	0x000c5f7f
   b5548:	000c5f9c 	.word	0x000c5f9c
   b554c:	2003de90 	.word	0x2003de90
   b5550:	2003e0e8 	.word	0x2003e0e8
   b5554:	000c5f9e 	.word	0x000c5f9e
   b5558:	000c5fcb 	.word	0x000c5fcb
   b555c:	2003ddd0 	.word	0x2003ddd0
   b5560:	000c5feb 	.word	0x000c5feb
   b5564:	2003df44 	.word	0x2003df44
   b5568:	000c6029 	.word	0x000c6029
   b556c:	000c602e 	.word	0x000c602e
   b5570:	2003e0e0 	.word	0x2003e0e0
   b5574:	000c6037 	.word	0x000c6037
   b5578:	2003df34 	.word	0x2003df34
   b557c:	000c6040 	.word	0x000c6040
   b5580:	000c6053 	.word	0x000c6053
   b5584:	000c607b 	.word	0x000c607b
   b5588:	000c6000 	.word	0x000c6000

000b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b558c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b558e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5590:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5592:	b17c      	cbz	r4, b55b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5594:	6863      	ldr	r3, [r4, #4]
   b5596:	3b01      	subs	r3, #1
   b5598:	6063      	str	r3, [r4, #4]
   b559a:	b95b      	cbnz	r3, b55b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b559c:	6823      	ldr	r3, [r4, #0]
   b559e:	4620      	mov	r0, r4
   b55a0:	689b      	ldr	r3, [r3, #8]
   b55a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b55a4:	68a3      	ldr	r3, [r4, #8]
   b55a6:	3b01      	subs	r3, #1
   b55a8:	60a3      	str	r3, [r4, #8]
   b55aa:	b91b      	cbnz	r3, b55b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b55ac:	6823      	ldr	r3, [r4, #0]
   b55ae:	4620      	mov	r0, r4
   b55b0:	68db      	ldr	r3, [r3, #12]
   b55b2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b55b4:	4628      	mov	r0, r5
   b55b6:	bd38      	pop	{r3, r4, r5, pc}

000b55b8 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b55b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55bc:	b084      	sub	sp, #16
   b55be:	af02      	add	r7, sp, #8
   b55c0:	4680      	mov	r8, r0
   b55c2:	4691      	mov	r9, r2
   b55c4:	461e      	mov	r6, r3
   b55c6:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b55c8:	f00e fb0d 	bl	c3be6 <strlen>
   b55cc:	3009      	adds	r0, #9
   b55ce:	f020 0107 	bic.w	r1, r0, #7
   b55d2:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55d6:	4640      	mov	r0, r8
   b55d8:	f00e fb05 	bl	c3be6 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b55dc:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55e0:	4925      	ldr	r1, [pc, #148]	; (b5678 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b55e2:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55e4:	4603      	mov	r3, r0
   b55e6:	4642      	mov	r2, r8
   b55e8:	4620      	mov	r0, r4
   b55ea:	f008 f94b 	bl	bd884 <sprintf>
    if(sendLTE || sendMode == 4){
   b55ee:	f1ba 0f00 	cmp.w	sl, #0
   b55f2:	d101      	bne.n	b55f8 <_Z8sendDataPKchbbb+0x40>
   b55f4:	2d04      	cmp	r5, #4
   b55f6:	d10c      	bne.n	b5612 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b55f8:	4b20      	ldr	r3, [pc, #128]	; (b567c <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55fa:	4921      	ldr	r1, [pc, #132]	; (b5680 <_Z8sendDataPKchbbb+0xc8>)
   b55fc:	781b      	ldrb	r3, [r3, #0]
   b55fe:	f88d 3000 	strb.w	r3, [sp]
   b5602:	4638      	mov	r0, r7
   b5604:	233c      	movs	r3, #60	; 0x3c
   b5606:	4622      	mov	r2, r4
   b5608:	f009 fcd6 	bl	befb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b560c:	1d38      	adds	r0, r7, #4
   b560e:	f7ff ffbd 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5612:	f1b9 0f00 	cmp.w	r9, #0
   b5616:	d101      	bne.n	b561c <_Z8sendDataPKchbbb+0x64>
   b5618:	2d01      	cmp	r5, #1
   b561a:	d121      	bne.n	b5660 <_Z8sendDataPKchbbb+0xa8>
   b561c:	f008 fcf2 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5620:	f008 fd4e 	bl	be0c0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5624:	b1e0      	cbz	r0, b5660 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5626:	4620      	mov	r0, r4
   b5628:	f00e fadd 	bl	c3be6 <strlen>
   b562c:	3007      	adds	r0, #7
   b562e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5632:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5634:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5638:	4620      	mov	r0, r4
   b563a:	f00e fad4 	bl	c3be6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b563e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5642:	4602      	mov	r2, r0
   b5644:	4621      	mov	r1, r4
   b5646:	4648      	mov	r0, r9
   b5648:	f00e fa1a 	bl	c3a80 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b564c:	4620      	mov	r0, r4
   b564e:	f00e faca 	bl	c3be6 <strlen>
   b5652:	2300      	movs	r3, #0
   b5654:	4602      	mov	r2, r0
   b5656:	4649      	mov	r1, r9
   b5658:	480a      	ldr	r0, [pc, #40]	; (b5684 <_Z8sendDataPKchbbb+0xcc>)
   b565a:	f008 fbc3 	bl	bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b565e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5660:	b90e      	cbnz	r6, b5666 <_Z8sendDataPKchbbb+0xae>
   b5662:	2d02      	cmp	r5, #2
   b5664:	d104      	bne.n	b5670 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5666:	f00b ffe3 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b566a:	4621      	mov	r1, r4
   b566c:	f00b f99f 	bl	c09ae <_ZN5Print7printlnEPKc>
}
   b5670:	3708      	adds	r7, #8
   b5672:	46bd      	mov	sp, r7
   b5674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5678:	000c6084 	.word	0x000c6084
   b567c:	2003ddcc 	.word	0x2003ddcc
   b5680:	000c608b 	.word	0x000c608b
   b5684:	2003e5e8 	.word	0x2003e5e8

000b5688 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5688:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b568a:	4d27      	ldr	r5, [pc, #156]	; (b5728 <_Z16sendResponseDatav+0xa0>)
   b568c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b568e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5690:	2b00      	cmp	r3, #0
   b5692:	d046      	beq.n	b5722 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b5694:	2241      	movs	r2, #65	; 0x41
   b5696:	2100      	movs	r1, #0
   b5698:	a80b      	add	r0, sp, #44	; 0x2c
   b569a:	f00e fa19 	bl	c3ad0 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b569e:	4b23      	ldr	r3, [pc, #140]	; (b572c <_Z16sendResponseDatav+0xa4>)
   b56a0:	9308      	str	r3, [sp, #32]
   b56a2:	4b23      	ldr	r3, [pc, #140]	; (b5730 <_Z16sendResponseDatav+0xa8>)
   b56a4:	eddf 6a23 	vldr	s13, [pc, #140]	; b5734 <_Z16sendResponseDatav+0xac>
   b56a8:	ed93 7a00 	vldr	s14, [r3]
   b56ac:	4b22      	ldr	r3, [pc, #136]	; (b5738 <_Z16sendResponseDatav+0xb0>)
   b56ae:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b56b2:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b56b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56b8:	ed8d 7a07 	vstr	s14, [sp, #28]
   b56bc:	ed93 7a00 	vldr	s14, [r3]
   b56c0:	4b1e      	ldr	r3, [pc, #120]	; (b573c <_Z16sendResponseDatav+0xb4>)
   b56c2:	ee27 7a26 	vmul.f32	s14, s14, s13
   b56c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56ca:	ed8d 7a06 	vstr	s14, [sp, #24]
   b56ce:	ed93 7a00 	vldr	s14, [r3]
   b56d2:	4b1b      	ldr	r3, [pc, #108]	; (b5740 <_Z16sendResponseDatav+0xb8>)
   b56d4:	ee27 7a26 	vmul.f32	s14, s14, s13
   b56d8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56dc:	ed8d 7a05 	vstr	s14, [sp, #20]
   b56e0:	edd3 7a00 	vldr	s15, [r3]
   b56e4:	4b17      	ldr	r3, [pc, #92]	; (b5744 <_Z16sendResponseDatav+0xbc>)
   b56e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b56ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56ee:	edcd 7a04 	vstr	s15, [sp, #16]
   b56f2:	6818      	ldr	r0, [r3, #0]
   b56f4:	f00d fde0 	bl	c32b8 <__aeabi_f2d>
   b56f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b56fc:	4b12      	ldr	r3, [pc, #72]	; (b5748 <_Z16sendResponseDatav+0xc0>)
   b56fe:	6818      	ldr	r0, [r3, #0]
   b5700:	f00d fdda 	bl	c32b8 <__aeabi_f2d>
   b5704:	2201      	movs	r2, #1
   b5706:	e9cd 0100 	strd	r0, r1, [sp]
   b570a:	4910      	ldr	r1, [pc, #64]	; (b574c <_Z16sendResponseDatav+0xc4>)
   b570c:	a80b      	add	r0, sp, #44	; 0x2c
   b570e:	f008 f8b9 	bl	bd884 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5712:	7829      	ldrb	r1, [r5, #0]
   b5714:	9400      	str	r4, [sp, #0]
   b5716:	4623      	mov	r3, r4
   b5718:	4622      	mov	r2, r4
   b571a:	a80b      	add	r0, sp, #44	; 0x2c
   b571c:	f7ff ff4c 	bl	b55b8 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5720:	702c      	strb	r4, [r5, #0]
}
   b5722:	b01d      	add	sp, #116	; 0x74
   b5724:	bd30      	pop	{r4, r5, pc}
   b5726:	bf00      	nop
   b5728:	2003e0e9 	.word	0x2003e0e9
   b572c:	00010d88 	.word	0x00010d88
   b5730:	2003e580 	.word	0x2003e580
   b5734:	447a0000 	.word	0x447a0000
   b5738:	2003e578 	.word	0x2003e578
   b573c:	2003e584 	.word	0x2003e584
   b5740:	2003e57c 	.word	0x2003e57c
   b5744:	2003df10 	.word	0x2003df10
   b5748:	2003de38 	.word	0x2003de38
   b574c:	000c6093 	.word	0x000c6093

000b5750 <_Z12statusUpdatev>:
void statusUpdate(){
   b5750:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5752:	4e2c      	ldr	r6, [pc, #176]	; (b5804 <_Z12statusUpdatev+0xb4>)
   b5754:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5756:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5758:	2b00      	cmp	r3, #0
   b575a:	d049      	beq.n	b57f0 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b575c:	4a2a      	ldr	r2, [pc, #168]	; (b5808 <_Z12statusUpdatev+0xb8>)
   b575e:	4b2b      	ldr	r3, [pc, #172]	; (b580c <_Z12statusUpdatev+0xbc>)
   b5760:	6810      	ldr	r0, [r2, #0]
   b5762:	781b      	ldrb	r3, [r3, #0]
   b5764:	9307      	str	r3, [sp, #28]
   b5766:	f00d fda7 	bl	c32b8 <__aeabi_f2d>
   b576a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b576e:	4a28      	ldr	r2, [pc, #160]	; (b5810 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5770:	4c28      	ldr	r4, [pc, #160]	; (b5814 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5772:	6810      	ldr	r0, [r2, #0]
   b5774:	f00d fda0 	bl	c32b8 <__aeabi_f2d>
   b5778:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b577c:	4a26      	ldr	r2, [pc, #152]	; (b5818 <_Z12statusUpdatev+0xc8>)
   b577e:	9b07      	ldr	r3, [sp, #28]
   b5780:	7812      	ldrb	r2, [r2, #0]
   b5782:	4926      	ldr	r1, [pc, #152]	; (b581c <_Z12statusUpdatev+0xcc>)
   b5784:	9200      	str	r2, [sp, #0]
   b5786:	a809      	add	r0, sp, #36	; 0x24
   b5788:	2201      	movs	r2, #1
   b578a:	f008 f87b 	bl	bd884 <sprintf>
        Serial.println(updateStr);
   b578e:	f00b fdb7 	bl	c1300 <_Z16_fetch_usbserialv>
   b5792:	a909      	add	r1, sp, #36	; 0x24
   b5794:	f00b f90b 	bl	c09ae <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5798:	f00b fdb2 	bl	c1300 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b579c:	8821      	ldrh	r1, [r4, #0]
   b579e:	4605      	mov	r5, r0
   b57a0:	220a      	movs	r2, #10
   b57a2:	f00b f910 	bl	c09c6 <_ZN5Print11printNumberEmh>
        n += println();
   b57a6:	4628      	mov	r0, r5
   b57a8:	f00b f8f5 	bl	c0996 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b57ac:	4b1c      	ldr	r3, [pc, #112]	; (b5820 <_Z12statusUpdatev+0xd0>)
   b57ae:	781b      	ldrb	r3, [r3, #0]
   b57b0:	bb03      	cbnz	r3, b57f4 <_Z12statusUpdatev+0xa4>
   b57b2:	4b1c      	ldr	r3, [pc, #112]	; (b5824 <_Z12statusUpdatev+0xd4>)
   b57b4:	781b      	ldrb	r3, [r3, #0]
   b57b6:	b9eb      	cbnz	r3, b57f4 <_Z12statusUpdatev+0xa4>
   b57b8:	8823      	ldrh	r3, [r4, #0]
   b57ba:	b1f3      	cbz	r3, b57fa <_Z12statusUpdatev+0xaa>
   b57bc:	f013 0303 	ands.w	r3, r3, #3
   b57c0:	d11b      	bne.n	b57fa <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b57c2:	2201      	movs	r2, #1
   b57c4:	9200      	str	r2, [sp, #0]
   b57c6:	4619      	mov	r1, r3
   b57c8:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b57ca:	a809      	add	r0, sp, #36	; 0x24
   b57cc:	f7ff fef4 	bl	b55b8 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b57d0:	8823      	ldrh	r3, [r4, #0]
   b57d2:	b10b      	cbz	r3, b57d8 <_Z12statusUpdatev+0x88>
   b57d4:	3b01      	subs	r3, #1
   b57d6:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b57d8:	2400      	movs	r4, #0
        delay(100);
   b57da:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b57dc:	7034      	strb	r4, [r6, #0]
        delay(100);
   b57de:	f008 f8ad 	bl	bd93c <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b57e2:	4811      	ldr	r0, [pc, #68]	; (b5828 <_Z12statusUpdatev+0xd8>)
   b57e4:	9400      	str	r4, [sp, #0]
   b57e6:	4623      	mov	r3, r4
   b57e8:	2201      	movs	r2, #1
   b57ea:	4621      	mov	r1, r4
   b57ec:	f7ff fee4 	bl	b55b8 <_Z8sendDataPKchbbb>
}
   b57f0:	b010      	add	sp, #64	; 0x40
   b57f2:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b57f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b57f8:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b57fa:	2100      	movs	r1, #0
   b57fc:	2301      	movs	r3, #1
   b57fe:	9100      	str	r1, [sp, #0]
   b5800:	461a      	mov	r2, r3
   b5802:	e7e2      	b.n	b57ca <_Z12statusUpdatev+0x7a>
   b5804:	2003e5d4 	.word	0x2003e5d4
   b5808:	2003df10 	.word	0x2003df10
   b580c:	2003dde0 	.word	0x2003dde0
   b5810:	2003de38 	.word	0x2003de38
   b5814:	2003ddb6 	.word	0x2003ddb6
   b5818:	2003e5b4 	.word	0x2003e5b4
   b581c:	000c60b7 	.word	0x000c60b7
   b5820:	2003dd84 	.word	0x2003dd84
   b5824:	2003ddc4 	.word	0x2003ddc4
   b5828:	000c60d0 	.word	0x000c60d0

000b582c <loop>:
void loop(){
   b582c:	b508      	push	{r3, lr}
    if(getPositionData()){
   b582e:	f7ff fa57 	bl	b4ce0 <_Z15getPositionDatav>
    readPowerSys();
   b5832:	f7ff f9cd 	bl	b4bd0 <_Z12readPowerSysv>
    sensorHandler();
   b5836:	f7ff fbcb 	bl	b4fd0 <_Z13sensorHandlerv>
    XBeeHandler();
   b583a:	f7ff fd31 	bl	b52a0 <_Z11XBeeHandlerv>
    statusUpdate();
   b583e:	f7ff ff87 	bl	b5750 <_Z12statusUpdatev>
    updateMotors();
   b5842:	f7ff fb9d 	bl	b4f80 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5846:	4b06      	ldr	r3, [pc, #24]	; (b5860 <loop+0x34>)
   b5848:	781b      	ldrb	r3, [r3, #0]
   b584a:	b10b      	cbz	r3, b5850 <loop+0x24>
   b584c:	f7ff fdb2 	bl	b53b4 <_Z13dataOffloaderv>
    sendResponseData();
   b5850:	f7ff ff1a 	bl	b5688 <_Z16sendResponseDatav>
}
   b5854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
   b5858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b585c:	f008 b86e 	b.w	bd93c <delay>
   b5860:	2003e0e8 	.word	0x2003e0e8

000b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5864:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5866:	e9d0 5300 	ldrd	r5, r3, [r0]
   b586a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b586c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b586e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5872:	42ae      	cmp	r6, r5
   b5874:	d004      	beq.n	b5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5876:	4628      	mov	r0, r5
   b5878:	f00b fac6 	bl	c0e08 <_ZN6StringD1Ev>
   b587c:	3514      	adds	r5, #20
   b587e:	e7f8      	b.n	b5872 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5880:	6820      	ldr	r0, [r4, #0]
   b5882:	f007 ffef 	bl	bd864 <free>
    AllocatorT::free(data_);
}
   b5886:	4620      	mov	r0, r4
   b5888:	bd70      	pop	{r4, r5, r6, pc}

000b588a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b588a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b588c:	4616      	mov	r6, r2
   b588e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5890:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5892:	e9c0 2200 	strd	r2, r2, [r0]
   b5896:	4604      	mov	r4, r0
   b5898:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b589a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b589c:	4619      	mov	r1, r3
   b589e:	a804      	add	r0, sp, #16
   b58a0:	f008 fa62 	bl	bdd68 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b58a4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b58a6:	4638      	mov	r0, r7
   b58a8:	f008 fa5e 	bl	bdd68 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b58ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b58ae:	9302      	str	r3, [sp, #8]
   b58b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b58b2:	4620      	mov	r0, r4
   b58b4:	e9cd 7300 	strd	r7, r3, [sp]
   b58b8:	4632      	mov	r2, r6
   b58ba:	ab04      	add	r3, sp, #16
   b58bc:	4629      	mov	r1, r5
   b58be:	f008 ffc9 	bl	be854 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b58c2:	4620      	mov	r0, r4
   b58c4:	b00f      	add	sp, #60	; 0x3c
   b58c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b58c8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b58ca:	4c0b      	ldr	r4, [pc, #44]	; (b58f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b58cc:	7821      	ldrb	r1, [r4, #0]
   b58ce:	f3bf 8f5b 	dmb	ish
   b58d2:	f011 0101 	ands.w	r1, r1, #1
   b58d6:	d10b      	bne.n	b58f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58d8:	4620      	mov	r0, r4
   b58da:	9101      	str	r1, [sp, #4]
   b58dc:	f7fe fbf0 	bl	b40c0 <__cxa_guard_acquire>
   b58e0:	9901      	ldr	r1, [sp, #4]
   b58e2:	b128      	cbz	r0, b58f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58e4:	4805      	ldr	r0, [pc, #20]	; (b58fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58e6:	f00b f942 	bl	c0b6e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b58ea:	4620      	mov	r0, r4
   b58ec:	f7fe fbed 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b58f0:	4802      	ldr	r0, [pc, #8]	; (b58fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58f2:	b002      	add	sp, #8
   b58f4:	bd10      	pop	{r4, pc}
   b58f6:	bf00      	nop
   b58f8:	2003dd78 	.word	0x2003dd78
   b58fc:	2003dd7c 	.word	0x2003dd7c

000b5900 <_Z8setupSPIv>:
void setupSPI(){
   b5900:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b5902:	f7ff ffe1 	bl	b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b590a:	2100      	movs	r1, #0
   b590c:	f00b f94d 	bl	c0baa <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5910:	f7ff ffda 	bl	b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5918:	4901      	ldr	r1, [pc, #4]	; (b5920 <_Z8setupSPIv+0x20>)
   b591a:	2201      	movs	r2, #1
   b591c:	f00b b9e4 	b.w	c0ce8 <_ZN8SPIClass13setClockSpeedEjj>
   b5920:	000f4240 	.word	0x000f4240

000b5924 <setup>:
void setup(){
   b5924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5928:	48bc      	ldr	r0, [pc, #752]	; (b5c1c <setup+0x2f8>)
    setLSpeed = 90;
   b592a:	4ebd      	ldr	r6, [pc, #756]	; (b5c20 <setup+0x2fc>)
   b592c:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b592e:	4dbd      	ldr	r5, [pc, #756]	; (b5c24 <setup+0x300>)
   b5930:	f003 0303 	and.w	r3, r3, #3
   b5934:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5938:	b093      	sub	sp, #76	; 0x4c
   b593a:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b593c:	2200      	movs	r2, #0
   b593e:	2101      	movs	r1, #1
   b5940:	3004      	adds	r0, #4
   b5942:	f007 fea1 	bl	bd688 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5946:	2101      	movs	r1, #1
   b5948:	2002      	movs	r0, #2
   b594a:	f00b fdd9 	bl	c1500 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b594e:	2101      	movs	r1, #1
   b5950:	201c      	movs	r0, #28
   b5952:	f00b fdd5 	bl	c1500 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b5956:	2100      	movs	r1, #0
   b5958:	201d      	movs	r0, #29
   b595a:	f00b fdd1 	bl	c1500 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b595e:	2100      	movs	r1, #0
   b5960:	2002      	movs	r0, #2
   b5962:	f00b fdde 	bl	c1522 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b5966:	2100      	movs	r1, #0
   b5968:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b596a:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b596c:	f00b fdd9 	bl	c1522 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5970:	27b4      	movs	r7, #180	; 0xb4
   b5972:	f007 fc99 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b5976:	235a      	movs	r3, #90	; 0x5a
   b5978:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b597a:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b597c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5980:	e9cd 4700 	strd	r4, r7, [sp]
   b5984:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5988:	2106      	movs	r1, #6
   b598a:	48a7      	ldr	r0, [pc, #668]	; (b5c28 <setup+0x304>)
   b598c:	f00b f8be 	bl	c0b0c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5994:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5998:	e9cd 4700 	strd	r4, r7, [sp]
   b599c:	2105      	movs	r1, #5
   b599e:	48a3      	ldr	r0, [pc, #652]	; (b5c2c <setup+0x308>)
    logSensors = true;
   b59a0:	4fa3      	ldr	r7, [pc, #652]	; (b5c30 <setup+0x30c>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b59a2:	f00b f8b3 	bl	c0b0c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b59a6:	7831      	ldrb	r1, [r6, #0]
   b59a8:	489f      	ldr	r0, [pc, #636]	; (b5c28 <setup+0x304>)
    logMessages = true;
   b59aa:	4ea2      	ldr	r6, [pc, #648]	; (b5c34 <setup+0x310>)
    ESCL.write(setLSpeed);
   b59ac:	f00b f871 	bl	c0a92 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b59b0:	7829      	ldrb	r1, [r5, #0]
   b59b2:	489e      	ldr	r0, [pc, #632]	; (b5c2c <setup+0x308>)
   b59b4:	f00b f86d 	bl	c0a92 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b59b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b59bc:	f007 ffbe 	bl	bd93c <delay>
    BLE.on();
   b59c0:	f008 fb20 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59c4:	f008 fb68 	bl	be098 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b59c8:	f008 fb1c 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59cc:	2108      	movs	r1, #8
   b59ce:	f008 fb6a 	bl	be0a6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b59d2:	f00b fc95 	bl	c1300 <_Z16_fetch_usbserialv>
   b59d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59da:	f00b fc81 	bl	c12e0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b59de:	f00b fe27 	bl	c1630 <_Z22__fetch_global_Serial1v>
   b59e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59e6:	f00b fc23 	bl	c1230 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b59ea:	f7ff ff89 	bl	b5900 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b59ee:	f7ff f8a3 	bl	b4b38 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b59f2:	f7ff f8b9 	bl	b4b68 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b59f6:	f7ff f88b 	bl	b4b10 <_Z8setupLTEv>
   b59fa:	f007 fc55 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b59fe:	4b8e      	ldr	r3, [pc, #568]	; (b5c38 <setup+0x314>)
   b5a00:	6018      	str	r0, [r3, #0]
   b5a02:	f007 fc51 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b5a06:	4b8d      	ldr	r3, [pc, #564]	; (b5c3c <setup+0x318>)
   b5a08:	6018      	str	r0, [r3, #0]
   b5a0a:	f007 fc4d 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5a0e:	4b8c      	ldr	r3, [pc, #560]	; (b5c40 <setup+0x31c>)
   b5a10:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b5a12:	4b8c      	ldr	r3, [pc, #560]	; (b5c44 <setup+0x320>)
   b5a14:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5a16:	4b8c      	ldr	r3, [pc, #560]	; (b5c48 <setup+0x324>)
   b5a18:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5a1a:	4b8c      	ldr	r3, [pc, #560]	; (b5c4c <setup+0x328>)
   b5a1c:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5a1e:	4b8c      	ldr	r3, [pc, #560]	; (b5c50 <setup+0x32c>)
   b5a20:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b5a22:	4b8c      	ldr	r3, [pc, #560]	; (b5c54 <setup+0x330>)
   b5a24:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5a26:	4b8c      	ldr	r3, [pc, #560]	; (b5c58 <setup+0x334>)
   b5a28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5a2c:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5a2e:	4b8b      	ldr	r3, [pc, #556]	; (b5c5c <setup+0x338>)
    logSensors = true;
   b5a30:	2501      	movs	r5, #1
    battPercent = 50;
   b5a32:	2232      	movs	r2, #50	; 0x32
   b5a34:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b5a36:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5a38:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b5a3a:	f008 fae3 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a3e:	4a88      	ldr	r2, [pc, #544]	; (b5c60 <setup+0x33c>)
   b5a40:	4601      	mov	r1, r0
   b5a42:	a80d      	add	r0, sp, #52	; 0x34
   b5a44:	f009 f830 	bl	beaa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a48:	a80d      	add	r0, sp, #52	; 0x34
   b5a4a:	f008 fbe0 	bl	be20e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5a4e:	f008 fad9 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a52:	4a84      	ldr	r2, [pc, #528]	; (b5c64 <setup+0x340>)
   b5a54:	4601      	mov	r1, r0
   b5a56:	a80d      	add	r0, sp, #52	; 0x34
   b5a58:	f009 f826 	bl	beaa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a5c:	a80d      	add	r0, sp, #52	; 0x34
   b5a5e:	f008 fbd6 	bl	be20e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b5a62:	f008 facf 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a66:	4a80      	ldr	r2, [pc, #512]	; (b5c68 <setup+0x344>)
   b5a68:	4601      	mov	r1, r0
   b5a6a:	a80d      	add	r0, sp, #52	; 0x34
   b5a6c:	f009 f81c 	bl	beaa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a70:	a80d      	add	r0, sp, #52	; 0x34
   b5a72:	f008 fbcc 	bl	be20e <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b5a76:	4b7d      	ldr	r3, [pc, #500]	; (b5c6c <setup+0x348>)
   b5a78:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b5a7a:	4b7d      	ldr	r3, [pc, #500]	; (b5c70 <setup+0x34c>)
        BleUuid tempUUID(uuid);
   b5a7c:	a80d      	add	r0, sp, #52	; 0x34
   b5a7e:	6819      	ldr	r1, [r3, #0]
   b5a80:	f008 f972 	bl	bdd68 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a84:	a80d      	add	r0, sp, #52	; 0x34
   b5a86:	f008 f8d1 	bl	bdc2c <_ZNK8particle7BleUuid4typeEv>
   b5a8a:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5a8c:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a8e:	2d00      	cmp	r5, #0
   b5a90:	f040 80b8 	bne.w	b5c04 <setup+0x2e0>
            uint16_t uuid16 = tempUUID.shorted();
   b5a94:	f008 f8e6 	bl	bdc64 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a98:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5a9a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a9e:	2302      	movs	r3, #2
   b5aa0:	aa09      	add	r2, sp, #36	; 0x24
   b5aa2:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5aa4:	4873      	ldr	r0, [pc, #460]	; (b5c74 <setup+0x350>)
   b5aa6:	f008 fcdd 	bl	be464 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5aaa:	2300      	movs	r3, #0
   b5aac:	496f      	ldr	r1, [pc, #444]	; (b5c6c <setup+0x348>)
   b5aae:	4871      	ldr	r0, [pc, #452]	; (b5c74 <setup+0x350>)
   b5ab0:	2208      	movs	r2, #8
   b5ab2:	f008 fcf5 	bl	be4a0 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5ab6:	f008 faa5 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5aba:	2200      	movs	r2, #0
   b5abc:	496d      	ldr	r1, [pc, #436]	; (b5c74 <setup+0x350>)
   b5abe:	f008 fb52 	bl	be166 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5ac2:	f00b fd75 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5ac6:	f009 fc63 	bl	bf390 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5aca:	f00b fd71 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5ace:	496a      	ldr	r1, [pc, #424]	; (b5c78 <setup+0x354>)
   b5ad0:	f009 fc5a 	bl	bf388 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b5ad4:	f00b fd6c 	bl	c15b0 <_Z19__fetch_global_Wirev>
   b5ad8:	211c      	movs	r1, #28
   b5ada:	4602      	mov	r2, r0
   b5adc:	4867      	ldr	r0, [pc, #412]	; (b5c7c <setup+0x358>)
   b5ade:	f002 f86e 	bl	b7bbe <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5ae2:	2800      	cmp	r0, #0
   b5ae4:	f040 8095 	bne.w	b5c12 <setup+0x2ee>
        Serial.println("Failed to find LIS3MDL chip");
   b5ae8:	f00b fc0a 	bl	c1300 <_Z16_fetch_usbserialv>
   b5aec:	4964      	ldr	r1, [pc, #400]	; (b5c80 <setup+0x35c>)
    else Serial.println("LIS3MDL Found!");
   b5aee:	f00a ff5e 	bl	c09ae <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b5af2:	4862      	ldr	r0, [pc, #392]	; (b5c7c <setup+0x358>)
   b5af4:	2101      	movs	r1, #1
   b5af6:	f001 ff5b 	bl	b79b0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b5afa:	4860      	ldr	r0, [pc, #384]	; (b5c7c <setup+0x358>)
   b5afc:	2100      	movs	r1, #0
   b5afe:	f001 ffbb 	bl	b7a78 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5b02:	485e      	ldr	r0, [pc, #376]	; (b5c7c <setup+0x358>)
   b5b04:	2101      	movs	r1, #1
   b5b06:	f001 ff85 	bl	b7a14 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_4_GAUSS);
   b5b0a:	485c      	ldr	r0, [pc, #368]	; (b5c7c <setup+0x358>)
   b5b0c:	2100      	movs	r1, #0
   b5b0e:	f001 ffce 	bl	b7aae <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5b12:	2401      	movs	r4, #1
   b5b14:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b5b16:	4859      	ldr	r0, [pc, #356]	; (b5c7c <setup+0x358>)
   b5b18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5b1c:	f002 f86e 	bl	b7bfc <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5b20:	4623      	mov	r3, r4
   b5b22:	462a      	mov	r2, r5
   b5b24:	4629      	mov	r1, r5
   b5b26:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b5b2a:	4854      	ldr	r0, [pc, #336]	; (b5c7c <setup+0x358>)
   b5b2c:	9400      	str	r4, [sp, #0]
   b5b2e:	f002 f87d 	bl	b7c2c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5b32:	f00b fb09 	bl	c1148 <_ZN9TimeClass5monthEv>
   b5b36:	9007      	str	r0, [sp, #28]
   b5b38:	f00b fafa 	bl	c1130 <_ZN9TimeClass3dayEv>
   b5b3c:	4680      	mov	r8, r0
   b5b3e:	f00b fb0b 	bl	c1158 <_ZN9TimeClass4yearEv>
   b5b42:	4681      	mov	r9, r0
   b5b44:	f00b fad0 	bl	c10e8 <_ZN9TimeClass4hourEv>
   b5b48:	4682      	mov	sl, r0
   b5b4a:	f00b fad9 	bl	c1100 <_ZN9TimeClass6minuteEv>
   b5b4e:	4683      	mov	fp, r0
   b5b50:	f00b fae2 	bl	c1118 <_ZN9TimeClass6secondEv>
   b5b54:	9b07      	ldr	r3, [sp, #28]
   b5b56:	4a4b      	ldr	r2, [pc, #300]	; (b5c84 <setup+0x360>)
   b5b58:	f8cd 8000 	str.w	r8, [sp]
   b5b5c:	e9cd b003 	strd	fp, r0, [sp, #12]
   b5b60:	2110      	movs	r1, #16
   b5b62:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b5b66:	a809      	add	r0, sp, #36	; 0x24
   b5b68:	f007 fe9c 	bl	bd8a4 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5b6c:	4946      	ldr	r1, [pc, #280]	; (b5c88 <setup+0x364>)
   b5b6e:	4847      	ldr	r0, [pc, #284]	; (b5c8c <setup+0x368>)
   b5b70:	f00e f814 	bl	c3b9c <strcpy>
    strcat(filename,timestamp);
   b5b74:	a909      	add	r1, sp, #36	; 0x24
   b5b76:	4845      	ldr	r0, [pc, #276]	; (b5c8c <setup+0x368>)
   b5b78:	f00d ffe0 	bl	c3b3c <strcat>
    strcpy(filenameMessages,filename);
   b5b7c:	4943      	ldr	r1, [pc, #268]	; (b5c8c <setup+0x368>)
   b5b7e:	4844      	ldr	r0, [pc, #272]	; (b5c90 <setup+0x36c>)
   b5b80:	f00e f80c 	bl	c3b9c <strcpy>
    strcat(filename,".csv");
   b5b84:	4943      	ldr	r1, [pc, #268]	; (b5c94 <setup+0x370>)
   b5b86:	4841      	ldr	r0, [pc, #260]	; (b5c8c <setup+0x368>)
   b5b88:	f00d ffd8 	bl	c3b3c <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5b8c:	4942      	ldr	r1, [pc, #264]	; (b5c98 <setup+0x374>)
   b5b8e:	4840      	ldr	r0, [pc, #256]	; (b5c90 <setup+0x36c>)
   b5b90:	f00d ffd4 	bl	c3b3c <strcat>
    Serial.println(filename);
   b5b94:	f00b fbb4 	bl	c1300 <_Z16_fetch_usbserialv>
   b5b98:	493c      	ldr	r1, [pc, #240]	; (b5c8c <setup+0x368>)
   b5b9a:	f00a ff08 	bl	c09ae <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5b9e:	f00b fbaf 	bl	c1300 <_Z16_fetch_usbserialv>
   b5ba2:	493b      	ldr	r1, [pc, #236]	; (b5c90 <setup+0x36c>)
   b5ba4:	f00a ff03 	bl	c09ae <_ZN5Print7printlnEPKc>
    watchdog.start();
   b5ba8:	483c      	ldr	r0, [pc, #240]	; (b5c9c <setup+0x378>)
   b5baa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bae:	f7fe fb83 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    motionTimer.start();
   b5bb2:	483b      	ldr	r0, [pc, #236]	; (b5ca0 <setup+0x37c>)
   b5bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bb8:	f7fe fb7e 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5bbc:	4839      	ldr	r0, [pc, #228]	; (b5ca4 <setup+0x380>)
   b5bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bc2:	f7fe fb79 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b5bc6:	4838      	ldr	r0, [pc, #224]	; (b5ca8 <setup+0x384>)
   b5bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bcc:	f7fe fb74 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b5bd0:	4b36      	ldr	r3, [pc, #216]	; (b5cac <setup+0x388>)
   b5bd2:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5bd4:	4836      	ldr	r0, [pc, #216]	; (b5cb0 <setup+0x38c>)
   b5bd6:	4b37      	ldr	r3, [pc, #220]	; (b5cb4 <setup+0x390>)
   b5bd8:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b5bdc:	aa0d      	add	r2, sp, #52	; 0x34
   b5bde:	2108      	movs	r1, #8
   b5be0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b5be4:	930f      	str	r3, [sp, #60]	; 0x3c
   b5be6:	f7fe fd53 	bl	b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5bea:	4604      	mov	r4, r0
   b5bec:	2800      	cmp	r0, #0
   b5bee:	d167      	bne.n	b5cc0 <setup+0x39c>
        Serial.println("Error: could not connect to SD card!");
   b5bf0:	f00b fb86 	bl	c1300 <_Z16_fetch_usbserialv>
   b5bf4:	4930      	ldr	r1, [pc, #192]	; (b5cb8 <setup+0x394>)
   b5bf6:	f00a feda 	bl	c09ae <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5bfa:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5bfc:	7034      	strb	r4, [r6, #0]
}
   b5bfe:	b013      	add	sp, #76	; 0x4c
   b5c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c04:	f008 f830 	bl	bdc68 <_ZNK8particle7BleUuid8rawBytesEv>
   b5c08:	9400      	str	r4, [sp, #0]
   b5c0a:	4602      	mov	r2, r0
   b5c0c:	2310      	movs	r3, #16
   b5c0e:	2107      	movs	r1, #7
   b5c10:	e748      	b.n	b5aa4 <setup+0x180>
    else Serial.println("LIS3MDL Found!");
   b5c12:	f00b fb75 	bl	c1300 <_Z16_fetch_usbserialv>
   b5c16:	4929      	ldr	r1, [pc, #164]	; (b5cbc <setup+0x398>)
   b5c18:	e769      	b.n	b5aee <setup+0x1ca>
   b5c1a:	bf00      	nop
   b5c1c:	2003e594 	.word	0x2003e594
   b5c20:	2003e58c 	.word	0x2003e58c
   b5c24:	2003e58d 	.word	0x2003e58d
   b5c28:	2003dd94 	.word	0x2003dd94
   b5c2c:	2003dda4 	.word	0x2003dda4
   b5c30:	2003df0d 	.word	0x2003df0d
   b5c34:	2003df0c 	.word	0x2003df0c
   b5c38:	2003e588 	.word	0x2003e588
   b5c3c:	2003ddec 	.word	0x2003ddec
   b5c40:	2003de34 	.word	0x2003de34
   b5c44:	2003ddc8 	.word	0x2003ddc8
   b5c48:	2003dd90 	.word	0x2003dd90
   b5c4c:	2003ddf0 	.word	0x2003ddf0
   b5c50:	2003e0e8 	.word	0x2003e0e8
   b5c54:	2003e0e9 	.word	0x2003e0e9
   b5c58:	2003ddb6 	.word	0x2003ddb6
   b5c5c:	2003dde0 	.word	0x2003dde0
   b5c60:	2003e5e8 	.word	0x2003e5e8
   b5c64:	2003e0ec 	.word	0x2003e0ec
   b5c68:	2003e0e0 	.word	0x2003e0e0
   b5c6c:	2003dd85 	.word	0x2003dd85
   b5c70:	2003db80 	.word	0x2003db80
   b5c74:	2003ddd0 	.word	0x2003ddd0
   b5c78:	00061a80 	.word	0x00061a80
   b5c7c:	2003de58 	.word	0x2003de58
   b5c80:	000c60de 	.word	0x000c60de
   b5c84:	000c5f1b 	.word	0x000c5f1b
   b5c88:	000c6109 	.word	0x000c6109
   b5c8c:	2003ddf2 	.word	0x2003ddf2
   b5c90:	2003de10 	.word	0x2003de10
   b5c94:	000c6029 	.word	0x000c6029
   b5c98:	000c6112 	.word	0x000c6112
   b5c9c:	2003e5f4 	.word	0x2003e5f4
   b5ca0:	2003df18 	.word	0x2003df18
   b5ca4:	2003de3c 	.word	0x2003de3c
   b5ca8:	2003e5b8 	.word	0x2003e5b8
   b5cac:	000c61d0 	.word	0x000c61d0
   b5cb0:	2003e0f4 	.word	0x2003e0f4
   b5cb4:	007a1200 	.word	0x007a1200
   b5cb8:	000c611b 	.word	0x000c611b
   b5cbc:	000c60fa 	.word	0x000c60fa
    if(logSensors){
   b5cc0:	783b      	ldrb	r3, [r7, #0]
   b5cc2:	b17b      	cbz	r3, b5ce4 <setup+0x3c0>
   b5cc4:	4812      	ldr	r0, [pc, #72]	; (b5d10 <setup+0x3ec>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5cc6:	7c03      	ldrb	r3, [r0, #16]
   b5cc8:	b92b      	cbnz	r3, b5cd6 <setup+0x3b2>
   b5cca:	4912      	ldr	r1, [pc, #72]	; (b5d14 <setup+0x3f0>)
   b5ccc:	f244 2202 	movw	r2, #16898	; 0x4202
   b5cd0:	3010      	adds	r0, #16
   b5cd2:	f7fe fc69 	bl	b45a8 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5cd6:	4910      	ldr	r1, [pc, #64]	; (b5d18 <setup+0x3f4>)
   b5cd8:	480d      	ldr	r0, [pc, #52]	; (b5d10 <setup+0x3ec>)
   b5cda:	f00a fe68 	bl	c09ae <_ZN5Print7printlnEPKc>
        myFile.close();
   b5cde:	480f      	ldr	r0, [pc, #60]	; (b5d1c <setup+0x3f8>)
   b5ce0:	f000 fc72 	bl	b65c8 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5ce4:	7833      	ldrb	r3, [r6, #0]
   b5ce6:	2b00      	cmp	r3, #0
   b5ce8:	d089      	beq.n	b5bfe <setup+0x2da>
   b5cea:	480d      	ldr	r0, [pc, #52]	; (b5d20 <setup+0x3fc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5cec:	7c03      	ldrb	r3, [r0, #16]
   b5cee:	b92b      	cbnz	r3, b5cfc <setup+0x3d8>
   b5cf0:	490c      	ldr	r1, [pc, #48]	; (b5d24 <setup+0x400>)
   b5cf2:	f244 2202 	movw	r2, #16898	; 0x4202
   b5cf6:	3010      	adds	r0, #16
   b5cf8:	f7fe fc56 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5cfc:	490a      	ldr	r1, [pc, #40]	; (b5d28 <setup+0x404>)
   b5cfe:	4808      	ldr	r0, [pc, #32]	; (b5d20 <setup+0x3fc>)
   b5d00:	2201      	movs	r2, #1
   b5d02:	f7fe fb29 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5d06:	4809      	ldr	r0, [pc, #36]	; (b5d2c <setup+0x408>)
   b5d08:	f000 fc5e 	bl	b65c8 <_ZN7FatFile5closeEv>
}
   b5d0c:	e777      	b.n	b5bfe <setup+0x2da>
   b5d0e:	bf00      	nop
   b5d10:	2003df34 	.word	0x2003df34
   b5d14:	2003ddf2 	.word	0x2003ddf2
   b5d18:	000c6140 	.word	0x000c6140
   b5d1c:	2003df44 	.word	0x2003df44
   b5d20:	2003deb4 	.word	0x2003deb4
   b5d24:	2003de10 	.word	0x2003de10
   b5d28:	000c6196 	.word	0x000c6196
   b5d2c:	2003dec4 	.word	0x2003dec4

000b5d30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5d30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d34:	4604      	mov	r4, r0
   b5d36:	460d      	mov	r5, r1
   b5d38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d3a:	d916      	bls.n	b5d6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5d3c:	4290      	cmp	r0, r2
   b5d3e:	d215      	bcs.n	b5d6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5d40:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5d44:	1a75      	subs	r5, r6, r1
   b5d46:	f1a1 0714 	sub.w	r7, r1, #20
   b5d4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d4c:	42b7      	cmp	r7, r6
   b5d4e:	d01c      	beq.n	b5d8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5d50:	b12c      	cbz	r4, b5d5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5d52:	4631      	mov	r1, r6
   b5d54:	4620      	mov	r0, r4
   b5d56:	f00b f8d3 	bl	c0f00 <_ZN6StringC1EOS_>
   b5d5a:	7c33      	ldrb	r3, [r6, #16]
   b5d5c:	7423      	strb	r3, [r4, #16]
   b5d5e:	4630      	mov	r0, r6
   b5d60:	f00b f852 	bl	c0e08 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d64:	3e14      	subs	r6, #20
   b5d66:	3c14      	subs	r4, #20
   b5d68:	e7f0      	b.n	b5d4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d6a:	d00e      	beq.n	b5d8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5d6c:	42b5      	cmp	r5, r6
   b5d6e:	d00c      	beq.n	b5d8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5d70:	b12c      	cbz	r4, b5d7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5d72:	4629      	mov	r1, r5
   b5d74:	4620      	mov	r0, r4
   b5d76:	f00b f8c3 	bl	c0f00 <_ZN6StringC1EOS_>
   b5d7a:	7c2b      	ldrb	r3, [r5, #16]
   b5d7c:	7423      	strb	r3, [r4, #16]
   b5d7e:	4628      	mov	r0, r5
   b5d80:	f00b f842 	bl	c0e08 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d84:	3514      	adds	r5, #20
   b5d86:	3414      	adds	r4, #20
   b5d88:	e7f0      	b.n	b5d6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5d90:	2300      	movs	r3, #0
   b5d92:	e9c0 3300 	strd	r3, r3, [r0]
   b5d96:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d98:	684f      	ldr	r7, [r1, #4]
   b5d9a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d9c:	4604      	mov	r4, r0
   b5d9e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5da0:	dd23      	ble.n	b5dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5da2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5da6:	fb08 f007 	mul.w	r0, r8, r7
   b5daa:	f007 fd53 	bl	bd854 <malloc>
            if (!d) {
   b5dae:	4605      	mov	r5, r0
   b5db0:	b1d8      	cbz	r0, b5dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5db2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5db6:	fb08 1202 	mla	r2, r8, r2, r1
   b5dba:	f7ff ffb9 	bl	b5d30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5dbe:	6820      	ldr	r0, [r4, #0]
   b5dc0:	f007 fd50 	bl	bd864 <free>
        data_ = d;
   b5dc4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5dc6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5dc8:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5dcc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5dd0:	45b8      	cmp	r8, r7
   b5dd2:	d008      	beq.n	b5de6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5dd4:	4639      	mov	r1, r7
   b5dd6:	4628      	mov	r0, r5
   b5dd8:	f00b f8ac 	bl	c0f34 <_ZN6StringC1ERKS_>
   b5ddc:	7c3b      	ldrb	r3, [r7, #16]
   b5dde:	742b      	strb	r3, [r5, #16]
   b5de0:	3714      	adds	r7, #20
   b5de2:	3514      	adds	r5, #20
   b5de4:	e7f4      	b.n	b5dd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5de6:	6873      	ldr	r3, [r6, #4]
   b5de8:	6063      	str	r3, [r4, #4]
}
   b5dea:	4620      	mov	r0, r4
   b5dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5df0 <_GLOBAL__sub_I_SystemMode>:
   b5df0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b5df2:	4b77      	ldr	r3, [pc, #476]	; (b5fd0 <_GLOBAL__sub_I_SystemMode+0x1e0>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5df4:	4a77      	ldr	r2, [pc, #476]	; (b5fd4 <_GLOBAL__sub_I_SystemMode+0x1e4>)
  explicit SdFat(SPIClass* spiPort) {
   b5df6:	4c78      	ldr	r4, [pc, #480]	; (b5fd8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5df8:	2601      	movs	r6, #1
   b5dfa:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5dfc:	4b77      	ldr	r3, [pc, #476]	; (b5fdc <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5dfe:	2500      	movs	r5, #0
   b5e00:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5e04:	609a      	str	r2, [r3, #8]
   b5e06:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e08:	2003      	movs	r0, #3
   b5e0a:	f007 fc4f 	bl	bd6ac <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5e0e:	4874      	ldr	r0, [pc, #464]	; (b5fe0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5e10:	f001 ff68 	bl	b7ce4 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b5e14:	4873      	ldr	r0, [pc, #460]	; (b5fe4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5e16:	f001 fd4f 	bl	b78b8 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5e1a:	f7ff fd55 	bl	b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e1e:	2364      	movs	r3, #100	; 0x64
   b5e20:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5e24:	4b70      	ldr	r3, [pc, #448]	; (b5fe8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5e26:	6065      	str	r5, [r4, #4]
   b5e28:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5e2c:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5e30:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5e34:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5e38:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5e3c:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5e40:	b908      	cbnz	r0, b5e46 <_GLOBAL__sub_I_SystemMode+0x56>
   b5e42:	f7ff fd41 	bl	b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5e46:	4b69      	ldr	r3, [pc, #420]	; (b5fec <_GLOBAL__sub_I_SystemMode+0x1fc>)
  File() {}
   b5e48:	4a69      	ldr	r2, [pc, #420]	; (b5ff0 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5e4a:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e4e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b5e52:	2400      	movs	r4, #0
   b5e54:	601a      	str	r2, [r3, #0]
   b5e56:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5e5a:	611c      	str	r4, [r3, #16]
   b5e5c:	4b65      	ldr	r3, [pc, #404]	; (b5ff4 <_GLOBAL__sub_I_SystemMode+0x204>)
        capacity_(0) {
   b5e5e:	9407      	str	r4, [sp, #28]
   b5e60:	601a      	str	r2, [r3, #0]
   b5e62:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e66:	611c      	str	r4, [r3, #16]
   b5e68:	4b63      	ldr	r3, [pc, #396]	; (b5ff8 <_GLOBAL__sub_I_SystemMode+0x208>)
        filter_(level, filters) {
   b5e6a:	4d64      	ldr	r5, [pc, #400]	; (b5ffc <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5e6c:	601a      	str	r2, [r3, #0]
   b5e6e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e72:	611c      	str	r4, [r3, #16]
   b5e74:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5e78:	f00b fa42 	bl	c1300 <_Z16_fetch_usbserialv>
   b5e7c:	a905      	add	r1, sp, #20
   b5e7e:	4606      	mov	r6, r0
   b5e80:	a808      	add	r0, sp, #32
   b5e82:	f7ff ff83 	bl	b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5e86:	a908      	add	r1, sp, #32
   b5e88:	a80b      	add	r0, sp, #44	; 0x2c
   b5e8a:	f7ff ff7f 	bl	b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e8e:	4b5c      	ldr	r3, [pc, #368]	; (b6000 <_GLOBAL__sub_I_SystemMode+0x210>)
   b5e90:	602b      	str	r3, [r5, #0]
   b5e92:	a90b      	add	r1, sp, #44	; 0x2c
   b5e94:	a80e      	add	r0, sp, #56	; 0x38
   b5e96:	f7ff ff79 	bl	b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e9a:	aa0e      	add	r2, sp, #56	; 0x38
   b5e9c:	211e      	movs	r1, #30
   b5e9e:	1d28      	adds	r0, r5, #4
   b5ea0:	f00a f9ac 	bl	c01fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5ea4:	a80e      	add	r0, sp, #56	; 0x38
   b5ea6:	f7ff fcdd 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5eaa:	a80b      	add	r0, sp, #44	; 0x2c
   b5eac:	f7ff fcda 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5eb0:	4b54      	ldr	r3, [pc, #336]	; (b6004 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5eb2:	602b      	str	r3, [r5, #0]
   b5eb4:	622e      	str	r6, [r5, #32]
   b5eb6:	a808      	add	r0, sp, #32
   b5eb8:	f7ff fcd4 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5ebc:	4b52      	ldr	r3, [pc, #328]	; (b6008 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5ebe:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5ec0:	f00b fa1e 	bl	c1300 <_Z16_fetch_usbserialv>
   b5ec4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5ec8:	f00b fa0a 	bl	c12e0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5ecc:	f009 fe78 	bl	bfbc0 <_ZN5spark10LogManager8instanceEv>
   b5ed0:	4629      	mov	r1, r5
   b5ed2:	f00a f869 	bl	bffa8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5ed6:	a805      	add	r0, sp, #20
   b5ed8:	f7ff fcc4 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5edc:	484b      	ldr	r0, [pc, #300]	; (b600c <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5ede:	4d4c      	ldr	r5, [pc, #304]	; (b6010 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5ee0:	4e4c      	ldr	r6, [pc, #304]	; (b6014 <_GLOBAL__sub_I_SystemMode+0x224>)
Servo ESCL; 
   b5ee2:	f00a fdff 	bl	c0ae4 <_ZN5ServoC1Ev>
Servo ESCR;
   b5ee6:	484c      	ldr	r0, [pc, #304]	; (b6018 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5ee8:	f00a fdfc 	bl	c0ae4 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5eec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5ef0:	682b      	ldr	r3, [r5, #0]
   b5ef2:	9300      	str	r3, [sp, #0]
   b5ef4:	4b49      	ldr	r3, [pc, #292]	; (b601c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5ef6:	494a      	ldr	r1, [pc, #296]	; (b6020 <_GLOBAL__sub_I_SystemMode+0x230>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	484a      	ldr	r0, [pc, #296]	; (b6024 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5efc:	f04f 0210 	mov.w	r2, #16
   b5f00:	f7ff fcc3 	bl	b588a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5f04:	4b48      	ldr	r3, [pc, #288]	; (b6028 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5f06:	9402      	str	r4, [sp, #8]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	682b      	ldr	r3, [r5, #0]
   b5f0c:	9300      	str	r3, [sp, #0]
   b5f0e:	4b47      	ldr	r3, [pc, #284]	; (b602c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5f10:	4947      	ldr	r1, [pc, #284]	; (b6030 <_GLOBAL__sub_I_SystemMode+0x240>)
   b5f12:	681b      	ldr	r3, [r3, #0]
   b5f14:	4847      	ldr	r0, [pc, #284]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5f16:	f04f 0204 	mov.w	r2, #4
   b5f1a:	f7ff fcb6 	bl	b588a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5f1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5f22:	682b      	ldr	r3, [r5, #0]
   b5f24:	9300      	str	r3, [sp, #0]
   b5f26:	4b44      	ldr	r3, [pc, #272]	; (b6038 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5f28:	4944      	ldr	r1, [pc, #272]	; (b603c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5f2a:	681b      	ldr	r3, [r3, #0]
   b5f2c:	4844      	ldr	r0, [pc, #272]	; (b6040 <_GLOBAL__sub_I_SystemMode+0x250>)
	    _M_manager = &_My_handler::_M_manager;
   b5f2e:	4d45      	ldr	r5, [pc, #276]	; (b6044 <_GLOBAL__sub_I_SystemMode+0x254>)
   b5f30:	f04f 0210 	mov.w	r2, #16
   b5f34:	f7ff fca9 	bl	b588a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5f38:	4843      	ldr	r0, [pc, #268]	; (b6048 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5f3a:	f008 fa9e 	bl	be47a <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f3e:	4b43      	ldr	r3, [pc, #268]	; (b604c <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5f40:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5f42:	aa0e      	add	r2, sp, #56	; 0x38
   b5f44:	4623      	mov	r3, r4
   b5f46:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f4a:	4841      	ldr	r0, [pc, #260]	; (b6050 <_GLOBAL__sub_I_SystemMode+0x260>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f4c:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5f4e:	9510      	str	r5, [sp, #64]	; 0x40
   b5f50:	f7fe fa82 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f54:	a80e      	add	r0, sp, #56	; 0x38
   b5f56:	f7fe fa41 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f5a:	4b3e      	ldr	r3, [pc, #248]	; (b6054 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5f5c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5f5e:	aa0e      	add	r2, sp, #56	; 0x38
   b5f60:	4623      	mov	r3, r4
   b5f62:	4639      	mov	r1, r7
   b5f64:	483c      	ldr	r0, [pc, #240]	; (b6058 <_GLOBAL__sub_I_SystemMode+0x268>)
	    _M_manager = &_My_handler::_M_manager;
   b5f66:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f6a:	f7fe fa75 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f6e:	a80e      	add	r0, sp, #56	; 0x38
   b5f70:	f7fe fa34 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f74:	4b39      	ldr	r3, [pc, #228]	; (b605c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b5f76:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b5f78:	aa0e      	add	r2, sp, #56	; 0x38
   b5f7a:	4623      	mov	r3, r4
   b5f7c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b5f80:	4837      	ldr	r0, [pc, #220]	; (b6060 <_GLOBAL__sub_I_SystemMode+0x270>)
	    _M_manager = &_My_handler::_M_manager;
   b5f82:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f86:	f7fe fa67 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f8a:	a80e      	add	r0, sp, #56	; 0x38
   b5f8c:	f7fe fa26 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f90:	4b34      	ldr	r3, [pc, #208]	; (b6064 <_GLOBAL__sub_I_SystemMode+0x274>)
   b5f92:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5f94:	aa0e      	add	r2, sp, #56	; 0x38
   b5f96:	4623      	mov	r3, r4
   b5f98:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f9c:	4832      	ldr	r0, [pc, #200]	; (b6068 <_GLOBAL__sub_I_SystemMode+0x278>)
	    _M_manager = &_My_handler::_M_manager;
   b5f9e:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5fa2:	f7fe fa59 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fa6:	a80e      	add	r0, sp, #56	; 0x38
   b5fa8:	f7fe fa18 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5fac:	4622      	mov	r2, r4
   b5fae:	2114      	movs	r1, #20
   b5fb0:	2001      	movs	r0, #1
   b5fb2:	f007 fba3 	bl	bd6fc <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5fb6:	2201      	movs	r2, #1
   b5fb8:	2114      	movs	r1, #20
   b5fba:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5fbe:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5fc0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5fc4:	4829      	ldr	r0, [pc, #164]	; (b606c <_GLOBAL__sub_I_SystemMode+0x27c>)
   b5fc6:	f009 fc7d 	bl	bf8c4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b5fca:	b013      	add	sp, #76	; 0x4c
   b5fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5fce:	bf00      	nop
   b5fd0:	2003ddcc 	.word	0x2003ddcc
   b5fd4:	ffff0000 	.word	0xffff0000
   b5fd8:	2003e0f4 	.word	0x2003e0f4
   b5fdc:	2003ddb8 	.word	0x2003ddb8
   b5fe0:	2003df68 	.word	0x2003df68
   b5fe4:	2003de58 	.word	0x2003de58
   b5fe8:	000c61d0 	.word	0x000c61d0
   b5fec:	2003df34 	.word	0x2003df34
   b5ff0:	000c623c 	.word	0x000c623c
   b5ff4:	2003deb4 	.word	0x2003deb4
   b5ff8:	2003de80 	.word	0x2003de80
   b5ffc:	2003dee8 	.word	0x2003dee8
   b6000:	000c61f8 	.word	0x000c61f8
   b6004:	000c73cc 	.word	0x000c73cc
   b6008:	000c6224 	.word	0x000c6224
   b600c:	2003dd94 	.word	0x2003dd94
   b6010:	2003db80 	.word	0x2003db80
   b6014:	000b4235 	.word	0x000b4235
   b6018:	2003dda4 	.word	0x2003dda4
   b601c:	2003db8c 	.word	0x2003db8c
   b6020:	000c61bb 	.word	0x000c61bb
   b6024:	2003e5e8 	.word	0x2003e5e8
   b6028:	000b4a69 	.word	0x000b4a69
   b602c:	2003db88 	.word	0x2003db88
   b6030:	000c61be 	.word	0x000c61be
   b6034:	2003e0ec 	.word	0x2003e0ec
   b6038:	2003db84 	.word	0x2003db84
   b603c:	000c61c1 	.word	0x000c61c1
   b6040:	2003e0e0 	.word	0x2003e0e0
   b6044:	000b4221 	.word	0x000b4221
   b6048:	2003ddd0 	.word	0x2003ddd0
   b604c:	000b45b9 	.word	0x000b45b9
   b6050:	2003e5f4 	.word	0x2003e5f4
   b6054:	000b44d1 	.word	0x000b44d1
   b6058:	2003de3c 	.word	0x2003de3c
   b605c:	000b4375 	.word	0x000b4375
   b6060:	2003df18 	.word	0x2003df18
   b6064:	000b40fd 	.word	0x000b40fd
   b6068:	2003e5b8 	.word	0x2003e5b8
   b606c:	2003e594 	.word	0x2003e594

000b6070 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6070:	b538      	push	{r3, r4, r5, lr}
   b6072:	4604      	mov	r4, r0
   b6074:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6076:	2224      	movs	r2, #36	; 0x24
   b6078:	2100      	movs	r1, #0
   b607a:	f00d fd29 	bl	c3ad0 <memset>

  m_vol = vol;
   b607e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6080:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6082:	2b10      	cmp	r3, #16
   b6084:	d003      	beq.n	b608e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6086:	2b20      	cmp	r3, #32
   b6088:	d006      	beq.n	b6098 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b608a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b608c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b608e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6090:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6092:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6094:	70a0      	strb	r0, [r4, #2]
  return true;
   b6096:	e7f9      	b.n	b608c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6098:	2340      	movs	r3, #64	; 0x40
   b609a:	e7f9      	b.n	b6090 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b609c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b609c:	b510      	push	{r4, lr}
   b609e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b60a0:	3024      	adds	r0, #36	; 0x24
   b60a2:	f000 ff66 	bl	b6f72 <_ZN8FatCache4syncEv>
   b60a6:	b128      	cbz	r0, b60b4 <_ZN9FatVolume9cacheSyncEv+0x18>
   b60a8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b60ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b60b0:	f000 bf5f 	b.w	b6f72 <_ZN8FatCache4syncEv>
  }
   b60b4:	bd10      	pop	{r4, pc}

000b60b6 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b60b6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b60b8:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b60ba:	f043 0304 	orr.w	r3, r3, #4
   b60be:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b60c0:	f100 0210 	add.w	r2, r0, #16
   b60c4:	6880      	ldr	r0, [r0, #8]
   b60c6:	f001 b80a 	b.w	b70de <_ZN9FatVolume15allocateClusterEmPm>
	...

000b60cc <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b60cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b60d0:	7801      	ldrb	r1, [r0, #0]
   b60d2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b60d6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b60d8:	d003      	beq.n	b60e2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b60da:	2600      	movs	r6, #0
}
   b60dc:	4630      	mov	r0, r6
   b60de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b60e2:	6942      	ldr	r2, [r0, #20]
   b60e4:	4b17      	ldr	r3, [pc, #92]	; (b6144 <_ZN7FatFile13addDirClusterEv+0x78>)
   b60e6:	429a      	cmp	r2, r3
   b60e8:	d2f7      	bcs.n	b60da <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b60ea:	f7ff ffe4 	bl	b60b6 <_ZN7FatFile10addClusterEv>
   b60ee:	4606      	mov	r6, r0
   b60f0:	2800      	cmp	r0, #0
   b60f2:	d0f2      	beq.n	b60da <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b60f4:	6921      	ldr	r1, [r4, #16]
   b60f6:	68a0      	ldr	r0, [r4, #8]
   b60f8:	f000 ff86 	bl	b7008 <_ZNK9FatVolume17clusterFirstBlockEm>
   b60fc:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b60fe:	68a0      	ldr	r0, [r4, #8]
   b6100:	2205      	movs	r2, #5
   b6102:	4639      	mov	r1, r7
   b6104:	3024      	adds	r0, #36	; 0x24
   b6106:	f000 ff5c 	bl	b6fc2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b610a:	4680      	mov	r8, r0
   b610c:	2800      	cmp	r0, #0
   b610e:	d0e4      	beq.n	b60da <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6110:	4629      	mov	r1, r5
   b6112:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6116:	f00d fcdb 	bl	c3ad0 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b611a:	2501      	movs	r5, #1
   b611c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b611e:	791a      	ldrb	r2, [r3, #4]
   b6120:	42aa      	cmp	r2, r5
   b6122:	d909      	bls.n	b6138 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6124:	6818      	ldr	r0, [r3, #0]
   b6126:	4642      	mov	r2, r8
   b6128:	19e9      	adds	r1, r5, r7
   b612a:	f001 fab6 	bl	b769a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b612e:	2800      	cmp	r0, #0
   b6130:	d0d3      	beq.n	b60da <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6132:	3501      	adds	r5, #1
   b6134:	b2ed      	uxtb	r5, r5
   b6136:	e7f1      	b.n	b611c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6138:	6963      	ldr	r3, [r4, #20]
   b613a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b613e:	6163      	str	r3, [r4, #20]
  return true;
   b6140:	e7cc      	b.n	b60dc <_ZN7FatFile13addDirClusterEv+0x10>
   b6142:	bf00      	nop
   b6144:	001ffe00 	.word	0x001ffe00

000b6148 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6148:	b510      	push	{r4, lr}
   b614a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b614c:	6880      	ldr	r0, [r0, #8]
   b614e:	460a      	mov	r2, r1
   b6150:	3024      	adds	r0, #36	; 0x24
   b6152:	69a1      	ldr	r1, [r4, #24]
   b6154:	f000 ff35 	bl	b6fc2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6158:	b120      	cbz	r0, b6164 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b615a:	88a3      	ldrh	r3, [r4, #4]
   b615c:	f003 030f 	and.w	r3, r3, #15
   b6160:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6164:	bd10      	pop	{r4, pc}

000b6166 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6166:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6168:	b5f0      	push	{r4, r5, r6, r7, lr}
   b616a:	4604      	mov	r4, r0
   b616c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b616e:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6170:	4618      	mov	r0, r3
      name[j++] = '.';
   b6172:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6174:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6178:	2a20      	cmp	r2, #32
   b617a:	d018      	beq.n	b61ae <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b617c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b617e:	bf02      	ittt	eq
   b6180:	540f      	strbeq	r7, [r1, r0]
   b6182:	1c42      	addeq	r2, r0, #1
   b6184:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6186:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6188:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b618c:	bf08      	it	eq
   b618e:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6190:	f1bc 0f19 	cmp.w	ip, #25
   b6194:	d806      	bhi.n	b61a4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6196:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b619a:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b619e:	bf1c      	itt	ne
   b61a0:	3220      	addne	r2, #32
   b61a2:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b61a4:	f100 0c01 	add.w	ip, r0, #1
   b61a8:	540a      	strb	r2, [r1, r0]
   b61aa:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b61ae:	3301      	adds	r3, #1
   b61b0:	b2db      	uxtb	r3, r3
   b61b2:	2b0b      	cmp	r3, #11
   b61b4:	d1de      	bne.n	b6174 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b61b6:	2300      	movs	r3, #0
   b61b8:	540b      	strb	r3, [r1, r0]
}
   b61ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61bc <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b61bc:	7803      	ldrb	r3, [r0, #0]
   b61be:	b90b      	cbnz	r3, b61c4 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b61c0:	f7ff bf56 	b.w	b6070 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b61c4:	2000      	movs	r0, #0
   b61c6:	4770      	bx	lr

000b61c8 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b61c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b61cc:	7803      	ldrb	r3, [r0, #0]
   b61ce:	4604      	mov	r4, r0
   b61d0:	4688      	mov	r8, r1
   b61d2:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b61d4:	2b00      	cmp	r3, #0
   b61d6:	d05d      	beq.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
   b61d8:	7882      	ldrb	r2, [r0, #2]
   b61da:	07d1      	lsls	r1, r2, #31
   b61dc:	d55a      	bpl.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b61de:	071a      	lsls	r2, r3, #28
   b61e0:	d52d      	bpl.n	b623e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b61e2:	69c3      	ldr	r3, [r0, #28]
   b61e4:	6942      	ldr	r2, [r0, #20]
   b61e6:	1a9b      	subs	r3, r3, r2
   b61e8:	429d      	cmp	r5, r3
   b61ea:	bf28      	it	cs
   b61ec:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b61ee:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b61f0:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b61f4:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b61f8:	2e00      	cmp	r6, #0
   b61fa:	f000 808f 	beq.w	b631c <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b61fe:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6200:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6202:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6204:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b620a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b620e:	d51f      	bpl.n	b6250 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6210:	6a00      	ldr	r0, [r0, #32]
   b6212:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6214:	68a0      	ldr	r0, [r4, #8]
   b6216:	f1ba 0f00 	cmp.w	sl, #0
   b621a:	d142      	bne.n	b62a2 <_ZN7FatFile4readEPvj+0xda>
   b621c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6220:	d33f      	bcc.n	b62a2 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6224:	4299      	cmp	r1, r3
   b6226:	d03c      	beq.n	b62a2 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6228:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b622c:	d252      	bcs.n	b62d4 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b622e:	6800      	ldr	r0, [r0, #0]
   b6230:	4642      	mov	r2, r8
   b6232:	f001 f9a9 	bl	b7588 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6236:	b368      	cbz	r0, b6294 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6238:	f44f 7700 	mov.w	r7, #512	; 0x200
   b623c:	e044      	b.n	b62c8 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b623e:	069b      	lsls	r3, r3, #26
   b6240:	d5d5      	bpl.n	b61ee <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6242:	6883      	ldr	r3, [r0, #8]
   b6244:	891a      	ldrh	r2, [r3, #8]
   b6246:	6943      	ldr	r3, [r0, #20]
   b6248:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b624c:	b29b      	uxth	r3, r3
   b624e:	e7cb      	b.n	b61e8 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6250:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6254:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6258:	f1ba 0f00 	cmp.w	sl, #0
   b625c:	d108      	bne.n	b6270 <_ZN7FatFile4readEPvj+0xa8>
   b625e:	f1b9 0f00 	cmp.w	r9, #0
   b6262:	d105      	bne.n	b6270 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6264:	b95b      	cbnz	r3, b627e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6266:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6268:	bf4c      	ite	mi
   b626a:	6a03      	ldrmi	r3, [r0, #32]
   b626c:	6a23      	ldrpl	r3, [r4, #32]
   b626e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6270:	6921      	ldr	r1, [r4, #16]
   b6272:	68a0      	ldr	r0, [r4, #8]
   b6274:	f000 fec8 	bl	b7008 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6278:	eb09 0100 	add.w	r1, r9, r0
   b627c:	e7ca      	b.n	b6214 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b627e:	6921      	ldr	r1, [r4, #16]
   b6280:	465a      	mov	r2, fp
   b6282:	f000 fec7 	bl	b7014 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6286:	2800      	cmp	r0, #0
   b6288:	db04      	blt.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b628a:	d1f1      	bne.n	b6270 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b628c:	7823      	ldrb	r3, [r4, #0]
   b628e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6292:	d143      	bne.n	b631c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6294:	7863      	ldrb	r3, [r4, #1]
   b6296:	f043 0302 	orr.w	r3, r3, #2
   b629a:	7063      	strb	r3, [r4, #1]
  return -1;
   b629c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b62a0:	e03d      	b.n	b631e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b62a2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b62a6:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b62a8:	f04f 0200 	mov.w	r2, #0
   b62ac:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b62b0:	bf28      	it	cs
   b62b2:	4637      	movcs	r7, r6
   b62b4:	f000 fe85 	bl	b6fc2 <_ZN8FatCache4readEmh>
      if (!pc) {
   b62b8:	2800      	cmp	r0, #0
   b62ba:	d0eb      	beq.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b62bc:	eb00 010a 	add.w	r1, r0, sl
   b62c0:	463a      	mov	r2, r7
   b62c2:	4640      	mov	r0, r8
   b62c4:	f00d fbdc 	bl	c3a80 <memcpy>
    m_curPosition += n;
   b62c8:	6963      	ldr	r3, [r4, #20]
   b62ca:	443b      	add	r3, r7
    dst += n;
   b62cc:	44b8      	add	r8, r7
    m_curPosition += n;
   b62ce:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b62d0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b62d2:	e791      	b.n	b61f8 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b62d4:	7822      	ldrb	r2, [r4, #0]
   b62d6:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b62d8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b62dc:	d406      	bmi.n	b62ec <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b62de:	7902      	ldrb	r2, [r0, #4]
   b62e0:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b62e4:	b2d2      	uxtb	r2, r2
   b62e6:	4592      	cmp	sl, r2
   b62e8:	bf28      	it	cs
   b62ea:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62ec:	4299      	cmp	r1, r3
      n = 512*nb;
   b62ee:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62f2:	d208      	bcs.n	b6306 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b62f4:	68a0      	ldr	r0, [r4, #8]
   b62f6:	4653      	mov	r3, sl
   b62f8:	6800      	ldr	r0, [r0, #0]
   b62fa:	4642      	mov	r2, r8
   b62fc:	f001 f98c 	bl	b7618 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6300:	2800      	cmp	r0, #0
   b6302:	d1e1      	bne.n	b62c8 <_ZN7FatFile4readEPvj+0x100>
   b6304:	e7c6      	b.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6306:	4453      	add	r3, sl
   b6308:	428b      	cmp	r3, r1
   b630a:	d9f3      	bls.n	b62f4 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b630c:	3024      	adds	r0, #36	; 0x24
   b630e:	9101      	str	r1, [sp, #4]
   b6310:	f000 fe2f 	bl	b6f72 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6314:	9901      	ldr	r1, [sp, #4]
   b6316:	2800      	cmp	r0, #0
   b6318:	d1ec      	bne.n	b62f4 <_ZN7FatFile4readEPvj+0x12c>
   b631a:	e7bb      	b.n	b6294 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b631c:	1ba8      	subs	r0, r5, r6
}
   b631e:	b003      	add	sp, #12
   b6320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6324 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6324:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6326:	2201      	movs	r2, #1
   b6328:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b632c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6330:	4604      	mov	r4, r0
   b6332:	f7ff ff49 	bl	b61c8 <_ZN7FatFile4readEPvj>
   b6336:	2801      	cmp	r0, #1
   b6338:	bf0a      	itet	eq
   b633a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b633e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6342:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6346:	b002      	add	sp, #8
   b6348:	bd70      	pop	{r4, r5, r6, pc}

000b634a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b634a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b634c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b634e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6352:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6354:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6358:	d000      	beq.n	b635c <_ZN7FatFile12readDirCacheEb+0x12>
   b635a:	b999      	cbnz	r1, b6384 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b635c:	2201      	movs	r2, #1
   b635e:	f10d 0107 	add.w	r1, sp, #7
   b6362:	4620      	mov	r0, r4
   b6364:	f7ff ff30 	bl	b61c8 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6368:	b240      	sxtb	r0, r0
   b636a:	2801      	cmp	r0, #1
   b636c:	d002      	beq.n	b6374 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b636e:	2000      	movs	r0, #0
}
   b6370:	b003      	add	sp, #12
   b6372:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6374:	6963      	ldr	r3, [r4, #20]
   b6376:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6378:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b637a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b637c:	3030      	adds	r0, #48	; 0x30
   b637e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6382:	e7f5      	b.n	b6370 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6384:	3320      	adds	r3, #32
   b6386:	e7f7      	b.n	b6378 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6388 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b638c:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b638e:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6390:	4604      	mov	r4, r0
   b6392:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6394:	b162      	cbz	r2, b63b0 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6396:	6940      	ldr	r0, [r0, #20]
   b6398:	4288      	cmp	r0, r1
   b639a:	d002      	beq.n	b63a2 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b639c:	b919      	cbnz	r1, b63a6 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b639e:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b63a0:	6165      	str	r5, [r4, #20]
    return true;
   b63a2:	2001      	movs	r0, #1
   b63a4:	e006      	b.n	b63b4 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b63a6:	0716      	lsls	r6, r2, #28
   b63a8:	d506      	bpl.n	b63b8 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b63aa:	69e3      	ldr	r3, [r4, #28]
   b63ac:	428b      	cmp	r3, r1
   b63ae:	d20b      	bcs.n	b63c8 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b63b0:	6127      	str	r7, [r4, #16]
  return false;
   b63b2:	2000      	movs	r0, #0
}
   b63b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b63b8:	0691      	lsls	r1, r2, #26
   b63ba:	d505      	bpl.n	b63c8 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b63bc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b63be:	891b      	ldrh	r3, [r3, #8]
   b63c0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b63c4:	d9ec      	bls.n	b63a0 <_ZN7FatFile7seekSetEm+0x18>
   b63c6:	e7f3      	b.n	b63b0 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b63c8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b63cc:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b63d0:	1e43      	subs	r3, r0, #1
   b63d2:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63d6:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b63d8:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63da:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b63dc:	42b3      	cmp	r3, r6
   b63de:	d800      	bhi.n	b63e2 <_ZN7FatFile7seekSetEm+0x5a>
   b63e0:	b998      	cbnz	r0, b640a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b63e2:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b63e4:	bf4c      	ite	mi
   b63e6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b63ea:	6a23      	ldrpl	r3, [r4, #32]
   b63ec:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63ee:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b63f2:	2e00      	cmp	r6, #0
   b63f4:	d0d4      	beq.n	b63a0 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63f6:	6921      	ldr	r1, [r4, #16]
   b63f8:	68a0      	ldr	r0, [r4, #8]
   b63fa:	4642      	mov	r2, r8
   b63fc:	f000 fe0a 	bl	b7014 <_ZN9FatVolume6fatGetEmPm>
   b6400:	2800      	cmp	r0, #0
   b6402:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6406:	dcf4      	bgt.n	b63f2 <_ZN7FatFile7seekSetEm+0x6a>
   b6408:	e7d2      	b.n	b63b0 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b640a:	1af6      	subs	r6, r6, r3
   b640c:	e7ef      	b.n	b63ee <_ZN7FatFile7seekSetEm+0x66>

000b640e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6410:	460f      	mov	r7, r1
   b6412:	4604      	mov	r4, r0
   b6414:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6416:	2100      	movs	r1, #0
   b6418:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b641a:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b641c:	f00d fb58 	bl	c3ad0 <memset>
  m_vol = dirFile->m_vol;
   b6420:	68b8      	ldr	r0, [r7, #8]
   b6422:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6424:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6426:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b642a:	6a3b      	ldr	r3, [r7, #32]
   b642c:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b642e:	016a      	lsls	r2, r5, #5
   b6430:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6434:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6438:	071f      	lsls	r7, r3, #28
   b643a:	d444      	bmi.n	b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b643c:	f003 0317 	and.w	r3, r3, #23
   b6440:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6442:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6446:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b644a:	bf04      	itt	eq
   b644c:	f043 0308 	orreq.w	r3, r3, #8
   b6450:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6452:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6456:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6458:	f006 0303 	and.w	r3, r6, #3
   b645c:	2b01      	cmp	r3, #1
   b645e:	d02c      	beq.n	b64ba <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6460:	2b02      	cmp	r3, #2
   b6462:	d028      	beq.n	b64b6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6464:	bb7b      	cbnz	r3, b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6466:	0571      	lsls	r1, r6, #21
   b6468:	d42d      	bmi.n	b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b646a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b646c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b646e:	78a1      	ldrb	r1, [r4, #2]
   b6470:	078b      	lsls	r3, r1, #30
   b6472:	d504      	bpl.n	b647e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6474:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6476:	06df      	lsls	r7, r3, #27
   b6478:	d425      	bmi.n	b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b647a:	07dd      	lsls	r5, r3, #31
   b647c:	d423      	bmi.n	b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b647e:	11b3      	asrs	r3, r6, #6
   b6480:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6484:	f006 0508 	and.w	r5, r6, #8
   b6488:	432b      	orrs	r3, r5
   b648a:	430b      	orrs	r3, r1
   b648c:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b648e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6490:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6492:	1883      	adds	r3, r0, r2
   b6494:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6498:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b649c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b64a0:	0572      	lsls	r2, r6, #21
   b64a2:	d513      	bpl.n	b64cc <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b64a4:	b959      	cbnz	r1, b64be <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b64a6:	78a3      	ldrb	r3, [r4, #2]
   b64a8:	f043 0304 	orr.w	r3, r3, #4
   b64ac:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b64ae:	0473      	lsls	r3, r6, #17
   b64b0:	d410      	bmi.n	b64d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b64b2:	2001      	movs	r0, #1
}
   b64b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b64b6:	2303      	movs	r3, #3
   b64b8:	e7d8      	b.n	b646c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b64ba:	2302      	movs	r3, #2
   b64bc:	e7d6      	b.n	b646c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b64be:	f000 fe49 	bl	b7154 <_ZN9FatVolume9freeChainEm>
   b64c2:	2800      	cmp	r0, #0
   b64c4:	d1ef      	bne.n	b64a6 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b64c6:	2000      	movs	r0, #0
   b64c8:	7020      	strb	r0, [r4, #0]
  return false;
   b64ca:	e7f3      	b.n	b64b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b64cc:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b64ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64d0:	61e3      	str	r3, [r4, #28]
   b64d2:	e7ec      	b.n	b64ae <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b64d4:	69e1      	ldr	r1, [r4, #28]
   b64d6:	4620      	mov	r0, r4
   b64d8:	f7ff ff56 	bl	b6388 <_ZN7FatFile7seekSetEm>
   b64dc:	2800      	cmp	r0, #0
   b64de:	d1e8      	bne.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b64e0:	e7f1      	b.n	b64c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b64e2 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b64e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b64e6:	7803      	ldrb	r3, [r0, #0]
   b64e8:	4607      	mov	r7, r0
   b64ea:	460d      	mov	r5, r1
   b64ec:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b64ee:	bb53      	cbnz	r3, b6546 <_ZN7FatFile8openNextEPS_i+0x64>
   b64f0:	780b      	ldrb	r3, [r1, #0]
   b64f2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b64f6:	d026      	beq.n	b6546 <_ZN7FatFile8openNextEPS_i+0x64>
   b64f8:	694c      	ldr	r4, [r1, #20]
   b64fa:	f014 041f 	ands.w	r4, r4, #31
   b64fe:	d122      	bne.n	b6546 <_ZN7FatFile8openNextEPS_i+0x64>
   b6500:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6502:	2100      	movs	r1, #0
   b6504:	4628      	mov	r0, r5
    return m_curPosition;
   b6506:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b650a:	f7ff ff1e 	bl	b634a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b650e:	b1d0      	cbz	r0, b6546 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6510:	7806      	ldrb	r6, [r0, #0]
   b6512:	b1c6      	cbz	r6, b6546 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6514:	2e2e      	cmp	r6, #46	; 0x2e
   b6516:	d010      	beq.n	b653a <_ZN7FatFile8openNextEPS_i+0x58>
   b6518:	2ee5      	cmp	r6, #229	; 0xe5
   b651a:	d00e      	beq.n	b653a <_ZN7FatFile8openNextEPS_i+0x58>
   b651c:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b651e:	071a      	lsls	r2, r3, #28
   b6520:	d413      	bmi.n	b654a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6522:	b964      	cbnz	r4, b653e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6524:	9400      	str	r4, [sp, #0]
   b6526:	4653      	mov	r3, sl
   b6528:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b652c:	4629      	mov	r1, r5
   b652e:	4638      	mov	r0, r7
   b6530:	f7ff ff6d 	bl	b640e <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6534:	b002      	add	sp, #8
   b6536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b653a:	2400      	movs	r4, #0
   b653c:	e7e1      	b.n	b6502 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b653e:	f000 f971 	bl	b6824 <_ZN7FatFile11lfnChecksumEPh>
   b6542:	4540      	cmp	r0, r8
   b6544:	d0ee      	beq.n	b6524 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6546:	2000      	movs	r0, #0
   b6548:	e7f4      	b.n	b6534 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b654a:	2b0f      	cmp	r3, #15
   b654c:	d1f5      	bne.n	b653a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b654e:	0673      	lsls	r3, r6, #25
   b6550:	d5d7      	bpl.n	b6502 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6552:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6556:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b655a:	e7d2      	b.n	b6502 <_ZN7FatFile8openNextEPS_i+0x20>

000b655c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b655c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b655e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6560:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6562:	b90b      	cbnz	r3, b6568 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6564:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6566:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6568:	7883      	ldrb	r3, [r0, #2]
   b656a:	075a      	lsls	r2, r3, #29
   b656c:	d523      	bpl.n	b65b6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b656e:	2101      	movs	r1, #1
   b6570:	f7ff fdea 	bl	b6148 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6574:	4605      	mov	r5, r0
   b6576:	b928      	cbnz	r0, b6584 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6578:	7863      	ldrb	r3, [r4, #1]
   b657a:	f043 0301 	orr.w	r3, r3, #1
   b657e:	7063      	strb	r3, [r4, #1]
  return false;
   b6580:	2000      	movs	r0, #0
   b6582:	e7f0      	b.n	b6566 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6584:	7803      	ldrb	r3, [r0, #0]
   b6586:	2be5      	cmp	r3, #229	; 0xe5
   b6588:	d0f6      	beq.n	b6578 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b658a:	7823      	ldrb	r3, [r4, #0]
   b658c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b658e:	bf44      	itt	mi
   b6590:	69e3      	ldrmi	r3, [r4, #28]
   b6592:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6594:	6a23      	ldr	r3, [r4, #32]
   b6596:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6598:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b659a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b659c:	4b09      	ldr	r3, [pc, #36]	; (b65c4 <_ZN7FatFile4syncEv+0x68>)
   b659e:	681b      	ldr	r3, [r3, #0]
   b65a0:	b12b      	cbz	r3, b65ae <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b65a2:	f100 0116 	add.w	r1, r0, #22
   b65a6:	3018      	adds	r0, #24
   b65a8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b65aa:	8b2b      	ldrh	r3, [r5, #24]
   b65ac:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b65ae:	78a3      	ldrb	r3, [r4, #2]
   b65b0:	f023 0304 	bic.w	r3, r3, #4
   b65b4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b65b6:	68a0      	ldr	r0, [r4, #8]
   b65b8:	f7ff fd70 	bl	b609c <_ZN9FatVolume9cacheSyncEv>
   b65bc:	2800      	cmp	r0, #0
   b65be:	d0db      	beq.n	b6578 <_ZN7FatFile4syncEv+0x1c>
   b65c0:	e7d0      	b.n	b6564 <_ZN7FatFile4syncEv+0x8>
   b65c2:	bf00      	nop
   b65c4:	2003e610 	.word	0x2003e610

000b65c8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b65c8:	b510      	push	{r4, lr}
   b65ca:	4604      	mov	r4, r0
  bool rtn = sync();
   b65cc:	f7ff ffc6 	bl	b655c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b65d0:	2300      	movs	r3, #0
   b65d2:	7023      	strb	r3, [r4, #0]
}
   b65d4:	bd10      	pop	{r4, pc}

000b65d6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65d8:	b093      	sub	sp, #76	; 0x4c
   b65da:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b65dc:	2300      	movs	r3, #0
   b65de:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b65e0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65e2:	9201      	str	r2, [sp, #4]
   b65e4:	4606      	mov	r6, r0
   b65e6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b65e8:	b113      	cbz	r3, b65f0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b65ea:	2000      	movs	r0, #0
}
   b65ec:	b013      	add	sp, #76	; 0x4c
   b65ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b65f0:	780b      	ldrb	r3, [r1, #0]
   b65f2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b65f6:	d0f8      	beq.n	b65ea <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b65f8:	7813      	ldrb	r3, [r2, #0]
   b65fa:	2b2f      	cmp	r3, #47	; 0x2f
   b65fc:	d112      	bne.n	b6624 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b65fe:	9a01      	ldr	r2, [sp, #4]
   b6600:	7813      	ldrb	r3, [r2, #0]
   b6602:	2b2f      	cmp	r3, #47	; 0x2f
   b6604:	d102      	bne.n	b660c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6606:	3201      	adds	r2, #1
   b6608:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b660a:	e7f8      	b.n	b65fe <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b660c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b660e:	b91b      	cbnz	r3, b6618 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6610:	4630      	mov	r0, r6
   b6612:	f7ff fdd3 	bl	b61bc <_ZN7FatFile8openRootEP9FatVolume>
   b6616:	e7e9      	b.n	b65ec <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6618:	a809      	add	r0, sp, #36	; 0x24
   b661a:	f7ff fd29 	bl	b6070 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b661e:	2800      	cmp	r0, #0
   b6620:	d0e3      	beq.n	b65ea <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6622:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6624:	9801      	ldr	r0, [sp, #4]
   b6626:	aa01      	add	r2, sp, #4
   b6628:	a903      	add	r1, sp, #12
   b662a:	f000 f98f 	bl	b694c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b662e:	2800      	cmp	r0, #0
   b6630:	d0db      	beq.n	b65ea <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6632:	9b01      	ldr	r3, [sp, #4]
   b6634:	781b      	ldrb	r3, [r3, #0]
   b6636:	b19b      	cbz	r3, b6660 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6638:	2300      	movs	r3, #0
   b663a:	aa03      	add	r2, sp, #12
   b663c:	4621      	mov	r1, r4
   b663e:	4630      	mov	r0, r6
   b6640:	f000 fab6 	bl	b6bb0 <_ZN7FatFile4openEPS_P7fname_ti>
   b6644:	2800      	cmp	r0, #0
   b6646:	d0d0      	beq.n	b65ea <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6648:	4635      	mov	r5, r6
   b664a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b664c:	ac09      	add	r4, sp, #36	; 0x24
   b664e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6654:	682b      	ldr	r3, [r5, #0]
   b6656:	6023      	str	r3, [r4, #0]
    close();
   b6658:	4630      	mov	r0, r6
   b665a:	f7ff ffb5 	bl	b65c8 <_ZN7FatFile5closeEv>
  while (1) {
   b665e:	e7e0      	b.n	b6622 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6660:	463b      	mov	r3, r7
   b6662:	aa03      	add	r2, sp, #12
   b6664:	4621      	mov	r1, r4
   b6666:	4630      	mov	r0, r6
   b6668:	f000 faa2 	bl	b6bb0 <_ZN7FatFile4openEPS_P7fname_ti>
   b666c:	e7be      	b.n	b65ec <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6670 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6674:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6676:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6678:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b667a:	4604      	mov	r4, r0
   b667c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b667e:	d55b      	bpl.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
   b6680:	7883      	ldrb	r3, [r0, #2]
   b6682:	079a      	lsls	r2, r3, #30
   b6684:	d558      	bpl.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6686:	071b      	lsls	r3, r3, #28
   b6688:	d451      	bmi.n	b672e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b668a:	6963      	ldr	r3, [r4, #20]
   b668c:	43db      	mvns	r3, r3
   b668e:	42bb      	cmp	r3, r7
   b6690:	d352      	bcc.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
   b6692:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6694:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6698:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b669a:	f1b8 0f00 	cmp.w	r8, #0
   b669e:	f000 8091 	beq.w	b67c4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b66a2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b66a4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b66a6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b66aa:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b66ae:	d10e      	bne.n	b66ce <_ZN7FatFile5writeEPKvj+0x5e>
   b66b0:	b96d      	cbnz	r5, b66ce <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b66b2:	6921      	ldr	r1, [r4, #16]
   b66b4:	2900      	cmp	r1, #0
   b66b6:	d046      	beq.n	b6746 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b66b8:	4652      	mov	r2, sl
   b66ba:	f000 fcab 	bl	b7014 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b66be:	2800      	cmp	r0, #0
   b66c0:	db3a      	blt.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b66c2:	d104      	bne.n	b66ce <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b66c4:	4620      	mov	r0, r4
   b66c6:	f7ff fcf6 	bl	b60b6 <_ZN7FatFile10addClusterEv>
   b66ca:	2800      	cmp	r0, #0
   b66cc:	d034      	beq.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b66ce:	6921      	ldr	r1, [r4, #16]
   b66d0:	68a0      	ldr	r0, [r4, #8]
   b66d2:	f000 fc99 	bl	b7008 <_ZNK9FatVolume17clusterFirstBlockEm>
   b66d6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b66d8:	68a0      	ldr	r0, [r4, #8]
   b66da:	b915      	cbnz	r5, b66e2 <_ZN7FatFile5writeEPKvj+0x72>
   b66dc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b66e0:	d23f      	bcs.n	b6762 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b66e2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b66e6:	4546      	cmp	r6, r8
   b66e8:	bf28      	it	cs
   b66ea:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b66ec:	2d00      	cmp	r5, #0
   b66ee:	d136      	bne.n	b675e <_ZN7FatFile5writeEPKvj+0xee>
   b66f0:	6962      	ldr	r2, [r4, #20]
   b66f2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b66f4:	429a      	cmp	r2, r3
   b66f6:	bf34      	ite	cc
   b66f8:	2201      	movcc	r2, #1
   b66fa:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b66fc:	3024      	adds	r0, #36	; 0x24
   b66fe:	f000 fc60 	bl	b6fc2 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6702:	b1c8      	cbz	r0, b6738 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6704:	4428      	add	r0, r5
   b6706:	4632      	mov	r2, r6
   b6708:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b670a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b670c:	f00d f9b8 	bl	c3a80 <memcpy>
      if (512 == (n + blockOffset)) {
   b6710:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6714:	d104      	bne.n	b6720 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6716:	68a0      	ldr	r0, [r4, #8]
   b6718:	3024      	adds	r0, #36	; 0x24
   b671a:	f000 fc2a 	bl	b6f72 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b671e:	b158      	cbz	r0, b6738 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6720:	6963      	ldr	r3, [r4, #20]
   b6722:	4433      	add	r3, r6
   b6724:	6163      	str	r3, [r4, #20]
    src += n;
   b6726:	44b1      	add	r9, r6
    nToWrite -= n;
   b6728:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b672c:	e7b4      	b.n	b6698 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b672e:	69c1      	ldr	r1, [r0, #28]
   b6730:	f7ff fe2a 	bl	b6388 <_ZN7FatFile7seekSetEm>
   b6734:	2800      	cmp	r0, #0
   b6736:	d1a8      	bne.n	b668a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6738:	7863      	ldrb	r3, [r4, #1]
   b673a:	f043 0301 	orr.w	r3, r3, #1
   b673e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6744:	e050      	b.n	b67e8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6746:	6a23      	ldr	r3, [r4, #32]
   b6748:	b93b      	cbnz	r3, b675a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b674a:	4620      	mov	r0, r4
   b674c:	f7ff fcb3 	bl	b60b6 <_ZN7FatFile10addClusterEv>
   b6750:	2800      	cmp	r0, #0
   b6752:	d0f1      	beq.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6754:	6923      	ldr	r3, [r4, #16]
   b6756:	6223      	str	r3, [r4, #32]
   b6758:	e7b9      	b.n	b66ce <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b675a:	6123      	str	r3, [r4, #16]
   b675c:	e7b7      	b.n	b66ce <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b675e:	2201      	movs	r2, #1
   b6760:	e7cc      	b.n	b66fc <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6762:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6766:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6768:	d31b      	bcc.n	b67a2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b676a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b676e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6772:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6774:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6778:	4573      	cmp	r3, lr
   b677a:	bf28      	it	cs
   b677c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b677e:	4291      	cmp	r1, r2
      n = 512*nb;
   b6780:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6784:	d307      	bcc.n	b6796 <_ZN7FatFile5writeEPKvj+0x126>
   b6786:	441a      	add	r2, r3
   b6788:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b678a:	bf82      	ittt	hi
   b678c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6790:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6794:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6796:	68a5      	ldr	r5, [r4, #8]
   b6798:	464a      	mov	r2, r9
   b679a:	6828      	ldr	r0, [r5, #0]
   b679c:	f000 fff3 	bl	b7786 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b67a0:	e7bd      	b.n	b671e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b67a2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b67a4:	bf02      	ittt	eq
   b67a6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b67aa:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b67ae:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b67b0:	68a3      	ldr	r3, [r4, #8]
   b67b2:	464a      	mov	r2, r9
   b67b4:	6818      	ldr	r0, [r3, #0]
   b67b6:	f000 ff70 	bl	b769a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b67ba:	2800      	cmp	r0, #0
   b67bc:	d0bc      	beq.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b67be:	f44f 7600 	mov.w	r6, #512	; 0x200
   b67c2:	e7ad      	b.n	b6720 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b67c4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b67c6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b67c8:	42b2      	cmp	r2, r6
   b67ca:	d204      	bcs.n	b67d6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b67cc:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b67ce:	f043 0304 	orr.w	r3, r3, #4
   b67d2:	70a3      	strb	r3, [r4, #2]
   b67d4:	e003      	b.n	b67de <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b67d6:	4a08      	ldr	r2, [pc, #32]	; (b67f8 <_ZN7FatFile5writeEPKvj+0x188>)
   b67d8:	6812      	ldr	r2, [r2, #0]
   b67da:	2a00      	cmp	r2, #0
   b67dc:	d1f7      	bne.n	b67ce <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b67de:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b67e2:	2b00      	cmp	r3, #0
   b67e4:	db02      	blt.n	b67ec <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b67e6:	4638      	mov	r0, r7
}
   b67e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b67ec:	4620      	mov	r0, r4
   b67ee:	f7ff feb5 	bl	b655c <_ZN7FatFile4syncEv>
   b67f2:	2800      	cmp	r0, #0
   b67f4:	d1f7      	bne.n	b67e6 <_ZN7FatFile5writeEPKvj+0x176>
   b67f6:	e79f      	b.n	b6738 <_ZN7FatFile5writeEPKvj+0xc8>
   b67f8:	2003e610 	.word	0x2003e610

000b67fc <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b67fc:	2904      	cmp	r1, #4
   b67fe:	d804      	bhi.n	b680a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6800:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6804:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6808:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b680a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b680c:	bf9b      	ittet	ls
   b680e:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6812:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6816:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6818:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b681a:	bf84      	itt	hi
   b681c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6820:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6822:	4770      	bx	lr

000b6824 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6824:	1e41      	subs	r1, r0, #1
   b6826:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b682a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b682c:	0842      	lsrs	r2, r0, #1
   b682e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6832:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6836:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b683a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b683c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b683e:	d1f5      	bne.n	b682c <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6840:	4770      	bx	lr

000b6842 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6842:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6844:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6846:	4604      	mov	r4, r0
   b6848:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b684a:	b923      	cbnz	r3, b6856 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b684c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6850:	6889      	ldr	r1, [r1, #8]
   b6852:	f7ff bcb3 	b.w	b61bc <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6856:	2224      	movs	r2, #36	; 0x24
   b6858:	2100      	movs	r1, #0
   b685a:	f00d f939 	bl	c3ad0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b685e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6860:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6862:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6864:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6866:	68ab      	ldr	r3, [r5, #8]
   b6868:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b686a:	68eb      	ldr	r3, [r5, #12]
   b686c:	6223      	str	r3, [r4, #32]
}
   b686e:	bd38      	pop	{r3, r4, r5, pc}

000b6870 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6874:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6876:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6878:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b687c:	4606      	mov	r6, r0
   b687e:	460f      	mov	r7, r1
   b6880:	4690      	mov	r8, r2
   b6882:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6886:	2b00      	cmp	r3, #0
   b6888:	d05d      	beq.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
   b688a:	2a0c      	cmp	r2, #12
   b688c:	d95b      	bls.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b688e:	78c3      	ldrb	r3, [r0, #3]
   b6890:	b933      	cbnz	r3, b68a0 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6892:	f000 fb57 	bl	b6f44 <_ZN7FatFile6getSFNEPc>
   b6896:	4604      	mov	r4, r0
}
   b6898:	4620      	mov	r0, r4
   b689a:	b00d      	add	sp, #52	; 0x34
   b689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b68a0:	4601      	mov	r1, r0
   b68a2:	a803      	add	r0, sp, #12
   b68a4:	f7ff ffcd 	bl	b6842 <_ZN7FatFile11openClusterEPS_>
   b68a8:	2800      	cmp	r0, #0
   b68aa:	d04c      	beq.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b68ac:	eb07 0308 	add.w	r3, r7, r8
   b68b0:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b68b4:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b68b8:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b68ba:	78f3      	ldrb	r3, [r6, #3]
   b68bc:	fa5f f58b 	uxtb.w	r5, fp
   b68c0:	42ab      	cmp	r3, r5
   b68c2:	d340      	bcc.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b68c4:	88b1      	ldrh	r1, [r6, #4]
   b68c6:	eba1 010b 	sub.w	r1, r1, fp
   b68ca:	0149      	lsls	r1, r1, #5
   b68cc:	a803      	add	r0, sp, #12
   b68ce:	f7ff fd5b 	bl	b6388 <_ZN7FatFile7seekSetEm>
   b68d2:	4604      	mov	r4, r0
   b68d4:	2800      	cmp	r0, #0
   b68d6:	d036      	beq.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b68d8:	2100      	movs	r1, #0
   b68da:	a803      	add	r0, sp, #12
   b68dc:	f7ff fd35 	bl	b634a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b68e0:	4603      	mov	r3, r0
   b68e2:	b380      	cbz	r0, b6946 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b68e4:	7ac2      	ldrb	r2, [r0, #11]
   b68e6:	2a0f      	cmp	r2, #15
   b68e8:	d12d      	bne.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b68ea:	7802      	ldrb	r2, [r0, #0]
   b68ec:	f002 021f 	and.w	r2, r2, #31
   b68f0:	42aa      	cmp	r2, r5
   b68f2:	d128      	bne.n	b6946 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b68f4:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b68f8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b68fc:	197a      	adds	r2, r7, r5
   b68fe:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6900:	4618      	mov	r0, r3
   b6902:	9101      	str	r1, [sp, #4]
   b6904:	f7ff ff7a 	bl	b67fc <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6908:	b168      	cbz	r0, b6926 <_ZN7FatFile7getNameEPcj+0xb6>
   b690a:	45a8      	cmp	r8, r5
   b690c:	d912      	bls.n	b6934 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b690e:	9901      	ldr	r1, [sp, #4]
   b6910:	3101      	adds	r1, #1
   b6912:	287f      	cmp	r0, #127	; 0x7f
   b6914:	b2c9      	uxtb	r1, r1
   b6916:	bf28      	it	cs
   b6918:	203f      	movcs	r0, #63	; 0x3f
   b691a:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b691c:	f802 0b01 	strb.w	r0, [r2], #1
   b6920:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6924:	d1ec      	bne.n	b6900 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6926:	45a8      	cmp	r8, r5
   b6928:	d904      	bls.n	b6934 <_ZN7FatFile7getNameEPcj+0xc4>
   b692a:	781a      	ldrb	r2, [r3, #0]
   b692c:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b692e:	bf48      	it	mi
   b6930:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6934:	9a00      	ldr	r2, [sp, #0]
   b6936:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b693a:	781b      	ldrb	r3, [r3, #0]
   b693c:	065b      	lsls	r3, r3, #25
   b693e:	f10b 0b01 	add.w	fp, fp, #1
   b6942:	d5ba      	bpl.n	b68ba <_ZN7FatFile7getNameEPcj+0x4a>
   b6944:	e7a8      	b.n	b6898 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6946:	2400      	movs	r4, #0
   b6948:	703c      	strb	r4, [r7, #0]
  return false;
   b694a:	e7a5      	b.n	b6898 <_ZN7FatFile7getNameEPcj+0x28>

000b694c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6950:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6952:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6956:	2b20      	cmp	r3, #32
   b6958:	d0fa      	beq.n	b6950 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b695a:	4d6a      	ldr	r5, [pc, #424]	; (b6b04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b695c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b695e:	2400      	movs	r4, #0
    c = path[len];
   b6960:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6962:	b1c3      	cbz	r3, b6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6964:	2b2f      	cmp	r3, #47	; 0x2f
   b6966:	d016      	beq.n	b6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6968:	2b5c      	cmp	r3, #92	; 0x5c
   b696a:	d102      	bne.n	b6972 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b696c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6972:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6976:	b2c0      	uxtb	r0, r0
   b6978:	281d      	cmp	r0, #29
   b697a:	d803      	bhi.n	b6984 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b697c:	fa25 f000 	lsr.w	r0, r5, r0
   b6980:	07c0      	lsls	r0, r0, #31
   b6982:	d4f3      	bmi.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6984:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6988:	283c      	cmp	r0, #60	; 0x3c
   b698a:	d0ef      	beq.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b698c:	3b20      	subs	r3, #32
   b698e:	2b5e      	cmp	r3, #94	; 0x5e
   b6990:	d8ec      	bhi.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6992:	3401      	adds	r4, #1
    c = path[len];
   b6994:	e7e4      	b.n	b6960 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6996:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6998:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b699a:	4607      	mov	r7, r0
   b699c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b69a0:	2d20      	cmp	r5, #32
   b69a2:	d0fa      	beq.n	b699a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b69a4:	2d2f      	cmp	r5, #47	; 0x2f
   b69a6:	d0f8      	beq.n	b699a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b69a8:	6017      	str	r7, [r2, #0]
  while (len) {
   b69aa:	b14c      	cbz	r4, b69c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b69ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b69b0:	2a2e      	cmp	r2, #46	; 0x2e
   b69b2:	d001      	beq.n	b69b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b69b4:	2a20      	cmp	r2, #32
   b69b6:	d101      	bne.n	b69bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b69b8:	3c01      	subs	r4, #1
  while (len) {
   b69ba:	e7f6      	b.n	b69aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b69bc:	2cff      	cmp	r4, #255	; 0xff
   b69be:	dcd5      	bgt.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b69c0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b69c4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b69c8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b69ca:	f8c1 300d 	str.w	r3, [r1, #13]
   b69ce:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69d0:	f04f 0800 	mov.w	r8, #0
   b69d4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b69d8:	2b2e      	cmp	r3, #46	; 0x2e
   b69da:	d001      	beq.n	b69e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b69dc:	2b20      	cmp	r3, #32
   b69de:	d102      	bne.n	b69e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b69e0:	f108 0801 	add.w	r8, r8, #1
   b69e4:	e7f6      	b.n	b69d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b69e6:	fab8 f088 	clz	r0, r8
   b69ea:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b69ec:	1e65      	subs	r5, r4, #1
   b69ee:	1c6b      	adds	r3, r5, #1
   b69f0:	d002      	beq.n	b69f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b69f2:	5d73      	ldrb	r3, [r6, r5]
   b69f4:	2b2e      	cmp	r3, #46	; 0x2e
   b69f6:	d114      	bne.n	b6a22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69f8:	f04f 0900 	mov.w	r9, #0
   b69fc:	2707      	movs	r7, #7
   b69fe:	464a      	mov	r2, r9
   b6a00:	46ca      	mov	sl, r9
   b6a02:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6a06:	45a0      	cmp	r8, r4
   b6a08:	da68      	bge.n	b6adc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6a0a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6a0e:	2b20      	cmp	r3, #32
   b6a10:	d003      	beq.n	b6a1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6a12:	2b2e      	cmp	r3, #46	; 0x2e
   b6a14:	d107      	bne.n	b6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6a16:	45a8      	cmp	r8, r5
   b6a18:	d012      	beq.n	b6a40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6a1a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6a1c:	f108 0801 	add.w	r8, r8, #1
   b6a20:	e7f1      	b.n	b6a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6a22:	3d01      	subs	r5, #1
   b6a24:	e7e3      	b.n	b69ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6a26:	2b22      	cmp	r3, #34	; 0x22
   b6a28:	d008      	beq.n	b6a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6a2a:	2b7c      	cmp	r3, #124	; 0x7c
   b6a2c:	d006      	beq.n	b6a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6a2e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6a32:	f1bc 0f05 	cmp.w	ip, #5
   b6a36:	d80a      	bhi.n	b6a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6a38:	2b2d      	cmp	r3, #45	; 0x2d
   b6a3a:	d012      	beq.n	b6a62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6a3c:	45a8      	cmp	r8, r5
   b6a3e:	d15b      	bne.n	b6af8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6a40:	2f0a      	cmp	r7, #10
   b6a42:	d04a      	beq.n	b6ada <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6a44:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a46:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a48:	f04f 0e10 	mov.w	lr, #16
   b6a4c:	e7e6      	b.n	b6a1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6a4e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6a52:	f1bc 0f05 	cmp.w	ip, #5
   b6a56:	d9f1      	bls.n	b6a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6a58:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6a5c:	f1bc 0f02 	cmp.w	ip, #2
   b6a60:	d9ec      	bls.n	b6a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6a62:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6a66:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6a6a:	d8e7      	bhi.n	b6a3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6a6c:	45a8      	cmp	r8, r5
   b6a6e:	d0e7      	beq.n	b6a40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6a70:	42ba      	cmp	r2, r7
   b6a72:	d830      	bhi.n	b6ad6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6a74:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6a78:	f1bc 0f19 	cmp.w	ip, #25
   b6a7c:	d81a      	bhi.n	b6ab4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6a7e:	3b20      	subs	r3, #32
        lc |= bit;
   b6a80:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6a84:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6a86:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6a8a:	f102 0c01 	add.w	ip, r2, #1
   b6a8e:	fa5f fc8c 	uxtb.w	ip, ip
   b6a92:	440a      	add	r2, r1
      if (i < 7) {
   b6a94:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6a98:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6a9a:	d801      	bhi.n	b6aa0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6a9c:	f881 c00c 	strb.w	ip, [r1, #12]
   b6aa0:	4662      	mov	r2, ip
   b6aa2:	e7bb      	b.n	b6a1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6aa4:	45a8      	cmp	r8, r5
   b6aa6:	dc18      	bgt.n	b6ada <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6aa8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6aaa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6aac:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6aae:	f04f 0e10 	mov.w	lr, #16
   b6ab2:	e7b2      	b.n	b6a1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6ab4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6ab8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6abc:	bf98      	it	ls
   b6abe:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6ac2:	e7e2      	b.n	b6a8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6ac4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6ac6:	2001      	movs	r0, #1
   b6ac8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6aca:	4419      	add	r1, r3
   b6acc:	237e      	movs	r3, #126	; 0x7e
   b6ace:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6ad0:	2331      	movs	r3, #49	; 0x31
   b6ad2:	738b      	strb	r3, [r1, #14]
   b6ad4:	e74b      	b.n	b696e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6ad6:	2f0a      	cmp	r7, #10
   b6ad8:	d1e4      	bne.n	b6aa4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6ada:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6adc:	7b4b      	ldrb	r3, [r1, #13]
   b6ade:	2b20      	cmp	r3, #32
   b6ae0:	f43f af44 	beq.w	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6ae4:	2800      	cmp	r0, #0
   b6ae6:	d0ed      	beq.n	b6ac4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6ae8:	ea1a 0f09 	tst.w	sl, r9
   b6aec:	bf18      	it	ne
   b6aee:	f04f 0902 	movne.w	r9, #2
   b6af2:	f881 9000 	strb.w	r9, [r1]
   b6af6:	e73a      	b.n	b696e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6af8:	42ba      	cmp	r2, r7
   b6afa:	d8ec      	bhi.n	b6ad6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6afc:	2000      	movs	r0, #0
      c = '_';
   b6afe:	235f      	movs	r3, #95	; 0x5f
   b6b00:	e7c3      	b.n	b6a8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6b02:	bf00      	nop
   b6b04:	31000101 	.word	0x31000101

000b6b08 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6b0c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6b10:	4606      	mov	r6, r0
   b6b12:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6b14:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6b16:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b18:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6b1c:	6861      	ldr	r1, [r4, #4]
   b6b1e:	68a2      	ldr	r2, [r4, #8]
   b6b20:	186b      	adds	r3, r5, r1
   b6b22:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b24:	4411      	add	r1, r2
   b6b26:	4291      	cmp	r1, r2
   b6b28:	d006      	beq.n	b6b38 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6b2a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6b2e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6b32:	4043      	eors	r3, r0
   b6b34:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b36:	e7f6      	b.n	b6b26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6b38:	f1b9 0f03 	cmp.w	r9, #3
   b6b3c:	bf28      	it	cs
   b6b3e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b42:	f109 0204 	add.w	r2, r9, #4
   b6b46:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6b48:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b4c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b4e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b50:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b52:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b54:	bf94      	ite	ls
   b6b56:	3130      	addls	r1, #48	; 0x30
   b6b58:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b5a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b5c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6b5e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b62:	d1f1      	bne.n	b6b48 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6b64:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6b68:	2100      	movs	r1, #0
   b6b6a:	735f      	strb	r7, [r3, #13]
   b6b6c:	4630      	mov	r0, r6
   b6b6e:	f7ff fc0b 	bl	b6388 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6b72:	2101      	movs	r1, #1
   b6b74:	4630      	mov	r0, r6
   b6b76:	f7ff fbe8 	bl	b634a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6b7a:	4601      	mov	r1, r0
   b6b7c:	b928      	cbnz	r0, b6b8a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6b7e:	7870      	ldrb	r0, [r6, #1]
   b6b80:	fab0 f080 	clz	r0, r0
   b6b84:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6b8a:	7803      	ldrb	r3, [r0, #0]
   b6b8c:	b16b      	cbz	r3, b6baa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b8e:	7ac3      	ldrb	r3, [r0, #11]
   b6b90:	071b      	lsls	r3, r3, #28
   b6b92:	d4ee      	bmi.n	b6b72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6b94:	220b      	movs	r2, #11
   b6b96:	4640      	mov	r0, r8
   b6b98:	f00c ff62 	bl	c3a60 <memcmp>
   b6b9c:	2800      	cmp	r0, #0
   b6b9e:	d1e8      	bne.n	b6b72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6ba0:	3501      	adds	r5, #1
   b6ba2:	b2ad      	uxth	r5, r5
   b6ba4:	2d64      	cmp	r5, #100	; 0x64
   b6ba6:	d1b9      	bne.n	b6b1c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6ba8:	e7ed      	b.n	b6b86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6baa:	2001      	movs	r0, #1
   b6bac:	e7eb      	b.n	b6b86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6bb0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bb4:	ed2d 8b02 	vpush	{d8}
   b6bb8:	b08b      	sub	sp, #44	; 0x2c
   b6bba:	460d      	mov	r5, r1
   b6bbc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6bbe:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bc0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6bc2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bc6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6bc8:	d105      	bne.n	b6bd6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6bca:	2000      	movs	r0, #0
}
   b6bcc:	b00b      	add	sp, #44	; 0x2c
   b6bce:	ecbd 8b02 	vpop	{d8}
   b6bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6bd6:	9b07      	ldr	r3, [sp, #28]
   b6bd8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6bda:	2b00      	cmp	r3, #0
   b6bdc:	d1f5      	bne.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6bde:	6853      	ldr	r3, [r2, #4]
   b6be0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6be2:	7813      	ldrb	r3, [r2, #0]
   b6be4:	079c      	lsls	r4, r3, #30
   b6be6:	bf1f      	itttt	ne
   b6be8:	9b05      	ldrne	r3, [sp, #20]
   b6bea:	330c      	addne	r3, #12
   b6bec:	220d      	movne	r2, #13
   b6bee:	fbb3 f3f2 	udivne	r3, r3, r2
   b6bf2:	bf1a      	itte	ne
   b6bf4:	3301      	addne	r3, #1
   b6bf6:	b2db      	uxtbne	r3, r3
   b6bf8:	2301      	moveq	r3, #1
    seekSet(0);
   b6bfa:	2100      	movs	r1, #0
   b6bfc:	4628      	mov	r0, r5
   b6bfe:	9303      	str	r3, [sp, #12]
   b6c00:	f7ff fbc2 	bl	b6388 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6c04:	f107 030d 	add.w	r3, r7, #13
  }
   b6c08:	f04f 0b00 	mov.w	fp, #0
   b6c0c:	ee08 3a10 	vmov	s16, r3
   b6c10:	46da      	mov	sl, fp
   b6c12:	465c      	mov	r4, fp
   b6c14:	465e      	mov	r6, fp
   b6c16:	f8cd b010 	str.w	fp, [sp, #16]
   b6c1a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6c1c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6c1e:	2101      	movs	r1, #1
   b6c20:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6c22:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6c26:	f7ff fb90 	bl	b634a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6c2a:	4603      	mov	r3, r0
   b6c2c:	2800      	cmp	r0, #0
   b6c2e:	d171      	bne.n	b6d14 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6c30:	786b      	ldrb	r3, [r5, #1]
   b6c32:	2b00      	cmp	r3, #0
   b6c34:	d1c9      	bne.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6c36:	9b06      	ldr	r3, [sp, #24]
   b6c38:	059a      	lsls	r2, r3, #22
   b6c3a:	d5c6      	bpl.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6c3c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6c40:	3b01      	subs	r3, #1
   b6c42:	2b01      	cmp	r3, #1
   b6c44:	d8c1      	bhi.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6c46:	9b04      	ldr	r3, [sp, #16]
   b6c48:	2c00      	cmp	r4, #0
   b6c4a:	bf08      	it	eq
   b6c4c:	4643      	moveq	r3, r8
   b6c4e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6c50:	9b03      	ldr	r3, [sp, #12]
   b6c52:	429c      	cmp	r4, r3
   b6c54:	f0c0 80f1 	bcc.w	b6e3a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6c58:	f1b9 0f00 	cmp.w	r9, #0
   b6c5c:	f040 810a 	bne.w	b6e74 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6c60:	9b04      	ldr	r3, [sp, #16]
   b6c62:	4628      	mov	r0, r5
   b6c64:	0159      	lsls	r1, r3, #5
   b6c66:	f7ff fb8f 	bl	b6388 <_ZN7FatFile7seekSetEm>
   b6c6a:	2800      	cmp	r0, #0
   b6c6c:	d0ad      	beq.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6c6e:	9b03      	ldr	r3, [sp, #12]
   b6c70:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6c74:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c78:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c7a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c7e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c82:	2e00      	cmp	r6, #0
   b6c84:	f000 810d 	beq.w	b6ea2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c88:	2100      	movs	r1, #0
   b6c8a:	4628      	mov	r0, r5
   b6c8c:	f7ff fb5d 	bl	b634a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6c90:	4604      	mov	r4, r0
   b6c92:	2800      	cmp	r0, #0
   b6c94:	d099      	beq.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6c96:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c98:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6c9c:	454e      	cmp	r6, r9
   b6c9e:	f043 0301 	orr.w	r3, r3, #1
   b6ca2:	bf0c      	ite	eq
   b6ca4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6ca8:	46b3      	movne	fp, r6
   b6caa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6cae:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6cb2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6cb6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6cba:	f107 000d 	add.w	r0, r7, #13
   b6cbe:	f7ff fdb1 	bl	b6824 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6cc2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6cc6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6cc8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6ccc:	f00b 031f 	and.w	r3, fp, #31
   b6cd0:	220d      	movs	r2, #13
   b6cd2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6cd4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6cd8:	4353      	muls	r3, r2
   b6cda:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6cdc:	9905      	ldr	r1, [sp, #20]
   b6cde:	4299      	cmp	r1, r3
   b6ce0:	f240 80d0 	bls.w	b6e84 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6ce4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6ce8:	2a04      	cmp	r2, #4
   b6cea:	fa5f fe82 	uxtb.w	lr, r2
   b6cee:	f102 0001 	add.w	r0, r2, #1
   b6cf2:	f200 80cd 	bhi.w	b6e90 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6cf6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6cfa:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6cfe:	280d      	cmp	r0, #13
   b6d00:	f103 0301 	add.w	r3, r3, #1
   b6d04:	4602      	mov	r2, r0
   b6d06:	d1e9      	bne.n	b6cdc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6d08:	3e01      	subs	r6, #1
   b6d0a:	b2f6      	uxtb	r6, r6
   b6d0c:	e7b9      	b.n	b6c82 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6d0e:	f04f 0901 	mov.w	r9, #1
   b6d12:	e783      	b.n	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6d14:	7802      	ldrb	r2, [r0, #0]
   b6d16:	2ae5      	cmp	r2, #229	; 0xe5
   b6d18:	d000      	beq.n	b6d1c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6d1a:	b97a      	cbnz	r2, b6d3c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6d1c:	9904      	ldr	r1, [sp, #16]
   b6d1e:	2c00      	cmp	r4, #0
   b6d20:	bf08      	it	eq
   b6d22:	4641      	moveq	r1, r8
   b6d24:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6d26:	9903      	ldr	r1, [sp, #12]
   b6d28:	428c      	cmp	r4, r1
        freeFound++;
   b6d2a:	bf3c      	itt	cc
   b6d2c:	3401      	addcc	r4, #1
   b6d2e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d30:	2a00      	cmp	r2, #0
   b6d32:	d080      	beq.n	b6c36 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d34:	2ae5      	cmp	r2, #229	; 0xe5
   b6d36:	d105      	bne.n	b6d44 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6d38:	2600      	movs	r6, #0
   b6d3a:	e76f      	b.n	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6d3c:	9903      	ldr	r1, [sp, #12]
   b6d3e:	428c      	cmp	r4, r1
   b6d40:	bf38      	it	cc
   b6d42:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d44:	2a2e      	cmp	r2, #46	; 0x2e
   b6d46:	d0f7      	beq.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6d48:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6d4a:	290f      	cmp	r1, #15
   b6d4c:	d14a      	bne.n	b6de4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6d4e:	bb16      	cbnz	r6, b6d96 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6d50:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6d54:	f43f af62 	beq.w	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d58:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6d5c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d60:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6d62:	220d      	movs	r2, #13
   b6d64:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6d68:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6d6c:	9a05      	ldr	r2, [sp, #20]
   b6d6e:	4542      	cmp	r2, r8
   b6d70:	d9e2      	bls.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d72:	eba2 0208 	sub.w	r2, r2, r8
   b6d76:	9208      	str	r2, [sp, #32]
   b6d78:	2200      	movs	r2, #0
   b6d7a:	eb02 0108 	add.w	r1, r2, r8
   b6d7e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6d80:	4618      	mov	r0, r3
   b6d82:	b2d1      	uxtb	r1, r2
   b6d84:	f7ff fd3a 	bl	b67fc <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6d88:	9908      	ldr	r1, [sp, #32]
   b6d8a:	428a      	cmp	r2, r1
   b6d8c:	d10d      	bne.n	b6daa <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6d8e:	2800      	cmp	r0, #0
   b6d90:	bf18      	it	ne
   b6d92:	2600      	movne	r6, #0
   b6d94:	e742      	b.n	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6d96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6d9a:	fa5f fa8a 	uxtb.w	sl, sl
   b6d9e:	4552      	cmp	r2, sl
   b6da0:	d1ca      	bne.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6da2:	7b5a      	ldrb	r2, [r3, #13]
   b6da4:	455a      	cmp	r2, fp
   b6da6:	d0dc      	beq.n	b6d62 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6da8:	e7c6      	b.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6daa:	28ff      	cmp	r0, #255	; 0xff
   b6dac:	d8c4      	bhi.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6dae:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6db2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6db6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6db8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6dba:	bf9c      	itt	ls
   b6dbc:	f10e 0020 	addls.w	r0, lr, #32
   b6dc0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dc4:	4608      	mov	r0, r1
   b6dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6dc8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6dca:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6dce:	f1bc 0f19 	cmp.w	ip, #25
   b6dd2:	bf9c      	itt	ls
   b6dd4:	3120      	addls	r1, #32
   b6dd6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dd8:	4571      	cmp	r1, lr
   b6dda:	d1ad      	bne.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6ddc:	3201      	adds	r2, #1
   b6dde:	2a0d      	cmp	r2, #13
   b6de0:	d1cb      	bne.n	b6d7a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6de2:	e71b      	b.n	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6de4:	0708      	lsls	r0, r1, #28
   b6de6:	d4a7      	bmi.n	b6d38 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6de8:	b15e      	cbz	r6, b6e02 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6dea:	f1ba 0f01 	cmp.w	sl, #1
   b6dee:	f47f aeec 	bne.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6df2:	4618      	mov	r0, r3
   b6df4:	f7ff fd16 	bl	b6824 <_ZN7FatFile11lfnChecksumEPh>
   b6df8:	4558      	cmp	r0, fp
   b6dfa:	f47f aee6 	bne.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6dfe:	46b1      	mov	r9, r6
   b6e00:	e00e      	b.n	b6e20 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6e02:	ee18 1a10 	vmov	r1, s16
   b6e06:	220b      	movs	r2, #11
   b6e08:	4618      	mov	r0, r3
   b6e0a:	f00c fe29 	bl	c3a60 <memcmp>
   b6e0e:	2800      	cmp	r0, #0
   b6e10:	f47f af04 	bne.w	b6c1c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6e14:	f897 9000 	ldrb.w	r9, [r7]
   b6e18:	f019 0901 	ands.w	r9, r9, #1
   b6e1c:	f47f af77 	bne.w	b6d0e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6e20:	9b06      	ldr	r3, [sp, #24]
   b6e22:	0519      	lsls	r1, r3, #20
   b6e24:	f53f aed1 	bmi.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6e28:	9b06      	ldr	r3, [sp, #24]
   b6e2a:	9807      	ldr	r0, [sp, #28]
   b6e2c:	f8cd 9000 	str.w	r9, [sp]
   b6e30:	4642      	mov	r2, r8
   b6e32:	4629      	mov	r1, r5
   b6e34:	f7ff faeb 	bl	b640e <_ZN7FatFile15openCachedEntryEPS_tih>
   b6e38:	e6c8      	b.n	b6bcc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6e3a:	2100      	movs	r1, #0
   b6e3c:	4628      	mov	r0, r5
   b6e3e:	f7ff fa84 	bl	b634a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6e42:	b9a0      	cbnz	r0, b6e6e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6e44:	786b      	ldrb	r3, [r5, #1]
   b6e46:	2b00      	cmp	r3, #0
   b6e48:	f47f aebf 	bne.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6e4c:	4628      	mov	r0, r5
   b6e4e:	f7ff f93d 	bl	b60cc <_ZN7FatFile13addDirClusterEv>
   b6e52:	2800      	cmp	r0, #0
   b6e54:	f43f aeb9 	beq.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6e58:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6e5a:	791b      	ldrb	r3, [r3, #4]
   b6e5c:	2b01      	cmp	r3, #1
   b6e5e:	f63f aefb 	bhi.w	b6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6e62:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6e64:	3410      	adds	r4, #16
   b6e66:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e68:	42a3      	cmp	r3, r4
   b6e6a:	d8ef      	bhi.n	b6e4c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6e6c:	e6f4      	b.n	b6c58 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6e6e:	3401      	adds	r4, #1
   b6e70:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e72:	e6ed      	b.n	b6c50 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6e74:	4639      	mov	r1, r7
   b6e76:	4628      	mov	r0, r5
   b6e78:	f7ff fe46 	bl	b6b08 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6e7c:	2800      	cmp	r0, #0
   b6e7e:	f47f aeef 	bne.w	b6c60 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6e82:	e6a2      	b.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e84:	bf14      	ite	ne
   b6e86:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6e8a:	2100      	moveq	r1, #0
   b6e8c:	b289      	uxth	r1, r1
   b6e8e:	e72b      	b.n	b6ce8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e90:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6e94:	bf94      	ite	ls
   b6e96:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6e9a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6e9e:	8091      	strh	r1, [r2, #4]
   b6ea0:	e72d      	b.n	b6cfe <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6ea2:	4631      	mov	r1, r6
   b6ea4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6ea6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6eaa:	f7ff fa4e 	bl	b634a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6eae:	4604      	mov	r4, r0
   b6eb0:	2800      	cmp	r0, #0
   b6eb2:	f43f ae8a 	beq.w	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6eb6:	2220      	movs	r2, #32
   b6eb8:	4631      	mov	r1, r6
   b6eba:	f00c fe09 	bl	c3ad0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6ebe:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6ec2:	6023      	str	r3, [r4, #0]
   b6ec4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6ec8:	6063      	str	r3, [r4, #4]
   b6eca:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6ece:	8123      	strh	r3, [r4, #8]
   b6ed0:	7dfb      	ldrb	r3, [r7, #23]
   b6ed2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6ed4:	783b      	ldrb	r3, [r7, #0]
   b6ed6:	f003 0318 	and.w	r3, r3, #24
   b6eda:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6edc:	4b0f      	ldr	r3, [pc, #60]	; (b6f1c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6ede:	681b      	ldr	r3, [r3, #0]
   b6ee0:	b19b      	cbz	r3, b6f0a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6ee2:	f104 010e 	add.w	r1, r4, #14
   b6ee6:	f104 0010 	add.w	r0, r4, #16
   b6eea:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6eec:	8a23      	ldrh	r3, [r4, #16]
   b6eee:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6ef0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6ef2:	89e3      	ldrh	r3, [r4, #14]
   b6ef4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6ef6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6ef8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6efc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6f00:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6f04:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6f08:	e78e      	b.n	b6e28 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6f0a:	2321      	movs	r3, #33	; 0x21
   b6f0c:	7423      	strb	r3, [r4, #16]
   b6f0e:	2328      	movs	r3, #40	; 0x28
   b6f10:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6f12:	2308      	movs	r3, #8
   b6f14:	73a6      	strb	r6, [r4, #14]
   b6f16:	73e3      	strb	r3, [r4, #15]
   b6f18:	e7e8      	b.n	b6eec <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6f1a:	bf00      	nop
   b6f1c:	2003e610 	.word	0x2003e610

000b6f20 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6f20:	b513      	push	{r0, r1, r4, lr}
   b6f22:	4604      	mov	r4, r0
    }
   b6f24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6f26:	b159      	cbz	r1, b6f40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6f28:	9101      	str	r1, [sp, #4]
   b6f2a:	f00c fe5c 	bl	c3be6 <strlen>
   b6f2e:	6823      	ldr	r3, [r4, #0]
   b6f30:	9901      	ldr	r1, [sp, #4]
   b6f32:	68db      	ldr	r3, [r3, #12]
   b6f34:	4602      	mov	r2, r0
   b6f36:	4620      	mov	r0, r4
    }
   b6f38:	b002      	add	sp, #8
   b6f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6f3e:	4718      	bx	r3
    }
   b6f40:	b002      	add	sp, #8
   b6f42:	bd10      	pop	{r4, pc}

000b6f44 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6f44:	b510      	push	{r4, lr}
   b6f46:	460c      	mov	r4, r1
    return m_attr;
   b6f48:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6f4a:	b909      	cbnz	r1, b6f50 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6f4c:	2000      	movs	r0, #0
}
   b6f4e:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6f50:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6f54:	d005      	beq.n	b6f62 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6f56:	232f      	movs	r3, #47	; 0x2f
   b6f58:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6f5a:	2300      	movs	r3, #0
   b6f5c:	7063      	strb	r3, [r4, #1]
  return true;
   b6f5e:	2001      	movs	r0, #1
   b6f60:	e7f5      	b.n	b6f4e <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6f62:	f7ff f8f1 	bl	b6148 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6f66:	2800      	cmp	r0, #0
   b6f68:	d0f0      	beq.n	b6f4c <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6f6a:	4621      	mov	r1, r4
   b6f6c:	f7ff f8fb 	bl	b6166 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6f70:	e7f5      	b.n	b6f5e <_ZN7FatFile6getSFNEPc+0x1a>

000b6f72 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6f72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f74:	7803      	ldrb	r3, [r0, #0]
   b6f76:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6f78:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f7a:	d520      	bpl.n	b6fbe <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b6f7c:	6843      	ldr	r3, [r0, #4]
   b6f7e:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6f80:	f100 020c 	add.w	r2, r0, #12
   b6f84:	6818      	ldr	r0, [r3, #0]
   b6f86:	9201      	str	r2, [sp, #4]
   b6f88:	f000 fb87 	bl	b769a <_ZN9SdSpiCard10writeBlockEmPKh>
   b6f8c:	9a01      	ldr	r2, [sp, #4]
   b6f8e:	4605      	mov	r5, r0
   b6f90:	b918      	cbnz	r0, b6f9a <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6f92:	2500      	movs	r5, #0
}
   b6f94:	4628      	mov	r0, r5
   b6f96:	b003      	add	sp, #12
   b6f98:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6f9a:	7823      	ldrb	r3, [r4, #0]
   b6f9c:	079b      	lsls	r3, r3, #30
   b6f9e:	d404      	bmi.n	b6faa <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6fa0:	7823      	ldrb	r3, [r4, #0]
   b6fa2:	f023 0301 	bic.w	r3, r3, #1
   b6fa6:	7023      	strb	r3, [r4, #0]
   b6fa8:	e7f4      	b.n	b6f94 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6faa:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6fae:	6919      	ldr	r1, [r3, #16]
   b6fb0:	4401      	add	r1, r0
   b6fb2:	6818      	ldr	r0, [r3, #0]
   b6fb4:	f000 fb71 	bl	b769a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6fb8:	2800      	cmp	r0, #0
   b6fba:	d1f1      	bne.n	b6fa0 <_ZN8FatCache4syncEv+0x2e>
   b6fbc:	e7e9      	b.n	b6f92 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6fbe:	2501      	movs	r5, #1
   b6fc0:	e7e8      	b.n	b6f94 <_ZN8FatCache4syncEv+0x22>

000b6fc2 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6fc2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6fc4:	6883      	ldr	r3, [r0, #8]
   b6fc6:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6fc8:	4604      	mov	r4, r0
   b6fca:	460e      	mov	r6, r1
   b6fcc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6fce:	d009      	beq.n	b6fe4 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6fd0:	f7ff ffcf 	bl	b6f72 <_ZN8FatCache4syncEv>
   b6fd4:	b908      	cbnz	r0, b6fda <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6fd6:	2000      	movs	r0, #0
}
   b6fd8:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6fda:	076b      	lsls	r3, r5, #29
   b6fdc:	d50a      	bpl.n	b6ff4 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6fde:	2300      	movs	r3, #0
   b6fe0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6fe2:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6fe4:	7822      	ldrb	r2, [r4, #0]
   b6fe6:	f005 0503 	and.w	r5, r5, #3
   b6fea:	4620      	mov	r0, r4
   b6fec:	4315      	orrs	r5, r2
   b6fee:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6ff2:	e7f1      	b.n	b6fd8 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6ff4:	6863      	ldr	r3, [r4, #4]
   b6ff6:	f104 020c 	add.w	r2, r4, #12
   b6ffa:	6818      	ldr	r0, [r3, #0]
   b6ffc:	4631      	mov	r1, r6
   b6ffe:	f000 fac3 	bl	b7588 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7002:	2800      	cmp	r0, #0
   b7004:	d1eb      	bne.n	b6fde <_ZN8FatCache4readEmh+0x1c>
   b7006:	e7e6      	b.n	b6fd6 <_ZN8FatCache4readEmh+0x14>

000b7008 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7008:	7983      	ldrb	r3, [r0, #6]
   b700a:	6940      	ldr	r0, [r0, #20]
   b700c:	3902      	subs	r1, #2
   b700e:	4099      	lsls	r1, r3
}
   b7010:	4408      	add	r0, r1
   b7012:	4770      	bx	lr

000b7014 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7014:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7016:	b570      	push	{r4, r5, r6, lr}
   b7018:	4605      	mov	r5, r0
   b701a:	460c      	mov	r4, r1
   b701c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b701e:	d802      	bhi.n	b7026 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7024:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7026:	69c3      	ldr	r3, [r0, #28]
   b7028:	428b      	cmp	r3, r1
   b702a:	d3f9      	bcc.n	b7020 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b702c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b702e:	2b20      	cmp	r3, #32
   b7030:	d116      	bne.n	b7060 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7032:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7034:	2202      	movs	r2, #2
   b7036:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b703a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b703e:	f7ff ffc0 	bl	b6fc2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7042:	2800      	cmp	r0, #0
   b7044:	d0ec      	beq.n	b7020 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7046:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b704a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b704e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7052:	69ea      	ldr	r2, [r5, #28]
   b7054:	429a      	cmp	r2, r3
  *value = next;
   b7056:	bf26      	itte	cs
   b7058:	6033      	strcs	r3, [r6, #0]
  return 1;
   b705a:	2001      	movcs	r0, #1
    return 0;
   b705c:	2000      	movcc	r0, #0
   b705e:	e7e1      	b.n	b7024 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7060:	2b10      	cmp	r3, #16
   b7062:	d1dd      	bne.n	b7020 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7064:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7068:	6981      	ldr	r1, [r0, #24]
   b706a:	2202      	movs	r2, #2
   b706c:	4419      	add	r1, r3
   b706e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7072:	f7ff ffa6 	bl	b6fc2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7076:	2800      	cmp	r0, #0
   b7078:	d0d2      	beq.n	b7020 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b707a:	b2e4      	uxtb	r4, r4
   b707c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7080:	e7e7      	b.n	b7052 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7082 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7082:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7084:	b538      	push	{r3, r4, r5, lr}
   b7086:	460c      	mov	r4, r1
   b7088:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b708a:	d801      	bhi.n	b7090 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b708c:	2000      	movs	r0, #0
}
   b708e:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7090:	69c3      	ldr	r3, [r0, #28]
   b7092:	428b      	cmp	r3, r1
   b7094:	d3fa      	bcc.n	b708c <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7096:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7098:	2b20      	cmp	r3, #32
   b709a:	d10f      	bne.n	b70bc <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b709c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b709e:	2203      	movs	r2, #3
   b70a0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b70a4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b70a8:	f7ff ff8b 	bl	b6fc2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b70ac:	2800      	cmp	r0, #0
   b70ae:	d0ed      	beq.n	b708c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b70b0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b70b4:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b70b8:	2001      	movs	r0, #1
   b70ba:	e7e8      	b.n	b708e <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b70bc:	2b10      	cmp	r3, #16
   b70be:	d1e5      	bne.n	b708c <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b70c0:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b70c4:	6981      	ldr	r1, [r0, #24]
   b70c6:	2203      	movs	r2, #3
   b70c8:	4419      	add	r1, r3
   b70ca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b70ce:	f7ff ff78 	bl	b6fc2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b70d2:	2800      	cmp	r0, #0
   b70d4:	d0da      	beq.n	b708c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b70d6:	b2e4      	uxtb	r4, r4
   b70d8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b70dc:	e7ec      	b.n	b70b8 <_ZN9FatVolume6fatPutEmm+0x36>

000b70de <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b70e2:	68c4      	ldr	r4, [r0, #12]
   b70e4:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70e6:	4605      	mov	r5, r0
   b70e8:	460e      	mov	r6, r1
   b70ea:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b70ec:	d301      	bcc.n	b70f2 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b70ee:	2701      	movs	r7, #1
   b70f0:	e001      	b.n	b70f6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b70f2:	460c      	mov	r4, r1
    setStart = false;
   b70f4:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b70f6:	69eb      	ldr	r3, [r5, #28]
    find++;
   b70f8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b70fa:	42a3      	cmp	r3, r4
   b70fc:	d202      	bcs.n	b7104 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b70fe:	b9c7      	cbnz	r7, b7132 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7100:	68ec      	ldr	r4, [r5, #12]
   b7102:	e7f4      	b.n	b70ee <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7104:	42a6      	cmp	r6, r4
   b7106:	d014      	beq.n	b7132 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7108:	aa01      	add	r2, sp, #4
   b710a:	4621      	mov	r1, r4
   b710c:	4628      	mov	r0, r5
   b710e:	f7ff ff81 	bl	b7014 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7112:	2800      	cmp	r0, #0
   b7114:	db0d      	blt.n	b7132 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7116:	d0ee      	beq.n	b70f6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7118:	9b01      	ldr	r3, [sp, #4]
   b711a:	2b00      	cmp	r3, #0
   b711c:	d1eb      	bne.n	b70f6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b711e:	b107      	cbz	r7, b7122 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7120:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7122:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7126:	4621      	mov	r1, r4
   b7128:	4628      	mov	r0, r5
   b712a:	f7ff ffaa 	bl	b7082 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b712e:	4607      	mov	r7, r0
   b7130:	b920      	cbnz	r0, b713c <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7132:	2700      	movs	r7, #0
}
   b7134:	4638      	mov	r0, r7
   b7136:	b002      	add	sp, #8
   b7138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b713c:	b916      	cbnz	r6, b7144 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b713e:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7142:	e7f7      	b.n	b7134 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7144:	4622      	mov	r2, r4
   b7146:	4631      	mov	r1, r6
   b7148:	4628      	mov	r0, r5
   b714a:	f7ff ff9a 	bl	b7082 <_ZN9FatVolume6fatPutEmm>
   b714e:	2800      	cmp	r0, #0
   b7150:	d1f5      	bne.n	b713e <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7152:	e7ee      	b.n	b7132 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7154 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7156:	4605      	mov	r5, r0
   b7158:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b715a:	aa01      	add	r2, sp, #4
   b715c:	4621      	mov	r1, r4
   b715e:	4628      	mov	r0, r5
   b7160:	f7ff ff58 	bl	b7014 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7164:	1e06      	subs	r6, r0, #0
   b7166:	db10      	blt.n	b718a <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7168:	2200      	movs	r2, #0
   b716a:	4621      	mov	r1, r4
   b716c:	4628      	mov	r0, r5
   b716e:	f7ff ff88 	bl	b7082 <_ZN9FatVolume6fatPutEmm>
   b7172:	b150      	cbz	r0, b718a <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7174:	68eb      	ldr	r3, [r5, #12]
   b7176:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7178:	bf24      	itt	cs
   b717a:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b717e:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7180:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7182:	2e00      	cmp	r6, #0
   b7184:	d1e9      	bne.n	b715a <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7186:	b002      	add	sp, #8
   b7188:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b718a:	2000      	movs	r0, #0
   b718c:	e7fb      	b.n	b7186 <_ZN9FatVolume9freeChainEm+0x32>

000b718e <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b718e:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7190:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7192:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7194:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b719a:	4604      	mov	r4, r0
  m_fatType = 0;
   b719c:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b719e:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b71a2:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b71a4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b71a8:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b71aa:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b71ae:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b71b2:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b71b6:	460d      	mov	r5, r1
   b71b8:	b1b9      	cbz	r1, b71ea <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b71ba:	2904      	cmp	r1, #4
   b71bc:	d901      	bls.n	b71c2 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b71be:	2000      	movs	r0, #0
}
   b71c0:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b71c2:	4611      	mov	r1, r2
   b71c4:	4630      	mov	r0, r6
   b71c6:	f7ff fefc 	bl	b6fc2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b71ca:	2800      	cmp	r0, #0
   b71cc:	d0f7      	beq.n	b71be <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b71ce:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b71d2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b71d6:	065b      	lsls	r3, r3, #25
   b71d8:	d1f1      	bne.n	b71be <_ZN9FatVolume4initEh+0x30>
   b71da:	f105 011b 	add.w	r1, r5, #27
   b71de:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b71e2:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b71e6:	2d00      	cmp	r5, #0
   b71e8:	d0e9      	beq.n	b71be <_ZN9FatVolume4initEh+0x30>
   b71ea:	2200      	movs	r2, #0
   b71ec:	4629      	mov	r1, r5
   b71ee:	4630      	mov	r0, r6
   b71f0:	f7ff fee7 	bl	b6fc2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b71f4:	2800      	cmp	r0, #0
   b71f6:	d0e2      	beq.n	b71be <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b71f8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b71fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7200:	d1dd      	bne.n	b71be <_ZN9FatVolume4initEh+0x30>
   b7202:	7c03      	ldrb	r3, [r0, #16]
   b7204:	2b02      	cmp	r3, #2
   b7206:	d1da      	bne.n	b71be <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7208:	89c3      	ldrh	r3, [r0, #14]
   b720a:	2b00      	cmp	r3, #0
   b720c:	d0d7      	beq.n	b71be <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b720e:	7b41      	ldrb	r1, [r0, #13]
   b7210:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7212:	1e4b      	subs	r3, r1, #1
   b7214:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7216:	2300      	movs	r3, #0
   b7218:	71a3      	strb	r3, [r4, #6]
   b721a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b721c:	2301      	movs	r3, #1
   b721e:	4299      	cmp	r1, r3
   b7220:	d007      	beq.n	b7232 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7222:	3e01      	subs	r6, #1
   b7224:	d0cb      	beq.n	b71be <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7226:	79a2      	ldrb	r2, [r4, #6]
   b7228:	005b      	lsls	r3, r3, #1
   b722a:	3201      	adds	r2, #1
   b722c:	b2db      	uxtb	r3, r3
   b722e:	71a2      	strb	r2, [r4, #6]
   b7230:	e7f5      	b.n	b721e <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7232:	8ac1      	ldrh	r1, [r0, #22]
   b7234:	b901      	cbnz	r1, b7238 <_ZN9FatVolume4initEh+0xaa>
   b7236:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7238:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b723a:	89c3      	ldrh	r3, [r0, #14]
   b723c:	442b      	add	r3, r5
   b723e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7240:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7244:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7246:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b724a:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b724c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7250:	0149      	lsls	r1, r1, #5
   b7252:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7256:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b725a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b725c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7260:	b902      	cbnz	r2, b7264 <_ZN9FatVolume4initEh+0xd6>
   b7262:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7264:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7266:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7268:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b726a:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b726c:	1c4b      	adds	r3, r1, #1
   b726e:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7270:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7274:	4299      	cmp	r1, r3
   b7276:	d802      	bhi.n	b727e <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7278:	230c      	movs	r3, #12
   b727a:	71e3      	strb	r3, [r4, #7]
   b727c:	e79f      	b.n	b71be <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b727e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7282:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7284:	bf85      	ittet	hi
   b7286:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7288:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b728a:	2310      	movls	r3, #16
    m_fatType = 32;
   b728c:	2320      	movhi	r3, #32
   b728e:	71e3      	strb	r3, [r4, #7]
  return true;
   b7290:	2001      	movs	r0, #1
   b7292:	e795      	b.n	b71c0 <_ZN9FatVolume4initEh+0x32>

000b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7294:	f000 baca 	b.w	b782c <_ZN14SdSpiAltDriver4sendEh>

000b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7298:	f000 baad 	b.w	b77f6 <_ZN14SdSpiAltDriver7receiveEv>

000b729c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b729c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b729e:	4e0e      	ldr	r6, [pc, #56]	; (b72d8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b72a0:	460d      	mov	r5, r1
   b72a2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b72a4:	f005 fff8 	bl	bd298 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b72a8:	6833      	ldr	r3, [r6, #0]
   b72aa:	1ac0      	subs	r0, r0, r3
   b72ac:	4b0b      	ldr	r3, [pc, #44]	; (b72dc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b72ae:	4298      	cmp	r0, r3
   b72b0:	d908      	bls.n	b72c4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b72b2:	f005 fff9 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b72b6:	4b0a      	ldr	r3, [pc, #40]	; (b72e0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b72b8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b72ba:	f006 fa3b 	bl	bd734 <spark_process>
   b72be:	f005 ffeb 	bl	bd298 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b72c2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b72c4:	f005 fff0 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b72c8:	b280      	uxth	r0, r0
   b72ca:	1b40      	subs	r0, r0, r5
}
   b72cc:	42a0      	cmp	r0, r4
   b72ce:	bfd4      	ite	le
   b72d0:	2000      	movle	r0, #0
   b72d2:	2001      	movgt	r0, #1
   b72d4:	bd70      	pop	{r4, r5, r6, pc}
   b72d6:	bf00      	nop
   b72d8:	2003e618 	.word	0x2003e618
   b72dc:	000186a0 	.word	0x000186a0
   b72e0:	2003e728 	.word	0x2003e728

000b72e4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b72e4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b72e6:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b72e8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b72ea:	b94d      	cbnz	r5, b7300 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b72ec:	6840      	ldr	r0, [r0, #4]
   b72ee:	f000 fa6b 	bl	b77c8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b72f2:	6863      	ldr	r3, [r4, #4]
   b72f4:	4629      	mov	r1, r5
   b72f6:	7d18      	ldrb	r0, [r3, #20]
   b72f8:	f00a f913 	bl	c1522 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b72fc:	2301      	movs	r3, #1
   b72fe:	7223      	strb	r3, [r4, #8]
  }
}
   b7300:	bd38      	pop	{r3, r4, r5, pc}

000b7302 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7302:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7304:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7306:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7308:	b16b      	cbz	r3, b7326 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b730a:	6843      	ldr	r3, [r0, #4]
   b730c:	2101      	movs	r1, #1
   b730e:	7d18      	ldrb	r0, [r3, #20]
   b7310:	f00a f907 	bl	c1522 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7314:	6860      	ldr	r0, [r4, #4]
   b7316:	21ff      	movs	r1, #255	; 0xff
   b7318:	f7ff ffbc 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b731c:	6860      	ldr	r0, [r4, #4]
   b731e:	f000 fa67 	bl	b77f0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7322:	2300      	movs	r3, #0
   b7324:	7223      	strb	r3, [r4, #8]
  }
}
   b7326:	bd10      	pop	{r4, pc}

000b7328 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b732a:	4604      	mov	r4, r0
   b732c:	460d      	mov	r5, r1
   b732e:	4616      	mov	r6, r2
   b7330:	f005 ffba 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7334:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7336:	6860      	ldr	r0, [r4, #4]
   b7338:	f7ff ffae 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b733c:	28ff      	cmp	r0, #255	; 0xff
   b733e:	7260      	strb	r0, [r4, #9]
   b7340:	d10e      	bne.n	b7360 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7346:	4639      	mov	r1, r7
   b7348:	4620      	mov	r0, r4
   b734a:	f7ff ffa7 	bl	b729c <_ZN9SdSpiCard10isTimedOutEtt>
   b734e:	2800      	cmp	r0, #0
   b7350:	d0f1      	beq.n	b7336 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7352:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7354:	4620      	mov	r0, r4
   b7356:	7023      	strb	r3, [r4, #0]
   b7358:	f7ff ffd3 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b735c:	2000      	movs	r0, #0
}
   b735e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7360:	28fe      	cmp	r0, #254	; 0xfe
   b7362:	d001      	beq.n	b7368 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7364:	2350      	movs	r3, #80	; 0x50
   b7366:	e7f5      	b.n	b7354 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7368:	6860      	ldr	r0, [r4, #4]
   b736a:	4632      	mov	r2, r6
   b736c:	4629      	mov	r1, r5
   b736e:	f000 fa47 	bl	b7800 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7372:	7260      	strb	r0, [r4, #9]
   b7374:	b108      	cbz	r0, b737a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7376:	2360      	movs	r3, #96	; 0x60
   b7378:	e7ec      	b.n	b7354 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b737a:	6860      	ldr	r0, [r4, #4]
   b737c:	f7ff ff8c 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7380:	6860      	ldr	r0, [r4, #4]
   b7382:	f7ff ff89 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7386:	2001      	movs	r0, #1
   b7388:	e7e9      	b.n	b735e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b738a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b738a:	b570      	push	{r4, r5, r6, lr}
   b738c:	4604      	mov	r4, r0
   b738e:	460e      	mov	r6, r1
   b7390:	f005 ff8a 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   b7394:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7396:	4632      	mov	r2, r6
   b7398:	4629      	mov	r1, r5
   b739a:	4620      	mov	r0, r4
   b739c:	f7ff ff7e 	bl	b729c <_ZN9SdSpiCard10isTimedOutEtt>
   b73a0:	b930      	cbnz	r0, b73b0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b73a2:	6860      	ldr	r0, [r4, #4]
   b73a4:	f7ff ff78 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73a8:	28ff      	cmp	r0, #255	; 0xff
   b73aa:	d1f4      	bne.n	b7396 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b73ac:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b73ae:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b73b0:	2000      	movs	r0, #0
   b73b2:	e7fc      	b.n	b73ae <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b73b4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b73b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b73b6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b73b8:	9201      	str	r2, [sp, #4]
   b73ba:	4604      	mov	r4, r0
   b73bc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b73be:	b90b      	cbnz	r3, b73c4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b73c0:	f7ff ff90 	bl	b72e4 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b73c4:	b125      	cbz	r5, b73d0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b73c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b73ca:	4620      	mov	r0, r4
   b73cc:	f7ff ffdd 	bl	b738a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b73d0:	6860      	ldr	r0, [r4, #4]
   b73d2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b73d6:	f7ff ff5d 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b73da:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b73dc:	af01      	add	r7, sp, #4
   b73de:	5db9      	ldrb	r1, [r7, r6]
   b73e0:	6860      	ldr	r0, [r4, #4]
   b73e2:	f7ff ff57 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b73e6:	3e01      	subs	r6, #1
   b73e8:	d2f9      	bcs.n	b73de <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b73ea:	2d00      	cmp	r5, #0
   b73ec:	6860      	ldr	r0, [r4, #4]
   b73ee:	bf0c      	ite	eq
   b73f0:	2195      	moveq	r1, #149	; 0x95
   b73f2:	2187      	movne	r1, #135	; 0x87
   b73f4:	f7ff ff4e 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b73f8:	6860      	ldr	r0, [r4, #4]
   b73fa:	f7ff ff4d 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73fe:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7400:	6860      	ldr	r0, [r4, #4]
   b7402:	f7ff ff49 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7406:	0603      	lsls	r3, r0, #24
   b7408:	7260      	strb	r0, [r4, #9]
   b740a:	d503      	bpl.n	b7414 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b740c:	3d01      	subs	r5, #1
   b740e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7412:	d1f5      	bne.n	b7400 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7414:	b003      	add	sp, #12
   b7416:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7418 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7418:	b570      	push	{r4, r5, r6, lr}
   b741a:	4604      	mov	r4, r0
   b741c:	460d      	mov	r5, r1
   b741e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7420:	2137      	movs	r1, #55	; 0x37
   b7422:	2200      	movs	r2, #0
   b7424:	f7ff ffc6 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7428:	4632      	mov	r2, r6
   b742a:	4629      	mov	r1, r5
   b742c:	4620      	mov	r0, r4
  }
   b742e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7432:	f7ff bfbf 	b.w	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7438 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b743c:	2500      	movs	r5, #0
   b743e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7440:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7442:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7444:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7446:	4604      	mov	r4, r0
   b7448:	4690      	mov	r8, r2
   b744a:	461e      	mov	r6, r3
   b744c:	f005 ff2c 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7450:	4641      	mov	r1, r8
   b7452:	4607      	mov	r7, r0
   b7454:	6860      	ldr	r0, [r4, #4]
   b7456:	f000 f9bb 	bl	b77d0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b745a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b745c:	4a49      	ldr	r2, [pc, #292]	; (b7584 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b745e:	721d      	strb	r5, [r3, #8]
   b7460:	2501      	movs	r5, #1
   b7462:	60da      	str	r2, [r3, #12]
   b7464:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7466:	4620      	mov	r0, r4
   b7468:	f7ff ff3c 	bl	b72e4 <_ZN9SdSpiCard8spiStartEv>
   b746c:	6863      	ldr	r3, [r4, #4]
   b746e:	4629      	mov	r1, r5
   b7470:	7d18      	ldrb	r0, [r3, #20]
   b7472:	f00a f856 	bl	c1522 <digitalWrite>
   b7476:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7478:	6860      	ldr	r0, [r4, #4]
   b747a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b747c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b747e:	f7ff ff09 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7482:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7486:	d1f7      	bne.n	b7478 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7488:	6863      	ldr	r3, [r4, #4]
   b748a:	4629      	mov	r1, r5
   b748c:	7d18      	ldrb	r0, [r3, #20]
   b748e:	f00a f848 	bl	c1522 <digitalWrite>
  }
   b7492:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7494:	2200      	movs	r2, #0
   b7496:	4611      	mov	r1, r2
   b7498:	4620      	mov	r0, r4
   b749a:	f7ff ff8b 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b749e:	2801      	cmp	r0, #1
   b74a0:	4680      	mov	r8, r0
   b74a2:	d018      	beq.n	b74d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b74a4:	3d01      	subs	r5, #1
   b74a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b74aa:	d107      	bne.n	b74bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b74ac:	2320      	movs	r3, #32
  spiStop();
   b74ae:	4620      	mov	r0, r4
   b74b0:	7023      	strb	r3, [r4, #0]
   b74b2:	f7ff ff26 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b74b6:	2000      	movs	r0, #0
}
   b74b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b74bc:	6860      	ldr	r0, [r4, #4]
   b74be:	21fd      	movs	r1, #253	; 0xfd
   b74c0:	f7ff fee8 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b74c4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b74c8:	6860      	ldr	r0, [r4, #4]
   b74ca:	f7ff fee5 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b74ce:	f1b8 0801 	subs.w	r8, r8, #1
   b74d2:	d1f9      	bne.n	b74c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b74d4:	e7de      	b.n	b7494 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b74d6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b74da:	2108      	movs	r1, #8
   b74dc:	4620      	mov	r0, r4
   b74de:	f7ff ff69 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b74e2:	2805      	cmp	r0, #5
   b74e4:	d114      	bne.n	b7510 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b74e6:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b74ea:	2500      	movs	r5, #0
   b74ec:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b74ee:	462a      	mov	r2, r5
   b74f0:	2129      	movs	r1, #41	; 0x29
   b74f2:	4620      	mov	r0, r4
   b74f4:	f7ff ff90 	bl	b7418 <_ZN9SdSpiCard8cardAcmdEhm>
   b74f8:	4602      	mov	r2, r0
   b74fa:	b1d8      	cbz	r0, b7534 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b74fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7500:	4639      	mov	r1, r7
   b7502:	4620      	mov	r0, r4
   b7504:	f7ff feca 	bl	b729c <_ZN9SdSpiCard10isTimedOutEtt>
   b7508:	2800      	cmp	r0, #0
   b750a:	d0f0      	beq.n	b74ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b750c:	2343      	movs	r3, #67	; 0x43
   b750e:	e7ce      	b.n	b74ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7510:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7512:	6860      	ldr	r0, [r4, #4]
   b7514:	f7ff fec0 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7518:	3d01      	subs	r5, #1
   b751a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b751e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7520:	d1f7      	bne.n	b7512 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7522:	28aa      	cmp	r0, #170	; 0xaa
   b7524:	d104      	bne.n	b7530 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7526:	2302      	movs	r3, #2
   b7528:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b752a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b752e:	e7dd      	b.n	b74ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7530:	2325      	movs	r3, #37	; 0x25
   b7532:	e7bc      	b.n	b74ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7534:	7aa3      	ldrb	r3, [r4, #10]
   b7536:	2b02      	cmp	r3, #2
   b7538:	d118      	bne.n	b756c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b753a:	213a      	movs	r1, #58	; 0x3a
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff ff39 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b7542:	b108      	cbz	r0, b7548 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7544:	2337      	movs	r3, #55	; 0x37
   b7546:	e7b2      	b.n	b74ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7548:	6860      	ldr	r0, [r4, #4]
   b754a:	f7ff fea5 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b754e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7552:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7554:	bf04      	itt	eq
   b7556:	2303      	moveq	r3, #3
   b7558:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b755a:	6860      	ldr	r0, [r4, #4]
   b755c:	f7ff fe9c 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7560:	6860      	ldr	r0, [r4, #4]
   b7562:	f7ff fe99 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7566:	6860      	ldr	r0, [r4, #4]
   b7568:	f7ff fe96 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b756c:	4620      	mov	r0, r4
   b756e:	f7ff fec8 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7572:	6863      	ldr	r3, [r4, #4]
   b7574:	7930      	ldrb	r0, [r6, #4]
   b7576:	68b1      	ldr	r1, [r6, #8]
   b7578:	89b2      	ldrh	r2, [r6, #12]
   b757a:	821a      	strh	r2, [r3, #16]
   b757c:	7218      	strb	r0, [r3, #8]
   b757e:	60d9      	str	r1, [r3, #12]
  return true;
   b7580:	2001      	movs	r0, #1
   b7582:	e799      	b.n	b74b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7584:	0003d090 	.word	0x0003d090

000b7588 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7588:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b758a:	7a83      	ldrb	r3, [r0, #10]
   b758c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b758e:	bf18      	it	ne
   b7590:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7592:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7594:	460a      	mov	r2, r1
   b7596:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7598:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b759a:	f7ff ff0b 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b759e:	b130      	cbz	r0, b75ae <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b75a0:	2330      	movs	r3, #48	; 0x30
   b75a2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b75a4:	4620      	mov	r0, r4
   b75a6:	f7ff feac 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75aa:	2500      	movs	r5, #0
   b75ac:	e00b      	b.n	b75c6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b75ae:	4629      	mov	r1, r5
   b75b0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b75b4:	4620      	mov	r0, r4
   b75b6:	f7ff feb7 	bl	b7328 <_ZN9SdSpiCard8readDataEPhj>
   b75ba:	4605      	mov	r5, r0
   b75bc:	2800      	cmp	r0, #0
   b75be:	d0f1      	beq.n	b75a4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7ff fe9e 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
}
   b75c6:	4628      	mov	r0, r5
   b75c8:	bd38      	pop	{r3, r4, r5, pc}

000b75ca <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75ca:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b75cc:	7a83      	ldrb	r3, [r0, #10]
   b75ce:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75d0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b75d2:	bf18      	it	ne
   b75d4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b75d6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75d8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b75da:	f7ff feeb 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b75de:	b130      	cbz	r0, b75ee <_ZN9SdSpiCard9readStartEm+0x24>
   b75e0:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b75e2:	4620      	mov	r0, r4
   b75e4:	7023      	strb	r3, [r4, #0]
   b75e6:	f7ff fe8c 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75ea:	2000      	movs	r0, #0
}
   b75ec:	bd10      	pop	{r4, pc}
  return true;
   b75ee:	2001      	movs	r0, #1
   b75f0:	e7fc      	b.n	b75ec <_ZN9SdSpiCard9readStartEm+0x22>

000b75f2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b75f2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b75f4:	2200      	movs	r2, #0
   b75f6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b75f8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b75fa:	f7ff fedb 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b75fe:	b130      	cbz	r0, b760e <_ZN9SdSpiCard8readStopEv+0x1c>
   b7600:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7602:	4620      	mov	r0, r4
   b7604:	7023      	strb	r3, [r4, #0]
   b7606:	f7ff fe7c 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b760a:	2000      	movs	r0, #0
}
   b760c:	bd10      	pop	{r4, pc}
  spiStop();
   b760e:	4620      	mov	r0, r4
   b7610:	f7ff fe77 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7614:	2001      	movs	r0, #1
   b7616:	e7f9      	b.n	b760c <_ZN9SdSpiCard8readStopEv+0x1a>

000b7618 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b761a:	4604      	mov	r4, r0
   b761c:	4616      	mov	r6, r2
   b761e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7620:	f7ff ffd3 	bl	b75ca <_ZN9SdSpiCard9readStartEm>
   b7624:	b168      	cbz	r0, b7642 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7626:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7628:	b2ab      	uxth	r3, r5
   b762a:	429f      	cmp	r7, r3
   b762c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7630:	d909      	bls.n	b7646 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7632:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7636:	4620      	mov	r0, r4
   b7638:	f7ff fe76 	bl	b7328 <_ZN9SdSpiCard8readDataEPhj>
   b763c:	3501      	adds	r5, #1
   b763e:	2800      	cmp	r0, #0
   b7640:	d1f2      	bne.n	b7628 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7642:	2000      	movs	r0, #0
   b7644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7646:	4620      	mov	r0, r4
}
   b7648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b764c:	f7ff bfd1 	b.w	b75f2 <_ZN9SdSpiCard8readStopEv>

000b7650 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7650:	b538      	push	{r3, r4, r5, lr}
   b7652:	4604      	mov	r4, r0
   b7654:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7656:	6840      	ldr	r0, [r0, #4]
   b7658:	f7ff fe1c 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b765c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7660:	6860      	ldr	r0, [r4, #4]
   b7662:	4629      	mov	r1, r5
   b7664:	f000 f8e6 	bl	b7834 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7668:	6860      	ldr	r0, [r4, #4]
   b766a:	21ff      	movs	r1, #255	; 0xff
   b766c:	f7ff fe12 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7670:	6860      	ldr	r0, [r4, #4]
   b7672:	21ff      	movs	r1, #255	; 0xff
   b7674:	f7ff fe0e 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7678:	6860      	ldr	r0, [r4, #4]
   b767a:	f7ff fe0d 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b767e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7680:	f000 001f 	and.w	r0, r0, #31
   b7684:	2805      	cmp	r0, #5
   b7686:	d006      	beq.n	b7696 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7688:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b768a:	4620      	mov	r0, r4
   b768c:	7023      	strb	r3, [r4, #0]
   b768e:	f7ff fe38 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7692:	2000      	movs	r0, #0
}
   b7694:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7696:	2001      	movs	r0, #1
   b7698:	e7fc      	b.n	b7694 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b769a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b769a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b769c:	7a83      	ldrb	r3, [r0, #10]
   b769e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b76a0:	bf18      	it	ne
   b76a2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b76a4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b76a6:	460a      	mov	r2, r1
   b76a8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b76aa:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b76ac:	f7ff fe82 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b76b0:	4606      	mov	r6, r0
   b76b2:	b130      	cbz	r0, b76c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b76b4:	2332      	movs	r3, #50	; 0x32
   b76b6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b76b8:	4620      	mov	r0, r4
   b76ba:	f7ff fe22 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b76be:	2500      	movs	r5, #0
   b76c0:	e01f      	b.n	b7702 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b76c2:	462a      	mov	r2, r5
   b76c4:	21fe      	movs	r1, #254	; 0xfe
   b76c6:	4620      	mov	r0, r4
   b76c8:	f7ff ffc2 	bl	b7650 <_ZN9SdSpiCard9writeDataEhPKh>
   b76cc:	2800      	cmp	r0, #0
   b76ce:	d0f3      	beq.n	b76b8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b76d4:	4620      	mov	r0, r4
   b76d6:	f7ff fe58 	bl	b738a <_ZN9SdSpiCard11waitNotBusyEt>
   b76da:	4605      	mov	r5, r0
   b76dc:	b908      	cbnz	r0, b76e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b76de:	235a      	movs	r3, #90	; 0x5a
   b76e0:	e7e9      	b.n	b76b6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b76e2:	4632      	mov	r2, r6
   b76e4:	210d      	movs	r1, #13
   b76e6:	4620      	mov	r0, r4
   b76e8:	f7ff fe64 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b76ec:	b108      	cbz	r0, b76f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b76ee:	2329      	movs	r3, #41	; 0x29
   b76f0:	e7e1      	b.n	b76b6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b76f2:	6860      	ldr	r0, [r4, #4]
   b76f4:	f7ff fdd0 	bl	b7298 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b76f8:	2800      	cmp	r0, #0
   b76fa:	d1f8      	bne.n	b76ee <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b76fc:	4620      	mov	r0, r4
   b76fe:	f7ff fe00 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
}
   b7702:	4628      	mov	r0, r5
   b7704:	bd70      	pop	{r4, r5, r6, pc}

000b7706 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7706:	b513      	push	{r0, r1, r4, lr}
   b7708:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b770a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b770e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7710:	f7ff fe3b 	bl	b738a <_ZN9SdSpiCard11waitNotBusyEt>
   b7714:	9a01      	ldr	r2, [sp, #4]
   b7716:	b930      	cbnz	r0, b7726 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7718:	235b      	movs	r3, #91	; 0x5b
   b771a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b771c:	4620      	mov	r0, r4
   b771e:	f7ff fdf0 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7722:	2000      	movs	r0, #0
   b7724:	e005      	b.n	b7732 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7726:	21fc      	movs	r1, #252	; 0xfc
   b7728:	4620      	mov	r0, r4
   b772a:	f7ff ff91 	bl	b7650 <_ZN9SdSpiCard9writeDataEhPKh>
   b772e:	2800      	cmp	r0, #0
   b7730:	d0f4      	beq.n	b771c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7732:	b002      	add	sp, #8
   b7734:	bd10      	pop	{r4, pc}

000b7736 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7736:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7738:	7a83      	ldrb	r3, [r0, #10]
   b773a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b773c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b773e:	bf18      	it	ne
   b7740:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7742:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7744:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7746:	f7ff fe35 	bl	b73b4 <_ZN9SdSpiCard11cardCommandEhm>
   b774a:	b130      	cbz	r0, b775a <_ZN9SdSpiCard10writeStartEm+0x24>
   b774c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b774e:	4620      	mov	r0, r4
   b7750:	7023      	strb	r3, [r4, #0]
   b7752:	f7ff fdd6 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7756:	2000      	movs	r0, #0
}
   b7758:	bd10      	pop	{r4, pc}
  return true;
   b775a:	2001      	movs	r0, #1
   b775c:	e7fc      	b.n	b7758 <_ZN9SdSpiCard10writeStartEm+0x22>

000b775e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b775e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7760:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7764:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7766:	f7ff fe10 	bl	b738a <_ZN9SdSpiCard11waitNotBusyEt>
   b776a:	4605      	mov	r5, r0
   b776c:	b930      	cbnz	r0, b777c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b776e:	2356      	movs	r3, #86	; 0x56
   b7770:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7772:	4620      	mov	r0, r4
   b7774:	f7ff fdc5 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7778:	4628      	mov	r0, r5
   b777a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b777c:	6860      	ldr	r0, [r4, #4]
   b777e:	21fd      	movs	r1, #253	; 0xfd
   b7780:	f7ff fd88 	bl	b7294 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7784:	e7f5      	b.n	b7772 <_ZN9SdSpiCard9writeStopEv+0x14>

000b7786 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7788:	4604      	mov	r4, r0
   b778a:	4616      	mov	r6, r2
   b778c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b778e:	f7ff ffd2 	bl	b7736 <_ZN9SdSpiCard10writeStartEm>
   b7792:	b170      	cbz	r0, b77b2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7794:	2500      	movs	r5, #0
   b7796:	42bd      	cmp	r5, r7
   b7798:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b779c:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b779e:	d004      	beq.n	b77aa <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b77a0:	f7ff ffb1 	bl	b7706 <_ZN9SdSpiCard9writeDataEPKh>
   b77a4:	b128      	cbz	r0, b77b2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b77a6:	3501      	adds	r5, #1
   b77a8:	e7f5      	b.n	b7796 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b77aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b77ae:	f7ff bfd6 	b.w	b775e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b77b2:	4620      	mov	r0, r4
   b77b4:	f7ff fda5 	bl	b7302 <_ZN9SdSpiCard7spiStopEv>
}
   b77b8:	2000      	movs	r0, #0
   b77ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77bc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b77bc:	4b01      	ldr	r3, [pc, #4]	; (b77c4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b77be:	2201      	movs	r2, #1
   b77c0:	701a      	strb	r2, [r3, #0]
}
   b77c2:	4770      	bx	lr
   b77c4:	2003e61c 	.word	0x2003e61c

000b77c8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b77c8:	1d01      	adds	r1, r0, #4
   b77ca:	6800      	ldr	r0, [r0, #0]
   b77cc:	f009 ba1e 	b.w	c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b77d0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b77d0:	b510      	push	{r4, lr}
   b77d2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b77d4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b77d6:	6800      	ldr	r0, [r0, #0]
   b77d8:	f009 f9d3 	bl	c0b82 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b77dc:	7d20      	ldrb	r0, [r4, #20]
   b77de:	2101      	movs	r1, #1
   b77e0:	f009 fe8e 	bl	c1500 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b77e4:	7d20      	ldrb	r0, [r4, #20]
   b77e6:	2101      	movs	r1, #1
}
   b77e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b77ec:	f009 be99 	b.w	c1522 <digitalWrite>

000b77f0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b77f0:	6800      	ldr	r0, [r0, #0]
   b77f2:	f009 b9f1 	b.w	c0bd8 <_ZN8SPIClass14endTransactionEv>

000b77f6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b77f6:	6800      	ldr	r0, [r0, #0]
   b77f8:	21ff      	movs	r1, #255	; 0xff
   b77fa:	f009 baa7 	b.w	c0d4c <_ZN8SPIClass8transferEh>
	...

000b7800 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7800:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7802:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7804:	4a07      	ldr	r2, [pc, #28]	; (b7824 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7806:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7808:	2500      	movs	r5, #0
   b780a:	4c07      	ldr	r4, [pc, #28]	; (b7828 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b780c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b780e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7810:	460a      	mov	r2, r1
   b7812:	4629      	mov	r1, r5
   b7814:	f009 faa0 	bl	c0d58 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7818:	7823      	ldrb	r3, [r4, #0]
   b781a:	2b00      	cmp	r3, #0
   b781c:	d0fc      	beq.n	b7818 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b781e:	2000      	movs	r0, #0
   b7820:	b003      	add	sp, #12
   b7822:	bd30      	pop	{r4, r5, pc}
   b7824:	000b77bd 	.word	0x000b77bd
   b7828:	2003e61c 	.word	0x2003e61c

000b782c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b782c:	6800      	ldr	r0, [r0, #0]
   b782e:	f009 ba8d 	b.w	c0d4c <_ZN8SPIClass8transferEh>
	...

000b7834 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7834:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7836:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7838:	4a06      	ldr	r2, [pc, #24]	; (b7854 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b783a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b783c:	2500      	movs	r5, #0
   b783e:	4c06      	ldr	r4, [pc, #24]	; (b7858 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7840:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7842:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7844:	462a      	mov	r2, r5
   b7846:	f009 fa87 	bl	c0d58 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b784a:	7823      	ldrb	r3, [r4, #0]
   b784c:	2b00      	cmp	r3, #0
   b784e:	d0fc      	beq.n	b784a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7850:	b003      	add	sp, #12
   b7852:	bd30      	pop	{r4, r5, pc}
   b7854:	000b77bd 	.word	0x000b77bd
   b7858:	2003e61c 	.word	0x2003e61c

000b785c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b785c:	4770      	bx	lr

000b785e <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b785e:	4770      	bx	lr

000b7860 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b7860:	b538      	push	{r3, r4, r5, lr}
   b7862:	460c      	mov	r4, r1
   b7864:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7866:	2220      	movs	r2, #32
   b7868:	2100      	movs	r1, #0
   b786a:	f104 0008 	add.w	r0, r4, #8
   b786e:	f00c f92f 	bl	c3ad0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b7872:	4909      	ldr	r1, [pc, #36]	; (b7898 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7874:	220b      	movs	r2, #11
   b7876:	4620      	mov	r0, r4
   b7878:	f00c f9e4 	bl	c3c44 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b787c:	2301      	movs	r3, #1
   b787e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b7880:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7882:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7884:	2302      	movs	r3, #2
   b7886:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b7888:	4b04      	ldr	r3, [pc, #16]	; (b789c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b788a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b788c:	4b04      	ldr	r3, [pc, #16]	; (b78a0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b788e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b7890:	4b04      	ldr	r3, [pc, #16]	; (b78a4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b7892:	6223      	str	r3, [r4, #32]
}
   b7894:	bd38      	pop	{r3, r4, r5, pc}
   b7896:	bf00      	nop
   b7898:	000c630c 	.word	0x000c630c
   b789c:	c4c80000 	.word	0xc4c80000
   b78a0:	44c80000 	.word	0x44c80000
   b78a4:	3c75c28f 	.word	0x3c75c28f

000b78a8 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b78a8:	b510      	push	{r4, lr}
   b78aa:	2128      	movs	r1, #40	; 0x28
   b78ac:	4604      	mov	r4, r0
   b78ae:	f7fc fbf8 	bl	b40a2 <_ZdlPvj>
   b78b2:	4620      	mov	r0, r4
   b78b4:	bd10      	pop	{r4, pc}
	...

000b78b8 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b78b8:	4a03      	ldr	r2, [pc, #12]	; (b78c8 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b78ba:	6002      	str	r2, [r0, #0]
   b78bc:	2200      	movs	r2, #0
   b78be:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b78c2:	7602      	strb	r2, [r0, #24]
   b78c4:	4770      	bx	lr
   b78c6:	bf00      	nop
   b78c8:	000c632c 	.word	0x000c632c

000b78cc <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b78cc:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78ce:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b78d0:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78d2:	2200      	movs	r2, #0
   b78d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b78d8:	2506      	movs	r5, #6
   b78da:	2228      	movs	r2, #40	; 0x28
   b78dc:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b78e0:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78e2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78e6:	a806      	add	r0, sp, #24
   b78e8:	f005 f91a 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b78ec:	462a      	mov	r2, r5
   b78ee:	a904      	add	r1, sp, #16
   b78f0:	a806      	add	r0, sp, #24
   b78f2:	f005 f993 	bl	bcc1c <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b78f6:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b78f8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b78fc:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b7900:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b7904:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b7906:	2d03      	cmp	r5, #3
   b7908:	bf98      	it	ls
   b790a:	4812      	ldrls	r0, [pc, #72]	; (b7954 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b790c:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b790e:	ee07 1a10 	vmov	s14, r1
   b7912:	bf9c      	itt	ls
   b7914:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b7918:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b791c:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b791e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b7922:	bf88      	it	hi
   b7924:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b7928:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b792c:	ee07 2a10 	vmov	s14, r2
   b7930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7934:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7938:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b793c:	ee07 3a10 	vmov	s14, r3
   b7940:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7944:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7948:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b794c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b7950:	b00d      	add	sp, #52	; 0x34
   b7952:	bd30      	pop	{r4, r5, pc}
   b7954:	000c6314 	.word	0x000c6314

000b7958 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7958:	b538      	push	{r3, r4, r5, lr}
   b795a:	460c      	mov	r4, r1
   b795c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b795e:	2220      	movs	r2, #32
   b7960:	2100      	movs	r1, #0
   b7962:	1d20      	adds	r0, r4, #4
   b7964:	f00c f8b4 	bl	c3ad0 <memset>
  event->version = sizeof(sensors_event_t);
   b7968:	2324      	movs	r3, #36	; 0x24
   b796a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b796c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b796e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7970:	2302      	movs	r3, #2
   b7972:	60a3      	str	r3, [r4, #8]
   b7974:	f005 fc98 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b7978:	6120      	str	r0, [r4, #16]
  read();
   b797a:	4628      	mov	r0, r5
   b797c:	f7ff ffa6 	bl	b78cc <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b7980:	edd5 7a03 	vldr	s15, [r5, #12]
   b7984:	ed9f 7a09 	vldr	s14, [pc, #36]	; b79ac <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b7988:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b798c:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b798e:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b7992:	edd5 7a04 	vldr	s15, [r5, #16]
   b7996:	ee67 7a87 	vmul.f32	s15, s15, s14
   b799a:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b799e:	edd5 7a05 	vldr	s15, [r5, #20]
   b79a2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b79a6:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b79aa:	bd38      	pop	{r3, r4, r5, pc}
   b79ac:	42c80000 	.word	0x42c80000

000b79b0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b79b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b79b2:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b79b4:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b79b6:	2700      	movs	r7, #0
   b79b8:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b79bc:	2320      	movs	r3, #32
   b79be:	9300      	str	r3, [sp, #0]
   b79c0:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b79c2:	460e      	mov	r6, r1
   b79c4:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b79c6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b79ca:	462b      	mov	r3, r5
   b79cc:	a808      	add	r0, sp, #32
   b79ce:	f005 f8a7 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b79d2:	2305      	movs	r3, #5
   b79d4:	2202      	movs	r2, #2
   b79d6:	a908      	add	r1, sp, #32
   b79d8:	a804      	add	r0, sp, #16
   b79da:	f005 f97d 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b79de:	4631      	mov	r1, r6
   b79e0:	a804      	add	r0, sp, #16
   b79e2:	f005 f98b 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b79e6:	2323      	movs	r3, #35	; 0x23
   b79e8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b79ec:	9300      	str	r3, [sp, #0]
   b79ee:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b79f2:	462b      	mov	r3, r5
   b79f4:	9501      	str	r5, [sp, #4]
   b79f6:	a80e      	add	r0, sp, #56	; 0x38
   b79f8:	f005 f892 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b79fc:	2302      	movs	r3, #2
   b79fe:	461a      	mov	r2, r3
   b7a00:	a90e      	add	r1, sp, #56	; 0x38
   b7a02:	a806      	add	r0, sp, #24
   b7a04:	f005 f968 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b7a08:	4631      	mov	r1, r6
   b7a0a:	a806      	add	r0, sp, #24
   b7a0c:	f005 f976 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a10:	b015      	add	sp, #84	; 0x54
   b7a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a14 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7a14:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7a16:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7a18:	b08c      	sub	sp, #48	; 0x30
   b7a1a:	4606      	mov	r6, r0
   b7a1c:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7a1e:	d103      	bne.n	b7a28 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7a20:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7a22:	f7ff ffc5 	bl	b79b0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b7a26:	e009      	b.n	b7a3c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b7a28:	2903      	cmp	r1, #3
   b7a2a:	d003      	beq.n	b7a34 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b7a2c:	2905      	cmp	r1, #5
   b7a2e:	d103      	bne.n	b7a38 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b7a30:	2101      	movs	r1, #1
   b7a32:	e7f6      	b.n	b7a22 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7a34:	2102      	movs	r1, #2
   b7a36:	e7f4      	b.n	b7a22 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7a38:	2907      	cmp	r1, #7
   b7a3a:	d01b      	beq.n	b7a74 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b7a3c:	200a      	movs	r0, #10
   b7a3e:	f005 ff7d 	bl	bd93c <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7a42:	2501      	movs	r5, #1
   b7a44:	2300      	movs	r3, #0
   b7a46:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7a4a:	2320      	movs	r3, #32
   b7a4c:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b7a50:	9300      	str	r3, [sp, #0]
   b7a52:	9501      	str	r5, [sp, #4]
   b7a54:	462b      	mov	r3, r5
   b7a56:	a806      	add	r0, sp, #24
   b7a58:	f005 f862 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b7a5c:	462b      	mov	r3, r5
   b7a5e:	2204      	movs	r2, #4
   b7a60:	a906      	add	r1, sp, #24
   b7a62:	a804      	add	r0, sp, #16
   b7a64:	f005 f938 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7a68:	4621      	mov	r1, r4
   b7a6a:	a804      	add	r0, sp, #16
   b7a6c:	f005 f946 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a70:	b00c      	add	sp, #48	; 0x30
   b7a72:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7a74:	2100      	movs	r1, #0
   b7a76:	e7d4      	b.n	b7a22 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b7a78 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a78:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a7a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a7c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a7e:	2500      	movs	r5, #0
   b7a80:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7a84:	2222      	movs	r2, #34	; 0x22
   b7a86:	9301      	str	r3, [sp, #4]
   b7a88:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a8a:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a8c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a90:	a806      	add	r0, sp, #24
   b7a92:	f005 f845 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b7a96:	462b      	mov	r3, r5
   b7a98:	2202      	movs	r2, #2
   b7a9a:	a906      	add	r1, sp, #24
   b7a9c:	a804      	add	r0, sp, #16
   b7a9e:	f005 f91b 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b7aa2:	4621      	mov	r1, r4
   b7aa4:	a804      	add	r0, sp, #16
   b7aa6:	f005 f929 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7aaa:	b00d      	add	sp, #52	; 0x34
   b7aac:	bd30      	pop	{r4, r5, pc}

000b7aae <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7aae:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ab0:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7ab2:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ab4:	2200      	movs	r2, #0
   b7ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7aba:	2221      	movs	r2, #33	; 0x21
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7ac0:	460d      	mov	r5, r1
   b7ac2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ac4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7ac8:	a806      	add	r0, sp, #24
   b7aca:	f005 f829 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7ace:	2305      	movs	r3, #5
   b7ad0:	2202      	movs	r2, #2
   b7ad2:	a906      	add	r1, sp, #24
   b7ad4:	a804      	add	r0, sp, #16
   b7ad6:	f005 f8ff 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b7ada:	4629      	mov	r1, r5
   b7adc:	a804      	add	r0, sp, #16
   b7ade:	f005 f90d 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b7ae2:	7625      	strb	r5, [r4, #24]
}
   b7ae4:	b00d      	add	sp, #52	; 0x34
   b7ae6:	bd30      	pop	{r4, r5, pc}

000b7ae8 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7ae8:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7aea:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7aec:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7aee:	2200      	movs	r2, #0
   b7af0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7af4:	2221      	movs	r2, #33	; 0x21
   b7af6:	9301      	str	r3, [sp, #4]
   b7af8:	9200      	str	r2, [sp, #0]
   b7afa:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7afe:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b00:	a806      	add	r0, sp, #24
   b7b02:	f005 f80d 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7b06:	2305      	movs	r3, #5
   b7b08:	2202      	movs	r2, #2
   b7b0a:	a906      	add	r1, sp, #24
   b7b0c:	a804      	add	r0, sp, #16
   b7b0e:	f005 f8e3 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b7b12:	a804      	add	r0, sp, #16
   b7b14:	f005 f8e5 	bl	bcce2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7b18:	b2c0      	uxtb	r0, r0
   b7b1a:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b7b1c:	b00c      	add	sp, #48	; 0x30
   b7b1e:	bd10      	pop	{r4, pc}

000b7b20 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b7b20:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b22:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7b24:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b26:	2501      	movs	r5, #1
   b7b28:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7b2c:	2321      	movs	r3, #33	; 0x21
   b7b2e:	9300      	str	r3, [sp, #0]
   b7b30:	9501      	str	r5, [sp, #4]
   b7b32:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7b36:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b38:	462b      	mov	r3, r5
   b7b3a:	a806      	add	r0, sp, #24
   b7b3c:	f004 fff0 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b7b40:	2302      	movs	r3, #2
   b7b42:	462a      	mov	r2, r5
   b7b44:	a906      	add	r1, sp, #24
   b7b46:	a804      	add	r0, sp, #16
   b7b48:	f005 f8c6 	bl	bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b7b4c:	4629      	mov	r1, r5
   b7b4e:	a804      	add	r0, sp, #16
   b7b50:	f005 f8d4 	bl	bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7b54:	200a      	movs	r0, #10
   b7b56:	f005 fef1 	bl	bd93c <delay>
  getRange();
   b7b5a:	4620      	mov	r0, r4
   b7b5c:	f7ff ffc4 	bl	b7ae8 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b7b60:	b00d      	add	sp, #52	; 0x34
   b7b62:	bd30      	pop	{r4, r5, pc}

000b7b64 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7b64:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b66:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7b68:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b6a:	2500      	movs	r5, #0
   b7b6c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b7b70:	230f      	movs	r3, #15
   b7b72:	9300      	str	r3, [sp, #0]
   b7b74:	9601      	str	r6, [sp, #4]
   b7b76:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7b7a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b7b7c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b7e:	a804      	add	r0, sp, #16
   b7b80:	f004 ffce 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b7b84:	a804      	add	r0, sp, #16
   b7b86:	f005 f88b 	bl	bcca0 <_ZN23Adafruit_BusIO_Register4readEv>
   b7b8a:	283d      	cmp	r0, #61	; 0x3d
   b7b8c:	d115      	bne.n	b7bba <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b7b8e:	4620      	mov	r0, r4
   b7b90:	f7ff ffc6 	bl	b7b20 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7b94:	2103      	movs	r1, #3
   b7b96:	4620      	mov	r0, r4
   b7b98:	f7ff ff0a 	bl	b79b0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b7b9c:	4631      	mov	r1, r6
   b7b9e:	4620      	mov	r0, r4
   b7ba0:	f7ff ff38 	bl	b7a14 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b7ba4:	4629      	mov	r1, r5
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	f7ff ff81 	bl	b7aae <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b7bac:	4620      	mov	r0, r4
   b7bae:	4629      	mov	r1, r5
   b7bb0:	f7ff ff62 	bl	b7a78 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b7bb4:	4630      	mov	r0, r6
}
   b7bb6:	b00a      	add	sp, #40	; 0x28
   b7bb8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b7bba:	4628      	mov	r0, r5
   b7bbc:	e7fb      	b.n	b7bb6 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b7bbe <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b7bc0:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7bc2:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b7bc4:	b95b      	cbnz	r3, b7bde <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b7bc6:	2010      	movs	r0, #16
   b7bc8:	e9cd 1200 	strd	r1, r2, [sp]
   b7bcc:	f7fc fa63 	bl	b4096 <_Znwj>
   b7bd0:	4605      	mov	r5, r0
   b7bd2:	b118      	cbz	r0, b7bdc <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b7bd4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7bd8:	f005 f8a9 	bl	bcd2e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b7bdc:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b7bde:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b7be0:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b7be2:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b7be4:	2101      	movs	r1, #1
   b7be6:	f005 f8be 	bl	bcd66 <_ZN18Adafruit_I2CDevice5beginEb>
   b7bea:	b128      	cbz	r0, b7bf8 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b7bec:	4620      	mov	r0, r4
}
   b7bee:	b003      	add	sp, #12
   b7bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b7bf4:	f7ff bfb6 	b.w	b7b64 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b7bf8:	b003      	add	sp, #12
   b7bfa:	bd30      	pop	{r4, r5, pc}

000b7bfc <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7bfc:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b7bfe:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7c00:	b08b      	sub	sp, #44	; 0x2c
   b7c02:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b7c04:	2500      	movs	r5, #0
   b7c06:	2232      	movs	r2, #50	; 0x32
   b7c08:	2102      	movs	r1, #2
   b7c0a:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7c0e:	e9cd 2100 	strd	r2, r1, [sp]
   b7c12:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7c16:	a804      	add	r0, sp, #16
   b7c18:	f004 ff82 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b7c1c:	462a      	mov	r2, r5
   b7c1e:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b7c22:	a804      	add	r0, sp, #16
   b7c24:	f004 ffdc 	bl	bcbe0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7c28:	b00b      	add	sp, #44	; 0x2c
   b7c2a:	bd30      	pop	{r4, r5, pc}

000b7c2c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b7c2c:	b530      	push	{r4, r5, lr}
   b7c2e:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c30:	2500      	movs	r5, #0
  value |= latch << 1;
   b7c32:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b7c36:	0064      	lsls	r4, r4, #1
   b7c38:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b7c3c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b7c40:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b7c44:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b7c48:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b7c4c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c50:	2301      	movs	r3, #1
  value |= latch << 1;
   b7c52:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c56:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b7c5a:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b7c5c:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c5e:	2230      	movs	r2, #48	; 0x30
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	9200      	str	r2, [sp, #0]
   b7c64:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7c68:	a804      	add	r0, sp, #16
   b7c6a:	f004 ff59 	bl	bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b7c6e:	462a      	mov	r2, r5
   b7c70:	4621      	mov	r1, r4
   b7c72:	a804      	add	r0, sp, #16
   b7c74:	f004 ffb4 	bl	bcbe0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7c78:	b00b      	add	sp, #44	; 0x2c
   b7c7a:	bd30      	pop	{r4, r5, pc}

000b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7c7c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c7e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7c80:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c82:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c84:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c86:	041b      	lsls	r3, r3, #16
   b7c88:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7c8c:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7c8e:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7c90:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7c94:	bd10      	pop	{r4, pc}

000b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c96:	1843      	adds	r3, r0, r1
   b7c98:	5c40      	ldrb	r0, [r0, r1]
   b7c9a:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7c9c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7ca0:	4770      	bx	lr

000b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7ca2:	b410      	push	{r4}
    if (base == 0) {
   b7ca4:	b92a      	cbnz	r2, b7cb2 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b7ca6:	6802      	ldr	r2, [r0, #0]
    }
}
   b7ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7cac:	6892      	ldr	r2, [r2, #8]
   b7cae:	b2c9      	uxtb	r1, r1
   b7cb0:	4710      	bx	r2
}
   b7cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b7cb6:	b2d2      	uxtb	r2, r2
   b7cb8:	f008 be85 	b.w	c09c6 <_ZN5Print11printNumberEmh>

000b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7cbc:	b912      	cbnz	r2, b7cc4 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7cbe:	6803      	ldr	r3, [r0, #0]
   b7cc0:	689b      	ldr	r3, [r3, #8]
   b7cc2:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7cc4:	b2d2      	uxtb	r2, r2
   b7cc6:	f008 be7e 	b.w	c09c6 <_ZN5Print11printNumberEmh>

000b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b7cca:	b510      	push	{r4, lr}
   b7ccc:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7cce:	f7ff fff5 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7cd2:	4620      	mov	r0, r4
    }
   b7cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7cd8:	f008 be5d 	b.w	c0996 <_ZN5Print7printlnEv>

000b7cdc <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7cdc:	6803      	ldr	r3, [r0, #0]
   b7cde:	b2c9      	uxtb	r1, r1
   b7ce0:	689b      	ldr	r3, [r3, #8]
   b7ce2:	4718      	bx	r3

000b7ce4 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7ce8:	8002      	strh	r2, [r0, #0]
   b7cea:	2142      	movs	r1, #66	; 0x42
   b7cec:	2200      	movs	r2, #0
   b7cee:	b510      	push	{r4, lr}
   b7cf0:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7cf4:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7cf8:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7cfc:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7d00:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7d04:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7d08:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7d0c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7d10:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7d14:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7d18:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7d1c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7d20:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7d24:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7d28:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7d2c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7d30:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7d34:	2180      	movs	r1, #128	; 0x80
   b7d36:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7d3a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7d3e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7d42:	4925      	ldr	r1, [pc, #148]	; (b7dd8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7d44:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7d48:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7d4c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7d50:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7d54:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7d58:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7d5c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7d60:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7d64:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7d68:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7d6c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7d70:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7d74:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7d78:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7d7c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7d80:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7d84:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7d88:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7d8c:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7d90:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7d94:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7d98:	4910      	ldr	r1, [pc, #64]	; (b7ddc <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7d9a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7d9e:	f640 1164 	movw	r1, #2404	; 0x964
   b7da2:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7da6:	2158      	movs	r1, #88	; 0x58
   b7da8:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7dac:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7dae:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7db2:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7db6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7dba:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7dbe:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7dc2:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7dc6:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7dca:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7dce:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7dd2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7dd6:	bd10      	pop	{r4, pc}
   b7dd8:	02020000 	.word	0x02020000
   b7ddc:	64640200 	.word	0x64640200

000b7de0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7de2:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7de4:	460d      	mov	r5, r1
   b7de6:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7dea:	b9a9      	cbnz	r1, b7e18 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7dec:	b1a8      	cbz	r0, b7e1a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7dee:	f7fc f956 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7df2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7df6:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7dfa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7dfe:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e02:	b913      	cbnz	r3, b7e0a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7e04:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e08:	b123      	cbz	r3, b7e14 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7e0a:	4920      	ldr	r1, [pc, #128]	; (b7e8c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7e0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e10:	f008 fdd7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7e14:	2001      	movs	r0, #1
   b7e16:	e011      	b.n	b7e3c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7e18:	b9b8      	cbnz	r0, b7e4a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7e1a:	4628      	mov	r0, r5
   b7e1c:	f7fc f93d 	bl	b409a <_Znaj>
   b7e20:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7e24:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7e28:	bb60      	cbnz	r0, b7e84 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e2a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7e2e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e32:	b923      	cbnz	r3, b7e3e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7e34:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e38:	b90b      	cbnz	r3, b7e3e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7e3a:	2000      	movs	r0, #0
}
   b7e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7e3e:	4914      	ldr	r1, [pc, #80]	; (b7e90 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e44:	f008 fdbd 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7e48:	e7f7      	b.n	b7e3a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7e4a:	4608      	mov	r0, r1
   b7e4c:	f7fc f925 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7e50:	4606      	mov	r6, r0
   b7e52:	b940      	cbnz	r0, b7e66 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e54:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7e58:	b91b      	cbnz	r3, b7e62 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7e5a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e5e:	2b00      	cmp	r3, #0
   b7e60:	d0eb      	beq.n	b7e3a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e62:	490c      	ldr	r1, [pc, #48]	; (b7e94 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7e64:	e7ec      	b.n	b7e40 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7e66:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7e6a:	42aa      	cmp	r2, r5
   b7e6c:	bf28      	it	cs
   b7e6e:	462a      	movcs	r2, r5
   b7e70:	4639      	mov	r1, r7
   b7e72:	f00b fe05 	bl	c3a80 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7e76:	4638      	mov	r0, r7
   b7e78:	f7fc f911 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7e7c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7e80:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7e84:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7e88:	e7c4      	b.n	b7e14 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7e8a:	bf00      	nop
   b7e8c:	000c6340 	.word	0x000c6340
   b7e90:	000c636b 	.word	0x000c636b
   b7e94:	000c6396 	.word	0x000c6396

000b7e98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7e98:	290d      	cmp	r1, #13
   b7e9a:	f000 80cd 	beq.w	b8038 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7e9e:	d809      	bhi.n	b7eb4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7ea0:	2902      	cmp	r1, #2
   b7ea2:	f000 80a7 	beq.w	b7ff4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7ea6:	2906      	cmp	r1, #6
   b7ea8:	f000 80be 	beq.w	b8028 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7eac:	2901      	cmp	r1, #1
   b7eae:	d016      	beq.n	b7ede <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7eb0:	2000      	movs	r0, #0
}
   b7eb2:	4770      	bx	lr
  switch (Class)
   b7eb4:	2913      	cmp	r1, #19
   b7eb6:	f000 80d4 	beq.w	b8062 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7eba:	2928      	cmp	r1, #40	; 0x28
   b7ebc:	f000 80dc 	beq.w	b8078 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7ec0:	2910      	cmp	r1, #16
   b7ec2:	d1f5      	bne.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7ec4:	2a10      	cmp	r2, #16
   b7ec6:	f000 80c9 	beq.w	b805c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7eca:	f200 80ba 	bhi.w	b8042 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7ece:	2a02      	cmp	r2, #2
   b7ed0:	f000 80c1 	beq.w	b8056 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7ed4:	2a03      	cmp	r2, #3
   b7ed6:	d1eb      	bne.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7ed8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7edc:	e066      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7ede:	2a26      	cmp	r2, #38	; 0x26
   b7ee0:	d854      	bhi.n	b7f8c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7ee2:	2a00      	cmp	r2, #0
   b7ee4:	d0e4      	beq.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7ee6:	3a01      	subs	r2, #1
   b7ee8:	2a25      	cmp	r2, #37	; 0x25
   b7eea:	d8e1      	bhi.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7eec:	a301      	add	r3, pc, #4	; (adr r3, b7ef4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7eee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7ef2:	bf00      	nop
   b7ef4:	000b7fab 	.word	0x000b7fab
   b7ef8:	000b7eb1 	.word	0x000b7eb1
   b7efc:	000b7fb5 	.word	0x000b7fb5
   b7f00:	000b7fb9 	.word	0x000b7fb9
   b7f04:	000b7fbd 	.word	0x000b7fbd
   b7f08:	000b7eb1 	.word	0x000b7eb1
   b7f0c:	000b7fc1 	.word	0x000b7fc1
   b7f10:	000b7eb1 	.word	0x000b7eb1
   b7f14:	000b7fc5 	.word	0x000b7fc5
   b7f18:	000b7eb1 	.word	0x000b7eb1
   b7f1c:	000b7eb1 	.word	0x000b7eb1
   b7f20:	000b7eb1 	.word	0x000b7eb1
   b7f24:	000b7eb1 	.word	0x000b7eb1
   b7f28:	000b7eb1 	.word	0x000b7eb1
   b7f2c:	000b7eb1 	.word	0x000b7eb1
   b7f30:	000b7eb1 	.word	0x000b7eb1
   b7f34:	000b7fc9 	.word	0x000b7fc9
   b7f38:	000b7fcd 	.word	0x000b7fcd
   b7f3c:	000b7fd1 	.word	0x000b7fd1
   b7f40:	000b7fd5 	.word	0x000b7fd5
   b7f44:	000b7eb1 	.word	0x000b7eb1
   b7f48:	000b7eb1 	.word	0x000b7eb1
   b7f4c:	000b7fd9 	.word	0x000b7fd9
   b7f50:	000b7eb1 	.word	0x000b7eb1
   b7f54:	000b7eb1 	.word	0x000b7eb1
   b7f58:	000b7eb1 	.word	0x000b7eb1
   b7f5c:	000b7eb1 	.word	0x000b7eb1
   b7f60:	000b7eb1 	.word	0x000b7eb1
   b7f64:	000b7eb1 	.word	0x000b7eb1
   b7f68:	000b7eb1 	.word	0x000b7eb1
   b7f6c:	000b7eb1 	.word	0x000b7eb1
   b7f70:	000b7eb1 	.word	0x000b7eb1
   b7f74:	000b7fdd 	.word	0x000b7fdd
   b7f78:	000b7fe1 	.word	0x000b7fe1
   b7f7c:	000b7eb1 	.word	0x000b7eb1
   b7f80:	000b7eb1 	.word	0x000b7eb1
   b7f84:	000b7eb1 	.word	0x000b7eb1
   b7f88:	000b7fe5 	.word	0x000b7fe5
   b7f8c:	2a3c      	cmp	r2, #60	; 0x3c
   b7f8e:	d02d      	beq.n	b7fec <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7f90:	d805      	bhi.n	b7f9e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7f92:	2a35      	cmp	r2, #53	; 0x35
   b7f94:	d028      	beq.n	b7fe8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7f96:	2a3b      	cmp	r2, #59	; 0x3b
   b7f98:	d18a      	bne.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7f9a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7f9c:	e006      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7f9e:	2a60      	cmp	r2, #96	; 0x60
   b7fa0:	d026      	beq.n	b7ff0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7fa2:	2a61      	cmp	r2, #97	; 0x61
   b7fa4:	d184      	bne.n	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7fa6:	6980      	ldr	r0, [r0, #24]
   b7fa8:	e000      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7faa:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7fac:	3800      	subs	r0, #0
   b7fae:	bf18      	it	ne
   b7fb0:	2001      	movne	r0, #1
   b7fb2:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7fb4:	6900      	ldr	r0, [r0, #16]
   b7fb6:	e7f9      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7fb8:	6940      	ldr	r0, [r0, #20]
   b7fba:	e7f7      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7fbc:	69c0      	ldr	r0, [r0, #28]
   b7fbe:	e7f5      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7fc0:	6a00      	ldr	r0, [r0, #32]
   b7fc2:	e7f3      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7fc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7fc6:	e7f1      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7fc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7fca:	e7ef      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7fcc:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7fce:	e7ed      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7fd0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7fd2:	e7eb      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7fd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7fd6:	e7e9      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7fd8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7fda:	e7e7      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7fdc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7fde:	e7e5      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b7fe0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b7fe2:	e7e3      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b7fe4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b7fe6:	e7e1      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b7fe8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b7fea:	e7df      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b7fec:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7fee:	e7dd      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b7ff0:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b7ff2:	e7db      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7ff4:	2a34      	cmp	r2, #52	; 0x34
   b7ff6:	d015      	beq.n	b8024 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b7ff8:	d806      	bhi.n	b8008 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b7ffa:	2a13      	cmp	r2, #19
   b7ffc:	d00b      	beq.n	b8016 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b7ffe:	2a15      	cmp	r2, #21
   b8000:	f47f af56 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8004:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8006:	e7d1      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8008:	2a72      	cmp	r2, #114	; 0x72
   b800a:	d006      	beq.n	b801a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b800c:	2a73      	cmp	r2, #115	; 0x73
   b800e:	f47f af4f 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8012:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8014:	e7ca      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8016:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8018:	e7c8      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b801a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b801c:	2b00      	cmp	r3, #0
   b801e:	d13b      	bne.n	b8098 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8020:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8022:	e7c3      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8024:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8026:	e7c1      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8028:	b122      	cbz	r2, b8034 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b802a:	2a08      	cmp	r2, #8
   b802c:	f47f af40 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8030:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8032:	e7bb      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8034:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8036:	e7b9      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8038:	2a03      	cmp	r2, #3
   b803a:	f47f af39 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b803e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8040:	e7b4      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8042:	2a14      	cmp	r2, #20
   b8044:	d005      	beq.n	b8052 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8046:	2a15      	cmp	r2, #21
   b8048:	f47f af32 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b804c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8050:	e7ac      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8052:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8054:	e7aa      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8056:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b805a:	e7a7      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b805c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8060:	e7a4      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8062:	2a60      	cmp	r2, #96	; 0x60
   b8064:	d005      	beq.n	b8072 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8066:	2a80      	cmp	r2, #128	; 0x80
   b8068:	f47f af22 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b806c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8070:	e79c      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8072:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8076:	e799      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8078:	2a01      	cmp	r2, #1
   b807a:	d007      	beq.n	b808c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b807c:	2a02      	cmp	r2, #2
   b807e:	d008      	beq.n	b8092 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8080:	2a00      	cmp	r2, #0
   b8082:	f47f af15 	bne.w	b7eb0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8086:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b808a:	e78f      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b808c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8090:	e78c      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8092:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8096:	e789      	b.n	b7fac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8098:	2001      	movs	r0, #1
   b809a:	4770      	bx	lr

000b809c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b809c:	290d      	cmp	r1, #13
   b809e:	d035      	beq.n	b810c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b80a0:	d807      	bhi.n	b80b2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b80a2:	2902      	cmp	r1, #2
   b80a4:	d019      	beq.n	b80da <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b80a6:	2906      	cmp	r1, #6
   b80a8:	d02a      	beq.n	b8100 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b80aa:	2901      	cmp	r1, #1
   b80ac:	d00d      	beq.n	b80ca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b80ae:	2000      	movs	r0, #0
}
   b80b0:	4770      	bx	lr
  switch (Class)
   b80b2:	2913      	cmp	r1, #19
   b80b4:	d02f      	beq.n	b8116 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b80b6:	2928      	cmp	r1, #40	; 0x28
   b80b8:	d034      	beq.n	b8124 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b80ba:	2910      	cmp	r1, #16
   b80bc:	d1f7      	bne.n	b80ae <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b80be:	3a02      	subs	r2, #2
   b80c0:	b2d2      	uxtb	r2, r2
   b80c2:	2a13      	cmp	r2, #19
   b80c4:	d8f3      	bhi.n	b80ae <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80c6:	4b1f      	ldr	r3, [pc, #124]	; (b8144 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b80c8:	e004      	b.n	b80d4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b80ca:	3a01      	subs	r2, #1
   b80cc:	b2d2      	uxtb	r2, r2
   b80ce:	2a60      	cmp	r2, #96	; 0x60
   b80d0:	d8ed      	bhi.n	b80ae <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80d2:	4b1d      	ldr	r3, [pc, #116]	; (b8148 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b80d4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b80d8:	4770      	bx	lr
    switch (ID)
   b80da:	2a34      	cmp	r2, #52	; 0x34
   b80dc:	d027      	beq.n	b812e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b80de:	d807      	bhi.n	b80f0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b80e0:	2a13      	cmp	r2, #19
   b80e2:	d026      	beq.n	b8132 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b80e4:	2a15      	cmp	r2, #21
   b80e6:	bf14      	ite	ne
   b80e8:	2000      	movne	r0, #0
   b80ea:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b80ee:	4770      	bx	lr
   b80f0:	2a72      	cmp	r2, #114	; 0x72
   b80f2:	d020      	beq.n	b8136 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b80f4:	2a73      	cmp	r2, #115	; 0x73
   b80f6:	bf14      	ite	ne
   b80f8:	2000      	movne	r0, #0
   b80fa:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b80fe:	4770      	bx	lr
    switch (ID)
   b8100:	b1e2      	cbz	r2, b813c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8102:	2a08      	cmp	r2, #8
   b8104:	bf14      	ite	ne
   b8106:	2000      	movne	r0, #0
   b8108:	2006      	moveq	r0, #6
   b810a:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b810c:	2a03      	cmp	r2, #3
   b810e:	bf14      	ite	ne
   b8110:	2000      	movne	r0, #0
   b8112:	201c      	moveq	r0, #28
   b8114:	4770      	bx	lr
    switch (ID)
   b8116:	2a60      	cmp	r2, #96	; 0x60
   b8118:	d012      	beq.n	b8140 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b811a:	2a80      	cmp	r2, #128	; 0x80
   b811c:	bf14      	ite	ne
   b811e:	2000      	movne	r0, #0
   b8120:	20a4      	moveq	r0, #164	; 0xa4
   b8122:	4770      	bx	lr
    switch (ID)
   b8124:	2a02      	cmp	r2, #2
   b8126:	d8c2      	bhi.n	b80ae <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8128:	4b08      	ldr	r3, [pc, #32]	; (b814c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b812a:	5c98      	ldrb	r0, [r3, r2]
   b812c:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b812e:	200c      	movs	r0, #12
   b8130:	4770      	bx	lr
   b8132:	2048      	movs	r0, #72	; 0x48
   b8134:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8136:	f44f 7004 	mov.w	r0, #528	; 0x210
   b813a:	4770      	bx	lr
   b813c:	2014      	movs	r0, #20
   b813e:	4770      	bx	lr
   b8140:	2008      	movs	r0, #8
   b8142:	4770      	bx	lr
   b8144:	000c7056 	.word	0x000c7056
   b8148:	000c6f94 	.word	0x000c6f94
   b814c:	000c707e 	.word	0x000c707e

000b8150 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8150:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8152:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8156:	07ca      	lsls	r2, r1, #31
   b8158:	d415      	bmi.n	b8186 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b815a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b815e:	4b59      	ldr	r3, [pc, #356]	; (b82c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8160:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8164:	429a      	cmp	r2, r3
   b8166:	d101      	bne.n	b816c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8168:	078b      	lsls	r3, r1, #30
   b816a:	d40c      	bmi.n	b8186 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b816c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8170:	2b47      	cmp	r3, #71	; 0x47
   b8172:	d174      	bne.n	b825e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8174:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8178:	f245 1441 	movw	r4, #20801	; 0x5141
   b817c:	42a3      	cmp	r3, r4
   b817e:	d104      	bne.n	b818a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8180:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8184:	d06b      	beq.n	b825e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8186:	2001      	movs	r0, #1
   b8188:	e070      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b818a:	f245 1442 	movw	r4, #20802	; 0x5142
   b818e:	42a3      	cmp	r3, r4
   b8190:	d102      	bne.n	b8198 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8192:	f011 0f08 	tst.w	r1, #8
   b8196:	e7f5      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8198:	f245 3442 	movw	r4, #21314	; 0x5342
   b819c:	42a3      	cmp	r3, r4
   b819e:	d102      	bne.n	b81a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b81a0:	f011 0f10 	tst.w	r1, #16
   b81a4:	e7ee      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b81a6:	f244 1447 	movw	r4, #16711	; 0x4147
   b81aa:	42a3      	cmp	r3, r4
   b81ac:	d102      	bne.n	b81b4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b81ae:	f011 0f20 	tst.w	r1, #32
   b81b2:	e7e7      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b81b4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b81b8:	42a3      	cmp	r3, r4
   b81ba:	d102      	bne.n	b81c2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b81bc:	f011 0f40 	tst.w	r1, #64	; 0x40
   b81c0:	e7e0      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b81c2:	f245 144c 	movw	r4, #20812	; 0x514c
   b81c6:	42a3      	cmp	r3, r4
   b81c8:	d102      	bne.n	b81d0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b81ca:	f011 0f80 	tst.w	r1, #128	; 0x80
   b81ce:	e7d9      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b81d0:	f245 114e 	movw	r1, #20814	; 0x514e
   b81d4:	428b      	cmp	r3, r1
   b81d6:	d104      	bne.n	b81e2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b81d8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81dc:	f013 0f01 	tst.w	r3, #1
   b81e0:	e7d0      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b81e2:	f245 314e 	movw	r1, #21326	; 0x534e
   b81e6:	428b      	cmp	r3, r1
   b81e8:	d104      	bne.n	b81f4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b81ea:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81ee:	f013 0f02 	tst.w	r3, #2
   b81f2:	e7c7      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b81f4:	f245 1150 	movw	r1, #20816	; 0x5150
   b81f8:	428b      	cmp	r3, r1
   b81fa:	d104      	bne.n	b8206 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b81fc:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8200:	f013 0f04 	tst.w	r3, #4
   b8204:	e7be      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8206:	f245 1151 	movw	r1, #20817	; 0x5151
   b820a:	428b      	cmp	r3, r1
   b820c:	d104      	bne.n	b8218 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b820e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8212:	f013 0f08 	tst.w	r3, #8
   b8216:	e7b5      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8218:	f245 3152 	movw	r1, #21330	; 0x5352
   b821c:	428b      	cmp	r3, r1
   b821e:	d104      	bne.n	b822a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8220:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8224:	f013 0f10 	tst.w	r3, #16
   b8228:	e7ac      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b822a:	f244 1153 	movw	r1, #16723	; 0x4153
   b822e:	428b      	cmp	r3, r1
   b8230:	d104      	bne.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8232:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8236:	f013 0f20 	tst.w	r3, #32
   b823a:	e7a3      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b823c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8240:	428b      	cmp	r3, r1
   b8242:	d104      	bne.n	b824e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8244:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8248:	f013 0f40 	tst.w	r3, #64	; 0x40
   b824c:	e79a      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b824e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8252:	428b      	cmp	r3, r1
   b8254:	d103      	bne.n	b825e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8256:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b825a:	2b00      	cmp	r3, #0
   b825c:	db93      	blt.n	b8186 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b825e:	4b1a      	ldr	r3, [pc, #104]	; (b82c8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8260:	429a      	cmp	r2, r3
   b8262:	d104      	bne.n	b826e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8264:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8268:	f000 0001 	and.w	r0, r0, #1
}
   b826c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b826e:	4b17      	ldr	r3, [pc, #92]	; (b82cc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8270:	429a      	cmp	r2, r3
   b8272:	d104      	bne.n	b827e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8274:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8278:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b827c:	e7f6      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b827e:	4b14      	ldr	r3, [pc, #80]	; (b82d0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8280:	429a      	cmp	r2, r3
   b8282:	d104      	bne.n	b828e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8284:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8288:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b828c:	e7ee      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b828e:	4b11      	ldr	r3, [pc, #68]	; (b82d4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8290:	429a      	cmp	r2, r3
   b8292:	d104      	bne.n	b829e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8294:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8298:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b829c:	e7e6      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b829e:	4b0e      	ldr	r3, [pc, #56]	; (b82d8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b82a0:	429a      	cmp	r2, r3
   b82a2:	d104      	bne.n	b82ae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b82a4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82a8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b82ac:	e7de      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b82ae:	4b0b      	ldr	r3, [pc, #44]	; (b82dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b82b0:	429a      	cmp	r2, r3
   b82b2:	d104      	bne.n	b82be <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b82b4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b82bc:	e7d6      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b82be:	2000      	movs	r0, #0
   b82c0:	e7d4      	b.n	b826c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b82c2:	bf00      	nop
   b82c4:	4d544400 	.word	0x4d544400
   b82c8:	4d4c5200 	.word	0x4d4c5200
   b82cc:	434d5200 	.word	0x434d5200
   b82d0:	54585400 	.word	0x54585400
   b82d4:	574c5600 	.word	0x574c5600
   b82d8:	47545600 	.word	0x47545600
   b82dc:	41445a00 	.word	0x41445a00

000b82e0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b82e0:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b82e4:	2b2a      	cmp	r3, #42	; 0x2a
   b82e6:	d157      	bne.n	b8398 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b82e8:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b82ec:	2b47      	cmp	r3, #71	; 0x47
   b82ee:	d153      	bne.n	b8398 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b82f0:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b82f4:	4a29      	ldr	r2, [pc, #164]	; (b839c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b82f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b82fa:	4293      	cmp	r3, r2
   b82fc:	d011      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b82fe:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8302:	2a47      	cmp	r2, #71	; 0x47
   b8304:	d11a      	bne.n	b833c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8306:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b830a:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b830e:	3941      	subs	r1, #65	; 0x41
   b8310:	b289      	uxth	r1, r1
   b8312:	2910      	cmp	r1, #16
   b8314:	d907      	bls.n	b8326 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8316:	f022 0110 	bic.w	r1, r2, #16
   b831a:	f245 3042 	movw	r0, #21314	; 0x5342
   b831e:	4281      	cmp	r1, r0
   b8320:	d129      	bne.n	b8376 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8322:	2001      	movs	r0, #1
}
   b8324:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8326:	481e      	ldr	r0, [pc, #120]	; (b83a0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8328:	fa20 f101 	lsr.w	r1, r0, r1
   b832c:	07c9      	lsls	r1, r1, #31
   b832e:	d4f8      	bmi.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8334:	f245 4153 	movw	r1, #21587	; 0x5453
   b8338:	428a      	cmp	r2, r1
   b833a:	d0f2      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b833c:	4a19      	ldr	r2, [pc, #100]	; (b83a4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b833e:	4293      	cmp	r3, r2
   b8340:	d0ef      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8342:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8346:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b834a:	4293      	cmp	r3, r2
   b834c:	d0e9      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b834e:	4a16      	ldr	r2, [pc, #88]	; (b83a8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8350:	4293      	cmp	r3, r2
   b8352:	d0e6      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8354:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8358:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b835c:	4293      	cmp	r3, r2
   b835e:	d0e0      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8360:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8364:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8368:	4293      	cmp	r3, r2
   b836a:	d0da      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b836c:	480f      	ldr	r0, [pc, #60]	; (b83ac <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b836e:	1a1b      	subs	r3, r3, r0
   b8370:	4258      	negs	r0, r3
   b8372:	4158      	adcs	r0, r3
   b8374:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8376:	f244 1147 	movw	r1, #16711	; 0x4147
   b837a:	428a      	cmp	r2, r1
   b837c:	d0d1      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b837e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8382:	428a      	cmp	r2, r1
   b8384:	d0cd      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8386:	f245 314e 	movw	r1, #21326	; 0x534e
   b838a:	428a      	cmp	r2, r1
   b838c:	d0c9      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b838e:	f244 1153 	movw	r1, #16723	; 0x4153
   b8392:	428a      	cmp	r2, r1
   b8394:	d0c5      	beq.n	b8322 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8396:	e7cb      	b.n	b8330 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8398:	2000      	movs	r0, #0
   b839a:	4770      	bx	lr
   b839c:	4d544400 	.word	0x4d544400
   b83a0:	0001a803 	.word	0x0001a803
   b83a4:	4d4c5200 	.word	0x4d4c5200
   b83a8:	54585400 	.word	0x54585400
   b83ac:	41445a00 	.word	0x41445a00

000b83b0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b83b0:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b83b2:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b83b6:	07ca      	lsls	r2, r1, #31
   b83b8:	d415      	bmi.n	b83e6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b83ba:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b83be:	4b59      	ldr	r3, [pc, #356]	; (b8524 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b83c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b83c4:	429a      	cmp	r2, r3
   b83c6:	d101      	bne.n	b83cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b83c8:	078b      	lsls	r3, r1, #30
   b83ca:	d40c      	bmi.n	b83e6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b83cc:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b83d0:	2b47      	cmp	r3, #71	; 0x47
   b83d2:	d174      	bne.n	b84be <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b83d4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b83d8:	f245 1441 	movw	r4, #20801	; 0x5141
   b83dc:	42a3      	cmp	r3, r4
   b83de:	d104      	bne.n	b83ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b83e0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b83e4:	d06b      	beq.n	b84be <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b83e6:	2001      	movs	r0, #1
   b83e8:	e070      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b83ea:	f245 1442 	movw	r4, #20802	; 0x5142
   b83ee:	42a3      	cmp	r3, r4
   b83f0:	d102      	bne.n	b83f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b83f2:	f011 0f08 	tst.w	r1, #8
   b83f6:	e7f5      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b83f8:	f245 3442 	movw	r4, #21314	; 0x5342
   b83fc:	42a3      	cmp	r3, r4
   b83fe:	d102      	bne.n	b8406 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8400:	f011 0f10 	tst.w	r1, #16
   b8404:	e7ee      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8406:	f244 1447 	movw	r4, #16711	; 0x4147
   b840a:	42a3      	cmp	r3, r4
   b840c:	d102      	bne.n	b8414 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b840e:	f011 0f20 	tst.w	r1, #32
   b8412:	e7e7      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8414:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8418:	42a3      	cmp	r3, r4
   b841a:	d102      	bne.n	b8422 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b841c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8420:	e7e0      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8422:	f245 144c 	movw	r4, #20812	; 0x514c
   b8426:	42a3      	cmp	r3, r4
   b8428:	d102      	bne.n	b8430 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b842a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b842e:	e7d9      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8430:	f245 114e 	movw	r1, #20814	; 0x514e
   b8434:	428b      	cmp	r3, r1
   b8436:	d104      	bne.n	b8442 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8438:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b843c:	f013 0f01 	tst.w	r3, #1
   b8440:	e7d0      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8442:	f245 314e 	movw	r1, #21326	; 0x534e
   b8446:	428b      	cmp	r3, r1
   b8448:	d104      	bne.n	b8454 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b844a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b844e:	f013 0f02 	tst.w	r3, #2
   b8452:	e7c7      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8454:	f245 1150 	movw	r1, #20816	; 0x5150
   b8458:	428b      	cmp	r3, r1
   b845a:	d104      	bne.n	b8466 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b845c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8460:	f013 0f04 	tst.w	r3, #4
   b8464:	e7be      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8466:	f245 1151 	movw	r1, #20817	; 0x5151
   b846a:	428b      	cmp	r3, r1
   b846c:	d104      	bne.n	b8478 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b846e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8472:	f013 0f08 	tst.w	r3, #8
   b8476:	e7b5      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8478:	f245 3152 	movw	r1, #21330	; 0x5352
   b847c:	428b      	cmp	r3, r1
   b847e:	d104      	bne.n	b848a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8480:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8484:	f013 0f10 	tst.w	r3, #16
   b8488:	e7ac      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b848a:	f244 1153 	movw	r1, #16723	; 0x4153
   b848e:	428b      	cmp	r3, r1
   b8490:	d104      	bne.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8492:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8496:	f013 0f20 	tst.w	r3, #32
   b849a:	e7a3      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b849c:	f245 4153 	movw	r1, #21587	; 0x5453
   b84a0:	428b      	cmp	r3, r1
   b84a2:	d104      	bne.n	b84ae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b84a4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b84a8:	f013 0f40 	tst.w	r3, #64	; 0x40
   b84ac:	e79a      	b.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b84ae:	f245 6153 	movw	r1, #22099	; 0x5653
   b84b2:	428b      	cmp	r3, r1
   b84b4:	d103      	bne.n	b84be <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b84b6:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b84ba:	2b00      	cmp	r3, #0
   b84bc:	db93      	blt.n	b83e6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b84be:	4b1a      	ldr	r3, [pc, #104]	; (b8528 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b84c0:	429a      	cmp	r2, r3
   b84c2:	d104      	bne.n	b84ce <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b84c4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84c8:	f000 0001 	and.w	r0, r0, #1
}
   b84cc:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b84ce:	4b17      	ldr	r3, [pc, #92]	; (b852c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b84d0:	429a      	cmp	r2, r3
   b84d2:	d104      	bne.n	b84de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b84d4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84d8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b84dc:	e7f6      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b84de:	4b14      	ldr	r3, [pc, #80]	; (b8530 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b84e0:	429a      	cmp	r2, r3
   b84e2:	d104      	bne.n	b84ee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b84e4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84e8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b84ec:	e7ee      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b84ee:	4b11      	ldr	r3, [pc, #68]	; (b8534 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b84f0:	429a      	cmp	r2, r3
   b84f2:	d104      	bne.n	b84fe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b84f4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84f8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b84fc:	e7e6      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b84fe:	4b0e      	ldr	r3, [pc, #56]	; (b8538 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8500:	429a      	cmp	r2, r3
   b8502:	d104      	bne.n	b850e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8504:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8508:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b850c:	e7de      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b850e:	4b0b      	ldr	r3, [pc, #44]	; (b853c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8510:	429a      	cmp	r2, r3
   b8512:	d104      	bne.n	b851e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8514:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8518:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b851c:	e7d6      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b851e:	2000      	movs	r0, #0
   b8520:	e7d4      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8522:	bf00      	nop
   b8524:	4d544400 	.word	0x4d544400
   b8528:	4d4c5200 	.word	0x4d4c5200
   b852c:	434d5200 	.word	0x434d5200
   b8530:	54585400 	.word	0x54585400
   b8534:	574c5600 	.word	0x574c5600
   b8538:	47545600 	.word	0x47545600
   b853c:	41445a00 	.word	0x41445a00

000b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8540:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8544:	b110      	cbz	r0, b854c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8546:	6803      	ldr	r3, [r0, #0]
   b8548:	689b      	ldr	r3, [r3, #8]
   b854a:	4718      	bx	r3
}
   b854c:	4770      	bx	lr
	...

000b8550 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8550:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8552:	4b3d      	ldr	r3, [pc, #244]	; (b8648 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8554:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8556:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b855a:	6818      	ldr	r0, [r3, #0]
   b855c:	9000      	str	r0, [sp, #0]
   b855e:	889b      	ldrh	r3, [r3, #4]
   b8560:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8564:	2205      	movs	r2, #5
   b8566:	4629      	mov	r1, r5
   b8568:	4668      	mov	r0, sp
   b856a:	f00b fa79 	bl	c3a60 <memcmp>
   b856e:	b928      	cbnz	r0, b857c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8570:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8574:	b113      	cbz	r3, b857c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8576:	2001      	movs	r0, #1
}
   b8578:	b003      	add	sp, #12
   b857a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b857c:	4933      	ldr	r1, [pc, #204]	; (b864c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b857e:	4668      	mov	r0, sp
   b8580:	f00b fb0c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8584:	2205      	movs	r2, #5
   b8586:	4629      	mov	r1, r5
   b8588:	4668      	mov	r0, sp
   b858a:	f00b fa69 	bl	c3a60 <memcmp>
   b858e:	b918      	cbnz	r0, b8598 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8590:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8594:	2b00      	cmp	r3, #0
   b8596:	d1ee      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8598:	492d      	ldr	r1, [pc, #180]	; (b8650 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b859a:	4668      	mov	r0, sp
   b859c:	f00b fafe 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85a0:	2205      	movs	r2, #5
   b85a2:	4629      	mov	r1, r5
   b85a4:	4668      	mov	r0, sp
   b85a6:	f00b fa5b 	bl	c3a60 <memcmp>
   b85aa:	b918      	cbnz	r0, b85b4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b85ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b85b0:	2b00      	cmp	r3, #0
   b85b2:	d1e0      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b85b4:	4927      	ldr	r1, [pc, #156]	; (b8654 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b85b6:	4668      	mov	r0, sp
   b85b8:	f00b faf0 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85bc:	2205      	movs	r2, #5
   b85be:	4629      	mov	r1, r5
   b85c0:	4668      	mov	r0, sp
   b85c2:	f00b fa4d 	bl	c3a60 <memcmp>
   b85c6:	b918      	cbnz	r0, b85d0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b85c8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b85cc:	2b00      	cmp	r3, #0
   b85ce:	d1d2      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b85d0:	4921      	ldr	r1, [pc, #132]	; (b8658 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b85d2:	4668      	mov	r0, sp
   b85d4:	f00b fae2 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85d8:	2205      	movs	r2, #5
   b85da:	4629      	mov	r1, r5
   b85dc:	4668      	mov	r0, sp
   b85de:	f00b fa3f 	bl	c3a60 <memcmp>
   b85e2:	b918      	cbnz	r0, b85ec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b85e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b85e8:	2b00      	cmp	r3, #0
   b85ea:	d1c4      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b85ec:	491b      	ldr	r1, [pc, #108]	; (b865c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b85ee:	4668      	mov	r0, sp
   b85f0:	f00b fad4 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85f4:	2205      	movs	r2, #5
   b85f6:	4629      	mov	r1, r5
   b85f8:	4668      	mov	r0, sp
   b85fa:	f00b fa31 	bl	c3a60 <memcmp>
   b85fe:	b918      	cbnz	r0, b8608 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8600:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8604:	2b00      	cmp	r3, #0
   b8606:	d1b6      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8608:	4915      	ldr	r1, [pc, #84]	; (b8660 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b860a:	4668      	mov	r0, sp
   b860c:	f00b fac6 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8610:	2205      	movs	r2, #5
   b8612:	4629      	mov	r1, r5
   b8614:	4668      	mov	r0, sp
   b8616:	f00b fa23 	bl	c3a60 <memcmp>
   b861a:	b918      	cbnz	r0, b8624 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b861c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8620:	2b00      	cmp	r3, #0
   b8622:	d1a8      	bne.n	b8576 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8624:	490f      	ldr	r1, [pc, #60]	; (b8664 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8626:	4668      	mov	r0, sp
   b8628:	f00b fab8 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b862c:	2205      	movs	r2, #5
   b862e:	4629      	mov	r1, r5
   b8630:	4668      	mov	r0, sp
   b8632:	f00b fa15 	bl	c3a60 <memcmp>
   b8636:	b928      	cbnz	r0, b8644 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8638:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b863c:	3800      	subs	r0, #0
   b863e:	bf18      	it	ne
   b8640:	2001      	movne	r0, #1
   b8642:	e799      	b.n	b8578 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8644:	2000      	movs	r0, #0
   b8646:	e797      	b.n	b8578 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8648:	000c63ec 	.word	0x000c63ec
   b864c:	000c63c2 	.word	0x000c63c2
   b8650:	000c63c8 	.word	0x000c63c8
   b8654:	000c63ce 	.word	0x000c63ce
   b8658:	000c63d4 	.word	0x000c63d4
   b865c:	000c63da 	.word	0x000c63da
   b8660:	000c63e0 	.word	0x000c63e0
   b8664:	000c63e6 	.word	0x000c63e6

000b8668 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8668:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b866a:	4b62      	ldr	r3, [pc, #392]	; (b87f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b866c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b866e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8672:	6818      	ldr	r0, [r3, #0]
   b8674:	9000      	str	r0, [sp, #0]
   b8676:	889b      	ldrh	r3, [r3, #4]
   b8678:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b867c:	2205      	movs	r2, #5
   b867e:	4629      	mov	r1, r5
   b8680:	4668      	mov	r0, sp
   b8682:	f00b f9ed 	bl	c3a60 <memcmp>
   b8686:	b978      	cbnz	r0, b86a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8688:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b868c:	b163      	cbz	r3, b86a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b868e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8692:	b14a      	cbz	r2, b86a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8694:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8698:	2a00      	cmp	r2, #0
   b869a:	f040 80a3 	bne.w	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b869e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86a2:	2b00      	cmp	r3, #0
   b86a4:	f040 809e 	bne.w	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b86a8:	4953      	ldr	r1, [pc, #332]	; (b87f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b86aa:	4668      	mov	r0, sp
   b86ac:	f00b fa76 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86b0:	2205      	movs	r2, #5
   b86b2:	4629      	mov	r1, r5
   b86b4:	4668      	mov	r0, sp
   b86b6:	f00b f9d3 	bl	c3a60 <memcmp>
   b86ba:	b978      	cbnz	r0, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b86bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b86c0:	b163      	cbz	r3, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b86c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86c6:	b14a      	cbz	r2, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b86c8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86cc:	2a00      	cmp	r2, #0
   b86ce:	f040 8089 	bne.w	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86d6:	2b00      	cmp	r3, #0
   b86d8:	f040 8084 	bne.w	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b86dc:	4947      	ldr	r1, [pc, #284]	; (b87fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b86de:	4668      	mov	r0, sp
   b86e0:	f00b fa5c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86e4:	2205      	movs	r2, #5
   b86e6:	4629      	mov	r1, r5
   b86e8:	4668      	mov	r0, sp
   b86ea:	f00b f9b9 	bl	c3a60 <memcmp>
   b86ee:	b968      	cbnz	r0, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b86f0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b86f4:	b153      	cbz	r3, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b86f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86fa:	b13a      	cbz	r2, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b86fc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8700:	2a00      	cmp	r2, #0
   b8702:	d16f      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8704:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8708:	2b00      	cmp	r3, #0
   b870a:	d16b      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b870c:	493c      	ldr	r1, [pc, #240]	; (b8800 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b870e:	4668      	mov	r0, sp
   b8710:	f00b fa44 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8714:	2205      	movs	r2, #5
   b8716:	4629      	mov	r1, r5
   b8718:	4668      	mov	r0, sp
   b871a:	f00b f9a1 	bl	c3a60 <memcmp>
   b871e:	b968      	cbnz	r0, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8720:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8724:	b153      	cbz	r3, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b872a:	b13a      	cbz	r2, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b872c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8730:	2a00      	cmp	r2, #0
   b8732:	d157      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8734:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8738:	2b00      	cmp	r3, #0
   b873a:	d153      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b873c:	4931      	ldr	r1, [pc, #196]	; (b8804 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b873e:	4668      	mov	r0, sp
   b8740:	f00b fa2c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8744:	2205      	movs	r2, #5
   b8746:	4629      	mov	r1, r5
   b8748:	4668      	mov	r0, sp
   b874a:	f00b f989 	bl	c3a60 <memcmp>
   b874e:	b968      	cbnz	r0, b876c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8750:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8754:	b153      	cbz	r3, b876c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8756:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b875a:	b13a      	cbz	r2, b876c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b875c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8760:	2a00      	cmp	r2, #0
   b8762:	d13f      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8764:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8768:	2b00      	cmp	r3, #0
   b876a:	d13b      	bne.n	b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b876c:	4926      	ldr	r1, [pc, #152]	; (b8808 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b876e:	4668      	mov	r0, sp
   b8770:	f00b fa14 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8774:	2205      	movs	r2, #5
   b8776:	4629      	mov	r1, r5
   b8778:	4668      	mov	r0, sp
   b877a:	f00b f971 	bl	c3a60 <memcmp>
   b877e:	b958      	cbnz	r0, b8798 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8780:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8784:	b143      	cbz	r3, b8798 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8786:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b878a:	b12a      	cbz	r2, b8798 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b878c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8790:	bb42      	cbnz	r2, b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8792:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8796:	bb2b      	cbnz	r3, b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8798:	491c      	ldr	r1, [pc, #112]	; (b880c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b879a:	4668      	mov	r0, sp
   b879c:	f00b f9fe 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87a0:	2205      	movs	r2, #5
   b87a2:	4629      	mov	r1, r5
   b87a4:	4668      	mov	r0, sp
   b87a6:	f00b f95b 	bl	c3a60 <memcmp>
   b87aa:	b940      	cbnz	r0, b87be <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b87ac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b87b0:	b12b      	cbz	r3, b87be <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b87b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b87b4:	b11a      	cbz	r2, b87be <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b87b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87b8:	b9a2      	cbnz	r2, b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b87bc:	b993      	cbnz	r3, b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b87be:	4914      	ldr	r1, [pc, #80]	; (b8810 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b87c0:	4668      	mov	r0, sp
   b87c2:	f00b f9eb 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87c6:	2205      	movs	r2, #5
   b87c8:	4629      	mov	r1, r5
   b87ca:	4668      	mov	r0, sp
   b87cc:	f00b f948 	bl	c3a60 <memcmp>
   b87d0:	b958      	cbnz	r0, b87ea <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b87d2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b87d6:	b153      	cbz	r3, b87ee <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b87d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b87da:	b120      	cbz	r0, b87e6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b87dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87de:	b90a      	cbnz	r2, b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87e0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b87e2:	b100      	cbz	r0, b87e6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b87e4:	2001      	movs	r0, #1
}
   b87e6:	b003      	add	sp, #12
   b87e8:	bd30      	pop	{r4, r5, pc}
  return false;
   b87ea:	2000      	movs	r0, #0
   b87ec:	e7fb      	b.n	b87e6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87ee:	4618      	mov	r0, r3
   b87f0:	e7f9      	b.n	b87e6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87f2:	bf00      	nop
   b87f4:	000c63ec 	.word	0x000c63ec
   b87f8:	000c63c2 	.word	0x000c63c2
   b87fc:	000c63c8 	.word	0x000c63c8
   b8800:	000c63ce 	.word	0x000c63ce
   b8804:	000c63d4 	.word	0x000c63d4
   b8808:	000c63da 	.word	0x000c63da
   b880c:	000c63e0 	.word	0x000c63e0
   b8810:	000c63e6 	.word	0x000c63e6

000b8814 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8814:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8816:	4b38      	ldr	r3, [pc, #224]	; (b88f8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8818:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b881a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b881e:	6818      	ldr	r0, [r3, #0]
   b8820:	9000      	str	r0, [sp, #0]
   b8822:	889b      	ldrh	r3, [r3, #4]
   b8824:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8828:	2205      	movs	r2, #5
   b882a:	4629      	mov	r1, r5
   b882c:	4668      	mov	r0, sp
   b882e:	f00b f917 	bl	c3a60 <memcmp>
   b8832:	b920      	cbnz	r0, b883e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8834:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8838:	3001      	adds	r0, #1
}
   b883a:	b003      	add	sp, #12
   b883c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b883e:	492f      	ldr	r1, [pc, #188]	; (b88fc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8840:	4668      	mov	r0, sp
   b8842:	f00b f9ab 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8846:	2205      	movs	r2, #5
   b8848:	4629      	mov	r1, r5
   b884a:	4668      	mov	r0, sp
   b884c:	f00b f908 	bl	c3a60 <memcmp>
   b8850:	b910      	cbnz	r0, b8858 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8852:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8856:	e7ef      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8858:	4929      	ldr	r1, [pc, #164]	; (b8900 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b885a:	4668      	mov	r0, sp
   b885c:	f00b f99e 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8860:	2205      	movs	r2, #5
   b8862:	4629      	mov	r1, r5
   b8864:	4668      	mov	r0, sp
   b8866:	f00b f8fb 	bl	c3a60 <memcmp>
   b886a:	b910      	cbnz	r0, b8872 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b886c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8870:	e7e2      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8872:	4924      	ldr	r1, [pc, #144]	; (b8904 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8874:	4668      	mov	r0, sp
   b8876:	f00b f991 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b887a:	2205      	movs	r2, #5
   b887c:	4629      	mov	r1, r5
   b887e:	4668      	mov	r0, sp
   b8880:	f00b f8ee 	bl	c3a60 <memcmp>
   b8884:	b910      	cbnz	r0, b888c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8886:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b888a:	e7d5      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b888c:	491e      	ldr	r1, [pc, #120]	; (b8908 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b888e:	4668      	mov	r0, sp
   b8890:	f00b f984 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8894:	2205      	movs	r2, #5
   b8896:	4629      	mov	r1, r5
   b8898:	4668      	mov	r0, sp
   b889a:	f00b f8e1 	bl	c3a60 <memcmp>
   b889e:	b910      	cbnz	r0, b88a6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b88a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b88a4:	e7c8      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b88a6:	4919      	ldr	r1, [pc, #100]	; (b890c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b88a8:	4668      	mov	r0, sp
   b88aa:	f00b f977 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88ae:	2205      	movs	r2, #5
   b88b0:	4629      	mov	r1, r5
   b88b2:	4668      	mov	r0, sp
   b88b4:	f00b f8d4 	bl	c3a60 <memcmp>
   b88b8:	b910      	cbnz	r0, b88c0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b88ba:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b88be:	e7bb      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b88c0:	4913      	ldr	r1, [pc, #76]	; (b8910 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b88c2:	4668      	mov	r0, sp
   b88c4:	f00b f96a 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88c8:	2205      	movs	r2, #5
   b88ca:	4629      	mov	r1, r5
   b88cc:	4668      	mov	r0, sp
   b88ce:	f00b f8c7 	bl	c3a60 <memcmp>
   b88d2:	b910      	cbnz	r0, b88da <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b88d4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b88d8:	e7ae      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b88da:	490e      	ldr	r1, [pc, #56]	; (b8914 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b88dc:	4668      	mov	r0, sp
   b88de:	f00b f95d 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88e2:	2205      	movs	r2, #5
   b88e4:	4629      	mov	r1, r5
   b88e6:	4668      	mov	r0, sp
   b88e8:	f00b f8ba 	bl	c3a60 <memcmp>
   b88ec:	b910      	cbnz	r0, b88f4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b88ee:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b88f2:	e7a1      	b.n	b8838 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b88f4:	2000      	movs	r0, #0
   b88f6:	e7a0      	b.n	b883a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b88f8:	000c63ec 	.word	0x000c63ec
   b88fc:	000c63c2 	.word	0x000c63c2
   b8900:	000c63c8 	.word	0x000c63c8
   b8904:	000c63ce 	.word	0x000c63ce
   b8908:	000c63d4 	.word	0x000c63d4
   b890c:	000c63da 	.word	0x000c63da
   b8910:	000c63e0 	.word	0x000c63e0
   b8914:	000c63e6 	.word	0x000c63e6

000b8918 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8918:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b891a:	4b38      	ldr	r3, [pc, #224]	; (b89fc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b891c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b891e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8922:	6818      	ldr	r0, [r3, #0]
   b8924:	9000      	str	r0, [sp, #0]
   b8926:	889b      	ldrh	r3, [r3, #4]
   b8928:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b892c:	2205      	movs	r2, #5
   b892e:	4629      	mov	r1, r5
   b8930:	4668      	mov	r0, sp
   b8932:	f00b f895 	bl	c3a60 <memcmp>
   b8936:	b920      	cbnz	r0, b8942 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8938:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b893c:	3002      	adds	r0, #2
}
   b893e:	b003      	add	sp, #12
   b8940:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8942:	492f      	ldr	r1, [pc, #188]	; (b8a00 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8944:	4668      	mov	r0, sp
   b8946:	f00b f929 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b894a:	2205      	movs	r2, #5
   b894c:	4629      	mov	r1, r5
   b894e:	4668      	mov	r0, sp
   b8950:	f00b f886 	bl	c3a60 <memcmp>
   b8954:	b910      	cbnz	r0, b895c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8956:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b895a:	e7ef      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b895c:	4929      	ldr	r1, [pc, #164]	; (b8a04 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b895e:	4668      	mov	r0, sp
   b8960:	f00b f91c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8964:	2205      	movs	r2, #5
   b8966:	4629      	mov	r1, r5
   b8968:	4668      	mov	r0, sp
   b896a:	f00b f879 	bl	c3a60 <memcmp>
   b896e:	b910      	cbnz	r0, b8976 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8970:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8974:	e7e2      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8976:	4924      	ldr	r1, [pc, #144]	; (b8a08 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8978:	4668      	mov	r0, sp
   b897a:	f00b f90f 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b897e:	2205      	movs	r2, #5
   b8980:	4629      	mov	r1, r5
   b8982:	4668      	mov	r0, sp
   b8984:	f00b f86c 	bl	c3a60 <memcmp>
   b8988:	b910      	cbnz	r0, b8990 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b898a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b898e:	e7d5      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8990:	491e      	ldr	r1, [pc, #120]	; (b8a0c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b8992:	4668      	mov	r0, sp
   b8994:	f00b f902 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8998:	2205      	movs	r2, #5
   b899a:	4629      	mov	r1, r5
   b899c:	4668      	mov	r0, sp
   b899e:	f00b f85f 	bl	c3a60 <memcmp>
   b89a2:	b910      	cbnz	r0, b89aa <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b89a4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b89a8:	e7c8      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b89aa:	4919      	ldr	r1, [pc, #100]	; (b8a10 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b89ac:	4668      	mov	r0, sp
   b89ae:	f00b f8f5 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89b2:	2205      	movs	r2, #5
   b89b4:	4629      	mov	r1, r5
   b89b6:	4668      	mov	r0, sp
   b89b8:	f00b f852 	bl	c3a60 <memcmp>
   b89bc:	b910      	cbnz	r0, b89c4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b89be:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b89c2:	e7bb      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b89c4:	4913      	ldr	r1, [pc, #76]	; (b8a14 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b89c6:	4668      	mov	r0, sp
   b89c8:	f00b f8e8 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89cc:	2205      	movs	r2, #5
   b89ce:	4629      	mov	r1, r5
   b89d0:	4668      	mov	r0, sp
   b89d2:	f00b f845 	bl	c3a60 <memcmp>
   b89d6:	b910      	cbnz	r0, b89de <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b89d8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b89dc:	e7ae      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b89de:	490e      	ldr	r1, [pc, #56]	; (b8a18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b89e0:	4668      	mov	r0, sp
   b89e2:	f00b f8db 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89e6:	2205      	movs	r2, #5
   b89e8:	4629      	mov	r1, r5
   b89ea:	4668      	mov	r0, sp
   b89ec:	f00b f838 	bl	c3a60 <memcmp>
   b89f0:	b910      	cbnz	r0, b89f8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b89f2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b89f6:	e7a1      	b.n	b893c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b89f8:	2000      	movs	r0, #0
   b89fa:	e7a0      	b.n	b893e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b89fc:	000c63ec 	.word	0x000c63ec
   b8a00:	000c63c2 	.word	0x000c63c2
   b8a04:	000c63c8 	.word	0x000c63c8
   b8a08:	000c63ce 	.word	0x000c63ce
   b8a0c:	000c63d4 	.word	0x000c63d4
   b8a10:	000c63da 	.word	0x000c63da
   b8a14:	000c63e0 	.word	0x000c63e0
   b8a18:	000c63e6 	.word	0x000c63e6

000b8a1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a1e:	4b39      	ldr	r3, [pc, #228]	; (b8b04 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8a20:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a22:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a26:	6818      	ldr	r0, [r3, #0]
   b8a28:	9000      	str	r0, [sp, #0]
   b8a2a:	889b      	ldrh	r3, [r3, #4]
   b8a2c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a30:	2205      	movs	r2, #5
   b8a32:	4629      	mov	r1, r5
   b8a34:	4668      	mov	r0, sp
   b8a36:	f00b f813 	bl	c3a60 <memcmp>
   b8a3a:	b920      	cbnz	r0, b8a46 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8a3c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8a40:	3066      	adds	r0, #102	; 0x66
}
   b8a42:	b003      	add	sp, #12
   b8a44:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a46:	4930      	ldr	r1, [pc, #192]	; (b8b08 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8a48:	4668      	mov	r0, sp
   b8a4a:	f00b f8a7 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a4e:	2205      	movs	r2, #5
   b8a50:	4629      	mov	r1, r5
   b8a52:	4668      	mov	r0, sp
   b8a54:	f00b f804 	bl	c3a60 <memcmp>
   b8a58:	b910      	cbnz	r0, b8a60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8a5a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8a5e:	e7ef      	b.n	b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8a60:	492a      	ldr	r1, [pc, #168]	; (b8b0c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8a62:	4668      	mov	r0, sp
   b8a64:	f00b f89a 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a68:	2205      	movs	r2, #5
   b8a6a:	4629      	mov	r1, r5
   b8a6c:	4668      	mov	r0, sp
   b8a6e:	f00a fff7 	bl	c3a60 <memcmp>
   b8a72:	b910      	cbnz	r0, b8a7a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8a74:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8a78:	e7e2      	b.n	b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8a7a:	4925      	ldr	r1, [pc, #148]	; (b8b10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8a7c:	4668      	mov	r0, sp
   b8a7e:	f00b f88d 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a82:	2205      	movs	r2, #5
   b8a84:	4629      	mov	r1, r5
   b8a86:	4668      	mov	r0, sp
   b8a88:	f00a ffea 	bl	c3a60 <memcmp>
   b8a8c:	b910      	cbnz	r0, b8a94 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8a8e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8a92:	e7d5      	b.n	b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8a94:	491f      	ldr	r1, [pc, #124]	; (b8b14 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8a96:	4668      	mov	r0, sp
   b8a98:	f00b f880 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a9c:	2205      	movs	r2, #5
   b8a9e:	4629      	mov	r1, r5
   b8aa0:	4668      	mov	r0, sp
   b8aa2:	f00a ffdd 	bl	c3a60 <memcmp>
   b8aa6:	b910      	cbnz	r0, b8aae <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8aa8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8aac:	e7c8      	b.n	b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8aae:	491a      	ldr	r1, [pc, #104]	; (b8b18 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8ab0:	4668      	mov	r0, sp
   b8ab2:	f00b f873 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ab6:	2205      	movs	r2, #5
   b8ab8:	4629      	mov	r1, r5
   b8aba:	4668      	mov	r0, sp
   b8abc:	f00a ffd0 	bl	c3a60 <memcmp>
   b8ac0:	b910      	cbnz	r0, b8ac8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8ac2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8ac6:	e7bb      	b.n	b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8ac8:	4914      	ldr	r1, [pc, #80]	; (b8b1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8aca:	4668      	mov	r0, sp
   b8acc:	f00b f866 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ad0:	2205      	movs	r2, #5
   b8ad2:	4629      	mov	r1, r5
   b8ad4:	4668      	mov	r0, sp
   b8ad6:	f00a ffc3 	bl	c3a60 <memcmp>
   b8ada:	b918      	cbnz	r0, b8ae4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8adc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8ae0:	3034      	adds	r0, #52	; 0x34
   b8ae2:	e7ae      	b.n	b8a42 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8ae4:	490e      	ldr	r1, [pc, #56]	; (b8b20 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8ae6:	4668      	mov	r0, sp
   b8ae8:	f00b f858 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aec:	2205      	movs	r2, #5
   b8aee:	4629      	mov	r1, r5
   b8af0:	4668      	mov	r0, sp
   b8af2:	f00a ffb5 	bl	c3a60 <memcmp>
   b8af6:	b910      	cbnz	r0, b8afe <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8af8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8afc:	e7f0      	b.n	b8ae0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8afe:	2000      	movs	r0, #0
   b8b00:	e79f      	b.n	b8a42 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8b02:	bf00      	nop
   b8b04:	000c63ec 	.word	0x000c63ec
   b8b08:	000c63c2 	.word	0x000c63c2
   b8b0c:	000c63c8 	.word	0x000c63c8
   b8b10:	000c63ce 	.word	0x000c63ce
   b8b14:	000c63d4 	.word	0x000c63d4
   b8b18:	000c63da 	.word	0x000c63da
   b8b1c:	000c63e0 	.word	0x000c63e0
   b8b20:	000c63e6 	.word	0x000c63e6

000b8b24 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8b26:	4b39      	ldr	r3, [pc, #228]	; (b8c0c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8b28:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b2a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b2e:	6818      	ldr	r0, [r3, #0]
   b8b30:	9000      	str	r0, [sp, #0]
   b8b32:	889b      	ldrh	r3, [r3, #4]
   b8b34:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b38:	2205      	movs	r2, #5
   b8b3a:	4629      	mov	r1, r5
   b8b3c:	4668      	mov	r0, sp
   b8b3e:	f00a ff8f 	bl	c3a60 <memcmp>
   b8b42:	b920      	cbnz	r0, b8b4e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8b44:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b48:	3067      	adds	r0, #103	; 0x67
}
   b8b4a:	b003      	add	sp, #12
   b8b4c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b4e:	4930      	ldr	r1, [pc, #192]	; (b8c10 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8b50:	4668      	mov	r0, sp
   b8b52:	f00b f823 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b56:	2205      	movs	r2, #5
   b8b58:	4629      	mov	r1, r5
   b8b5a:	4668      	mov	r0, sp
   b8b5c:	f00a ff80 	bl	c3a60 <memcmp>
   b8b60:	b910      	cbnz	r0, b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b62:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8b66:	e7ef      	b.n	b8b48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8b68:	492a      	ldr	r1, [pc, #168]	; (b8c14 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8b6a:	4668      	mov	r0, sp
   b8b6c:	f00b f816 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b70:	2205      	movs	r2, #5
   b8b72:	4629      	mov	r1, r5
   b8b74:	4668      	mov	r0, sp
   b8b76:	f00a ff73 	bl	c3a60 <memcmp>
   b8b7a:	b910      	cbnz	r0, b8b82 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8b7c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8b80:	e7e2      	b.n	b8b48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8b82:	4925      	ldr	r1, [pc, #148]	; (b8c18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8b84:	4668      	mov	r0, sp
   b8b86:	f00b f809 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b8a:	2205      	movs	r2, #5
   b8b8c:	4629      	mov	r1, r5
   b8b8e:	4668      	mov	r0, sp
   b8b90:	f00a ff66 	bl	c3a60 <memcmp>
   b8b94:	b910      	cbnz	r0, b8b9c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b8b96:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8b9a:	e7d5      	b.n	b8b48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8b9c:	491f      	ldr	r1, [pc, #124]	; (b8c1c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8b9e:	4668      	mov	r0, sp
   b8ba0:	f00a fffc 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ba4:	2205      	movs	r2, #5
   b8ba6:	4629      	mov	r1, r5
   b8ba8:	4668      	mov	r0, sp
   b8baa:	f00a ff59 	bl	c3a60 <memcmp>
   b8bae:	b910      	cbnz	r0, b8bb6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b8bb0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8bb4:	e7c8      	b.n	b8b48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8bb6:	491a      	ldr	r1, [pc, #104]	; (b8c20 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b8bb8:	4668      	mov	r0, sp
   b8bba:	f00a ffef 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bbe:	2205      	movs	r2, #5
   b8bc0:	4629      	mov	r1, r5
   b8bc2:	4668      	mov	r0, sp
   b8bc4:	f00a ff4c 	bl	c3a60 <memcmp>
   b8bc8:	b910      	cbnz	r0, b8bd0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b8bca:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8bce:	e7bb      	b.n	b8b48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8bd0:	4914      	ldr	r1, [pc, #80]	; (b8c24 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b8bd2:	4668      	mov	r0, sp
   b8bd4:	f00a ffe2 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bd8:	2205      	movs	r2, #5
   b8bda:	4629      	mov	r1, r5
   b8bdc:	4668      	mov	r0, sp
   b8bde:	f00a ff3f 	bl	c3a60 <memcmp>
   b8be2:	b918      	cbnz	r0, b8bec <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8be4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8be8:	3035      	adds	r0, #53	; 0x35
   b8bea:	e7ae      	b.n	b8b4a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8bec:	490e      	ldr	r1, [pc, #56]	; (b8c28 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b8bee:	4668      	mov	r0, sp
   b8bf0:	f00a ffd4 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf4:	2205      	movs	r2, #5
   b8bf6:	4629      	mov	r1, r5
   b8bf8:	4668      	mov	r0, sp
   b8bfa:	f00a ff31 	bl	c3a60 <memcmp>
   b8bfe:	b910      	cbnz	r0, b8c06 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8c00:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8c04:	e7f0      	b.n	b8be8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8c06:	2000      	movs	r0, #0
   b8c08:	e79f      	b.n	b8b4a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8c0a:	bf00      	nop
   b8c0c:	000c63ec 	.word	0x000c63ec
   b8c10:	000c63c2 	.word	0x000c63c2
   b8c14:	000c63c8 	.word	0x000c63c8
   b8c18:	000c63ce 	.word	0x000c63ce
   b8c1c:	000c63d4 	.word	0x000c63d4
   b8c20:	000c63da 	.word	0x000c63da
   b8c24:	000c63e0 	.word	0x000c63e0
   b8c28:	000c63e6 	.word	0x000c63e6

000b8c2c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c2e:	4b39      	ldr	r3, [pc, #228]	; (b8d14 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b8c30:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c32:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c36:	6818      	ldr	r0, [r3, #0]
   b8c38:	9000      	str	r0, [sp, #0]
   b8c3a:	889b      	ldrh	r3, [r3, #4]
   b8c3c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c40:	2205      	movs	r2, #5
   b8c42:	4629      	mov	r1, r5
   b8c44:	4668      	mov	r0, sp
   b8c46:	f00a ff0b 	bl	c3a60 <memcmp>
   b8c4a:	b928      	cbnz	r0, b8c58 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8c4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c50:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8c54:	b003      	add	sp, #12
   b8c56:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c58:	492f      	ldr	r1, [pc, #188]	; (b8d18 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8c5a:	4668      	mov	r0, sp
   b8c5c:	f00a ff9e 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c60:	2205      	movs	r2, #5
   b8c62:	4629      	mov	r1, r5
   b8c64:	4668      	mov	r0, sp
   b8c66:	f00a fefb 	bl	c3a60 <memcmp>
   b8c6a:	b910      	cbnz	r0, b8c72 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c6c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c70:	e7ee      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8c72:	492a      	ldr	r1, [pc, #168]	; (b8d1c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8c74:	4668      	mov	r0, sp
   b8c76:	f00a ff91 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c7a:	2205      	movs	r2, #5
   b8c7c:	4629      	mov	r1, r5
   b8c7e:	4668      	mov	r0, sp
   b8c80:	f00a feee 	bl	c3a60 <memcmp>
   b8c84:	b910      	cbnz	r0, b8c8c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b8c86:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8c8a:	e7e1      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8c8c:	4924      	ldr	r1, [pc, #144]	; (b8d20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8c8e:	4668      	mov	r0, sp
   b8c90:	f00a ff84 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c94:	2205      	movs	r2, #5
   b8c96:	4629      	mov	r1, r5
   b8c98:	4668      	mov	r0, sp
   b8c9a:	f00a fee1 	bl	c3a60 <memcmp>
   b8c9e:	b910      	cbnz	r0, b8ca6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8ca0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8ca4:	e7d4      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8ca6:	491f      	ldr	r1, [pc, #124]	; (b8d24 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b8ca8:	4668      	mov	r0, sp
   b8caa:	f00a ff77 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cae:	2205      	movs	r2, #5
   b8cb0:	4629      	mov	r1, r5
   b8cb2:	4668      	mov	r0, sp
   b8cb4:	f00a fed4 	bl	c3a60 <memcmp>
   b8cb8:	b910      	cbnz	r0, b8cc0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b8cba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8cbe:	e7c7      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8cc0:	4919      	ldr	r1, [pc, #100]	; (b8d28 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8cc2:	4668      	mov	r0, sp
   b8cc4:	f00a ff6a 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cc8:	2205      	movs	r2, #5
   b8cca:	4629      	mov	r1, r5
   b8ccc:	4668      	mov	r0, sp
   b8cce:	f00a fec7 	bl	c3a60 <memcmp>
   b8cd2:	b910      	cbnz	r0, b8cda <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8cd4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8cd8:	e7ba      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8cda:	4914      	ldr	r1, [pc, #80]	; (b8d2c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8cdc:	4668      	mov	r0, sp
   b8cde:	f00a ff5d 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ce2:	2205      	movs	r2, #5
   b8ce4:	4629      	mov	r1, r5
   b8ce6:	4668      	mov	r0, sp
   b8ce8:	f00a feba 	bl	c3a60 <memcmp>
   b8cec:	b918      	cbnz	r0, b8cf6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8cee:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8cf2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8cf4:	e7ae      	b.n	b8c54 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8cf6:	490e      	ldr	r1, [pc, #56]	; (b8d30 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8cf8:	4668      	mov	r0, sp
   b8cfa:	f00a ff4f 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cfe:	2205      	movs	r2, #5
   b8d00:	4629      	mov	r1, r5
   b8d02:	4668      	mov	r0, sp
   b8d04:	f00a feac 	bl	c3a60 <memcmp>
   b8d08:	b910      	cbnz	r0, b8d10 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8d0a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8d0e:	e7f0      	b.n	b8cf2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8d10:	2000      	movs	r0, #0
   b8d12:	e79f      	b.n	b8c54 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8d14:	000c63ec 	.word	0x000c63ec
   b8d18:	000c63c2 	.word	0x000c63c2
   b8d1c:	000c63c8 	.word	0x000c63c8
   b8d20:	000c63ce 	.word	0x000c63ce
   b8d24:	000c63d4 	.word	0x000c63d4
   b8d28:	000c63da 	.word	0x000c63da
   b8d2c:	000c63e0 	.word	0x000c63e0
   b8d30:	000c63e6 	.word	0x000c63e6

000b8d34 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d36:	4b3a      	ldr	r3, [pc, #232]	; (b8e20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8d38:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d3a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d3e:	6818      	ldr	r0, [r3, #0]
   b8d40:	9000      	str	r0, [sp, #0]
   b8d42:	889b      	ldrh	r3, [r3, #4]
   b8d44:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d48:	2205      	movs	r2, #5
   b8d4a:	4629      	mov	r1, r5
   b8d4c:	4668      	mov	r0, sp
   b8d4e:	f00a fe87 	bl	c3a60 <memcmp>
   b8d52:	b930      	cbnz	r0, b8d62 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8d54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8d58:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8d5c:	3001      	adds	r0, #1
}
   b8d5e:	b003      	add	sp, #12
   b8d60:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d62:	4930      	ldr	r1, [pc, #192]	; (b8e24 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8d64:	4668      	mov	r0, sp
   b8d66:	f00a ff19 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d6a:	2205      	movs	r2, #5
   b8d6c:	4629      	mov	r1, r5
   b8d6e:	4668      	mov	r0, sp
   b8d70:	f00a fe76 	bl	c3a60 <memcmp>
   b8d74:	b910      	cbnz	r0, b8d7c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8d76:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8d7a:	e7ed      	b.n	b8d58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d7c:	492a      	ldr	r1, [pc, #168]	; (b8e28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8d7e:	4668      	mov	r0, sp
   b8d80:	f00a ff0c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d84:	2205      	movs	r2, #5
   b8d86:	4629      	mov	r1, r5
   b8d88:	4668      	mov	r0, sp
   b8d8a:	f00a fe69 	bl	c3a60 <memcmp>
   b8d8e:	b910      	cbnz	r0, b8d96 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8d90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8d94:	e7e0      	b.n	b8d58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8d96:	4925      	ldr	r1, [pc, #148]	; (b8e2c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8d98:	4668      	mov	r0, sp
   b8d9a:	f00a feff 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d9e:	2205      	movs	r2, #5
   b8da0:	4629      	mov	r1, r5
   b8da2:	4668      	mov	r0, sp
   b8da4:	f00a fe5c 	bl	c3a60 <memcmp>
   b8da8:	b910      	cbnz	r0, b8db0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8daa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8dae:	e7d3      	b.n	b8d58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8db0:	491f      	ldr	r1, [pc, #124]	; (b8e30 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8db2:	4668      	mov	r0, sp
   b8db4:	f00a fef2 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8db8:	2205      	movs	r2, #5
   b8dba:	4629      	mov	r1, r5
   b8dbc:	4668      	mov	r0, sp
   b8dbe:	f00a fe4f 	bl	c3a60 <memcmp>
   b8dc2:	b910      	cbnz	r0, b8dca <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8dc4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8dc8:	e7c6      	b.n	b8d58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8dca:	491a      	ldr	r1, [pc, #104]	; (b8e34 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8dcc:	4668      	mov	r0, sp
   b8dce:	f00a fee5 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd2:	2205      	movs	r2, #5
   b8dd4:	4629      	mov	r1, r5
   b8dd6:	4668      	mov	r0, sp
   b8dd8:	f00a fe42 	bl	c3a60 <memcmp>
   b8ddc:	b910      	cbnz	r0, b8de4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8dde:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8de2:	e7b9      	b.n	b8d58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8de4:	4914      	ldr	r1, [pc, #80]	; (b8e38 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8de6:	4668      	mov	r0, sp
   b8de8:	f00a fed8 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dec:	2205      	movs	r2, #5
   b8dee:	4629      	mov	r1, r5
   b8df0:	4668      	mov	r0, sp
   b8df2:	f00a fe35 	bl	c3a60 <memcmp>
   b8df6:	b918      	cbnz	r0, b8e00 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8df8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8dfc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8dfe:	e7ad      	b.n	b8d5c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8e00:	490e      	ldr	r1, [pc, #56]	; (b8e3c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8e02:	4668      	mov	r0, sp
   b8e04:	f00a feca 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e08:	2205      	movs	r2, #5
   b8e0a:	4629      	mov	r1, r5
   b8e0c:	4668      	mov	r0, sp
   b8e0e:	f00a fe27 	bl	c3a60 <memcmp>
   b8e12:	b910      	cbnz	r0, b8e1a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8e14:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8e18:	e7f0      	b.n	b8dfc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8e1a:	2000      	movs	r0, #0
   b8e1c:	e79f      	b.n	b8d5e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8e1e:	bf00      	nop
   b8e20:	000c63ec 	.word	0x000c63ec
   b8e24:	000c63c2 	.word	0x000c63c2
   b8e28:	000c63c8 	.word	0x000c63c8
   b8e2c:	000c63ce 	.word	0x000c63ce
   b8e30:	000c63d4 	.word	0x000c63d4
   b8e34:	000c63da 	.word	0x000c63da
   b8e38:	000c63e0 	.word	0x000c63e0
   b8e3c:	000c63e6 	.word	0x000c63e6

000b8e40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8e40:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8e42:	4b30      	ldr	r3, [pc, #192]	; (b8f04 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8e44:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e46:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8e4a:	6818      	ldr	r0, [r3, #0]
   b8e4c:	9000      	str	r0, [sp, #0]
   b8e4e:	889b      	ldrh	r3, [r3, #4]
   b8e50:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e54:	2205      	movs	r2, #5
   b8e56:	4621      	mov	r1, r4
   b8e58:	4668      	mov	r0, sp
   b8e5a:	f00a fe01 	bl	c3a60 <memcmp>
   b8e5e:	b910      	cbnz	r0, b8e66 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8e60:	2064      	movs	r0, #100	; 0x64
}
   b8e62:	b002      	add	sp, #8
   b8e64:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e66:	4928      	ldr	r1, [pc, #160]	; (b8f08 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8e68:	4668      	mov	r0, sp
   b8e6a:	f00a fe97 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e6e:	2205      	movs	r2, #5
   b8e70:	4621      	mov	r1, r4
   b8e72:	4668      	mov	r0, sp
   b8e74:	f00a fdf4 	bl	c3a60 <memcmp>
   b8e78:	2800      	cmp	r0, #0
   b8e7a:	d0f1      	beq.n	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8e7c:	4923      	ldr	r1, [pc, #140]	; (b8f0c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8e7e:	4668      	mov	r0, sp
   b8e80:	f00a fe8c 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e84:	2205      	movs	r2, #5
   b8e86:	4621      	mov	r1, r4
   b8e88:	4668      	mov	r0, sp
   b8e8a:	f00a fde9 	bl	c3a60 <memcmp>
   b8e8e:	2800      	cmp	r0, #0
   b8e90:	d0e6      	beq.n	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8e92:	491f      	ldr	r1, [pc, #124]	; (b8f10 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8e94:	4668      	mov	r0, sp
   b8e96:	f00a fe81 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e9a:	2205      	movs	r2, #5
   b8e9c:	4621      	mov	r1, r4
   b8e9e:	4668      	mov	r0, sp
   b8ea0:	f00a fdde 	bl	c3a60 <memcmp>
   b8ea4:	2800      	cmp	r0, #0
   b8ea6:	d0db      	beq.n	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8ea8:	491a      	ldr	r1, [pc, #104]	; (b8f14 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8eaa:	4668      	mov	r0, sp
   b8eac:	f00a fe76 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eb0:	2205      	movs	r2, #5
   b8eb2:	4621      	mov	r1, r4
   b8eb4:	4668      	mov	r0, sp
   b8eb6:	f00a fdd3 	bl	c3a60 <memcmp>
   b8eba:	2800      	cmp	r0, #0
   b8ebc:	d0d0      	beq.n	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8ebe:	4916      	ldr	r1, [pc, #88]	; (b8f18 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8ec0:	4668      	mov	r0, sp
   b8ec2:	f00a fe6b 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ec6:	2205      	movs	r2, #5
   b8ec8:	4621      	mov	r1, r4
   b8eca:	4668      	mov	r0, sp
   b8ecc:	f00a fdc8 	bl	c3a60 <memcmp>
   b8ed0:	2800      	cmp	r0, #0
   b8ed2:	d0c5      	beq.n	b8e60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8ed4:	4911      	ldr	r1, [pc, #68]	; (b8f1c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8ed6:	4668      	mov	r0, sp
   b8ed8:	f00a fe60 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8edc:	2205      	movs	r2, #5
   b8ede:	4621      	mov	r1, r4
   b8ee0:	4668      	mov	r0, sp
   b8ee2:	f00a fdbd 	bl	c3a60 <memcmp>
   b8ee6:	b148      	cbz	r0, b8efc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8ee8:	490d      	ldr	r1, [pc, #52]	; (b8f20 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8eea:	4668      	mov	r0, sp
   b8eec:	f00a fe56 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ef0:	2205      	movs	r2, #5
   b8ef2:	4621      	mov	r1, r4
   b8ef4:	4668      	mov	r0, sp
   b8ef6:	f00a fdb3 	bl	c3a60 <memcmp>
   b8efa:	b908      	cbnz	r0, b8f00 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8efc:	2032      	movs	r0, #50	; 0x32
   b8efe:	e7b0      	b.n	b8e62 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8f00:	2000      	movs	r0, #0
   b8f02:	e7ae      	b.n	b8e62 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8f04:	000c63ec 	.word	0x000c63ec
   b8f08:	000c63c2 	.word	0x000c63c2
   b8f0c:	000c63c8 	.word	0x000c63c8
   b8f10:	000c63ce 	.word	0x000c63ce
   b8f14:	000c63d4 	.word	0x000c63d4
   b8f18:	000c63da 	.word	0x000c63da
   b8f1c:	000c63e0 	.word	0x000c63e0
   b8f20:	000c63e6 	.word	0x000c63e6

000b8f24 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f26:	4b38      	ldr	r3, [pc, #224]	; (b9008 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8f28:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f2a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f2e:	6818      	ldr	r0, [r3, #0]
   b8f30:	9000      	str	r0, [sp, #0]
   b8f32:	889b      	ldrh	r3, [r3, #4]
   b8f34:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f38:	2205      	movs	r2, #5
   b8f3a:	4629      	mov	r1, r5
   b8f3c:	4668      	mov	r0, sp
   b8f3e:	f00a fd8f 	bl	c3a60 <memcmp>
   b8f42:	b918      	cbnz	r0, b8f4c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8f44:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8f48:	b003      	add	sp, #12
   b8f4a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f4c:	492f      	ldr	r1, [pc, #188]	; (b900c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8f4e:	4668      	mov	r0, sp
   b8f50:	f00a fe24 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f54:	2205      	movs	r2, #5
   b8f56:	4629      	mov	r1, r5
   b8f58:	4668      	mov	r0, sp
   b8f5a:	f00a fd81 	bl	c3a60 <memcmp>
   b8f5e:	b910      	cbnz	r0, b8f66 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8f60:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f64:	e7f0      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f66:	492a      	ldr	r1, [pc, #168]	; (b9010 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8f68:	4668      	mov	r0, sp
   b8f6a:	f00a fe17 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f6e:	2205      	movs	r2, #5
   b8f70:	4629      	mov	r1, r5
   b8f72:	4668      	mov	r0, sp
   b8f74:	f00a fd74 	bl	c3a60 <memcmp>
   b8f78:	b910      	cbnz	r0, b8f80 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8f7a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f7e:	e7e3      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f80:	4924      	ldr	r1, [pc, #144]	; (b9014 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8f82:	4668      	mov	r0, sp
   b8f84:	f00a fe0a 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f88:	2205      	movs	r2, #5
   b8f8a:	4629      	mov	r1, r5
   b8f8c:	4668      	mov	r0, sp
   b8f8e:	f00a fd67 	bl	c3a60 <memcmp>
   b8f92:	b910      	cbnz	r0, b8f9a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8f94:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f98:	e7d6      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f9a:	491f      	ldr	r1, [pc, #124]	; (b9018 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8f9c:	4668      	mov	r0, sp
   b8f9e:	f00a fdfd 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fa2:	2205      	movs	r2, #5
   b8fa4:	4629      	mov	r1, r5
   b8fa6:	4668      	mov	r0, sp
   b8fa8:	f00a fd5a 	bl	c3a60 <memcmp>
   b8fac:	b910      	cbnz	r0, b8fb4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8fae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8fb2:	e7c9      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8fb4:	4919      	ldr	r1, [pc, #100]	; (b901c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8fb6:	4668      	mov	r0, sp
   b8fb8:	f00a fdf0 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fbc:	2205      	movs	r2, #5
   b8fbe:	4629      	mov	r1, r5
   b8fc0:	4668      	mov	r0, sp
   b8fc2:	f00a fd4d 	bl	c3a60 <memcmp>
   b8fc6:	b910      	cbnz	r0, b8fce <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8fc8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8fcc:	e7bc      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8fce:	4914      	ldr	r1, [pc, #80]	; (b9020 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8fd0:	4668      	mov	r0, sp
   b8fd2:	f00a fde3 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fd6:	2205      	movs	r2, #5
   b8fd8:	4629      	mov	r1, r5
   b8fda:	4668      	mov	r0, sp
   b8fdc:	f00a fd40 	bl	c3a60 <memcmp>
   b8fe0:	b910      	cbnz	r0, b8fe8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b8fe2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8fe6:	e7af      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8fe8:	490e      	ldr	r1, [pc, #56]	; (b9024 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b8fea:	4668      	mov	r0, sp
   b8fec:	f00a fdd6 	bl	c3b9c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ff0:	2205      	movs	r2, #5
   b8ff2:	4629      	mov	r1, r5
   b8ff4:	4668      	mov	r0, sp
   b8ff6:	f00a fd33 	bl	c3a60 <memcmp>
   b8ffa:	b910      	cbnz	r0, b9002 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b8ffc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9000:	e7a2      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9002:	2000      	movs	r0, #0
   b9004:	e7a0      	b.n	b8f48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9006:	bf00      	nop
   b9008:	000c63ec 	.word	0x000c63ec
   b900c:	000c63c2 	.word	0x000c63c2
   b9010:	000c63c8 	.word	0x000c63c8
   b9014:	000c63ce 	.word	0x000c63ce
   b9018:	000c63d4 	.word	0x000c63d4
   b901c:	000c63da 	.word	0x000c63da
   b9020:	000c63e0 	.word	0x000c63e0
   b9024:	000c63e6 	.word	0x000c63e6

000b9028 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9028:	4770      	bx	lr
	...

000b902c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b902c:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b902e:	8813      	ldrh	r3, [r2, #0]
   b9030:	4d0c      	ldr	r5, [pc, #48]	; (b9064 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9032:	2b01      	cmp	r3, #1
{
   b9034:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9036:	d10e      	bne.n	b9056 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9038:	020a      	lsls	r2, r1, #8
   b903a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b903e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9040:	3301      	adds	r3, #1
   b9042:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9044:	f7ff fff0 	bl	b9028 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9048:	8820      	ldrh	r0, [r4, #0]
   b904a:	882b      	ldrh	r3, [r5, #0]
}
   b904c:	4298      	cmp	r0, r3
   b904e:	bf14      	ite	ne
   b9050:	2003      	movne	r0, #3
   b9052:	2000      	moveq	r0, #0
   b9054:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9056:	2b02      	cmp	r3, #2
   b9058:	d1f2      	bne.n	b9040 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b905a:	882a      	ldrh	r2, [r5, #0]
   b905c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b905e:	3206      	adds	r2, #6
   b9060:	e7ed      	b.n	b903e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9062:	bf00      	nop
   b9064:	2003e61e 	.word	0x2003e61e

000b9068 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9068:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b906a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b906c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b906e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9070:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9072:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9076:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b907a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b907e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9082:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9086:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9088:	4413      	add	r3, r2
   b908a:	734b      	strb	r3, [r1, #13]
   b908c:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b908e:	b293      	uxth	r3, r2
   b9090:	429c      	cmp	r4, r3
   b9092:	d90a      	bls.n	b90aa <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9094:	688b      	ldr	r3, [r1, #8]
   b9096:	7b08      	ldrb	r0, [r1, #12]
   b9098:	5c9b      	ldrb	r3, [r3, r2]
   b909a:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b909c:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b909e:	b2db      	uxtb	r3, r3
   b90a0:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b90a2:	4403      	add	r3, r0
   b90a4:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b90a6:	3201      	adds	r2, #1
   b90a8:	e7f1      	b.n	b908e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b90aa:	bd30      	pop	{r4, r5, pc}

000b90ac <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b90ac:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b90b0:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b90b2:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b90b6:	b2c9      	uxtb	r1, r1
   b90b8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b90bc:	4419      	add	r1, r3
   b90be:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b90c2:	4770      	bx	lr

000b90c4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b90c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b90c8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b90cc:	f10b 0b08 	add.w	fp, fp, #8
   b90d0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b90d4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90d8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b90dc:	4604      	mov	r4, r0
   b90de:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b90e0:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b90e2:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90e4:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b90e6:	f1ba 0f00 	cmp.w	sl, #0
   b90ea:	f000 80a6 	beq.w	b923a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b90ee:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b90f0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b90f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b90f8:	4556      	cmp	r6, sl
   b90fa:	bf28      	it	cs
   b90fc:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b90fe:	ebaa 0a06 	sub.w	sl, sl, r6
   b9102:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9106:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b910a:	bf02      	ittt	eq
   b910c:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b9110:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9112:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9116:	f006 f96d 	bl	bf3f4 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b911a:	f1b9 0f00 	cmp.w	r9, #0
   b911e:	d15c      	bne.n	b91da <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9120:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9124:	6803      	ldr	r3, [r0, #0]
   b9126:	21b5      	movs	r1, #181	; 0xb5
   b9128:	689b      	ldr	r3, [r3, #8]
   b912a:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b912c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9130:	6803      	ldr	r3, [r0, #0]
   b9132:	2162      	movs	r1, #98	; 0x62
   b9134:	689b      	ldr	r3, [r3, #8]
   b9136:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9138:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b913c:	7829      	ldrb	r1, [r5, #0]
   b913e:	6803      	ldr	r3, [r0, #0]
   b9140:	689b      	ldr	r3, [r3, #8]
   b9142:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9144:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9148:	7869      	ldrb	r1, [r5, #1]
   b914a:	6803      	ldr	r3, [r0, #0]
   b914c:	689b      	ldr	r3, [r3, #8]
   b914e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9150:	78a9      	ldrb	r1, [r5, #2]
   b9152:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9156:	f7fe fdc1 	bl	b7cdc <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b915a:	8869      	ldrh	r1, [r5, #2]
   b915c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9160:	0a09      	lsrs	r1, r1, #8
   b9162:	f7fe fdbb 	bl	b7cdc <_ZN7TwoWire5writeEi.isra.0>
   b9166:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9168:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b916a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b916e:	fa1f f983 	uxth.w	r9, r3
   b9172:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9176:	454a      	cmp	r2, r9
   b9178:	b2bf      	uxth	r7, r7
   b917a:	d90d      	bls.n	b9198 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b917c:	42be      	cmp	r6, r7
   b917e:	d90b      	bls.n	b9198 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9180:	68aa      	ldr	r2, [r5, #8]
   b9182:	6801      	ldr	r1, [r0, #0]
   b9184:	9301      	str	r3, [sp, #4]
   b9186:	4442      	add	r2, r8
   b9188:	688f      	ldr	r7, [r1, #8]
   b918a:	5cd1      	ldrb	r1, [r2, r3]
   b918c:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b918e:	9b01      	ldr	r3, [sp, #4]
   b9190:	3301      	adds	r3, #1
   b9192:	e7e9      	b.n	b9168 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9194:	46b9      	mov	r9, r7
   b9196:	e7a6      	b.n	b90e6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9198:	3e02      	subs	r6, #2
      startSpot += x;
   b919a:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b919c:	42b7      	cmp	r7, r6
      startSpot += x;
   b919e:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b91a2:	d10c      	bne.n	b91be <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b91a4:	6803      	ldr	r3, [r0, #0]
   b91a6:	7b29      	ldrb	r1, [r5, #12]
   b91a8:	689b      	ldr	r3, [r3, #8]
   b91aa:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b91ac:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91b0:	7b69      	ldrb	r1, [r5, #13]
   b91b2:	6803      	ldr	r3, [r0, #0]
   b91b4:	689b      	ldr	r3, [r3, #8]
   b91b6:	4798      	blx	r3
        bytesSent += 2;
   b91b8:	f109 0708 	add.w	r7, r9, #8
   b91bc:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b91be:	455f      	cmp	r7, fp
   b91c0:	d2e8      	bcs.n	b9194 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b91c2:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b91c6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91ca:	f006 f91a 	bl	bf402 <_ZN7TwoWire15endTransmissionEh>
   b91ce:	2800      	cmp	r0, #0
   b91d0:	d0e0      	beq.n	b9194 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b91d2:	200c      	movs	r0, #12
}
   b91d4:	b003      	add	sp, #12
   b91d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b91da:	2200      	movs	r2, #0
   b91dc:	b291      	uxth	r1, r2
   b91de:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91e2:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91e4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91e8:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91ea:	d910      	bls.n	b920e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b91ec:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b91f0:	eb08 0c02 	add.w	ip, r8, r2
   b91f4:	1c53      	adds	r3, r2, #1
   b91f6:	45f4      	cmp	ip, lr
   b91f8:	9301      	str	r3, [sp, #4]
   b91fa:	da08      	bge.n	b920e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91fc:	68a9      	ldr	r1, [r5, #8]
   b91fe:	6802      	ldr	r2, [r0, #0]
   b9200:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9204:	6892      	ldr	r2, [r2, #8]
   b9206:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9208:	9b01      	ldr	r3, [sp, #4]
   b920a:	461a      	mov	r2, r3
   b920c:	e7e6      	b.n	b91dc <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b920e:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9210:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9212:	429f      	cmp	r7, r3
      startSpot += x;
   b9214:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9218:	d1d1      	bne.n	b91be <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b921a:	3e02      	subs	r6, #2
   b921c:	42b2      	cmp	r2, r6
   b921e:	d1ce      	bne.n	b91be <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9220:	6803      	ldr	r3, [r0, #0]
   b9222:	7b29      	ldrb	r1, [r5, #12]
   b9224:	689b      	ldr	r3, [r3, #8]
   b9226:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9228:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b922c:	7b69      	ldrb	r1, [r5, #13]
   b922e:	6803      	ldr	r3, [r0, #0]
   b9230:	689b      	ldr	r3, [r3, #8]
   b9232:	4798      	blx	r3
        bytesSent += 2;
   b9234:	fa1f f78b 	uxth.w	r7, fp
   b9238:	e7c1      	b.n	b91be <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b923a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b923e:	f006 f8e4 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
   b9242:	2800      	cmp	r0, #0
   b9244:	d0c6      	beq.n	b91d4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9246:	e7c4      	b.n	b91d2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9248 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9248:	b570      	push	{r4, r5, r6, lr}
   b924a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b924c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9250:	6803      	ldr	r3, [r0, #0]
{
   b9252:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9254:	689b      	ldr	r3, [r3, #8]
   b9256:	21b5      	movs	r1, #181	; 0xb5
   b9258:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b925a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b925e:	6803      	ldr	r3, [r0, #0]
   b9260:	2162      	movs	r1, #98	; 0x62
   b9262:	689b      	ldr	r3, [r3, #8]
   b9264:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9266:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b926a:	7821      	ldrb	r1, [r4, #0]
   b926c:	6803      	ldr	r3, [r0, #0]
   b926e:	689b      	ldr	r3, [r3, #8]
   b9270:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9272:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9276:	7861      	ldrb	r1, [r4, #1]
   b9278:	6803      	ldr	r3, [r0, #0]
   b927a:	689b      	ldr	r3, [r3, #8]
   b927c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b927e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9282:	78a1      	ldrb	r1, [r4, #2]
   b9284:	6803      	ldr	r3, [r0, #0]
   b9286:	689b      	ldr	r3, [r3, #8]
   b9288:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b928a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b928e:	8861      	ldrh	r1, [r4, #2]
   b9290:	6803      	ldr	r3, [r0, #0]
   b9292:	0a09      	lsrs	r1, r1, #8
   b9294:	689b      	ldr	r3, [r3, #8]
   b9296:	4798      	blx	r3
   b9298:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b929a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b929e:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b92a0:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92a2:	b2b2      	uxth	r2, r6
   b92a4:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b92a6:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92a8:	d904      	bls.n	b92b4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b92aa:	68a1      	ldr	r1, [r4, #8]
   b92ac:	5c89      	ldrb	r1, [r1, r2]
   b92ae:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b92b0:	3601      	adds	r6, #1
   b92b2:	e7f2      	b.n	b929a <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b92b4:	7b21      	ldrb	r1, [r4, #12]
   b92b6:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b92b8:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b92bc:	7b61      	ldrb	r1, [r4, #13]
   b92be:	6803      	ldr	r3, [r0, #0]
}
   b92c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b92c4:	689b      	ldr	r3, [r3, #8]
   b92c6:	4718      	bx	r3

000b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b92c8:	b510      	push	{r4, lr}
   b92ca:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b92cc:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b92d0:	f007 fd3c 	bl	c0d4c <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b92d4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92d8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b92dc:	429a      	cmp	r2, r3
   b92de:	d90b      	bls.n	b92f8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b92e0:	28ff      	cmp	r0, #255	; 0xff
   b92e2:	d101      	bne.n	b92e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b92e4:	7822      	ldrb	r2, [r4, #0]
   b92e6:	b13a      	cbz	r2, b92f8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b92e8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b92ec:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b92ee:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92f2:	3301      	adds	r3, #1
   b92f4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b92f8:	bd10      	pop	{r4, pc}
	...

000b92fc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b92fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9300:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9304:	4604      	mov	r4, r0
   b9306:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9308:	b97b      	cbnz	r3, b932a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b930a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b930e:	b923      	cbnz	r3, b931a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9310:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9314:	2b00      	cmp	r3, #0
   b9316:	f000 80ca 	beq.w	b94ae <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b931a:	4966      	ldr	r1, [pc, #408]	; (b94b4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b931c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9320:	b004      	add	sp, #16
   b9322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9326:	f007 bb32 	b.w	c098e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b932a:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b932e:	4a62      	ldr	r2, [pc, #392]	; (b94b8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9330:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9332:	2600      	movs	r6, #0
   b9334:	2301      	movs	r3, #1
   b9336:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b933a:	4669      	mov	r1, sp
   b933c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9340:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9344:	9200      	str	r2, [sp, #0]
   b9346:	f88d 6004 	strb.w	r6, [sp, #4]
   b934a:	f007 fc5f 	bl	c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b934e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9352:	4631      	mov	r1, r6
   b9354:	f008 f8e5 	bl	c1522 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9358:	21b5      	movs	r1, #181	; 0xb5
   b935a:	4620      	mov	r0, r4
   b935c:	f7ff ffb4 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9360:	2162      	movs	r1, #98	; 0x62
   b9362:	4620      	mov	r0, r4
   b9364:	f7ff ffb0 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9368:	7829      	ldrb	r1, [r5, #0]
   b936a:	4620      	mov	r0, r4
   b936c:	f7ff ffac 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9370:	7869      	ldrb	r1, [r5, #1]
   b9372:	4620      	mov	r0, r4
   b9374:	f7ff ffa8 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9378:	78a9      	ldrb	r1, [r5, #2]
   b937a:	4620      	mov	r0, r4
   b937c:	f7ff ffa4 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9380:	8869      	ldrh	r1, [r5, #2]
   b9382:	4620      	mov	r0, r4
   b9384:	0a09      	lsrs	r1, r1, #8
   b9386:	f7ff ff9f 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b938a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b938e:	2b00      	cmp	r3, #0
   b9390:	d042      	beq.n	b9418 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9392:	494a      	ldr	r1, [pc, #296]	; (b94bc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9394:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9398:	f007 faf9 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b939c:	2210      	movs	r2, #16
   b939e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93a2:	21b5      	movs	r1, #181	; 0xb5
   b93a4:	f7fe fc8a 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93a8:	4945      	ldr	r1, [pc, #276]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93ae:	f007 faee 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b93b2:	2210      	movs	r2, #16
   b93b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93b8:	2162      	movs	r1, #98	; 0x62
   b93ba:	f7fe fc7f 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93be:	4940      	ldr	r1, [pc, #256]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93c4:	f007 fae3 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b93c8:	2210      	movs	r2, #16
   b93ca:	7829      	ldrb	r1, [r5, #0]
   b93cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93d0:	f7fe fc74 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93d4:	493a      	ldr	r1, [pc, #232]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93da:	f007 fad8 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b93de:	2210      	movs	r2, #16
   b93e0:	7869      	ldrb	r1, [r5, #1]
   b93e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93e6:	f7fe fc69 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93ea:	4935      	ldr	r1, [pc, #212]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93f0:	f007 facd 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b93f4:	2210      	movs	r2, #16
   b93f6:	78a9      	ldrb	r1, [r5, #2]
   b93f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93fc:	f007 fae3 	bl	c09c6 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9400:	492f      	ldr	r1, [pc, #188]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9402:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9406:	f007 fac2 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b940a:	8869      	ldrh	r1, [r5, #2]
   b940c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9410:	2210      	movs	r2, #16
   b9412:	0a09      	lsrs	r1, r1, #8
   b9414:	f007 fad7 	bl	c09c6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9418:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b941c:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b941e:	886a      	ldrh	r2, [r5, #2]
   b9420:	b2b3      	uxth	r3, r6
   b9422:	429a      	cmp	r2, r3
   b9424:	d916      	bls.n	b9454 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9426:	461f      	mov	r7, r3
   b9428:	68ab      	ldr	r3, [r5, #8]
   b942a:	4620      	mov	r0, r4
   b942c:	5dd9      	ldrb	r1, [r3, r7]
   b942e:	f7ff ff4b 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9432:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9436:	b15b      	cbz	r3, b9450 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9438:	4641      	mov	r1, r8
   b943a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b943e:	f007 faa6 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9442:	68ab      	ldr	r3, [r5, #8]
   b9444:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9448:	5dd9      	ldrb	r1, [r3, r7]
   b944a:	2210      	movs	r2, #16
   b944c:	f7fe fc36 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9450:	3601      	adds	r6, #1
   b9452:	e7e4      	b.n	b941e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9454:	7b29      	ldrb	r1, [r5, #12]
   b9456:	4620      	mov	r0, r4
   b9458:	f7ff ff36 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b945c:	7b69      	ldrb	r1, [r5, #13]
   b945e:	4620      	mov	r0, r4
   b9460:	f7ff ff32 	bl	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9464:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9468:	2101      	movs	r1, #1
   b946a:	f008 f85a 	bl	c1522 <digitalWrite>
  _spiPort->endTransaction();
   b946e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9472:	f007 fbb1 	bl	c0bd8 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9476:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b947a:	b1c3      	cbz	r3, b94ae <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b947c:	4910      	ldr	r1, [pc, #64]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b947e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9482:	f007 fa84 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9486:	7b29      	ldrb	r1, [r5, #12]
   b9488:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b948c:	2210      	movs	r2, #16
   b948e:	f7fe fc15 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9492:	490b      	ldr	r1, [pc, #44]	; (b94c0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9494:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9498:	f007 fa79 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b949c:	7b69      	ldrb	r1, [r5, #13]
   b949e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94a2:	2210      	movs	r2, #16
}
   b94a4:	b004      	add	sp, #16
   b94a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b94aa:	f7fe bc0e 	b.w	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b94ae:	b004      	add	sp, #16
   b94b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94b4:	000c63f2 	.word	0x000c63f2
   b94b8:	000c61d0 	.word	0x000c61d0
   b94bc:	000c6427 	.word	0x000c6427
   b94c0:	000c7375 	.word	0x000c7375

000b94c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b94c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b94c6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b94ca:	4604      	mov	r4, r0
   b94cc:	460d      	mov	r5, r1
   b94ce:	4616      	mov	r6, r2
  if (_printDebug == true)
   b94d0:	2b00      	cmp	r3, #0
   b94d2:	f000 8082 	beq.w	b95da <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b94d6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b94da:	4940      	ldr	r1, [pc, #256]	; (b95dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b94dc:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b94e0:	f007 fa55 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b94e4:	782b      	ldrb	r3, [r5, #0]
   b94e6:	2b01      	cmp	r3, #1
   b94e8:	d13c      	bne.n	b9564 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b94ea:	493d      	ldr	r1, [pc, #244]	; (b95e0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b94ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b94f0:	f007 fa4d 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b94f4:	493b      	ldr	r1, [pc, #236]	; (b95e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b94f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94fa:	f007 fa48 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b94fe:	882b      	ldrh	r3, [r5, #0]
   b9500:	f240 7201 	movw	r2, #1793	; 0x701
   b9504:	4293      	cmp	r3, r2
   b9506:	d145      	bne.n	b9594 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9508:	4937      	ldr	r1, [pc, #220]	; (b95e8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b950a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b950e:	f007 fa3e 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9512:	4936      	ldr	r1, [pc, #216]	; (b95ec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9514:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9518:	f007 fa39 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
   b951c:	8869      	ldrh	r1, [r5, #2]
   b951e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9522:	2210      	movs	r2, #16
   b9524:	f007 fa4f 	bl	c09c6 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9528:	2f01      	cmp	r7, #1
   b952a:	d101      	bne.n	b9530 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b952c:	2e00      	cmp	r6, #0
   b952e:	d049      	beq.n	b95c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9530:	492f      	ldr	r1, [pc, #188]	; (b95f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9532:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9536:	4f2f      	ldr	r7, [pc, #188]	; (b95f4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9538:	f007 fa29 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
   b953c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b953e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9540:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9544:	b2b3      	uxth	r3, r6
   b9546:	429a      	cmp	r2, r3
   b9548:	d941      	bls.n	b95ce <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b954a:	4639      	mov	r1, r7
   b954c:	f007 fa1f 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9550:	b2b3      	uxth	r3, r6
   b9552:	68a9      	ldr	r1, [r5, #8]
   b9554:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9558:	5cc9      	ldrb	r1, [r1, r3]
   b955a:	2210      	movs	r2, #16
   b955c:	f7fe fbae 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9560:	3601      	adds	r6, #1
   b9562:	e7ec      	b.n	b953e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9564:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9566:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b956a:	d101      	bne.n	b9570 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b956c:	4922      	ldr	r1, [pc, #136]	; (b95f8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b956e:	e7bf      	b.n	b94f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9570:	2b06      	cmp	r3, #6
   b9572:	d101      	bne.n	b9578 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9574:	4921      	ldr	r1, [pc, #132]	; (b95fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9576:	e7bb      	b.n	b94f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9578:	2b0a      	cmp	r3, #10
   b957a:	d101      	bne.n	b9580 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b957c:	4920      	ldr	r1, [pc, #128]	; (b9600 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b957e:	e7b7      	b.n	b94f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9580:	4920      	ldr	r1, [pc, #128]	; (b9604 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9582:	f007 fa04 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9586:	7829      	ldrb	r1, [r5, #0]
   b9588:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b958c:	2210      	movs	r2, #16
   b958e:	f7fe fb95 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9592:	e7af      	b.n	b94f4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9594:	f640 0206 	movw	r2, #2054	; 0x806
   b9598:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b959a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b959e:	d101      	bne.n	b95a4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b95a0:	4919      	ldr	r1, [pc, #100]	; (b9608 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b95a2:	e7b4      	b.n	b950e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b95a4:	f640 1206 	movw	r2, #2310	; 0x906
   b95a8:	4293      	cmp	r3, r2
   b95aa:	d101      	bne.n	b95b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b95ac:	4917      	ldr	r1, [pc, #92]	; (b960c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b95ae:	e7ae      	b.n	b950e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b95b0:	4914      	ldr	r1, [pc, #80]	; (b9604 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b95b2:	f007 f9ec 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b95b6:	7869      	ldrb	r1, [r5, #1]
   b95b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95bc:	2210      	movs	r2, #16
   b95be:	f7fe fb7d 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b95c2:	e7a6      	b.n	b9512 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b95c4:	4912      	ldr	r1, [pc, #72]	; (b9610 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b95c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95ca:	f007 f9e0 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b95ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b95d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b95d6:	f007 b9de 	b.w	c0996 <_ZN5Print7printlnEv>
}
   b95da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b95dc:	000c6438 	.word	0x000c6438
   b95e0:	000c643d 	.word	0x000c643d
   b95e4:	000c644d 	.word	0x000c644d
   b95e8:	000c6452 	.word	0x000c6452
   b95ec:	000c6460 	.word	0x000c6460
   b95f0:	000c6469 	.word	0x000c6469
   b95f4:	000c7375 	.word	0x000c7375
   b95f8:	000c6441 	.word	0x000c6441
   b95fc:	000c6445 	.word	0x000c6445
   b9600:	000c6449 	.word	0x000c6449
   b9604:	000c66be 	.word	0x000c66be
   b9608:	000c6456 	.word	0x000c6456
   b960c:	000c645b 	.word	0x000c645b
   b9610:	000c6473 	.word	0x000c6473

000b9614 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9614:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9616:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b961a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b961c:	b955      	cbnz	r5, b9634 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b961e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9622:	b90b      	cbnz	r3, b9628 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9624:	2000      	movs	r0, #0
}
   b9626:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9628:	491a      	ldr	r1, [pc, #104]	; (b9694 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b962a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b962e:	f007 f9c8 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9632:	e7f7      	b.n	b9624 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9634:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9638:	b12b      	cbz	r3, b9646 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b963a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b963e:	2b00      	cmp	r3, #0
   b9640:	d0f0      	beq.n	b9624 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9642:	4915      	ldr	r1, [pc, #84]	; (b9698 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9644:	e7f1      	b.n	b962a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9646:	4628      	mov	r0, r5
   b9648:	f7fa fd27 	bl	b409a <_Znaj>
   b964c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9650:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9654:	b930      	cbnz	r0, b9664 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9656:	b91b      	cbnz	r3, b9660 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9658:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b965c:	2b00      	cmp	r3, #0
   b965e:	d0e1      	beq.n	b9624 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9660:	490e      	ldr	r1, [pc, #56]	; (b969c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9662:	e7e2      	b.n	b962a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9664:	b17b      	cbz	r3, b9686 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9666:	490e      	ldr	r1, [pc, #56]	; (b96a0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9668:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b966c:	f007 f98f 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9670:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9674:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9678:	220a      	movs	r2, #10
   b967a:	4628      	mov	r0, r5
   b967c:	f007 f9a3 	bl	c09c6 <_ZN5Print11printNumberEmh>
        n += println();
   b9680:	4628      	mov	r0, r5
   b9682:	f007 f988 	bl	c0996 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9686:	2300      	movs	r3, #0
   b9688:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b968c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9690:	2001      	movs	r0, #1
   b9692:	e7c8      	b.n	b9626 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9694:	000c6485 	.word	0x000c6485
   b9698:	000c64d6 	.word	0x000c64d6
   b969c:	000c6519 	.word	0x000c6519
   b96a0:	000c653d 	.word	0x000c653d

000b96a4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b96a4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96a8:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b96ac:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b96ae:	bf3b      	ittet	cc
   b96b0:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b96b4:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b96b6:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b96b8:	1a80      	subcc	r0, r0, r2
   b96ba:	b280      	uxth	r0, r0
}
   b96bc:	4770      	bx	lr

000b96be <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b96be:	b508      	push	{r3, lr}
   b96c0:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b96c2:	f7ff ffef 	bl	b96a4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b96c6:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b96ca:	1a18      	subs	r0, r3, r0
}
   b96cc:	b280      	uxth	r0, r0
   b96ce:	bd08      	pop	{r3, pc}

000b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b96d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b96d4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96d8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b96dc:	1aed      	subs	r5, r5, r3
   b96de:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b96e0:	4295      	cmp	r5, r2
   b96e2:	bf28      	it	cs
   b96e4:	4615      	movcs	r5, r2
{
   b96e6:	4616      	mov	r6, r2
   b96e8:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96ea:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96ee:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96f0:	462a      	mov	r2, r5
   b96f2:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96f4:	b2bf      	uxth	r7, r7
{
   b96f6:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96f8:	f00a f9c2 	bl	c3a80 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b96fc:	b19f      	cbz	r7, b9726 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b96fe:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9702:	463a      	mov	r2, r7
   b9704:	eb08 0105 	add.w	r1, r8, r5
   b9708:	f00a f9ba 	bl	c3a80 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b970c:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9710:	4620      	mov	r0, r4
   b9712:	f7ff ffc7 	bl	b96a4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9716:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b971a:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b971c:	bf38      	it	cc
   b971e:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9726:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b972a:	4416      	add	r6, r2
   b972c:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9730:	e7ee      	b.n	b9710 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9734 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9734:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9736:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b973a:	4604      	mov	r4, r0
   b973c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b973e:	b113      	cbz	r3, b9746 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9740:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9744:	b953      	cbnz	r3, b975c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9746:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b974a:	b128      	cbz	r0, b9758 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b974c:	4924      	ldr	r1, [pc, #144]	; (b97e0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b974e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9752:	f007 f936 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9756:	2000      	movs	r0, #0
}
   b9758:	b003      	add	sp, #12
   b975a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b975c:	f7ff ffaf 	bl	b96be <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9760:	886b      	ldrh	r3, [r5, #2]
   b9762:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9764:	b29b      	uxth	r3, r3
   b9766:	4283      	cmp	r3, r0
   b9768:	d908      	bls.n	b977c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b976a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b976e:	b91b      	cbnz	r3, b9778 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9770:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9774:	2800      	cmp	r0, #0
   b9776:	d0ef      	beq.n	b9758 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9778:	491a      	ldr	r1, [pc, #104]	; (b97e4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b977a:	e7e8      	b.n	b974e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b977c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9780:	2202      	movs	r2, #2
   b9782:	4669      	mov	r1, sp
   b9784:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9786:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b978a:	f7ff ffa1 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b978e:	2201      	movs	r2, #1
   b9790:	4629      	mov	r1, r5
   b9792:	4620      	mov	r0, r4
   b9794:	f7ff ff9c 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9798:	2201      	movs	r2, #1
   b979a:	18a9      	adds	r1, r5, r2
   b979c:	4620      	mov	r0, r4
   b979e:	f7ff ff97 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b97a2:	886b      	ldrh	r3, [r5, #2]
   b97a4:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b97a8:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b97aa:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b97ac:	a901      	add	r1, sp, #4
   b97ae:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b97b0:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b97b4:	f7ff ff8c 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b97b8:	886a      	ldrh	r2, [r5, #2]
   b97ba:	68a9      	ldr	r1, [r5, #8]
   b97bc:	4620      	mov	r0, r4
   b97be:	f7ff ff87 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b97c2:	2201      	movs	r2, #1
   b97c4:	f105 010c 	add.w	r1, r5, #12
   b97c8:	4620      	mov	r0, r4
   b97ca:	f7ff ff81 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b97ce:	4620      	mov	r0, r4
   b97d0:	2201      	movs	r2, #1
   b97d2:	f105 010d 	add.w	r1, r5, #13
   b97d6:	f7ff ff7b 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b97da:	2001      	movs	r0, #1
   b97dc:	e7bc      	b.n	b9758 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b97de:	bf00      	nop
   b97e0:	000c6563 	.word	0x000c6563
   b97e4:	000c658b 	.word	0x000c658b

000b97e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b97e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b97ec:	780e      	ldrb	r6, [r1, #0]
   b97ee:	2e0d      	cmp	r6, #13
{
   b97f0:	4604      	mov	r4, r0
   b97f2:	460d      	mov	r5, r1
  switch (msg->cls)
   b97f4:	f001 8228 	beq.w	bac48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b97f8:	d809      	bhi.n	b980e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b97fa:	2e02      	cmp	r6, #2
   b97fc:	f000 879a 	beq.w	ba734 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9800:	2e06      	cmp	r6, #6
   b9802:	f001 81cc 	beq.w	bab9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9806:	2e01      	cmp	r6, #1
   b9808:	d04f      	beq.n	b98aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b980a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b980e:	2e13      	cmp	r6, #19
   b9810:	f001 83eb 	beq.w	bafea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9814:	2e28      	cmp	r6, #40	; 0x28
   b9816:	f001 84ca 	beq.w	bb1ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b981a:	2e10      	cmp	r6, #16
   b981c:	d1f5      	bne.n	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b981e:	680b      	ldr	r3, [r1, #0]
   b9820:	4a8e      	ldr	r2, [pc, #568]	; (b9a5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9826:	4293      	cmp	r3, r2
   b9828:	f041 826a 	bne.w	bad00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b982c:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b982e:	2e00      	cmp	r6, #0
   b9830:	d0eb      	beq.n	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9832:	68a8      	ldr	r0, [r5, #8]
   b9834:	2100      	movs	r1, #0
   b9836:	f7fe fa21 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b983a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b983c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b983e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9840:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9842:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9844:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9846:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9848:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b984a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b984c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b984e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9850:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9852:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9854:	68a8      	ldr	r0, [r5, #8]
   b9856:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9858:	2108      	movs	r1, #8
   b985a:	f7fe fa0f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b985e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9860:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9862:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9864:	210c      	movs	r1, #12
   b9866:	f7fe fa16 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b986a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b986c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b986e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9870:	210e      	movs	r1, #14
   b9872:	f7fe fa10 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9876:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9878:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b987a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b987e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9880:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9882:	6a1a      	ldr	r2, [r3, #32]
   b9884:	b17a      	cbz	r2, b98a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9886:	7819      	ldrb	r1, [r3, #0]
   b9888:	0708      	lsls	r0, r1, #28
   b988a:	d40c      	bmi.n	b98a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b988c:	1d19      	adds	r1, r3, #4
   b988e:	3314      	adds	r3, #20
   b9890:	f851 0b04 	ldr.w	r0, [r1], #4
   b9894:	f842 0b04 	str.w	r0, [r2], #4
   b9898:	4299      	cmp	r1, r3
   b989a:	d1f9      	bne.n	b9890 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b989c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b989e:	7813      	ldrb	r3, [r2, #0]
   b98a0:	f043 0308 	orr.w	r3, r3, #8
   b98a4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b98a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b98a8:	e03d      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b98aa:	680b      	ldr	r3, [r1, #0]
   b98ac:	4a6c      	ldr	r2, [pc, #432]	; (b9a60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b98ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b98b2:	4293      	cmp	r3, r2
   b98b4:	d141      	bne.n	b993a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b98b6:	68c6      	ldr	r6, [r0, #12]
   b98b8:	2e00      	cmp	r6, #0
   b98ba:	d0a6      	beq.n	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b98bc:	68a8      	ldr	r0, [r5, #8]
   b98be:	2100      	movs	r1, #0
   b98c0:	f7fe f9dc 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98c4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98c8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ca:	2104      	movs	r1, #4
   b98cc:	f7fe f9d6 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98d0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98d4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98d6:	2108      	movs	r1, #8
   b98d8:	f7fe f9d0 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98dc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98de:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98e0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98e2:	210c      	movs	r1, #12
   b98e4:	f7fe f9ca 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98e8:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b98ea:	68a8      	ldr	r0, [r5, #8]
   b98ec:	68e6      	ldr	r6, [r4, #12]
   b98ee:	2110      	movs	r1, #16
   b98f0:	f7fe f9c4 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98f4:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b98f6:	68e3      	ldr	r3, [r4, #12]
   b98f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b98fc:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b98fe:	68e3      	ldr	r3, [r4, #12]
   b9900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9902:	b17a      	cbz	r2, b9924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9904:	7819      	ldrb	r1, [r3, #0]
   b9906:	0709      	lsls	r1, r1, #28
   b9908:	d40c      	bmi.n	b9924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b990a:	1d19      	adds	r1, r3, #4
   b990c:	3318      	adds	r3, #24
   b990e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9912:	f842 0b04 	str.w	r0, [r2], #4
   b9916:	4299      	cmp	r1, r3
   b9918:	d1f9      	bne.n	b990e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b991a:	68e2      	ldr	r2, [r4, #12]
   b991c:	7813      	ldrb	r3, [r2, #0]
   b991e:	f043 0308 	orr.w	r3, r3, #8
   b9922:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9924:	68e3      	ldr	r3, [r4, #12]
   b9926:	781b      	ldrb	r3, [r3, #0]
   b9928:	075f      	lsls	r7, r3, #29
   b992a:	f57f af6e 	bpl.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b992e:	4629      	mov	r1, r5
   b9930:	4620      	mov	r0, r4
}
   b9932:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9936:	f7ff befd 	b.w	b9734 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b993a:	4a4a      	ldr	r2, [pc, #296]	; (b9a64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b993c:	4293      	cmp	r3, r2
   b993e:	d13d      	bne.n	b99bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9940:	6906      	ldr	r6, [r0, #16]
   b9942:	2e00      	cmp	r6, #0
   b9944:	f43f af61 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9948:	68a8      	ldr	r0, [r5, #8]
   b994a:	2100      	movs	r1, #0
   b994c:	f7fe f996 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9950:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9952:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9954:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9956:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9958:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b995a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b995c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b995e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9960:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9962:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9964:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9966:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9968:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b996a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b996c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b996e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9970:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9972:	68a8      	ldr	r0, [r5, #8]
   b9974:	6926      	ldr	r6, [r4, #16]
   b9976:	2108      	movs	r1, #8
   b9978:	f7fe f980 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b997c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b997e:	68a8      	ldr	r0, [r5, #8]
   b9980:	6926      	ldr	r6, [r4, #16]
   b9982:	210c      	movs	r1, #12
   b9984:	f7fe f97a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9988:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b998a:	6923      	ldr	r3, [r4, #16]
   b998c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9990:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9992:	6923      	ldr	r3, [r4, #16]
   b9994:	6a1a      	ldr	r2, [r3, #32]
   b9996:	b17a      	cbz	r2, b99b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9998:	7819      	ldrb	r1, [r3, #0]
   b999a:	070e      	lsls	r6, r1, #28
   b999c:	d40c      	bmi.n	b99b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b999e:	1d19      	adds	r1, r3, #4
   b99a0:	3314      	adds	r3, #20
   b99a2:	f851 0b04 	ldr.w	r0, [r1], #4
   b99a6:	f842 0b04 	str.w	r0, [r2], #4
   b99aa:	4299      	cmp	r1, r3
   b99ac:	d1f9      	bne.n	b99a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b99ae:	6922      	ldr	r2, [r4, #16]
   b99b0:	7813      	ldrb	r3, [r2, #0]
   b99b2:	f043 0308 	orr.w	r3, r3, #8
   b99b6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b99b8:	6923      	ldr	r3, [r4, #16]
   b99ba:	e7b4      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b99bc:	4a2a      	ldr	r2, [pc, #168]	; (b9a68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b99be:	4293      	cmp	r3, r2
   b99c0:	d154      	bne.n	b9a6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b99c2:	6946      	ldr	r6, [r0, #20]
   b99c4:	2e00      	cmp	r6, #0
   b99c6:	f43f af20 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b99ca:	68a8      	ldr	r0, [r5, #8]
   b99cc:	2100      	movs	r1, #0
   b99ce:	f7fe f955 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99d2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b99d4:	68a8      	ldr	r0, [r5, #8]
   b99d6:	6966      	ldr	r6, [r4, #20]
   b99d8:	2104      	movs	r1, #4
   b99da:	f7fe f95c 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99de:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b99e0:	68a8      	ldr	r0, [r5, #8]
   b99e2:	6966      	ldr	r6, [r4, #20]
   b99e4:	2106      	movs	r1, #6
   b99e6:	f7fe f956 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ea:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b99ec:	68a8      	ldr	r0, [r5, #8]
   b99ee:	6966      	ldr	r6, [r4, #20]
   b99f0:	2108      	movs	r1, #8
   b99f2:	f7fe f950 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99f6:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b99f8:	68a8      	ldr	r0, [r5, #8]
   b99fa:	6966      	ldr	r6, [r4, #20]
   b99fc:	210a      	movs	r1, #10
   b99fe:	f7fe f94a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a02:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9a04:	68a8      	ldr	r0, [r5, #8]
   b9a06:	6966      	ldr	r6, [r4, #20]
   b9a08:	210c      	movs	r1, #12
   b9a0a:	f7fe f944 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a0e:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b9a10:	68a8      	ldr	r0, [r5, #8]
   b9a12:	6966      	ldr	r6, [r4, #20]
   b9a14:	210e      	movs	r1, #14
   b9a16:	f7fe f93e 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a1a:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9a1c:	68a8      	ldr	r0, [r5, #8]
   b9a1e:	6966      	ldr	r6, [r4, #20]
   b9a20:	2110      	movs	r1, #16
   b9a22:	f7fe f938 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a26:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a28:	6963      	ldr	r3, [r4, #20]
   b9a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a2e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a30:	6963      	ldr	r3, [r4, #20]
   b9a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a34:	b17a      	cbz	r2, b9a56 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a36:	7819      	ldrb	r1, [r3, #0]
   b9a38:	0708      	lsls	r0, r1, #28
   b9a3a:	d40c      	bmi.n	b9a56 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9a3c:	1d19      	adds	r1, r3, #4
   b9a3e:	3318      	adds	r3, #24
   b9a40:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a44:	f842 0b04 	str.w	r0, [r2], #4
   b9a48:	4299      	cmp	r1, r3
   b9a4a:	d1f9      	bne.n	b9a40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a4c:	6962      	ldr	r2, [r4, #20]
   b9a4e:	7813      	ldrb	r3, [r2, #0]
   b9a50:	f043 0308 	orr.w	r3, r3, #8
   b9a54:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9a56:	6963      	ldr	r3, [r4, #20]
   b9a58:	e765      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9a5a:	bf00      	nop
   b9a5c:	00101400 	.word	0x00101400
   b9a60:	00140100 	.word	0x00140100
   b9a64:	00100300 	.word	0x00100300
   b9a68:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9a6c:	4a8c      	ldr	r2, [pc, #560]	; (b9ca0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9a6e:	4293      	cmp	r3, r2
   b9a70:	d149      	bne.n	b9b06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9a72:	69c6      	ldr	r6, [r0, #28]
   b9a74:	2e00      	cmp	r6, #0
   b9a76:	f43f aec8 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9a7a:	68a8      	ldr	r0, [r5, #8]
   b9a7c:	2100      	movs	r1, #0
   b9a7e:	f7fe f8fd 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a82:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9a84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a86:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9a88:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a8a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a8c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a8e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a90:	2108      	movs	r1, #8
   b9a92:	f7fe f8f3 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a96:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a98:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9a9a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a9c:	210c      	movs	r1, #12
   b9a9e:	f7fe f8ed 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9aa2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9aa4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9aa6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9aa8:	2110      	movs	r1, #16
   b9aaa:	f7fe f8e7 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9aae:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9ab0:	68a8      	ldr	r0, [r5, #8]
   b9ab2:	69e6      	ldr	r6, [r4, #28]
   b9ab4:	2114      	movs	r1, #20
   b9ab6:	f7fe f8e1 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aba:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9abc:	68a8      	ldr	r0, [r5, #8]
   b9abe:	69e6      	ldr	r6, [r4, #28]
   b9ac0:	2118      	movs	r1, #24
   b9ac2:	f7fe f8db 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ac6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9ac8:	68a8      	ldr	r0, [r5, #8]
   b9aca:	69e6      	ldr	r6, [r4, #28]
   b9acc:	211c      	movs	r1, #28
   b9ace:	f7fe f8d5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ad2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9ad4:	69e3      	ldr	r3, [r4, #28]
   b9ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9ada:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9adc:	69e3      	ldr	r3, [r4, #28]
   b9ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9ae0:	b17a      	cbz	r2, b9b02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ae2:	7819      	ldrb	r1, [r3, #0]
   b9ae4:	0709      	lsls	r1, r1, #28
   b9ae6:	d40c      	bmi.n	b9b02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9ae8:	1d19      	adds	r1, r3, #4
   b9aea:	3324      	adds	r3, #36	; 0x24
   b9aec:	f851 0b04 	ldr.w	r0, [r1], #4
   b9af0:	f842 0b04 	str.w	r0, [r2], #4
   b9af4:	4299      	cmp	r1, r3
   b9af6:	d1f9      	bne.n	b9aec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9af8:	69e2      	ldr	r2, [r4, #28]
   b9afa:	7813      	ldrb	r3, [r2, #0]
   b9afc:	f043 0308 	orr.w	r3, r3, #8
   b9b00:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9b02:	69e3      	ldr	r3, [r4, #28]
   b9b04:	e70f      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9b06:	4a67      	ldr	r2, [pc, #412]	; (b9ca4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9b08:	4293      	cmp	r3, r2
   b9b0a:	f040 80cd 	bne.w	b9ca8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9b0e:	6a06      	ldr	r6, [r0, #32]
   b9b10:	2e00      	cmp	r6, #0
   b9b12:	f43f ae7a 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9b16:	68a8      	ldr	r0, [r5, #8]
   b9b18:	2100      	movs	r1, #0
   b9b1a:	f7fe f8af 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b1e:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9b20:	68a8      	ldr	r0, [r5, #8]
   b9b22:	6a26      	ldr	r6, [r4, #32]
   b9b24:	2104      	movs	r1, #4
   b9b26:	f7fe f8b6 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9b2a:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9b2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b2e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b30:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b32:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9b34:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b36:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b38:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b3a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9b3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b3e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b40:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b42:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9b44:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b46:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b48:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b4a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9b4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b4e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b50:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b52:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9b54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b56:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b58:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b5a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9b5c:	210c      	movs	r1, #12
   b9b5e:	68a8      	ldr	r0, [r5, #8]
   b9b60:	6a26      	ldr	r6, [r4, #32]
   b9b62:	f7fe f88b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b66:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b68:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b6a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b6c:	2110      	movs	r1, #16
   b9b6e:	f7fe f885 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b72:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9b74:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b76:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b78:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b7a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9b7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b7e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b80:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b82:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9b84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b86:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b88:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b8a:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9b8c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b8e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b90:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b92:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b94:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b96:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b98:	2118      	movs	r1, #24
   b9b9a:	f7fe f86f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b9e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ba0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9ba2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ba4:	211c      	movs	r1, #28
   b9ba6:	f7fe f869 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9baa:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9bae:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb0:	2120      	movs	r1, #32
   b9bb2:	f7fe f863 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9bb6:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9bba:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bbc:	2124      	movs	r1, #36	; 0x24
   b9bbe:	f7fe f85d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9bc2:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b9bc4:	68a8      	ldr	r0, [r5, #8]
   b9bc6:	6a26      	ldr	r6, [r4, #32]
   b9bc8:	2128      	movs	r1, #40	; 0x28
   b9bca:	f7fe f857 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bce:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b9bd0:	6a26      	ldr	r6, [r4, #32]
   b9bd2:	68a8      	ldr	r0, [r5, #8]
   b9bd4:	212c      	movs	r1, #44	; 0x2c
   b9bd6:	f7fe f851 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bda:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bdc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bde:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be0:	2130      	movs	r1, #48	; 0x30
   b9be2:	f7fe f84b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9be6:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bea:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bec:	2134      	movs	r1, #52	; 0x34
   b9bee:	f7fe f845 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bf2:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bf4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9bf6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bf8:	2138      	movs	r1, #56	; 0x38
   b9bfa:	f7fe f83f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9bfe:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c00:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9c02:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c04:	213c      	movs	r1, #60	; 0x3c
   b9c06:	f7fe f839 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9c0a:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c0c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9c0e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c10:	2140      	movs	r1, #64	; 0x40
   b9c12:	f7fe f833 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9c16:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9c18:	68a8      	ldr	r0, [r5, #8]
   b9c1a:	6a26      	ldr	r6, [r4, #32]
   b9c1c:	2144      	movs	r1, #68	; 0x44
   b9c1e:	f7fe f82d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c22:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9c24:	68a8      	ldr	r0, [r5, #8]
   b9c26:	6a26      	ldr	r6, [r4, #32]
   b9c28:	2148      	movs	r1, #72	; 0x48
   b9c2a:	f7fe f827 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c2e:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b9c30:	68a8      	ldr	r0, [r5, #8]
   b9c32:	6a26      	ldr	r6, [r4, #32]
   b9c34:	214c      	movs	r1, #76	; 0x4c
   b9c36:	f7fe f82e 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c3a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9c3e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c40:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9c42:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c4a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c4c:	68a8      	ldr	r0, [r5, #8]
   b9c4e:	2154      	movs	r1, #84	; 0x54
   b9c50:	f7fe f814 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c54:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c56:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c58:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c5a:	2158      	movs	r1, #88	; 0x58
   b9c5c:	f7fe f81b 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c60:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9c64:	68a8      	ldr	r0, [r5, #8]
   b9c66:	6a26      	ldr	r6, [r4, #32]
   b9c68:	215a      	movs	r1, #90	; 0x5a
   b9c6a:	f7fe f814 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c6e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9c72:	6a22      	ldr	r2, [r4, #32]
   b9c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c78:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9c7a:	6a22      	ldr	r2, [r4, #32]
   b9c7c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c7e:	6a21      	ldr	r1, [r4, #32]
   b9c80:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9c82:	b158      	cbz	r0, b9c9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9c84:	780b      	ldrb	r3, [r1, #0]
   b9c86:	071b      	lsls	r3, r3, #28
   b9c88:	d408      	bmi.n	b9c9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b9c8a:	225c      	movs	r2, #92	; 0x5c
   b9c8c:	3104      	adds	r1, #4
   b9c8e:	f009 fef7 	bl	c3a80 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9c92:	6a22      	ldr	r2, [r4, #32]
   b9c94:	7813      	ldrb	r3, [r2, #0]
   b9c96:	f043 0308 	orr.w	r3, r3, #8
   b9c9a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9c9c:	6a23      	ldr	r3, [r4, #32]
   b9c9e:	e642      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9ca0:	00200500 	.word	0x00200500
   b9ca4:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b9ca8:	4a8e      	ldr	r2, [pc, #568]	; (b9ee4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b9caa:	4293      	cmp	r3, r2
   b9cac:	d137      	bne.n	b9d1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9cae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9cb0:	2b00      	cmp	r3, #0
   b9cb2:	f43f adaa 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9cb6:	688a      	ldr	r2, [r1, #8]
   b9cb8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b9cba:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9cbc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9cbe:	68a8      	ldr	r0, [r5, #8]
   b9cc0:	2104      	movs	r1, #4
   b9cc2:	f7fd ffdb 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cc6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b9cc8:	68a8      	ldr	r0, [r5, #8]
   b9cca:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9ccc:	2108      	movs	r1, #8
   b9cce:	f7fd ffd5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cd2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9cd4:	68a8      	ldr	r0, [r5, #8]
   b9cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cd8:	210c      	movs	r1, #12
   b9cda:	f7fd ffcf 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cde:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9ce0:	68a8      	ldr	r0, [r5, #8]
   b9ce2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9ce4:	2110      	movs	r1, #16
   b9ce6:	f7fd ffc9 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cea:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cf2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9cf8:	b17a      	cbz	r2, b9d1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9cfa:	7819      	ldrb	r1, [r3, #0]
   b9cfc:	070f      	lsls	r7, r1, #28
   b9cfe:	d40c      	bmi.n	b9d1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9d00:	1d19      	adds	r1, r3, #4
   b9d02:	3318      	adds	r3, #24
   b9d04:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d08:	f842 0b04 	str.w	r0, [r2], #4
   b9d0c:	4299      	cmp	r1, r3
   b9d0e:	d1f9      	bne.n	b9d04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d10:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9d12:	7813      	ldrb	r3, [r2, #0]
   b9d14:	f043 0308 	orr.w	r3, r3, #8
   b9d18:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d1c:	e603      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9d1e:	4a72      	ldr	r2, [pc, #456]	; (b9ee8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9d20:	4293      	cmp	r3, r2
   b9d22:	d139      	bne.n	b9d98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9d24:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9d26:	2e00      	cmp	r6, #0
   b9d28:	f43f ad6f 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9d2c:	68a8      	ldr	r0, [r5, #8]
   b9d2e:	2100      	movs	r1, #0
   b9d30:	f7fd ffa4 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d34:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d36:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d3a:	2104      	movs	r1, #4
   b9d3c:	f7fd ff9e 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d40:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d42:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d46:	2108      	movs	r1, #8
   b9d48:	f7fd ff98 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d4c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d4e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d52:	210c      	movs	r1, #12
   b9d54:	f7fd ff92 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d58:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9d5a:	68a8      	ldr	r0, [r5, #8]
   b9d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9d5e:	2110      	movs	r1, #16
   b9d60:	f7fd ff8c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d64:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9d6c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d72:	b17a      	cbz	r2, b9d94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d74:	7819      	ldrb	r1, [r3, #0]
   b9d76:	070e      	lsls	r6, r1, #28
   b9d78:	d40c      	bmi.n	b9d94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9d7a:	1d19      	adds	r1, r3, #4
   b9d7c:	3318      	adds	r3, #24
   b9d7e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d82:	f842 0b04 	str.w	r0, [r2], #4
   b9d86:	4299      	cmp	r1, r3
   b9d88:	d1f9      	bne.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9d8c:	7813      	ldrb	r3, [r2, #0]
   b9d8e:	f043 0308 	orr.w	r3, r3, #8
   b9d92:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d96:	e5c6      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9d98:	4a54      	ldr	r2, [pc, #336]	; (b9eec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9d9a:	4293      	cmp	r3, r2
   b9d9c:	d151      	bne.n	b9e42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9d9e:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9da0:	2e00      	cmp	r6, #0
   b9da2:	f43f ad32 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9da6:	68a8      	ldr	r0, [r5, #8]
   b9da8:	2100      	movs	r1, #0
   b9daa:	f7fd ff67 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dae:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9db0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9db2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9db4:	2104      	movs	r1, #4
   b9db6:	f7fd ff61 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9dba:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dbc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9dbe:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dc0:	2108      	movs	r1, #8
   b9dc2:	f7fd ff5b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9dc6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dc8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9dca:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dcc:	210c      	movs	r1, #12
   b9dce:	f7fd ff55 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9dd2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9dd4:	68a8      	ldr	r0, [r5, #8]
   b9dd6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dd8:	2110      	movs	r1, #16
   b9dda:	f7fd ff4f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dde:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9de0:	68a8      	ldr	r0, [r5, #8]
   b9de2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9de4:	2114      	movs	r1, #20
   b9de6:	f7fd ff49 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dea:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9dee:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9df0:	2118      	movs	r1, #24
   b9df2:	f7fd ff43 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9df6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9df8:	68a8      	ldr	r0, [r5, #8]
   b9dfa:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dfc:	211c      	movs	r1, #28
   b9dfe:	f7fd ff3d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e02:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9e04:	68a8      	ldr	r0, [r5, #8]
   b9e06:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9e08:	2120      	movs	r1, #32
   b9e0a:	f7fd ff37 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e0e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9e16:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9e1c:	b17a      	cbz	r2, b9e3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e1e:	7819      	ldrb	r1, [r3, #0]
   b9e20:	0708      	lsls	r0, r1, #28
   b9e22:	d40c      	bmi.n	b9e3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9e24:	1d19      	adds	r1, r3, #4
   b9e26:	3328      	adds	r3, #40	; 0x28
   b9e28:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e2c:	f842 0b04 	str.w	r0, [r2], #4
   b9e30:	4299      	cmp	r1, r3
   b9e32:	d1f9      	bne.n	b9e28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e34:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9e36:	7813      	ldrb	r3, [r2, #0]
   b9e38:	f043 0308 	orr.w	r3, r3, #8
   b9e3c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e40:	e571      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9e42:	4a2b      	ldr	r2, [pc, #172]	; (b9ef0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9e44:	4293      	cmp	r3, r2
   b9e46:	d155      	bne.n	b9ef4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9e48:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9e4a:	2b00      	cmp	r3, #0
   b9e4c:	f43f acdd 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9e50:	688a      	ldr	r2, [r1, #8]
   b9e52:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9e54:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9e56:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9e58:	68a8      	ldr	r0, [r5, #8]
   b9e5a:	2104      	movs	r1, #4
   b9e5c:	f7fd ff0e 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e60:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e64:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e66:	2108      	movs	r1, #8
   b9e68:	f7fd ff08 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e6c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e70:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e72:	210c      	movs	r1, #12
   b9e74:	f7fd ff02 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e78:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e7a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e7c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e7e:	2110      	movs	r1, #16
   b9e80:	f7fd fefc 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e84:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9e86:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e8a:	7d12      	ldrb	r2, [r2, #20]
   b9e8c:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9e8e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e92:	7d52      	ldrb	r2, [r2, #21]
   b9e94:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9e96:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e9a:	7d92      	ldrb	r2, [r2, #22]
   b9e9c:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9e9e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9ea2:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9ea4:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9ea6:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9ea8:	68a8      	ldr	r0, [r5, #8]
   b9eaa:	2118      	movs	r1, #24
   b9eac:	f7fd fee6 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eb0:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9eb8:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9ebe:	b17a      	cbz	r2, b9ee0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ec0:	7819      	ldrb	r1, [r3, #0]
   b9ec2:	0709      	lsls	r1, r1, #28
   b9ec4:	d40c      	bmi.n	b9ee0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9ec6:	1d19      	adds	r1, r3, #4
   b9ec8:	3320      	adds	r3, #32
   b9eca:	f851 0b04 	ldr.w	r0, [r1], #4
   b9ece:	f842 0b04 	str.w	r0, [r2], #4
   b9ed2:	4299      	cmp	r1, r3
   b9ed4:	d1f9      	bne.n	b9eca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ed6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9ed8:	7813      	ldrb	r3, [r2, #0]
   b9eda:	f043 0308 	orr.w	r3, r3, #8
   b9ede:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ee2:	e520      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9ee4:	00140900 	.word	0x00140900
   b9ee8:	00141100 	.word	0x00141100
   b9eec:	00241200 	.word	0x00241200
   b9ef0:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9ef4:	4a30      	ldr	r2, [pc, #192]	; (b9fb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9ef6:	4293      	cmp	r3, r2
   b9ef8:	d160      	bne.n	b9fbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9efa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9efc:	2b00      	cmp	r3, #0
   b9efe:	f43f ac84 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9f02:	688a      	ldr	r2, [r1, #8]
   b9f04:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9f06:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9f08:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9f0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9f0c:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9f0e:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9f10:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9f12:	68a8      	ldr	r0, [r5, #8]
   b9f14:	2104      	movs	r1, #4
   b9f16:	f7fd feb1 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f1a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f1c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f1e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f20:	2108      	movs	r1, #8
   b9f22:	f7fd feab 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f26:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f28:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f2a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f2c:	210c      	movs	r1, #12
   b9f2e:	f7fd fea5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f32:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f34:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f36:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f38:	2110      	movs	r1, #16
   b9f3a:	f7fd fe9f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f3e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f40:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f44:	2114      	movs	r1, #20
   b9f46:	f7fd fe99 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f4a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9f4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f50:	7e12      	ldrb	r2, [r2, #24]
   b9f52:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9f54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f58:	7e52      	ldrb	r2, [r2, #25]
   b9f5a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9f5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f60:	7e92      	ldrb	r2, [r2, #26]
   b9f62:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9f64:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f68:	7ed2      	ldrb	r2, [r2, #27]
   b9f6a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9f6c:	68a8      	ldr	r0, [r5, #8]
   b9f6e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f70:	211c      	movs	r1, #28
   b9f72:	f7fd fe83 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f76:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9f78:	68a8      	ldr	r0, [r5, #8]
   b9f7a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f7c:	2120      	movs	r1, #32
   b9f7e:	f7fd fe7d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f82:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f8a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9f90:	b17a      	cbz	r2, b9fb2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f92:	7819      	ldrb	r1, [r3, #0]
   b9f94:	070f      	lsls	r7, r1, #28
   b9f96:	d40c      	bmi.n	b9fb2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9f98:	1d19      	adds	r1, r3, #4
   b9f9a:	3328      	adds	r3, #40	; 0x28
   b9f9c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9fa0:	f842 0b04 	str.w	r0, [r2], #4
   b9fa4:	4299      	cmp	r1, r3
   b9fa6:	d1f9      	bne.n	b9f9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9fa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9faa:	7813      	ldrb	r3, [r2, #0]
   b9fac:	f043 0308 	orr.w	r3, r3, #8
   b9fb0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9fb4:	e4b7      	b.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9fb6:	bf00      	nop
   b9fb8:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9fbc:	4aa1      	ldr	r2, [pc, #644]	; (ba244 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9fbe:	4293      	cmp	r3, r2
   b9fc0:	f040 80f0 	bne.w	ba1a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9fc4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9fc6:	2e00      	cmp	r6, #0
   b9fc8:	f43f ac1f 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9fcc:	68a8      	ldr	r0, [r5, #8]
   b9fce:	2100      	movs	r1, #0
   b9fd0:	f7fd fe54 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fd4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9fd6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fda:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fdc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9fde:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fe2:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fe4:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b9fe6:	68a8      	ldr	r0, [r5, #8]
   b9fe8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9fea:	2106      	movs	r1, #6
   b9fec:	f7fd fe53 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ff0:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b9ff2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9ff4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9ff6:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9ff8:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9ffa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9ffe:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba000:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba002:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba006:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba008:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba00a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba00c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba00e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba010:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba012:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba016:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba018:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba01a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba01c:	68a8      	ldr	r0, [r5, #8]
   ba01e:	2110      	movs	r1, #16
   ba020:	f7fd fe2c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba024:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba026:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba028:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba02a:	2114      	movs	r1, #20
   ba02c:	f7fd fe26 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba030:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba032:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba036:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba038:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba03a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba03c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba03e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba040:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba042:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba046:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba048:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba04a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba04c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba04e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba050:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba052:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba054:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba056:	211c      	movs	r1, #28
   ba058:	f7fd fe10 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba05c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba05e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba060:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba062:	2120      	movs	r1, #32
   ba064:	f7fd fe0a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba068:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba06a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba06c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba06e:	2124      	movs	r1, #36	; 0x24
   ba070:	f7fd fe04 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba074:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba076:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba078:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba07a:	2128      	movs	r1, #40	; 0x28
   ba07c:	f7fd fdfe 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba080:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba082:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba084:	68a8      	ldr	r0, [r5, #8]
   ba086:	212c      	movs	r1, #44	; 0x2c
   ba088:	f7fd fdf8 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba08c:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba08e:	68a8      	ldr	r0, [r5, #8]
   ba090:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba092:	2130      	movs	r1, #48	; 0x30
   ba094:	f7fd fdf2 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba098:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba09a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba09c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba09e:	2134      	movs	r1, #52	; 0x34
   ba0a0:	f7fd fdec 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba0a4:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba0a8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0aa:	2138      	movs	r1, #56	; 0x38
   ba0ac:	f7fd fde6 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba0b0:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b6:	213c      	movs	r1, #60	; 0x3c
   ba0b8:	f7fd fde0 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0bc:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0be:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c2:	2140      	movs	r1, #64	; 0x40
   ba0c4:	f7fd fdda 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0c8:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba0ca:	68a8      	ldr	r0, [r5, #8]
   ba0cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0ce:	2144      	movs	r1, #68	; 0x44
   ba0d0:	f7fd fdd4 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0d4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0da:	2148      	movs	r1, #72	; 0x48
   ba0dc:	f7fd fdce 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0e0:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0e4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e6:	214c      	movs	r1, #76	; 0x4c
   ba0e8:	f7fd fdc8 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0ec:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ee:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0f0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0f2:	2150      	movs	r1, #80	; 0x50
   ba0f4:	f7fd fdc2 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0f8:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0fa:	2154      	movs	r1, #84	; 0x54
   ba0fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba0fe:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba100:	f7fd fdbc 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba104:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba106:	68a8      	ldr	r0, [r5, #8]
   ba108:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba10a:	2158      	movs	r1, #88	; 0x58
   ba10c:	f7fd fdc3 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba110:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba114:	68a8      	ldr	r0, [r5, #8]
   ba116:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba118:	215a      	movs	r1, #90	; 0x5a
   ba11a:	f7fd fdbc 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba11e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba122:	68a8      	ldr	r0, [r5, #8]
   ba124:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba126:	215c      	movs	r1, #92	; 0x5c
   ba128:	f7fd fdb5 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba12c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba130:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba132:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba134:	215e      	movs	r1, #94	; 0x5e
   ba136:	f7fd fdae 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba13a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba13e:	68a8      	ldr	r0, [r5, #8]
   ba140:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba142:	2160      	movs	r1, #96	; 0x60
   ba144:	f7fd fda7 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba148:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba14c:	68a8      	ldr	r0, [r5, #8]
   ba14e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba150:	2162      	movs	r1, #98	; 0x62
   ba152:	f7fd fda0 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba156:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba15a:	68a8      	ldr	r0, [r5, #8]
   ba15c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba15e:	2164      	movs	r1, #100	; 0x64
   ba160:	f7fd fd8c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba164:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba166:	68a8      	ldr	r0, [r5, #8]
   ba168:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba16a:	2168      	movs	r1, #104	; 0x68
   ba16c:	f7fd fd86 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba170:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba172:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba178:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba17a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba17c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba17e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba180:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba184:	b158      	cbz	r0, ba19e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba186:	780b      	ldrb	r3, [r1, #0]
   ba188:	071e      	lsls	r6, r3, #28
   ba18a:	d408      	bmi.n	ba19e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba18c:	2274      	movs	r2, #116	; 0x74
   ba18e:	3104      	adds	r1, #4
   ba190:	f009 fc76 	bl	c3a80 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba194:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba196:	7813      	ldrb	r3, [r2, #0]
   ba198:	f043 0308 	orr.w	r3, r3, #8
   ba19c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba19e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba1a0:	f7ff bbc1 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba1a4:	4a28      	ldr	r2, [pc, #160]	; (ba248 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba1a6:	4293      	cmp	r3, r2
   ba1a8:	d150      	bne.n	ba24c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba1aa:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba1ac:	2e00      	cmp	r6, #0
   ba1ae:	f43f ab2c 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba1b2:	68a8      	ldr	r0, [r5, #8]
   ba1b4:	2100      	movs	r1, #0
   ba1b6:	f7fd fd61 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1ba:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba1bc:	68a8      	ldr	r0, [r5, #8]
   ba1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1c0:	2104      	movs	r1, #4
   ba1c2:	f7fd fd5b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1c6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1c8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1cc:	2108      	movs	r1, #8
   ba1ce:	f7fd fd55 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1d2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba1d4:	68a8      	ldr	r0, [r5, #8]
   ba1d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1d8:	210c      	movs	r1, #12
   ba1da:	f7fd fd5c 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba1de:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba1e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1e4:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1e6:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba1e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1ec:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1ee:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba1f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1f4:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1f6:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba1f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1fc:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1fe:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba200:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba204:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba206:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba20a:	68aa      	ldr	r2, [r5, #8]
   ba20c:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba20e:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba216:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba21a:	6a1a      	ldr	r2, [r3, #32]
   ba21c:	b17a      	cbz	r2, ba23e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba21e:	7819      	ldrb	r1, [r3, #0]
   ba220:	0708      	lsls	r0, r1, #28
   ba222:	d40c      	bmi.n	ba23e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba224:	1d19      	adds	r1, r3, #4
   ba226:	3318      	adds	r3, #24
   ba228:	f851 0b04 	ldr.w	r0, [r1], #4
   ba22c:	f842 0b04 	str.w	r0, [r2], #4
   ba230:	4299      	cmp	r1, r3
   ba232:	d1f9      	bne.n	ba228 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba234:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba236:	7813      	ldrb	r3, [r2, #0]
   ba238:	f043 0308 	orr.w	r3, r3, #8
   ba23c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba23e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba240:	f7ff bb71 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba244:	00741700 	.word	0x00741700
   ba248:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba24c:	4a84      	ldr	r2, [pc, #528]	; (ba460 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba24e:	4293      	cmp	r3, r2
   ba250:	d13a      	bne.n	ba2c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba252:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba254:	2e00      	cmp	r6, #0
   ba256:	f43f aad8 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba25a:	68a8      	ldr	r0, [r5, #8]
   ba25c:	2100      	movs	r1, #0
   ba25e:	f7fd fd0d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba262:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba264:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba266:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba268:	2104      	movs	r1, #4
   ba26a:	f7fd fd07 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba26e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba270:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba272:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba274:	2108      	movs	r1, #8
   ba276:	f7fd fd01 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba27a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba27c:	68a8      	ldr	r0, [r5, #8]
   ba27e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba280:	210c      	movs	r1, #12
   ba282:	f7fd fcfb 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba286:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba288:	68a8      	ldr	r0, [r5, #8]
   ba28a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba28c:	2110      	movs	r1, #16
   ba28e:	f7fd fcf5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba292:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba294:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba29a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba29c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba2a0:	b17a      	cbz	r2, ba2c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba2a2:	7819      	ldrb	r1, [r3, #0]
   ba2a4:	0709      	lsls	r1, r1, #28
   ba2a6:	d40c      	bmi.n	ba2c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba2a8:	1d19      	adds	r1, r3, #4
   ba2aa:	3318      	adds	r3, #24
   ba2ac:	f851 0b04 	ldr.w	r0, [r1], #4
   ba2b0:	f842 0b04 	str.w	r0, [r2], #4
   ba2b4:	4299      	cmp	r1, r3
   ba2b6:	d1f9      	bne.n	ba2ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba2b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba2ba:	7813      	ldrb	r3, [r2, #0]
   ba2bc:	f043 0308 	orr.w	r3, r3, #8
   ba2c0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba2c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba2c4:	f7ff bb2f 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba2c8:	4a66      	ldr	r2, [pc, #408]	; (ba464 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba2ca:	4293      	cmp	r3, r2
   ba2cc:	d138      	bne.n	ba340 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba2ce:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba2d0:	2e00      	cmp	r6, #0
   ba2d2:	f43f aa9a 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba2d6:	68a8      	ldr	r0, [r5, #8]
   ba2d8:	2100      	movs	r1, #0
   ba2da:	f7fd fccf 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2de:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba2e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2e4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2e6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba2e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2ec:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2ee:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba2f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba2f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba2f4:	7a52      	ldrb	r2, [r2, #9]
   ba2f6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba2f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2fc:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2fe:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba300:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba302:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba304:	7ad2      	ldrb	r2, [r2, #11]
   ba306:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba308:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba30a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba30c:	210c      	movs	r1, #12
   ba30e:	f7fd fcb5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba312:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba314:	68a8      	ldr	r0, [r5, #8]
   ba316:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba318:	2110      	movs	r1, #16
   ba31a:	f7fd fcbc 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba31e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba320:	68a8      	ldr	r0, [r5, #8]
   ba322:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba324:	2112      	movs	r1, #18
   ba326:	f7fd fcb6 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba32a:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba32c:	68ab      	ldr	r3, [r5, #8]
   ba32e:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba330:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba332:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba334:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba33a:	61da      	str	r2, [r3, #28]
   ba33c:	f7ff ba65 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba340:	4a49      	ldr	r2, [pc, #292]	; (ba468 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba342:	4293      	cmp	r3, r2
   ba344:	d162      	bne.n	ba40c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba346:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba348:	2b00      	cmp	r3, #0
   ba34a:	f43f aa5e 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba34e:	688a      	ldr	r2, [r1, #8]
   ba350:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba352:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba354:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba356:	68a8      	ldr	r0, [r5, #8]
   ba358:	2104      	movs	r1, #4
   ba35a:	f7fd fc8f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba35e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba360:	68a8      	ldr	r0, [r5, #8]
   ba362:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba364:	2108      	movs	r1, #8
   ba366:	f7fd fc89 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba36a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba36c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba36e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba370:	210c      	movs	r1, #12
   ba372:	f7fd fc83 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba376:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba378:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba37a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba37c:	2110      	movs	r1, #16
   ba37e:	f7fd fc7d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba382:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba384:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba386:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba388:	2114      	movs	r1, #20
   ba38a:	f7fd fc77 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba38e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba390:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba394:	7e12      	ldrb	r2, [r2, #24]
   ba396:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba398:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba39a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba39c:	7e52      	ldrb	r2, [r2, #25]
   ba39e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba3a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba3a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3a4:	7e92      	ldrb	r2, [r2, #26]
   ba3a6:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba3a8:	211c      	movs	r1, #28
   ba3aa:	68a8      	ldr	r0, [r5, #8]
   ba3ac:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba3ae:	f7fd fc65 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3b2:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba3b4:	68a8      	ldr	r0, [r5, #8]
   ba3b6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba3b8:	2120      	movs	r1, #32
   ba3ba:	f7fd fc5f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3be:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba3c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba3c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3c4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba3c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba3cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba3ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3d0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba3d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3de:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba3e4:	b17a      	cbz	r2, ba406 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3e6:	7819      	ldrb	r1, [r3, #0]
   ba3e8:	070f      	lsls	r7, r1, #28
   ba3ea:	d40c      	bmi.n	ba406 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba3ec:	1d19      	adds	r1, r3, #4
   ba3ee:	332c      	adds	r3, #44	; 0x2c
   ba3f0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3f4:	f842 0b04 	str.w	r0, [r2], #4
   ba3f8:	4299      	cmp	r1, r3
   ba3fa:	d1f9      	bne.n	ba3f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba3fe:	7813      	ldrb	r3, [r2, #0]
   ba400:	f043 0308 	orr.w	r3, r3, #8
   ba404:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba406:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba408:	f7ff ba8d 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba40c:	784a      	ldrb	r2, [r1, #1]
   ba40e:	2a35      	cmp	r2, #53	; 0x35
   ba410:	d17f      	bne.n	ba512 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba412:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba414:	2e00      	cmp	r6, #0
   ba416:	f43f a9f8 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba41a:	68a8      	ldr	r0, [r5, #8]
   ba41c:	2100      	movs	r1, #0
   ba41e:	f7fd fc2d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba422:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba424:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba426:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba428:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba42a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba42c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba42e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba430:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba432:	725a      	strb	r2, [r3, #9]
   ba434:	f04f 0808 	mov.w	r8, #8
   ba438:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba43a:	f04f 0a0c 	mov.w	sl, #12
   ba43e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba440:	7a59      	ldrb	r1, [r3, #9]
   ba442:	b2ba      	uxth	r2, r7
   ba444:	4291      	cmp	r1, r2
   ba446:	d811      	bhi.n	ba46c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba448:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba44a:	2201      	movs	r2, #1
   ba44c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba450:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba452:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba456:	2800      	cmp	r0, #0
   ba458:	d14d      	bne.n	ba4f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba45a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba45c:	f7ff ba63 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba460:	00142200 	.word	0x00142200
   ba464:	00182600 	.word	0x00182600
   ba468:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba46c:	886a      	ldrh	r2, [r5, #2]
   ba46e:	fb0a f607 	mul.w	r6, sl, r7
   ba472:	3a08      	subs	r2, #8
   ba474:	42b2      	cmp	r2, r6
   ba476:	dde7      	ble.n	ba448 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba478:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba47a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba47c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba480:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba482:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba484:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba486:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba488:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba48a:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba48c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba48e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba490:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba492:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba494:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba496:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba498:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba49a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba49c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba49e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba4a0:	4433      	add	r3, r6
   ba4a2:	78d2      	ldrb	r2, [r2, #3]
   ba4a4:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4a6:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4aa:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4ae:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4b2:	68a8      	ldr	r0, [r5, #8]
   ba4b4:	b289      	uxth	r1, r1
   ba4b6:	f7fd fbee 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4ba:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4bc:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4c0:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4c4:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4c8:	68a8      	ldr	r0, [r5, #8]
   ba4ca:	b289      	uxth	r1, r1
   ba4cc:	f7fd fbe3 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4d0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4d2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4d6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4da:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba4de:	68a8      	ldr	r0, [r5, #8]
   ba4e0:	b289      	uxth	r1, r1
   ba4e2:	f7fd fbcb 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4e6:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4e8:	3701      	adds	r7, #1
   ba4ea:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4ec:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4ee:	f108 080c 	add.w	r8, r8, #12
   ba4f2:	d1a4      	bne.n	ba43e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba4f4:	e7a8      	b.n	ba448 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4f6:	780b      	ldrb	r3, [r1, #0]
   ba4f8:	071e      	lsls	r6, r3, #28
   ba4fa:	d4ae      	bmi.n	ba45a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba4fc:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba500:	3104      	adds	r1, #4
   ba502:	f009 fabd 	bl	c3a80 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba506:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba508:	7813      	ldrb	r3, [r2, #0]
   ba50a:	f043 0308 	orr.w	r3, r3, #8
   ba50e:	7013      	strb	r3, [r2, #0]
   ba510:	e7a3      	b.n	ba45a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba512:	2a3c      	cmp	r2, #60	; 0x3c
   ba514:	f040 80bf 	bne.w	ba696 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba518:	884a      	ldrh	r2, [r1, #2]
   ba51a:	2a28      	cmp	r2, #40	; 0x28
   ba51c:	d002      	beq.n	ba524 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba51e:	2a40      	cmp	r2, #64	; 0x40
   ba520:	f040 80b9 	bne.w	ba696 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba524:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba526:	2b00      	cmp	r3, #0
   ba528:	f43f a96f 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba52c:	68aa      	ldr	r2, [r5, #8]
   ba52e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba530:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba532:	68a8      	ldr	r0, [r5, #8]
   ba534:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba536:	2102      	movs	r1, #2
   ba538:	f7fd fbad 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba53c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba53e:	68a8      	ldr	r0, [r5, #8]
   ba540:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba542:	2104      	movs	r1, #4
   ba544:	f7fd fb9a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba548:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba54a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba54c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba54e:	2108      	movs	r1, #8
   ba550:	f7fd fb94 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba554:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba556:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba558:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba55a:	210c      	movs	r1, #12
   ba55c:	f7fd fb8e 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba560:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba562:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba564:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba566:	2110      	movs	r1, #16
   ba568:	f7fd fb88 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba56c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba56e:	886b      	ldrh	r3, [r5, #2]
   ba570:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba572:	2b28      	cmp	r3, #40	; 0x28
   ba574:	d14b      	bne.n	ba60e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba576:	2600      	movs	r6, #0
   ba578:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba57a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba57c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba57e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba580:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba582:	7d12      	ldrb	r2, [r2, #20]
   ba584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba588:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba58a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba58c:	7d52      	ldrb	r2, [r2, #21]
   ba58e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba592:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba594:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba596:	7d92      	ldrb	r2, [r2, #22]
   ba598:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba59c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba59e:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba5a2:	68a8      	ldr	r0, [r5, #8]
   ba5a4:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5a6:	2118      	movs	r1, #24
   ba5a8:	f7fd fb68 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5ac:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba5ae:	68a8      	ldr	r0, [r5, #8]
   ba5b0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5b2:	211c      	movs	r1, #28
   ba5b4:	f7fd fb62 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5b8:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba5ba:	68a8      	ldr	r0, [r5, #8]
   ba5bc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5be:	2120      	movs	r1, #32
   ba5c0:	f7fd fb5c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5c4:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba5c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5c8:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba5ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5cc:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba5ce:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba5d0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba5d2:	68a8      	ldr	r0, [r5, #8]
   ba5d4:	f7fd fb52 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5d8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5da:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5e0:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba5e6:	b17a      	cbz	r2, ba608 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5e8:	7819      	ldrb	r1, [r3, #0]
   ba5ea:	0708      	lsls	r0, r1, #28
   ba5ec:	d40c      	bmi.n	ba608 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba5ee:	1d19      	adds	r1, r3, #4
   ba5f0:	3344      	adds	r3, #68	; 0x44
   ba5f2:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5f6:	f842 0b04 	str.w	r0, [r2], #4
   ba5fa:	4299      	cmp	r1, r3
   ba5fc:	d1f9      	bne.n	ba5f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba600:	7813      	ldrb	r3, [r2, #0]
   ba602:	f043 0308 	orr.w	r3, r3, #8
   ba606:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba608:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba60a:	f7ff b98c 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba60e:	68a8      	ldr	r0, [r5, #8]
   ba610:	2114      	movs	r1, #20
   ba612:	f7fd fb33 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba616:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba618:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba61a:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba61c:	2118      	movs	r1, #24
   ba61e:	f7fd fb2d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba622:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba624:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba626:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba628:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba62c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba630:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba632:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba634:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba63c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba63e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba640:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba644:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba648:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba64a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba64c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba650:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba654:	68a8      	ldr	r0, [r5, #8]
   ba656:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba658:	2124      	movs	r1, #36	; 0x24
   ba65a:	f7fd fb0f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba65e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba660:	68a8      	ldr	r0, [r5, #8]
   ba662:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba664:	2128      	movs	r1, #40	; 0x28
   ba666:	f7fd fb09 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba66a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba66c:	68a8      	ldr	r0, [r5, #8]
   ba66e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba670:	212c      	movs	r1, #44	; 0x2c
   ba672:	f7fd fb03 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba676:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba678:	68a8      	ldr	r0, [r5, #8]
   ba67a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba67c:	2130      	movs	r1, #48	; 0x30
   ba67e:	f7fd fafd 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba682:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba684:	2134      	movs	r1, #52	; 0x34
   ba686:	68a8      	ldr	r0, [r5, #8]
   ba688:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba68a:	f7fd faf7 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba68e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba690:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba692:	213c      	movs	r1, #60	; 0x3c
   ba694:	e79d      	b.n	ba5d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba696:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba69a:	d12a      	bne.n	ba6f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba69c:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba69e:	2e00      	cmp	r6, #0
   ba6a0:	f43f a8b3 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba6a4:	68a8      	ldr	r0, [r5, #8]
   ba6a6:	2100      	movs	r1, #0
   ba6a8:	f7fd fae8 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ac:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba6ae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba6b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba6b2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba6b4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba6ba:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6bc:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6be:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba6c4:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6c8:	6a1a      	ldr	r2, [r3, #32]
   ba6ca:	b17a      	cbz	r2, ba6ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6cc:	7819      	ldrb	r1, [r3, #0]
   ba6ce:	0709      	lsls	r1, r1, #28
   ba6d0:	d40c      	bmi.n	ba6ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba6d2:	1d19      	adds	r1, r3, #4
   ba6d4:	3314      	adds	r3, #20
   ba6d6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba6da:	f842 0b04 	str.w	r0, [r2], #4
   ba6de:	4299      	cmp	r1, r3
   ba6e0:	d1f9      	bne.n	ba6d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba6e4:	7813      	ldrb	r3, [r2, #0]
   ba6e6:	f043 0308 	orr.w	r3, r3, #8
   ba6ea:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba6ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6ee:	f7ff b91a 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba6f2:	4aa1      	ldr	r2, [pc, #644]	; (ba978 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba6f4:	4293      	cmp	r3, r2
   ba6f6:	f47f a888 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba6fa:	69a6      	ldr	r6, [r4, #24]
   ba6fc:	2e00      	cmp	r6, #0
   ba6fe:	f43f a884 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba702:	68a8      	ldr	r0, [r5, #8]
   ba704:	2100      	movs	r1, #0
   ba706:	f7fd fab9 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba70a:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba70c:	69a3      	ldr	r3, [r4, #24]
   ba70e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba712:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba714:	69a3      	ldr	r3, [r4, #24]
   ba716:	691a      	ldr	r2, [r3, #16]
   ba718:	b14a      	cbz	r2, ba72e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba71a:	7819      	ldrb	r1, [r3, #0]
   ba71c:	070f      	lsls	r7, r1, #28
   ba71e:	d406      	bmi.n	ba72e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba720:	685b      	ldr	r3, [r3, #4]
   ba722:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba724:	69a2      	ldr	r2, [r4, #24]
   ba726:	7813      	ldrb	r3, [r2, #0]
   ba728:	f043 0308 	orr.w	r3, r3, #8
   ba72c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba72e:	69a3      	ldr	r3, [r4, #24]
   ba730:	f7ff b8f9 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba734:	784b      	ldrb	r3, [r1, #1]
   ba736:	2b72      	cmp	r3, #114	; 0x72
   ba738:	f040 80a4 	bne.w	ba884 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba73c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba73e:	2b00      	cmp	r3, #0
   ba740:	d069      	beq.n	ba816 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba742:	689b      	ldr	r3, [r3, #8]
   ba744:	2b00      	cmp	r3, #0
   ba746:	d066      	beq.n	ba816 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba748:	688a      	ldr	r2, [r1, #8]
   ba74a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba74c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba74e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba750:	68a8      	ldr	r0, [r5, #8]
   ba752:	689f      	ldr	r7, [r3, #8]
   ba754:	4631      	mov	r1, r6
   ba756:	f7fd fa9e 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba75a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba75c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba75e:	68a8      	ldr	r0, [r5, #8]
   ba760:	689e      	ldr	r6, [r3, #8]
   ba762:	2104      	movs	r1, #4
   ba764:	f7fd fa8a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba768:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba76a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba76c:	68a8      	ldr	r0, [r5, #8]
   ba76e:	689e      	ldr	r6, [r3, #8]
   ba770:	2108      	movs	r1, #8
   ba772:	f7fd fa83 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba776:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba778:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba77a:	68a8      	ldr	r0, [r5, #8]
   ba77c:	689e      	ldr	r6, [r3, #8]
   ba77e:	210c      	movs	r1, #12
   ba780:	f7fd fa7c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba784:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba786:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba788:	68a8      	ldr	r0, [r5, #8]
   ba78a:	689e      	ldr	r6, [r3, #8]
   ba78c:	2110      	movs	r1, #16
   ba78e:	f7fd fa82 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba792:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba794:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba796:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba798:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba79a:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba79c:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba79e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba7a2:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7a4:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba7a6:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba7a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7aa:	689e      	ldr	r6, [r3, #8]
   ba7ac:	7833      	ldrb	r3, [r6, #0]
   ba7ae:	bb23      	cbnz	r3, ba7fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba7b0:	68a8      	ldr	r0, [r5, #8]
   ba7b2:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba7b6:	f7fd fa6e 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7ba:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7be:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7c0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7c2:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7c6:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba7c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7ca:	689b      	ldr	r3, [r3, #8]
   ba7cc:	781a      	ldrb	r2, [r3, #0]
   ba7ce:	2a00      	cmp	r2, #0
   ba7d0:	f040 865d 	bne.w	bb48e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba7d4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba7d6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba7da:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7dc:	b299      	uxth	r1, r3
   ba7de:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7e2:	d914      	bls.n	ba80e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba7e4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba7e8:	d011      	beq.n	ba80e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba7ea:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7ec:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba7ee:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7f0:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba7f2:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7f4:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7f6:	3301      	adds	r3, #1
   ba7f8:	e7f0      	b.n	ba7dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba7fa:	68a8      	ldr	r0, [r5, #8]
   ba7fc:	2114      	movs	r1, #20
   ba7fe:	f7fd fa4a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba802:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba804:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba806:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba808:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba80a:	7d92      	ldrb	r2, [r2, #22]
   ba80c:	e7db      	b.n	ba7c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba80e:	7813      	ldrb	r3, [r2, #0]
   ba810:	f043 0308 	orr.w	r3, r3, #8
   ba814:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba816:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba818:	2b00      	cmp	r3, #0
   ba81a:	f43e aff6 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba81e:	689b      	ldr	r3, [r3, #8]
   ba820:	2b00      	cmp	r3, #0
   ba822:	f43e aff2 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba826:	22b5      	movs	r2, #181	; 0xb5
   ba828:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba82a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba82c:	689b      	ldr	r3, [r3, #8]
   ba82e:	2262      	movs	r2, #98	; 0x62
   ba830:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba832:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba834:	689b      	ldr	r3, [r3, #8]
   ba836:	2202      	movs	r2, #2
   ba838:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba83a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba83c:	689b      	ldr	r3, [r3, #8]
   ba83e:	2272      	movs	r2, #114	; 0x72
   ba840:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba842:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba844:	886a      	ldrh	r2, [r5, #2]
   ba846:	689b      	ldr	r3, [r3, #8]
   ba848:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba84a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba84c:	689a      	ldr	r2, [r3, #8]
   ba84e:	886b      	ldrh	r3, [r5, #2]
   ba850:	0a1b      	lsrs	r3, r3, #8
   ba852:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba856:	886a      	ldrh	r2, [r5, #2]
   ba858:	6898      	ldr	r0, [r3, #8]
   ba85a:	68a9      	ldr	r1, [r5, #8]
   ba85c:	3006      	adds	r0, #6
   ba85e:	f009 f90f 	bl	c3a80 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba862:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba864:	7b2a      	ldrb	r2, [r5, #12]
   ba866:	689b      	ldr	r3, [r3, #8]
   ba868:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba86c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba86e:	7b6a      	ldrb	r2, [r5, #13]
   ba870:	689b      	ldr	r3, [r3, #8]
   ba872:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba878:	7813      	ldrb	r3, [r2, #0]
   ba87a:	f043 0308 	orr.w	r3, r3, #8
   ba87e:	7013      	strb	r3, [r2, #0]
   ba880:	f7fe bfc3 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba884:	2b73      	cmp	r3, #115	; 0x73
   ba886:	d14d      	bne.n	ba924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba888:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba88a:	780b      	ldrb	r3, [r1, #0]
   ba88c:	071e      	lsls	r6, r3, #28
   ba88e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba892:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba896:	d543      	bpl.n	ba920 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba898:	0843      	lsrs	r3, r0, #1
   ba89a:	f47e afb6 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba89e:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba8a0:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba8a4:	688b      	ldr	r3, [r1, #8]
   ba8a6:	437e      	muls	r6, r7
   ba8a8:	22b5      	movs	r2, #181	; 0xb5
   ba8aa:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba8ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ae:	689b      	ldr	r3, [r3, #8]
   ba8b0:	4433      	add	r3, r6
   ba8b2:	2262      	movs	r2, #98	; 0x62
   ba8b4:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba8b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8b8:	689b      	ldr	r3, [r3, #8]
   ba8ba:	4433      	add	r3, r6
   ba8bc:	2202      	movs	r2, #2
   ba8be:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba8c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8c2:	689b      	ldr	r3, [r3, #8]
   ba8c4:	4433      	add	r3, r6
   ba8c6:	2273      	movs	r2, #115	; 0x73
   ba8c8:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba8ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8cc:	886a      	ldrh	r2, [r5, #2]
   ba8ce:	689b      	ldr	r3, [r3, #8]
   ba8d0:	4433      	add	r3, r6
   ba8d2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba8d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8d6:	886a      	ldrh	r2, [r5, #2]
   ba8d8:	689b      	ldr	r3, [r3, #8]
   ba8da:	4433      	add	r3, r6
   ba8dc:	0a12      	lsrs	r2, r2, #8
   ba8de:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba8e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8e2:	886a      	ldrh	r2, [r5, #2]
   ba8e4:	6898      	ldr	r0, [r3, #8]
   ba8e6:	68a9      	ldr	r1, [r5, #8]
   ba8e8:	4430      	add	r0, r6
   ba8ea:	3006      	adds	r0, #6
   ba8ec:	f009 f8c8 	bl	c3a80 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba8f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8f2:	7b2a      	ldrb	r2, [r5, #12]
   ba8f4:	689b      	ldr	r3, [r3, #8]
   ba8f6:	4433      	add	r3, r6
   ba8f8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba8fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8fe:	7b6a      	ldrb	r2, [r5, #13]
   ba900:	689b      	ldr	r3, [r3, #8]
   ba902:	441e      	add	r6, r3
   ba904:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba908:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba90a:	780b      	ldrb	r3, [r1, #0]
   ba90c:	2201      	movs	r2, #1
   ba90e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba912:	40ba      	lsls	r2, r7
   ba914:	4302      	orrs	r2, r0
   ba916:	f362 03c4 	bfi	r3, r2, #3, #2
   ba91a:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba91c:	f7fe bf75 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba920:	4617      	mov	r7, r2
   ba922:	e7bd      	b.n	ba8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba924:	2b34      	cmp	r3, #52	; 0x34
   ba926:	d129      	bne.n	ba97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba928:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba92a:	2b00      	cmp	r3, #0
   ba92c:	f43e af6d 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba930:	689b      	ldr	r3, [r3, #8]
   ba932:	2b00      	cmp	r3, #0
   ba934:	f43e af69 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba938:	688a      	ldr	r2, [r1, #8]
   ba93a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba93c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba93e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba940:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba942:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba944:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba946:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba948:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba94a:	68a8      	ldr	r0, [r5, #8]
   ba94c:	689e      	ldr	r6, [r3, #8]
   ba94e:	2104      	movs	r1, #4
   ba950:	f7fd f994 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba954:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba956:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba958:	68a8      	ldr	r0, [r5, #8]
   ba95a:	689e      	ldr	r6, [r3, #8]
   ba95c:	2108      	movs	r1, #8
   ba95e:	f7fd f99a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba962:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba964:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba966:	68a8      	ldr	r0, [r5, #8]
   ba968:	689e      	ldr	r6, [r3, #8]
   ba96a:	210a      	movs	r1, #10
   ba96c:	f7fd f993 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba970:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba972:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba974:	e780      	b.n	ba878 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba976:	bf00      	nop
   ba978:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba97c:	2b13      	cmp	r3, #19
   ba97e:	d14a      	bne.n	baa16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba980:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba982:	2b00      	cmp	r3, #0
   ba984:	f43e af41 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba988:	688a      	ldr	r2, [r1, #8]
   ba98a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba98c:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba98e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba990:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba992:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba994:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba996:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba998:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba99a:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba99c:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba99e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba9a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9a2:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba9a4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba9a6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba9a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9aa:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba9ac:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba9ae:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba9b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba9b2:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba9b4:	729a      	strb	r2, [r3, #10]
   ba9b6:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9b8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba9ba:	7a3a      	ldrb	r2, [r7, #8]
   ba9bc:	b2f3      	uxtb	r3, r6
   ba9be:	429a      	cmp	r2, r3
   ba9c0:	d809      	bhi.n	ba9d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba9c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9c4:	2201      	movs	r2, #1
   ba9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba9ca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba9cc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba9ce:	b9a8      	cbnz	r0, ba9fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba9d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9d2:	f7fe bfa8 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9d6:	886b      	ldrh	r3, [r5, #2]
   ba9d8:	3b08      	subs	r3, #8
   ba9da:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba9de:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba9e2:	ddee      	ble.n	ba9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9e4:	3108      	adds	r1, #8
   ba9e6:	68a8      	ldr	r0, [r5, #8]
   ba9e8:	b289      	uxth	r1, r1
   ba9ea:	f7fd f947 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9ee:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9f2:	3601      	adds	r6, #1
   ba9f4:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9f6:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9f8:	d1de      	bne.n	ba9b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba9fa:	e7e2      	b.n	ba9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9fc:	780b      	ldrb	r3, [r1, #0]
   ba9fe:	071b      	lsls	r3, r3, #28
   baa00:	d4e6      	bmi.n	ba9d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   baa02:	2248      	movs	r2, #72	; 0x48
   baa04:	3104      	adds	r1, #4
   baa06:	f009 f83b 	bl	c3a80 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   baa0a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   baa0c:	7813      	ldrb	r3, [r2, #0]
   baa0e:	f043 0308 	orr.w	r3, r3, #8
   baa12:	7013      	strb	r3, [r2, #0]
   baa14:	e7dc      	b.n	ba9d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   baa16:	2b15      	cmp	r3, #21
   baa18:	f47e aef7 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   baa1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   baa1e:	2b00      	cmp	r3, #0
   baa20:	f43e aef3 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baa24:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa28:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa2a:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   baa2c:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa2e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   baa30:	3101      	adds	r1, #1
   baa32:	2908      	cmp	r1, #8
   baa34:	d1f7      	bne.n	baa26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   baa36:	68a8      	ldr	r0, [r5, #8]
   baa38:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   baa3a:	f7fd f92c 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa3e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa40:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   baa42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa44:	7a92      	ldrb	r2, [r2, #10]
   baa46:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa48:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa4c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa4e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa50:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa54:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa56:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baa58:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa5c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa5e:	73da      	strb	r2, [r3, #15]
   baa60:	2610      	movs	r6, #16
   baa62:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa64:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baa66:	7b51      	ldrb	r1, [r2, #13]
   baa68:	b2da      	uxtb	r2, r3
   baa6a:	4291      	cmp	r1, r2
   baa6c:	d80b      	bhi.n	baa86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baa6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa70:	2201      	movs	r2, #1
   baa72:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa76:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baa78:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baa7c:	2800      	cmp	r0, #0
   baa7e:	d17f      	bne.n	bab80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baa80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa82:	f7fe bf50 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa86:	886a      	ldrh	r2, [r5, #2]
   baa88:	3a10      	subs	r2, #16
   baa8a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baa8e:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baa92:	ddec      	ble.n	baa6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baa94:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa96:	46b4      	mov	ip, r6
   baa98:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa9c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa9e:	4440      	add	r0, r8
   baaa0:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baaa2:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baaa6:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baaa8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baaaa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baaac:	4437      	add	r7, r6
   baaae:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baab0:	4440      	add	r0, r8
   baab2:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baab4:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baab6:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baab8:	2a03      	cmp	r2, #3
   baaba:	d80b      	bhi.n	baad4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baabc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baabe:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baac0:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   baac4:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baac8:	4440      	add	r0, r8
   baaca:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baacc:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baad0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   baad4:	3201      	adds	r2, #1
   baad6:	2a08      	cmp	r2, #8
   baad8:	f10c 0c01 	add.w	ip, ip, #1
   baadc:	d1dd      	bne.n	baa9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   baade:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baae0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baae2:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   baae4:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baae6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   baaea:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baaec:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   baaee:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baaf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baaf2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baaf4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baaf8:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baafa:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   baafc:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baafe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab00:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bab02:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab06:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bab08:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab0a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab0e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab10:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab14:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab16:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab18:	3118      	adds	r1, #24
   bab1a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bab1e:	68a8      	ldr	r0, [r5, #8]
   bab20:	b289      	uxth	r1, r1
   bab22:	f7fd f8b8 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab26:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab28:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab2a:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bab2e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab32:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab34:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab36:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bab3c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab40:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab42:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab44:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bab4a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab4e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab50:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab52:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bab58:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab5c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab5e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab60:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab66:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab68:	68aa      	ldr	r2, [r5, #8]
   bab6a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab6c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab6e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab74:	f106 0620 	add.w	r6, r6, #32
   bab78:	463b      	mov	r3, r7
   bab7a:	f47f af73 	bne.w	baa64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bab7e:	e776      	b.n	baa6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab80:	780b      	ldrb	r3, [r1, #0]
   bab82:	071f      	lsls	r7, r3, #28
   bab84:	f53f af7c 	bmi.w	baa80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bab88:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bab8c:	3102      	adds	r1, #2
   bab8e:	f008 ff77 	bl	c3a80 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bab92:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bab94:	7813      	ldrb	r3, [r2, #0]
   bab96:	f043 0308 	orr.w	r3, r3, #8
   bab9a:	7013      	strb	r3, [r2, #0]
   bab9c:	e770      	b.n	baa80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bab9e:	680b      	ldr	r3, [r1, #0]
   baba0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   baba4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   baba8:	d12f      	bne.n	bac0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   babaa:	6f03      	ldr	r3, [r0, #112]	; 0x70
   babac:	2b00      	cmp	r3, #0
   babae:	f43e ae2c 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   babb2:	688a      	ldr	r2, [r1, #8]
   babb4:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   babb6:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   babb8:	6f06      	ldr	r6, [r0, #112]	; 0x70
   babba:	68a8      	ldr	r0, [r5, #8]
   babbc:	2102      	movs	r1, #2
   babbe:	f7fd f86a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babc2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   babc4:	68a8      	ldr	r0, [r5, #8]
   babc6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babc8:	2104      	movs	r1, #4
   babca:	f7fd f857 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babce:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   babd0:	68a8      	ldr	r0, [r5, #8]
   babd2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babd4:	2108      	movs	r1, #8
   babd6:	f7fd f851 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babda:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   babdc:	68a8      	ldr	r0, [r5, #8]
   babde:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babe0:	210c      	movs	r1, #12
   babe2:	f7fd f858 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babe6:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   babe8:	68a8      	ldr	r0, [r5, #8]
   babea:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babec:	210e      	movs	r1, #14
   babee:	f7fd f852 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babf2:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   babf4:	68a8      	ldr	r0, [r5, #8]
   babf6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babf8:	2110      	movs	r1, #16
   babfa:	f7fd f84c 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babfe:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bac00:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bac02:	2201      	movs	r2, #1
   bac04:	751a      	strb	r2, [r3, #20]
   bac06:	f7fe be00 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bac0a:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bac0e:	f47e adfc 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bac12:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bac14:	2e00      	cmp	r6, #0
   bac16:	f43e adf8 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bac1a:	68a8      	ldr	r0, [r5, #8]
   bac1c:	2100      	movs	r1, #0
   bac1e:	f7fd f83a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac22:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bac24:	68a8      	ldr	r0, [r5, #8]
   bac26:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac28:	2102      	movs	r1, #2
   bac2a:	f7fd f834 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac2e:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bac30:	68a8      	ldr	r0, [r5, #8]
   bac32:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac34:	2104      	movs	r1, #4
   bac36:	f7fd f82e 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac3a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bac3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac42:	609a      	str	r2, [r3, #8]
   bac44:	f7fe bde1 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bac48:	680b      	ldr	r3, [r1, #0]
   bac4a:	4ab0      	ldr	r2, [pc, #704]	; (baf0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bac4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bac50:	4293      	cmp	r3, r2
   bac52:	f47e adda 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bac56:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bac58:	2b00      	cmp	r3, #0
   bac5a:	f43e add6 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bac5e:	688a      	ldr	r2, [r1, #8]
   bac60:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bac62:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bac64:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac66:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bac68:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac6a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bac6c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bac6e:	68a8      	ldr	r0, [r5, #8]
   bac70:	2102      	movs	r1, #2
   bac72:	f7fd f810 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac76:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bac78:	68a8      	ldr	r0, [r5, #8]
   bac7a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac7c:	2104      	movs	r1, #4
   bac7e:	f7fd f80a 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac82:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bac84:	68a8      	ldr	r0, [r5, #8]
   bac86:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac88:	2106      	movs	r1, #6
   bac8a:	f7fd f804 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac8e:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bac90:	68a8      	ldr	r0, [r5, #8]
   bac92:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac94:	2108      	movs	r1, #8
   bac96:	f7fc fff1 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac9a:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bac9c:	68a8      	ldr	r0, [r5, #8]
   bac9e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baca0:	210c      	movs	r1, #12
   baca2:	f7fc ffeb 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baca6:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   baca8:	68a8      	ldr	r0, [r5, #8]
   bacaa:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacac:	2110      	movs	r1, #16
   bacae:	f7fc ffe5 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacb2:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bacb4:	68a8      	ldr	r0, [r5, #8]
   bacb6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacb8:	2114      	movs	r1, #20
   bacba:	f7fc ffdf 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacbe:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bacc0:	68a8      	ldr	r0, [r5, #8]
   bacc2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacc4:	2118      	movs	r1, #24
   bacc6:	f7fc ffd9 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacca:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baccc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacd2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacd4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bacd8:	b17a      	cbz	r2, bacfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacda:	7819      	ldrb	r1, [r3, #0]
   bacdc:	070e      	lsls	r6, r1, #28
   bacde:	d40c      	bmi.n	bacfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bace0:	1d19      	adds	r1, r3, #4
   bace2:	3320      	adds	r3, #32
   bace4:	f851 0b04 	ldr.w	r0, [r1], #4
   bace8:	f842 0b04 	str.w	r0, [r2], #4
   bacec:	4299      	cmp	r1, r3
   bacee:	d1f9      	bne.n	bace4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bacf0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bacf2:	7813      	ldrb	r3, [r2, #0]
   bacf4:	f043 0308 	orr.w	r3, r3, #8
   bacf8:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bacfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacfc:	f7fe be13 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bad00:	4a83      	ldr	r2, [pc, #524]	; (baf10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bad02:	4293      	cmp	r3, r2
   bad04:	d158      	bne.n	badb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bad06:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bad0a:	2f00      	cmp	r7, #0
   bad0c:	f43e ad7d 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bad10:	68a8      	ldr	r0, [r5, #8]
   bad12:	2100      	movs	r1, #0
   bad14:	f7fc ffb2 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad18:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bad1a:	68a8      	ldr	r0, [r5, #8]
   bad1c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bad20:	2108      	movs	r1, #8
   bad22:	f7fc ffab 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad26:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad28:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad2a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad2e:	210c      	movs	r1, #12
   bad30:	f7fc ffa4 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad34:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad36:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad38:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad3c:	4631      	mov	r1, r6
   bad3e:	f7fc ff9d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad42:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad44:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad46:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad4a:	2114      	movs	r1, #20
   bad4c:	f7fc ff96 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad50:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad52:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad54:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad58:	2118      	movs	r1, #24
   bad5a:	f7fc ff8f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad5e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad60:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad62:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad66:	211c      	movs	r1, #28
   bad68:	f7fc ff88 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad6c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad70:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad74:	2120      	movs	r1, #32
   bad76:	f7fc ff81 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad7a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad7c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad84:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad86:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bad8c:	b182      	cbz	r2, badb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad8e:	7819      	ldrb	r1, [r3, #0]
   bad90:	0709      	lsls	r1, r1, #28
   bad92:	d40d      	bmi.n	badb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bad94:	1d19      	adds	r1, r3, #4
   bad96:	3328      	adds	r3, #40	; 0x28
   bad98:	f851 0b04 	ldr.w	r0, [r1], #4
   bad9c:	f842 0b04 	str.w	r0, [r2], #4
   bada0:	4299      	cmp	r1, r3
   bada2:	d1f9      	bne.n	bad98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bada4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bada8:	7813      	ldrb	r3, [r2, #0]
   badaa:	f043 0308 	orr.w	r3, r3, #8
   badae:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   badb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   badb4:	f7fe bdb7 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   badb8:	784b      	ldrb	r3, [r1, #1]
   badba:	2b02      	cmp	r3, #2
   badbc:	d158      	bne.n	bae70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   badbe:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   badc2:	2e00      	cmp	r6, #0
   badc4:	f43e ad21 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   badc8:	68a8      	ldr	r0, [r5, #8]
   badca:	2100      	movs	r1, #0
   badcc:	f7fc ff56 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badd0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   badd2:	68a8      	ldr	r0, [r5, #8]
   badd4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badd8:	2104      	movs	r1, #4
   badda:	f7fc ff5c 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badde:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bade0:	68a8      	ldr	r0, [r5, #8]
   bade2:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bade6:	2106      	movs	r1, #6
   bade8:	f7fc ff55 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badec:	8170      	strh	r0, [r6, #10]
   badee:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   badf0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   badf4:	886b      	ldrh	r3, [r5, #2]
   badf6:	7a7a      	ldrb	r2, [r7, #9]
   badf8:	b2b1      	uxth	r1, r6
   badfa:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   badfe:	d320      	bcc.n	bae42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bae00:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bae04:	886a      	ldrh	r2, [r5, #2]
   bae06:	7a73      	ldrb	r3, [r6, #9]
   bae08:	08db      	lsrs	r3, r3, #3
   bae0a:	3302      	adds	r3, #2
   bae0c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bae10:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bae14:	d826      	bhi.n	bae64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae16:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bae1a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bae1e:	b160      	cbz	r0, bae3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae20:	780b      	ldrb	r3, [r1, #0]
   bae22:	071a      	lsls	r2, r3, #28
   bae24:	d409      	bmi.n	bae3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bae26:	2288      	movs	r2, #136	; 0x88
   bae28:	3104      	adds	r1, #4
   bae2a:	f008 fe29 	bl	c3a80 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bae2e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bae32:	7813      	ldrb	r3, [r2, #0]
   bae34:	f043 0308 	orr.w	r3, r3, #8
   bae38:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bae3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bae3e:	f7fe bd72 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae42:	3b08      	subs	r3, #8
   bae44:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bae48:	ddda      	ble.n	bae00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae4a:	0089      	lsls	r1, r1, #2
   bae4c:	3108      	adds	r1, #8
   bae4e:	68a8      	ldr	r0, [r5, #8]
   bae50:	b289      	uxth	r1, r1
   bae52:	f7fc ff13 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae56:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae5a:	3601      	adds	r6, #1
   bae5c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae5e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae60:	d1c6      	bne.n	badf0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bae62:	e7cd      	b.n	bae00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bae64:	68a8      	ldr	r0, [r5, #8]
   bae66:	f7fc ff09 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae6a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bae6e:	e7d2      	b.n	bae16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bae70:	2b03      	cmp	r3, #3
   bae72:	d14f      	bne.n	baf14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bae74:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bae78:	2900      	cmp	r1, #0
   bae7a:	f43e acc6 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bae7e:	886a      	ldrh	r2, [r5, #2]
   bae80:	1f13      	subs	r3, r2, #4
   bae82:	bf48      	it	mi
   bae84:	1cd3      	addmi	r3, r2, #3
   bae86:	10db      	asrs	r3, r3, #3
   bae88:	2700      	movs	r7, #0
   bae8a:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bae8e:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae90:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae92:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae96:	3b04      	subs	r3, #4
   bae98:	42bb      	cmp	r3, r7
   bae9a:	dc08      	bgt.n	baeae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae9c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   baea0:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   baea4:	bb10      	cbnz	r0, baeec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   baea6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   baeaa:	f7fe bd3c 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baeae:	fa1f f887 	uxth.w	r8, r7
   baeb2:	f108 0104 	add.w	r1, r8, #4
   baeb6:	68a8      	ldr	r0, [r5, #8]
   baeb8:	b289      	uxth	r1, r1
   baeba:	f7fc fedf 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baebe:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baec2:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baec6:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeca:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   baece:	68a8      	ldr	r0, [r5, #8]
   baed0:	b289      	uxth	r1, r1
   baed2:	f7fc fed3 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baed6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeda:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baedc:	3601      	adds	r6, #1
   baede:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baee0:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baee4:	f107 0708 	add.w	r7, r7, #8
   baee8:	d1d2      	bne.n	bae90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   baeea:	e7d7      	b.n	bae9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baeec:	780b      	ldrb	r3, [r1, #0]
   baeee:	071b      	lsls	r3, r3, #28
   baef0:	d4d9      	bmi.n	baea6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   baef2:	f44f 720e 	mov.w	r2, #568	; 0x238
   baef6:	3108      	adds	r1, #8
   baef8:	3004      	adds	r0, #4
   baefa:	f008 fdc1 	bl	c3a80 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   baefe:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   baf02:	7813      	ldrb	r3, [r2, #0]
   baf04:	f043 0308 	orr.w	r3, r3, #8
   baf08:	7013      	strb	r3, [r2, #0]
   baf0a:	e7cc      	b.n	baea6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   baf0c:	001c0300 	.word	0x001c0300
   baf10:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   baf14:	2b10      	cmp	r3, #16
   baf16:	f47e ac78 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   baf1a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   baf1e:	2e00      	cmp	r6, #0
   baf20:	f43e ac73 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   baf24:	68a8      	ldr	r0, [r5, #8]
   baf26:	2100      	movs	r1, #0
   baf28:	f7fc fea8 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf2c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baf2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf30:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf34:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf36:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf38:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf3a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf3e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf40:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   baf42:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf44:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf48:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf4a:	74da      	strb	r2, [r3, #19]
   baf4c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf4e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   baf52:	7cc6      	ldrb	r6, [r0, #19]
   baf54:	b28a      	uxth	r2, r1
   baf56:	4296      	cmp	r6, r2
   baf58:	d80c      	bhi.n	baf74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf62:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   baf6a:	bb62      	cbnz	r2, bafc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baf6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf70:	f7fe bcd9 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf74:	886a      	ldrh	r2, [r5, #2]
   baf76:	3a10      	subs	r2, #16
   baf78:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   baf7c:	dded      	ble.n	baf5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   baf7e:	68aa      	ldr	r2, [r5, #8]
   baf80:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf82:	1d0a      	adds	r2, r1, #4
   baf84:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf88:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf8a:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   baf8c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf8e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf92:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf94:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf98:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf9a:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   baf9c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf9e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bafa2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bafa4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafa8:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bafaa:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bafac:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bafb2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafb8:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafba:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bafbc:	2907      	cmp	r1, #7
   bafbe:	f103 0304 	add.w	r3, r3, #4
   bafc2:	d1c4      	bne.n	baf4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bafc4:	e7c9      	b.n	baf5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bafc6:	7819      	ldrb	r1, [r3, #0]
   bafc8:	070f      	lsls	r7, r1, #28
   bafca:	d4cf      	bmi.n	baf6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bafcc:	1d19      	adds	r1, r3, #4
   bafce:	3330      	adds	r3, #48	; 0x30
   bafd0:	f851 0b04 	ldr.w	r0, [r1], #4
   bafd4:	f842 0b04 	str.w	r0, [r2], #4
   bafd8:	4299      	cmp	r1, r3
   bafda:	d1f9      	bne.n	bafd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bafdc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bafe0:	7813      	ldrb	r3, [r2, #0]
   bafe2:	f043 0308 	orr.w	r3, r3, #8
   bafe6:	7013      	strb	r3, [r2, #0]
   bafe8:	e7c0      	b.n	baf6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bafea:	680b      	ldr	r3, [r1, #0]
   bafec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   baff0:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   baff4:	d16a      	bne.n	bb0cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   baff6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   baffa:	2b00      	cmp	r3, #0
   baffc:	f43e ac05 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb000:	7818      	ldrb	r0, [r3, #0]
   bb002:	7859      	ldrb	r1, [r3, #1]
   bb004:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb006:	bf36      	itet	cc
   bb008:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb00c:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb00e:	1a52      	subcc	r2, r2, r1
   bb010:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb012:	2a0e      	cmp	r2, #14
   bb014:	d84b      	bhi.n	bb0ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb016:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb018:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb01c:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb01e:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb020:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb024:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb026:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb028:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb02a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb02e:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb030:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb034:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb036:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb038:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb03a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb03e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb040:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb044:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb046:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb048:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb04a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb04e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb050:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb054:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb056:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb058:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb05a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb05e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb060:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb064:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb066:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb068:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb06a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb06e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb070:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb074:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb076:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb078:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb07a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb07e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb080:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb084:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb086:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb088:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb08a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb08e:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb090:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb094:	7813      	ldrb	r3, [r2, #0]
   bb096:	3301      	adds	r3, #1
   bb098:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb09a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb09e:	781a      	ldrb	r2, [r3, #0]
   bb0a0:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb0a2:	f47e abb2 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb0a6:	2200      	movs	r2, #0
   bb0a8:	701a      	strb	r2, [r3, #0]
   bb0aa:	f7fe bbae 	b.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb0ae:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb0b2:	b923      	cbnz	r3, bb0be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb0b4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb0b8:	2b00      	cmp	r3, #0
   bb0ba:	f43e aba6 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb0be:	4996      	ldr	r1, [pc, #600]	; (bb318 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb0c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0c8:	f005 bc7b 	b.w	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb0cc:	784b      	ldrb	r3, [r1, #1]
   bb0ce:	2b80      	cmp	r3, #128	; 0x80
   bb0d0:	f47e ab9b 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb0d4:	884b      	ldrh	r3, [r1, #2]
   bb0d6:	2ba4      	cmp	r3, #164	; 0xa4
   bb0d8:	f63e ab97 	bhi.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb0dc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb0e0:	2a00      	cmp	r2, #0
   bb0e2:	f43e ab92 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb0e6:	7810      	ldrb	r0, [r2, #0]
   bb0e8:	7851      	ldrb	r1, [r2, #1]
   bb0ea:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0ec:	bf36      	itet	cc
   bb0ee:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb0f0:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0f2:	1a5b      	subcc	r3, r3, r1
   bb0f4:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb0f6:	2bf8      	cmp	r3, #248	; 0xf8
   bb0f8:	d84f      	bhi.n	bb19a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb0fa:	23ac      	movs	r3, #172	; 0xac
   bb0fc:	fb03 2200 	mla	r2, r3, r0, r2
   bb100:	21b5      	movs	r1, #181	; 0xb5
   bb102:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb104:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb108:	7811      	ldrb	r1, [r2, #0]
   bb10a:	fb03 2201 	mla	r2, r3, r1, r2
   bb10e:	2162      	movs	r1, #98	; 0x62
   bb110:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb112:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb116:	7811      	ldrb	r1, [r2, #0]
   bb118:	fb03 2201 	mla	r2, r3, r1, r2
   bb11c:	2113      	movs	r1, #19
   bb11e:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb120:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb124:	7811      	ldrb	r1, [r2, #0]
   bb126:	fb03 2201 	mla	r2, r3, r1, r2
   bb12a:	2180      	movs	r1, #128	; 0x80
   bb12c:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb12e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb132:	7811      	ldrb	r1, [r2, #0]
   bb134:	fb03 2201 	mla	r2, r3, r1, r2
   bb138:	8869      	ldrh	r1, [r5, #2]
   bb13a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb13c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb140:	7811      	ldrb	r1, [r2, #0]
   bb142:	fb03 2201 	mla	r2, r3, r1, r2
   bb146:	8869      	ldrh	r1, [r5, #2]
   bb148:	0a09      	lsrs	r1, r1, #8
   bb14a:	71d1      	strb	r1, [r2, #7]
   bb14c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb14e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb150:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb154:	b28e      	uxth	r6, r1
   bb156:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb158:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb15a:	d907      	bls.n	bb16c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb15c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb15e:	fb03 2200 	mla	r2, r3, r0, r2
   bb162:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb164:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb166:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb168:	3101      	adds	r1, #1
   bb16a:	e7f0      	b.n	bb14e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb16c:	fb03 2200 	mla	r2, r3, r0, r2
   bb170:	7b29      	ldrb	r1, [r5, #12]
   bb172:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb176:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb17a:	7b69      	ldrb	r1, [r5, #13]
   bb17c:	7810      	ldrb	r0, [r2, #0]
   bb17e:	fb03 2300 	mla	r3, r3, r0, r2
   bb182:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb186:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb18a:	7813      	ldrb	r3, [r2, #0]
   bb18c:	3301      	adds	r3, #1
   bb18e:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb190:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb194:	781a      	ldrb	r2, [r3, #0]
   bb196:	2afa      	cmp	r2, #250	; 0xfa
   bb198:	e783      	b.n	bb0a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb19a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb19e:	b923      	cbnz	r3, bb1aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb1a0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb1a4:	2b00      	cmp	r3, #0
   bb1a6:	f43e ab30 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb1aa:	495c      	ldr	r1, [pc, #368]	; (bb31c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb1ac:	e788      	b.n	bb0c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb1ae:	680b      	ldr	r3, [r1, #0]
   bb1b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb1b4:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb1b8:	f040 80b2 	bne.w	bb320 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb1bc:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb1c0:	2f00      	cmp	r7, #0
   bb1c2:	f43e ab22 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb1c6:	68a8      	ldr	r0, [r5, #8]
   bb1c8:	2100      	movs	r1, #0
   bb1ca:	f7fc fd57 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1ce:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb1d0:	68a8      	ldr	r0, [r5, #8]
   bb1d2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb1d6:	2104      	movs	r1, #4
   bb1d8:	f7fc fd5d 	bl	b7c96 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1dc:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb1de:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1e4:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1e6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb1e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1ee:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1f0:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb1f2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1f8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1fa:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb1fc:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb1fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb202:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb204:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb206:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb208:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb20c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb20e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb210:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb212:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb216:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb218:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb21a:	210c      	movs	r1, #12
   bb21c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb21e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb222:	f7fc fd2b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb226:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb228:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb22a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb22e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb230:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb232:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb234:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb238:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb23a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb23e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb242:	2114      	movs	r1, #20
   bb244:	f7fc fd1a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb248:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb24a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb24c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb250:	2118      	movs	r1, #24
   bb252:	f7fc fd13 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb256:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb258:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb25a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb25e:	211c      	movs	r1, #28
   bb260:	f7fc fd0c 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb264:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb266:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb268:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb26c:	2120      	movs	r1, #32
   bb26e:	f7fc fd05 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb272:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb274:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb276:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb27a:	2124      	movs	r1, #36	; 0x24
   bb27c:	f7fc fcfe 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb280:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb282:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb284:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb288:	4631      	mov	r1, r6
   bb28a:	f7fc fcf7 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb28e:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb290:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb292:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb296:	212c      	movs	r1, #44	; 0x2c
   bb298:	f7fc fcf0 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb29c:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb29e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb2a0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb2a4:	2130      	movs	r1, #48	; 0x30
   bb2a6:	f7fc fce9 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb2aa:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb2ac:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2b0:	68a8      	ldr	r0, [r5, #8]
   bb2b2:	2134      	movs	r1, #52	; 0x34
   bb2b4:	f7fc fce2 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2b8:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb2ba:	68a8      	ldr	r0, [r5, #8]
   bb2bc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2c0:	2138      	movs	r1, #56	; 0x38
   bb2c2:	f7fc fcdb 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2c6:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb2c8:	68a8      	ldr	r0, [r5, #8]
   bb2ca:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2ce:	213c      	movs	r1, #60	; 0x3c
   bb2d0:	f7fc fcd4 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2d4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb2d6:	68a8      	ldr	r0, [r5, #8]
   bb2d8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2dc:	2140      	movs	r1, #64	; 0x40
   bb2de:	f7fc fccd 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2e2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb2e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb2e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb2ec:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2ee:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb2f2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb2f4:	b160      	cbz	r0, bb310 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb2f6:	780b      	ldrb	r3, [r1, #0]
   bb2f8:	071e      	lsls	r6, r3, #28
   bb2fa:	d409      	bmi.n	bb310 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb2fc:	2248      	movs	r2, #72	; 0x48
   bb2fe:	3104      	adds	r1, #4
   bb300:	f008 fbbe 	bl	c3a80 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb304:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb308:	7813      	ldrb	r3, [r2, #0]
   bb30a:	f043 0308 	orr.w	r3, r3, #8
   bb30e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb310:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb314:	f7fe bb07 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb318:	000c65c9 	.word	0x000c65c9
   bb31c:	000c6606 	.word	0x000c6606
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb320:	4a5d      	ldr	r2, [pc, #372]	; (bb498 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb322:	4293      	cmp	r3, r2
   bb324:	d156      	bne.n	bb3d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb326:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb32a:	2e00      	cmp	r6, #0
   bb32c:	f43e aa6d 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb330:	68a8      	ldr	r0, [r5, #8]
   bb332:	2100      	movs	r1, #0
   bb334:	f7fc fca2 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb338:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb33a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb33c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb340:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb342:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb344:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb346:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb34a:	2108      	movs	r1, #8
   bb34c:	f7fc fc96 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb350:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb352:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb354:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb358:	210c      	movs	r1, #12
   bb35a:	f7fc fc8f 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb35e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb360:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb362:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb366:	2110      	movs	r1, #16
   bb368:	f7fc fc88 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb36c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb36e:	68a8      	ldr	r0, [r5, #8]
   bb370:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb374:	2114      	movs	r1, #20
   bb376:	f7fc fc81 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb37a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb37c:	68a8      	ldr	r0, [r5, #8]
   bb37e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb382:	2118      	movs	r1, #24
   bb384:	f7fc fc7a 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb388:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb38a:	68a8      	ldr	r0, [r5, #8]
   bb38c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb390:	211c      	movs	r1, #28
   bb392:	f7fc fc73 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb396:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb398:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb3a0:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb3a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb3a8:	b182      	cbz	r2, bb3cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb3aa:	7819      	ldrb	r1, [r3, #0]
   bb3ac:	0708      	lsls	r0, r1, #28
   bb3ae:	d40d      	bmi.n	bb3cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb3b0:	1d19      	adds	r1, r3, #4
   bb3b2:	3324      	adds	r3, #36	; 0x24
   bb3b4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb3b8:	f842 0b04 	str.w	r0, [r2], #4
   bb3bc:	4299      	cmp	r1, r3
   bb3be:	d1f9      	bne.n	bb3b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3c0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb3c4:	7813      	ldrb	r3, [r2, #0]
   bb3c6:	f043 0308 	orr.w	r3, r3, #8
   bb3ca:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb3cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3d0:	f7fe baa9 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb3d4:	4a31      	ldr	r2, [pc, #196]	; (bb49c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb3d6:	4293      	cmp	r3, r2
   bb3d8:	f47e aa17 	bne.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb3dc:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb3e0:	2e00      	cmp	r6, #0
   bb3e2:	f43e aa12 	beq.w	b980a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb3e6:	68a8      	ldr	r0, [r5, #8]
   bb3e8:	2100      	movs	r1, #0
   bb3ea:	f7fc fc47 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3ee:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb3f0:	68a8      	ldr	r0, [r5, #8]
   bb3f2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb3f6:	2108      	movs	r1, #8
   bb3f8:	f7fc fc40 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3fc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb400:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb404:	210c      	movs	r1, #12
   bb406:	f7fc fc39 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb40a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb40c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb40e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb412:	2110      	movs	r1, #16
   bb414:	f7fc fc32 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb418:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb41a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb41c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb420:	2114      	movs	r1, #20
   bb422:	f7fc fc2b 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb426:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb428:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb42a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb42e:	2118      	movs	r1, #24
   bb430:	f7fc fc24 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb434:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb436:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb438:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb43c:	211c      	movs	r1, #28
   bb43e:	f7fc fc1d 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb442:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb444:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb446:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb44a:	2120      	movs	r1, #32
   bb44c:	f7fc fc16 	bl	b7c7c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb450:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb452:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb45a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb45c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb462:	b182      	cbz	r2, bb486 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb464:	7819      	ldrb	r1, [r3, #0]
   bb466:	0709      	lsls	r1, r1, #28
   bb468:	d40d      	bmi.n	bb486 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb46a:	1d19      	adds	r1, r3, #4
   bb46c:	3328      	adds	r3, #40	; 0x28
   bb46e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb472:	f842 0b04 	str.w	r0, [r2], #4
   bb476:	4299      	cmp	r1, r3
   bb478:	d1f9      	bne.n	bb46e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb47a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb47e:	7813      	ldrb	r3, [r2, #0]
   bb480:	f043 0308 	orr.w	r3, r3, #8
   bb484:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb486:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb48a:	f7fe ba4c 	b.w	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb48e:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb490:	2018      	movs	r0, #24
   bb492:	f7ff b9a2 	b.w	ba7da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb496:	bf00      	nop
   bb498:	00200100 	.word	0x00200100
   bb49c:	00240200 	.word	0x00240200

000bb4a0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb4a4:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb4a6:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb4aa:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb4ae:	4604      	mov	r4, r0
   bb4b0:	460f      	mov	r7, r1
   bb4b2:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb4b4:	b993      	cbnz	r3, bb4dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb4b6:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb4ba:	886b      	ldrh	r3, [r5, #2]
   bb4bc:	88aa      	ldrh	r2, [r5, #4]
   bb4be:	3303      	adds	r3, #3
   bb4c0:	4293      	cmp	r3, r2
   bb4c2:	db03      	blt.n	bb4cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb4c4:	4639      	mov	r1, r7
   bb4c6:	4620      	mov	r0, r4
   bb4c8:	f7fd fdf0 	bl	b90ac <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb4cc:	88ae      	ldrh	r6, [r5, #4]
   bb4ce:	bb7e      	cbnz	r6, bb530 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb4d0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb4d2:	88ab      	ldrh	r3, [r5, #4]
   bb4d4:	3301      	adds	r3, #1
   bb4d6:	80ab      	strh	r3, [r5, #4]
}
   bb4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb4dc:	2b03      	cmp	r3, #3
   bb4de:	d124      	bne.n	bb52a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb4e0:	7852      	ldrb	r2, [r2, #1]
   bb4e2:	7829      	ldrb	r1, [r5, #0]
   bb4e4:	f7fc fdda 	bl	b809c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb4e8:	4680      	mov	r8, r0
   bb4ea:	2800      	cmp	r0, #0
   bb4ec:	d1e5      	bne.n	bb4ba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb4ee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb4f2:	b91b      	cbnz	r3, bb4fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb4f4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb4f8:	2b00      	cmp	r3, #0
   bb4fa:	d0de      	beq.n	bb4ba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb4fc:	49b7      	ldr	r1, [pc, #732]	; (bb7dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb4fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb502:	f005 fa44 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb506:	7829      	ldrb	r1, [r5, #0]
   bb508:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb50c:	220a      	movs	r2, #10
   bb50e:	f7fc fbd5 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb512:	49b3      	ldr	r1, [pc, #716]	; (bb7e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb514:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb518:	f005 fa39 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb51c:	7869      	ldrb	r1, [r5, #1]
   bb51e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb522:	220a      	movs	r2, #10
   bb524:	f7fc fbd1 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb528:	e7c7      	b.n	bb4ba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb52a:	f04f 0802 	mov.w	r8, #2
   bb52e:	e7c4      	b.n	bb4ba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb530:	2e01      	cmp	r6, #1
   bb532:	d101      	bne.n	bb538 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb534:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb536:	e7cc      	b.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb538:	2e02      	cmp	r6, #2
   bb53a:	d101      	bne.n	bb540 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb53c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb53e:	e7c8      	b.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb540:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb542:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb544:	d103      	bne.n	bb54e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb546:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb54a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb54c:	e7c1      	b.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb54e:	1d0b      	adds	r3, r1, #4
   bb550:	429e      	cmp	r6, r3
   bb552:	d136      	bne.n	bb5c2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb554:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb556:	88aa      	ldrh	r2, [r5, #4]
   bb558:	f108 0306 	add.w	r3, r8, #6
   bb55c:	429a      	cmp	r2, r3
   bb55e:	d1b8      	bne.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb560:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb564:	2b00      	cmp	r3, #0
   bb566:	d1b4      	bne.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb568:	2200      	movs	r2, #0
   bb56a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb56c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb570:	b91a      	cbnz	r2, bb57a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb572:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb576:	2a00      	cmp	r2, #0
   bb578:	d0ab      	beq.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb57a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb57e:	2b00      	cmp	r3, #0
   bb580:	f000 8170 	beq.w	bb864 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb584:	4997      	ldr	r1, [pc, #604]	; (bb7e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb586:	f005 fa02 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb58a:	4997      	ldr	r1, [pc, #604]	; (bb7e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb58c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb590:	f005 f9fd 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb594:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb598:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb59c:	220a      	movs	r2, #10
   bb59e:	f005 fa12 	bl	c09c6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb5a2:	4992      	ldr	r1, [pc, #584]	; (bb7ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb5a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5a8:	f005 f9f1 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb5ac:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb5b0:	220a      	movs	r2, #10
   bb5b2:	4641      	mov	r1, r8
   bb5b4:	4620      	mov	r0, r4
   bb5b6:	f005 fa06 	bl	c09c6 <_ZN5Print11printNumberEmh>
        n += println();
   bb5ba:	4620      	mov	r0, r4
   bb5bc:	f005 f9eb 	bl	c0996 <_ZN5Print7printlnEv>
        return n;
   bb5c0:	e787      	b.n	bb4d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb5c2:	3105      	adds	r1, #5
   bb5c4:	428e      	cmp	r6, r1
   bb5c6:	f040 812f 	bne.w	bb828 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5ca:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb5cc:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5ce:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb5d0:	89a9      	ldrh	r1, [r5, #12]
   bb5d2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb5d6:	4291      	cmp	r1, r2
   bb5d8:	f040 80ae 	bne.w	bb738 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb5dc:	2301      	movs	r3, #1
   bb5de:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb5e0:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb5e4:	7829      	ldrb	r1, [r5, #0]
   bb5e6:	4549      	cmp	r1, r9
   bb5e8:	d155      	bne.n	bb696 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb5ea:	786b      	ldrb	r3, [r5, #1]
   bb5ec:	4553      	cmp	r3, sl
   bb5ee:	d152      	bne.n	bb696 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb5f0:	2301      	movs	r3, #1
   bb5f2:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb5f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb5f8:	b3b3      	cbz	r3, bb668 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb5fa:	497d      	ldr	r1, [pc, #500]	; (bb7f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb5fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb600:	f005 f9c5 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb604:	220a      	movs	r2, #10
   bb606:	8869      	ldrh	r1, [r5, #2]
   bb608:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb60c:	f005 f9db 	bl	c09c6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb610:	4978      	ldr	r1, [pc, #480]	; (bb7f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb612:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb616:	f005 f9ba 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb61a:	2200      	movs	r2, #0
   bb61c:	4629      	mov	r1, r5
   bb61e:	4620      	mov	r0, r4
   bb620:	f7fd ff50 	bl	b94c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb624:	7bab      	ldrb	r3, [r5, #14]
   bb626:	2b01      	cmp	r3, #1
   bb628:	d104      	bne.n	bb634 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb62a:	4973      	ldr	r1, [pc, #460]	; (bb7f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb62c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb630:	f005 f9c7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb634:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb638:	2b01      	cmp	r3, #1
   bb63a:	d104      	bne.n	bb646 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb63c:	496f      	ldr	r1, [pc, #444]	; (bb7fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb63e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb642:	f005 f9be 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb646:	7beb      	ldrb	r3, [r5, #15]
   bb648:	2b01      	cmp	r3, #1
   bb64a:	d104      	bne.n	bb656 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb64c:	496c      	ldr	r1, [pc, #432]	; (bb800 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb64e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb652:	f005 f9b6 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb656:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb65a:	2b01      	cmp	r3, #1
   bb65c:	d104      	bne.n	bb668 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb65e:	4969      	ldr	r1, [pc, #420]	; (bb804 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb660:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb664:	f005 f9ad 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb668:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb66c:	b91b      	cbnz	r3, bb676 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb66e:	4629      	mov	r1, r5
   bb670:	4620      	mov	r0, r4
   bb672:	f7fe f8b9 	bl	b97e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb676:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb67a:	2b03      	cmp	r3, #3
   bb67c:	f47f af6b 	bne.w	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb680:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb684:	b108      	cbz	r0, bb68a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb686:	f7f8 fd0a 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb68a:	2300      	movs	r3, #0
   bb68c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb690:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb694:	e75f      	b.n	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb696:	882b      	ldrh	r3, [r5, #0]
   bb698:	f240 1205 	movw	r2, #261	; 0x105
   bb69c:	4293      	cmp	r3, r2
   bb69e:	d123      	bne.n	bb6e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb6a0:	68ab      	ldr	r3, [r5, #8]
   bb6a2:	781a      	ldrb	r2, [r3, #0]
   bb6a4:	454a      	cmp	r2, r9
   bb6a6:	d102      	bne.n	bb6ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6a8:	785b      	ldrb	r3, [r3, #1]
   bb6aa:	4553      	cmp	r3, sl
   bb6ac:	d0a0      	beq.n	bb5f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb6ae:	786a      	ldrb	r2, [r5, #1]
   bb6b0:	4620      	mov	r0, r4
   bb6b2:	f7fc fbf1 	bl	b7e98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb6b6:	2800      	cmp	r0, #0
   bb6b8:	d09c      	beq.n	bb5f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb6ba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6be:	2b00      	cmp	r3, #0
   bb6c0:	d0d2      	beq.n	bb668 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb6c2:	4951      	ldr	r1, [pc, #324]	; (bb808 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb6c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6c8:	f005 f961 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb6cc:	2210      	movs	r2, #16
   bb6ce:	7829      	ldrb	r1, [r5, #0]
   bb6d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6d4:	f7fc faf2 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb6d8:	4941      	ldr	r1, [pc, #260]	; (bb7e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb6da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6de:	f005 f956 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb6e2:	7869      	ldrb	r1, [r5, #1]
   bb6e4:	2210      	movs	r2, #16
   bb6e6:	e022      	b.n	bb72e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb6e8:	2b05      	cmp	r3, #5
   bb6ea:	d1e0      	bne.n	bb6ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6ec:	68ab      	ldr	r3, [r5, #8]
   bb6ee:	781a      	ldrb	r2, [r3, #0]
   bb6f0:	454a      	cmp	r2, r9
   bb6f2:	d1dc      	bne.n	bb6ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6f4:	785b      	ldrb	r3, [r3, #1]
   bb6f6:	4553      	cmp	r3, sl
   bb6f8:	d1d9      	bne.n	bb6ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb6fa:	2303      	movs	r3, #3
   bb6fc:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb6fe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb702:	2b00      	cmp	r3, #0
   bb704:	d0b0      	beq.n	bb668 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb706:	4941      	ldr	r1, [pc, #260]	; (bb80c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb708:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb70c:	f005 f93f 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb710:	68ab      	ldr	r3, [r5, #8]
   bb712:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb716:	7819      	ldrb	r1, [r3, #0]
   bb718:	2210      	movs	r2, #16
   bb71a:	f7fc facf 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb71e:	493c      	ldr	r1, [pc, #240]	; (bb810 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb720:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb724:	f005 f933 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb728:	68ab      	ldr	r3, [r5, #8]
   bb72a:	7859      	ldrb	r1, [r3, #1]
   bb72c:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb72e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb732:	f7fc faca 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb736:	e75d      	b.n	bb5f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb738:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb73a:	782b      	ldrb	r3, [r5, #0]
   bb73c:	454b      	cmp	r3, r9
   bb73e:	d143      	bne.n	bb7c8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb740:	786a      	ldrb	r2, [r5, #1]
   bb742:	4552      	cmp	r2, sl
   bb744:	d140      	bne.n	bb7c8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb746:	2300      	movs	r3, #0
   bb748:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb74a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb74e:	b91b      	cbnz	r3, bb758 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb750:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb754:	2b00      	cmp	r3, #0
   bb756:	d08e      	beq.n	bb676 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb758:	492e      	ldr	r1, [pc, #184]	; (bb814 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb75a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb75e:	f005 f916 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb762:	492d      	ldr	r1, [pc, #180]	; (bb818 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb764:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb768:	f005 f911 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb76c:	7b29      	ldrb	r1, [r5, #12]
   bb76e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb772:	220a      	movs	r2, #10
   bb774:	f7fc faa2 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb778:	4928      	ldr	r1, [pc, #160]	; (bb81c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb77a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb77e:	f005 f906 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb782:	7b69      	ldrb	r1, [r5, #13]
   bb784:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb788:	220a      	movs	r2, #10
   bb78a:	f7fc fa97 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb78e:	4924      	ldr	r1, [pc, #144]	; (bb820 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb790:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb794:	f005 f8fb 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb798:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb79c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7a0:	220a      	movs	r2, #10
   bb7a2:	f7fc fa8b 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb7a6:	491f      	ldr	r1, [pc, #124]	; (bb824 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb7a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7ac:	f005 f8ef 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb7b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7b4:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb7b8:	220a      	movs	r2, #10
   bb7ba:	f7fc fa7f 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb7be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7c2:	f005 f8e8 	bl	c0996 <_ZN5Print7printlnEv>
   bb7c6:	e756      	b.n	bb676 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb7c8:	2b05      	cmp	r3, #5
   bb7ca:	d1be      	bne.n	bb74a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7cc:	68ab      	ldr	r3, [r5, #8]
   bb7ce:	781a      	ldrb	r2, [r3, #0]
   bb7d0:	454a      	cmp	r2, r9
   bb7d2:	d1ba      	bne.n	bb74a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7d4:	785b      	ldrb	r3, [r3, #1]
   bb7d6:	4553      	cmp	r3, sl
   bb7d8:	d1b7      	bne.n	bb74a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7da:	e7b4      	b.n	bb746 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb7dc:	000c6648 	.word	0x000c6648
   bb7e0:	000c66b9 	.word	0x000c66b9
   bb7e4:	000c67c1 	.word	0x000c67c1
   bb7e8:	000c6818 	.word	0x000c6818
   bb7ec:	000c682e 	.word	0x000c682e
   bb7f0:	000c66f5 	.word	0x000c66f5
   bb7f4:	000c6706 	.word	0x000c6706
   bb7f8:	000c6712 	.word	0x000c6712
   bb7fc:	000c6726 	.word	0x000c6726
   bb800:	000c673a 	.word	0x000c673a
   bb804:	000c6754 	.word	0x000c6754
   bb808:	000c66c1 	.word	0x000c66c1
   bb80c:	000c6680 	.word	0x000c6680
   bb810:	000c66af 	.word	0x000c66af
   bb814:	000c676e 	.word	0x000c676e
   bb818:	000c677f 	.word	0x000c677f
   bb81c:	000c678c 	.word	0x000c678c
   bb820:	000c6799 	.word	0x000c6799
   bb824:	000c67ad 	.word	0x000c67ad
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb828:	786a      	ldrb	r2, [r5, #1]
   bb82a:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb82c:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb830:	4620      	mov	r0, r4
   bb832:	f7fc fb31 	bl	b7e98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb836:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb83a:	2800      	cmp	r0, #0
   bb83c:	bf18      	it	ne
   bb83e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb842:	2b00      	cmp	r3, #0
   bb844:	f47f ae87 	bne.w	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb848:	1ef3      	subs	r3, r6, #3
   bb84a:	454b      	cmp	r3, r9
   bb84c:	f77f ae83 	ble.w	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb850:	3e04      	subs	r6, #4
   bb852:	eba6 0609 	sub.w	r6, r6, r9
   bb856:	4546      	cmp	r6, r8
   bb858:	da02      	bge.n	bb860 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb85a:	68ab      	ldr	r3, [r5, #8]
   bb85c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb85e:	e67a      	b.n	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb860:	2301      	movs	r3, #1
   bb862:	e681      	b.n	bb568 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb864:	4900      	ldr	r1, [pc, #0]	; (bb868 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb866:	e68e      	b.n	bb586 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb868:	000c67e6 	.word	0x000c67e6

000bb86c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb86e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb872:	4604      	mov	r4, r0
   bb874:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb876:	b113      	cbz	r3, bb87e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb878:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb87c:	b953      	cbnz	r3, bb894 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb87e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb882:	b128      	cbz	r0, bb890 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb884:	490e      	ldr	r1, [pc, #56]	; (bb8c0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb886:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb88a:	f005 f89a 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb88e:	2000      	movs	r0, #0
}
   bb890:	b003      	add	sp, #12
   bb892:	bd30      	pop	{r4, r5, pc}
   bb894:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb896:	f7fd ff12 	bl	b96be <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb89a:	4285      	cmp	r5, r0
   bb89c:	9901      	ldr	r1, [sp, #4]
   bb89e:	d908      	bls.n	bb8b2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb8a0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb8a4:	b91b      	cbnz	r3, bb8ae <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb8a6:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb8aa:	2800      	cmp	r0, #0
   bb8ac:	d0f0      	beq.n	bb890 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb8ae:	4905      	ldr	r1, [pc, #20]	; (bb8c4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb8b0:	e7e9      	b.n	bb886 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb8b2:	4620      	mov	r0, r4
   bb8b4:	462a      	mov	r2, r5
   bb8b6:	f7fd ff0b 	bl	b96d0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb8ba:	2001      	movs	r0, #1
   bb8bc:	e7e8      	b.n	bb890 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb8be:	bf00      	nop
   bb8c0:	000c6846 	.word	0x000c6846
   bb8c4:	000c6871 	.word	0x000c6871

000bb8c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb8cc:	4604      	mov	r4, r0
   bb8ce:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb8d0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb8d4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb8d8:	f88d 100f 	strb.w	r1, [sp, #15]
   bb8dc:	4615      	mov	r5, r2
   bb8de:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb8e0:	b118      	cbz	r0, bb8ea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb8e2:	6803      	ldr	r3, [r0, #0]
   bb8e4:	b2c9      	uxtb	r1, r1
   bb8e6:	689b      	ldr	r3, [r3, #8]
   bb8e8:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb8ea:	7823      	ldrb	r3, [r4, #0]
   bb8ec:	2b01      	cmp	r3, #1
   bb8ee:	d80e      	bhi.n	bb90e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb8f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb8f4:	2bb5      	cmp	r3, #181	; 0xb5
   bb8f6:	d12e      	bne.n	bb956 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb8f8:	2300      	movs	r3, #0
   bb8fa:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb8fe:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb900:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb904:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb908:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb90a:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb90e:	7826      	ldrb	r6, [r4, #0]
   bb910:	2e02      	cmp	r6, #2
   bb912:	f040 81d5 	bne.w	bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb916:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb91a:	bb5b      	cbnz	r3, bb974 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb91c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb920:	2bb5      	cmp	r3, #181	; 0xb5
   bb922:	d001      	beq.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb924:	2300      	movs	r3, #0
   bb926:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb928:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb92c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb930:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb934:	2b01      	cmp	r3, #1
   bb936:	f040 81a3 	bne.w	bbc80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb93a:	463b      	mov	r3, r7
   bb93c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb940:	4620      	mov	r0, r4
   bb942:	f7ff fdad 	bl	bb4a0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb946:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb94a:	3301      	adds	r3, #1
   bb94c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb950:	b005      	add	sp, #20
   bb952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb956:	2b24      	cmp	r3, #36	; 0x24
   bb958:	d105      	bne.n	bb966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb95a:	2300      	movs	r3, #0
   bb95c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb960:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb962:	7023      	strb	r3, [r4, #0]
   bb964:	e7d3      	b.n	bb90e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb966:	2bd3      	cmp	r3, #211	; 0xd3
   bb968:	d1d1      	bne.n	bb90e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb96a:	2300      	movs	r3, #0
   bb96c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb970:	2303      	movs	r3, #3
   bb972:	e7f6      	b.n	bb962 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb974:	2b01      	cmp	r3, #1
   bb976:	d103      	bne.n	bb980 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb978:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb97c:	2b62      	cmp	r3, #98	; 0x62
   bb97e:	e7d0      	b.n	bb922 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb980:	2b02      	cmp	r3, #2
   bb982:	d10e      	bne.n	bb9a2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb984:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb988:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb98c:	2200      	movs	r2, #0
   bb98e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb992:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb996:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb99a:	88eb      	ldrh	r3, [r5, #6]
   bb99c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb9a0:	e7c2      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb9a2:	2b03      	cmp	r3, #3
   bb9a4:	f040 80b7 	bne.w	bbb16 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb9a8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb9ac:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb9b0:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb9b4:	2905      	cmp	r1, #5
   bb9b6:	d0b7      	beq.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb9b8:	42b9      	cmp	r1, r7
   bb9ba:	d10c      	bne.n	bb9d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb9bc:	4546      	cmp	r6, r8
   bb9be:	d10a      	bne.n	bb9d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb9c0:	2300      	movs	r3, #0
   bb9c2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb9c6:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb9c8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb9cc:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb9ce:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb9d2:	80ab      	strh	r3, [r5, #4]
   bb9d4:	e7a8      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb9d6:	4632      	mov	r2, r6
   bb9d8:	4620      	mov	r0, r4
   bb9da:	f7fc fa5d 	bl	b7e98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb9de:	2800      	cmp	r0, #0
   bb9e0:	f000 8095 	beq.w	bbb0e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb9e4:	4632      	mov	r2, r6
   bb9e6:	4620      	mov	r0, r4
   bb9e8:	f7fc fb58 	bl	b809c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb9ec:	4606      	mov	r6, r0
   bb9ee:	b9e8      	cbnz	r0, bba2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb9f0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb9f4:	b913      	cbnz	r3, bb9fc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb9f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb9fa:	b1bb      	cbz	r3, bba2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb9fc:	49a7      	ldr	r1, [pc, #668]	; (bbc9c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb9fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba02:	f004 ffc4 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bba06:	220a      	movs	r2, #10
   bba08:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bba0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba10:	f7fc f954 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba14:	49a2      	ldr	r1, [pc, #648]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba1a:	f004 ffb8 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bba1e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba22:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba26:	220a      	movs	r2, #10
   bba28:	f7fc f94f 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bba2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bba30:	b1a3      	cbz	r3, bba5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba32:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba36:	b913      	cbnz	r3, bba3e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bba38:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba3c:	b123      	cbz	r3, bba48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bba3e:	4999      	ldr	r1, [pc, #612]	; (bbca4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bba40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba44:	f004 ffbd 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bba48:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bba4c:	b108      	cbz	r0, bba52 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bba4e:	f7f8 fb26 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bba52:	2300      	movs	r3, #0
   bba54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bba58:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bba5c:	4630      	mov	r0, r6
   bba5e:	f7f8 fb1c 	bl	b409a <_Znaj>
   bba62:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba66:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bba6a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bba6e:	bb38      	cbnz	r0, bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba70:	b913      	cbnz	r3, bba78 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bba72:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba76:	b1e3      	cbz	r3, bbab2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bba78:	498b      	ldr	r1, [pc, #556]	; (bbca8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bba7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba7e:	f004 ff86 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bba82:	2210      	movs	r2, #16
   bba84:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bba88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba8c:	f7fc f916 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba90:	4983      	ldr	r1, [pc, #524]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba96:	f004 ff7a 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bba9a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaa2:	2210      	movs	r2, #16
   bbaa4:	f7fc f911 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bbaa8:	4980      	ldr	r1, [pc, #512]	; (bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bbaaa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaae:	f004 ff88 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbab2:	2300      	movs	r3, #0
   bbab4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbab8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bbabc:	702b      	strb	r3, [r5, #0]
   bbabe:	e783      	b.n	bb9c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bbac0:	2203      	movs	r2, #3
   bbac2:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bbac6:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bbaca:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bbace:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbad2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbad6:	2b00      	cmp	r3, #0
   bbad8:	f43f af26 	beq.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbadc:	4974      	ldr	r1, [pc, #464]	; (bbcb0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbade:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbae2:	f004 ff54 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbae6:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbaea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaee:	2210      	movs	r2, #16
   bbaf0:	f7fc f8e4 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbaf4:	496a      	ldr	r1, [pc, #424]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbaf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbafa:	f004 ff48 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbafe:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb06:	2210      	movs	r2, #16
   bbb08:	f7fc f8df 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbb0c:	e70c      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbb0e:	2301      	movs	r3, #1
   bbb10:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbb14:	e708      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbb16:	2b04      	cmp	r3, #4
   bbb18:	d104      	bne.n	bbb24 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbb1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb1e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbb22:	e701      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bbb24:	2b05      	cmp	r3, #5
   bbb26:	d106      	bne.n	bbb36 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb28:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb2c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bbb34:	e7f3      	b.n	bbb1e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bbb36:	2b06      	cmp	r3, #6
   bbb38:	d12b      	bne.n	bbb92 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb3a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb3e:	bb13      	cbnz	r3, bbb86 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb40:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb44:	b913      	cbnz	r3, bbb4c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bbb46:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb4a:	b1bb      	cbz	r3, bbb7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bbb4c:	4959      	ldr	r1, [pc, #356]	; (bbcb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bbb4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb52:	f004 ff1c 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bbb56:	2210      	movs	r2, #16
   bbb58:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb60:	f7fc f8ac 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbb64:	494e      	ldr	r1, [pc, #312]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbb66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb6a:	f004 ff10 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bbb6e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb76:	2210      	movs	r2, #16
   bbb78:	f7fc f8a7 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bbb7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbb80:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbb84:	e6d0      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bbb86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbb8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb8e:	701a      	strb	r2, [r3, #0]
   bbb90:	e6ca      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb92:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbb94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb98:	f47f aec6 	bne.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb9c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbba0:	bb9b      	cbnz	r3, bbc0a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bbba2:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bbba6:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbbaa:	2b02      	cmp	r3, #2
   bbbac:	f47f aebc 	bne.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bbbb0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbbb4:	2905      	cmp	r1, #5
   bbbb6:	f47f aeb7 	bne.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bbbba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbbbe:	781a      	ldrb	r2, [r3, #0]
   bbbc0:	42ba      	cmp	r2, r7
   bbbc2:	f47f aeb1 	bne.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bbbc6:	785a      	ldrb	r2, [r3, #1]
   bbbc8:	4542      	cmp	r2, r8
   bbbca:	f47f aead 	bne.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bbbce:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bbbd2:	2a02      	cmp	r2, #2
   bbbd4:	d121      	bne.n	bbc1a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bbbd6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bbbda:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bbbde:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bbbe2:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bbbe6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bbbea:	2001      	movs	r0, #1
   bbbec:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bbbf0:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bbbf4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bbbf8:	781b      	ldrb	r3, [r3, #0]
   bbbfa:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bbbfc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bbc00:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bbc04:	7852      	ldrb	r2, [r2, #1]
   bbc06:	705a      	strb	r2, [r3, #1]
   bbc08:	e68e      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bbc0a:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bbc0c:	bf16      	itet	ne
   bbc0e:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bbc12:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bbc16:	705a      	strbne	r2, [r3, #1]
   bbc18:	e7c5      	b.n	bbba6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc1a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc1e:	b923      	cbnz	r3, bbc2a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bbc20:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc24:	2b00      	cmp	r3, #0
   bbc26:	f43f ae7f 	beq.w	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bbc2a:	4923      	ldr	r1, [pc, #140]	; (bbcb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bbc2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc30:	f004 fead 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bbc34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc3c:	7819      	ldrb	r1, [r3, #0]
   bbc3e:	2210      	movs	r2, #16
   bbc40:	f7fc f83c 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bbc44:	4916      	ldr	r1, [pc, #88]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbc46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc4a:	f004 fea0 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bbc4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc52:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc56:	7859      	ldrb	r1, [r3, #1]
   bbc58:	2210      	movs	r2, #16
   bbc5a:	f7fc f82f 	bl	b7cbc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bbc5e:	4917      	ldr	r1, [pc, #92]	; (bbcbc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bbc60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc64:	f004 fe93 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bbc68:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bbc6c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bbc70:	220a      	movs	r2, #10
   bbc72:	4630      	mov	r0, r6
   bbc74:	f004 fea7 	bl	c09c6 <_ZN5Print11printNumberEmh>
        n += println();
   bbc78:	4630      	mov	r0, r6
   bbc7a:	f004 fe8c 	bl	c0996 <_ZN5Print7printlnEv>
        return n;
   bbc7e:	e653      	b.n	bb928 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbc80:	b913      	cbnz	r3, bbc88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bbc82:	463b      	mov	r3, r7
   bbc84:	462a      	mov	r2, r5
   bbc86:	e65b      	b.n	bb940 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bbc88:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bbc8a:	bf08      	it	eq
   bbc8c:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bbc90:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbc92:	bf18      	it	ne
   bbc94:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bbc98:	e652      	b.n	bb940 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bbc9a:	bf00      	nop
   bbc9c:	000c68b2 	.word	0x000c68b2
   bbca0:	000c66b9 	.word	0x000c66b9
   bbca4:	000c68e7 	.word	0x000c68e7
   bbca8:	000c6929 	.word	0x000c6929
   bbcac:	000c696e 	.word	0x000c696e
   bbcb0:	000c69a0 	.word	0x000c69a0
   bbcb4:	000c69d1 	.word	0x000c69d1
   bbcb8:	000c6a01 	.word	0x000c6a01
   bbcbc:	000c6a31 	.word	0x000c6a31
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bbcc0:	2e01      	cmp	r6, #1
   bbcc2:	f040 8188 	bne.w	bbfd6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bbcc6:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bbcca:	2b00      	cmp	r3, #0
   bbccc:	d146      	bne.n	bbd5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bbcce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbcd2:	2a24      	cmp	r2, #36	; 0x24
   bbcd4:	f000 8086 	beq.w	bbde4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bbcd8:	2300      	movs	r3, #0
   bbcda:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bbcdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbce0:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bbce2:	bf04      	itt	eq
   bbce4:	23fb      	moveq	r3, #251	; 0xfb
   bbce6:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bbcea:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbcee:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bbcf2:	3501      	adds	r5, #1
   bbcf4:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbcf6:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbcf8:	bf08      	it	eq
   bbcfa:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bbcfc:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbd00:	bf08      	it	eq
   bbd02:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bbd04:	2d00      	cmp	r5, #0
   bbd06:	f47f ae23 	bne.w	bb950 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bbd0a:	4620      	mov	r0, r4
   bbd0c:	f7fc fc20 	bl	b8550 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd10:	2800      	cmp	r0, #0
   bbd12:	f000 8120 	beq.w	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd16:	4620      	mov	r0, r4
   bbd18:	f7fc fd7c 	bl	b8814 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd1c:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd1e:	4620      	mov	r0, r4
   bbd20:	f7fc fdfa 	bl	b8918 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd24:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd26:	4620      	mov	r0, r4
   bbd28:	f7fd f88a 	bl	b8e40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bbd2c:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd2e:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd30:	1e41      	subs	r1, r0, #1
   bbd32:	428e      	cmp	r6, r1
   bbd34:	f280 80b4 	bge.w	bbea0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd38:	783a      	ldrb	r2, [r7, #0]
   bbd3a:	3a04      	subs	r2, #4
   bbd3c:	4296      	cmp	r6, r2
   bbd3e:	f280 80af 	bge.w	bbea0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd42:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd44:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd48:	f000 80ad 	beq.w	bbea6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bbd4c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bbd4e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bbd52:	bf18      	it	ne
   bbd54:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bbd56:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd58:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd5a:	e7ea      	b.n	bbd32 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bbd5c:	2b01      	cmp	r3, #1
   bbd5e:	d103      	bne.n	bbd68 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bbd60:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd64:	2a47      	cmp	r2, #71	; 0x47
   bbd66:	e7b5      	b.n	bbcd4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bbd68:	b2da      	uxtb	r2, r3
   bbd6a:	2a05      	cmp	r2, #5
   bbd6c:	d93a      	bls.n	bbde4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bbd6e:	4620      	mov	r0, r4
   bbd70:	f7fc fbee 	bl	b8550 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd74:	b308      	cbz	r0, bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd76:	4620      	mov	r0, r4
   bbd78:	f7fc fd4c 	bl	b8814 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd7c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd7e:	4620      	mov	r0, r4
   bbd80:	f7fc fdca 	bl	b8918 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd84:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd86:	4620      	mov	r0, r4
   bbd88:	f7fd f85a 	bl	b8e40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbd8c:	782b      	ldrb	r3, [r5, #0]
   bbd8e:	4283      	cmp	r3, r0
   bbd90:	d213      	bcs.n	bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbd92:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd96:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbd98:	782b      	ldrb	r3, [r5, #0]
   bbd9a:	3301      	adds	r3, #1
   bbd9c:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbd9e:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbda0:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbda2:	d10a      	bne.n	bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbda4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbda8:	b913      	cbnz	r3, bbdb0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbdaa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbdae:	b123      	cbz	r3, bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbdb0:	498f      	ldr	r1, [pc, #572]	; (bbff0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbdb2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdb6:	f004 fe04 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbdba:	4620      	mov	r0, r4
   bbdbc:	f7fc f9c8 	bl	b8150 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbdc0:	b128      	cbz	r0, bbdce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbdc2:	2201      	movs	r2, #1
   bbdc4:	f10d 010f 	add.w	r1, sp, #15
   bbdc8:	4620      	mov	r0, r4
   bbdca:	f7ff fd4f 	bl	bb86c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbdce:	4620      	mov	r0, r4
   bbdd0:	f7fc faee 	bl	b83b0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbdd4:	2800      	cmp	r0, #0
   bbdd6:	d081      	beq.n	bbcdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbdd8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbddc:	4620      	mov	r0, r4
   bbdde:	f7fc fbaf 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbde2:	e77b      	b.n	bbcdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbde4:	18e2      	adds	r2, r4, r3
   bbde6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdea:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbdee:	2b05      	cmp	r3, #5
   bbdf0:	f47f af74 	bne.w	bbcdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbdf4:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbdf8:	b923      	cbnz	r3, bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbdfa:	4620      	mov	r0, r4
   bbdfc:	f7fc fa70 	bl	b82e0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbe00:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbe04:	4620      	mov	r0, r4
   bbe06:	f7fc fba3 	bl	b8550 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbe0a:	b1b8      	cbz	r0, bbe3c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbe0c:	4620      	mov	r0, r4
   bbe0e:	f7fc fd01 	bl	b8814 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbe12:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbe14:	4620      	mov	r0, r4
   bbe16:	f7fc fd7f 	bl	b8918 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbe1a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe1c:	4620      	mov	r0, r4
   bbe1e:	f7fd f80f 	bl	b8e40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbe22:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe24:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbe26:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbe28:	2100      	movs	r1, #0
   bbe2a:	4628      	mov	r0, r5
   bbe2c:	f007 fe50 	bl	c3ad0 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbe30:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbe34:	602b      	str	r3, [r5, #0]
   bbe36:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbe3a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbe3c:	4620      	mov	r0, r4
   bbe3e:	f7fc f987 	bl	b8150 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbe42:	b128      	cbz	r0, bbe50 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbe44:	2206      	movs	r2, #6
   bbe46:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbe4a:	4620      	mov	r0, r4
   bbe4c:	f7ff fd0e 	bl	bb86c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbe50:	4620      	mov	r0, r4
   bbe52:	f7fc faad 	bl	b83b0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbe56:	b1e8      	cbz	r0, bbe94 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbe58:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	f7fc fb6f 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbe62:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbe66:	4620      	mov	r0, r4
   bbe68:	f7fc fb6a 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbe6c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbe70:	4620      	mov	r0, r4
   bbe72:	f7fc fb65 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbe76:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbe7a:	4620      	mov	r0, r4
   bbe7c:	f7fc fb60 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbe80:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbe84:	4620      	mov	r0, r4
   bbe86:	f7fc fb5b 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbe8a:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbe8e:	4620      	mov	r0, r4
   bbe90:	f7fc fb56 	bl	b8540 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbe94:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbe98:	2b05      	cmp	r3, #5
   bbe9a:	f67f af1f 	bls.w	bbcdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbe9e:	e766      	b.n	bbd6e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbea0:	2d2a      	cmp	r5, #42	; 0x2a
   bbea2:	f040 808b 	bne.w	bbfbc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbea6:	091a      	lsrs	r2, r3, #4
   bbea8:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbeac:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbeae:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbeb0:	f003 030f 	and.w	r3, r3, #15
   bbeb4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbeb8:	bf84      	itt	hi
   bbeba:	3237      	addhi	r2, #55	; 0x37
   bbebc:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbebe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbec2:	bf88      	it	hi
   bbec4:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbec8:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbecc:	42ab      	cmp	r3, r5
   bbece:	eb08 0b06 	add.w	fp, r8, r6
   bbed2:	d143      	bne.n	bbf5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbed4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbed8:	4553      	cmp	r3, sl
   bbeda:	d13f      	bne.n	bbf5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbedc:	4620      	mov	r0, r4
   bbede:	f7fc fd9d 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbee2:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbee4:	4620      	mov	r0, r4
   bbee6:	f7fc fe1d 	bl	b8b24 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbeea:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbeec:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbeee:	2100      	movs	r1, #0
   bbef0:	f007 fdee 	bl	c3ad0 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbef4:	783a      	ldrb	r2, [r7, #0]
   bbef6:	4641      	mov	r1, r8
   bbef8:	4630      	mov	r0, r6
   bbefa:	f007 fdc1 	bl	c3a80 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbefe:	783b      	ldrb	r3, [r7, #0]
   bbf00:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbf02:	4620      	mov	r0, r4
   bbf04:	f7fd f80e 	bl	b8f24 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbf08:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbf0a:	f025 0503 	bic.w	r5, r5, #3
   bbf0e:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbf12:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbf14:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbf18:	4620      	mov	r0, r4
   bbf1a:	f7fc fba5 	bl	b8668 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbf1e:	b1d0      	cbz	r0, bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbf20:	f01a 0104 	ands.w	r1, sl, #4
   bbf24:	d117      	bne.n	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbf26:	4620      	mov	r0, r4
   bbf28:	9102      	str	r1, [sp, #8]
   bbf2a:	f7fc fe7f 	bl	b8c2c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbf2e:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf30:	4620      	mov	r0, r4
   bbf32:	f7fc feff 	bl	b8d34 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf36:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf38:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf3a:	464a      	mov	r2, r9
   bbf3c:	f007 fdc8 	bl	c3ad0 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbf40:	783a      	ldrb	r2, [r7, #0]
   bbf42:	4641      	mov	r1, r8
   bbf44:	4650      	mov	r0, sl
   bbf46:	f007 fd9b 	bl	c3a80 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf4a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbf4e:	783b      	ldrb	r3, [r7, #0]
   bbf50:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf54:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbf56:	2300      	movs	r3, #0
   bbf58:	7023      	strb	r3, [r4, #0]
   bbf5a:	e4f9      	b.n	bb950 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf5c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf60:	b91b      	cbnz	r3, bbf6a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbf62:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf66:	2b00      	cmp	r3, #0
   bbf68:	d0f5      	beq.n	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbf6a:	4922      	ldr	r1, [pc, #136]	; (bbff4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbf6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf70:	f004 fd0d 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbf74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf78:	6803      	ldr	r3, [r0, #0]
   bbf7a:	4629      	mov	r1, r5
   bbf7c:	689b      	ldr	r3, [r3, #8]
   bbf7e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbf80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf84:	6803      	ldr	r3, [r0, #0]
   bbf86:	4651      	mov	r1, sl
   bbf88:	689b      	ldr	r3, [r3, #8]
   bbf8a:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbf8c:	491a      	ldr	r1, [pc, #104]	; (bbff8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbf8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf92:	f004 fcfc 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbf96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf9a:	f89b 1000 	ldrb.w	r1, [fp]
   bbf9e:	6803      	ldr	r3, [r0, #0]
   bbfa0:	689b      	ldr	r3, [r3, #8]
   bbfa2:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbfa4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa8:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbfac:	6803      	ldr	r3, [r0, #0]
   bbfae:	689b      	ldr	r3, [r3, #8]
   bbfb0:	4798      	blx	r3
              _debugSerial->println();
   bbfb2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfb6:	f004 fcee 	bl	c0996 <_ZN5Print7printlnEv>
   bbfba:	e7cc      	b.n	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbfbc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbfc0:	b91b      	cbnz	r3, bbfca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbfc2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbfc6:	2b00      	cmp	r3, #0
   bbfc8:	d0c5      	beq.n	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbfca:	490c      	ldr	r1, [pc, #48]	; (bbffc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbfcc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfd0:	f004 fcf7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbfd4:	e7bf      	b.n	bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbfd6:	2e03      	cmp	r6, #3
   bbfd8:	f47f acba 	bne.w	bb950 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbfdc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbfe0:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bbfe4:	4620      	mov	r0, r4
   bbfe6:	f7fd f821 	bl	b902c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bbfea:	7020      	strb	r0, [r4, #0]
}
   bbfec:	e4b0      	b.n	bb950 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bbfee:	bf00      	nop
   bbff0:	000c6a38 	.word	0x000c6a38
   bbff4:	000c6a56 	.word	0x000c6a56
   bbff8:	000c6a81 	.word	0x000c6a81
   bbffc:	000c6a87 	.word	0x000c6a87

000bc000 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc000:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc004:	4604      	mov	r4, r0
   bc006:	4699      	mov	r9, r3
   bc008:	460f      	mov	r7, r1
   bc00a:	4690      	mov	r8, r2
   bc00c:	f001 f94c 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc010:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc014:	1ac0      	subs	r0, r0, r3
   bc016:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc01a:	4298      	cmp	r0, r3
   bc01c:	f0c0 80a8 	bcc.w	bc170 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc020:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc024:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc028:	f003 f9e4 	bl	bf3f4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc02c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc030:	21fd      	movs	r1, #253	; 0xfd
   bc032:	f7fb fe53 	bl	b7cdc <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc036:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc03a:	2100      	movs	r1, #0
   bc03c:	f003 f9e1 	bl	bf402 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc040:	4605      	mov	r5, r0
   bc042:	b1a8      	cbz	r0, bc070 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc044:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc048:	b933      	cbnz	r3, bc058 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc04a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc04e:	b91b      	cbnz	r3, bc058 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc050:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc052:	b002      	add	sp, #8
   bc054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc058:	4946      	ldr	r1, [pc, #280]	; (bc174 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc05a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc05e:	f004 fc96 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc062:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc066:	220a      	movs	r2, #10
   bc068:	4629      	mov	r1, r5
   bc06a:	f7fb fe2e 	bl	b7cca <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc06e:	e7ef      	b.n	bc050 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc070:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc074:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc078:	2202      	movs	r2, #2
   bc07a:	f003 f9b8 	bl	bf3ee <_ZN7TwoWire11requestFromEhj>
   bc07e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc080:	2d02      	cmp	r5, #2
   bc082:	d008      	beq.n	bc096 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc084:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc088:	b91b      	cbnz	r3, bc092 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc08a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc08e:	2b00      	cmp	r3, #0
   bc090:	d0de      	beq.n	bc050 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc092:	4939      	ldr	r1, [pc, #228]	; (bc178 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc094:	e7e1      	b.n	bc05a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc096:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc09a:	6803      	ldr	r3, [r0, #0]
   bc09c:	695b      	ldr	r3, [r3, #20]
   bc09e:	4798      	blx	r3
   bc0a0:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc0a2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc0a6:	6803      	ldr	r3, [r0, #0]
   bc0a8:	695b      	ldr	r3, [r3, #20]
   bc0aa:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc0ac:	b2c6      	uxtb	r6, r0
   bc0ae:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc0b2:	b22a      	sxth	r2, r5
   bc0b4:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc0b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0ba:	b955      	cbnz	r5, bc0d2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc0bc:	b123      	cbz	r3, bc0c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc0be:	492f      	ldr	r1, [pc, #188]	; (bc17c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc0c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0c4:	f004 fc7d 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc0c8:	f001 f8ee 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc0cc:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc0d0:	e7be      	b.n	bc050 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc0d2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc0d4:	bfb8      	it	lt
   bc0d6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc0da:	2d64      	cmp	r5, #100	; 0x64
   bc0dc:	d936      	bls.n	bc14c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc0de:	b17b      	cbz	r3, bc100 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc0e0:	4927      	ldr	r1, [pc, #156]	; (bc180 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc0e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0e6:	f004 fc52 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc0ea:	4629      	mov	r1, r5
   bc0ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0f0:	220a      	movs	r2, #10
   bc0f2:	f004 fc68 	bl	c09c6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc0f6:	4923      	ldr	r1, [pc, #140]	; (bc184 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc0f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0fc:	f004 fc61 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc100:	2d00      	cmp	r5, #0
   bc102:	d035      	beq.n	bc170 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc104:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc106:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc10a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc10e:	42ae      	cmp	r6, r5
   bc110:	bf28      	it	cs
   bc112:	462e      	movcs	r6, r5
   bc114:	4632      	mov	r2, r6
   bc116:	f003 f96a 	bl	bf3ee <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc11a:	b2c0      	uxtb	r0, r0
   bc11c:	4286      	cmp	r6, r0
   bc11e:	d197      	bne.n	bc050 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc120:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc124:	fa1f f38a 	uxth.w	r3, sl
   bc128:	429e      	cmp	r6, r3
   bc12a:	d91e      	bls.n	bc16a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc12c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc130:	6803      	ldr	r3, [r0, #0]
   bc132:	695b      	ldr	r3, [r3, #20]
   bc134:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc136:	f8cd 9000 	str.w	r9, [sp]
   bc13a:	b2c1      	uxtb	r1, r0
   bc13c:	4643      	mov	r3, r8
   bc13e:	463a      	mov	r2, r7
   bc140:	4620      	mov	r0, r4
   bc142:	f7ff fbc1 	bl	bb8c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc146:	f10a 0a01 	add.w	sl, sl, #1
   bc14a:	e7eb      	b.n	bc124 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc14c:	2b00      	cmp	r3, #0
   bc14e:	d0d7      	beq.n	bc100 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc150:	490d      	ldr	r1, [pc, #52]	; (bc188 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc152:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc156:	f004 fc1a 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
   bc15a:	4629      	mov	r1, r5
   bc15c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc160:	220a      	movs	r2, #10
   bc162:	f004 fc30 	bl	c09c6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc166:	4909      	ldr	r1, [pc, #36]	; (bc18c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc168:	e7c6      	b.n	bc0f8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc16a:	1bad      	subs	r5, r5, r6
   bc16c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc16e:	e7c7      	b.n	bc100 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc170:	2001      	movs	r0, #1
   bc172:	e76e      	b.n	bc052 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc174:	000c6aa8 	.word	0x000c6aa8
   bc178:	000c6adc 	.word	0x000c6adc
   bc17c:	000c6b11 	.word	0x000c6b11
   bc180:	000c6b39 	.word	0x000c6b39
   bc184:	000c6b59 	.word	0x000c6b59
   bc188:	000c6b69 	.word	0x000c6b69
   bc18c:	000c6b81 	.word	0x000c6b81

000bc190 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc192:	4604      	mov	r4, r0
   bc194:	460d      	mov	r5, r1
   bc196:	4616      	mov	r6, r2
   bc198:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc19a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc19e:	6803      	ldr	r3, [r0, #0]
   bc1a0:	691b      	ldr	r3, [r3, #16]
   bc1a2:	4798      	blx	r3
   bc1a4:	b160      	cbz	r0, bc1c0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc1a6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc1aa:	6803      	ldr	r3, [r0, #0]
   bc1ac:	695b      	ldr	r3, [r3, #20]
   bc1ae:	4798      	blx	r3
   bc1b0:	9700      	str	r7, [sp, #0]
   bc1b2:	b2c1      	uxtb	r1, r0
   bc1b4:	4633      	mov	r3, r6
   bc1b6:	462a      	mov	r2, r5
   bc1b8:	4620      	mov	r0, r4
   bc1ba:	f7ff fb85 	bl	bb8c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc1be:	e7ec      	b.n	bc19a <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc1c0:	2001      	movs	r0, #1
   bc1c2:	b003      	add	sp, #12
   bc1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc1c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc1cc:	4604      	mov	r4, r0
   bc1ce:	b087      	sub	sp, #28
   bc1d0:	460d      	mov	r5, r1
   bc1d2:	4616      	mov	r6, r2
   bc1d4:	461f      	mov	r7, r3
   bc1d6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1da:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc1de:	fa5f f388 	uxtb.w	r3, r8
   bc1e2:	429a      	cmp	r2, r3
   bc1e4:	d90b      	bls.n	bc1fe <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc1e6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc1ea:	4620      	mov	r0, r4
   bc1ec:	5cd1      	ldrb	r1, [r2, r3]
   bc1ee:	9700      	str	r7, [sp, #0]
   bc1f0:	4633      	mov	r3, r6
   bc1f2:	462a      	mov	r2, r5
   bc1f4:	f7ff fb68 	bl	bb8c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1f8:	f108 0801 	add.w	r8, r8, #1
   bc1fc:	e7ed      	b.n	bc1da <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc1fe:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc202:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc206:	4a25      	ldr	r2, [pc, #148]	; (bc29c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc208:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc20c:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc210:	a902      	add	r1, sp, #8
   bc212:	f04f 0901 	mov.w	r9, #1
   bc216:	9202      	str	r2, [sp, #8]
   bc218:	9304      	str	r3, [sp, #16]
   bc21a:	f88d 800c 	strb.w	r8, [sp, #12]
   bc21e:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc222:	f004 fcf3 	bl	c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc226:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc22a:	4641      	mov	r1, r8
   bc22c:	f005 f979 	bl	c1522 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc230:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc234:	21ff      	movs	r1, #255	; 0xff
   bc236:	f004 fd89 	bl	c0d4c <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc23a:	28ff      	cmp	r0, #255	; 0xff
   bc23c:	d116      	bne.n	bc26c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc23e:	7823      	ldrb	r3, [r4, #0]
   bc240:	b983      	cbnz	r3, bc264 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc242:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc246:	4649      	mov	r1, r9
   bc248:	f005 f96b 	bl	c1522 <digitalWrite>
    _spiPort->endTransaction();
   bc24c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc250:	f004 fcc2 	bl	c0bd8 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc254:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc258:	f001 fb70 	bl	bd93c <delay>
} // end checkUbloxSpi()
   bc25c:	2001      	movs	r0, #1
   bc25e:	b007      	add	sp, #28
   bc260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc264:	28ff      	cmp	r0, #255	; 0xff
   bc266:	d101      	bne.n	bc26c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc268:	7823      	ldrb	r3, [r4, #0]
   bc26a:	b163      	cbz	r3, bc286 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc26c:	4601      	mov	r1, r0
   bc26e:	9700      	str	r7, [sp, #0]
   bc270:	4620      	mov	r0, r4
   bc272:	4633      	mov	r3, r6
   bc274:	462a      	mov	r2, r5
   bc276:	f7ff fb27 	bl	bb8c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc27a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc27e:	21ff      	movs	r1, #255	; 0xff
   bc280:	f004 fd64 	bl	c0d4c <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc284:	e7ee      	b.n	bc264 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc286:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc28a:	2101      	movs	r1, #1
   bc28c:	f005 f949 	bl	c1522 <digitalWrite>
  _spiPort->endTransaction();
   bc290:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc294:	f004 fca0 	bl	c0bd8 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc298:	e7e0      	b.n	bc25c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc29a:	bf00      	nop
   bc29c:	000c61d0 	.word	0x000c61d0

000bc2a0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc2a0:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc2a2:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc2a6:	b91c      	cbnz	r4, bc2b0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc2ac:	f7ff bea8 	b.w	bc000 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc2b0:	2c01      	cmp	r4, #1
   bc2b2:	d103      	bne.n	bc2bc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc2b8:	f7ff bf6a 	b.w	bc190 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc2bc:	2c02      	cmp	r4, #2
   bc2be:	d103      	bne.n	bc2c8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc2c4:	f7ff bf80 	b.w	bc1c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc2c8:	2000      	movs	r0, #0
   bc2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc2ce:	4770      	bx	lr

000bc2d0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2d4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc2d6:	2102      	movs	r1, #2
   bc2d8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2da:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2de:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2e2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc2e6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2e8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2ec:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2f0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc2f4:	4604      	mov	r4, r0
   bc2f6:	4617      	mov	r7, r2
   bc2f8:	4698      	mov	r8, r3
   bc2fa:	f000 ffd5 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc2fe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc302:	4606      	mov	r6, r0
   bc304:	4481      	add	r9, r0
   bc306:	f000 ffcf 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc30a:	4581      	cmp	r9, r0
   bc30c:	f240 80a8 	bls.w	bc460 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc310:	4643      	mov	r3, r8
   bc312:	463a      	mov	r2, r7
   bc314:	4629      	mov	r1, r5
   bc316:	4620      	mov	r0, r4
   bc318:	f7ff ffc2 	bl	bc2a0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc31c:	2800      	cmp	r0, #0
   bc31e:	f000 809b 	beq.w	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc322:	7beb      	ldrb	r3, [r5, #15]
   bc324:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc328:	2b01      	cmp	r3, #1
   bc32a:	d125      	bne.n	bc378 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc32c:	2901      	cmp	r1, #1
   bc32e:	f040 80ec 	bne.w	bc50a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc332:	7bab      	ldrb	r3, [r5, #14]
   bc334:	2b01      	cmp	r3, #1
   bc336:	782b      	ldrb	r3, [r5, #0]
   bc338:	d13b      	bne.n	bc3b2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc33a:	42bb      	cmp	r3, r7
   bc33c:	d13e      	bne.n	bc3bc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc33e:	786a      	ldrb	r2, [r5, #1]
   bc340:	4542      	cmp	r2, r8
   bc342:	d136      	bne.n	bc3b2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc344:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc348:	b913      	cbnz	r3, bc350 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc34a:	200b      	movs	r0, #11
}
   bc34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc350:	4978      	ldr	r1, [pc, #480]	; (bc534 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc352:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc356:	f004 fb1a 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc35a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc35e:	f000 ffa3 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc362:	220a      	movs	r2, #10
   bc364:	1b81      	subs	r1, r0, r6
   bc366:	4628      	mov	r0, r5
   bc368:	f7fb fc9b 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc36c:	4972      	ldr	r1, [pc, #456]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc36e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc372:	f004 fb26 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc376:	e7e8      	b.n	bc34a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc378:	2b02      	cmp	r3, #2
   bc37a:	d137      	bne.n	bc3ec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc37c:	2901      	cmp	r1, #1
   bc37e:	f040 80aa 	bne.w	bc4d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc382:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc386:	b193      	cbz	r3, bc3ae <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc388:	496c      	ldr	r1, [pc, #432]	; (bc53c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc38a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc38e:	f004 fafe 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc392:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc396:	f000 ff87 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc39a:	220a      	movs	r2, #10
   bc39c:	1b81      	subs	r1, r0, r6
   bc39e:	4628      	mov	r0, r5
   bc3a0:	f7fb fc7f 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3a4:	4964      	ldr	r1, [pc, #400]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3aa:	f004 fb0a 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc3ae:	200a      	movs	r0, #10
   bc3b0:	e7cc      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc3b2:	42bb      	cmp	r3, r7
   bc3b4:	d102      	bne.n	bc3bc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc3b6:	786b      	ldrb	r3, [r5, #1]
   bc3b8:	4543      	cmp	r3, r8
   bc3ba:	d019      	beq.n	bc3f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc3bc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3c0:	b193      	cbz	r3, bc3e8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc3c2:	495f      	ldr	r1, [pc, #380]	; (bc540 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc3c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3c8:	f004 fae1 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3cc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3d0:	f000 ff6a 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc3d4:	220a      	movs	r2, #10
   bc3d6:	1b81      	subs	r1, r0, r6
   bc3d8:	4628      	mov	r0, r5
   bc3da:	f7fb fc62 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3de:	4956      	ldr	r1, [pc, #344]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3e4:	f004 faed 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc3e8:	200d      	movs	r0, #13
   bc3ea:	e7af      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc3ec:	2901      	cmp	r1, #1
   bc3ee:	d172      	bne.n	bc4d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc3f0:	89eb      	ldrh	r3, [r5, #14]
   bc3f2:	bb8b      	cbnz	r3, bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc3f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3f8:	b193      	cbz	r3, bc420 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc3fa:	4952      	ldr	r1, [pc, #328]	; (bc544 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc3fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc400:	f004 fac5 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc404:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc408:	f000 ff4e 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc40c:	220a      	movs	r2, #10
   bc40e:	1b81      	subs	r1, r0, r6
   bc410:	4628      	mov	r0, r5
   bc412:	f7fb fc46 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc416:	4948      	ldr	r1, [pc, #288]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc418:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc41c:	f004 fad1 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc420:	2002      	movs	r0, #2
   bc422:	e793      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc424:	430b      	orrs	r3, r1
   bc426:	d117      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc428:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc42c:	b193      	cbz	r3, bc454 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc42e:	4946      	ldr	r1, [pc, #280]	; (bc548 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc430:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc434:	f004 faab 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc438:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc43c:	f000 ff34 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc440:	220a      	movs	r2, #10
   bc442:	1b81      	subs	r1, r0, r6
   bc444:	4628      	mov	r0, r5
   bc446:	f7fb fc2c 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc44a:	493b      	ldr	r1, [pc, #236]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc44c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc450:	f004 fab7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc454:	2001      	movs	r0, #1
   bc456:	e779      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc458:	2001      	movs	r0, #1
   bc45a:	f001 fa6f 	bl	bd93c <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc45e:	e752      	b.n	bc306 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc460:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc462:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc466:	2a01      	cmp	r2, #1
   bc468:	d11f      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc46a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc46e:	2a02      	cmp	r2, #2
   bc470:	d11b      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc472:	7baa      	ldrb	r2, [r5, #14]
   bc474:	2a01      	cmp	r2, #1
   bc476:	d118      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc478:	782a      	ldrb	r2, [r5, #0]
   bc47a:	42ba      	cmp	r2, r7
   bc47c:	d115      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc47e:	786a      	ldrb	r2, [r5, #1]
   bc480:	4542      	cmp	r2, r8
   bc482:	d112      	bne.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc484:	2b00      	cmp	r3, #0
   bc486:	f43f af60 	beq.w	bc34a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc48a:	4930      	ldr	r1, [pc, #192]	; (bc54c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc48c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc490:	f004 fa7d 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc494:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc498:	f000 ff06 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc49c:	220a      	movs	r2, #10
   bc49e:	1b81      	subs	r1, r0, r6
   bc4a0:	4628      	mov	r0, r5
   bc4a2:	f7fb fbfe 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc4a6:	492a      	ldr	r1, [pc, #168]	; (bc550 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc4a8:	e761      	b.n	bc36e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc4aa:	b193      	cbz	r3, bc4d2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc4ac:	4929      	ldr	r1, [pc, #164]	; (bc554 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc4ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b2:	f004 fa6c 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc4b6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4ba:	f000 fef5 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc4be:	220a      	movs	r2, #10
   bc4c0:	1b81      	subs	r1, r0, r6
   bc4c2:	4628      	mov	r0, r5
   bc4c4:	f7fb fbed 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc4c8:	4923      	ldr	r1, [pc, #140]	; (bc558 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc4ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ce:	f004 fa78 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc4d2:	2003      	movs	r0, #3
   bc4d4:	e73a      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4d6:	2903      	cmp	r1, #3
   bc4d8:	d1a4      	bne.n	bc424 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc4da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4de:	b193      	cbz	r3, bc506 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc4e0:	491e      	ldr	r1, [pc, #120]	; (bc55c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc4e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4e6:	f004 fa52 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc4ea:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4ee:	f000 fedb 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc4f2:	220a      	movs	r2, #10
   bc4f4:	1b81      	subs	r1, r0, r6
   bc4f6:	4628      	mov	r0, r5
   bc4f8:	f7fb fbd3 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc4fc:	490e      	ldr	r1, [pc, #56]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc4fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc502:	f004 fa5e 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc506:	2004      	movs	r0, #4
   bc508:	e720      	b.n	bc34c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc50a:	2903      	cmp	r1, #3
   bc50c:	d0e5      	beq.n	bc4da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc50e:	2900      	cmp	r1, #0
   bc510:	d1a2      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc512:	7bab      	ldrb	r3, [r5, #14]
   bc514:	2b01      	cmp	r3, #1
   bc516:	d19f      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc518:	782b      	ldrb	r3, [r5, #0]
   bc51a:	42bb      	cmp	r3, r7
   bc51c:	d19c      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc51e:	786b      	ldrb	r3, [r5, #1]
   bc520:	4543      	cmp	r3, r8
   bc522:	d199      	bne.n	bc458 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc524:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc528:	2b00      	cmp	r3, #0
   bc52a:	f43f af0e 	beq.w	bc34a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc52e:	490c      	ldr	r1, [pc, #48]	; (bc560 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc530:	e70f      	b.n	bc352 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc532:	bf00      	nop
   bc534:	000c6b88 	.word	0x000c6b88
   bc538:	000c6bc5 	.word	0x000c6bc5
   bc53c:	000c6bcb 	.word	0x000c6bcb
   bc540:	000c6bfc 	.word	0x000c6bfc
   bc544:	000c6c2e 	.word	0x000c6c2e
   bc548:	000c6cce 	.word	0x000c6cce
   bc54c:	000c6d0f 	.word	0x000c6d0f
   bc550:	000c6d42 	.word	0x000c6d42
   bc554:	000c6d4a 	.word	0x000c6d4a
   bc558:	000c6d6d 	.word	0x000c6d6d
   bc55c:	000c6c54 	.word	0x000c6c54
   bc560:	000c6c8f 	.word	0x000c6c8f

000bc564 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc568:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc56a:	2102      	movs	r1, #2
   bc56c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc56e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc572:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc576:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc57a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc57c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc580:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc584:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc588:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc58c:	4604      	mov	r4, r0
   bc58e:	4617      	mov	r7, r2
   bc590:	4698      	mov	r8, r3
   bc592:	f000 fe89 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc596:	f240 1a01 	movw	sl, #257	; 0x101
   bc59a:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc59c:	f240 2b01 	movw	fp, #513	; 0x201
   bc5a0:	f000 fe82 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc5a4:	1b80      	subs	r0, r0, r6
   bc5a6:	4548      	cmp	r0, r9
   bc5a8:	d269      	bcs.n	bc67e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc5aa:	4643      	mov	r3, r8
   bc5ac:	463a      	mov	r2, r7
   bc5ae:	4629      	mov	r1, r5
   bc5b0:	4620      	mov	r0, r4
   bc5b2:	f7ff fe75 	bl	bc2a0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc5b6:	2800      	cmp	r0, #0
   bc5b8:	d05d      	beq.n	bc676 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc5ba:	89ea      	ldrh	r2, [r5, #14]
   bc5bc:	4552      	cmp	r2, sl
   bc5be:	d11e      	bne.n	bc5fe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5c0:	782b      	ldrb	r3, [r5, #0]
   bc5c2:	42bb      	cmp	r3, r7
   bc5c4:	d11b      	bne.n	bc5fe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5c6:	786b      	ldrb	r3, [r5, #1]
   bc5c8:	4543      	cmp	r3, r8
   bc5ca:	d118      	bne.n	bc5fe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc5cc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5d0:	b193      	cbz	r3, bc5f8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc5d2:	4937      	ldr	r1, [pc, #220]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc5d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5d8:	f004 f9d9 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc5dc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc5e0:	f000 fe62 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc5e4:	220a      	movs	r2, #10
   bc5e6:	1b81      	subs	r1, r0, r6
   bc5e8:	4628      	mov	r0, r5
   bc5ea:	f7fb fb5a 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc5ee:	4931      	ldr	r1, [pc, #196]	; (bc6b4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc5f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5f4:	f004 f9e5 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc5f8:	200b      	movs	r0, #11
}
   bc5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc5fe:	7beb      	ldrb	r3, [r5, #15]
   bc600:	2b01      	cmp	r3, #1
   bc602:	d11d      	bne.n	bc640 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc604:	782b      	ldrb	r3, [r5, #0]
   bc606:	42bb      	cmp	r3, r7
   bc608:	d102      	bne.n	bc610 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc60a:	786b      	ldrb	r3, [r5, #1]
   bc60c:	4543      	cmp	r3, r8
   bc60e:	d032      	beq.n	bc676 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc610:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc614:	b193      	cbz	r3, bc63c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc616:	4928      	ldr	r1, [pc, #160]	; (bc6b8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc618:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc61c:	f004 f9b7 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc620:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc624:	f000 fe40 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc628:	220a      	movs	r2, #10
   bc62a:	1b81      	subs	r1, r0, r6
   bc62c:	4628      	mov	r0, r5
   bc62e:	f7fb fb38 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc632:	4920      	ldr	r1, [pc, #128]	; (bc6b4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc634:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc638:	f004 f9c3 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc63c:	200d      	movs	r0, #13
   bc63e:	e7dc      	b.n	bc5fa <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc640:	455a      	cmp	r2, fp
   bc642:	d018      	beq.n	bc676 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc644:	b9bb      	cbnz	r3, bc676 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc646:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc64a:	b193      	cbz	r3, bc672 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc64c:	491b      	ldr	r1, [pc, #108]	; (bc6bc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc64e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc652:	f004 f99c 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc656:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc65a:	f000 fe25 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc65e:	220a      	movs	r2, #10
   bc660:	1b81      	subs	r1, r0, r6
   bc662:	4628      	mov	r0, r5
   bc664:	f7fb fb1d 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc668:	4912      	ldr	r1, [pc, #72]	; (bc6b4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc66a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc66e:	f004 f9a8 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc672:	2002      	movs	r0, #2
   bc674:	e7c1      	b.n	bc5fa <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc676:	2001      	movs	r0, #1
   bc678:	f001 f960 	bl	bd93c <delay>
  while (millis() - startTime < maxTime)
   bc67c:	e790      	b.n	bc5a0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc67e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc682:	b193      	cbz	r3, bc6aa <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc684:	490e      	ldr	r1, [pc, #56]	; (bc6c0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc686:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc68a:	f004 f980 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc68e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc692:	f000 fe09 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
   bc696:	220a      	movs	r2, #10
   bc698:	1b81      	subs	r1, r0, r6
   bc69a:	4628      	mov	r0, r5
   bc69c:	f7fb fb01 	bl	b7ca2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc6a0:	4908      	ldr	r1, [pc, #32]	; (bc6c4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc6a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6a6:	f004 f98c 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc6aa:	2003      	movs	r0, #3
   bc6ac:	e7a5      	b.n	bc5fa <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc6ae:	bf00      	nop
   bc6b0:	000c6d74 	.word	0x000c6d74
   bc6b4:	000c6bc5 	.word	0x000c6bc5
   bc6b8:	000c6dae 	.word	0x000c6dae
   bc6bc:	000c6de2 	.word	0x000c6de2
   bc6c0:	000c6e1b 	.word	0x000c6e1b
   bc6c4:	000c6e40 	.word	0x000c6e40

000bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc6c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc6cc:	4604      	mov	r4, r0
   bc6ce:	4698      	mov	r8, r3
   bc6d0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc6d2:	f7fc fcc9 	bl	b9068 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc6d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc6da:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc6dc:	b14b      	cbz	r3, bc6f2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc6de:	492a      	ldr	r1, [pc, #168]	; (bc788 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc6e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6e4:	f004 f953 	bl	c098e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc6e8:	2201      	movs	r2, #1
   bc6ea:	4629      	mov	r1, r5
   bc6ec:	4620      	mov	r0, r4
   bc6ee:	f7fc fee9 	bl	b94c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc6f2:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc6f6:	b993      	cbnz	r3, bc71e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc6f8:	463a      	mov	r2, r7
   bc6fa:	4629      	mov	r1, r5
   bc6fc:	4620      	mov	r0, r4
   bc6fe:	f7fc fce1 	bl	b90c4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc702:	4606      	mov	r6, r0
   bc704:	b188      	cbz	r0, bc72a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc706:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc70a:	b123      	cbz	r3, bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc70c:	491f      	ldr	r1, [pc, #124]	; (bc78c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc70e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc712:	f004 f956 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc716:	4630      	mov	r0, r6
   bc718:	b002      	add	sp, #8
   bc71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc71e:	2b01      	cmp	r3, #1
   bc720:	d11b      	bne.n	bc75a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc722:	4629      	mov	r1, r5
   bc724:	4620      	mov	r0, r4
   bc726:	f7fc fd8f 	bl	b9248 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc72a:	b35f      	cbz	r7, bc784 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc72c:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc72e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc732:	2a06      	cmp	r2, #6
   bc734:	d002      	beq.n	bc73c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc736:	f1b8 0f00 	cmp.w	r8, #0
   bc73a:	d015      	beq.n	bc768 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc73c:	b123      	cbz	r3, bc748 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc73e:	4914      	ldr	r1, [pc, #80]	; (bc790 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc740:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc744:	f004 f93d 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc748:	786b      	ldrb	r3, [r5, #1]
   bc74a:	782a      	ldrb	r2, [r5, #0]
   bc74c:	9700      	str	r7, [sp, #0]
   bc74e:	4629      	mov	r1, r5
   bc750:	4620      	mov	r0, r4
   bc752:	f7ff fdbd 	bl	bc2d0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc756:	4606      	mov	r6, r0
   bc758:	e7dd      	b.n	bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc75a:	2b02      	cmp	r3, #2
   bc75c:	d1e5      	bne.n	bc72a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc75e:	4629      	mov	r1, r5
   bc760:	4620      	mov	r0, r4
   bc762:	f7fc fdcb 	bl	b92fc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc766:	e7e0      	b.n	bc72a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc768:	b123      	cbz	r3, bc774 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc76a:	490a      	ldr	r1, [pc, #40]	; (bc794 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc76c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc770:	f004 f927 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc774:	786b      	ldrb	r3, [r5, #1]
   bc776:	782a      	ldrb	r2, [r5, #0]
   bc778:	9700      	str	r7, [sp, #0]
   bc77a:	4629      	mov	r1, r5
   bc77c:	4620      	mov	r0, r4
   bc77e:	f7ff fef1 	bl	bc564 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc782:	e7e8      	b.n	bc756 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc784:	463e      	mov	r6, r7
   bc786:	e7c6      	b.n	bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc788:	000c6e5b 	.word	0x000c6e5b
   bc78c:	000c6e66 	.word	0x000c6e66
   bc790:	000c6e7e 	.word	0x000c6e7e
   bc794:	000c6ea4 	.word	0x000c6ea4

000bc798 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc798:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc79a:	4b09      	ldr	r3, [pc, #36]	; (bc7c0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc79c:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7a0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7a4:	2300      	movs	r3, #0
   bc7a6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc7aa:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc7ac:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc7b0:	f7ff ff8a 	bl	bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc7b4:	f1a0 030b 	sub.w	r3, r0, #11
   bc7b8:	4258      	negs	r0, r3
   bc7ba:	4158      	adcs	r0, r3
   bc7bc:	bd38      	pop	{r3, r4, r5, pc}
   bc7be:	bf00      	nop
   bc7c0:	00010006 	.word	0x00010006

000bc7c4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7c6:	4615      	mov	r5, r2
   bc7c8:	461a      	mov	r2, r3
   bc7ca:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc7cc:	9301      	str	r3, [sp, #4]
   bc7ce:	f7ff ffe3 	bl	bc798 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7d2:	b190      	cbz	r0, bc7fa <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7d4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7d8:	4b09      	ldr	r3, [pc, #36]	; (bc800 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc7da:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7de:	2300      	movs	r3, #0
   bc7e0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7e4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7e6:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7e8:	4620      	mov	r0, r4
   bc7ea:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc7ee:	f7ff ff6b 	bl	bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc7f2:	f1a0 030a 	sub.w	r3, r0, #10
   bc7f6:	4258      	negs	r0, r3
   bc7f8:	4158      	adcs	r0, r3
}
   bc7fa:	b003      	add	sp, #12
   bc7fc:	bd30      	pop	{r4, r5, pc}
   bc7fe:	bf00      	nop
   bc800:	00140006 	.word	0x00140006

000bc804 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc806:	4615      	mov	r5, r2
   bc808:	461a      	mov	r2, r3
   bc80a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc80c:	9301      	str	r3, [sp, #4]
   bc80e:	f7ff ffc3 	bl	bc798 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc812:	b190      	cbz	r0, bc83a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc814:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc818:	4b09      	ldr	r3, [pc, #36]	; (bc840 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc81a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc81e:	2300      	movs	r3, #0
   bc820:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc824:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc826:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc828:	4620      	mov	r0, r4
   bc82a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc82e:	f7ff ff4b 	bl	bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc832:	f1a0 030a 	sub.w	r3, r0, #10
   bc836:	4258      	negs	r0, r3
   bc838:	4158      	adcs	r0, r3
}
   bc83a:	b003      	add	sp, #12
   bc83c:	bd30      	pop	{r4, r5, pc}
   bc83e:	bf00      	nop
   bc840:	00140006 	.word	0x00140006

000bc844 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc844:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc846:	460a      	mov	r2, r1
   bc848:	2100      	movs	r1, #0
   bc84a:	f7ff bfbb 	b.w	bc7c4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc850 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bc850:	b510      	push	{r4, lr}
   bc852:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bc854:	2074      	movs	r0, #116	; 0x74
   bc856:	f7f7 fc1e 	bl	b4096 <_Znwj>
   bc85a:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bc85c:	b960      	cbnz	r0, bc878 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc85e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc862:	b913      	cbnz	r3, bc86a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bc864:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc868:	b128      	cbz	r0, bc876 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bc86a:	4908      	ldr	r1, [pc, #32]	; (bc88c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bc86c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc870:	f004 f8a7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc874:	2000      	movs	r0, #0
}
   bc876:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc878:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bc87a:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bc87e:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc882:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bc884:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bc886:	2001      	movs	r0, #1
   bc888:	e7f5      	b.n	bc876 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bc88a:	bf00      	nop
   bc88c:	000c6ecd 	.word	0x000c6ecd

000bc890 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bc890:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc892:	6a03      	ldr	r3, [r0, #32]
{
   bc894:	4604      	mov	r4, r0
   bc896:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bc898:	b91b      	cbnz	r3, bc8a2 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bc89a:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc89c:	f7ff ffd8 	bl	bc850 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc8a0:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc8a2:	6a20      	ldr	r0, [r4, #32]
   bc8a4:	b180      	cbz	r0, bc8c8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc8a6:	7803      	ldrb	r3, [r0, #0]
   bc8a8:	f003 0303 	and.w	r3, r3, #3
   bc8ac:	2b03      	cmp	r3, #3
   bc8ae:	d10d      	bne.n	bc8cc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bc8b0:	2307      	movs	r3, #7
   bc8b2:	2201      	movs	r2, #1
   bc8b4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc8b8:	4620      	mov	r0, r4
   bc8ba:	f7ff fcf1 	bl	bc2a0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bc8be:	6a23      	ldr	r3, [r4, #32]
   bc8c0:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bc8c4:	f000 0001 	and.w	r0, r0, #1
}
   bc8c8:	b002      	add	sp, #8
   bc8ca:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc8cc:	2b01      	cmp	r3, #1
   bc8ce:	f04f 0300 	mov.w	r3, #0
   bc8d2:	d011      	beq.n	bc8f8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bc8d4:	f240 7101 	movw	r1, #1793	; 0x701
   bc8d8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bc8dc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bc8e0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc8e4:	4620      	mov	r0, r4
   bc8e6:	f7ff feef 	bl	bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc8ea:	280b      	cmp	r0, #11
   bc8ec:	d006      	beq.n	bc8fc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc8ee:	f1a0 030d 	sub.w	r3, r0, #13
   bc8f2:	4258      	negs	r0, r3
   bc8f4:	4158      	adcs	r0, r3
   bc8f6:	e7e7      	b.n	bc8c8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bc8f8:	4618      	mov	r0, r3
   bc8fa:	e7e5      	b.n	bc8c8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bc8fc:	2001      	movs	r0, #1
   bc8fe:	e7e3      	b.n	bc8c8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bc900 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc900:	b510      	push	{r4, lr}
   bc902:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc904:	2018      	movs	r0, #24
   bc906:	f7f7 fbc6 	bl	b4096 <_Znwj>
   bc90a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc90c:	b960      	cbnz	r0, bc928 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc90e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc912:	b913      	cbnz	r3, bc91a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc914:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc918:	b128      	cbz	r0, bc926 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc91a:	4905      	ldr	r1, [pc, #20]	; (bc930 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc91c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc920:	f004 f84f 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc924:	2000      	movs	r0, #0
}
   bc926:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc928:	2300      	movs	r3, #0
   bc92a:	7503      	strb	r3, [r0, #20]
  return (true);
   bc92c:	2001      	movs	r0, #1
   bc92e:	e7fa      	b.n	bc926 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc930:	000c6ef4 	.word	0x000c6ef4

000bc934 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc934:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc936:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc938:	4605      	mov	r5, r0
   bc93a:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc93c:	b18b      	cbz	r3, bc962 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc93e:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc942:	4b13      	ldr	r3, [pc, #76]	; (bc990 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc944:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc948:	2300      	movs	r3, #0
   bc94a:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc94e:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc950:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc952:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc956:	f7ff feb7 	bl	bc6c8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc95a:	280b      	cmp	r0, #11
   bc95c:	d10b      	bne.n	bc976 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc95e:	2401      	movs	r4, #1
   bc960:	e00d      	b.n	bc97e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc962:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc964:	f7ff ffcc 	bl	bc900 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc968:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc96a:	9a01      	ldr	r2, [sp, #4]
   bc96c:	2c00      	cmp	r4, #0
   bc96e:	d1e6      	bne.n	bc93e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc970:	4620      	mov	r0, r4
   bc972:	b002      	add	sp, #8
   bc974:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc976:	f1a0 030d 	sub.w	r3, r0, #13
   bc97a:	425c      	negs	r4, r3
   bc97c:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc97e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc980:	b110      	cbz	r0, bc988 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc982:	2118      	movs	r1, #24
   bc984:	f7f7 fb8d 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc988:	2300      	movs	r3, #0
   bc98a:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc98c:	e7f0      	b.n	bc970 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc98e:	bf00      	nop
   bc990:	00010006 	.word	0x00010006

000bc994 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc994:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc996:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc99a:	4604      	mov	r4, r0
   bc99c:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc99e:	b145      	cbz	r5, bc9b2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc9a0:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc9a4:	b9b1      	cbnz	r1, bc9d4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc9a6:	4620      	mov	r0, r4
}
   bc9a8:	b003      	add	sp, #12
   bc9aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc9ae:	f7ff bfc1 	b.w	bc934 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc9b2:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc9b4:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc9b8:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc9bc:	f002 fd1a 	bl	bf3f4 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc9c0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc9c4:	f002 fd21 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
   bc9c8:	9a01      	ldr	r2, [sp, #4]
   bc9ca:	2800      	cmp	r0, #0
   bc9cc:	d0e8      	beq.n	bc9a0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc9ce:	4628      	mov	r0, r5
   bc9d0:	b003      	add	sp, #12
   bc9d2:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc9d4:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc9d6:	bf18      	it	ne
   bc9d8:	2104      	movne	r1, #4
   bc9da:	e7e4      	b.n	bc9a6 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc9dc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc9dc:	b570      	push	{r4, r5, r6, lr}
   bc9de:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc9e0:	2300      	movs	r3, #0
   bc9e2:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc9e6:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc9ea:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc9ee:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc9f2:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc9f6:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc9f8:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc9fc:	b91b      	cbnz	r3, bca06 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc9fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   bca02:	f7fb f9ed 	bl	b7de0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bca06:	4620      	mov	r0, r4
   bca08:	f7fc fe04 	bl	b9614 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bca0c:	4631      	mov	r1, r6
   bca0e:	4620      	mov	r0, r4
   bca10:	f7ff ffc0 	bl	bc994 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bca14:	b110      	cbz	r0, bca1c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bca16:	2501      	movs	r5, #1
}
   bca18:	4628      	mov	r0, r5
   bca1a:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca1c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca20:	b913      	cbnz	r3, bca28 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bca22:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca26:	b123      	cbz	r3, bca32 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bca28:	4917      	ldr	r1, [pc, #92]	; (bca88 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bca2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca2e:	f003 ffc8 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bca32:	4631      	mov	r1, r6
   bca34:	4620      	mov	r0, r4
   bca36:	f7ff ffad 	bl	bc994 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bca3a:	2800      	cmp	r0, #0
   bca3c:	d1eb      	bne.n	bca16 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca3e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca42:	b913      	cbnz	r3, bca4a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bca44:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca48:	b123      	cbz	r3, bca54 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bca4a:	4910      	ldr	r1, [pc, #64]	; (bca8c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bca4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca50:	f003 ffb7 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bca54:	4631      	mov	r1, r6
   bca56:	4620      	mov	r0, r4
   bca58:	f7ff ff9c 	bl	bc994 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bca5c:	2800      	cmp	r0, #0
   bca5e:	d1da      	bne.n	bca16 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bca60:	2d00      	cmp	r5, #0
   bca62:	d0d9      	beq.n	bca18 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bca64:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bca68:	2d00      	cmp	r5, #0
   bca6a:	d0d5      	beq.n	bca18 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca6c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca70:	b91b      	cbnz	r3, bca7a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bca72:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca76:	2b00      	cmp	r3, #0
   bca78:	d0cd      	beq.n	bca16 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bca7a:	4905      	ldr	r1, [pc, #20]	; (bca90 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bca7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca80:	f003 ff9f 	bl	c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bca84:	e7c8      	b.n	bca18 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bca86:	bf00      	nop
   bca88:	000c6f1b 	.word	0x000c6f1b
   bca8c:	000c6f3f 	.word	0x000c6f3f
   bca90:	000c6f62 	.word	0x000c6f62

000bca94 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bca94:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bca96:	6a03      	ldr	r3, [r0, #32]
{
   bca98:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bca9a:	b91b      	cbnz	r3, bcaa4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bca9c:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bca9e:	f7ff fed7 	bl	bc850 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcaa2:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcaa4:	6a20      	ldr	r0, [r4, #32]
   bcaa6:	b1b0      	cbz	r0, bcad6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bcaa8:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bcaac:	07db      	lsls	r3, r3, #31
   bcaae:	d402      	bmi.n	bcab6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bcab0:	4620      	mov	r0, r4
   bcab2:	f7ff feed 	bl	bc890 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bcab6:	6a23      	ldr	r3, [r4, #32]
   bcab8:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bcabc:	f36f 0200 	bfc	r2, #0, #1
   bcac0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bcac4:	6a23      	ldr	r3, [r4, #32]
   bcac6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bcaca:	f36f 0200 	bfc	r2, #0, #1
   bcace:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bcad2:	6a23      	ldr	r3, [r4, #32]
   bcad4:	69d8      	ldr	r0, [r3, #28]
}
   bcad6:	b002      	add	sp, #8
   bcad8:	bd10      	pop	{r4, pc}

000bcada <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bcada:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcadc:	6a03      	ldr	r3, [r0, #32]
{
   bcade:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bcae0:	b91b      	cbnz	r3, bcaea <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bcae2:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcae4:	f7ff feb4 	bl	bc850 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcae8:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcaea:	6a20      	ldr	r0, [r4, #32]
   bcaec:	b1b0      	cbz	r0, bcb1c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bcaee:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bcaf2:	079b      	lsls	r3, r3, #30
   bcaf4:	d402      	bmi.n	bcafc <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bcaf6:	4620      	mov	r0, r4
   bcaf8:	f7ff feca 	bl	bc890 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bcafc:	6a23      	ldr	r3, [r4, #32]
   bcafe:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bcb02:	f36f 0241 	bfc	r2, #1, #1
   bcb06:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bcb0a:	6a23      	ldr	r3, [r4, #32]
   bcb0c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bcb10:	f36f 0200 	bfc	r2, #0, #1
   bcb14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bcb18:	6a23      	ldr	r3, [r4, #32]
   bcb1a:	6a18      	ldr	r0, [r3, #32]
}
   bcb1c:	b002      	add	sp, #8
   bcb1e:	bd10      	pop	{r4, pc}

000bcb20 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bcb20:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bcb22:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bcb24:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bcb28:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bcb2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bcb2e:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bcb30:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bcb34:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bcb36:	2500      	movs	r5, #0
  _width = width;
   bcb38:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bcb3c:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bcb3e:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bcb42:	7303      	strb	r3, [r0, #12]
}
   bcb44:	bd30      	pop	{r4, r5, pc}

000bcb46 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb46:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcb48:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcb4a:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb4c:	b085      	sub	sp, #20
   bcb4e:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bcb50:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcb52:	f88d 400c 	strb.w	r4, [sp, #12]
   bcb56:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb58:	460e      	mov	r6, r1
   bcb5a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bcb5c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bcb60:	b140      	cbz	r0, bcb74 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bcb62:	7b5b      	ldrb	r3, [r3, #13]
   bcb64:	9301      	str	r3, [sp, #4]
   bcb66:	ab03      	add	r3, sp, #12
   bcb68:	9300      	str	r3, [sp, #0]
   bcb6a:	2301      	movs	r3, #1
   bcb6c:	f000 f90a 	bl	bcd84 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bcb70:	b005      	add	sp, #20
   bcb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bcb74:	6858      	ldr	r0, [r3, #4]
   bcb76:	2800      	cmp	r0, #0
   bcb78:	d0fa      	beq.n	bcb70 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcb7a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bcb7e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcb82:	f1be 0f03 	cmp.w	lr, #3
   bcb86:	d10c      	bne.n	bcba2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb88:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bcb8c:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb90:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bcb92:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcb96:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb9a:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcb9c:	f000 fa2b 	bl	bcff6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bcba0:	e7e6      	b.n	bcb70 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcba2:	f1be 0f00 	cmp.w	lr, #0
   bcba6:	d109      	bne.n	bcbbc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bcba8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bcbac:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcbb0:	f8cd c000 	str.w	ip, [sp]
   bcbb4:	ab03      	add	r3, sp, #12
   bcbb6:	463a      	mov	r2, r7
   bcbb8:	4631      	mov	r1, r6
   bcbba:	e7ef      	b.n	bcb9c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcbbc:	f1be 0f02 	cmp.w	lr, #2
   bcbc0:	d102      	bne.n	bcbc8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bcbc2:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bcbc6:	e7f1      	b.n	bcbac <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcbc8:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bcbcc:	bf01      	itttt	eq
   bcbce:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bcbd2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bcbd6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bcbda:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bcbde:	e7e7      	b.n	bcbb0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bcbe0 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bcbe0:	b4f0      	push	{r4, r5, r6, r7}
   bcbe2:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bcbe4:	b902      	cbnz	r2, bcbe8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bcbe6:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bcbe8:	2a04      	cmp	r2, #4
   bcbea:	d814      	bhi.n	bcc16 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bcbec:	f100 050f 	add.w	r5, r0, #15
   bcbf0:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bcbf2:	1884      	adds	r4, r0, r2
   bcbf4:	4629      	mov	r1, r5
   bcbf6:	4284      	cmp	r4, r0
   bcbf8:	d009      	beq.n	bcc0e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bcbfa:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bcbfc:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bcbfe:	b927      	cbnz	r7, bcc0a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bcc00:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bcc02:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bcc04:	3501      	adds	r5, #1
   bcc06:	3c01      	subs	r4, #1
   bcc08:	e7f5      	b.n	bcbf6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bcc0a:	73a6      	strb	r6, [r4, #14]
   bcc0c:	e7f9      	b.n	bcc02 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bcc0e:	4620      	mov	r0, r4
}
   bcc10:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bcc12:	f7ff bf98 	b.w	bcb46 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bcc16:	2000      	movs	r0, #0
   bcc18:	bcf0      	pop	{r4, r5, r6, r7}
   bcc1a:	4770      	bx	lr

000bcc1c <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcc1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcc1e:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcc20:	7a85      	ldrb	r5, [r0, #10]
   bcc22:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcc26:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bcc28:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcc2a:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcc2c:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bcc2e:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bcc32:	b140      	cbz	r0, bcc46 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc34:	2100      	movs	r1, #0
   bcc36:	e9cd 2100 	strd	r2, r1, [sp]
   bcc3a:	a903      	add	r1, sp, #12
   bcc3c:	7b62      	ldrb	r2, [r4, #13]
   bcc3e:	f000 f90f 	bl	bce60 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bcc42:	b004      	add	sp, #16
   bcc44:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bcc46:	6860      	ldr	r0, [r4, #4]
   bcc48:	2800      	cmp	r0, #0
   bcc4a:	d0fa      	beq.n	bcc42 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcc4c:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc4e:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcc50:	2903      	cmp	r1, #3
   bcc52:	d10d      	bne.n	bcc70 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bcc54:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcc58:	21ff      	movs	r1, #255	; 0xff
   bcc5a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bcc5e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcc62:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcc66:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc68:	a903      	add	r1, sp, #12
   bcc6a:	f000 f9f6 	bl	bd05a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bcc6e:	e7e8      	b.n	bcc42 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcc70:	b941      	cbnz	r1, bcc84 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bcc72:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bcc76:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc7a:	21ff      	movs	r1, #255	; 0xff
   bcc7c:	e9cd 2100 	strd	r2, r1, [sp]
   bcc80:	4622      	mov	r2, r4
   bcc82:	e7f1      	b.n	bcc68 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcc84:	2902      	cmp	r1, #2
   bcc86:	d102      	bne.n	bcc8e <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcc88:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcc8c:	e7f3      	b.n	bcc76 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcc8e:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcc90:	bf02      	ittt	eq
   bcc92:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcc96:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcc9a:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcc9e:	e7ec      	b.n	bcc7a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcca0 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcca0:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcca2:	f100 050f 	add.w	r5, r0, #15
   bcca6:	7b02      	ldrb	r2, [r0, #12]
   bcca8:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bccaa:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bccac:	f7ff ffb6 	bl	bcc1c <_ZN23Adafruit_BusIO_Register4readEPhh>
   bccb0:	b178      	cbz	r0, bccd2 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bccb2:	7b22      	ldrb	r2, [r4, #12]
   bccb4:	4629      	mov	r1, r5
   bccb6:	4422      	add	r2, r4
  uint32_t value = 0;
   bccb8:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bccba:	42a2      	cmp	r2, r4
   bccbc:	d00b      	beq.n	bccd6 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bccbe:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bccc0:	7ba0      	ldrb	r0, [r4, #14]
   bccc2:	b920      	cbnz	r0, bccce <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bccc4:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bccc6:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bccc8:	3a01      	subs	r2, #1
   bccca:	3101      	adds	r1, #1
   bcccc:	e7f5      	b.n	bccba <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bccce:	7808      	ldrb	r0, [r1, #0]
   bccd0:	e7f9      	b.n	bccc6 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bccd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bccd6:	bd38      	pop	{r3, r4, r5, pc}

000bccd8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bccd8:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bccda:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bccdc:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bccde:	7143      	strb	r3, [r0, #5]
}
   bcce0:	bd10      	pop	{r4, pc}

000bcce2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bcce2:	b510      	push	{r4, lr}
   bcce4:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcce6:	6800      	ldr	r0, [r0, #0]
   bcce8:	f7ff ffda 	bl	bcca0 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bccec:	7922      	ldrb	r2, [r4, #4]
   bccee:	2301      	movs	r3, #1
   bccf0:	4093      	lsls	r3, r2
  val >>= _shift;
   bccf2:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bccf4:	3b01      	subs	r3, #1
  val >>= _shift;
   bccf6:	40d0      	lsrs	r0, r2
}
   bccf8:	4018      	ands	r0, r3
   bccfa:	bd10      	pop	{r4, pc}

000bccfc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bccfc:	b570      	push	{r4, r5, r6, lr}
   bccfe:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcd00:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcd02:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bcd04:	f7ff ffcc 	bl	bcca0 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bcd08:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bcd0a:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bcd0c:	2201      	movs	r2, #1
   bcd0e:	409a      	lsls	r2, r3
   bcd10:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bcd12:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bcd16:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bcd1a:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bcd1c:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bcd1e:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bcd22:	4329      	orrs	r1, r5
   bcd24:	7b02      	ldrb	r2, [r0, #12]
}
   bcd26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bcd2a:	f7ff bf59 	b.w	bcbe0 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bcd2e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bcd2e:	6042      	str	r2, [r0, #4]
  _begun = false;
   bcd30:	2200      	movs	r2, #0
   bcd32:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bcd34:	2220      	movs	r2, #32
  _addr = addr;
   bcd36:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bcd38:	60c2      	str	r2, [r0, #12]
#endif
}
   bcd3a:	4770      	bx	lr

000bcd3c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bcd3c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bcd3e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bcd40:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bcd42:	b153      	cbz	r3, bcd5a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bcd44:	7821      	ldrb	r1, [r4, #0]
   bcd46:	6860      	ldr	r0, [r4, #4]
   bcd48:	f002 fb54 	bl	bf3f4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bcd4c:	6860      	ldr	r0, [r4, #4]
   bcd4e:	f002 fb5c 	bl	bf40a <_ZN7TwoWire15endTransmissionEv>
   bcd52:	fab0 f080 	clz	r0, r0
   bcd56:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bcd58:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bcd5a:	2101      	movs	r1, #1
   bcd5c:	f000 f803 	bl	bcd66 <_ZN18Adafruit_I2CDevice5beginEb>
   bcd60:	2800      	cmp	r0, #0
   bcd62:	d1ef      	bne.n	bcd44 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bcd64:	e7f8      	b.n	bcd58 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bcd66 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcd66:	b538      	push	{r3, r4, r5, lr}
   bcd68:	4604      	mov	r4, r0
  _wire->begin();
   bcd6a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcd6c:	460d      	mov	r5, r1
  _wire->begin();
   bcd6e:	f002 fb0f 	bl	bf390 <_ZN7TwoWire5beginEv>
  _begun = true;
   bcd72:	2001      	movs	r0, #1
   bcd74:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bcd76:	b125      	cbz	r5, bcd82 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bcd78:	4620      	mov	r0, r4
}
   bcd7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bcd7e:	f7ff bfdd 	b.w	bcd3c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bcd82:	bd38      	pop	{r3, r4, r5, pc}

000bcd84 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bcd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd88:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bcd8c:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bcd8e:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bcd90:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bcd92:	4432      	add	r2, r6
   bcd94:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bcd96:	4604      	mov	r4, r0
   bcd98:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bcd9a:	d902      	bls.n	bcda2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bcd9c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bcd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bcda2:	7801      	ldrb	r1, [r0, #0]
   bcda4:	6840      	ldr	r0, [r0, #4]
   bcda6:	f002 fb25 	bl	bf3f4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcdaa:	b97e      	cbnz	r6, bcdcc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bcdac:	6860      	ldr	r0, [r4, #4]
   bcdae:	6803      	ldr	r3, [r0, #0]
   bcdb0:	462a      	mov	r2, r5
   bcdb2:	68db      	ldr	r3, [r3, #12]
   bcdb4:	4641      	mov	r1, r8
   bcdb6:	4798      	blx	r3
   bcdb8:	4285      	cmp	r5, r0
   bcdba:	d1ef      	bne.n	bcd9c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bcdbc:	6860      	ldr	r0, [r4, #4]
   bcdbe:	4639      	mov	r1, r7
   bcdc0:	f002 fb1f 	bl	bf402 <_ZN7TwoWire15endTransmissionEh>
   bcdc4:	fab0 f080 	clz	r0, r0
   bcdc8:	0940      	lsrs	r0, r0, #5
   bcdca:	e7e8      	b.n	bcd9e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcdcc:	f1b9 0f00 	cmp.w	r9, #0
   bcdd0:	d0ec      	beq.n	bcdac <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bcdd2:	6860      	ldr	r0, [r4, #4]
   bcdd4:	6803      	ldr	r3, [r0, #0]
   bcdd6:	4632      	mov	r2, r6
   bcdd8:	68db      	ldr	r3, [r3, #12]
   bcdda:	4649      	mov	r1, r9
   bcddc:	4798      	blx	r3
   bcdde:	4286      	cmp	r6, r0
   bcde0:	d1dc      	bne.n	bcd9c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bcde2:	e7e3      	b.n	bcdac <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bcde4 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bcde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcde8:	4615      	mov	r5, r2
   bcdea:	4604      	mov	r4, r0
   bcdec:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bcdee:	b2d2      	uxtb	r2, r2
   bcdf0:	7801      	ldrb	r1, [r0, #0]
   bcdf2:	6840      	ldr	r0, [r0, #4]
   bcdf4:	f002 fae9 	bl	bf3ca <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bcdf8:	4285      	cmp	r5, r0
   bcdfa:	d10d      	bne.n	bce18 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bcdfc:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bcdfe:	fa1f f887 	uxth.w	r8, r7
   bce02:	45a8      	cmp	r8, r5
   bce04:	f107 0701 	add.w	r7, r7, #1
   bce08:	d209      	bcs.n	bce1e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bce0a:	6860      	ldr	r0, [r4, #4]
   bce0c:	6803      	ldr	r3, [r0, #0]
   bce0e:	695b      	ldr	r3, [r3, #20]
   bce10:	4798      	blx	r3
   bce12:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bce16:	e7f2      	b.n	bcdfe <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bce18:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bce1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bce1e:	2001      	movs	r0, #1
   bce20:	e7fb      	b.n	bce1a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bce22 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bce22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bce26:	4607      	mov	r7, r0
   bce28:	4688      	mov	r8, r1
   bce2a:	4616      	mov	r6, r2
   bce2c:	4699      	mov	r9, r3
  size_t pos = 0;
   bce2e:	2500      	movs	r5, #0
  while (pos < len) {
   bce30:	42b5      	cmp	r5, r6
   bce32:	d212      	bcs.n	bce5a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bce34:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bce36:	1b74      	subs	r4, r6, r5
   bce38:	4294      	cmp	r4, r2
   bce3a:	bf28      	it	cs
   bce3c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bce3e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bce40:	42ab      	cmp	r3, r5
   bce42:	bf94      	ite	ls
   bce44:	464b      	movls	r3, r9
   bce46:	2300      	movhi	r3, #0
   bce48:	4622      	mov	r2, r4
   bce4a:	eb08 0105 	add.w	r1, r8, r5
   bce4e:	4638      	mov	r0, r7
   bce50:	f7ff ffc8 	bl	bcde4 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bce54:	b110      	cbz	r0, bce5c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bce56:	4425      	add	r5, r4
  while (pos < len) {
   bce58:	e7ea      	b.n	bce30 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bce5a:	2001      	movs	r0, #1
}
   bce5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bce60 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bce60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bce62:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bce64:	2300      	movs	r3, #0
   bce66:	e9cd 3300 	strd	r3, r3, [sp]
   bce6a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bce6e:	9e06      	ldr	r6, [sp, #24]
   bce70:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bce72:	f7ff ff87 	bl	bcd84 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bce76:	b140      	cbz	r0, bce8a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bce78:	2301      	movs	r3, #1
   bce7a:	4632      	mov	r2, r6
   bce7c:	4629      	mov	r1, r5
   bce7e:	4620      	mov	r0, r4
}
   bce80:	b002      	add	sp, #8
   bce82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bce86:	f7ff bfcc 	b.w	bce22 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bce8a:	b002      	add	sp, #8
   bce8c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bce90 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce94:	4604      	mov	r4, r0
  if (_spi) {
   bce96:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bce98:	b085      	sub	sp, #20
   bce9a:	460d      	mov	r5, r1
  if (_spi) {
   bce9c:	b140      	cbz	r0, bceb0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bce9e:	2300      	movs	r3, #0
   bcea0:	9300      	str	r3, [sp, #0]
   bcea2:	4613      	mov	r3, r2
   bcea4:	460a      	mov	r2, r1
   bcea6:	f003 ff57 	bl	c0d58 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bceaa:	b005      	add	sp, #20
   bceac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bceb0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bceb2:	68a0      	ldr	r0, [r4, #8]
   bceb4:	4f48      	ldr	r7, [pc, #288]	; (bcfd8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bceb6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bceba:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcebc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bcebe:	bf0c      	ite	eq
   bcec0:	f04f 0b01 	moveq.w	fp, #1
   bcec4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcec8:	ea1b 0f03 	tst.w	fp, r3
   bcecc:	eb01 0302 	add.w	r3, r1, r2
   bced0:	bf0c      	ite	eq
   bced2:	f04f 0901 	moveq.w	r9, #1
   bced6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bceda:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bcedc:	9303      	str	r3, [sp, #12]
   bcede:	9b03      	ldr	r3, [sp, #12]
   bcee0:	42ab      	cmp	r3, r5
   bcee2:	d0e2      	beq.n	bceaa <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bcee4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bcee8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bceea:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bceee:	b117      	cbz	r7, bcef6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bcef0:	4638      	mov	r0, r7
   bcef2:	f000 f9c9 	bl	bd288 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bcef6:	7b63      	ldrb	r3, [r4, #13]
   bcef8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bcefc:	d141      	bne.n	bcf82 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcefe:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcf02:	1c5a      	adds	r2, r3, #1
   bcf04:	d00f      	beq.n	bcf26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bcf06:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcf0a:	bf14      	ite	ne
   bcf0c:	2301      	movne	r3, #1
   bcf0e:	2300      	moveq	r3, #0
   bcf10:	454b      	cmp	r3, r9
   bcf12:	d008      	beq.n	bcf26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bcf14:	6963      	ldr	r3, [r4, #20]
   bcf16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcf18:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bcf1a:	2900      	cmp	r1, #0
   bcf1c:	d02c      	beq.n	bcf78 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bcf1e:	4302      	orrs	r2, r0
   bcf20:	601a      	str	r2, [r3, #0]
   bcf22:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bcf26:	69a1      	ldr	r1, [r4, #24]
   bcf28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf2a:	680a      	ldr	r2, [r1, #0]
   bcf2c:	4313      	orrs	r3, r2
   bcf2e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcf30:	b117      	cbz	r7, bcf38 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bcf32:	4638      	mov	r0, r7
   bcf34:	f000 f9a8 	bl	bd288 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bcf38:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcf3c:	3301      	adds	r3, #1
   bcf3e:	d006      	beq.n	bcf4e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bcf40:	69e3      	ldr	r3, [r4, #28]
   bcf42:	681a      	ldr	r2, [r3, #0]
   bcf44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcf46:	421a      	tst	r2, r3
            reply |= b;
   bcf48:	bf18      	it	ne
   bcf4a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bcf4e:	69a1      	ldr	r1, [r4, #24]
   bcf50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf52:	680a      	ldr	r2, [r1, #0]
   bcf54:	ea22 0303 	bic.w	r3, r2, r3
   bcf58:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bcf5a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcf5e:	3301      	adds	r3, #1
        buffer[i] = reply;
   bcf60:	bf18      	it	ne
   bcf62:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bcf66:	7b23      	ldrb	r3, [r4, #12]
   bcf68:	2b00      	cmp	r3, #0
   bcf6a:	d132      	bne.n	bcfd2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bcf6c:	0076      	lsls	r6, r6, #1
   bcf6e:	b2f6      	uxtb	r6, r6
   bcf70:	2e00      	cmp	r6, #0
   bcf72:	d1bc      	bne.n	bceee <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bcf74:	3501      	adds	r5, #1
   bcf76:	e7b2      	b.n	bcede <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bcf78:	ea22 0200 	bic.w	r2, r2, r0
   bcf7c:	601a      	str	r2, [r3, #0]
   bcf7e:	4689      	mov	r9, r1
   bcf80:	e7d1      	b.n	bcf26 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bcf82:	69a1      	ldr	r1, [r4, #24]
   bcf84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf86:	680a      	ldr	r2, [r1, #0]
   bcf88:	4313      	orrs	r3, r2
   bcf8a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcf8c:	b117      	cbz	r7, bcf94 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bcf8e:	4638      	mov	r0, r7
   bcf90:	f000 f97a 	bl	bd288 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bcf94:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcf98:	3301      	adds	r3, #1
   bcf9a:	d008      	beq.n	bcfae <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bcf9c:	6963      	ldr	r3, [r4, #20]
   bcf9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bcfa0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bcfa2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bcfa6:	bf14      	ite	ne
   bcfa8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bcfaa:	438a      	biceq	r2, r1
   bcfac:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bcfae:	69a1      	ldr	r1, [r4, #24]
   bcfb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcfb2:	680a      	ldr	r2, [r1, #0]
   bcfb4:	ea22 0303 	bic.w	r3, r2, r3
   bcfb8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bcfba:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcfbe:	3301      	adds	r3, #1
   bcfc0:	d0cb      	beq.n	bcf5a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bcfc2:	69e3      	ldr	r3, [r4, #28]
   bcfc4:	681a      	ldr	r2, [r3, #0]
   bcfc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcfc8:	421a      	tst	r2, r3
            reply |= b;
   bcfca:	bf18      	it	ne
   bcfcc:	ea46 0808 	orrne.w	r8, r6, r8
   bcfd0:	e7c3      	b.n	bcf5a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bcfd2:	0876      	lsrs	r6, r6, #1
   bcfd4:	e7cc      	b.n	bcf70 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bcfd6:	bf00      	nop
   bcfd8:	0007a120 	.word	0x0007a120

000bcfdc <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bcfdc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bcfde:	2201      	movs	r2, #1
  uint8_t data = send;
   bcfe0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bcfe4:	f10d 0107 	add.w	r1, sp, #7
   bcfe8:	f7ff ff52 	bl	bce90 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bcfec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bcff0:	b003      	add	sp, #12
   bcff2:	f85d fb04 	ldr.w	pc, [sp], #4

000bcff6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcffa:	4604      	mov	r4, r0
  if (_spi) {
   bcffc:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcffe:	460e      	mov	r6, r1
   bd000:	4617      	mov	r7, r2
   bd002:	461d      	mov	r5, r3
  if (_spi) {
   bd004:	b110      	cbz	r0, bd00c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd006:	6861      	ldr	r1, [r4, #4]
   bd008:	f003 fe00 	bl	c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd00c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd010:	2100      	movs	r1, #0
   bd012:	b280      	uxth	r0, r0
   bd014:	f004 fa85 	bl	c1522 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd018:	9b06      	ldr	r3, [sp, #24]
   bd01a:	eb05 0803 	add.w	r8, r5, r3
   bd01e:	4545      	cmp	r5, r8
   bd020:	d108      	bne.n	bd034 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd022:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd024:	42b7      	cmp	r7, r6
   bd026:	d00b      	beq.n	bd040 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd028:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd02c:	4620      	mov	r0, r4
   bd02e:	f7ff ffd5 	bl	bcfdc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd032:	e7f7      	b.n	bd024 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd034:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd038:	4620      	mov	r0, r4
   bd03a:	f7ff ffcf 	bl	bcfdc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd03e:	e7ee      	b.n	bd01e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd040:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd044:	2101      	movs	r1, #1
   bd046:	b280      	uxth	r0, r0
   bd048:	f004 fa6b 	bl	c1522 <digitalWrite>

  if (_spi) {
   bd04c:	6820      	ldr	r0, [r4, #0]
   bd04e:	b108      	cbz	r0, bd054 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd050:	f003 fdc2 	bl	c0bd8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd054:	2001      	movs	r0, #1
   bd056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd05a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd05e:	4604      	mov	r4, r0
  if (_spi) {
   bd060:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd062:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd066:	460e      	mov	r6, r1
   bd068:	4617      	mov	r7, r2
   bd06a:	461d      	mov	r5, r3
  if (_spi) {
   bd06c:	b110      	cbz	r0, bd074 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd06e:	6861      	ldr	r1, [r4, #4]
   bd070:	f003 fdcc 	bl	c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd074:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd078:	2100      	movs	r1, #0
   bd07a:	b280      	uxth	r0, r0
   bd07c:	f004 fa51 	bl	c1522 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd080:	4437      	add	r7, r6
   bd082:	42be      	cmp	r6, r7
   bd084:	d10a      	bne.n	bd09c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd086:	9b06      	ldr	r3, [sp, #24]
   bd088:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd08a:	42ae      	cmp	r6, r5
   bd08c:	d00c      	beq.n	bd0a8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd08e:	4641      	mov	r1, r8
   bd090:	4620      	mov	r0, r4
   bd092:	f7ff ffa3 	bl	bcfdc <_ZN18Adafruit_SPIDevice8transferEh>
   bd096:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd09a:	e7f6      	b.n	bd08a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd09c:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd0a0:	4620      	mov	r0, r4
   bd0a2:	f7ff ff9b 	bl	bcfdc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd0a6:	e7ec      	b.n	bd082 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd0a8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd0ac:	2101      	movs	r1, #1
   bd0ae:	b280      	uxth	r0, r0
   bd0b0:	f004 fa37 	bl	c1522 <digitalWrite>

  if (_spi) {
   bd0b4:	6820      	ldr	r0, [r4, #0]
   bd0b6:	b108      	cbz	r0, bd0bc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd0b8:	f003 fd8e 	bl	c0bd8 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd0bc:	2001      	movs	r0, #1
   bd0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bd0c4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd0c4:	b508      	push	{r3, lr}
   bd0c6:	4b02      	ldr	r3, [pc, #8]	; (bd0d0 <hal_ble_stack_init+0xc>)
   bd0c8:	681b      	ldr	r3, [r3, #0]
   bd0ca:	689b      	ldr	r3, [r3, #8]
   bd0cc:	9301      	str	r3, [sp, #4]
   bd0ce:	bd08      	pop	{r3, pc}
   bd0d0:	00030278 	.word	0x00030278

000bd0d4 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd0d4:	b508      	push	{r3, lr}
   bd0d6:	4b02      	ldr	r3, [pc, #8]	; (bd0e0 <hal_ble_gap_set_tx_power+0xc>)
   bd0d8:	681b      	ldr	r3, [r3, #0]
   bd0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd0dc:	9301      	str	r3, [sp, #4]
   bd0de:	bd08      	pop	{r3, pc}
   bd0e0:	00030278 	.word	0x00030278

000bd0e4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd0e4:	b508      	push	{r3, lr}
   bd0e6:	4b02      	ldr	r3, [pc, #8]	; (bd0f0 <hal_ble_gap_set_advertising_data+0xc>)
   bd0e8:	681b      	ldr	r3, [r3, #0]
   bd0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd0ec:	9301      	str	r3, [sp, #4]
   bd0ee:	bd08      	pop	{r3, pc}
   bd0f0:	00030278 	.word	0x00030278

000bd0f4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd0f4:	b508      	push	{r3, lr}
   bd0f6:	4b02      	ldr	r3, [pc, #8]	; (bd100 <hal_ble_gap_set_scan_response_data+0xc>)
   bd0f8:	681b      	ldr	r3, [r3, #0]
   bd0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd0fc:	9301      	str	r3, [sp, #4]
   bd0fe:	bd08      	pop	{r3, pc}
   bd100:	00030278 	.word	0x00030278

000bd104 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd104:	b508      	push	{r3, lr}
   bd106:	4b02      	ldr	r3, [pc, #8]	; (bd110 <hal_ble_gap_start_advertising+0xc>)
   bd108:	681b      	ldr	r3, [r3, #0]
   bd10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd10c:	9301      	str	r3, [sp, #4]
   bd10e:	bd08      	pop	{r3, pc}
   bd110:	00030278 	.word	0x00030278

000bd114 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd114:	b508      	push	{r3, lr}
   bd116:	4b03      	ldr	r3, [pc, #12]	; (bd124 <hal_ble_gap_disconnect+0x10>)
   bd118:	681b      	ldr	r3, [r3, #0]
   bd11a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd11e:	9301      	str	r3, [sp, #4]
   bd120:	bd08      	pop	{r3, pc}
   bd122:	0000      	.short	0x0000
   bd124:	00030278 	.word	0x00030278

000bd128 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd128:	b508      	push	{r3, lr}
   bd12a:	4b03      	ldr	r3, [pc, #12]	; (bd138 <hal_ble_gatt_server_add_service+0x10>)
   bd12c:	681b      	ldr	r3, [r3, #0]
   bd12e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd132:	9301      	str	r3, [sp, #4]
   bd134:	bd08      	pop	{r3, pc}
   bd136:	0000      	.short	0x0000
   bd138:	00030278 	.word	0x00030278

000bd13c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd13c:	b508      	push	{r3, lr}
   bd13e:	4b03      	ldr	r3, [pc, #12]	; (bd14c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd140:	681b      	ldr	r3, [r3, #0]
   bd142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd146:	9301      	str	r3, [sp, #4]
   bd148:	bd08      	pop	{r3, pc}
   bd14a:	0000      	.short	0x0000
   bd14c:	00030278 	.word	0x00030278

000bd150 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd150:	b508      	push	{r3, lr}
   bd152:	4b03      	ldr	r3, [pc, #12]	; (bd160 <hal_ble_gatt_client_write_with_response+0x10>)
   bd154:	681b      	ldr	r3, [r3, #0]
   bd156:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd15a:	9301      	str	r3, [sp, #4]
   bd15c:	bd08      	pop	{r3, pc}
   bd15e:	0000      	.short	0x0000
   bd160:	00030278 	.word	0x00030278

000bd164 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd164:	b508      	push	{r3, lr}
   bd166:	4b03      	ldr	r3, [pc, #12]	; (bd174 <hal_ble_gatt_client_write_without_response+0x10>)
   bd168:	681b      	ldr	r3, [r3, #0]
   bd16a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd16e:	9301      	str	r3, [sp, #4]
   bd170:	bd08      	pop	{r3, pc}
   bd172:	0000      	.short	0x0000
   bd174:	00030278 	.word	0x00030278

000bd178 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd178:	b508      	push	{r3, lr}
   bd17a:	4b03      	ldr	r3, [pc, #12]	; (bd188 <hal_ble_gatt_server_add_characteristic+0x10>)
   bd17c:	681b      	ldr	r3, [r3, #0]
   bd17e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd182:	9301      	str	r3, [sp, #4]
   bd184:	bd08      	pop	{r3, pc}
   bd186:	0000      	.short	0x0000
   bd188:	00030278 	.word	0x00030278

000bd18c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd18c:	b508      	push	{r3, lr}
   bd18e:	4b03      	ldr	r3, [pc, #12]	; (bd19c <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd190:	681b      	ldr	r3, [r3, #0]
   bd192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd196:	9301      	str	r3, [sp, #4]
   bd198:	bd08      	pop	{r3, pc}
   bd19a:	0000      	.short	0x0000
   bd19c:	00030278 	.word	0x00030278

000bd1a0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd1a0:	b508      	push	{r3, lr}
   bd1a2:	4b03      	ldr	r3, [pc, #12]	; (bd1b0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd1a4:	681b      	ldr	r3, [r3, #0]
   bd1a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd1aa:	9301      	str	r3, [sp, #4]
   bd1ac:	bd08      	pop	{r3, pc}
   bd1ae:	0000      	.short	0x0000
   bd1b0:	00030278 	.word	0x00030278

000bd1b4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd1b4:	b508      	push	{r3, lr}
   bd1b6:	4b03      	ldr	r3, [pc, #12]	; (bd1c4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd1b8:	681b      	ldr	r3, [r3, #0]
   bd1ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd1be:	9301      	str	r3, [sp, #4]
   bd1c0:	bd08      	pop	{r3, pc}
   bd1c2:	0000      	.short	0x0000
   bd1c4:	00030278 	.word	0x00030278

000bd1c8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd1c8:	b508      	push	{r3, lr}
   bd1ca:	4b02      	ldr	r3, [pc, #8]	; (bd1d4 <os_thread_yield+0xc>)
   bd1cc:	681b      	ldr	r3, [r3, #0]
   bd1ce:	68db      	ldr	r3, [r3, #12]
   bd1d0:	9301      	str	r3, [sp, #4]
   bd1d2:	bd08      	pop	{r3, pc}
   bd1d4:	00030248 	.word	0x00030248

000bd1d8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd1d8:	b508      	push	{r3, lr}
   bd1da:	4b02      	ldr	r3, [pc, #8]	; (bd1e4 <os_thread_scheduling+0xc>)
   bd1dc:	681b      	ldr	r3, [r3, #0]
   bd1de:	69db      	ldr	r3, [r3, #28]
   bd1e0:	9301      	str	r3, [sp, #4]
   bd1e2:	bd08      	pop	{r3, pc}
   bd1e4:	00030248 	.word	0x00030248

000bd1e8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd1e8:	b508      	push	{r3, lr}
   bd1ea:	4b02      	ldr	r3, [pc, #8]	; (bd1f4 <os_timer_create+0xc>)
   bd1ec:	681b      	ldr	r3, [r3, #0]
   bd1ee:	6a1b      	ldr	r3, [r3, #32]
   bd1f0:	9301      	str	r3, [sp, #4]
   bd1f2:	bd08      	pop	{r3, pc}
   bd1f4:	00030248 	.word	0x00030248

000bd1f8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd1f8:	b508      	push	{r3, lr}
   bd1fa:	4b02      	ldr	r3, [pc, #8]	; (bd204 <os_timer_destroy+0xc>)
   bd1fc:	681b      	ldr	r3, [r3, #0]
   bd1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd200:	9301      	str	r3, [sp, #4]
   bd202:	bd08      	pop	{r3, pc}
   bd204:	00030248 	.word	0x00030248

000bd208 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd208:	b508      	push	{r3, lr}
   bd20a:	4b02      	ldr	r3, [pc, #8]	; (bd214 <os_timer_get_id+0xc>)
   bd20c:	681b      	ldr	r3, [r3, #0]
   bd20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd210:	9301      	str	r3, [sp, #4]
   bd212:	bd08      	pop	{r3, pc}
   bd214:	00030248 	.word	0x00030248

000bd218 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd218:	b508      	push	{r3, lr}
   bd21a:	4b02      	ldr	r3, [pc, #8]	; (bd224 <os_timer_change+0xc>)
   bd21c:	681b      	ldr	r3, [r3, #0]
   bd21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd220:	9301      	str	r3, [sp, #4]
   bd222:	bd08      	pop	{r3, pc}
   bd224:	00030248 	.word	0x00030248

000bd228 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd228:	b508      	push	{r3, lr}
   bd22a:	4b02      	ldr	r3, [pc, #8]	; (bd234 <os_mutex_recursive_create+0xc>)
   bd22c:	681b      	ldr	r3, [r3, #0]
   bd22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd230:	9301      	str	r3, [sp, #4]
   bd232:	bd08      	pop	{r3, pc}
   bd234:	00030248 	.word	0x00030248

000bd238 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd238:	b508      	push	{r3, lr}
   bd23a:	4b02      	ldr	r3, [pc, #8]	; (bd244 <os_mutex_recursive_destroy+0xc>)
   bd23c:	681b      	ldr	r3, [r3, #0]
   bd23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd240:	9301      	str	r3, [sp, #4]
   bd242:	bd08      	pop	{r3, pc}
   bd244:	00030248 	.word	0x00030248

000bd248 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd248:	b508      	push	{r3, lr}
   bd24a:	4b02      	ldr	r3, [pc, #8]	; (bd254 <os_mutex_recursive_lock+0xc>)
   bd24c:	681b      	ldr	r3, [r3, #0]
   bd24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd250:	9301      	str	r3, [sp, #4]
   bd252:	bd08      	pop	{r3, pc}
   bd254:	00030248 	.word	0x00030248

000bd258 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd258:	b508      	push	{r3, lr}
   bd25a:	4b02      	ldr	r3, [pc, #8]	; (bd264 <os_mutex_recursive_unlock+0xc>)
   bd25c:	681b      	ldr	r3, [r3, #0]
   bd25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd260:	9301      	str	r3, [sp, #4]
   bd262:	bd08      	pop	{r3, pc}
   bd264:	00030248 	.word	0x00030248

000bd268 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd268:	b508      	push	{r3, lr}
   bd26a:	4b02      	ldr	r3, [pc, #8]	; (bd274 <os_timer_set_id+0xc>)
   bd26c:	681b      	ldr	r3, [r3, #0]
   bd26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd270:	9301      	str	r3, [sp, #4]
   bd272:	bd08      	pop	{r3, pc}
   bd274:	00030248 	.word	0x00030248

000bd278 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd278:	b508      	push	{r3, lr}
   bd27a:	4b02      	ldr	r3, [pc, #8]	; (bd284 <HAL_RNG_GetRandomNumber+0xc>)
   bd27c:	681b      	ldr	r3, [r3, #0]
   bd27e:	685b      	ldr	r3, [r3, #4]
   bd280:	9301      	str	r3, [sp, #4]
   bd282:	bd08      	pop	{r3, pc}
   bd284:	00030218 	.word	0x00030218

000bd288 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd288:	b508      	push	{r3, lr}
   bd28a:	4b02      	ldr	r3, [pc, #8]	; (bd294 <HAL_Delay_Microseconds+0xc>)
   bd28c:	681b      	ldr	r3, [r3, #0]
   bd28e:	68db      	ldr	r3, [r3, #12]
   bd290:	9301      	str	r3, [sp, #4]
   bd292:	bd08      	pop	{r3, pc}
   bd294:	00030218 	.word	0x00030218

000bd298 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd298:	b508      	push	{r3, lr}
   bd29a:	4b02      	ldr	r3, [pc, #8]	; (bd2a4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd29c:	681b      	ldr	r3, [r3, #0]
   bd29e:	691b      	ldr	r3, [r3, #16]
   bd2a0:	9301      	str	r3, [sp, #4]
   bd2a2:	bd08      	pop	{r3, pc}
   bd2a4:	00030218 	.word	0x00030218

000bd2a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd2a8:	b508      	push	{r3, lr}
   bd2aa:	4b02      	ldr	r3, [pc, #8]	; (bd2b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd2ac:	681b      	ldr	r3, [r3, #0]
   bd2ae:	695b      	ldr	r3, [r3, #20]
   bd2b0:	9301      	str	r3, [sp, #4]
   bd2b2:	bd08      	pop	{r3, pc}
   bd2b4:	00030218 	.word	0x00030218

000bd2b8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd2b8:	b508      	push	{r3, lr}
   bd2ba:	4b02      	ldr	r3, [pc, #8]	; (bd2c4 <hal_rtc_time_is_valid+0xc>)
   bd2bc:	681b      	ldr	r3, [r3, #0]
   bd2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd2c0:	9301      	str	r3, [sp, #4]
   bd2c2:	bd08      	pop	{r3, pc}
   bd2c4:	00030218 	.word	0x00030218

000bd2c8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd2c8:	b508      	push	{r3, lr}
   bd2ca:	4b02      	ldr	r3, [pc, #8]	; (bd2d4 <hal_rtc_get_time+0xc>)
   bd2cc:	681b      	ldr	r3, [r3, #0]
   bd2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd2d0:	9301      	str	r3, [sp, #4]
   bd2d2:	bd08      	pop	{r3, pc}
   bd2d4:	00030218 	.word	0x00030218

000bd2d8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd2d8:	b508      	push	{r3, lr}
   bd2da:	4b02      	ldr	r3, [pc, #8]	; (bd2e4 <HAL_Validate_Pin_Function+0xc>)
   bd2dc:	681b      	ldr	r3, [r3, #0]
   bd2de:	685b      	ldr	r3, [r3, #4]
   bd2e0:	9301      	str	r3, [sp, #4]
   bd2e2:	bd08      	pop	{r3, pc}
   bd2e4:	0003022c 	.word	0x0003022c

000bd2e8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd2e8:	b508      	push	{r3, lr}
   bd2ea:	4b02      	ldr	r3, [pc, #8]	; (bd2f4 <HAL_Pin_Mode+0xc>)
   bd2ec:	681b      	ldr	r3, [r3, #0]
   bd2ee:	689b      	ldr	r3, [r3, #8]
   bd2f0:	9301      	str	r3, [sp, #4]
   bd2f2:	bd08      	pop	{r3, pc}
   bd2f4:	0003022c 	.word	0x0003022c

000bd2f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd2f8:	b508      	push	{r3, lr}
   bd2fa:	4b02      	ldr	r3, [pc, #8]	; (bd304 <HAL_Get_Pin_Mode+0xc>)
   bd2fc:	681b      	ldr	r3, [r3, #0]
   bd2fe:	68db      	ldr	r3, [r3, #12]
   bd300:	9301      	str	r3, [sp, #4]
   bd302:	bd08      	pop	{r3, pc}
   bd304:	0003022c 	.word	0x0003022c

000bd308 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd308:	b508      	push	{r3, lr}
   bd30a:	4b02      	ldr	r3, [pc, #8]	; (bd314 <HAL_GPIO_Write+0xc>)
   bd30c:	681b      	ldr	r3, [r3, #0]
   bd30e:	691b      	ldr	r3, [r3, #16]
   bd310:	9301      	str	r3, [sp, #4]
   bd312:	bd08      	pop	{r3, pc}
   bd314:	0003022c 	.word	0x0003022c

000bd318 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd318:	b508      	push	{r3, lr}
   bd31a:	4b02      	ldr	r3, [pc, #8]	; (bd324 <HAL_Interrupts_Enable_All+0xc>)
   bd31c:	681b      	ldr	r3, [r3, #0]
   bd31e:	6a1b      	ldr	r3, [r3, #32]
   bd320:	9301      	str	r3, [sp, #4]
   bd322:	bd08      	pop	{r3, pc}
   bd324:	0003022c 	.word	0x0003022c

000bd328 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd328:	b508      	push	{r3, lr}
   bd32a:	4b02      	ldr	r3, [pc, #8]	; (bd334 <HAL_Interrupts_Disable_All+0xc>)
   bd32c:	681b      	ldr	r3, [r3, #0]
   bd32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd330:	9301      	str	r3, [sp, #4]
   bd332:	bd08      	pop	{r3, pc}
   bd334:	0003022c 	.word	0x0003022c

000bd338 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd338:	b508      	push	{r3, lr}
   bd33a:	4b02      	ldr	r3, [pc, #8]	; (bd344 <hal_adc_read+0xc>)
   bd33c:	681b      	ldr	r3, [r3, #0]
   bd33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd340:	9301      	str	r3, [sp, #4]
   bd342:	bd08      	pop	{r3, pc}
   bd344:	0003022c 	.word	0x0003022c

000bd348 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd348:	b508      	push	{r3, lr}
   bd34a:	4b02      	ldr	r3, [pc, #8]	; (bd354 <hal_i2c_set_speed+0xc>)
   bd34c:	681b      	ldr	r3, [r3, #0]
   bd34e:	681b      	ldr	r3, [r3, #0]
   bd350:	9301      	str	r3, [sp, #4]
   bd352:	bd08      	pop	{r3, pc}
   bd354:	00030228 	.word	0x00030228

000bd358 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd358:	b508      	push	{r3, lr}
   bd35a:	4b02      	ldr	r3, [pc, #8]	; (bd364 <hal_i2c_begin+0xc>)
   bd35c:	681b      	ldr	r3, [r3, #0]
   bd35e:	68db      	ldr	r3, [r3, #12]
   bd360:	9301      	str	r3, [sp, #4]
   bd362:	bd08      	pop	{r3, pc}
   bd364:	00030228 	.word	0x00030228

000bd368 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd368:	b508      	push	{r3, lr}
   bd36a:	4b02      	ldr	r3, [pc, #8]	; (bd374 <hal_i2c_begin_transmission+0xc>)
   bd36c:	681b      	ldr	r3, [r3, #0]
   bd36e:	699b      	ldr	r3, [r3, #24]
   bd370:	9301      	str	r3, [sp, #4]
   bd372:	bd08      	pop	{r3, pc}
   bd374:	00030228 	.word	0x00030228

000bd378 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd378:	b508      	push	{r3, lr}
   bd37a:	4b02      	ldr	r3, [pc, #8]	; (bd384 <hal_i2c_end_transmission+0xc>)
   bd37c:	681b      	ldr	r3, [r3, #0]
   bd37e:	69db      	ldr	r3, [r3, #28]
   bd380:	9301      	str	r3, [sp, #4]
   bd382:	bd08      	pop	{r3, pc}
   bd384:	00030228 	.word	0x00030228

000bd388 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd388:	b508      	push	{r3, lr}
   bd38a:	4b02      	ldr	r3, [pc, #8]	; (bd394 <hal_i2c_write+0xc>)
   bd38c:	681b      	ldr	r3, [r3, #0]
   bd38e:	6a1b      	ldr	r3, [r3, #32]
   bd390:	9301      	str	r3, [sp, #4]
   bd392:	bd08      	pop	{r3, pc}
   bd394:	00030228 	.word	0x00030228

000bd398 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd398:	b508      	push	{r3, lr}
   bd39a:	4b02      	ldr	r3, [pc, #8]	; (bd3a4 <hal_i2c_available+0xc>)
   bd39c:	681b      	ldr	r3, [r3, #0]
   bd39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd3a0:	9301      	str	r3, [sp, #4]
   bd3a2:	bd08      	pop	{r3, pc}
   bd3a4:	00030228 	.word	0x00030228

000bd3a8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd3a8:	b508      	push	{r3, lr}
   bd3aa:	4b02      	ldr	r3, [pc, #8]	; (bd3b4 <hal_i2c_read+0xc>)
   bd3ac:	681b      	ldr	r3, [r3, #0]
   bd3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd3b0:	9301      	str	r3, [sp, #4]
   bd3b2:	bd08      	pop	{r3, pc}
   bd3b4:	00030228 	.word	0x00030228

000bd3b8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd3b8:	b508      	push	{r3, lr}
   bd3ba:	4b02      	ldr	r3, [pc, #8]	; (bd3c4 <hal_i2c_peek+0xc>)
   bd3bc:	681b      	ldr	r3, [r3, #0]
   bd3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd3c0:	9301      	str	r3, [sp, #4]
   bd3c2:	bd08      	pop	{r3, pc}
   bd3c4:	00030228 	.word	0x00030228

000bd3c8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <hal_i2c_flush+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	00030228 	.word	0x00030228

000bd3d8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <hal_i2c_is_enabled+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	00030228 	.word	0x00030228

000bd3e8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <hal_i2c_init+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	00030228 	.word	0x00030228

000bd3f8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <hal_i2c_request_ex+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	00030228 	.word	0x00030228

000bd408 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <inet_inet_ntop+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	695b      	ldr	r3, [r3, #20]
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	00030264 	.word	0x00030264

000bd418 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <netdb_freeaddrinfo+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	689b      	ldr	r3, [r3, #8]
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	00030268 	.word	0x00030268

000bd428 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b02      	ldr	r3, [pc, #8]	; (bd434 <netdb_getaddrinfo+0xc>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	68db      	ldr	r3, [r3, #12]
   bd430:	9301      	str	r3, [sp, #4]
   bd432:	bd08      	pop	{r3, pc}
   bd434:	00030268 	.word	0x00030268

000bd438 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd438:	b508      	push	{r3, lr}
   bd43a:	4b02      	ldr	r3, [pc, #8]	; (bd444 <HAL_Servo_Attach+0xc>)
   bd43c:	681b      	ldr	r3, [r3, #0]
   bd43e:	691b      	ldr	r3, [r3, #16]
   bd440:	9301      	str	r3, [sp, #4]
   bd442:	bd08      	pop	{r3, pc}
   bd444:	00030224 	.word	0x00030224

000bd448 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd448:	b508      	push	{r3, lr}
   bd44a:	4b02      	ldr	r3, [pc, #8]	; (bd454 <HAL_Servo_Detach+0xc>)
   bd44c:	681b      	ldr	r3, [r3, #0]
   bd44e:	695b      	ldr	r3, [r3, #20]
   bd450:	9301      	str	r3, [sp, #4]
   bd452:	bd08      	pop	{r3, pc}
   bd454:	00030224 	.word	0x00030224

000bd458 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b02      	ldr	r3, [pc, #8]	; (bd464 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	699b      	ldr	r3, [r3, #24]
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	bd08      	pop	{r3, pc}
   bd464:	00030224 	.word	0x00030224

000bd468 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd468:	b508      	push	{r3, lr}
   bd46a:	4b02      	ldr	r3, [pc, #8]	; (bd474 <hal_spi_begin+0xc>)
   bd46c:	681b      	ldr	r3, [r3, #0]
   bd46e:	681b      	ldr	r3, [r3, #0]
   bd470:	9301      	str	r3, [sp, #4]
   bd472:	bd08      	pop	{r3, pc}
   bd474:	00030230 	.word	0x00030230

000bd478 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd478:	b508      	push	{r3, lr}
   bd47a:	4b02      	ldr	r3, [pc, #8]	; (bd484 <hal_spi_set_clock_divider+0xc>)
   bd47c:	681b      	ldr	r3, [r3, #0]
   bd47e:	691b      	ldr	r3, [r3, #16]
   bd480:	9301      	str	r3, [sp, #4]
   bd482:	bd08      	pop	{r3, pc}
   bd484:	00030230 	.word	0x00030230

000bd488 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd488:	b508      	push	{r3, lr}
   bd48a:	4b02      	ldr	r3, [pc, #8]	; (bd494 <hal_spi_transfer+0xc>)
   bd48c:	681b      	ldr	r3, [r3, #0]
   bd48e:	695b      	ldr	r3, [r3, #20]
   bd490:	9301      	str	r3, [sp, #4]
   bd492:	bd08      	pop	{r3, pc}
   bd494:	00030230 	.word	0x00030230

000bd498 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd498:	b508      	push	{r3, lr}
   bd49a:	4b02      	ldr	r3, [pc, #8]	; (bd4a4 <hal_spi_init+0xc>)
   bd49c:	681b      	ldr	r3, [r3, #0]
   bd49e:	69db      	ldr	r3, [r3, #28]
   bd4a0:	9301      	str	r3, [sp, #4]
   bd4a2:	bd08      	pop	{r3, pc}
   bd4a4:	00030230 	.word	0x00030230

000bd4a8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b02      	ldr	r3, [pc, #8]	; (bd4b4 <hal_spi_is_enabled+0xc>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	6a1b      	ldr	r3, [r3, #32]
   bd4b0:	9301      	str	r3, [sp, #4]
   bd4b2:	bd08      	pop	{r3, pc}
   bd4b4:	00030230 	.word	0x00030230

000bd4b8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd4b8:	b508      	push	{r3, lr}
   bd4ba:	4b02      	ldr	r3, [pc, #8]	; (bd4c4 <hal_spi_info+0xc>)
   bd4bc:	681b      	ldr	r3, [r3, #0]
   bd4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd4c0:	9301      	str	r3, [sp, #4]
   bd4c2:	bd08      	pop	{r3, pc}
   bd4c4:	00030230 	.word	0x00030230

000bd4c8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd4c8:	b508      	push	{r3, lr}
   bd4ca:	4b02      	ldr	r3, [pc, #8]	; (bd4d4 <hal_spi_transfer_dma+0xc>)
   bd4cc:	681b      	ldr	r3, [r3, #0]
   bd4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd4d0:	9301      	str	r3, [sp, #4]
   bd4d2:	bd08      	pop	{r3, pc}
   bd4d4:	00030230 	.word	0x00030230

000bd4d8 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd4d8:	b508      	push	{r3, lr}
   bd4da:	4b02      	ldr	r3, [pc, #8]	; (bd4e4 <hal_spi_begin_ext+0xc>)
   bd4dc:	681b      	ldr	r3, [r3, #0]
   bd4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd4e0:	9301      	str	r3, [sp, #4]
   bd4e2:	bd08      	pop	{r3, pc}
   bd4e4:	00030230 	.word	0x00030230

000bd4e8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd4e8:	b508      	push	{r3, lr}
   bd4ea:	4b02      	ldr	r3, [pc, #8]	; (bd4f4 <hal_spi_transfer_dma_status+0xc>)
   bd4ec:	681b      	ldr	r3, [r3, #0]
   bd4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd4f0:	9301      	str	r3, [sp, #4]
   bd4f2:	bd08      	pop	{r3, pc}
   bd4f4:	00030230 	.word	0x00030230

000bd4f8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd4f8:	b508      	push	{r3, lr}
   bd4fa:	4b02      	ldr	r3, [pc, #8]	; (bd504 <hal_spi_set_settings+0xc>)
   bd4fc:	681b      	ldr	r3, [r3, #0]
   bd4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd500:	9301      	str	r3, [sp, #4]
   bd502:	bd08      	pop	{r3, pc}
   bd504:	00030230 	.word	0x00030230

000bd508 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd508:	b508      	push	{r3, lr}
   bd50a:	4b02      	ldr	r3, [pc, #8]	; (bd514 <hal_spi_acquire+0xc>)
   bd50c:	681b      	ldr	r3, [r3, #0]
   bd50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd510:	9301      	str	r3, [sp, #4]
   bd512:	bd08      	pop	{r3, pc}
   bd514:	00030230 	.word	0x00030230

000bd518 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd518:	b508      	push	{r3, lr}
   bd51a:	4b02      	ldr	r3, [pc, #8]	; (bd524 <hal_spi_release+0xc>)
   bd51c:	681b      	ldr	r3, [r3, #0]
   bd51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd520:	9301      	str	r3, [sp, #4]
   bd522:	bd08      	pop	{r3, pc}
   bd524:	00030230 	.word	0x00030230

000bd528 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd528:	b508      	push	{r3, lr}
   bd52a:	4b02      	ldr	r3, [pc, #8]	; (bd534 <hal_usart_end+0xc>)
   bd52c:	681b      	ldr	r3, [r3, #0]
   bd52e:	689b      	ldr	r3, [r3, #8]
   bd530:	9301      	str	r3, [sp, #4]
   bd532:	bd08      	pop	{r3, pc}
   bd534:	0003023c 	.word	0x0003023c

000bd538 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd538:	b508      	push	{r3, lr}
   bd53a:	4b02      	ldr	r3, [pc, #8]	; (bd544 <hal_usart_write+0xc>)
   bd53c:	681b      	ldr	r3, [r3, #0]
   bd53e:	68db      	ldr	r3, [r3, #12]
   bd540:	9301      	str	r3, [sp, #4]
   bd542:	bd08      	pop	{r3, pc}
   bd544:	0003023c 	.word	0x0003023c

000bd548 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd548:	b508      	push	{r3, lr}
   bd54a:	4b02      	ldr	r3, [pc, #8]	; (bd554 <hal_usart_available+0xc>)
   bd54c:	681b      	ldr	r3, [r3, #0]
   bd54e:	691b      	ldr	r3, [r3, #16]
   bd550:	9301      	str	r3, [sp, #4]
   bd552:	bd08      	pop	{r3, pc}
   bd554:	0003023c 	.word	0x0003023c

000bd558 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd558:	b508      	push	{r3, lr}
   bd55a:	4b02      	ldr	r3, [pc, #8]	; (bd564 <hal_usart_read+0xc>)
   bd55c:	681b      	ldr	r3, [r3, #0]
   bd55e:	695b      	ldr	r3, [r3, #20]
   bd560:	9301      	str	r3, [sp, #4]
   bd562:	bd08      	pop	{r3, pc}
   bd564:	0003023c 	.word	0x0003023c

000bd568 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd568:	b508      	push	{r3, lr}
   bd56a:	4b02      	ldr	r3, [pc, #8]	; (bd574 <hal_usart_peek+0xc>)
   bd56c:	681b      	ldr	r3, [r3, #0]
   bd56e:	699b      	ldr	r3, [r3, #24]
   bd570:	9301      	str	r3, [sp, #4]
   bd572:	bd08      	pop	{r3, pc}
   bd574:	0003023c 	.word	0x0003023c

000bd578 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd578:	b508      	push	{r3, lr}
   bd57a:	4b02      	ldr	r3, [pc, #8]	; (bd584 <hal_usart_flush+0xc>)
   bd57c:	681b      	ldr	r3, [r3, #0]
   bd57e:	69db      	ldr	r3, [r3, #28]
   bd580:	9301      	str	r3, [sp, #4]
   bd582:	bd08      	pop	{r3, pc}
   bd584:	0003023c 	.word	0x0003023c

000bd588 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd588:	b508      	push	{r3, lr}
   bd58a:	4b02      	ldr	r3, [pc, #8]	; (bd594 <hal_usart_is_enabled+0xc>)
   bd58c:	681b      	ldr	r3, [r3, #0]
   bd58e:	6a1b      	ldr	r3, [r3, #32]
   bd590:	9301      	str	r3, [sp, #4]
   bd592:	bd08      	pop	{r3, pc}
   bd594:	0003023c 	.word	0x0003023c

000bd598 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd598:	b508      	push	{r3, lr}
   bd59a:	4b02      	ldr	r3, [pc, #8]	; (bd5a4 <hal_usart_available_data_for_write+0xc>)
   bd59c:	681b      	ldr	r3, [r3, #0]
   bd59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd5a0:	9301      	str	r3, [sp, #4]
   bd5a2:	bd08      	pop	{r3, pc}
   bd5a4:	0003023c 	.word	0x0003023c

000bd5a8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd5a8:	b508      	push	{r3, lr}
   bd5aa:	4b02      	ldr	r3, [pc, #8]	; (bd5b4 <hal_usart_begin_config+0xc>)
   bd5ac:	681b      	ldr	r3, [r3, #0]
   bd5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd5b0:	9301      	str	r3, [sp, #4]
   bd5b2:	bd08      	pop	{r3, pc}
   bd5b4:	0003023c 	.word	0x0003023c

000bd5b8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd5b8:	b508      	push	{r3, lr}
   bd5ba:	4b02      	ldr	r3, [pc, #8]	; (bd5c4 <hal_usart_init_ex+0xc>)
   bd5bc:	681b      	ldr	r3, [r3, #0]
   bd5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd5c0:	9301      	str	r3, [sp, #4]
   bd5c2:	bd08      	pop	{r3, pc}
   bd5c4:	0003023c 	.word	0x0003023c

000bd5c8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd5c8:	b508      	push	{r3, lr}
   bd5ca:	4b02      	ldr	r3, [pc, #8]	; (bd5d4 <HAL_USB_USART_Init+0xc>)
   bd5cc:	681b      	ldr	r3, [r3, #0]
   bd5ce:	681b      	ldr	r3, [r3, #0]
   bd5d0:	9301      	str	r3, [sp, #4]
   bd5d2:	bd08      	pop	{r3, pc}
   bd5d4:	0003024c 	.word	0x0003024c

000bd5d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd5d8:	b508      	push	{r3, lr}
   bd5da:	4b02      	ldr	r3, [pc, #8]	; (bd5e4 <HAL_USB_USART_Begin+0xc>)
   bd5dc:	681b      	ldr	r3, [r3, #0]
   bd5de:	685b      	ldr	r3, [r3, #4]
   bd5e0:	9301      	str	r3, [sp, #4]
   bd5e2:	bd08      	pop	{r3, pc}
   bd5e4:	0003024c 	.word	0x0003024c

000bd5e8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd5e8:	b508      	push	{r3, lr}
   bd5ea:	4b02      	ldr	r3, [pc, #8]	; (bd5f4 <HAL_USB_USART_End+0xc>)
   bd5ec:	681b      	ldr	r3, [r3, #0]
   bd5ee:	689b      	ldr	r3, [r3, #8]
   bd5f0:	9301      	str	r3, [sp, #4]
   bd5f2:	bd08      	pop	{r3, pc}
   bd5f4:	0003024c 	.word	0x0003024c

000bd5f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd5f8:	b508      	push	{r3, lr}
   bd5fa:	4b02      	ldr	r3, [pc, #8]	; (bd604 <HAL_USB_USART_Available_Data+0xc>)
   bd5fc:	681b      	ldr	r3, [r3, #0]
   bd5fe:	691b      	ldr	r3, [r3, #16]
   bd600:	9301      	str	r3, [sp, #4]
   bd602:	bd08      	pop	{r3, pc}
   bd604:	0003024c 	.word	0x0003024c

000bd608 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd608:	b508      	push	{r3, lr}
   bd60a:	4b02      	ldr	r3, [pc, #8]	; (bd614 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd60c:	681b      	ldr	r3, [r3, #0]
   bd60e:	695b      	ldr	r3, [r3, #20]
   bd610:	9301      	str	r3, [sp, #4]
   bd612:	bd08      	pop	{r3, pc}
   bd614:	0003024c 	.word	0x0003024c

000bd618 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd618:	b508      	push	{r3, lr}
   bd61a:	4b02      	ldr	r3, [pc, #8]	; (bd624 <HAL_USB_USART_Receive_Data+0xc>)
   bd61c:	681b      	ldr	r3, [r3, #0]
   bd61e:	699b      	ldr	r3, [r3, #24]
   bd620:	9301      	str	r3, [sp, #4]
   bd622:	bd08      	pop	{r3, pc}
   bd624:	0003024c 	.word	0x0003024c

000bd628 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd628:	b508      	push	{r3, lr}
   bd62a:	4b02      	ldr	r3, [pc, #8]	; (bd634 <HAL_USB_USART_Send_Data+0xc>)
   bd62c:	681b      	ldr	r3, [r3, #0]
   bd62e:	69db      	ldr	r3, [r3, #28]
   bd630:	9301      	str	r3, [sp, #4]
   bd632:	bd08      	pop	{r3, pc}
   bd634:	0003024c 	.word	0x0003024c

000bd638 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd638:	b508      	push	{r3, lr}
   bd63a:	4b02      	ldr	r3, [pc, #8]	; (bd644 <HAL_USB_USART_Flush_Data+0xc>)
   bd63c:	681b      	ldr	r3, [r3, #0]
   bd63e:	6a1b      	ldr	r3, [r3, #32]
   bd640:	9301      	str	r3, [sp, #4]
   bd642:	bd08      	pop	{r3, pc}
   bd644:	0003024c 	.word	0x0003024c

000bd648 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd648:	b508      	push	{r3, lr}
   bd64a:	4b02      	ldr	r3, [pc, #8]	; (bd654 <panic_+0xc>)
   bd64c:	681b      	ldr	r3, [r3, #0]
   bd64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd650:	9301      	str	r3, [sp, #4]
   bd652:	bd08      	pop	{r3, pc}
   bd654:	00030260 	.word	0x00030260

000bd658 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd658:	b508      	push	{r3, lr}
   bd65a:	4b02      	ldr	r3, [pc, #8]	; (bd664 <log_message+0xc>)
   bd65c:	681b      	ldr	r3, [r3, #0]
   bd65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd660:	9301      	str	r3, [sp, #4]
   bd662:	bd08      	pop	{r3, pc}
   bd664:	00030260 	.word	0x00030260

000bd668 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd668:	b508      	push	{r3, lr}
   bd66a:	4b02      	ldr	r3, [pc, #8]	; (bd674 <log_level_name+0xc>)
   bd66c:	681b      	ldr	r3, [r3, #0]
   bd66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd670:	9301      	str	r3, [sp, #4]
   bd672:	bd08      	pop	{r3, pc}
   bd674:	00030260 	.word	0x00030260

000bd678 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd678:	b508      	push	{r3, lr}
   bd67a:	4b02      	ldr	r3, [pc, #8]	; (bd684 <log_set_callbacks+0xc>)
   bd67c:	681b      	ldr	r3, [r3, #0]
   bd67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd680:	9301      	str	r3, [sp, #4]
   bd682:	bd08      	pop	{r3, pc}
   bd684:	00030260 	.word	0x00030260

000bd688 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd688:	b508      	push	{r3, lr}
   bd68a:	4b03      	ldr	r3, [pc, #12]	; (bd698 <led_set_status_active+0x10>)
   bd68c:	681b      	ldr	r3, [r3, #0]
   bd68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd692:	9301      	str	r3, [sp, #4]
   bd694:	bd08      	pop	{r3, pc}
   bd696:	0000      	.short	0x0000
   bd698:	00030260 	.word	0x00030260

000bd69c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd69c:	b508      	push	{r3, lr}
   bd69e:	4b02      	ldr	r3, [pc, #8]	; (bd6a8 <system_mode+0xc>)
   bd6a0:	681b      	ldr	r3, [r3, #0]
   bd6a2:	681b      	ldr	r3, [r3, #0]
   bd6a4:	9301      	str	r3, [sp, #4]
   bd6a6:	bd08      	pop	{r3, pc}
   bd6a8:	00030220 	.word	0x00030220

000bd6ac <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd6ac:	b508      	push	{r3, lr}
   bd6ae:	4b02      	ldr	r3, [pc, #8]	; (bd6b8 <set_system_mode+0xc>)
   bd6b0:	681b      	ldr	r3, [r3, #0]
   bd6b2:	685b      	ldr	r3, [r3, #4]
   bd6b4:	9301      	str	r3, [sp, #4]
   bd6b6:	bd08      	pop	{r3, pc}
   bd6b8:	00030220 	.word	0x00030220

000bd6bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd6bc:	b508      	push	{r3, lr}
   bd6be:	4b02      	ldr	r3, [pc, #8]	; (bd6c8 <system_delay_ms+0xc>)
   bd6c0:	681b      	ldr	r3, [r3, #0]
   bd6c2:	695b      	ldr	r3, [r3, #20]
   bd6c4:	9301      	str	r3, [sp, #4]
   bd6c6:	bd08      	pop	{r3, pc}
   bd6c8:	00030220 	.word	0x00030220

000bd6cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd6cc:	b508      	push	{r3, lr}
   bd6ce:	4b02      	ldr	r3, [pc, #8]	; (bd6d8 <application_thread_current+0xc>)
   bd6d0:	681b      	ldr	r3, [r3, #0]
   bd6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd6d4:	9301      	str	r3, [sp, #4]
   bd6d6:	bd08      	pop	{r3, pc}
   bd6d8:	00030220 	.word	0x00030220

000bd6dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd6dc:	b508      	push	{r3, lr}
   bd6de:	4b02      	ldr	r3, [pc, #8]	; (bd6e8 <application_thread_invoke+0xc>)
   bd6e0:	681b      	ldr	r3, [r3, #0]
   bd6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd6e4:	9301      	str	r3, [sp, #4]
   bd6e6:	bd08      	pop	{r3, pc}
   bd6e8:	00030220 	.word	0x00030220

000bd6ec <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd6ec:	b508      	push	{r3, lr}
   bd6ee:	4b02      	ldr	r3, [pc, #8]	; (bd6f8 <system_thread_get_state+0xc>)
   bd6f0:	681b      	ldr	r3, [r3, #0]
   bd6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd6f4:	9301      	str	r3, [sp, #4]
   bd6f6:	bd08      	pop	{r3, pc}
   bd6f8:	00030220 	.word	0x00030220

000bd6fc <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bd6fc:	b508      	push	{r3, lr}
   bd6fe:	4b02      	ldr	r3, [pc, #8]	; (bd708 <led_pattern_period+0xc>)
   bd700:	681b      	ldr	r3, [r3, #0]
   bd702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd704:	9301      	str	r3, [sp, #4]
   bd706:	bd08      	pop	{r3, pc}
   bd708:	00030220 	.word	0x00030220

000bd70c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd70c:	b508      	push	{r3, lr}
   bd70e:	4b03      	ldr	r3, [pc, #12]	; (bd71c <system_ctrl_set_app_request_handler+0x10>)
   bd710:	681b      	ldr	r3, [r3, #0]
   bd712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd716:	9301      	str	r3, [sp, #4]
   bd718:	bd08      	pop	{r3, pc}
   bd71a:	0000      	.short	0x0000
   bd71c:	00030220 	.word	0x00030220

000bd720 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd720:	b508      	push	{r3, lr}
   bd722:	4b03      	ldr	r3, [pc, #12]	; (bd730 <system_ctrl_set_result+0x10>)
   bd724:	681b      	ldr	r3, [r3, #0]
   bd726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd72a:	9301      	str	r3, [sp, #4]
   bd72c:	bd08      	pop	{r3, pc}
   bd72e:	0000      	.short	0x0000
   bd730:	00030220 	.word	0x00030220

000bd734 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd734:	b508      	push	{r3, lr}
   bd736:	4b02      	ldr	r3, [pc, #8]	; (bd740 <spark_process+0xc>)
   bd738:	681b      	ldr	r3, [r3, #0]
   bd73a:	689b      	ldr	r3, [r3, #8]
   bd73c:	9301      	str	r3, [sp, #4]
   bd73e:	bd08      	pop	{r3, pc}
   bd740:	00030244 	.word	0x00030244

000bd744 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd744:	b508      	push	{r3, lr}
   bd746:	4b02      	ldr	r3, [pc, #8]	; (bd750 <spark_cloud_flag_connected+0xc>)
   bd748:	681b      	ldr	r3, [r3, #0]
   bd74a:	695b      	ldr	r3, [r3, #20]
   bd74c:	9301      	str	r3, [sp, #4]
   bd74e:	bd08      	pop	{r3, pc}
   bd750:	00030244 	.word	0x00030244

000bd754 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd754:	b508      	push	{r3, lr}
   bd756:	4b02      	ldr	r3, [pc, #8]	; (bd760 <spark_send_event+0xc>)
   bd758:	681b      	ldr	r3, [r3, #0]
   bd75a:	6a1b      	ldr	r3, [r3, #32]
   bd75c:	9301      	str	r3, [sp, #4]
   bd75e:	bd08      	pop	{r3, pc}
   bd760:	00030244 	.word	0x00030244

000bd764 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bd764:	b508      	push	{r3, lr}
   bd766:	4b02      	ldr	r3, [pc, #8]	; (bd770 <spark_subscribe+0xc>)
   bd768:	681b      	ldr	r3, [r3, #0]
   bd76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd76c:	9301      	str	r3, [sp, #4]
   bd76e:	bd08      	pop	{r3, pc}
   bd770:	00030244 	.word	0x00030244

000bd774 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd774:	b508      	push	{r3, lr}
   bd776:	4b02      	ldr	r3, [pc, #8]	; (bd780 <spark_sync_time_pending+0xc>)
   bd778:	681b      	ldr	r3, [r3, #0]
   bd77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd77c:	9301      	str	r3, [sp, #4]
   bd77e:	bd08      	pop	{r3, pc}
   bd780:	00030244 	.word	0x00030244

000bd784 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd784:	b508      	push	{r3, lr}
   bd786:	4b02      	ldr	r3, [pc, #8]	; (bd790 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd788:	681b      	ldr	r3, [r3, #0]
   bd78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd78c:	9301      	str	r3, [sp, #4]
   bd78e:	bd08      	pop	{r3, pc}
   bd790:	00030244 	.word	0x00030244

000bd794 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd794:	b508      	push	{r3, lr}
   bd796:	4b02      	ldr	r3, [pc, #8]	; (bd7a0 <network_connect+0xc>)
   bd798:	681b      	ldr	r3, [r3, #0]
   bd79a:	685b      	ldr	r3, [r3, #4]
   bd79c:	9301      	str	r3, [sp, #4]
   bd79e:	bd08      	pop	{r3, pc}
   bd7a0:	00030240 	.word	0x00030240

000bd7a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd7a4:	b508      	push	{r3, lr}
   bd7a6:	4b02      	ldr	r3, [pc, #8]	; (bd7b0 <network_connecting+0xc>)
   bd7a8:	681b      	ldr	r3, [r3, #0]
   bd7aa:	689b      	ldr	r3, [r3, #8]
   bd7ac:	9301      	str	r3, [sp, #4]
   bd7ae:	bd08      	pop	{r3, pc}
   bd7b0:	00030240 	.word	0x00030240

000bd7b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd7b4:	b508      	push	{r3, lr}
   bd7b6:	4b02      	ldr	r3, [pc, #8]	; (bd7c0 <network_disconnect+0xc>)
   bd7b8:	681b      	ldr	r3, [r3, #0]
   bd7ba:	68db      	ldr	r3, [r3, #12]
   bd7bc:	9301      	str	r3, [sp, #4]
   bd7be:	bd08      	pop	{r3, pc}
   bd7c0:	00030240 	.word	0x00030240

000bd7c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd7c4:	b508      	push	{r3, lr}
   bd7c6:	4b02      	ldr	r3, [pc, #8]	; (bd7d0 <network_ready+0xc>)
   bd7c8:	681b      	ldr	r3, [r3, #0]
   bd7ca:	691b      	ldr	r3, [r3, #16]
   bd7cc:	9301      	str	r3, [sp, #4]
   bd7ce:	bd08      	pop	{r3, pc}
   bd7d0:	00030240 	.word	0x00030240

000bd7d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd7d4:	b508      	push	{r3, lr}
   bd7d6:	4b02      	ldr	r3, [pc, #8]	; (bd7e0 <network_on+0xc>)
   bd7d8:	681b      	ldr	r3, [r3, #0]
   bd7da:	695b      	ldr	r3, [r3, #20]
   bd7dc:	9301      	str	r3, [sp, #4]
   bd7de:	bd08      	pop	{r3, pc}
   bd7e0:	00030240 	.word	0x00030240

000bd7e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd7e4:	b508      	push	{r3, lr}
   bd7e6:	4b02      	ldr	r3, [pc, #8]	; (bd7f0 <network_off+0xc>)
   bd7e8:	681b      	ldr	r3, [r3, #0]
   bd7ea:	699b      	ldr	r3, [r3, #24]
   bd7ec:	9301      	str	r3, [sp, #4]
   bd7ee:	bd08      	pop	{r3, pc}
   bd7f0:	00030240 	.word	0x00030240

000bd7f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd7f4:	b508      	push	{r3, lr}
   bd7f6:	4b02      	ldr	r3, [pc, #8]	; (bd800 <network_listen+0xc>)
   bd7f8:	681b      	ldr	r3, [r3, #0]
   bd7fa:	69db      	ldr	r3, [r3, #28]
   bd7fc:	9301      	str	r3, [sp, #4]
   bd7fe:	bd08      	pop	{r3, pc}
   bd800:	00030240 	.word	0x00030240

000bd804 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd804:	b508      	push	{r3, lr}
   bd806:	4b02      	ldr	r3, [pc, #8]	; (bd810 <network_listening+0xc>)
   bd808:	681b      	ldr	r3, [r3, #0]
   bd80a:	6a1b      	ldr	r3, [r3, #32]
   bd80c:	9301      	str	r3, [sp, #4]
   bd80e:	bd08      	pop	{r3, pc}
   bd810:	00030240 	.word	0x00030240

000bd814 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd814:	b508      	push	{r3, lr}
   bd816:	4b02      	ldr	r3, [pc, #8]	; (bd820 <network_set_listen_timeout+0xc>)
   bd818:	681b      	ldr	r3, [r3, #0]
   bd81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd81c:	9301      	str	r3, [sp, #4]
   bd81e:	bd08      	pop	{r3, pc}
   bd820:	00030240 	.word	0x00030240

000bd824 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd824:	b508      	push	{r3, lr}
   bd826:	4b02      	ldr	r3, [pc, #8]	; (bd830 <network_get_listen_timeout+0xc>)
   bd828:	681b      	ldr	r3, [r3, #0]
   bd82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd82c:	9301      	str	r3, [sp, #4]
   bd82e:	bd08      	pop	{r3, pc}
   bd830:	00030240 	.word	0x00030240

000bd834 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd834:	b508      	push	{r3, lr}
   bd836:	4b02      	ldr	r3, [pc, #8]	; (bd840 <network_is_on+0xc>)
   bd838:	681b      	ldr	r3, [r3, #0]
   bd83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd83c:	9301      	str	r3, [sp, #4]
   bd83e:	bd08      	pop	{r3, pc}
   bd840:	00030240 	.word	0x00030240

000bd844 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd844:	b508      	push	{r3, lr}
   bd846:	4b02      	ldr	r3, [pc, #8]	; (bd850 <network_is_off+0xc>)
   bd848:	681b      	ldr	r3, [r3, #0]
   bd84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd84c:	9301      	str	r3, [sp, #4]
   bd84e:	bd08      	pop	{r3, pc}
   bd850:	00030240 	.word	0x00030240

000bd854 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd854:	b508      	push	{r3, lr}
   bd856:	4b02      	ldr	r3, [pc, #8]	; (bd860 <malloc+0xc>)
   bd858:	681b      	ldr	r3, [r3, #0]
   bd85a:	681b      	ldr	r3, [r3, #0]
   bd85c:	9301      	str	r3, [sp, #4]
   bd85e:	bd08      	pop	{r3, pc}
   bd860:	0003021c 	.word	0x0003021c

000bd864 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd864:	b508      	push	{r3, lr}
   bd866:	4b02      	ldr	r3, [pc, #8]	; (bd870 <free+0xc>)
   bd868:	681b      	ldr	r3, [r3, #0]
   bd86a:	685b      	ldr	r3, [r3, #4]
   bd86c:	9301      	str	r3, [sp, #4]
   bd86e:	bd08      	pop	{r3, pc}
   bd870:	0003021c 	.word	0x0003021c

000bd874 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd874:	b508      	push	{r3, lr}
   bd876:	4b02      	ldr	r3, [pc, #8]	; (bd880 <realloc+0xc>)
   bd878:	681b      	ldr	r3, [r3, #0]
   bd87a:	689b      	ldr	r3, [r3, #8]
   bd87c:	9301      	str	r3, [sp, #4]
   bd87e:	bd08      	pop	{r3, pc}
   bd880:	0003021c 	.word	0x0003021c

000bd884 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bd884:	b508      	push	{r3, lr}
   bd886:	4b02      	ldr	r3, [pc, #8]	; (bd890 <sprintf+0xc>)
   bd888:	681b      	ldr	r3, [r3, #0]
   bd88a:	68db      	ldr	r3, [r3, #12]
   bd88c:	9301      	str	r3, [sp, #4]
   bd88e:	bd08      	pop	{r3, pc}
   bd890:	0003021c 	.word	0x0003021c

000bd894 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd894:	b508      	push	{r3, lr}
   bd896:	4b02      	ldr	r3, [pc, #8]	; (bd8a0 <sscanf+0xc>)
   bd898:	681b      	ldr	r3, [r3, #0]
   bd89a:	695b      	ldr	r3, [r3, #20]
   bd89c:	9301      	str	r3, [sp, #4]
   bd89e:	bd08      	pop	{r3, pc}
   bd8a0:	0003021c 	.word	0x0003021c

000bd8a4 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd8a4:	b508      	push	{r3, lr}
   bd8a6:	4b02      	ldr	r3, [pc, #8]	; (bd8b0 <snprintf+0xc>)
   bd8a8:	681b      	ldr	r3, [r3, #0]
   bd8aa:	69db      	ldr	r3, [r3, #28]
   bd8ac:	9301      	str	r3, [sp, #4]
   bd8ae:	bd08      	pop	{r3, pc}
   bd8b0:	0003021c 	.word	0x0003021c

000bd8b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd8b4:	b508      	push	{r3, lr}
   bd8b6:	4b02      	ldr	r3, [pc, #8]	; (bd8c0 <vsnprintf+0xc>)
   bd8b8:	681b      	ldr	r3, [r3, #0]
   bd8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd8bc:	9301      	str	r3, [sp, #4]
   bd8be:	bd08      	pop	{r3, pc}
   bd8c0:	0003021c 	.word	0x0003021c

000bd8c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd8c4:	b508      	push	{r3, lr}
   bd8c6:	4b02      	ldr	r3, [pc, #8]	; (bd8d0 <abort+0xc>)
   bd8c8:	681b      	ldr	r3, [r3, #0]
   bd8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd8cc:	9301      	str	r3, [sp, #4]
   bd8ce:	bd08      	pop	{r3, pc}
   bd8d0:	0003021c 	.word	0x0003021c

000bd8d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd8d4:	b508      	push	{r3, lr}
   bd8d6:	4b02      	ldr	r3, [pc, #8]	; (bd8e0 <_malloc_r+0xc>)
   bd8d8:	681b      	ldr	r3, [r3, #0]
   bd8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd8dc:	9301      	str	r3, [sp, #4]
   bd8de:	bd08      	pop	{r3, pc}
   bd8e0:	0003021c 	.word	0x0003021c

000bd8e4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd8e4:	b508      	push	{r3, lr}
   bd8e6:	4b02      	ldr	r3, [pc, #8]	; (bd8f0 <__errno+0xc>)
   bd8e8:	681b      	ldr	r3, [r3, #0]
   bd8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd8ec:	9301      	str	r3, [sp, #4]
   bd8ee:	bd08      	pop	{r3, pc}
   bd8f0:	0003021c 	.word	0x0003021c

000bd8f4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd8f4:	b508      	push	{r3, lr}
   bd8f6:	4b02      	ldr	r3, [pc, #8]	; (bd900 <__assert_func+0xc>)
   bd8f8:	681b      	ldr	r3, [r3, #0]
   bd8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd8fc:	9301      	str	r3, [sp, #4]
   bd8fe:	bd08      	pop	{r3, pc}
   bd900:	0003021c 	.word	0x0003021c

000bd904 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd904:	b508      	push	{r3, lr}
   bd906:	4b02      	ldr	r3, [pc, #8]	; (bd910 <newlib_impure_ptr_callback+0xc>)
   bd908:	681b      	ldr	r3, [r3, #0]
   bd90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd90c:	9301      	str	r3, [sp, #4]
   bd90e:	bd08      	pop	{r3, pc}
   bd910:	0003021c 	.word	0x0003021c

000bd914 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd914:	b508      	push	{r3, lr}
   bd916:	4b02      	ldr	r3, [pc, #8]	; (bd920 <localtime_r+0xc>)
   bd918:	681b      	ldr	r3, [r3, #0]
   bd91a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd91c:	9301      	str	r3, [sp, #4]
   bd91e:	bd08      	pop	{r3, pc}
   bd920:	0003021c 	.word	0x0003021c

000bd924 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bd924:	428a      	cmp	r2, r1
{
   bd926:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bd928:	d007      	beq.n	bd93a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bd92a:	1a44      	subs	r4, r0, r1
   bd92c:	9802      	ldr	r0, [sp, #8]
   bd92e:	1ac0      	subs	r0, r0, r3
   bd930:	4344      	muls	r4, r0
   bd932:	1a50      	subs	r0, r2, r1
   bd934:	fb94 f0f0 	sdiv	r0, r4, r0
   bd938:	4418      	add	r0, r3
}
   bd93a:	bd10      	pop	{r4, pc}

000bd93c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd93c:	2100      	movs	r1, #0
   bd93e:	f7ff bebd 	b.w	bd6bc <system_delay_ms>

000bd942 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd942:	b510      	push	{r4, lr}
      if (_M_empty())
   bd944:	6883      	ldr	r3, [r0, #8]
   bd946:	4604      	mov	r4, r0
   bd948:	b90b      	cbnz	r3, bd94e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd94a:	f003 fe99 	bl	c1680 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd94e:	68c3      	ldr	r3, [r0, #12]
   bd950:	4798      	blx	r3
      if (_M_manager)
   bd952:	68a3      	ldr	r3, [r4, #8]
   bd954:	b11b      	cbz	r3, bd95e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd956:	2203      	movs	r2, #3
   bd958:	4621      	mov	r1, r4
   bd95a:	4620      	mov	r0, r4
   bd95c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd95e:	4620      	mov	r0, r4
   bd960:	2110      	movs	r1, #16
}
   bd962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd966:	f7f6 bb9c 	b.w	b40a2 <_ZdlPvj>

000bd96a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd96a:	4770      	bx	lr

000bd96c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd96c:	4770      	bx	lr

000bd96e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd96e:	4770      	bx	lr

000bd970 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd970:	4770      	bx	lr
	...

000bd974 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd974:	4b06      	ldr	r3, [pc, #24]	; (bd990 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd976:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd978:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd97a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd97e:	d005      	beq.n	bd98c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd980:	4608      	mov	r0, r1
   bd982:	f003 fe81 	bl	c1688 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd986:	2800      	cmp	r0, #0
   bd988:	bf08      	it	eq
   bd98a:	2400      	moveq	r4, #0
      }
   bd98c:	4620      	mov	r0, r4
   bd98e:	bd10      	pop	{r4, pc}
   bd990:	000c7224 	.word	0x000c7224

000bd994 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd994:	4b06      	ldr	r3, [pc, #24]	; (bd9b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd996:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd998:	b510      	push	{r4, lr}
   bd99a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd99e:	d005      	beq.n	bd9ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd9a0:	4608      	mov	r0, r1
   bd9a2:	f003 fe71 	bl	c1688 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd9a6:	2800      	cmp	r0, #0
   bd9a8:	bf08      	it	eq
   bd9aa:	2400      	moveq	r4, #0
      }
   bd9ac:	4620      	mov	r0, r4
   bd9ae:	bd10      	pop	{r4, pc}
   bd9b0:	000c7224 	.word	0x000c7224

000bd9b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd9b4:	4b06      	ldr	r3, [pc, #24]	; (bd9d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd9b6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd9b8:	b510      	push	{r4, lr}
   bd9ba:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd9be:	d005      	beq.n	bd9cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd9c0:	4608      	mov	r0, r1
   bd9c2:	f003 fe61 	bl	c1688 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd9c6:	2800      	cmp	r0, #0
   bd9c8:	bf08      	it	eq
   bd9ca:	2400      	moveq	r4, #0
      }
   bd9cc:	4620      	mov	r0, r4
   bd9ce:	bd10      	pop	{r4, pc}
   bd9d0:	000c7224 	.word	0x000c7224

000bd9d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd9d4:	b510      	push	{r4, lr}
   bd9d6:	2168      	movs	r1, #104	; 0x68
   bd9d8:	4604      	mov	r4, r0
   bd9da:	f7f6 fb62 	bl	b40a2 <_ZdlPvj>
   bd9de:	4620      	mov	r0, r4
   bd9e0:	bd10      	pop	{r4, pc}

000bd9e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd9e2:	b510      	push	{r4, lr}
   bd9e4:	2128      	movs	r1, #40	; 0x28
   bd9e6:	4604      	mov	r4, r0
   bd9e8:	f7f6 fb5b 	bl	b40a2 <_ZdlPvj>
   bd9ec:	4620      	mov	r0, r4
   bd9ee:	bd10      	pop	{r4, pc}

000bd9f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd9f0:	b510      	push	{r4, lr}
   bd9f2:	2130      	movs	r1, #48	; 0x30
   bd9f4:	4604      	mov	r4, r0
   bd9f6:	f7f6 fb54 	bl	b40a2 <_ZdlPvj>
   bd9fa:	4620      	mov	r0, r4
   bd9fc:	bd10      	pop	{r4, pc}

000bd9fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd9fe:	2168      	movs	r1, #104	; 0x68
   bda00:	f7f6 bb4f 	b.w	b40a2 <_ZdlPvj>

000bda04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bda04:	2128      	movs	r1, #40	; 0x28
   bda06:	f7f6 bb4c 	b.w	b40a2 <_ZdlPvj>

000bda0a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bda0a:	2130      	movs	r1, #48	; 0x30
   bda0c:	f7f6 bb49 	b.w	b40a2 <_ZdlPvj>

000bda10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bda10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bda12:	2500      	movs	r5, #0
   bda14:	1cec      	adds	r4, r5, #3
   bda16:	428c      	cmp	r4, r1
   bda18:	d80d      	bhi.n	bda36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bda1a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bda1c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bda1e:	5d87      	ldrb	r7, [r0, r6]
   bda20:	4297      	cmp	r7, r2
   bda22:	d105      	bne.n	bda30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bda24:	4426      	add	r6, r4
   bda26:	42b1      	cmp	r1, r6
   bda28:	d305      	bcc.n	bda36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bda2a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bda2c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bda2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bda30:	3401      	adds	r4, #1
   bda32:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bda34:	e7ee      	b.n	bda14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bda36:	2000      	movs	r0, #0
   bda38:	e7f9      	b.n	bda2e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bda3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bda3c:	4a02      	ldr	r2, [pc, #8]	; (bda48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bda3e:	4903      	ldr	r1, [pc, #12]	; (bda4c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bda40:	200a      	movs	r0, #10
   bda42:	f7ff be01 	b.w	bd648 <panic_>
   bda46:	bf00      	nop
   bda48:	000bd289 	.word	0x000bd289
   bda4c:	000c7081 	.word	0x000c7081

000bda50 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bda50:	b430      	push	{r4, r5}
   bda52:	460d      	mov	r5, r1
   bda54:	4611      	mov	r1, r2
   bda56:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bda58:	6803      	ldr	r3, [r0, #0]
   bda5a:	6809      	ldr	r1, [r1, #0]
   bda5c:	6828      	ldr	r0, [r5, #0]
   bda5e:	e9d3 4300 	ldrd	r4, r3, [r3]
   bda62:	46a4      	mov	ip, r4
      }
   bda64:	bc30      	pop	{r4, r5}
   bda66:	4760      	bx	ip

000bda68 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bda68:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bda6a:	b538      	push	{r3, r4, r5, lr}
   bda6c:	4604      	mov	r4, r0
	switch (__op)
   bda6e:	d102      	bne.n	bda76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bda70:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bda72:	6023      	str	r3, [r4, #0]
	}
   bda74:	e003      	b.n	bda7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bda76:	2a02      	cmp	r2, #2
   bda78:	d003      	beq.n	bda82 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bda7a:	2a03      	cmp	r2, #3
   bda7c:	d00d      	beq.n	bda9a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bda7e:	2000      	movs	r0, #0
   bda80:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bda82:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bda84:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bda86:	f7f6 fb06 	bl	b4096 <_Znwj>
   bda8a:	4603      	mov	r3, r0
   bda8c:	2800      	cmp	r0, #0
   bda8e:	d0f0      	beq.n	bda72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bda90:	e895 0003 	ldmia.w	r5, {r0, r1}
   bda94:	e883 0003 	stmia.w	r3, {r0, r1}
   bda98:	e7eb      	b.n	bda72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bda9a:	6800      	ldr	r0, [r0, #0]
   bda9c:	2800      	cmp	r0, #0
   bda9e:	d0ee      	beq.n	bda7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bdaa0:	2108      	movs	r1, #8
   bdaa2:	f7f6 fafe 	bl	b40a2 <_ZdlPvj>
   bdaa6:	e7ea      	b.n	bda7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bdaa8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bdaa8:	b510      	push	{r4, lr}
   bdaaa:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bdaac:	3058      	adds	r0, #88	; 0x58
   bdaae:	f7f6 fc95 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bdab2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bdab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bdaba:	f003 b9a5 	b.w	c0e08 <_ZN6StringD1Ev>

000bdabe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bdabe:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bdac0:	6843      	ldr	r3, [r0, #4]
   bdac2:	3b01      	subs	r3, #1
    {
   bdac4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bdac6:	6043      	str	r3, [r0, #4]
   bdac8:	b963      	cbnz	r3, bdae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bdaca:	6803      	ldr	r3, [r0, #0]
   bdacc:	689b      	ldr	r3, [r3, #8]
   bdace:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bdad0:	68a3      	ldr	r3, [r4, #8]
   bdad2:	3b01      	subs	r3, #1
   bdad4:	60a3      	str	r3, [r4, #8]
   bdad6:	b92b      	cbnz	r3, bdae4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bdad8:	6823      	ldr	r3, [r4, #0]
   bdada:	4620      	mov	r0, r4
   bdadc:	68db      	ldr	r3, [r3, #12]
    }
   bdade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bdae2:	4718      	bx	r3
    }
   bdae4:	bd10      	pop	{r4, pc}

000bdae6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bdae6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bdaea:	b2da      	uxtb	r2, r3
   bdaec:	2a09      	cmp	r2, #9
   bdaee:	d801      	bhi.n	bdaf4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bdaf0:	4618      	mov	r0, r3
   bdaf2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bdaf4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bdaf8:	2b05      	cmp	r3, #5
   bdafa:	d801      	bhi.n	bdb00 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bdafc:	3857      	subs	r0, #87	; 0x57
   bdafe:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bdb00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bdb04:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bdb06:	bf94      	ite	ls
   bdb08:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bdb0a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bdb0e:	4770      	bx	lr

000bdb10 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bdb10:	b510      	push	{r4, lr}
            locked_(false) {
   bdb12:	2300      	movs	r3, #0
   bdb14:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bdb16:	4b04      	ldr	r3, [pc, #16]	; (bdb28 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bdb18:	4604      	mov	r4, r0
   bdb1a:	6818      	ldr	r0, [r3, #0]
   bdb1c:	f7ff fb94 	bl	bd248 <os_mutex_recursive_lock>
        locked_ = true;
   bdb20:	2301      	movs	r3, #1
   bdb22:	7023      	strb	r3, [r4, #0]
    }
   bdb24:	4620      	mov	r0, r4
   bdb26:	bd10      	pop	{r4, pc}
   bdb28:	2003e628 	.word	0x2003e628

000bdb2c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bdb2c:	b510      	push	{r4, lr}
        if (locked_) {
   bdb2e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bdb30:	4604      	mov	r4, r0
        if (locked_) {
   bdb32:	b11b      	cbz	r3, bdb3c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bdb34:	4b02      	ldr	r3, [pc, #8]	; (bdb40 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bdb36:	6818      	ldr	r0, [r3, #0]
   bdb38:	f7ff fb8e 	bl	bd258 <os_mutex_recursive_unlock>
    }
   bdb3c:	4620      	mov	r0, r4
   bdb3e:	bd10      	pop	{r4, pc}
   bdb40:	2003e628 	.word	0x2003e628

000bdb44 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bdb44:	b082      	sub	sp, #8
   bdb46:	4603      	mov	r3, r0
    address_ = addr;
   bdb48:	6808      	ldr	r0, [r1, #0]
   bdb4a:	6849      	ldr	r1, [r1, #4]
   bdb4c:	466a      	mov	r2, sp
   bdb4e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bdb50:	466a      	mov	r2, sp
   bdb52:	ca03      	ldmia	r2!, {r0, r1}
   bdb54:	6018      	str	r0, [r3, #0]
}
   bdb56:	4618      	mov	r0, r3
    address_ = addr.address_;
   bdb58:	6059      	str	r1, [r3, #4]
}
   bdb5a:	b002      	add	sp, #8
   bdb5c:	4770      	bx	lr

000bdb5e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bdb5e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bdb60:	7982      	ldrb	r2, [r0, #6]
   bdb62:	798b      	ldrb	r3, [r1, #6]
   bdb64:	429a      	cmp	r2, r3
   bdb66:	d106      	bne.n	bdb76 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bdb68:	2206      	movs	r2, #6
   bdb6a:	f005 ff79 	bl	c3a60 <memcmp>
   bdb6e:	fab0 f080 	clz	r0, r0
   bdb72:	0940      	lsrs	r0, r0, #5
}
   bdb74:	bd08      	pop	{r3, pc}
    return false;
   bdb76:	2000      	movs	r0, #0
   bdb78:	e7fc      	b.n	bdb74 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bdb7a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bdb7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bdb7e:	6003      	str	r3, [r0, #0]
   bdb80:	8083      	strh	r3, [r0, #4]
}
   bdb82:	2000      	movs	r0, #0
   bdb84:	4770      	bx	lr

000bdb86 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bdb86:	b508      	push	{r3, lr}
   bdb88:	4602      	mov	r2, r0
        : address_{} {
   bdb8a:	2100      	movs	r1, #0
   bdb8c:	6001      	str	r1, [r0, #0]
   bdb8e:	6041      	str	r1, [r0, #4]
    clear();
   bdb90:	f7ff fff3 	bl	bdb7a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bdb94:	7191      	strb	r1, [r2, #6]
}
   bdb96:	4610      	mov	r0, r2
   bdb98:	bd08      	pop	{r3, pc}
	...

000bdb9c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bdb9c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bdb9e:	2301      	movs	r3, #1
   bdba0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdba2:	4b05      	ldr	r3, [pc, #20]	; (bdbb8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bdba4:	4602      	mov	r2, r0
   bdba6:	f103 0110 	add.w	r1, r3, #16
   bdbaa:	f853 4b04 	ldr.w	r4, [r3], #4
   bdbae:	f842 4b04 	str.w	r4, [r2], #4
   bdbb2:	428b      	cmp	r3, r1
   bdbb4:	d1f9      	bne.n	bdbaa <_ZN8particle7BleUuidC1Ev+0xe>
}
   bdbb6:	bd10      	pop	{r4, pc}
   bdbb8:	000c7232 	.word	0x000c7232

000bdbbc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdbbc:	b510      	push	{r4, lr}
    if (uuid128) {
   bdbbe:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdbc0:	4604      	mov	r4, r0
    if (uuid128) {
   bdbc2:	b1b1      	cbz	r1, bdbf2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bdbc4:	2a01      	cmp	r2, #1
   bdbc6:	f101 0210 	add.w	r2, r1, #16
   bdbca:	d10a      	bne.n	bdbe2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bdbcc:	4601      	mov	r1, r0
   bdbce:	f853 0b04 	ldr.w	r0, [r3], #4
   bdbd2:	f841 0b04 	str.w	r0, [r1], #4
   bdbd6:	4293      	cmp	r3, r2
   bdbd8:	d1f9      	bne.n	bdbce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bdbda:	2301      	movs	r3, #1
   bdbdc:	6123      	str	r3, [r4, #16]
}
   bdbde:	4620      	mov	r0, r4
   bdbe0:	bd10      	pop	{r4, pc}
   bdbe2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bdbe4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bdbe8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bdbec:	429a      	cmp	r2, r3
   bdbee:	d1f9      	bne.n	bdbe4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bdbf0:	e7f3      	b.n	bdbda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bdbf2:	2210      	movs	r2, #16
   bdbf4:	f005 ff6c 	bl	c3ad0 <memset>
   bdbf8:	e7f1      	b.n	bdbde <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bdbfa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bdbfa:	b538      	push	{r3, r4, r5, lr}
   bdbfc:	4604      	mov	r4, r0
   bdbfe:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bdc00:	461a      	mov	r2, r3
   bdc02:	f7ff ffdb 	bl	bdbbc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bdc06:	81a5      	strh	r5, [r4, #12]
}
   bdc08:	4620      	mov	r0, r4
   bdc0a:	bd38      	pop	{r3, r4, r5, pc}

000bdc0c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bdc0c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bdc0e:	6902      	ldr	r2, [r0, #16]
   bdc10:	b922      	cbnz	r2, bdc1c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bdc12:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc14:	3800      	subs	r0, #0
   bdc16:	bf18      	it	ne
   bdc18:	2001      	movne	r0, #1
}
   bdc1a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc1c:	4902      	ldr	r1, [pc, #8]	; (bdc28 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bdc1e:	2210      	movs	r2, #16
   bdc20:	f005 ff1e 	bl	c3a60 <memcmp>
   bdc24:	e7f6      	b.n	bdc14 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bdc26:	bf00      	nop
   bdc28:	000c7252 	.word	0x000c7252

000bdc2c <_ZNK8particle7BleUuid4typeEv>:
}
   bdc2c:	6900      	ldr	r0, [r0, #16]
   bdc2e:	4770      	bx	lr

000bdc30 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bdc30:	b538      	push	{r3, r4, r5, lr}
   bdc32:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bdc34:	2214      	movs	r2, #20
   bdc36:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bdc38:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bdc3a:	f005 ff49 	bl	c3ad0 <memset>
    if (type_ == BleUuidType::SHORT) {
   bdc3e:	6923      	ldr	r3, [r4, #16]
   bdc40:	b91b      	cbnz	r3, bdc4a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bdc42:	89a3      	ldrh	r3, [r4, #12]
   bdc44:	802b      	strh	r3, [r5, #0]
}
   bdc46:	4628      	mov	r0, r5
   bdc48:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bdc4a:	2301      	movs	r3, #1
   bdc4c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bdc4e:	4621      	mov	r1, r4
   bdc50:	462b      	mov	r3, r5
   bdc52:	f104 0210 	add.w	r2, r4, #16
   bdc56:	f851 0b04 	ldr.w	r0, [r1], #4
   bdc5a:	f843 0b04 	str.w	r0, [r3], #4
   bdc5e:	4291      	cmp	r1, r2
   bdc60:	d1f9      	bne.n	bdc56 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bdc62:	e7f0      	b.n	bdc46 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bdc64 <_ZNK8particle7BleUuid7shortedEv>:
}
   bdc64:	8980      	ldrh	r0, [r0, #12]
   bdc66:	4770      	bx	lr

000bdc68 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bdc68:	4770      	bx	lr

000bdc6a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bdc6a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdc6c:	6902      	ldr	r2, [r0, #16]
   bdc6e:	690b      	ldr	r3, [r1, #16]
   bdc70:	429a      	cmp	r2, r3
   bdc72:	d106      	bne.n	bdc82 <_ZNK8particle7BleUuideqERKS0_+0x18>
   bdc74:	2210      	movs	r2, #16
   bdc76:	f005 fef3 	bl	c3a60 <memcmp>
   bdc7a:	fab0 f080 	clz	r0, r0
   bdc7e:	0940      	lsrs	r0, r0, #5
}
   bdc80:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdc82:	2000      	movs	r0, #0
   bdc84:	e7fc      	b.n	bdc80 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bdc88 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bdc88:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bdc8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bdc8e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc90:	4b34      	ldr	r3, [pc, #208]	; (bdd64 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bdc92:	460c      	mov	r4, r1
   bdc94:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc96:	4602      	mov	r2, r0
   bdc98:	f103 0110 	add.w	r1, r3, #16
   bdc9c:	f853 0b04 	ldr.w	r0, [r3], #4
   bdca0:	f842 0b04 	str.w	r0, [r2], #4
   bdca4:	428b      	cmp	r3, r1
   bdca6:	d1f9      	bne.n	bdc9c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bdca8:	b344      	cbz	r4, bdcfc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bdcaa:	2124      	movs	r1, #36	; 0x24
   bdcac:	4620      	mov	r0, r4
   bdcae:	f005 ffdc 	bl	c3c6a <strnlen>
   bdcb2:	2804      	cmp	r0, #4
   bdcb4:	f04f 0500 	mov.w	r5, #0
   bdcb8:	d123      	bne.n	bdd02 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bdcba:	f8ad 5004 	strh.w	r5, [sp, #4]
   bdcbe:	af01      	add	r7, sp, #4
   bdcc0:	1ca5      	adds	r5, r4, #2
   bdcc2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bdcc4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bdcc8:	f7ff ff0d 	bl	bdae6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bdccc:	f1b0 0800 	subs.w	r8, r0, #0
   bdcd0:	db12      	blt.n	bdcf8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bdcd2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bdcd6:	f7ff ff06 	bl	bdae6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bdcda:	2800      	cmp	r0, #0
   bdcdc:	db0c      	blt.n	bdcf8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bdcde:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdce0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bdce4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdce6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bdcea:	d1eb      	bne.n	bdcc4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bdcec:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bdcf0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bdcf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdcf6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bdcf8:	2300      	movs	r3, #0
   bdcfa:	6133      	str	r3, [r6, #16]
}
   bdcfc:	b002      	add	sp, #8
   bdcfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bdd02:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdd06:	2124      	movs	r1, #36	; 0x24
   bdd08:	4620      	mov	r0, r4
   bdd0a:	f005 ffae 	bl	c3c6a <strnlen>
   bdd0e:	42a8      	cmp	r0, r5
   bdd10:	d807      	bhi.n	bdd22 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bdd12:	4642      	mov	r2, r8
   bdd14:	2100      	movs	r1, #0
   bdd16:	4630      	mov	r0, r6
}
   bdd18:	b002      	add	sp, #8
   bdd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bdd1e:	f005 bed7 	b.w	c3ad0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdd22:	f1b8 0f00 	cmp.w	r8, #0
   bdd26:	d0e9      	beq.n	bdcfc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bdd28:	5d60      	ldrb	r0, [r4, r5]
   bdd2a:	f7ff fedc 	bl	bdae6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bdd2e:	0603      	lsls	r3, r0, #24
   bdd30:	d415      	bmi.n	bdd5e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bdd32:	0100      	lsls	r0, r0, #4
   bdd34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdd38:	b2c7      	uxtb	r7, r0
   bdd3a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bdd3e:	2124      	movs	r1, #36	; 0x24
   bdd40:	4620      	mov	r0, r4
   bdd42:	f005 ff92 	bl	c3c6a <strnlen>
   bdd46:	3501      	adds	r5, #1
   bdd48:	42a8      	cmp	r0, r5
   bdd4a:	d908      	bls.n	bdd5e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bdd4c:	5d60      	ldrb	r0, [r4, r5]
   bdd4e:	f7ff feca 	bl	bdae6 <_ZN8particle11hexToNibbleEc>
   bdd52:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bdd54:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bdd56:	bfa4      	itt	ge
   bdd58:	4338      	orrge	r0, r7
   bdd5a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdd5e:	3501      	adds	r5, #1
   bdd60:	e7d1      	b.n	bdd06 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bdd62:	bf00      	nop
   bdd64:	000c7232 	.word	0x000c7232

000bdd68 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bdd68:	b513      	push	{r0, r1, r4, lr}
   bdd6a:	4604      	mov	r4, r0
   bdd6c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bdd6e:	f7ff ff15 	bl	bdb9c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bdd72:	4620      	mov	r0, r4
   bdd74:	9901      	ldr	r1, [sp, #4]
   bdd76:	f7ff ff87 	bl	bdc88 <_ZN8particle7BleUuid9constructEPKc>
}
   bdd7a:	4620      	mov	r0, r4
   bdd7c:	b002      	add	sp, #8
   bdd7e:	bd10      	pop	{r4, pc}

000bdd80 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bdd80:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bdd82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdd86:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bdd88:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bdd8a:	8043      	strh	r3, [r0, #2]
   bdd8c:	220e      	movs	r2, #14
   bdd8e:	4629      	mov	r1, r5
   bdd90:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bdd92:	7105      	strb	r5, [r0, #4]
   bdd94:	3006      	adds	r0, #6
   bdd96:	f005 fe9b 	bl	c3ad0 <memset>
   bdd9a:	f104 0014 	add.w	r0, r4, #20
   bdd9e:	f7ff fefd 	bl	bdb9c <_ZN8particle7BleUuidC1Ev>
   bdda2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bdda6:	f7ff fef9 	bl	bdb9c <_ZN8particle7BleUuidC1Ev>
   bddaa:	4904      	ldr	r1, [pc, #16]	; (bddbc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bddac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bddb0:	f003 f875 	bl	c0e9e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bddb4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bddb6:	4620      	mov	r0, r4
   bddb8:	bd38      	pop	{r3, r4, r5, pc}
   bddba:	bf00      	nop
   bddbc:	000c7397 	.word	0x000c7397

000bddc0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bddc0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bddc2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bddc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bddca:	4293      	cmp	r3, r2
   bddcc:	4618      	mov	r0, r3
   bddce:	d006      	beq.n	bddde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bddd0:	6804      	ldr	r4, [r0, #0]
   bddd2:	8824      	ldrh	r4, [r4, #0]
   bddd4:	428c      	cmp	r4, r1
   bddd6:	f103 0308 	add.w	r3, r3, #8
   bddda:	d1f6      	bne.n	bddca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bdddc:	bd10      	pop	{r4, pc}
        return nullptr;
   bddde:	2000      	movs	r0, #0
   bdde0:	e7fc      	b.n	bdddc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bdde4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bdde4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdde6:	4606      	mov	r6, r0
   bdde8:	b085      	sub	sp, #20
   bddea:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bddec:	460d      	mov	r5, r1
   bddee:	2900      	cmp	r1, #0
   bddf0:	d050      	beq.n	bde94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bddf2:	2a00      	cmp	r2, #0
   bddf4:	d04e      	beq.n	bde94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bddf6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bddf8:	7823      	ldrb	r3, [r4, #0]
   bddfa:	2af4      	cmp	r2, #244	; 0xf4
   bddfc:	bf28      	it	cs
   bddfe:	22f4      	movcs	r2, #244	; 0xf4
   bde00:	b343      	cbz	r3, bde54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bde02:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bde04:	0798      	lsls	r0, r3, #30
   bde06:	d509      	bpl.n	bde1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bde08:	89a0      	ldrh	r0, [r4, #12]
   bde0a:	9203      	str	r2, [sp, #12]
   bde0c:	2300      	movs	r3, #0
   bde0e:	f7ff f995 	bl	bd13c <hal_ble_gatt_server_set_characteristic_value>
   bde12:	2800      	cmp	r0, #0
   bde14:	9a03      	ldr	r2, [sp, #12]
   bde16:	da03      	bge.n	bde20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bde18:	b005      	add	sp, #20
   bde1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bde1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bde20:	6834      	ldr	r4, [r6, #0]
   bde22:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bde24:	06d9      	lsls	r1, r3, #27
   bde26:	d509      	bpl.n	bde3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bde28:	2f01      	cmp	r7, #1
   bde2a:	d007      	beq.n	bde3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde2c:	89a0      	ldrh	r0, [r4, #12]
   bde2e:	2300      	movs	r3, #0
   bde30:	4629      	mov	r1, r5
}
   bde32:	b005      	add	sp, #20
   bde34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde38:	f7ff b9b2 	b.w	bd1a0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bde3c:	069b      	lsls	r3, r3, #26
   bde3e:	d5eb      	bpl.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bde40:	2f02      	cmp	r7, #2
   bde42:	d0e9      	beq.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde44:	89a0      	ldrh	r0, [r4, #12]
   bde46:	2300      	movs	r3, #0
   bde48:	4629      	mov	r1, r5
}
   bde4a:	b005      	add	sp, #20
   bde4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde50:	f7ff b9b0 	b.w	bd1b4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bde54:	8860      	ldrh	r0, [r4, #2]
   bde56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bde5a:	4288      	cmp	r0, r1
   bde5c:	d01c      	beq.n	bde98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bde5e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bde60:	074e      	lsls	r6, r1, #29
   bde62:	d501      	bpl.n	bde68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bde64:	2f01      	cmp	r7, #1
   bde66:	d104      	bne.n	bde72 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bde68:	070b      	lsls	r3, r1, #28
   bde6a:	d409      	bmi.n	bde80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bde6c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bde70:	e7d2      	b.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bde72:	89a1      	ldrh	r1, [r4, #12]
   bde74:	9300      	str	r3, [sp, #0]
   bde76:	4613      	mov	r3, r2
   bde78:	462a      	mov	r2, r5
   bde7a:	f7ff f973 	bl	bd164 <hal_ble_gatt_client_write_without_response>
   bde7e:	e7cb      	b.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bde80:	2f02      	cmp	r7, #2
   bde82:	d0f3      	beq.n	bde6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bde84:	2300      	movs	r3, #0
   bde86:	89a1      	ldrh	r1, [r4, #12]
   bde88:	9300      	str	r3, [sp, #0]
   bde8a:	4613      	mov	r3, r2
   bde8c:	462a      	mov	r2, r5
   bde8e:	f7ff f95f 	bl	bd150 <hal_ble_gatt_client_write_with_response>
   bde92:	e7c1      	b.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bde94:	4802      	ldr	r0, [pc, #8]	; (bdea0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bde96:	e7bf      	b.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bde98:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bde9c:	e7bc      	b.n	bde18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bde9e:	bf00      	nop
   bdea0:	fffffef2 	.word	0xfffffef2

000bdea4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bdea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdea8:	2600      	movs	r6, #0
   bdeaa:	6006      	str	r6, [r0, #0]
   bdeac:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bdeae:	2028      	movs	r0, #40	; 0x28
   bdeb0:	460c      	mov	r4, r1
   bdeb2:	f7f6 f8f0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdeb6:	1e05      	subs	r5, r0, #0
   bdeb8:	f105 080c 	add.w	r8, r5, #12
   bdebc:	d00f      	beq.n	bdede <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bdebe:	2301      	movs	r3, #1
   bdec0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bdec4:	4b08      	ldr	r3, [pc, #32]	; (bdee8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bdec6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bdec8:	4640      	mov	r0, r8
   bdeca:	f7ff fe67 	bl	bdb9c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bdece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bded0:	622e      	str	r6, [r5, #32]
   bded2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bded6:	4646      	mov	r6, r8
   bded8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bdeda:	6823      	ldr	r3, [r4, #0]
   bdedc:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bdede:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdee2:	4638      	mov	r0, r7
   bdee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdee8:	000c71f4 	.word	0x000c71f4

000bdeec <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bdeec:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdeee:	2500      	movs	r5, #0
   bdef0:	6005      	str	r5, [r0, #0]
   bdef2:	4606      	mov	r6, r0
   bdef4:	2030      	movs	r0, #48	; 0x30
   bdef6:	f7f6 f8ce 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdefa:	4604      	mov	r4, r0
   bdefc:	b188      	cbz	r0, bdf22 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bdefe:	2301      	movs	r3, #1
   bdf00:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bdf04:	4b09      	ldr	r3, [pc, #36]	; (bdf2c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bdf06:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bdf08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdf0c:	8183      	strh	r3, [r0, #12]
   bdf0e:	300e      	adds	r0, #14
   bdf10:	f7ff fe39 	bl	bdb86 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bdf14:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bdf18:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bdf1c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bdf20:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bdf22:	6074      	str	r4, [r6, #4]
   bdf24:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bdf26:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdf28:	4630      	mov	r0, r6
   bdf2a:	bd70      	pop	{r4, r5, r6, pc}
   bdf2c:	000c7210 	.word	0x000c7210

000bdf30 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bdf30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdf32:	460d      	mov	r5, r1
   bdf34:	4604      	mov	r4, r0
    WiringBleLock lk;
   bdf36:	a801      	add	r0, sp, #4
   bdf38:	f7ff fdea 	bl	bdb10 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bdf3c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bdf3e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bdf42:	6023      	str	r3, [r4, #0]
   bdf44:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bdf48:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bdf4a:	a801      	add	r0, sp, #4
   bdf4c:	f7ff fdee 	bl	bdb2c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bdf50:	4620      	mov	r0, r4
   bdf52:	b003      	add	sp, #12
   bdf54:	bd30      	pop	{r4, r5, pc}

000bdf56 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bdf56:	b530      	push	{r4, r5, lr}
   bdf58:	4605      	mov	r5, r0
   bdf5a:	b087      	sub	sp, #28
   bdf5c:	460c      	mov	r4, r1
    WiringBleLock lk;
   bdf5e:	a801      	add	r0, sp, #4
   bdf60:	f7ff fdd6 	bl	bdb10 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bdf64:	682a      	ldr	r2, [r5, #0]
   bdf66:	6823      	ldr	r3, [r4, #0]
   bdf68:	8812      	ldrh	r2, [r2, #0]
   bdf6a:	881b      	ldrh	r3, [r3, #0]
   bdf6c:	429a      	cmp	r2, r3
   bdf6e:	d10d      	bne.n	bdf8c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bdf70:	4629      	mov	r1, r5
   bdf72:	a802      	add	r0, sp, #8
   bdf74:	f7ff ffdc 	bl	bdf30 <_ZNK8particle13BlePeerDevice7addressEv>
   bdf78:	4621      	mov	r1, r4
   bdf7a:	a804      	add	r0, sp, #16
   bdf7c:	f7ff ffd8 	bl	bdf30 <_ZNK8particle13BlePeerDevice7addressEv>
   bdf80:	a904      	add	r1, sp, #16
   bdf82:	a802      	add	r0, sp, #8
   bdf84:	f7ff fdeb 	bl	bdb5e <_ZNK8particle10BleAddresseqERKS0_>
   bdf88:	4604      	mov	r4, r0
   bdf8a:	b900      	cbnz	r0, bdf8e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bdf8c:	2400      	movs	r4, #0
    WiringBleLock lk;
   bdf8e:	a801      	add	r0, sp, #4
   bdf90:	f7ff fdcc 	bl	bdb2c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bdf94:	4620      	mov	r0, r4
   bdf96:	b007      	add	sp, #28
   bdf98:	bd30      	pop	{r4, r5, pc}
	...

000bdf9c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bdf9c:	b510      	push	{r4, lr}
   bdf9e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bdfa0:	2064      	movs	r0, #100	; 0x64
   bdfa2:	f7f6 f878 	bl	b4096 <_Znwj>
   bdfa6:	b168      	cbz	r0, bdfc4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bdfa8:	2300      	movs	r3, #0
   bdfaa:	e9c0 3300 	strd	r3, r3, [r0]
   bdfae:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bdfb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bdfb6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bdfba:	6203      	str	r3, [r0, #32]
   bdfbc:	62c3      	str	r3, [r0, #44]	; 0x2c
   bdfbe:	63c3      	str	r3, [r0, #60]	; 0x3c
   bdfc0:	64c3      	str	r3, [r0, #76]	; 0x4c
   bdfc2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bdfc4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bdfc6:	b920      	cbnz	r0, bdfd2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bdfc8:	4a0a      	ldr	r2, [pc, #40]	; (bdff4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdfca:	490b      	ldr	r1, [pc, #44]	; (bdff8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bdfcc:	200a      	movs	r0, #10
   bdfce:	f7ff fb3b 	bl	bd648 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bdfd2:	2000      	movs	r0, #0
   bdfd4:	f7ff f876 	bl	bd0c4 <hal_ble_stack_init>
   bdfd8:	b120      	cbz	r0, bdfe4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bdfda:	4a06      	ldr	r2, [pc, #24]	; (bdff4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdfdc:	4907      	ldr	r1, [pc, #28]	; (bdffc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bdfde:	200a      	movs	r0, #10
   bdfe0:	f7ff fb32 	bl	bd648 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bdfe4:	6821      	ldr	r1, [r4, #0]
   bdfe6:	4806      	ldr	r0, [pc, #24]	; (be000 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bdfe8:	2200      	movs	r2, #0
   bdfea:	f7ff f8cf 	bl	bd18c <hal_ble_set_callback_on_periph_link_events>
}
   bdfee:	4620      	mov	r0, r4
   bdff0:	bd10      	pop	{r4, pc}
   bdff2:	bf00      	nop
   bdff4:	000bd289 	.word	0x000bd289
   bdff8:	000c7081 	.word	0x000c7081
   bdffc:	000c70bf 	.word	0x000c70bf
   be000:	000be5c1 	.word	0x000be5c1

000be004 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   be004:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   be006:	4c0a      	ldr	r4, [pc, #40]	; (be030 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   be008:	7823      	ldrb	r3, [r4, #0]
   be00a:	f3bf 8f5b 	dmb	ish
   be00e:	07db      	lsls	r3, r3, #31
   be010:	d40c      	bmi.n	be02c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be012:	4620      	mov	r0, r4
   be014:	f7f6 f854 	bl	b40c0 <__cxa_guard_acquire>
   be018:	b140      	cbz	r0, be02c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be01a:	4806      	ldr	r0, [pc, #24]	; (be034 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be01c:	f7ff ffbe 	bl	bdf9c <_ZN8particle14BleLocalDeviceC1Ev>
   be020:	4620      	mov	r0, r4
   be022:	f7f6 f852 	bl	b40ca <__cxa_guard_release>
   be026:	4804      	ldr	r0, [pc, #16]	; (be038 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   be028:	f005 fd04 	bl	c3a34 <atexit>
    return instance;
}
   be02c:	4801      	ldr	r0, [pc, #4]	; (be034 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be02e:	bd10      	pop	{r4, pc}
   be030:	2003e620 	.word	0x2003e620
   be034:	2003e62c 	.word	0x2003e62c
   be038:	000be279 	.word	0x000be279

000be03c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be03c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be03e:	6803      	ldr	r3, [r0, #0]
   be040:	3b09      	subs	r3, #9
   be042:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be044:	b08d      	sub	sp, #52	; 0x34
   be046:	4604      	mov	r4, r0
   be048:	460d      	mov	r5, r1
    switch (event->type) {
   be04a:	d811      	bhi.n	be070 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be04c:	f7ff ffda 	bl	be004 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be050:	88a1      	ldrh	r1, [r4, #4]
   be052:	6800      	ldr	r0, [r0, #0]
   be054:	f7ff feb4 	bl	bddc0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be058:	4603      	mov	r3, r0
   be05a:	b958      	cbnz	r0, be074 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be05c:	2220      	movs	r2, #32
   be05e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be062:	4a0b      	ldr	r2, [pc, #44]	; (be090 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be064:	9200      	str	r2, [sp, #0]
   be066:	490b      	ldr	r1, [pc, #44]	; (be094 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be068:	aa04      	add	r2, sp, #16
   be06a:	2032      	movs	r0, #50	; 0x32
   be06c:	f7ff faf4 	bl	bd658 <log_message>
}
   be070:	b00d      	add	sp, #52	; 0x34
   be072:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be074:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be076:	2a00      	cmp	r2, #0
   be078:	d0fa      	beq.n	be070 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be07a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be07e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be082:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be086:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be088:	aa04      	add	r2, sp, #16
   be08a:	a903      	add	r1, sp, #12
   be08c:	47a0      	blx	r4
}
   be08e:	e7ef      	b.n	be070 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be090:	000c7101 	.word	0x000c7101
   be094:	000c7098 	.word	0x000c7098

000be098 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be098:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be09a:	2000      	movs	r0, #0
   be09c:	f7ff f812 	bl	bd0c4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be0a0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be0a4:	bd08      	pop	{r3, pc}

000be0a6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be0a6:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be0a8:	2100      	movs	r1, #0
   be0aa:	f7ff b813 	b.w	bd0d4 <hal_ble_gap_set_tx_power>

000be0ae <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be0ae:	b919      	cbnz	r1, be0b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be0b0:	460a      	mov	r2, r1
   be0b2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be0b4:	f7ff b816 	b.w	bd0e4 <hal_ble_gap_set_advertising_data>
   be0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   be0bc:	2200      	movs	r2, #0
   be0be:	e7f9      	b.n	be0b4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be0c0 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be0c0:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be0c2:	69d8      	ldr	r0, [r3, #28]
}
   be0c4:	2800      	cmp	r0, #0
   be0c6:	bfd4      	ite	le
   be0c8:	2000      	movle	r0, #0
   be0ca:	2001      	movgt	r0, #1
   be0cc:	4770      	bx	lr

000be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0ce:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be0d0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be0d6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be0da:	42ae      	cmp	r6, r5
   be0dc:	d004      	beq.n	be0e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be0de:	4628      	mov	r0, r5
   be0e0:	f002 fe92 	bl	c0e08 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be0e4:	3510      	adds	r5, #16
   be0e6:	e7f8      	b.n	be0da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be0e8:	6820      	ldr	r0, [r4, #0]
   be0ea:	f7ff fbbb 	bl	bd864 <free>
}
   be0ee:	4620      	mov	r0, r4
   be0f0:	bd70      	pop	{r4, r5, r6, pc}

000be0f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be0f2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be0f4:	1e14      	subs	r4, r2, #0
   be0f6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be0f8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be0fa:	db02      	blt.n	be102 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be0fc:	1862      	adds	r2, r4, r1
   be0fe:	429a      	cmp	r2, r3
   be100:	dd00      	ble.n	be104 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be102:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be104:	682a      	ldr	r2, [r5, #0]
   be106:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be108:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be10a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be10c:	1a52      	subs	r2, r2, r1
   be10e:	f005 fcc5 	bl	c3a9c <memmove>
    size_ -= n;
   be112:	686a      	ldr	r2, [r5, #4]
   be114:	1b12      	subs	r2, r2, r4
   be116:	606a      	str	r2, [r5, #4]
}
   be118:	bd38      	pop	{r3, r4, r5, pc}

000be11a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be11a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be11c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be11e:	4604      	mov	r4, r0
   be120:	460d      	mov	r5, r1
   be122:	ab01      	add	r3, sp, #4
   be124:	e9d0 0100 	ldrd	r0, r1, [r0]
   be128:	f7ff fc72 	bl	bda10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be12c:	4602      	mov	r2, r0
   be12e:	b138      	cbz	r0, be140 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be130:	9901      	ldr	r1, [sp, #4]
   be132:	4620      	mov	r0, r4
   be134:	f7ff ffdd 	bl	be0f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be138:	4629      	mov	r1, r5
   be13a:	4620      	mov	r0, r4
   be13c:	f7ff ffed 	bl	be11a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be140:	b003      	add	sp, #12
   be142:	bd30      	pop	{r4, r5, pc}

000be144 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be144:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be146:	460c      	mov	r4, r1
   be148:	b929      	cbnz	r1, be156 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be14a:	460a      	mov	r2, r1
   be14c:	4608      	mov	r0, r1
}
   be14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be152:	f7fe bfcf 	b.w	bd0f4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be156:	2101      	movs	r1, #1
   be158:	4620      	mov	r0, r4
   be15a:	f7ff ffde 	bl	be11a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be15e:	e9d4 0100 	ldrd	r0, r1, [r4]
   be162:	2200      	movs	r2, #0
   be164:	e7f3      	b.n	be14e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be166 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be166:	b538      	push	{r3, r4, r5, lr}
   be168:	4604      	mov	r4, r0
   be16a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be16c:	f7ff ff9f 	bl	be0ae <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be170:	2800      	cmp	r0, #0
   be172:	db0a      	blt.n	be18a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be174:	4629      	mov	r1, r5
   be176:	4620      	mov	r0, r4
   be178:	f7ff ffe4 	bl	be144 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be17c:	2800      	cmp	r0, #0
   be17e:	db04      	blt.n	be18a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   be184:	2000      	movs	r0, #0
   be186:	f7fe bfbd 	b.w	bd104 <hal_ble_gap_start_advertising>
}
   be18a:	bd38      	pop	{r3, r4, r5, pc}

000be18c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   be18c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   be18e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   be190:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   be192:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be194:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   be196:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be198:	f7f5 ff7d 	bl	b4096 <_Znwj>
   be19c:	b118      	cbz	r0, be1a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   be19e:	682b      	ldr	r3, [r5, #0]
   be1a0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   be1a2:	686b      	ldr	r3, [r5, #4]
   be1a4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   be1a6:	4b03      	ldr	r3, [pc, #12]	; (be1b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   be1a8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   be1aa:	4b03      	ldr	r3, [pc, #12]	; (be1b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be1ac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   be1ae:	60a3      	str	r3, [r4, #8]
      }
   be1b0:	4620      	mov	r0, r4
   be1b2:	bd38      	pop	{r3, r4, r5, pc}
   be1b4:	000bda51 	.word	0x000bda51
   be1b8:	000bda69 	.word	0x000bda69

000be1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   be1bc:	680b      	ldr	r3, [r1, #0]
   be1be:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   be1c0:	b113      	cbz	r3, be1c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   be1c2:	685a      	ldr	r2, [r3, #4]
   be1c4:	3201      	adds	r2, #1
   be1c6:	605a      	str	r2, [r3, #4]
      }
   be1c8:	4770      	bx	lr

000be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   be1ca:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be1cc:	f851 3b04 	ldr.w	r3, [r1], #4
   be1d0:	4604      	mov	r4, r0
   be1d2:	f840 3b04 	str.w	r3, [r0], #4
   be1d6:	f7ff fff1 	bl	be1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   be1da:	6823      	ldr	r3, [r4, #0]
   be1dc:	b90b      	cbnz	r3, be1e2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   be1de:	f7ff fc2d 	bl	bda3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   be1e2:	4620      	mov	r0, r4
   be1e4:	bd10      	pop	{r4, pc}

000be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be1e6:	b510      	push	{r4, lr}
   be1e8:	f851 3b04 	ldr.w	r3, [r1], #4
   be1ec:	4604      	mov	r4, r0
   be1ee:	f840 3b04 	str.w	r3, [r0], #4
   be1f2:	f7ff ffe3 	bl	be1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be1f6:	4620      	mov	r0, r4
   be1f8:	bd10      	pop	{r4, pc}

000be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be1fa:	b510      	push	{r4, lr}
   be1fc:	f851 3b04 	ldr.w	r3, [r1], #4
   be200:	4604      	mov	r4, r0
   be202:	f840 3b04 	str.w	r3, [r0], #4
   be206:	f7ff ffd9 	bl	be1bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be20a:	4620      	mov	r0, r4
   be20c:	bd10      	pop	{r4, pc}

000be20e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be20e:	b510      	push	{r4, lr}
   be210:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be212:	3004      	adds	r0, #4
   be214:	f7f7 f9ba 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be218:	4620      	mov	r0, r4
   be21a:	bd10      	pop	{r4, pc}

000be21c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be21c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be21e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be222:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be224:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be228:	42ae      	cmp	r6, r5
   be22a:	d004      	beq.n	be236 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be22c:	1d28      	adds	r0, r5, #4
   be22e:	f7f7 f9ad 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be232:	3508      	adds	r5, #8
   be234:	e7f8      	b.n	be228 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be236:	6820      	ldr	r0, [r4, #0]
   be238:	f7ff fb14 	bl	bd864 <free>
}
   be23c:	4620      	mov	r0, r4
   be23e:	bd70      	pop	{r4, r5, r6, pc}

000be240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be240:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be242:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be246:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be248:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be24c:	42ae      	cmp	r6, r5
   be24e:	d004      	beq.n	be25a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be250:	1d28      	adds	r0, r5, #4
   be252:	f7f7 f99b 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be256:	3508      	adds	r5, #8
   be258:	e7f8      	b.n	be24c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be25a:	6820      	ldr	r0, [r4, #0]
   be25c:	f7ff fb02 	bl	bd864 <free>
}
   be260:	4620      	mov	r0, r4
   be262:	bd70      	pop	{r4, r5, r6, pc}

000be264 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be264:	b510      	push	{r4, lr}
   be266:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be268:	3024      	adds	r0, #36	; 0x24
   be26a:	f7ff ffe9 	bl	be240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be26e:	f104 0018 	add.w	r0, r4, #24
   be272:	f7ff ffd3 	bl	be21c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be276:	bd10      	pop	{r4, pc}

000be278 <__tcf_0>:
    static BleLocalDevice instance;
   be278:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be27a:	4b17      	ldr	r3, [pc, #92]	; (be2d8 <__tcf_0+0x60>)
   be27c:	681c      	ldr	r4, [r3, #0]
   be27e:	b354      	cbz	r4, be2d6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be280:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be284:	f7f6 f8aa 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be288:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be28c:	f7f6 f8a6 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be290:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be294:	f7f6 f8a2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be298:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be29c:	f7f6 f89e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be2a0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be2a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be2a8:	42ae      	cmp	r6, r5
   be2aa:	d004      	beq.n	be2b6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be2ac:	1d28      	adds	r0, r5, #4
   be2ae:	f7f7 f96d 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be2b2:	3508      	adds	r5, #8
   be2b4:	e7f8      	b.n	be2a8 <__tcf_0+0x30>
    ::free(ptr);
   be2b6:	69a0      	ldr	r0, [r4, #24]
   be2b8:	f7ff fad4 	bl	bd864 <free>
    ~BleLocalDeviceImpl() = default;
   be2bc:	f104 000c 	add.w	r0, r4, #12
   be2c0:	f7ff ffbe 	bl	be240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be2c4:	4620      	mov	r0, r4
   be2c6:	f7ff ffa9 	bl	be21c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be2ca:	4620      	mov	r0, r4
   be2cc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be2d2:	f7f5 bee6 	b.w	b40a2 <_ZdlPvj>
   be2d6:	bd70      	pop	{r4, r5, r6, pc}
   be2d8:	2003e62c 	.word	0x2003e62c

000be2dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be2dc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be2de:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be2e0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be2e4:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be2e8:	6803      	ldr	r3, [r0, #0]
   be2ea:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be2ec:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be2ee:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be2f0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be2f2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be2f4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be2f6:	f7f7 f949 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be2fa:	b002      	add	sp, #8
   be2fc:	bd10      	pop	{r4, pc}

000be2fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be2fe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be300:	b510      	push	{r4, lr}
      if (_M_empty())
   be302:	b90a      	cbnz	r2, be308 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be304:	f003 f9bc 	bl	c1680 <_ZSt25__throw_bad_function_callv>
    }
   be308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be30c:	68c3      	ldr	r3, [r0, #12]
   be30e:	4718      	bx	r3

000be310 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be310:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be312:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be314:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be316:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be318:	dd03      	ble.n	be322 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be31a:	f7ff faab 	bl	bd874 <realloc>
            if (!d) {
   be31e:	b918      	cbnz	r0, be328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be320:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be322:	f7ff fa9f 	bl	bd864 <free>
        T* d = nullptr;
   be326:	2000      	movs	r0, #0
        data_ = d;
   be328:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be32a:	60a5      	str	r5, [r4, #8]
        return true;
   be32c:	2001      	movs	r0, #1
   be32e:	e7f7      	b.n	be320 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be330 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be330:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be332:	6883      	ldr	r3, [r0, #8]
   be334:	428b      	cmp	r3, r1
   be336:	da02      	bge.n	be33e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be338:	f7ff ffea 	bl	be310 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be33c:	bd08      	pop	{r3, pc}
    return true;
   be33e:	2001      	movs	r0, #1
   be340:	e7fc      	b.n	be33c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be342 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be346:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be348:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be34a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be34c:	4419      	add	r1, r3
   be34e:	6883      	ldr	r3, [r0, #8]
   be350:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be352:	4604      	mov	r4, r0
   be354:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be356:	dc12      	bgt.n	be37e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be358:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be35a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be35c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be35e:	1bd2      	subs	r2, r2, r7
   be360:	4631      	mov	r1, r6
   be362:	1970      	adds	r0, r6, r5
   be364:	f005 fb9a 	bl	c3a9c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be368:	462a      	mov	r2, r5
   be36a:	4641      	mov	r1, r8
   be36c:	4630      	mov	r0, r6
   be36e:	f005 fb87 	bl	c3a80 <memcpy>
    size_ += n;
   be372:	6863      	ldr	r3, [r4, #4]
   be374:	442b      	add	r3, r5
   be376:	6063      	str	r3, [r4, #4]
    return true;
   be378:	2001      	movs	r0, #1
}
   be37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be37e:	f7ff ffc7 	bl	be310 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be382:	2800      	cmp	r0, #0
   be384:	d1e8      	bne.n	be358 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be386:	e7f8      	b.n	be37a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be388 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be38a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be38c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be390:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be392:	4604      	mov	r4, r0
   be394:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be396:	da0b      	bge.n	be3b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be398:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be39a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be39c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be39e:	1b52      	subs	r2, r2, r5
   be3a0:	1c48      	adds	r0, r1, #1
   be3a2:	f005 fb7b 	bl	c3a9c <memmove>
    new(p) T(std::move(value));
   be3a6:	557e      	strb	r6, [r7, r5]
    ++size_;
   be3a8:	6863      	ldr	r3, [r4, #4]
   be3aa:	3301      	adds	r3, #1
   be3ac:	6063      	str	r3, [r4, #4]
}
   be3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be3b0:	3101      	adds	r1, #1
   be3b2:	f7ff ffad 	bl	be310 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be3b6:	2800      	cmp	r0, #0
   be3b8:	d1ee      	bne.n	be398 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be3ba:	e7f8      	b.n	be3ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be3bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be3bc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be3be:	6841      	ldr	r1, [r0, #4]
   be3c0:	f7ff bfe2 	b.w	be388 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be3c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be3c8:	4604      	mov	r4, r0
   be3ca:	461d      	mov	r5, r3
   be3cc:	460f      	mov	r7, r1
   be3ce:	ab01      	add	r3, sp, #4
   be3d0:	4690      	mov	r8, r2
   be3d2:	460a      	mov	r2, r1
   be3d4:	e9d0 0100 	ldrd	r0, r1, [r0]
   be3d8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be3dc:	f7ff fb18 	bl	bda10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be3e0:	1cae      	adds	r6, r5, #2
   be3e2:	6863      	ldr	r3, [r4, #4]
   be3e4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be3e6:	f1b9 0f00 	cmp.w	r9, #0
   be3ea:	d126      	bne.n	be43a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be3ec:	b328      	cbz	r0, be43a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be3ee:	4433      	add	r3, r6
   be3f0:	1a1b      	subs	r3, r3, r0
   be3f2:	2bff      	cmp	r3, #255	; 0xff
   be3f4:	d809      	bhi.n	be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be3f6:	9901      	ldr	r1, [sp, #4]
   be3f8:	4620      	mov	r0, r4
   be3fa:	f7ff fe7a 	bl	be0f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be3fe:	6861      	ldr	r1, [r4, #4]
   be400:	4620      	mov	r0, r4
   be402:	4431      	add	r1, r6
   be404:	f7ff ff94 	bl	be330 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be408:	b918      	cbnz	r0, be412 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be40a:	6860      	ldr	r0, [r4, #4]
}
   be40c:	b003      	add	sp, #12
   be40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be412:	1c6a      	adds	r2, r5, #1
   be414:	9901      	ldr	r1, [sp, #4]
   be416:	b2d2      	uxtb	r2, r2
   be418:	4620      	mov	r0, r4
   be41a:	f7ff ffb5 	bl	be388 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be41e:	9901      	ldr	r1, [sp, #4]
   be420:	463a      	mov	r2, r7
   be422:	3101      	adds	r1, #1
   be424:	4620      	mov	r0, r4
   be426:	f7ff ffaf 	bl	be388 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be42a:	9901      	ldr	r1, [sp, #4]
   be42c:	462b      	mov	r3, r5
   be42e:	4642      	mov	r2, r8
   be430:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be432:	4620      	mov	r0, r4
   be434:	f7ff ff85 	bl	be342 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be438:	e7e7      	b.n	be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be43a:	18f1      	adds	r1, r6, r3
   be43c:	29ff      	cmp	r1, #255	; 0xff
   be43e:	d8e4      	bhi.n	be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be440:	4620      	mov	r0, r4
   be442:	f7ff ff75 	bl	be330 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be446:	2800      	cmp	r0, #0
   be448:	d0df      	beq.n	be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be44a:	1c69      	adds	r1, r5, #1
   be44c:	b2c9      	uxtb	r1, r1
   be44e:	4620      	mov	r0, r4
   be450:	f7ff ffb4 	bl	be3bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be454:	4639      	mov	r1, r7
   be456:	4620      	mov	r0, r4
   be458:	f7ff ffb0 	bl	be3bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be45c:	6861      	ldr	r1, [r4, #4]
   be45e:	462b      	mov	r3, r5
   be460:	4642      	mov	r2, r8
   be462:	e7e6      	b.n	be432 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be464 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be464:	b430      	push	{r4, r5}
   be466:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be46a:	b11a      	cbz	r2, be474 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be46c:	9502      	str	r5, [sp, #8]
}
   be46e:	bc30      	pop	{r4, r5}
   be470:	f7ff bfa8 	b.w	be3c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be474:	6840      	ldr	r0, [r0, #4]
}
   be476:	bc30      	pop	{r4, r5}
   be478:	4770      	bx	lr

000be47a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be47a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be47c:	2300      	movs	r3, #0
   be47e:	e9c0 3300 	strd	r3, r3, [r0]
   be482:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be484:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be486:	9300      	str	r3, [sp, #0]
   be488:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be48a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be48e:	4619      	mov	r1, r3
   be490:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be494:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be496:	f7ff ffe5 	bl	be464 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be49a:	4620      	mov	r0, r4
   be49c:	b004      	add	sp, #16
   be49e:	bd10      	pop	{r4, pc}

000be4a0 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be4a0:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be4a2:	9300      	str	r3, [sp, #0]
   be4a4:	4613      	mov	r3, r2
   be4a6:	460a      	mov	r2, r1
   be4a8:	21ff      	movs	r1, #255	; 0xff
   be4aa:	f7ff ffdb 	bl	be464 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be4ae:	b003      	add	sp, #12
   be4b0:	f85d fb04 	ldr.w	pc, [sp], #4

000be4b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be4b4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be4b8:	4604      	mov	r4, r0
   be4ba:	460d      	mov	r5, r1
   be4bc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be4be:	d914      	bls.n	be4ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be4c0:	4290      	cmp	r0, r2
   be4c2:	d213      	bcs.n	be4ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be4c4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be4c8:	1a75      	subs	r5, r6, r1
   be4ca:	f1a1 0708 	sub.w	r7, r1, #8
   be4ce:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be4d0:	42b7      	cmp	r7, r6
   be4d2:	d018      	beq.n	be506 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be4d4:	b11c      	cbz	r4, be4de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be4d6:	4631      	mov	r1, r6
   be4d8:	4620      	mov	r0, r4
   be4da:	f7ff fe8e 	bl	be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be4de:	1d30      	adds	r0, r6, #4
   be4e0:	f7f7 f854 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be4e4:	3e08      	subs	r6, #8
   be4e6:	3c08      	subs	r4, #8
   be4e8:	e7f2      	b.n	be4d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be4ea:	d00c      	beq.n	be506 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be4ec:	42b5      	cmp	r5, r6
   be4ee:	d00a      	beq.n	be506 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be4f0:	b11c      	cbz	r4, be4fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be4f2:	4629      	mov	r1, r5
   be4f4:	4620      	mov	r0, r4
   be4f6:	f7ff fe80 	bl	be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be4fa:	1d28      	adds	r0, r5, #4
   be4fc:	f7f7 f846 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be500:	3508      	adds	r5, #8
   be502:	3408      	adds	r4, #8
   be504:	e7f2      	b.n	be4ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be508 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be50a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be50c:	6846      	ldr	r6, [r0, #4]
   be50e:	4668      	mov	r0, sp
   be510:	f7ff fe73 	bl	be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be514:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be518:	429f      	cmp	r7, r3
   be51a:	db12      	blt.n	be542 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be51c:	3701      	adds	r7, #1
        if (n > 0) {
   be51e:	2f00      	cmp	r7, #0
   be520:	dd29      	ble.n	be576 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be522:	00f8      	lsls	r0, r7, #3
   be524:	f7ff f996 	bl	bd854 <malloc>
            if (!d) {
   be528:	4605      	mov	r5, r0
   be52a:	b1f0      	cbz	r0, be56a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be52c:	e9d4 1200 	ldrd	r1, r2, [r4]
   be530:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be534:	f7ff ffbe 	bl	be4b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be538:	6820      	ldr	r0, [r4, #0]
   be53a:	f7ff f993 	bl	bd864 <free>
        data_ = d;
   be53e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be540:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be542:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be544:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be546:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be54a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be54e:	4631      	mov	r1, r6
   be550:	f106 0008 	add.w	r0, r6, #8
   be554:	f7ff ffae 	bl	be4b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be558:	b11e      	cbz	r6, be562 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be55a:	4669      	mov	r1, sp
   be55c:	4630      	mov	r0, r6
   be55e:	f7ff fe4c 	bl	be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be562:	6863      	ldr	r3, [r4, #4]
   be564:	3301      	adds	r3, #1
   be566:	6063      	str	r3, [r4, #4]
    return true;
   be568:	2501      	movs	r5, #1
   be56a:	a801      	add	r0, sp, #4
   be56c:	f7f7 f80e 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be570:	4628      	mov	r0, r5
   be572:	b003      	add	sp, #12
   be574:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be576:	2500      	movs	r5, #0
   be578:	e7de      	b.n	be538 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be57a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be57c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be580:	4605      	mov	r5, r0
   be582:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be584:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be588:	42a6      	cmp	r6, r4
   be58a:	d005      	beq.n	be598 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be58c:	4639      	mov	r1, r7
   be58e:	4620      	mov	r0, r4
   be590:	f7ff fce1 	bl	bdf56 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be594:	b108      	cbz	r0, be59a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be596:	b914      	cbnz	r4, be59e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be59a:	3408      	adds	r4, #8
   be59c:	e7f4      	b.n	be588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be59e:	1d20      	adds	r0, r4, #4
   be5a0:	f7f6 fff4 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be5a4:	e9d5 3200 	ldrd	r3, r2, [r5]
   be5a8:	f104 0108 	add.w	r1, r4, #8
   be5ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be5b0:	4620      	mov	r0, r4
   be5b2:	f7ff ff7f 	bl	be4b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be5b6:	686b      	ldr	r3, [r5, #4]
   be5b8:	3b01      	subs	r3, #1
   be5ba:	606b      	str	r3, [r5, #4]
    return true;
   be5bc:	e7ec      	b.n	be598 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be5c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be5c4:	4605      	mov	r5, r0
   be5c6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be5c8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be5ca:	460c      	mov	r4, r1
        WiringBleLock lk;
   be5cc:	f7ff faa0 	bl	bdb10 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be5d0:	682e      	ldr	r6, [r5, #0]
   be5d2:	1ef3      	subs	r3, r6, #3
   be5d4:	2b0d      	cmp	r3, #13
   be5d6:	d83c      	bhi.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be5d8:	e8df f013 	tbh	[pc, r3, lsl #1]
   be5dc:	0053000e 	.word	0x0053000e
   be5e0:	00d1003b 	.word	0x00d1003b
   be5e4:	003b003b 	.word	0x003b003b
   be5e8:	003b003b 	.word	0x003b003b
   be5ec:	009b003b 	.word	0x009b003b
   be5f0:	009b009b 	.word	0x009b009b
   be5f4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be5f8:	a804      	add	r0, sp, #16
   be5fa:	f7ff fc77 	bl	bdeec <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be5fe:	9b04      	ldr	r3, [sp, #16]
   be600:	89aa      	ldrh	r2, [r5, #12]
   be602:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be604:	6869      	ldr	r1, [r5, #4]
   be606:	9804      	ldr	r0, [sp, #16]
   be608:	3108      	adds	r1, #8
   be60a:	3002      	adds	r0, #2
   be60c:	f7ff fa9a 	bl	bdb44 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be610:	a904      	add	r1, sp, #16
   be612:	a806      	add	r0, sp, #24
   be614:	f7ff fdf1 	bl	be1fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be618:	a906      	add	r1, sp, #24
   be61a:	f104 0018 	add.w	r0, r4, #24
   be61e:	f7ff ff73 	bl	be508 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be622:	4605      	mov	r5, r0
   be624:	a807      	add	r0, sp, #28
   be626:	f7f6 ffb1 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be62a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be62c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be62e:	b9b5      	cbnz	r5, be65e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be630:	4b5d      	ldr	r3, [pc, #372]	; (be7a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be632:	495e      	ldr	r1, [pc, #376]	; (be7ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be634:	9300      	str	r3, [sp, #0]
   be636:	2032      	movs	r0, #50	; 0x32
   be638:	462b      	mov	r3, r5
   be63a:	aa06      	add	r2, sp, #24
   be63c:	9507      	str	r5, [sp, #28]
   be63e:	f7ff f80b 	bl	bd658 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be642:	9b04      	ldr	r3, [sp, #16]
   be644:	4629      	mov	r1, r5
   be646:	8818      	ldrh	r0, [r3, #0]
   be648:	f7fe fd64 	bl	bd114 <hal_ble_gap_disconnect>
   be64c:	a805      	add	r0, sp, #20
   be64e:	f7f6 ff9d 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be652:	a803      	add	r0, sp, #12
   be654:	f7ff fa6a 	bl	bdb2c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be658:	b00e      	add	sp, #56	; 0x38
   be65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be65e:	4a54      	ldr	r2, [pc, #336]	; (be7b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be660:	9200      	str	r2, [sp, #0]
   be662:	2300      	movs	r3, #0
   be664:	4951      	ldr	r1, [pc, #324]	; (be7ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be666:	9307      	str	r3, [sp, #28]
   be668:	aa06      	add	r2, sp, #24
   be66a:	2001      	movs	r0, #1
   be66c:	f7fe fff4 	bl	bd658 <log_message>
                if (impl->connectedCallback_) {
   be670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be672:	2b00      	cmp	r3, #0
   be674:	d0ea      	beq.n	be64c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be676:	a904      	add	r1, sp, #16
   be678:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be67c:	f7ff fe3f 	bl	be2fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be680:	e7e4      	b.n	be64c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be682:	89a9      	ldrh	r1, [r5, #12]
   be684:	4620      	mov	r0, r4
   be686:	f7ff fb9b 	bl	bddc0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be68a:	4606      	mov	r6, r0
   be68c:	2800      	cmp	r0, #0
   be68e:	d0e0      	beq.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be690:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be692:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be696:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be69a:	8029      	strh	r1, [r5, #0]
   be69c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be6a0:	429a      	cmp	r2, r3
   be6a2:	d003      	beq.n	be6ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   be6a4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   be6a8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   be6aa:	e7f9      	b.n	be6a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   be6ac:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   be6b0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be6b4:	45b8      	cmp	r8, r7
   be6b6:	d004      	beq.n	be6c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   be6b8:	1d38      	adds	r0, r7, #4
   be6ba:	f7f6 ff67 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6be:	3708      	adds	r7, #8
   be6c0:	e7f8      	b.n	be6b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   be6c2:	2300      	movs	r3, #0
   be6c4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   be6c6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   be6ca:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be6ce:	45b8      	cmp	r8, r7
   be6d0:	d004      	beq.n	be6dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   be6d2:	1d38      	adds	r0, r7, #4
   be6d4:	f7f6 ff5a 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6d8:	3708      	adds	r7, #8
   be6da:	e7f8      	b.n	be6ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   be6dc:	2300      	movs	r3, #0
   be6de:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   be6e0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   be6e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be6e4:	b123      	cbz	r3, be6f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   be6e6:	4631      	mov	r1, r6
   be6e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be6ec:	f7ff fe07 	bl	be2fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   be6f0:	2300      	movs	r3, #0
   be6f2:	2220      	movs	r2, #32
   be6f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   be6f8:	4a2e      	ldr	r2, [pc, #184]	; (be7b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   be6fa:	9200      	str	r2, [sp, #0]
   be6fc:	492b      	ldr	r1, [pc, #172]	; (be7ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be6fe:	aa06      	add	r2, sp, #24
   be700:	2001      	movs	r0, #1
   be702:	f7fe ffa9 	bl	bd658 <log_message>
                    impl->peers_.removeOne(*peer);
   be706:	4631      	mov	r1, r6
   be708:	f104 0018 	add.w	r0, r4, #24
   be70c:	f7ff ff35 	bl	be57a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   be710:	e79f      	b.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be712:	89a9      	ldrh	r1, [r5, #12]
   be714:	4620      	mov	r0, r4
   be716:	f7ff fb53 	bl	bddc0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be71a:	2800      	cmp	r0, #0
   be71c:	d099      	beq.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   be71e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   be720:	2b00      	cmp	r3, #0
   be722:	d096      	beq.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   be724:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be726:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   be728:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be72c:	d001      	beq.n	be732 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   be72e:	2e10      	cmp	r6, #16
   be730:	d117      	bne.n	be762 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   be732:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   be734:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   be736:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   be738:	2506      	movs	r5, #6
                        };
   be73a:	f88d 3015 	strb.w	r3, [sp, #21]
   be73e:	9104      	str	r1, [sp, #16]
   be740:	f88d 2014 	strb.w	r2, [sp, #20]
   be744:	9006      	str	r0, [sp, #24]
   be746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   be74a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   be74c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   be750:	9508      	str	r5, [sp, #32]
   be752:	e883 0003 	stmia.w	r3, {r0, r1}
   be756:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be758:	a906      	add	r1, sp, #24
   be75a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be75e:	4798      	blx	r3
   be760:	e777      	b.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   be762:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   be764:	bf01      	itttt	eq
   be766:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   be768:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   be76a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   be76e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   be770:	bf0f      	iteee	eq
   be772:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   be776:	461a      	movne	r2, r3
   be778:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   be77a:	461d      	movne	r5, r3
   be77c:	e7dd      	b.n	be73a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be77e:	89a9      	ldrh	r1, [r5, #12]
   be780:	4620      	mov	r0, r4
   be782:	f7ff fb1d 	bl	bddc0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   be786:	4601      	mov	r1, r0
   be788:	2800      	cmp	r0, #0
   be78a:	f43f af62 	beq.w	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be78e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   be790:	2b00      	cmp	r3, #0
   be792:	f43f af5e 	beq.w	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   be796:	686b      	ldr	r3, [r5, #4]
   be798:	9306      	str	r3, [sp, #24]
   be79a:	aa06      	add	r2, sp, #24
   be79c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   be79e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be7a2:	4798      	blx	r3
   be7a4:	e755      	b.n	be652 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be7a6:	bf00      	nop
   be7a8:	000c7119 	.word	0x000c7119
   be7ac:	000c7098 	.word	0x000c7098
   be7b0:	000c713f 	.word	0x000c713f
   be7b4:	000c715c 	.word	0x000c715c

000be7b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   be7b8:	b513      	push	{r0, r1, r4, lr}
   be7ba:	460b      	mov	r3, r1
   be7bc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be7be:	e9d0 0100 	ldrd	r0, r1, [r0]
   be7c2:	466c      	mov	r4, sp
   be7c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   be7c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   be7cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   be7d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   be7d4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   be7d8:	b002      	add	sp, #8
   be7da:	bd10      	pop	{r4, pc}

000be7dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   be7dc:	b538      	push	{r3, r4, r5, lr}
   be7de:	4605      	mov	r5, r0
   be7e0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   be7e2:	f7ff ffe9 	bl	be7b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be7e6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   be7e8:	68a2      	ldr	r2, [r4, #8]
   be7ea:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be7ee:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   be7f0:	68e2      	ldr	r2, [r4, #12]
   be7f2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   be7f4:	60e3      	str	r3, [r4, #12]
      }
   be7f6:	bd38      	pop	{r3, r4, r5, pc}

000be7f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   be7f8:	b570      	push	{r4, r5, r6, lr}
   be7fa:	4604      	mov	r4, r0
   be7fc:	b08c      	sub	sp, #48	; 0x30
   be7fe:	460e      	mov	r6, r1
   be800:	9201      	str	r2, [sp, #4]
   be802:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   be804:	f7ff fabc 	bl	bdd80 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   be808:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   be80a:	9901      	ldr	r1, [sp, #4]
   be80c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be810:	f002 fb9b 	bl	c0f4a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   be814:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   be818:	b1cd      	cbz	r5, be84e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   be81a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   be81c:	9502      	str	r5, [sp, #8]
   be81e:	a902      	add	r1, sp, #8
   be820:	a804      	add	r0, sp, #16
   be822:	9303      	str	r3, [sp, #12]
   be824:	f7ff fcb2 	bl	be18c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   be828:	2300      	movs	r3, #0
	__x.swap(*this);
   be82a:	a908      	add	r1, sp, #32
   be82c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   be82e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   be830:	f7ff ffd4 	bl	be7dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   be834:	4631      	mov	r1, r6
   be836:	a808      	add	r0, sp, #32
   be838:	f7ff ffd0 	bl	be7dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   be83c:	a808      	add	r0, sp, #32
   be83e:	f7f5 fdcd 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be842:	a804      	add	r0, sp, #16
   be844:	f7f5 fdca 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   be848:	4620      	mov	r0, r4
   be84a:	b00c      	add	sp, #48	; 0x30
   be84c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be84e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be850:	e7ea      	b.n	be828 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be854 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be858:	b087      	sub	sp, #28
   be85a:	461d      	mov	r5, r3
   be85c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be860:	4680      	mov	r8, r0
   be862:	468b      	mov	fp, r1
   be864:	4692      	mov	sl, r2
   be866:	9912      	ldr	r1, [sp, #72]	; 0x48
   be868:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be86a:	2200      	movs	r2, #0
   be86c:	2068      	movs	r0, #104	; 0x68
   be86e:	9102      	str	r1, [sp, #8]
   be870:	9204      	str	r2, [sp, #16]
   be872:	f7f5 fc10 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be876:	1e06      	subs	r6, r0, #0
   be878:	f106 090c 	add.w	r9, r6, #12
   be87c:	d018      	beq.n	be8b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be87e:	2201      	movs	r2, #1
	: _M_impl(__a)
   be880:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be882:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be886:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be888:	4a15      	ldr	r2, [pc, #84]	; (be8e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be88a:	f847 2b20 	str.w	r2, [r7], #32
   be88e:	9b03      	ldr	r3, [sp, #12]
   be890:	9100      	str	r1, [sp, #0]
   be892:	465a      	mov	r2, fp
   be894:	4651      	mov	r1, sl
   be896:	4648      	mov	r0, r9
   be898:	f7ff ffae 	bl	be7f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be89e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be8a0:	682b      	ldr	r3, [r5, #0]
   be8a2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be8a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be8a6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be8aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be8ac:	6823      	ldr	r3, [r4, #0]
   be8ae:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be8b0:	a904      	add	r1, sp, #16
   be8b2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be8b4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be8b8:	f7ff fd10 	bl	be2dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be8bc:	a805      	add	r0, sp, #20
   be8be:	f7f6 fe65 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be8c2:	f8d8 3000 	ldr.w	r3, [r8]
   be8c6:	b93b      	cbnz	r3, be8d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be8c8:	4a06      	ldr	r2, [pc, #24]	; (be8e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be8ca:	4907      	ldr	r1, [pc, #28]	; (be8e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be8cc:	200a      	movs	r0, #10
}
   be8ce:	b007      	add	sp, #28
   be8d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be8d4:	f7fe beb8 	b.w	bd648 <panic_>
}
   be8d8:	b007      	add	sp, #28
   be8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be8de:	bf00      	nop
   be8e0:	000c71d8 	.word	0x000c71d8
   be8e4:	000bd289 	.word	0x000bd289
   be8e8:	000c7081 	.word	0x000c7081

000be8ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be8ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be8f0:	4604      	mov	r4, r0
   be8f2:	460d      	mov	r5, r1
   be8f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be8f6:	d914      	bls.n	be922 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be8f8:	4290      	cmp	r0, r2
   be8fa:	d213      	bcs.n	be924 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be8fc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be900:	1a75      	subs	r5, r6, r1
   be902:	f1a1 0708 	sub.w	r7, r1, #8
   be906:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be908:	42b7      	cmp	r7, r6
   be90a:	d018      	beq.n	be93e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be90c:	b11c      	cbz	r4, be916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be90e:	4631      	mov	r1, r6
   be910:	4620      	mov	r0, r4
   be912:	f7ff fc68 	bl	be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be916:	1d30      	adds	r0, r6, #4
   be918:	f7f6 fe38 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be91c:	3e08      	subs	r6, #8
   be91e:	3c08      	subs	r4, #8
   be920:	e7f2      	b.n	be908 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be922:	d00c      	beq.n	be93e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be924:	42b5      	cmp	r5, r6
   be926:	d00a      	beq.n	be93e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be928:	b11c      	cbz	r4, be932 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be92a:	4629      	mov	r1, r5
   be92c:	4620      	mov	r0, r4
   be92e:	f7ff fc5a 	bl	be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be932:	1d28      	adds	r0, r5, #4
   be934:	f7f6 fe2a 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be938:	3508      	adds	r5, #8
   be93a:	3408      	adds	r4, #8
   be93c:	e7f2      	b.n	be924 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be940:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be942:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be944:	4605      	mov	r5, r0
        if (n > 0) {
   be946:	dd11      	ble.n	be96c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be948:	00f0      	lsls	r0, r6, #3
   be94a:	f7fe ff83 	bl	bd854 <malloc>
            if (!d) {
   be94e:	4604      	mov	r4, r0
   be950:	b158      	cbz	r0, be96a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be952:	e9d5 1200 	ldrd	r1, r2, [r5]
   be956:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be95a:	f7ff ffc7 	bl	be8ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be95e:	6828      	ldr	r0, [r5, #0]
   be960:	f7fe ff80 	bl	bd864 <free>
        data_ = d;
   be964:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be966:	60ae      	str	r6, [r5, #8]
        return true;
   be968:	2001      	movs	r0, #1
    }
   be96a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be96c:	2400      	movs	r4, #0
   be96e:	e7f6      	b.n	be95e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be970 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be970:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be972:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be974:	6845      	ldr	r5, [r0, #4]
   be976:	4668      	mov	r0, sp
   be978:	f7ff fc35 	bl	be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be97c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be980:	4299      	cmp	r1, r3
   be982:	da10      	bge.n	be9a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be984:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be986:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be988:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be98c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be990:	4629      	mov	r1, r5
   be992:	f105 0008 	add.w	r0, r5, #8
   be996:	f7ff ffa9 	bl	be8ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be99a:	b98d      	cbnz	r5, be9c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be99c:	6863      	ldr	r3, [r4, #4]
   be99e:	3301      	adds	r3, #1
   be9a0:	6063      	str	r3, [r4, #4]
    return true;
   be9a2:	2601      	movs	r6, #1
   be9a4:	e006      	b.n	be9b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be9a6:	3101      	adds	r1, #1
   be9a8:	4620      	mov	r0, r4
   be9aa:	f7ff ffc9 	bl	be940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be9ae:	4606      	mov	r6, r0
   be9b0:	2800      	cmp	r0, #0
   be9b2:	d1e7      	bne.n	be984 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be9b4:	a801      	add	r0, sp, #4
   be9b6:	f7f6 fde9 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be9ba:	4630      	mov	r0, r6
   be9bc:	b002      	add	sp, #8
   be9be:	bd70      	pop	{r4, r5, r6, pc}
   be9c0:	4669      	mov	r1, sp
   be9c2:	4628      	mov	r0, r5
   be9c4:	f7ff fc0f 	bl	be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be9c8:	e7e8      	b.n	be99c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be9ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be9ca:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be9ce:	4604      	mov	r4, r0
   be9d0:	460d      	mov	r5, r1
   be9d2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be9d4:	d914      	bls.n	bea00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be9d6:	4290      	cmp	r0, r2
   be9d8:	d213      	bcs.n	bea02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be9da:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be9de:	1a75      	subs	r5, r6, r1
   be9e0:	f1a1 0708 	sub.w	r7, r1, #8
   be9e4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be9e6:	42b7      	cmp	r7, r6
   be9e8:	d018      	beq.n	bea1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be9ea:	b11c      	cbz	r4, be9f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be9ec:	4631      	mov	r1, r6
   be9ee:	4620      	mov	r0, r4
   be9f0:	f7ff fbeb 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   be9f4:	1d30      	adds	r0, r6, #4
   be9f6:	f7f6 fdc9 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be9fa:	3e08      	subs	r6, #8
   be9fc:	3c08      	subs	r4, #8
   be9fe:	e7f2      	b.n	be9e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bea00:	d00c      	beq.n	bea1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bea02:	42b5      	cmp	r5, r6
   bea04:	d00a      	beq.n	bea1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bea06:	b11c      	cbz	r4, bea10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bea08:	4629      	mov	r1, r5
   bea0a:	4620      	mov	r0, r4
   bea0c:	f7ff fbdd 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bea10:	1d28      	adds	r0, r5, #4
   bea12:	f7f6 fdbb 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bea16:	3508      	adds	r5, #8
   bea18:	3408      	adds	r4, #8
   bea1a:	e7f2      	b.n	bea02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bea1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bea1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bea1e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bea20:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bea22:	4605      	mov	r5, r0
        if (n > 0) {
   bea24:	dd11      	ble.n	bea4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bea26:	00f0      	lsls	r0, r6, #3
   bea28:	f7fe ff14 	bl	bd854 <malloc>
            if (!d) {
   bea2c:	4604      	mov	r4, r0
   bea2e:	b158      	cbz	r0, bea48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bea30:	e9d5 1200 	ldrd	r1, r2, [r5]
   bea34:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bea38:	f7ff ffc7 	bl	be9ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bea3c:	6828      	ldr	r0, [r5, #0]
   bea3e:	f7fe ff11 	bl	bd864 <free>
        data_ = d;
   bea42:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bea44:	60ae      	str	r6, [r5, #8]
        return true;
   bea46:	2001      	movs	r0, #1
    }
   bea48:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bea4a:	2400      	movs	r4, #0
   bea4c:	e7f6      	b.n	bea3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bea4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bea4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bea50:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bea52:	6845      	ldr	r5, [r0, #4]
   bea54:	4668      	mov	r0, sp
   bea56:	f7ff fbb8 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea5a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bea5e:	4299      	cmp	r1, r3
   bea60:	da10      	bge.n	bea84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bea62:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bea64:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bea66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bea6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bea6e:	4629      	mov	r1, r5
   bea70:	f105 0008 	add.w	r0, r5, #8
   bea74:	f7ff ffa9 	bl	be9ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bea78:	b98d      	cbnz	r5, bea9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bea7a:	6863      	ldr	r3, [r4, #4]
   bea7c:	3301      	adds	r3, #1
   bea7e:	6063      	str	r3, [r4, #4]
    return true;
   bea80:	2601      	movs	r6, #1
   bea82:	e006      	b.n	bea92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea84:	3101      	adds	r1, #1
   bea86:	4620      	mov	r0, r4
   bea88:	f7ff ffc9 	bl	bea1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bea8c:	4606      	mov	r6, r0
   bea8e:	2800      	cmp	r0, #0
   bea90:	d1e7      	bne.n	bea62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bea92:	a801      	add	r0, sp, #4
   bea94:	f7f6 fd7a 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bea98:	4630      	mov	r0, r6
   bea9a:	b002      	add	sp, #8
   bea9c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bea9e:	4669      	mov	r1, sp
   beaa0:	4628      	mov	r0, r5
   beaa2:	f7ff fb92 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   beaa6:	e7e8      	b.n	bea7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000beaa8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   beaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beaac:	4617      	mov	r7, r2
   beaae:	b0a1      	sub	sp, #132	; 0x84
   beab0:	4680      	mov	r8, r0
    WiringBleLock lk;
   beab2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   beab4:	460e      	mov	r6, r1
    WiringBleLock lk;
   beab6:	f7ff f82b 	bl	bdb10 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   beaba:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   beabc:	7923      	ldrb	r3, [r4, #4]
   beabe:	b953      	cbnz	r3, bead6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   beac0:	4639      	mov	r1, r7
   beac2:	4640      	mov	r0, r8
   beac4:	f7ff fb81 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   beac8:	a80a      	add	r0, sp, #40	; 0x28
   beaca:	f7ff f82f 	bl	bdb2c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   beace:	4640      	mov	r0, r8
   bead0:	b021      	add	sp, #132	; 0x84
   bead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bead6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bead8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   beadc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   beae0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   beae2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   beae6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   beaea:	9b03      	ldr	r3, [sp, #12]
   beaec:	429d      	cmp	r5, r3
   beaee:	d021      	beq.n	beb34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   beaf0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   beaf4:	4658      	mov	r0, fp
   beaf6:	f109 0114 	add.w	r1, r9, #20
   beafa:	f7ff f8b6 	bl	bdc6a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   beafe:	b1b8      	cbz	r0, beb30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   beb00:	f109 0128 	add.w	r1, r9, #40	; 0x28
   beb04:	4650      	mov	r0, sl
   beb06:	f7ff f8b0 	bl	bdc6a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   beb0a:	b188      	cbz	r0, beb30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   beb0c:	6823      	ldr	r3, [r4, #0]
   beb0e:	f8d9 2000 	ldr.w	r2, [r9]
   beb12:	4053      	eors	r3, r2
   beb14:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   beb18:	d10a      	bne.n	beb30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   beb1a:	2220      	movs	r2, #32
   beb1c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   beb20:	4a5e      	ldr	r2, [pc, #376]	; (bec9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   beb22:	9200      	str	r2, [sp, #0]
   beb24:	aa15      	add	r2, sp, #84	; 0x54
   beb26:	495e      	ldr	r1, [pc, #376]	; (beca0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   beb28:	2032      	movs	r0, #50	; 0x32
   beb2a:	f7fe fd95 	bl	bd658 <log_message>
   beb2e:	e7c7      	b.n	beac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   beb30:	3508      	adds	r5, #8
   beb32:	e7da      	b.n	beaea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   beb34:	4650      	mov	r0, sl
   beb36:	f7ff f869 	bl	bdc0c <_ZNK8particle7BleUuid7isValidEv>
   beb3a:	b960      	cbnz	r0, beb56 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   beb3c:	4959      	ldr	r1, [pc, #356]	; (beca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   beb3e:	2201      	movs	r2, #1
   beb40:	a815      	add	r0, sp, #84	; 0x54
   beb42:	ad15      	add	r5, sp, #84	; 0x54
   beb44:	f7ff f83a 	bl	bdbbc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   beb48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beb4a:	46d4      	mov	ip, sl
   beb4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beb50:	682b      	ldr	r3, [r5, #0]
   beb52:	f8cc 3000 	str.w	r3, [ip]
   beb56:	6833      	ldr	r3, [r6, #0]
   beb58:	e9d3 5300 	ldrd	r5, r3, [r3]
   beb5c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   beb60:	455d      	cmp	r5, fp
   beb62:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   beb64:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   beb66:	d06e      	beq.n	bec46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   beb68:	f855 0b08 	ldr.w	r0, [r5], #8
   beb6c:	f7ff f87d 	bl	bdc6a <_ZNK8particle7BleUuideqERKS0_>
   beb70:	2800      	cmp	r0, #0
   beb72:	d0f5      	beq.n	beb60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   beb74:	f104 0a14 	add.w	sl, r4, #20
   beb78:	4650      	mov	r0, sl
   beb7a:	f7ff f847 	bl	bdc0c <_ZNK8particle7BleUuid7isValidEv>
   beb7e:	b988      	cbnz	r0, beba4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   beb80:	4b49      	ldr	r3, [pc, #292]	; (beca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb82:	4948      	ldr	r1, [pc, #288]	; (beca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   beb84:	881a      	ldrh	r2, [r3, #0]
   beb86:	3201      	adds	r2, #1
   beb88:	b292      	uxth	r2, r2
   beb8a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb8c:	a815      	add	r0, sp, #84	; 0x54
   beb8e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   beb90:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb92:	f7ff f832 	bl	bdbfa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   beb96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beb98:	46d4      	mov	ip, sl
   beb9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beb9e:	682b      	ldr	r3, [r5, #0]
   beba0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   beba4:	4b41      	ldr	r3, [pc, #260]	; (becac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   beba6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   beba8:	2228      	movs	r2, #40	; 0x28
   bebaa:	2100      	movs	r1, #0
   bebac:	a816      	add	r0, sp, #88	; 0x58
   bebae:	f004 ff8f 	bl	c3ad0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bebb2:	4651      	mov	r1, sl
   bebb4:	a804      	add	r0, sp, #16
   bebb6:	f7ff f83b 	bl	bdc30 <_ZN8particle7BleUuid7halUUIDEv>
   bebba:	ab04      	add	r3, sp, #16
   bebbc:	aa18      	add	r2, sp, #96	; 0x60
   bebbe:	f10d 0c20 	add.w	ip, sp, #32
   bebc2:	6818      	ldr	r0, [r3, #0]
   bebc4:	6859      	ldr	r1, [r3, #4]
   bebc6:	4615      	mov	r5, r2
   bebc8:	c503      	stmia	r5!, {r0, r1}
   bebca:	3308      	adds	r3, #8
   bebcc:	4563      	cmp	r3, ip
   bebce:	462a      	mov	r2, r5
   bebd0:	d1f7      	bne.n	bebc2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bebd2:	6818      	ldr	r0, [r3, #0]
   bebd4:	6028      	str	r0, [r5, #0]
    return value_;
   bebd6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bebd8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bebdc:	f8d9 3000 	ldr.w	r3, [r9]
   bebe0:	8a9b      	ldrh	r3, [r3, #20]
   bebe2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bebe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bebe8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bebea:	4b31      	ldr	r3, [pc, #196]	; (becb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bebec:	2200      	movs	r2, #0
   bebee:	1da1      	adds	r1, r4, #6
   bebf0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bebf2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bebf6:	f7fe fabf 	bl	bd178 <hal_ble_gatt_server_add_characteristic>
   bebfa:	2800      	cmp	r0, #0
   bebfc:	f47f af60 	bne.w	beac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bec00:	2301      	movs	r3, #1
   bec02:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bec04:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bec06:	4639      	mov	r1, r7
        return characteristics_;
   bec08:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bec0a:	a80d      	add	r0, sp, #52	; 0x34
   bec0c:	f7ff fadd 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bec10:	4620      	mov	r0, r4
   bec12:	a90d      	add	r1, sp, #52	; 0x34
   bec14:	f7ff ff1b 	bl	bea4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bec18:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bec1a:	a80e      	add	r0, sp, #56	; 0x38
   bec1c:	f7f6 fcb6 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec20:	2c00      	cmp	r4, #0
   bec22:	f47f af4d 	bne.w	beac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bec26:	2320      	movs	r3, #32
   bec28:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bec2c:	4b21      	ldr	r3, [pc, #132]	; (becb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bec2e:	9300      	str	r3, [sp, #0]
   bec30:	aa0d      	add	r2, sp, #52	; 0x34
   bec32:	4623      	mov	r3, r4
   bec34:	e777      	b.n	beb26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bec36:	4639      	mov	r1, r7
   bec38:	4640      	mov	r0, r8
   bec3a:	f7ff fac6 	bl	be1ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   bec3e:	a80c      	add	r0, sp, #48	; 0x30
   bec40:	f7f6 fca4 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec44:	e740      	b.n	beac8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bec46:	a80b      	add	r0, sp, #44	; 0x2c
   bec48:	f7ff f92c 	bl	bdea4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bec4c:	4651      	mov	r1, sl
   bec4e:	a815      	add	r0, sp, #84	; 0x54
   bec50:	f7fe ffee 	bl	bdc30 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bec54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bec56:	2300      	movs	r3, #0
   bec58:	3214      	adds	r2, #20
   bec5a:	a915      	add	r1, sp, #84	; 0x54
   bec5c:	2001      	movs	r0, #1
   bec5e:	f7fe fa63 	bl	bd128 <hal_ble_gatt_server_add_service>
   bec62:	2800      	cmp	r0, #0
   bec64:	d1e7      	bne.n	bec36 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bec66:	6835      	ldr	r5, [r6, #0]
   bec68:	a90b      	add	r1, sp, #44	; 0x2c
   bec6a:	a80d      	add	r0, sp, #52	; 0x34
   bec6c:	f7ff fabb 	bl	be1e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bec70:	4628      	mov	r0, r5
   bec72:	a90d      	add	r1, sp, #52	; 0x34
   bec74:	f7ff fe7c 	bl	be970 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bec78:	4605      	mov	r5, r0
   bec7a:	a80e      	add	r0, sp, #56	; 0x38
   bec7c:	f7f6 fc86 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec80:	2d00      	cmp	r5, #0
   bec82:	d0d8      	beq.n	bec36 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bec84:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bec86:	6853      	ldr	r3, [r2, #4]
   bec88:	6812      	ldr	r2, [r2, #0]
   bec8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bec8e:	3b01      	subs	r3, #1
   bec90:	a80c      	add	r0, sp, #48	; 0x30
   bec92:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bec96:	f7f6 fc79 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec9a:	e76b      	b.n	beb74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bec9c:	000c717b 	.word	0x000c717b
   beca0:	000c7098 	.word	0x000c7098
   beca4:	000c7242 	.word	0x000c7242
   beca8:	2003e624 	.word	0x2003e624
   becac:	002c0003 	.word	0x002c0003
   becb0:	000be03d 	.word	0x000be03d
   becb4:	000c71a6 	.word	0x000c71a6

000becb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   becb8:	4802      	ldr	r0, [pc, #8]	; (becc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   becba:	2300      	movs	r3, #0
   becbc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   becbe:	f7fe bab3 	b.w	bd228 <os_mutex_recursive_create>
   becc2:	bf00      	nop
   becc4:	2003e628 	.word	0x2003e628

000becc8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   becc8:	2200      	movs	r2, #0
   becca:	6840      	ldr	r0, [r0, #4]
   beccc:	4611      	mov	r1, r2
   becce:	f7fe bd79 	b.w	bd7c4 <network_ready>

000becd2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   becd2:	2200      	movs	r2, #0
   becd4:	6840      	ldr	r0, [r0, #4]
   becd6:	4611      	mov	r1, r2
   becd8:	f7fe bd94 	b.w	bd804 <network_listening>

000becdc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   becdc:	2200      	movs	r2, #0
   becde:	6840      	ldr	r0, [r0, #4]
   bece0:	4611      	mov	r1, r2
   bece2:	f7fe bd9f 	b.w	bd824 <network_get_listen_timeout>

000bece6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bece6:	6840      	ldr	r0, [r0, #4]
   bece8:	2200      	movs	r2, #0
   becea:	f7fe bd93 	b.w	bd814 <network_set_listen_timeout>

000becee <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   becee:	6840      	ldr	r0, [r0, #4]
   becf0:	2200      	movs	r2, #0
   becf2:	f081 0101 	eor.w	r1, r1, #1
   becf6:	f7fe bd7d 	b.w	bd7f4 <network_listen>

000becfa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   becfa:	2300      	movs	r3, #0
   becfc:	6840      	ldr	r0, [r0, #4]
   becfe:	461a      	mov	r2, r3
   bed00:	4619      	mov	r1, r3
   bed02:	f7fe bd6f 	b.w	bd7e4 <network_off>

000bed06 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bed06:	2300      	movs	r3, #0
   bed08:	6840      	ldr	r0, [r0, #4]
   bed0a:	461a      	mov	r2, r3
   bed0c:	4619      	mov	r1, r3
   bed0e:	f7fe bd61 	b.w	bd7d4 <network_on>

000bed12 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bed12:	2200      	movs	r2, #0
   bed14:	6840      	ldr	r0, [r0, #4]
   bed16:	4611      	mov	r1, r2
   bed18:	f7fe bd44 	b.w	bd7a4 <network_connecting>

000bed1c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bed1c:	6840      	ldr	r0, [r0, #4]
   bed1e:	2200      	movs	r2, #0
   bed20:	2102      	movs	r1, #2
   bed22:	f7fe bd47 	b.w	bd7b4 <network_disconnect>

000bed26 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bed26:	2300      	movs	r3, #0
   bed28:	6840      	ldr	r0, [r0, #4]
   bed2a:	461a      	mov	r2, r3
   bed2c:	f7fe bd32 	b.w	bd794 <network_connect>

000bed30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bed30:	4b08      	ldr	r3, [pc, #32]	; (bed54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bed32:	b510      	push	{r4, lr}
   bed34:	2428      	movs	r4, #40	; 0x28
   bed36:	4622      	mov	r2, r4
   bed38:	4618      	mov	r0, r3
   bed3a:	2100      	movs	r1, #0
   bed3c:	f004 fec8 	bl	c3ad0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bed40:	4b05      	ldr	r3, [pc, #20]	; (bed58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bed42:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bed44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bed48:	6042      	str	r2, [r0, #4]
   bed4a:	2204      	movs	r2, #4
   bed4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bed4e:	4a03      	ldr	r2, [pc, #12]	; (bed5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bed50:	601a      	str	r2, [r3, #0]
   bed52:	bd10      	pop	{r4, pc}
   bed54:	2003e638 	.word	0x2003e638
   bed58:	2003e630 	.word	0x2003e630
   bed5c:	000c726c 	.word	0x000c726c

000bed60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bed60:	4770      	bx	lr

000bed62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bed62:	2000      	movs	r0, #0
   bed64:	4770      	bx	lr

000bed66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bed66:	b510      	push	{r4, lr}
   bed68:	2110      	movs	r1, #16
   bed6a:	4604      	mov	r4, r0
   bed6c:	f7f5 f999 	bl	b40a2 <_ZdlPvj>
   bed70:	4620      	mov	r0, r4
   bed72:	bd10      	pop	{r4, pc}

000bed74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bed74:	b508      	push	{r3, lr}
      { delete this; }
   bed76:	f7ff fff6 	bl	bed66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bed7a:	bd08      	pop	{r3, pc}

000bed7c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bed7c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bed7e:	2200      	movs	r2, #0
   bed80:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bed84:	6002      	str	r2, [r0, #0]
   bed86:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bed88:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bed8a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bed8c:	680c      	ldr	r4, [r1, #0]
   bed8e:	8085      	strh	r5, [r0, #4]
   bed90:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bed92:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bed94:	bd30      	pop	{r4, r5, pc}

000bed96 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bed96:	b510      	push	{r4, lr}
   bed98:	4604      	mov	r4, r0
    free((void*)msg_);
   bed9a:	6800      	ldr	r0, [r0, #0]
   bed9c:	f7fe fd62 	bl	bd864 <free>
}
   beda0:	4620      	mov	r0, r4
   beda2:	bd10      	pop	{r4, pc}

000beda4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   beda4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   beda6:	68c4      	ldr	r4, [r0, #12]
   beda8:	b1f4      	cbz	r4, bede8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bedaa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bedac:	2b02      	cmp	r3, #2
   bedae:	d103      	bne.n	bedb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bedb0:	f104 000c 	add.w	r0, r4, #12
   bedb4:	f7ff ffef 	bl	bed96 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bedb8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bedba:	b135      	cbz	r5, bedca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bedbc:	4628      	mov	r0, r5
   bedbe:	f7f5 fb0d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bedc2:	2110      	movs	r1, #16
   bedc4:	4628      	mov	r0, r5
   bedc6:	f7f5 f96c 	bl	b40a2 <_ZdlPvj>
   bedca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bedcc:	b135      	cbz	r5, beddc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bedce:	4628      	mov	r0, r5
   bedd0:	f7f5 fb04 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bedd4:	2110      	movs	r1, #16
   bedd6:	4628      	mov	r0, r5
   bedd8:	f7f5 f963 	bl	b40a2 <_ZdlPvj>
   beddc:	4620      	mov	r0, r4
   bedde:	2114      	movs	r1, #20
   bede0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bede4:	f7f5 b95d 	b.w	b40a2 <_ZdlPvj>
   bede8:	bd38      	pop	{r3, r4, r5, pc}

000bedea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bedea:	680b      	ldr	r3, [r1, #0]
   bedec:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bedee:	684b      	ldr	r3, [r1, #4]
   bedf0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bedf2:	b113      	cbz	r3, bedfa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bedf4:	685a      	ldr	r2, [r3, #4]
   bedf6:	3201      	adds	r2, #1
   bedf8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bedfa:	4770      	bx	lr

000bedfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bedfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bedfe:	4604      	mov	r4, r0
   bee00:	4668      	mov	r0, sp
   bee02:	460d      	mov	r5, r1
   bee04:	f7ff fff1 	bl	bedea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bee08:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bee0a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bee0c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bee0e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bee10:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bee12:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bee14:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bee16:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bee18:	f7f6 fbb8 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bee1c:	b135      	cbz	r5, bee2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bee1e:	1d28      	adds	r0, r5, #4
   bee20:	f7f6 fbb4 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bee24:	2108      	movs	r1, #8
   bee26:	4628      	mov	r0, r5
   bee28:	f7f5 f93b 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bee2c:	4620      	mov	r0, r4
   bee2e:	b003      	add	sp, #12
   bee30:	bd30      	pop	{r4, r5, pc}

000bee32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bee32:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bee34:	b510      	push	{r4, lr}
      if (_M_empty())
   bee36:	b90a      	cbnz	r2, bee3c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bee38:	f002 fc22 	bl	c1680 <_ZSt25__throw_bad_function_callv>
    }
   bee3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bee40:	68c3      	ldr	r3, [r0, #12]
   bee42:	4718      	bx	r3

000bee44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bee44:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bee46:	6800      	ldr	r0, [r0, #0]
   bee48:	f100 0110 	add.w	r1, r0, #16
   bee4c:	f7ff fff1 	bl	bee32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bee50:	bd08      	pop	{r3, pc}

000bee52 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bee52:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bee54:	b510      	push	{r4, lr}
      if (_M_empty())
   bee56:	b90a      	cbnz	r2, bee5c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bee58:	f002 fc12 	bl	c1680 <_ZSt25__throw_bad_function_callv>
    }
   bee5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bee60:	68c3      	ldr	r3, [r0, #12]
   bee62:	4718      	bx	r3

000bee64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bee64:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bee66:	6800      	ldr	r0, [r0, #0]
   bee68:	f100 0110 	add.w	r1, r0, #16
   bee6c:	f7ff fff1 	bl	bee52 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bee70:	bd08      	pop	{r3, pc}
	...

000bee74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bee74:	b538      	push	{r3, r4, r5, lr}
   bee76:	2300      	movs	r3, #0
   bee78:	4604      	mov	r4, r0
   bee7a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee7c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bee7e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee80:	f7f5 f909 	bl	b4096 <_Znwj>
   bee84:	b128      	cbz	r0, bee92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bee86:	2301      	movs	r3, #1
   bee88:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bee8c:	4b02      	ldr	r3, [pc, #8]	; (bee98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bee8e:	6003      	str	r3, [r0, #0]
   bee90:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee92:	6020      	str	r0, [r4, #0]
	}
   bee94:	4620      	mov	r0, r4
   bee96:	bd38      	pop	{r3, r4, r5, pc}
   bee98:	000c72a8 	.word	0x000c72a8

000bee9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bee9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bee9e:	2300      	movs	r3, #0
   beea0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   beea2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   beea4:	4604      	mov	r4, r0
   beea6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   beea8:	b12b      	cbz	r3, beeb6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   beeaa:	2202      	movs	r2, #2
   beeac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   beeae:	68eb      	ldr	r3, [r5, #12]
   beeb0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   beeb2:	68ab      	ldr	r3, [r5, #8]
   beeb4:	60a3      	str	r3, [r4, #8]
    }
   beeb6:	4620      	mov	r0, r4
   beeb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000beebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   beebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   beebe:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   beec0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   beec2:	4668      	mov	r0, sp
   beec4:	f7ff ff5a 	bl	bed7c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   beec8:	f04f 0302 	mov.w	r3, #2
   beecc:	e8d4 2f4f 	ldrexb	r2, [r4]
   beed0:	2a00      	cmp	r2, #0
   beed2:	d103      	bne.n	beedc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   beed4:	e8c4 3f41 	strexb	r1, r3, [r4]
   beed8:	2900      	cmp	r1, #0
   beeda:	d1f7      	bne.n	beecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   beedc:	d125      	bne.n	bef2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   beede:	f104 050c 	add.w	r5, r4, #12
   beee2:	4669      	mov	r1, sp
   beee4:	4628      	mov	r0, r5
   beee6:	f7ff ff49 	bl	bed7c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   beeea:	f3bf 8f5b 	dmb	ish
   beeee:	2301      	movs	r3, #1
   beef0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   beef2:	2000      	movs	r0, #0
   beef4:	f104 0308 	add.w	r3, r4, #8
   beef8:	f3bf 8f5b 	dmb	ish
   beefc:	e853 6f00 	ldrex	r6, [r3]
   bef00:	e843 0200 	strex	r2, r0, [r3]
   bef04:	2a00      	cmp	r2, #0
   bef06:	d1f9      	bne.n	beefc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bef08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bef0c:	b16e      	cbz	r6, bef2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bef0e:	f7fe fbdd 	bl	bd6cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bef12:	b178      	cbz	r0, bef34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bef14:	4629      	mov	r1, r5
   bef16:	4630      	mov	r0, r6
   bef18:	f7ff ff8b 	bl	bee32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bef1c:	4630      	mov	r0, r6
   bef1e:	f7f5 fa5d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bef22:	2110      	movs	r1, #16
   bef24:	4630      	mov	r0, r6
   bef26:	f7f5 f8bc 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bef2a:	4668      	mov	r0, sp
   bef2c:	f7ff ff33 	bl	bed96 <_ZN8particle5ErrorD1Ev>
    }
   bef30:	b009      	add	sp, #36	; 0x24
   bef32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bef34:	4631      	mov	r1, r6
   bef36:	a802      	add	r0, sp, #8
   bef38:	f7ff ffb0 	bl	bee9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bef3c:	68e0      	ldr	r0, [r4, #12]
   bef3e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bef42:	b108      	cbz	r0, bef48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bef44:	f004 fe32 	bl	c3bac <strdup>
        type_(type) {
   bef48:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bef4a:	2010      	movs	r0, #16
   bef4c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bef50:	f7f5 f8a1 	bl	b4096 <_Znwj>
   bef54:	4605      	mov	r5, r0
   bef56:	b1e8      	cbz	r0, bef94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bef58:	2700      	movs	r7, #0
   bef5a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef5c:	2018      	movs	r0, #24
   bef5e:	f7f5 f89a 	bl	b4096 <_Znwj>
   bef62:	4604      	mov	r4, r0
   bef64:	b188      	cbz	r0, bef8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bef66:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bef68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bef6a:	a802      	add	r0, sp, #8
   bef6c:	f7ff fc24 	bl	be7b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bef72:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bef74:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bef78:	9204      	str	r2, [sp, #16]
   bef7a:	a906      	add	r1, sp, #24
   bef7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bef7e:	60e3      	str	r3, [r4, #12]
   bef80:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bef84:	9205      	str	r2, [sp, #20]
   bef86:	f7ff fef9 	bl	bed7c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bef8a:	4b08      	ldr	r3, [pc, #32]	; (befac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bef8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bef8e:	4b08      	ldr	r3, [pc, #32]	; (befb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef90:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bef92:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bef94:	a806      	add	r0, sp, #24
   bef96:	f7ff fefe 	bl	bed96 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bef9a:	a802      	add	r0, sp, #8
   bef9c:	f7f5 fa1e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   befa0:	2200      	movs	r2, #0
   befa2:	4629      	mov	r1, r5
   befa4:	4803      	ldr	r0, [pc, #12]	; (befb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   befa6:	f7fe fb99 	bl	bd6dc <application_thread_invoke>
   befaa:	e7b7      	b.n	bef1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   befac:	000bee45 	.word	0x000bee45
   befb0:	000bf0c9 	.word	0x000bf0c9
   befb4:	000bd943 	.word	0x000bd943

000befb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   befb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   befbc:	b08b      	sub	sp, #44	; 0x2c
   befbe:	4605      	mov	r5, r0
   befc0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   befc4:	460f      	mov	r7, r1
   befc6:	4690      	mov	r8, r2
   befc8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   befca:	f7fe fbbb 	bl	bd744 <spark_cloud_flag_connected>
   befce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   befd0:	4683      	mov	fp, r0
   befd2:	bb38      	cbnz	r0, bf024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   befd4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   befd8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   befda:	a905      	add	r1, sp, #20
   befdc:	4630      	mov	r0, r6
   befde:	f8ad 3018 	strh.w	r3, [sp, #24]
   befe2:	f7ff fecb 	bl	bed7c <_ZN8particle5ErrorC1EOS0_>
   befe6:	2014      	movs	r0, #20
   befe8:	f7f5 f855 	bl	b4096 <_Znwj>
   befec:	4604      	mov	r4, r0
   befee:	b148      	cbz	r0, bf004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   beff0:	2302      	movs	r3, #2
   beff2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   beff4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   beff6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   beffa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   beffc:	4631      	mov	r1, r6
   beffe:	300c      	adds	r0, #12
   bf000:	f7ff febc 	bl	bed7c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf004:	4628      	mov	r0, r5
	: __shared_count(__p)
   bf006:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf008:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bf00c:	f7ff ff32 	bl	bee74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf010:	4630      	mov	r0, r6
   bf012:	f7ff fec0 	bl	bed96 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bf016:	a805      	add	r0, sp, #20
   bf018:	f7ff febd 	bl	bed96 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bf01c:	4628      	mov	r0, r5
   bf01e:	b00b      	add	sp, #44	; 0x2c
   bf020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bf024:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bf026:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bf028:	2014      	movs	r0, #20
   bf02a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bf02e:	9307      	str	r3, [sp, #28]
   bf030:	f7f5 f831 	bl	b4096 <_Znwj>
   bf034:	4601      	mov	r1, r0
   bf036:	b118      	cbz	r0, bf040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf038:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf03c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf03e:	7044      	strb	r4, [r0, #1]
   bf040:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf042:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bf044:	f7ff ff16 	bl	bee74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bf048:	4b1e      	ldr	r3, [pc, #120]	; (bf0c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bf04a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bf04c:	2008      	movs	r0, #8
   bf04e:	f7f5 f822 	bl	b4096 <_Znwj>
   bf052:	4604      	mov	r4, r0
   bf054:	b110      	cbz	r0, bf05c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bf056:	a903      	add	r1, sp, #12
   bf058:	f7ff fec7 	bl	bedea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf05c:	9600      	str	r6, [sp, #0]
   bf05e:	fa5f f38a 	uxtb.w	r3, sl
   bf062:	464a      	mov	r2, r9
   bf064:	4641      	mov	r1, r8
   bf066:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bf068:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf06a:	f7fe fb73 	bl	bd754 <spark_send_event>
   bf06e:	b9b8      	cbnz	r0, bf0a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bf070:	9b03      	ldr	r3, [sp, #12]
   bf072:	785b      	ldrb	r3, [r3, #1]
   bf074:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bf078:	b993      	cbnz	r3, bf0a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bf07a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bf07e:	a905      	add	r1, sp, #20
   bf080:	a803      	add	r0, sp, #12
   bf082:	9205      	str	r2, [sp, #20]
   bf084:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf088:	f7ff ff18 	bl	beebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf08c:	a805      	add	r0, sp, #20
   bf08e:	f7ff fe82 	bl	bed96 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bf092:	a805      	add	r0, sp, #20
   bf094:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf096:	f7ff feb1 	bl	bedfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bf09a:	a806      	add	r0, sp, #24
   bf09c:	f7f6 fa76 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf0a0:	a903      	add	r1, sp, #12
   bf0a2:	a805      	add	r0, sp, #20
   bf0a4:	f7ff fea1 	bl	bedea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf0a8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf0aa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf0ac:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bf0ae:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bf0b0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf0b2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bf0b4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bf0b6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bf0b8:	f7f6 fa68 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf0bc:	a804      	add	r0, sp, #16
   bf0be:	f7f6 fa65 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bf0c2:	e7ab      	b.n	bf01c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bf0c4:	000bf145 	.word	0x000bf145

000bf0c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bf0c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf0cc:	4605      	mov	r5, r0
	switch (__op)
   bf0ce:	d103      	bne.n	bf0d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf0d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf0d2:	6003      	str	r3, [r0, #0]
      }
   bf0d4:	2000      	movs	r0, #0
   bf0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bf0d8:	2a02      	cmp	r2, #2
   bf0da:	d010      	beq.n	bf0fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bf0dc:	2a03      	cmp	r2, #3
   bf0de:	d1f9      	bne.n	bf0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf0e0:	6804      	ldr	r4, [r0, #0]
   bf0e2:	2c00      	cmp	r4, #0
   bf0e4:	d0f6      	beq.n	bf0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bf0e6:	f104 0010 	add.w	r0, r4, #16
   bf0ea:	f7ff fe54 	bl	bed96 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf0ee:	4620      	mov	r0, r4
   bf0f0:	f7f5 f974 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf0f4:	2118      	movs	r1, #24
   bf0f6:	4620      	mov	r0, r4
   bf0f8:	f7f4 ffd3 	bl	b40a2 <_ZdlPvj>
   bf0fc:	e7ea      	b.n	bf0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf0fe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bf100:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf102:	f7f4 ffc8 	bl	b4096 <_Znwj>
   bf106:	4604      	mov	r4, r0
   bf108:	b150      	cbz	r0, bf120 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bf10a:	4631      	mov	r1, r6
   bf10c:	f7ff fec6 	bl	bee9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf110:	6930      	ldr	r0, [r6, #16]
   bf112:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf116:	b108      	cbz	r0, bf11c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bf118:	f004 fd48 	bl	c3bac <strdup>
        type_(type) {
   bf11c:	6120      	str	r0, [r4, #16]
   bf11e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bf120:	602c      	str	r4, [r5, #0]
	}
   bf122:	e7d7      	b.n	bf0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bf124 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bf124:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf126:	2300      	movs	r3, #0
   bf128:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf12a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf12c:	4604      	mov	r4, r0
   bf12e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf130:	b12b      	cbz	r3, bf13e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf132:	2202      	movs	r2, #2
   bf134:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf136:	68eb      	ldr	r3, [r5, #12]
   bf138:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf13a:	68ab      	ldr	r3, [r5, #8]
   bf13c:	60a3      	str	r3, [r4, #8]
    }
   bf13e:	4620      	mov	r0, r4
   bf140:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bf144:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf146:	b089      	sub	sp, #36	; 0x24
   bf148:	4604      	mov	r4, r0
   bf14a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bf14c:	a801      	add	r0, sp, #4
   bf14e:	4611      	mov	r1, r2
   bf150:	f7ff fe54 	bl	bedfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bf154:	b1a4      	cbz	r4, bf180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bf156:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf158:	b11d      	cbz	r5, bf162 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bf15a:	4628      	mov	r0, r5
   bf15c:	f004 fd26 	bl	c3bac <strdup>
   bf160:	4605      	mov	r5, r0
   bf162:	a801      	add	r0, sp, #4
   bf164:	a903      	add	r1, sp, #12
        type_(type) {
   bf166:	9503      	str	r5, [sp, #12]
   bf168:	f8ad 4010 	strh.w	r4, [sp, #16]
   bf16c:	f7ff fea6 	bl	beebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf170:	a803      	add	r0, sp, #12
   bf172:	f7ff fe10 	bl	bed96 <_ZN8particle5ErrorD1Ev>
   bf176:	a802      	add	r0, sp, #8
   bf178:	f7f6 fa08 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf17c:	b009      	add	sp, #36	; 0x24
   bf17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bf180:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf182:	2301      	movs	r3, #1
   bf184:	e8d5 2f4f 	ldrexb	r2, [r5]
   bf188:	2a00      	cmp	r2, #0
   bf18a:	d103      	bne.n	bf194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bf18c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bf190:	2900      	cmp	r1, #0
   bf192:	d1f7      	bne.n	bf184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bf194:	d1ef      	bne.n	bf176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bf196:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bf198:	f3bf 8f5b 	dmb	ish
   bf19c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf19e:	1d2b      	adds	r3, r5, #4
   bf1a0:	f3bf 8f5b 	dmb	ish
   bf1a4:	e853 6f00 	ldrex	r6, [r3]
   bf1a8:	e843 4200 	strex	r2, r4, [r3]
   bf1ac:	2a00      	cmp	r2, #0
   bf1ae:	d1f9      	bne.n	bf1a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bf1b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf1b4:	2e00      	cmp	r6, #0
   bf1b6:	d0de      	beq.n	bf176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bf1b8:	4620      	mov	r0, r4
   bf1ba:	f7fe fa87 	bl	bd6cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf1be:	4607      	mov	r7, r0
   bf1c0:	b160      	cbz	r0, bf1dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf1c2:	f105 010c 	add.w	r1, r5, #12
   bf1c6:	4630      	mov	r0, r6
   bf1c8:	f7ff fe43 	bl	bee52 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bf1cc:	4630      	mov	r0, r6
   bf1ce:	f7f5 f905 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf1d2:	2110      	movs	r1, #16
   bf1d4:	4630      	mov	r0, r6
   bf1d6:	f7f4 ff64 	bl	b40a2 <_ZdlPvj>
   bf1da:	e7cc      	b.n	bf176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf1dc:	4631      	mov	r1, r6
   bf1de:	a803      	add	r0, sp, #12
   bf1e0:	f7ff ffa0 	bl	bf124 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf1e4:	7b2b      	ldrb	r3, [r5, #12]
   bf1e6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf1ea:	2010      	movs	r0, #16
   bf1ec:	f7f4 ff53 	bl	b4096 <_Znwj>
   bf1f0:	4605      	mov	r5, r0
   bf1f2:	b1d0      	cbz	r0, bf22a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf1f4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf1f6:	2014      	movs	r0, #20
   bf1f8:	f7f4 ff4d 	bl	b4096 <_Znwj>
   bf1fc:	4604      	mov	r4, r0
   bf1fe:	b178      	cbz	r0, bf220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf200:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf202:	4601      	mov	r1, r0
   bf204:	a803      	add	r0, sp, #12
   bf206:	f7ff fad7 	bl	be7b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf20a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf20c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf20e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf210:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf212:	9205      	str	r2, [sp, #20]
   bf214:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf216:	60e3      	str	r3, [r4, #12]
   bf218:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf21c:	9206      	str	r2, [sp, #24]
   bf21e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf220:	4b06      	ldr	r3, [pc, #24]	; (bf23c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf222:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf224:	4b06      	ldr	r3, [pc, #24]	; (bf240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf226:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf228:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf22a:	a803      	add	r0, sp, #12
   bf22c:	f7f5 f8d6 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf230:	2200      	movs	r2, #0
   bf232:	4629      	mov	r1, r5
   bf234:	4803      	ldr	r0, [pc, #12]	; (bf244 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf236:	f7fe fa51 	bl	bd6dc <application_thread_invoke>
   bf23a:	e7c7      	b.n	bf1cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf23c:	000bee65 	.word	0x000bee65
   bf240:	000bf249 	.word	0x000bf249
   bf244:	000bd943 	.word	0x000bd943

000bf248 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf248:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf24a:	b570      	push	{r4, r5, r6, lr}
   bf24c:	4604      	mov	r4, r0
	switch (__op)
   bf24e:	d103      	bne.n	bf258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf250:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf252:	6003      	str	r3, [r0, #0]
      }
   bf254:	2000      	movs	r0, #0
   bf256:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf258:	2a02      	cmp	r2, #2
   bf25a:	d00c      	beq.n	bf276 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf25c:	2a03      	cmp	r2, #3
   bf25e:	d1f9      	bne.n	bf254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf260:	6804      	ldr	r4, [r0, #0]
   bf262:	2c00      	cmp	r4, #0
   bf264:	d0f6      	beq.n	bf254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf266:	4620      	mov	r0, r4
   bf268:	f7f5 f8b8 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf26c:	2114      	movs	r1, #20
   bf26e:	4620      	mov	r0, r4
   bf270:	f7f4 ff17 	bl	b40a2 <_ZdlPvj>
   bf274:	e7ee      	b.n	bf254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf276:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf278:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf27a:	f7f4 ff0c 	bl	b4096 <_Znwj>
   bf27e:	4605      	mov	r5, r0
   bf280:	b120      	cbz	r0, bf28c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf282:	4631      	mov	r1, r6
   bf284:	f7ff ff4e 	bl	bf124 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf288:	7c33      	ldrb	r3, [r6, #16]
   bf28a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf28c:	6025      	str	r5, [r4, #0]
	}
   bf28e:	e7e1      	b.n	bf254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf290 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf290:	2200      	movs	r2, #0
   bf292:	6840      	ldr	r0, [r0, #4]
   bf294:	4611      	mov	r1, r2
   bf296:	f7fe bab5 	b.w	bd804 <network_listening>

000bf29a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf29a:	2200      	movs	r2, #0
   bf29c:	6840      	ldr	r0, [r0, #4]
   bf29e:	4611      	mov	r1, r2
   bf2a0:	f7fe bac0 	b.w	bd824 <network_get_listen_timeout>

000bf2a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf2a4:	6840      	ldr	r0, [r0, #4]
   bf2a6:	2200      	movs	r2, #0
   bf2a8:	f7fe bab4 	b.w	bd814 <network_set_listen_timeout>

000bf2ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf2ac:	6840      	ldr	r0, [r0, #4]
   bf2ae:	2200      	movs	r2, #0
   bf2b0:	f081 0101 	eor.w	r1, r1, #1
   bf2b4:	f7fe ba9e 	b.w	bd7f4 <network_listen>

000bf2b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf2b8:	2300      	movs	r3, #0
   bf2ba:	6840      	ldr	r0, [r0, #4]
   bf2bc:	461a      	mov	r2, r3
   bf2be:	4619      	mov	r1, r3
   bf2c0:	f7fe ba90 	b.w	bd7e4 <network_off>

000bf2c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf2c4:	2300      	movs	r3, #0
   bf2c6:	6840      	ldr	r0, [r0, #4]
   bf2c8:	461a      	mov	r2, r3
   bf2ca:	4619      	mov	r1, r3
   bf2cc:	f7fe ba82 	b.w	bd7d4 <network_on>

000bf2d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf2d0:	2200      	movs	r2, #0
   bf2d2:	6840      	ldr	r0, [r0, #4]
   bf2d4:	4611      	mov	r1, r2
   bf2d6:	f7fe ba75 	b.w	bd7c4 <network_ready>

000bf2da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf2da:	2200      	movs	r2, #0
   bf2dc:	6840      	ldr	r0, [r0, #4]
   bf2de:	4611      	mov	r1, r2
   bf2e0:	f7fe ba60 	b.w	bd7a4 <network_connecting>

000bf2e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf2e4:	6840      	ldr	r0, [r0, #4]
   bf2e6:	2200      	movs	r2, #0
   bf2e8:	2102      	movs	r1, #2
   bf2ea:	f7fe ba63 	b.w	bd7b4 <network_disconnect>

000bf2ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf2ee:	2300      	movs	r3, #0
   bf2f0:	6840      	ldr	r0, [r0, #4]
   bf2f2:	461a      	mov	r2, r3
   bf2f4:	f7fe ba4e 	b.w	bd794 <network_connect>

000bf2f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf2f8:	4b02      	ldr	r3, [pc, #8]	; (bf304 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf2fa:	2203      	movs	r2, #3
   bf2fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf2fe:	4a02      	ldr	r2, [pc, #8]	; (bf308 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf300:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf302:	4770      	bx	lr
   bf304:	2003e660 	.word	0x2003e660
   bf308:	000c72c4 	.word	0x000c72c4

000bf30c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf30c:	4770      	bx	lr

000bf30e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf310:	4606      	mov	r6, r0
   bf312:	4615      	mov	r5, r2
   bf314:	460c      	mov	r4, r1
   bf316:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf318:	42bc      	cmp	r4, r7
   bf31a:	d006      	beq.n	bf32a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf31c:	6833      	ldr	r3, [r6, #0]
   bf31e:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf322:	689b      	ldr	r3, [r3, #8]
   bf324:	4630      	mov	r0, r6
   bf326:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf328:	e7f6      	b.n	bf318 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf32a:	4628      	mov	r0, r5
   bf32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf32e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf32e:	7c00      	ldrb	r0, [r0, #16]
   bf330:	2200      	movs	r2, #0
   bf332:	f7fe b829 	b.w	bd388 <hal_i2c_write>

000bf336 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf336:	7c00      	ldrb	r0, [r0, #16]
   bf338:	2100      	movs	r1, #0
   bf33a:	f7fe b82d 	b.w	bd398 <hal_i2c_available>

000bf33e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf33e:	7c00      	ldrb	r0, [r0, #16]
   bf340:	2100      	movs	r1, #0
   bf342:	f7fe b831 	b.w	bd3a8 <hal_i2c_read>

000bf346 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf346:	7c00      	ldrb	r0, [r0, #16]
   bf348:	2100      	movs	r1, #0
   bf34a:	f7fe b835 	b.w	bd3b8 <hal_i2c_peek>

000bf34e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf34e:	7c00      	ldrb	r0, [r0, #16]
   bf350:	2100      	movs	r1, #0
   bf352:	f7fe b839 	b.w	bd3c8 <hal_i2c_flush>

000bf356 <_ZN7TwoWireD0Ev>:
   bf356:	b510      	push	{r4, lr}
   bf358:	2114      	movs	r1, #20
   bf35a:	4604      	mov	r4, r0
   bf35c:	f7f4 fea1 	bl	b40a2 <_ZdlPvj>
   bf360:	4620      	mov	r0, r4
   bf362:	bd10      	pop	{r4, pc}

000bf364 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf364:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf36a:	4604      	mov	r4, r0
   bf36c:	4608      	mov	r0, r1
   bf36e:	2100      	movs	r1, #0
   bf370:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf374:	4b03      	ldr	r3, [pc, #12]	; (bf384 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf376:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf378:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf37a:	4611      	mov	r1, r2
   bf37c:	f7fe f834 	bl	bd3e8 <hal_i2c_init>
}
   bf380:	4620      	mov	r0, r4
   bf382:	bd10      	pop	{r4, pc}
   bf384:	000c7300 	.word	0x000c7300

000bf388 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf388:	7c00      	ldrb	r0, [r0, #16]
   bf38a:	2200      	movs	r2, #0
   bf38c:	f7fd bfdc 	b.w	bd348 <hal_i2c_set_speed>

000bf390 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf390:	2300      	movs	r3, #0
   bf392:	7c00      	ldrb	r0, [r0, #16]
   bf394:	461a      	mov	r2, r3
   bf396:	4619      	mov	r1, r3
   bf398:	f7fd bfde 	b.w	bd358 <hal_i2c_begin>

000bf39c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf39c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf39e:	2200      	movs	r2, #0
   bf3a0:	2314      	movs	r3, #20
   bf3a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf3a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf3aa:	780b      	ldrb	r3, [r1, #0]
   bf3ac:	f88d 3008 	strb.w	r3, [sp, #8]
   bf3b0:	684b      	ldr	r3, [r1, #4]
   bf3b2:	9303      	str	r3, [sp, #12]
   bf3b4:	68cb      	ldr	r3, [r1, #12]
   bf3b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf3b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf3ba:	7a0b      	ldrb	r3, [r1, #8]
   bf3bc:	9305      	str	r3, [sp, #20]
   bf3be:	a901      	add	r1, sp, #4
   bf3c0:	f7fe f81a 	bl	bd3f8 <hal_i2c_request_ex>
}
   bf3c4:	b007      	add	sp, #28
   bf3c6:	f85d fb04 	ldr.w	pc, [sp], #4

000bf3ca <_ZN7TwoWire11requestFromEhjh>:
{
   bf3ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf3cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf3ce:	f88d 1000 	strb.w	r1, [sp]
   bf3d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf3d6:	9103      	str	r1, [sp, #12]
   bf3d8:	bf18      	it	ne
   bf3da:	2301      	movne	r3, #1
   bf3dc:	4669      	mov	r1, sp
    size_ = size;
   bf3de:	9201      	str	r2, [sp, #4]
   bf3e0:	f88d 3008 	strb.w	r3, [sp, #8]
   bf3e4:	f7ff ffda 	bl	bf39c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf3e8:	b005      	add	sp, #20
   bf3ea:	f85d fb04 	ldr.w	pc, [sp], #4

000bf3ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf3ee:	2301      	movs	r3, #1
   bf3f0:	f7ff bfeb 	b.w	bf3ca <_ZN7TwoWire11requestFromEhjh>

000bf3f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf3f4:	7c00      	ldrb	r0, [r0, #16]
   bf3f6:	2200      	movs	r2, #0
   bf3f8:	f7fd bfb6 	b.w	bd368 <hal_i2c_begin_transmission>

000bf3fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf3fc:	b2c9      	uxtb	r1, r1
   bf3fe:	f7ff bff9 	b.w	bf3f4 <_ZN7TwoWire17beginTransmissionEh>

000bf402 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf402:	7c00      	ldrb	r0, [r0, #16]
   bf404:	2200      	movs	r2, #0
   bf406:	f7fd bfb7 	b.w	bd378 <hal_i2c_end_transmission>

000bf40a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf40a:	2101      	movs	r1, #1
   bf40c:	f7ff bff9 	b.w	bf402 <_ZN7TwoWire15endTransmissionEh>

000bf410 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf410:	f7fd bf8a 	b.w	bd328 <HAL_Interrupts_Disable_All>

000bf414 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf414:	f7fd bf80 	b.w	bd318 <HAL_Interrupts_Enable_All>

000bf418 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf418:	4770      	bx	lr

000bf41a <_ZN9IPAddressD0Ev>:
   bf41a:	b510      	push	{r4, lr}
   bf41c:	2118      	movs	r1, #24
   bf41e:	4604      	mov	r4, r0
   bf420:	f7f4 fe3f 	bl	b40a2 <_ZdlPvj>
   bf424:	4620      	mov	r0, r4
   bf426:	bd10      	pop	{r4, pc}

000bf428 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf428:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf42a:	7d03      	ldrb	r3, [r0, #20]
   bf42c:	2b06      	cmp	r3, #6
{
   bf42e:	b08d      	sub	sp, #52	; 0x34
   bf430:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf432:	f100 0704 	add.w	r7, r0, #4
   bf436:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf43a:	d012      	beq.n	bf462 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf43c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf440:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf444:	220a      	movs	r2, #10
   bf446:	4630      	mov	r0, r6
   bf448:	f001 fabd 	bl	c09c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf44c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf44e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf450:	d019      	beq.n	bf486 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf452:	2c00      	cmp	r4, #0
   bf454:	d0f4      	beq.n	bf440 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf456:	212e      	movs	r1, #46	; 0x2e
   bf458:	4630      	mov	r0, r6
   bf45a:	f001 fa95 	bl	c0988 <_ZN5Print5printEc>
   bf45e:	4404      	add	r4, r0
   bf460:	e7ee      	b.n	bf440 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf462:	232f      	movs	r3, #47	; 0x2f
   bf464:	466a      	mov	r2, sp
   bf466:	4639      	mov	r1, r7
   bf468:	200a      	movs	r0, #10
		buf[0] = 0;
   bf46a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf46e:	f7fd ffcb 	bl	bd408 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf472:	4668      	mov	r0, sp
   bf474:	f004 fbb7 	bl	c3be6 <strlen>
   bf478:	6833      	ldr	r3, [r6, #0]
   bf47a:	4602      	mov	r2, r0
   bf47c:	68db      	ldr	r3, [r3, #12]
   bf47e:	4669      	mov	r1, sp
   bf480:	4630      	mov	r0, r6
   bf482:	4798      	blx	r3
   bf484:	4604      	mov	r4, r0
    }
    return n;
}
   bf486:	4620      	mov	r0, r4
   bf488:	b00d      	add	sp, #52	; 0x34
   bf48a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf48c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf48c:	b510      	push	{r4, lr}
   bf48e:	4b05      	ldr	r3, [pc, #20]	; (bf4a4 <_ZN9IPAddressC1Ev+0x18>)
   bf490:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf492:	2211      	movs	r2, #17
   bf494:	f840 3b04 	str.w	r3, [r0], #4
   bf498:	2100      	movs	r1, #0
   bf49a:	f004 fb19 	bl	c3ad0 <memset>
}
   bf49e:	4620      	mov	r0, r4
   bf4a0:	bd10      	pop	{r4, pc}
   bf4a2:	bf00      	nop
   bf4a4:	000c7328 	.word	0x000c7328

000bf4a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf4a8:	4603      	mov	r3, r0
   bf4aa:	4a07      	ldr	r2, [pc, #28]	; (bf4c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf4ac:	b510      	push	{r4, lr}
   bf4ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf4b2:	f101 0210 	add.w	r2, r1, #16
   bf4b6:	f851 4b04 	ldr.w	r4, [r1], #4
   bf4ba:	f843 4b04 	str.w	r4, [r3], #4
   bf4be:	4291      	cmp	r1, r2
   bf4c0:	d1f9      	bne.n	bf4b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf4c2:	780a      	ldrb	r2, [r1, #0]
   bf4c4:	701a      	strb	r2, [r3, #0]
}
   bf4c6:	bd10      	pop	{r4, pc}
   bf4c8:	000c7328 	.word	0x000c7328

000bf4cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf4cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf4ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf4d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf4d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf4da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf4de:	2304      	movs	r3, #4
   bf4e0:	6041      	str	r1, [r0, #4]
   bf4e2:	7503      	strb	r3, [r0, #20]
}
   bf4e4:	bd10      	pop	{r4, pc}
	...

000bf4e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf4e8:	b507      	push	{r0, r1, r2, lr}
   bf4ea:	4b06      	ldr	r3, [pc, #24]	; (bf504 <_ZN9IPAddressC1EPKh+0x1c>)
   bf4ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf4ee:	78cb      	ldrb	r3, [r1, #3]
   bf4f0:	9300      	str	r3, [sp, #0]
   bf4f2:	788b      	ldrb	r3, [r1, #2]
   bf4f4:	784a      	ldrb	r2, [r1, #1]
   bf4f6:	7809      	ldrb	r1, [r1, #0]
   bf4f8:	f7ff ffe8 	bl	bf4cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf4fc:	b003      	add	sp, #12
   bf4fe:	f85d fb04 	ldr.w	pc, [sp], #4
   bf502:	bf00      	nop
   bf504:	000c7328 	.word	0x000c7328

000bf508 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf508:	f100 0310 	add.w	r3, r0, #16
   bf50c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf50e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf512:	2901      	cmp	r1, #1
   bf514:	4618      	mov	r0, r3
   bf516:	d108      	bne.n	bf52a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf518:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf51c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf520:	3a01      	subs	r2, #1
   bf522:	f103 0310 	add.w	r3, r3, #16
   bf526:	d1f2      	bne.n	bf50e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf528:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf52a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf52c:	bf04      	itt	eq
   bf52e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf532:	1852      	addeq	r2, r2, r1
   bf534:	e7f4      	b.n	bf520 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf536 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf536:	b40e      	push	{r1, r2, r3}
   bf538:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf53a:	b088      	sub	sp, #32
   bf53c:	af00      	add	r7, sp, #0
   bf53e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf542:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf544:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf548:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf54a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf54c:	462b      	mov	r3, r5
   bf54e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf550:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf552:	f7fe f9af 	bl	bd8b4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf556:	280f      	cmp	r0, #15
   bf558:	687a      	ldr	r2, [r7, #4]
   bf55a:	d91a      	bls.n	bf592 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf55c:	f100 0308 	add.w	r3, r0, #8
   bf560:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf564:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf566:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf56a:	1c41      	adds	r1, r0, #1
   bf56c:	462b      	mov	r3, r5
   bf56e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf570:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf572:	f7fe f99f 	bl	bd8b4 <vsnprintf>
        if (n > 0) {
   bf576:	1e02      	subs	r2, r0, #0
   bf578:	dd04      	ble.n	bf584 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf57a:	6823      	ldr	r3, [r4, #0]
   bf57c:	4669      	mov	r1, sp
   bf57e:	689b      	ldr	r3, [r3, #8]
   bf580:	4620      	mov	r0, r4
   bf582:	4798      	blx	r3
   bf584:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf586:	3720      	adds	r7, #32
   bf588:	46bd      	mov	sp, r7
   bf58a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf58e:	b003      	add	sp, #12
   bf590:	4770      	bx	lr
    } else if (n > 0) {
   bf592:	2800      	cmp	r0, #0
   bf594:	d0f7      	beq.n	bf586 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf596:	6823      	ldr	r3, [r4, #0]
   bf598:	4602      	mov	r2, r0
   bf59a:	689b      	ldr	r3, [r3, #8]
   bf59c:	f107 0110 	add.w	r1, r7, #16
   bf5a0:	4620      	mov	r0, r4
   bf5a2:	4798      	blx	r3
}
   bf5a4:	e7ef      	b.n	bf586 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf5a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf5a6:	b538      	push	{r3, r4, r5, lr}
   bf5a8:	680b      	ldr	r3, [r1, #0]
   bf5aa:	6003      	str	r3, [r0, #0]
   bf5ac:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf5ae:	6843      	ldr	r3, [r0, #4]
   bf5b0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf5b2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf5b4:	d008      	beq.n	bf5c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf5b6:	b115      	cbz	r5, bf5be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf5b8:	686b      	ldr	r3, [r5, #4]
   bf5ba:	3301      	adds	r3, #1
   bf5bc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf5be:	6860      	ldr	r0, [r4, #4]
   bf5c0:	b108      	cbz	r0, bf5c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf5c2:	f7fe fa7c 	bl	bdabe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf5c6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf5c8:	bd38      	pop	{r3, r4, r5, pc}

000bf5ca <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf5ca:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf5cc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf5ce:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf5d2:	689b      	ldr	r3, [r3, #8]
   bf5d4:	2201      	movs	r2, #1
   bf5d6:	f10d 0107 	add.w	r1, sp, #7
   bf5da:	4798      	blx	r3
}
   bf5dc:	b003      	add	sp, #12
   bf5de:	f85d fb04 	ldr.w	pc, [sp], #4

000bf5e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf5e2:	460b      	mov	r3, r1
   bf5e4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf5e6:	2200      	movs	r2, #0
   bf5e8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf5ea:	e9c0 2200 	strd	r2, r2, [r0]
   bf5ee:	4604      	mov	r4, r0
        t_ = t;
   bf5f0:	6083      	str	r3, [r0, #8]
    if (t) {
   bf5f2:	b90b      	cbnz	r3, bf5f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf5f4:	4620      	mov	r0, r4
   bf5f6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf5f8:	f7ff ffd5 	bl	bf5a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf5fc:	e7fa      	b.n	bf5f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf5fe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf5fe:	6883      	ldr	r3, [r0, #8]
   bf600:	b1eb      	cbz	r3, bf63e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf602:	781a      	ldrb	r2, [r3, #0]
   bf604:	2a03      	cmp	r2, #3
   bf606:	d81a      	bhi.n	bf63e <_ZNK5spark9JSONValue4typeEv+0x40>
   bf608:	e8df f002 	tbb	[pc, r2]
   bf60c:	1b021704 	.word	0x1b021704
   bf610:	2005      	movs	r0, #5
   bf612:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf614:	6802      	ldr	r2, [r0, #0]
   bf616:	685b      	ldr	r3, [r3, #4]
   bf618:	6852      	ldr	r2, [r2, #4]
   bf61a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf61c:	282d      	cmp	r0, #45	; 0x2d
   bf61e:	d012      	beq.n	bf646 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf620:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf624:	2b09      	cmp	r3, #9
   bf626:	d90e      	bls.n	bf646 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf628:	2874      	cmp	r0, #116	; 0x74
   bf62a:	d00e      	beq.n	bf64a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf62c:	2866      	cmp	r0, #102	; 0x66
   bf62e:	d00c      	beq.n	bf64a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf630:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf634:	4258      	negs	r0, r3
   bf636:	4158      	adcs	r0, r3
   bf638:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf63a:	2006      	movs	r0, #6
   bf63c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf63e:	2000      	movs	r0, #0
   bf640:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf642:	2004      	movs	r0, #4
   bf644:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf646:	2003      	movs	r0, #3
   bf648:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf64a:	2002      	movs	r0, #2
}
   bf64c:	4770      	bx	lr

000bf64e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf64e:	b510      	push	{r4, lr}
   bf650:	4604      	mov	r4, r0
    switch (type()) {
   bf652:	f7ff ffd4 	bl	bf5fe <_ZNK5spark9JSONValue4typeEv>
   bf656:	2802      	cmp	r0, #2
   bf658:	d00e      	beq.n	bf678 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf65a:	1ec3      	subs	r3, r0, #3
   bf65c:	b2db      	uxtb	r3, r3
   bf65e:	2b01      	cmp	r3, #1
   bf660:	d814      	bhi.n	bf68c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf662:	6822      	ldr	r2, [r4, #0]
   bf664:	68a3      	ldr	r3, [r4, #8]
   bf666:	6850      	ldr	r0, [r2, #4]
   bf668:	685b      	ldr	r3, [r3, #4]
}
   bf66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf66e:	220a      	movs	r2, #10
   bf670:	2100      	movs	r1, #0
   bf672:	4418      	add	r0, r3
   bf674:	f005 b9e0 	b.w	c4a38 <strtol>
        const char* const s = d_->json + t_->start;
   bf678:	6822      	ldr	r2, [r4, #0]
   bf67a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf67c:	6852      	ldr	r2, [r2, #4]
   bf67e:	685b      	ldr	r3, [r3, #4]
   bf680:	5cd0      	ldrb	r0, [r2, r3]
   bf682:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf686:	4258      	negs	r0, r3
   bf688:	4158      	adcs	r0, r3
}
   bf68a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf68c:	2000      	movs	r0, #0
   bf68e:	e7fc      	b.n	bf68a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf690 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf690:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf692:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf694:	e9c0 3300 	strd	r3, r3, [r0]
   bf698:	4604      	mov	r4, r0
        n_(0) {
   bf69a:	480e      	ldr	r0, [pc, #56]	; (bf6d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf69c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf6a0:	b1a9      	cbz	r1, bf6ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf6a2:	780b      	ldrb	r3, [r1, #0]
   bf6a4:	2b03      	cmp	r3, #3
   bf6a6:	d006      	beq.n	bf6b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf6a8:	b98b      	cbnz	r3, bf6ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf6aa:	6813      	ldr	r3, [r2, #0]
   bf6ac:	6858      	ldr	r0, [r3, #4]
   bf6ae:	684b      	ldr	r3, [r1, #4]
   bf6b0:	5cc3      	ldrb	r3, [r0, r3]
   bf6b2:	2b6e      	cmp	r3, #110	; 0x6e
   bf6b4:	d007      	beq.n	bf6c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf6b6:	6813      	ldr	r3, [r2, #0]
   bf6b8:	684d      	ldr	r5, [r1, #4]
   bf6ba:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf6bc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf6be:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf6c0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf6c2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf6c4:	60e3      	str	r3, [r4, #12]
   bf6c6:	4611      	mov	r1, r2
   bf6c8:	4620      	mov	r0, r4
   bf6ca:	f7ff ff6c 	bl	bf5a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf6ce:	4620      	mov	r0, r4
   bf6d0:	bd38      	pop	{r3, r4, r5, pc}
   bf6d2:	bf00      	nop
   bf6d4:	000c7397 	.word	0x000c7397

000bf6d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf6d8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf6da:	2500      	movs	r5, #0
   bf6dc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf6de:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf6e2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf6e6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf6ea:	4604      	mov	r4, r0
   bf6ec:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf6ee:	b14b      	cbz	r3, bf704 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf6f0:	781a      	ldrb	r2, [r3, #0]
   bf6f2:	2a01      	cmp	r2, #1
   bf6f4:	d106      	bne.n	bf704 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf6f6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf6fa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf6fc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf6fe:	6143      	str	r3, [r0, #20]
   bf700:	f7ff ff51 	bl	bf5a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf704:	4620      	mov	r0, r4
   bf706:	bd38      	pop	{r3, r4, r5, pc}

000bf708 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf708:	b510      	push	{r4, lr}
    if (!n_) {
   bf70a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf70c:	4604      	mov	r4, r0
    if (!n_) {
   bf70e:	b163      	cbz	r3, bf72a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf710:	6880      	ldr	r0, [r0, #8]
   bf712:	60e0      	str	r0, [r4, #12]
    --n_;
   bf714:	3b01      	subs	r3, #1
    ++t_;
   bf716:	3010      	adds	r0, #16
   bf718:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf71a:	6120      	str	r0, [r4, #16]
    --n_;
   bf71c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf71e:	b113      	cbz	r3, bf726 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf720:	f7ff fef2 	bl	bf508 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf724:	60a0      	str	r0, [r4, #8]
    return true;
   bf726:	2001      	movs	r0, #1
   bf728:	e000      	b.n	bf72c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf72a:	4618      	mov	r0, r3
}
   bf72c:	bd10      	pop	{r4, pc}

000bf72e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf72e:	b510      	push	{r4, lr}
    write('}');
   bf730:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf732:	4604      	mov	r4, r0
    write('}');
   bf734:	f7ff ff49 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf738:	2301      	movs	r3, #1
   bf73a:	7123      	strb	r3, [r4, #4]
}
   bf73c:	4620      	mov	r0, r4
   bf73e:	bd10      	pop	{r4, pc}

000bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf740:	b508      	push	{r3, lr}
    switch (state_) {
   bf742:	7903      	ldrb	r3, [r0, #4]
   bf744:	2b01      	cmp	r3, #1
   bf746:	d002      	beq.n	bf74e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf748:	2b02      	cmp	r3, #2
   bf74a:	d004      	beq.n	bf756 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf74c:	bd08      	pop	{r3, pc}
        write(',');
   bf74e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf750:	f7ff ff3b 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
}
   bf754:	e7fa      	b.n	bf74c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf756:	213a      	movs	r1, #58	; 0x3a
   bf758:	e7fa      	b.n	bf750 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf75a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf75a:	b510      	push	{r4, lr}
   bf75c:	4604      	mov	r4, r0
    writeSeparator();
   bf75e:	f7ff ffef 	bl	bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf762:	4620      	mov	r0, r4
   bf764:	217b      	movs	r1, #123	; 0x7b
   bf766:	f7ff ff30 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf76a:	2300      	movs	r3, #0
   bf76c:	7123      	strb	r3, [r4, #4]
}
   bf76e:	4620      	mov	r0, r4
   bf770:	bd10      	pop	{r4, pc}
	...

000bf774 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf774:	b513      	push	{r0, r1, r4, lr}
   bf776:	4604      	mov	r4, r0
   bf778:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf77a:	f7ff ffe1 	bl	bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf77e:	6823      	ldr	r3, [r4, #0]
   bf780:	9a01      	ldr	r2, [sp, #4]
   bf782:	68db      	ldr	r3, [r3, #12]
   bf784:	4903      	ldr	r1, [pc, #12]	; (bf794 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf786:	4620      	mov	r0, r4
   bf788:	4798      	blx	r3
    state_ = NEXT;
   bf78a:	2301      	movs	r3, #1
}
   bf78c:	4620      	mov	r0, r4
    state_ = NEXT;
   bf78e:	7123      	strb	r3, [r4, #4]
}
   bf790:	b002      	add	sp, #8
   bf792:	bd10      	pop	{r4, pc}
   bf794:	000c5dc6 	.word	0x000c5dc6

000bf798 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf798:	b513      	push	{r0, r1, r4, lr}
   bf79a:	4604      	mov	r4, r0
   bf79c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf79e:	f7ff ffcf 	bl	bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf7a2:	6823      	ldr	r3, [r4, #0]
   bf7a4:	9a01      	ldr	r2, [sp, #4]
   bf7a6:	68db      	ldr	r3, [r3, #12]
   bf7a8:	4903      	ldr	r1, [pc, #12]	; (bf7b8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf7aa:	4620      	mov	r0, r4
   bf7ac:	4798      	blx	r3
    state_ = NEXT;
   bf7ae:	2301      	movs	r3, #1
}
   bf7b0:	4620      	mov	r0, r4
    state_ = NEXT;
   bf7b2:	7123      	strb	r3, [r4, #4]
}
   bf7b4:	b002      	add	sp, #8
   bf7b6:	bd10      	pop	{r4, pc}
   bf7b8:	000c7334 	.word	0x000c7334

000bf7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf7c0:	460d      	mov	r5, r1
    write('"');
   bf7c2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf7c4:	4690      	mov	r8, r2
   bf7c6:	4604      	mov	r4, r0
    write('"');
   bf7c8:	f7ff feff 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf7cc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf874 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf7d0:	44a8      	add	r8, r5
    const char *s = str;
   bf7d2:	462f      	mov	r7, r5
    while (s != end) {
   bf7d4:	4547      	cmp	r7, r8
   bf7d6:	46ba      	mov	sl, r7
   bf7d8:	d03d      	beq.n	bf856 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf7da:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf7de:	2e22      	cmp	r6, #34	; 0x22
   bf7e0:	d006      	beq.n	bf7f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf7e2:	2e5c      	cmp	r6, #92	; 0x5c
   bf7e4:	d004      	beq.n	bf7f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf7e6:	4630      	mov	r0, r6
   bf7e8:	f004 f932 	bl	c3a50 <isprint>
   bf7ec:	2800      	cmp	r0, #0
   bf7ee:	d1f1      	bne.n	bf7d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf7f0:	6823      	ldr	r3, [r4, #0]
   bf7f2:	ebaa 0205 	sub.w	r2, sl, r5
   bf7f6:	689b      	ldr	r3, [r3, #8]
   bf7f8:	4629      	mov	r1, r5
   bf7fa:	4620      	mov	r0, r4
   bf7fc:	4798      	blx	r3
            write('\\');
   bf7fe:	215c      	movs	r1, #92	; 0x5c
   bf800:	4620      	mov	r0, r4
   bf802:	f7ff fee2 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf806:	2e0d      	cmp	r6, #13
   bf808:	d80a      	bhi.n	bf820 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf80a:	2e07      	cmp	r6, #7
   bf80c:	d91c      	bls.n	bf848 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf80e:	f1a6 0308 	sub.w	r3, r6, #8
   bf812:	2b05      	cmp	r3, #5
   bf814:	d818      	bhi.n	bf848 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf816:	e8df f003 	tbb	[pc, r3]
   bf81a:	0f0d      	.short	0x0f0d
   bf81c:	15131711 	.word	0x15131711
   bf820:	2e22      	cmp	r6, #34	; 0x22
   bf822:	d001      	beq.n	bf828 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf824:	2e5c      	cmp	r6, #92	; 0x5c
   bf826:	d10f      	bne.n	bf848 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf828:	4631      	mov	r1, r6
                write('b');
   bf82a:	4620      	mov	r0, r4
   bf82c:	f7ff fecd 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf830:	463d      	mov	r5, r7
    while (s != end) {
   bf832:	e7cf      	b.n	bf7d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf834:	2162      	movs	r1, #98	; 0x62
   bf836:	e7f8      	b.n	bf82a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf838:	2174      	movs	r1, #116	; 0x74
   bf83a:	e7f6      	b.n	bf82a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf83c:	216e      	movs	r1, #110	; 0x6e
   bf83e:	e7f4      	b.n	bf82a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf840:	2166      	movs	r1, #102	; 0x66
   bf842:	e7f2      	b.n	bf82a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf844:	2172      	movs	r1, #114	; 0x72
   bf846:	e7f0      	b.n	bf82a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf848:	6823      	ldr	r3, [r4, #0]
   bf84a:	4632      	mov	r2, r6
   bf84c:	68db      	ldr	r3, [r3, #12]
   bf84e:	4649      	mov	r1, r9
   bf850:	4620      	mov	r0, r4
   bf852:	4798      	blx	r3
                break;
   bf854:	e7ec      	b.n	bf830 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf856:	42bd      	cmp	r5, r7
   bf858:	d005      	beq.n	bf866 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf85a:	6823      	ldr	r3, [r4, #0]
   bf85c:	1b7a      	subs	r2, r7, r5
   bf85e:	689b      	ldr	r3, [r3, #8]
   bf860:	4629      	mov	r1, r5
   bf862:	4620      	mov	r0, r4
   bf864:	4798      	blx	r3
    }
    write('"');
   bf866:	2122      	movs	r1, #34	; 0x22
   bf868:	4620      	mov	r0, r4
   bf86a:	f7ff feae 	bl	bf5ca <_ZN5spark10JSONWriter5writeEc>
}
   bf86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf872:	bf00      	nop
   bf874:	000c7337 	.word	0x000c7337

000bf878 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf878:	b513      	push	{r0, r1, r4, lr}
   bf87a:	4604      	mov	r4, r0
   bf87c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf880:	f7ff ff5e 	bl	bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf884:	4620      	mov	r0, r4
   bf886:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf88a:	f7ff ff97 	bl	bf7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf88e:	2302      	movs	r3, #2
}
   bf890:	4620      	mov	r0, r4
    state_ = VALUE;
   bf892:	7123      	strb	r3, [r4, #4]
}
   bf894:	b002      	add	sp, #8
   bf896:	bd10      	pop	{r4, pc}

000bf898 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf898:	b513      	push	{r0, r1, r4, lr}
   bf89a:	4604      	mov	r4, r0
   bf89c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf8a0:	f7ff ff4e 	bl	bf740 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf8a4:	4620      	mov	r0, r4
   bf8a6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf8aa:	f7ff ff87 	bl	bf7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf8ae:	2301      	movs	r3, #1
}
   bf8b0:	4620      	mov	r0, r4
    state_ = NEXT;
   bf8b2:	7123      	strb	r3, [r4, #4]
}
   bf8b4:	b002      	add	sp, #8
   bf8b6:	bd10      	pop	{r4, pc}

000bf8b8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bf8b8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bf8ba:	460b      	mov	r3, r1
    s->update(ticks);
   bf8bc:	6892      	ldr	r2, [r2, #8]
   bf8be:	4601      	mov	r1, r0
   bf8c0:	4618      	mov	r0, r3
   bf8c2:	4710      	bx	r2

000bf8c4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bf8c4:	b570      	push	{r4, r5, r6, lr}
   bf8c6:	4c0e      	ldr	r4, [pc, #56]	; (bf900 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bf8c8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bf8ca:	2500      	movs	r5, #0
   bf8cc:	241c      	movs	r4, #28
   bf8ce:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf8d2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bf8d6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bf8da:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf8dc:	f004 0403 	and.w	r4, r4, #3
   bf8e0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bf8e4:	b2e4      	uxtb	r4, r4
   bf8e6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bf8e8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bf8ea:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bf8ec:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bf8ee:	7c42      	ldrb	r2, [r0, #17]
   bf8f0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bf8f2:	bf0a      	itet	eq
   bf8f4:	4b03      	ldreq	r3, [pc, #12]	; (bf904 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bf8f6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bf8f8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bf8fc:	bd70      	pop	{r4, r5, r6, pc}
   bf8fe:	bf00      	nop
   bf900:	000c6210 	.word	0x000c6210
   bf904:	000bf8b9 	.word	0x000bf8b9

000bf908 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf908:	6880      	ldr	r0, [r0, #8]
   bf90a:	6803      	ldr	r3, [r0, #0]
   bf90c:	68db      	ldr	r3, [r3, #12]
   bf90e:	4718      	bx	r3

000bf910 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf910:	4770      	bx	lr

000bf912 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf912:	4608      	mov	r0, r1
   bf914:	b111      	cbz	r1, bf91c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf916:	680b      	ldr	r3, [r1, #0]
   bf918:	685b      	ldr	r3, [r3, #4]
   bf91a:	4718      	bx	r3
}
   bf91c:	4770      	bx	lr

000bf91e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf91e:	4770      	bx	lr

000bf920 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf920:	4770      	bx	lr

000bf922 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf922:	4770      	bx	lr

000bf924 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf924:	4770      	bx	lr

000bf926 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf926:	b538      	push	{r3, r4, r5, lr}
   bf928:	4604      	mov	r4, r0
   bf92a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf92c:	6800      	ldr	r0, [r0, #0]
   bf92e:	212e      	movs	r1, #46	; 0x2e
   bf930:	f004 f920 	bl	c3b74 <strchrnul>
    size = s - category;
   bf934:	6823      	ldr	r3, [r4, #0]
   bf936:	1ac3      	subs	r3, r0, r3
   bf938:	602b      	str	r3, [r5, #0]
    if (size) {
   bf93a:	b123      	cbz	r3, bf946 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf93c:	7803      	ldrb	r3, [r0, #0]
   bf93e:	b103      	cbz	r3, bf942 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf940:	3001      	adds	r0, #1
   bf942:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf944:	6020      	str	r0, [r4, #0]
}
   bf946:	4618      	mov	r0, r3
   bf948:	bd38      	pop	{r3, r4, r5, pc}

000bf94a <_ZN5spark16JSONStreamWriterD0Ev>:
   bf94a:	b510      	push	{r4, lr}
   bf94c:	210c      	movs	r1, #12
   bf94e:	4604      	mov	r4, r0
   bf950:	f7f4 fba7 	bl	b40a2 <_ZdlPvj>
   bf954:	4620      	mov	r0, r4
   bf956:	bd10      	pop	{r4, pc}

000bf958 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf958:	b510      	push	{r4, lr}
   bf95a:	2104      	movs	r1, #4
   bf95c:	4604      	mov	r4, r0
   bf95e:	f7f4 fba0 	bl	b40a2 <_ZdlPvj>
   bf962:	4620      	mov	r0, r4
   bf964:	bd10      	pop	{r4, pc}

000bf966 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf966:	b510      	push	{r4, lr}
   bf968:	2104      	movs	r1, #4
   bf96a:	4604      	mov	r4, r0
   bf96c:	f7f4 fb99 	bl	b40a2 <_ZdlPvj>
   bf970:	4620      	mov	r0, r4
   bf972:	bd10      	pop	{r4, pc}

000bf974 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf974:	f7fd bc68 	b.w	bd248 <os_mutex_recursive_lock>

000bf978 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf978:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf97a:	f004 f905 	bl	c3b88 <strcmp>
}
   bf97e:	fab0 f080 	clz	r0, r0
   bf982:	0940      	lsrs	r0, r0, #5
   bf984:	bd08      	pop	{r3, pc}

000bf986 <__tcf_1>:
   bf986:	4770      	bx	lr

000bf988 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf988:	b510      	push	{r4, lr}
   bf98a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf98c:	f001 fcb8 	bl	c1300 <_Z16_fetch_usbserialv>
   bf990:	4284      	cmp	r4, r0
   bf992:	d010      	beq.n	bf9b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf994:	f001 fe4c 	bl	c1630 <_Z22__fetch_global_Serial1v>
   bf998:	4284      	cmp	r4, r0
   bf99a:	d105      	bne.n	bf9a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf99c:	f001 fe48 	bl	c1630 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf9a4:	f001 bc47 	b.w	c1236 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf9a8:	b12c      	cbz	r4, bf9b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf9aa:	6823      	ldr	r3, [r4, #0]
   bf9ac:	4620      	mov	r0, r4
   bf9ae:	685b      	ldr	r3, [r3, #4]
}
   bf9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf9b4:	4718      	bx	r3
   bf9b6:	bd10      	pop	{r4, pc}

000bf9b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf9b8:	680b      	ldr	r3, [r1, #0]
   bf9ba:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf9bc:	684b      	ldr	r3, [r1, #4]
   bf9be:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf9c0:	b113      	cbz	r3, bf9c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf9c2:	685a      	ldr	r2, [r3, #4]
   bf9c4:	3201      	adds	r2, #1
   bf9c6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf9c8:	4770      	bx	lr

000bf9ca <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf9ca:	b513      	push	{r0, r1, r4, lr}
   bf9cc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf9ce:	4608      	mov	r0, r1
   bf9d0:	9101      	str	r1, [sp, #4]
   bf9d2:	f004 f908 	bl	c3be6 <strlen>
   bf9d6:	9901      	ldr	r1, [sp, #4]
   bf9d8:	4602      	mov	r2, r0
   bf9da:	4620      	mov	r0, r4
}
   bf9dc:	b002      	add	sp, #8
   bf9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf9e2:	f7ff bf59 	b.w	bf898 <_ZN5spark10JSONWriter5valueEPKcj>

000bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf9e6:	b513      	push	{r0, r1, r4, lr}
   bf9e8:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf9ea:	4608      	mov	r0, r1
   bf9ec:	9101      	str	r1, [sp, #4]
   bf9ee:	f004 f8fa 	bl	c3be6 <strlen>
   bf9f2:	6823      	ldr	r3, [r4, #0]
   bf9f4:	9901      	ldr	r1, [sp, #4]
   bf9f6:	68db      	ldr	r3, [r3, #12]
   bf9f8:	4602      	mov	r2, r0
   bf9fa:	4620      	mov	r0, r4
}
   bf9fc:	b002      	add	sp, #8
   bf9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bfa02:	4718      	bx	r3

000bfa04 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bfa04:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfa06:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bfa08:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfa0c:	68db      	ldr	r3, [r3, #12]
   bfa0e:	2201      	movs	r2, #1
   bfa10:	f10d 0107 	add.w	r1, sp, #7
   bfa14:	4798      	blx	r3
}
   bfa16:	b003      	add	sp, #12
   bfa18:	f85d fb04 	ldr.w	pc, [sp], #4

000bfa1c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfa1c:	b40e      	push	{r1, r2, r3}
   bfa1e:	b503      	push	{r0, r1, lr}
   bfa20:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bfa22:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfa24:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bfa28:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bfa2a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bfa2c:	f000 ffe9 	bl	c0a02 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bfa30:	b002      	add	sp, #8
   bfa32:	f85d eb04 	ldr.w	lr, [sp], #4
   bfa36:	b003      	add	sp, #12
   bfa38:	4770      	bx	lr

000bfa3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfa3a:	680a      	ldr	r2, [r1, #0]
   bfa3c:	6002      	str	r2, [r0, #0]
   bfa3e:	684a      	ldr	r2, [r1, #4]
   bfa40:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfa42:	2200      	movs	r2, #0
   bfa44:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfa48:	b510      	push	{r4, lr}
   bfa4a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfa4c:	688c      	ldr	r4, [r1, #8]
   bfa4e:	6084      	str	r4, [r0, #8]
   bfa50:	68cc      	ldr	r4, [r1, #12]
   bfa52:	60c4      	str	r4, [r0, #12]
   bfa54:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa56:	608a      	str	r2, [r1, #8]
   bfa58:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bfa5a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa5c:	610a      	str	r2, [r1, #16]
   bfa5e:	bd10      	pop	{r4, pc}

000bfa60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfa60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bfa64:	e9d0 8400 	ldrd	r8, r4, [r0]
   bfa68:	f04f 0a14 	mov.w	sl, #20
   bfa6c:	9300      	str	r3, [sp, #0]
   bfa6e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bfa72:	4b18      	ldr	r3, [pc, #96]	; (bfad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfa74:	10a4      	asrs	r4, r4, #2
   bfa76:	4617      	mov	r7, r2
   bfa78:	435c      	muls	r4, r3
   bfa7a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bfa7c:	2c00      	cmp	r4, #0
   bfa7e:	dd21      	ble.n	bfac4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bfa80:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bfa82:	fb0a f006 	mul.w	r0, sl, r6
   bfa86:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bfa8a:	463a      	mov	r2, r7
   bfa8c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bfa90:	5828      	ldr	r0, [r5, r0]
   bfa92:	9101      	str	r1, [sp, #4]
   bfa94:	455f      	cmp	r7, fp
   bfa96:	bf28      	it	cs
   bfa98:	465a      	movcs	r2, fp
   bfa9a:	f004 f8bf 	bl	c3c1c <strncmp>
                if (cmp == 0) {
   bfa9e:	2800      	cmp	r0, #0
   bfaa0:	9901      	ldr	r1, [sp, #4]
   bfaa2:	f04f 0301 	mov.w	r3, #1
   bfaa6:	d10b      	bne.n	bfac0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bfaa8:	455f      	cmp	r7, fp
   bfaaa:	d103      	bne.n	bfab4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bfaac:	9a00      	ldr	r2, [sp, #0]
   bfaae:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfab0:	4634      	mov	r4, r6
   bfab2:	e7e3      	b.n	bfa7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bfab4:	d9fc      	bls.n	bfab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bfab6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bfab8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bfabc:	3e01      	subs	r6, #1
   bfabe:	e7f7      	b.n	bfab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bfac0:	dbf9      	blt.n	bfab6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bfac2:	e7f5      	b.n	bfab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bfac4:	eba5 0508 	sub.w	r5, r5, r8
}
   bfac8:	4802      	ldr	r0, [pc, #8]	; (bfad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfaca:	10ad      	asrs	r5, r5, #2
   bfacc:	4368      	muls	r0, r5
   bface:	b003      	add	sp, #12
   bfad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfad4:	cccccccd 	.word	0xcccccccd

000bfad8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bfada:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bfadc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfade:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bfae0:	b303      	cbz	r3, bfb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bfae2:	b1f9      	cbz	r1, bfb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bfae4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bfae6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bfaea:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bfaec:	a903      	add	r1, sp, #12
   bfaee:	a801      	add	r0, sp, #4
   bfaf0:	f7ff ff19 	bl	bf926 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bfaf4:	4601      	mov	r1, r0
   bfaf6:	b1a8      	cbz	r0, bfb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bfaf8:	f10d 030b 	add.w	r3, sp, #11
   bfafc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bfafe:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bfb02:	4620      	mov	r0, r4
   bfb04:	f7ff ffac 	bl	bfa60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bfb08:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bfb0c:	b153      	cbz	r3, bfb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bfb0e:	6823      	ldr	r3, [r4, #0]
   bfb10:	2414      	movs	r4, #20
   bfb12:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bfb16:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bfb18:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bfb1c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bfb1e:	bfa8      	it	ge
   bfb20:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bfb22:	e7e3      	b.n	bfaec <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bfb24:	4628      	mov	r0, r5
   bfb26:	b004      	add	sp, #16
   bfb28:	bd70      	pop	{r4, r5, r6, pc}
	...

000bfb2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bfb2c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bfb2e:	4c09      	ldr	r4, [pc, #36]	; (bfb54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bfb30:	7823      	ldrb	r3, [r4, #0]
   bfb32:	f3bf 8f5b 	dmb	ish
   bfb36:	07db      	lsls	r3, r3, #31
   bfb38:	d409      	bmi.n	bfb4e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfb3a:	4620      	mov	r0, r4
   bfb3c:	f7f4 fac0 	bl	b40c0 <__cxa_guard_acquire>
   bfb40:	b128      	cbz	r0, bfb4e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfb42:	4620      	mov	r0, r4
   bfb44:	f7f4 fac1 	bl	b40ca <__cxa_guard_release>
   bfb48:	4803      	ldr	r0, [pc, #12]	; (bfb58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bfb4a:	f003 ff73 	bl	c3a34 <atexit>
}
   bfb4e:	4803      	ldr	r0, [pc, #12]	; (bfb5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bfb50:	bd10      	pop	{r4, pc}
   bfb52:	bf00      	nop
   bfb54:	2003e66c 	.word	0x2003e66c
   bfb58:	000bf91f 	.word	0x000bf91f
   bfb5c:	2003db90 	.word	0x2003db90

000bfb60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bfb60:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bfb62:	4c09      	ldr	r4, [pc, #36]	; (bfb88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bfb64:	7823      	ldrb	r3, [r4, #0]
   bfb66:	f3bf 8f5b 	dmb	ish
   bfb6a:	07db      	lsls	r3, r3, #31
   bfb6c:	d409      	bmi.n	bfb82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb6e:	4620      	mov	r0, r4
   bfb70:	f7f4 faa6 	bl	b40c0 <__cxa_guard_acquire>
   bfb74:	b128      	cbz	r0, bfb82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb76:	4620      	mov	r0, r4
   bfb78:	f7f4 faa7 	bl	b40ca <__cxa_guard_release>
   bfb7c:	4803      	ldr	r0, [pc, #12]	; (bfb8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bfb7e:	f003 ff59 	bl	c3a34 <atexit>
    return &factory;
}
   bfb82:	4803      	ldr	r0, [pc, #12]	; (bfb90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bfb84:	bd10      	pop	{r4, pc}
   bfb86:	bf00      	nop
   bfb88:	2003e670 	.word	0x2003e670
   bfb8c:	000bf987 	.word	0x000bf987
   bfb90:	2003db94 	.word	0x2003db94

000bfb94 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bfb94:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bfb96:	2500      	movs	r5, #0
   bfb98:	4604      	mov	r4, r0
   bfb9a:	e9c0 5500 	strd	r5, r5, [r0]
   bfb9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfba2:	6085      	str	r5, [r0, #8]
   bfba4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bfba6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bfbaa:	f7fd fb3d 	bl	bd228 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bfbae:	f7ff ffbd 	bl	bfb2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bfbb2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfbb4:	f7ff ffd4 	bl	bfb60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bfbb8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfbba:	6220      	str	r0, [r4, #32]
}
   bfbbc:	4620      	mov	r0, r4
   bfbbe:	bd38      	pop	{r3, r4, r5, pc}

000bfbc0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bfbc0:	b510      	push	{r4, lr}
    static LogManager mgr;
   bfbc2:	4c0a      	ldr	r4, [pc, #40]	; (bfbec <_ZN5spark10LogManager8instanceEv+0x2c>)
   bfbc4:	7823      	ldrb	r3, [r4, #0]
   bfbc6:	f3bf 8f5b 	dmb	ish
   bfbca:	07db      	lsls	r3, r3, #31
   bfbcc:	d40c      	bmi.n	bfbe8 <_ZN5spark10LogManager8instanceEv+0x28>
   bfbce:	4620      	mov	r0, r4
   bfbd0:	f7f4 fa76 	bl	b40c0 <__cxa_guard_acquire>
   bfbd4:	b140      	cbz	r0, bfbe8 <_ZN5spark10LogManager8instanceEv+0x28>
   bfbd6:	4806      	ldr	r0, [pc, #24]	; (bfbf0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfbd8:	f7ff ffdc 	bl	bfb94 <_ZN5spark10LogManagerC1Ev>
   bfbdc:	4620      	mov	r0, r4
   bfbde:	f7f4 fa74 	bl	b40ca <__cxa_guard_release>
   bfbe2:	4804      	ldr	r0, [pc, #16]	; (bfbf4 <_ZN5spark10LogManager8instanceEv+0x34>)
   bfbe4:	f003 ff26 	bl	c3a34 <atexit>
    return &mgr;
}
   bfbe8:	4801      	ldr	r0, [pc, #4]	; (bfbf0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfbea:	bd10      	pop	{r4, pc}
   bfbec:	2003e668 	.word	0x2003e668
   bfbf0:	2003e678 	.word	0x2003e678
   bfbf4:	000c0115 	.word	0x000c0115

000bfbf8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfbf8:	4a02      	ldr	r2, [pc, #8]	; (bfc04 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfbfa:	4903      	ldr	r1, [pc, #12]	; (bfc08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfbfc:	4803      	ldr	r0, [pc, #12]	; (bfc0c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfbfe:	2300      	movs	r3, #0
   bfc00:	f7fd bd3a 	b.w	bd678 <log_set_callbacks>
   bfc04:	000bfef9 	.word	0x000bfef9
   bfc08:	000bfe85 	.word	0x000bfe85
   bfc0c:	000bfe05 	.word	0x000bfe05

000bfc10 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bfc10:	2300      	movs	r3, #0
   bfc12:	461a      	mov	r2, r3
   bfc14:	4619      	mov	r1, r3
   bfc16:	4618      	mov	r0, r3
   bfc18:	f7fd bd2e 	b.w	bd678 <log_set_callbacks>

000bfc1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bfc1e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfc20:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bfc22:	4668      	mov	r0, sp
   bfc24:	f7ff fec8 	bl	bf9b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfc28:	466a      	mov	r2, sp
   bfc2a:	4629      	mov	r1, r5
   bfc2c:	4620      	mov	r0, r4
   bfc2e:	f7ff fd53 	bl	bf6d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfc32:	a801      	add	r0, sp, #4
   bfc34:	f7f5 fcaa 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc38:	4620      	mov	r0, r4
   bfc3a:	b003      	add	sp, #12
   bfc3c:	bd30      	pop	{r4, r5, pc}

000bfc3e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfc3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfc40:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfc42:	4604      	mov	r4, r0
   bfc44:	4668      	mov	r0, sp
   bfc46:	f7ff feb7 	bl	bf9b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfc4a:	466a      	mov	r2, sp
   bfc4c:	4629      	mov	r1, r5
   bfc4e:	4620      	mov	r0, r4
   bfc50:	f7ff fd1e 	bl	bf690 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc54:	a801      	add	r0, sp, #4
   bfc56:	f7f5 fc99 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc5a:	4620      	mov	r0, r4
   bfc5c:	b003      	add	sp, #12
   bfc5e:	bd30      	pop	{r4, r5, pc}

000bfc60 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfc62:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc64:	4604      	mov	r4, r0
   bfc66:	4668      	mov	r0, sp
   bfc68:	f7ff fea6 	bl	bf9b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfc6c:	466a      	mov	r2, sp
   bfc6e:	4629      	mov	r1, r5
   bfc70:	4620      	mov	r0, r4
   bfc72:	f7ff fcb6 	bl	bf5e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc76:	a801      	add	r0, sp, #4
   bfc78:	f7f5 fc88 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc7c:	4620      	mov	r0, r4
   bfc7e:	b003      	add	sp, #12
   bfc80:	bd30      	pop	{r4, r5, pc}
	...

000bfc84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfc84:	b570      	push	{r4, r5, r6, lr}
   bfc86:	b08a      	sub	sp, #40	; 0x28
   bfc88:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfc8a:	4601      	mov	r1, r0
   bfc8c:	a804      	add	r0, sp, #16
   bfc8e:	f7ff ffc5 	bl	bfc1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfc92:	4e14      	ldr	r6, [pc, #80]	; (bfce4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfc94:	a804      	add	r0, sp, #16
   bfc96:	f7ff fd37 	bl	bf708 <_ZN5spark18JSONObjectIterator4nextEv>
   bfc9a:	b1e8      	cbz	r0, bfcd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfc9c:	a904      	add	r1, sp, #16
   bfc9e:	4668      	mov	r0, sp
   bfca0:	f7ff ffcd 	bl	bfc3e <_ZNK5spark18JSONObjectIterator4nameEv>
   bfca4:	9802      	ldr	r0, [sp, #8]
   bfca6:	4631      	mov	r1, r6
   bfca8:	f7ff fe66 	bl	bf978 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfcac:	4604      	mov	r4, r0
   bfcae:	b110      	cbz	r0, bfcb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfcb0:	1e2c      	subs	r4, r5, #0
   bfcb2:	bf18      	it	ne
   bfcb4:	2401      	movne	r4, #1
   bfcb6:	a801      	add	r0, sp, #4
   bfcb8:	f7f5 fc68 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfcbc:	2c00      	cmp	r4, #0
   bfcbe:	d0e9      	beq.n	bfc94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfcc0:	a904      	add	r1, sp, #16
   bfcc2:	4668      	mov	r0, sp
   bfcc4:	f7ff ffcc 	bl	bfc60 <_ZNK5spark18JSONObjectIterator5valueEv>
   bfcc8:	4668      	mov	r0, sp
   bfcca:	f7ff fcc0 	bl	bf64e <_ZNK5spark9JSONValue5toIntEv>
   bfcce:	6028      	str	r0, [r5, #0]
   bfcd0:	a801      	add	r0, sp, #4
   bfcd2:	f7f5 fc5b 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfcd6:	e7dd      	b.n	bfc94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfcd8:	a805      	add	r0, sp, #20
   bfcda:	f7f5 fc57 	bl	b558c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfcde:	b00a      	add	sp, #40	; 0x28
   bfce0:	bd70      	pop	{r4, r5, r6, pc}
   bfce2:	bf00      	nop
   bfce4:	000c733d 	.word	0x000c733d

000bfce8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfcea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfcec:	4620      	mov	r0, r4
   bfcee:	4913      	ldr	r1, [pc, #76]	; (bfd3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfcf0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfcf2:	f003 ff49 	bl	c3b88 <strcmp>
   bfcf6:	b950      	cbnz	r0, bfd0e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfcf8:	f001 fb02 	bl	c1300 <_Z16_fetch_usbserialv>
   bfcfc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfd00:	f001 faee 	bl	c12e0 <_ZN9USBSerial5beginEl>
}
   bfd04:	b003      	add	sp, #12
   bfd06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfd0a:	f001 baf9 	b.w	c1300 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfd0e:	490c      	ldr	r1, [pc, #48]	; (bfd40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfd10:	4620      	mov	r0, r4
   bfd12:	f003 ff39 	bl	c3b88 <strcmp>
   bfd16:	b978      	cbnz	r0, bfd38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfd18:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfd1c:	a901      	add	r1, sp, #4
   bfd1e:	4628      	mov	r0, r5
        int baud = 9600;
   bfd20:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfd22:	f7ff ffaf 	bl	bfc84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfd26:	f001 fc83 	bl	c1630 <_Z22__fetch_global_Serial1v>
   bfd2a:	9901      	ldr	r1, [sp, #4]
   bfd2c:	f001 fa80 	bl	c1230 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfd30:	f001 fc7e 	bl	c1630 <_Z22__fetch_global_Serial1v>
}
   bfd34:	b003      	add	sp, #12
   bfd36:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfd38:	2000      	movs	r0, #0
   bfd3a:	e7fb      	b.n	bfd34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfd3c:	000c7342 	.word	0x000c7342
   bfd40:	000c7349 	.word	0x000c7349

000bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfd46:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfd4a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd4c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfd4e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfd52:	42ae      	cmp	r6, r5
   bfd54:	d005      	beq.n	bfd62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfd56:	f105 0008 	add.w	r0, r5, #8
   bfd5a:	f7ff fff3 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd5e:	3514      	adds	r5, #20
   bfd60:	e7f7      	b.n	bfd52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfd62:	6820      	ldr	r0, [r4, #0]
   bfd64:	f7fd fd7e 	bl	bd864 <free>
}
   bfd68:	4620      	mov	r0, r4
   bfd6a:	bd70      	pop	{r4, r5, r6, pc}

000bfd6c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfd6c:	b510      	push	{r4, lr}
   bfd6e:	4604      	mov	r4, r0
   bfd70:	300c      	adds	r0, #12
   bfd72:	f7ff ffe7 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd76:	4620      	mov	r0, r4
   bfd78:	f7fe f9a9 	bl	be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfd7c:	4620      	mov	r0, r4
   bfd7e:	bd10      	pop	{r4, pc}

000bfd80 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfd80:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfd82:	4b04      	ldr	r3, [pc, #16]	; (bfd94 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfd84:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfd86:	f840 3b04 	str.w	r3, [r0], #4
   bfd8a:	f7ff ffef 	bl	bfd6c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfd8e:	4620      	mov	r0, r4
   bfd90:	bd10      	pop	{r4, pc}
   bfd92:	bf00      	nop
   bfd94:	000c61f8 	.word	0x000c61f8

000bfd98 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfd98:	b510      	push	{r4, lr}
   bfd9a:	4604      	mov	r4, r0
   bfd9c:	f7ff fff0 	bl	bfd80 <_ZN5spark16StreamLogHandlerD1Ev>
   bfda0:	4620      	mov	r0, r4
   bfda2:	2124      	movs	r1, #36	; 0x24
   bfda4:	f7f4 f97d 	bl	b40a2 <_ZdlPvj>
   bfda8:	4620      	mov	r0, r4
   bfdaa:	bd10      	pop	{r4, pc}

000bfdac <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfdac:	b510      	push	{r4, lr}
   bfdae:	4b03      	ldr	r3, [pc, #12]	; (bfdbc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfdb0:	6003      	str	r3, [r0, #0]
   bfdb2:	4604      	mov	r4, r0
   bfdb4:	f7ff ffe4 	bl	bfd80 <_ZN5spark16StreamLogHandlerD1Ev>
   bfdb8:	4620      	mov	r0, r4
   bfdba:	bd10      	pop	{r4, pc}
   bfdbc:	000c73e4 	.word	0x000c73e4

000bfdc0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfdc0:	b510      	push	{r4, lr}
   bfdc2:	4604      	mov	r4, r0
   bfdc4:	f7ff fff2 	bl	bfdac <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfdc8:	4620      	mov	r0, r4
   bfdca:	2124      	movs	r1, #36	; 0x24
   bfdcc:	f7f4 f969 	bl	b40a2 <_ZdlPvj>
   bfdd0:	4620      	mov	r0, r4
   bfdd2:	bd10      	pop	{r4, pc}

000bfdd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfdd4:	2200      	movs	r2, #0
   bfdd6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfdda:	b510      	push	{r4, lr}
        capacity_(0) {
   bfddc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfdde:	680c      	ldr	r4, [r1, #0]
   bfde0:	6004      	str	r4, [r0, #0]
   bfde2:	684c      	ldr	r4, [r1, #4]
   bfde4:	6044      	str	r4, [r0, #4]
   bfde6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfde8:	600a      	str	r2, [r1, #0]
   bfdea:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfdec:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdee:	608a      	str	r2, [r1, #8]
}
   bfdf0:	bd10      	pop	{r4, pc}

000bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfdf2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfdf4:	6803      	ldr	r3, [r0, #0]
   bfdf6:	4604      	mov	r4, r0
   bfdf8:	6818      	ldr	r0, [r3, #0]
   bfdfa:	f7fd fa2d 	bl	bd258 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfdfe:	4620      	mov	r0, r4
   bfe00:	bd10      	pop	{r4, pc}
	...

000bfe04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfe08:	b087      	sub	sp, #28
   bfe0a:	4680      	mov	r8, r0
   bfe0c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfe0e:	4b1c      	ldr	r3, [pc, #112]	; (bfe80 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfe10:	685b      	ldr	r3, [r3, #4]
   bfe12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfe16:	4689      	mov	r9, r1
   bfe18:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfe1a:	b96b      	cbnz	r3, bfe38 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfe1c:	f7ff fed0 	bl	bfbc0 <_ZN5spark10LogManager8instanceEv>
   bfe20:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfe22:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfe26:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe28:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfe2a:	f7ff fda3 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfe2e:	7b23      	ldrb	r3, [r4, #12]
   bfe30:	b12b      	cbz	r3, bfe3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfe32:	a805      	add	r0, sp, #20
   bfe34:	f7ff ffdd 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfe38:	b007      	add	sp, #28
   bfe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfe3e:	2301      	movs	r3, #1
   bfe40:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfe42:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfe46:	fa5f f989 	uxtb.w	r9, r9
   bfe4a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfe4e:	45aa      	cmp	sl, r5
   bfe50:	d012      	beq.n	bfe78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfe52:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfe56:	4631      	mov	r1, r6
   bfe58:	1d38      	adds	r0, r7, #4
   bfe5a:	f7ff fe3d 	bl	bfad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfe5e:	4581      	cmp	r9, r0
   bfe60:	d3f5      	bcc.n	bfe4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfe62:	683b      	ldr	r3, [r7, #0]
   bfe64:	9a03      	ldr	r2, [sp, #12]
   bfe66:	9200      	str	r2, [sp, #0]
   bfe68:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfe6c:	464a      	mov	r2, r9
   bfe6e:	4633      	mov	r3, r6
   bfe70:	4641      	mov	r1, r8
   bfe72:	4638      	mov	r0, r7
   bfe74:	47d8      	blx	fp
   bfe76:	e7ea      	b.n	bfe4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfe78:	2300      	movs	r3, #0
   bfe7a:	7323      	strb	r3, [r4, #12]
   bfe7c:	e7d9      	b.n	bfe32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfe7e:	bf00      	nop
   bfe80:	e000ed00 	.word	0xe000ed00

000bfe84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfe84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfe88:	469b      	mov	fp, r3
   bfe8a:	4b1a      	ldr	r3, [pc, #104]	; (bfef4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfe8c:	685b      	ldr	r3, [r3, #4]
   bfe8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfe92:	4680      	mov	r8, r0
   bfe94:	4689      	mov	r9, r1
   bfe96:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfe98:	b96b      	cbnz	r3, bfeb6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfe9a:	f7ff fe91 	bl	bfbc0 <_ZN5spark10LogManager8instanceEv>
   bfe9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfea0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfea4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfea6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfea8:	f7ff fd64 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfeac:	7b23      	ldrb	r3, [r4, #12]
   bfeae:	b12b      	cbz	r3, bfebc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfeb0:	a801      	add	r0, sp, #4
   bfeb2:	f7ff ff9e 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfeb6:	b003      	add	sp, #12
   bfeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfebc:	2301      	movs	r3, #1
   bfebe:	7323      	strb	r3, [r4, #12]
   bfec0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfec4:	b2f6      	uxtb	r6, r6
   bfec6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfeca:	4555      	cmp	r5, sl
   bfecc:	d00e      	beq.n	bfeec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfece:	f855 7b04 	ldr.w	r7, [r5], #4
   bfed2:	4659      	mov	r1, fp
   bfed4:	1d38      	adds	r0, r7, #4
   bfed6:	f7ff fdff 	bl	bfad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfeda:	4286      	cmp	r6, r0
   bfedc:	d3f5      	bcc.n	bfeca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfede:	683b      	ldr	r3, [r7, #0]
   bfee0:	464a      	mov	r2, r9
   bfee2:	68db      	ldr	r3, [r3, #12]
   bfee4:	4641      	mov	r1, r8
   bfee6:	4638      	mov	r0, r7
   bfee8:	4798      	blx	r3
   bfeea:	e7ee      	b.n	bfeca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfeec:	2300      	movs	r3, #0
   bfeee:	7323      	strb	r3, [r4, #12]
   bfef0:	e7de      	b.n	bfeb0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfef2:	bf00      	nop
   bfef4:	e000ed00 	.word	0xe000ed00

000bfef8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfefc:	4b16      	ldr	r3, [pc, #88]	; (bff58 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfefe:	685b      	ldr	r3, [r3, #4]
   bff00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bff04:	4605      	mov	r5, r0
   bff06:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bff08:	bb1b      	cbnz	r3, bff52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bff0a:	f7ff fe59 	bl	bfbc0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bff0e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bff12:	4604      	mov	r4, r0
   bff14:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bff16:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bff18:	f7ff fd2c 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
   bff1c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bff20:	2446      	movs	r4, #70	; 0x46
   bff22:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bff26:	45b0      	cmp	r8, r6
   bff28:	d109      	bne.n	bff3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bff2a:	a801      	add	r0, sp, #4
   bff2c:	f7ff ff61 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bff30:	42a5      	cmp	r5, r4
   bff32:	bfb4      	ite	lt
   bff34:	2000      	movlt	r0, #0
   bff36:	2001      	movge	r0, #1
}
   bff38:	b002      	add	sp, #8
   bff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bff3e:	f856 0b04 	ldr.w	r0, [r6], #4
   bff42:	4639      	mov	r1, r7
   bff44:	3004      	adds	r0, #4
   bff46:	f7ff fdc7 	bl	bfad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bff4a:	4284      	cmp	r4, r0
   bff4c:	bfa8      	it	ge
   bff4e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bff50:	e7e9      	b.n	bff26 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bff52:	2000      	movs	r0, #0
   bff54:	e7f0      	b.n	bff38 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bff56:	bf00      	nop
   bff58:	e000ed00 	.word	0xe000ed00

000bff5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff5e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bff62:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff64:	4604      	mov	r4, r0
   bff66:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff68:	db0d      	blt.n	bff86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bff6a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bff6c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bff6e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bff70:	dd04      	ble.n	bff7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bff72:	00b9      	lsls	r1, r7, #2
   bff74:	f7fd fc7e 	bl	bd874 <realloc>
            if (!d) {
   bff78:	b918      	cbnz	r0, bff82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bff7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bff7c:	f7fd fc72 	bl	bd864 <free>
        T* d = nullptr;
   bff80:	2000      	movs	r0, #0
        data_ = d;
   bff82:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bff84:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bff86:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bff88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bff8a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bff8e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bff90:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bff94:	1d08      	adds	r0, r1, #4
   bff96:	f003 fd81 	bl	c3a9c <memmove>
    new(p) T(std::move(value));
   bff9a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bff9e:	6863      	ldr	r3, [r4, #4]
   bffa0:	3301      	adds	r3, #1
   bffa2:	6063      	str	r3, [r4, #4]
    return true;
   bffa4:	2001      	movs	r0, #1
   bffa6:	e7e8      	b.n	bff7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bffa8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bffa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bffaa:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bffae:	4604      	mov	r4, r0
   bffb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bffb2:	9301      	str	r3, [sp, #4]
   bffb4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bffb6:	f7ff fcdd 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bffba:	e9d4 3200 	ldrd	r3, r2, [r4]
   bffbe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bffc2:	4293      	cmp	r3, r2
   bffc4:	4619      	mov	r1, r3
   bffc6:	d00b      	beq.n	bffe0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bffc8:	6809      	ldr	r1, [r1, #0]
   bffca:	42a9      	cmp	r1, r5
   bffcc:	f103 0304 	add.w	r3, r3, #4
   bffd0:	d1f7      	bne.n	bffc2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bffd2:	a801      	add	r0, sp, #4
   bffd4:	f7ff ff0d 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bffd8:	2500      	movs	r5, #0
}
   bffda:	4628      	mov	r0, r5
   bffdc:	b003      	add	sp, #12
   bffde:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bffe0:	4629      	mov	r1, r5
   bffe2:	4620      	mov	r0, r4
   bffe4:	f7ff ffba 	bl	bff5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bffe8:	4605      	mov	r5, r0
   bffea:	2800      	cmp	r0, #0
   bffec:	d0f1      	beq.n	bffd2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bffee:	6863      	ldr	r3, [r4, #4]
   bfff0:	2b01      	cmp	r3, #1
   bfff2:	d101      	bne.n	bfff8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bfff4:	f7ff fe00 	bl	bfbf8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfff8:	a801      	add	r0, sp, #4
   bfffa:	f7ff fefa 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfffe:	e7ec      	b.n	bffda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0000 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0000:	b570      	push	{r4, r5, r6, lr}
   c0002:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0004:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0008:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c000a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c000e:	4282      	cmp	r2, r0
   c0010:	d00f      	beq.n	c0032 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0012:	4601      	mov	r1, r0
            if (*p == value) {
   c0014:	681d      	ldr	r5, [r3, #0]
   c0016:	f851 6b04 	ldr.w	r6, [r1], #4
   c001a:	42ae      	cmp	r6, r5
   c001c:	d107      	bne.n	c002e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c001e:	1a52      	subs	r2, r2, r1
   c0020:	f003 fd3c 	bl	c3a9c <memmove>
    --size_;
   c0024:	6863      	ldr	r3, [r4, #4]
   c0026:	3b01      	subs	r3, #1
   c0028:	6063      	str	r3, [r4, #4]
    return true;
   c002a:	2001      	movs	r0, #1
}
   c002c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c002e:	4608      	mov	r0, r1
   c0030:	e7ed      	b.n	c000e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0032:	2000      	movs	r0, #0
   c0034:	e7fa      	b.n	c002c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0036 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0036:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0038:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c003c:	4604      	mov	r4, r0
   c003e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0040:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0042:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0044:	f7ff fc96 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0048:	a901      	add	r1, sp, #4
   c004a:	4620      	mov	r0, r4
   c004c:	f7ff ffd8 	bl	c0000 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0050:	b118      	cbz	r0, c005a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0052:	6863      	ldr	r3, [r4, #4]
   c0054:	b90b      	cbnz	r3, c005a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0056:	f7ff fddb 	bl	bfc10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c005a:	a803      	add	r0, sp, #12
   c005c:	f7ff fec9 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0060:	b004      	add	sp, #16
   c0062:	bd10      	pop	{r4, pc}

000c0064 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0064:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0066:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c006a:	2318      	movs	r3, #24
   c006c:	4604      	mov	r4, r0
   c006e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0072:	42ae      	cmp	r6, r5
   c0074:	d015      	beq.n	c00a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0076:	f105 0110 	add.w	r1, r5, #16
   c007a:	4620      	mov	r0, r4
   c007c:	f7ff ffc0 	bl	c0000 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0080:	6863      	ldr	r3, [r4, #4]
   c0082:	b90b      	cbnz	r3, c0088 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0084:	f7ff fdc4 	bl	bfc10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0088:	69e0      	ldr	r0, [r4, #28]
   c008a:	6929      	ldr	r1, [r5, #16]
   c008c:	6803      	ldr	r3, [r0, #0]
   c008e:	68db      	ldr	r3, [r3, #12]
   c0090:	4798      	blx	r3
        if (h.stream) {
   c0092:	6969      	ldr	r1, [r5, #20]
   c0094:	b119      	cbz	r1, c009e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0096:	6a20      	ldr	r0, [r4, #32]
   c0098:	6803      	ldr	r3, [r0, #0]
   c009a:	68db      	ldr	r3, [r3, #12]
   c009c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c009e:	3518      	adds	r5, #24
   c00a0:	e7e7      	b.n	c0072 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c00a2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c00a6:	2618      	movs	r6, #24
   c00a8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c00ac:	42ae      	cmp	r6, r5
   c00ae:	d004      	beq.n	c00ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c00b0:	4628      	mov	r0, r5
   c00b2:	f000 fea9 	bl	c0e08 <_ZN6StringD1Ev>
   c00b6:	3518      	adds	r5, #24
   c00b8:	e7f8      	b.n	c00ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c00ba:	2300      	movs	r3, #0
   c00bc:	6163      	str	r3, [r4, #20]
}
   c00be:	bd70      	pop	{r4, r5, r6, pc}

000c00c0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c00c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c00c2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c00c4:	f7ff fda4 	bl	bfc10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c00c8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c00cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c00ce:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c00d0:	f7ff fc50 	bl	bf974 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c00d4:	4620      	mov	r0, r4
   c00d6:	f7ff ffc5 	bl	c0064 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c00da:	a801      	add	r0, sp, #4
   c00dc:	f7ff fe89 	bl	bfdf2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c00e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c00e2:	b108      	cbz	r0, c00e8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c00e4:	f7fd f8a8 	bl	bd238 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c00e8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c00ec:	2618      	movs	r6, #24
   c00ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c00f2:	42ae      	cmp	r6, r5
   c00f4:	d004      	beq.n	c0100 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c00f6:	4628      	mov	r0, r5
   c00f8:	f000 fe86 	bl	c0e08 <_ZN6StringD1Ev>
   c00fc:	3518      	adds	r5, #24
   c00fe:	e7f8      	b.n	c00f2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0100:	6920      	ldr	r0, [r4, #16]
   c0102:	f7fd fbaf 	bl	bd864 <free>
   c0106:	6820      	ldr	r0, [r4, #0]
   c0108:	f7fd fbac 	bl	bd864 <free>
}
   c010c:	4620      	mov	r0, r4
   c010e:	b002      	add	sp, #8
   c0110:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0114 <__tcf_2>:
    static LogManager mgr;
   c0114:	4801      	ldr	r0, [pc, #4]	; (c011c <__tcf_2+0x8>)
   c0116:	f7ff bfd3 	b.w	c00c0 <_ZN5spark10LogManagerD1Ev>
   c011a:	bf00      	nop
   c011c:	2003e678 	.word	0x2003e678

000c0120 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0120:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0124:	4604      	mov	r4, r0
   c0126:	460d      	mov	r5, r1
   c0128:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c012a:	d915      	bls.n	c0158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c012c:	4290      	cmp	r0, r2
   c012e:	d214      	bcs.n	c015a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0130:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0134:	1a75      	subs	r5, r6, r1
   c0136:	f1a1 0714 	sub.w	r7, r1, #20
   c013a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c013c:	42b7      	cmp	r7, r6
   c013e:	d01a      	beq.n	c0176 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0140:	b11c      	cbz	r4, c014a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0142:	4631      	mov	r1, r6
   c0144:	4620      	mov	r0, r4
   c0146:	f7ff fc78 	bl	bfa3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c014a:	f106 0008 	add.w	r0, r6, #8
   c014e:	f7ff fdf9 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0152:	3e14      	subs	r6, #20
   c0154:	3c14      	subs	r4, #20
   c0156:	e7f1      	b.n	c013c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0158:	d00d      	beq.n	c0176 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c015a:	42b5      	cmp	r5, r6
   c015c:	d00b      	beq.n	c0176 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c015e:	b11c      	cbz	r4, c0168 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0160:	4629      	mov	r1, r5
   c0162:	4620      	mov	r0, r4
   c0164:	f7ff fc69 	bl	bfa3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0168:	f105 0008 	add.w	r0, r5, #8
   c016c:	f7ff fdea 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0170:	3514      	adds	r5, #20
   c0172:	3414      	adds	r4, #20
   c0174:	e7f1      	b.n	c015a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0178 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0178:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c017a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c017c:	4604      	mov	r4, r0
   c017e:	460d      	mov	r5, r1
   c0180:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0182:	d914      	bls.n	c01ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0184:	4290      	cmp	r0, r2
   c0186:	d213      	bcs.n	c01b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0188:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c018c:	1a75      	subs	r5, r6, r1
   c018e:	f1a1 0710 	sub.w	r7, r1, #16
   c0192:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0194:	42b7      	cmp	r7, r6
   c0196:	d018      	beq.n	c01ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0198:	b11c      	cbz	r4, c01a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c019a:	4631      	mov	r1, r6
   c019c:	4620      	mov	r0, r4
   c019e:	f000 feaf 	bl	c0f00 <_ZN6StringC1EOS_>
                end->~T();
   c01a2:	4630      	mov	r0, r6
   c01a4:	f000 fe30 	bl	c0e08 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c01a8:	3e10      	subs	r6, #16
   c01aa:	3c10      	subs	r4, #16
   c01ac:	e7f2      	b.n	c0194 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c01ae:	d00c      	beq.n	c01ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c01b0:	42b5      	cmp	r5, r6
   c01b2:	d00a      	beq.n	c01ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c01b4:	b11c      	cbz	r4, c01be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c01b6:	4629      	mov	r1, r5
   c01b8:	4620      	mov	r0, r4
   c01ba:	f000 fea1 	bl	c0f00 <_ZN6StringC1EOS_>
                p->~T();
   c01be:	4628      	mov	r0, r5
   c01c0:	f000 fe22 	bl	c0e08 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c01c4:	3510      	adds	r5, #16
   c01c6:	3410      	adds	r4, #16
   c01c8:	e7f2      	b.n	c01b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c01ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c01cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c01cc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c01ce:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c01d0:	4605      	mov	r5, r0
        if (n > 0) {
   c01d2:	dd11      	ble.n	c01f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c01d4:	0130      	lsls	r0, r6, #4
   c01d6:	f7fd fb3d 	bl	bd854 <malloc>
            if (!d) {
   c01da:	4604      	mov	r4, r0
   c01dc:	b158      	cbz	r0, c01f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c01de:	e9d5 1200 	ldrd	r1, r2, [r5]
   c01e2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c01e6:	f7ff ffc7 	bl	c0178 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c01ea:	6828      	ldr	r0, [r5, #0]
   c01ec:	f7fd fb3a 	bl	bd864 <free>
        data_ = d;
   c01f0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c01f2:	60ae      	str	r6, [r5, #8]
        return true;
   c01f4:	2001      	movs	r0, #1
    }
   c01f6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c01f8:	2400      	movs	r4, #0
   c01fa:	e7f6      	b.n	c01ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c01fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c01fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0200:	4690      	mov	r8, r2
   c0202:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0204:	2300      	movs	r3, #0
   c0206:	9103      	str	r1, [sp, #12]
    return size_;
   c0208:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c020c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c020e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0210:	4299      	cmp	r1, r3
        capacity_(0) {
   c0212:	e9c0 3300 	strd	r3, r3, [r0]
   c0216:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c021a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c021e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0222:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0224:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0226:	dc23      	bgt.n	c0270 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0228:	e9d8 5700 	ldrd	r5, r7, [r8]
   c022c:	2314      	movs	r3, #20
   c022e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0232:	42af      	cmp	r7, r5
   c0234:	d03b      	beq.n	c02ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0236:	4629      	mov	r1, r5
   c0238:	a80b      	add	r0, sp, #44	; 0x2c
   c023a:	f000 fe61 	bl	c0f00 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c023e:	a90b      	add	r1, sp, #44	; 0x2c
   c0240:	a80f      	add	r0, sp, #60	; 0x3c
   c0242:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0244:	f000 fe5c 	bl	c0f00 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0248:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c024c:	4299      	cmp	r1, r3
   c024e:	da1b      	bge.n	c0288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0250:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0252:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0254:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0258:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c025c:	4631      	mov	r1, r6
   c025e:	f106 0010 	add.w	r0, r6, #16
   c0262:	f7ff ff89 	bl	c0178 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0266:	b9ee      	cbnz	r6, c02a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0268:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c026a:	3301      	adds	r3, #1
   c026c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c026e:	e011      	b.n	c0294 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0270:	a808      	add	r0, sp, #32
   c0272:	f7ff ffab 	bl	c01cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0276:	2800      	cmp	r0, #0
   c0278:	d1d6      	bne.n	c0228 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c027a:	a808      	add	r0, sp, #32
   c027c:	f7fd ff27 	bl	be0ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0280:	4620      	mov	r0, r4
   c0282:	b015      	add	sp, #84	; 0x54
   c0284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0288:	3101      	adds	r1, #1
   c028a:	a808      	add	r0, sp, #32
   c028c:	f7ff ff9e 	bl	c01cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0290:	2800      	cmp	r0, #0
   c0292:	d1dd      	bne.n	c0250 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0294:	a80f      	add	r0, sp, #60	; 0x3c
   c0296:	f000 fdb7 	bl	c0e08 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c029a:	a80b      	add	r0, sp, #44	; 0x2c
   c029c:	f000 fdb4 	bl	c0e08 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c02a0:	3514      	adds	r5, #20
   c02a2:	e7c6      	b.n	c0232 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c02a4:	a90f      	add	r1, sp, #60	; 0x3c
   c02a6:	4630      	mov	r0, r6
   c02a8:	f000 fe2a 	bl	c0f00 <_ZN6StringC1EOS_>
   c02ac:	e7dc      	b.n	c0268 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c02ae:	2600      	movs	r6, #0
   c02b0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c02b4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c02b6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c02ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c02be:	429e      	cmp	r6, r3
   c02c0:	da7c      	bge.n	c03bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c02c2:	0133      	lsls	r3, r6, #4
   c02c4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c02c6:	9306      	str	r3, [sp, #24]
        if (!category) {
   c02c8:	b90b      	cbnz	r3, c02ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c02ca:	3601      	adds	r6, #1
   c02cc:	e7f5      	b.n	c02ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c02ce:	2300      	movs	r3, #0
   c02d0:	9307      	str	r3, [sp, #28]
   c02d2:	fb09 f306 	mul.w	r3, r9, r6
   c02d6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c02d8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c02da:	a907      	add	r1, sp, #28
   c02dc:	a806      	add	r0, sp, #24
   c02de:	f7ff fb22 	bl	bf926 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c02e2:	4682      	mov	sl, r0
   c02e4:	2800      	cmp	r0, #0
   c02e6:	d0f0      	beq.n	c02ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c02e8:	f04f 0300 	mov.w	r3, #0
   c02ec:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c02f0:	4601      	mov	r1, r0
   c02f2:	9a07      	ldr	r2, [sp, #28]
   c02f4:	f10d 0317 	add.w	r3, sp, #23
   c02f8:	4628      	mov	r0, r5
   c02fa:	f7ff fbb1 	bl	bfa60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c02fe:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0302:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0304:	2f00      	cmp	r7, #0
   c0306:	d14a      	bne.n	c039e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0308:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c030c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0310:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0314:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0318:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c031c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0320:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0322:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0326:	4293      	cmp	r3, r2
   c0328:	db17      	blt.n	c035a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c032a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c032e:	f1ba 0f00 	cmp.w	sl, #0
   c0332:	dd30      	ble.n	c0396 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0334:	fb09 f00a 	mul.w	r0, r9, sl
   c0338:	f7fd fa8c 	bl	bd854 <malloc>
            if (!d) {
   c033c:	4683      	mov	fp, r0
   c033e:	b360      	cbz	r0, c039a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0340:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0344:	fb09 1202 	mla	r2, r9, r2, r1
   c0348:	f7ff feea 	bl	c0120 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c034c:	6828      	ldr	r0, [r5, #0]
   c034e:	f7fd fa89 	bl	bd864 <free>
        data_ = d;
   c0352:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0356:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c035a:	682b      	ldr	r3, [r5, #0]
   c035c:	9a01      	ldr	r2, [sp, #4]
   c035e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0362:	686a      	ldr	r2, [r5, #4]
   c0364:	4651      	mov	r1, sl
   c0366:	fb09 3202 	mla	r2, r9, r2, r3
   c036a:	f10a 0014 	add.w	r0, sl, #20
   c036e:	f7ff fed7 	bl	c0120 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0372:	f1ba 0f00 	cmp.w	sl, #0
   c0376:	d003      	beq.n	c0380 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0378:	a90f      	add	r1, sp, #60	; 0x3c
   c037a:	4650      	mov	r0, sl
   c037c:	f7ff fb5d 	bl	bfa3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0380:	686b      	ldr	r3, [r5, #4]
   c0382:	3301      	adds	r3, #1
   c0384:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0386:	a811      	add	r0, sp, #68	; 0x44
   c0388:	f7ff fcdc 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c038c:	b13f      	cbz	r7, c039e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c038e:	a80b      	add	r0, sp, #44	; 0x2c
   c0390:	f7ff fcd8 	bl	bfd44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0394:	e771      	b.n	c027a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0396:	46bb      	mov	fp, r7
   c0398:	e7d8      	b.n	c034c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c039a:	2701      	movs	r7, #1
   c039c:	e7f3      	b.n	c0386 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c039e:	9b01      	ldr	r3, [sp, #4]
   c03a0:	682d      	ldr	r5, [r5, #0]
   c03a2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c03a6:	9b06      	ldr	r3, [sp, #24]
   c03a8:	781b      	ldrb	r3, [r3, #0]
   c03aa:	b92b      	cbnz	r3, c03b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c03ac:	f8d8 3000 	ldr.w	r3, [r8]
   c03b0:	9a02      	ldr	r2, [sp, #8]
   c03b2:	4413      	add	r3, r2
   c03b4:	7c1b      	ldrb	r3, [r3, #16]
   c03b6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c03b8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c03ba:	e78e      	b.n	c02da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03bc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c03be:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03c0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c03c2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03c4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c03c6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c03c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c03ca:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c03ce:	60a2      	str	r2, [r4, #8]
   c03d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c03d2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c03d6:	60e2      	str	r2, [r4, #12]
   c03d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c03da:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03dc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c03de:	6122      	str	r2, [r4, #16]
   c03e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c03e2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c03e4:	9b03      	ldr	r3, [sp, #12]
   c03e6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c03e8:	6162      	str	r2, [r4, #20]
   c03ea:	7623      	strb	r3, [r4, #24]
   c03ec:	e7cf      	b.n	c038e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c03f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c03f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c03f2:	4604      	mov	r4, r0
   c03f4:	b087      	sub	sp, #28
   c03f6:	460d      	mov	r5, r1
        filter_(level, filters) {
   c03f8:	4626      	mov	r6, r4
        stream_(&stream) {
   c03fa:	4619      	mov	r1, r3
   c03fc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c03fe:	4617      	mov	r7, r2
        stream_(&stream) {
   c0400:	f7f5 fcc4 	bl	b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0404:	4b0b      	ldr	r3, [pc, #44]	; (c0434 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0406:	f846 3b04 	str.w	r3, [r6], #4
   c040a:	4669      	mov	r1, sp
   c040c:	a803      	add	r0, sp, #12
   c040e:	f7f5 fcbd 	bl	b5d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0412:	aa03      	add	r2, sp, #12
   c0414:	4639      	mov	r1, r7
   c0416:	4630      	mov	r0, r6
   c0418:	f7ff fef0 	bl	c01fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c041c:	a803      	add	r0, sp, #12
   c041e:	f7f5 fa21 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0422:	4668      	mov	r0, sp
   c0424:	f7f5 fa1e 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0428:	4b03      	ldr	r3, [pc, #12]	; (c0438 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c042a:	6023      	str	r3, [r4, #0]
}
   c042c:	4620      	mov	r0, r4
        stream_(&stream) {
   c042e:	6225      	str	r5, [r4, #32]
}
   c0430:	b007      	add	sp, #28
   c0432:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0434:	000c61f8 	.word	0x000c61f8
   c0438:	000c73cc 	.word	0x000c73cc

000c043c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c043c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c043e:	460f      	mov	r7, r1
   c0440:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0442:	491d      	ldr	r1, [pc, #116]	; (c04b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0444:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0446:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0448:	4616      	mov	r6, r2
   c044a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c044c:	f003 fb9c 	bl	c3b88 <strcmp>
   c0450:	b9c0      	cbnz	r0, c0484 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0452:	b1a4      	cbz	r4, c047e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0454:	4629      	mov	r1, r5
   c0456:	a801      	add	r0, sp, #4
   c0458:	f7ff fcbc 	bl	bfdd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c045c:	4917      	ldr	r1, [pc, #92]	; (c04bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c045e:	2024      	movs	r0, #36	; 0x24
   c0460:	f001 f90a 	bl	c1678 <_ZnwjRKSt9nothrow_t>
   c0464:	4605      	mov	r5, r0
   c0466:	b130      	cbz	r0, c0476 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0468:	ab01      	add	r3, sp, #4
   c046a:	4632      	mov	r2, r6
   c046c:	4621      	mov	r1, r4
   c046e:	f7ff ffbf 	bl	c03f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0472:	4b13      	ldr	r3, [pc, #76]	; (c04c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0474:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0476:	a801      	add	r0, sp, #4
   c0478:	f7f5 f9f4 	bl	b5864 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c047c:	462c      	mov	r4, r5
}
   c047e:	4620      	mov	r0, r4
   c0480:	b005      	add	sp, #20
   c0482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0484:	490f      	ldr	r1, [pc, #60]	; (c04c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0486:	4638      	mov	r0, r7
   c0488:	f003 fb7e 	bl	c3b88 <strcmp>
   c048c:	b990      	cbnz	r0, c04b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c048e:	2c00      	cmp	r4, #0
   c0490:	d0f5      	beq.n	c047e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0492:	4629      	mov	r1, r5
   c0494:	a801      	add	r0, sp, #4
   c0496:	f7ff fc9d 	bl	bfdd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c049a:	4908      	ldr	r1, [pc, #32]	; (c04bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c049c:	2024      	movs	r0, #36	; 0x24
   c049e:	f001 f8eb 	bl	c1678 <_ZnwjRKSt9nothrow_t>
   c04a2:	4605      	mov	r5, r0
   c04a4:	2800      	cmp	r0, #0
   c04a6:	d0e6      	beq.n	c0476 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c04a8:	ab01      	add	r3, sp, #4
   c04aa:	4632      	mov	r2, r6
   c04ac:	4621      	mov	r1, r4
   c04ae:	f7ff ff9f 	bl	c03f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c04b2:	e7e0      	b.n	c0476 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c04b4:	2400      	movs	r4, #0
   c04b6:	e7e2      	b.n	c047e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c04b8:	000c7351 	.word	0x000c7351
   c04bc:	000c74e4 	.word	0x000c74e4
   c04c0:	000c73e4 	.word	0x000c73e4
   c04c4:	000c7355 	.word	0x000c7355

000c04c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c04c8:	4b01      	ldr	r3, [pc, #4]	; (c04d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c04ca:	4a02      	ldr	r2, [pc, #8]	; (c04d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c04cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c04ce:	4770      	bx	lr
   c04d0:	2003e674 	.word	0x2003e674
   c04d4:	000c7366 	.word	0x000c7366

000c04d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c04d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c04dc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c04de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c04e2:	4604      	mov	r4, r0
   c04e4:	460e      	mov	r6, r1
   c04e6:	4617      	mov	r7, r2
   c04e8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c04ea:	f000 ff09 	bl	c1300 <_Z16_fetch_usbserialv>
   c04ee:	4581      	cmp	r9, r0
   c04f0:	d04c      	beq.n	c058c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c04f2:	792b      	ldrb	r3, [r5, #4]
   c04f4:	0719      	lsls	r1, r3, #28
   c04f6:	d504      	bpl.n	c0502 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c04f8:	696a      	ldr	r2, [r5, #20]
   c04fa:	4954      	ldr	r1, [pc, #336]	; (c064c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c04fc:	4620      	mov	r0, r4
   c04fe:	f7ff fa8d 	bl	bfa1c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0502:	f1b8 0f00 	cmp.w	r8, #0
   c0506:	d00d      	beq.n	c0524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0508:	215b      	movs	r1, #91	; 0x5b
   c050a:	4620      	mov	r0, r4
   c050c:	f7ff fa7a 	bl	bfa04 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0510:	4641      	mov	r1, r8
   c0512:	4620      	mov	r0, r4
   c0514:	f7ff fa67 	bl	bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0518:	6823      	ldr	r3, [r4, #0]
   c051a:	494d      	ldr	r1, [pc, #308]	; (c0650 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c051c:	68db      	ldr	r3, [r3, #12]
   c051e:	2202      	movs	r2, #2
   c0520:	4620      	mov	r0, r4
   c0522:	4798      	blx	r3
    if (attr.has_file) {
   c0524:	792b      	ldrb	r3, [r5, #4]
   c0526:	07da      	lsls	r2, r3, #31
   c0528:	d523      	bpl.n	c0572 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c052a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c052e:	212f      	movs	r1, #47	; 0x2f
   c0530:	4640      	mov	r0, r8
   c0532:	f003 fba6 	bl	c3c82 <strrchr>
    if (s1) {
   c0536:	b108      	cbz	r0, c053c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0538:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c053c:	4641      	mov	r1, r8
   c053e:	4620      	mov	r0, r4
   c0540:	f7ff fa51 	bl	bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0544:	792b      	ldrb	r3, [r5, #4]
   c0546:	079b      	lsls	r3, r3, #30
   c0548:	d508      	bpl.n	c055c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c054a:	213a      	movs	r1, #58	; 0x3a
   c054c:	4620      	mov	r0, r4
   c054e:	f7ff fa59 	bl	bfa04 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0552:	68ea      	ldr	r2, [r5, #12]
   c0554:	493f      	ldr	r1, [pc, #252]	; (c0654 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0556:	4620      	mov	r0, r4
   c0558:	f7ff fa60 	bl	bfa1c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c055c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c055e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0560:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0564:	68db      	ldr	r3, [r3, #12]
   c0566:	bf14      	ite	ne
   c0568:	493b      	ldrne	r1, [pc, #236]	; (c0658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c056a:	493c      	ldreq	r1, [pc, #240]	; (c065c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c056c:	2202      	movs	r2, #2
            write(": ", 2);
   c056e:	4620      	mov	r0, r4
   c0570:	4798      	blx	r3
    if (attr.has_function) {
   c0572:	792b      	ldrb	r3, [r5, #4]
   c0574:	0758      	lsls	r0, r3, #29
   c0576:	d51d      	bpl.n	c05b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0578:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c057a:	460b      	mov	r3, r1
   c057c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c057e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0582:	b160      	cbz	r0, c059e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0584:	2820      	cmp	r0, #32
   c0586:	d108      	bne.n	c059a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0588:	4619      	mov	r1, r3
   c058a:	e7f7      	b.n	c057c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c058c:	4834      	ldr	r0, [pc, #208]	; (c0660 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c058e:	f000 f966 	bl	c085e <_ZN5spark12NetworkClass9listeningEv>
   c0592:	2800      	cmp	r0, #0
   c0594:	d0ad      	beq.n	c04f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c059a:	2828      	cmp	r0, #40	; 0x28
   c059c:	d1ee      	bne.n	c057c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c059e:	6823      	ldr	r3, [r4, #0]
   c05a0:	1a52      	subs	r2, r2, r1
   c05a2:	68db      	ldr	r3, [r3, #12]
   c05a4:	4620      	mov	r0, r4
   c05a6:	4798      	blx	r3
        write("(): ", 4);
   c05a8:	6823      	ldr	r3, [r4, #0]
   c05aa:	492e      	ldr	r1, [pc, #184]	; (c0664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c05ac:	68db      	ldr	r3, [r3, #12]
   c05ae:	2204      	movs	r2, #4
   c05b0:	4620      	mov	r0, r4
   c05b2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c05b4:	2100      	movs	r1, #0
   c05b6:	4638      	mov	r0, r7
   c05b8:	f7fd f856 	bl	bd668 <log_level_name>
   c05bc:	4601      	mov	r1, r0
    write(s);
   c05be:	4620      	mov	r0, r4
   c05c0:	f7ff fa11 	bl	bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c05c4:	6823      	ldr	r3, [r4, #0]
   c05c6:	4925      	ldr	r1, [pc, #148]	; (c065c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c05c8:	68db      	ldr	r3, [r3, #12]
   c05ca:	2202      	movs	r2, #2
   c05cc:	4620      	mov	r0, r4
   c05ce:	4798      	blx	r3
    if (msg) {
   c05d0:	b11e      	cbz	r6, c05da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c05d2:	4631      	mov	r1, r6
   c05d4:	4620      	mov	r0, r4
   c05d6:	f7ff fa06 	bl	bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c05da:	792b      	ldrb	r3, [r5, #4]
   c05dc:	f013 0f30 	tst.w	r3, #48	; 0x30
   c05e0:	d02c      	beq.n	c063c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c05e2:	6823      	ldr	r3, [r4, #0]
   c05e4:	4920      	ldr	r1, [pc, #128]	; (c0668 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c05e6:	68db      	ldr	r3, [r3, #12]
   c05e8:	2202      	movs	r2, #2
   c05ea:	4620      	mov	r0, r4
   c05ec:	4798      	blx	r3
        if (attr.has_code) {
   c05ee:	792b      	ldrb	r3, [r5, #4]
   c05f0:	06d9      	lsls	r1, r3, #27
   c05f2:	d50a      	bpl.n	c060a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c05f4:	6823      	ldr	r3, [r4, #0]
   c05f6:	491d      	ldr	r1, [pc, #116]	; (c066c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c05f8:	68db      	ldr	r3, [r3, #12]
   c05fa:	2207      	movs	r2, #7
   c05fc:	4620      	mov	r0, r4
   c05fe:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0600:	69aa      	ldr	r2, [r5, #24]
   c0602:	491b      	ldr	r1, [pc, #108]	; (c0670 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0604:	4620      	mov	r0, r4
   c0606:	f7ff fa09 	bl	bfa1c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c060a:	792b      	ldrb	r3, [r5, #4]
   c060c:	069a      	lsls	r2, r3, #26
   c060e:	d511      	bpl.n	c0634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0610:	06db      	lsls	r3, r3, #27
   c0612:	d505      	bpl.n	c0620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0614:	6823      	ldr	r3, [r4, #0]
   c0616:	4910      	ldr	r1, [pc, #64]	; (c0658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0618:	68db      	ldr	r3, [r3, #12]
   c061a:	2202      	movs	r2, #2
   c061c:	4620      	mov	r0, r4
   c061e:	4798      	blx	r3
            write("details = ", 10);
   c0620:	6823      	ldr	r3, [r4, #0]
   c0622:	4914      	ldr	r1, [pc, #80]	; (c0674 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0624:	68db      	ldr	r3, [r3, #12]
   c0626:	4620      	mov	r0, r4
   c0628:	220a      	movs	r2, #10
   c062a:	4798      	blx	r3
            write(attr.details);
   c062c:	69e9      	ldr	r1, [r5, #28]
   c062e:	4620      	mov	r0, r4
   c0630:	f7ff f9d9 	bl	bf9e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0634:	215d      	movs	r1, #93	; 0x5d
   c0636:	4620      	mov	r0, r4
   c0638:	f7ff f9e4 	bl	bfa04 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c063c:	6823      	ldr	r3, [r4, #0]
   c063e:	490e      	ldr	r1, [pc, #56]	; (c0678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0640:	68db      	ldr	r3, [r3, #12]
   c0642:	4620      	mov	r0, r4
   c0644:	2202      	movs	r2, #2
}
   c0646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c064a:	4718      	bx	r3
   c064c:	000c736a 	.word	0x000c736a
   c0650:	000c7371 	.word	0x000c7371
   c0654:	000c5dc6 	.word	0x000c5dc6
   c0658:	000c7374 	.word	0x000c7374
   c065c:	000c7379 	.word	0x000c7379
   c0660:	2003e6a0 	.word	0x2003e6a0
   c0664:	000c7377 	.word	0x000c7377
   c0668:	000c737c 	.word	0x000c737c
   c066c:	000c737f 	.word	0x000c737f
   c0670:	000c7387 	.word	0x000c7387
   c0674:	000c738a 	.word	0x000c738a
   c0678:	000c7395 	.word	0x000c7395

000c067c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c067c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0680:	b085      	sub	sp, #20
    return stream_;
   c0682:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0686:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0688:	4605      	mov	r5, r0
   c068a:	460f      	mov	r7, r1
   c068c:	4690      	mov	r8, r2
   c068e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0690:	f000 fe36 	bl	c1300 <_Z16_fetch_usbserialv>
   c0694:	4581      	cmp	r9, r0
   c0696:	d105      	bne.n	c06a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0698:	4849      	ldr	r0, [pc, #292]	; (c07c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c069a:	f000 f8e0 	bl	c085e <_ZN5spark12NetworkClass9listeningEv>
   c069e:	2800      	cmp	r0, #0
   c06a0:	f040 808a 	bne.w	c07b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c06a4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c06a6:	4a47      	ldr	r2, [pc, #284]	; (c07c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c06a8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c06aa:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c06ae:	a801      	add	r0, sp, #4
        strm_(stream) {
   c06b0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c06b2:	f88d 9008 	strb.w	r9, [sp, #8]
   c06b6:	f7ff f850 	bl	bf75a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c06ba:	4649      	mov	r1, r9
   c06bc:	4640      	mov	r0, r8
   c06be:	f7fc ffd3 	bl	bd668 <log_level_name>
    json.name("l", 1).value(s);
   c06c2:	4941      	ldr	r1, [pc, #260]	; (c07c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c06c4:	4680      	mov	r8, r0
   c06c6:	2201      	movs	r2, #1
   c06c8:	a801      	add	r0, sp, #4
   c06ca:	f7ff f8d5 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c06ce:	4641      	mov	r1, r8
   c06d0:	f7ff f97b 	bl	bf9ca <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c06d4:	b13f      	cbz	r7, c06e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c06d6:	493d      	ldr	r1, [pc, #244]	; (c07cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c06d8:	2201      	movs	r2, #1
   c06da:	a801      	add	r0, sp, #4
   c06dc:	f7ff f8cc 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c06e0:	4639      	mov	r1, r7
   c06e2:	f7ff f972 	bl	bf9ca <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c06e6:	b13e      	cbz	r6, c06f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c06e8:	4939      	ldr	r1, [pc, #228]	; (c07d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c06ea:	2201      	movs	r2, #1
   c06ec:	a801      	add	r0, sp, #4
   c06ee:	f7ff f8c3 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c06f2:	4631      	mov	r1, r6
   c06f4:	f7ff f969 	bl	bf9ca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c06f8:	7923      	ldrb	r3, [r4, #4]
   c06fa:	07df      	lsls	r7, r3, #31
   c06fc:	d50e      	bpl.n	c071c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c06fe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0700:	212f      	movs	r1, #47	; 0x2f
   c0702:	4630      	mov	r0, r6
   c0704:	f003 fabd 	bl	c3c82 <strrchr>
    if (s1) {
   c0708:	b100      	cbz	r0, c070c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c070a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c070c:	4931      	ldr	r1, [pc, #196]	; (c07d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c070e:	2201      	movs	r2, #1
   c0710:	a801      	add	r0, sp, #4
   c0712:	f7ff f8b1 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c0716:	4631      	mov	r1, r6
   c0718:	f7ff f957 	bl	bf9ca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c071c:	7923      	ldrb	r3, [r4, #4]
   c071e:	079e      	lsls	r6, r3, #30
   c0720:	d507      	bpl.n	c0732 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0722:	492d      	ldr	r1, [pc, #180]	; (c07d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0724:	2202      	movs	r2, #2
   c0726:	a801      	add	r0, sp, #4
   c0728:	f7ff f8a6 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c072c:	68e1      	ldr	r1, [r4, #12]
   c072e:	f7ff f821 	bl	bf774 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0732:	7923      	ldrb	r3, [r4, #4]
   c0734:	0758      	lsls	r0, r3, #29
   c0736:	d514      	bpl.n	c0762 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0738:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c073a:	4633      	mov	r3, r6
   c073c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c073e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0742:	b12a      	cbz	r2, c0750 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0744:	2a20      	cmp	r2, #32
   c0746:	d101      	bne.n	c074c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0748:	461e      	mov	r6, r3
   c074a:	e7f7      	b.n	c073c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c074c:	2a28      	cmp	r2, #40	; 0x28
   c074e:	d1f5      	bne.n	c073c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0750:	4922      	ldr	r1, [pc, #136]	; (c07dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0752:	2202      	movs	r2, #2
   c0754:	a801      	add	r0, sp, #4
   c0756:	f7ff f88f 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c075a:	1bba      	subs	r2, r7, r6
   c075c:	4631      	mov	r1, r6
   c075e:	f7ff f89b 	bl	bf898 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0762:	7923      	ldrb	r3, [r4, #4]
   c0764:	0719      	lsls	r1, r3, #28
   c0766:	d507      	bpl.n	c0778 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0768:	491d      	ldr	r1, [pc, #116]	; (c07e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c076a:	2201      	movs	r2, #1
   c076c:	a801      	add	r0, sp, #4
   c076e:	f7ff f883 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c0772:	6961      	ldr	r1, [r4, #20]
   c0774:	f7ff f810 	bl	bf798 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0778:	7923      	ldrb	r3, [r4, #4]
   c077a:	06da      	lsls	r2, r3, #27
   c077c:	d508      	bpl.n	c0790 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c077e:	2204      	movs	r2, #4
   c0780:	4918      	ldr	r1, [pc, #96]	; (c07e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0782:	eb0d 0002 	add.w	r0, sp, r2
   c0786:	f7ff f877 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c078a:	69a1      	ldr	r1, [r4, #24]
   c078c:	f7fe fff2 	bl	bf774 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0790:	7923      	ldrb	r3, [r4, #4]
   c0792:	069b      	lsls	r3, r3, #26
   c0794:	d507      	bpl.n	c07a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0796:	4914      	ldr	r1, [pc, #80]	; (c07e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0798:	2206      	movs	r2, #6
   c079a:	a801      	add	r0, sp, #4
   c079c:	f7ff f86c 	bl	bf878 <_ZN5spark10JSONWriter4nameEPKcj>
   c07a0:	69e1      	ldr	r1, [r4, #28]
   c07a2:	f7ff f912 	bl	bf9ca <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c07a6:	a801      	add	r0, sp, #4
   c07a8:	f7fe ffc1 	bl	bf72e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c07ac:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c07ae:	490f      	ldr	r1, [pc, #60]	; (c07ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c07b0:	6803      	ldr	r3, [r0, #0]
   c07b2:	2202      	movs	r2, #2
   c07b4:	68db      	ldr	r3, [r3, #12]
   c07b6:	4798      	blx	r3
}
   c07b8:	b005      	add	sp, #20
   c07ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c07be:	bf00      	nop
   c07c0:	2003e6a0 	.word	0x2003e6a0
   c07c4:	000c73b4 	.word	0x000c73b4
   c07c8:	000c7347 	.word	0x000c7347
   c07cc:	000c7398 	.word	0x000c7398
   c07d0:	000c7d06 	.word	0x000c7d06
   c07d4:	000c5f19 	.word	0x000c5f19
   c07d8:	000c739a 	.word	0x000c739a
   c07dc:	000c739d 	.word	0x000c739d
   c07e0:	000c6091 	.word	0x000c6091
   c07e4:	000c73a0 	.word	0x000c73a0
   c07e8:	000c73a5 	.word	0x000c73a5
   c07ec:	000c7395 	.word	0x000c7395

000c07f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c07f0:	2300      	movs	r3, #0
   c07f2:	6840      	ldr	r0, [r0, #4]
   c07f4:	461a      	mov	r2, r3
   c07f6:	f7fc bfcd 	b.w	bd794 <network_connect>

000c07fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c07fa:	6840      	ldr	r0, [r0, #4]
   c07fc:	2200      	movs	r2, #0
   c07fe:	2102      	movs	r1, #2
   c0800:	f7fc bfd8 	b.w	bd7b4 <network_disconnect>

000c0804 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0804:	2200      	movs	r2, #0
   c0806:	6840      	ldr	r0, [r0, #4]
   c0808:	4611      	mov	r1, r2
   c080a:	f7fc bfcb 	b.w	bd7a4 <network_connecting>

000c080e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c080e:	2200      	movs	r2, #0
   c0810:	6840      	ldr	r0, [r0, #4]
   c0812:	4611      	mov	r1, r2
   c0814:	f7fc bfd6 	b.w	bd7c4 <network_ready>

000c0818 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c0818:	2300      	movs	r3, #0
   c081a:	6840      	ldr	r0, [r0, #4]
   c081c:	461a      	mov	r2, r3
   c081e:	4619      	mov	r1, r3
   c0820:	f7fc bfd8 	b.w	bd7d4 <network_on>

000c0824 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c0824:	2300      	movs	r3, #0
   c0826:	6840      	ldr	r0, [r0, #4]
   c0828:	461a      	mov	r2, r3
   c082a:	4619      	mov	r1, r3
   c082c:	f7fc bfda 	b.w	bd7e4 <network_off>

000c0830 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c0830:	6840      	ldr	r0, [r0, #4]
   c0832:	2100      	movs	r1, #0
   c0834:	f7fc bffe 	b.w	bd834 <network_is_on>

000c0838 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0838:	6840      	ldr	r0, [r0, #4]
   c083a:	2100      	movs	r1, #0
   c083c:	f7fd b802 	b.w	bd844 <network_is_off>

000c0840 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0840:	6840      	ldr	r0, [r0, #4]
   c0842:	2200      	movs	r2, #0
   c0844:	f081 0101 	eor.w	r1, r1, #1
   c0848:	f7fc bfd4 	b.w	bd7f4 <network_listen>

000c084c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c084c:	6840      	ldr	r0, [r0, #4]
   c084e:	2200      	movs	r2, #0
   c0850:	f7fc bfe0 	b.w	bd814 <network_set_listen_timeout>

000c0854 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0854:	2200      	movs	r2, #0
   c0856:	6840      	ldr	r0, [r0, #4]
   c0858:	4611      	mov	r1, r2
   c085a:	f7fc bfe3 	b.w	bd824 <network_get_listen_timeout>

000c085e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c085e:	2200      	movs	r2, #0
   c0860:	6840      	ldr	r0, [r0, #4]
   c0862:	4611      	mov	r1, r2
   c0864:	f7fc bfce 	b.w	bd804 <network_listening>

000c0868 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c086c:	b095      	sub	sp, #84	; 0x54
   c086e:	4614      	mov	r4, r2
   c0870:	460d      	mov	r5, r1
   c0872:	4607      	mov	r7, r0
    IPAddress addr;
   c0874:	f7fe fe0a 	bl	bf48c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0878:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c087a:	221c      	movs	r2, #28
   c087c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c087e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0880:	f003 f926 	bl	c3ad0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0884:	2340      	movs	r3, #64	; 0x40
   c0886:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0888:	4620      	mov	r0, r4
   c088a:	466b      	mov	r3, sp
   c088c:	aa0c      	add	r2, sp, #48	; 0x30
   c088e:	2100      	movs	r1, #0
   c0890:	f7fc fdca 	bl	bd428 <netdb_getaddrinfo>
    if (!r) {
   c0894:	4604      	mov	r4, r0
   c0896:	2800      	cmp	r0, #0
   c0898:	d14b      	bne.n	c0932 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c089a:	4602      	mov	r2, r0
   c089c:	2101      	movs	r1, #1
   c089e:	6868      	ldr	r0, [r5, #4]
   c08a0:	f7fc ff90 	bl	bd7c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c08a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c08a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c08a8:	4622      	mov	r2, r4
   c08aa:	6868      	ldr	r0, [r5, #4]
   c08ac:	f7fc ff8a 	bl	bd7c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c08b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c08b2:	4681      	mov	r9, r0
        bool ok = false;
   c08b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c08b6:	2e00      	cmp	r6, #0
   c08b8:	d03b      	beq.n	c0932 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c08ba:	2900      	cmp	r1, #0
   c08bc:	d139      	bne.n	c0932 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c08be:	6873      	ldr	r3, [r6, #4]
   c08c0:	2b02      	cmp	r3, #2
   c08c2:	d003      	beq.n	c08cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c08c4:	2b0a      	cmp	r3, #10
   c08c6:	d011      	beq.n	c08ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c08c8:	69f6      	ldr	r6, [r6, #28]
   c08ca:	e7f4      	b.n	c08b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c08cc:	f1b8 0f00 	cmp.w	r8, #0
   c08d0:	d0fa      	beq.n	c08c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c08d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c08d4:	a806      	add	r0, sp, #24
   c08d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c08d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c08da:	f7fe fe05 	bl	bf4e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c08de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c08e0:	1d3c      	adds	r4, r7, #4
   c08e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c08e4:	682b      	ldr	r3, [r5, #0]
   c08e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c08e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c08ea:	e7ed      	b.n	c08c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c08ec:	f1b9 0f00 	cmp.w	r9, #0
   c08f0:	d0ea      	beq.n	c08c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c08f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c08f4:	2210      	movs	r2, #16
   c08f6:	a801      	add	r0, sp, #4
   c08f8:	f003 f8ea 	bl	c3ad0 <memset>
                    a.v = 6;
   c08fc:	2306      	movs	r3, #6
   c08fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c0902:	ad01      	add	r5, sp, #4
   c0904:	f104 0308 	add.w	r3, r4, #8
   c0908:	3418      	adds	r4, #24
   c090a:	6818      	ldr	r0, [r3, #0]
   c090c:	6859      	ldr	r1, [r3, #4]
   c090e:	462a      	mov	r2, r5
   c0910:	c203      	stmia	r2!, {r0, r1}
   c0912:	3308      	adds	r3, #8
   c0914:	42a3      	cmp	r3, r4
   c0916:	4615      	mov	r5, r2
   c0918:	d1f7      	bne.n	c090a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c091a:	a901      	add	r1, sp, #4
   c091c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c091e:	ad07      	add	r5, sp, #28
   c0920:	f7fe fdc2 	bl	bf4a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c0924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0926:	1d3c      	adds	r4, r7, #4
   c0928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c092a:	682b      	ldr	r3, [r5, #0]
   c092c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c092e:	4649      	mov	r1, r9
   c0930:	e7ca      	b.n	c08c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c0932:	9800      	ldr	r0, [sp, #0]
   c0934:	f7fc fd70 	bl	bd418 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0938:	4638      	mov	r0, r7
   c093a:	b015      	add	sp, #84	; 0x54
   c093c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0940 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0940:	4b02      	ldr	r3, [pc, #8]	; (c094c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c0942:	4a03      	ldr	r2, [pc, #12]	; (c0950 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0944:	601a      	str	r2, [r3, #0]
   c0946:	2200      	movs	r2, #0
   c0948:	605a      	str	r2, [r3, #4]

} // spark
   c094a:	4770      	bx	lr
   c094c:	2003e6a0 	.word	0x2003e6a0
   c0950:	000c742c 	.word	0x000c742c

000c0954 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0956:	4606      	mov	r6, r0
   c0958:	460d      	mov	r5, r1
  size_t n = 0;
   c095a:	188f      	adds	r7, r1, r2
   c095c:	2400      	movs	r4, #0
  while (size--) {
   c095e:	42bd      	cmp	r5, r7
   c0960:	d00c      	beq.n	c097c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0962:	6833      	ldr	r3, [r6, #0]
   c0964:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0968:	689b      	ldr	r3, [r3, #8]
   c096a:	4630      	mov	r0, r6
   c096c:	4798      	blx	r3
     if (chunk>=0)
   c096e:	1e03      	subs	r3, r0, #0
   c0970:	db01      	blt.n	c0976 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0972:	441c      	add	r4, r3
  while (size--) {
   c0974:	e7f3      	b.n	c095e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0976:	2c00      	cmp	r4, #0
   c0978:	bf08      	it	eq
   c097a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c097c:	4620      	mov	r0, r4
   c097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0980 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0980:	b508      	push	{r3, lr}
  return write(str);
   c0982:	f7f6 facd 	bl	b6f20 <_ZN5Print5writeEPKc>
}
   c0986:	bd08      	pop	{r3, pc}

000c0988 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0988:	6803      	ldr	r3, [r0, #0]
   c098a:	689b      	ldr	r3, [r3, #8]
   c098c:	4718      	bx	r3

000c098e <_ZN5Print5printEPK19__FlashStringHelper>:
   c098e:	b508      	push	{r3, lr}
   c0990:	f7f6 fac6 	bl	b6f20 <_ZN5Print5writeEPKc>
   c0994:	bd08      	pop	{r3, pc}

000c0996 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0996:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0998:	210d      	movs	r1, #13
{
   c099a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c099c:	f7ff fff4 	bl	c0988 <_ZN5Print5printEc>
  n += print('\n');
   c09a0:	210a      	movs	r1, #10
  size_t n = print('\r');
   c09a2:	4604      	mov	r4, r0
  n += print('\n');
   c09a4:	4628      	mov	r0, r5
   c09a6:	f7ff ffef 	bl	c0988 <_ZN5Print5printEc>
  return n;
}
   c09aa:	4420      	add	r0, r4
   c09ac:	bd38      	pop	{r3, r4, r5, pc}

000c09ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c09ae:	b538      	push	{r3, r4, r5, lr}
   c09b0:	4605      	mov	r5, r0
  return write(str);
   c09b2:	f7f6 fab5 	bl	b6f20 <_ZN5Print5writeEPKc>
   c09b6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c09b8:	4628      	mov	r0, r5
   c09ba:	f7ff ffec 	bl	c0996 <_ZN5Print7printlnEv>
  return n;
}
   c09be:	4420      	add	r0, r4
   c09c0:	bd38      	pop	{r3, r4, r5, pc}

000c09c2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c09c2:	f7ff bff4 	b.w	c09ae <_ZN5Print7printlnEPKc>

000c09c6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c09c6:	b530      	push	{r4, r5, lr}
   c09c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c09ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c09cc:	2a01      	cmp	r2, #1
  *str = '\0';
   c09ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c09d2:	bf98      	it	ls
   c09d4:	220a      	movls	r2, #10
   c09d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c09d8:	460d      	mov	r5, r1
   c09da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c09de:	fb01 5312 	mls	r3, r1, r2, r5
   c09e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09e6:	2b09      	cmp	r3, #9
   c09e8:	bf94      	ite	ls
   c09ea:	3330      	addls	r3, #48	; 0x30
   c09ec:	3337      	addhi	r3, #55	; 0x37
   c09ee:	b2db      	uxtb	r3, r3
  } while(n);
   c09f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c09f6:	d9ef      	bls.n	c09d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c09f8:	4621      	mov	r1, r4
   c09fa:	f7f6 fa91 	bl	b6f20 <_ZN5Print5writeEPKc>
}
   c09fe:	b00b      	add	sp, #44	; 0x2c
   c0a00:	bd30      	pop	{r4, r5, pc}

000c0a02 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c0a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0a06:	b086      	sub	sp, #24
   c0a08:	af00      	add	r7, sp, #0
   c0a0a:	4605      	mov	r5, r0
   c0a0c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c0a0e:	1d38      	adds	r0, r7, #4
   c0a10:	2114      	movs	r1, #20
{
   c0a12:	4614      	mov	r4, r2
    va_copy(args2, args);
   c0a14:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c0a16:	f7fc ff4d 	bl	bd8b4 <vsnprintf>

    if (n<bufsize)
   c0a1a:	2813      	cmp	r0, #19
   c0a1c:	d80e      	bhi.n	c0a3c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c0a1e:	1d39      	adds	r1, r7, #4
   c0a20:	4628      	mov	r0, r5
   c0a22:	f7f6 fa7d 	bl	b6f20 <_ZN5Print5writeEPKc>
   c0a26:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c0a28:	b11e      	cbz	r6, c0a32 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c0a2a:	4628      	mov	r0, r5
   c0a2c:	f7ff ffb3 	bl	c0996 <_ZN5Print7printlnEv>
   c0a30:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0a32:	4620      	mov	r0, r4
   c0a34:	3718      	adds	r7, #24
   c0a36:	46bd      	mov	sp, r7
   c0a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c0a3c:	f100 0308 	add.w	r3, r0, #8
   c0a40:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0a44:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0a46:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0a4a:	4622      	mov	r2, r4
   c0a4c:	1c41      	adds	r1, r0, #1
   c0a4e:	683b      	ldr	r3, [r7, #0]
   c0a50:	4668      	mov	r0, sp
   c0a52:	f7fc ff2f 	bl	bd8b4 <vsnprintf>
  return write(str);
   c0a56:	4669      	mov	r1, sp
   c0a58:	4628      	mov	r0, r5
   c0a5a:	f7f6 fa61 	bl	b6f20 <_ZN5Print5writeEPKc>
   c0a5e:	4604      	mov	r4, r0
   c0a60:	46c5      	mov	sp, r8
   c0a62:	e7e1      	b.n	c0a28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0a64 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0a64:	4b01      	ldr	r3, [pc, #4]	; (c0a6c <_GLOBAL__sub_I_RGB+0x8>)
   c0a66:	2200      	movs	r2, #0
   c0a68:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0a6a:	4770      	bx	lr
   c0a6c:	2003e6a8 	.word	0x2003e6a8

000c0a70 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c0a70:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0a74:	1c53      	adds	r3, r2, #1
   c0a76:	d00b      	beq.n	c0a90 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0a78:	8843      	ldrh	r3, [r0, #2]
   c0a7a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c0a7c:	428b      	cmp	r3, r1
   c0a7e:	d803      	bhi.n	c0a88 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c0a80:	4288      	cmp	r0, r1
   c0a82:	4603      	mov	r3, r0
   c0a84:	bf28      	it	cs
   c0a86:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0a88:	4619      	mov	r1, r3
   c0a8a:	b290      	uxth	r0, r2
   c0a8c:	f7fc bce4 	b.w	bd458 <HAL_Servo_Write_Pulse_Width>
}
   c0a90:	4770      	bx	lr

000c0a92 <_ZN5Servo5writeEi>:
{
   c0a92:	b513      	push	{r0, r1, r4, lr}
   c0a94:	4604      	mov	r4, r0
   c0a96:	4608      	mov	r0, r1
   c0a98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c0a9c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c0aa0:	4288      	cmp	r0, r1
   c0aa2:	db10      	blt.n	c0ac6 <_ZN5Servo5writeEi+0x34>
   c0aa4:	4290      	cmp	r0, r2
   c0aa6:	bfa8      	it	ge
   c0aa8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0aaa:	88a3      	ldrh	r3, [r4, #4]
   c0aac:	9300      	str	r3, [sp, #0]
   c0aae:	8863      	ldrh	r3, [r4, #2]
   c0ab0:	f7fc ff38 	bl	bd924 <_Z3mapiiiii>
   c0ab4:	68e1      	ldr	r1, [r4, #12]
   c0ab6:	4401      	add	r1, r0
   c0ab8:	b289      	uxth	r1, r1
   c0aba:	4620      	mov	r0, r4
}
   c0abc:	b002      	add	sp, #8
   c0abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0ac2:	f7ff bfd5 	b.w	c0a70 <_ZN5Servo17writeMicrosecondsEt>
   c0ac6:	4608      	mov	r0, r1
   c0ac8:	e7ef      	b.n	c0aaa <_ZN5Servo5writeEi+0x18>
	...

000c0acc <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c0acc:	4a04      	ldr	r2, [pc, #16]	; (c0ae0 <_ZN5Servo11resetFieldsEv+0x14>)
   c0ace:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c0ad2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c0ad6:	23b4      	movs	r3, #180	; 0xb4
   c0ad8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c0ada:	2300      	movs	r3, #0
   c0adc:	60c3      	str	r3, [r0, #12]
}
   c0ade:	4770      	bx	lr
   c0ae0:	0220ffff 	.word	0x0220ffff

000c0ae4 <_ZN5ServoC1Ev>:
Servo::Servo()
   c0ae4:	b508      	push	{r3, lr}
  this->resetFields();
   c0ae6:	f7ff fff1 	bl	c0acc <_ZN5Servo11resetFieldsEv>
}
   c0aea:	bd08      	pop	{r3, pc}

000c0aec <_ZN5Servo6detachEv>:
{
   c0aec:	b510      	push	{r4, lr}
   c0aee:	4604      	mov	r4, r0
   c0af0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c0af4:	1c43      	adds	r3, r0, #1
   c0af6:	d007      	beq.n	c0b08 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c0af8:	b280      	uxth	r0, r0
   c0afa:	f7fc fca5 	bl	bd448 <HAL_Servo_Detach>
  this->resetFields();
   c0afe:	4620      	mov	r0, r4
   c0b00:	f7ff ffe4 	bl	c0acc <_ZN5Servo11resetFieldsEv>
  return true;
   c0b04:	2001      	movs	r0, #1
}
   c0b06:	bd10      	pop	{r4, pc}
    return false;
   c0b08:	2000      	movs	r0, #0
   c0b0a:	e7fc      	b.n	c0b06 <_ZN5Servo6detachEv+0x1a>

000c0b0c <_ZN5Servo6attachEtttss>:
{
   c0b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0b10:	460d      	mov	r5, r1
   c0b12:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0b14:	2102      	movs	r1, #2
   c0b16:	4628      	mov	r0, r5
{
   c0b18:	4690      	mov	r8, r2
   c0b1a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0b1c:	f7fc fbdc 	bl	bd2d8 <HAL_Validate_Pin_Function>
   c0b20:	2802      	cmp	r0, #2
   c0b22:	d003      	beq.n	c0b2c <_ZN5Servo6attachEtttss+0x20>
    return false;
   c0b24:	2600      	movs	r6, #0
}
   c0b26:	4630      	mov	r0, r6
   c0b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c0b2c:	4628      	mov	r0, r5
   c0b2e:	f000 fca9 	bl	c1484 <pinAvailable>
   c0b32:	4606      	mov	r6, r0
   c0b34:	2800      	cmp	r0, #0
   c0b36:	d0f5      	beq.n	c0b24 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c0b38:	f9b4 3000 	ldrsh.w	r3, [r4]
   c0b3c:	3301      	adds	r3, #1
   c0b3e:	d002      	beq.n	c0b46 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c0b40:	4620      	mov	r0, r4
   c0b42:	f7ff ffd3 	bl	c0aec <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c0b46:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c0b4a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c0b4c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0b50:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0b52:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0b56:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0b58:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c0b5a:	4628      	mov	r0, r5
   c0b5c:	f7fc fc6c 	bl	bd438 <HAL_Servo_Attach>
  return true;
   c0b60:	e7e1      	b.n	c0b26 <_ZN5Servo6attachEtttss+0x1a>

000c0b62 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0b62:	2100      	movs	r1, #0
   c0b64:	f7fc bcd8 	b.w	bd518 <hal_spi_release>

000c0b68 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0b68:	2100      	movs	r1, #0
   c0b6a:	f7fc bccd 	b.w	bd508 <hal_spi_acquire>

000c0b6e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0b6e:	b510      	push	{r4, lr}
   c0b70:	4604      	mov	r4, r0
   c0b72:	4608      	mov	r0, r1
{
    _spi = spi;
   c0b74:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0b76:	f7fc fc8f 	bl	bd498 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0b7a:	2300      	movs	r3, #0
   c0b7c:	6063      	str	r3, [r4, #4]
}
   c0b7e:	4620      	mov	r0, r4
   c0b80:	bd10      	pop	{r4, pc}

000c0b82 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0b82:	b513      	push	{r0, r1, r4, lr}
   c0b84:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0b86:	7800      	ldrb	r0, [r0, #0]
   c0b88:	f7ff ffee 	bl	c0b68 <_ZN8SPIClass4lockEv.isra.0>
   c0b8c:	b958      	cbnz	r0, c0ba6 <_ZN8SPIClass5beginEv+0x24>
   c0b8e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0b90:	9001      	str	r0, [sp, #4]
   c0b92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0b96:	f7fc fc67 	bl	bd468 <hal_spi_begin>
        unlock();
   c0b9a:	9801      	ldr	r0, [sp, #4]
    }
}
   c0b9c:	b002      	add	sp, #8
   c0b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0ba2:	f7ff bfde 	b.w	c0b62 <_ZN8SPIClass6unlockEv.isra.0>
   c0ba6:	b002      	add	sp, #8
   c0ba8:	bd10      	pop	{r4, pc}

000c0baa <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c0baa:	b513      	push	{r0, r1, r4, lr}
   c0bac:	4604      	mov	r4, r0
    if (!lock())
   c0bae:	7800      	ldrb	r0, [r0, #0]
{
   c0bb0:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c0bb4:	f7ff ffd8 	bl	c0b68 <_ZN8SPIClass4lockEv.isra.0>
   c0bb8:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0bbc:	4603      	mov	r3, r0
   c0bbe:	b948      	cbnz	r0, c0bd4 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c0bc0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c0bc2:	9000      	str	r0, [sp, #0]
   c0bc4:	f7fc fc88 	bl	bd4d8 <hal_spi_begin_ext>
        unlock();
   c0bc8:	9800      	ldr	r0, [sp, #0]
    }
}
   c0bca:	b002      	add	sp, #8
   c0bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0bd0:	f7ff bfc7 	b.w	c0b62 <_ZN8SPIClass6unlockEv.isra.0>
   c0bd4:	b002      	add	sp, #8
   c0bd6:	bd10      	pop	{r4, pc}

000c0bd8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0bd8:	7800      	ldrb	r0, [r0, #0]
   c0bda:	f7ff bfc2 	b.w	c0b62 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c0be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0be0:	0840      	lsrs	r0, r0, #1
{
   c0be2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0be4:	6018      	str	r0, [r3, #0]
   c0be6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0be8:	6818      	ldr	r0, [r3, #0]
   c0bea:	4288      	cmp	r0, r1
   c0bec:	b2e5      	uxtb	r5, r4
   c0bee:	d906      	bls.n	c0bfe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0bf0:	3401      	adds	r4, #1
   c0bf2:	2c08      	cmp	r4, #8
   c0bf4:	d002      	beq.n	c0bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0bf6:	0840      	lsrs	r0, r0, #1
   c0bf8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0bfa:	e7f5      	b.n	c0be8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0bfc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0bfe:	4b02      	ldr	r3, [pc, #8]	; (c0c08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0c00:	5d5b      	ldrb	r3, [r3, r5]
   c0c02:	7013      	strb	r3, [r2, #0]
}
   c0c04:	bd30      	pop	{r4, r5, pc}
   c0c06:	bf00      	nop
   c0c08:	000c7460 	.word	0x000c7460

000c0c0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0c10:	4606      	mov	r6, r0
   c0c12:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0c14:	7800      	ldrb	r0, [r0, #0]
{
   c0c16:	460c      	mov	r4, r1
    CHECK(lock());
   c0c18:	f7ff ffa6 	bl	c0b68 <_ZN8SPIClass4lockEv.isra.0>
   c0c1c:	2800      	cmp	r0, #0
   c0c1e:	db1b      	blt.n	c0c58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0c20:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0c22:	2214      	movs	r2, #20
   c0c24:	2100      	movs	r1, #0
   c0c26:	a809      	add	r0, sp, #36	; 0x24
   c0c28:	f002 ff52 	bl	c3ad0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0c2c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0c2e:	2200      	movs	r2, #0
   c0c30:	a909      	add	r1, sp, #36	; 0x24
   c0c32:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0c34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0c38:	f7fc fc3e 	bl	bd4b8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0c3c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0c40:	b113      	cbz	r3, c0c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0c42:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0c46:	b155      	cbz	r5, c0c5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0c48:	2700      	movs	r7, #0
   c0c4a:	46b9      	mov	r9, r7
   c0c4c:	46b8      	mov	r8, r7
   c0c4e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0c50:	7923      	ldrb	r3, [r4, #4]
   c0c52:	b15d      	cbz	r5, c0c6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0c54:	b1c3      	cbz	r3, c0c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0c56:	2000      	movs	r0, #0
}
   c0c58:	b00f      	add	sp, #60	; 0x3c
   c0c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0c5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0c62:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0c66:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0c6a:	e7f1      	b.n	c0c50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0c6c:	2b00      	cmp	r3, #0
   c0c6e:	d135      	bne.n	c0cdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0c70:	68a3      	ldr	r3, [r4, #8]
   c0c72:	4543      	cmp	r3, r8
   c0c74:	d108      	bne.n	c0c88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0c76:	f88d 9020 	strb.w	r9, [sp, #32]
   c0c7a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0c7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0c82:	89a3      	ldrh	r3, [r4, #12]
   c0c84:	429a      	cmp	r2, r3
   c0c86:	d0e6      	beq.n	c0c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0c88:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0c8a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0c8c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0c90:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0c92:	ab04      	add	r3, sp, #16
   c0c94:	f10d 020f 	add.w	r2, sp, #15
   c0c98:	f7ff ffa2 	bl	c0be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0c9c:	7921      	ldrb	r1, [r4, #4]
   c0c9e:	b985      	cbnz	r5, c0cc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0ca0:	b989      	cbnz	r1, c0cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0ca2:	68a3      	ldr	r3, [r4, #8]
   c0ca4:	4543      	cmp	r3, r8
   c0ca6:	d30e      	bcc.n	c0cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0ca8:	f88d 9020 	strb.w	r9, [sp, #32]
   c0cac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0cb0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0cb4:	89a3      	ldrh	r3, [r4, #12]
   c0cb6:	429a      	cmp	r2, r3
   c0cb8:	d105      	bne.n	c0cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0cba:	9b04      	ldr	r3, [sp, #16]
   c0cbc:	4543      	cmp	r3, r8
   c0cbe:	d102      	bne.n	c0cc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0cc0:	e7c9      	b.n	c0c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0cc2:	2900      	cmp	r1, #0
   c0cc4:	d1f9      	bne.n	c0cba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0cc6:	2300      	movs	r3, #0
   c0cc8:	9301      	str	r3, [sp, #4]
   c0cca:	7b63      	ldrb	r3, [r4, #13]
   c0ccc:	9300      	str	r3, [sp, #0]
   c0cce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0cd2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0cd4:	7830      	ldrb	r0, [r6, #0]
   c0cd6:	f7fc fc0f 	bl	bd4f8 <hal_spi_set_settings>
   c0cda:	e7bc      	b.n	c0c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0cdc:	e9cd 5500 	strd	r5, r5, [sp]
   c0ce0:	462b      	mov	r3, r5
   c0ce2:	462a      	mov	r2, r5
   c0ce4:	2101      	movs	r1, #1
   c0ce6:	e7f5      	b.n	c0cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0ce8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c0ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0cec:	b088      	sub	sp, #32
    unsigned clock = 0;
   c0cee:	2300      	movs	r3, #0
{
   c0cf0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c0cf2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c0cf4:	9302      	str	r3, [sp, #8]
{
   c0cf6:	460e      	mov	r6, r1
   c0cf8:	4617      	mov	r7, r2
    if (!lock())
   c0cfa:	f7ff ff35 	bl	c0b68 <_ZN8SPIClass4lockEv.isra.0>
   c0cfe:	4605      	mov	r5, r0
   c0d00:	bb00      	cbnz	r0, c0d44 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c0d02:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0d06:	4601      	mov	r1, r0
   c0d08:	2214      	movs	r2, #20
   c0d0a:	a803      	add	r0, sp, #12
   c0d0c:	f002 fee0 	bl	c3ad0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0d10:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0d12:	462a      	mov	r2, r5
   c0d14:	a903      	add	r1, sp, #12
   c0d16:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c0d18:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c0d1c:	f7fc fbcc 	bl	bd4b8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0d20:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c0d22:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0d26:	ab02      	add	r3, sp, #8
   c0d28:	f10d 0207 	add.w	r2, sp, #7
   c0d2c:	fb07 f106 	mul.w	r1, r7, r6
   c0d30:	f7ff ff56 	bl	c0be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c0d34:	7820      	ldrb	r0, [r4, #0]
   c0d36:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c0d3a:	f7fc fb9d 	bl	bd478 <hal_spi_set_clock_divider>
        unlock();
   c0d3e:	7820      	ldrb	r0, [r4, #0]
   c0d40:	f7ff ff0f 	bl	c0b62 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c0d44:	9802      	ldr	r0, [sp, #8]
   c0d46:	b008      	add	sp, #32
   c0d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0d4c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c0d4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c0d4e:	7800      	ldrb	r0, [r0, #0]
   c0d50:	f7fc fb9a 	bl	bd488 <hal_spi_transfer>
}
   c0d54:	b2c0      	uxtb	r0, r0
   c0d56:	bd08      	pop	{r3, pc}

000c0d58 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0d58:	b530      	push	{r4, r5, lr}
   c0d5a:	b087      	sub	sp, #28
   c0d5c:	4604      	mov	r4, r0
   c0d5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0d60:	9500      	str	r5, [sp, #0]
   c0d62:	7800      	ldrb	r0, [r0, #0]
   c0d64:	f7fc fbb0 	bl	bd4c8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0d68:	b93d      	cbnz	r5, c0d7a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0d6a:	7820      	ldrb	r0, [r4, #0]
   c0d6c:	a902      	add	r1, sp, #8
   c0d6e:	f7fc fbbb 	bl	bd4e8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0d72:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0d76:	07db      	lsls	r3, r3, #31
   c0d78:	d4f7      	bmi.n	c0d6a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0d7a:	b007      	add	sp, #28
   c0d7c:	bd30      	pop	{r4, r5, pc}

000c0d7e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0d7e:	b510      	push	{r4, lr}
   c0d80:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0d82:	f7fc fa91 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0d86:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0d88:	6823      	ldr	r3, [r4, #0]
   c0d8a:	4620      	mov	r0, r4
   c0d8c:	695b      	ldr	r3, [r3, #20]
   c0d8e:	4798      	blx	r3
    if (c >= 0) return c;
   c0d90:	2800      	cmp	r0, #0
   c0d92:	da08      	bge.n	c0da6 <_ZN6Stream9timedReadEv+0x28>
   c0d94:	f7fc fa88 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0d98:	68e3      	ldr	r3, [r4, #12]
   c0d9a:	1ac0      	subs	r0, r0, r3
   c0d9c:	68a3      	ldr	r3, [r4, #8]
   c0d9e:	4298      	cmp	r0, r3
   c0da0:	d3f2      	bcc.n	c0d88 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0da6:	bd10      	pop	{r4, pc}

000c0da8 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c0da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0dac:	4607      	mov	r7, r0
   c0dae:	4688      	mov	r8, r1
   c0db0:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c0db2:	461d      	mov	r5, r3
   c0db4:	b173      	cbz	r3, c0dd4 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c0db6:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c0db8:	4638      	mov	r0, r7
   c0dba:	f7ff ffe0 	bl	c0d7e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c0dbe:	1e03      	subs	r3, r0, #0
   c0dc0:	db05      	blt.n	c0dce <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c0dc2:	4543      	cmp	r3, r8
   c0dc4:	d003      	beq.n	c0dce <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c0dc6:	5533      	strb	r3, [r6, r4]
    index++;
   c0dc8:	3401      	adds	r4, #1
  while (index < length) {
   c0dca:	42a5      	cmp	r5, r4
   c0dcc:	d1f4      	bne.n	c0db8 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c0dce:	4620      	mov	r0, r4
   c0dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c0dd4:	461c      	mov	r4, r3
   c0dd6:	e7fa      	b.n	c0dce <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c0dd8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c0dd8:	b570      	push	{r4, r5, r6, lr}
   c0dda:	460d      	mov	r5, r1
  String ret;
   c0ddc:	4909      	ldr	r1, [pc, #36]	; (c0e04 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c0dde:	4604      	mov	r4, r0
   c0de0:	4616      	mov	r6, r2
  String ret;
   c0de2:	f000 f85c 	bl	c0e9e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c0de6:	4628      	mov	r0, r5
   c0de8:	f7ff ffc9 	bl	c0d7e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c0dec:	2800      	cmp	r0, #0
   c0dee:	db06      	blt.n	c0dfe <_ZN6Stream15readStringUntilEc+0x26>
   c0df0:	4286      	cmp	r6, r0
   c0df2:	d004      	beq.n	c0dfe <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c0df4:	b2c1      	uxtb	r1, r0
   c0df6:	4620      	mov	r0, r4
   c0df8:	f000 f8d0 	bl	c0f9c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c0dfc:	e7f3      	b.n	c0de6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c0dfe:	4620      	mov	r0, r4
   c0e00:	bd70      	pop	{r4, r5, r6, pc}
   c0e02:	bf00      	nop
   c0e04:	000c7397 	.word	0x000c7397

000c0e08 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c0e08:	b510      	push	{r4, lr}
   c0e0a:	4604      	mov	r4, r0
{
	free(buffer);
   c0e0c:	6800      	ldr	r0, [r0, #0]
   c0e0e:	f7fc fd29 	bl	bd864 <free>
}
   c0e12:	4620      	mov	r0, r4
   c0e14:	bd10      	pop	{r4, pc}

000c0e16 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c0e16:	b510      	push	{r4, lr}
   c0e18:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c0e1a:	6800      	ldr	r0, [r0, #0]
   c0e1c:	b108      	cbz	r0, c0e22 <_ZN6String10invalidateEv+0xc>
   c0e1e:	f7fc fd21 	bl	bd864 <free>
	buffer = NULL;
   c0e22:	2300      	movs	r3, #0
	capacity = len = 0;
   c0e24:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c0e28:	6023      	str	r3, [r4, #0]
}
   c0e2a:	bd10      	pop	{r4, pc}

000c0e2c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0e2c:	b538      	push	{r3, r4, r5, lr}
   c0e2e:	4604      	mov	r4, r0
   c0e30:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0e32:	6800      	ldr	r0, [r0, #0]
   c0e34:	3101      	adds	r1, #1
   c0e36:	f7fc fd1d 	bl	bd874 <realloc>
	if (newbuffer) {
   c0e3a:	b110      	cbz	r0, c0e42 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c0e3c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c0e40:	2001      	movs	r0, #1
	}
	return 0;
}
   c0e42:	bd38      	pop	{r3, r4, r5, pc}

000c0e44 <_ZN6String7reserveEj>:
{
   c0e44:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c0e46:	6803      	ldr	r3, [r0, #0]
{
   c0e48:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c0e4a:	b123      	cbz	r3, c0e56 <_ZN6String7reserveEj+0x12>
   c0e4c:	6843      	ldr	r3, [r0, #4]
   c0e4e:	428b      	cmp	r3, r1
   c0e50:	d301      	bcc.n	c0e56 <_ZN6String7reserveEj+0x12>
   c0e52:	2001      	movs	r0, #1
}
   c0e54:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c0e56:	4620      	mov	r0, r4
   c0e58:	f7ff ffe8 	bl	c0e2c <_ZN6String12changeBufferEj>
   c0e5c:	2800      	cmp	r0, #0
   c0e5e:	d0f9      	beq.n	c0e54 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c0e60:	68a3      	ldr	r3, [r4, #8]
   c0e62:	2b00      	cmp	r3, #0
   c0e64:	d1f5      	bne.n	c0e52 <_ZN6String7reserveEj+0xe>
   c0e66:	6822      	ldr	r2, [r4, #0]
   c0e68:	7013      	strb	r3, [r2, #0]
   c0e6a:	e7f2      	b.n	c0e52 <_ZN6String7reserveEj+0xe>

000c0e6c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0e6e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c0e70:	4611      	mov	r1, r2
   c0e72:	9201      	str	r2, [sp, #4]
{
   c0e74:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c0e76:	f7ff ffe5 	bl	c0e44 <_ZN6String7reserveEj>
   c0e7a:	9a01      	ldr	r2, [sp, #4]
   c0e7c:	b928      	cbnz	r0, c0e8a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c0e7e:	4620      	mov	r0, r4
   c0e80:	f7ff ffc9 	bl	c0e16 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c0e84:	4620      	mov	r0, r4
   c0e86:	b003      	add	sp, #12
   c0e88:	bd30      	pop	{r4, r5, pc}
	len = length;
   c0e8a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c0e8c:	4629      	mov	r1, r5
   c0e8e:	6820      	ldr	r0, [r4, #0]
   c0e90:	f002 fdf6 	bl	c3a80 <memcpy>
	buffer[len] = 0;
   c0e94:	6822      	ldr	r2, [r4, #0]
   c0e96:	68a3      	ldr	r3, [r4, #8]
   c0e98:	2100      	movs	r1, #0
   c0e9a:	54d1      	strb	r1, [r2, r3]
	return *this;
   c0e9c:	e7f2      	b.n	c0e84 <_ZN6String4copyEPKcj+0x18>

000c0e9e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c0e9e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c0ea0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c0ea2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c0ea6:	4604      	mov	r4, r0
	len = 0;
   c0ea8:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0eaa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c0eac:	b141      	cbz	r1, c0ec0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c0eae:	4608      	mov	r0, r1
   c0eb0:	9101      	str	r1, [sp, #4]
   c0eb2:	f002 fe98 	bl	c3be6 <strlen>
   c0eb6:	9901      	ldr	r1, [sp, #4]
   c0eb8:	4602      	mov	r2, r0
   c0eba:	4620      	mov	r0, r4
   c0ebc:	f7ff ffd6 	bl	c0e6c <_ZN6String4copyEPKcj>
}
   c0ec0:	4620      	mov	r0, r4
   c0ec2:	b002      	add	sp, #8
   c0ec4:	bd10      	pop	{r4, pc}

000c0ec6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0ec6:	b538      	push	{r3, r4, r5, lr}
   c0ec8:	4605      	mov	r5, r0
	if (buffer) {
   c0eca:	6800      	ldr	r0, [r0, #0]
{
   c0ecc:	460c      	mov	r4, r1
	if (buffer) {
   c0ece:	b168      	cbz	r0, c0eec <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c0ed0:	686a      	ldr	r2, [r5, #4]
   c0ed2:	688b      	ldr	r3, [r1, #8]
   c0ed4:	429a      	cmp	r2, r3
   c0ed6:	d307      	bcc.n	c0ee8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c0ed8:	6809      	ldr	r1, [r1, #0]
   c0eda:	f002 fe5f 	bl	c3b9c <strcpy>
			len = rhs.len;
   c0ede:	68a3      	ldr	r3, [r4, #8]
   c0ee0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c0ee2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c0ee4:	60a3      	str	r3, [r4, #8]
}
   c0ee6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c0ee8:	f7fc fcbc 	bl	bd864 <free>
	buffer = rhs.buffer;
   c0eec:	6823      	ldr	r3, [r4, #0]
   c0eee:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c0ef0:	6863      	ldr	r3, [r4, #4]
   c0ef2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c0ef4:	68a3      	ldr	r3, [r4, #8]
   c0ef6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c0ef8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c0efa:	e9c4 3300 	strd	r3, r3, [r4]
   c0efe:	e7f1      	b.n	c0ee4 <_ZN6String4moveERS_+0x1e>

000c0f00 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0f00:	b510      	push	{r4, lr}
	buffer = NULL;
   c0f02:	2300      	movs	r3, #0
	capacity = 0;
   c0f04:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0f08:	4604      	mov	r4, r0
	len = 0;
   c0f0a:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0f0c:	7303      	strb	r3, [r0, #12]
	move(rval);
   c0f0e:	f7ff ffda 	bl	c0ec6 <_ZN6String4moveERS_>
}
   c0f12:	4620      	mov	r0, r4
   c0f14:	bd10      	pop	{r4, pc}

000c0f16 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c0f16:	4288      	cmp	r0, r1
{
   c0f18:	b510      	push	{r4, lr}
   c0f1a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c0f1c:	d005      	beq.n	c0f2a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c0f1e:	680b      	ldr	r3, [r1, #0]
   c0f20:	b12b      	cbz	r3, c0f2e <_ZN6StringaSERKS_+0x18>
   c0f22:	688a      	ldr	r2, [r1, #8]
   c0f24:	4619      	mov	r1, r3
   c0f26:	f7ff ffa1 	bl	c0e6c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0f2a:	4620      	mov	r0, r4
   c0f2c:	bd10      	pop	{r4, pc}
	else invalidate();
   c0f2e:	f7ff ff72 	bl	c0e16 <_ZN6String10invalidateEv>
   c0f32:	e7fa      	b.n	c0f2a <_ZN6StringaSERKS_+0x14>

000c0f34 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0f34:	b510      	push	{r4, lr}
	buffer = NULL;
   c0f36:	2300      	movs	r3, #0
String::String(const String &value)
   c0f38:	4604      	mov	r4, r0
	capacity = 0;
   c0f3a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c0f3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0f40:	7303      	strb	r3, [r0, #12]
	*this = value;
   c0f42:	f7ff ffe8 	bl	c0f16 <_ZN6StringaSERKS_>
}
   c0f46:	4620      	mov	r0, r4
   c0f48:	bd10      	pop	{r4, pc}

000c0f4a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0f4a:	b513      	push	{r0, r1, r4, lr}
   c0f4c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c0f4e:	b159      	cbz	r1, c0f68 <_ZN6StringaSEPKc+0x1e>
   c0f50:	4608      	mov	r0, r1
   c0f52:	9101      	str	r1, [sp, #4]
   c0f54:	f002 fe47 	bl	c3be6 <strlen>
   c0f58:	9901      	ldr	r1, [sp, #4]
   c0f5a:	4602      	mov	r2, r0
   c0f5c:	4620      	mov	r0, r4
   c0f5e:	f7ff ff85 	bl	c0e6c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0f62:	4620      	mov	r0, r4
   c0f64:	b002      	add	sp, #8
   c0f66:	bd10      	pop	{r4, pc}
	else invalidate();
   c0f68:	f7ff ff55 	bl	c0e16 <_ZN6String10invalidateEv>
   c0f6c:	e7f9      	b.n	c0f62 <_ZN6StringaSEPKc+0x18>

000c0f6e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0f6e:	b570      	push	{r4, r5, r6, lr}
   c0f70:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c0f72:	460e      	mov	r6, r1
   c0f74:	b909      	cbnz	r1, c0f7a <_ZN6String6concatEPKcj+0xc>
   c0f76:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c0f78:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c0f7a:	b16a      	cbz	r2, c0f98 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c0f7c:	6884      	ldr	r4, [r0, #8]
   c0f7e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c0f80:	4621      	mov	r1, r4
   c0f82:	f7ff ff5f 	bl	c0e44 <_ZN6String7reserveEj>
   c0f86:	2800      	cmp	r0, #0
   c0f88:	d0f5      	beq.n	c0f76 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c0f8a:	6828      	ldr	r0, [r5, #0]
   c0f8c:	68ab      	ldr	r3, [r5, #8]
   c0f8e:	4631      	mov	r1, r6
   c0f90:	4418      	add	r0, r3
   c0f92:	f002 fe03 	bl	c3b9c <strcpy>
	len = newlen;
   c0f96:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c0f98:	2001      	movs	r0, #1
   c0f9a:	e7ed      	b.n	c0f78 <_ZN6String6concatEPKcj+0xa>

000c0f9c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0f9c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c0f9e:	2300      	movs	r3, #0
	buf[0] = c;
   c0fa0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c0fa4:	2201      	movs	r2, #1
   c0fa6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c0fa8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c0fac:	f7ff ffdf 	bl	c0f6e <_ZN6String6concatEPKcj>
}
   c0fb0:	b003      	add	sp, #12
   c0fb2:	f85d fb04 	ldr.w	pc, [sp], #4

000c0fb6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c0fb6:	6883      	ldr	r3, [r0, #8]
   c0fb8:	428b      	cmp	r3, r1
   c0fba:	d903      	bls.n	c0fc4 <_ZNK6StringixEj+0xe>
   c0fbc:	6800      	ldr	r0, [r0, #0]
   c0fbe:	b110      	cbz	r0, c0fc6 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c0fc0:	5c40      	ldrb	r0, [r0, r1]
   c0fc2:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c0fc4:	2000      	movs	r0, #0
}
   c0fc6:	4770      	bx	lr

000c0fc8 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c0fc8:	f7ff bff5 	b.w	c0fb6 <_ZNK6StringixEj>

000c0fcc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0fcc:	4b05      	ldr	r3, [pc, #20]	; (c0fe4 <_GLOBAL__sub_I_System+0x18>)
   c0fce:	2202      	movs	r2, #2
   c0fd0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0fd2:	4b05      	ldr	r3, [pc, #20]	; (c0fe8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0fd4:	4a05      	ldr	r2, [pc, #20]	; (c0fec <_GLOBAL__sub_I_System+0x20>)
   c0fd6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0fd8:	2000      	movs	r0, #0
   c0fda:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0fde:	f7fc bb65 	b.w	bd6ac <set_system_mode>
   c0fe2:	bf00      	nop
   c0fe4:	2003e6c4 	.word	0x2003e6c4
   c0fe8:	2003e6b8 	.word	0x2003e6b8
   c0fec:	ffff0000 	.word	0xffff0000

000c0ff0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0ff4:	4a15      	ldr	r2, [pc, #84]	; (c104c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0ff6:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1058 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0ffa:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0ffe:	1980      	adds	r0, r0, r6
   c1000:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c1004:	4b12      	ldr	r3, [pc, #72]	; (c1050 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c1006:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c100a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c100e:	1986      	adds	r6, r0, r6
   c1010:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c1014:	42bb      	cmp	r3, r7
   c1016:	bf08      	it	eq
   c1018:	42b2      	cmpeq	r2, r6
{
   c101a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c101c:	d013      	beq.n	c1046 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c101e:	a903      	add	r1, sp, #12
   c1020:	4668      	mov	r0, sp
   c1022:	e9cd 6700 	strd	r6, r7, [sp]
   c1026:	f7fc fc75 	bl	bd914 <localtime_r>
	calendar_time.tm_year += 1900;
   c102a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c102c:	4d09      	ldr	r5, [pc, #36]	; (c1054 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c102e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1032:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1034:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c103e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1042:	6823      	ldr	r3, [r4, #0]
   c1044:	602b      	str	r3, [r5, #0]
    }
}
   c1046:	b00c      	add	sp, #48	; 0x30
   c1048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c104c:	2003e6f8 	.word	0x2003e6f8
   c1050:	2003e6f0 	.word	0x2003e6f0
   c1054:	2003e6cc 	.word	0x2003e6cc
   c1058:	2003e700 	.word	0x2003e700

000c105c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c105c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c105e:	2000      	movs	r0, #0
   c1060:	f7fc fb88 	bl	bd774 <spark_sync_time_pending>
   c1064:	b128      	cbz	r0, c1072 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1066:	f7fc fb6d 	bl	bd744 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c106a:	f080 0001 	eor.w	r0, r0, #1
   c106e:	b2c0      	uxtb	r0, r0
    }
   c1070:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1072:	2001      	movs	r0, #1
   c1074:	e7fc      	b.n	c1070 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1078 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1078:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c107a:	f7ff ffb9 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c107e:	4b02      	ldr	r3, [pc, #8]	; (c1088 <_ZN9TimeClass5monthEx+0x10>)
   c1080:	6918      	ldr	r0, [r3, #16]
}
   c1082:	3001      	adds	r0, #1
   c1084:	bd08      	pop	{r3, pc}
   c1086:	bf00      	nop
   c1088:	2003e6cc 	.word	0x2003e6cc

000c108c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c108c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c108e:	2000      	movs	r0, #0
   c1090:	f7fc f912 	bl	bd2b8 <hal_rtc_time_is_valid>
    if (rtcstate)
   c1094:	4604      	mov	r4, r0
   c1096:	b9a0      	cbnz	r0, c10c2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1098:	f7fc fb00 	bl	bd69c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c109c:	2801      	cmp	r0, #1
   c109e:	d110      	bne.n	c10c2 <_ZN9TimeClass7isValidEv+0x36>
   c10a0:	4620      	mov	r0, r4
   c10a2:	f7fc fb23 	bl	bd6ec <system_thread_get_state>
   c10a6:	b960      	cbnz	r0, c10c2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c10a8:	f7ff ffd8 	bl	c105c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c10ac:	b910      	cbnz	r0, c10b4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c10ae:	f7fc fb41 	bl	bd734 <spark_process>
        while (_while() && !_condition()) {
   c10b2:	e7f9      	b.n	c10a8 <_ZN9TimeClass7isValidEv+0x1c>
   c10b4:	f7ff ffd2 	bl	c105c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c10b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c10bc:	2000      	movs	r0, #0
   c10be:	f7fc b8fb 	b.w	bd2b8 <hal_rtc_time_is_valid>
}
   c10c2:	4620      	mov	r0, r4
   c10c4:	bd10      	pop	{r4, pc}

000c10c6 <_ZN9TimeClass3nowEv>:
{
   c10c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c10c8:	f7ff ffe0 	bl	c108c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c10cc:	2210      	movs	r2, #16
   c10ce:	2100      	movs	r1, #0
   c10d0:	4668      	mov	r0, sp
   c10d2:	f002 fcfd 	bl	c3ad0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c10d6:	2100      	movs	r1, #0
   c10d8:	4668      	mov	r0, sp
   c10da:	f7fc f8f5 	bl	bd2c8 <hal_rtc_get_time>
}
   c10de:	9800      	ldr	r0, [sp, #0]
   c10e0:	b005      	add	sp, #20
   c10e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c10e8 <_ZN9TimeClass4hourEv>:
{
   c10e8:	b508      	push	{r3, lr}
	return hour(now());
   c10ea:	f7ff ffec 	bl	c10c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c10ee:	17c1      	asrs	r1, r0, #31
   c10f0:	f7ff ff7e 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
}
   c10f4:	4b01      	ldr	r3, [pc, #4]	; (c10fc <_ZN9TimeClass4hourEv+0x14>)
   c10f6:	6898      	ldr	r0, [r3, #8]
   c10f8:	bd08      	pop	{r3, pc}
   c10fa:	bf00      	nop
   c10fc:	2003e6cc 	.word	0x2003e6cc

000c1100 <_ZN9TimeClass6minuteEv>:
{
   c1100:	b508      	push	{r3, lr}
	return minute(now());
   c1102:	f7ff ffe0 	bl	c10c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1106:	17c1      	asrs	r1, r0, #31
   c1108:	f7ff ff72 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
}
   c110c:	4b01      	ldr	r3, [pc, #4]	; (c1114 <_ZN9TimeClass6minuteEv+0x14>)
   c110e:	6858      	ldr	r0, [r3, #4]
   c1110:	bd08      	pop	{r3, pc}
   c1112:	bf00      	nop
   c1114:	2003e6cc 	.word	0x2003e6cc

000c1118 <_ZN9TimeClass6secondEv>:
{
   c1118:	b508      	push	{r3, lr}
	return second(now());
   c111a:	f7ff ffd4 	bl	c10c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c111e:	17c1      	asrs	r1, r0, #31
   c1120:	f7ff ff66 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1124:	4b01      	ldr	r3, [pc, #4]	; (c112c <_ZN9TimeClass6secondEv+0x14>)
   c1126:	6818      	ldr	r0, [r3, #0]
   c1128:	bd08      	pop	{r3, pc}
   c112a:	bf00      	nop
   c112c:	2003e6cc 	.word	0x2003e6cc

000c1130 <_ZN9TimeClass3dayEv>:
{
   c1130:	b508      	push	{r3, lr}
	return day(now());
   c1132:	f7ff ffc8 	bl	c10c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1136:	17c1      	asrs	r1, r0, #31
   c1138:	f7ff ff5a 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
}
   c113c:	4b01      	ldr	r3, [pc, #4]	; (c1144 <_ZN9TimeClass3dayEv+0x14>)
   c113e:	68d8      	ldr	r0, [r3, #12]
   c1140:	bd08      	pop	{r3, pc}
   c1142:	bf00      	nop
   c1144:	2003e6cc 	.word	0x2003e6cc

000c1148 <_ZN9TimeClass5monthEv>:
{
   c1148:	b508      	push	{r3, lr}
	return month(now());
   c114a:	f7ff ffbc 	bl	c10c6 <_ZN9TimeClass3nowEv>
}
   c114e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1152:	17c1      	asrs	r1, r0, #31
   c1154:	f7ff bf90 	b.w	c1078 <_ZN9TimeClass5monthEx>

000c1158 <_ZN9TimeClass4yearEv>:
{
   c1158:	b508      	push	{r3, lr}
	return year(now());
   c115a:	f7ff ffb4 	bl	c10c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c115e:	17c1      	asrs	r1, r0, #31
   c1160:	f7ff ff46 	bl	c0ff0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1164:	4b01      	ldr	r3, [pc, #4]	; (c116c <_ZN9TimeClass4yearEv+0x14>)
   c1166:	6958      	ldr	r0, [r3, #20]
   c1168:	bd08      	pop	{r3, pc}
   c116a:	bf00      	nop
   c116c:	2003e6cc 	.word	0x2003e6cc

000c1170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1170:	4b02      	ldr	r3, [pc, #8]	; (c117c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1172:	681a      	ldr	r2, [r3, #0]
   c1174:	4b02      	ldr	r3, [pc, #8]	; (c1180 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1176:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1178:	4770      	bx	lr
   c117a:	bf00      	nop
   c117c:	2003db98 	.word	0x2003db98
   c1180:	2003e6c8 	.word	0x2003e6c8

000c1184 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1184:	4770      	bx	lr

000c1186 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1186:	7441      	strb	r1, [r0, #17]
}
   c1188:	4770      	bx	lr

000c118a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c118a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c118c:	7c00      	ldrb	r0, [r0, #16]
   c118e:	f7fc fa03 	bl	bd598 <hal_usart_available_data_for_write>
}
   c1192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1196:	bd08      	pop	{r3, pc}

000c1198 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1198:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c119a:	7c00      	ldrb	r0, [r0, #16]
   c119c:	f7fc f9d4 	bl	bd548 <hal_usart_available>
}
   c11a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c11a4:	bd08      	pop	{r3, pc}

000c11a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c11a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c11a8:	7c00      	ldrb	r0, [r0, #16]
   c11aa:	f7fc f9dd 	bl	bd568 <hal_usart_peek>
}
   c11ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c11b2:	bd08      	pop	{r3, pc}

000c11b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c11b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c11b6:	7c00      	ldrb	r0, [r0, #16]
   c11b8:	f7fc f9ce 	bl	bd558 <hal_usart_read>
}
   c11bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c11c0:	bd08      	pop	{r3, pc}

000c11c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c11c2:	7c00      	ldrb	r0, [r0, #16]
   c11c4:	f7fc b9d8 	b.w	bd578 <hal_usart_flush>

000c11c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c11c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c11ca:	7c45      	ldrb	r5, [r0, #17]
{
   c11cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c11ce:	b12d      	cbz	r5, c11dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c11d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c11d2:	b003      	add	sp, #12
   c11d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c11d8:	f7fc b9ae 	b.w	bd538 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c11dc:	7c00      	ldrb	r0, [r0, #16]
   c11de:	9101      	str	r1, [sp, #4]
   c11e0:	f7fc f9da 	bl	bd598 <hal_usart_available_data_for_write>
   c11e4:	2800      	cmp	r0, #0
   c11e6:	9901      	ldr	r1, [sp, #4]
   c11e8:	dcf2      	bgt.n	c11d0 <_ZN11USARTSerial5writeEh+0x8>
}
   c11ea:	4628      	mov	r0, r5
   c11ec:	b003      	add	sp, #12
   c11ee:	bd30      	pop	{r4, r5, pc}

000c11f0 <_ZN11USARTSerialD0Ev>:
   c11f0:	b510      	push	{r4, lr}
   c11f2:	2114      	movs	r1, #20
   c11f4:	4604      	mov	r4, r0
   c11f6:	f7f2 ff54 	bl	b40a2 <_ZdlPvj>
   c11fa:	4620      	mov	r0, r4
   c11fc:	bd10      	pop	{r4, pc}
	...

000c1200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1200:	b510      	push	{r4, lr}
   c1202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1206:	4604      	mov	r4, r0
   c1208:	4608      	mov	r0, r1
   c120a:	4611      	mov	r1, r2
   c120c:	2200      	movs	r2, #0
   c120e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1212:	4b04      	ldr	r3, [pc, #16]	; (c1224 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1214:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1216:	2301      	movs	r3, #1
  _serial = serial;
   c1218:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c121a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c121c:	f7fc f9cc 	bl	bd5b8 <hal_usart_init_ex>
}
   c1220:	4620      	mov	r0, r4
   c1222:	bd10      	pop	{r4, pc}
   c1224:	000c748c 	.word	0x000c748c

000c1228 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1228:	7c00      	ldrb	r0, [r0, #16]
   c122a:	2300      	movs	r3, #0
   c122c:	f7fc b9bc 	b.w	bd5a8 <hal_usart_begin_config>

000c1230 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1230:	2200      	movs	r2, #0
   c1232:	f7ff bff9 	b.w	c1228 <_ZN11USARTSerial5beginEmm>

000c1236 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1236:	7c00      	ldrb	r0, [r0, #16]
   c1238:	f7fc b976 	b.w	bd528 <hal_usart_end>

000c123c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c123c:	7441      	strb	r1, [r0, #17]
}
   c123e:	4770      	bx	lr

000c1240 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1240:	4770      	bx	lr

000c1242 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1242:	4770      	bx	lr

000c1244 <_ZN9USBSerial4readEv>:
{
   c1244:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1246:	2100      	movs	r1, #0
   c1248:	7c00      	ldrb	r0, [r0, #16]
   c124a:	f7fc f9e5 	bl	bd618 <HAL_USB_USART_Receive_Data>
}
   c124e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1252:	bd08      	pop	{r3, pc}

000c1254 <_ZN9USBSerial4peekEv>:
{
   c1254:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1256:	2101      	movs	r1, #1
   c1258:	7c00      	ldrb	r0, [r0, #16]
   c125a:	f7fc f9dd 	bl	bd618 <HAL_USB_USART_Receive_Data>
}
   c125e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1262:	bd08      	pop	{r3, pc}

000c1264 <_ZN9USBSerial17availableForWriteEv>:
{
   c1264:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1266:	7c00      	ldrb	r0, [r0, #16]
   c1268:	f7fc f9ce 	bl	bd608 <HAL_USB_USART_Available_Data_For_Write>
}
   c126c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1270:	bd08      	pop	{r3, pc}

000c1272 <_ZN9USBSerial9availableEv>:
{
   c1272:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1274:	7c00      	ldrb	r0, [r0, #16]
   c1276:	f7fc f9bf 	bl	bd5f8 <HAL_USB_USART_Available_Data>
}
   c127a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c127e:	bd08      	pop	{r3, pc}

000c1280 <_ZN9USBSerial5writeEh>:
{
   c1280:	b513      	push	{r0, r1, r4, lr}
   c1282:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1284:	7c00      	ldrb	r0, [r0, #16]
{
   c1286:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1288:	f7fc f9be 	bl	bd608 <HAL_USB_USART_Available_Data_For_Write>
   c128c:	2800      	cmp	r0, #0
   c128e:	9901      	ldr	r1, [sp, #4]
   c1290:	dc01      	bgt.n	c1296 <_ZN9USBSerial5writeEh+0x16>
   c1292:	7c60      	ldrb	r0, [r4, #17]
   c1294:	b120      	cbz	r0, c12a0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1296:	7c20      	ldrb	r0, [r4, #16]
   c1298:	f7fc f9c6 	bl	bd628 <HAL_USB_USART_Send_Data>
   c129c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c12a0:	b002      	add	sp, #8
   c12a2:	bd10      	pop	{r4, pc}

000c12a4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c12a4:	7c00      	ldrb	r0, [r0, #16]
   c12a6:	f7fc b9c7 	b.w	bd638 <HAL_USB_USART_Flush_Data>

000c12aa <_ZN9USBSerialD0Ev>:
   c12aa:	b510      	push	{r4, lr}
   c12ac:	2114      	movs	r1, #20
   c12ae:	4604      	mov	r4, r0
   c12b0:	f7f2 fef7 	bl	b40a2 <_ZdlPvj>
   c12b4:	4620      	mov	r0, r4
   c12b6:	bd10      	pop	{r4, pc}

000c12b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c12b8:	b510      	push	{r4, lr}
   c12ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c12be:	4604      	mov	r4, r0
   c12c0:	4608      	mov	r0, r1
   c12c2:	2100      	movs	r1, #0
   c12c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c12c8:	4b04      	ldr	r3, [pc, #16]	; (c12dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c12ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c12cc:	2301      	movs	r3, #1
  _serial = serial;
   c12ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c12d0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c12d2:	4611      	mov	r1, r2
   c12d4:	f7fc f978 	bl	bd5c8 <HAL_USB_USART_Init>
}
   c12d8:	4620      	mov	r0, r4
   c12da:	bd10      	pop	{r4, pc}
   c12dc:	000c74bc 	.word	0x000c74bc

000c12e0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c12e0:	7c00      	ldrb	r0, [r0, #16]
   c12e2:	2200      	movs	r2, #0
   c12e4:	f7fc b978 	b.w	bd5d8 <HAL_USB_USART_Begin>

000c12e8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c12e8:	7c00      	ldrb	r0, [r0, #16]
   c12ea:	f7fc b97d 	b.w	bd5e8 <HAL_USB_USART_End>

000c12ee <_Z19acquireSerialBufferv>:
{
   c12ee:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c12f0:	2214      	movs	r2, #20
{
   c12f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c12f4:	2100      	movs	r1, #0
   c12f6:	f002 fbeb 	bl	c3ad0 <memset>
}
   c12fa:	4620      	mov	r0, r4
   c12fc:	bd10      	pop	{r4, pc}
	...

000c1300 <_Z16_fetch_usbserialv>:
{
   c1300:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1302:	4c0f      	ldr	r4, [pc, #60]	; (c1340 <_Z16_fetch_usbserialv+0x40>)
{
   c1304:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1306:	a803      	add	r0, sp, #12
   c1308:	f7ff fff1 	bl	c12ee <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c130c:	7821      	ldrb	r1, [r4, #0]
   c130e:	f3bf 8f5b 	dmb	ish
   c1312:	f011 0101 	ands.w	r1, r1, #1
   c1316:	d10f      	bne.n	c1338 <_Z16_fetch_usbserialv+0x38>
   c1318:	4620      	mov	r0, r4
   c131a:	9101      	str	r1, [sp, #4]
   c131c:	f7f2 fed0 	bl	b40c0 <__cxa_guard_acquire>
   c1320:	9901      	ldr	r1, [sp, #4]
   c1322:	b148      	cbz	r0, c1338 <_Z16_fetch_usbserialv+0x38>
   c1324:	aa03      	add	r2, sp, #12
   c1326:	4807      	ldr	r0, [pc, #28]	; (c1344 <_Z16_fetch_usbserialv+0x44>)
   c1328:	f7ff ffc6 	bl	c12b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c132c:	4620      	mov	r0, r4
   c132e:	f7f2 fecc 	bl	b40ca <__cxa_guard_release>
   c1332:	4805      	ldr	r0, [pc, #20]	; (c1348 <_Z16_fetch_usbserialv+0x48>)
   c1334:	f002 fb7e 	bl	c3a34 <atexit>
	return _usbserial;
}
   c1338:	4802      	ldr	r0, [pc, #8]	; (c1344 <_Z16_fetch_usbserialv+0x44>)
   c133a:	b008      	add	sp, #32
   c133c:	bd10      	pop	{r4, pc}
   c133e:	bf00      	nop
   c1340:	2003e708 	.word	0x2003e708
   c1344:	2003e70c 	.word	0x2003e70c
   c1348:	000c1241 	.word	0x000c1241

000c134c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c134c:	4b01      	ldr	r3, [pc, #4]	; (c1354 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c134e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1350:	4770      	bx	lr
   c1352:	bf00      	nop
   c1354:	2003dba0 	.word	0x2003dba0

000c1358 <serialEventRun>:
{
   c1358:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c135a:	4b0b      	ldr	r3, [pc, #44]	; (c1388 <serialEventRun+0x30>)
   c135c:	b143      	cbz	r3, c1370 <serialEventRun+0x18>
   c135e:	f7ff ffcf 	bl	c1300 <_Z16_fetch_usbserialv>
   c1362:	6803      	ldr	r3, [r0, #0]
   c1364:	691b      	ldr	r3, [r3, #16]
   c1366:	4798      	blx	r3
   c1368:	2800      	cmp	r0, #0
   c136a:	dd01      	ble.n	c1370 <serialEventRun+0x18>
        serialEvent();
   c136c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1370:	4b06      	ldr	r3, [pc, #24]	; (c138c <serialEventRun+0x34>)
   c1372:	b143      	cbz	r3, c1386 <serialEventRun+0x2e>
   c1374:	f000 f95c 	bl	c1630 <_Z22__fetch_global_Serial1v>
   c1378:	6803      	ldr	r3, [r0, #0]
   c137a:	691b      	ldr	r3, [r3, #16]
   c137c:	4798      	blx	r3
   c137e:	2800      	cmp	r0, #0
   c1380:	dd01      	ble.n	c1386 <serialEventRun+0x2e>
        serialEvent1();
   c1382:	f3af 8000 	nop.w
}
   c1386:	bd08      	pop	{r3, pc}
	...

000c1390 <_post_loop>:
{
   c1390:	b508      	push	{r3, lr}
	serialEventRun();
   c1392:	f7ff ffe1 	bl	c1358 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1396:	f7fb ff87 	bl	bd2a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c139a:	4b01      	ldr	r3, [pc, #4]	; (c13a0 <_post_loop+0x10>)
   c139c:	6018      	str	r0, [r3, #0]
}
   c139e:	bd08      	pop	{r3, pc}
   c13a0:	2003e728 	.word	0x2003e728

000c13a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c13a4:	4805      	ldr	r0, [pc, #20]	; (c13bc <_Z33system_initialize_user_backup_ramv+0x18>)
   c13a6:	4a06      	ldr	r2, [pc, #24]	; (c13c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c13a8:	4906      	ldr	r1, [pc, #24]	; (c13c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c13aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c13ac:	1a12      	subs	r2, r2, r0
   c13ae:	f002 fb67 	bl	c3a80 <memcpy>
    __backup_sram_signature = signature;
   c13b2:	4b05      	ldr	r3, [pc, #20]	; (c13c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   c13b4:	4a05      	ldr	r2, [pc, #20]	; (c13cc <_Z33system_initialize_user_backup_ramv+0x28>)
   c13b6:	601a      	str	r2, [r3, #0]
}
   c13b8:	bd08      	pop	{r3, pc}
   c13ba:	bf00      	nop
   c13bc:	2003f400 	.word	0x2003f400
   c13c0:	2003f404 	.word	0x2003f404
   c13c4:	000c7e54 	.word	0x000c7e54
   c13c8:	2003f400 	.word	0x2003f400
   c13cc:	9a271c1e 	.word	0x9a271c1e

000c13d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c13d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c13d2:	2300      	movs	r3, #0
   c13d4:	9300      	str	r3, [sp, #0]
   c13d6:	461a      	mov	r2, r3
   c13d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c13dc:	f7fc f9a0 	bl	bd720 <system_ctrl_set_result>
}
   c13e0:	b003      	add	sp, #12
   c13e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c13e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c13e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c13ea:	8843      	ldrh	r3, [r0, #2]
   c13ec:	2b0a      	cmp	r3, #10
   c13ee:	d008      	beq.n	c1402 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c13f0:	2b50      	cmp	r3, #80	; 0x50
   c13f2:	d10b      	bne.n	c140c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c13f4:	4b09      	ldr	r3, [pc, #36]	; (c141c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c13f6:	681b      	ldr	r3, [r3, #0]
   c13f8:	b14b      	cbz	r3, c140e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c13fa:	b003      	add	sp, #12
   c13fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1400:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1402:	f7ff ffe5 	bl	c13d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1406:	b003      	add	sp, #12
   c1408:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c140c:	2300      	movs	r3, #0
   c140e:	9300      	str	r3, [sp, #0]
   c1410:	461a      	mov	r2, r3
   c1412:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1416:	f7fc f983 	bl	bd720 <system_ctrl_set_result>
}
   c141a:	e7f4      	b.n	c1406 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c141c:	2003e724 	.word	0x2003e724

000c1420 <module_user_init_hook>:
{
   c1420:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1422:	4812      	ldr	r0, [pc, #72]	; (c146c <module_user_init_hook+0x4c>)
   c1424:	2100      	movs	r1, #0
   c1426:	f7fc fa6d 	bl	bd904 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c142a:	4b11      	ldr	r3, [pc, #68]	; (c1470 <module_user_init_hook+0x50>)
   c142c:	681a      	ldr	r2, [r3, #0]
   c142e:	4b11      	ldr	r3, [pc, #68]	; (c1474 <module_user_init_hook+0x54>)
   c1430:	429a      	cmp	r2, r3
   c1432:	4b11      	ldr	r3, [pc, #68]	; (c1478 <module_user_init_hook+0x58>)
   c1434:	bf0c      	ite	eq
   c1436:	2201      	moveq	r2, #1
   c1438:	2200      	movne	r2, #0
   c143a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c143c:	d001      	beq.n	c1442 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c143e:	f7ff ffb1 	bl	c13a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1442:	f7fb ff19 	bl	bd278 <HAL_RNG_GetRandomNumber>
   c1446:	4604      	mov	r4, r0
    srand(seed);
   c1448:	f002 fb4a 	bl	c3ae0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c144c:	4b0b      	ldr	r3, [pc, #44]	; (c147c <module_user_init_hook+0x5c>)
   c144e:	b113      	cbz	r3, c1456 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1450:	4620      	mov	r0, r4
   c1452:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1456:	2100      	movs	r1, #0
   c1458:	4808      	ldr	r0, [pc, #32]	; (c147c <module_user_init_hook+0x5c>)
   c145a:	f7fc f993 	bl	bd784 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c145e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1462:	4807      	ldr	r0, [pc, #28]	; (c1480 <module_user_init_hook+0x60>)
   c1464:	2100      	movs	r1, #0
   c1466:	f7fc b951 	b.w	bd70c <system_ctrl_set_app_request_handler>
   c146a:	bf00      	nop
   c146c:	000c134d 	.word	0x000c134d
   c1470:	2003f400 	.word	0x2003f400
   c1474:	9a271c1e 	.word	0x9a271c1e
   c1478:	2003e720 	.word	0x2003e720
   c147c:	00000000 	.word	0x00000000
   c1480:	000c13e9 	.word	0x000c13e9

000c1484 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1484:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1486:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1488:	d902      	bls.n	c1490 <pinAvailable+0xc>
    return false;
   c148a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c148c:	b002      	add	sp, #8
   c148e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1490:	f1a0 030b 	sub.w	r3, r0, #11
   c1494:	2b02      	cmp	r3, #2
   c1496:	d81a      	bhi.n	c14ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1498:	4c17      	ldr	r4, [pc, #92]	; (c14f8 <pinAvailable+0x74>)
   c149a:	7821      	ldrb	r1, [r4, #0]
   c149c:	f3bf 8f5b 	dmb	ish
   c14a0:	f011 0101 	ands.w	r1, r1, #1
   c14a4:	d10b      	bne.n	c14be <pinAvailable+0x3a>
   c14a6:	4620      	mov	r0, r4
   c14a8:	9101      	str	r1, [sp, #4]
   c14aa:	f7f2 fe09 	bl	b40c0 <__cxa_guard_acquire>
   c14ae:	9901      	ldr	r1, [sp, #4]
   c14b0:	b128      	cbz	r0, c14be <pinAvailable+0x3a>
   c14b2:	4812      	ldr	r0, [pc, #72]	; (c14fc <pinAvailable+0x78>)
   c14b4:	f7ff fb5b 	bl	c0b6e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c14b8:	4620      	mov	r0, r4
   c14ba:	f7f2 fe06 	bl	b40ca <__cxa_guard_release>
   c14be:	4b0f      	ldr	r3, [pc, #60]	; (c14fc <pinAvailable+0x78>)
   c14c0:	7818      	ldrb	r0, [r3, #0]
   c14c2:	f7fb fff1 	bl	bd4a8 <hal_spi_is_enabled>
   c14c6:	2800      	cmp	r0, #0
   c14c8:	d1df      	bne.n	c148a <pinAvailable+0x6>
  return true; // 'pin' is available
   c14ca:	2001      	movs	r0, #1
   c14cc:	e7de      	b.n	c148c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c14ce:	2801      	cmp	r0, #1
   c14d0:	d809      	bhi.n	c14e6 <pinAvailable+0x62>
   c14d2:	f000 f86d 	bl	c15b0 <_Z19__fetch_global_Wirev>
   c14d6:	2100      	movs	r1, #0
   c14d8:	7c00      	ldrb	r0, [r0, #16]
   c14da:	f7fb ff7d 	bl	bd3d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c14de:	f080 0001 	eor.w	r0, r0, #1
   c14e2:	b2c0      	uxtb	r0, r0
   c14e4:	e7d2      	b.n	c148c <pinAvailable+0x8>
   c14e6:	3809      	subs	r0, #9
   c14e8:	2801      	cmp	r0, #1
   c14ea:	d8ee      	bhi.n	c14ca <pinAvailable+0x46>
   c14ec:	f000 f8a0 	bl	c1630 <_Z22__fetch_global_Serial1v>
   c14f0:	7c00      	ldrb	r0, [r0, #16]
   c14f2:	f7fc f849 	bl	bd588 <hal_usart_is_enabled>
   c14f6:	e7f2      	b.n	c14de <pinAvailable+0x5a>
   c14f8:	2003dd78 	.word	0x2003dd78
   c14fc:	2003dd7c 	.word	0x2003dd7c

000c1500 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1500:	2825      	cmp	r0, #37	; 0x25
{
   c1502:	b538      	push	{r3, r4, r5, lr}
   c1504:	4604      	mov	r4, r0
   c1506:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1508:	d80a      	bhi.n	c1520 <pinMode+0x20>
   c150a:	29ff      	cmp	r1, #255	; 0xff
   c150c:	d008      	beq.n	c1520 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c150e:	f7ff ffb9 	bl	c1484 <pinAvailable>
   c1512:	b128      	cbz	r0, c1520 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1514:	4629      	mov	r1, r5
   c1516:	4620      	mov	r0, r4
}
   c1518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c151c:	f7fb bee4 	b.w	bd2e8 <HAL_Pin_Mode>
}
   c1520:	bd38      	pop	{r3, r4, r5, pc}

000c1522 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1522:	b538      	push	{r3, r4, r5, lr}
   c1524:	4604      	mov	r4, r0
   c1526:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1528:	f7fb fee6 	bl	bd2f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c152c:	28ff      	cmp	r0, #255	; 0xff
   c152e:	d010      	beq.n	c1552 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1530:	2806      	cmp	r0, #6
   c1532:	d804      	bhi.n	c153e <digitalWrite+0x1c>
   c1534:	234d      	movs	r3, #77	; 0x4d
   c1536:	fa23 f000 	lsr.w	r0, r3, r0
   c153a:	07c3      	lsls	r3, r0, #31
   c153c:	d409      	bmi.n	c1552 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c153e:	4620      	mov	r0, r4
   c1540:	f7ff ffa0 	bl	c1484 <pinAvailable>
   c1544:	b128      	cbz	r0, c1552 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1546:	4629      	mov	r1, r5
   c1548:	4620      	mov	r0, r4
}
   c154a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c154e:	f7fb bedb 	b.w	bd308 <HAL_GPIO_Write>
}
   c1552:	bd38      	pop	{r3, r4, r5, pc}

000c1554 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1554:	280d      	cmp	r0, #13
{
   c1556:	b510      	push	{r4, lr}
   c1558:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c155a:	bf9c      	itt	ls
   c155c:	340e      	addls	r4, #14
   c155e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1560:	4620      	mov	r0, r4
   c1562:	f7ff ff8f 	bl	c1484 <pinAvailable>
   c1566:	b150      	cbz	r0, c157e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1568:	2103      	movs	r1, #3
   c156a:	4620      	mov	r0, r4
   c156c:	f7fb feb4 	bl	bd2d8 <HAL_Validate_Pin_Function>
   c1570:	2803      	cmp	r0, #3
   c1572:	d104      	bne.n	c157e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1574:	4620      	mov	r0, r4
}
   c1576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c157a:	f7fb bedd 	b.w	bd338 <hal_adc_read>
}
   c157e:	2000      	movs	r0, #0
   c1580:	bd10      	pop	{r4, pc}

000c1582 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1582:	4770      	bx	lr

000c1584 <_Z17acquireWireBufferv>:
{
   c1584:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1586:	2520      	movs	r5, #32
   c1588:	2314      	movs	r3, #20
{
   c158a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c158c:	6003      	str	r3, [r0, #0]
   c158e:	6085      	str	r5, [r0, #8]
   c1590:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1592:	4906      	ldr	r1, [pc, #24]	; (c15ac <_Z17acquireWireBufferv+0x28>)
   c1594:	4628      	mov	r0, r5
   c1596:	f000 f871 	bl	c167c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c159a:	4904      	ldr	r1, [pc, #16]	; (c15ac <_Z17acquireWireBufferv+0x28>)
	};
   c159c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c159e:	4628      	mov	r0, r5
   c15a0:	f000 f86c 	bl	c167c <_ZnajRKSt9nothrow_t>
	};
   c15a4:	60e0      	str	r0, [r4, #12]
}
   c15a6:	4620      	mov	r0, r4
   c15a8:	bd38      	pop	{r3, r4, r5, pc}
   c15aa:	bf00      	nop
   c15ac:	000c74e4 	.word	0x000c74e4

000c15b0 <_Z19__fetch_global_Wirev>:
{
   c15b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c15b2:	4d0e      	ldr	r5, [pc, #56]	; (c15ec <_Z19__fetch_global_Wirev+0x3c>)
   c15b4:	7829      	ldrb	r1, [r5, #0]
   c15b6:	f3bf 8f5b 	dmb	ish
   c15ba:	f011 0401 	ands.w	r4, r1, #1
{
   c15be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c15c0:	d111      	bne.n	c15e6 <_Z19__fetch_global_Wirev+0x36>
   c15c2:	4628      	mov	r0, r5
   c15c4:	f7f2 fd7c 	bl	b40c0 <__cxa_guard_acquire>
   c15c8:	b168      	cbz	r0, c15e6 <_Z19__fetch_global_Wirev+0x36>
   c15ca:	a801      	add	r0, sp, #4
   c15cc:	f7ff ffda 	bl	c1584 <_Z17acquireWireBufferv>
   c15d0:	aa01      	add	r2, sp, #4
   c15d2:	4621      	mov	r1, r4
   c15d4:	4806      	ldr	r0, [pc, #24]	; (c15f0 <_Z19__fetch_global_Wirev+0x40>)
   c15d6:	f7fd fec5 	bl	bf364 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c15da:	4628      	mov	r0, r5
   c15dc:	f7f2 fd75 	bl	b40ca <__cxa_guard_release>
   c15e0:	4804      	ldr	r0, [pc, #16]	; (c15f4 <_Z19__fetch_global_Wirev+0x44>)
   c15e2:	f002 fa27 	bl	c3a34 <atexit>
	return wire;
}
   c15e6:	4802      	ldr	r0, [pc, #8]	; (c15f0 <_Z19__fetch_global_Wirev+0x40>)
   c15e8:	b007      	add	sp, #28
   c15ea:	bd30      	pop	{r4, r5, pc}
   c15ec:	2003e72c 	.word	0x2003e72c
   c15f0:	2003e730 	.word	0x2003e730
   c15f4:	000c1583 	.word	0x000c1583

000c15f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c15f8:	4770      	bx	lr
	...

000c15fc <_Z20acquireSerial1Bufferv>:
{
   c15fc:	b538      	push	{r3, r4, r5, lr}
   c15fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1600:	2514      	movs	r5, #20
   c1602:	462a      	mov	r2, r5
   c1604:	2100      	movs	r1, #0
   c1606:	f002 fa63 	bl	c3ad0 <memset>
   c160a:	8025      	strh	r5, [r4, #0]
   c160c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c160e:	4907      	ldr	r1, [pc, #28]	; (c162c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1610:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1612:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1614:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1616:	f000 f831 	bl	c167c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c161a:	4904      	ldr	r1, [pc, #16]	; (c162c <_Z20acquireSerial1Bufferv+0x30>)
    };
   c161c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c161e:	4628      	mov	r0, r5
   c1620:	f000 f82c 	bl	c167c <_ZnajRKSt9nothrow_t>
    };
   c1624:	60e0      	str	r0, [r4, #12]
}
   c1626:	4620      	mov	r0, r4
   c1628:	bd38      	pop	{r3, r4, r5, pc}
   c162a:	bf00      	nop
   c162c:	000c74e4 	.word	0x000c74e4

000c1630 <_Z22__fetch_global_Serial1v>:
{
   c1630:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1632:	4d0e      	ldr	r5, [pc, #56]	; (c166c <_Z22__fetch_global_Serial1v+0x3c>)
   c1634:	7829      	ldrb	r1, [r5, #0]
   c1636:	f3bf 8f5b 	dmb	ish
   c163a:	f011 0401 	ands.w	r4, r1, #1
{
   c163e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1640:	d111      	bne.n	c1666 <_Z22__fetch_global_Serial1v+0x36>
   c1642:	4628      	mov	r0, r5
   c1644:	f7f2 fd3c 	bl	b40c0 <__cxa_guard_acquire>
   c1648:	b168      	cbz	r0, c1666 <_Z22__fetch_global_Serial1v+0x36>
   c164a:	a801      	add	r0, sp, #4
   c164c:	f7ff ffd6 	bl	c15fc <_Z20acquireSerial1Bufferv>
   c1650:	aa01      	add	r2, sp, #4
   c1652:	4621      	mov	r1, r4
   c1654:	4806      	ldr	r0, [pc, #24]	; (c1670 <_Z22__fetch_global_Serial1v+0x40>)
   c1656:	f7ff fdd3 	bl	c1200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c165a:	4628      	mov	r0, r5
   c165c:	f7f2 fd35 	bl	b40ca <__cxa_guard_release>
   c1660:	4804      	ldr	r0, [pc, #16]	; (c1674 <_Z22__fetch_global_Serial1v+0x44>)
   c1662:	f002 f9e7 	bl	c3a34 <atexit>
    return serial1;
}
   c1666:	4802      	ldr	r0, [pc, #8]	; (c1670 <_Z22__fetch_global_Serial1v+0x40>)
   c1668:	b007      	add	sp, #28
   c166a:	bd30      	pop	{r4, r5, pc}
   c166c:	2003e744 	.word	0x2003e744
   c1670:	2003e748 	.word	0x2003e748
   c1674:	000c15f9 	.word	0x000c15f9

000c1678 <_ZnwjRKSt9nothrow_t>:
   c1678:	f7f2 bd0d 	b.w	b4096 <_Znwj>

000c167c <_ZnajRKSt9nothrow_t>:
   c167c:	f7f2 bd0d 	b.w	b409a <_Znaj>

000c1680 <_ZSt25__throw_bad_function_callv>:
   c1680:	b508      	push	{r3, lr}
   c1682:	f7fc f91f 	bl	bd8c4 <abort>
	...

000c1688 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1688:	4901      	ldr	r1, [pc, #4]	; (c1690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c168a:	f000 b8f9 	b.w	c1880 <_ZNKSt9type_infoeqERKS_>
   c168e:	bf00      	nop
   c1690:	000c7500 	.word	0x000c7500

000c1694 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1696:	2400      	movs	r4, #0
   c1698:	2310      	movs	r3, #16
   c169a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c169e:	6803      	ldr	r3, [r0, #0]
   c16a0:	4615      	mov	r5, r2
   c16a2:	699e      	ldr	r6, [r3, #24]
   c16a4:	6812      	ldr	r2, [r2, #0]
   c16a6:	466b      	mov	r3, sp
   c16a8:	e9cd 4400 	strd	r4, r4, [sp]
   c16ac:	47b0      	blx	r6
   c16ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c16b2:	f003 0306 	and.w	r3, r3, #6
   c16b6:	2b06      	cmp	r3, #6
   c16b8:	bf03      	ittte	eq
   c16ba:	9b00      	ldreq	r3, [sp, #0]
   c16bc:	602b      	streq	r3, [r5, #0]
   c16be:	2001      	moveq	r0, #1
   c16c0:	4620      	movne	r0, r4
   c16c2:	b004      	add	sp, #16
   c16c4:	bd70      	pop	{r4, r5, r6, pc}

000c16c6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c16c6:	9800      	ldr	r0, [sp, #0]
   c16c8:	4290      	cmp	r0, r2
   c16ca:	bf14      	ite	ne
   c16cc:	2001      	movne	r0, #1
   c16ce:	2006      	moveq	r0, #6
   c16d0:	4770      	bx	lr
	...

000c16d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c16d4:	b510      	push	{r4, lr}
   c16d6:	4b03      	ldr	r3, [pc, #12]	; (c16e4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c16d8:	6003      	str	r3, [r0, #0]
   c16da:	4604      	mov	r4, r0
   c16dc:	f000 f8cd 	bl	c187a <_ZNSt9type_infoD1Ev>
   c16e0:	4620      	mov	r0, r4
   c16e2:	bd10      	pop	{r4, pc}
   c16e4:	000c7540 	.word	0x000c7540

000c16e8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c16e8:	b510      	push	{r4, lr}
   c16ea:	4604      	mov	r4, r0
   c16ec:	f7ff fff2 	bl	c16d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c16f0:	4620      	mov	r0, r4
   c16f2:	2108      	movs	r1, #8
   c16f4:	f7f2 fcd5 	bl	b40a2 <_ZdlPvj>
   c16f8:	4620      	mov	r0, r4
   c16fa:	bd10      	pop	{r4, pc}

000c16fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c16fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1700:	461f      	mov	r7, r3
   c1702:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1706:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c170a:	4598      	cmp	r8, r3
   c170c:	4606      	mov	r6, r0
   c170e:	4615      	mov	r5, r2
   c1710:	d107      	bne.n	c1722 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1712:	9907      	ldr	r1, [sp, #28]
   c1714:	f000 f8b4 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c1718:	b118      	cbz	r0, c1722 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c171a:	7165      	strb	r5, [r4, #5]
   c171c:	2000      	movs	r0, #0
   c171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1722:	4639      	mov	r1, r7
   c1724:	4630      	mov	r0, r6
   c1726:	f000 f8ab 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c172a:	2800      	cmp	r0, #0
   c172c:	d0f6      	beq.n	c171c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c172e:	2301      	movs	r3, #1
   c1730:	f8c4 8000 	str.w	r8, [r4]
   c1734:	7125      	strb	r5, [r4, #4]
   c1736:	71a3      	strb	r3, [r4, #6]
   c1738:	e7f0      	b.n	c171c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c173a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c173a:	b538      	push	{r3, r4, r5, lr}
   c173c:	4615      	mov	r5, r2
   c173e:	461c      	mov	r4, r3
   c1740:	f000 f89e 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c1744:	b120      	cbz	r0, c1750 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1746:	2308      	movs	r3, #8
   c1748:	60e3      	str	r3, [r4, #12]
   c174a:	2306      	movs	r3, #6
   c174c:	6025      	str	r5, [r4, #0]
   c174e:	7123      	strb	r3, [r4, #4]
   c1750:	bd38      	pop	{r3, r4, r5, pc}

000c1752 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1752:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1754:	4605      	mov	r5, r0
   c1756:	460c      	mov	r4, r1
   c1758:	9201      	str	r2, [sp, #4]
   c175a:	461e      	mov	r6, r3
   c175c:	f000 f890 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c1760:	b950      	cbnz	r0, c1778 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1762:	2e03      	cmp	r6, #3
   c1764:	d808      	bhi.n	c1778 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1766:	6823      	ldr	r3, [r4, #0]
   c1768:	9a01      	ldr	r2, [sp, #4]
   c176a:	695b      	ldr	r3, [r3, #20]
   c176c:	4629      	mov	r1, r5
   c176e:	4620      	mov	r0, r4
   c1770:	b002      	add	sp, #8
   c1772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1776:	4718      	bx	r3
   c1778:	b002      	add	sp, #8
   c177a:	bd70      	pop	{r4, r5, r6, pc}

000c177c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c177c:	b510      	push	{r4, lr}
   c177e:	4b03      	ldr	r3, [pc, #12]	; (c178c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1780:	6003      	str	r3, [r0, #0]
   c1782:	4604      	mov	r4, r0
   c1784:	f7ff ffa6 	bl	c16d4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1788:	4620      	mov	r0, r4
   c178a:	bd10      	pop	{r4, pc}
   c178c:	000c75a0 	.word	0x000c75a0

000c1790 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1790:	b510      	push	{r4, lr}
   c1792:	4604      	mov	r4, r0
   c1794:	f7ff fff2 	bl	c177c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1798:	4620      	mov	r0, r4
   c179a:	210c      	movs	r1, #12
   c179c:	f7f2 fc81 	bl	b40a2 <_ZdlPvj>
   c17a0:	4620      	mov	r0, r4
   c17a2:	bd10      	pop	{r4, pc}

000c17a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c17a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c17a6:	9f08      	ldr	r7, [sp, #32]
   c17a8:	4297      	cmp	r7, r2
   c17aa:	4605      	mov	r5, r0
   c17ac:	460e      	mov	r6, r1
   c17ae:	4614      	mov	r4, r2
   c17b0:	d00a      	beq.n	c17c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c17b2:	68a8      	ldr	r0, [r5, #8]
   c17b4:	6802      	ldr	r2, [r0, #0]
   c17b6:	9708      	str	r7, [sp, #32]
   c17b8:	6a15      	ldr	r5, [r2, #32]
   c17ba:	4631      	mov	r1, r6
   c17bc:	4622      	mov	r2, r4
   c17be:	46ac      	mov	ip, r5
   c17c0:	b003      	add	sp, #12
   c17c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c17c6:	4760      	bx	ip
   c17c8:	4619      	mov	r1, r3
   c17ca:	9301      	str	r3, [sp, #4]
   c17cc:	f000 f858 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c17d0:	9b01      	ldr	r3, [sp, #4]
   c17d2:	2800      	cmp	r0, #0
   c17d4:	d0ed      	beq.n	c17b2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c17d6:	2006      	movs	r0, #6
   c17d8:	b003      	add	sp, #12
   c17da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c17dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c17dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c17e0:	460d      	mov	r5, r1
   c17e2:	4619      	mov	r1, r3
   c17e4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c17e8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c17ec:	4681      	mov	r9, r0
   c17ee:	4617      	mov	r7, r2
   c17f0:	4698      	mov	r8, r3
   c17f2:	f000 f845 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c17f6:	b190      	cbz	r0, c181e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c17f8:	2d00      	cmp	r5, #0
   c17fa:	6034      	str	r4, [r6, #0]
   c17fc:	7137      	strb	r7, [r6, #4]
   c17fe:	db09      	blt.n	c1814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1800:	1961      	adds	r1, r4, r5
   c1802:	458a      	cmp	sl, r1
   c1804:	bf0c      	ite	eq
   c1806:	2106      	moveq	r1, #6
   c1808:	2101      	movne	r1, #1
   c180a:	71b1      	strb	r1, [r6, #6]
   c180c:	2000      	movs	r0, #0
   c180e:	b001      	add	sp, #4
   c1810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1814:	3502      	adds	r5, #2
   c1816:	d1f9      	bne.n	c180c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1818:	2301      	movs	r3, #1
   c181a:	71b3      	strb	r3, [r6, #6]
   c181c:	e7f6      	b.n	c180c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c181e:	4554      	cmp	r4, sl
   c1820:	d106      	bne.n	c1830 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1822:	4659      	mov	r1, fp
   c1824:	4648      	mov	r0, r9
   c1826:	f000 f82b 	bl	c1880 <_ZNKSt9type_infoeqERKS_>
   c182a:	b108      	cbz	r0, c1830 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c182c:	7177      	strb	r7, [r6, #5]
   c182e:	e7ed      	b.n	c180c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1830:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1834:	6803      	ldr	r3, [r0, #0]
   c1836:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c183a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c183e:	69dc      	ldr	r4, [r3, #28]
   c1840:	463a      	mov	r2, r7
   c1842:	4643      	mov	r3, r8
   c1844:	4629      	mov	r1, r5
   c1846:	46a4      	mov	ip, r4
   c1848:	b001      	add	sp, #4
   c184a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c184e:	4760      	bx	ip

000c1850 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1854:	4607      	mov	r7, r0
   c1856:	460c      	mov	r4, r1
   c1858:	4615      	mov	r5, r2
   c185a:	461e      	mov	r6, r3
   c185c:	f7ff ff6d 	bl	c173a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1860:	b948      	cbnz	r0, c1876 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1862:	68b8      	ldr	r0, [r7, #8]
   c1864:	6803      	ldr	r3, [r0, #0]
   c1866:	699f      	ldr	r7, [r3, #24]
   c1868:	462a      	mov	r2, r5
   c186a:	4633      	mov	r3, r6
   c186c:	4621      	mov	r1, r4
   c186e:	46bc      	mov	ip, r7
   c1870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1874:	4760      	bx	ip
   c1876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c187a <_ZNSt9type_infoD1Ev>:
   c187a:	4770      	bx	lr

000c187c <_ZNKSt9type_info14__is_pointer_pEv>:
   c187c:	2000      	movs	r0, #0
   c187e:	4770      	bx	lr

000c1880 <_ZNKSt9type_infoeqERKS_>:
   c1880:	4281      	cmp	r1, r0
   c1882:	b508      	push	{r3, lr}
   c1884:	d00e      	beq.n	c18a4 <_ZNKSt9type_infoeqERKS_+0x24>
   c1886:	6840      	ldr	r0, [r0, #4]
   c1888:	7803      	ldrb	r3, [r0, #0]
   c188a:	2b2a      	cmp	r3, #42	; 0x2a
   c188c:	d00c      	beq.n	c18a8 <_ZNKSt9type_infoeqERKS_+0x28>
   c188e:	6849      	ldr	r1, [r1, #4]
   c1890:	780b      	ldrb	r3, [r1, #0]
   c1892:	2b2a      	cmp	r3, #42	; 0x2a
   c1894:	bf08      	it	eq
   c1896:	3101      	addeq	r1, #1
   c1898:	f002 f976 	bl	c3b88 <strcmp>
   c189c:	fab0 f080 	clz	r0, r0
   c18a0:	0940      	lsrs	r0, r0, #5
   c18a2:	bd08      	pop	{r3, pc}
   c18a4:	2001      	movs	r0, #1
   c18a6:	e7fc      	b.n	c18a2 <_ZNKSt9type_infoeqERKS_+0x22>
   c18a8:	2000      	movs	r0, #0
   c18aa:	e7fa      	b.n	c18a2 <_ZNKSt9type_infoeqERKS_+0x22>

000c18ac <cosf>:
   c18ac:	ee10 3a10 	vmov	r3, s0
   c18b0:	4a18      	ldr	r2, [pc, #96]	; (c1914 <cosf+0x68>)
   c18b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c18b6:	4293      	cmp	r3, r2
   c18b8:	dd1b      	ble.n	c18f2 <cosf+0x46>
   c18ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c18be:	db02      	blt.n	c18c6 <cosf+0x1a>
   c18c0:	ee30 0a40 	vsub.f32	s0, s0, s0
   c18c4:	4770      	bx	lr
   c18c6:	b500      	push	{lr}
   c18c8:	b083      	sub	sp, #12
   c18ca:	4668      	mov	r0, sp
   c18cc:	f000 fb12 	bl	c1ef4 <__ieee754_rem_pio2f>
   c18d0:	f000 0003 	and.w	r0, r0, #3
   c18d4:	2801      	cmp	r0, #1
   c18d6:	eddd 0a01 	vldr	s1, [sp, #4]
   c18da:	ed9d 0a00 	vldr	s0, [sp]
   c18de:	d00c      	beq.n	c18fa <cosf+0x4e>
   c18e0:	2802      	cmp	r0, #2
   c18e2:	d012      	beq.n	c190a <cosf+0x5e>
   c18e4:	b170      	cbz	r0, c1904 <cosf+0x58>
   c18e6:	2001      	movs	r0, #1
   c18e8:	f000 fff6 	bl	c28d8 <__kernel_sinf>
   c18ec:	b003      	add	sp, #12
   c18ee:	f85d fb04 	ldr.w	pc, [sp], #4
   c18f2:	eddf 0a09 	vldr	s1, [pc, #36]	; c1918 <cosf+0x6c>
   c18f6:	f000 bc33 	b.w	c2160 <__kernel_cosf>
   c18fa:	f000 ffed 	bl	c28d8 <__kernel_sinf>
   c18fe:	eeb1 0a40 	vneg.f32	s0, s0
   c1902:	e7f3      	b.n	c18ec <cosf+0x40>
   c1904:	f000 fc2c 	bl	c2160 <__kernel_cosf>
   c1908:	e7f0      	b.n	c18ec <cosf+0x40>
   c190a:	f000 fc29 	bl	c2160 <__kernel_cosf>
   c190e:	eeb1 0a40 	vneg.f32	s0, s0
   c1912:	e7eb      	b.n	c18ec <cosf+0x40>
   c1914:	3f490fd8 	.word	0x3f490fd8
   c1918:	00000000 	.word	0x00000000

000c191c <sinf>:
   c191c:	ee10 3a10 	vmov	r3, s0
   c1920:	4a19      	ldr	r2, [pc, #100]	; (c1988 <sinf+0x6c>)
   c1922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1926:	4293      	cmp	r3, r2
   c1928:	dd1c      	ble.n	c1964 <sinf+0x48>
   c192a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c192e:	db02      	blt.n	c1936 <sinf+0x1a>
   c1930:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1934:	4770      	bx	lr
   c1936:	b500      	push	{lr}
   c1938:	b083      	sub	sp, #12
   c193a:	4668      	mov	r0, sp
   c193c:	f000 fada 	bl	c1ef4 <__ieee754_rem_pio2f>
   c1940:	f000 0003 	and.w	r0, r0, #3
   c1944:	2801      	cmp	r0, #1
   c1946:	eddd 0a01 	vldr	s1, [sp, #4]
   c194a:	ed9d 0a00 	vldr	s0, [sp]
   c194e:	d00e      	beq.n	c196e <sinf+0x52>
   c1950:	2802      	cmp	r0, #2
   c1952:	d013      	beq.n	c197c <sinf+0x60>
   c1954:	b170      	cbz	r0, c1974 <sinf+0x58>
   c1956:	f000 fc03 	bl	c2160 <__kernel_cosf>
   c195a:	eeb1 0a40 	vneg.f32	s0, s0
   c195e:	b003      	add	sp, #12
   c1960:	f85d fb04 	ldr.w	pc, [sp], #4
   c1964:	eddf 0a09 	vldr	s1, [pc, #36]	; c198c <sinf+0x70>
   c1968:	2000      	movs	r0, #0
   c196a:	f000 bfb5 	b.w	c28d8 <__kernel_sinf>
   c196e:	f000 fbf7 	bl	c2160 <__kernel_cosf>
   c1972:	e7f4      	b.n	c195e <sinf+0x42>
   c1974:	2001      	movs	r0, #1
   c1976:	f000 ffaf 	bl	c28d8 <__kernel_sinf>
   c197a:	e7f0      	b.n	c195e <sinf+0x42>
   c197c:	2001      	movs	r0, #1
   c197e:	f000 ffab 	bl	c28d8 <__kernel_sinf>
   c1982:	eeb1 0a40 	vneg.f32	s0, s0
   c1986:	e7ea      	b.n	c195e <sinf+0x42>
   c1988:	3f490fd8 	.word	0x3f490fd8
   c198c:	00000000 	.word	0x00000000

000c1990 <atan2>:
   c1990:	f000 b866 	b.w	c1a60 <__ieee754_atan2>

000c1994 <sqrt>:
   c1994:	b538      	push	{r3, r4, r5, lr}
   c1996:	ed2d 8b02 	vpush	{d8}
   c199a:	ec55 4b10 	vmov	r4, r5, d0
   c199e:	f000 f935 	bl	c1c0c <__ieee754_sqrt>
   c19a2:	4b18      	ldr	r3, [pc, #96]	; (c1a04 <sqrt+0x70>)
   c19a4:	eeb0 8a40 	vmov.f32	s16, s0
   c19a8:	eef0 8a60 	vmov.f32	s17, s1
   c19ac:	f993 3000 	ldrsb.w	r3, [r3]
   c19b0:	3301      	adds	r3, #1
   c19b2:	d00d      	beq.n	c19d0 <sqrt+0x3c>
   c19b4:	4622      	mov	r2, r4
   c19b6:	462b      	mov	r3, r5
   c19b8:	4620      	mov	r0, r4
   c19ba:	4629      	mov	r1, r5
   c19bc:	f001 ff6e 	bl	c389c <__aeabi_dcmpun>
   c19c0:	b930      	cbnz	r0, c19d0 <sqrt+0x3c>
   c19c2:	2200      	movs	r2, #0
   c19c4:	2300      	movs	r3, #0
   c19c6:	4620      	mov	r0, r4
   c19c8:	4629      	mov	r1, r5
   c19ca:	f001 ff3f 	bl	c384c <__aeabi_dcmplt>
   c19ce:	b930      	cbnz	r0, c19de <sqrt+0x4a>
   c19d0:	eeb0 0a48 	vmov.f32	s0, s16
   c19d4:	eef0 0a68 	vmov.f32	s1, s17
   c19d8:	ecbd 8b02 	vpop	{d8}
   c19dc:	bd38      	pop	{r3, r4, r5, pc}
   c19de:	f7fb ff81 	bl	bd8e4 <__errno>
   c19e2:	2200      	movs	r2, #0
   c19e4:	2300      	movs	r3, #0
   c19e6:	2121      	movs	r1, #33	; 0x21
   c19e8:	6001      	str	r1, [r0, #0]
   c19ea:	4610      	mov	r0, r2
   c19ec:	4619      	mov	r1, r3
   c19ee:	f001 fde5 	bl	c35bc <__aeabi_ddiv>
   c19f2:	ec41 0b18 	vmov	d8, r0, r1
   c19f6:	eeb0 0a48 	vmov.f32	s0, s16
   c19fa:	eef0 0a68 	vmov.f32	s1, s17
   c19fe:	ecbd 8b02 	vpop	{d8}
   c1a02:	bd38      	pop	{r3, r4, r5, pc}
   c1a04:	2003db9c 	.word	0x2003db9c

000c1a08 <atan2f>:
   c1a08:	f000 b9cc 	b.w	c1da4 <__ieee754_atan2f>

000c1a0c <sqrtf>:
   c1a0c:	b508      	push	{r3, lr}
   c1a0e:	ed2d 8b02 	vpush	{d8}
   c1a12:	eeb0 8a40 	vmov.f32	s16, s0
   c1a16:	f000 fb9f 	bl	c2158 <__ieee754_sqrtf>
   c1a1a:	4b0e      	ldr	r3, [pc, #56]	; (c1a54 <sqrtf+0x48>)
   c1a1c:	f993 3000 	ldrsb.w	r3, [r3]
   c1a20:	3301      	adds	r3, #1
   c1a22:	d00b      	beq.n	c1a3c <sqrtf+0x30>
   c1a24:	eeb4 8a48 	vcmp.f32	s16, s16
   c1a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1a2c:	d606      	bvs.n	c1a3c <sqrtf+0x30>
   c1a2e:	eddf 8a0a 	vldr	s17, [pc, #40]	; c1a58 <sqrtf+0x4c>
   c1a32:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c1a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1a3a:	d402      	bmi.n	c1a42 <sqrtf+0x36>
   c1a3c:	ecbd 8b02 	vpop	{d8}
   c1a40:	bd08      	pop	{r3, pc}
   c1a42:	f7fb ff4f 	bl	bd8e4 <__errno>
   c1a46:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c1a4a:	ecbd 8b02 	vpop	{d8}
   c1a4e:	2321      	movs	r3, #33	; 0x21
   c1a50:	6003      	str	r3, [r0, #0]
   c1a52:	bd08      	pop	{r3, pc}
   c1a54:	2003db9c 	.word	0x2003db9c
	...

000c1a60 <__ieee754_atan2>:
   c1a60:	ec51 0b11 	vmov	r0, r1, d1
   c1a64:	4243      	negs	r3, r0
   c1a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1a6a:	4303      	orrs	r3, r0
   c1a6c:	4e64      	ldr	r6, [pc, #400]	; (c1c00 <__ieee754_atan2+0x1a0>)
   c1a6e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c1a72:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c1a76:	42b3      	cmp	r3, r6
   c1a78:	ec55 4b10 	vmov	r4, r5, d0
   c1a7c:	d83e      	bhi.n	c1afc <__ieee754_atan2+0x9c>
   c1a7e:	4263      	negs	r3, r4
   c1a80:	4323      	orrs	r3, r4
   c1a82:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c1a86:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c1a8a:	42b3      	cmp	r3, r6
   c1a8c:	46a9      	mov	r9, r5
   c1a8e:	d835      	bhi.n	c1afc <__ieee754_atan2+0x9c>
   c1a90:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c1a94:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c1a98:	4303      	orrs	r3, r0
   c1a9a:	d03e      	beq.n	c1b1a <__ieee754_atan2+0xba>
   c1a9c:	178f      	asrs	r7, r1, #30
   c1a9e:	f007 0702 	and.w	r7, r7, #2
   c1aa2:	ea5a 0304 	orrs.w	r3, sl, r4
   c1aa6:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c1aaa:	d02f      	beq.n	c1b0c <__ieee754_atan2+0xac>
   c1aac:	ea5e 0300 	orrs.w	r3, lr, r0
   c1ab0:	d037      	beq.n	c1b22 <__ieee754_atan2+0xc2>
   c1ab2:	45b6      	cmp	lr, r6
   c1ab4:	d044      	beq.n	c1b40 <__ieee754_atan2+0xe0>
   c1ab6:	45b2      	cmp	sl, r6
   c1ab8:	d033      	beq.n	c1b22 <__ieee754_atan2+0xc2>
   c1aba:	ebaa 0e0e 	sub.w	lr, sl, lr
   c1abe:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c1ac2:	ea4f 532e 	mov.w	r3, lr, asr #20
   c1ac6:	da38      	bge.n	c1b3a <__ieee754_atan2+0xda>
   c1ac8:	2900      	cmp	r1, #0
   c1aca:	da45      	bge.n	c1b58 <__ieee754_atan2+0xf8>
   c1acc:	333c      	adds	r3, #60	; 0x3c
   c1ace:	da43      	bge.n	c1b58 <__ieee754_atan2+0xf8>
   c1ad0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c1bc8 <__ieee754_atan2+0x168>
   c1ad4:	2f01      	cmp	r7, #1
   c1ad6:	d05d      	beq.n	c1b94 <__ieee754_atan2+0x134>
   c1ad8:	2f02      	cmp	r7, #2
   c1ada:	d04a      	beq.n	c1b72 <__ieee754_atan2+0x112>
   c1adc:	b1a7      	cbz	r7, c1b08 <__ieee754_atan2+0xa8>
   c1ade:	ec51 0b10 	vmov	r0, r1, d0
   c1ae2:	a33b      	add	r3, pc, #236	; (adr r3, c1bd0 <__ieee754_atan2+0x170>)
   c1ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1ae8:	f001 fa86 	bl	c2ff8 <__aeabi_dsub>
   c1aec:	a33a      	add	r3, pc, #232	; (adr r3, c1bd8 <__ieee754_atan2+0x178>)
   c1aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1af2:	f001 fa81 	bl	c2ff8 <__aeabi_dsub>
   c1af6:	ec41 0b10 	vmov	d0, r0, r1
   c1afa:	e005      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1afc:	4622      	mov	r2, r4
   c1afe:	462b      	mov	r3, r5
   c1b00:	f001 fa7c 	bl	c2ffc <__adddf3>
   c1b04:	ec41 0b10 	vmov	d0, r0, r1
   c1b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1b0c:	2f02      	cmp	r7, #2
   c1b0e:	d00e      	beq.n	c1b2e <__ieee754_atan2+0xce>
   c1b10:	2f03      	cmp	r7, #3
   c1b12:	d1f9      	bne.n	c1b08 <__ieee754_atan2+0xa8>
   c1b14:	ed9f 0b32 	vldr	d0, [pc, #200]	; c1be0 <__ieee754_atan2+0x180>
   c1b18:	e7f6      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1b1e:	f000 bf23 	b.w	c2968 <atan>
   c1b22:	f1b9 0f00 	cmp.w	r9, #0
   c1b26:	db05      	blt.n	c1b34 <__ieee754_atan2+0xd4>
   c1b28:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c1be8 <__ieee754_atan2+0x188>
   c1b2c:	e7ec      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b2e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c1bd8 <__ieee754_atan2+0x178>
   c1b32:	e7e9      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b34:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c1bf0 <__ieee754_atan2+0x190>
   c1b38:	e7e6      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b3a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c1be8 <__ieee754_atan2+0x188>
   c1b3e:	e7c9      	b.n	c1ad4 <__ieee754_atan2+0x74>
   c1b40:	45f2      	cmp	sl, lr
   c1b42:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c1b46:	d02e      	beq.n	c1ba6 <__ieee754_atan2+0x146>
   c1b48:	2f02      	cmp	r7, #2
   c1b4a:	d834      	bhi.n	c1bb6 <__ieee754_atan2+0x156>
   c1b4c:	4b2d      	ldr	r3, [pc, #180]	; (c1c04 <__ieee754_atan2+0x1a4>)
   c1b4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1b52:	ed97 0b00 	vldr	d0, [r7]
   c1b56:	e7d7      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b58:	4602      	mov	r2, r0
   c1b5a:	460b      	mov	r3, r1
   c1b5c:	4620      	mov	r0, r4
   c1b5e:	4629      	mov	r1, r5
   c1b60:	f001 fd2c 	bl	c35bc <__aeabi_ddiv>
   c1b64:	ec41 0b10 	vmov	d0, r0, r1
   c1b68:	f001 f89e 	bl	c2ca8 <fabs>
   c1b6c:	f000 fefc 	bl	c2968 <atan>
   c1b70:	e7b0      	b.n	c1ad4 <__ieee754_atan2+0x74>
   c1b72:	a317      	add	r3, pc, #92	; (adr r3, c1bd0 <__ieee754_atan2+0x170>)
   c1b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b78:	ec51 0b10 	vmov	r0, r1, d0
   c1b7c:	f001 fa3c 	bl	c2ff8 <__aeabi_dsub>
   c1b80:	4602      	mov	r2, r0
   c1b82:	460b      	mov	r3, r1
   c1b84:	a114      	add	r1, pc, #80	; (adr r1, c1bd8 <__ieee754_atan2+0x178>)
   c1b86:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1b8a:	f001 fa35 	bl	c2ff8 <__aeabi_dsub>
   c1b8e:	ec41 0b10 	vmov	d0, r0, r1
   c1b92:	e7b9      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1b94:	ee10 1a90 	vmov	r1, s1
   c1b98:	ec53 2b10 	vmov	r2, r3, d0
   c1b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1ba0:	ec43 2b10 	vmov	d0, r2, r3
   c1ba4:	e7b0      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1ba6:	2f02      	cmp	r7, #2
   c1ba8:	d808      	bhi.n	c1bbc <__ieee754_atan2+0x15c>
   c1baa:	4b17      	ldr	r3, [pc, #92]	; (c1c08 <__ieee754_atan2+0x1a8>)
   c1bac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1bb0:	ed97 0b00 	vldr	d0, [r7]
   c1bb4:	e7a8      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1bb6:	ed9f 0b04 	vldr	d0, [pc, #16]	; c1bc8 <__ieee754_atan2+0x168>
   c1bba:	e7a5      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1bbc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c1bf8 <__ieee754_atan2+0x198>
   c1bc0:	e7a2      	b.n	c1b08 <__ieee754_atan2+0xa8>
   c1bc2:	bf00      	nop
   c1bc4:	f3af 8000 	nop.w
	...
   c1bd0:	33145c07 	.word	0x33145c07
   c1bd4:	3ca1a626 	.word	0x3ca1a626
   c1bd8:	54442d18 	.word	0x54442d18
   c1bdc:	400921fb 	.word	0x400921fb
   c1be0:	54442d18 	.word	0x54442d18
   c1be4:	c00921fb 	.word	0xc00921fb
   c1be8:	54442d18 	.word	0x54442d18
   c1bec:	3ff921fb 	.word	0x3ff921fb
   c1bf0:	54442d18 	.word	0x54442d18
   c1bf4:	bff921fb 	.word	0xbff921fb
   c1bf8:	54442d18 	.word	0x54442d18
   c1bfc:	3fe921fb 	.word	0x3fe921fb
   c1c00:	7ff00000 	.word	0x7ff00000
   c1c04:	000c75f8 	.word	0x000c75f8
   c1c08:	000c75e0 	.word	0x000c75e0

000c1c0c <__ieee754_sqrt>:
   c1c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1c10:	4a63      	ldr	r2, [pc, #396]	; (c1da0 <__ieee754_sqrt+0x194>)
   c1c12:	ec55 4b10 	vmov	r4, r5, d0
   c1c16:	43aa      	bics	r2, r5
   c1c18:	f000 809f 	beq.w	c1d5a <__ieee754_sqrt+0x14e>
   c1c1c:	2d00      	cmp	r5, #0
   c1c1e:	ee10 ca10 	vmov	ip, s0
   c1c22:	462b      	mov	r3, r5
   c1c24:	dd54      	ble.n	c1cd0 <__ieee754_sqrt+0xc4>
   c1c26:	1529      	asrs	r1, r5, #20
   c1c28:	d063      	beq.n	c1cf2 <__ieee754_sqrt+0xe6>
   c1c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c1c2e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1c32:	07c9      	lsls	r1, r1, #31
   c1c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1c38:	d404      	bmi.n	c1c44 <__ieee754_sqrt+0x38>
   c1c3a:	005b      	lsls	r3, r3, #1
   c1c3c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1c40:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c44:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1c48:	2600      	movs	r6, #0
   c1c4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c1c4e:	107f      	asrs	r7, r7, #1
   c1c50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c54:	f04f 0e16 	mov.w	lr, #22
   c1c58:	4634      	mov	r4, r6
   c1c5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c1c5e:	18a1      	adds	r1, r4, r2
   c1c60:	4299      	cmp	r1, r3
   c1c62:	dc02      	bgt.n	c1c6a <__ieee754_sqrt+0x5e>
   c1c64:	1a5b      	subs	r3, r3, r1
   c1c66:	188c      	adds	r4, r1, r2
   c1c68:	4416      	add	r6, r2
   c1c6a:	005b      	lsls	r3, r3, #1
   c1c6c:	f1be 0e01 	subs.w	lr, lr, #1
   c1c70:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1c74:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1c78:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c7c:	d1ef      	bne.n	c1c5e <__ieee754_sqrt+0x52>
   c1c7e:	4675      	mov	r5, lr
   c1c80:	2020      	movs	r0, #32
   c1c82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1c86:	e00a      	b.n	c1c9e <__ieee754_sqrt+0x92>
   c1c88:	d044      	beq.n	c1d14 <__ieee754_sqrt+0x108>
   c1c8a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c1c8e:	3801      	subs	r0, #1
   c1c90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1c94:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c98:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1c9c:	d043      	beq.n	c1d26 <__ieee754_sqrt+0x11a>
   c1c9e:	42a3      	cmp	r3, r4
   c1ca0:	eb02 010e 	add.w	r1, r2, lr
   c1ca4:	ddf0      	ble.n	c1c88 <__ieee754_sqrt+0x7c>
   c1ca6:	2900      	cmp	r1, #0
   c1ca8:	eb01 0e02 	add.w	lr, r1, r2
   c1cac:	db0a      	blt.n	c1cc4 <__ieee754_sqrt+0xb8>
   c1cae:	46a0      	mov	r8, r4
   c1cb0:	1b1b      	subs	r3, r3, r4
   c1cb2:	4561      	cmp	r1, ip
   c1cb4:	bf88      	it	hi
   c1cb6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c1cba:	ebac 0c01 	sub.w	ip, ip, r1
   c1cbe:	4415      	add	r5, r2
   c1cc0:	4644      	mov	r4, r8
   c1cc2:	e7e2      	b.n	c1c8a <__ieee754_sqrt+0x7e>
   c1cc4:	f1be 0f00 	cmp.w	lr, #0
   c1cc8:	dbf1      	blt.n	c1cae <__ieee754_sqrt+0xa2>
   c1cca:	f104 0801 	add.w	r8, r4, #1
   c1cce:	e7ef      	b.n	c1cb0 <__ieee754_sqrt+0xa4>
   c1cd0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c1cd4:	4322      	orrs	r2, r4
   c1cd6:	d038      	beq.n	c1d4a <__ieee754_sqrt+0x13e>
   c1cd8:	2d00      	cmp	r5, #0
   c1cda:	d14e      	bne.n	c1d7a <__ieee754_sqrt+0x16e>
   c1cdc:	4629      	mov	r1, r5
   c1cde:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c1ce2:	3915      	subs	r1, #21
   c1ce4:	4613      	mov	r3, r2
   c1ce6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c1cea:	2a00      	cmp	r2, #0
   c1cec:	d0f7      	beq.n	c1cde <__ieee754_sqrt+0xd2>
   c1cee:	02d6      	lsls	r6, r2, #11
   c1cf0:	d450      	bmi.n	c1d94 <__ieee754_sqrt+0x188>
   c1cf2:	2000      	movs	r0, #0
   c1cf4:	005b      	lsls	r3, r3, #1
   c1cf6:	02dd      	lsls	r5, r3, #11
   c1cf8:	4604      	mov	r4, r0
   c1cfa:	f100 0001 	add.w	r0, r0, #1
   c1cfe:	d5f9      	bpl.n	c1cf4 <__ieee754_sqrt+0xe8>
   c1d00:	461a      	mov	r2, r3
   c1d02:	4663      	mov	r3, ip
   c1d04:	fa0c fc00 	lsl.w	ip, ip, r0
   c1d08:	f1c0 0020 	rsb	r0, r0, #32
   c1d0c:	40c3      	lsrs	r3, r0
   c1d0e:	1b09      	subs	r1, r1, r4
   c1d10:	4313      	orrs	r3, r2
   c1d12:	e78a      	b.n	c1c2a <__ieee754_sqrt+0x1e>
   c1d14:	4561      	cmp	r1, ip
   c1d16:	d8b8      	bhi.n	c1c8a <__ieee754_sqrt+0x7e>
   c1d18:	2900      	cmp	r1, #0
   c1d1a:	eb01 0e02 	add.w	lr, r1, r2
   c1d1e:	dbd1      	blt.n	c1cc4 <__ieee754_sqrt+0xb8>
   c1d20:	4698      	mov	r8, r3
   c1d22:	2300      	movs	r3, #0
   c1d24:	e7c9      	b.n	c1cba <__ieee754_sqrt+0xae>
   c1d26:	ea53 030c 	orrs.w	r3, r3, ip
   c1d2a:	d110      	bne.n	c1d4e <__ieee754_sqrt+0x142>
   c1d2c:	0868      	lsrs	r0, r5, #1
   c1d2e:	1071      	asrs	r1, r6, #1
   c1d30:	07f3      	lsls	r3, r6, #31
   c1d32:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c1d36:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c1d3a:	bf48      	it	mi
   c1d3c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c1d40:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c1d44:	4602      	mov	r2, r0
   c1d46:	ec43 2b10 	vmov	d0, r2, r3
   c1d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1d4e:	1c6a      	adds	r2, r5, #1
   c1d50:	bf16      	itet	ne
   c1d52:	1c68      	addne	r0, r5, #1
   c1d54:	3601      	addeq	r6, #1
   c1d56:	0840      	lsrne	r0, r0, #1
   c1d58:	e7e9      	b.n	c1d2e <__ieee754_sqrt+0x122>
   c1d5a:	ee10 2a10 	vmov	r2, s0
   c1d5e:	ee10 0a10 	vmov	r0, s0
   c1d62:	462b      	mov	r3, r5
   c1d64:	4629      	mov	r1, r5
   c1d66:	f001 faff 	bl	c3368 <__aeabi_dmul>
   c1d6a:	4622      	mov	r2, r4
   c1d6c:	462b      	mov	r3, r5
   c1d6e:	f001 f945 	bl	c2ffc <__adddf3>
   c1d72:	ec41 0b10 	vmov	d0, r0, r1
   c1d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1d7a:	ee10 2a10 	vmov	r2, s0
   c1d7e:	4620      	mov	r0, r4
   c1d80:	4629      	mov	r1, r5
   c1d82:	f001 f939 	bl	c2ff8 <__aeabi_dsub>
   c1d86:	4602      	mov	r2, r0
   c1d88:	460b      	mov	r3, r1
   c1d8a:	f001 fc17 	bl	c35bc <__aeabi_ddiv>
   c1d8e:	ec41 0b10 	vmov	d0, r0, r1
   c1d92:	e7da      	b.n	c1d4a <__ieee754_sqrt+0x13e>
   c1d94:	4663      	mov	r3, ip
   c1d96:	2020      	movs	r0, #32
   c1d98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c1d9c:	e7b6      	b.n	c1d0c <__ieee754_sqrt+0x100>
   c1d9e:	bf00      	nop
   c1da0:	7ff00000 	.word	0x7ff00000

000c1da4 <__ieee754_atan2f>:
   c1da4:	b510      	push	{r4, lr}
   c1da6:	b082      	sub	sp, #8
   c1da8:	edcd 0a01 	vstr	s1, [sp, #4]
   c1dac:	9b01      	ldr	r3, [sp, #4]
   c1dae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c1db2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1db6:	eef0 7a40 	vmov.f32	s15, s0
   c1dba:	dc30      	bgt.n	c1e1e <__ieee754_atan2f+0x7a>
   c1dbc:	ee10 0a10 	vmov	r0, s0
   c1dc0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c1dc4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1dc8:	dc29      	bgt.n	c1e1e <__ieee754_atan2f+0x7a>
   c1dca:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c1dce:	d042      	beq.n	c1e56 <__ieee754_atan2f+0xb2>
   c1dd0:	179c      	asrs	r4, r3, #30
   c1dd2:	f004 0402 	and.w	r4, r4, #2
   c1dd6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c1dda:	b331      	cbz	r1, c1e2a <__ieee754_atan2f+0x86>
   c1ddc:	b37a      	cbz	r2, c1e3e <__ieee754_atan2f+0x9a>
   c1dde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1de2:	d040      	beq.n	c1e66 <__ieee754_atan2f+0xc2>
   c1de4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1de8:	d029      	beq.n	c1e3e <__ieee754_atan2f+0x9a>
   c1dea:	1a8a      	subs	r2, r1, r2
   c1dec:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c1df0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c1df4:	da34      	bge.n	c1e60 <__ieee754_atan2f+0xbc>
   c1df6:	2b00      	cmp	r3, #0
   c1df8:	da42      	bge.n	c1e80 <__ieee754_atan2f+0xdc>
   c1dfa:	313c      	adds	r1, #60	; 0x3c
   c1dfc:	da40      	bge.n	c1e80 <__ieee754_atan2f+0xdc>
   c1dfe:	ed9f 0a34 	vldr	s0, [pc, #208]	; c1ed0 <__ieee754_atan2f+0x12c>
   c1e02:	2c01      	cmp	r4, #1
   c1e04:	d04e      	beq.n	c1ea4 <__ieee754_atan2f+0x100>
   c1e06:	2c02      	cmp	r4, #2
   c1e08:	d043      	beq.n	c1e92 <__ieee754_atan2f+0xee>
   c1e0a:	b164      	cbz	r4, c1e26 <__ieee754_atan2f+0x82>
   c1e0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; c1ed4 <__ieee754_atan2f+0x130>
   c1e10:	eddf 7a31 	vldr	s15, [pc, #196]	; c1ed8 <__ieee754_atan2f+0x134>
   c1e14:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1e18:	ee30 0a67 	vsub.f32	s0, s0, s15
   c1e1c:	e003      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1e1e:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1e22:	ee37 0a27 	vadd.f32	s0, s14, s15
   c1e26:	b002      	add	sp, #8
   c1e28:	bd10      	pop	{r4, pc}
   c1e2a:	2c02      	cmp	r4, #2
   c1e2c:	d010      	beq.n	c1e50 <__ieee754_atan2f+0xac>
   c1e2e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c1edc <__ieee754_atan2f+0x138>
   c1e32:	2c03      	cmp	r4, #3
   c1e34:	bf18      	it	ne
   c1e36:	eeb0 0a67 	vmovne.f32	s0, s15
   c1e3a:	b002      	add	sp, #8
   c1e3c:	bd10      	pop	{r4, pc}
   c1e3e:	ed9f 0a28 	vldr	s0, [pc, #160]	; c1ee0 <__ieee754_atan2f+0x13c>
   c1e42:	eddf 7a28 	vldr	s15, [pc, #160]	; c1ee4 <__ieee754_atan2f+0x140>
   c1e46:	2800      	cmp	r0, #0
   c1e48:	bfb8      	it	lt
   c1e4a:	eeb0 0a67 	vmovlt.f32	s0, s15
   c1e4e:	e7ea      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1e50:	ed9f 0a21 	vldr	s0, [pc, #132]	; c1ed8 <__ieee754_atan2f+0x134>
   c1e54:	e7e7      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1e56:	b002      	add	sp, #8
   c1e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1e5c:	f000 bf2e 	b.w	c2cbc <atanf>
   c1e60:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c1ee0 <__ieee754_atan2f+0x13c>
   c1e64:	e7cd      	b.n	c1e02 <__ieee754_atan2f+0x5e>
   c1e66:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1e6a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c1e6e:	d020      	beq.n	c1eb2 <__ieee754_atan2f+0x10e>
   c1e70:	2c02      	cmp	r4, #2
   c1e72:	d826      	bhi.n	c1ec2 <__ieee754_atan2f+0x11e>
   c1e74:	4b1c      	ldr	r3, [pc, #112]	; (c1ee8 <__ieee754_atan2f+0x144>)
   c1e76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1e7a:	ed94 0a00 	vldr	s0, [r4]
   c1e7e:	e7d2      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1e80:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1e84:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c1e88:	f000 fff2 	bl	c2e70 <fabsf>
   c1e8c:	f000 ff16 	bl	c2cbc <atanf>
   c1e90:	e7b7      	b.n	c1e02 <__ieee754_atan2f+0x5e>
   c1e92:	ed9f 7a10 	vldr	s14, [pc, #64]	; c1ed4 <__ieee754_atan2f+0x130>
   c1e96:	eddf 7a10 	vldr	s15, [pc, #64]	; c1ed8 <__ieee754_atan2f+0x134>
   c1e9a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1e9e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c1ea2:	e7c0      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1ea4:	ee10 3a10 	vmov	r3, s0
   c1ea8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c1eac:	ee00 3a10 	vmov	s0, r3
   c1eb0:	e7b9      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1eb2:	2c02      	cmp	r4, #2
   c1eb4:	d808      	bhi.n	c1ec8 <__ieee754_atan2f+0x124>
   c1eb6:	4b0d      	ldr	r3, [pc, #52]	; (c1eec <__ieee754_atan2f+0x148>)
   c1eb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1ebc:	ed94 0a00 	vldr	s0, [r4]
   c1ec0:	e7b1      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1ec2:	ed9f 0a03 	vldr	s0, [pc, #12]	; c1ed0 <__ieee754_atan2f+0x12c>
   c1ec6:	e7ae      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1ec8:	ed9f 0a09 	vldr	s0, [pc, #36]	; c1ef0 <__ieee754_atan2f+0x14c>
   c1ecc:	e7ab      	b.n	c1e26 <__ieee754_atan2f+0x82>
   c1ece:	bf00      	nop
   c1ed0:	00000000 	.word	0x00000000
   c1ed4:	33bbbd2e 	.word	0x33bbbd2e
   c1ed8:	40490fdb 	.word	0x40490fdb
   c1edc:	c0490fdb 	.word	0xc0490fdb
   c1ee0:	3fc90fdb 	.word	0x3fc90fdb
   c1ee4:	bfc90fdb 	.word	0xbfc90fdb
   c1ee8:	000c761c 	.word	0x000c761c
   c1eec:	000c7610 	.word	0x000c7610
   c1ef0:	3f490fdb 	.word	0x3f490fdb

000c1ef4 <__ieee754_rem_pio2f>:
   c1ef4:	b570      	push	{r4, r5, r6, lr}
   c1ef6:	ee10 3a10 	vmov	r3, s0
   c1efa:	4a89      	ldr	r2, [pc, #548]	; (c2120 <__ieee754_rem_pio2f+0x22c>)
   c1efc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c1f00:	4294      	cmp	r4, r2
   c1f02:	b086      	sub	sp, #24
   c1f04:	4605      	mov	r5, r0
   c1f06:	dd70      	ble.n	c1fea <__ieee754_rem_pio2f+0xf6>
   c1f08:	4a86      	ldr	r2, [pc, #536]	; (c2124 <__ieee754_rem_pio2f+0x230>)
   c1f0a:	4294      	cmp	r4, r2
   c1f0c:	ee10 6a10 	vmov	r6, s0
   c1f10:	dc22      	bgt.n	c1f58 <__ieee754_rem_pio2f+0x64>
   c1f12:	2b00      	cmp	r3, #0
   c1f14:	eddf 7a84 	vldr	s15, [pc, #528]	; c2128 <__ieee754_rem_pio2f+0x234>
   c1f18:	4a84      	ldr	r2, [pc, #528]	; (c212c <__ieee754_rem_pio2f+0x238>)
   c1f1a:	f024 040f 	bic.w	r4, r4, #15
   c1f1e:	eeb0 7a40 	vmov.f32	s14, s0
   c1f22:	f340 80e4 	ble.w	c20ee <__ieee754_rem_pio2f+0x1fa>
   c1f26:	4294      	cmp	r4, r2
   c1f28:	ee70 7a67 	vsub.f32	s15, s0, s15
   c1f2c:	bf09      	itett	eq
   c1f2e:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2130 <__ieee754_rem_pio2f+0x23c>
   c1f32:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2134 <__ieee754_rem_pio2f+0x240>
   c1f36:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2138 <__ieee754_rem_pio2f+0x244>
   c1f3a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c1f3e:	2001      	movs	r0, #1
   c1f40:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c1f44:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c1f48:	edc5 6a00 	vstr	s13, [r5]
   c1f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f50:	edc5 7a01 	vstr	s15, [r5, #4]
   c1f54:	b006      	add	sp, #24
   c1f56:	bd70      	pop	{r4, r5, r6, pc}
   c1f58:	4a78      	ldr	r2, [pc, #480]	; (c213c <__ieee754_rem_pio2f+0x248>)
   c1f5a:	4294      	cmp	r4, r2
   c1f5c:	dd54      	ble.n	c2008 <__ieee754_rem_pio2f+0x114>
   c1f5e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c1f62:	da49      	bge.n	c1ff8 <__ieee754_rem_pio2f+0x104>
   c1f64:	15e2      	asrs	r2, r4, #23
   c1f66:	3a86      	subs	r2, #134	; 0x86
   c1f68:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c1f6c:	ee07 3a90 	vmov	s15, r3
   c1f70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1f74:	eddf 6a72 	vldr	s13, [pc, #456]	; c2140 <__ieee754_rem_pio2f+0x24c>
   c1f78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f80:	ed8d 7a03 	vstr	s14, [sp, #12]
   c1f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1f88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1f8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f94:	ed8d 7a04 	vstr	s14, [sp, #16]
   c1f98:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1fa4:	edcd 7a05 	vstr	s15, [sp, #20]
   c1fa8:	f040 8090 	bne.w	c20cc <__ieee754_rem_pio2f+0x1d8>
   c1fac:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c1fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1fb4:	bf14      	ite	ne
   c1fb6:	2302      	movne	r3, #2
   c1fb8:	2301      	moveq	r3, #1
   c1fba:	4962      	ldr	r1, [pc, #392]	; (c2144 <__ieee754_rem_pio2f+0x250>)
   c1fbc:	9101      	str	r1, [sp, #4]
   c1fbe:	2102      	movs	r1, #2
   c1fc0:	9100      	str	r1, [sp, #0]
   c1fc2:	a803      	add	r0, sp, #12
   c1fc4:	4629      	mov	r1, r5
   c1fc6:	f000 f94d 	bl	c2264 <__kernel_rem_pio2f>
   c1fca:	2e00      	cmp	r6, #0
   c1fcc:	dac2      	bge.n	c1f54 <__ieee754_rem_pio2f+0x60>
   c1fce:	ed95 7a00 	vldr	s14, [r5]
   c1fd2:	edd5 7a01 	vldr	s15, [r5, #4]
   c1fd6:	eeb1 7a47 	vneg.f32	s14, s14
   c1fda:	eef1 7a67 	vneg.f32	s15, s15
   c1fde:	ed85 7a00 	vstr	s14, [r5]
   c1fe2:	edc5 7a01 	vstr	s15, [r5, #4]
   c1fe6:	4240      	negs	r0, r0
   c1fe8:	e7b4      	b.n	c1f54 <__ieee754_rem_pio2f+0x60>
   c1fea:	2200      	movs	r2, #0
   c1fec:	ed85 0a00 	vstr	s0, [r5]
   c1ff0:	6042      	str	r2, [r0, #4]
   c1ff2:	2000      	movs	r0, #0
   c1ff4:	b006      	add	sp, #24
   c1ff6:	bd70      	pop	{r4, r5, r6, pc}
   c1ff8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c1ffc:	2000      	movs	r0, #0
   c1ffe:	edc5 7a01 	vstr	s15, [r5, #4]
   c2002:	edc5 7a00 	vstr	s15, [r5]
   c2006:	e7a5      	b.n	c1f54 <__ieee754_rem_pio2f+0x60>
   c2008:	f000 ff32 	bl	c2e70 <fabsf>
   c200c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2148 <__ieee754_rem_pio2f+0x254>
   c2010:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2128 <__ieee754_rem_pio2f+0x234>
   c2014:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2018:	eee0 7a07 	vfma.f32	s15, s0, s14
   c201c:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2134 <__ieee754_rem_pio2f+0x240>
   c2020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2024:	ee17 0a90 	vmov	r0, s15
   c2028:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c202c:	281f      	cmp	r0, #31
   c202e:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2032:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2036:	eeb1 6a66 	vneg.f32	s12, s13
   c203a:	dc1e      	bgt.n	c207a <__ieee754_rem_pio2f+0x186>
   c203c:	4a43      	ldr	r2, [pc, #268]	; (c214c <__ieee754_rem_pio2f+0x258>)
   c203e:	1e41      	subs	r1, r0, #1
   c2040:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2044:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2048:	4293      	cmp	r3, r2
   c204a:	d016      	beq.n	c207a <__ieee754_rem_pio2f+0x186>
   c204c:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2050:	ed85 7a00 	vstr	s14, [r5]
   c2054:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2058:	2e00      	cmp	r6, #0
   c205a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c205e:	ed85 0a01 	vstr	s0, [r5, #4]
   c2062:	f6bf af77 	bge.w	c1f54 <__ieee754_rem_pio2f+0x60>
   c2066:	eeb1 7a47 	vneg.f32	s14, s14
   c206a:	eeb1 0a40 	vneg.f32	s0, s0
   c206e:	ed85 7a00 	vstr	s14, [r5]
   c2072:	ed85 0a01 	vstr	s0, [r5, #4]
   c2076:	4240      	negs	r0, r0
   c2078:	e76c      	b.n	c1f54 <__ieee754_rem_pio2f+0x60>
   c207a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c207e:	15e2      	asrs	r2, r4, #23
   c2080:	ee17 3a10 	vmov	r3, s14
   c2084:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2088:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c208c:	2c08      	cmp	r4, #8
   c208e:	dddf      	ble.n	c2050 <__ieee754_rem_pio2f+0x15c>
   c2090:	eddf 7a27 	vldr	s15, [pc, #156]	; c2130 <__ieee754_rem_pio2f+0x23c>
   c2094:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2138 <__ieee754_rem_pio2f+0x244>
   c2098:	eef0 5a40 	vmov.f32	s11, s0
   c209c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c20a0:	ee30 0a65 	vsub.f32	s0, s0, s11
   c20a4:	eea6 0a27 	vfma.f32	s0, s12, s15
   c20a8:	eef0 7a40 	vmov.f32	s15, s0
   c20ac:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c20b0:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c20b4:	ee17 3a10 	vmov	r3, s14
   c20b8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c20bc:	1ad2      	subs	r2, r2, r3
   c20be:	2a19      	cmp	r2, #25
   c20c0:	dc06      	bgt.n	c20d0 <__ieee754_rem_pio2f+0x1dc>
   c20c2:	eeb0 0a65 	vmov.f32	s0, s11
   c20c6:	ed85 7a00 	vstr	s14, [r5]
   c20ca:	e7c3      	b.n	c2054 <__ieee754_rem_pio2f+0x160>
   c20cc:	2303      	movs	r3, #3
   c20ce:	e774      	b.n	c1fba <__ieee754_rem_pio2f+0xc6>
   c20d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2150 <__ieee754_rem_pio2f+0x25c>
   c20d4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2154 <__ieee754_rem_pio2f+0x260>
   c20d8:	eeb0 0a65 	vmov.f32	s0, s11
   c20dc:	eea6 0a07 	vfma.f32	s0, s12, s14
   c20e0:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c20e4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c20e8:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c20ec:	e7ae      	b.n	c204c <__ieee754_rem_pio2f+0x158>
   c20ee:	4294      	cmp	r4, r2
   c20f0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c20f4:	bf09      	itett	eq
   c20f6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2130 <__ieee754_rem_pio2f+0x23c>
   c20fa:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2134 <__ieee754_rem_pio2f+0x240>
   c20fe:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2138 <__ieee754_rem_pio2f+0x244>
   c2102:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c210a:	ee77 6a87 	vadd.f32	s13, s15, s14
   c210e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2112:	edc5 6a00 	vstr	s13, [r5]
   c2116:	ee77 7a87 	vadd.f32	s15, s15, s14
   c211a:	edc5 7a01 	vstr	s15, [r5, #4]
   c211e:	e719      	b.n	c1f54 <__ieee754_rem_pio2f+0x60>
   c2120:	3f490fd8 	.word	0x3f490fd8
   c2124:	4016cbe3 	.word	0x4016cbe3
   c2128:	3fc90f80 	.word	0x3fc90f80
   c212c:	3fc90fd0 	.word	0x3fc90fd0
   c2130:	37354400 	.word	0x37354400
   c2134:	37354443 	.word	0x37354443
   c2138:	2e85a308 	.word	0x2e85a308
   c213c:	43490f80 	.word	0x43490f80
   c2140:	43800000 	.word	0x43800000
   c2144:	000c76a8 	.word	0x000c76a8
   c2148:	3f22f984 	.word	0x3f22f984
   c214c:	000c7628 	.word	0x000c7628
   c2150:	2e85a300 	.word	0x2e85a300
   c2154:	248d3132 	.word	0x248d3132

000c2158 <__ieee754_sqrtf>:
   c2158:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c215c:	4770      	bx	lr
   c215e:	bf00      	nop

000c2160 <__kernel_cosf>:
   c2160:	ee10 3a10 	vmov	r3, s0
   c2164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2168:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c216c:	da2c      	bge.n	c21c8 <__kernel_cosf+0x68>
   c216e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2172:	ee17 3a90 	vmov	r3, s15
   c2176:	2b00      	cmp	r3, #0
   c2178:	d060      	beq.n	c223c <__kernel_cosf+0xdc>
   c217a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c217e:	eddf 7a31 	vldr	s15, [pc, #196]	; c2244 <__kernel_cosf+0xe4>
   c2182:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2248 <__kernel_cosf+0xe8>
   c2186:	eddf 5a31 	vldr	s11, [pc, #196]	; c224c <__kernel_cosf+0xec>
   c218a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2250 <__kernel_cosf+0xf0>
   c218e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2254 <__kernel_cosf+0xf4>
   c2192:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2196:	eddf 7a30 	vldr	s15, [pc, #192]	; c2258 <__kernel_cosf+0xf8>
   c219a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c219e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c21a2:	eee7 7a06 	vfma.f32	s15, s14, s12
   c21a6:	eee7 6a27 	vfma.f32	s13, s14, s15
   c21aa:	ee67 6a26 	vmul.f32	s13, s14, s13
   c21ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c21b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c21b6:	eee7 0a26 	vfma.f32	s1, s14, s13
   c21ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c21be:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c21c2:	ee30 0a60 	vsub.f32	s0, s0, s1
   c21c6:	4770      	bx	lr
   c21c8:	ee20 7a00 	vmul.f32	s14, s0, s0
   c21cc:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2244 <__kernel_cosf+0xe4>
   c21d0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2248 <__kernel_cosf+0xe8>
   c21d4:	eddf 5a1d 	vldr	s11, [pc, #116]	; c224c <__kernel_cosf+0xec>
   c21d8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2250 <__kernel_cosf+0xf0>
   c21dc:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2254 <__kernel_cosf+0xf4>
   c21e0:	4a1e      	ldr	r2, [pc, #120]	; (c225c <__kernel_cosf+0xfc>)
   c21e2:	eea7 5a27 	vfma.f32	s10, s14, s15
   c21e6:	4293      	cmp	r3, r2
   c21e8:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2258 <__kernel_cosf+0xf8>
   c21ec:	eee5 5a07 	vfma.f32	s11, s10, s14
   c21f0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c21f4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c21f8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c21fc:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2200:	ddd5      	ble.n	c21ae <__kernel_cosf+0x4e>
   c2202:	4a17      	ldr	r2, [pc, #92]	; (c2260 <__kernel_cosf+0x100>)
   c2204:	4293      	cmp	r3, r2
   c2206:	dc14      	bgt.n	c2232 <__kernel_cosf+0xd2>
   c2208:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c220c:	ee07 3a90 	vmov	s15, r3
   c2210:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2214:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2218:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c221c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2220:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2224:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2228:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c222c:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2230:	4770      	bx	lr
   c2232:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2236:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c223a:	e7ed      	b.n	c2218 <__kernel_cosf+0xb8>
   c223c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2240:	4770      	bx	lr
   c2242:	bf00      	nop
   c2244:	ad47d74e 	.word	0xad47d74e
   c2248:	310f74f6 	.word	0x310f74f6
   c224c:	b493f27c 	.word	0xb493f27c
   c2250:	37d00d01 	.word	0x37d00d01
   c2254:	3d2aaaab 	.word	0x3d2aaaab
   c2258:	bab60b61 	.word	0xbab60b61
   c225c:	3e999999 	.word	0x3e999999
   c2260:	3f480000 	.word	0x3f480000

000c2264 <__kernel_rem_pio2f>:
   c2264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2268:	ed2d 8b04 	vpush	{d8-d9}
   c226c:	b0db      	sub	sp, #364	; 0x16c
   c226e:	461c      	mov	r4, r3
   c2270:	9303      	str	r3, [sp, #12]
   c2272:	9106      	str	r1, [sp, #24]
   c2274:	4ba3      	ldr	r3, [pc, #652]	; (c2504 <__kernel_rem_pio2f+0x2a0>)
   c2276:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2278:	9208      	str	r2, [sp, #32]
   c227a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c227e:	1d11      	adds	r1, r2, #4
   c2280:	4682      	mov	sl, r0
   c2282:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2286:	f2c0 82a2 	blt.w	c27ce <__kernel_rem_pio2f+0x56a>
   c228a:	1ed3      	subs	r3, r2, #3
   c228c:	bf44      	itt	mi
   c228e:	4613      	movmi	r3, r2
   c2290:	3304      	addmi	r3, #4
   c2292:	10db      	asrs	r3, r3, #3
   c2294:	9302      	str	r3, [sp, #8]
   c2296:	3301      	adds	r3, #1
   c2298:	00db      	lsls	r3, r3, #3
   c229a:	9307      	str	r3, [sp, #28]
   c229c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c22a0:	1a9b      	subs	r3, r3, r2
   c22a2:	9305      	str	r3, [sp, #20]
   c22a4:	9b02      	ldr	r3, [sp, #8]
   c22a6:	eb15 0108 	adds.w	r1, r5, r8
   c22aa:	eba3 0308 	sub.w	r3, r3, r8
   c22ae:	d416      	bmi.n	c22de <__kernel_rem_pio2f+0x7a>
   c22b0:	3101      	adds	r1, #1
   c22b2:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2508 <__kernel_rem_pio2f+0x2a4>
   c22b6:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c22b8:	4419      	add	r1, r3
   c22ba:	aa1e      	add	r2, sp, #120	; 0x78
   c22bc:	2b00      	cmp	r3, #0
   c22be:	bfa4      	itt	ge
   c22c0:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c22c4:	ee07 4a90 	vmovge	s15, r4
   c22c8:	f103 0301 	add.w	r3, r3, #1
   c22cc:	bfac      	ite	ge
   c22ce:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c22d2:	eef0 7a47 	vmovlt.f32	s15, s14
   c22d6:	428b      	cmp	r3, r1
   c22d8:	ece2 7a01 	vstmia	r2!, {s15}
   c22dc:	d1ee      	bne.n	c22bc <__kernel_rem_pio2f+0x58>
   c22de:	2d00      	cmp	r5, #0
   c22e0:	f2c0 82e5 	blt.w	c28ae <__kernel_rem_pio2f+0x64a>
   c22e4:	9b03      	ldr	r3, [sp, #12]
   c22e6:	a91e      	add	r1, sp, #120	; 0x78
   c22e8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c22ec:	ae46      	add	r6, sp, #280	; 0x118
   c22ee:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c22f2:	4640      	mov	r0, r8
   c22f4:	18ef      	adds	r7, r5, r3
   c22f6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c22fa:	f1b8 0f00 	cmp.w	r8, #0
   c22fe:	eddf 7a82 	vldr	s15, [pc, #520]	; c2508 <__kernel_rem_pio2f+0x2a4>
   c2302:	db09      	blt.n	c2318 <__kernel_rem_pio2f+0xb4>
   c2304:	4622      	mov	r2, r4
   c2306:	4653      	mov	r3, sl
   c2308:	ecf3 6a01 	vldmia	r3!, {s13}
   c230c:	ed32 7a01 	vldmdb	r2!, {s14}
   c2310:	428b      	cmp	r3, r1
   c2312:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2316:	d1f7      	bne.n	c2308 <__kernel_rem_pio2f+0xa4>
   c2318:	3001      	adds	r0, #1
   c231a:	42b8      	cmp	r0, r7
   c231c:	ece6 7a01 	vstmia	r6!, {s15}
   c2320:	f104 0404 	add.w	r4, r4, #4
   c2324:	d1e9      	bne.n	c22fa <__kernel_rem_pio2f+0x96>
   c2326:	ab09      	add	r3, sp, #36	; 0x24
   c2328:	af0a      	add	r7, sp, #40	; 0x28
   c232a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c232e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2332:	3b08      	subs	r3, #8
   c2334:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2510 <__kernel_rem_pio2f+0x2ac>
   c2338:	eddf 8a74 	vldr	s17, [pc, #464]	; c250c <__kernel_rem_pio2f+0x2a8>
   c233c:	9805      	ldr	r0, [sp, #20]
   c233e:	9304      	str	r3, [sp, #16]
   c2340:	eb0a 040c 	add.w	r4, sl, ip
   c2344:	ae46      	add	r6, sp, #280	; 0x118
   c2346:	9500      	str	r5, [sp, #0]
   c2348:	ab5a      	add	r3, sp, #360	; 0x168
   c234a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c234e:	2d00      	cmp	r5, #0
   c2350:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2354:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2358:	dd16      	ble.n	c2388 <__kernel_rem_pio2f+0x124>
   c235a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c235e:	463a      	mov	r2, r7
   c2360:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2364:	eeb0 7a40 	vmov.f32	s14, s0
   c2368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c236c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2374:	42b3      	cmp	r3, r6
   c2376:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c237a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c237e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2382:	eca2 7a01 	vstmia	r2!, {s14}
   c2386:	d1eb      	bne.n	c2360 <__kernel_rem_pio2f+0xfc>
   c2388:	9001      	str	r0, [sp, #4]
   c238a:	f000 fdbf 	bl	c2f0c <scalbnf>
   c238e:	eeb0 8a40 	vmov.f32	s16, s0
   c2392:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2396:	ee28 0a00 	vmul.f32	s0, s16, s0
   c239a:	f000 fd71 	bl	c2e80 <floorf>
   c239e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c23a2:	eea0 8a67 	vfms.f32	s16, s0, s15
   c23a6:	9801      	ldr	r0, [sp, #4]
   c23a8:	2800      	cmp	r0, #0
   c23aa:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c23ae:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c23b2:	ee38 8a67 	vsub.f32	s16, s16, s15
   c23b6:	dd79      	ble.n	c24ac <__kernel_rem_pio2f+0x248>
   c23b8:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c23bc:	f1c0 0308 	rsb	r3, r0, #8
   c23c0:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c23c4:	fa41 fc03 	asr.w	ip, r1, r3
   c23c8:	fa0c f303 	lsl.w	r3, ip, r3
   c23cc:	1acb      	subs	r3, r1, r3
   c23ce:	f1c0 0207 	rsb	r2, r0, #7
   c23d2:	ee19 1a90 	vmov	r1, s19
   c23d6:	fa43 f202 	asr.w	r2, r3, r2
   c23da:	4461      	add	r1, ip
   c23dc:	2a00      	cmp	r2, #0
   c23de:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c23e2:	ee09 1a90 	vmov	s19, r1
   c23e6:	dc69      	bgt.n	c24bc <__kernel_rem_pio2f+0x258>
   c23e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c23ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c23f0:	f040 80c1 	bne.w	c2576 <__kernel_rem_pio2f+0x312>
   c23f4:	9b00      	ldr	r3, [sp, #0]
   c23f6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c23fa:	455b      	cmp	r3, fp
   c23fc:	dc10      	bgt.n	c2420 <__kernel_rem_pio2f+0x1bc>
   c23fe:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2402:	3b01      	subs	r3, #1
   c2404:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2408:	2100      	movs	r1, #0
   c240a:	4694      	mov	ip, r2
   c240c:	f853 2904 	ldr.w	r2, [r3], #-4
   c2410:	454b      	cmp	r3, r9
   c2412:	ea41 0102 	orr.w	r1, r1, r2
   c2416:	d1f9      	bne.n	c240c <__kernel_rem_pio2f+0x1a8>
   c2418:	4662      	mov	r2, ip
   c241a:	2900      	cmp	r1, #0
   c241c:	f040 80f3 	bne.w	c2606 <__kernel_rem_pio2f+0x3a2>
   c2420:	9b00      	ldr	r3, [sp, #0]
   c2422:	3b01      	subs	r3, #1
   c2424:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2428:	2b00      	cmp	r3, #0
   c242a:	f040 80e8 	bne.w	c25fe <__kernel_rem_pio2f+0x39a>
   c242e:	9b04      	ldr	r3, [sp, #16]
   c2430:	f04f 0c01 	mov.w	ip, #1
   c2434:	f853 2904 	ldr.w	r2, [r3], #-4
   c2438:	f10c 0c01 	add.w	ip, ip, #1
   c243c:	2a00      	cmp	r2, #0
   c243e:	d0f9      	beq.n	c2434 <__kernel_rem_pio2f+0x1d0>
   c2440:	1c6b      	adds	r3, r5, #1
   c2442:	44ac      	add	ip, r5
   c2444:	469e      	mov	lr, r3
   c2446:	9a03      	ldr	r2, [sp, #12]
   c2448:	1951      	adds	r1, r2, r5
   c244a:	9a02      	ldr	r2, [sp, #8]
   c244c:	eb02 0b03 	add.w	fp, r2, r3
   c2450:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2454:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2456:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c245a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c245e:	ab1e      	add	r3, sp, #120	; 0x78
   c2460:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2464:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2468:	eddb 7a01 	vldr	s15, [fp, #4]
   c246c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2508 <__kernel_rem_pio2f+0x2a4>
   c2470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2474:	f1b8 0f00 	cmp.w	r8, #0
   c2478:	f10b 0b04 	add.w	fp, fp, #4
   c247c:	edc1 7a00 	vstr	s15, [r1]
   c2480:	460a      	mov	r2, r1
   c2482:	f101 0104 	add.w	r1, r1, #4
   c2486:	db09      	blt.n	c249c <__kernel_rem_pio2f+0x238>
   c2488:	4653      	mov	r3, sl
   c248a:	e001      	b.n	c2490 <__kernel_rem_pio2f+0x22c>
   c248c:	ed72 7a01 	vldmdb	r2!, {s15}
   c2490:	ecf3 6a01 	vldmia	r3!, {s13}
   c2494:	42a3      	cmp	r3, r4
   c2496:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c249a:	d1f7      	bne.n	c248c <__kernel_rem_pio2f+0x228>
   c249c:	f10e 0e01 	add.w	lr, lr, #1
   c24a0:	45e6      	cmp	lr, ip
   c24a2:	eca5 7a01 	vstmia	r5!, {s14}
   c24a6:	dddf      	ble.n	c2468 <__kernel_rem_pio2f+0x204>
   c24a8:	4665      	mov	r5, ip
   c24aa:	e74d      	b.n	c2348 <__kernel_rem_pio2f+0xe4>
   c24ac:	f040 809d 	bne.w	c25ea <__kernel_rem_pio2f+0x386>
   c24b0:	1e6b      	subs	r3, r5, #1
   c24b2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c24b6:	1212      	asrs	r2, r2, #8
   c24b8:	2a00      	cmp	r2, #0
   c24ba:	dd95      	ble.n	c23e8 <__kernel_rem_pio2f+0x184>
   c24bc:	ee19 3a90 	vmov	r3, s19
   c24c0:	2d00      	cmp	r5, #0
   c24c2:	f103 0301 	add.w	r3, r3, #1
   c24c6:	ee09 3a90 	vmov	s19, r3
   c24ca:	f340 8196 	ble.w	c27fa <__kernel_rem_pio2f+0x596>
   c24ce:	6839      	ldr	r1, [r7, #0]
   c24d0:	2900      	cmp	r1, #0
   c24d2:	f040 8080 	bne.w	c25d6 <__kernel_rem_pio2f+0x372>
   c24d6:	2d01      	cmp	r5, #1
   c24d8:	d026      	beq.n	c2528 <__kernel_rem_pio2f+0x2c4>
   c24da:	463b      	mov	r3, r7
   c24dc:	f04f 0c01 	mov.w	ip, #1
   c24e0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c24e4:	2900      	cmp	r1, #0
   c24e6:	d07a      	beq.n	c25de <__kernel_rem_pio2f+0x37a>
   c24e8:	f10c 0301 	add.w	r3, ip, #1
   c24ec:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c24f0:	429d      	cmp	r5, r3
   c24f2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c24f6:	dd16      	ble.n	c2526 <__kernel_rem_pio2f+0x2c2>
   c24f8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c24fc:	44bb      	add	fp, r7
   c24fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2502:	e00a      	b.n	c251a <__kernel_rem_pio2f+0x2b6>
   c2504:	000c79ec 	.word	0x000c79ec
   c2508:	00000000 	.word	0x00000000
   c250c:	43800000 	.word	0x43800000
   c2510:	3b800000 	.word	0x3b800000
   c2514:	3fc90000 	.word	0x3fc90000
   c2518:	6819      	ldr	r1, [r3, #0]
   c251a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c251e:	f843 1b04 	str.w	r1, [r3], #4
   c2522:	455b      	cmp	r3, fp
   c2524:	d1f8      	bne.n	c2518 <__kernel_rem_pio2f+0x2b4>
   c2526:	2101      	movs	r1, #1
   c2528:	2800      	cmp	r0, #0
   c252a:	dd0c      	ble.n	c2546 <__kernel_rem_pio2f+0x2e2>
   c252c:	2801      	cmp	r0, #1
   c252e:	f000 8145 	beq.w	c27bc <__kernel_rem_pio2f+0x558>
   c2532:	2802      	cmp	r0, #2
   c2534:	d107      	bne.n	c2546 <__kernel_rem_pio2f+0x2e2>
   c2536:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c253a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c253e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2542:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2546:	2a02      	cmp	r2, #2
   c2548:	f47f af4e 	bne.w	c23e8 <__kernel_rem_pio2f+0x184>
   c254c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2550:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2554:	2900      	cmp	r1, #0
   c2556:	f43f af47 	beq.w	c23e8 <__kernel_rem_pio2f+0x184>
   c255a:	9209      	str	r2, [sp, #36]	; 0x24
   c255c:	9001      	str	r0, [sp, #4]
   c255e:	f000 fcd5 	bl	c2f0c <scalbnf>
   c2562:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2566:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2568:	9801      	ldr	r0, [sp, #4]
   c256a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2572:	f43f af3f 	beq.w	c23f4 <__kernel_rem_pio2f+0x190>
   c2576:	9202      	str	r2, [sp, #8]
   c2578:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c257c:	eeb0 0a48 	vmov.f32	s0, s16
   c2580:	1a98      	subs	r0, r3, r2
   c2582:	9501      	str	r5, [sp, #4]
   c2584:	9d00      	ldr	r5, [sp, #0]
   c2586:	f000 fcc1 	bl	c2f0c <scalbnf>
   c258a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c250c <__kernel_rem_pio2f+0x2a8>
   c258e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2596:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c259a:	f2c0 8156 	blt.w	c284a <__kernel_rem_pio2f+0x5e6>
   c259e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2510 <__kernel_rem_pio2f+0x2ac>
   c25a2:	9905      	ldr	r1, [sp, #20]
   c25a4:	ee60 7a27 	vmul.f32	s15, s0, s15
   c25a8:	3108      	adds	r1, #8
   c25aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c25ae:	9105      	str	r1, [sp, #20]
   c25b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c25b4:	f103 0b01 	add.w	fp, r3, #1
   c25b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c25bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c25c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c25c4:	ee10 1a10 	vmov	r1, s0
   c25c8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c25cc:	ee17 3a90 	vmov	r3, s15
   c25d0:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c25d4:	e02e      	b.n	c2634 <__kernel_rem_pio2f+0x3d0>
   c25d6:	2301      	movs	r3, #1
   c25d8:	f04f 0c00 	mov.w	ip, #0
   c25dc:	e786      	b.n	c24ec <__kernel_rem_pio2f+0x288>
   c25de:	f10c 0c01 	add.w	ip, ip, #1
   c25e2:	45ac      	cmp	ip, r5
   c25e4:	f47f af7c 	bne.w	c24e0 <__kernel_rem_pio2f+0x27c>
   c25e8:	e79e      	b.n	c2528 <__kernel_rem_pio2f+0x2c4>
   c25ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c25ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c25f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c25f6:	f280 80ef 	bge.w	c27d8 <__kernel_rem_pio2f+0x574>
   c25fa:	2200      	movs	r2, #0
   c25fc:	e6f4      	b.n	c23e8 <__kernel_rem_pio2f+0x184>
   c25fe:	1c6b      	adds	r3, r5, #1
   c2600:	469e      	mov	lr, r3
   c2602:	469c      	mov	ip, r3
   c2604:	e71f      	b.n	c2446 <__kernel_rem_pio2f+0x1e2>
   c2606:	9905      	ldr	r1, [sp, #20]
   c2608:	f1a1 0008 	sub.w	r0, r1, #8
   c260c:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c2610:	9005      	str	r0, [sp, #20]
   c2612:	462b      	mov	r3, r5
   c2614:	9d00      	ldr	r5, [sp, #0]
   c2616:	b969      	cbnz	r1, c2634 <__kernel_rem_pio2f+0x3d0>
   c2618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c261c:	3b02      	subs	r3, #2
   c261e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2622:	4601      	mov	r1, r0
   c2624:	f853 0904 	ldr.w	r0, [r3], #-4
   c2628:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c262c:	3908      	subs	r1, #8
   c262e:	2800      	cmp	r0, #0
   c2630:	d0f8      	beq.n	c2624 <__kernel_rem_pio2f+0x3c0>
   c2632:	9105      	str	r1, [sp, #20]
   c2634:	9805      	ldr	r0, [sp, #20]
   c2636:	9200      	str	r2, [sp, #0]
   c2638:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c263c:	f000 fc66 	bl	c2f0c <scalbnf>
   c2640:	f1bb 0f00 	cmp.w	fp, #0
   c2644:	9a00      	ldr	r2, [sp, #0]
   c2646:	f2c0 8125 	blt.w	c2894 <__kernel_rem_pio2f+0x630>
   c264a:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c264e:	ab46      	add	r3, sp, #280	; 0x118
   c2650:	eb03 060e 	add.w	r6, r3, lr
   c2654:	f10e 0c04 	add.w	ip, lr, #4
   c2658:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2510 <__kernel_rem_pio2f+0x2ac>
   c265c:	eb07 030c 	add.w	r3, r7, ip
   c2660:	1d31      	adds	r1, r6, #4
   c2662:	ed73 7a01 	vldmdb	r3!, {s15}
   c2666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c266a:	42bb      	cmp	r3, r7
   c266c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2670:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2674:	ed61 7a01 	vstmdb	r1!, {s15}
   c2678:	d1f3      	bne.n	c2662 <__kernel_rem_pio2f+0x3fe>
   c267a:	2d00      	cmp	r5, #0
   c267c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2514 <__kernel_rem_pio2f+0x2b0>
   c2680:	f04f 0400 	mov.w	r4, #0
   c2684:	db20      	blt.n	c26c8 <__kernel_rem_pio2f+0x464>
   c2686:	4892      	ldr	r0, [pc, #584]	; (c28d0 <__kernel_rem_pio2f+0x66c>)
   c2688:	eddf 7a92 	vldr	s15, [pc, #584]	; c28d4 <__kernel_rem_pio2f+0x670>
   c268c:	eeb0 7a46 	vmov.f32	s14, s12
   c2690:	4631      	mov	r1, r6
   c2692:	2300      	movs	r3, #0
   c2694:	e003      	b.n	c269e <__kernel_rem_pio2f+0x43a>
   c2696:	429c      	cmp	r4, r3
   c2698:	db08      	blt.n	c26ac <__kernel_rem_pio2f+0x448>
   c269a:	ecb0 7a01 	vldmia	r0!, {s14}
   c269e:	ecf1 6a01 	vldmia	r1!, {s13}
   c26a2:	3301      	adds	r3, #1
   c26a4:	429d      	cmp	r5, r3
   c26a6:	eee6 7a87 	vfma.f32	s15, s13, s14
   c26aa:	daf4      	bge.n	c2696 <__kernel_rem_pio2f+0x432>
   c26ac:	ab5a      	add	r3, sp, #360	; 0x168
   c26ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c26b2:	45a3      	cmp	fp, r4
   c26b4:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c26b8:	f1a6 0604 	sub.w	r6, r6, #4
   c26bc:	f104 0301 	add.w	r3, r4, #1
   c26c0:	d005      	beq.n	c26ce <__kernel_rem_pio2f+0x46a>
   c26c2:	2d00      	cmp	r5, #0
   c26c4:	461c      	mov	r4, r3
   c26c6:	dade      	bge.n	c2686 <__kernel_rem_pio2f+0x422>
   c26c8:	eddf 7a82 	vldr	s15, [pc, #520]	; c28d4 <__kernel_rem_pio2f+0x670>
   c26cc:	e7ee      	b.n	c26ac <__kernel_rem_pio2f+0x448>
   c26ce:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c26d0:	2902      	cmp	r1, #2
   c26d2:	dc1c      	bgt.n	c270e <__kernel_rem_pio2f+0x4aa>
   c26d4:	2900      	cmp	r1, #0
   c26d6:	f300 8092 	bgt.w	c27fe <__kernel_rem_pio2f+0x59a>
   c26da:	d10f      	bne.n	c26fc <__kernel_rem_pio2f+0x498>
   c26dc:	ab32      	add	r3, sp, #200	; 0xc8
   c26de:	eddf 7a7d 	vldr	s15, [pc, #500]	; c28d4 <__kernel_rem_pio2f+0x670>
   c26e2:	449c      	add	ip, r3
   c26e4:	ed3c 7a01 	vldmdb	ip!, {s14}
   c26e8:	4563      	cmp	r3, ip
   c26ea:	ee77 7a87 	vadd.f32	s15, s15, s14
   c26ee:	d1f9      	bne.n	c26e4 <__kernel_rem_pio2f+0x480>
   c26f0:	b10a      	cbz	r2, c26f6 <__kernel_rem_pio2f+0x492>
   c26f2:	eef1 7a67 	vneg.f32	s15, s15
   c26f6:	9b06      	ldr	r3, [sp, #24]
   c26f8:	edc3 7a00 	vstr	s15, [r3]
   c26fc:	ee19 3a90 	vmov	r3, s19
   c2700:	f003 0007 	and.w	r0, r3, #7
   c2704:	b05b      	add	sp, #364	; 0x16c
   c2706:	ecbd 8b04 	vpop	{d8-d9}
   c270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c270e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2710:	2b03      	cmp	r3, #3
   c2712:	d1f3      	bne.n	c26fc <__kernel_rem_pio2f+0x498>
   c2714:	f1bb 0f00 	cmp.w	fp, #0
   c2718:	f000 80d1 	beq.w	c28be <__kernel_rem_pio2f+0x65a>
   c271c:	ab5a      	add	r3, sp, #360	; 0x168
   c271e:	4473      	add	r3, lr
   c2720:	a932      	add	r1, sp, #200	; 0xc8
   c2722:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c2726:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c272a:	ed73 7a01 	vldmdb	r3!, {s15}
   c272e:	eef0 6a47 	vmov.f32	s13, s14
   c2732:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2736:	4299      	cmp	r1, r3
   c2738:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c273c:	ed83 7a00 	vstr	s14, [r3]
   c2740:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2744:	edc3 7a01 	vstr	s15, [r3, #4]
   c2748:	d1ef      	bne.n	c272a <__kernel_rem_pio2f+0x4c6>
   c274a:	f1bb 0f01 	cmp.w	fp, #1
   c274e:	f340 80b6 	ble.w	c28be <__kernel_rem_pio2f+0x65a>
   c2752:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2756:	ab5a      	add	r3, sp, #360	; 0x168
   c2758:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c275c:	449e      	add	lr, r3
   c275e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c2762:	f10b 0304 	add.w	r3, fp, #4
   c2766:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c276a:	440b      	add	r3, r1
   c276c:	a833      	add	r0, sp, #204	; 0xcc
   c276e:	ed73 7a01 	vldmdb	r3!, {s15}
   c2772:	eef0 6a47 	vmov.f32	s13, s14
   c2776:	ee37 7a27 	vadd.f32	s14, s14, s15
   c277a:	4298      	cmp	r0, r3
   c277c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2780:	ed83 7a00 	vstr	s14, [r3]
   c2784:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2788:	edc3 7a01 	vstr	s15, [r3, #4]
   c278c:	d1ef      	bne.n	c276e <__kernel_rem_pio2f+0x50a>
   c278e:	f10b 0b08 	add.w	fp, fp, #8
   c2792:	eddf 7a50 	vldr	s15, [pc, #320]	; c28d4 <__kernel_rem_pio2f+0x670>
   c2796:	eb01 030b 	add.w	r3, r1, fp
   c279a:	3108      	adds	r1, #8
   c279c:	ed33 7a01 	vldmdb	r3!, {s14}
   c27a0:	4299      	cmp	r1, r3
   c27a2:	ee77 7a87 	vadd.f32	s15, s15, s14
   c27a6:	d1f9      	bne.n	c279c <__kernel_rem_pio2f+0x538>
   c27a8:	2a00      	cmp	r2, #0
   c27aa:	d156      	bne.n	c285a <__kernel_rem_pio2f+0x5f6>
   c27ac:	9906      	ldr	r1, [sp, #24]
   c27ae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c27b0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c27b2:	600a      	str	r2, [r1, #0]
   c27b4:	604b      	str	r3, [r1, #4]
   c27b6:	edc1 7a02 	vstr	s15, [r1, #8]
   c27ba:	e79f      	b.n	c26fc <__kernel_rem_pio2f+0x498>
   c27bc:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c27c0:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c27c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c27c8:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c27cc:	e6bb      	b.n	c2546 <__kernel_rem_pio2f+0x2e2>
   c27ce:	2308      	movs	r3, #8
   c27d0:	9307      	str	r3, [sp, #28]
   c27d2:	2300      	movs	r3, #0
   c27d4:	9302      	str	r3, [sp, #8]
   c27d6:	e561      	b.n	c229c <__kernel_rem_pio2f+0x38>
   c27d8:	ee19 3a90 	vmov	r3, s19
   c27dc:	2d00      	cmp	r5, #0
   c27de:	f103 0301 	add.w	r3, r3, #1
   c27e2:	ee09 3a90 	vmov	s19, r3
   c27e6:	bfc8      	it	gt
   c27e8:	2202      	movgt	r2, #2
   c27ea:	f73f ae70 	bgt.w	c24ce <__kernel_rem_pio2f+0x26a>
   c27ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c27f2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c27f6:	2202      	movs	r2, #2
   c27f8:	e5f6      	b.n	c23e8 <__kernel_rem_pio2f+0x184>
   c27fa:	2100      	movs	r1, #0
   c27fc:	e694      	b.n	c2528 <__kernel_rem_pio2f+0x2c4>
   c27fe:	a932      	add	r1, sp, #200	; 0xc8
   c2800:	eddf 7a34 	vldr	s15, [pc, #208]	; c28d4 <__kernel_rem_pio2f+0x670>
   c2804:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c2808:	ed33 7a01 	vldmdb	r3!, {s14}
   c280c:	4299      	cmp	r1, r3
   c280e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2812:	d1f9      	bne.n	c2808 <__kernel_rem_pio2f+0x5a4>
   c2814:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c2818:	bb8a      	cbnz	r2, c287e <__kernel_rem_pio2f+0x61a>
   c281a:	9b06      	ldr	r3, [sp, #24]
   c281c:	f1bb 0f00 	cmp.w	fp, #0
   c2820:	edc3 7a00 	vstr	s15, [r3]
   c2824:	ee77 7a67 	vsub.f32	s15, s14, s15
   c2828:	dd0b      	ble.n	c2842 <__kernel_rem_pio2f+0x5de>
   c282a:	a933      	add	r1, sp, #204	; 0xcc
   c282c:	2301      	movs	r3, #1
   c282e:	ecb1 7a01 	vldmia	r1!, {s14}
   c2832:	3301      	adds	r3, #1
   c2834:	459b      	cmp	fp, r3
   c2836:	ee77 7a87 	vadd.f32	s15, s15, s14
   c283a:	daf8      	bge.n	c282e <__kernel_rem_pio2f+0x5ca>
   c283c:	b10a      	cbz	r2, c2842 <__kernel_rem_pio2f+0x5de>
   c283e:	eef1 7a67 	vneg.f32	s15, s15
   c2842:	9b06      	ldr	r3, [sp, #24]
   c2844:	edc3 7a01 	vstr	s15, [r3, #4]
   c2848:	e758      	b.n	c26fc <__kernel_rem_pio2f+0x498>
   c284a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c284e:	469b      	mov	fp, r3
   c2850:	ee10 1a10 	vmov	r1, s0
   c2854:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2858:	e6ec      	b.n	c2634 <__kernel_rem_pio2f+0x3d0>
   c285a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c285e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c2862:	9b06      	ldr	r3, [sp, #24]
   c2864:	eef1 6a66 	vneg.f32	s13, s13
   c2868:	eeb1 7a47 	vneg.f32	s14, s14
   c286c:	eef1 7a67 	vneg.f32	s15, s15
   c2870:	edc3 6a00 	vstr	s13, [r3]
   c2874:	ed83 7a01 	vstr	s14, [r3, #4]
   c2878:	edc3 7a02 	vstr	s15, [r3, #8]
   c287c:	e73e      	b.n	c26fc <__kernel_rem_pio2f+0x498>
   c287e:	9b06      	ldr	r3, [sp, #24]
   c2880:	eef1 6a67 	vneg.f32	s13, s15
   c2884:	f1bb 0f00 	cmp.w	fp, #0
   c2888:	ee77 7a67 	vsub.f32	s15, s14, s15
   c288c:	edc3 6a00 	vstr	s13, [r3]
   c2890:	dccb      	bgt.n	c282a <__kernel_rem_pio2f+0x5c6>
   c2892:	e7d4      	b.n	c283e <__kernel_rem_pio2f+0x5da>
   c2894:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2896:	2b02      	cmp	r3, #2
   c2898:	dc0d      	bgt.n	c28b6 <__kernel_rem_pio2f+0x652>
   c289a:	2b00      	cmp	r3, #0
   c289c:	dc14      	bgt.n	c28c8 <__kernel_rem_pio2f+0x664>
   c289e:	f47f af2d 	bne.w	c26fc <__kernel_rem_pio2f+0x498>
   c28a2:	eddf 7a0c 	vldr	s15, [pc, #48]	; c28d4 <__kernel_rem_pio2f+0x670>
   c28a6:	2a00      	cmp	r2, #0
   c28a8:	f43f af25 	beq.w	c26f6 <__kernel_rem_pio2f+0x492>
   c28ac:	e721      	b.n	c26f2 <__kernel_rem_pio2f+0x48e>
   c28ae:	9b03      	ldr	r3, [sp, #12]
   c28b0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c28b4:	e537      	b.n	c2326 <__kernel_rem_pio2f+0xc2>
   c28b6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c28b8:	2b03      	cmp	r3, #3
   c28ba:	f47f af1f 	bne.w	c26fc <__kernel_rem_pio2f+0x498>
   c28be:	eddf 7a05 	vldr	s15, [pc, #20]	; c28d4 <__kernel_rem_pio2f+0x670>
   c28c2:	2a00      	cmp	r2, #0
   c28c4:	d1c9      	bne.n	c285a <__kernel_rem_pio2f+0x5f6>
   c28c6:	e771      	b.n	c27ac <__kernel_rem_pio2f+0x548>
   c28c8:	eddf 7a02 	vldr	s15, [pc, #8]	; c28d4 <__kernel_rem_pio2f+0x670>
   c28cc:	e7a2      	b.n	c2814 <__kernel_rem_pio2f+0x5b0>
   c28ce:	bf00      	nop
   c28d0:	000c79c4 	.word	0x000c79c4
   c28d4:	00000000 	.word	0x00000000

000c28d8 <__kernel_sinf>:
   c28d8:	ee10 3a10 	vmov	r3, s0
   c28dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c28e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c28e4:	da04      	bge.n	c28f0 <__kernel_sinf+0x18>
   c28e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c28ea:	ee17 3a90 	vmov	r3, s15
   c28ee:	b35b      	cbz	r3, c2948 <__kernel_sinf+0x70>
   c28f0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c28f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c294c <__kernel_sinf+0x74>
   c28f8:	eddf 5a15 	vldr	s11, [pc, #84]	; c2950 <__kernel_sinf+0x78>
   c28fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; c2954 <__kernel_sinf+0x7c>
   c2900:	eddf 6a15 	vldr	s13, [pc, #84]	; c2958 <__kernel_sinf+0x80>
   c2904:	eee7 5a87 	vfma.f32	s11, s15, s14
   c2908:	ed9f 7a14 	vldr	s14, [pc, #80]	; c295c <__kernel_sinf+0x84>
   c290c:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c2910:	ee20 5a27 	vmul.f32	s10, s0, s15
   c2914:	eee6 6a27 	vfma.f32	s13, s12, s15
   c2918:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c291c:	b930      	cbnz	r0, c292c <__kernel_sinf+0x54>
   c291e:	eddf 6a10 	vldr	s13, [pc, #64]	; c2960 <__kernel_sinf+0x88>
   c2922:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2926:	eea6 0a85 	vfma.f32	s0, s13, s10
   c292a:	4770      	bx	lr
   c292c:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c2930:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c2934:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c2938:	eddf 6a0a 	vldr	s13, [pc, #40]	; c2964 <__kernel_sinf+0x8c>
   c293c:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2940:	eee5 0a26 	vfma.f32	s1, s10, s13
   c2944:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2948:	4770      	bx	lr
   c294a:	bf00      	nop
   c294c:	2f2ec9d3 	.word	0x2f2ec9d3
   c2950:	b2d72f34 	.word	0xb2d72f34
   c2954:	3638ef1b 	.word	0x3638ef1b
   c2958:	b9500d01 	.word	0xb9500d01
   c295c:	3c088889 	.word	0x3c088889
   c2960:	be2aaaab 	.word	0xbe2aaaab
   c2964:	3e2aaaab 	.word	0x3e2aaaab

000c2968 <atan>:
   c2968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c296c:	ec55 4b10 	vmov	r4, r5, d0
   c2970:	4bc3      	ldr	r3, [pc, #780]	; (c2c80 <atan+0x318>)
   c2972:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c2976:	429e      	cmp	r6, r3
   c2978:	46aa      	mov	sl, r5
   c297a:	dd17      	ble.n	c29ac <atan+0x44>
   c297c:	4bc1      	ldr	r3, [pc, #772]	; (c2c84 <atan+0x31c>)
   c297e:	429e      	cmp	r6, r3
   c2980:	dc0a      	bgt.n	c2998 <atan+0x30>
   c2982:	d007      	beq.n	c2994 <atan+0x2c>
   c2984:	f1ba 0f00 	cmp.w	sl, #0
   c2988:	f340 80cb 	ble.w	c2b22 <atan+0x1ba>
   c298c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c2c10 <atan+0x2a8>
   c2990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2994:	2c00      	cmp	r4, #0
   c2996:	d0f5      	beq.n	c2984 <atan+0x1c>
   c2998:	4622      	mov	r2, r4
   c299a:	462b      	mov	r3, r5
   c299c:	4620      	mov	r0, r4
   c299e:	4629      	mov	r1, r5
   c29a0:	f000 fb2c 	bl	c2ffc <__adddf3>
   c29a4:	ec41 0b10 	vmov	d0, r0, r1
   c29a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c29ac:	4bb6      	ldr	r3, [pc, #728]	; (c2c88 <atan+0x320>)
   c29ae:	429e      	cmp	r6, r3
   c29b0:	f300 80bb 	bgt.w	c2b2a <atan+0x1c2>
   c29b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c29b8:	429e      	cmp	r6, r3
   c29ba:	f340 80a0 	ble.w	c2afe <atan+0x196>
   c29be:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c29c2:	4622      	mov	r2, r4
   c29c4:	462b      	mov	r3, r5
   c29c6:	4620      	mov	r0, r4
   c29c8:	4629      	mov	r1, r5
   c29ca:	f000 fccd 	bl	c3368 <__aeabi_dmul>
   c29ce:	4602      	mov	r2, r0
   c29d0:	460b      	mov	r3, r1
   c29d2:	4680      	mov	r8, r0
   c29d4:	4689      	mov	r9, r1
   c29d6:	f000 fcc7 	bl	c3368 <__aeabi_dmul>
   c29da:	a38f      	add	r3, pc, #572	; (adr r3, c2c18 <atan+0x2b0>)
   c29dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29e0:	4606      	mov	r6, r0
   c29e2:	460f      	mov	r7, r1
   c29e4:	f000 fcc0 	bl	c3368 <__aeabi_dmul>
   c29e8:	a38d      	add	r3, pc, #564	; (adr r3, c2c20 <atan+0x2b8>)
   c29ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29ee:	f000 fb05 	bl	c2ffc <__adddf3>
   c29f2:	4632      	mov	r2, r6
   c29f4:	463b      	mov	r3, r7
   c29f6:	f000 fcb7 	bl	c3368 <__aeabi_dmul>
   c29fa:	a38b      	add	r3, pc, #556	; (adr r3, c2c28 <atan+0x2c0>)
   c29fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a00:	f000 fafc 	bl	c2ffc <__adddf3>
   c2a04:	4632      	mov	r2, r6
   c2a06:	463b      	mov	r3, r7
   c2a08:	f000 fcae 	bl	c3368 <__aeabi_dmul>
   c2a0c:	a388      	add	r3, pc, #544	; (adr r3, c2c30 <atan+0x2c8>)
   c2a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a12:	f000 faf3 	bl	c2ffc <__adddf3>
   c2a16:	4632      	mov	r2, r6
   c2a18:	463b      	mov	r3, r7
   c2a1a:	f000 fca5 	bl	c3368 <__aeabi_dmul>
   c2a1e:	a386      	add	r3, pc, #536	; (adr r3, c2c38 <atan+0x2d0>)
   c2a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a24:	f000 faea 	bl	c2ffc <__adddf3>
   c2a28:	4632      	mov	r2, r6
   c2a2a:	463b      	mov	r3, r7
   c2a2c:	f000 fc9c 	bl	c3368 <__aeabi_dmul>
   c2a30:	a383      	add	r3, pc, #524	; (adr r3, c2c40 <atan+0x2d8>)
   c2a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a36:	f000 fae1 	bl	c2ffc <__adddf3>
   c2a3a:	4642      	mov	r2, r8
   c2a3c:	464b      	mov	r3, r9
   c2a3e:	f000 fc93 	bl	c3368 <__aeabi_dmul>
   c2a42:	a381      	add	r3, pc, #516	; (adr r3, c2c48 <atan+0x2e0>)
   c2a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a48:	4680      	mov	r8, r0
   c2a4a:	4689      	mov	r9, r1
   c2a4c:	4630      	mov	r0, r6
   c2a4e:	4639      	mov	r1, r7
   c2a50:	f000 fc8a 	bl	c3368 <__aeabi_dmul>
   c2a54:	a37e      	add	r3, pc, #504	; (adr r3, c2c50 <atan+0x2e8>)
   c2a56:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a5a:	f000 facd 	bl	c2ff8 <__aeabi_dsub>
   c2a5e:	4632      	mov	r2, r6
   c2a60:	463b      	mov	r3, r7
   c2a62:	f000 fc81 	bl	c3368 <__aeabi_dmul>
   c2a66:	a37c      	add	r3, pc, #496	; (adr r3, c2c58 <atan+0x2f0>)
   c2a68:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a6c:	f000 fac4 	bl	c2ff8 <__aeabi_dsub>
   c2a70:	4632      	mov	r2, r6
   c2a72:	463b      	mov	r3, r7
   c2a74:	f000 fc78 	bl	c3368 <__aeabi_dmul>
   c2a78:	a379      	add	r3, pc, #484	; (adr r3, c2c60 <atan+0x2f8>)
   c2a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a7e:	f000 fabb 	bl	c2ff8 <__aeabi_dsub>
   c2a82:	4632      	mov	r2, r6
   c2a84:	463b      	mov	r3, r7
   c2a86:	f000 fc6f 	bl	c3368 <__aeabi_dmul>
   c2a8a:	a377      	add	r3, pc, #476	; (adr r3, c2c68 <atan+0x300>)
   c2a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a90:	f000 fab2 	bl	c2ff8 <__aeabi_dsub>
   c2a94:	4632      	mov	r2, r6
   c2a96:	463b      	mov	r3, r7
   c2a98:	f000 fc66 	bl	c3368 <__aeabi_dmul>
   c2a9c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c2aa0:	4602      	mov	r2, r0
   c2aa2:	460b      	mov	r3, r1
   c2aa4:	4640      	mov	r0, r8
   c2aa6:	4649      	mov	r1, r9
   c2aa8:	d062      	beq.n	c2b70 <atan+0x208>
   c2aaa:	f000 faa7 	bl	c2ffc <__adddf3>
   c2aae:	4e77      	ldr	r6, [pc, #476]	; (c2c8c <atan+0x324>)
   c2ab0:	4622      	mov	r2, r4
   c2ab2:	462b      	mov	r3, r5
   c2ab4:	f000 fc58 	bl	c3368 <__aeabi_dmul>
   c2ab8:	4b75      	ldr	r3, [pc, #468]	; (c2c90 <atan+0x328>)
   c2aba:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c2abe:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c2ac2:	449b      	add	fp, r3
   c2ac4:	e9db 2300 	ldrd	r2, r3, [fp]
   c2ac8:	f000 fa96 	bl	c2ff8 <__aeabi_dsub>
   c2acc:	4622      	mov	r2, r4
   c2ace:	462b      	mov	r3, r5
   c2ad0:	f000 fa92 	bl	c2ff8 <__aeabi_dsub>
   c2ad4:	4602      	mov	r2, r0
   c2ad6:	460b      	mov	r3, r1
   c2ad8:	e9d6 0100 	ldrd	r0, r1, [r6]
   c2adc:	f000 fa8c 	bl	c2ff8 <__aeabi_dsub>
   c2ae0:	f1ba 0f00 	cmp.w	sl, #0
   c2ae4:	ec41 0b10 	vmov	d0, r0, r1
   c2ae8:	f6bf af5e 	bge.w	c29a8 <atan+0x40>
   c2aec:	ee10 1a90 	vmov	r1, s1
   c2af0:	4602      	mov	r2, r0
   c2af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2af6:	ec43 2b10 	vmov	d0, r2, r3
   c2afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2afe:	a35c      	add	r3, pc, #368	; (adr r3, c2c70 <atan+0x308>)
   c2b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2b04:	ee10 0a10 	vmov	r0, s0
   c2b08:	4629      	mov	r1, r5
   c2b0a:	f000 fa77 	bl	c2ffc <__adddf3>
   c2b0e:	4b61      	ldr	r3, [pc, #388]	; (c2c94 <atan+0x32c>)
   c2b10:	2200      	movs	r2, #0
   c2b12:	f000 feb9 	bl	c3888 <__aeabi_dcmpgt>
   c2b16:	2800      	cmp	r0, #0
   c2b18:	f43f af51 	beq.w	c29be <atan+0x56>
   c2b1c:	ec45 4b10 	vmov	d0, r4, r5
   c2b20:	e742      	b.n	c29a8 <atan+0x40>
   c2b22:	ed9f 0b55 	vldr	d0, [pc, #340]	; c2c78 <atan+0x310>
   c2b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2b2a:	f000 f8bd 	bl	c2ca8 <fabs>
   c2b2e:	4b5a      	ldr	r3, [pc, #360]	; (c2c98 <atan+0x330>)
   c2b30:	429e      	cmp	r6, r3
   c2b32:	ec55 4b10 	vmov	r4, r5, d0
   c2b36:	dc2b      	bgt.n	c2b90 <atan+0x228>
   c2b38:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c2b3c:	429e      	cmp	r6, r3
   c2b3e:	dc56      	bgt.n	c2bee <atan+0x286>
   c2b40:	ee10 2a10 	vmov	r2, s0
   c2b44:	462b      	mov	r3, r5
   c2b46:	ee10 0a10 	vmov	r0, s0
   c2b4a:	4629      	mov	r1, r5
   c2b4c:	f000 fa56 	bl	c2ffc <__adddf3>
   c2b50:	4b50      	ldr	r3, [pc, #320]	; (c2c94 <atan+0x32c>)
   c2b52:	2200      	movs	r2, #0
   c2b54:	f000 fa50 	bl	c2ff8 <__aeabi_dsub>
   c2b58:	4602      	mov	r2, r0
   c2b5a:	460b      	mov	r3, r1
   c2b5c:	4620      	mov	r0, r4
   c2b5e:	4629      	mov	r1, r5
   c2b60:	4614      	mov	r4, r2
   c2b62:	461d      	mov	r5, r3
   c2b64:	f04f 0b00 	mov.w	fp, #0
   c2b68:	2200      	movs	r2, #0
   c2b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2b6e:	e027      	b.n	c2bc0 <atan+0x258>
   c2b70:	f000 fa44 	bl	c2ffc <__adddf3>
   c2b74:	4622      	mov	r2, r4
   c2b76:	462b      	mov	r3, r5
   c2b78:	f000 fbf6 	bl	c3368 <__aeabi_dmul>
   c2b7c:	4602      	mov	r2, r0
   c2b7e:	460b      	mov	r3, r1
   c2b80:	4620      	mov	r0, r4
   c2b82:	4629      	mov	r1, r5
   c2b84:	f000 fa38 	bl	c2ff8 <__aeabi_dsub>
   c2b88:	ec41 0b10 	vmov	d0, r0, r1
   c2b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2b90:	4b42      	ldr	r3, [pc, #264]	; (c2c9c <atan+0x334>)
   c2b92:	429e      	cmp	r6, r3
   c2b94:	da1f      	bge.n	c2bd6 <atan+0x26e>
   c2b96:	4b42      	ldr	r3, [pc, #264]	; (c2ca0 <atan+0x338>)
   c2b98:	2200      	movs	r2, #0
   c2b9a:	4629      	mov	r1, r5
   c2b9c:	ee10 0a10 	vmov	r0, s0
   c2ba0:	f000 fa2a 	bl	c2ff8 <__aeabi_dsub>
   c2ba4:	4602      	mov	r2, r0
   c2ba6:	460b      	mov	r3, r1
   c2ba8:	4620      	mov	r0, r4
   c2baa:	4629      	mov	r1, r5
   c2bac:	4614      	mov	r4, r2
   c2bae:	461d      	mov	r5, r3
   c2bb0:	2200      	movs	r2, #0
   c2bb2:	4b3b      	ldr	r3, [pc, #236]	; (c2ca0 <atan+0x338>)
   c2bb4:	f04f 0b02 	mov.w	fp, #2
   c2bb8:	f000 fbd6 	bl	c3368 <__aeabi_dmul>
   c2bbc:	4b35      	ldr	r3, [pc, #212]	; (c2c94 <atan+0x32c>)
   c2bbe:	2200      	movs	r2, #0
   c2bc0:	f000 fa1c 	bl	c2ffc <__adddf3>
   c2bc4:	4602      	mov	r2, r0
   c2bc6:	460b      	mov	r3, r1
   c2bc8:	4620      	mov	r0, r4
   c2bca:	4629      	mov	r1, r5
   c2bcc:	f000 fcf6 	bl	c35bc <__aeabi_ddiv>
   c2bd0:	4604      	mov	r4, r0
   c2bd2:	460d      	mov	r5, r1
   c2bd4:	e6f5      	b.n	c29c2 <atan+0x5a>
   c2bd6:	462b      	mov	r3, r5
   c2bd8:	4932      	ldr	r1, [pc, #200]	; (c2ca4 <atan+0x33c>)
   c2bda:	ee10 2a10 	vmov	r2, s0
   c2bde:	2000      	movs	r0, #0
   c2be0:	f000 fcec 	bl	c35bc <__aeabi_ddiv>
   c2be4:	f04f 0b03 	mov.w	fp, #3
   c2be8:	4604      	mov	r4, r0
   c2bea:	460d      	mov	r5, r1
   c2bec:	e6e9      	b.n	c29c2 <atan+0x5a>
   c2bee:	4b29      	ldr	r3, [pc, #164]	; (c2c94 <atan+0x32c>)
   c2bf0:	2200      	movs	r2, #0
   c2bf2:	4629      	mov	r1, r5
   c2bf4:	ee10 0a10 	vmov	r0, s0
   c2bf8:	f000 f9fe 	bl	c2ff8 <__aeabi_dsub>
   c2bfc:	4602      	mov	r2, r0
   c2bfe:	460b      	mov	r3, r1
   c2c00:	4620      	mov	r0, r4
   c2c02:	4629      	mov	r1, r5
   c2c04:	f04f 0b01 	mov.w	fp, #1
   c2c08:	4614      	mov	r4, r2
   c2c0a:	461d      	mov	r5, r3
   c2c0c:	e7d6      	b.n	c2bbc <atan+0x254>
   c2c0e:	bf00      	nop
   c2c10:	54442d18 	.word	0x54442d18
   c2c14:	3ff921fb 	.word	0x3ff921fb
   c2c18:	e322da11 	.word	0xe322da11
   c2c1c:	3f90ad3a 	.word	0x3f90ad3a
   c2c20:	24760deb 	.word	0x24760deb
   c2c24:	3fa97b4b 	.word	0x3fa97b4b
   c2c28:	a0d03d51 	.word	0xa0d03d51
   c2c2c:	3fb10d66 	.word	0x3fb10d66
   c2c30:	c54c206e 	.word	0xc54c206e
   c2c34:	3fb745cd 	.word	0x3fb745cd
   c2c38:	920083ff 	.word	0x920083ff
   c2c3c:	3fc24924 	.word	0x3fc24924
   c2c40:	5555550d 	.word	0x5555550d
   c2c44:	3fd55555 	.word	0x3fd55555
   c2c48:	2c6a6c2f 	.word	0x2c6a6c2f
   c2c4c:	bfa2b444 	.word	0xbfa2b444
   c2c50:	52defd9a 	.word	0x52defd9a
   c2c54:	3fadde2d 	.word	0x3fadde2d
   c2c58:	af749a6d 	.word	0xaf749a6d
   c2c5c:	3fb3b0f2 	.word	0x3fb3b0f2
   c2c60:	fe231671 	.word	0xfe231671
   c2c64:	3fbc71c6 	.word	0x3fbc71c6
   c2c68:	9998ebc4 	.word	0x9998ebc4
   c2c6c:	3fc99999 	.word	0x3fc99999
   c2c70:	8800759c 	.word	0x8800759c
   c2c74:	7e37e43c 	.word	0x7e37e43c
   c2c78:	54442d18 	.word	0x54442d18
   c2c7c:	bff921fb 	.word	0xbff921fb
   c2c80:	440fffff 	.word	0x440fffff
   c2c84:	7ff00000 	.word	0x7ff00000
   c2c88:	3fdbffff 	.word	0x3fdbffff
   c2c8c:	000c79f8 	.word	0x000c79f8
   c2c90:	000c7a18 	.word	0x000c7a18
   c2c94:	3ff00000 	.word	0x3ff00000
   c2c98:	3ff2ffff 	.word	0x3ff2ffff
   c2c9c:	40038000 	.word	0x40038000
   c2ca0:	3ff80000 	.word	0x3ff80000
   c2ca4:	bff00000 	.word	0xbff00000

000c2ca8 <fabs>:
   c2ca8:	ec51 0b10 	vmov	r0, r1, d0
   c2cac:	ee10 2a10 	vmov	r2, s0
   c2cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c2cb4:	ec43 2b10 	vmov	d0, r2, r3
   c2cb8:	4770      	bx	lr
   c2cba:	bf00      	nop

000c2cbc <atanf>:
   c2cbc:	b538      	push	{r3, r4, r5, lr}
   c2cbe:	ee10 5a10 	vmov	r5, s0
   c2cc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c2cc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c2cca:	eef0 7a40 	vmov.f32	s15, s0
   c2cce:	db0b      	blt.n	c2ce8 <atanf+0x2c>
   c2cd0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2cd4:	dc5b      	bgt.n	c2d8e <atanf+0xd2>
   c2cd6:	eddf 7a53 	vldr	s15, [pc, #332]	; c2e24 <atanf+0x168>
   c2cda:	ed9f 0a53 	vldr	s0, [pc, #332]	; c2e28 <atanf+0x16c>
   c2cde:	2d00      	cmp	r5, #0
   c2ce0:	bfc8      	it	gt
   c2ce2:	eeb0 0a67 	vmovgt.f32	s0, s15
   c2ce6:	bd38      	pop	{r3, r4, r5, pc}
   c2ce8:	4b50      	ldr	r3, [pc, #320]	; (c2e2c <atanf+0x170>)
   c2cea:	429c      	cmp	r4, r3
   c2cec:	dc5e      	bgt.n	c2dac <atanf+0xf0>
   c2cee:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c2cf2:	db4f      	blt.n	c2d94 <atanf+0xd8>
   c2cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2cf8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c2cfc:	eddf 4a4c 	vldr	s9, [pc, #304]	; c2e30 <atanf+0x174>
   c2d00:	eddf 5a4c 	vldr	s11, [pc, #304]	; c2e34 <atanf+0x178>
   c2d04:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c2e38 <atanf+0x17c>
   c2d08:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c2e3c <atanf+0x180>
   c2d0c:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c2d10:	eeb0 6a66 	vmov.f32	s12, s13
   c2d14:	eee7 5a24 	vfma.f32	s11, s14, s9
   c2d18:	1c5a      	adds	r2, r3, #1
   c2d1a:	eddf 4a49 	vldr	s9, [pc, #292]	; c2e40 <atanf+0x184>
   c2d1e:	eddf 6a49 	vldr	s13, [pc, #292]	; c2e44 <atanf+0x188>
   c2d22:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2d26:	eee7 6a24 	vfma.f32	s13, s14, s9
   c2d2a:	eddf 5a47 	vldr	s11, [pc, #284]	; c2e48 <atanf+0x18c>
   c2d2e:	eddf 4a47 	vldr	s9, [pc, #284]	; c2e4c <atanf+0x190>
   c2d32:	eee6 5a87 	vfma.f32	s11, s13, s14
   c2d36:	eea5 4a07 	vfma.f32	s8, s10, s14
   c2d3a:	ed9f 5a45 	vldr	s10, [pc, #276]	; c2e50 <atanf+0x194>
   c2d3e:	eddf 6a45 	vldr	s13, [pc, #276]	; c2e54 <atanf+0x198>
   c2d42:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2d46:	eee4 4a07 	vfma.f32	s9, s8, s14
   c2d4a:	eddf 5a43 	vldr	s11, [pc, #268]	; c2e58 <atanf+0x19c>
   c2d4e:	eee4 6a87 	vfma.f32	s13, s9, s14
   c2d52:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2d56:	ee66 6a86 	vmul.f32	s13, s13, s12
   c2d5a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c2d5e:	d03a      	beq.n	c2dd6 <atanf+0x11a>
   c2d60:	4a3e      	ldr	r2, [pc, #248]	; (c2e5c <atanf+0x1a0>)
   c2d62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c2d66:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2d6a:	ed92 0a00 	vldr	s0, [r2]
   c2d6e:	4a3c      	ldr	r2, [pc, #240]	; (c2e60 <atanf+0x1a4>)
   c2d70:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c2d74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c2d78:	2d00      	cmp	r5, #0
   c2d7a:	ed93 7a00 	vldr	s14, [r3]
   c2d7e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2d82:	ee37 0a67 	vsub.f32	s0, s14, s15
   c2d86:	daae      	bge.n	c2ce6 <atanf+0x2a>
   c2d88:	eeb1 0a40 	vneg.f32	s0, s0
   c2d8c:	bd38      	pop	{r3, r4, r5, pc}
   c2d8e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2d92:	bd38      	pop	{r3, r4, r5, pc}
   c2d94:	ed9f 7a33 	vldr	s14, [pc, #204]	; c2e64 <atanf+0x1a8>
   c2d98:	ee30 7a07 	vadd.f32	s14, s0, s14
   c2d9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c2da0:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c2da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2da8:	dda4      	ble.n	c2cf4 <atanf+0x38>
   c2daa:	bd38      	pop	{r3, r4, r5, pc}
   c2dac:	f000 f860 	bl	c2e70 <fabsf>
   c2db0:	4b2d      	ldr	r3, [pc, #180]	; (c2e68 <atanf+0x1ac>)
   c2db2:	429c      	cmp	r4, r3
   c2db4:	dc16      	bgt.n	c2de4 <atanf+0x128>
   c2db6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c2dba:	429c      	cmp	r4, r3
   c2dbc:	dc27      	bgt.n	c2e0e <atanf+0x152>
   c2dbe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c2dc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2dc6:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2dca:	2300      	movs	r3, #0
   c2dcc:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2dd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2dd4:	e790      	b.n	c2cf8 <atanf+0x3c>
   c2dd6:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2dda:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c2dde:	eeb0 0a67 	vmov.f32	s0, s15
   c2de2:	bd38      	pop	{r3, r4, r5, pc}
   c2de4:	4b21      	ldr	r3, [pc, #132]	; (c2e6c <atanf+0x1b0>)
   c2de6:	429c      	cmp	r4, r3
   c2de8:	dc0b      	bgt.n	c2e02 <atanf+0x146>
   c2dea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c2dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c2df2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2df6:	2302      	movs	r3, #2
   c2df8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2dfc:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c2e00:	e77a      	b.n	c2cf8 <atanf+0x3c>
   c2e02:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2e06:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2e0a:	2303      	movs	r3, #3
   c2e0c:	e774      	b.n	c2cf8 <atanf+0x3c>
   c2e0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2e12:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2e16:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2e1a:	2301      	movs	r3, #1
   c2e1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2e20:	e76a      	b.n	c2cf8 <atanf+0x3c>
   c2e22:	bf00      	nop
   c2e24:	3fc90fdb 	.word	0x3fc90fdb
   c2e28:	bfc90fdb 	.word	0xbfc90fdb
   c2e2c:	3edfffff 	.word	0x3edfffff
   c2e30:	3c8569d7 	.word	0x3c8569d7
   c2e34:	3d4bda59 	.word	0x3d4bda59
   c2e38:	3d886b35 	.word	0x3d886b35
   c2e3c:	3dba2e6e 	.word	0x3dba2e6e
   c2e40:	bd15a221 	.word	0xbd15a221
   c2e44:	bd6ef16b 	.word	0xbd6ef16b
   c2e48:	bd9d8795 	.word	0xbd9d8795
   c2e4c:	3e124925 	.word	0x3e124925
   c2e50:	bde38e38 	.word	0xbde38e38
   c2e54:	3eaaaaab 	.word	0x3eaaaaab
   c2e58:	be4ccccd 	.word	0xbe4ccccd
   c2e5c:	000c7a48 	.word	0x000c7a48
   c2e60:	000c7a38 	.word	0x000c7a38
   c2e64:	7149f2ca 	.word	0x7149f2ca
   c2e68:	3f97ffff 	.word	0x3f97ffff
   c2e6c:	401bffff 	.word	0x401bffff

000c2e70 <fabsf>:
   c2e70:	ee10 3a10 	vmov	r3, s0
   c2e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2e78:	ee00 3a10 	vmov	s0, r3
   c2e7c:	4770      	bx	lr
   c2e7e:	bf00      	nop

000c2e80 <floorf>:
   c2e80:	ee10 2a10 	vmov	r2, s0
   c2e84:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c2e88:	3b7f      	subs	r3, #127	; 0x7f
   c2e8a:	2b16      	cmp	r3, #22
   c2e8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c2e90:	dc28      	bgt.n	c2ee4 <floorf+0x64>
   c2e92:	2b00      	cmp	r3, #0
   c2e94:	db18      	blt.n	c2ec8 <floorf+0x48>
   c2e96:	491a      	ldr	r1, [pc, #104]	; (c2f00 <floorf+0x80>)
   c2e98:	4119      	asrs	r1, r3
   c2e9a:	420a      	tst	r2, r1
   c2e9c:	d021      	beq.n	c2ee2 <floorf+0x62>
   c2e9e:	eddf 7a19 	vldr	s15, [pc, #100]	; c2f04 <floorf+0x84>
   c2ea2:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2eae:	dd18      	ble.n	c2ee2 <floorf+0x62>
   c2eb0:	2a00      	cmp	r2, #0
   c2eb2:	da04      	bge.n	c2ebe <floorf+0x3e>
   c2eb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c2eb8:	fa40 f303 	asr.w	r3, r0, r3
   c2ebc:	441a      	add	r2, r3
   c2ebe:	ea22 0301 	bic.w	r3, r2, r1
   c2ec2:	ee00 3a10 	vmov	s0, r3
   c2ec6:	4770      	bx	lr
   c2ec8:	eddf 7a0e 	vldr	s15, [pc, #56]	; c2f04 <floorf+0x84>
   c2ecc:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2ed8:	dd03      	ble.n	c2ee2 <floorf+0x62>
   c2eda:	2a00      	cmp	r2, #0
   c2edc:	db08      	blt.n	c2ef0 <floorf+0x70>
   c2ede:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c2f08 <floorf+0x88>
   c2ee2:	4770      	bx	lr
   c2ee4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2ee8:	d3fb      	bcc.n	c2ee2 <floorf+0x62>
   c2eea:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2eee:	4770      	bx	lr
   c2ef0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c2ef4:	2900      	cmp	r1, #0
   c2ef6:	bf18      	it	ne
   c2ef8:	eeb0 0a67 	vmovne.f32	s0, s15
   c2efc:	4770      	bx	lr
   c2efe:	bf00      	nop
   c2f00:	007fffff 	.word	0x007fffff
   c2f04:	7149f2ca 	.word	0x7149f2ca
   c2f08:	00000000 	.word	0x00000000

000c2f0c <scalbnf>:
   c2f0c:	b082      	sub	sp, #8
   c2f0e:	ed8d 0a01 	vstr	s0, [sp, #4]
   c2f12:	9b01      	ldr	r3, [sp, #4]
   c2f14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c2f18:	d02a      	beq.n	c2f70 <scalbnf+0x64>
   c2f1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2f1e:	d223      	bcs.n	c2f68 <scalbnf+0x5c>
   c2f20:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c2f24:	d128      	bne.n	c2f78 <scalbnf+0x6c>
   c2f26:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2f2a:	eddf 7a2a 	vldr	s15, [pc, #168]	; c2fd4 <scalbnf+0xc8>
   c2f2e:	4b2a      	ldr	r3, [pc, #168]	; (c2fd8 <scalbnf+0xcc>)
   c2f30:	ee67 7a27 	vmul.f32	s15, s14, s15
   c2f34:	4298      	cmp	r0, r3
   c2f36:	edcd 7a01 	vstr	s15, [sp, #4]
   c2f3a:	db37      	blt.n	c2fac <scalbnf+0xa0>
   c2f3c:	9b01      	ldr	r3, [sp, #4]
   c2f3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c2f42:	3a19      	subs	r2, #25
   c2f44:	4402      	add	r2, r0
   c2f46:	2afe      	cmp	r2, #254	; 0xfe
   c2f48:	dd1a      	ble.n	c2f80 <scalbnf+0x74>
   c2f4a:	ed9f 0a24 	vldr	s0, [pc, #144]	; c2fdc <scalbnf+0xd0>
   c2f4e:	ed9f 7a24 	vldr	s14, [pc, #144]	; c2fe0 <scalbnf+0xd4>
   c2f52:	9b01      	ldr	r3, [sp, #4]
   c2f54:	2b00      	cmp	r3, #0
   c2f56:	eef0 7a40 	vmov.f32	s15, s0
   c2f5a:	bfb8      	it	lt
   c2f5c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c2f60:	ee20 0a27 	vmul.f32	s0, s0, s15
   c2f64:	b002      	add	sp, #8
   c2f66:	4770      	bx	lr
   c2f68:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2f6c:	b002      	add	sp, #8
   c2f6e:	4770      	bx	lr
   c2f70:	ed9d 0a01 	vldr	s0, [sp, #4]
   c2f74:	b002      	add	sp, #8
   c2f76:	4770      	bx	lr
   c2f78:	0dd2      	lsrs	r2, r2, #23
   c2f7a:	4402      	add	r2, r0
   c2f7c:	2afe      	cmp	r2, #254	; 0xfe
   c2f7e:	dce4      	bgt.n	c2f4a <scalbnf+0x3e>
   c2f80:	2a00      	cmp	r2, #0
   c2f82:	dc0b      	bgt.n	c2f9c <scalbnf+0x90>
   c2f84:	f112 0f16 	cmn.w	r2, #22
   c2f88:	da17      	bge.n	c2fba <scalbnf+0xae>
   c2f8a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c2f8e:	4298      	cmp	r0, r3
   c2f90:	dcdb      	bgt.n	c2f4a <scalbnf+0x3e>
   c2f92:	ed9f 0a14 	vldr	s0, [pc, #80]	; c2fe4 <scalbnf+0xd8>
   c2f96:	ed9f 7a14 	vldr	s14, [pc, #80]	; c2fe8 <scalbnf+0xdc>
   c2f9a:	e7da      	b.n	c2f52 <scalbnf+0x46>
   c2f9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2fa0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2fa4:	ee00 3a10 	vmov	s0, r3
   c2fa8:	b002      	add	sp, #8
   c2faa:	4770      	bx	lr
   c2fac:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c2fe4 <scalbnf+0xd8>
   c2fb0:	eddd 7a01 	vldr	s15, [sp, #4]
   c2fb4:	ee27 0a80 	vmul.f32	s0, s15, s0
   c2fb8:	e7d8      	b.n	c2f6c <scalbnf+0x60>
   c2fba:	3219      	adds	r2, #25
   c2fbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2fc0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2fc4:	eddf 7a09 	vldr	s15, [pc, #36]	; c2fec <scalbnf+0xe0>
   c2fc8:	ee07 3a10 	vmov	s14, r3
   c2fcc:	ee27 0a27 	vmul.f32	s0, s14, s15
   c2fd0:	e7cc      	b.n	c2f6c <scalbnf+0x60>
   c2fd2:	bf00      	nop
   c2fd4:	4c000000 	.word	0x4c000000
   c2fd8:	ffff3cb0 	.word	0xffff3cb0
   c2fdc:	7149f2ca 	.word	0x7149f2ca
   c2fe0:	f149f2ca 	.word	0xf149f2ca
   c2fe4:	0da24260 	.word	0x0da24260
   c2fe8:	8da24260 	.word	0x8da24260
   c2fec:	33000000 	.word	0x33000000

000c2ff0 <__aeabi_drsub>:
   c2ff0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c2ff4:	e002      	b.n	c2ffc <__adddf3>
   c2ff6:	bf00      	nop

000c2ff8 <__aeabi_dsub>:
   c2ff8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c2ffc <__adddf3>:
   c2ffc:	b530      	push	{r4, r5, lr}
   c2ffe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3002:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3006:	ea94 0f05 	teq	r4, r5
   c300a:	bf08      	it	eq
   c300c:	ea90 0f02 	teqeq	r0, r2
   c3010:	bf1f      	itttt	ne
   c3012:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3016:	ea55 0c02 	orrsne.w	ip, r5, r2
   c301a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c301e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3022:	f000 80e2 	beq.w	c31ea <__adddf3+0x1ee>
   c3026:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c302a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c302e:	bfb8      	it	lt
   c3030:	426d      	neglt	r5, r5
   c3032:	dd0c      	ble.n	c304e <__adddf3+0x52>
   c3034:	442c      	add	r4, r5
   c3036:	ea80 0202 	eor.w	r2, r0, r2
   c303a:	ea81 0303 	eor.w	r3, r1, r3
   c303e:	ea82 0000 	eor.w	r0, r2, r0
   c3042:	ea83 0101 	eor.w	r1, r3, r1
   c3046:	ea80 0202 	eor.w	r2, r0, r2
   c304a:	ea81 0303 	eor.w	r3, r1, r3
   c304e:	2d36      	cmp	r5, #54	; 0x36
   c3050:	bf88      	it	hi
   c3052:	bd30      	pophi	{r4, r5, pc}
   c3054:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3058:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c305c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3060:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3064:	d002      	beq.n	c306c <__adddf3+0x70>
   c3066:	4240      	negs	r0, r0
   c3068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c306c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3070:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3074:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3078:	d002      	beq.n	c3080 <__adddf3+0x84>
   c307a:	4252      	negs	r2, r2
   c307c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3080:	ea94 0f05 	teq	r4, r5
   c3084:	f000 80a7 	beq.w	c31d6 <__adddf3+0x1da>
   c3088:	f1a4 0401 	sub.w	r4, r4, #1
   c308c:	f1d5 0e20 	rsbs	lr, r5, #32
   c3090:	db0d      	blt.n	c30ae <__adddf3+0xb2>
   c3092:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3096:	fa22 f205 	lsr.w	r2, r2, r5
   c309a:	1880      	adds	r0, r0, r2
   c309c:	f141 0100 	adc.w	r1, r1, #0
   c30a0:	fa03 f20e 	lsl.w	r2, r3, lr
   c30a4:	1880      	adds	r0, r0, r2
   c30a6:	fa43 f305 	asr.w	r3, r3, r5
   c30aa:	4159      	adcs	r1, r3
   c30ac:	e00e      	b.n	c30cc <__adddf3+0xd0>
   c30ae:	f1a5 0520 	sub.w	r5, r5, #32
   c30b2:	f10e 0e20 	add.w	lr, lr, #32
   c30b6:	2a01      	cmp	r2, #1
   c30b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   c30bc:	bf28      	it	cs
   c30be:	f04c 0c02 	orrcs.w	ip, ip, #2
   c30c2:	fa43 f305 	asr.w	r3, r3, r5
   c30c6:	18c0      	adds	r0, r0, r3
   c30c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c30cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c30d0:	d507      	bpl.n	c30e2 <__adddf3+0xe6>
   c30d2:	f04f 0e00 	mov.w	lr, #0
   c30d6:	f1dc 0c00 	rsbs	ip, ip, #0
   c30da:	eb7e 0000 	sbcs.w	r0, lr, r0
   c30de:	eb6e 0101 	sbc.w	r1, lr, r1
   c30e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c30e6:	d31b      	bcc.n	c3120 <__adddf3+0x124>
   c30e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c30ec:	d30c      	bcc.n	c3108 <__adddf3+0x10c>
   c30ee:	0849      	lsrs	r1, r1, #1
   c30f0:	ea5f 0030 	movs.w	r0, r0, rrx
   c30f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c30f8:	f104 0401 	add.w	r4, r4, #1
   c30fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3100:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3104:	f080 809a 	bcs.w	c323c <__adddf3+0x240>
   c3108:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c310c:	bf08      	it	eq
   c310e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3112:	f150 0000 	adcs.w	r0, r0, #0
   c3116:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c311a:	ea41 0105 	orr.w	r1, r1, r5
   c311e:	bd30      	pop	{r4, r5, pc}
   c3120:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3124:	4140      	adcs	r0, r0
   c3126:	eb41 0101 	adc.w	r1, r1, r1
   c312a:	3c01      	subs	r4, #1
   c312c:	bf28      	it	cs
   c312e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3132:	d2e9      	bcs.n	c3108 <__adddf3+0x10c>
   c3134:	f091 0f00 	teq	r1, #0
   c3138:	bf04      	itt	eq
   c313a:	4601      	moveq	r1, r0
   c313c:	2000      	moveq	r0, #0
   c313e:	fab1 f381 	clz	r3, r1
   c3142:	bf08      	it	eq
   c3144:	3320      	addeq	r3, #32
   c3146:	f1a3 030b 	sub.w	r3, r3, #11
   c314a:	f1b3 0220 	subs.w	r2, r3, #32
   c314e:	da0c      	bge.n	c316a <__adddf3+0x16e>
   c3150:	320c      	adds	r2, #12
   c3152:	dd08      	ble.n	c3166 <__adddf3+0x16a>
   c3154:	f102 0c14 	add.w	ip, r2, #20
   c3158:	f1c2 020c 	rsb	r2, r2, #12
   c315c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3160:	fa21 f102 	lsr.w	r1, r1, r2
   c3164:	e00c      	b.n	c3180 <__adddf3+0x184>
   c3166:	f102 0214 	add.w	r2, r2, #20
   c316a:	bfd8      	it	le
   c316c:	f1c2 0c20 	rsble	ip, r2, #32
   c3170:	fa01 f102 	lsl.w	r1, r1, r2
   c3174:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3178:	bfdc      	itt	le
   c317a:	ea41 010c 	orrle.w	r1, r1, ip
   c317e:	4090      	lslle	r0, r2
   c3180:	1ae4      	subs	r4, r4, r3
   c3182:	bfa2      	ittt	ge
   c3184:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3188:	4329      	orrge	r1, r5
   c318a:	bd30      	popge	{r4, r5, pc}
   c318c:	ea6f 0404 	mvn.w	r4, r4
   c3190:	3c1f      	subs	r4, #31
   c3192:	da1c      	bge.n	c31ce <__adddf3+0x1d2>
   c3194:	340c      	adds	r4, #12
   c3196:	dc0e      	bgt.n	c31b6 <__adddf3+0x1ba>
   c3198:	f104 0414 	add.w	r4, r4, #20
   c319c:	f1c4 0220 	rsb	r2, r4, #32
   c31a0:	fa20 f004 	lsr.w	r0, r0, r4
   c31a4:	fa01 f302 	lsl.w	r3, r1, r2
   c31a8:	ea40 0003 	orr.w	r0, r0, r3
   c31ac:	fa21 f304 	lsr.w	r3, r1, r4
   c31b0:	ea45 0103 	orr.w	r1, r5, r3
   c31b4:	bd30      	pop	{r4, r5, pc}
   c31b6:	f1c4 040c 	rsb	r4, r4, #12
   c31ba:	f1c4 0220 	rsb	r2, r4, #32
   c31be:	fa20 f002 	lsr.w	r0, r0, r2
   c31c2:	fa01 f304 	lsl.w	r3, r1, r4
   c31c6:	ea40 0003 	orr.w	r0, r0, r3
   c31ca:	4629      	mov	r1, r5
   c31cc:	bd30      	pop	{r4, r5, pc}
   c31ce:	fa21 f004 	lsr.w	r0, r1, r4
   c31d2:	4629      	mov	r1, r5
   c31d4:	bd30      	pop	{r4, r5, pc}
   c31d6:	f094 0f00 	teq	r4, #0
   c31da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c31de:	bf06      	itte	eq
   c31e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c31e4:	3401      	addeq	r4, #1
   c31e6:	3d01      	subne	r5, #1
   c31e8:	e74e      	b.n	c3088 <__adddf3+0x8c>
   c31ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c31ee:	bf18      	it	ne
   c31f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c31f4:	d029      	beq.n	c324a <__adddf3+0x24e>
   c31f6:	ea94 0f05 	teq	r4, r5
   c31fa:	bf08      	it	eq
   c31fc:	ea90 0f02 	teqeq	r0, r2
   c3200:	d005      	beq.n	c320e <__adddf3+0x212>
   c3202:	ea54 0c00 	orrs.w	ip, r4, r0
   c3206:	bf04      	itt	eq
   c3208:	4619      	moveq	r1, r3
   c320a:	4610      	moveq	r0, r2
   c320c:	bd30      	pop	{r4, r5, pc}
   c320e:	ea91 0f03 	teq	r1, r3
   c3212:	bf1e      	ittt	ne
   c3214:	2100      	movne	r1, #0
   c3216:	2000      	movne	r0, #0
   c3218:	bd30      	popne	{r4, r5, pc}
   c321a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c321e:	d105      	bne.n	c322c <__adddf3+0x230>
   c3220:	0040      	lsls	r0, r0, #1
   c3222:	4149      	adcs	r1, r1
   c3224:	bf28      	it	cs
   c3226:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c322a:	bd30      	pop	{r4, r5, pc}
   c322c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3230:	bf3c      	itt	cc
   c3232:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3236:	bd30      	popcc	{r4, r5, pc}
   c3238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c323c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3240:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3244:	f04f 0000 	mov.w	r0, #0
   c3248:	bd30      	pop	{r4, r5, pc}
   c324a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c324e:	bf1a      	itte	ne
   c3250:	4619      	movne	r1, r3
   c3252:	4610      	movne	r0, r2
   c3254:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3258:	bf1c      	itt	ne
   c325a:	460b      	movne	r3, r1
   c325c:	4602      	movne	r2, r0
   c325e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3262:	bf06      	itte	eq
   c3264:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3268:	ea91 0f03 	teqeq	r1, r3
   c326c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3270:	bd30      	pop	{r4, r5, pc}
   c3272:	bf00      	nop

000c3274 <__aeabi_ui2d>:
   c3274:	f090 0f00 	teq	r0, #0
   c3278:	bf04      	itt	eq
   c327a:	2100      	moveq	r1, #0
   c327c:	4770      	bxeq	lr
   c327e:	b530      	push	{r4, r5, lr}
   c3280:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3284:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3288:	f04f 0500 	mov.w	r5, #0
   c328c:	f04f 0100 	mov.w	r1, #0
   c3290:	e750      	b.n	c3134 <__adddf3+0x138>
   c3292:	bf00      	nop

000c3294 <__aeabi_i2d>:
   c3294:	f090 0f00 	teq	r0, #0
   c3298:	bf04      	itt	eq
   c329a:	2100      	moveq	r1, #0
   c329c:	4770      	bxeq	lr
   c329e:	b530      	push	{r4, r5, lr}
   c32a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c32a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c32a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c32ac:	bf48      	it	mi
   c32ae:	4240      	negmi	r0, r0
   c32b0:	f04f 0100 	mov.w	r1, #0
   c32b4:	e73e      	b.n	c3134 <__adddf3+0x138>
   c32b6:	bf00      	nop

000c32b8 <__aeabi_f2d>:
   c32b8:	0042      	lsls	r2, r0, #1
   c32ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c32be:	ea4f 0131 	mov.w	r1, r1, rrx
   c32c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c32c6:	bf1f      	itttt	ne
   c32c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c32cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c32d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c32d4:	4770      	bxne	lr
   c32d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c32da:	bf08      	it	eq
   c32dc:	4770      	bxeq	lr
   c32de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c32e2:	bf04      	itt	eq
   c32e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c32e8:	4770      	bxeq	lr
   c32ea:	b530      	push	{r4, r5, lr}
   c32ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   c32f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c32f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c32f8:	e71c      	b.n	c3134 <__adddf3+0x138>
   c32fa:	bf00      	nop

000c32fc <__aeabi_ul2d>:
   c32fc:	ea50 0201 	orrs.w	r2, r0, r1
   c3300:	bf08      	it	eq
   c3302:	4770      	bxeq	lr
   c3304:	b530      	push	{r4, r5, lr}
   c3306:	f04f 0500 	mov.w	r5, #0
   c330a:	e00a      	b.n	c3322 <__aeabi_l2d+0x16>

000c330c <__aeabi_l2d>:
   c330c:	ea50 0201 	orrs.w	r2, r0, r1
   c3310:	bf08      	it	eq
   c3312:	4770      	bxeq	lr
   c3314:	b530      	push	{r4, r5, lr}
   c3316:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c331a:	d502      	bpl.n	c3322 <__aeabi_l2d+0x16>
   c331c:	4240      	negs	r0, r0
   c331e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3322:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3326:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c332a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c332e:	f43f aed8 	beq.w	c30e2 <__adddf3+0xe6>
   c3332:	f04f 0203 	mov.w	r2, #3
   c3336:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c333a:	bf18      	it	ne
   c333c:	3203      	addne	r2, #3
   c333e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3342:	bf18      	it	ne
   c3344:	3203      	addne	r2, #3
   c3346:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c334a:	f1c2 0320 	rsb	r3, r2, #32
   c334e:	fa00 fc03 	lsl.w	ip, r0, r3
   c3352:	fa20 f002 	lsr.w	r0, r0, r2
   c3356:	fa01 fe03 	lsl.w	lr, r1, r3
   c335a:	ea40 000e 	orr.w	r0, r0, lr
   c335e:	fa21 f102 	lsr.w	r1, r1, r2
   c3362:	4414      	add	r4, r2
   c3364:	e6bd      	b.n	c30e2 <__adddf3+0xe6>
   c3366:	bf00      	nop

000c3368 <__aeabi_dmul>:
   c3368:	b570      	push	{r4, r5, r6, lr}
   c336a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c336e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3372:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3376:	bf1d      	ittte	ne
   c3378:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c337c:	ea94 0f0c 	teqne	r4, ip
   c3380:	ea95 0f0c 	teqne	r5, ip
   c3384:	f000 f8de 	bleq	c3544 <__aeabi_dmul+0x1dc>
   c3388:	442c      	add	r4, r5
   c338a:	ea81 0603 	eor.w	r6, r1, r3
   c338e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3392:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3396:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c339a:	bf18      	it	ne
   c339c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c33a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c33a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c33a8:	d038      	beq.n	c341c <__aeabi_dmul+0xb4>
   c33aa:	fba0 ce02 	umull	ip, lr, r0, r2
   c33ae:	f04f 0500 	mov.w	r5, #0
   c33b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   c33b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c33ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   c33be:	f04f 0600 	mov.w	r6, #0
   c33c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   c33c6:	f09c 0f00 	teq	ip, #0
   c33ca:	bf18      	it	ne
   c33cc:	f04e 0e01 	orrne.w	lr, lr, #1
   c33d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c33d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c33d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c33dc:	d204      	bcs.n	c33e8 <__aeabi_dmul+0x80>
   c33de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c33e2:	416d      	adcs	r5, r5
   c33e4:	eb46 0606 	adc.w	r6, r6, r6
   c33e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c33ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c33f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c33f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c33f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c33fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3400:	bf88      	it	hi
   c3402:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3406:	d81e      	bhi.n	c3446 <__aeabi_dmul+0xde>
   c3408:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c340c:	bf08      	it	eq
   c340e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3412:	f150 0000 	adcs.w	r0, r0, #0
   c3416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c341a:	bd70      	pop	{r4, r5, r6, pc}
   c341c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3420:	ea46 0101 	orr.w	r1, r6, r1
   c3424:	ea40 0002 	orr.w	r0, r0, r2
   c3428:	ea81 0103 	eor.w	r1, r1, r3
   c342c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3430:	bfc2      	ittt	gt
   c3432:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c343a:	bd70      	popgt	{r4, r5, r6, pc}
   c343c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3440:	f04f 0e00 	mov.w	lr, #0
   c3444:	3c01      	subs	r4, #1
   c3446:	f300 80ab 	bgt.w	c35a0 <__aeabi_dmul+0x238>
   c344a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c344e:	bfde      	ittt	le
   c3450:	2000      	movle	r0, #0
   c3452:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3456:	bd70      	pople	{r4, r5, r6, pc}
   c3458:	f1c4 0400 	rsb	r4, r4, #0
   c345c:	3c20      	subs	r4, #32
   c345e:	da35      	bge.n	c34cc <__aeabi_dmul+0x164>
   c3460:	340c      	adds	r4, #12
   c3462:	dc1b      	bgt.n	c349c <__aeabi_dmul+0x134>
   c3464:	f104 0414 	add.w	r4, r4, #20
   c3468:	f1c4 0520 	rsb	r5, r4, #32
   c346c:	fa00 f305 	lsl.w	r3, r0, r5
   c3470:	fa20 f004 	lsr.w	r0, r0, r4
   c3474:	fa01 f205 	lsl.w	r2, r1, r5
   c3478:	ea40 0002 	orr.w	r0, r0, r2
   c347c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3488:	fa21 f604 	lsr.w	r6, r1, r4
   c348c:	eb42 0106 	adc.w	r1, r2, r6
   c3490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3494:	bf08      	it	eq
   c3496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c349a:	bd70      	pop	{r4, r5, r6, pc}
   c349c:	f1c4 040c 	rsb	r4, r4, #12
   c34a0:	f1c4 0520 	rsb	r5, r4, #32
   c34a4:	fa00 f304 	lsl.w	r3, r0, r4
   c34a8:	fa20 f005 	lsr.w	r0, r0, r5
   c34ac:	fa01 f204 	lsl.w	r2, r1, r4
   c34b0:	ea40 0002 	orr.w	r0, r0, r2
   c34b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c34b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c34bc:	f141 0100 	adc.w	r1, r1, #0
   c34c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c34c4:	bf08      	it	eq
   c34c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c34ca:	bd70      	pop	{r4, r5, r6, pc}
   c34cc:	f1c4 0520 	rsb	r5, r4, #32
   c34d0:	fa00 f205 	lsl.w	r2, r0, r5
   c34d4:	ea4e 0e02 	orr.w	lr, lr, r2
   c34d8:	fa20 f304 	lsr.w	r3, r0, r4
   c34dc:	fa01 f205 	lsl.w	r2, r1, r5
   c34e0:	ea43 0302 	orr.w	r3, r3, r2
   c34e4:	fa21 f004 	lsr.w	r0, r1, r4
   c34e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c34ec:	fa21 f204 	lsr.w	r2, r1, r4
   c34f0:	ea20 0002 	bic.w	r0, r0, r2
   c34f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c34f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c34fc:	bf08      	it	eq
   c34fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3502:	bd70      	pop	{r4, r5, r6, pc}
   c3504:	f094 0f00 	teq	r4, #0
   c3508:	d10f      	bne.n	c352a <__aeabi_dmul+0x1c2>
   c350a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c350e:	0040      	lsls	r0, r0, #1
   c3510:	eb41 0101 	adc.w	r1, r1, r1
   c3514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3518:	bf08      	it	eq
   c351a:	3c01      	subeq	r4, #1
   c351c:	d0f7      	beq.n	c350e <__aeabi_dmul+0x1a6>
   c351e:	ea41 0106 	orr.w	r1, r1, r6
   c3522:	f095 0f00 	teq	r5, #0
   c3526:	bf18      	it	ne
   c3528:	4770      	bxne	lr
   c352a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c352e:	0052      	lsls	r2, r2, #1
   c3530:	eb43 0303 	adc.w	r3, r3, r3
   c3534:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3538:	bf08      	it	eq
   c353a:	3d01      	subeq	r5, #1
   c353c:	d0f7      	beq.n	c352e <__aeabi_dmul+0x1c6>
   c353e:	ea43 0306 	orr.w	r3, r3, r6
   c3542:	4770      	bx	lr
   c3544:	ea94 0f0c 	teq	r4, ip
   c3548:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c354c:	bf18      	it	ne
   c354e:	ea95 0f0c 	teqne	r5, ip
   c3552:	d00c      	beq.n	c356e <__aeabi_dmul+0x206>
   c3554:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3558:	bf18      	it	ne
   c355a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c355e:	d1d1      	bne.n	c3504 <__aeabi_dmul+0x19c>
   c3560:	ea81 0103 	eor.w	r1, r1, r3
   c3564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3568:	f04f 0000 	mov.w	r0, #0
   c356c:	bd70      	pop	{r4, r5, r6, pc}
   c356e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3572:	bf06      	itte	eq
   c3574:	4610      	moveq	r0, r2
   c3576:	4619      	moveq	r1, r3
   c3578:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c357c:	d019      	beq.n	c35b2 <__aeabi_dmul+0x24a>
   c357e:	ea94 0f0c 	teq	r4, ip
   c3582:	d102      	bne.n	c358a <__aeabi_dmul+0x222>
   c3584:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3588:	d113      	bne.n	c35b2 <__aeabi_dmul+0x24a>
   c358a:	ea95 0f0c 	teq	r5, ip
   c358e:	d105      	bne.n	c359c <__aeabi_dmul+0x234>
   c3590:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3594:	bf1c      	itt	ne
   c3596:	4610      	movne	r0, r2
   c3598:	4619      	movne	r1, r3
   c359a:	d10a      	bne.n	c35b2 <__aeabi_dmul+0x24a>
   c359c:	ea81 0103 	eor.w	r1, r1, r3
   c35a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c35a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c35a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c35ac:	f04f 0000 	mov.w	r0, #0
   c35b0:	bd70      	pop	{r4, r5, r6, pc}
   c35b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c35b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c35ba:	bd70      	pop	{r4, r5, r6, pc}

000c35bc <__aeabi_ddiv>:
   c35bc:	b570      	push	{r4, r5, r6, lr}
   c35be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c35c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c35c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c35ca:	bf1d      	ittte	ne
   c35cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c35d0:	ea94 0f0c 	teqne	r4, ip
   c35d4:	ea95 0f0c 	teqne	r5, ip
   c35d8:	f000 f8a7 	bleq	c372a <__aeabi_ddiv+0x16e>
   c35dc:	eba4 0405 	sub.w	r4, r4, r5
   c35e0:	ea81 0e03 	eor.w	lr, r1, r3
   c35e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c35e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c35ec:	f000 8088 	beq.w	c3700 <__aeabi_ddiv+0x144>
   c35f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c35f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c35f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c35fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c3600:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c3604:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c3608:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c360c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c3610:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c3614:	429d      	cmp	r5, r3
   c3616:	bf08      	it	eq
   c3618:	4296      	cmpeq	r6, r2
   c361a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c361e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c3622:	d202      	bcs.n	c362a <__aeabi_ddiv+0x6e>
   c3624:	085b      	lsrs	r3, r3, #1
   c3626:	ea4f 0232 	mov.w	r2, r2, rrx
   c362a:	1ab6      	subs	r6, r6, r2
   c362c:	eb65 0503 	sbc.w	r5, r5, r3
   c3630:	085b      	lsrs	r3, r3, #1
   c3632:	ea4f 0232 	mov.w	r2, r2, rrx
   c3636:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c363a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c363e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3642:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3646:	bf22      	ittt	cs
   c3648:	1ab6      	subcs	r6, r6, r2
   c364a:	4675      	movcs	r5, lr
   c364c:	ea40 000c 	orrcs.w	r0, r0, ip
   c3650:	085b      	lsrs	r3, r3, #1
   c3652:	ea4f 0232 	mov.w	r2, r2, rrx
   c3656:	ebb6 0e02 	subs.w	lr, r6, r2
   c365a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c365e:	bf22      	ittt	cs
   c3660:	1ab6      	subcs	r6, r6, r2
   c3662:	4675      	movcs	r5, lr
   c3664:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3668:	085b      	lsrs	r3, r3, #1
   c366a:	ea4f 0232 	mov.w	r2, r2, rrx
   c366e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3672:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3676:	bf22      	ittt	cs
   c3678:	1ab6      	subcs	r6, r6, r2
   c367a:	4675      	movcs	r5, lr
   c367c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3680:	085b      	lsrs	r3, r3, #1
   c3682:	ea4f 0232 	mov.w	r2, r2, rrx
   c3686:	ebb6 0e02 	subs.w	lr, r6, r2
   c368a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c368e:	bf22      	ittt	cs
   c3690:	1ab6      	subcs	r6, r6, r2
   c3692:	4675      	movcs	r5, lr
   c3694:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3698:	ea55 0e06 	orrs.w	lr, r5, r6
   c369c:	d018      	beq.n	c36d0 <__aeabi_ddiv+0x114>
   c369e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c36a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c36a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c36aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c36ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c36b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c36b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c36ba:	d1c0      	bne.n	c363e <__aeabi_ddiv+0x82>
   c36bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c36c0:	d10b      	bne.n	c36da <__aeabi_ddiv+0x11e>
   c36c2:	ea41 0100 	orr.w	r1, r1, r0
   c36c6:	f04f 0000 	mov.w	r0, #0
   c36ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c36ce:	e7b6      	b.n	c363e <__aeabi_ddiv+0x82>
   c36d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c36d4:	bf04      	itt	eq
   c36d6:	4301      	orreq	r1, r0
   c36d8:	2000      	moveq	r0, #0
   c36da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c36de:	bf88      	it	hi
   c36e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c36e4:	f63f aeaf 	bhi.w	c3446 <__aeabi_dmul+0xde>
   c36e8:	ebb5 0c03 	subs.w	ip, r5, r3
   c36ec:	bf04      	itt	eq
   c36ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   c36f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c36f6:	f150 0000 	adcs.w	r0, r0, #0
   c36fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c36fe:	bd70      	pop	{r4, r5, r6, pc}
   c3700:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c3704:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c3708:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c370c:	bfc2      	ittt	gt
   c370e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3716:	bd70      	popgt	{r4, r5, r6, pc}
   c3718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c371c:	f04f 0e00 	mov.w	lr, #0
   c3720:	3c01      	subs	r4, #1
   c3722:	e690      	b.n	c3446 <__aeabi_dmul+0xde>
   c3724:	ea45 0e06 	orr.w	lr, r5, r6
   c3728:	e68d      	b.n	c3446 <__aeabi_dmul+0xde>
   c372a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c372e:	ea94 0f0c 	teq	r4, ip
   c3732:	bf08      	it	eq
   c3734:	ea95 0f0c 	teqeq	r5, ip
   c3738:	f43f af3b 	beq.w	c35b2 <__aeabi_dmul+0x24a>
   c373c:	ea94 0f0c 	teq	r4, ip
   c3740:	d10a      	bne.n	c3758 <__aeabi_ddiv+0x19c>
   c3742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3746:	f47f af34 	bne.w	c35b2 <__aeabi_dmul+0x24a>
   c374a:	ea95 0f0c 	teq	r5, ip
   c374e:	f47f af25 	bne.w	c359c <__aeabi_dmul+0x234>
   c3752:	4610      	mov	r0, r2
   c3754:	4619      	mov	r1, r3
   c3756:	e72c      	b.n	c35b2 <__aeabi_dmul+0x24a>
   c3758:	ea95 0f0c 	teq	r5, ip
   c375c:	d106      	bne.n	c376c <__aeabi_ddiv+0x1b0>
   c375e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3762:	f43f aefd 	beq.w	c3560 <__aeabi_dmul+0x1f8>
   c3766:	4610      	mov	r0, r2
   c3768:	4619      	mov	r1, r3
   c376a:	e722      	b.n	c35b2 <__aeabi_dmul+0x24a>
   c376c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3770:	bf18      	it	ne
   c3772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3776:	f47f aec5 	bne.w	c3504 <__aeabi_dmul+0x19c>
   c377a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c377e:	f47f af0d 	bne.w	c359c <__aeabi_dmul+0x234>
   c3782:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c3786:	f47f aeeb 	bne.w	c3560 <__aeabi_dmul+0x1f8>
   c378a:	e712      	b.n	c35b2 <__aeabi_dmul+0x24a>

000c378c <__gedf2>:
   c378c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3790:	e006      	b.n	c37a0 <__cmpdf2+0x4>
   c3792:	bf00      	nop

000c3794 <__ledf2>:
   c3794:	f04f 0c01 	mov.w	ip, #1
   c3798:	e002      	b.n	c37a0 <__cmpdf2+0x4>
   c379a:	bf00      	nop

000c379c <__cmpdf2>:
   c379c:	f04f 0c01 	mov.w	ip, #1
   c37a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   c37a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c37a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c37ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c37b0:	bf18      	it	ne
   c37b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c37b6:	d01b      	beq.n	c37f0 <__cmpdf2+0x54>
   c37b8:	b001      	add	sp, #4
   c37ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c37be:	bf0c      	ite	eq
   c37c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c37c4:	ea91 0f03 	teqne	r1, r3
   c37c8:	bf02      	ittt	eq
   c37ca:	ea90 0f02 	teqeq	r0, r2
   c37ce:	2000      	moveq	r0, #0
   c37d0:	4770      	bxeq	lr
   c37d2:	f110 0f00 	cmn.w	r0, #0
   c37d6:	ea91 0f03 	teq	r1, r3
   c37da:	bf58      	it	pl
   c37dc:	4299      	cmppl	r1, r3
   c37de:	bf08      	it	eq
   c37e0:	4290      	cmpeq	r0, r2
   c37e2:	bf2c      	ite	cs
   c37e4:	17d8      	asrcs	r0, r3, #31
   c37e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c37ea:	f040 0001 	orr.w	r0, r0, #1
   c37ee:	4770      	bx	lr
   c37f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c37f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c37f8:	d102      	bne.n	c3800 <__cmpdf2+0x64>
   c37fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c37fe:	d107      	bne.n	c3810 <__cmpdf2+0x74>
   c3800:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3808:	d1d6      	bne.n	c37b8 <__cmpdf2+0x1c>
   c380a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c380e:	d0d3      	beq.n	c37b8 <__cmpdf2+0x1c>
   c3810:	f85d 0b04 	ldr.w	r0, [sp], #4
   c3814:	4770      	bx	lr
   c3816:	bf00      	nop

000c3818 <__aeabi_cdrcmple>:
   c3818:	4684      	mov	ip, r0
   c381a:	4610      	mov	r0, r2
   c381c:	4662      	mov	r2, ip
   c381e:	468c      	mov	ip, r1
   c3820:	4619      	mov	r1, r3
   c3822:	4663      	mov	r3, ip
   c3824:	e000      	b.n	c3828 <__aeabi_cdcmpeq>
   c3826:	bf00      	nop

000c3828 <__aeabi_cdcmpeq>:
   c3828:	b501      	push	{r0, lr}
   c382a:	f7ff ffb7 	bl	c379c <__cmpdf2>
   c382e:	2800      	cmp	r0, #0
   c3830:	bf48      	it	mi
   c3832:	f110 0f00 	cmnmi.w	r0, #0
   c3836:	bd01      	pop	{r0, pc}

000c3838 <__aeabi_dcmpeq>:
   c3838:	f84d ed08 	str.w	lr, [sp, #-8]!
   c383c:	f7ff fff4 	bl	c3828 <__aeabi_cdcmpeq>
   c3840:	bf0c      	ite	eq
   c3842:	2001      	moveq	r0, #1
   c3844:	2000      	movne	r0, #0
   c3846:	f85d fb08 	ldr.w	pc, [sp], #8
   c384a:	bf00      	nop

000c384c <__aeabi_dcmplt>:
   c384c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3850:	f7ff ffea 	bl	c3828 <__aeabi_cdcmpeq>
   c3854:	bf34      	ite	cc
   c3856:	2001      	movcc	r0, #1
   c3858:	2000      	movcs	r0, #0
   c385a:	f85d fb08 	ldr.w	pc, [sp], #8
   c385e:	bf00      	nop

000c3860 <__aeabi_dcmple>:
   c3860:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3864:	f7ff ffe0 	bl	c3828 <__aeabi_cdcmpeq>
   c3868:	bf94      	ite	ls
   c386a:	2001      	movls	r0, #1
   c386c:	2000      	movhi	r0, #0
   c386e:	f85d fb08 	ldr.w	pc, [sp], #8
   c3872:	bf00      	nop

000c3874 <__aeabi_dcmpge>:
   c3874:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3878:	f7ff ffce 	bl	c3818 <__aeabi_cdrcmple>
   c387c:	bf94      	ite	ls
   c387e:	2001      	movls	r0, #1
   c3880:	2000      	movhi	r0, #0
   c3882:	f85d fb08 	ldr.w	pc, [sp], #8
   c3886:	bf00      	nop

000c3888 <__aeabi_dcmpgt>:
   c3888:	f84d ed08 	str.w	lr, [sp, #-8]!
   c388c:	f7ff ffc4 	bl	c3818 <__aeabi_cdrcmple>
   c3890:	bf34      	ite	cc
   c3892:	2001      	movcc	r0, #1
   c3894:	2000      	movcs	r0, #0
   c3896:	f85d fb08 	ldr.w	pc, [sp], #8
   c389a:	bf00      	nop

000c389c <__aeabi_dcmpun>:
   c389c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c38a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c38a4:	d102      	bne.n	c38ac <__aeabi_dcmpun+0x10>
   c38a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c38aa:	d10a      	bne.n	c38c2 <__aeabi_dcmpun+0x26>
   c38ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c38b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c38b4:	d102      	bne.n	c38bc <__aeabi_dcmpun+0x20>
   c38b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c38ba:	d102      	bne.n	c38c2 <__aeabi_dcmpun+0x26>
   c38bc:	f04f 0000 	mov.w	r0, #0
   c38c0:	4770      	bx	lr
   c38c2:	f04f 0001 	mov.w	r0, #1
   c38c6:	4770      	bx	lr

000c38c8 <__aeabi_d2iz>:
   c38c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c38cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c38d0:	d215      	bcs.n	c38fe <__aeabi_d2iz+0x36>
   c38d2:	d511      	bpl.n	c38f8 <__aeabi_d2iz+0x30>
   c38d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c38d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c38dc:	d912      	bls.n	c3904 <__aeabi_d2iz+0x3c>
   c38de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c38e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c38e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c38ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c38ee:	fa23 f002 	lsr.w	r0, r3, r2
   c38f2:	bf18      	it	ne
   c38f4:	4240      	negne	r0, r0
   c38f6:	4770      	bx	lr
   c38f8:	f04f 0000 	mov.w	r0, #0
   c38fc:	4770      	bx	lr
   c38fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c3902:	d105      	bne.n	c3910 <__aeabi_d2iz+0x48>
   c3904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c3908:	bf08      	it	eq
   c390a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c390e:	4770      	bx	lr
   c3910:	f04f 0000 	mov.w	r0, #0
   c3914:	4770      	bx	lr
   c3916:	bf00      	nop

000c3918 <__aeabi_d2uiz>:
   c3918:	004a      	lsls	r2, r1, #1
   c391a:	d211      	bcs.n	c3940 <__aeabi_d2uiz+0x28>
   c391c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3920:	d211      	bcs.n	c3946 <__aeabi_d2uiz+0x2e>
   c3922:	d50d      	bpl.n	c3940 <__aeabi_d2uiz+0x28>
   c3924:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c392c:	d40e      	bmi.n	c394c <__aeabi_d2uiz+0x34>
   c392e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c393a:	fa23 f002 	lsr.w	r0, r3, r2
   c393e:	4770      	bx	lr
   c3940:	f04f 0000 	mov.w	r0, #0
   c3944:	4770      	bx	lr
   c3946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c394a:	d102      	bne.n	c3952 <__aeabi_d2uiz+0x3a>
   c394c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3950:	4770      	bx	lr
   c3952:	f04f 0000 	mov.w	r0, #0
   c3956:	4770      	bx	lr

000c3958 <__aeabi_d2f>:
   c3958:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c395c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c3960:	bf24      	itt	cs
   c3962:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c3966:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c396a:	d90d      	bls.n	c3988 <__aeabi_d2f+0x30>
   c396c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c3970:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c3974:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c3978:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c397c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c3980:	bf08      	it	eq
   c3982:	f020 0001 	biceq.w	r0, r0, #1
   c3986:	4770      	bx	lr
   c3988:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c398c:	d121      	bne.n	c39d2 <__aeabi_d2f+0x7a>
   c398e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c3992:	bfbc      	itt	lt
   c3994:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c3998:	4770      	bxlt	lr
   c399a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c399e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c39a2:	f1c2 0218 	rsb	r2, r2, #24
   c39a6:	f1c2 0c20 	rsb	ip, r2, #32
   c39aa:	fa10 f30c 	lsls.w	r3, r0, ip
   c39ae:	fa20 f002 	lsr.w	r0, r0, r2
   c39b2:	bf18      	it	ne
   c39b4:	f040 0001 	orrne.w	r0, r0, #1
   c39b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c39bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c39c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   c39c4:	ea40 000c 	orr.w	r0, r0, ip
   c39c8:	fa23 f302 	lsr.w	r3, r3, r2
   c39cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c39d0:	e7cc      	b.n	c396c <__aeabi_d2f+0x14>
   c39d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c39d6:	d107      	bne.n	c39e8 <__aeabi_d2f+0x90>
   c39d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c39dc:	bf1e      	ittt	ne
   c39de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c39e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c39e6:	4770      	bxne	lr
   c39e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c39ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c39f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c39f4:	4770      	bx	lr
   c39f6:	bf00      	nop

000c39f8 <__aeabi_d2ulz>:
   c39f8:	b5d0      	push	{r4, r6, r7, lr}
   c39fa:	4b0c      	ldr	r3, [pc, #48]	; (c3a2c <__aeabi_d2ulz+0x34>)
   c39fc:	2200      	movs	r2, #0
   c39fe:	4606      	mov	r6, r0
   c3a00:	460f      	mov	r7, r1
   c3a02:	f7ff fcb1 	bl	c3368 <__aeabi_dmul>
   c3a06:	f7ff ff87 	bl	c3918 <__aeabi_d2uiz>
   c3a0a:	4604      	mov	r4, r0
   c3a0c:	f7ff fc32 	bl	c3274 <__aeabi_ui2d>
   c3a10:	4b07      	ldr	r3, [pc, #28]	; (c3a30 <__aeabi_d2ulz+0x38>)
   c3a12:	2200      	movs	r2, #0
   c3a14:	f7ff fca8 	bl	c3368 <__aeabi_dmul>
   c3a18:	4602      	mov	r2, r0
   c3a1a:	460b      	mov	r3, r1
   c3a1c:	4630      	mov	r0, r6
   c3a1e:	4639      	mov	r1, r7
   c3a20:	f7ff faea 	bl	c2ff8 <__aeabi_dsub>
   c3a24:	f7ff ff78 	bl	c3918 <__aeabi_d2uiz>
   c3a28:	4621      	mov	r1, r4
   c3a2a:	bdd0      	pop	{r4, r6, r7, pc}
   c3a2c:	3df00000 	.word	0x3df00000
   c3a30:	41f00000 	.word	0x41f00000

000c3a34 <atexit>:
   c3a34:	2300      	movs	r3, #0
   c3a36:	4601      	mov	r1, r0
   c3a38:	461a      	mov	r2, r3
   c3a3a:	4618      	mov	r0, r3
   c3a3c:	f001 b806 	b.w	c4a4c <__register_exitproc>

000c3a40 <atof>:
   c3a40:	2100      	movs	r1, #0
   c3a42:	f000 bf6b 	b.w	c491c <strtod>

000c3a46 <atoi>:
   c3a46:	220a      	movs	r2, #10
   c3a48:	2100      	movs	r1, #0
   c3a4a:	f000 bff5 	b.w	c4a38 <strtol>
	...

000c3a50 <isprint>:
   c3a50:	4b02      	ldr	r3, [pc, #8]	; (c3a5c <isprint+0xc>)
   c3a52:	4418      	add	r0, r3
   c3a54:	7840      	ldrb	r0, [r0, #1]
   c3a56:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c3a5a:	4770      	bx	lr
   c3a5c:	000c7b28 	.word	0x000c7b28

000c3a60 <memcmp>:
   c3a60:	b510      	push	{r4, lr}
   c3a62:	3901      	subs	r1, #1
   c3a64:	4402      	add	r2, r0
   c3a66:	4290      	cmp	r0, r2
   c3a68:	d101      	bne.n	c3a6e <memcmp+0xe>
   c3a6a:	2000      	movs	r0, #0
   c3a6c:	e005      	b.n	c3a7a <memcmp+0x1a>
   c3a6e:	7803      	ldrb	r3, [r0, #0]
   c3a70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3a74:	42a3      	cmp	r3, r4
   c3a76:	d001      	beq.n	c3a7c <memcmp+0x1c>
   c3a78:	1b18      	subs	r0, r3, r4
   c3a7a:	bd10      	pop	{r4, pc}
   c3a7c:	3001      	adds	r0, #1
   c3a7e:	e7f2      	b.n	c3a66 <memcmp+0x6>

000c3a80 <memcpy>:
   c3a80:	440a      	add	r2, r1
   c3a82:	4291      	cmp	r1, r2
   c3a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c3a88:	d100      	bne.n	c3a8c <memcpy+0xc>
   c3a8a:	4770      	bx	lr
   c3a8c:	b510      	push	{r4, lr}
   c3a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3a92:	f803 4f01 	strb.w	r4, [r3, #1]!
   c3a96:	4291      	cmp	r1, r2
   c3a98:	d1f9      	bne.n	c3a8e <memcpy+0xe>
   c3a9a:	bd10      	pop	{r4, pc}

000c3a9c <memmove>:
   c3a9c:	4288      	cmp	r0, r1
   c3a9e:	b510      	push	{r4, lr}
   c3aa0:	eb01 0402 	add.w	r4, r1, r2
   c3aa4:	d902      	bls.n	c3aac <memmove+0x10>
   c3aa6:	4284      	cmp	r4, r0
   c3aa8:	4623      	mov	r3, r4
   c3aaa:	d807      	bhi.n	c3abc <memmove+0x20>
   c3aac:	1e43      	subs	r3, r0, #1
   c3aae:	42a1      	cmp	r1, r4
   c3ab0:	d008      	beq.n	c3ac4 <memmove+0x28>
   c3ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3aba:	e7f8      	b.n	c3aae <memmove+0x12>
   c3abc:	4402      	add	r2, r0
   c3abe:	4601      	mov	r1, r0
   c3ac0:	428a      	cmp	r2, r1
   c3ac2:	d100      	bne.n	c3ac6 <memmove+0x2a>
   c3ac4:	bd10      	pop	{r4, pc}
   c3ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c3aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c3ace:	e7f7      	b.n	c3ac0 <memmove+0x24>

000c3ad0 <memset>:
   c3ad0:	4402      	add	r2, r0
   c3ad2:	4603      	mov	r3, r0
   c3ad4:	4293      	cmp	r3, r2
   c3ad6:	d100      	bne.n	c3ada <memset+0xa>
   c3ad8:	4770      	bx	lr
   c3ada:	f803 1b01 	strb.w	r1, [r3], #1
   c3ade:	e7f9      	b.n	c3ad4 <memset+0x4>

000c3ae0 <srand>:
   c3ae0:	b538      	push	{r3, r4, r5, lr}
   c3ae2:	4b10      	ldr	r3, [pc, #64]	; (c3b24 <srand+0x44>)
   c3ae4:	681d      	ldr	r5, [r3, #0]
   c3ae6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3ae8:	4604      	mov	r4, r0
   c3aea:	b9b3      	cbnz	r3, c3b1a <srand+0x3a>
   c3aec:	2018      	movs	r0, #24
   c3aee:	f7f9 feb1 	bl	bd854 <malloc>
   c3af2:	4602      	mov	r2, r0
   c3af4:	63a8      	str	r0, [r5, #56]	; 0x38
   c3af6:	b920      	cbnz	r0, c3b02 <srand+0x22>
   c3af8:	4b0b      	ldr	r3, [pc, #44]	; (c3b28 <srand+0x48>)
   c3afa:	480c      	ldr	r0, [pc, #48]	; (c3b2c <srand+0x4c>)
   c3afc:	2142      	movs	r1, #66	; 0x42
   c3afe:	f7f9 fef9 	bl	bd8f4 <__assert_func>
   c3b02:	490b      	ldr	r1, [pc, #44]	; (c3b30 <srand+0x50>)
   c3b04:	4b0b      	ldr	r3, [pc, #44]	; (c3b34 <srand+0x54>)
   c3b06:	e9c0 1300 	strd	r1, r3, [r0]
   c3b0a:	4b0b      	ldr	r3, [pc, #44]	; (c3b38 <srand+0x58>)
   c3b0c:	6083      	str	r3, [r0, #8]
   c3b0e:	230b      	movs	r3, #11
   c3b10:	8183      	strh	r3, [r0, #12]
   c3b12:	2100      	movs	r1, #0
   c3b14:	2001      	movs	r0, #1
   c3b16:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c3b1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3b1c:	2200      	movs	r2, #0
   c3b1e:	611c      	str	r4, [r3, #16]
   c3b20:	615a      	str	r2, [r3, #20]
   c3b22:	bd38      	pop	{r3, r4, r5, pc}
   c3b24:	2003dba0 	.word	0x2003dba0
   c3b28:	000c7a58 	.word	0x000c7a58
   c3b2c:	000c7a6f 	.word	0x000c7a6f
   c3b30:	abcd330e 	.word	0xabcd330e
   c3b34:	e66d1234 	.word	0xe66d1234
   c3b38:	0005deec 	.word	0x0005deec

000c3b3c <strcat>:
   c3b3c:	b510      	push	{r4, lr}
   c3b3e:	4602      	mov	r2, r0
   c3b40:	7814      	ldrb	r4, [r2, #0]
   c3b42:	4613      	mov	r3, r2
   c3b44:	3201      	adds	r2, #1
   c3b46:	2c00      	cmp	r4, #0
   c3b48:	d1fa      	bne.n	c3b40 <strcat+0x4>
   c3b4a:	3b01      	subs	r3, #1
   c3b4c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3b50:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3b54:	2a00      	cmp	r2, #0
   c3b56:	d1f9      	bne.n	c3b4c <strcat+0x10>
   c3b58:	bd10      	pop	{r4, pc}

000c3b5a <strchr>:
   c3b5a:	b2c9      	uxtb	r1, r1
   c3b5c:	4603      	mov	r3, r0
   c3b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3b62:	b11a      	cbz	r2, c3b6c <strchr+0x12>
   c3b64:	428a      	cmp	r2, r1
   c3b66:	d1f9      	bne.n	c3b5c <strchr+0x2>
   c3b68:	4618      	mov	r0, r3
   c3b6a:	4770      	bx	lr
   c3b6c:	2900      	cmp	r1, #0
   c3b6e:	bf18      	it	ne
   c3b70:	2300      	movne	r3, #0
   c3b72:	e7f9      	b.n	c3b68 <strchr+0xe>

000c3b74 <strchrnul>:
   c3b74:	b510      	push	{r4, lr}
   c3b76:	4604      	mov	r4, r0
   c3b78:	f7ff ffef 	bl	c3b5a <strchr>
   c3b7c:	b918      	cbnz	r0, c3b86 <strchrnul+0x12>
   c3b7e:	4620      	mov	r0, r4
   c3b80:	f000 f831 	bl	c3be6 <strlen>
   c3b84:	4420      	add	r0, r4
   c3b86:	bd10      	pop	{r4, pc}

000c3b88 <strcmp>:
   c3b88:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c3b90:	2a01      	cmp	r2, #1
   c3b92:	bf28      	it	cs
   c3b94:	429a      	cmpcs	r2, r3
   c3b96:	d0f7      	beq.n	c3b88 <strcmp>
   c3b98:	1ad0      	subs	r0, r2, r3
   c3b9a:	4770      	bx	lr

000c3b9c <strcpy>:
   c3b9c:	4603      	mov	r3, r0
   c3b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3ba2:	f803 2b01 	strb.w	r2, [r3], #1
   c3ba6:	2a00      	cmp	r2, #0
   c3ba8:	d1f9      	bne.n	c3b9e <strcpy+0x2>
   c3baa:	4770      	bx	lr

000c3bac <strdup>:
   c3bac:	4b02      	ldr	r3, [pc, #8]	; (c3bb8 <strdup+0xc>)
   c3bae:	4601      	mov	r1, r0
   c3bb0:	6818      	ldr	r0, [r3, #0]
   c3bb2:	f000 b803 	b.w	c3bbc <_strdup_r>
   c3bb6:	bf00      	nop
   c3bb8:	2003dba0 	.word	0x2003dba0

000c3bbc <_strdup_r>:
   c3bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c3bbe:	4604      	mov	r4, r0
   c3bc0:	4608      	mov	r0, r1
   c3bc2:	460d      	mov	r5, r1
   c3bc4:	f000 f80f 	bl	c3be6 <strlen>
   c3bc8:	1c42      	adds	r2, r0, #1
   c3bca:	4611      	mov	r1, r2
   c3bcc:	4620      	mov	r0, r4
   c3bce:	9201      	str	r2, [sp, #4]
   c3bd0:	f7f9 fe80 	bl	bd8d4 <_malloc_r>
   c3bd4:	4604      	mov	r4, r0
   c3bd6:	b118      	cbz	r0, c3be0 <_strdup_r+0x24>
   c3bd8:	9a01      	ldr	r2, [sp, #4]
   c3bda:	4629      	mov	r1, r5
   c3bdc:	f7ff ff50 	bl	c3a80 <memcpy>
   c3be0:	4620      	mov	r0, r4
   c3be2:	b003      	add	sp, #12
   c3be4:	bd30      	pop	{r4, r5, pc}

000c3be6 <strlen>:
   c3be6:	4603      	mov	r3, r0
   c3be8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3bec:	2a00      	cmp	r2, #0
   c3bee:	d1fb      	bne.n	c3be8 <strlen+0x2>
   c3bf0:	1a18      	subs	r0, r3, r0
   c3bf2:	3801      	subs	r0, #1
   c3bf4:	4770      	bx	lr
	...

000c3bf8 <strlwr>:
   c3bf8:	b510      	push	{r4, lr}
   c3bfa:	4c07      	ldr	r4, [pc, #28]	; (c3c18 <strlwr+0x20>)
   c3bfc:	1e42      	subs	r2, r0, #1
   c3bfe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c3c02:	b903      	cbnz	r3, c3c06 <strlwr+0xe>
   c3c04:	bd10      	pop	{r4, pc}
   c3c06:	5ce1      	ldrb	r1, [r4, r3]
   c3c08:	f001 0103 	and.w	r1, r1, #3
   c3c0c:	2901      	cmp	r1, #1
   c3c0e:	bf08      	it	eq
   c3c10:	3320      	addeq	r3, #32
   c3c12:	7013      	strb	r3, [r2, #0]
   c3c14:	e7f3      	b.n	c3bfe <strlwr+0x6>
   c3c16:	bf00      	nop
   c3c18:	000c7b29 	.word	0x000c7b29

000c3c1c <strncmp>:
   c3c1c:	b510      	push	{r4, lr}
   c3c1e:	b17a      	cbz	r2, c3c40 <strncmp+0x24>
   c3c20:	4603      	mov	r3, r0
   c3c22:	3901      	subs	r1, #1
   c3c24:	1884      	adds	r4, r0, r2
   c3c26:	f813 0b01 	ldrb.w	r0, [r3], #1
   c3c2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c3c2e:	4290      	cmp	r0, r2
   c3c30:	d101      	bne.n	c3c36 <strncmp+0x1a>
   c3c32:	42a3      	cmp	r3, r4
   c3c34:	d101      	bne.n	c3c3a <strncmp+0x1e>
   c3c36:	1a80      	subs	r0, r0, r2
   c3c38:	bd10      	pop	{r4, pc}
   c3c3a:	2800      	cmp	r0, #0
   c3c3c:	d1f3      	bne.n	c3c26 <strncmp+0xa>
   c3c3e:	e7fa      	b.n	c3c36 <strncmp+0x1a>
   c3c40:	4610      	mov	r0, r2
   c3c42:	e7f9      	b.n	c3c38 <strncmp+0x1c>

000c3c44 <strncpy>:
   c3c44:	b510      	push	{r4, lr}
   c3c46:	3901      	subs	r1, #1
   c3c48:	4603      	mov	r3, r0
   c3c4a:	b132      	cbz	r2, c3c5a <strncpy+0x16>
   c3c4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3c50:	f803 4b01 	strb.w	r4, [r3], #1
   c3c54:	3a01      	subs	r2, #1
   c3c56:	2c00      	cmp	r4, #0
   c3c58:	d1f7      	bne.n	c3c4a <strncpy+0x6>
   c3c5a:	441a      	add	r2, r3
   c3c5c:	2100      	movs	r1, #0
   c3c5e:	4293      	cmp	r3, r2
   c3c60:	d100      	bne.n	c3c64 <strncpy+0x20>
   c3c62:	bd10      	pop	{r4, pc}
   c3c64:	f803 1b01 	strb.w	r1, [r3], #1
   c3c68:	e7f9      	b.n	c3c5e <strncpy+0x1a>

000c3c6a <strnlen>:
   c3c6a:	b510      	push	{r4, lr}
   c3c6c:	4602      	mov	r2, r0
   c3c6e:	4401      	add	r1, r0
   c3c70:	428a      	cmp	r2, r1
   c3c72:	4613      	mov	r3, r2
   c3c74:	d003      	beq.n	c3c7e <strnlen+0x14>
   c3c76:	781c      	ldrb	r4, [r3, #0]
   c3c78:	3201      	adds	r2, #1
   c3c7a:	2c00      	cmp	r4, #0
   c3c7c:	d1f8      	bne.n	c3c70 <strnlen+0x6>
   c3c7e:	1a18      	subs	r0, r3, r0
   c3c80:	bd10      	pop	{r4, pc}

000c3c82 <strrchr>:
   c3c82:	b538      	push	{r3, r4, r5, lr}
   c3c84:	4603      	mov	r3, r0
   c3c86:	460c      	mov	r4, r1
   c3c88:	b969      	cbnz	r1, c3ca6 <strrchr+0x24>
   c3c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3c8e:	f7ff bf64 	b.w	c3b5a <strchr>
   c3c92:	1c43      	adds	r3, r0, #1
   c3c94:	4605      	mov	r5, r0
   c3c96:	4621      	mov	r1, r4
   c3c98:	4618      	mov	r0, r3
   c3c9a:	f7ff ff5e 	bl	c3b5a <strchr>
   c3c9e:	2800      	cmp	r0, #0
   c3ca0:	d1f7      	bne.n	c3c92 <strrchr+0x10>
   c3ca2:	4628      	mov	r0, r5
   c3ca4:	bd38      	pop	{r3, r4, r5, pc}
   c3ca6:	2500      	movs	r5, #0
   c3ca8:	e7f5      	b.n	c3c96 <strrchr+0x14>

000c3caa <strstr>:
   c3caa:	780a      	ldrb	r2, [r1, #0]
   c3cac:	b570      	push	{r4, r5, r6, lr}
   c3cae:	b96a      	cbnz	r2, c3ccc <strstr+0x22>
   c3cb0:	bd70      	pop	{r4, r5, r6, pc}
   c3cb2:	429a      	cmp	r2, r3
   c3cb4:	d109      	bne.n	c3cca <strstr+0x20>
   c3cb6:	460c      	mov	r4, r1
   c3cb8:	4605      	mov	r5, r0
   c3cba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c3cbe:	2b00      	cmp	r3, #0
   c3cc0:	d0f6      	beq.n	c3cb0 <strstr+0x6>
   c3cc2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c3cc6:	429e      	cmp	r6, r3
   c3cc8:	d0f7      	beq.n	c3cba <strstr+0x10>
   c3cca:	3001      	adds	r0, #1
   c3ccc:	7803      	ldrb	r3, [r0, #0]
   c3cce:	2b00      	cmp	r3, #0
   c3cd0:	d1ef      	bne.n	c3cb2 <strstr+0x8>
   c3cd2:	4618      	mov	r0, r3
   c3cd4:	e7ec      	b.n	c3cb0 <strstr+0x6>

000c3cd6 <sulp>:
   c3cd6:	b570      	push	{r4, r5, r6, lr}
   c3cd8:	4604      	mov	r4, r0
   c3cda:	460d      	mov	r5, r1
   c3cdc:	ec45 4b10 	vmov	d0, r4, r5
   c3ce0:	4616      	mov	r6, r2
   c3ce2:	f001 fe0d 	bl	c5900 <__ulp>
   c3ce6:	ec51 0b10 	vmov	r0, r1, d0
   c3cea:	b17e      	cbz	r6, c3d0c <sulp+0x36>
   c3cec:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c3cf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3cf4:	2b00      	cmp	r3, #0
   c3cf6:	dd09      	ble.n	c3d0c <sulp+0x36>
   c3cf8:	051b      	lsls	r3, r3, #20
   c3cfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c3cfe:	2400      	movs	r4, #0
   c3d00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c3d04:	4622      	mov	r2, r4
   c3d06:	462b      	mov	r3, r5
   c3d08:	f7ff fb2e 	bl	c3368 <__aeabi_dmul>
   c3d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000c3d10 <_strtod_l>:
   c3d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3d14:	ed2d 8b02 	vpush	{d8}
   c3d18:	b09d      	sub	sp, #116	; 0x74
   c3d1a:	461f      	mov	r7, r3
   c3d1c:	2300      	movs	r3, #0
   c3d1e:	9318      	str	r3, [sp, #96]	; 0x60
   c3d20:	4ba2      	ldr	r3, [pc, #648]	; (c3fac <_strtod_l+0x29c>)
   c3d22:	9213      	str	r2, [sp, #76]	; 0x4c
   c3d24:	681b      	ldr	r3, [r3, #0]
   c3d26:	9305      	str	r3, [sp, #20]
   c3d28:	4604      	mov	r4, r0
   c3d2a:	4618      	mov	r0, r3
   c3d2c:	4688      	mov	r8, r1
   c3d2e:	f7ff ff5a 	bl	c3be6 <strlen>
   c3d32:	f04f 0a00 	mov.w	sl, #0
   c3d36:	4605      	mov	r5, r0
   c3d38:	f04f 0b00 	mov.w	fp, #0
   c3d3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3d42:	781a      	ldrb	r2, [r3, #0]
   c3d44:	2a2b      	cmp	r2, #43	; 0x2b
   c3d46:	d04e      	beq.n	c3de6 <_strtod_l+0xd6>
   c3d48:	d83b      	bhi.n	c3dc2 <_strtod_l+0xb2>
   c3d4a:	2a0d      	cmp	r2, #13
   c3d4c:	d834      	bhi.n	c3db8 <_strtod_l+0xa8>
   c3d4e:	2a08      	cmp	r2, #8
   c3d50:	d834      	bhi.n	c3dbc <_strtod_l+0xac>
   c3d52:	2a00      	cmp	r2, #0
   c3d54:	d03e      	beq.n	c3dd4 <_strtod_l+0xc4>
   c3d56:	2300      	movs	r3, #0
   c3d58:	930a      	str	r3, [sp, #40]	; 0x28
   c3d5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c3d5c:	7833      	ldrb	r3, [r6, #0]
   c3d5e:	2b30      	cmp	r3, #48	; 0x30
   c3d60:	f040 80b0 	bne.w	c3ec4 <_strtod_l+0x1b4>
   c3d64:	7873      	ldrb	r3, [r6, #1]
   c3d66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c3d6a:	2b58      	cmp	r3, #88	; 0x58
   c3d6c:	d168      	bne.n	c3e40 <_strtod_l+0x130>
   c3d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3d70:	9301      	str	r3, [sp, #4]
   c3d72:	ab18      	add	r3, sp, #96	; 0x60
   c3d74:	9702      	str	r7, [sp, #8]
   c3d76:	9300      	str	r3, [sp, #0]
   c3d78:	4a8d      	ldr	r2, [pc, #564]	; (c3fb0 <_strtod_l+0x2a0>)
   c3d7a:	ab19      	add	r3, sp, #100	; 0x64
   c3d7c:	a917      	add	r1, sp, #92	; 0x5c
   c3d7e:	4620      	mov	r0, r4
   c3d80:	f000 ff2e 	bl	c4be0 <__gethex>
   c3d84:	f010 0707 	ands.w	r7, r0, #7
   c3d88:	4605      	mov	r5, r0
   c3d8a:	d005      	beq.n	c3d98 <_strtod_l+0x88>
   c3d8c:	2f06      	cmp	r7, #6
   c3d8e:	d12c      	bne.n	c3dea <_strtod_l+0xda>
   c3d90:	3601      	adds	r6, #1
   c3d92:	2300      	movs	r3, #0
   c3d94:	9617      	str	r6, [sp, #92]	; 0x5c
   c3d96:	930a      	str	r3, [sp, #40]	; 0x28
   c3d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3d9a:	2b00      	cmp	r3, #0
   c3d9c:	f040 8590 	bne.w	c48c0 <_strtod_l+0xbb0>
   c3da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3da2:	b1eb      	cbz	r3, c3de0 <_strtod_l+0xd0>
   c3da4:	4652      	mov	r2, sl
   c3da6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c3daa:	ec43 2b10 	vmov	d0, r2, r3
   c3dae:	b01d      	add	sp, #116	; 0x74
   c3db0:	ecbd 8b02 	vpop	{d8}
   c3db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3db8:	2a20      	cmp	r2, #32
   c3dba:	d1cc      	bne.n	c3d56 <_strtod_l+0x46>
   c3dbc:	3301      	adds	r3, #1
   c3dbe:	9317      	str	r3, [sp, #92]	; 0x5c
   c3dc0:	e7be      	b.n	c3d40 <_strtod_l+0x30>
   c3dc2:	2a2d      	cmp	r2, #45	; 0x2d
   c3dc4:	d1c7      	bne.n	c3d56 <_strtod_l+0x46>
   c3dc6:	2201      	movs	r2, #1
   c3dc8:	920a      	str	r2, [sp, #40]	; 0x28
   c3dca:	1c5a      	adds	r2, r3, #1
   c3dcc:	9217      	str	r2, [sp, #92]	; 0x5c
   c3dce:	785b      	ldrb	r3, [r3, #1]
   c3dd0:	2b00      	cmp	r3, #0
   c3dd2:	d1c2      	bne.n	c3d5a <_strtod_l+0x4a>
   c3dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3dd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3dda:	2b00      	cmp	r3, #0
   c3ddc:	f040 856e 	bne.w	c48bc <_strtod_l+0xbac>
   c3de0:	4652      	mov	r2, sl
   c3de2:	465b      	mov	r3, fp
   c3de4:	e7e1      	b.n	c3daa <_strtod_l+0x9a>
   c3de6:	2200      	movs	r2, #0
   c3de8:	e7ee      	b.n	c3dc8 <_strtod_l+0xb8>
   c3dea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c3dec:	b13a      	cbz	r2, c3dfe <_strtod_l+0xee>
   c3dee:	2135      	movs	r1, #53	; 0x35
   c3df0:	a81a      	add	r0, sp, #104	; 0x68
   c3df2:	f001 fe90 	bl	c5b16 <__copybits>
   c3df6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3df8:	4620      	mov	r0, r4
   c3dfa:	f001 fa4f 	bl	c529c <_Bfree>
   c3dfe:	3f01      	subs	r7, #1
   c3e00:	2f04      	cmp	r7, #4
   c3e02:	d806      	bhi.n	c3e12 <_strtod_l+0x102>
   c3e04:	e8df f007 	tbb	[pc, r7]
   c3e08:	1714030a 	.word	0x1714030a
   c3e0c:	0a          	.byte	0x0a
   c3e0d:	00          	.byte	0x00
   c3e0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c3e12:	0728      	lsls	r0, r5, #28
   c3e14:	d5c0      	bpl.n	c3d98 <_strtod_l+0x88>
   c3e16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c3e1a:	e7bd      	b.n	c3d98 <_strtod_l+0x88>
   c3e1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c3e20:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c3e22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c3e26:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c3e2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c3e2e:	e7f0      	b.n	c3e12 <_strtod_l+0x102>
   c3e30:	f8df b180 	ldr.w	fp, [pc, #384]	; c3fb4 <_strtod_l+0x2a4>
   c3e34:	e7ed      	b.n	c3e12 <_strtod_l+0x102>
   c3e36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c3e3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3e3e:	e7e8      	b.n	c3e12 <_strtod_l+0x102>
   c3e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3e42:	1c5a      	adds	r2, r3, #1
   c3e44:	9217      	str	r2, [sp, #92]	; 0x5c
   c3e46:	785b      	ldrb	r3, [r3, #1]
   c3e48:	2b30      	cmp	r3, #48	; 0x30
   c3e4a:	d0f9      	beq.n	c3e40 <_strtod_l+0x130>
   c3e4c:	2b00      	cmp	r3, #0
   c3e4e:	d0a3      	beq.n	c3d98 <_strtod_l+0x88>
   c3e50:	2301      	movs	r3, #1
   c3e52:	f04f 0900 	mov.w	r9, #0
   c3e56:	9304      	str	r3, [sp, #16]
   c3e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3e5a:	9308      	str	r3, [sp, #32]
   c3e5c:	f8cd 901c 	str.w	r9, [sp, #28]
   c3e60:	464f      	mov	r7, r9
   c3e62:	220a      	movs	r2, #10
   c3e64:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c3e66:	7806      	ldrb	r6, [r0, #0]
   c3e68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c3e6c:	b2d9      	uxtb	r1, r3
   c3e6e:	2909      	cmp	r1, #9
   c3e70:	d92a      	bls.n	c3ec8 <_strtod_l+0x1b8>
   c3e72:	9905      	ldr	r1, [sp, #20]
   c3e74:	462a      	mov	r2, r5
   c3e76:	f7ff fed1 	bl	c3c1c <strncmp>
   c3e7a:	b398      	cbz	r0, c3ee4 <_strtod_l+0x1d4>
   c3e7c:	2000      	movs	r0, #0
   c3e7e:	4632      	mov	r2, r6
   c3e80:	463d      	mov	r5, r7
   c3e82:	9005      	str	r0, [sp, #20]
   c3e84:	4603      	mov	r3, r0
   c3e86:	2a65      	cmp	r2, #101	; 0x65
   c3e88:	d001      	beq.n	c3e8e <_strtod_l+0x17e>
   c3e8a:	2a45      	cmp	r2, #69	; 0x45
   c3e8c:	d118      	bne.n	c3ec0 <_strtod_l+0x1b0>
   c3e8e:	b91d      	cbnz	r5, c3e98 <_strtod_l+0x188>
   c3e90:	9a04      	ldr	r2, [sp, #16]
   c3e92:	4302      	orrs	r2, r0
   c3e94:	d09e      	beq.n	c3dd4 <_strtod_l+0xc4>
   c3e96:	2500      	movs	r5, #0
   c3e98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c3e9c:	f108 0201 	add.w	r2, r8, #1
   c3ea0:	9217      	str	r2, [sp, #92]	; 0x5c
   c3ea2:	f898 2001 	ldrb.w	r2, [r8, #1]
   c3ea6:	2a2b      	cmp	r2, #43	; 0x2b
   c3ea8:	d075      	beq.n	c3f96 <_strtod_l+0x286>
   c3eaa:	2a2d      	cmp	r2, #45	; 0x2d
   c3eac:	d07b      	beq.n	c3fa6 <_strtod_l+0x296>
   c3eae:	f04f 0c00 	mov.w	ip, #0
   c3eb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c3eb6:	2909      	cmp	r1, #9
   c3eb8:	f240 8082 	bls.w	c3fc0 <_strtod_l+0x2b0>
   c3ebc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3ec0:	2600      	movs	r6, #0
   c3ec2:	e09d      	b.n	c4000 <_strtod_l+0x2f0>
   c3ec4:	2300      	movs	r3, #0
   c3ec6:	e7c4      	b.n	c3e52 <_strtod_l+0x142>
   c3ec8:	2f08      	cmp	r7, #8
   c3eca:	bfd8      	it	le
   c3ecc:	9907      	ldrle	r1, [sp, #28]
   c3ece:	f100 0001 	add.w	r0, r0, #1
   c3ed2:	bfda      	itte	le
   c3ed4:	fb02 3301 	mlale	r3, r2, r1, r3
   c3ed8:	9307      	strle	r3, [sp, #28]
   c3eda:	fb02 3909 	mlagt	r9, r2, r9, r3
   c3ede:	3701      	adds	r7, #1
   c3ee0:	9017      	str	r0, [sp, #92]	; 0x5c
   c3ee2:	e7bf      	b.n	c3e64 <_strtod_l+0x154>
   c3ee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3ee6:	195a      	adds	r2, r3, r5
   c3ee8:	9217      	str	r2, [sp, #92]	; 0x5c
   c3eea:	5d5a      	ldrb	r2, [r3, r5]
   c3eec:	2f00      	cmp	r7, #0
   c3eee:	d037      	beq.n	c3f60 <_strtod_l+0x250>
   c3ef0:	9005      	str	r0, [sp, #20]
   c3ef2:	463d      	mov	r5, r7
   c3ef4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c3ef8:	2b09      	cmp	r3, #9
   c3efa:	d912      	bls.n	c3f22 <_strtod_l+0x212>
   c3efc:	2301      	movs	r3, #1
   c3efe:	e7c2      	b.n	c3e86 <_strtod_l+0x176>
   c3f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3f02:	1c5a      	adds	r2, r3, #1
   c3f04:	9217      	str	r2, [sp, #92]	; 0x5c
   c3f06:	785a      	ldrb	r2, [r3, #1]
   c3f08:	3001      	adds	r0, #1
   c3f0a:	2a30      	cmp	r2, #48	; 0x30
   c3f0c:	d0f8      	beq.n	c3f00 <_strtod_l+0x1f0>
   c3f0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c3f12:	2b08      	cmp	r3, #8
   c3f14:	f200 84d9 	bhi.w	c48ca <_strtod_l+0xbba>
   c3f18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3f1a:	9005      	str	r0, [sp, #20]
   c3f1c:	2000      	movs	r0, #0
   c3f1e:	9308      	str	r3, [sp, #32]
   c3f20:	4605      	mov	r5, r0
   c3f22:	3a30      	subs	r2, #48	; 0x30
   c3f24:	f100 0301 	add.w	r3, r0, #1
   c3f28:	d014      	beq.n	c3f54 <_strtod_l+0x244>
   c3f2a:	9905      	ldr	r1, [sp, #20]
   c3f2c:	4419      	add	r1, r3
   c3f2e:	9105      	str	r1, [sp, #20]
   c3f30:	462b      	mov	r3, r5
   c3f32:	eb00 0e05 	add.w	lr, r0, r5
   c3f36:	210a      	movs	r1, #10
   c3f38:	4573      	cmp	r3, lr
   c3f3a:	d113      	bne.n	c3f64 <_strtod_l+0x254>
   c3f3c:	182b      	adds	r3, r5, r0
   c3f3e:	2b08      	cmp	r3, #8
   c3f40:	f105 0501 	add.w	r5, r5, #1
   c3f44:	4405      	add	r5, r0
   c3f46:	dc1c      	bgt.n	c3f82 <_strtod_l+0x272>
   c3f48:	9907      	ldr	r1, [sp, #28]
   c3f4a:	230a      	movs	r3, #10
   c3f4c:	fb03 2301 	mla	r3, r3, r1, r2
   c3f50:	9307      	str	r3, [sp, #28]
   c3f52:	2300      	movs	r3, #0
   c3f54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3f56:	1c51      	adds	r1, r2, #1
   c3f58:	9117      	str	r1, [sp, #92]	; 0x5c
   c3f5a:	7852      	ldrb	r2, [r2, #1]
   c3f5c:	4618      	mov	r0, r3
   c3f5e:	e7c9      	b.n	c3ef4 <_strtod_l+0x1e4>
   c3f60:	4638      	mov	r0, r7
   c3f62:	e7d2      	b.n	c3f0a <_strtod_l+0x1fa>
   c3f64:	2b08      	cmp	r3, #8
   c3f66:	dc04      	bgt.n	c3f72 <_strtod_l+0x262>
   c3f68:	9e07      	ldr	r6, [sp, #28]
   c3f6a:	434e      	muls	r6, r1
   c3f6c:	9607      	str	r6, [sp, #28]
   c3f6e:	3301      	adds	r3, #1
   c3f70:	e7e2      	b.n	c3f38 <_strtod_l+0x228>
   c3f72:	f103 0c01 	add.w	ip, r3, #1
   c3f76:	f1bc 0f10 	cmp.w	ip, #16
   c3f7a:	bfd8      	it	le
   c3f7c:	fb01 f909 	mulle.w	r9, r1, r9
   c3f80:	e7f5      	b.n	c3f6e <_strtod_l+0x25e>
   c3f82:	2d10      	cmp	r5, #16
   c3f84:	bfdc      	itt	le
   c3f86:	230a      	movle	r3, #10
   c3f88:	fb03 2909 	mlale	r9, r3, r9, r2
   c3f8c:	e7e1      	b.n	c3f52 <_strtod_l+0x242>
   c3f8e:	2300      	movs	r3, #0
   c3f90:	9305      	str	r3, [sp, #20]
   c3f92:	2301      	movs	r3, #1
   c3f94:	e77c      	b.n	c3e90 <_strtod_l+0x180>
   c3f96:	f04f 0c00 	mov.w	ip, #0
   c3f9a:	f108 0202 	add.w	r2, r8, #2
   c3f9e:	9217      	str	r2, [sp, #92]	; 0x5c
   c3fa0:	f898 2002 	ldrb.w	r2, [r8, #2]
   c3fa4:	e785      	b.n	c3eb2 <_strtod_l+0x1a2>
   c3fa6:	f04f 0c01 	mov.w	ip, #1
   c3faa:	e7f6      	b.n	c3f9a <_strtod_l+0x28a>
   c3fac:	000c7c9c 	.word	0x000c7c9c
   c3fb0:	000c7ad4 	.word	0x000c7ad4
   c3fb4:	7ff00000 	.word	0x7ff00000
   c3fb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3fba:	1c51      	adds	r1, r2, #1
   c3fbc:	9117      	str	r1, [sp, #92]	; 0x5c
   c3fbe:	7852      	ldrb	r2, [r2, #1]
   c3fc0:	2a30      	cmp	r2, #48	; 0x30
   c3fc2:	d0f9      	beq.n	c3fb8 <_strtod_l+0x2a8>
   c3fc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c3fc8:	2908      	cmp	r1, #8
   c3fca:	f63f af79 	bhi.w	c3ec0 <_strtod_l+0x1b0>
   c3fce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c3fd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3fd4:	9206      	str	r2, [sp, #24]
   c3fd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3fd8:	1c51      	adds	r1, r2, #1
   c3fda:	9117      	str	r1, [sp, #92]	; 0x5c
   c3fdc:	7852      	ldrb	r2, [r2, #1]
   c3fde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c3fe2:	2e09      	cmp	r6, #9
   c3fe4:	d937      	bls.n	c4056 <_strtod_l+0x346>
   c3fe6:	9e06      	ldr	r6, [sp, #24]
   c3fe8:	1b89      	subs	r1, r1, r6
   c3fea:	2908      	cmp	r1, #8
   c3fec:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c3ff0:	dc02      	bgt.n	c3ff8 <_strtod_l+0x2e8>
   c3ff2:	4576      	cmp	r6, lr
   c3ff4:	bfa8      	it	ge
   c3ff6:	4676      	movge	r6, lr
   c3ff8:	f1bc 0f00 	cmp.w	ip, #0
   c3ffc:	d000      	beq.n	c4000 <_strtod_l+0x2f0>
   c3ffe:	4276      	negs	r6, r6
   c4000:	2d00      	cmp	r5, #0
   c4002:	d14d      	bne.n	c40a0 <_strtod_l+0x390>
   c4004:	9904      	ldr	r1, [sp, #16]
   c4006:	4301      	orrs	r1, r0
   c4008:	f47f aec6 	bne.w	c3d98 <_strtod_l+0x88>
   c400c:	2b00      	cmp	r3, #0
   c400e:	f47f aee1 	bne.w	c3dd4 <_strtod_l+0xc4>
   c4012:	2a69      	cmp	r2, #105	; 0x69
   c4014:	d027      	beq.n	c4066 <_strtod_l+0x356>
   c4016:	dc24      	bgt.n	c4062 <_strtod_l+0x352>
   c4018:	2a49      	cmp	r2, #73	; 0x49
   c401a:	d024      	beq.n	c4066 <_strtod_l+0x356>
   c401c:	2a4e      	cmp	r2, #78	; 0x4e
   c401e:	f47f aed9 	bne.w	c3dd4 <_strtod_l+0xc4>
   c4022:	499f      	ldr	r1, [pc, #636]	; (c42a0 <_strtod_l+0x590>)
   c4024:	a817      	add	r0, sp, #92	; 0x5c
   c4026:	f001 f833 	bl	c5090 <__match>
   c402a:	2800      	cmp	r0, #0
   c402c:	f43f aed2 	beq.w	c3dd4 <_strtod_l+0xc4>
   c4030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4032:	781b      	ldrb	r3, [r3, #0]
   c4034:	2b28      	cmp	r3, #40	; 0x28
   c4036:	d12d      	bne.n	c4094 <_strtod_l+0x384>
   c4038:	499a      	ldr	r1, [pc, #616]	; (c42a4 <_strtod_l+0x594>)
   c403a:	aa1a      	add	r2, sp, #104	; 0x68
   c403c:	a817      	add	r0, sp, #92	; 0x5c
   c403e:	f001 f83b 	bl	c50b8 <__hexnan>
   c4042:	2805      	cmp	r0, #5
   c4044:	d126      	bne.n	c4094 <_strtod_l+0x384>
   c4046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4048:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c404c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4050:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4054:	e6a0      	b.n	c3d98 <_strtod_l+0x88>
   c4056:	210a      	movs	r1, #10
   c4058:	fb01 2e0e 	mla	lr, r1, lr, r2
   c405c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4060:	e7b9      	b.n	c3fd6 <_strtod_l+0x2c6>
   c4062:	2a6e      	cmp	r2, #110	; 0x6e
   c4064:	e7db      	b.n	c401e <_strtod_l+0x30e>
   c4066:	4990      	ldr	r1, [pc, #576]	; (c42a8 <_strtod_l+0x598>)
   c4068:	a817      	add	r0, sp, #92	; 0x5c
   c406a:	f001 f811 	bl	c5090 <__match>
   c406e:	2800      	cmp	r0, #0
   c4070:	f43f aeb0 	beq.w	c3dd4 <_strtod_l+0xc4>
   c4074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4076:	498d      	ldr	r1, [pc, #564]	; (c42ac <_strtod_l+0x59c>)
   c4078:	3b01      	subs	r3, #1
   c407a:	a817      	add	r0, sp, #92	; 0x5c
   c407c:	9317      	str	r3, [sp, #92]	; 0x5c
   c407e:	f001 f807 	bl	c5090 <__match>
   c4082:	b910      	cbnz	r0, c408a <_strtod_l+0x37a>
   c4084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4086:	3301      	adds	r3, #1
   c4088:	9317      	str	r3, [sp, #92]	; 0x5c
   c408a:	f8df b230 	ldr.w	fp, [pc, #560]	; c42bc <_strtod_l+0x5ac>
   c408e:	f04f 0a00 	mov.w	sl, #0
   c4092:	e681      	b.n	c3d98 <_strtod_l+0x88>
   c4094:	4886      	ldr	r0, [pc, #536]	; (c42b0 <_strtod_l+0x5a0>)
   c4096:	f001 fd93 	bl	c5bc0 <nan>
   c409a:	ec5b ab10 	vmov	sl, fp, d0
   c409e:	e67b      	b.n	c3d98 <_strtod_l+0x88>
   c40a0:	9b05      	ldr	r3, [sp, #20]
   c40a2:	9807      	ldr	r0, [sp, #28]
   c40a4:	1af3      	subs	r3, r6, r3
   c40a6:	2f00      	cmp	r7, #0
   c40a8:	bf08      	it	eq
   c40aa:	462f      	moveq	r7, r5
   c40ac:	2d10      	cmp	r5, #16
   c40ae:	9306      	str	r3, [sp, #24]
   c40b0:	46a8      	mov	r8, r5
   c40b2:	bfa8      	it	ge
   c40b4:	f04f 0810 	movge.w	r8, #16
   c40b8:	f7ff f8dc 	bl	c3274 <__aeabi_ui2d>
   c40bc:	2d09      	cmp	r5, #9
   c40be:	4682      	mov	sl, r0
   c40c0:	468b      	mov	fp, r1
   c40c2:	dd13      	ble.n	c40ec <_strtod_l+0x3dc>
   c40c4:	4b7b      	ldr	r3, [pc, #492]	; (c42b4 <_strtod_l+0x5a4>)
   c40c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c40ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c40ce:	f7ff f94b 	bl	c3368 <__aeabi_dmul>
   c40d2:	4682      	mov	sl, r0
   c40d4:	4648      	mov	r0, r9
   c40d6:	468b      	mov	fp, r1
   c40d8:	f7ff f8cc 	bl	c3274 <__aeabi_ui2d>
   c40dc:	4602      	mov	r2, r0
   c40de:	460b      	mov	r3, r1
   c40e0:	4650      	mov	r0, sl
   c40e2:	4659      	mov	r1, fp
   c40e4:	f7fe ff8a 	bl	c2ffc <__adddf3>
   c40e8:	4682      	mov	sl, r0
   c40ea:	468b      	mov	fp, r1
   c40ec:	2d0f      	cmp	r5, #15
   c40ee:	dc38      	bgt.n	c4162 <_strtod_l+0x452>
   c40f0:	9b06      	ldr	r3, [sp, #24]
   c40f2:	2b00      	cmp	r3, #0
   c40f4:	f43f ae50 	beq.w	c3d98 <_strtod_l+0x88>
   c40f8:	dd24      	ble.n	c4144 <_strtod_l+0x434>
   c40fa:	2b16      	cmp	r3, #22
   c40fc:	dc0b      	bgt.n	c4116 <_strtod_l+0x406>
   c40fe:	496d      	ldr	r1, [pc, #436]	; (c42b4 <_strtod_l+0x5a4>)
   c4100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4104:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4108:	4652      	mov	r2, sl
   c410a:	465b      	mov	r3, fp
   c410c:	f7ff f92c 	bl	c3368 <__aeabi_dmul>
   c4110:	4682      	mov	sl, r0
   c4112:	468b      	mov	fp, r1
   c4114:	e640      	b.n	c3d98 <_strtod_l+0x88>
   c4116:	9a06      	ldr	r2, [sp, #24]
   c4118:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c411c:	4293      	cmp	r3, r2
   c411e:	db20      	blt.n	c4162 <_strtod_l+0x452>
   c4120:	4c64      	ldr	r4, [pc, #400]	; (c42b4 <_strtod_l+0x5a4>)
   c4122:	f1c5 050f 	rsb	r5, r5, #15
   c4126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c412a:	4652      	mov	r2, sl
   c412c:	465b      	mov	r3, fp
   c412e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4132:	f7ff f919 	bl	c3368 <__aeabi_dmul>
   c4136:	9b06      	ldr	r3, [sp, #24]
   c4138:	1b5d      	subs	r5, r3, r5
   c413a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c413e:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4142:	e7e3      	b.n	c410c <_strtod_l+0x3fc>
   c4144:	9b06      	ldr	r3, [sp, #24]
   c4146:	3316      	adds	r3, #22
   c4148:	db0b      	blt.n	c4162 <_strtod_l+0x452>
   c414a:	9b05      	ldr	r3, [sp, #20]
   c414c:	1b9e      	subs	r6, r3, r6
   c414e:	4b59      	ldr	r3, [pc, #356]	; (c42b4 <_strtod_l+0x5a4>)
   c4150:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4154:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4158:	4650      	mov	r0, sl
   c415a:	4659      	mov	r1, fp
   c415c:	f7ff fa2e 	bl	c35bc <__aeabi_ddiv>
   c4160:	e7d6      	b.n	c4110 <_strtod_l+0x400>
   c4162:	9b06      	ldr	r3, [sp, #24]
   c4164:	eba5 0808 	sub.w	r8, r5, r8
   c4168:	4498      	add	r8, r3
   c416a:	f1b8 0f00 	cmp.w	r8, #0
   c416e:	dd74      	ble.n	c425a <_strtod_l+0x54a>
   c4170:	f018 030f 	ands.w	r3, r8, #15
   c4174:	d00a      	beq.n	c418c <_strtod_l+0x47c>
   c4176:	494f      	ldr	r1, [pc, #316]	; (c42b4 <_strtod_l+0x5a4>)
   c4178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c417c:	4652      	mov	r2, sl
   c417e:	465b      	mov	r3, fp
   c4180:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4184:	f7ff f8f0 	bl	c3368 <__aeabi_dmul>
   c4188:	4682      	mov	sl, r0
   c418a:	468b      	mov	fp, r1
   c418c:	f038 080f 	bics.w	r8, r8, #15
   c4190:	d04f      	beq.n	c4232 <_strtod_l+0x522>
   c4192:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4196:	dd22      	ble.n	c41de <_strtod_l+0x4ce>
   c4198:	2500      	movs	r5, #0
   c419a:	462e      	mov	r6, r5
   c419c:	9507      	str	r5, [sp, #28]
   c419e:	9505      	str	r5, [sp, #20]
   c41a0:	2322      	movs	r3, #34	; 0x22
   c41a2:	f8df b118 	ldr.w	fp, [pc, #280]	; c42bc <_strtod_l+0x5ac>
   c41a6:	6023      	str	r3, [r4, #0]
   c41a8:	f04f 0a00 	mov.w	sl, #0
   c41ac:	9b07      	ldr	r3, [sp, #28]
   c41ae:	2b00      	cmp	r3, #0
   c41b0:	f43f adf2 	beq.w	c3d98 <_strtod_l+0x88>
   c41b4:	9918      	ldr	r1, [sp, #96]	; 0x60
   c41b6:	4620      	mov	r0, r4
   c41b8:	f001 f870 	bl	c529c <_Bfree>
   c41bc:	9905      	ldr	r1, [sp, #20]
   c41be:	4620      	mov	r0, r4
   c41c0:	f001 f86c 	bl	c529c <_Bfree>
   c41c4:	4631      	mov	r1, r6
   c41c6:	4620      	mov	r0, r4
   c41c8:	f001 f868 	bl	c529c <_Bfree>
   c41cc:	9907      	ldr	r1, [sp, #28]
   c41ce:	4620      	mov	r0, r4
   c41d0:	f001 f864 	bl	c529c <_Bfree>
   c41d4:	4629      	mov	r1, r5
   c41d6:	4620      	mov	r0, r4
   c41d8:	f001 f860 	bl	c529c <_Bfree>
   c41dc:	e5dc      	b.n	c3d98 <_strtod_l+0x88>
   c41de:	4b36      	ldr	r3, [pc, #216]	; (c42b8 <_strtod_l+0x5a8>)
   c41e0:	9304      	str	r3, [sp, #16]
   c41e2:	2300      	movs	r3, #0
   c41e4:	ea4f 1828 	mov.w	r8, r8, asr #4
   c41e8:	4650      	mov	r0, sl
   c41ea:	4659      	mov	r1, fp
   c41ec:	4699      	mov	r9, r3
   c41ee:	f1b8 0f01 	cmp.w	r8, #1
   c41f2:	dc21      	bgt.n	c4238 <_strtod_l+0x528>
   c41f4:	b10b      	cbz	r3, c41fa <_strtod_l+0x4ea>
   c41f6:	4682      	mov	sl, r0
   c41f8:	468b      	mov	fp, r1
   c41fa:	4b2f      	ldr	r3, [pc, #188]	; (c42b8 <_strtod_l+0x5a8>)
   c41fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4200:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4204:	4652      	mov	r2, sl
   c4206:	465b      	mov	r3, fp
   c4208:	e9d9 0100 	ldrd	r0, r1, [r9]
   c420c:	f7ff f8ac 	bl	c3368 <__aeabi_dmul>
   c4210:	4b2a      	ldr	r3, [pc, #168]	; (c42bc <_strtod_l+0x5ac>)
   c4212:	460a      	mov	r2, r1
   c4214:	400b      	ands	r3, r1
   c4216:	492a      	ldr	r1, [pc, #168]	; (c42c0 <_strtod_l+0x5b0>)
   c4218:	428b      	cmp	r3, r1
   c421a:	4682      	mov	sl, r0
   c421c:	d8bc      	bhi.n	c4198 <_strtod_l+0x488>
   c421e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4222:	428b      	cmp	r3, r1
   c4224:	bf86      	itte	hi
   c4226:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c42c4 <_strtod_l+0x5b4>
   c422a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c422e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4232:	2300      	movs	r3, #0
   c4234:	9304      	str	r3, [sp, #16]
   c4236:	e084      	b.n	c4342 <_strtod_l+0x632>
   c4238:	f018 0f01 	tst.w	r8, #1
   c423c:	d005      	beq.n	c424a <_strtod_l+0x53a>
   c423e:	9b04      	ldr	r3, [sp, #16]
   c4240:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4244:	f7ff f890 	bl	c3368 <__aeabi_dmul>
   c4248:	2301      	movs	r3, #1
   c424a:	9a04      	ldr	r2, [sp, #16]
   c424c:	3208      	adds	r2, #8
   c424e:	f109 0901 	add.w	r9, r9, #1
   c4252:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4256:	9204      	str	r2, [sp, #16]
   c4258:	e7c9      	b.n	c41ee <_strtod_l+0x4de>
   c425a:	d0ea      	beq.n	c4232 <_strtod_l+0x522>
   c425c:	f1c8 0800 	rsb	r8, r8, #0
   c4260:	f018 020f 	ands.w	r2, r8, #15
   c4264:	d00a      	beq.n	c427c <_strtod_l+0x56c>
   c4266:	4b13      	ldr	r3, [pc, #76]	; (c42b4 <_strtod_l+0x5a4>)
   c4268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c426c:	4650      	mov	r0, sl
   c426e:	4659      	mov	r1, fp
   c4270:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4274:	f7ff f9a2 	bl	c35bc <__aeabi_ddiv>
   c4278:	4682      	mov	sl, r0
   c427a:	468b      	mov	fp, r1
   c427c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4280:	d0d7      	beq.n	c4232 <_strtod_l+0x522>
   c4282:	f1b8 0f1f 	cmp.w	r8, #31
   c4286:	dd1f      	ble.n	c42c8 <_strtod_l+0x5b8>
   c4288:	2500      	movs	r5, #0
   c428a:	462e      	mov	r6, r5
   c428c:	9507      	str	r5, [sp, #28]
   c428e:	9505      	str	r5, [sp, #20]
   c4290:	2322      	movs	r3, #34	; 0x22
   c4292:	f04f 0a00 	mov.w	sl, #0
   c4296:	f04f 0b00 	mov.w	fp, #0
   c429a:	6023      	str	r3, [r4, #0]
   c429c:	e786      	b.n	c41ac <_strtod_l+0x49c>
   c429e:	bf00      	nop
   c42a0:	000c7ad1 	.word	0x000c7ad1
   c42a4:	000c7ae8 	.word	0x000c7ae8
   c42a8:	000c7ac8 	.word	0x000c7ac8
   c42ac:	000c7acb 	.word	0x000c7acb
   c42b0:	000c7397 	.word	0x000c7397
   c42b4:	000c7d30 	.word	0x000c7d30
   c42b8:	000c7d08 	.word	0x000c7d08
   c42bc:	7ff00000 	.word	0x7ff00000
   c42c0:	7ca00000 	.word	0x7ca00000
   c42c4:	7fefffff 	.word	0x7fefffff
   c42c8:	f018 0310 	ands.w	r3, r8, #16
   c42cc:	bf18      	it	ne
   c42ce:	236a      	movne	r3, #106	; 0x6a
   c42d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4680 <_strtod_l+0x970>
   c42d4:	9304      	str	r3, [sp, #16]
   c42d6:	4650      	mov	r0, sl
   c42d8:	4659      	mov	r1, fp
   c42da:	2300      	movs	r3, #0
   c42dc:	f018 0f01 	tst.w	r8, #1
   c42e0:	d004      	beq.n	c42ec <_strtod_l+0x5dc>
   c42e2:	e9d9 2300 	ldrd	r2, r3, [r9]
   c42e6:	f7ff f83f 	bl	c3368 <__aeabi_dmul>
   c42ea:	2301      	movs	r3, #1
   c42ec:	ea5f 0868 	movs.w	r8, r8, asr #1
   c42f0:	f109 0908 	add.w	r9, r9, #8
   c42f4:	d1f2      	bne.n	c42dc <_strtod_l+0x5cc>
   c42f6:	b10b      	cbz	r3, c42fc <_strtod_l+0x5ec>
   c42f8:	4682      	mov	sl, r0
   c42fa:	468b      	mov	fp, r1
   c42fc:	9b04      	ldr	r3, [sp, #16]
   c42fe:	b1c3      	cbz	r3, c4332 <_strtod_l+0x622>
   c4300:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4304:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4308:	2b00      	cmp	r3, #0
   c430a:	4659      	mov	r1, fp
   c430c:	dd11      	ble.n	c4332 <_strtod_l+0x622>
   c430e:	2b1f      	cmp	r3, #31
   c4310:	f340 8124 	ble.w	c455c <_strtod_l+0x84c>
   c4314:	2b34      	cmp	r3, #52	; 0x34
   c4316:	bfde      	ittt	le
   c4318:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c431c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c4320:	fa03 f202 	lslle.w	r2, r3, r2
   c4324:	f04f 0a00 	mov.w	sl, #0
   c4328:	bfcc      	ite	gt
   c432a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c432e:	ea02 0b01 	andle.w	fp, r2, r1
   c4332:	2200      	movs	r2, #0
   c4334:	2300      	movs	r3, #0
   c4336:	4650      	mov	r0, sl
   c4338:	4659      	mov	r1, fp
   c433a:	f7ff fa7d 	bl	c3838 <__aeabi_dcmpeq>
   c433e:	2800      	cmp	r0, #0
   c4340:	d1a2      	bne.n	c4288 <_strtod_l+0x578>
   c4342:	9b07      	ldr	r3, [sp, #28]
   c4344:	9300      	str	r3, [sp, #0]
   c4346:	9908      	ldr	r1, [sp, #32]
   c4348:	462b      	mov	r3, r5
   c434a:	463a      	mov	r2, r7
   c434c:	4620      	mov	r0, r4
   c434e:	f001 f80d 	bl	c536c <__s2b>
   c4352:	9007      	str	r0, [sp, #28]
   c4354:	2800      	cmp	r0, #0
   c4356:	f43f af1f 	beq.w	c4198 <_strtod_l+0x488>
   c435a:	9b05      	ldr	r3, [sp, #20]
   c435c:	1b9e      	subs	r6, r3, r6
   c435e:	9b06      	ldr	r3, [sp, #24]
   c4360:	2b00      	cmp	r3, #0
   c4362:	bfb4      	ite	lt
   c4364:	4633      	movlt	r3, r6
   c4366:	2300      	movge	r3, #0
   c4368:	930c      	str	r3, [sp, #48]	; 0x30
   c436a:	9b06      	ldr	r3, [sp, #24]
   c436c:	2500      	movs	r5, #0
   c436e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4372:	9312      	str	r3, [sp, #72]	; 0x48
   c4374:	462e      	mov	r6, r5
   c4376:	9b07      	ldr	r3, [sp, #28]
   c4378:	4620      	mov	r0, r4
   c437a:	6859      	ldr	r1, [r3, #4]
   c437c:	f000 ff4e 	bl	c521c <_Balloc>
   c4380:	9005      	str	r0, [sp, #20]
   c4382:	2800      	cmp	r0, #0
   c4384:	f43f af0c 	beq.w	c41a0 <_strtod_l+0x490>
   c4388:	9b07      	ldr	r3, [sp, #28]
   c438a:	691a      	ldr	r2, [r3, #16]
   c438c:	3202      	adds	r2, #2
   c438e:	f103 010c 	add.w	r1, r3, #12
   c4392:	0092      	lsls	r2, r2, #2
   c4394:	300c      	adds	r0, #12
   c4396:	f7ff fb73 	bl	c3a80 <memcpy>
   c439a:	ec4b ab10 	vmov	d0, sl, fp
   c439e:	aa1a      	add	r2, sp, #104	; 0x68
   c43a0:	a919      	add	r1, sp, #100	; 0x64
   c43a2:	4620      	mov	r0, r4
   c43a4:	f001 fb28 	bl	c59f8 <__d2b>
   c43a8:	ec4b ab18 	vmov	d8, sl, fp
   c43ac:	9018      	str	r0, [sp, #96]	; 0x60
   c43ae:	2800      	cmp	r0, #0
   c43b0:	f43f aef6 	beq.w	c41a0 <_strtod_l+0x490>
   c43b4:	2101      	movs	r1, #1
   c43b6:	4620      	mov	r0, r4
   c43b8:	f001 f872 	bl	c54a0 <__i2b>
   c43bc:	4606      	mov	r6, r0
   c43be:	2800      	cmp	r0, #0
   c43c0:	f43f aeee 	beq.w	c41a0 <_strtod_l+0x490>
   c43c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c43c6:	9904      	ldr	r1, [sp, #16]
   c43c8:	2b00      	cmp	r3, #0
   c43ca:	bfab      	itete	ge
   c43cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c43ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c43d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c43d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c43d6:	bfac      	ite	ge
   c43d8:	eb03 0902 	addge.w	r9, r3, r2
   c43dc:	1ad7      	sublt	r7, r2, r3
   c43de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c43e0:	eba3 0801 	sub.w	r8, r3, r1
   c43e4:	4490      	add	r8, r2
   c43e6:	4ba1      	ldr	r3, [pc, #644]	; (c466c <_strtod_l+0x95c>)
   c43e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c43ec:	4598      	cmp	r8, r3
   c43ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c43f2:	f280 80c7 	bge.w	c4584 <_strtod_l+0x874>
   c43f6:	eba3 0308 	sub.w	r3, r3, r8
   c43fa:	2b1f      	cmp	r3, #31
   c43fc:	eba2 0203 	sub.w	r2, r2, r3
   c4400:	f04f 0101 	mov.w	r1, #1
   c4404:	f300 80b1 	bgt.w	c456a <_strtod_l+0x85a>
   c4408:	fa01 f303 	lsl.w	r3, r1, r3
   c440c:	930d      	str	r3, [sp, #52]	; 0x34
   c440e:	2300      	movs	r3, #0
   c4410:	9308      	str	r3, [sp, #32]
   c4412:	eb09 0802 	add.w	r8, r9, r2
   c4416:	9b04      	ldr	r3, [sp, #16]
   c4418:	45c1      	cmp	r9, r8
   c441a:	4417      	add	r7, r2
   c441c:	441f      	add	r7, r3
   c441e:	464b      	mov	r3, r9
   c4420:	bfa8      	it	ge
   c4422:	4643      	movge	r3, r8
   c4424:	42bb      	cmp	r3, r7
   c4426:	bfa8      	it	ge
   c4428:	463b      	movge	r3, r7
   c442a:	2b00      	cmp	r3, #0
   c442c:	bfc2      	ittt	gt
   c442e:	eba8 0803 	subgt.w	r8, r8, r3
   c4432:	1aff      	subgt	r7, r7, r3
   c4434:	eba9 0903 	subgt.w	r9, r9, r3
   c4438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c443a:	2b00      	cmp	r3, #0
   c443c:	dd17      	ble.n	c446e <_strtod_l+0x75e>
   c443e:	4631      	mov	r1, r6
   c4440:	461a      	mov	r2, r3
   c4442:	4620      	mov	r0, r4
   c4444:	f001 f8ec 	bl	c5620 <__pow5mult>
   c4448:	4606      	mov	r6, r0
   c444a:	2800      	cmp	r0, #0
   c444c:	f43f aea8 	beq.w	c41a0 <_strtod_l+0x490>
   c4450:	4601      	mov	r1, r0
   c4452:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4454:	4620      	mov	r0, r4
   c4456:	f001 f839 	bl	c54cc <__multiply>
   c445a:	900b      	str	r0, [sp, #44]	; 0x2c
   c445c:	2800      	cmp	r0, #0
   c445e:	f43f ae9f 	beq.w	c41a0 <_strtod_l+0x490>
   c4462:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4464:	4620      	mov	r0, r4
   c4466:	f000 ff19 	bl	c529c <_Bfree>
   c446a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c446c:	9318      	str	r3, [sp, #96]	; 0x60
   c446e:	f1b8 0f00 	cmp.w	r8, #0
   c4472:	f300 808c 	bgt.w	c458e <_strtod_l+0x87e>
   c4476:	9b06      	ldr	r3, [sp, #24]
   c4478:	2b00      	cmp	r3, #0
   c447a:	dd08      	ble.n	c448e <_strtod_l+0x77e>
   c447c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c447e:	9905      	ldr	r1, [sp, #20]
   c4480:	4620      	mov	r0, r4
   c4482:	f001 f8cd 	bl	c5620 <__pow5mult>
   c4486:	9005      	str	r0, [sp, #20]
   c4488:	2800      	cmp	r0, #0
   c448a:	f43f ae89 	beq.w	c41a0 <_strtod_l+0x490>
   c448e:	2f00      	cmp	r7, #0
   c4490:	dd08      	ble.n	c44a4 <_strtod_l+0x794>
   c4492:	9905      	ldr	r1, [sp, #20]
   c4494:	463a      	mov	r2, r7
   c4496:	4620      	mov	r0, r4
   c4498:	f001 f91c 	bl	c56d4 <__lshift>
   c449c:	9005      	str	r0, [sp, #20]
   c449e:	2800      	cmp	r0, #0
   c44a0:	f43f ae7e 	beq.w	c41a0 <_strtod_l+0x490>
   c44a4:	f1b9 0f00 	cmp.w	r9, #0
   c44a8:	dd08      	ble.n	c44bc <_strtod_l+0x7ac>
   c44aa:	4631      	mov	r1, r6
   c44ac:	464a      	mov	r2, r9
   c44ae:	4620      	mov	r0, r4
   c44b0:	f001 f910 	bl	c56d4 <__lshift>
   c44b4:	4606      	mov	r6, r0
   c44b6:	2800      	cmp	r0, #0
   c44b8:	f43f ae72 	beq.w	c41a0 <_strtod_l+0x490>
   c44bc:	9a05      	ldr	r2, [sp, #20]
   c44be:	9918      	ldr	r1, [sp, #96]	; 0x60
   c44c0:	4620      	mov	r0, r4
   c44c2:	f001 f993 	bl	c57ec <__mdiff>
   c44c6:	4605      	mov	r5, r0
   c44c8:	2800      	cmp	r0, #0
   c44ca:	f43f ae69 	beq.w	c41a0 <_strtod_l+0x490>
   c44ce:	68c3      	ldr	r3, [r0, #12]
   c44d0:	930b      	str	r3, [sp, #44]	; 0x2c
   c44d2:	2300      	movs	r3, #0
   c44d4:	60c3      	str	r3, [r0, #12]
   c44d6:	4631      	mov	r1, r6
   c44d8:	f001 f96c 	bl	c57b4 <__mcmp>
   c44dc:	2800      	cmp	r0, #0
   c44de:	da60      	bge.n	c45a2 <_strtod_l+0x892>
   c44e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c44e2:	ea53 030a 	orrs.w	r3, r3, sl
   c44e6:	f040 8082 	bne.w	c45ee <_strtod_l+0x8de>
   c44ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c44ee:	2b00      	cmp	r3, #0
   c44f0:	d17d      	bne.n	c45ee <_strtod_l+0x8de>
   c44f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c44f6:	0d1b      	lsrs	r3, r3, #20
   c44f8:	051b      	lsls	r3, r3, #20
   c44fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c44fe:	d976      	bls.n	c45ee <_strtod_l+0x8de>
   c4500:	696b      	ldr	r3, [r5, #20]
   c4502:	b913      	cbnz	r3, c450a <_strtod_l+0x7fa>
   c4504:	692b      	ldr	r3, [r5, #16]
   c4506:	2b01      	cmp	r3, #1
   c4508:	dd71      	ble.n	c45ee <_strtod_l+0x8de>
   c450a:	4629      	mov	r1, r5
   c450c:	2201      	movs	r2, #1
   c450e:	4620      	mov	r0, r4
   c4510:	f001 f8e0 	bl	c56d4 <__lshift>
   c4514:	4631      	mov	r1, r6
   c4516:	4605      	mov	r5, r0
   c4518:	f001 f94c 	bl	c57b4 <__mcmp>
   c451c:	2800      	cmp	r0, #0
   c451e:	dd66      	ble.n	c45ee <_strtod_l+0x8de>
   c4520:	9904      	ldr	r1, [sp, #16]
   c4522:	4a53      	ldr	r2, [pc, #332]	; (c4670 <_strtod_l+0x960>)
   c4524:	465b      	mov	r3, fp
   c4526:	2900      	cmp	r1, #0
   c4528:	f000 8081 	beq.w	c462e <_strtod_l+0x91e>
   c452c:	ea02 010b 	and.w	r1, r2, fp
   c4530:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4534:	dc7b      	bgt.n	c462e <_strtod_l+0x91e>
   c4536:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c453a:	f77f aea9 	ble.w	c4290 <_strtod_l+0x580>
   c453e:	4b4d      	ldr	r3, [pc, #308]	; (c4674 <_strtod_l+0x964>)
   c4540:	4650      	mov	r0, sl
   c4542:	4659      	mov	r1, fp
   c4544:	2200      	movs	r2, #0
   c4546:	f7fe ff0f 	bl	c3368 <__aeabi_dmul>
   c454a:	460b      	mov	r3, r1
   c454c:	4303      	orrs	r3, r0
   c454e:	bf08      	it	eq
   c4550:	2322      	moveq	r3, #34	; 0x22
   c4552:	4682      	mov	sl, r0
   c4554:	468b      	mov	fp, r1
   c4556:	bf08      	it	eq
   c4558:	6023      	streq	r3, [r4, #0]
   c455a:	e62b      	b.n	c41b4 <_strtod_l+0x4a4>
   c455c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4560:	fa02 f303 	lsl.w	r3, r2, r3
   c4564:	ea03 0a0a 	and.w	sl, r3, sl
   c4568:	e6e3      	b.n	c4332 <_strtod_l+0x622>
   c456a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c456e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4572:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4576:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c457a:	fa01 f308 	lsl.w	r3, r1, r8
   c457e:	9308      	str	r3, [sp, #32]
   c4580:	910d      	str	r1, [sp, #52]	; 0x34
   c4582:	e746      	b.n	c4412 <_strtod_l+0x702>
   c4584:	2300      	movs	r3, #0
   c4586:	9308      	str	r3, [sp, #32]
   c4588:	2301      	movs	r3, #1
   c458a:	930d      	str	r3, [sp, #52]	; 0x34
   c458c:	e741      	b.n	c4412 <_strtod_l+0x702>
   c458e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4590:	4642      	mov	r2, r8
   c4592:	4620      	mov	r0, r4
   c4594:	f001 f89e 	bl	c56d4 <__lshift>
   c4598:	9018      	str	r0, [sp, #96]	; 0x60
   c459a:	2800      	cmp	r0, #0
   c459c:	f47f af6b 	bne.w	c4476 <_strtod_l+0x766>
   c45a0:	e5fe      	b.n	c41a0 <_strtod_l+0x490>
   c45a2:	465f      	mov	r7, fp
   c45a4:	d16e      	bne.n	c4684 <_strtod_l+0x974>
   c45a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c45a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c45ac:	b342      	cbz	r2, c4600 <_strtod_l+0x8f0>
   c45ae:	4a32      	ldr	r2, [pc, #200]	; (c4678 <_strtod_l+0x968>)
   c45b0:	4293      	cmp	r3, r2
   c45b2:	d128      	bne.n	c4606 <_strtod_l+0x8f6>
   c45b4:	9b04      	ldr	r3, [sp, #16]
   c45b6:	4651      	mov	r1, sl
   c45b8:	b1eb      	cbz	r3, c45f6 <_strtod_l+0x8e6>
   c45ba:	4b2d      	ldr	r3, [pc, #180]	; (c4670 <_strtod_l+0x960>)
   c45bc:	403b      	ands	r3, r7
   c45be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c45c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c45c6:	d819      	bhi.n	c45fc <_strtod_l+0x8ec>
   c45c8:	0d1b      	lsrs	r3, r3, #20
   c45ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c45ce:	fa02 f303 	lsl.w	r3, r2, r3
   c45d2:	4299      	cmp	r1, r3
   c45d4:	d117      	bne.n	c4606 <_strtod_l+0x8f6>
   c45d6:	4b29      	ldr	r3, [pc, #164]	; (c467c <_strtod_l+0x96c>)
   c45d8:	429f      	cmp	r7, r3
   c45da:	d102      	bne.n	c45e2 <_strtod_l+0x8d2>
   c45dc:	3101      	adds	r1, #1
   c45de:	f43f addf 	beq.w	c41a0 <_strtod_l+0x490>
   c45e2:	4b23      	ldr	r3, [pc, #140]	; (c4670 <_strtod_l+0x960>)
   c45e4:	403b      	ands	r3, r7
   c45e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c45ea:	f04f 0a00 	mov.w	sl, #0
   c45ee:	9b04      	ldr	r3, [sp, #16]
   c45f0:	2b00      	cmp	r3, #0
   c45f2:	d1a4      	bne.n	c453e <_strtod_l+0x82e>
   c45f4:	e5de      	b.n	c41b4 <_strtod_l+0x4a4>
   c45f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c45fa:	e7ea      	b.n	c45d2 <_strtod_l+0x8c2>
   c45fc:	4613      	mov	r3, r2
   c45fe:	e7e8      	b.n	c45d2 <_strtod_l+0x8c2>
   c4600:	ea53 030a 	orrs.w	r3, r3, sl
   c4604:	d08c      	beq.n	c4520 <_strtod_l+0x810>
   c4606:	9b08      	ldr	r3, [sp, #32]
   c4608:	b1db      	cbz	r3, c4642 <_strtod_l+0x932>
   c460a:	423b      	tst	r3, r7
   c460c:	d0ef      	beq.n	c45ee <_strtod_l+0x8de>
   c460e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4610:	9a04      	ldr	r2, [sp, #16]
   c4612:	4650      	mov	r0, sl
   c4614:	4659      	mov	r1, fp
   c4616:	b1c3      	cbz	r3, c464a <_strtod_l+0x93a>
   c4618:	f7ff fb5d 	bl	c3cd6 <sulp>
   c461c:	4602      	mov	r2, r0
   c461e:	460b      	mov	r3, r1
   c4620:	ec51 0b18 	vmov	r0, r1, d8
   c4624:	f7fe fcea 	bl	c2ffc <__adddf3>
   c4628:	4682      	mov	sl, r0
   c462a:	468b      	mov	fp, r1
   c462c:	e7df      	b.n	c45ee <_strtod_l+0x8de>
   c462e:	4013      	ands	r3, r2
   c4630:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4634:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c463c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4640:	e7d5      	b.n	c45ee <_strtod_l+0x8de>
   c4642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4644:	ea13 0f0a 	tst.w	r3, sl
   c4648:	e7e0      	b.n	c460c <_strtod_l+0x8fc>
   c464a:	f7ff fb44 	bl	c3cd6 <sulp>
   c464e:	4602      	mov	r2, r0
   c4650:	460b      	mov	r3, r1
   c4652:	ec51 0b18 	vmov	r0, r1, d8
   c4656:	f7fe fccf 	bl	c2ff8 <__aeabi_dsub>
   c465a:	2200      	movs	r2, #0
   c465c:	2300      	movs	r3, #0
   c465e:	4682      	mov	sl, r0
   c4660:	468b      	mov	fp, r1
   c4662:	f7ff f8e9 	bl	c3838 <__aeabi_dcmpeq>
   c4666:	2800      	cmp	r0, #0
   c4668:	d0c1      	beq.n	c45ee <_strtod_l+0x8de>
   c466a:	e611      	b.n	c4290 <_strtod_l+0x580>
   c466c:	fffffc02 	.word	0xfffffc02
   c4670:	7ff00000 	.word	0x7ff00000
   c4674:	39500000 	.word	0x39500000
   c4678:	000fffff 	.word	0x000fffff
   c467c:	7fefffff 	.word	0x7fefffff
   c4680:	000c7b00 	.word	0x000c7b00
   c4684:	4631      	mov	r1, r6
   c4686:	4628      	mov	r0, r5
   c4688:	f001 fa12 	bl	c5ab0 <__ratio>
   c468c:	ec59 8b10 	vmov	r8, r9, d0
   c4690:	ee10 0a10 	vmov	r0, s0
   c4694:	2200      	movs	r2, #0
   c4696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c469a:	4649      	mov	r1, r9
   c469c:	f7ff f8e0 	bl	c3860 <__aeabi_dcmple>
   c46a0:	2800      	cmp	r0, #0
   c46a2:	d07a      	beq.n	c479a <_strtod_l+0xa8a>
   c46a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c46a6:	2b00      	cmp	r3, #0
   c46a8:	d04a      	beq.n	c4740 <_strtod_l+0xa30>
   c46aa:	4b95      	ldr	r3, [pc, #596]	; (c4900 <_strtod_l+0xbf0>)
   c46ac:	2200      	movs	r2, #0
   c46ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c46b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; c4900 <_strtod_l+0xbf0>
   c46b6:	f04f 0800 	mov.w	r8, #0
   c46ba:	4b92      	ldr	r3, [pc, #584]	; (c4904 <_strtod_l+0xbf4>)
   c46bc:	403b      	ands	r3, r7
   c46be:	930d      	str	r3, [sp, #52]	; 0x34
   c46c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c46c2:	4b91      	ldr	r3, [pc, #580]	; (c4908 <_strtod_l+0xbf8>)
   c46c4:	429a      	cmp	r2, r3
   c46c6:	f040 80b0 	bne.w	c482a <_strtod_l+0xb1a>
   c46ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c46ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c46d2:	ec4b ab10 	vmov	d0, sl, fp
   c46d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c46da:	f001 f911 	bl	c5900 <__ulp>
   c46de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c46e2:	ec53 2b10 	vmov	r2, r3, d0
   c46e6:	f7fe fe3f 	bl	c3368 <__aeabi_dmul>
   c46ea:	4652      	mov	r2, sl
   c46ec:	465b      	mov	r3, fp
   c46ee:	f7fe fc85 	bl	c2ffc <__adddf3>
   c46f2:	460b      	mov	r3, r1
   c46f4:	4983      	ldr	r1, [pc, #524]	; (c4904 <_strtod_l+0xbf4>)
   c46f6:	4a85      	ldr	r2, [pc, #532]	; (c490c <_strtod_l+0xbfc>)
   c46f8:	4019      	ands	r1, r3
   c46fa:	4291      	cmp	r1, r2
   c46fc:	4682      	mov	sl, r0
   c46fe:	d960      	bls.n	c47c2 <_strtod_l+0xab2>
   c4700:	ee18 3a90 	vmov	r3, s17
   c4704:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c4708:	4293      	cmp	r3, r2
   c470a:	d104      	bne.n	c4716 <_strtod_l+0xa06>
   c470c:	ee18 3a10 	vmov	r3, s16
   c4710:	3301      	adds	r3, #1
   c4712:	f43f ad45 	beq.w	c41a0 <_strtod_l+0x490>
   c4716:	f8df b200 	ldr.w	fp, [pc, #512]	; c4918 <_strtod_l+0xc08>
   c471a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c471e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4720:	4620      	mov	r0, r4
   c4722:	f000 fdbb 	bl	c529c <_Bfree>
   c4726:	9905      	ldr	r1, [sp, #20]
   c4728:	4620      	mov	r0, r4
   c472a:	f000 fdb7 	bl	c529c <_Bfree>
   c472e:	4631      	mov	r1, r6
   c4730:	4620      	mov	r0, r4
   c4732:	f000 fdb3 	bl	c529c <_Bfree>
   c4736:	4629      	mov	r1, r5
   c4738:	4620      	mov	r0, r4
   c473a:	f000 fdaf 	bl	c529c <_Bfree>
   c473e:	e61a      	b.n	c4376 <_strtod_l+0x666>
   c4740:	f1ba 0f00 	cmp.w	sl, #0
   c4744:	d11b      	bne.n	c477e <_strtod_l+0xa6e>
   c4746:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c474a:	b9f3      	cbnz	r3, c478a <_strtod_l+0xa7a>
   c474c:	4b6c      	ldr	r3, [pc, #432]	; (c4900 <_strtod_l+0xbf0>)
   c474e:	2200      	movs	r2, #0
   c4750:	4640      	mov	r0, r8
   c4752:	4649      	mov	r1, r9
   c4754:	f7ff f87a 	bl	c384c <__aeabi_dcmplt>
   c4758:	b9d0      	cbnz	r0, c4790 <_strtod_l+0xa80>
   c475a:	4640      	mov	r0, r8
   c475c:	4649      	mov	r1, r9
   c475e:	4b6c      	ldr	r3, [pc, #432]	; (c4910 <_strtod_l+0xc00>)
   c4760:	2200      	movs	r2, #0
   c4762:	f7fe fe01 	bl	c3368 <__aeabi_dmul>
   c4766:	4680      	mov	r8, r0
   c4768:	4689      	mov	r9, r1
   c476a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c476e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c4772:	9315      	str	r3, [sp, #84]	; 0x54
   c4774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c4778:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c477c:	e79d      	b.n	c46ba <_strtod_l+0x9aa>
   c477e:	f1ba 0f01 	cmp.w	sl, #1
   c4782:	d102      	bne.n	c478a <_strtod_l+0xa7a>
   c4784:	2f00      	cmp	r7, #0
   c4786:	f43f ad83 	beq.w	c4290 <_strtod_l+0x580>
   c478a:	4b62      	ldr	r3, [pc, #392]	; (c4914 <_strtod_l+0xc04>)
   c478c:	2200      	movs	r2, #0
   c478e:	e78e      	b.n	c46ae <_strtod_l+0x99e>
   c4790:	f8df 917c 	ldr.w	r9, [pc, #380]	; c4910 <_strtod_l+0xc00>
   c4794:	f04f 0800 	mov.w	r8, #0
   c4798:	e7e7      	b.n	c476a <_strtod_l+0xa5a>
   c479a:	4b5d      	ldr	r3, [pc, #372]	; (c4910 <_strtod_l+0xc00>)
   c479c:	4640      	mov	r0, r8
   c479e:	4649      	mov	r1, r9
   c47a0:	2200      	movs	r2, #0
   c47a2:	f7fe fde1 	bl	c3368 <__aeabi_dmul>
   c47a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c47a8:	4680      	mov	r8, r0
   c47aa:	4689      	mov	r9, r1
   c47ac:	b933      	cbnz	r3, c47bc <_strtod_l+0xaac>
   c47ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c47b2:	900e      	str	r0, [sp, #56]	; 0x38
   c47b4:	930f      	str	r3, [sp, #60]	; 0x3c
   c47b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c47ba:	e7dd      	b.n	c4778 <_strtod_l+0xa68>
   c47bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c47c0:	e7f9      	b.n	c47b6 <_strtod_l+0xaa6>
   c47c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c47c6:	9b04      	ldr	r3, [sp, #16]
   c47c8:	2b00      	cmp	r3, #0
   c47ca:	d1a8      	bne.n	c471e <_strtod_l+0xa0e>
   c47cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c47d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c47d2:	0d1b      	lsrs	r3, r3, #20
   c47d4:	051b      	lsls	r3, r3, #20
   c47d6:	429a      	cmp	r2, r3
   c47d8:	d1a1      	bne.n	c471e <_strtod_l+0xa0e>
   c47da:	4640      	mov	r0, r8
   c47dc:	4649      	mov	r1, r9
   c47de:	f001 fa05 	bl	c5bec <__aeabi_d2lz>
   c47e2:	f7fe fd93 	bl	c330c <__aeabi_l2d>
   c47e6:	4602      	mov	r2, r0
   c47e8:	460b      	mov	r3, r1
   c47ea:	4640      	mov	r0, r8
   c47ec:	4649      	mov	r1, r9
   c47ee:	f7fe fc03 	bl	c2ff8 <__aeabi_dsub>
   c47f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c47f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c47f8:	ea43 030a 	orr.w	r3, r3, sl
   c47fc:	4313      	orrs	r3, r2
   c47fe:	4680      	mov	r8, r0
   c4800:	4689      	mov	r9, r1
   c4802:	d055      	beq.n	c48b0 <_strtod_l+0xba0>
   c4804:	a336      	add	r3, pc, #216	; (adr r3, c48e0 <_strtod_l+0xbd0>)
   c4806:	e9d3 2300 	ldrd	r2, r3, [r3]
   c480a:	f7ff f81f 	bl	c384c <__aeabi_dcmplt>
   c480e:	2800      	cmp	r0, #0
   c4810:	f47f acd0 	bne.w	c41b4 <_strtod_l+0x4a4>
   c4814:	a334      	add	r3, pc, #208	; (adr r3, c48e8 <_strtod_l+0xbd8>)
   c4816:	e9d3 2300 	ldrd	r2, r3, [r3]
   c481a:	4640      	mov	r0, r8
   c481c:	4649      	mov	r1, r9
   c481e:	f7ff f833 	bl	c3888 <__aeabi_dcmpgt>
   c4822:	2800      	cmp	r0, #0
   c4824:	f43f af7b 	beq.w	c471e <_strtod_l+0xa0e>
   c4828:	e4c4      	b.n	c41b4 <_strtod_l+0x4a4>
   c482a:	9b04      	ldr	r3, [sp, #16]
   c482c:	b333      	cbz	r3, c487c <_strtod_l+0xb6c>
   c482e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4830:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4834:	d822      	bhi.n	c487c <_strtod_l+0xb6c>
   c4836:	a32e      	add	r3, pc, #184	; (adr r3, c48f0 <_strtod_l+0xbe0>)
   c4838:	e9d3 2300 	ldrd	r2, r3, [r3]
   c483c:	4640      	mov	r0, r8
   c483e:	4649      	mov	r1, r9
   c4840:	f7ff f80e 	bl	c3860 <__aeabi_dcmple>
   c4844:	b1a0      	cbz	r0, c4870 <_strtod_l+0xb60>
   c4846:	4649      	mov	r1, r9
   c4848:	4640      	mov	r0, r8
   c484a:	f7ff f865 	bl	c3918 <__aeabi_d2uiz>
   c484e:	2801      	cmp	r0, #1
   c4850:	bf38      	it	cc
   c4852:	2001      	movcc	r0, #1
   c4854:	f7fe fd0e 	bl	c3274 <__aeabi_ui2d>
   c4858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c485a:	4680      	mov	r8, r0
   c485c:	4689      	mov	r9, r1
   c485e:	bb23      	cbnz	r3, c48aa <_strtod_l+0xb9a>
   c4860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4864:	9010      	str	r0, [sp, #64]	; 0x40
   c4866:	9311      	str	r3, [sp, #68]	; 0x44
   c4868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c486c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4870:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c4872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4874:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c4878:	1a9b      	subs	r3, r3, r2
   c487a:	9309      	str	r3, [sp, #36]	; 0x24
   c487c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4880:	eeb0 0a48 	vmov.f32	s0, s16
   c4884:	eef0 0a68 	vmov.f32	s1, s17
   c4888:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c488c:	f001 f838 	bl	c5900 <__ulp>
   c4890:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4894:	ec53 2b10 	vmov	r2, r3, d0
   c4898:	f7fe fd66 	bl	c3368 <__aeabi_dmul>
   c489c:	ec53 2b18 	vmov	r2, r3, d8
   c48a0:	f7fe fbac 	bl	c2ffc <__adddf3>
   c48a4:	4682      	mov	sl, r0
   c48a6:	468b      	mov	fp, r1
   c48a8:	e78d      	b.n	c47c6 <_strtod_l+0xab6>
   c48aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c48ae:	e7db      	b.n	c4868 <_strtod_l+0xb58>
   c48b0:	a311      	add	r3, pc, #68	; (adr r3, c48f8 <_strtod_l+0xbe8>)
   c48b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c48b6:	f7fe ffc9 	bl	c384c <__aeabi_dcmplt>
   c48ba:	e7b2      	b.n	c4822 <_strtod_l+0xb12>
   c48bc:	2300      	movs	r3, #0
   c48be:	930a      	str	r3, [sp, #40]	; 0x28
   c48c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c48c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c48c4:	6013      	str	r3, [r2, #0]
   c48c6:	f7ff ba6b 	b.w	c3da0 <_strtod_l+0x90>
   c48ca:	2a65      	cmp	r2, #101	; 0x65
   c48cc:	f43f ab5f 	beq.w	c3f8e <_strtod_l+0x27e>
   c48d0:	2a45      	cmp	r2, #69	; 0x45
   c48d2:	f43f ab5c 	beq.w	c3f8e <_strtod_l+0x27e>
   c48d6:	2301      	movs	r3, #1
   c48d8:	f7ff bb94 	b.w	c4004 <_strtod_l+0x2f4>
   c48dc:	f3af 8000 	nop.w
   c48e0:	94a03595 	.word	0x94a03595
   c48e4:	3fdfffff 	.word	0x3fdfffff
   c48e8:	35afe535 	.word	0x35afe535
   c48ec:	3fe00000 	.word	0x3fe00000
   c48f0:	ffc00000 	.word	0xffc00000
   c48f4:	41dfffff 	.word	0x41dfffff
   c48f8:	94a03595 	.word	0x94a03595
   c48fc:	3fcfffff 	.word	0x3fcfffff
   c4900:	3ff00000 	.word	0x3ff00000
   c4904:	7ff00000 	.word	0x7ff00000
   c4908:	7fe00000 	.word	0x7fe00000
   c490c:	7c9fffff 	.word	0x7c9fffff
   c4910:	3fe00000 	.word	0x3fe00000
   c4914:	bff00000 	.word	0xbff00000
   c4918:	7fefffff 	.word	0x7fefffff

000c491c <strtod>:
   c491c:	460a      	mov	r2, r1
   c491e:	4601      	mov	r1, r0
   c4920:	4802      	ldr	r0, [pc, #8]	; (c492c <strtod+0x10>)
   c4922:	4b03      	ldr	r3, [pc, #12]	; (c4930 <strtod+0x14>)
   c4924:	6800      	ldr	r0, [r0, #0]
   c4926:	f7ff b9f3 	b.w	c3d10 <_strtod_l>
   c492a:	bf00      	nop
   c492c:	2003dba0 	.word	0x2003dba0
   c4930:	2003dc0c 	.word	0x2003dc0c

000c4934 <_strtol_l.constprop.0>:
   c4934:	2b01      	cmp	r3, #1
   c4936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c493a:	d001      	beq.n	c4940 <_strtol_l.constprop.0+0xc>
   c493c:	2b24      	cmp	r3, #36	; 0x24
   c493e:	d906      	bls.n	c494e <_strtol_l.constprop.0+0x1a>
   c4940:	f7f8 ffd0 	bl	bd8e4 <__errno>
   c4944:	2316      	movs	r3, #22
   c4946:	6003      	str	r3, [r0, #0]
   c4948:	2000      	movs	r0, #0
   c494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c494e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c4a34 <_strtol_l.constprop.0+0x100>
   c4952:	460d      	mov	r5, r1
   c4954:	462e      	mov	r6, r5
   c4956:	f815 4b01 	ldrb.w	r4, [r5], #1
   c495a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c495e:	f017 0708 	ands.w	r7, r7, #8
   c4962:	d1f7      	bne.n	c4954 <_strtol_l.constprop.0+0x20>
   c4964:	2c2d      	cmp	r4, #45	; 0x2d
   c4966:	d132      	bne.n	c49ce <_strtol_l.constprop.0+0x9a>
   c4968:	782c      	ldrb	r4, [r5, #0]
   c496a:	2701      	movs	r7, #1
   c496c:	1cb5      	adds	r5, r6, #2
   c496e:	2b00      	cmp	r3, #0
   c4970:	d05b      	beq.n	c4a2a <_strtol_l.constprop.0+0xf6>
   c4972:	2b10      	cmp	r3, #16
   c4974:	d109      	bne.n	c498a <_strtol_l.constprop.0+0x56>
   c4976:	2c30      	cmp	r4, #48	; 0x30
   c4978:	d107      	bne.n	c498a <_strtol_l.constprop.0+0x56>
   c497a:	782c      	ldrb	r4, [r5, #0]
   c497c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c4980:	2c58      	cmp	r4, #88	; 0x58
   c4982:	d14d      	bne.n	c4a20 <_strtol_l.constprop.0+0xec>
   c4984:	786c      	ldrb	r4, [r5, #1]
   c4986:	2310      	movs	r3, #16
   c4988:	3502      	adds	r5, #2
   c498a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c498e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4992:	f04f 0c00 	mov.w	ip, #0
   c4996:	fbb8 f9f3 	udiv	r9, r8, r3
   c499a:	4666      	mov	r6, ip
   c499c:	fb03 8a19 	mls	sl, r3, r9, r8
   c49a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c49a4:	f1be 0f09 	cmp.w	lr, #9
   c49a8:	d816      	bhi.n	c49d8 <_strtol_l.constprop.0+0xa4>
   c49aa:	4674      	mov	r4, lr
   c49ac:	42a3      	cmp	r3, r4
   c49ae:	dd24      	ble.n	c49fa <_strtol_l.constprop.0+0xc6>
   c49b0:	f1bc 0f00 	cmp.w	ip, #0
   c49b4:	db1e      	blt.n	c49f4 <_strtol_l.constprop.0+0xc0>
   c49b6:	45b1      	cmp	r9, r6
   c49b8:	d31c      	bcc.n	c49f4 <_strtol_l.constprop.0+0xc0>
   c49ba:	d101      	bne.n	c49c0 <_strtol_l.constprop.0+0x8c>
   c49bc:	45a2      	cmp	sl, r4
   c49be:	db19      	blt.n	c49f4 <_strtol_l.constprop.0+0xc0>
   c49c0:	fb06 4603 	mla	r6, r6, r3, r4
   c49c4:	f04f 0c01 	mov.w	ip, #1
   c49c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   c49cc:	e7e8      	b.n	c49a0 <_strtol_l.constprop.0+0x6c>
   c49ce:	2c2b      	cmp	r4, #43	; 0x2b
   c49d0:	bf04      	itt	eq
   c49d2:	782c      	ldrbeq	r4, [r5, #0]
   c49d4:	1cb5      	addeq	r5, r6, #2
   c49d6:	e7ca      	b.n	c496e <_strtol_l.constprop.0+0x3a>
   c49d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c49dc:	f1be 0f19 	cmp.w	lr, #25
   c49e0:	d801      	bhi.n	c49e6 <_strtol_l.constprop.0+0xb2>
   c49e2:	3c37      	subs	r4, #55	; 0x37
   c49e4:	e7e2      	b.n	c49ac <_strtol_l.constprop.0+0x78>
   c49e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c49ea:	f1be 0f19 	cmp.w	lr, #25
   c49ee:	d804      	bhi.n	c49fa <_strtol_l.constprop.0+0xc6>
   c49f0:	3c57      	subs	r4, #87	; 0x57
   c49f2:	e7db      	b.n	c49ac <_strtol_l.constprop.0+0x78>
   c49f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c49f8:	e7e6      	b.n	c49c8 <_strtol_l.constprop.0+0x94>
   c49fa:	f1bc 0f00 	cmp.w	ip, #0
   c49fe:	da05      	bge.n	c4a0c <_strtol_l.constprop.0+0xd8>
   c4a00:	2322      	movs	r3, #34	; 0x22
   c4a02:	6003      	str	r3, [r0, #0]
   c4a04:	4646      	mov	r6, r8
   c4a06:	b942      	cbnz	r2, c4a1a <_strtol_l.constprop.0+0xe6>
   c4a08:	4630      	mov	r0, r6
   c4a0a:	e79e      	b.n	c494a <_strtol_l.constprop.0+0x16>
   c4a0c:	b107      	cbz	r7, c4a10 <_strtol_l.constprop.0+0xdc>
   c4a0e:	4276      	negs	r6, r6
   c4a10:	2a00      	cmp	r2, #0
   c4a12:	d0f9      	beq.n	c4a08 <_strtol_l.constprop.0+0xd4>
   c4a14:	f1bc 0f00 	cmp.w	ip, #0
   c4a18:	d000      	beq.n	c4a1c <_strtol_l.constprop.0+0xe8>
   c4a1a:	1e69      	subs	r1, r5, #1
   c4a1c:	6011      	str	r1, [r2, #0]
   c4a1e:	e7f3      	b.n	c4a08 <_strtol_l.constprop.0+0xd4>
   c4a20:	2430      	movs	r4, #48	; 0x30
   c4a22:	2b00      	cmp	r3, #0
   c4a24:	d1b1      	bne.n	c498a <_strtol_l.constprop.0+0x56>
   c4a26:	2308      	movs	r3, #8
   c4a28:	e7af      	b.n	c498a <_strtol_l.constprop.0+0x56>
   c4a2a:	2c30      	cmp	r4, #48	; 0x30
   c4a2c:	d0a5      	beq.n	c497a <_strtol_l.constprop.0+0x46>
   c4a2e:	230a      	movs	r3, #10
   c4a30:	e7ab      	b.n	c498a <_strtol_l.constprop.0+0x56>
   c4a32:	bf00      	nop
   c4a34:	000c7b29 	.word	0x000c7b29

000c4a38 <strtol>:
   c4a38:	4613      	mov	r3, r2
   c4a3a:	460a      	mov	r2, r1
   c4a3c:	4601      	mov	r1, r0
   c4a3e:	4802      	ldr	r0, [pc, #8]	; (c4a48 <strtol+0x10>)
   c4a40:	6800      	ldr	r0, [r0, #0]
   c4a42:	f7ff bf77 	b.w	c4934 <_strtol_l.constprop.0>
   c4a46:	bf00      	nop
   c4a48:	2003dba0 	.word	0x2003dba0

000c4a4c <__register_exitproc>:
   c4a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4a50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c4b0c <__register_exitproc+0xc0>
   c4a54:	4606      	mov	r6, r0
   c4a56:	f8d8 0000 	ldr.w	r0, [r8]
   c4a5a:	461f      	mov	r7, r3
   c4a5c:	460d      	mov	r5, r1
   c4a5e:	4691      	mov	r9, r2
   c4a60:	f000 fbc6 	bl	c51f0 <__retarget_lock_acquire_recursive>
   c4a64:	4b25      	ldr	r3, [pc, #148]	; (c4afc <__register_exitproc+0xb0>)
   c4a66:	681c      	ldr	r4, [r3, #0]
   c4a68:	b934      	cbnz	r4, c4a78 <__register_exitproc+0x2c>
   c4a6a:	4c25      	ldr	r4, [pc, #148]	; (c4b00 <__register_exitproc+0xb4>)
   c4a6c:	601c      	str	r4, [r3, #0]
   c4a6e:	4b25      	ldr	r3, [pc, #148]	; (c4b04 <__register_exitproc+0xb8>)
   c4a70:	b113      	cbz	r3, c4a78 <__register_exitproc+0x2c>
   c4a72:	681b      	ldr	r3, [r3, #0]
   c4a74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c4a78:	6863      	ldr	r3, [r4, #4]
   c4a7a:	2b1f      	cmp	r3, #31
   c4a7c:	dd07      	ble.n	c4a8e <__register_exitproc+0x42>
   c4a7e:	f8d8 0000 	ldr.w	r0, [r8]
   c4a82:	f000 fbb7 	bl	c51f4 <__retarget_lock_release_recursive>
   c4a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c4a8e:	b34e      	cbz	r6, c4ae4 <__register_exitproc+0x98>
   c4a90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c4a94:	b988      	cbnz	r0, c4aba <__register_exitproc+0x6e>
   c4a96:	4b1c      	ldr	r3, [pc, #112]	; (c4b08 <__register_exitproc+0xbc>)
   c4a98:	b923      	cbnz	r3, c4aa4 <__register_exitproc+0x58>
   c4a9a:	f8d8 0000 	ldr.w	r0, [r8]
   c4a9e:	f000 fba8 	bl	c51f2 <__retarget_lock_release>
   c4aa2:	e7f0      	b.n	c4a86 <__register_exitproc+0x3a>
   c4aa4:	f44f 7084 	mov.w	r0, #264	; 0x108
   c4aa8:	f7f8 fed4 	bl	bd854 <malloc>
   c4aac:	2800      	cmp	r0, #0
   c4aae:	d0f4      	beq.n	c4a9a <__register_exitproc+0x4e>
   c4ab0:	2300      	movs	r3, #0
   c4ab2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c4ab6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c4aba:	6863      	ldr	r3, [r4, #4]
   c4abc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c4ac0:	2201      	movs	r2, #1
   c4ac2:	409a      	lsls	r2, r3
   c4ac4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c4ac8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c4acc:	4313      	orrs	r3, r2
   c4ace:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c4ad2:	2e02      	cmp	r6, #2
   c4ad4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c4ad8:	bf02      	ittt	eq
   c4ada:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c4ade:	4313      	orreq	r3, r2
   c4ae0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c4ae4:	6863      	ldr	r3, [r4, #4]
   c4ae6:	f8d8 0000 	ldr.w	r0, [r8]
   c4aea:	1c5a      	adds	r2, r3, #1
   c4aec:	3302      	adds	r3, #2
   c4aee:	6062      	str	r2, [r4, #4]
   c4af0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c4af4:	f000 fb7e 	bl	c51f4 <__retarget_lock_release_recursive>
   c4af8:	2000      	movs	r0, #0
   c4afa:	e7c6      	b.n	c4a8a <__register_exitproc+0x3e>
   c4afc:	2003e7e8 	.word	0x2003e7e8
   c4b00:	2003e75c 	.word	0x2003e75c
   c4b04:	00000000 	.word	0x00000000
   c4b08:	000bd855 	.word	0x000bd855
   c4b0c:	2003dc04 	.word	0x2003dc04

000c4b10 <rshift>:
   c4b10:	6903      	ldr	r3, [r0, #16]
   c4b12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c4b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c4b1a:	ea4f 1261 	mov.w	r2, r1, asr #5
   c4b1e:	f100 0414 	add.w	r4, r0, #20
   c4b22:	dd45      	ble.n	c4bb0 <rshift+0xa0>
   c4b24:	f011 011f 	ands.w	r1, r1, #31
   c4b28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c4b2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c4b30:	d10c      	bne.n	c4b4c <rshift+0x3c>
   c4b32:	f100 0710 	add.w	r7, r0, #16
   c4b36:	4629      	mov	r1, r5
   c4b38:	42b1      	cmp	r1, r6
   c4b3a:	d334      	bcc.n	c4ba6 <rshift+0x96>
   c4b3c:	1a9b      	subs	r3, r3, r2
   c4b3e:	009b      	lsls	r3, r3, #2
   c4b40:	1eea      	subs	r2, r5, #3
   c4b42:	4296      	cmp	r6, r2
   c4b44:	bf38      	it	cc
   c4b46:	2300      	movcc	r3, #0
   c4b48:	4423      	add	r3, r4
   c4b4a:	e015      	b.n	c4b78 <rshift+0x68>
   c4b4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c4b50:	f1c1 0820 	rsb	r8, r1, #32
   c4b54:	40cf      	lsrs	r7, r1
   c4b56:	f105 0e04 	add.w	lr, r5, #4
   c4b5a:	46a1      	mov	r9, r4
   c4b5c:	4576      	cmp	r6, lr
   c4b5e:	46f4      	mov	ip, lr
   c4b60:	d815      	bhi.n	c4b8e <rshift+0x7e>
   c4b62:	1a9a      	subs	r2, r3, r2
   c4b64:	0092      	lsls	r2, r2, #2
   c4b66:	3a04      	subs	r2, #4
   c4b68:	3501      	adds	r5, #1
   c4b6a:	42ae      	cmp	r6, r5
   c4b6c:	bf38      	it	cc
   c4b6e:	2200      	movcc	r2, #0
   c4b70:	18a3      	adds	r3, r4, r2
   c4b72:	50a7      	str	r7, [r4, r2]
   c4b74:	b107      	cbz	r7, c4b78 <rshift+0x68>
   c4b76:	3304      	adds	r3, #4
   c4b78:	1b1a      	subs	r2, r3, r4
   c4b7a:	42a3      	cmp	r3, r4
   c4b7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c4b80:	bf08      	it	eq
   c4b82:	2300      	moveq	r3, #0
   c4b84:	6102      	str	r2, [r0, #16]
   c4b86:	bf08      	it	eq
   c4b88:	6143      	streq	r3, [r0, #20]
   c4b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4b8e:	f8dc c000 	ldr.w	ip, [ip]
   c4b92:	fa0c fc08 	lsl.w	ip, ip, r8
   c4b96:	ea4c 0707 	orr.w	r7, ip, r7
   c4b9a:	f849 7b04 	str.w	r7, [r9], #4
   c4b9e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c4ba2:	40cf      	lsrs	r7, r1
   c4ba4:	e7da      	b.n	c4b5c <rshift+0x4c>
   c4ba6:	f851 cb04 	ldr.w	ip, [r1], #4
   c4baa:	f847 cf04 	str.w	ip, [r7, #4]!
   c4bae:	e7c3      	b.n	c4b38 <rshift+0x28>
   c4bb0:	4623      	mov	r3, r4
   c4bb2:	e7e1      	b.n	c4b78 <rshift+0x68>

000c4bb4 <__hexdig_fun>:
   c4bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c4bb8:	2b09      	cmp	r3, #9
   c4bba:	d802      	bhi.n	c4bc2 <__hexdig_fun+0xe>
   c4bbc:	3820      	subs	r0, #32
   c4bbe:	b2c0      	uxtb	r0, r0
   c4bc0:	4770      	bx	lr
   c4bc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c4bc6:	2b05      	cmp	r3, #5
   c4bc8:	d801      	bhi.n	c4bce <__hexdig_fun+0x1a>
   c4bca:	3847      	subs	r0, #71	; 0x47
   c4bcc:	e7f7      	b.n	c4bbe <__hexdig_fun+0xa>
   c4bce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c4bd2:	2b05      	cmp	r3, #5
   c4bd4:	d801      	bhi.n	c4bda <__hexdig_fun+0x26>
   c4bd6:	3827      	subs	r0, #39	; 0x27
   c4bd8:	e7f1      	b.n	c4bbe <__hexdig_fun+0xa>
   c4bda:	2000      	movs	r0, #0
   c4bdc:	4770      	bx	lr
	...

000c4be0 <__gethex>:
   c4be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4be4:	ed2d 8b02 	vpush	{d8}
   c4be8:	b089      	sub	sp, #36	; 0x24
   c4bea:	ee08 0a10 	vmov	s16, r0
   c4bee:	9304      	str	r3, [sp, #16]
   c4bf0:	4bb4      	ldr	r3, [pc, #720]	; (c4ec4 <__gethex+0x2e4>)
   c4bf2:	681b      	ldr	r3, [r3, #0]
   c4bf4:	9301      	str	r3, [sp, #4]
   c4bf6:	4618      	mov	r0, r3
   c4bf8:	468b      	mov	fp, r1
   c4bfa:	4690      	mov	r8, r2
   c4bfc:	f7fe fff3 	bl	c3be6 <strlen>
   c4c00:	9b01      	ldr	r3, [sp, #4]
   c4c02:	f8db 2000 	ldr.w	r2, [fp]
   c4c06:	4403      	add	r3, r0
   c4c08:	4682      	mov	sl, r0
   c4c0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c4c0e:	9305      	str	r3, [sp, #20]
   c4c10:	1c93      	adds	r3, r2, #2
   c4c12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c4c16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c4c1a:	32fe      	adds	r2, #254	; 0xfe
   c4c1c:	18d1      	adds	r1, r2, r3
   c4c1e:	461f      	mov	r7, r3
   c4c20:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4c24:	9100      	str	r1, [sp, #0]
   c4c26:	2830      	cmp	r0, #48	; 0x30
   c4c28:	d0f8      	beq.n	c4c1c <__gethex+0x3c>
   c4c2a:	f7ff ffc3 	bl	c4bb4 <__hexdig_fun>
   c4c2e:	4604      	mov	r4, r0
   c4c30:	2800      	cmp	r0, #0
   c4c32:	d13a      	bne.n	c4caa <__gethex+0xca>
   c4c34:	9901      	ldr	r1, [sp, #4]
   c4c36:	4652      	mov	r2, sl
   c4c38:	4638      	mov	r0, r7
   c4c3a:	f7fe ffef 	bl	c3c1c <strncmp>
   c4c3e:	4605      	mov	r5, r0
   c4c40:	2800      	cmp	r0, #0
   c4c42:	d168      	bne.n	c4d16 <__gethex+0x136>
   c4c44:	f817 000a 	ldrb.w	r0, [r7, sl]
   c4c48:	eb07 060a 	add.w	r6, r7, sl
   c4c4c:	f7ff ffb2 	bl	c4bb4 <__hexdig_fun>
   c4c50:	2800      	cmp	r0, #0
   c4c52:	d062      	beq.n	c4d1a <__gethex+0x13a>
   c4c54:	4633      	mov	r3, r6
   c4c56:	7818      	ldrb	r0, [r3, #0]
   c4c58:	2830      	cmp	r0, #48	; 0x30
   c4c5a:	461f      	mov	r7, r3
   c4c5c:	f103 0301 	add.w	r3, r3, #1
   c4c60:	d0f9      	beq.n	c4c56 <__gethex+0x76>
   c4c62:	f7ff ffa7 	bl	c4bb4 <__hexdig_fun>
   c4c66:	2301      	movs	r3, #1
   c4c68:	fab0 f480 	clz	r4, r0
   c4c6c:	0964      	lsrs	r4, r4, #5
   c4c6e:	4635      	mov	r5, r6
   c4c70:	9300      	str	r3, [sp, #0]
   c4c72:	463a      	mov	r2, r7
   c4c74:	4616      	mov	r6, r2
   c4c76:	3201      	adds	r2, #1
   c4c78:	7830      	ldrb	r0, [r6, #0]
   c4c7a:	f7ff ff9b 	bl	c4bb4 <__hexdig_fun>
   c4c7e:	2800      	cmp	r0, #0
   c4c80:	d1f8      	bne.n	c4c74 <__gethex+0x94>
   c4c82:	9901      	ldr	r1, [sp, #4]
   c4c84:	4652      	mov	r2, sl
   c4c86:	4630      	mov	r0, r6
   c4c88:	f7fe ffc8 	bl	c3c1c <strncmp>
   c4c8c:	b980      	cbnz	r0, c4cb0 <__gethex+0xd0>
   c4c8e:	b94d      	cbnz	r5, c4ca4 <__gethex+0xc4>
   c4c90:	eb06 050a 	add.w	r5, r6, sl
   c4c94:	462a      	mov	r2, r5
   c4c96:	4616      	mov	r6, r2
   c4c98:	3201      	adds	r2, #1
   c4c9a:	7830      	ldrb	r0, [r6, #0]
   c4c9c:	f7ff ff8a 	bl	c4bb4 <__hexdig_fun>
   c4ca0:	2800      	cmp	r0, #0
   c4ca2:	d1f8      	bne.n	c4c96 <__gethex+0xb6>
   c4ca4:	1bad      	subs	r5, r5, r6
   c4ca6:	00ad      	lsls	r5, r5, #2
   c4ca8:	e004      	b.n	c4cb4 <__gethex+0xd4>
   c4caa:	2400      	movs	r4, #0
   c4cac:	4625      	mov	r5, r4
   c4cae:	e7e0      	b.n	c4c72 <__gethex+0x92>
   c4cb0:	2d00      	cmp	r5, #0
   c4cb2:	d1f7      	bne.n	c4ca4 <__gethex+0xc4>
   c4cb4:	7833      	ldrb	r3, [r6, #0]
   c4cb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4cba:	2b50      	cmp	r3, #80	; 0x50
   c4cbc:	d13b      	bne.n	c4d36 <__gethex+0x156>
   c4cbe:	7873      	ldrb	r3, [r6, #1]
   c4cc0:	2b2b      	cmp	r3, #43	; 0x2b
   c4cc2:	d02c      	beq.n	c4d1e <__gethex+0x13e>
   c4cc4:	2b2d      	cmp	r3, #45	; 0x2d
   c4cc6:	d02e      	beq.n	c4d26 <__gethex+0x146>
   c4cc8:	1c71      	adds	r1, r6, #1
   c4cca:	f04f 0900 	mov.w	r9, #0
   c4cce:	7808      	ldrb	r0, [r1, #0]
   c4cd0:	f7ff ff70 	bl	c4bb4 <__hexdig_fun>
   c4cd4:	1e43      	subs	r3, r0, #1
   c4cd6:	b2db      	uxtb	r3, r3
   c4cd8:	2b18      	cmp	r3, #24
   c4cda:	d82c      	bhi.n	c4d36 <__gethex+0x156>
   c4cdc:	f1a0 0210 	sub.w	r2, r0, #16
   c4ce0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c4ce4:	f7ff ff66 	bl	c4bb4 <__hexdig_fun>
   c4ce8:	1e43      	subs	r3, r0, #1
   c4cea:	b2db      	uxtb	r3, r3
   c4cec:	2b18      	cmp	r3, #24
   c4cee:	d91d      	bls.n	c4d2c <__gethex+0x14c>
   c4cf0:	f1b9 0f00 	cmp.w	r9, #0
   c4cf4:	d000      	beq.n	c4cf8 <__gethex+0x118>
   c4cf6:	4252      	negs	r2, r2
   c4cf8:	4415      	add	r5, r2
   c4cfa:	f8cb 1000 	str.w	r1, [fp]
   c4cfe:	b1e4      	cbz	r4, c4d3a <__gethex+0x15a>
   c4d00:	9b00      	ldr	r3, [sp, #0]
   c4d02:	2b00      	cmp	r3, #0
   c4d04:	bf14      	ite	ne
   c4d06:	2700      	movne	r7, #0
   c4d08:	2706      	moveq	r7, #6
   c4d0a:	4638      	mov	r0, r7
   c4d0c:	b009      	add	sp, #36	; 0x24
   c4d0e:	ecbd 8b02 	vpop	{d8}
   c4d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4d16:	463e      	mov	r6, r7
   c4d18:	4625      	mov	r5, r4
   c4d1a:	2401      	movs	r4, #1
   c4d1c:	e7ca      	b.n	c4cb4 <__gethex+0xd4>
   c4d1e:	f04f 0900 	mov.w	r9, #0
   c4d22:	1cb1      	adds	r1, r6, #2
   c4d24:	e7d3      	b.n	c4cce <__gethex+0xee>
   c4d26:	f04f 0901 	mov.w	r9, #1
   c4d2a:	e7fa      	b.n	c4d22 <__gethex+0x142>
   c4d2c:	230a      	movs	r3, #10
   c4d2e:	fb03 0202 	mla	r2, r3, r2, r0
   c4d32:	3a10      	subs	r2, #16
   c4d34:	e7d4      	b.n	c4ce0 <__gethex+0x100>
   c4d36:	4631      	mov	r1, r6
   c4d38:	e7df      	b.n	c4cfa <__gethex+0x11a>
   c4d3a:	1bf3      	subs	r3, r6, r7
   c4d3c:	3b01      	subs	r3, #1
   c4d3e:	4621      	mov	r1, r4
   c4d40:	2b07      	cmp	r3, #7
   c4d42:	dc0b      	bgt.n	c4d5c <__gethex+0x17c>
   c4d44:	ee18 0a10 	vmov	r0, s16
   c4d48:	f000 fa68 	bl	c521c <_Balloc>
   c4d4c:	4604      	mov	r4, r0
   c4d4e:	b940      	cbnz	r0, c4d62 <__gethex+0x182>
   c4d50:	4b5d      	ldr	r3, [pc, #372]	; (c4ec8 <__gethex+0x2e8>)
   c4d52:	4602      	mov	r2, r0
   c4d54:	21de      	movs	r1, #222	; 0xde
   c4d56:	485d      	ldr	r0, [pc, #372]	; (c4ecc <__gethex+0x2ec>)
   c4d58:	f7f8 fdcc 	bl	bd8f4 <__assert_func>
   c4d5c:	3101      	adds	r1, #1
   c4d5e:	105b      	asrs	r3, r3, #1
   c4d60:	e7ee      	b.n	c4d40 <__gethex+0x160>
   c4d62:	f100 0914 	add.w	r9, r0, #20
   c4d66:	f04f 0b00 	mov.w	fp, #0
   c4d6a:	f1ca 0301 	rsb	r3, sl, #1
   c4d6e:	f8cd 9008 	str.w	r9, [sp, #8]
   c4d72:	f8cd b000 	str.w	fp, [sp]
   c4d76:	9306      	str	r3, [sp, #24]
   c4d78:	42b7      	cmp	r7, r6
   c4d7a:	d340      	bcc.n	c4dfe <__gethex+0x21e>
   c4d7c:	9802      	ldr	r0, [sp, #8]
   c4d7e:	9b00      	ldr	r3, [sp, #0]
   c4d80:	f840 3b04 	str.w	r3, [r0], #4
   c4d84:	eba0 0009 	sub.w	r0, r0, r9
   c4d88:	1080      	asrs	r0, r0, #2
   c4d8a:	0146      	lsls	r6, r0, #5
   c4d8c:	6120      	str	r0, [r4, #16]
   c4d8e:	4618      	mov	r0, r3
   c4d90:	f000 fb36 	bl	c5400 <__hi0bits>
   c4d94:	1a30      	subs	r0, r6, r0
   c4d96:	f8d8 6000 	ldr.w	r6, [r8]
   c4d9a:	42b0      	cmp	r0, r6
   c4d9c:	dd63      	ble.n	c4e66 <__gethex+0x286>
   c4d9e:	1b87      	subs	r7, r0, r6
   c4da0:	4639      	mov	r1, r7
   c4da2:	4620      	mov	r0, r4
   c4da4:	f000 feda 	bl	c5b5c <__any_on>
   c4da8:	4682      	mov	sl, r0
   c4daa:	b1a8      	cbz	r0, c4dd8 <__gethex+0x1f8>
   c4dac:	1e7b      	subs	r3, r7, #1
   c4dae:	1159      	asrs	r1, r3, #5
   c4db0:	f003 021f 	and.w	r2, r3, #31
   c4db4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c4db8:	f04f 0a01 	mov.w	sl, #1
   c4dbc:	fa0a f202 	lsl.w	r2, sl, r2
   c4dc0:	420a      	tst	r2, r1
   c4dc2:	d009      	beq.n	c4dd8 <__gethex+0x1f8>
   c4dc4:	4553      	cmp	r3, sl
   c4dc6:	dd05      	ble.n	c4dd4 <__gethex+0x1f4>
   c4dc8:	1eb9      	subs	r1, r7, #2
   c4dca:	4620      	mov	r0, r4
   c4dcc:	f000 fec6 	bl	c5b5c <__any_on>
   c4dd0:	2800      	cmp	r0, #0
   c4dd2:	d145      	bne.n	c4e60 <__gethex+0x280>
   c4dd4:	f04f 0a02 	mov.w	sl, #2
   c4dd8:	4639      	mov	r1, r7
   c4dda:	4620      	mov	r0, r4
   c4ddc:	f7ff fe98 	bl	c4b10 <rshift>
   c4de0:	443d      	add	r5, r7
   c4de2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c4de6:	42ab      	cmp	r3, r5
   c4de8:	da4c      	bge.n	c4e84 <__gethex+0x2a4>
   c4dea:	ee18 0a10 	vmov	r0, s16
   c4dee:	4621      	mov	r1, r4
   c4df0:	f000 fa54 	bl	c529c <_Bfree>
   c4df4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4df6:	2300      	movs	r3, #0
   c4df8:	6013      	str	r3, [r2, #0]
   c4dfa:	27a3      	movs	r7, #163	; 0xa3
   c4dfc:	e785      	b.n	c4d0a <__gethex+0x12a>
   c4dfe:	1e73      	subs	r3, r6, #1
   c4e00:	9a05      	ldr	r2, [sp, #20]
   c4e02:	9303      	str	r3, [sp, #12]
   c4e04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c4e08:	4293      	cmp	r3, r2
   c4e0a:	d019      	beq.n	c4e40 <__gethex+0x260>
   c4e0c:	f1bb 0f20 	cmp.w	fp, #32
   c4e10:	d107      	bne.n	c4e22 <__gethex+0x242>
   c4e12:	9b02      	ldr	r3, [sp, #8]
   c4e14:	9a00      	ldr	r2, [sp, #0]
   c4e16:	f843 2b04 	str.w	r2, [r3], #4
   c4e1a:	9302      	str	r3, [sp, #8]
   c4e1c:	2300      	movs	r3, #0
   c4e1e:	9300      	str	r3, [sp, #0]
   c4e20:	469b      	mov	fp, r3
   c4e22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c4e26:	f7ff fec5 	bl	c4bb4 <__hexdig_fun>
   c4e2a:	9b00      	ldr	r3, [sp, #0]
   c4e2c:	f000 000f 	and.w	r0, r0, #15
   c4e30:	fa00 f00b 	lsl.w	r0, r0, fp
   c4e34:	4303      	orrs	r3, r0
   c4e36:	9300      	str	r3, [sp, #0]
   c4e38:	f10b 0b04 	add.w	fp, fp, #4
   c4e3c:	9b03      	ldr	r3, [sp, #12]
   c4e3e:	e00d      	b.n	c4e5c <__gethex+0x27c>
   c4e40:	9b03      	ldr	r3, [sp, #12]
   c4e42:	9a06      	ldr	r2, [sp, #24]
   c4e44:	4413      	add	r3, r2
   c4e46:	42bb      	cmp	r3, r7
   c4e48:	d3e0      	bcc.n	c4e0c <__gethex+0x22c>
   c4e4a:	4618      	mov	r0, r3
   c4e4c:	9901      	ldr	r1, [sp, #4]
   c4e4e:	9307      	str	r3, [sp, #28]
   c4e50:	4652      	mov	r2, sl
   c4e52:	f7fe fee3 	bl	c3c1c <strncmp>
   c4e56:	9b07      	ldr	r3, [sp, #28]
   c4e58:	2800      	cmp	r0, #0
   c4e5a:	d1d7      	bne.n	c4e0c <__gethex+0x22c>
   c4e5c:	461e      	mov	r6, r3
   c4e5e:	e78b      	b.n	c4d78 <__gethex+0x198>
   c4e60:	f04f 0a03 	mov.w	sl, #3
   c4e64:	e7b8      	b.n	c4dd8 <__gethex+0x1f8>
   c4e66:	da0a      	bge.n	c4e7e <__gethex+0x29e>
   c4e68:	1a37      	subs	r7, r6, r0
   c4e6a:	4621      	mov	r1, r4
   c4e6c:	ee18 0a10 	vmov	r0, s16
   c4e70:	463a      	mov	r2, r7
   c4e72:	f000 fc2f 	bl	c56d4 <__lshift>
   c4e76:	1bed      	subs	r5, r5, r7
   c4e78:	4604      	mov	r4, r0
   c4e7a:	f100 0914 	add.w	r9, r0, #20
   c4e7e:	f04f 0a00 	mov.w	sl, #0
   c4e82:	e7ae      	b.n	c4de2 <__gethex+0x202>
   c4e84:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c4e88:	42a8      	cmp	r0, r5
   c4e8a:	dd72      	ble.n	c4f72 <__gethex+0x392>
   c4e8c:	1b45      	subs	r5, r0, r5
   c4e8e:	42ae      	cmp	r6, r5
   c4e90:	dc36      	bgt.n	c4f00 <__gethex+0x320>
   c4e92:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4e96:	2b02      	cmp	r3, #2
   c4e98:	d02a      	beq.n	c4ef0 <__gethex+0x310>
   c4e9a:	2b03      	cmp	r3, #3
   c4e9c:	d02c      	beq.n	c4ef8 <__gethex+0x318>
   c4e9e:	2b01      	cmp	r3, #1
   c4ea0:	d11c      	bne.n	c4edc <__gethex+0x2fc>
   c4ea2:	42ae      	cmp	r6, r5
   c4ea4:	d11a      	bne.n	c4edc <__gethex+0x2fc>
   c4ea6:	2e01      	cmp	r6, #1
   c4ea8:	d112      	bne.n	c4ed0 <__gethex+0x2f0>
   c4eaa:	9a04      	ldr	r2, [sp, #16]
   c4eac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c4eb0:	6013      	str	r3, [r2, #0]
   c4eb2:	2301      	movs	r3, #1
   c4eb4:	6123      	str	r3, [r4, #16]
   c4eb6:	f8c9 3000 	str.w	r3, [r9]
   c4eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4ebc:	2762      	movs	r7, #98	; 0x62
   c4ebe:	601c      	str	r4, [r3, #0]
   c4ec0:	e723      	b.n	c4d0a <__gethex+0x12a>
   c4ec2:	bf00      	nop
   c4ec4:	000c7c9c 	.word	0x000c7c9c
   c4ec8:	000c7c29 	.word	0x000c7c29
   c4ecc:	000c7c3a 	.word	0x000c7c3a
   c4ed0:	1e71      	subs	r1, r6, #1
   c4ed2:	4620      	mov	r0, r4
   c4ed4:	f000 fe42 	bl	c5b5c <__any_on>
   c4ed8:	2800      	cmp	r0, #0
   c4eda:	d1e6      	bne.n	c4eaa <__gethex+0x2ca>
   c4edc:	ee18 0a10 	vmov	r0, s16
   c4ee0:	4621      	mov	r1, r4
   c4ee2:	f000 f9db 	bl	c529c <_Bfree>
   c4ee6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4ee8:	2300      	movs	r3, #0
   c4eea:	6013      	str	r3, [r2, #0]
   c4eec:	2750      	movs	r7, #80	; 0x50
   c4eee:	e70c      	b.n	c4d0a <__gethex+0x12a>
   c4ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4ef2:	2b00      	cmp	r3, #0
   c4ef4:	d1f2      	bne.n	c4edc <__gethex+0x2fc>
   c4ef6:	e7d8      	b.n	c4eaa <__gethex+0x2ca>
   c4ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4efa:	2b00      	cmp	r3, #0
   c4efc:	d1d5      	bne.n	c4eaa <__gethex+0x2ca>
   c4efe:	e7ed      	b.n	c4edc <__gethex+0x2fc>
   c4f00:	1e6f      	subs	r7, r5, #1
   c4f02:	f1ba 0f00 	cmp.w	sl, #0
   c4f06:	d131      	bne.n	c4f6c <__gethex+0x38c>
   c4f08:	b127      	cbz	r7, c4f14 <__gethex+0x334>
   c4f0a:	4639      	mov	r1, r7
   c4f0c:	4620      	mov	r0, r4
   c4f0e:	f000 fe25 	bl	c5b5c <__any_on>
   c4f12:	4682      	mov	sl, r0
   c4f14:	117b      	asrs	r3, r7, #5
   c4f16:	2101      	movs	r1, #1
   c4f18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c4f1c:	f007 071f 	and.w	r7, r7, #31
   c4f20:	fa01 f707 	lsl.w	r7, r1, r7
   c4f24:	421f      	tst	r7, r3
   c4f26:	4629      	mov	r1, r5
   c4f28:	4620      	mov	r0, r4
   c4f2a:	bf18      	it	ne
   c4f2c:	f04a 0a02 	orrne.w	sl, sl, #2
   c4f30:	1b76      	subs	r6, r6, r5
   c4f32:	f7ff fded 	bl	c4b10 <rshift>
   c4f36:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c4f3a:	2702      	movs	r7, #2
   c4f3c:	f1ba 0f00 	cmp.w	sl, #0
   c4f40:	d048      	beq.n	c4fd4 <__gethex+0x3f4>
   c4f42:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4f46:	2b02      	cmp	r3, #2
   c4f48:	d015      	beq.n	c4f76 <__gethex+0x396>
   c4f4a:	2b03      	cmp	r3, #3
   c4f4c:	d017      	beq.n	c4f7e <__gethex+0x39e>
   c4f4e:	2b01      	cmp	r3, #1
   c4f50:	d109      	bne.n	c4f66 <__gethex+0x386>
   c4f52:	f01a 0f02 	tst.w	sl, #2
   c4f56:	d006      	beq.n	c4f66 <__gethex+0x386>
   c4f58:	f8d9 0000 	ldr.w	r0, [r9]
   c4f5c:	ea4a 0a00 	orr.w	sl, sl, r0
   c4f60:	f01a 0f01 	tst.w	sl, #1
   c4f64:	d10e      	bne.n	c4f84 <__gethex+0x3a4>
   c4f66:	f047 0710 	orr.w	r7, r7, #16
   c4f6a:	e033      	b.n	c4fd4 <__gethex+0x3f4>
   c4f6c:	f04f 0a01 	mov.w	sl, #1
   c4f70:	e7d0      	b.n	c4f14 <__gethex+0x334>
   c4f72:	2701      	movs	r7, #1
   c4f74:	e7e2      	b.n	c4f3c <__gethex+0x35c>
   c4f76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4f78:	f1c3 0301 	rsb	r3, r3, #1
   c4f7c:	9315      	str	r3, [sp, #84]	; 0x54
   c4f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4f80:	2b00      	cmp	r3, #0
   c4f82:	d0f0      	beq.n	c4f66 <__gethex+0x386>
   c4f84:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c4f88:	f104 0314 	add.w	r3, r4, #20
   c4f8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c4f90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c4f94:	f04f 0c00 	mov.w	ip, #0
   c4f98:	4618      	mov	r0, r3
   c4f9a:	f853 2b04 	ldr.w	r2, [r3], #4
   c4f9e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c4fa2:	d01c      	beq.n	c4fde <__gethex+0x3fe>
   c4fa4:	3201      	adds	r2, #1
   c4fa6:	6002      	str	r2, [r0, #0]
   c4fa8:	2f02      	cmp	r7, #2
   c4faa:	f104 0314 	add.w	r3, r4, #20
   c4fae:	d13f      	bne.n	c5030 <__gethex+0x450>
   c4fb0:	f8d8 2000 	ldr.w	r2, [r8]
   c4fb4:	3a01      	subs	r2, #1
   c4fb6:	42b2      	cmp	r2, r6
   c4fb8:	d10a      	bne.n	c4fd0 <__gethex+0x3f0>
   c4fba:	1171      	asrs	r1, r6, #5
   c4fbc:	2201      	movs	r2, #1
   c4fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c4fc2:	f006 061f 	and.w	r6, r6, #31
   c4fc6:	fa02 f606 	lsl.w	r6, r2, r6
   c4fca:	421e      	tst	r6, r3
   c4fcc:	bf18      	it	ne
   c4fce:	4617      	movne	r7, r2
   c4fd0:	f047 0720 	orr.w	r7, r7, #32
   c4fd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4fd6:	601c      	str	r4, [r3, #0]
   c4fd8:	9b04      	ldr	r3, [sp, #16]
   c4fda:	601d      	str	r5, [r3, #0]
   c4fdc:	e695      	b.n	c4d0a <__gethex+0x12a>
   c4fde:	4299      	cmp	r1, r3
   c4fe0:	f843 cc04 	str.w	ip, [r3, #-4]
   c4fe4:	d8d8      	bhi.n	c4f98 <__gethex+0x3b8>
   c4fe6:	68a3      	ldr	r3, [r4, #8]
   c4fe8:	459b      	cmp	fp, r3
   c4fea:	db19      	blt.n	c5020 <__gethex+0x440>
   c4fec:	6861      	ldr	r1, [r4, #4]
   c4fee:	ee18 0a10 	vmov	r0, s16
   c4ff2:	3101      	adds	r1, #1
   c4ff4:	f000 f912 	bl	c521c <_Balloc>
   c4ff8:	4681      	mov	r9, r0
   c4ffa:	b918      	cbnz	r0, c5004 <__gethex+0x424>
   c4ffc:	4b1a      	ldr	r3, [pc, #104]	; (c5068 <__gethex+0x488>)
   c4ffe:	4602      	mov	r2, r0
   c5000:	2184      	movs	r1, #132	; 0x84
   c5002:	e6a8      	b.n	c4d56 <__gethex+0x176>
   c5004:	6922      	ldr	r2, [r4, #16]
   c5006:	3202      	adds	r2, #2
   c5008:	f104 010c 	add.w	r1, r4, #12
   c500c:	0092      	lsls	r2, r2, #2
   c500e:	300c      	adds	r0, #12
   c5010:	f7fe fd36 	bl	c3a80 <memcpy>
   c5014:	4621      	mov	r1, r4
   c5016:	ee18 0a10 	vmov	r0, s16
   c501a:	f000 f93f 	bl	c529c <_Bfree>
   c501e:	464c      	mov	r4, r9
   c5020:	6923      	ldr	r3, [r4, #16]
   c5022:	1c5a      	adds	r2, r3, #1
   c5024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5028:	6122      	str	r2, [r4, #16]
   c502a:	2201      	movs	r2, #1
   c502c:	615a      	str	r2, [r3, #20]
   c502e:	e7bb      	b.n	c4fa8 <__gethex+0x3c8>
   c5030:	6922      	ldr	r2, [r4, #16]
   c5032:	455a      	cmp	r2, fp
   c5034:	dd0b      	ble.n	c504e <__gethex+0x46e>
   c5036:	2101      	movs	r1, #1
   c5038:	4620      	mov	r0, r4
   c503a:	f7ff fd69 	bl	c4b10 <rshift>
   c503e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5042:	3501      	adds	r5, #1
   c5044:	42ab      	cmp	r3, r5
   c5046:	f6ff aed0 	blt.w	c4dea <__gethex+0x20a>
   c504a:	2701      	movs	r7, #1
   c504c:	e7c0      	b.n	c4fd0 <__gethex+0x3f0>
   c504e:	f016 061f 	ands.w	r6, r6, #31
   c5052:	d0fa      	beq.n	c504a <__gethex+0x46a>
   c5054:	4453      	add	r3, sl
   c5056:	f1c6 0620 	rsb	r6, r6, #32
   c505a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c505e:	f000 f9cf 	bl	c5400 <__hi0bits>
   c5062:	42b0      	cmp	r0, r6
   c5064:	dbe7      	blt.n	c5036 <__gethex+0x456>
   c5066:	e7f0      	b.n	c504a <__gethex+0x46a>
   c5068:	000c7c29 	.word	0x000c7c29

000c506c <L_shift>:
   c506c:	f1c2 0208 	rsb	r2, r2, #8
   c5070:	0092      	lsls	r2, r2, #2
   c5072:	b570      	push	{r4, r5, r6, lr}
   c5074:	f1c2 0620 	rsb	r6, r2, #32
   c5078:	6843      	ldr	r3, [r0, #4]
   c507a:	6804      	ldr	r4, [r0, #0]
   c507c:	fa03 f506 	lsl.w	r5, r3, r6
   c5080:	432c      	orrs	r4, r5
   c5082:	40d3      	lsrs	r3, r2
   c5084:	6004      	str	r4, [r0, #0]
   c5086:	f840 3f04 	str.w	r3, [r0, #4]!
   c508a:	4288      	cmp	r0, r1
   c508c:	d3f4      	bcc.n	c5078 <L_shift+0xc>
   c508e:	bd70      	pop	{r4, r5, r6, pc}

000c5090 <__match>:
   c5090:	b530      	push	{r4, r5, lr}
   c5092:	6803      	ldr	r3, [r0, #0]
   c5094:	3301      	adds	r3, #1
   c5096:	f811 4b01 	ldrb.w	r4, [r1], #1
   c509a:	b914      	cbnz	r4, c50a2 <__match+0x12>
   c509c:	6003      	str	r3, [r0, #0]
   c509e:	2001      	movs	r0, #1
   c50a0:	bd30      	pop	{r4, r5, pc}
   c50a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c50a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c50aa:	2d19      	cmp	r5, #25
   c50ac:	bf98      	it	ls
   c50ae:	3220      	addls	r2, #32
   c50b0:	42a2      	cmp	r2, r4
   c50b2:	d0f0      	beq.n	c5096 <__match+0x6>
   c50b4:	2000      	movs	r0, #0
   c50b6:	e7f3      	b.n	c50a0 <__match+0x10>

000c50b8 <__hexnan>:
   c50b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c50bc:	680b      	ldr	r3, [r1, #0]
   c50be:	115e      	asrs	r6, r3, #5
   c50c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c50c4:	f013 031f 	ands.w	r3, r3, #31
   c50c8:	b087      	sub	sp, #28
   c50ca:	bf18      	it	ne
   c50cc:	3604      	addne	r6, #4
   c50ce:	2500      	movs	r5, #0
   c50d0:	1f37      	subs	r7, r6, #4
   c50d2:	4690      	mov	r8, r2
   c50d4:	6802      	ldr	r2, [r0, #0]
   c50d6:	9301      	str	r3, [sp, #4]
   c50d8:	4682      	mov	sl, r0
   c50da:	f846 5c04 	str.w	r5, [r6, #-4]
   c50de:	46b9      	mov	r9, r7
   c50e0:	463c      	mov	r4, r7
   c50e2:	9502      	str	r5, [sp, #8]
   c50e4:	46ab      	mov	fp, r5
   c50e6:	7851      	ldrb	r1, [r2, #1]
   c50e8:	1c53      	adds	r3, r2, #1
   c50ea:	9303      	str	r3, [sp, #12]
   c50ec:	b341      	cbz	r1, c5140 <__hexnan+0x88>
   c50ee:	4608      	mov	r0, r1
   c50f0:	9205      	str	r2, [sp, #20]
   c50f2:	9104      	str	r1, [sp, #16]
   c50f4:	f7ff fd5e 	bl	c4bb4 <__hexdig_fun>
   c50f8:	2800      	cmp	r0, #0
   c50fa:	d14f      	bne.n	c519c <__hexnan+0xe4>
   c50fc:	9904      	ldr	r1, [sp, #16]
   c50fe:	9a05      	ldr	r2, [sp, #20]
   c5100:	2920      	cmp	r1, #32
   c5102:	d818      	bhi.n	c5136 <__hexnan+0x7e>
   c5104:	9b02      	ldr	r3, [sp, #8]
   c5106:	459b      	cmp	fp, r3
   c5108:	dd13      	ble.n	c5132 <__hexnan+0x7a>
   c510a:	454c      	cmp	r4, r9
   c510c:	d206      	bcs.n	c511c <__hexnan+0x64>
   c510e:	2d07      	cmp	r5, #7
   c5110:	dc04      	bgt.n	c511c <__hexnan+0x64>
   c5112:	462a      	mov	r2, r5
   c5114:	4649      	mov	r1, r9
   c5116:	4620      	mov	r0, r4
   c5118:	f7ff ffa8 	bl	c506c <L_shift>
   c511c:	4544      	cmp	r4, r8
   c511e:	d950      	bls.n	c51c2 <__hexnan+0x10a>
   c5120:	2300      	movs	r3, #0
   c5122:	f1a4 0904 	sub.w	r9, r4, #4
   c5126:	f844 3c04 	str.w	r3, [r4, #-4]
   c512a:	f8cd b008 	str.w	fp, [sp, #8]
   c512e:	464c      	mov	r4, r9
   c5130:	461d      	mov	r5, r3
   c5132:	9a03      	ldr	r2, [sp, #12]
   c5134:	e7d7      	b.n	c50e6 <__hexnan+0x2e>
   c5136:	2929      	cmp	r1, #41	; 0x29
   c5138:	d156      	bne.n	c51e8 <__hexnan+0x130>
   c513a:	3202      	adds	r2, #2
   c513c:	f8ca 2000 	str.w	r2, [sl]
   c5140:	f1bb 0f00 	cmp.w	fp, #0
   c5144:	d050      	beq.n	c51e8 <__hexnan+0x130>
   c5146:	454c      	cmp	r4, r9
   c5148:	d206      	bcs.n	c5158 <__hexnan+0xa0>
   c514a:	2d07      	cmp	r5, #7
   c514c:	dc04      	bgt.n	c5158 <__hexnan+0xa0>
   c514e:	462a      	mov	r2, r5
   c5150:	4649      	mov	r1, r9
   c5152:	4620      	mov	r0, r4
   c5154:	f7ff ff8a 	bl	c506c <L_shift>
   c5158:	4544      	cmp	r4, r8
   c515a:	d934      	bls.n	c51c6 <__hexnan+0x10e>
   c515c:	f1a8 0204 	sub.w	r2, r8, #4
   c5160:	4623      	mov	r3, r4
   c5162:	f853 1b04 	ldr.w	r1, [r3], #4
   c5166:	f842 1f04 	str.w	r1, [r2, #4]!
   c516a:	429f      	cmp	r7, r3
   c516c:	d2f9      	bcs.n	c5162 <__hexnan+0xaa>
   c516e:	1b3b      	subs	r3, r7, r4
   c5170:	f023 0303 	bic.w	r3, r3, #3
   c5174:	3304      	adds	r3, #4
   c5176:	3401      	adds	r4, #1
   c5178:	3e03      	subs	r6, #3
   c517a:	42b4      	cmp	r4, r6
   c517c:	bf88      	it	hi
   c517e:	2304      	movhi	r3, #4
   c5180:	4443      	add	r3, r8
   c5182:	2200      	movs	r2, #0
   c5184:	f843 2b04 	str.w	r2, [r3], #4
   c5188:	429f      	cmp	r7, r3
   c518a:	d2fb      	bcs.n	c5184 <__hexnan+0xcc>
   c518c:	683b      	ldr	r3, [r7, #0]
   c518e:	b91b      	cbnz	r3, c5198 <__hexnan+0xe0>
   c5190:	4547      	cmp	r7, r8
   c5192:	d127      	bne.n	c51e4 <__hexnan+0x12c>
   c5194:	2301      	movs	r3, #1
   c5196:	603b      	str	r3, [r7, #0]
   c5198:	2005      	movs	r0, #5
   c519a:	e026      	b.n	c51ea <__hexnan+0x132>
   c519c:	3501      	adds	r5, #1
   c519e:	2d08      	cmp	r5, #8
   c51a0:	f10b 0b01 	add.w	fp, fp, #1
   c51a4:	dd06      	ble.n	c51b4 <__hexnan+0xfc>
   c51a6:	4544      	cmp	r4, r8
   c51a8:	d9c3      	bls.n	c5132 <__hexnan+0x7a>
   c51aa:	2300      	movs	r3, #0
   c51ac:	f844 3c04 	str.w	r3, [r4, #-4]
   c51b0:	2501      	movs	r5, #1
   c51b2:	3c04      	subs	r4, #4
   c51b4:	6822      	ldr	r2, [r4, #0]
   c51b6:	f000 000f 	and.w	r0, r0, #15
   c51ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c51be:	6022      	str	r2, [r4, #0]
   c51c0:	e7b7      	b.n	c5132 <__hexnan+0x7a>
   c51c2:	2508      	movs	r5, #8
   c51c4:	e7b5      	b.n	c5132 <__hexnan+0x7a>
   c51c6:	9b01      	ldr	r3, [sp, #4]
   c51c8:	2b00      	cmp	r3, #0
   c51ca:	d0df      	beq.n	c518c <__hexnan+0xd4>
   c51cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c51d0:	f1c3 0320 	rsb	r3, r3, #32
   c51d4:	fa22 f303 	lsr.w	r3, r2, r3
   c51d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c51dc:	401a      	ands	r2, r3
   c51de:	f846 2c04 	str.w	r2, [r6, #-4]
   c51e2:	e7d3      	b.n	c518c <__hexnan+0xd4>
   c51e4:	3f04      	subs	r7, #4
   c51e6:	e7d1      	b.n	c518c <__hexnan+0xd4>
   c51e8:	2004      	movs	r0, #4
   c51ea:	b007      	add	sp, #28
   c51ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c51f0 <__retarget_lock_acquire_recursive>:
   c51f0:	4770      	bx	lr

000c51f2 <__retarget_lock_release>:
   c51f2:	4770      	bx	lr

000c51f4 <__retarget_lock_release_recursive>:
   c51f4:	4770      	bx	lr

000c51f6 <__ascii_mbtowc>:
   c51f6:	b082      	sub	sp, #8
   c51f8:	b901      	cbnz	r1, c51fc <__ascii_mbtowc+0x6>
   c51fa:	a901      	add	r1, sp, #4
   c51fc:	b142      	cbz	r2, c5210 <__ascii_mbtowc+0x1a>
   c51fe:	b14b      	cbz	r3, c5214 <__ascii_mbtowc+0x1e>
   c5200:	7813      	ldrb	r3, [r2, #0]
   c5202:	600b      	str	r3, [r1, #0]
   c5204:	7812      	ldrb	r2, [r2, #0]
   c5206:	1e10      	subs	r0, r2, #0
   c5208:	bf18      	it	ne
   c520a:	2001      	movne	r0, #1
   c520c:	b002      	add	sp, #8
   c520e:	4770      	bx	lr
   c5210:	4610      	mov	r0, r2
   c5212:	e7fb      	b.n	c520c <__ascii_mbtowc+0x16>
   c5214:	f06f 0001 	mvn.w	r0, #1
   c5218:	e7f8      	b.n	c520c <__ascii_mbtowc+0x16>
	...

000c521c <_Balloc>:
   c521c:	b570      	push	{r4, r5, r6, lr}
   c521e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5220:	4604      	mov	r4, r0
   c5222:	460d      	mov	r5, r1
   c5224:	b976      	cbnz	r6, c5244 <_Balloc+0x28>
   c5226:	2010      	movs	r0, #16
   c5228:	f7f8 fb14 	bl	bd854 <malloc>
   c522c:	4602      	mov	r2, r0
   c522e:	6260      	str	r0, [r4, #36]	; 0x24
   c5230:	b920      	cbnz	r0, c523c <_Balloc+0x20>
   c5232:	4b18      	ldr	r3, [pc, #96]	; (c5294 <_Balloc+0x78>)
   c5234:	4818      	ldr	r0, [pc, #96]	; (c5298 <_Balloc+0x7c>)
   c5236:	2166      	movs	r1, #102	; 0x66
   c5238:	f7f8 fb5c 	bl	bd8f4 <__assert_func>
   c523c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5240:	6006      	str	r6, [r0, #0]
   c5242:	60c6      	str	r6, [r0, #12]
   c5244:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5246:	68f3      	ldr	r3, [r6, #12]
   c5248:	b183      	cbz	r3, c526c <_Balloc+0x50>
   c524a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c524c:	68db      	ldr	r3, [r3, #12]
   c524e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5252:	b9b8      	cbnz	r0, c5284 <_Balloc+0x68>
   c5254:	2101      	movs	r1, #1
   c5256:	fa01 f605 	lsl.w	r6, r1, r5
   c525a:	1d72      	adds	r2, r6, #5
   c525c:	0092      	lsls	r2, r2, #2
   c525e:	4620      	mov	r0, r4
   c5260:	f000 fc9d 	bl	c5b9e <_calloc_r>
   c5264:	b160      	cbz	r0, c5280 <_Balloc+0x64>
   c5266:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c526a:	e00e      	b.n	c528a <_Balloc+0x6e>
   c526c:	2221      	movs	r2, #33	; 0x21
   c526e:	2104      	movs	r1, #4
   c5270:	4620      	mov	r0, r4
   c5272:	f000 fc94 	bl	c5b9e <_calloc_r>
   c5276:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5278:	60f0      	str	r0, [r6, #12]
   c527a:	68db      	ldr	r3, [r3, #12]
   c527c:	2b00      	cmp	r3, #0
   c527e:	d1e4      	bne.n	c524a <_Balloc+0x2e>
   c5280:	2000      	movs	r0, #0
   c5282:	bd70      	pop	{r4, r5, r6, pc}
   c5284:	6802      	ldr	r2, [r0, #0]
   c5286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c528a:	2300      	movs	r3, #0
   c528c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5290:	e7f7      	b.n	c5282 <_Balloc+0x66>
   c5292:	bf00      	nop
   c5294:	000c7a58 	.word	0x000c7a58
   c5298:	000c7cae 	.word	0x000c7cae

000c529c <_Bfree>:
   c529c:	b570      	push	{r4, r5, r6, lr}
   c529e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c52a0:	4605      	mov	r5, r0
   c52a2:	460c      	mov	r4, r1
   c52a4:	b976      	cbnz	r6, c52c4 <_Bfree+0x28>
   c52a6:	2010      	movs	r0, #16
   c52a8:	f7f8 fad4 	bl	bd854 <malloc>
   c52ac:	4602      	mov	r2, r0
   c52ae:	6268      	str	r0, [r5, #36]	; 0x24
   c52b0:	b920      	cbnz	r0, c52bc <_Bfree+0x20>
   c52b2:	4b09      	ldr	r3, [pc, #36]	; (c52d8 <_Bfree+0x3c>)
   c52b4:	4809      	ldr	r0, [pc, #36]	; (c52dc <_Bfree+0x40>)
   c52b6:	218a      	movs	r1, #138	; 0x8a
   c52b8:	f7f8 fb1c 	bl	bd8f4 <__assert_func>
   c52bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c52c0:	6006      	str	r6, [r0, #0]
   c52c2:	60c6      	str	r6, [r0, #12]
   c52c4:	b13c      	cbz	r4, c52d6 <_Bfree+0x3a>
   c52c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c52c8:	6862      	ldr	r2, [r4, #4]
   c52ca:	68db      	ldr	r3, [r3, #12]
   c52cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c52d0:	6021      	str	r1, [r4, #0]
   c52d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c52d6:	bd70      	pop	{r4, r5, r6, pc}
   c52d8:	000c7a58 	.word	0x000c7a58
   c52dc:	000c7cae 	.word	0x000c7cae

000c52e0 <__multadd>:
   c52e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c52e4:	690d      	ldr	r5, [r1, #16]
   c52e6:	4607      	mov	r7, r0
   c52e8:	460c      	mov	r4, r1
   c52ea:	461e      	mov	r6, r3
   c52ec:	f101 0c14 	add.w	ip, r1, #20
   c52f0:	2000      	movs	r0, #0
   c52f2:	f8dc 3000 	ldr.w	r3, [ip]
   c52f6:	b299      	uxth	r1, r3
   c52f8:	fb02 6101 	mla	r1, r2, r1, r6
   c52fc:	0c1e      	lsrs	r6, r3, #16
   c52fe:	0c0b      	lsrs	r3, r1, #16
   c5300:	fb02 3306 	mla	r3, r2, r6, r3
   c5304:	b289      	uxth	r1, r1
   c5306:	3001      	adds	r0, #1
   c5308:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c530c:	4285      	cmp	r5, r0
   c530e:	f84c 1b04 	str.w	r1, [ip], #4
   c5312:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5316:	dcec      	bgt.n	c52f2 <__multadd+0x12>
   c5318:	b30e      	cbz	r6, c535e <__multadd+0x7e>
   c531a:	68a3      	ldr	r3, [r4, #8]
   c531c:	42ab      	cmp	r3, r5
   c531e:	dc19      	bgt.n	c5354 <__multadd+0x74>
   c5320:	6861      	ldr	r1, [r4, #4]
   c5322:	4638      	mov	r0, r7
   c5324:	3101      	adds	r1, #1
   c5326:	f7ff ff79 	bl	c521c <_Balloc>
   c532a:	4680      	mov	r8, r0
   c532c:	b928      	cbnz	r0, c533a <__multadd+0x5a>
   c532e:	4602      	mov	r2, r0
   c5330:	4b0c      	ldr	r3, [pc, #48]	; (c5364 <__multadd+0x84>)
   c5332:	480d      	ldr	r0, [pc, #52]	; (c5368 <__multadd+0x88>)
   c5334:	21b5      	movs	r1, #181	; 0xb5
   c5336:	f7f8 fadd 	bl	bd8f4 <__assert_func>
   c533a:	6922      	ldr	r2, [r4, #16]
   c533c:	3202      	adds	r2, #2
   c533e:	f104 010c 	add.w	r1, r4, #12
   c5342:	0092      	lsls	r2, r2, #2
   c5344:	300c      	adds	r0, #12
   c5346:	f7fe fb9b 	bl	c3a80 <memcpy>
   c534a:	4621      	mov	r1, r4
   c534c:	4638      	mov	r0, r7
   c534e:	f7ff ffa5 	bl	c529c <_Bfree>
   c5352:	4644      	mov	r4, r8
   c5354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5358:	3501      	adds	r5, #1
   c535a:	615e      	str	r6, [r3, #20]
   c535c:	6125      	str	r5, [r4, #16]
   c535e:	4620      	mov	r0, r4
   c5360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5364:	000c7c29 	.word	0x000c7c29
   c5368:	000c7cae 	.word	0x000c7cae

000c536c <__s2b>:
   c536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5370:	460c      	mov	r4, r1
   c5372:	4615      	mov	r5, r2
   c5374:	461f      	mov	r7, r3
   c5376:	2209      	movs	r2, #9
   c5378:	3308      	adds	r3, #8
   c537a:	4606      	mov	r6, r0
   c537c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5380:	2100      	movs	r1, #0
   c5382:	2201      	movs	r2, #1
   c5384:	429a      	cmp	r2, r3
   c5386:	db09      	blt.n	c539c <__s2b+0x30>
   c5388:	4630      	mov	r0, r6
   c538a:	f7ff ff47 	bl	c521c <_Balloc>
   c538e:	b940      	cbnz	r0, c53a2 <__s2b+0x36>
   c5390:	4602      	mov	r2, r0
   c5392:	4b19      	ldr	r3, [pc, #100]	; (c53f8 <__s2b+0x8c>)
   c5394:	4819      	ldr	r0, [pc, #100]	; (c53fc <__s2b+0x90>)
   c5396:	21ce      	movs	r1, #206	; 0xce
   c5398:	f7f8 faac 	bl	bd8f4 <__assert_func>
   c539c:	0052      	lsls	r2, r2, #1
   c539e:	3101      	adds	r1, #1
   c53a0:	e7f0      	b.n	c5384 <__s2b+0x18>
   c53a2:	9b08      	ldr	r3, [sp, #32]
   c53a4:	6143      	str	r3, [r0, #20]
   c53a6:	2d09      	cmp	r5, #9
   c53a8:	f04f 0301 	mov.w	r3, #1
   c53ac:	6103      	str	r3, [r0, #16]
   c53ae:	dd16      	ble.n	c53de <__s2b+0x72>
   c53b0:	f104 0909 	add.w	r9, r4, #9
   c53b4:	46c8      	mov	r8, r9
   c53b6:	442c      	add	r4, r5
   c53b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   c53bc:	4601      	mov	r1, r0
   c53be:	3b30      	subs	r3, #48	; 0x30
   c53c0:	220a      	movs	r2, #10
   c53c2:	4630      	mov	r0, r6
   c53c4:	f7ff ff8c 	bl	c52e0 <__multadd>
   c53c8:	45a0      	cmp	r8, r4
   c53ca:	d1f5      	bne.n	c53b8 <__s2b+0x4c>
   c53cc:	f1a5 0408 	sub.w	r4, r5, #8
   c53d0:	444c      	add	r4, r9
   c53d2:	1b2d      	subs	r5, r5, r4
   c53d4:	1963      	adds	r3, r4, r5
   c53d6:	42bb      	cmp	r3, r7
   c53d8:	db04      	blt.n	c53e4 <__s2b+0x78>
   c53da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c53de:	340a      	adds	r4, #10
   c53e0:	2509      	movs	r5, #9
   c53e2:	e7f6      	b.n	c53d2 <__s2b+0x66>
   c53e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c53e8:	4601      	mov	r1, r0
   c53ea:	3b30      	subs	r3, #48	; 0x30
   c53ec:	220a      	movs	r2, #10
   c53ee:	4630      	mov	r0, r6
   c53f0:	f7ff ff76 	bl	c52e0 <__multadd>
   c53f4:	e7ee      	b.n	c53d4 <__s2b+0x68>
   c53f6:	bf00      	nop
   c53f8:	000c7c29 	.word	0x000c7c29
   c53fc:	000c7cae 	.word	0x000c7cae

000c5400 <__hi0bits>:
   c5400:	0c03      	lsrs	r3, r0, #16
   c5402:	041b      	lsls	r3, r3, #16
   c5404:	b9d3      	cbnz	r3, c543c <__hi0bits+0x3c>
   c5406:	0400      	lsls	r0, r0, #16
   c5408:	2310      	movs	r3, #16
   c540a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c540e:	bf04      	itt	eq
   c5410:	0200      	lsleq	r0, r0, #8
   c5412:	3308      	addeq	r3, #8
   c5414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5418:	bf04      	itt	eq
   c541a:	0100      	lsleq	r0, r0, #4
   c541c:	3304      	addeq	r3, #4
   c541e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5422:	bf04      	itt	eq
   c5424:	0080      	lsleq	r0, r0, #2
   c5426:	3302      	addeq	r3, #2
   c5428:	2800      	cmp	r0, #0
   c542a:	db05      	blt.n	c5438 <__hi0bits+0x38>
   c542c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5430:	f103 0301 	add.w	r3, r3, #1
   c5434:	bf08      	it	eq
   c5436:	2320      	moveq	r3, #32
   c5438:	4618      	mov	r0, r3
   c543a:	4770      	bx	lr
   c543c:	2300      	movs	r3, #0
   c543e:	e7e4      	b.n	c540a <__hi0bits+0xa>

000c5440 <__lo0bits>:
   c5440:	6803      	ldr	r3, [r0, #0]
   c5442:	f013 0207 	ands.w	r2, r3, #7
   c5446:	4601      	mov	r1, r0
   c5448:	d00b      	beq.n	c5462 <__lo0bits+0x22>
   c544a:	07da      	lsls	r2, r3, #31
   c544c:	d423      	bmi.n	c5496 <__lo0bits+0x56>
   c544e:	0798      	lsls	r0, r3, #30
   c5450:	bf49      	itett	mi
   c5452:	085b      	lsrmi	r3, r3, #1
   c5454:	089b      	lsrpl	r3, r3, #2
   c5456:	2001      	movmi	r0, #1
   c5458:	600b      	strmi	r3, [r1, #0]
   c545a:	bf5c      	itt	pl
   c545c:	600b      	strpl	r3, [r1, #0]
   c545e:	2002      	movpl	r0, #2
   c5460:	4770      	bx	lr
   c5462:	b298      	uxth	r0, r3
   c5464:	b9a8      	cbnz	r0, c5492 <__lo0bits+0x52>
   c5466:	0c1b      	lsrs	r3, r3, #16
   c5468:	2010      	movs	r0, #16
   c546a:	b2da      	uxtb	r2, r3
   c546c:	b90a      	cbnz	r2, c5472 <__lo0bits+0x32>
   c546e:	3008      	adds	r0, #8
   c5470:	0a1b      	lsrs	r3, r3, #8
   c5472:	071a      	lsls	r2, r3, #28
   c5474:	bf04      	itt	eq
   c5476:	091b      	lsreq	r3, r3, #4
   c5478:	3004      	addeq	r0, #4
   c547a:	079a      	lsls	r2, r3, #30
   c547c:	bf04      	itt	eq
   c547e:	089b      	lsreq	r3, r3, #2
   c5480:	3002      	addeq	r0, #2
   c5482:	07da      	lsls	r2, r3, #31
   c5484:	d403      	bmi.n	c548e <__lo0bits+0x4e>
   c5486:	085b      	lsrs	r3, r3, #1
   c5488:	f100 0001 	add.w	r0, r0, #1
   c548c:	d005      	beq.n	c549a <__lo0bits+0x5a>
   c548e:	600b      	str	r3, [r1, #0]
   c5490:	4770      	bx	lr
   c5492:	4610      	mov	r0, r2
   c5494:	e7e9      	b.n	c546a <__lo0bits+0x2a>
   c5496:	2000      	movs	r0, #0
   c5498:	4770      	bx	lr
   c549a:	2020      	movs	r0, #32
   c549c:	4770      	bx	lr
	...

000c54a0 <__i2b>:
   c54a0:	b510      	push	{r4, lr}
   c54a2:	460c      	mov	r4, r1
   c54a4:	2101      	movs	r1, #1
   c54a6:	f7ff feb9 	bl	c521c <_Balloc>
   c54aa:	4602      	mov	r2, r0
   c54ac:	b928      	cbnz	r0, c54ba <__i2b+0x1a>
   c54ae:	4b05      	ldr	r3, [pc, #20]	; (c54c4 <__i2b+0x24>)
   c54b0:	4805      	ldr	r0, [pc, #20]	; (c54c8 <__i2b+0x28>)
   c54b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c54b6:	f7f8 fa1d 	bl	bd8f4 <__assert_func>
   c54ba:	2301      	movs	r3, #1
   c54bc:	6144      	str	r4, [r0, #20]
   c54be:	6103      	str	r3, [r0, #16]
   c54c0:	bd10      	pop	{r4, pc}
   c54c2:	bf00      	nop
   c54c4:	000c7c29 	.word	0x000c7c29
   c54c8:	000c7cae 	.word	0x000c7cae

000c54cc <__multiply>:
   c54cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c54d0:	4691      	mov	r9, r2
   c54d2:	690a      	ldr	r2, [r1, #16]
   c54d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c54d8:	429a      	cmp	r2, r3
   c54da:	bfb8      	it	lt
   c54dc:	460b      	movlt	r3, r1
   c54de:	460c      	mov	r4, r1
   c54e0:	bfbc      	itt	lt
   c54e2:	464c      	movlt	r4, r9
   c54e4:	4699      	movlt	r9, r3
   c54e6:	6927      	ldr	r7, [r4, #16]
   c54e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c54ec:	68a3      	ldr	r3, [r4, #8]
   c54ee:	6861      	ldr	r1, [r4, #4]
   c54f0:	eb07 060a 	add.w	r6, r7, sl
   c54f4:	42b3      	cmp	r3, r6
   c54f6:	b085      	sub	sp, #20
   c54f8:	bfb8      	it	lt
   c54fa:	3101      	addlt	r1, #1
   c54fc:	f7ff fe8e 	bl	c521c <_Balloc>
   c5500:	b930      	cbnz	r0, c5510 <__multiply+0x44>
   c5502:	4602      	mov	r2, r0
   c5504:	4b44      	ldr	r3, [pc, #272]	; (c5618 <__multiply+0x14c>)
   c5506:	4845      	ldr	r0, [pc, #276]	; (c561c <__multiply+0x150>)
   c5508:	f240 115d 	movw	r1, #349	; 0x15d
   c550c:	f7f8 f9f2 	bl	bd8f4 <__assert_func>
   c5510:	f100 0514 	add.w	r5, r0, #20
   c5514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5518:	462b      	mov	r3, r5
   c551a:	2200      	movs	r2, #0
   c551c:	4543      	cmp	r3, r8
   c551e:	d321      	bcc.n	c5564 <__multiply+0x98>
   c5520:	f104 0314 	add.w	r3, r4, #20
   c5524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5528:	f109 0314 	add.w	r3, r9, #20
   c552c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5530:	9202      	str	r2, [sp, #8]
   c5532:	1b3a      	subs	r2, r7, r4
   c5534:	3a15      	subs	r2, #21
   c5536:	f022 0203 	bic.w	r2, r2, #3
   c553a:	3204      	adds	r2, #4
   c553c:	f104 0115 	add.w	r1, r4, #21
   c5540:	428f      	cmp	r7, r1
   c5542:	bf38      	it	cc
   c5544:	2204      	movcc	r2, #4
   c5546:	9201      	str	r2, [sp, #4]
   c5548:	9a02      	ldr	r2, [sp, #8]
   c554a:	9303      	str	r3, [sp, #12]
   c554c:	429a      	cmp	r2, r3
   c554e:	d80c      	bhi.n	c556a <__multiply+0x9e>
   c5550:	2e00      	cmp	r6, #0
   c5552:	dd03      	ble.n	c555c <__multiply+0x90>
   c5554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5558:	2b00      	cmp	r3, #0
   c555a:	d05a      	beq.n	c5612 <__multiply+0x146>
   c555c:	6106      	str	r6, [r0, #16]
   c555e:	b005      	add	sp, #20
   c5560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5564:	f843 2b04 	str.w	r2, [r3], #4
   c5568:	e7d8      	b.n	c551c <__multiply+0x50>
   c556a:	f8b3 a000 	ldrh.w	sl, [r3]
   c556e:	f1ba 0f00 	cmp.w	sl, #0
   c5572:	d024      	beq.n	c55be <__multiply+0xf2>
   c5574:	f104 0e14 	add.w	lr, r4, #20
   c5578:	46a9      	mov	r9, r5
   c557a:	f04f 0c00 	mov.w	ip, #0
   c557e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5582:	f8d9 1000 	ldr.w	r1, [r9]
   c5586:	fa1f fb82 	uxth.w	fp, r2
   c558a:	b289      	uxth	r1, r1
   c558c:	fb0a 110b 	mla	r1, sl, fp, r1
   c5590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5594:	f8d9 2000 	ldr.w	r2, [r9]
   c5598:	4461      	add	r1, ip
   c559a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c559e:	fb0a c20b 	mla	r2, sl, fp, ip
   c55a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c55a6:	b289      	uxth	r1, r1
   c55a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c55ac:	4577      	cmp	r7, lr
   c55ae:	f849 1b04 	str.w	r1, [r9], #4
   c55b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c55b6:	d8e2      	bhi.n	c557e <__multiply+0xb2>
   c55b8:	9a01      	ldr	r2, [sp, #4]
   c55ba:	f845 c002 	str.w	ip, [r5, r2]
   c55be:	9a03      	ldr	r2, [sp, #12]
   c55c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c55c4:	3304      	adds	r3, #4
   c55c6:	f1b9 0f00 	cmp.w	r9, #0
   c55ca:	d020      	beq.n	c560e <__multiply+0x142>
   c55cc:	6829      	ldr	r1, [r5, #0]
   c55ce:	f104 0c14 	add.w	ip, r4, #20
   c55d2:	46ae      	mov	lr, r5
   c55d4:	f04f 0a00 	mov.w	sl, #0
   c55d8:	f8bc b000 	ldrh.w	fp, [ip]
   c55dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c55e0:	fb09 220b 	mla	r2, r9, fp, r2
   c55e4:	4492      	add	sl, r2
   c55e6:	b289      	uxth	r1, r1
   c55e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c55ec:	f84e 1b04 	str.w	r1, [lr], #4
   c55f0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c55f4:	f8be 1000 	ldrh.w	r1, [lr]
   c55f8:	0c12      	lsrs	r2, r2, #16
   c55fa:	fb09 1102 	mla	r1, r9, r2, r1
   c55fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c5602:	4567      	cmp	r7, ip
   c5604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c5608:	d8e6      	bhi.n	c55d8 <__multiply+0x10c>
   c560a:	9a01      	ldr	r2, [sp, #4]
   c560c:	50a9      	str	r1, [r5, r2]
   c560e:	3504      	adds	r5, #4
   c5610:	e79a      	b.n	c5548 <__multiply+0x7c>
   c5612:	3e01      	subs	r6, #1
   c5614:	e79c      	b.n	c5550 <__multiply+0x84>
   c5616:	bf00      	nop
   c5618:	000c7c29 	.word	0x000c7c29
   c561c:	000c7cae 	.word	0x000c7cae

000c5620 <__pow5mult>:
   c5620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5624:	4615      	mov	r5, r2
   c5626:	f012 0203 	ands.w	r2, r2, #3
   c562a:	4606      	mov	r6, r0
   c562c:	460f      	mov	r7, r1
   c562e:	d007      	beq.n	c5640 <__pow5mult+0x20>
   c5630:	4c25      	ldr	r4, [pc, #148]	; (c56c8 <__pow5mult+0xa8>)
   c5632:	3a01      	subs	r2, #1
   c5634:	2300      	movs	r3, #0
   c5636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c563a:	f7ff fe51 	bl	c52e0 <__multadd>
   c563e:	4607      	mov	r7, r0
   c5640:	10ad      	asrs	r5, r5, #2
   c5642:	d03d      	beq.n	c56c0 <__pow5mult+0xa0>
   c5644:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5646:	b97c      	cbnz	r4, c5668 <__pow5mult+0x48>
   c5648:	2010      	movs	r0, #16
   c564a:	f7f8 f903 	bl	bd854 <malloc>
   c564e:	4602      	mov	r2, r0
   c5650:	6270      	str	r0, [r6, #36]	; 0x24
   c5652:	b928      	cbnz	r0, c5660 <__pow5mult+0x40>
   c5654:	4b1d      	ldr	r3, [pc, #116]	; (c56cc <__pow5mult+0xac>)
   c5656:	481e      	ldr	r0, [pc, #120]	; (c56d0 <__pow5mult+0xb0>)
   c5658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c565c:	f7f8 f94a 	bl	bd8f4 <__assert_func>
   c5660:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5664:	6004      	str	r4, [r0, #0]
   c5666:	60c4      	str	r4, [r0, #12]
   c5668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c566c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5670:	b94c      	cbnz	r4, c5686 <__pow5mult+0x66>
   c5672:	f240 2171 	movw	r1, #625	; 0x271
   c5676:	4630      	mov	r0, r6
   c5678:	f7ff ff12 	bl	c54a0 <__i2b>
   c567c:	2300      	movs	r3, #0
   c567e:	f8c8 0008 	str.w	r0, [r8, #8]
   c5682:	4604      	mov	r4, r0
   c5684:	6003      	str	r3, [r0, #0]
   c5686:	f04f 0900 	mov.w	r9, #0
   c568a:	07eb      	lsls	r3, r5, #31
   c568c:	d50a      	bpl.n	c56a4 <__pow5mult+0x84>
   c568e:	4639      	mov	r1, r7
   c5690:	4622      	mov	r2, r4
   c5692:	4630      	mov	r0, r6
   c5694:	f7ff ff1a 	bl	c54cc <__multiply>
   c5698:	4639      	mov	r1, r7
   c569a:	4680      	mov	r8, r0
   c569c:	4630      	mov	r0, r6
   c569e:	f7ff fdfd 	bl	c529c <_Bfree>
   c56a2:	4647      	mov	r7, r8
   c56a4:	106d      	asrs	r5, r5, #1
   c56a6:	d00b      	beq.n	c56c0 <__pow5mult+0xa0>
   c56a8:	6820      	ldr	r0, [r4, #0]
   c56aa:	b938      	cbnz	r0, c56bc <__pow5mult+0x9c>
   c56ac:	4622      	mov	r2, r4
   c56ae:	4621      	mov	r1, r4
   c56b0:	4630      	mov	r0, r6
   c56b2:	f7ff ff0b 	bl	c54cc <__multiply>
   c56b6:	6020      	str	r0, [r4, #0]
   c56b8:	f8c0 9000 	str.w	r9, [r0]
   c56bc:	4604      	mov	r4, r0
   c56be:	e7e4      	b.n	c568a <__pow5mult+0x6a>
   c56c0:	4638      	mov	r0, r7
   c56c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c56c6:	bf00      	nop
   c56c8:	000c7df8 	.word	0x000c7df8
   c56cc:	000c7a58 	.word	0x000c7a58
   c56d0:	000c7cae 	.word	0x000c7cae

000c56d4 <__lshift>:
   c56d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c56d8:	460c      	mov	r4, r1
   c56da:	6849      	ldr	r1, [r1, #4]
   c56dc:	6923      	ldr	r3, [r4, #16]
   c56de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c56e2:	68a3      	ldr	r3, [r4, #8]
   c56e4:	4607      	mov	r7, r0
   c56e6:	4691      	mov	r9, r2
   c56e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c56ec:	f108 0601 	add.w	r6, r8, #1
   c56f0:	42b3      	cmp	r3, r6
   c56f2:	db0b      	blt.n	c570c <__lshift+0x38>
   c56f4:	4638      	mov	r0, r7
   c56f6:	f7ff fd91 	bl	c521c <_Balloc>
   c56fa:	4605      	mov	r5, r0
   c56fc:	b948      	cbnz	r0, c5712 <__lshift+0x3e>
   c56fe:	4602      	mov	r2, r0
   c5700:	4b2a      	ldr	r3, [pc, #168]	; (c57ac <__lshift+0xd8>)
   c5702:	482b      	ldr	r0, [pc, #172]	; (c57b0 <__lshift+0xdc>)
   c5704:	f240 11d9 	movw	r1, #473	; 0x1d9
   c5708:	f7f8 f8f4 	bl	bd8f4 <__assert_func>
   c570c:	3101      	adds	r1, #1
   c570e:	005b      	lsls	r3, r3, #1
   c5710:	e7ee      	b.n	c56f0 <__lshift+0x1c>
   c5712:	2300      	movs	r3, #0
   c5714:	f100 0114 	add.w	r1, r0, #20
   c5718:	f100 0210 	add.w	r2, r0, #16
   c571c:	4618      	mov	r0, r3
   c571e:	4553      	cmp	r3, sl
   c5720:	db37      	blt.n	c5792 <__lshift+0xbe>
   c5722:	6920      	ldr	r0, [r4, #16]
   c5724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c5728:	f104 0314 	add.w	r3, r4, #20
   c572c:	f019 091f 	ands.w	r9, r9, #31
   c5730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c5734:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c5738:	d02f      	beq.n	c579a <__lshift+0xc6>
   c573a:	f1c9 0e20 	rsb	lr, r9, #32
   c573e:	468a      	mov	sl, r1
   c5740:	f04f 0c00 	mov.w	ip, #0
   c5744:	681a      	ldr	r2, [r3, #0]
   c5746:	fa02 f209 	lsl.w	r2, r2, r9
   c574a:	ea42 020c 	orr.w	r2, r2, ip
   c574e:	f84a 2b04 	str.w	r2, [sl], #4
   c5752:	f853 2b04 	ldr.w	r2, [r3], #4
   c5756:	4298      	cmp	r0, r3
   c5758:	fa22 fc0e 	lsr.w	ip, r2, lr
   c575c:	d8f2      	bhi.n	c5744 <__lshift+0x70>
   c575e:	1b03      	subs	r3, r0, r4
   c5760:	3b15      	subs	r3, #21
   c5762:	f023 0303 	bic.w	r3, r3, #3
   c5766:	3304      	adds	r3, #4
   c5768:	f104 0215 	add.w	r2, r4, #21
   c576c:	4290      	cmp	r0, r2
   c576e:	bf38      	it	cc
   c5770:	2304      	movcc	r3, #4
   c5772:	f841 c003 	str.w	ip, [r1, r3]
   c5776:	f1bc 0f00 	cmp.w	ip, #0
   c577a:	d001      	beq.n	c5780 <__lshift+0xac>
   c577c:	f108 0602 	add.w	r6, r8, #2
   c5780:	3e01      	subs	r6, #1
   c5782:	4638      	mov	r0, r7
   c5784:	612e      	str	r6, [r5, #16]
   c5786:	4621      	mov	r1, r4
   c5788:	f7ff fd88 	bl	c529c <_Bfree>
   c578c:	4628      	mov	r0, r5
   c578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5792:	f842 0f04 	str.w	r0, [r2, #4]!
   c5796:	3301      	adds	r3, #1
   c5798:	e7c1      	b.n	c571e <__lshift+0x4a>
   c579a:	3904      	subs	r1, #4
   c579c:	f853 2b04 	ldr.w	r2, [r3], #4
   c57a0:	f841 2f04 	str.w	r2, [r1, #4]!
   c57a4:	4298      	cmp	r0, r3
   c57a6:	d8f9      	bhi.n	c579c <__lshift+0xc8>
   c57a8:	e7ea      	b.n	c5780 <__lshift+0xac>
   c57aa:	bf00      	nop
   c57ac:	000c7c29 	.word	0x000c7c29
   c57b0:	000c7cae 	.word	0x000c7cae

000c57b4 <__mcmp>:
   c57b4:	b530      	push	{r4, r5, lr}
   c57b6:	6902      	ldr	r2, [r0, #16]
   c57b8:	690c      	ldr	r4, [r1, #16]
   c57ba:	1b12      	subs	r2, r2, r4
   c57bc:	d10e      	bne.n	c57dc <__mcmp+0x28>
   c57be:	f100 0314 	add.w	r3, r0, #20
   c57c2:	3114      	adds	r1, #20
   c57c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c57c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c57cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c57d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c57d4:	42a5      	cmp	r5, r4
   c57d6:	d003      	beq.n	c57e0 <__mcmp+0x2c>
   c57d8:	d305      	bcc.n	c57e6 <__mcmp+0x32>
   c57da:	2201      	movs	r2, #1
   c57dc:	4610      	mov	r0, r2
   c57de:	bd30      	pop	{r4, r5, pc}
   c57e0:	4283      	cmp	r3, r0
   c57e2:	d3f3      	bcc.n	c57cc <__mcmp+0x18>
   c57e4:	e7fa      	b.n	c57dc <__mcmp+0x28>
   c57e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c57ea:	e7f7      	b.n	c57dc <__mcmp+0x28>

000c57ec <__mdiff>:
   c57ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c57f0:	460c      	mov	r4, r1
   c57f2:	4606      	mov	r6, r0
   c57f4:	4611      	mov	r1, r2
   c57f6:	4620      	mov	r0, r4
   c57f8:	4690      	mov	r8, r2
   c57fa:	f7ff ffdb 	bl	c57b4 <__mcmp>
   c57fe:	1e05      	subs	r5, r0, #0
   c5800:	d110      	bne.n	c5824 <__mdiff+0x38>
   c5802:	4629      	mov	r1, r5
   c5804:	4630      	mov	r0, r6
   c5806:	f7ff fd09 	bl	c521c <_Balloc>
   c580a:	b930      	cbnz	r0, c581a <__mdiff+0x2e>
   c580c:	4b3a      	ldr	r3, [pc, #232]	; (c58f8 <__mdiff+0x10c>)
   c580e:	4602      	mov	r2, r0
   c5810:	f240 2132 	movw	r1, #562	; 0x232
   c5814:	4839      	ldr	r0, [pc, #228]	; (c58fc <__mdiff+0x110>)
   c5816:	f7f8 f86d 	bl	bd8f4 <__assert_func>
   c581a:	2301      	movs	r3, #1
   c581c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c5820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5824:	bfa4      	itt	ge
   c5826:	4643      	movge	r3, r8
   c5828:	46a0      	movge	r8, r4
   c582a:	4630      	mov	r0, r6
   c582c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c5830:	bfa6      	itte	ge
   c5832:	461c      	movge	r4, r3
   c5834:	2500      	movge	r5, #0
   c5836:	2501      	movlt	r5, #1
   c5838:	f7ff fcf0 	bl	c521c <_Balloc>
   c583c:	b920      	cbnz	r0, c5848 <__mdiff+0x5c>
   c583e:	4b2e      	ldr	r3, [pc, #184]	; (c58f8 <__mdiff+0x10c>)
   c5840:	4602      	mov	r2, r0
   c5842:	f44f 7110 	mov.w	r1, #576	; 0x240
   c5846:	e7e5      	b.n	c5814 <__mdiff+0x28>
   c5848:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c584c:	6926      	ldr	r6, [r4, #16]
   c584e:	60c5      	str	r5, [r0, #12]
   c5850:	f104 0914 	add.w	r9, r4, #20
   c5854:	f108 0514 	add.w	r5, r8, #20
   c5858:	f100 0e14 	add.w	lr, r0, #20
   c585c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c5860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c5864:	f108 0210 	add.w	r2, r8, #16
   c5868:	46f2      	mov	sl, lr
   c586a:	2100      	movs	r1, #0
   c586c:	f859 3b04 	ldr.w	r3, [r9], #4
   c5870:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c5874:	fa1f f883 	uxth.w	r8, r3
   c5878:	fa11 f18b 	uxtah	r1, r1, fp
   c587c:	0c1b      	lsrs	r3, r3, #16
   c587e:	eba1 0808 	sub.w	r8, r1, r8
   c5882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c5886:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c588a:	fa1f f888 	uxth.w	r8, r8
   c588e:	1419      	asrs	r1, r3, #16
   c5890:	454e      	cmp	r6, r9
   c5892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c5896:	f84a 3b04 	str.w	r3, [sl], #4
   c589a:	d8e7      	bhi.n	c586c <__mdiff+0x80>
   c589c:	1b33      	subs	r3, r6, r4
   c589e:	3b15      	subs	r3, #21
   c58a0:	f023 0303 	bic.w	r3, r3, #3
   c58a4:	3304      	adds	r3, #4
   c58a6:	3415      	adds	r4, #21
   c58a8:	42a6      	cmp	r6, r4
   c58aa:	bf38      	it	cc
   c58ac:	2304      	movcc	r3, #4
   c58ae:	441d      	add	r5, r3
   c58b0:	4473      	add	r3, lr
   c58b2:	469e      	mov	lr, r3
   c58b4:	462e      	mov	r6, r5
   c58b6:	4566      	cmp	r6, ip
   c58b8:	d30e      	bcc.n	c58d8 <__mdiff+0xec>
   c58ba:	f10c 0203 	add.w	r2, ip, #3
   c58be:	1b52      	subs	r2, r2, r5
   c58c0:	f022 0203 	bic.w	r2, r2, #3
   c58c4:	3d03      	subs	r5, #3
   c58c6:	45ac      	cmp	ip, r5
   c58c8:	bf38      	it	cc
   c58ca:	2200      	movcc	r2, #0
   c58cc:	441a      	add	r2, r3
   c58ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c58d2:	b17b      	cbz	r3, c58f4 <__mdiff+0x108>
   c58d4:	6107      	str	r7, [r0, #16]
   c58d6:	e7a3      	b.n	c5820 <__mdiff+0x34>
   c58d8:	f856 8b04 	ldr.w	r8, [r6], #4
   c58dc:	fa11 f288 	uxtah	r2, r1, r8
   c58e0:	1414      	asrs	r4, r2, #16
   c58e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c58e6:	b292      	uxth	r2, r2
   c58e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c58ec:	f84e 2b04 	str.w	r2, [lr], #4
   c58f0:	1421      	asrs	r1, r4, #16
   c58f2:	e7e0      	b.n	c58b6 <__mdiff+0xca>
   c58f4:	3f01      	subs	r7, #1
   c58f6:	e7ea      	b.n	c58ce <__mdiff+0xe2>
   c58f8:	000c7c29 	.word	0x000c7c29
   c58fc:	000c7cae 	.word	0x000c7cae

000c5900 <__ulp>:
   c5900:	b082      	sub	sp, #8
   c5902:	ed8d 0b00 	vstr	d0, [sp]
   c5906:	9b01      	ldr	r3, [sp, #4]
   c5908:	4912      	ldr	r1, [pc, #72]	; (c5954 <__ulp+0x54>)
   c590a:	4019      	ands	r1, r3
   c590c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c5910:	2900      	cmp	r1, #0
   c5912:	dd05      	ble.n	c5920 <__ulp+0x20>
   c5914:	2200      	movs	r2, #0
   c5916:	460b      	mov	r3, r1
   c5918:	ec43 2b10 	vmov	d0, r2, r3
   c591c:	b002      	add	sp, #8
   c591e:	4770      	bx	lr
   c5920:	4249      	negs	r1, r1
   c5922:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c5926:	ea4f 5021 	mov.w	r0, r1, asr #20
   c592a:	f04f 0200 	mov.w	r2, #0
   c592e:	f04f 0300 	mov.w	r3, #0
   c5932:	da04      	bge.n	c593e <__ulp+0x3e>
   c5934:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c5938:	fa41 f300 	asr.w	r3, r1, r0
   c593c:	e7ec      	b.n	c5918 <__ulp+0x18>
   c593e:	f1a0 0114 	sub.w	r1, r0, #20
   c5942:	291e      	cmp	r1, #30
   c5944:	bfda      	itte	le
   c5946:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c594a:	fa20 f101 	lsrle.w	r1, r0, r1
   c594e:	2101      	movgt	r1, #1
   c5950:	460a      	mov	r2, r1
   c5952:	e7e1      	b.n	c5918 <__ulp+0x18>
   c5954:	7ff00000 	.word	0x7ff00000

000c5958 <__b2d>:
   c5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c595a:	6905      	ldr	r5, [r0, #16]
   c595c:	f100 0714 	add.w	r7, r0, #20
   c5960:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c5964:	1f2e      	subs	r6, r5, #4
   c5966:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c596a:	4620      	mov	r0, r4
   c596c:	f7ff fd48 	bl	c5400 <__hi0bits>
   c5970:	f1c0 0320 	rsb	r3, r0, #32
   c5974:	280a      	cmp	r0, #10
   c5976:	f8df c07c 	ldr.w	ip, [pc, #124]	; c59f4 <__b2d+0x9c>
   c597a:	600b      	str	r3, [r1, #0]
   c597c:	dc14      	bgt.n	c59a8 <__b2d+0x50>
   c597e:	f1c0 0e0b 	rsb	lr, r0, #11
   c5982:	fa24 f10e 	lsr.w	r1, r4, lr
   c5986:	42b7      	cmp	r7, r6
   c5988:	ea41 030c 	orr.w	r3, r1, ip
   c598c:	bf34      	ite	cc
   c598e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5992:	2100      	movcs	r1, #0
   c5994:	3015      	adds	r0, #21
   c5996:	fa04 f000 	lsl.w	r0, r4, r0
   c599a:	fa21 f10e 	lsr.w	r1, r1, lr
   c599e:	ea40 0201 	orr.w	r2, r0, r1
   c59a2:	ec43 2b10 	vmov	d0, r2, r3
   c59a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c59a8:	42b7      	cmp	r7, r6
   c59aa:	bf3a      	itte	cc
   c59ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c59b0:	f1a5 0608 	subcc.w	r6, r5, #8
   c59b4:	2100      	movcs	r1, #0
   c59b6:	380b      	subs	r0, #11
   c59b8:	d017      	beq.n	c59ea <__b2d+0x92>
   c59ba:	f1c0 0c20 	rsb	ip, r0, #32
   c59be:	fa04 f500 	lsl.w	r5, r4, r0
   c59c2:	42be      	cmp	r6, r7
   c59c4:	fa21 f40c 	lsr.w	r4, r1, ip
   c59c8:	ea45 0504 	orr.w	r5, r5, r4
   c59cc:	bf8c      	ite	hi
   c59ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c59d2:	2400      	movls	r4, #0
   c59d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c59d8:	fa01 f000 	lsl.w	r0, r1, r0
   c59dc:	fa24 f40c 	lsr.w	r4, r4, ip
   c59e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c59e4:	ea40 0204 	orr.w	r2, r0, r4
   c59e8:	e7db      	b.n	c59a2 <__b2d+0x4a>
   c59ea:	ea44 030c 	orr.w	r3, r4, ip
   c59ee:	460a      	mov	r2, r1
   c59f0:	e7d7      	b.n	c59a2 <__b2d+0x4a>
   c59f2:	bf00      	nop
   c59f4:	3ff00000 	.word	0x3ff00000

000c59f8 <__d2b>:
   c59f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c59fc:	4689      	mov	r9, r1
   c59fe:	2101      	movs	r1, #1
   c5a00:	ec57 6b10 	vmov	r6, r7, d0
   c5a04:	4690      	mov	r8, r2
   c5a06:	f7ff fc09 	bl	c521c <_Balloc>
   c5a0a:	4604      	mov	r4, r0
   c5a0c:	b930      	cbnz	r0, c5a1c <__d2b+0x24>
   c5a0e:	4602      	mov	r2, r0
   c5a10:	4b25      	ldr	r3, [pc, #148]	; (c5aa8 <__d2b+0xb0>)
   c5a12:	4826      	ldr	r0, [pc, #152]	; (c5aac <__d2b+0xb4>)
   c5a14:	f240 310a 	movw	r1, #778	; 0x30a
   c5a18:	f7f7 ff6c 	bl	bd8f4 <__assert_func>
   c5a1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c5a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c5a24:	bb35      	cbnz	r5, c5a74 <__d2b+0x7c>
   c5a26:	2e00      	cmp	r6, #0
   c5a28:	9301      	str	r3, [sp, #4]
   c5a2a:	d028      	beq.n	c5a7e <__d2b+0x86>
   c5a2c:	4668      	mov	r0, sp
   c5a2e:	9600      	str	r6, [sp, #0]
   c5a30:	f7ff fd06 	bl	c5440 <__lo0bits>
   c5a34:	9900      	ldr	r1, [sp, #0]
   c5a36:	b300      	cbz	r0, c5a7a <__d2b+0x82>
   c5a38:	9a01      	ldr	r2, [sp, #4]
   c5a3a:	f1c0 0320 	rsb	r3, r0, #32
   c5a3e:	fa02 f303 	lsl.w	r3, r2, r3
   c5a42:	430b      	orrs	r3, r1
   c5a44:	40c2      	lsrs	r2, r0
   c5a46:	6163      	str	r3, [r4, #20]
   c5a48:	9201      	str	r2, [sp, #4]
   c5a4a:	9b01      	ldr	r3, [sp, #4]
   c5a4c:	61a3      	str	r3, [r4, #24]
   c5a4e:	2b00      	cmp	r3, #0
   c5a50:	bf14      	ite	ne
   c5a52:	2202      	movne	r2, #2
   c5a54:	2201      	moveq	r2, #1
   c5a56:	6122      	str	r2, [r4, #16]
   c5a58:	b1d5      	cbz	r5, c5a90 <__d2b+0x98>
   c5a5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c5a5e:	4405      	add	r5, r0
   c5a60:	f8c9 5000 	str.w	r5, [r9]
   c5a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c5a68:	f8c8 0000 	str.w	r0, [r8]
   c5a6c:	4620      	mov	r0, r4
   c5a6e:	b003      	add	sp, #12
   c5a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c5a78:	e7d5      	b.n	c5a26 <__d2b+0x2e>
   c5a7a:	6161      	str	r1, [r4, #20]
   c5a7c:	e7e5      	b.n	c5a4a <__d2b+0x52>
   c5a7e:	a801      	add	r0, sp, #4
   c5a80:	f7ff fcde 	bl	c5440 <__lo0bits>
   c5a84:	9b01      	ldr	r3, [sp, #4]
   c5a86:	6163      	str	r3, [r4, #20]
   c5a88:	2201      	movs	r2, #1
   c5a8a:	6122      	str	r2, [r4, #16]
   c5a8c:	3020      	adds	r0, #32
   c5a8e:	e7e3      	b.n	c5a58 <__d2b+0x60>
   c5a90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c5a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c5a98:	f8c9 0000 	str.w	r0, [r9]
   c5a9c:	6918      	ldr	r0, [r3, #16]
   c5a9e:	f7ff fcaf 	bl	c5400 <__hi0bits>
   c5aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c5aa6:	e7df      	b.n	c5a68 <__d2b+0x70>
   c5aa8:	000c7c29 	.word	0x000c7c29
   c5aac:	000c7cae 	.word	0x000c7cae

000c5ab0 <__ratio>:
   c5ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5ab4:	4688      	mov	r8, r1
   c5ab6:	4669      	mov	r1, sp
   c5ab8:	4681      	mov	r9, r0
   c5aba:	f7ff ff4d 	bl	c5958 <__b2d>
   c5abe:	a901      	add	r1, sp, #4
   c5ac0:	4640      	mov	r0, r8
   c5ac2:	ec55 4b10 	vmov	r4, r5, d0
   c5ac6:	f7ff ff47 	bl	c5958 <__b2d>
   c5aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5ace:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c5ad2:	eba3 0c02 	sub.w	ip, r3, r2
   c5ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c5ada:	1a9b      	subs	r3, r3, r2
   c5adc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c5ae0:	ec51 0b10 	vmov	r0, r1, d0
   c5ae4:	2b00      	cmp	r3, #0
   c5ae6:	bfd6      	itet	le
   c5ae8:	460a      	movle	r2, r1
   c5aea:	462a      	movgt	r2, r5
   c5aec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c5af0:	468b      	mov	fp, r1
   c5af2:	462f      	mov	r7, r5
   c5af4:	bfd4      	ite	le
   c5af6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c5afa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c5afe:	4620      	mov	r0, r4
   c5b00:	ee10 2a10 	vmov	r2, s0
   c5b04:	465b      	mov	r3, fp
   c5b06:	4639      	mov	r1, r7
   c5b08:	f7fd fd58 	bl	c35bc <__aeabi_ddiv>
   c5b0c:	ec41 0b10 	vmov	d0, r0, r1
   c5b10:	b003      	add	sp, #12
   c5b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5b16 <__copybits>:
   c5b16:	3901      	subs	r1, #1
   c5b18:	b570      	push	{r4, r5, r6, lr}
   c5b1a:	1149      	asrs	r1, r1, #5
   c5b1c:	6914      	ldr	r4, [r2, #16]
   c5b1e:	3101      	adds	r1, #1
   c5b20:	f102 0314 	add.w	r3, r2, #20
   c5b24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c5b28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c5b2c:	1f05      	subs	r5, r0, #4
   c5b2e:	42a3      	cmp	r3, r4
   c5b30:	d30c      	bcc.n	c5b4c <__copybits+0x36>
   c5b32:	1aa3      	subs	r3, r4, r2
   c5b34:	3b11      	subs	r3, #17
   c5b36:	f023 0303 	bic.w	r3, r3, #3
   c5b3a:	3211      	adds	r2, #17
   c5b3c:	42a2      	cmp	r2, r4
   c5b3e:	bf88      	it	hi
   c5b40:	2300      	movhi	r3, #0
   c5b42:	4418      	add	r0, r3
   c5b44:	2300      	movs	r3, #0
   c5b46:	4288      	cmp	r0, r1
   c5b48:	d305      	bcc.n	c5b56 <__copybits+0x40>
   c5b4a:	bd70      	pop	{r4, r5, r6, pc}
   c5b4c:	f853 6b04 	ldr.w	r6, [r3], #4
   c5b50:	f845 6f04 	str.w	r6, [r5, #4]!
   c5b54:	e7eb      	b.n	c5b2e <__copybits+0x18>
   c5b56:	f840 3b04 	str.w	r3, [r0], #4
   c5b5a:	e7f4      	b.n	c5b46 <__copybits+0x30>

000c5b5c <__any_on>:
   c5b5c:	f100 0214 	add.w	r2, r0, #20
   c5b60:	6900      	ldr	r0, [r0, #16]
   c5b62:	114b      	asrs	r3, r1, #5
   c5b64:	4298      	cmp	r0, r3
   c5b66:	b510      	push	{r4, lr}
   c5b68:	db11      	blt.n	c5b8e <__any_on+0x32>
   c5b6a:	dd0a      	ble.n	c5b82 <__any_on+0x26>
   c5b6c:	f011 011f 	ands.w	r1, r1, #31
   c5b70:	d007      	beq.n	c5b82 <__any_on+0x26>
   c5b72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c5b76:	fa24 f001 	lsr.w	r0, r4, r1
   c5b7a:	fa00 f101 	lsl.w	r1, r0, r1
   c5b7e:	428c      	cmp	r4, r1
   c5b80:	d10b      	bne.n	c5b9a <__any_on+0x3e>
   c5b82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c5b86:	4293      	cmp	r3, r2
   c5b88:	d803      	bhi.n	c5b92 <__any_on+0x36>
   c5b8a:	2000      	movs	r0, #0
   c5b8c:	bd10      	pop	{r4, pc}
   c5b8e:	4603      	mov	r3, r0
   c5b90:	e7f7      	b.n	c5b82 <__any_on+0x26>
   c5b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c5b96:	2900      	cmp	r1, #0
   c5b98:	d0f5      	beq.n	c5b86 <__any_on+0x2a>
   c5b9a:	2001      	movs	r0, #1
   c5b9c:	e7f6      	b.n	c5b8c <__any_on+0x30>

000c5b9e <_calloc_r>:
   c5b9e:	b513      	push	{r0, r1, r4, lr}
   c5ba0:	434a      	muls	r2, r1
   c5ba2:	4611      	mov	r1, r2
   c5ba4:	9201      	str	r2, [sp, #4]
   c5ba6:	f7f7 fe95 	bl	bd8d4 <_malloc_r>
   c5baa:	4604      	mov	r4, r0
   c5bac:	b118      	cbz	r0, c5bb6 <_calloc_r+0x18>
   c5bae:	9a01      	ldr	r2, [sp, #4]
   c5bb0:	2100      	movs	r1, #0
   c5bb2:	f7fd ff8d 	bl	c3ad0 <memset>
   c5bb6:	4620      	mov	r0, r4
   c5bb8:	b002      	add	sp, #8
   c5bba:	bd10      	pop	{r4, pc}
   c5bbc:	0000      	movs	r0, r0
	...

000c5bc0 <nan>:
   c5bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; c5bc8 <nan+0x8>
   c5bc4:	4770      	bx	lr
   c5bc6:	bf00      	nop
   c5bc8:	00000000 	.word	0x00000000
   c5bcc:	7ff80000 	.word	0x7ff80000

000c5bd0 <__ascii_wctomb>:
   c5bd0:	b149      	cbz	r1, c5be6 <__ascii_wctomb+0x16>
   c5bd2:	2aff      	cmp	r2, #255	; 0xff
   c5bd4:	bf85      	ittet	hi
   c5bd6:	238a      	movhi	r3, #138	; 0x8a
   c5bd8:	6003      	strhi	r3, [r0, #0]
   c5bda:	700a      	strbls	r2, [r1, #0]
   c5bdc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c5be0:	bf98      	it	ls
   c5be2:	2001      	movls	r0, #1
   c5be4:	4770      	bx	lr
   c5be6:	4608      	mov	r0, r1
   c5be8:	4770      	bx	lr
	...

000c5bec <__aeabi_d2lz>:
   c5bec:	b538      	push	{r3, r4, r5, lr}
   c5bee:	2200      	movs	r2, #0
   c5bf0:	2300      	movs	r3, #0
   c5bf2:	4604      	mov	r4, r0
   c5bf4:	460d      	mov	r5, r1
   c5bf6:	f7fd fe29 	bl	c384c <__aeabi_dcmplt>
   c5bfa:	b928      	cbnz	r0, c5c08 <__aeabi_d2lz+0x1c>
   c5bfc:	4620      	mov	r0, r4
   c5bfe:	4629      	mov	r1, r5
   c5c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5c04:	f7fd bef8 	b.w	c39f8 <__aeabi_d2ulz>
   c5c08:	4620      	mov	r0, r4
   c5c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c5c0e:	f7fd fef3 	bl	c39f8 <__aeabi_d2ulz>
   c5c12:	4240      	negs	r0, r0
   c5c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c5c18:	bd38      	pop	{r3, r4, r5, pc}
   c5c1a:	bf00      	nop

000c5c1c <dynalib_user>:
   c5c1c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c5c2c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c5c3c:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c5c4c:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c5c5c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c5c6c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c5c7c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c5c8c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c5c9c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c5cac:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c5cbc:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c5ccc:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c5cdc:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c5cec:	7453 7461 7375 203a 6425 5b00 4157 4e52     Status: %d.[WARN
   c5cfc:	205d 4258 6565 4d20 7365 6173 6567 2073     ] XBee Messages 
   c5d0c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5d1c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5d2c:	7373 6d75 6e69 2067 4258 6565 6920 2073     ssuming XBee is 
   c5d3c:	6e75 7661 6961 616c 6c62 0065 575b 5241     unavailable.[WAR
   c5d4c:	5d4e 4220 454c 4d20 7365 6173 6567 2073     N] BLE Messages 
   c5d5c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5d6c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5d7c:	7373 6d75 6e69 2067 4c42 2045 7369 7520     ssuming BLE is u
   c5d8c:	616e 6176 6c69 6261 656c 4300 6568 6b63     navailable.Check
   c5d9c:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c5dac:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c5dbc:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c5dcc:	4e52 205d 654d 7373 6761 2065 6843 6365     RN] Message Chec
   c5ddc:	736b 6d75 4420 656f 2073 6f4e 2074 614d     ksum Does Not Ma
   c5dec:	6374 2168 203a 7325 5700 7261 696e 676e     tch!: %s.Warning
   c5dfc:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c5e0c:	6f6e 2074 616d 6374 0068 6361 006b 7463     not match.ack.ct
   c5e1c:	006c 7325 2520 2073 6425 2520 2064 6425     l.%s %s %d %d %d
   c5e2c:	6d00 7274 5200 6365 6965 6576 2064 6f4d     .mtr.Received Mo
   c5e3c:	6f74 2072 6f43 6d6d 6e61 3a64 4c20 7053     tor Command: LSp
   c5e4c:	6565 3d64 6425 522c 7053 6565 3d64 6425     eed=%d,RSpeed=%d
   c5e5c:	7200 7165 7000 7374 5b00 5550 5354 205d     .req.pts.[PUTS] 
   c5e6c:	6552 6563 7669 6465 5320 7274 6e69 2067     Received String 
   c5e7c:	6f43 6d6d 6e61 3a64 2520 0073 7073 0063     Command: %s.spc.
   c5e8c:	7768 0061 7561 0074 6d64 0070 495b 464e     hwa.aut.dmp.[INF
   c5e9c:	5d4f 5220 6365 6965 6576 2064 544c 2045     O] Received LTE 
   c5eac:	654d 7373 6761 3a65 2520 0073 654e 2077     Message: %s.New 
   c5ebc:	5442 4320 6d6f 616d 646e 003a 495b 464e     BT Command:.[INF
   c5ecc:	5d4f 5220 6365 6965 6576 2064 4c42 2045     O] Received BLE 
   c5edc:	654d 7373 6761 3a65 2520 0073 4343 7548     Message: %s.CCHu
   c5eec:	0062 7245 6f72 2c72 4320 756f 646c 6e20     b.Error, Could n
   c5efc:	746f 6920 696e 6974 6c61 7a69 2065 5047     ot initialize GP
   c5f0c:	0053 6944 7473 6e61 6563 203a 6625 2500     S.Distance: %f.%
   c5f1c:	3230 2564 3230 2564 3430 2564 3230 2564     02d%02d%04d%02d%
   c5f2c:	3230 2564 3230 0064 7325 252c 2c66 6625     02d%02d.%s,%f,%f
   c5f3c:	252c 2c66 6625 252c 2c66 6625 252c 0066     ,%f,%f,%f,%f,%f.
   c5f4c:	654e 2077 4258 6565 4320 6d6f 616d 646e     New XBee Command
   c5f5c:	003a 495b 464e 5d4f 5220 6365 6965 6576     :.[INFO] Receive
   c5f6c:	2064 4258 6565 4d20 7365 6173 6567 203a     d XBee Message: 
   c5f7c:	7325 4500 746e 7265 6e69 2067 6144 6174     %s.Entering Data
   c5f8c:	4f20 6666 6f6c 6461 7265 4d20 646f 0065      Offloader Mode.
   c5f9c:	002f 7245 6f72 2c72 6320 756f 646c 6e20     /.Error, could n
   c5fac:	746f 6f20 6570 206e 6f72 746f 5320 2044     ot open root SD 
   c5fbc:	6163 6472 6420 7269 6365 6f74 7972 5700     card directory.W
   c5fcc:	6961 6974 676e 6620 726f 4320 4843 6275     aiting for CCHub
   c5fdc:	6320 6e6f 656e 7463 6f69 2e6e 2e2e 5300      connection....S
   c5fec:	6174 7472 6e69 2067 7274 6e61 6673 7265     tarting transfer
   c5ffc:	2e2e 002e 6843 6365 696b 676e 6920 2066     ....Checking if 
   c600c:	6966 656c 2520 2073 7369 6120 2e20 7363     file %s is a .cs
   c601c:	2076 726f 2e20 7874 2e74 2e2e 2e00 7363     v or .txt.....cs
   c602c:	0076 6966 656c 6f64 656e 6600 6c69 6e65     v.filedone.filen
   c603c:	6d61 0065 6553 646e 6e69 2067 6f63 6d6d     ame.Sending comm
   c604c:	6e61 2064 7325 4600 6c69 2065 7325 6920     and %s.File %s i
   c605c:	2073 2061 632e 7673 6f20 2072 742e 7478     s a .csv or .txt
   c606c:	7020 6972 746e 6e69 2067 6164 6174 6600      printing data.f
   c607c:	6c69 6365 6d6f 0070 7325 3025 7832 4200     ilecomp.%s%02x.B
   c608c:	746f 6431 7461 4200 6425 4343 6e73 2573     ot1dat.B%dCCsns%
   c609c:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c60ac:	2520 2064 6425 2520 2064 4200 6425 4241      %d %d %d .B%dAB
   c60bc:	7573 2570 2064 6425 2520 362e 2066 2e25     sup%d %d %.6f %.
   c60cc:	6636 0020 3142 4343 7470 6273 6769 6f62     6f .B1CCptsbigbo
   c60dc:	0074 6146 6c69 6465 7420 206f 6966 646e     t.Failed to find
   c60ec:	4c20 5349 4d33 4c44 6320 6968 0070 494c      LIS3MDL chip.LI
   c60fc:	3353 444d 204c 6f46 6e75 2164 5700 7461     S3MDL Found!.Wat
   c610c:	7265 6f42 0074 4c5f 474f 742e 7478 4500     erBot._LOG.txt.E
   c611c:	7272 726f 203a 6f63 6c75 2064 6f6e 2074     rror: could not 
   c612c:	6f63 6e6e 6365 2074 6f74 5320 2044 6163     connect to SD ca
   c613c:	6472 0021 6954 656d 4c2c 7461 7469 6475     rd!.Time,Latitud
   c614c:	2c65 6f4c 676e 7469 6475 2c65 6554 706d     e,Longitude,Temp
   c615c:	7265 7461 7275 2c65 4870 442c 7369 6f73     erature,pH,Disso
   c616c:	766c 6465 4f20 2c32 6f43 646e 6375 6974     lved O2,Conducti
   c617c:	6976 7974 3020 312e 2c4b 6f43 646e 6375     vity 0.1K,Conduc
   c618c:	6974 6976 7974 3120 004b 495b 464e 5d4f     tivity 1K.[INFO]
   c619c:	5720 7461 7265 6f42 2074 6425 203a 7453      WaterBot %d: St
   c61ac:	7261 6574 2064 6f4c 6767 6e69 2167 7400     arted Logging!.t
   c61bc:	0078 7872 6f00 6666 0000 0000               x.rx.off....

000c61c8 <_ZTVN8particle11SPISettingsE>:
	...
   c61d0:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c61dc <_ZTV5Timer>:
	...
   c61e4:	43f1 000b 4445 000b 41db 000b               .C..ED...A..

000c61f0 <_ZTVN5spark10LogHandlerE>:
	...
   c6200:	40a9 000b 40d3 000b                         .@...@..

000c6208 <_ZTVN8particle9LEDStatusE>:
	...
   c6210:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c621c <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6224:	4271 000b 42a5 000b 04d9 000c 40d5 000b     qB...B.......@..

000c6234 <_ZTV4File>:
	...
   c623c:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c624c:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c625c:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c626c:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c627c:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c628c:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c629c:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c62ac:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c62bc:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c62cc:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c62dc:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c62ec:	6232 0030                                   2b0.

000c62f0 <CSWTCH.293>:
   c62f0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6300:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6310:	444d 004c                                   MDL.

000c6314 <CSWTCH.26>:
   c6314:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c6324 <_ZTV16Adafruit_LIS3MDL>:
	...
   c632c:	785f 000b 78a9 000b 785d 000b 7959 000b     _x...x..]x..Yy..
   c633c:	7861 000b 6573 5074 6361 656b 4374 6766     ax..setPacketCfg
   c634c:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c635c:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c636c:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c637c:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c638c:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c639c:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c63ac:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c63bc:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c63cc:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c63dc:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c63ec:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c63fc:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c640c:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c641c:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c642c:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c643c:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c644c:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c645c:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c646c:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c647c:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c648c:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c649c:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c64ac:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c64bc:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c64cc:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c64dc:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c64ec:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c64fc:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c650c:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c651c:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c652c:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c653c:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c654c:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c655c:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c656c:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c657c:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c658c:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c659c:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c65ac:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c65bc:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c65cc:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c65dc:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c65ec:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c65fc:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c660c:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c661c:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c662c:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c663c:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c664c:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c665c:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c666c:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c667c:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c668c:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c669c:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c66ac:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c66bc:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c66cc:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c66dc:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c66ec:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c66fc:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c670c:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c671c:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c672c:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c673c:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c674c:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c675c:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c676c:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c677c:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c678c:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c679c:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c67ac:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c67bc:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c67cc:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c67dc:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c67ec:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c67fc:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c680c:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c681c:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c682c:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c683c:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c684c:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c685c:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c686c:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c687c:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c688c:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c689c:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c68ac:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c68bc:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c68cc:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c68dc:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c68ec:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c68fc:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c690c:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c691c:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c692c:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c693c:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c694c:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c695c:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c696c:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c697c:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c698c:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c699c:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c69ac:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c69bc:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c69cc:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c69dc:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c69ec:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c69fc:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c6a0c:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c6a1c:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c6a2c:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c6a3c:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c6a4c:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c6a5c:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c6a6c:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c6a7c:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c6a8c:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c6a9c:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c6aac:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c6abc:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c6acc:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c6adc:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c6aec:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c6afc:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c6b0c:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c6b1c:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c6b2c:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c6b3c:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c6b4c:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c6b5c:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c6b6c:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c6b7c:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c6b8c:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c6b9c:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c6bac:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c6bbc:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c6bcc:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c6bdc:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c6bec:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c6bfc:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c6c0c:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c6c1c:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c6c2c:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6c3c:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c6c4c:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c6c5c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c6c6c:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c6c7c:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c6c8c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6c9c:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c6cac:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c6cbc:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c6ccc:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6cdc:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c6cec:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c6cfc:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c6d0c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6d1c:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c6d2c:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c6d3c:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c6d4c:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c6d5c:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c6d6c:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c6d7c:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c6d8c:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c6d9c:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c6dac:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c6dbc:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c6dcc:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c6ddc:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c6dec:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c6dfc:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c6e0c:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c6e1c:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c6e2c:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c6e3c:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c6e4c:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c6e5c:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c6e6c:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c6e7c:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c6e8c:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c6e9c:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c6eac:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c6ebc:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c6ecc:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c6edc:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c6eec:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c6efc:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c6f0c:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c6f1c:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c6f2c:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c6f3c:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c6f4c:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c6f5c:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c6f6c:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c6f7c:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c6f8c:	7365 2e73 2e2e 0000                         ess.....

000c6f94 <CSWTCH.334>:
   c6f94:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c6fa4:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c6fb4:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c6fd4:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c6ffc:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7050:	0000 0010 0004                              ......

000c7056 <CSWTCH.335>:
   c7056:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7072:	002c 0000 0000 0000 0010 0024               ,.........$.

000c707e <CSWTCH.336>:
   c707e:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c708e:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c709e:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c70ae:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c70be:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c70ce:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c70de:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c70ee:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c70fe:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c710e:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c711e:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c712e:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c713e:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c714e:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c715e:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c716e:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c717e:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c718e:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c719e:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c71ae:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c71be:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c71d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c71d8:	d971 000b d9d5 000b daa9 000b d9ff 000b     q...............
   c71e8:	d975 000b                                   u...

000c71ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c71f4:	d96d 000b d9e3 000b d96f 000b da05 000b     m.......o.......
   c7204:	d995 000b                                   ....

000c7208 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7210:	d96b 000b d9f1 000b e265 000b da0b 000b     k.......e.......
   c7220:	d9b5 000b                                   ....

000c7224 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7230:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7242 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7242:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7252 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7252:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7264 <_ZTVN5spark13CellularClassE>:
	...
   c726c:	ed27 000b ed1d 000b ed13 000b ecc9 000b     '...............
   c727c:	ed07 000b ecfb 000b 0831 000c 0839 000c     ........1...9...
   c728c:	ecef 000b ece7 000b ecdd 000b ecd3 000b     ................
   c729c:	0869 000c                                   i...

000c72a0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c72a8:	ed61 000b ed67 000b eda5 000b ed75 000b     a...g.......u...
   c72b8:	ed63 000b                                   c...

000c72bc <_ZTVN5spark13EthernetClassE>:
	...
   c72c4:	f2ef 000b f2e5 000b f2db 000b f2d1 000b     ................
   c72d4:	f2c5 000b f2b9 000b 0831 000c 0839 000c     ........1...9...
   c72e4:	f2ad 000b f2a5 000b f29b 000b f291 000b     ................
   c72f4:	0869 000c                                   i...

000c72f8 <_ZTV7TwoWire>:
	...
   c7300:	f30d 000b f357 000b f32f 000b f30f 000b     ....W.../.......
   c7310:	f337 000b f33f 000b f347 000b f34f 000b     7...?...G...O...

000c7320 <_ZTV9IPAddress>:
	...
   c7328:	f429 000b f419 000b f41b 000b 7525 7500     )...........%u.u
   c7338:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c7348:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c7358:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c7368:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c7378:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c7388:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c7398:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c73a8:	6961 006c                                   ail.

000c73ac <_ZTVN5spark16JSONStreamWriterE>:
	...
   c73b4:	f925 000b f94b 000b f909 000b f537 000b     %...K.......7...

000c73c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c73cc:	fd81 000b fd99 000b 04d9 000c 40d5 000b     .............@..

000c73dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c73e4:	fdad 000b fdc1 000b 067d 000c f911 000b     ........}.......

000c73f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c73fc:	f923 000b f959 000b 043d 000c f913 000b     #...Y...=.......

000c740c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7414:	f921 000b f967 000b fce9 000b f989 000b     !...g...........

000c7424 <_ZTVN5spark12NetworkClassE>:
	...
   c742c:	07f1 000c 07fb 000c 0805 000c 080f 000c     ................
   c743c:	0819 000c 0825 000c 0831 000c 0839 000c     ....%...1...9...
   c744c:	0841 000c 084d 000c 0855 000c 085f 000c     A...M...U..._...
   c745c:	0869 000c                                   i...

000c7460 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7460:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c7470:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c7480:	6d69 0065                                   ime.

000c7484 <_ZTV11USARTSerial>:
	...
   c748c:	1185 000c 11f1 000c 11c9 000c 0955 000c     ............U...
   c749c:	1199 000c 11b5 000c 11a7 000c 11c3 000c     ................
   c74ac:	1187 000c 118b 000c                         ........

000c74b4 <_ZTV9USBSerial>:
	...
   c74bc:	1243 000c 12ab 000c 1281 000c 0955 000c     C...........U...
   c74cc:	1273 000c 1245 000c 1255 000c 12a5 000c     s...E...U.......
   c74dc:	1265 000c 123d 000c                         e...=...

000c74e4 <_ZSt7nothrow>:
	...

000c74e5 <_ZTSSt19_Sp_make_shared_tag>:
   c74e5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c74f5:	6572 5f64 6174 0067 0000                     red_tag....

000c7500 <_ZTISt19_Sp_make_shared_tag>:
   c7500:	7540 000c 74e5 000c                         @u...t..

000c7508 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7508:	75a0 000c 7514 000c 75c4 000c               .u...u...u..

000c7514 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c7514:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c7524:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c7534:	0045 0000                                   E...

000c7538 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7538:	0000 0000 7508 000c 16d5 000c 16e9 000c     .....u..........
   c7548:	187d 000c 187d 000c 1753 000c 1695 000c     }...}...S.......
   c7558:	173b 000c 16fd 000c 16c7 000c               ;...........

000c7564 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c7564:	75a0 000c 7570 000c 7508 000c               .u..pu...u..

000c7570 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7570:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7580:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7590:	666e 456f 0000 0000                         nfoE....

000c7598 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c7598:	0000 0000 7564 000c 177d 000c 1791 000c     ....du..}.......
   c75a8:	187d 000c 187d 000c 1753 000c 1695 000c     }...}...S.......
   c75b8:	1851 000c 17dd 000c 17a5 000c               Q...........

000c75c4 <_ZTISt9type_info>:
   c75c4:	7540 000c 75cc 000c                         @u...u..

000c75cc <_ZTSSt9type_info>:
   c75cc:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c75dc:	0000 0000                                   ....

000c75e0 <CSWTCH.8>:
   c75e0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c75f0:	21d2 7f33 d97c c002                         .!3.|...

000c75f8 <CSWTCH.9>:
   c75f8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c7608:	2d18 5444 21fb c009                         .-DT.!..

000c7610 <CSWTCH.8>:
   c7610:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c761c <CSWTCH.9>:
   c761c:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c7628 <npio2_hw>:
   c7628:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c7638:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c7648:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c7658:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c7668:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c7678:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c7688:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c7698:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c76a8 <two_over_pi>:
   c76a8:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c76b8:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c76c8:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c76d8:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c76e8:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c76f8:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c7708:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c7718:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c7728:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c7738:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c7748:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c7758:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c7768:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c7778:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c7788:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c7798:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c77a8:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c77b8:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c77c8:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c77d8:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c77e8:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c77f8:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c7808:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c7818:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c7828:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c7838:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c7848:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c7858:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c7868:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c7878:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c7888:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c7898:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c78a8:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c78b8:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c78c8:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c78d8:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c78e8:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c78f8:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c7908:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c7918:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c7928:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c7938:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c7948:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c7958:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c7968:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c7978:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c7988:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c7998:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c79a8:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c79b8:	008c 0000 006b 0000                         ....k...

000c79c0 <PIo2>:
   c79c0:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c79d0:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c79e0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c79ec <init_jk>:
   c79ec:	0004 0000 0007 0000 0009 0000               ............

000c79f8 <atanhi>:
   c79f8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c7a08:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c7a18 <atanlo>:
   c7a18:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c7a28:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c7a38 <atanhi>:
   c7a38:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c7a48 <atanlo>:
   c7a48:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c7a58:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c7a68:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c7a78:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c7a88:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c7a98:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c7aa8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c7ab8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c7ac8:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c7ad4 <fpi.1>:
   c7ad4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c7ae4:	0000 0000                                   ....

000c7ae8 <fpinan.0>:
   c7ae8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c7b00 <tinytens>:
   c7b00:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c7b10:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c7b20:	6f43 64ac 0628 1168                         Co.d(.h.

000c7b28 <_ctype_>:
   c7b28:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c7b38:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c7b48:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c7b58:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c7b68:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c7b78:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c7b88:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c7b98:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c7ba8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c7c28:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c7c38:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c7c48:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7c58:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7c68:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7c78:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7c88:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c7c98:	632e 0000                                   .c..

000c7c9c <_C_numeric_locale>:
   c7c9c:	6517 000c 7397 000c dc08 2003 4f50 4953     .e...s..... POSI
   c7cac:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c7cbc:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7ccc:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7cdc:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7cec:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7cfc:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c7d08 <__mprec_bigtens>:
   c7d08:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c7d18:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c7d28:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c7d30 <__mprec_tens>:
   c7d30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c7d40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c7d50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c7d60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c7d70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c7d80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c7d90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c7da0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c7db0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c7dc0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c7dd0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c7de0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c7df0:	9db4 79d9 7843 44ea                         ...yCx.D

000c7df8 <p05.0>:
   c7df8:	0005 0000 0019 0000 007d 0000               ........}...

000c7e04 <link_const_variable_data_end>:
   c7e04:	000b5df1 	.word	0x000b5df1
   c7e08:	000becb9 	.word	0x000becb9
   c7e0c:	000bed31 	.word	0x000bed31
   c7e10:	000bf2f9 	.word	0x000bf2f9
   c7e14:	000c04c9 	.word	0x000c04c9
   c7e18:	000c0941 	.word	0x000c0941
   c7e1c:	000c0a65 	.word	0x000c0a65
   c7e20:	000c0fcd 	.word	0x000c0fcd
   c7e24:	000c1171 	.word	0x000c1171

000c7e28 <link_constructors_end>:
	...
