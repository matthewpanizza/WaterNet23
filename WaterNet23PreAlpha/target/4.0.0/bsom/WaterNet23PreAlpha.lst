
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000148e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8900  000c8900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8924  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db40  000c8928  0002db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ab0  2003dd40  2003dd40  0003dd40  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8b28  000c8b28  00038b28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8b50  000c8b50  00038b50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e2a0  00000000  00000000  00038b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f7b  00000000  00000000  00266df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00071090  00000000  00000000  00287d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f80  00000000  00000000  002f8dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011528  00000000  00000000  002fdd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f64e  00000000  00000000  0030f2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00086a6b  00000000  00000000  0035e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c8c0  00000000  00000000  003e5360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd74  00000000  00000000  00541c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 f9e9 	bl	c4408 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 fa0b 	bl	c4458 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db40 	.word	0x2003db40
   b404c:	000c8928 	.word	0x000c8928
   b4050:	2003dd40 	.word	0x2003dd40
   b4054:	2003dd40 	.word	0x2003dd40
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f00c ff17 	bl	c0e94 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c88d4 	.word	0x000c88d4
   b4080:	000c88f8 	.word	0x000c88f8

000b4084 <module_user_setup>:
   b4084:	f002 b856 	b.w	b6134 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 ffd7 	bl	b603c <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f00c beb7 	b.w	c0e04 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f00a b863 	b.w	be160 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b861 	b.w	be160 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b867 	b.w	be170 <free>

000b40a2 <_ZdlPvj>:
   b40a2:	f00a b865 	b.w	be170 <free>
	...

000b40a8 <__cxa_pure_virtual>:
   b40a8:	b508      	push	{r3, lr}
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 ff48 	bl	bdf44 <panic_>
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bda61 	.word	0x000bda61
   b40bc:	000c65b8 	.word	0x000c65b8

000b40c0 <__cxa_guard_acquire>:
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dda0 	.word	0x2003dda0
   b4154:	2003dd58 	.word	0x2003dd58
   b4158:	2003dd8d 	.word	0x2003dd8d
   b415c:	2003e0d4 	.word	0x2003e0d4
   b4160:	2003ddd5 	.word	0x2003ddd5
   b4164:	2003df00 	.word	0x2003df00
   b4168:	2003def9 	.word	0x2003def9
   b416c:	2003dd8c 	.word	0x2003dd8c
   b4170:	2003dd68 	.word	0x2003dd68
   b4174:	2003dd90 	.word	0x2003dd90
   b4178:	2003e5ac 	.word	0x2003e5ac
   b417c:	2003e5cc 	.word	0x2003e5cc

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b419e:	3010      	adds	r0, #16
   b41a0:	f003 ba02 	b.w	b75a8 <_ZN7FatFile4syncEv>

000b41a4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41a4:	3010      	adds	r0, #16
   b41a6:	f003 b8e3 	b.w	b7370 <_ZN7FatFile4peekEv>

000b41aa <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41aa:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41ac:	2201      	movs	r2, #1
   b41ae:	f10d 0107 	add.w	r1, sp, #7
   b41b2:	3010      	adds	r0, #16
   b41b4:	f003 f82e 	bl	b7214 <_ZN7FatFile4readEPvj>
   b41b8:	2801      	cmp	r0, #1
   b41ba:	bf0c      	ite	eq
   b41bc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41c0:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b41c4:	b003      	add	sp, #12
   b41c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ca <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b41ca:	3010      	adds	r0, #16
   b41cc:	f003 ba76 	b.w	b76bc <_ZN7FatFile5writeEPKvj>

000b41d0 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b41d0:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b41d2:	2201      	movs	r2, #1
   b41d4:	f88d 1007 	strb.w	r1, [sp, #7]
   b41d8:	3010      	adds	r0, #16
   b41da:	f10d 0107 	add.w	r1, sp, #7
   b41de:	f003 fa6d 	bl	b76bc <_ZN7FatFile5writeEPKvj>
  }
   b41e2:	b003      	add	sp, #12
   b41e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b41e8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41e8:	6943      	ldr	r3, [r0, #20]
   b41ea:	b113      	cbz	r3, b41f2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41ec:	6983      	ldr	r3, [r0, #24]
   b41ee:	300c      	adds	r0, #12
   b41f0:	4718      	bx	r3
            callback();
        }
    }
   b41f2:	4770      	bx	lr

000b41f4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41f4:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41f6:	2100      	movs	r1, #0
   b41f8:	4604      	mov	r4, r0
   b41fa:	4608      	mov	r0, r1
   b41fc:	f009 fce2 	bl	bdbc4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4200:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4202:	4620      	mov	r0, r4
   b4204:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4206:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4208:	f009 fcf4 	bl	bdbf4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b420c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b420e:	b10c      	cbz	r4, b4214 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4210:	2301      	movs	r3, #1
   b4212:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4214:	2100      	movs	r1, #0
   b4216:	2001      	movs	r0, #1
   b4218:	f009 fcd4 	bl	bdbc4 <os_thread_scheduling>
            }
        }
        if (t) {
   b421c:	b12c      	cbz	r4, b422a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b421e:	6823      	ldr	r3, [r4, #0]
   b4220:	4620      	mov	r0, r4
   b4222:	689b      	ldr	r3, [r3, #8]
   b4224:	4798      	blx	r3
            t->running = false;
   b4226:	2300      	movs	r3, #0
   b4228:	7123      	strb	r3, [r4, #4]
        }
    }
   b422a:	b002      	add	sp, #8
   b422c:	bd10      	pop	{r4, pc}

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4246:	6803      	ldr	r3, [r0, #0]
   b4248:	b2c9      	uxtb	r1, r1
   b424a:	689b      	ldr	r3, [r3, #8]
   b424c:	4718      	bx	r3
	...

000b4250 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4250:	b510      	push	{r4, lr}
   b4252:	4b05      	ldr	r3, [pc, #20]	; (b4268 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4254:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4256:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4258:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b425a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b425e:	f009 fe91 	bl	bdf84 <led_set_status_active>
}
   b4262:	4620      	mov	r0, r4
   b4264:	bd10      	pop	{r4, pc}
   b4266:	bf00      	nop
   b4268:	000c6c54 	.word	0x000c6c54

000b426c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b426c:	b510      	push	{r4, lr}
   b426e:	4604      	mov	r4, r0
}
   b4270:	f7ff ffee 	bl	b4250 <_ZN8particle9LEDStatusD1Ev>
   b4274:	4620      	mov	r0, r4
   b4276:	2120      	movs	r1, #32
   b4278:	f7ff ff13 	bl	b40a2 <_ZdlPvj>
   b427c:	4620      	mov	r0, r4
   b427e:	bd10      	pop	{r4, pc}

000b4280 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4280:	4b0a      	ldr	r3, [pc, #40]	; (b42ac <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4282:	b510      	push	{r4, lr}
   b4284:	4604      	mov	r4, r0
   b4286:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4288:	f00b fea2 	bl	bffd0 <_ZN5spark10LogManager8instanceEv>
   b428c:	4621      	mov	r1, r4
   b428e:	f00c f8da 	bl	c0446 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4292:	f00d f9c9 	bl	c1628 <_Z16_fetch_usbserialv>
   b4296:	f00d f9bb 	bl	c1610 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b429a:	4620      	mov	r0, r4
   b429c:	4b04      	ldr	r3, [pc, #16]	; (b42b0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b429e:	f840 3b04 	str.w	r3, [r0], #4
   b42a2:	f00b ff6b 	bl	c017c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42a6:	4620      	mov	r0, r4
   b42a8:	bd10      	pop	{r4, pc}
   b42aa:	bf00      	nop
   b42ac:	000c6c68 	.word	0x000c6c68
   b42b0:	000c6c3c 	.word	0x000c6c3c

000b42b4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42b4:	b510      	push	{r4, lr}
   b42b6:	4604      	mov	r4, r0
    }
   b42b8:	f7ff ffe2 	bl	b4280 <_ZN5spark16SerialLogHandlerD1Ev>
   b42bc:	4620      	mov	r0, r4
   b42be:	2124      	movs	r1, #36	; 0x24
   b42c0:	f7ff feef 	bl	b40a2 <_ZdlPvj>
   b42c4:	4620      	mov	r0, r4
   b42c6:	bd10      	pop	{r4, pc}

000b42c8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ca:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42cc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42ce:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42d0:	b130      	cbz	r0, b42e0 <_ZN5Timer5startEj.isra.0+0x18>
   b42d2:	2300      	movs	r3, #0
   b42d4:	e9cd 3300 	strd	r3, r3, [sp]
   b42d8:	461a      	mov	r2, r3
   b42da:	2102      	movs	r1, #2
   b42dc:	f009 fc92 	bl	bdc04 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42e0:	68a0      	ldr	r0, [r4, #8]
   b42e2:	b130      	cbz	r0, b42f2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42e4:	2300      	movs	r3, #0
   b42e6:	e9cd 5300 	strd	r5, r3, [sp]
   b42ea:	461a      	mov	r2, r3
   b42ec:	4619      	mov	r1, r3
   b42ee:	f009 fc89 	bl	bdc04 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42f2:	b003      	add	sp, #12
   b42f4:	bd30      	pop	{r4, r5, pc}

000b42f6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42f6:	b40e      	push	{r1, r2, r3}
   b42f8:	b503      	push	{r0, r1, lr}
   b42fa:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42fc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42fe:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4302:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4304:	f00b fc91 	bl	bfc2a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4308:	b002      	add	sp, #8
   b430a:	f85d eb04 	ldr.w	lr, [sp], #4
   b430e:	b003      	add	sp, #12
   b4310:	4770      	bx	lr
	...

000b4314 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4316:	4604      	mov	r4, r0
   b4318:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b431a:	7922      	ldrb	r2, [r4, #4]
   b431c:	68a3      	ldr	r3, [r4, #8]
   b431e:	b132      	cbz	r2, b432e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4320:	b9a3      	cbnz	r3, b434c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4322:	490b      	ldr	r1, [pc, #44]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4324:	b002      	add	sp, #8
   b4326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b432a:	f00b bc3d 	b.w	bfba8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b432e:	4a09      	ldr	r2, [pc, #36]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4330:	7b26      	ldrb	r6, [r4, #12]
   b4332:	4d09      	ldr	r5, [pc, #36]	; (b4358 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4334:	4909      	ldr	r1, [pc, #36]	; (b435c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4336:	7b64      	ldrb	r4, [r4, #13]
   b4338:	2e01      	cmp	r6, #1
   b433a:	bf18      	it	ne
   b433c:	4629      	movne	r1, r5
   b433e:	e9cd 1400 	strd	r1, r4, [sp]
   b4342:	4907      	ldr	r1, [pc, #28]	; (b4360 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4344:	f7ff ffd7 	bl	b42f6 <_ZN5Print6printfEPKcz>
  }
   b4348:	b002      	add	sp, #8
   b434a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b434c:	4a05      	ldr	r2, [pc, #20]	; (b4364 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b434e:	e7ef      	b.n	b4330 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4350:	000c65de 	.word	0x000c65de
   b4354:	000c7d6c 	.word	0x000c7d6c
   b4358:	000c65da 	.word	0x000c65da
   b435c:	000c65d6 	.word	0x000c65d6
   b4360:	000c65f4 	.word	0x000c65f4
   b4364:	000c65cd 	.word	0x000c65cd

000b4368 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4368:	b40e      	push	{r1, r2, r3}
   b436a:	b503      	push	{r0, r1, lr}
   b436c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b436e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4370:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4374:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4376:	f00b fc58 	bl	bfc2a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b437a:	b002      	add	sp, #8
   b437c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4380:	b003      	add	sp, #12
   b4382:	4770      	bx	lr

000b4384 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4384:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4386:	4d2b      	ldr	r5, [pc, #172]	; (b4434 <_Z13motionHandlerv+0xb0>)
   b4388:	782b      	ldrb	r3, [r5, #0]
   b438a:	bb3b      	cbnz	r3, b43dc <_Z13motionHandlerv+0x58>
   b438c:	4e2a      	ldr	r6, [pc, #168]	; (b4438 <_Z13motionHandlerv+0xb4>)
   b438e:	7833      	ldrb	r3, [r6, #0]
   b4390:	2b5a      	cmp	r3, #90	; 0x5a
   b4392:	d023      	beq.n	b43dc <_Z13motionHandlerv+0x58>
   b4394:	4c29      	ldr	r4, [pc, #164]	; (b443c <_Z13motionHandlerv+0xb8>)
   b4396:	7823      	ldrb	r3, [r4, #0]
   b4398:	2b5a      	cmp	r3, #90	; 0x5a
   b439a:	d01f      	beq.n	b43dc <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b439c:	f009 fb70 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b43a0:	4b27      	ldr	r3, [pc, #156]	; (b4440 <_Z13motionHandlerv+0xbc>)
   b43a2:	681b      	ldr	r3, [r3, #0]
   b43a4:	1ac0      	subs	r0, r0, r3
   b43a6:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43aa:	d917      	bls.n	b43dc <_Z13motionHandlerv+0x58>
        setLSpeed = 90;
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b43ac:	4b25      	ldr	r3, [pc, #148]	; (b4444 <_Z13motionHandlerv+0xc0>)
        rightMotorSpeed = 90;
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b43ae:	4826      	ldr	r0, [pc, #152]	; (b4448 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b43b0:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b43b2:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b43b4:	4b25      	ldr	r3, [pc, #148]	; (b444c <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b43b6:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b43b8:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b43ba:	4b25      	ldr	r3, [pc, #148]	; (b4450 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b43bc:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b43be:	2201      	movs	r2, #1
   b43c0:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b43c2:	f00a f8b9 	bl	be538 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43c6:	7821      	ldrb	r1, [r4, #0]
   b43c8:	4822      	ldr	r0, [pc, #136]	; (b4454 <_Z13motionHandlerv+0xd0>)
   b43ca:	f00a f8b5 	bl	be538 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43ce:	f00d f92b 	bl	c1628 <_Z16_fetch_usbserialv>
   b43d2:	4921      	ldr	r1, [pc, #132]	; (b4458 <_Z13motionHandlerv+0xd4>)
   b43d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43d8:	f7ff ffc6 	bl	b4368 <_ZN5Print8printlnfEPKcz>
    }
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b43dc:	4e1f      	ldr	r6, [pc, #124]	; (b445c <_Z13motionHandlerv+0xd8>)
   b43de:	7834      	ldrb	r4, [r6, #0]
   b43e0:	bb3c      	cbnz	r4, b4432 <_Z13motionHandlerv+0xae>
   b43e2:	782b      	ldrb	r3, [r5, #0]
   b43e4:	b32b      	cbz	r3, b4432 <_Z13motionHandlerv+0xae>
   b43e6:	f009 fb4b 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b43ea:	4b1d      	ldr	r3, [pc, #116]	; (b4460 <_Z13motionHandlerv+0xdc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	1ac0      	subs	r0, r0, r3
   b43f0:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43f4:	d91d      	bls.n	b4432 <_Z13motionHandlerv+0xae>
        driveMode = 0;
        telemetryAvail = false;
        pointArrived = false;
   b43f6:	4b1b      	ldr	r3, [pc, #108]	; (b4464 <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b43f8:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b43fa:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b43fc:	4b0e      	ldr	r3, [pc, #56]	; (b4438 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b43fe:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4400:	215a      	movs	r1, #90	; 0x5a
   b4402:	7019      	strb	r1, [r3, #0]
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b4404:	4b0f      	ldr	r3, [pc, #60]	; (b4444 <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b4406:	4c0d      	ldr	r4, [pc, #52]	; (b443c <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b4408:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b440a:	4b10      	ldr	r3, [pc, #64]	; (b444c <_Z13motionHandlerv+0xc8>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b440c:	480e      	ldr	r0, [pc, #56]	; (b4448 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b440e:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4410:	4b0f      	ldr	r3, [pc, #60]	; (b4450 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4412:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4414:	2201      	movs	r2, #1
   b4416:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4418:	f00a f88e 	bl	be538 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b441c:	7821      	ldrb	r1, [r4, #0]
   b441e:	480d      	ldr	r0, [pc, #52]	; (b4454 <_Z13motionHandlerv+0xd0>)
   b4420:	f00a f88a 	bl	be538 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b4424:	f00d f900 	bl	c1628 <_Z16_fetch_usbserialv>
   b4428:	490f      	ldr	r1, [pc, #60]	; (b4468 <_Z13motionHandlerv+0xe4>)
   b442a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b442e:	f7ff ff9b 	bl	b4368 <_ZN5Print8printlnfEPKcz>
    }
}
   b4432:	bd70      	pop	{r4, r5, r6, pc}
   b4434:	2003ddd5 	.word	0x2003ddd5
   b4438:	2003e584 	.word	0x2003e584
   b443c:	2003e585 	.word	0x2003e585
   b4440:	2003de14 	.word	0x2003de14
   b4444:	2003de40 	.word	0x2003de40
   b4448:	2003dd6c 	.word	0x2003dd6c
   b444c:	2003e0dd 	.word	0x2003e0dd
   b4450:	2003e5f0 	.word	0x2003e5f0
   b4454:	2003dd7c 	.word	0x2003dd7c
   b4458:	000c6611 	.word	0x000c6611
   b445c:	2003e5dc 	.word	0x2003e5dc
   b4460:	2003de1c 	.word	0x2003de1c
   b4464:	2003e0d5 	.word	0x2003e0d5
   b4468:	000c665b 	.word	0x000c665b

000b446c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b446c:	b510      	push	{r4, lr}
      if (_M_manager)
   b446e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4470:	4604      	mov	r4, r0
      if (_M_manager)
   b4472:	b113      	cbz	r3, b447a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4474:	2203      	movs	r2, #3
   b4476:	4601      	mov	r1, r0
   b4478:	4798      	blx	r3
    }
   b447a:	4620      	mov	r0, r4
   b447c:	bd10      	pop	{r4, pc}
	...

000b4480 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4480:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4482:	4b13      	ldr	r3, [pc, #76]	; (b44d0 <_ZN5TimerD1Ev+0x50>)
   b4484:	6003      	str	r3, [r0, #0]
   b4486:	4604      	mov	r4, r0
        if (handle) {
   b4488:	6880      	ldr	r0, [r0, #8]
   b448a:	b1c8      	cbz	r0, b44c0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b448c:	2500      	movs	r5, #0
   b448e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4492:	e9cd 3500 	strd	r3, r5, [sp]
   b4496:	2102      	movs	r1, #2
   b4498:	462b      	mov	r3, r5
   b449a:	462a      	mov	r2, r5
   b449c:	f009 fbb2 	bl	bdc04 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b44a0:	68a0      	ldr	r0, [r4, #8]
   b44a2:	4629      	mov	r1, r5
   b44a4:	f009 fbd6 	bl	bdc54 <os_timer_set_id>
            while (running) {
   b44a8:	7923      	ldrb	r3, [r4, #4]
   b44aa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b44ae:	b113      	cbz	r3, b44b6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b44b0:	f009 fb80 	bl	bdbb4 <os_thread_yield>
            while (running) {
   b44b4:	e7f8      	b.n	b44a8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b44b6:	68a0      	ldr	r0, [r4, #8]
   b44b8:	4629      	mov	r1, r5
   b44ba:	f009 fb93 	bl	bdbe4 <os_timer_destroy>
            handle = nullptr;
   b44be:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b44c0:	f104 000c 	add.w	r0, r4, #12
   b44c4:	f7ff ffd2 	bl	b446c <_ZNSt14_Function_baseD1Ev>
    }
   b44c8:	4620      	mov	r0, r4
   b44ca:	b003      	add	sp, #12
   b44cc:	bd30      	pop	{r4, r5, pc}
   b44ce:	bf00      	nop
   b44d0:	000c6c28 	.word	0x000c6c28

000b44d4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b44d4:	b510      	push	{r4, lr}
   b44d6:	4604      	mov	r4, r0
    }
   b44d8:	f7ff ffd2 	bl	b4480 <_ZN5TimerD1Ev>
   b44dc:	4620      	mov	r0, r4
   b44de:	211c      	movs	r1, #28
   b44e0:	f7ff fddf 	bl	b40a2 <_ZdlPvj>
   b44e4:	4620      	mov	r0, r4
   b44e6:	bd10      	pop	{r4, pc}

000b44e8 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44ea:	468c      	mov	ip, r1
   b44ec:	2500      	movs	r5, #0
   b44ee:	4914      	ldr	r1, [pc, #80]	; (b4540 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b44f0:	7105      	strb	r5, [r0, #4]
   b44f2:	4604      	mov	r4, r0
   b44f4:	6085      	str	r5, [r0, #8]
   b44f6:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b44f8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b44fc:	b085      	sub	sp, #20
   b44fe:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4500:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4504:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4508:	e896 0003 	ldmia.w	r6, {r0, r1}
   b450c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4510:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4514:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4518:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b451a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b451c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b451e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4520:	6095      	str	r5, [r2, #8]
   b4522:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4524:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4526:	e9cd 3500 	strd	r3, r5, [sp]
   b452a:	4a06      	ldr	r2, [pc, #24]	; (b4544 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b452c:	4623      	mov	r3, r4
   b452e:	4661      	mov	r1, ip
   b4530:	f104 0008 	add.w	r0, r4, #8
   b4534:	f009 fb4e 	bl	bdbd4 <os_timer_create>
    }
   b4538:	4620      	mov	r0, r4
   b453a:	b005      	add	sp, #20
   b453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b453e:	bf00      	nop
   b4540:	000c6c28 	.word	0x000c6c28
   b4544:	000b41f5 	.word	0x000b41f5

000b4548 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4548:	b510      	push	{r4, lr}
   b454a:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b454c:	2200      	movs	r2, #0
   b454e:	7c40      	ldrb	r0, [r0, #17]
   b4550:	f009 fd52 	bl	bdff8 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4554:	7c63      	ldrb	r3, [r4, #17]
   b4556:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4558:	bf18      	it	ne
   b455a:	8320      	strhne	r0, [r4, #24]
}
   b455c:	bd10      	pop	{r4, pc}
	...

000b4560 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4560:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b4562:	4b24      	ldr	r3, [pc, #144]	; (b45f4 <_Z10LEDHandlerv+0x94>)
   b4564:	4a24      	ldr	r2, [pc, #144]	; (b45f8 <_Z10LEDHandlerv+0x98>)
   b4566:	781b      	ldrb	r3, [r3, #0]
   b4568:	b15b      	cbz	r3, b4582 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b456a:	7c53      	ldrb	r3, [r2, #17]
   b456c:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b456e:	bf1c      	itt	ne
   b4570:	2302      	movne	r3, #2
   b4572:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b4574:	23ff      	movs	r3, #255	; 0xff
   b4576:	6153      	str	r3, [r2, #20]
        return;                
    }
    if(signalLED){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b4578:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b457a:	481f      	ldr	r0, [pc, #124]	; (b45f8 <_Z10LEDHandlerv+0x98>)
   b457c:	f7ff ffe4 	bl	b4548 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b4580:	bd10      	pop	{r4, pc}
    if(signalLED){
   b4582:	4b1e      	ldr	r3, [pc, #120]	; (b45fc <_Z10LEDHandlerv+0x9c>)
   b4584:	781b      	ldrb	r3, [r3, #0]
   b4586:	b133      	cbz	r3, b4596 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4588:	7c53      	ldrb	r3, [r2, #17]
   b458a:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b458c:	bf1c      	itt	ne
   b458e:	2302      	movne	r3, #2
   b4590:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b4592:	4b1b      	ldr	r3, [pc, #108]	; (b4600 <_Z10LEDHandlerv+0xa0>)
   b4594:	e7ef      	b.n	b4576 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4596:	4b1b      	ldr	r3, [pc, #108]	; (b4604 <_Z10LEDHandlerv+0xa4>)
   b4598:	781b      	ldrb	r3, [r3, #0]
   b459a:	bb23      	cbnz	r3, b45e6 <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b459c:	4b1a      	ldr	r3, [pc, #104]	; (b4608 <_Z10LEDHandlerv+0xa8>)
   b459e:	781b      	ldrb	r3, [r3, #0]
   b45a0:	bb23      	cbnz	r3, b45ec <_Z10LEDHandlerv+0x8c>
    else if(driveMode == 0){
   b45a2:	4b1a      	ldr	r3, [pc, #104]	; (b460c <_Z10LEDHandlerv+0xac>)
   b45a4:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b45a6:	2b00      	cmp	r3, #0
   b45a8:	bf0b      	itete	eq
   b45aa:	210a      	moveq	r1, #10
   b45ac:	2114      	movne	r1, #20
   b45ae:	2002      	moveq	r0, #2
   b45b0:	2003      	movne	r0, #3
    statusMode |= XBeeAvail << 1;
   b45b2:	4b17      	ldr	r3, [pc, #92]	; (b4610 <_Z10LEDHandlerv+0xb0>)
   b45b4:	781c      	ldrb	r4, [r3, #0]
    statusMode |= BLEAvail << 2;
   b45b6:	4b17      	ldr	r3, [pc, #92]	; (b4614 <_Z10LEDHandlerv+0xb4>)
   b45b8:	781b      	ldrb	r3, [r3, #0]
   b45ba:	009b      	lsls	r3, r3, #2
   b45bc:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    statusMode = LTEAvail;
   b45c0:	4c15      	ldr	r4, [pc, #84]	; (b4618 <_Z10LEDHandlerv+0xb8>)
    statusMode |= BLEAvail << 2;
   b45c2:	7824      	ldrb	r4, [r4, #0]
   b45c4:	4323      	orrs	r3, r4
   b45c6:	3b01      	subs	r3, #1
   b45c8:	b2db      	uxtb	r3, r3
   b45ca:	2b06      	cmp	r3, #6
   b45cc:	bf9c      	itt	ls
   b45ce:	4c13      	ldrls	r4, [pc, #76]	; (b461c <_Z10LEDHandlerv+0xbc>)
   b45d0:	f854 3023 	ldrls.w	r3, [r4, r3, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45d4:	7c54      	ldrb	r4, [r2, #17]
    switch (statusMode){
   b45d6:	bf88      	it	hi
   b45d8:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b45dc:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b45de:	bf18      	it	ne
   b45e0:	7450      	strbne	r0, [r2, #17]
    d_.color = color;
   b45e2:	6153      	str	r3, [r2, #20]
   b45e4:	e7c9      	b.n	b457a <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b45e6:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b45e8:	2002      	movs	r0, #2
   b45ea:	e7e2      	b.n	b45b2 <_Z10LEDHandlerv+0x52>
        SetSpeed = LED_SPEED_NORMAL;
   b45ec:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_SOLID;
   b45ee:	2001      	movs	r0, #1
   b45f0:	e7df      	b.n	b45b2 <_Z10LEDHandlerv+0x52>
   b45f2:	bf00      	nop
   b45f4:	2003e0d4 	.word	0x2003e0d4
   b45f8:	2003e58c 	.word	0x2003e58c
   b45fc:	2003e586 	.word	0x2003e586
   b4600:	00ff6000 	.word	0x00ff6000
   b4604:	2003df00 	.word	0x2003df00
   b4608:	2003def9 	.word	0x2003def9
   b460c:	2003ddd5 	.word	0x2003ddd5
   b4610:	2003dda0 	.word	0x2003dda0
   b4614:	2003dd58 	.word	0x2003dd58
   b4618:	2003dd8d 	.word	0x2003dd8d
   b461c:	000c6d5c 	.word	0x000c6d5c

000b4620 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4620:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b4622:	460a      	mov	r2, r1
   b4624:	4901      	ldr	r1, [pc, #4]	; (b462c <_ZN7FatFile4openEPKci+0xc>)
   b4626:	6809      	ldr	r1, [r1, #0]
   b4628:	f002 bffb 	b.w	b7622 <_ZN7FatFile4openEPS_PKci>
   b462c:	2003e614 	.word	0x2003e614

000b4630 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4630:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4632:	f009 fd6d 	bl	be110 <spark_cloud_flag_connected>
   b4636:	4c2b      	ldr	r4, [pc, #172]	; (b46e4 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4638:	b1e0      	cbz	r0, b4674 <_Z11wdogHandlerv+0x44>
   b463a:	2301      	movs	r3, #1
        LTEAvail = false;
   b463c:	7023      	strb	r3, [r4, #0]
   b463e:	f009 fa1f 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b4642:	4b29      	ldr	r3, [pc, #164]	; (b46e8 <_Z11wdogHandlerv+0xb8>)
   b4644:	4c29      	ldr	r4, [pc, #164]	; (b46ec <_Z11wdogHandlerv+0xbc>)
   b4646:	681b      	ldr	r3, [r3, #0]
   b4648:	f247 5230 	movw	r2, #30000	; 0x7530
   b464c:	1ac0      	subs	r0, r0, r3
   b464e:	4290      	cmp	r0, r2
   b4650:	d823      	bhi.n	b469a <_Z11wdogHandlerv+0x6a>
   b4652:	b313      	cbz	r3, b469a <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4654:	2301      	movs	r3, #1
        XBeeAvail = false;
   b4656:	7023      	strb	r3, [r4, #0]
   b4658:	f009 fa12 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b465c:	4b24      	ldr	r3, [pc, #144]	; (b46f0 <_Z11wdogHandlerv+0xc0>)
   b465e:	4c25      	ldr	r4, [pc, #148]	; (b46f4 <_Z11wdogHandlerv+0xc4>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	f247 5230 	movw	r2, #30000	; 0x7530
   b4666:	1ac0      	subs	r0, r0, r3
   b4668:	4290      	cmp	r0, r2
   b466a:	d828      	bhi.n	b46be <_Z11wdogHandlerv+0x8e>
   b466c:	b33b      	cbz	r3, b46be <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b466e:	2301      	movs	r3, #1
        BLEAvail = false;
   b4670:	7023      	strb	r3, [r4, #0]
}
   b4672:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b4674:	7823      	ldrb	r3, [r4, #0]
   b4676:	2b00      	cmp	r3, #0
   b4678:	d0e1      	beq.n	b463e <_Z11wdogHandlerv+0xe>
    return m_attr;
   b467a:	481f      	ldr	r0, [pc, #124]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b467c:	7c03      	ldrb	r3, [r0, #16]
   b467e:	b92b      	cbnz	r3, b468c <_Z11wdogHandlerv+0x5c>
   b4680:	491e      	ldr	r1, [pc, #120]	; (b46fc <_Z11wdogHandlerv+0xcc>)
   b4682:	f244 2202 	movw	r2, #16898	; 0x4202
   b4686:	3010      	adds	r0, #16
   b4688:	f7ff ffca 	bl	b4620 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b468c:	491c      	ldr	r1, [pc, #112]	; (b4700 <_Z11wdogHandlerv+0xd0>)
   b468e:	481a      	ldr	r0, [pc, #104]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
   b4690:	221e      	movs	r2, #30
   b4692:	f7ff fe69 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4696:	2300      	movs	r3, #0
   b4698:	e7d0      	b.n	b463c <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b469a:	7823      	ldrb	r3, [r4, #0]
   b469c:	b16b      	cbz	r3, b46ba <_Z11wdogHandlerv+0x8a>
   b469e:	4816      	ldr	r0, [pc, #88]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46a0:	7c03      	ldrb	r3, [r0, #16]
   b46a2:	b92b      	cbnz	r3, b46b0 <_Z11wdogHandlerv+0x80>
   b46a4:	4915      	ldr	r1, [pc, #84]	; (b46fc <_Z11wdogHandlerv+0xcc>)
   b46a6:	f244 2202 	movw	r2, #16898	; 0x4202
   b46aa:	3010      	adds	r0, #16
   b46ac:	f7ff ffb8 	bl	b4620 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b46b0:	4913      	ldr	r1, [pc, #76]	; (b4700 <_Z11wdogHandlerv+0xd0>)
   b46b2:	4811      	ldr	r0, [pc, #68]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
   b46b4:	221e      	movs	r2, #30
   b46b6:	f7ff fe57 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b46ba:	2300      	movs	r3, #0
   b46bc:	e7cb      	b.n	b4656 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b46be:	7822      	ldrb	r2, [r4, #0]
   b46c0:	b172      	cbz	r2, b46e0 <_Z11wdogHandlerv+0xb0>
   b46c2:	b16b      	cbz	r3, b46e0 <_Z11wdogHandlerv+0xb0>
   b46c4:	480c      	ldr	r0, [pc, #48]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46c6:	7c03      	ldrb	r3, [r0, #16]
   b46c8:	b92b      	cbnz	r3, b46d6 <_Z11wdogHandlerv+0xa6>
   b46ca:	490c      	ldr	r1, [pc, #48]	; (b46fc <_Z11wdogHandlerv+0xcc>)
   b46cc:	f244 2202 	movw	r2, #16898	; 0x4202
   b46d0:	3010      	adds	r0, #16
   b46d2:	f7ff ffa5 	bl	b4620 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b46d6:	490b      	ldr	r1, [pc, #44]	; (b4704 <_Z11wdogHandlerv+0xd4>)
   b46d8:	4807      	ldr	r0, [pc, #28]	; (b46f8 <_Z11wdogHandlerv+0xc8>)
   b46da:	221e      	movs	r2, #30
   b46dc:	f7ff fe44 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b46e0:	2300      	movs	r3, #0
   b46e2:	e7c5      	b.n	b4670 <_Z11wdogHandlerv+0x40>
   b46e4:	2003dd8d 	.word	0x2003dd8d
   b46e8:	2003dda4 	.word	0x2003dda4
   b46ec:	2003dda0 	.word	0x2003dda0
   b46f0:	2003dd64 	.word	0x2003dd64
   b46f4:	2003dd58 	.word	0x2003dd58
   b46f8:	2003dea0 	.word	0x2003dea0
   b46fc:	2003ddf4 	.word	0x2003ddf4
   b4700:	000c66b5 	.word	0x000c66b5
   b4704:	000c6706 	.word	0x000c6706

000b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4708:	b530      	push	{r4, r5, lr}
   b470a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b470c:	4b1b      	ldr	r3, [pc, #108]	; (b477c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b470e:	9300      	str	r3, [sp, #0]
   b4710:	7913      	ldrb	r3, [r2, #4]
   b4712:	f88d 3004 	strb.w	r3, [sp, #4]
   b4716:	6893      	ldr	r3, [r2, #8]
   b4718:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b471a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b471e:	8993      	ldrh	r3, [r2, #12]
   b4720:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4724:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4726:	460a      	mov	r2, r1
   b4728:	466b      	mov	r3, sp
   b472a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b472e:	4628      	mov	r0, r5
   b4730:	f003 fb00 	bl	b7d34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4734:	b910      	cbnz	r0, b473c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4736:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4738:	b005      	add	sp, #20
   b473a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b473c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b473e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4742:	4628      	mov	r0, r5
   b4744:	f002 ff66 	bl	b7614 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4748:	2101      	movs	r1, #1
   b474a:	4620      	mov	r0, r4
   b474c:	f003 f99c 	bl	b7a88 <_ZN9FatVolume4initEh>
   b4750:	4601      	mov	r1, r0
   b4752:	b168      	cbz	r0, b4770 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4754:	4621      	mov	r1, r4
   b4756:	4628      	mov	r0, r5
   b4758:	f002 fd56 	bl	b7208 <_ZN7FatFile8openRootEP9FatVolume>
   b475c:	2800      	cmp	r0, #0
   b475e:	d0ea      	beq.n	b4736 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4760:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4764:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4768:	d0e5      	beq.n	b4736 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b476a:	4b05      	ldr	r3, [pc, #20]	; (b4780 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b476c:	601d      	str	r5, [r3, #0]
    return true;
   b476e:	e7e3      	b.n	b4738 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4770:	4620      	mov	r0, r4
   b4772:	f003 f989 	bl	b7a88 <_ZN9FatVolume4initEh>
   b4776:	2800      	cmp	r0, #0
   b4778:	d1ec      	bne.n	b4754 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b477a:	e7dc      	b.n	b4736 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b477c:	000c6c14 	.word	0x000c6c14
   b4780:	2003e614 	.word	0x2003e614

000b4784 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4788:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b478a:	7883      	ldrb	r3, [r0, #2]
   b478c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b478e:	af04      	add	r7, sp, #16
   b4790:	4604      	mov	r4, r0
   b4792:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4794:	d14d      	bne.n	b4832 <_Z14processCommandPKchb+0xae>
   b4796:	78c3      	ldrb	r3, [r0, #3]
   b4798:	2b42      	cmp	r3, #66	; 0x42
   b479a:	d176      	bne.n	b488a <_Z14processCommandPKchb+0x106>
        char dataStr[strlen(command)-8];
   b479c:	4620      	mov	r0, r4
   b479e:	f00f fee6 	bl	c456e <strlen>
   b47a2:	3801      	subs	r0, #1
   b47a4:	f020 0007 	bic.w	r0, r0, #7
        }
   b47a8:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b47aa:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b47ae:	4620      	mov	r0, r4
   b47b0:	f00f fedd 	bl	c456e <strlen>
        char dataStr[strlen(command)-8];
   b47b4:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b47b6:	4428      	add	r0, r5
   b47b8:	2600      	movs	r6, #0
   b47ba:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47be:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b47c0:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47c2:	813e      	strh	r6, [r7, #8]
   b47c4:	72be      	strb	r6, [r7, #10]
   b47c6:	f00f fed2 	bl	c456e <strlen>
   b47ca:	4420      	add	r0, r4
   b47cc:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b47d0:	723b      	strb	r3, [r7, #8]
   b47d2:	4620      	mov	r0, r4
   b47d4:	f00f fecb 	bl	c456e <strlen>
   b47d8:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47da:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b47e0:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47e2:	2210      	movs	r2, #16
   b47e4:	f107 0008 	add.w	r0, r7, #8
   b47e8:	f010 fdea 	bl	c53c0 <strtol>
   b47ec:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b47ee:	fa5f f888 	uxtb.w	r8, r8
   b47f2:	f00c ff19 	bl	c1628 <_Z16_fetch_usbserialv>
   b47f6:	49ac      	ldr	r1, [pc, #688]	; (b4aa8 <_Z14processCommandPKchb+0x324>)
   b47f8:	4643      	mov	r3, r8
   b47fa:	4642      	mov	r2, r8
   b47fc:	f7ff fdb4 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4800:	2604      	movs	r6, #4
   b4802:	4620      	mov	r0, r4
   b4804:	f00f feb3 	bl	c456e <strlen>
   b4808:	3802      	subs	r0, #2
   b480a:	4286      	cmp	r6, r0
   b480c:	d216      	bcs.n	b483c <_Z14processCommandPKchb+0xb8>
            if(i < 7) cmdStr[i-4] = command[i];
   b480e:	2e06      	cmp	r6, #6
   b4810:	bf9b      	ittet	ls
   b4812:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b4816:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4818:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b481a:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b481c:	bf8c      	ite	hi
   b481e:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b4820:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4824:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4828:	bf88      	it	hi
   b482a:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b482e:	b2f6      	uxtb	r6, r6
   b4830:	e7e7      	b.n	b4802 <_Z14processCommandPKchb+0x7e>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4832:	2b42      	cmp	r3, #66	; 0x42
   b4834:	d129      	bne.n	b488a <_Z14processCommandPKchb+0x106>
   b4836:	78c3      	ldrb	r3, [r0, #3]
   b4838:	2b31      	cmp	r3, #49	; 0x31
   b483a:	e7ae      	b.n	b479a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b483c:	4540      	cmp	r0, r8
   b483e:	d02e      	beq.n	b489e <_Z14processCommandPKchb+0x11a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4840:	f00c fef2 	bl	c1628 <_Z16_fetch_usbserialv>
   b4844:	4605      	mov	r5, r0
   b4846:	4620      	mov	r0, r4
   b4848:	f00f fe91 	bl	c456e <strlen>
   b484c:	1e82      	subs	r2, r0, #2
   b484e:	4628      	mov	r0, r5
    return m_attr;
   b4850:	4d96      	ldr	r5, [pc, #600]	; (b4aac <_Z14processCommandPKchb+0x328>)
   b4852:	4997      	ldr	r1, [pc, #604]	; (b4ab0 <_Z14processCommandPKchb+0x32c>)
   b4854:	4643      	mov	r3, r8
   b4856:	f7ff fd87 	bl	b4368 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b485a:	7c2b      	ldrb	r3, [r5, #16]
   b485c:	b9cb      	cbnz	r3, b4892 <_Z14processCommandPKchb+0x10e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b485e:	4995      	ldr	r1, [pc, #596]	; (b4ab4 <_Z14processCommandPKchb+0x330>)
   b4860:	f244 2202 	movw	r2, #16898	; 0x4202
   b4864:	f105 0010 	add.w	r0, r5, #16
   b4868:	f7ff feda 	bl	b4620 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b486c:	4992      	ldr	r1, [pc, #584]	; (b4ab8 <_Z14processCommandPKchb+0x334>)
   b486e:	4622      	mov	r2, r4
   b4870:	4628      	mov	r0, r5
   b4872:	f7ff fd79 	bl	b4368 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4876:	f105 0010 	add.w	r0, r5, #16
   b487a:	f002 fecb 	bl	b7614 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b487e:	f00c fed3 	bl	c1628 <_Z16_fetch_usbserialv>
   b4882:	498e      	ldr	r1, [pc, #568]	; (b4abc <_Z14processCommandPKchb+0x338>)
   b4884:	f00b f9a7 	bl	bfbd6 <_ZN5Print7printlnEPKc>
            return;
   b4888:	46cd      	mov	sp, r9
}
   b488a:	3728      	adds	r7, #40	; 0x28
   b488c:	46bd      	mov	sp, r7
   b488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4892:	4989      	ldr	r1, [pc, #548]	; (b4ab8 <_Z14processCommandPKchb+0x334>)
   b4894:	4622      	mov	r2, r4
   b4896:	4628      	mov	r0, r5
   b4898:	f7ff fd66 	bl	b4368 <_ZN5Print8printlnfEPKcz>
   b489c:	e7ef      	b.n	b487e <_Z14processCommandPKchb+0xfa>
        if(!strcmp(cmdStr,"ctl")){
   b489e:	4988      	ldr	r1, [pc, #544]	; (b4ac0 <_Z14processCommandPKchb+0x33c>)
   b48a0:	f107 000c 	add.w	r0, r7, #12
   b48a4:	f00f fe34 	bl	c4510 <strcmp>
   b48a8:	2800      	cmp	r0, #0
   b48aa:	d139      	bne.n	b4920 <_Z14processCommandPKchb+0x19c>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b48ac:	4b85      	ldr	r3, [pc, #532]	; (b4ac4 <_Z14processCommandPKchb+0x340>)
   b48ae:	9302      	str	r3, [sp, #8]
   b48b0:	4b85      	ldr	r3, [pc, #532]	; (b4ac8 <_Z14processCommandPKchb+0x344>)
   b48b2:	9301      	str	r3, [sp, #4]
   b48b4:	4b85      	ldr	r3, [pc, #532]	; (b4acc <_Z14processCommandPKchb+0x348>)
   b48b6:	4986      	ldr	r1, [pc, #536]	; (b4ad0 <_Z14processCommandPKchb+0x34c>)
   b48b8:	9300      	str	r3, [sp, #0]
   b48ba:	f107 0210 	add.w	r2, r7, #16
   b48be:	f107 031c 	add.w	r3, r7, #28
   b48c2:	4628      	mov	r0, r5
   b48c4:	f009 fc6c 	bl	be1a0 <sscanf>
            targetLat = atof(tLat);
   b48c8:	f107 0010 	add.w	r0, r7, #16
   b48cc:	f00f fd7c 	bl	c43c8 <atof>
   b48d0:	ec51 0b10 	vmov	r0, r1, d0
   b48d4:	f00f fd04 	bl	c42e0 <__aeabi_d2f>
   b48d8:	f8df 825c 	ldr.w	r8, [pc, #604]	; b4b38 <_Z14processCommandPKchb+0x3b4>
            targetLon = atof(tLon);
   b48dc:	4e7d      	ldr	r6, [pc, #500]	; (b4ad4 <_Z14processCommandPKchb+0x350>)
            targetLat = atof(tLat);
   b48de:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);
   b48e2:	f107 001c 	add.w	r0, r7, #28
   b48e6:	f00f fd6f 	bl	c43c8 <atof>
   b48ea:	ec51 0b10 	vmov	r0, r1, d0
   b48ee:	f00f fcf7 	bl	c42e0 <__aeabi_d2f>
   b48f2:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b48f4:	f00c fe98 	bl	c1628 <_Z16_fetch_usbserialv>
   b48f8:	4604      	mov	r4, r0
   b48fa:	f8d8 0000 	ldr.w	r0, [r8]
   b48fe:	f00f f99f 	bl	c3c40 <__aeabi_f2d>
   b4902:	4602      	mov	r2, r0
   b4904:	460b      	mov	r3, r1
   b4906:	6830      	ldr	r0, [r6, #0]
   b4908:	e9c7 2300 	strd	r2, r3, [r7]
   b490c:	f00f f998 	bl	c3c40 <__aeabi_f2d>
   b4910:	e9cd 0100 	strd	r0, r1, [sp]
   b4914:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4918:	496f      	ldr	r1, [pc, #444]	; (b4ad8 <_Z14processCommandPKchb+0x354>)
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff fd24 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4920:	496e      	ldr	r1, [pc, #440]	; (b4adc <_Z14processCommandPKchb+0x358>)
   b4922:	f107 000c 	add.w	r0, r7, #12
   b4926:	f00f fdf3 	bl	c4510 <strcmp>
   b492a:	2800      	cmp	r0, #0
   b492c:	d13d      	bne.n	b49aa <_Z14processCommandPKchb+0x226>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b492e:	782b      	ldrb	r3, [r5, #0]
   b4930:	743b      	strb	r3, [r7, #16]
   b4932:	786b      	ldrb	r3, [r5, #1]
   b4934:	747b      	strb	r3, [r7, #17]
   b4936:	78ab      	ldrb	r3, [r5, #2]
   b4938:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b493a:	78eb      	ldrb	r3, [r5, #3]
   b493c:	773b      	strb	r3, [r7, #28]
   b493e:	792b      	ldrb	r3, [r5, #4]
   b4940:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);
   b4942:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b4946:	796b      	ldrb	r3, [r5, #5]
   b4948:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);
   b494a:	f00f fd40 	bl	c43ce <atoi>
   b494e:	4d64      	ldr	r5, [pc, #400]	; (b4ae0 <_Z14processCommandPKchb+0x35c>)
            setRSpeed = atoi(rSpd);
   b4950:	4c64      	ldr	r4, [pc, #400]	; (b4ae4 <_Z14processCommandPKchb+0x360>)
            setLSpeed = atoi(lSpd);
   b4952:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b4954:	f107 001c 	add.w	r0, r7, #28
   b4958:	f00f fd39 	bl	c43ce <atoi>
   b495c:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b495e:	f00c fe63 	bl	c1628 <_Z16_fetch_usbserialv>
   b4962:	782a      	ldrb	r2, [r5, #0]
   b4964:	7823      	ldrb	r3, [r4, #0]
   b4966:	4960      	ldr	r1, [pc, #384]	; (b4ae8 <_Z14processCommandPKchb+0x364>)
   b4968:	f7ff fcfe 	bl	b4368 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b496c:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b496e:	485f      	ldr	r0, [pc, #380]	; (b4aec <_Z14processCommandPKchb+0x368>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4970:	3b5b      	subs	r3, #91	; 0x5b
   b4972:	2b20      	cmp	r3, #32
   b4974:	bf9c      	itt	ls
   b4976:	237b      	movls	r3, #123	; 0x7b
   b4978:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b497a:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b497c:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b497e:	3b5b      	subs	r3, #91	; 0x5b
   b4980:	2b20      	cmp	r3, #32
   b4982:	bf9c      	itt	ls
   b4984:	237b      	movls	r3, #123	; 0x7b
   b4986:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b4988:	f009 fdd6 	bl	be538 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b498c:	7821      	ldrb	r1, [r4, #0]
   b498e:	4858      	ldr	r0, [pc, #352]	; (b4af0 <_Z14processCommandPKchb+0x36c>)
   b4990:	f009 fdd2 	bl	be538 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4994:	4b57      	ldr	r3, [pc, #348]	; (b4af4 <_Z14processCommandPKchb+0x370>)
   b4996:	2201      	movs	r2, #1
   b4998:	701a      	strb	r2, [r3, #0]
   b499a:	f009 f871 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b499e:	4b56      	ldr	r3, [pc, #344]	; (b4af8 <_Z14processCommandPKchb+0x374>)
   b49a0:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b49a2:	4b4a      	ldr	r3, [pc, #296]	; (b4acc <_Z14processCommandPKchb+0x348>)
   b49a4:	2200      	movs	r2, #0
   b49a6:	701a      	strb	r2, [r3, #0]
   b49a8:	e76e      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b49aa:	4954      	ldr	r1, [pc, #336]	; (b4afc <_Z14processCommandPKchb+0x378>)
   b49ac:	f107 000c 	add.w	r0, r7, #12
   b49b0:	f00f fdae 	bl	c4510 <strcmp>
   b49b4:	b918      	cbnz	r0, b49be <_Z14processCommandPKchb+0x23a>
            requestActive = mode;
   b49b6:	4b52      	ldr	r3, [pc, #328]	; (b4b00 <_Z14processCommandPKchb+0x37c>)
   b49b8:	f883 a000 	strb.w	sl, [r3]
   b49bc:	e764      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"pts")){
   b49be:	4951      	ldr	r1, [pc, #324]	; (b4b04 <_Z14processCommandPKchb+0x380>)
   b49c0:	f107 000c 	add.w	r0, r7, #12
   b49c4:	f00f fda4 	bl	c4510 <strcmp>
   b49c8:	b9f0      	cbnz	r0, b4a08 <_Z14processCommandPKchb+0x284>
   b49ca:	4c38      	ldr	r4, [pc, #224]	; (b4aac <_Z14processCommandPKchb+0x328>)
            Serial.println(dataStr);
   b49cc:	f00c fe2c 	bl	c1628 <_Z16_fetch_usbserialv>
   b49d0:	4629      	mov	r1, r5
   b49d2:	f00b f900 	bl	bfbd6 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b49d6:	7c23      	ldrb	r3, [r4, #16]
   b49d8:	b983      	cbnz	r3, b49fc <_Z14processCommandPKchb+0x278>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49da:	4936      	ldr	r1, [pc, #216]	; (b4ab4 <_Z14processCommandPKchb+0x330>)
   b49dc:	f244 2202 	movw	r2, #16898	; 0x4202
   b49e0:	f104 0010 	add.w	r0, r4, #16
   b49e4:	f7ff fe1c 	bl	b4620 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b49e8:	4947      	ldr	r1, [pc, #284]	; (b4b08 <_Z14processCommandPKchb+0x384>)
   b49ea:	462a      	mov	r2, r5
   b49ec:	4620      	mov	r0, r4
   b49ee:	f7ff fcbb 	bl	b4368 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b49f2:	f104 0010 	add.w	r0, r4, #16
   b49f6:	f002 fe0d 	bl	b7614 <_ZN7FatFile5closeEv>
   b49fa:	e745      	b.n	b4888 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b49fc:	4942      	ldr	r1, [pc, #264]	; (b4b08 <_Z14processCommandPKchb+0x384>)
   b49fe:	462a      	mov	r2, r5
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff fcb1 	bl	b4368 <_ZN5Print8printlnfEPKcz>
   b4a06:	e73f      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4a08:	4940      	ldr	r1, [pc, #256]	; (b4b0c <_Z14processCommandPKchb+0x388>)
   b4a0a:	f107 000c 	add.w	r0, r7, #12
   b4a0e:	f00f fd7f 	bl	c4510 <strcmp>
   b4a12:	b920      	cbnz	r0, b4a1e <_Z14processCommandPKchb+0x29a>
   b4a14:	f009 f834 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4a18:	4b3d      	ldr	r3, [pc, #244]	; (b4b10 <_Z14processCommandPKchb+0x38c>)
   b4a1a:	6018      	str	r0, [r3, #0]
   b4a1c:	e734      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"hwa")){
   b4a1e:	493d      	ldr	r1, [pc, #244]	; (b4b14 <_Z14processCommandPKchb+0x390>)
   b4a20:	f107 000c 	add.w	r0, r7, #12
   b4a24:	f00f fd74 	bl	c4510 <strcmp>
   b4a28:	b910      	cbnz	r0, b4a30 <_Z14processCommandPKchb+0x2ac>
            waitForConnection = false;
   b4a2a:	4b3b      	ldr	r3, [pc, #236]	; (b4b18 <_Z14processCommandPKchb+0x394>)
   b4a2c:	7018      	strb	r0, [r3, #0]
   b4a2e:	e72b      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b4a30:	493a      	ldr	r1, [pc, #232]	; (b4b1c <_Z14processCommandPKchb+0x398>)
   b4a32:	f107 000c 	add.w	r0, r7, #12
   b4a36:	f00f fd6b 	bl	c4510 <strcmp>
   b4a3a:	b978      	cbnz	r0, b4a5c <_Z14processCommandPKchb+0x2d8>
            offloadMode = true;
   b4a3c:	4b38      	ldr	r3, [pc, #224]	; (b4b20 <_Z14processCommandPKchb+0x39c>)
            status.setSpeed(LED_SPEED_FAST);
   b4a3e:	4839      	ldr	r0, [pc, #228]	; (b4b24 <_Z14processCommandPKchb+0x3a0>)
            offloadMode = true;
   b4a40:	2201      	movs	r2, #1
   b4a42:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4a44:	4b37      	ldr	r3, [pc, #220]	; (b4b24 <_Z14processCommandPKchb+0x3a0>)
   b4a46:	7c5a      	ldrb	r2, [r3, #17]
   b4a48:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4a4a:	bf1c      	itt	ne
   b4a4c:	2202      	movne	r2, #2
   b4a4e:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4a50:	211e      	movs	r1, #30
    d_.color = color;
   b4a52:	22ff      	movs	r2, #255	; 0xff
   b4a54:	615a      	str	r2, [r3, #20]
   b4a56:	f7ff fd77 	bl	b4548 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4a5a:	e715      	b.n	b4888 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"egp")){ //Emulated GPS point
   b4a5c:	4932      	ldr	r1, [pc, #200]	; (b4b28 <_Z14processCommandPKchb+0x3a4>)
   b4a5e:	f107 000c 	add.w	r0, r7, #12
   b4a62:	f00f fd55 	bl	c4510 <strcmp>
   b4a66:	2800      	cmp	r0, #0
   b4a68:	f47f af0e 	bne.w	b4888 <_Z14processCommandPKchb+0x104>
            sscanf(dataStr,"%s %s",tLat,tLon);
   b4a6c:	f107 0210 	add.w	r2, r7, #16
   b4a70:	f107 031c 	add.w	r3, r7, #28
   b4a74:	492d      	ldr	r1, [pc, #180]	; (b4b2c <_Z14processCommandPKchb+0x3a8>)
   b4a76:	4628      	mov	r0, r5
   b4a78:	f009 fb92 	bl	be1a0 <sscanf>
            latitude = atof(tLat);
   b4a7c:	f107 0010 	add.w	r0, r7, #16
   b4a80:	f00f fca2 	bl	c43c8 <atof>
   b4a84:	ec51 0b10 	vmov	r0, r1, d0
   b4a88:	f00f fc2a 	bl	c42e0 <__aeabi_d2f>
   b4a8c:	4b28      	ldr	r3, [pc, #160]	; (b4b30 <_Z14processCommandPKchb+0x3ac>)
   b4a8e:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4a90:	f107 001c 	add.w	r0, r7, #28
   b4a94:	f00f fc98 	bl	c43c8 <atof>
   b4a98:	ec51 0b10 	vmov	r0, r1, d0
   b4a9c:	f00f fc20 	bl	c42e0 <__aeabi_d2f>
   b4aa0:	4b24      	ldr	r3, [pc, #144]	; (b4b34 <_Z14processCommandPKchb+0x3b0>)
   b4aa2:	6018      	str	r0, [r3, #0]
   b4aa4:	e6f0      	b.n	b4888 <_Z14processCommandPKchb+0x104>
   b4aa6:	bf00      	nop
   b4aa8:	000c6755 	.word	0x000c6755
   b4aac:	2003dea0 	.word	0x2003dea0
   b4ab0:	000c676a 	.word	0x000c676a
   b4ab4:	2003ddf4 	.word	0x2003ddf4
   b4ab8:	000c6787 	.word	0x000c6787
   b4abc:	000c67b3 	.word	0x000c67b3
   b4ac0:	000c67d4 	.word	0x000c67d4
   b4ac4:	2003e586 	.word	0x2003e586
   b4ac8:	2003def9 	.word	0x2003def9
   b4acc:	2003ddd5 	.word	0x2003ddd5
   b4ad0:	000c67d8 	.word	0x000c67d8
   b4ad4:	2003e5d8 	.word	0x2003e5d8
   b4ad8:	000c67e7 	.word	0x000c67e7
   b4adc:	000c6807 	.word	0x000c6807
   b4ae0:	2003e584 	.word	0x2003e584
   b4ae4:	2003e585 	.word	0x2003e585
   b4ae8:	000c680b 	.word	0x000c680b
   b4aec:	2003dd6c 	.word	0x2003dd6c
   b4af0:	2003dd7c 	.word	0x2003dd7c
   b4af4:	2003e5f0 	.word	0x2003e5f0
   b4af8:	2003de14 	.word	0x2003de14
   b4afc:	000c6837 	.word	0x000c6837
   b4b00:	2003e0dc 	.word	0x2003e0dc
   b4b04:	000c683b 	.word	0x000c683b
   b4b08:	000c683f 	.word	0x000c683f
   b4b0c:	000c6862 	.word	0x000c6862
   b4b10:	2003de18 	.word	0x2003de18
   b4b14:	000c6866 	.word	0x000c6866
   b4b18:	2003e5f1 	.word	0x2003e5f1
   b4b1c:	000c686a 	.word	0x000c686a
   b4b20:	2003e0d4 	.word	0x2003e0d4
   b4b24:	2003e58c 	.word	0x2003e58c
   b4b28:	000c686e 	.word	0x000c686e
   b4b2c:	000c6872 	.word	0x000c6872
   b4b30:	2003de20 	.word	0x2003de20
   b4b34:	2003defc 	.word	0x2003defc
   b4b38:	2003e5d4 	.word	0x2003e5d4

000b4b3c <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4b3c:	b510      	push	{r4, lr}
   b4b3e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4b40:	2200      	movs	r2, #0
   b4b42:	2104      	movs	r1, #4
   b4b44:	4620      	mov	r0, r4
   b4b46:	f7ff fe1d 	bl	b4784 <_Z14processCommandPKchb>
    if(logMessages){
   b4b4a:	4b0b      	ldr	r3, [pc, #44]	; (b4b78 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4b4c:	781b      	ldrb	r3, [r3, #0]
   b4b4e:	b193      	cbz	r3, b4b76 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4b50:	480a      	ldr	r0, [pc, #40]	; (b4b7c <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4b52:	7c03      	ldrb	r3, [r0, #16]
   b4b54:	b92b      	cbnz	r3, b4b62 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4b56:	490a      	ldr	r1, [pc, #40]	; (b4b80 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4b58:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b5c:	3010      	adds	r0, #16
   b4b5e:	f7ff fd5f 	bl	b4620 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4b62:	4622      	mov	r2, r4
   b4b64:	4907      	ldr	r1, [pc, #28]	; (b4b84 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4b66:	4805      	ldr	r0, [pc, #20]	; (b4b7c <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4b68:	f7ff fbfe 	bl	b4368 <_ZN5Print8printlnfEPKcz>
}
   b4b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4b70:	4805      	ldr	r0, [pc, #20]	; (b4b88 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4b72:	f002 bd4f 	b.w	b7614 <_ZN7FatFile5closeEv>
}
   b4b76:	bd10      	pop	{r4, pc}
   b4b78:	2003def8 	.word	0x2003def8
   b4b7c:	2003dea0 	.word	0x2003dea0
   b4b80:	2003ddf4 	.word	0x2003ddf4
   b4b84:	000c6878 	.word	0x000c6878
   b4b88:	2003deb0 	.word	0x2003deb0

000b4b8c <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b4b8c:	b500      	push	{lr}
   b4b8e:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4b90:	2300      	movs	r3, #0
   b4b92:	2264      	movs	r2, #100	; 0x64
   b4b94:	a901      	add	r1, sp, #4
   b4b96:	f009 fe2b 	bl	be7f0 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4b9a:	2104      	movs	r1, #4
   b4b9c:	2200      	movs	r2, #0
   b4b9e:	eb0d 0001 	add.w	r0, sp, r1
   b4ba2:	f7ff fdef 	bl	b4784 <_Z14processCommandPKchb>
    if(logMessages){
   b4ba6:	4b0c      	ldr	r3, [pc, #48]	; (b4bd8 <_Z15LTEInputCommand6String+0x4c>)
   b4ba8:	781b      	ldrb	r3, [r3, #0]
   b4baa:	b183      	cbz	r3, b4bce <_Z15LTEInputCommand6String+0x42>
   b4bac:	480b      	ldr	r0, [pc, #44]	; (b4bdc <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bae:	7c03      	ldrb	r3, [r0, #16]
   b4bb0:	b92b      	cbnz	r3, b4bbe <_Z15LTEInputCommand6String+0x32>
   b4bb2:	490b      	ldr	r1, [pc, #44]	; (b4be0 <_Z15LTEInputCommand6String+0x54>)
   b4bb4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4bb8:	3010      	adds	r0, #16
   b4bba:	f7ff fd31 	bl	b4620 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4bbe:	4909      	ldr	r1, [pc, #36]	; (b4be4 <_Z15LTEInputCommand6String+0x58>)
   b4bc0:	4806      	ldr	r0, [pc, #24]	; (b4bdc <_Z15LTEInputCommand6String+0x50>)
   b4bc2:	aa01      	add	r2, sp, #4
   b4bc4:	f7ff fbd0 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4bc8:	4807      	ldr	r0, [pc, #28]	; (b4be8 <_Z15LTEInputCommand6String+0x5c>)
   b4bca:	f002 fd23 	bl	b7614 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4bce:	2001      	movs	r0, #1
   b4bd0:	b01b      	add	sp, #108	; 0x6c
   b4bd2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bd6:	bf00      	nop
   b4bd8:	2003def8 	.word	0x2003def8
   b4bdc:	2003dea0 	.word	0x2003dea0
   b4be0:	2003ddf4 	.word	0x2003ddf4
   b4be4:	000c6878 	.word	0x000c6878
   b4be8:	2003deb0 	.word	0x2003deb0

000b4bec <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4bec:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4bee:	f101 0308 	add.w	r3, r1, #8
   b4bf2:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4bf6:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4bf8:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4bfc:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4bfe:	460a      	mov	r2, r1
   b4c00:	4601      	mov	r1, r0
   b4c02:	4668      	mov	r0, sp
   b4c04:	f00f fc00 	bl	c4408 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c08:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4c0c:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4c12:	b113      	cbz	r3, b4c1a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4c14:	2300      	movs	r3, #0
   b4c16:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4c1a:	f00c fd05 	bl	c1628 <_Z16_fetch_usbserialv>
   b4c1e:	4916      	ldr	r1, [pc, #88]	; (b4c78 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4c20:	f00a ffd9 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4c24:	f00c fd00 	bl	c1628 <_Z16_fetch_usbserialv>
   b4c28:	4629      	mov	r1, r5
   b4c2a:	f00a ffd4 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4c2e:	2201      	movs	r2, #1
   b4c30:	4611      	mov	r1, r2
   b4c32:	4628      	mov	r0, r5
   b4c34:	f7ff fda6 	bl	b4784 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4c38:	782b      	ldrb	r3, [r5, #0]
   b4c3a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4c3e:	2b41      	cmp	r3, #65	; 0x41
   b4c40:	d103      	bne.n	b4c4a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4c42:	f008 ff1d 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b4c46:	4b0d      	ldr	r3, [pc, #52]	; (b4c7c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4c48:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4c4a:	4b0d      	ldr	r3, [pc, #52]	; (b4c80 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4c4c:	781b      	ldrb	r3, [r3, #0]
   b4c4e:	b183      	cbz	r3, b4c72 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4c50:	480c      	ldr	r0, [pc, #48]	; (b4c84 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c52:	7c03      	ldrb	r3, [r0, #16]
   b4c54:	b92b      	cbnz	r3, b4c62 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4c56:	490c      	ldr	r1, [pc, #48]	; (b4c88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4c58:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c5c:	3010      	adds	r0, #16
   b4c5e:	f7ff fcdf 	bl	b4620 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4c62:	490a      	ldr	r1, [pc, #40]	; (b4c8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4c64:	4807      	ldr	r0, [pc, #28]	; (b4c84 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4c66:	462a      	mov	r2, r5
   b4c68:	f7ff fb7e 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c6c:	4808      	ldr	r0, [pc, #32]	; (b4c90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4c6e:	f002 fcd1 	bl	b7614 <_ZN7FatFile5closeEv>
}
   b4c72:	46bd      	mov	sp, r7
   b4c74:	bdb0      	pop	{r4, r5, r7, pc}
   b4c76:	bf00      	nop
   b4c78:	000c6898 	.word	0x000c6898
   b4c7c:	2003dd64 	.word	0x2003dd64
   b4c80:	2003def8 	.word	0x2003def8
   b4c84:	2003dea0 	.word	0x2003dea0
   b4c88:	2003ddf4 	.word	0x2003ddf4
   b4c8c:	000c68a8 	.word	0x000c68a8
   b4c90:	2003deb0 	.word	0x2003deb0

000b4c94 <_Z9setupXBeev>:
void setupXBee(){
   b4c94:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4c96:	f00d f953 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b4c9a:	4908      	ldr	r1, [pc, #32]	; (b4cbc <_Z9setupXBeev+0x28>)
   b4c9c:	f7ff fb2b 	bl	b42f6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4ca0:	2014      	movs	r0, #20
   b4ca2:	f00c f883 	bl	c0dac <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4ca6:	f00d f94b 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b4caa:	4905      	ldr	r1, [pc, #20]	; (b4cc0 <_Z9setupXBeev+0x2c>)
   b4cac:	f7ff fb23 	bl	b42f6 <_ZN5Print6printfEPKcz>
}
   b4cb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4cb4:	2014      	movs	r0, #20
   b4cb6:	f00c b879 	b.w	c0dac <delay>
   b4cba:	bf00      	nop
   b4cbc:	000c7d6b 	.word	0x000c7d6b
   b4cc0:	000c65dc 	.word	0x000c65dc

000b4cc4 <_Z8setupGPSv>:
void setupGPS(){
   b4cc4:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4cc6:	4c15      	ldr	r4, [pc, #84]	; (b4d1c <_Z8setupGPSv+0x58>)
   b4cc8:	2301      	movs	r3, #1
   b4cca:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4ccc:	f00d f974 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b4cd0:	2300      	movs	r3, #0
   b4cd2:	4601      	mov	r1, r0
   b4cd4:	9300      	str	r3, [sp, #0]
   b4cd6:	4812      	ldr	r0, [pc, #72]	; (b4d20 <_Z8setupGPSv+0x5c>)
   b4cd8:	f240 434c 	movw	r3, #1100	; 0x44c
   b4cdc:	2242      	movs	r2, #66	; 0x42
   b4cde:	f008 f8eb 	bl	bceb8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4ce2:	b928      	cbnz	r0, b4cf0 <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4ce4:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4ce6:	f00c fc9f 	bl	c1628 <_Z16_fetch_usbserialv>
   b4cea:	490e      	ldr	r1, [pc, #56]	; (b4d24 <_Z8setupGPSv+0x60>)
   b4cec:	f00a ff73 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4cf0:	f240 424c 	movw	r2, #1100	; 0x44c
   b4cf4:	2101      	movs	r1, #1
   b4cf6:	480a      	ldr	r0, [pc, #40]	; (b4d20 <_Z8setupGPSv+0x5c>)
   b4cf8:	f008 f812 	bl	bcd20 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4cfc:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d00:	2201      	movs	r2, #1
   b4d02:	2100      	movs	r1, #0
   b4d04:	4806      	ldr	r0, [pc, #24]	; (b4d20 <_Z8setupGPSv+0x5c>)
   b4d06:	f007 ffeb 	bl	bcce0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4d0a:	f00d f955 	bl	c1fb8 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4d0e:	4906      	ldr	r1, [pc, #24]	; (b4d28 <_Z8setupGPSv+0x64>)
}
   b4d10:	b002      	add	sp, #8
   b4d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d16:	f00c bdab 	b.w	c1870 <_ZN7TwoWire8setSpeedEm>
   b4d1a:	bf00      	nop
   b4d1c:	2003dd8c 	.word	0x2003dd8c
   b4d20:	2003df54 	.word	0x2003df54
   b4d24:	000c68c8 	.word	0x000c68c8
   b4d28:	00061a80 	.word	0x00061a80
   b4d2c:	00000000 	.word	0x00000000

000b4d30 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4d30:	b510      	push	{r4, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4d32:	2015      	movs	r0, #21
   b4d34:	f00d f8d2 	bl	c1edc <analogRead>
   b4d38:	ee07 0a90 	vmov	s15, r0
   b4d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4d40:	4c37      	ldr	r4, [pc, #220]	; (b4e20 <_Z12readPowerSysv+0xf0>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4d42:	ee17 0a90 	vmov	r0, s15
   b4d46:	f00e ff7b 	bl	c3c40 <__aeabi_f2d>
   b4d4a:	a32d      	add	r3, pc, #180	; (adr r3, b4e00 <_Z12readPowerSysv+0xd0>)
   b4d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d50:	f00e ffce 	bl	c3cf0 <__aeabi_dmul>
   b4d54:	f00f fac4 	bl	c42e0 <__aeabi_d2f>
   b4d58:	4b32      	ldr	r3, [pc, #200]	; (b4e24 <_Z12readPowerSysv+0xf4>)
   b4d5a:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4d5c:	f00e ff70 	bl	c3c40 <__aeabi_f2d>
   b4d60:	a329      	add	r3, pc, #164	; (adr r3, b4e08 <_Z12readPowerSysv+0xd8>)
   b4d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d66:	f00e fe0b 	bl	c3980 <__aeabi_dsub>
   b4d6a:	4b2f      	ldr	r3, [pc, #188]	; (b4e28 <_Z12readPowerSysv+0xf8>)
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	f00e ffbf 	bl	c3cf0 <__aeabi_dmul>
   b4d72:	a327      	add	r3, pc, #156	; (adr r3, b4e10 <_Z12readPowerSysv+0xe0>)
   b4d74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d78:	f00f f8e4 	bl	c3f44 <__aeabi_ddiv>
   b4d7c:	f00f fa68 	bl	c4250 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4d80:	2864      	cmp	r0, #100	; 0x64
   b4d82:	4603      	mov	r3, r0
   b4d84:	bfa8      	it	ge
   b4d86:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4d8c:	2814      	cmp	r0, #20
   b4d8e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4d90:	4b26      	ldr	r3, [pc, #152]	; (b4e2c <_Z12readPowerSysv+0xfc>)
   b4d92:	bfcc      	ite	gt
   b4d94:	2000      	movgt	r0, #0
   b4d96:	2001      	movle	r0, #1
   b4d98:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4d9a:	2010      	movs	r0, #16
   b4d9c:	f00d f89e 	bl	c1edc <analogRead>
   b4da0:	ee07 0a90 	vmov	s15, r0
   b4da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4da8:	ee17 0a90 	vmov	r0, s15
   b4dac:	f00e ff48 	bl	c3c40 <__aeabi_f2d>
   b4db0:	4b1f      	ldr	r3, [pc, #124]	; (b4e30 <_Z12readPowerSysv+0x100>)
   b4db2:	2200      	movs	r2, #0
   b4db4:	f00e ff9c 	bl	c3cf0 <__aeabi_dmul>
   b4db8:	a317      	add	r3, pc, #92	; (adr r3, b4e18 <_Z12readPowerSysv+0xe8>)
   b4dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dbe:	f00f f8c1 	bl	c3f44 <__aeabi_ddiv>
   b4dc2:	f00f fa8d 	bl	c42e0 <__aeabi_d2f>
   b4dc6:	4b1b      	ldr	r3, [pc, #108]	; (b4e34 <_Z12readPowerSysv+0x104>)
   b4dc8:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4dca:	2011      	movs	r0, #17
   b4dcc:	f00d f886 	bl	c1edc <analogRead>
   b4dd0:	ee07 0a90 	vmov	s15, r0
   b4dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4dd8:	ee17 0a90 	vmov	r0, s15
   b4ddc:	f00e ff30 	bl	c3c40 <__aeabi_f2d>
   b4de0:	4b15      	ldr	r3, [pc, #84]	; (b4e38 <_Z12readPowerSysv+0x108>)
   b4de2:	2200      	movs	r2, #0
   b4de4:	f00e ff84 	bl	c3cf0 <__aeabi_dmul>
   b4de8:	a30b      	add	r3, pc, #44	; (adr r3, b4e18 <_Z12readPowerSysv+0xe8>)
   b4dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dee:	f00f f8a9 	bl	c3f44 <__aeabi_ddiv>
   b4df2:	f00f fa75 	bl	c42e0 <__aeabi_d2f>
   b4df6:	4b11      	ldr	r3, [pc, #68]	; (b4e3c <_Z12readPowerSysv+0x10c>)
   b4df8:	6018      	str	r0, [r3, #0]
}
   b4dfa:	7820      	ldrb	r0, [r4, #0]
   b4dfc:	bd10      	pop	{r4, pc}
   b4dfe:	bf00      	nop
   b4e00:	6e04c059 	.word	0x6e04c059
   b4e04:	3f73cddd 	.word	0x3f73cddd
   b4e08:	66666666 	.word	0x66666666
   b4e0c:	402a6666 	.word	0x402a6666
   b4e10:	99999998 	.word	0x99999998
   b4e14:	40099999 	.word	0x40099999
   b4e18:	00000000 	.word	0x00000000
   b4e1c:	40affe00 	.word	0x40affe00
   b4e20:	2003ddbc 	.word	0x2003ddbc
   b4e24:	2003ddc0 	.word	0x2003ddc0
   b4e28:	40590000 	.word	0x40590000
   b4e2c:	2003df00 	.word	0x2003df00
   b4e30:	40408000 	.word	0x40408000
   b4e34:	2003ddb8 	.word	0x2003ddb8
   b4e38:	40308000 	.word	0x40308000
   b4e3c:	2003e588 	.word	0x2003e588

000b4e40 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b4e40:	b538      	push	{r3, r4, r5, lr}
   b4e42:	eef0 7a60 	vmov.f32	s15, s1
   b4e46:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4e4a:	eef0 0a40 	vmov.f32	s1, s0
   b4e4e:	eeb0 0a67 	vmov.f32	s0, s15
   b4e52:	f00d fa9d 	bl	c2390 <atan2f>
   b4e56:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;
   b4e5a:	f00e fef1 	bl	c3c40 <__aeabi_f2d>
   b4e5e:	4b8e      	ldr	r3, [pc, #568]	; (b5098 <_Z18readCompassHeadingff+0x258>)
   b4e60:	2200      	movs	r2, #0
   b4e62:	f00e ff45 	bl	c3cf0 <__aeabi_dmul>
   b4e66:	a384      	add	r3, pc, #528	; (adr r3, b5078 <_Z18readCompassHeadingff+0x238>)
   b4e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e6c:	f00f f86a 	bl	c3f44 <__aeabi_ddiv>
   b4e70:	f00f fa36 	bl	c42e0 <__aeabi_d2f>
   b4e74:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b4e78:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b4e7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e84:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b4e88:	db13      	blt.n	b4eb2 <_Z18readCompassHeadingff+0x72>
   b4e8a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e92:	d50e      	bpl.n	b4eb2 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4e94:	f00e fed4 	bl	c3c40 <__aeabi_f2d>
   b4e98:	4b80      	ldr	r3, [pc, #512]	; (b509c <_Z18readCompassHeadingff+0x25c>)
   b4e9a:	2200      	movs	r2, #0
   b4e9c:	f00e fd70 	bl	c3980 <__aeabi_dsub>
   b4ea0:	4b7f      	ldr	r3, [pc, #508]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ea2:	2200      	movs	r2, #0
   b4ea4:	f00e ff24 	bl	c3cf0 <__aeabi_dmul>
   b4ea8:	4b7e      	ldr	r3, [pc, #504]	; (b50a4 <_Z18readCompassHeadingff+0x264>)
   b4eaa:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4eac:	f00f f84a 	bl	c3f44 <__aeabi_ddiv>
   b4eb0:	e021      	b.n	b4ef6 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4eb2:	ee18 0a10 	vmov	r0, s16
   b4eb6:	f00e fec3 	bl	c3c40 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4eba:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ec2:	eddf 7a79 	vldr	s15, [pc, #484]	; b50a8 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4ec6:	4604      	mov	r4, r0
   b4ec8:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4eca:	db1b      	blt.n	b4f04 <_Z18readCompassHeadingff+0xc4>
   b4ecc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ed4:	d516      	bpl.n	b4f04 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b4ed6:	4b75      	ldr	r3, [pc, #468]	; (b50ac <_Z18readCompassHeadingff+0x26c>)
   b4ed8:	2200      	movs	r2, #0
   b4eda:	f00e fd51 	bl	c3980 <__aeabi_dsub>
   b4ede:	4b70      	ldr	r3, [pc, #448]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ee0:	2200      	movs	r2, #0
   b4ee2:	f00e ff05 	bl	c3cf0 <__aeabi_dmul>
   b4ee6:	4b72      	ldr	r3, [pc, #456]	; (b50b0 <_Z18readCompassHeadingff+0x270>)
   b4ee8:	2200      	movs	r2, #0
   b4eea:	f00f f82b 	bl	c3f44 <__aeabi_ddiv>
   b4eee:	4b6c      	ldr	r3, [pc, #432]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ef0:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4ef2:	f00e fd47 	bl	c3984 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4ef6:	f00f f9f3 	bl	c42e0 <__aeabi_d2f>
}
   b4efa:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4efe:	ee00 0a10 	vmov	s0, r0
}
   b4f02:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b4f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f0c:	eddf 7a69 	vldr	s15, [pc, #420]	; b50b4 <_Z18readCompassHeadingff+0x274>
   b4f10:	db15      	blt.n	b4f3e <_Z18readCompassHeadingff+0xfe>
   b4f12:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f1a:	d510      	bpl.n	b4f3e <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b4f1c:	4b66      	ldr	r3, [pc, #408]	; (b50b8 <_Z18readCompassHeadingff+0x278>)
   b4f1e:	2200      	movs	r2, #0
   b4f20:	4620      	mov	r0, r4
   b4f22:	4629      	mov	r1, r5
   b4f24:	f00e fd2c 	bl	c3980 <__aeabi_dsub>
   b4f28:	4b5d      	ldr	r3, [pc, #372]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	f00e fee0 	bl	c3cf0 <__aeabi_dmul>
   b4f30:	4b62      	ldr	r3, [pc, #392]	; (b50bc <_Z18readCompassHeadingff+0x27c>)
   b4f32:	2200      	movs	r2, #0
   b4f34:	f00f f806 	bl	c3f44 <__aeabi_ddiv>
   b4f38:	4b61      	ldr	r3, [pc, #388]	; (b50c0 <_Z18readCompassHeadingff+0x280>)
   b4f3a:	2200      	movs	r2, #0
   b4f3c:	e7d9      	b.n	b4ef2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b4f3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f46:	db18      	blt.n	b4f7a <_Z18readCompassHeadingff+0x13a>
   b4f48:	eddf 7a5e 	vldr	s15, [pc, #376]	; b50c4 <_Z18readCompassHeadingff+0x284>
   b4f4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f54:	d511      	bpl.n	b4f7a <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4f56:	4b5c      	ldr	r3, [pc, #368]	; (b50c8 <_Z18readCompassHeadingff+0x288>)
   b4f58:	2200      	movs	r2, #0
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	4629      	mov	r1, r5
   b4f5e:	f00e fd0f 	bl	c3980 <__aeabi_dsub>
   b4f62:	4b4f      	ldr	r3, [pc, #316]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4f64:	2200      	movs	r2, #0
   b4f66:	f00e fec3 	bl	c3cf0 <__aeabi_dmul>
   b4f6a:	4b58      	ldr	r3, [pc, #352]	; (b50cc <_Z18readCompassHeadingff+0x28c>)
   b4f6c:	2200      	movs	r2, #0
   b4f6e:	f00e ffe9 	bl	c3f44 <__aeabi_ddiv>
   b4f72:	a343      	add	r3, pc, #268	; (adr r3, b5080 <_Z18readCompassHeadingff+0x240>)
   b4f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f78:	e7bb      	b.n	b4ef2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b4f7a:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b4f7e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f86:	db11      	blt.n	b4fac <_Z18readCompassHeadingff+0x16c>
   b4f88:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f90:	d50c      	bpl.n	b4fac <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4f92:	4b42      	ldr	r3, [pc, #264]	; (b509c <_Z18readCompassHeadingff+0x25c>)
   b4f94:	2200      	movs	r2, #0
   b4f96:	4620      	mov	r0, r4
   b4f98:	4629      	mov	r1, r5
   b4f9a:	f00e fcf1 	bl	c3980 <__aeabi_dsub>
   b4f9e:	4b4c      	ldr	r3, [pc, #304]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b4fa0:	2200      	movs	r2, #0
   b4fa2:	f00e fea5 	bl	c3cf0 <__aeabi_dmul>
   b4fa6:	4b4b      	ldr	r3, [pc, #300]	; (b50d4 <_Z18readCompassHeadingff+0x294>)
   b4fa8:	2200      	movs	r2, #0
   b4faa:	e77f      	b.n	b4eac <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b4fac:	eddf 7a4a 	vldr	s15, [pc, #296]	; b50d8 <_Z18readCompassHeadingff+0x298>
   b4fb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fb8:	db17      	blt.n	b4fea <_Z18readCompassHeadingff+0x1aa>
   b4fba:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fc2:	d512      	bpl.n	b4fea <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b4fc4:	4b45      	ldr	r3, [pc, #276]	; (b50dc <_Z18readCompassHeadingff+0x29c>)
   b4fc6:	2200      	movs	r2, #0
   b4fc8:	4620      	mov	r0, r4
   b4fca:	4629      	mov	r1, r5
   b4fcc:	f00e fcda 	bl	c3984 <__adddf3>
   b4fd0:	4b3f      	ldr	r3, [pc, #252]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b4fd2:	2200      	movs	r2, #0
   b4fd4:	f00e fe8c 	bl	c3cf0 <__aeabi_dmul>
   b4fd8:	4b41      	ldr	r3, [pc, #260]	; (b50e0 <_Z18readCompassHeadingff+0x2a0>)
   b4fda:	2200      	movs	r2, #0
   b4fdc:	f00e ffb2 	bl	c3f44 <__aeabi_ddiv>
   b4fe0:	4b2f      	ldr	r3, [pc, #188]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4fe2:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4fe4:	f00e fccc 	bl	c3980 <__aeabi_dsub>
   b4fe8:	e785      	b.n	b4ef6 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b4fea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b50e4 <_Z18readCompassHeadingff+0x2a4>
   b4fee:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ff6:	db15      	blt.n	b5024 <_Z18readCompassHeadingff+0x1e4>
   b4ff8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5000:	d510      	bpl.n	b5024 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b5002:	4b39      	ldr	r3, [pc, #228]	; (b50e8 <_Z18readCompassHeadingff+0x2a8>)
   b5004:	2200      	movs	r2, #0
   b5006:	4620      	mov	r0, r4
   b5008:	4629      	mov	r1, r5
   b500a:	f00e fcbb 	bl	c3984 <__adddf3>
   b500e:	4b30      	ldr	r3, [pc, #192]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b5010:	2200      	movs	r2, #0
   b5012:	f00e fe6d 	bl	c3cf0 <__aeabi_dmul>
   b5016:	4b35      	ldr	r3, [pc, #212]	; (b50ec <_Z18readCompassHeadingff+0x2ac>)
   b5018:	2200      	movs	r2, #0
   b501a:	f00e ff93 	bl	c3f44 <__aeabi_ddiv>
   b501e:	4b28      	ldr	r3, [pc, #160]	; (b50c0 <_Z18readCompassHeadingff+0x280>)
   b5020:	2200      	movs	r2, #0
   b5022:	e7df      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b5024:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b502c:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b5030:	dd10      	ble.n	b5054 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b5032:	4b2f      	ldr	r3, [pc, #188]	; (b50f0 <_Z18readCompassHeadingff+0x2b0>)
   b5034:	4620      	mov	r0, r4
   b5036:	4629      	mov	r1, r5
   b5038:	f00e fca2 	bl	c3980 <__aeabi_dsub>
   b503c:	4b18      	ldr	r3, [pc, #96]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b503e:	2200      	movs	r2, #0
   b5040:	f00e fe56 	bl	c3cf0 <__aeabi_dmul>
   b5044:	a310      	add	r3, pc, #64	; (adr r3, b5088 <_Z18readCompassHeadingff+0x248>)
   b5046:	e9d3 2300 	ldrd	r2, r3, [r3]
   b504a:	f00e ff7b 	bl	c3f44 <__aeabi_ddiv>
   b504e:	4b12      	ldr	r3, [pc, #72]	; (b5098 <_Z18readCompassHeadingff+0x258>)
   b5050:	2200      	movs	r2, #0
   b5052:	e7c7      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b5054:	4b27      	ldr	r3, [pc, #156]	; (b50f4 <_Z18readCompassHeadingff+0x2b4>)
   b5056:	4620      	mov	r0, r4
   b5058:	4629      	mov	r1, r5
   b505a:	f00e fc93 	bl	c3984 <__adddf3>
   b505e:	a30c      	add	r3, pc, #48	; (adr r3, b5090 <_Z18readCompassHeadingff+0x250>)
   b5060:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5064:	f00e fe44 	bl	c3cf0 <__aeabi_dmul>
   b5068:	4b23      	ldr	r3, [pc, #140]	; (b50f8 <_Z18readCompassHeadingff+0x2b8>)
   b506a:	2200      	movs	r2, #0
   b506c:	f00e ff6a 	bl	c3f44 <__aeabi_ddiv>
   b5070:	a303      	add	r3, pc, #12	; (adr r3, b5080 <_Z18readCompassHeadingff+0x240>)
   b5072:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5076:	e7b5      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
   b5078:	54442d18 	.word	0x54442d18
   b507c:	400921fb 	.word	0x400921fb
   b5080:	00000000 	.word	0x00000000
   b5084:	4060e000 	.word	0x4060e000
   b5088:	00000000 	.word	0x00000000
   b508c:	4063a000 	.word	0x4063a000
   b5090:	bb000000 	.word	0xbb000000
   b5094:	403d3c54 	.word	0x403d3c54
   b5098:	40668000 	.word	0x40668000
   b509c:	40180000 	.word	0x40180000
   b50a0:	40468000 	.word	0x40468000
   b50a4:	40390000 	.word	0x40390000
   b50a8:	42680000 	.word	0x42680000
   b50ac:	403f0000 	.word	0x403f0000
   b50b0:	403b0000 	.word	0x403b0000
   b50b4:	42ac0000 	.word	0x42ac0000
   b50b8:	404d0000 	.word	0x404d0000
   b50bc:	403c0000 	.word	0x403c0000
   b50c0:	40568000 	.word	0x40568000
   b50c4:	42fa0000 	.word	0x42fa0000
   b50c8:	40558000 	.word	0x40558000
   b50cc:	40438000 	.word	0x40438000
   b50d0:	c0468000 	.word	0xc0468000
   b50d4:	c0380000 	.word	0xc0380000
   b50d8:	c2200000 	.word	0xc2200000
   b50dc:	40320000 	.word	0x40320000
   b50e0:	c0360000 	.word	0xc0360000
   b50e4:	c29c0000 	.word	0xc29c0000
   b50e8:	40440000 	.word	0x40440000
   b50ec:	c0430000 	.word	0xc0430000
   b50f0:	405f4000 	.word	0x405f4000
   b50f4:	40538000 	.word	0x40538000
   b50f8:	40598000 	.word	0x40598000
   b50fc:	00000000 	.word	0x00000000

000b5100 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5100:	b510      	push	{r4, lr}
   b5102:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);
   b5106:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b510a:	b082      	sub	sp, #8
  return deg * (3.14159/180);
   b510c:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5110:	eef0 aa41 	vmov.f32	s21, s2
   b5114:	eeb0 aa61 	vmov.f32	s20, s3
   b5118:	eef0 8a60 	vmov.f32	s17, s1
   b511c:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);
   b5120:	f00e fd8e 	bl	c3c40 <__aeabi_f2d>
   b5124:	a342      	add	r3, pc, #264	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5126:	e9d3 2300 	ldrd	r2, r3, [r3]
   b512a:	f00e fde1 	bl	c3cf0 <__aeabi_dmul>
   b512e:	f00f f8d7 	bl	c42e0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5132:	ee07 0a90 	vmov	s15, r0
   b5136:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b513a:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b513e:	f00d f8b1 	bl	c22a4 <sinf>
  return deg * (3.14159/180);
   b5142:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5146:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b514a:	f00e fd79 	bl	c3c40 <__aeabi_f2d>
   b514e:	a338      	add	r3, pc, #224	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5150:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5154:	f00e fdcc 	bl	c3cf0 <__aeabi_dmul>
   b5158:	f00f f8c2 	bl	c42e0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b515c:	ee00 0a10 	vmov	s0, r0
   b5160:	f00d f868 	bl	c2234 <cosf>
  return deg * (3.14159/180);
   b5164:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5168:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b516c:	f00e fd68 	bl	c3c40 <__aeabi_f2d>
   b5170:	a32f      	add	r3, pc, #188	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5172:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5176:	f00e fdbb 	bl	c3cf0 <__aeabi_dmul>
   b517a:	f00f f8b1 	bl	c42e0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b517e:	ee00 0a10 	vmov	s0, r0
   b5182:	f00d f857 	bl	c2234 <cosf>
  return deg * (3.14159/180);
   b5186:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b518a:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b518e:	ee17 0a90 	vmov	r0, s15
   b5192:	f00e fd55 	bl	c3c40 <__aeabi_f2d>
   b5196:	a326      	add	r3, pc, #152	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5198:	e9d3 2300 	ldrd	r2, r3, [r3]
   b519c:	f00e fda8 	bl	c3cf0 <__aeabi_dmul>
   b51a0:	f00f f89e 	bl	c42e0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b51a4:	ee07 0a90 	vmov	s15, r0
   b51a8:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b51ac:	f00d f87a 	bl	c22a4 <sinf>
   b51b0:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b51b4:	ee68 8a80 	vmul.f32	s17, s17, s0
   b51b8:	ee28 8a80 	vmul.f32	s16, s17, s0
   b51bc:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b51c0:	eeb0 0a48 	vmov.f32	s0, s16
   b51c4:	f00d f8e6 	bl	c2394 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b51c8:	ee18 0a10 	vmov	r0, s16
   b51cc:	ee10 4a10 	vmov	r4, s0
   b51d0:	f00e fd36 	bl	c3c40 <__aeabi_f2d>
   b51d4:	4602      	mov	r2, r0
   b51d6:	460b      	mov	r3, r1
   b51d8:	2000      	movs	r0, #0
   b51da:	4913      	ldr	r1, [pc, #76]	; (b5228 <_Z12calcDistanceffff+0x128>)
   b51dc:	f00e fbd0 	bl	c3980 <__aeabi_dsub>
   b51e0:	ec41 0b10 	vmov	d0, r0, r1
   b51e4:	f00d f89a 	bl	c231c <sqrt>
      return atan2(__type(__y), __type(__x));
   b51e8:	4620      	mov	r0, r4
   b51ea:	ed8d 0b00 	vstr	d0, [sp]
   b51ee:	f00e fd27 	bl	c3c40 <__aeabi_f2d>
   b51f2:	ed9d 1b00 	vldr	d1, [sp]
   b51f6:	ec41 0b10 	vmov	d0, r0, r1
   b51fa:	f00d f88d 	bl	c2318 <atan2>
   b51fe:	ec53 2b10 	vmov	r2, r3, d0
   b5202:	ee10 0a10 	vmov	r0, s0
   b5206:	4619      	mov	r1, r3
   b5208:	f00e fbbc 	bl	c3984 <__adddf3>
   b520c:	f00f f868 	bl	c42e0 <__aeabi_d2f>
}
   b5210:	ed9f 0a06 	vldr	s0, [pc, #24]	; b522c <_Z12calcDistanceffff+0x12c>
   b5214:	ee07 0a90 	vmov	s15, r0
   b5218:	ee27 0a80 	vmul.f32	s0, s15, s0
   b521c:	b002      	add	sp, #8
   b521e:	ecbd 8b08 	vpop	{d8-d11}
   b5222:	bd10      	pop	{r4, pc}
   b5224:	f3af 8000 	nop.w
   b5228:	3ff00000 	.word	0x3ff00000
   b522c:	4ac26d70 	.word	0x4ac26d70
   b5230:	a50de270 	.word	0xa50de270
   b5234:	3f91df45 	.word	0x3f91df45

000b5238 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b5238:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){
   b523a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b5242:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b5246:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b524a:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){
   b524e:	dd37      	ble.n	b52c0 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5254:	dd04      	ble.n	b5260 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b5256:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b525a:	ecbd 8b02 	vpop	{d8}
   b525e:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5260:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5310 <_Z9calcDeltaff+0xd8>
   b5264:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5268:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b526c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5274:	dcef      	bgt.n	b5256 <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b5276:	ee10 0a10 	vmov	r0, s0
   b527a:	f00e fce1 	bl	c3c40 <__aeabi_f2d>
   b527e:	4b25      	ldr	r3, [pc, #148]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b5280:	2200      	movs	r2, #0
   b5282:	f00e fb7f 	bl	c3984 <__adddf3>
   b5286:	4602      	mov	r2, r0
   b5288:	460b      	mov	r3, r1
   b528a:	2000      	movs	r0, #0
   b528c:	2100      	movs	r1, #0
   b528e:	f00e fb77 	bl	c3980 <__aeabi_dsub>
   b5292:	4604      	mov	r4, r0
   b5294:	ee18 0a10 	vmov	r0, s16
   b5298:	460d      	mov	r5, r1
   b529a:	f00e fcd1 	bl	c3c40 <__aeabi_f2d>
   b529e:	4602      	mov	r2, r0
   b52a0:	460b      	mov	r3, r1
   b52a2:	2000      	movs	r0, #0
   b52a4:	491b      	ldr	r1, [pc, #108]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52a6:	f00e fb6b 	bl	c3980 <__aeabi_dsub>
   b52aa:	4602      	mov	r2, r0
   b52ac:	460b      	mov	r3, r1
   b52ae:	4620      	mov	r0, r4
   b52b0:	4629      	mov	r1, r5
   b52b2:	f00e fb65 	bl	c3980 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b52b6:	f00f f813 	bl	c42e0 <__aeabi_d2f>
   b52ba:	ee00 0a10 	vmov	s0, r0
   b52be:	e7cc      	b.n	b525a <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b52c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b52c4:	ddc7      	ble.n	b5256 <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b52c6:	eddf 7a12 	vldr	s15, [pc, #72]	; b5310 <_Z9calcDeltaff+0xd8>
   b52ca:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b52ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b52d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b52d6:	d4be      	bmi.n	b5256 <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b52d8:	ee10 0a10 	vmov	r0, s0
   b52dc:	f00e fcb0 	bl	c3c40 <__aeabi_f2d>
   b52e0:	4602      	mov	r2, r0
   b52e2:	460b      	mov	r3, r1
   b52e4:	2000      	movs	r0, #0
   b52e6:	490b      	ldr	r1, [pc, #44]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52e8:	f00e fb4a 	bl	c3980 <__aeabi_dsub>
   b52ec:	4604      	mov	r4, r0
   b52ee:	ee18 0a10 	vmov	r0, s16
   b52f2:	460d      	mov	r5, r1
   b52f4:	f00e fca4 	bl	c3c40 <__aeabi_f2d>
   b52f8:	4b06      	ldr	r3, [pc, #24]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52fa:	2200      	movs	r2, #0
   b52fc:	f00e fb42 	bl	c3984 <__adddf3>
   b5300:	4602      	mov	r2, r0
   b5302:	460b      	mov	r3, r1
   b5304:	4620      	mov	r0, r4
   b5306:	4629      	mov	r1, r5
   b5308:	f00e fb3c 	bl	c3984 <__adddf3>
   b530c:	e7d3      	b.n	b52b6 <_Z9calcDeltaff+0x7e>
   b530e:	bf00      	nop
   b5310:	43340000 	.word	0x43340000
   b5314:	40668000 	.word	0x40668000

000b5318 <_Z15getPositionDatav>:
void getPositionData(){
   b5318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b531c:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){
   b5320:	4c75      	ldr	r4, [pc, #468]	; (b54f8 <_Z15getPositionDatav+0x1e0>)
void getPositionData(){
   b5322:	b0cd      	sub	sp, #308	; 0x134
   b5324:	f008 fbac 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){
   b5328:	6823      	ldr	r3, [r4, #0]
   b532a:	1ac0      	subs	r0, r0, r3
   b532c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b5330:	f240 80d6 	bls.w	b54e0 <_Z15getPositionDatav+0x1c8>
   b5334:	f008 fba4 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;
   b5338:	4b70      	ldr	r3, [pc, #448]	; (b54fc <_Z15getPositionDatav+0x1e4>)
        positionTimer = millis();
   b533a:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;
   b533c:	2501      	movs	r5, #1
        if(myGPS.isConnected()){
   b533e:	4870      	ldr	r0, [pc, #448]	; (b5500 <_Z15getPositionDatav+0x1e8>)
        updateMotorControl = true;
   b5340:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){
   b5342:	f240 414c 	movw	r1, #1100	; 0x44c
   b5346:	f007 fd93 	bl	bce70 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b534a:	4c6e      	ldr	r4, [pc, #440]	; (b5504 <_Z15getPositionDatav+0x1ec>)
   b534c:	2800      	cmp	r0, #0
   b534e:	f000 80cc 	beq.w	b54ea <_Z15getPositionDatav+0x1d2>
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5352:	f240 414c 	movw	r1, #1100	; 0x44c
   b5356:	486a      	ldr	r0, [pc, #424]	; (b5500 <_Z15getPositionDatav+0x1e8>)
   b5358:	ed9f 8a6b 	vldr	s16, [pc, #428]	; b5508 <_Z15getPositionDatav+0x1f0>
   b535c:	f007 fe2b 	bl	bcfb6 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b5360:	ee07 0a90 	vmov	s15, r0
   b5364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5368:	4b68      	ldr	r3, [pc, #416]	; (b550c <_Z15getPositionDatav+0x1f4>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b536a:	4865      	ldr	r0, [pc, #404]	; (b5500 <_Z15getPositionDatav+0x1e8>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b536c:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5370:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5374:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5378:	f007 fdfa 	bl	bcf70 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b537c:	ee07 0a90 	vmov	s15, r0
   b5380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5384:	4b62      	ldr	r3, [pc, #392]	; (b5510 <_Z15getPositionDatav+0x1f8>)
            GPSAvail = true;
   b5386:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5388:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b538c:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();      // get X Y and Z data at once
   b5390:	4860      	ldr	r0, [pc, #384]	; (b5514 <_Z15getPositionDatav+0x1fc>)
   b5392:	f007 fe6b 	bl	bd06c <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);
   b5396:	485f      	ldr	r0, [pc, #380]	; (b5514 <_Z15getPositionDatav+0x1fc>)
   b5398:	a911      	add	r1, sp, #68	; 0x44
   b539a:	f007 fead 	bl	bd0f8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b539e:	4604      	mov	r4, r0
   b53a0:	b140      	cbz	r0, b53b4 <_Z15getPositionDatav+0x9c>
   b53a2:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
   b53a6:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b53aa:	f7ff fd49 	bl	b4e40 <_Z18readCompassHeadingff>
   b53ae:	4b5a      	ldr	r3, [pc, #360]	; (b5518 <_Z15getPositionDatav+0x200>)
   b53b0:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b53b4:	4e59      	ldr	r6, [pc, #356]	; (b551c <_Z15getPositionDatav+0x204>)
   b53b6:	ed9f 6a5a 	vldr	s12, [pc, #360]	; b5520 <_Z15getPositionDatav+0x208>
   b53ba:	ed96 7a00 	vldr	s14, [r6]
   b53be:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b53c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53c6:	f2c0 808b 	blt.w	b54e0 <_Z15getPositionDatav+0x1c8>
   b53ca:	eddf 6a56 	vldr	s13, [pc, #344]	; b5524 <_Z15getPositionDatav+0x20c>
   b53ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b53d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53d6:	f200 8083 	bhi.w	b54e0 <_Z15getPositionDatav+0x1c8>
   b53da:	4f53      	ldr	r7, [pc, #332]	; (b5528 <_Z15getPositionDatav+0x210>)
   b53dc:	edd7 7a00 	vldr	s15, [r7]
   b53e0:	eef4 7ac6 	vcmpe.f32	s15, s12
   b53e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53e8:	db7a      	blt.n	b54e0 <_Z15getPositionDatav+0x1c8>
   b53ea:	eef4 7ae6 	vcmpe.f32	s15, s13
   b53ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53f2:	d875      	bhi.n	b54e0 <_Z15getPositionDatav+0x1c8>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b53f4:	f8df 9114 	ldr.w	r9, [pc, #276]	; b550c <_Z15getPositionDatav+0x1f4>
   b53f8:	4d45      	ldr	r5, [pc, #276]	; (b5510 <_Z15getPositionDatav+0x1f8>)
   b53fa:	edd9 0a00 	vldr	s1, [r9]
   b53fe:	ed95 0a00 	vldr	s0, [r5]
   b5402:	f8df 8138 	ldr.w	r8, [pc, #312]	; b553c <_Z15getPositionDatav+0x224>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5406:	f8df b138 	ldr.w	fp, [pc, #312]	; b5540 <_Z15getPositionDatav+0x228>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b540a:	f8df a138 	ldr.w	sl, [pc, #312]	; b5544 <_Z15getPositionDatav+0x22c>
  { return __builtin_atan2f(__y, __x); }
   b540e:	ee77 0a60 	vsub.f32	s1, s14, s1
   b5412:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b5416:	f00c ffbb 	bl	c2390 <atan2f>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b541a:	eddf 7a44 	vldr	s15, [pc, #272]	; b552c <_Z15getPositionDatav+0x214>
   b541e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5422:	ee17 0a90 	vmov	r0, s15
   b5426:	f00e fc0b 	bl	c3c40 <__aeabi_f2d>
   b542a:	a331      	add	r3, pc, #196	; (adr r3, b54f0 <_Z15getPositionDatav+0x1d8>)
   b542c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5430:	f00e fd88 	bl	c3f44 <__aeabi_ddiv>
   b5434:	f00e ff54 	bl	c42e0 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5438:	edd5 1a00 	vldr	s3, [r5]
   b543c:	ed97 1a00 	vldr	s2, [r7]
   b5440:	edd9 0a00 	vldr	s1, [r9]
   b5444:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b5448:	f8c8 0000 	str.w	r0, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b544c:	f7ff fe58 	bl	b5100 <_Z12calcDistanceffff>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5450:	4b31      	ldr	r3, [pc, #196]	; (b5518 <_Z15getPositionDatav+0x200>)
   b5452:	edd8 0a00 	vldr	s1, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5456:	ed8b 0a00 	vstr	s0, [fp]
            targetDelta = calcDelta(compassHeading, travelHeading);
   b545a:	ed93 0a00 	vldr	s0, [r3]
   b545e:	f7ff feeb 	bl	b5238 <_Z9calcDeltaff>
   b5462:	ed8a 0a00 	vstr	s0, [sl]
   b5466:	f008 fb0b 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();
   b546a:	4b31      	ldr	r3, [pc, #196]	; (b5530 <_Z15getPositionDatav+0x218>)
   b546c:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;
   b546e:	b114      	cbz	r4, b5476 <_Z15getPositionDatav+0x15e>
   b5470:	4b30      	ldr	r3, [pc, #192]	; (b5534 <_Z15getPositionDatav+0x21c>)
   b5472:	2201      	movs	r2, #1
   b5474:	701a      	strb	r2, [r3, #0]
            sprintf(tempbuf,"Lat: %f Lon %f TLat: %f TLon: %f, Compass: %f, Travel hd: %f, T Delta: %f, Dist: %f", latitude, longitude, targetLat, targetLon, compassHeading, travelHeading, targetDelta, travelDistance);
   b5476:	f8d9 0000 	ldr.w	r0, [r9]
   b547a:	f00e fbe1 	bl	c3c40 <__aeabi_f2d>
   b547e:	4602      	mov	r2, r0
   b5480:	460b      	mov	r3, r1
   b5482:	f8db 0000 	ldr.w	r0, [fp]
   b5486:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   b548a:	f00e fbd9 	bl	c3c40 <__aeabi_f2d>
   b548e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5492:	f8da 0000 	ldr.w	r0, [sl]
   b5496:	f00e fbd3 	bl	c3c40 <__aeabi_f2d>
   b549a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b549e:	f8d8 0000 	ldr.w	r0, [r8]
   b54a2:	f00e fbcd 	bl	c3c40 <__aeabi_f2d>
   b54a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b54aa:	4b1b      	ldr	r3, [pc, #108]	; (b5518 <_Z15getPositionDatav+0x200>)
   b54ac:	6818      	ldr	r0, [r3, #0]
   b54ae:	f00e fbc7 	bl	c3c40 <__aeabi_f2d>
   b54b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b54b6:	6838      	ldr	r0, [r7, #0]
   b54b8:	f00e fbc2 	bl	c3c40 <__aeabi_f2d>
   b54bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b54c0:	6830      	ldr	r0, [r6, #0]
   b54c2:	f00e fbbd 	bl	c3c40 <__aeabi_f2d>
   b54c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b54ca:	6828      	ldr	r0, [r5, #0]
   b54cc:	f00e fbb8 	bl	c3c40 <__aeabi_f2d>
   b54d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b54d4:	e9cd 0100 	strd	r0, r1, [sp]
   b54d8:	4917      	ldr	r1, [pc, #92]	; (b5538 <_Z15getPositionDatav+0x220>)
   b54da:	a81a      	add	r0, sp, #104	; 0x68
   b54dc:	f008 fe58 	bl	be190 <sprintf>
}
   b54e0:	b04d      	add	sp, #308	; 0x134
   b54e2:	ecbd 8b02 	vpop	{d8}
   b54e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else GPSAvail = false;
   b54ea:	7020      	strb	r0, [r4, #0]
   b54ec:	e750      	b.n	b5390 <_Z15getPositionDatav+0x78>
   b54ee:	bf00      	nop
   b54f0:	54442d18 	.word	0x54442d18
   b54f4:	400921fb 	.word	0x400921fb
   b54f8:	2003e0d8 	.word	0x2003e0d8
   b54fc:	2003e5f0 	.word	0x2003e5f0
   b5500:	2003df54 	.word	0x2003df54
   b5504:	2003dd8c 	.word	0x2003dd8c
   b5508:	49742400 	.word	0x49742400
   b550c:	2003de20 	.word	0x2003de20
   b5510:	2003defc 	.word	0x2003defc
   b5514:	2003de44 	.word	0x2003de44
   b5518:	2003ddcc 	.word	0x2003ddcc
   b551c:	2003e5d4 	.word	0x2003e5d4
   b5520:	c2b40000 	.word	0xc2b40000
   b5524:	42b40000 	.word	0x42b40000
   b5528:	2003e5d8 	.word	0x2003e5d8
   b552c:	43340000 	.word	0x43340000
   b5530:	2003de1c 	.word	0x2003de1c
   b5534:	2003e5dc 	.word	0x2003e5dc
   b5538:	000c68e8 	.word	0x000c68e8
   b553c:	2003e5e4 	.word	0x2003e5e4
   b5540:	2003e5e0 	.word	0x2003e5e0
   b5544:	2003e5d0 	.word	0x2003e5d0

000b5548 <_Z12updateMotorsv>:
void updateMotors(){
   b5548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b554c:	ed2d 8b02 	vpush	{d8}
    if(updateMotorControl){
   b5550:	4b77      	ldr	r3, [pc, #476]	; (b5730 <_Z12updateMotorsv+0x1e8>)
   b5552:	781b      	ldrb	r3, [r3, #0]
   b5554:	2b00      	cmp	r3, #0
   b5556:	d048      	beq.n	b55ea <_Z12updateMotorsv+0xa2>
        if(driveMode == 1 || driveMode == 2){       //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5558:	4b76      	ldr	r3, [pc, #472]	; (b5734 <_Z12updateMotorsv+0x1ec>)
   b555a:	4c77      	ldr	r4, [pc, #476]	; (b5738 <_Z12updateMotorsv+0x1f0>)
   b555c:	781b      	ldrb	r3, [r3, #0]
   b555e:	4d77      	ldr	r5, [pc, #476]	; (b573c <_Z12updateMotorsv+0x1f4>)
   b5560:	3b01      	subs	r3, #1
   b5562:	2b01      	cmp	r3, #1
   b5564:	f200 8093 	bhi.w	b568e <_Z12updateMotorsv+0x146>
            if(travelDistance < MTR_CUTOFF_RAD){
   b5568:	4b75      	ldr	r3, [pc, #468]	; (b5740 <_Z12updateMotorsv+0x1f8>)
   b556a:	edd3 7a00 	vldr	s15, [r3]
   b556e:	4b75      	ldr	r3, [pc, #468]	; (b5744 <_Z12updateMotorsv+0x1fc>)
   b5570:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b5574:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b557c:	d539      	bpl.n	b55f2 <_Z12updateMotorsv+0xaa>
                pointArrived = true;
   b557e:	2201      	movs	r2, #1
   b5580:	701a      	strb	r2, [r3, #0]
                    setLSpeed = 90;
   b5582:	235a      	movs	r3, #90	; 0x5a
   b5584:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5586:	702b      	strb	r3, [r5, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5588:	7823      	ldrb	r3, [r4, #0]
        if(leftMotorSpeed < setLSpeed){
   b558a:	4a6f      	ldr	r2, [pc, #444]	; (b5748 <_Z12updateMotorsv+0x200>)
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b558c:	3b43      	subs	r3, #67	; 0x43
   b558e:	2b16      	cmp	r3, #22
   b5590:	bf9c      	itt	ls
   b5592:	2343      	movls	r3, #67	; 0x43
   b5594:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b5596:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b5598:	7821      	ldrb	r1, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b559a:	3b43      	subs	r3, #67	; 0x43
   b559c:	2b16      	cmp	r3, #22
   b559e:	bf9c      	itt	ls
   b55a0:	2343      	movls	r3, #67	; 0x43
   b55a2:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b55a4:	7813      	ldrb	r3, [r2, #0]
   b55a6:	428b      	cmp	r3, r1
   b55a8:	f080 80af 	bcs.w	b570a <_Z12updateMotorsv+0x1c2>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;
   b55ac:	1ac8      	subs	r0, r1, r3
   b55ae:	2803      	cmp	r0, #3
   b55b0:	f340 80b2 	ble.w	b5718 <_Z12updateMotorsv+0x1d0>
   b55b4:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b55b6:	7013      	strb	r3, [r2, #0]
        if(rightMotorSpeed < setRSpeed){
   b55b8:	4c64      	ldr	r4, [pc, #400]	; (b574c <_Z12updateMotorsv+0x204>)
   b55ba:	7829      	ldrb	r1, [r5, #0]
   b55bc:	7823      	ldrb	r3, [r4, #0]
   b55be:	428b      	cmp	r3, r1
   b55c0:	f080 80ac 	bcs.w	b571c <_Z12updateMotorsv+0x1d4>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD;
   b55c4:	1ac8      	subs	r0, r1, r3
   b55c6:	2803      	cmp	r0, #3
   b55c8:	f340 80af 	ble.w	b572a <_Z12updateMotorsv+0x1e2>
   b55cc:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b55ce:	7023      	strb	r3, [r4, #0]
        ESCL.write(leftMotorSpeed);
   b55d0:	7811      	ldrb	r1, [r2, #0]
   b55d2:	485f      	ldr	r0, [pc, #380]	; (b5750 <_Z12updateMotorsv+0x208>)
   b55d4:	f008 ffb0 	bl	be538 <_ZN5Servo5writeEi>
        ESCR.write(180-rightMotorSpeed);
   b55d8:	7821      	ldrb	r1, [r4, #0]
   b55da:	485e      	ldr	r0, [pc, #376]	; (b5754 <_Z12updateMotorsv+0x20c>)
   b55dc:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b55e0:	f008 ffaa 	bl	be538 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b55e4:	4a52      	ldr	r2, [pc, #328]	; (b5730 <_Z12updateMotorsv+0x1e8>)
   b55e6:	2300      	movs	r3, #0
   b55e8:	7013      	strb	r3, [r2, #0]
}
   b55ea:	ecbd 8b02 	vpop	{d8}
   b55ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){
   b55f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b55f6:	eef4 7ac7 	vcmpe.f32	s15, s14
   b55fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b55fe:	d55d      	bpl.n	b56bc <_Z12updateMotorsv+0x174>
                if(pointArrived){
   b5600:	f893 b000 	ldrb.w	fp, [r3]
   b5604:	f1bb 0f00 	cmp.w	fp, #0
   b5608:	d1bb      	bne.n	b5582 <_Z12updateMotorsv+0x3a>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);
   b560a:	4b53      	ldr	r3, [pc, #332]	; (b5758 <_Z12updateMotorsv+0x210>)
   b560c:	eddf 8a53 	vldr	s17, [pc, #332]	; b575c <_Z12updateMotorsv+0x214>
   b5610:	ed93 8a00 	vldr	s16, [r3]
   b5614:	4b52      	ldr	r3, [pc, #328]	; (b5760 <_Z12updateMotorsv+0x218>)
   b5616:	eee8 8a28 	vfma.f32	s17, s16, s17
   b561a:	ed93 7a00 	vldr	s14, [r3]
   b561e:	ee17 0a90 	vmov	r0, s15
   b5622:	ee28 8a07 	vmul.f32	s16, s16, s14
   b5626:	f00e fb0b 	bl	c3c40 <__aeabi_f2d>
   b562a:	4b4e      	ldr	r3, [pc, #312]	; (b5764 <_Z12updateMotorsv+0x21c>)
   b562c:	2200      	movs	r2, #0
   b562e:	f00e fb5f 	bl	c3cf0 <__aeabi_dmul>
   b5632:	ee78 7a88 	vadd.f32	s15, s17, s16
   b5636:	4606      	mov	r6, r0
   b5638:	460f      	mov	r7, r1
   b563a:	ee17 0a90 	vmov	r0, s15
   b563e:	f00e faff 	bl	c3c40 <__aeabi_f2d>
   b5642:	4632      	mov	r2, r6
   b5644:	463b      	mov	r3, r7
   b5646:	f00e fb53 	bl	c3cf0 <__aeabi_dmul>
   b564a:	f00e fe01 	bl	c4250 <__aeabi_d2iz>
   b564e:	4682      	mov	sl, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5650:	ee18 0a90 	vmov	r0, s17
   b5654:	f00e faf4 	bl	c3c40 <__aeabi_f2d>
   b5658:	4680      	mov	r8, r0
   b565a:	ee18 0a10 	vmov	r0, s16
   b565e:	4689      	mov	r9, r1
   b5660:	f00e faee 	bl	c3c40 <__aeabi_f2d>
   b5664:	4632      	mov	r2, r6
   b5666:	463b      	mov	r3, r7
   b5668:	f00e fb42 	bl	c3cf0 <__aeabi_dmul>
   b566c:	4602      	mov	r2, r0
   b566e:	460b      	mov	r3, r1
   b5670:	4640      	mov	r0, r8
   b5672:	4649      	mov	r1, r9
   b5674:	f00e f984 	bl	c3980 <__aeabi_dsub>
   b5678:	f00e fdea 	bl	c4250 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;
   b567c:	f1ba 0f00 	cmp.w	sl, #0
   b5680:	da12      	bge.n	b56a8 <_Z12updateMotorsv+0x160>
   b5682:	f884 b000 	strb.w	fp, [r4]
                    if(Rset < 0) setRSpeed = 0;
   b5686:	2800      	cmp	r0, #0
   b5688:	da14      	bge.n	b56b4 <_Z12updateMotorsv+0x16c>
   b568a:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b568c:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b568e:	7823      	ldrb	r3, [r4, #0]
   b5690:	3b5b      	subs	r3, #91	; 0x5b
   b5692:	2b20      	cmp	r3, #32
   b5694:	bf9c      	itt	ls
   b5696:	237b      	movls	r3, #123	; 0x7b
   b5698:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b569a:	782b      	ldrb	r3, [r5, #0]
   b569c:	3b5b      	subs	r3, #91	; 0x5b
   b569e:	2b20      	cmp	r3, #32
   b56a0:	f63f af72 	bhi.w	b5588 <_Z12updateMotorsv+0x40>
   b56a4:	237b      	movs	r3, #123	; 0x7b
   b56a6:	e76e      	b.n	b5586 <_Z12updateMotorsv+0x3e>
                    else if(Lset > 180) setLSpeed = 180;
   b56a8:	f1ba 0fb4 	cmp.w	sl, #180	; 0xb4
   b56ac:	bfc4      	itt	gt
   b56ae:	23b4      	movgt	r3, #180	; 0xb4
   b56b0:	7023      	strbgt	r3, [r4, #0]
   b56b2:	e7e8      	b.n	b5686 <_Z12updateMotorsv+0x13e>
                    else if(Rset > 180) setRSpeed = 180;
   b56b4:	28b4      	cmp	r0, #180	; 0xb4
   b56b6:	ddea      	ble.n	b568e <_Z12updateMotorsv+0x146>
   b56b8:	23b4      	movs	r3, #180	; 0xb4
   b56ba:	e7e7      	b.n	b568c <_Z12updateMotorsv+0x144>
                pointArrived = false;
   b56bc:	2100      	movs	r1, #0
   b56be:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56c0:	4b25      	ldr	r3, [pc, #148]	; (b5758 <_Z12updateMotorsv+0x210>)
   b56c2:	eddf 7a26 	vldr	s15, [pc, #152]	; b575c <_Z12updateMotorsv+0x214>
   b56c6:	edd3 6a00 	vldr	s13, [r3]
   b56ca:	4b25      	ldr	r3, [pc, #148]	; (b5760 <_Z12updateMotorsv+0x218>)
   b56cc:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b56d0:	ed93 6a00 	vldr	s12, [r3]
   b56d4:	eeb0 7a67 	vmov.f32	s14, s15
   b56d8:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56dc:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56e8:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;
   b56ec:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56ee:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;
   b56f2:	da05      	bge.n	b5700 <_Z12updateMotorsv+0x1b8>
   b56f4:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b56f6:	2b00      	cmp	r3, #0
   b56f8:	dbc7      	blt.n	b568a <_Z12updateMotorsv+0x142>
                else if(Rset > 180) setRSpeed = 180;
   b56fa:	2bb4      	cmp	r3, #180	; 0xb4
   b56fc:	dcdc      	bgt.n	b56b8 <_Z12updateMotorsv+0x170>
   b56fe:	e7c5      	b.n	b568c <_Z12updateMotorsv+0x144>
                else if(Lset > 180) setLSpeed = 180;
   b5700:	2ab4      	cmp	r2, #180	; 0xb4
   b5702:	bfc8      	it	gt
   b5704:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5706:	7022      	strb	r2, [r4, #0]
   b5708:	e7f5      	b.n	b56f6 <_Z12updateMotorsv+0x1ae>
        else if(leftMotorSpeed > setLSpeed){
   b570a:	f67f af55 	bls.w	b55b8 <_Z12updateMotorsv+0x70>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b570e:	1a58      	subs	r0, r3, r1
   b5710:	2803      	cmp	r0, #3
   b5712:	dd01      	ble.n	b5718 <_Z12updateMotorsv+0x1d0>
   b5714:	3b03      	subs	r3, #3
   b5716:	e74e      	b.n	b55b6 <_Z12updateMotorsv+0x6e>
            else leftMotorSpeed = setLSpeed;
   b5718:	7011      	strb	r1, [r2, #0]
   b571a:	e74d      	b.n	b55b8 <_Z12updateMotorsv+0x70>
        else if(rightMotorSpeed > setRSpeed){
   b571c:	f67f af58 	bls.w	b55d0 <_Z12updateMotorsv+0x88>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b5720:	1a58      	subs	r0, r3, r1
   b5722:	2803      	cmp	r0, #3
   b5724:	dd01      	ble.n	b572a <_Z12updateMotorsv+0x1e2>
   b5726:	3b03      	subs	r3, #3
   b5728:	e751      	b.n	b55ce <_Z12updateMotorsv+0x86>
            else rightMotorSpeed = setRSpeed;
   b572a:	7021      	strb	r1, [r4, #0]
   b572c:	e750      	b.n	b55d0 <_Z12updateMotorsv+0x88>
   b572e:	bf00      	nop
   b5730:	2003e5f0 	.word	0x2003e5f0
   b5734:	2003ddd5 	.word	0x2003ddd5
   b5738:	2003e584 	.word	0x2003e584
   b573c:	2003e585 	.word	0x2003e585
   b5740:	2003e5e0 	.word	0x2003e5e0
   b5744:	2003e0d5 	.word	0x2003e0d5
   b5748:	2003de40 	.word	0x2003de40
   b574c:	2003e0dd 	.word	0x2003e0dd
   b5750:	2003dd6c 	.word	0x2003dd6c
   b5754:	2003dd7c 	.word	0x2003dd7c
   b5758:	2003db44 	.word	0x2003db44
   b575c:	42b40000 	.word	0x42b40000
   b5760:	2003e5d0 	.word	0x2003e5d0
   b5764:	3fd00000 	.word	0x3fd00000

000b5768 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b576c:	4dae      	ldr	r5, [pc, #696]	; (b5a28 <_Z13sensorHandlerv+0x2c0>)
void sensorHandler(){
   b576e:	b097      	sub	sp, #92	; 0x5c
   b5770:	f008 f986 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b5774:	682b      	ldr	r3, [r5, #0]
   b5776:	4283      	cmp	r3, r0
   b5778:	f080 8107 	bcs.w	b598a <_Z13sensorHandlerv+0x222>
   b577c:	4eab      	ldr	r6, [pc, #684]	; (b5a2c <_Z13sensorHandlerv+0x2c4>)
   b577e:	7833      	ldrb	r3, [r6, #0]
   b5780:	2b00      	cmp	r3, #0
   b5782:	f000 8102 	beq.w	b598a <_Z13sensorHandlerv+0x222>
        if(Wire.requestFrom(PHADDR, 20, 1)){
   b5786:	f00c fc17 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b578a:	2301      	movs	r3, #1
   b578c:	2214      	movs	r2, #20
   b578e:	2163      	movs	r1, #99	; 0x63
   b5790:	f00c f88f 	bl	c18b2 <_ZN7TwoWire11requestFromEhjh>
   b5794:	b1e8      	cbz	r0, b57d2 <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5796:	f00c fc0f 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b579a:	6803      	ldr	r3, [r0, #0]
   b579c:	695b      	ldr	r3, [r3, #20]
   b579e:	4798      	blx	r3
            int c = 0;
   b57a0:	ac11      	add	r4, sp, #68	; 0x44
   b57a2:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b57a4:	f00c fc08 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b57a8:	6803      	ldr	r3, [r0, #0]
   b57aa:	691b      	ldr	r3, [r3, #16]
   b57ac:	4798      	blx	r3
   b57ae:	b138      	cbz	r0, b57c0 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();
   b57b0:	f00c fc02 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b57b4:	6803      	ldr	r3, [r0, #0]
   b57b6:	695b      	ldr	r3, [r3, #20]
   b57b8:	4798      	blx	r3
   b57ba:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b57be:	e7f1      	b.n	b57a4 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);
   b57c0:	4638      	mov	r0, r7
   b57c2:	f00e fe01 	bl	c43c8 <atof>
   b57c6:	ec51 0b10 	vmov	r0, r1, d0
   b57ca:	f00e fd89 	bl	c42e0 <__aeabi_d2f>
   b57ce:	4b98      	ldr	r3, [pc, #608]	; (b5a30 <_Z13sensorHandlerv+0x2c8>)
   b57d0:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b57d2:	f00c fbf1 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b57d6:	2301      	movs	r3, #1
   b57d8:	2214      	movs	r2, #20
   b57da:	2164      	movs	r1, #100	; 0x64
   b57dc:	f00c f869 	bl	c18b2 <_ZN7TwoWire11requestFromEhjh>
   b57e0:	b1e8      	cbz	r0, b581e <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b57e2:	f00c fbe9 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b57e6:	6803      	ldr	r3, [r0, #0]
   b57e8:	695b      	ldr	r3, [r3, #20]
   b57ea:	4798      	blx	r3
            int c = 0;
   b57ec:	ac11      	add	r4, sp, #68	; 0x44
   b57ee:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b57f0:	f00c fbe2 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b57f4:	6803      	ldr	r3, [r0, #0]
   b57f6:	691b      	ldr	r3, [r3, #16]
   b57f8:	4798      	blx	r3
   b57fa:	b138      	cbz	r0, b580c <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b57fc:	f00c fbdc 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5800:	6803      	ldr	r3, [r0, #0]
   b5802:	695b      	ldr	r3, [r3, #20]
   b5804:	4798      	blx	r3
   b5806:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b580a:	e7f1      	b.n	b57f0 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b580c:	4638      	mov	r0, r7
   b580e:	f00e fddb 	bl	c43c8 <atof>
   b5812:	ec51 0b10 	vmov	r0, r1, d0
   b5816:	f00e fd63 	bl	c42e0 <__aeabi_d2f>
   b581a:	4b86      	ldr	r3, [pc, #536]	; (b5a34 <_Z13sensorHandlerv+0x2cc>)
   b581c:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b581e:	f00c fbcb 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5822:	2301      	movs	r3, #1
   b5824:	2214      	movs	r2, #20
   b5826:	2165      	movs	r1, #101	; 0x65
   b5828:	f00c f843 	bl	c18b2 <_ZN7TwoWire11requestFromEhjh>
   b582c:	b1e8      	cbz	r0, b586a <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b582e:	f00c fbc3 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5832:	6803      	ldr	r3, [r0, #0]
   b5834:	695b      	ldr	r3, [r3, #20]
   b5836:	4798      	blx	r3
            int c = 0;
   b5838:	ac11      	add	r4, sp, #68	; 0x44
   b583a:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b583c:	f00c fbbc 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5840:	6803      	ldr	r3, [r0, #0]
   b5842:	691b      	ldr	r3, [r3, #16]
   b5844:	4798      	blx	r3
   b5846:	b138      	cbz	r0, b5858 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b5848:	f00c fbb6 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b584c:	6803      	ldr	r3, [r0, #0]
   b584e:	695b      	ldr	r3, [r3, #20]
   b5850:	4798      	blx	r3
   b5852:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5856:	e7f1      	b.n	b583c <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b5858:	4638      	mov	r0, r7
   b585a:	f00e fdb5 	bl	c43c8 <atof>
   b585e:	ec51 0b10 	vmov	r0, r1, d0
   b5862:	f00e fd3d 	bl	c42e0 <__aeabi_d2f>
   b5866:	4b74      	ldr	r3, [pc, #464]	; (b5a38 <_Z13sensorHandlerv+0x2d0>)
   b5868:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b586a:	f00c fba5 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b586e:	2301      	movs	r3, #1
   b5870:	2214      	movs	r2, #20
   b5872:	2166      	movs	r1, #102	; 0x66
   b5874:	f00c f81d 	bl	c18b2 <_ZN7TwoWire11requestFromEhjh>
   b5878:	b1e8      	cbz	r0, b58b6 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b587a:	f00c fb9d 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b587e:	6803      	ldr	r3, [r0, #0]
   b5880:	695b      	ldr	r3, [r3, #20]
   b5882:	4798      	blx	r3
            int c = 0;
   b5884:	ac11      	add	r4, sp, #68	; 0x44
   b5886:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5888:	f00c fb96 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b588c:	6803      	ldr	r3, [r0, #0]
   b588e:	691b      	ldr	r3, [r3, #16]
   b5890:	4798      	blx	r3
   b5892:	b138      	cbz	r0, b58a4 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b5894:	f00c fb90 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5898:	6803      	ldr	r3, [r0, #0]
   b589a:	695b      	ldr	r3, [r3, #20]
   b589c:	4798      	blx	r3
   b589e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b58a2:	e7f1      	b.n	b5888 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b58a4:	4638      	mov	r0, r7
   b58a6:	f00e fd8f 	bl	c43c8 <atof>
   b58aa:	ec51 0b10 	vmov	r0, r1, d0
   b58ae:	f00e fd17 	bl	c42e0 <__aeabi_d2f>
   b58b2:	4b62      	ldr	r3, [pc, #392]	; (b5a3c <_Z13sensorHandlerv+0x2d4>)
   b58b4:	6018      	str	r0, [r3, #0]
        dataWait = false;
   b58b6:	2300      	movs	r3, #0
   b58b8:	7033      	strb	r3, [r6, #0]
        if(logSensors){
   b58ba:	4b61      	ldr	r3, [pc, #388]	; (b5a40 <_Z13sensorHandlerv+0x2d8>)
   b58bc:	781b      	ldrb	r3, [r3, #0]
   b58be:	2b00      	cmp	r3, #0
   b58c0:	d063      	beq.n	b598a <_Z13sensorHandlerv+0x222>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b58c2:	f00b fa49 	bl	c0d58 <_ZN9TimeClass5monthEv>
   b58c6:	900f      	str	r0, [sp, #60]	; 0x3c
   b58c8:	f00b fa3a 	bl	c0d40 <_ZN9TimeClass3dayEv>
   b58cc:	4604      	mov	r4, r0
   b58ce:	f00b fa4b 	bl	c0d68 <_ZN9TimeClass4yearEv>
   b58d2:	4606      	mov	r6, r0
   b58d4:	f00b fa10 	bl	c0cf8 <_ZN9TimeClass4hourEv>
   b58d8:	4607      	mov	r7, r0
   b58da:	f00b fa19 	bl	c0d10 <_ZN9TimeClass6minuteEv>
   b58de:	4680      	mov	r8, r0
   b58e0:	f00b fa22 	bl	c0d28 <_ZN9TimeClass6secondEv>
   b58e4:	9400      	str	r4, [sp, #0]
   b58e6:	4c57      	ldr	r4, [pc, #348]	; (b5a44 <_Z13sensorHandlerv+0x2dc>)
   b58e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b58ea:	4a57      	ldr	r2, [pc, #348]	; (b5a48 <_Z13sensorHandlerv+0x2e0>)
   b58ec:	f8df 9140 	ldr.w	r9, [pc, #320]	; b5a30 <_Z13sensorHandlerv+0x2c8>
   b58f0:	f8df b140 	ldr.w	fp, [pc, #320]	; b5a34 <_Z13sensorHandlerv+0x2cc>
   b58f4:	f8df a168 	ldr.w	sl, [pc, #360]	; b5a60 <_Z13sensorHandlerv+0x2f8>
   b58f8:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b58fc:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b5900:	2110      	movs	r1, #16
   b5902:	a811      	add	r0, sp, #68	; 0x44
   b5904:	f008 fc54 	bl	be1b0 <snprintf>
            if(!myFile.isOpen()){
   b5908:	7c22      	ldrb	r2, [r4, #16]
   b590a:	4b4b      	ldr	r3, [pc, #300]	; (b5a38 <_Z13sensorHandlerv+0x2d0>)
   b590c:	f8df 812c 	ldr.w	r8, [pc, #300]	; b5a3c <_Z13sensorHandlerv+0x2d4>
   b5910:	4f4e      	ldr	r7, [pc, #312]	; (b5a4c <_Z13sensorHandlerv+0x2e4>)
   b5912:	4e4f      	ldr	r6, [pc, #316]	; (b5a50 <_Z13sensorHandlerv+0x2e8>)
   b5914:	2a00      	cmp	r2, #0
   b5916:	f040 80a5 	bne.w	b5a64 <_Z13sensorHandlerv+0x2fc>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b591a:	f244 2202 	movw	r2, #16898	; 0x4202
   b591e:	494d      	ldr	r1, [pc, #308]	; (b5a54 <_Z13sensorHandlerv+0x2ec>)
   b5920:	f104 0010 	add.w	r0, r4, #16
   b5924:	f7fe fe7c 	bl	b4620 <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5928:	4b43      	ldr	r3, [pc, #268]	; (b5a38 <_Z13sensorHandlerv+0x2d0>)
   b592a:	6818      	ldr	r0, [r3, #0]
   b592c:	f00e f988 	bl	c3c40 <__aeabi_f2d>
   b5930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5934:	f8db 0000 	ldr.w	r0, [fp]
   b5938:	f00e f982 	bl	c3c40 <__aeabi_f2d>
   b593c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5940:	f8da 0000 	ldr.w	r0, [sl]
   b5944:	f00e f97c 	bl	c3c40 <__aeabi_f2d>
   b5948:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b594c:	f8d9 0000 	ldr.w	r0, [r9]
   b5950:	f00e f976 	bl	c3c40 <__aeabi_f2d>
   b5954:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5958:	f8d8 0000 	ldr.w	r0, [r8]
   b595c:	f00e f970 	bl	c3c40 <__aeabi_f2d>
   b5960:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5964:	6838      	ldr	r0, [r7, #0]
   b5966:	f00e f96b 	bl	c3c40 <__aeabi_f2d>
   b596a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b596e:	6830      	ldr	r0, [r6, #0]
   b5970:	f00e f966 	bl	c3c40 <__aeabi_f2d>
   b5974:	aa11      	add	r2, sp, #68	; 0x44
   b5976:	e9cd 0100 	strd	r0, r1, [sp]
   b597a:	4937      	ldr	r1, [pc, #220]	; (b5a58 <_Z13sensorHandlerv+0x2f0>)
   b597c:	4620      	mov	r0, r4
   b597e:	f7fe fcf3 	bl	b4368 <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b5982:	f104 0010 	add.w	r0, r4, #16
   b5986:	f001 fe45 	bl	b7614 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b598a:	4c34      	ldr	r4, [pc, #208]	; (b5a5c <_Z13sensorHandlerv+0x2f4>)
   b598c:	f008 f878 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b5990:	6823      	ldr	r3, [r4, #0]
   b5992:	4283      	cmp	r3, r0
   b5994:	d244      	bcs.n	b5a20 <_Z13sensorHandlerv+0x2b8>
   b5996:	f008 f873 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b599a:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b599e:	6020      	str	r0, [r4, #0]
   b59a0:	f008 f86e 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b59a4:	f200 3039 	addw	r0, r0, #825	; 0x339
   b59a8:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b59aa:	f00c fb05 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59ae:	2163      	movs	r1, #99	; 0x63
   b59b0:	f00b ff98 	bl	c18e4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59b4:	f00c fb00 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59b8:	2172      	movs	r1, #114	; 0x72
   b59ba:	f7fe fc44 	bl	b4246 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59be:	f00c fafb 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59c2:	f00b ff96 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b59c6:	f00c faf7 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59ca:	2164      	movs	r1, #100	; 0x64
   b59cc:	f00b ff8a 	bl	c18e4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59d0:	f00c faf2 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59d4:	2172      	movs	r1, #114	; 0x72
   b59d6:	f7fe fc36 	bl	b4246 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59da:	f00c faed 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59de:	f00b ff88 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b59e2:	f00c fae9 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59e6:	2165      	movs	r1, #101	; 0x65
   b59e8:	f00b ff7c 	bl	c18e4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59ec:	f00c fae4 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59f0:	2172      	movs	r1, #114	; 0x72
   b59f2:	f7fe fc28 	bl	b4246 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59f6:	f00c fadf 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b59fa:	f00b ff7a 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b59fe:	f00c fadb 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5a02:	2166      	movs	r1, #102	; 0x66
   b5a04:	f00b ff6e 	bl	c18e4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5a08:	f00c fad6 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5a0c:	2172      	movs	r1, #114	; 0x72
   b5a0e:	f7fe fc1a 	bl	b4246 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5a12:	f00c fad1 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b5a16:	f00b ff6c 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b5a1a:	4b04      	ldr	r3, [pc, #16]	; (b5a2c <_Z13sensorHandlerv+0x2c4>)
   b5a1c:	2201      	movs	r2, #1
   b5a1e:	701a      	strb	r2, [r3, #0]
}
   b5a20:	b017      	add	sp, #92	; 0x5c
   b5a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a26:	bf00      	nop
   b5a28:	2003ddd0 	.word	0x2003ddd0
   b5a2c:	2003ddd4 	.word	0x2003ddd4
   b5a30:	2003e578 	.word	0x2003e578
   b5a34:	2003e574 	.word	0x2003e574
   b5a38:	2003e56c 	.word	0x2003e56c
   b5a3c:	2003e57c 	.word	0x2003e57c
   b5a40:	2003def9 	.word	0x2003def9
   b5a44:	2003df20 	.word	0x2003df20
   b5a48:	000c693c 	.word	0x000c693c
   b5a4c:	2003defc 	.word	0x2003defc
   b5a50:	2003de20 	.word	0x2003de20
   b5a54:	2003ddd6 	.word	0x2003ddd6
   b5a58:	000c6955 	.word	0x000c6955
   b5a5c:	2003e580 	.word	0x2003e580
   b5a60:	2003e570 	.word	0x2003e570
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5a64:	6818      	ldr	r0, [r3, #0]
   b5a66:	f00e f8eb 	bl	c3c40 <__aeabi_f2d>
   b5a6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5a6e:	f8db 0000 	ldr.w	r0, [fp]
   b5a72:	f00e f8e5 	bl	c3c40 <__aeabi_f2d>
   b5a76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5a7a:	f8da 0000 	ldr.w	r0, [sl]
   b5a7e:	f00e f8df 	bl	c3c40 <__aeabi_f2d>
   b5a82:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5a86:	f8d9 0000 	ldr.w	r0, [r9]
   b5a8a:	f00e f8d9 	bl	c3c40 <__aeabi_f2d>
   b5a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5a92:	f8d8 0000 	ldr.w	r0, [r8]
   b5a96:	f00e f8d3 	bl	c3c40 <__aeabi_f2d>
   b5a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5a9e:	6838      	ldr	r0, [r7, #0]
   b5aa0:	f00e f8ce 	bl	c3c40 <__aeabi_f2d>
   b5aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5aa8:	6830      	ldr	r0, [r6, #0]
   b5aaa:	f00e f8c9 	bl	c3c40 <__aeabi_f2d>
   b5aae:	aa11      	add	r2, sp, #68	; 0x44
   b5ab0:	e9cd 0100 	strd	r0, r1, [sp]
   b5ab4:	4902      	ldr	r1, [pc, #8]	; (b5ac0 <_Z13sensorHandlerv+0x358>)
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	f7fe fc56 	bl	b4368 <_ZN5Print8printlnfEPKcz>
   b5abc:	e765      	b.n	b598a <_Z13sensorHandlerv+0x222>
   b5abe:	bf00      	nop
   b5ac0:	000c6955 	.word	0x000c6955

000b5ac4 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5ac8:	4e3c      	ldr	r6, [pc, #240]	; (b5bbc <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5aca:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5bd0 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b5ace:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5bd4 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b5ad2:	b089      	sub	sp, #36	; 0x24
   b5ad4:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5ad6:	f00c fa33 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b5ada:	6803      	ldr	r3, [r0, #0]
   b5adc:	691b      	ldr	r3, [r3, #16]
   b5ade:	4798      	blx	r3
   b5ae0:	2800      	cmp	r0, #0
   b5ae2:	d066      	beq.n	b5bb2 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5ae4:	f00c fa2c 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b5ae8:	220a      	movs	r2, #10
   b5aea:	4601      	mov	r1, r0
   b5aec:	4638      	mov	r0, r7
   b5aee:	f00a f8fb 	bl	bfce8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5af2:	68bb      	ldr	r3, [r7, #8]
   b5af4:	3307      	adds	r3, #7
   b5af6:	f023 0307 	bic.w	r3, r3, #7
    }
   b5afa:	466d      	mov	r5, sp
        char buffer[data.length()];
   b5afc:	ebad 0d03 	sub.w	sp, sp, r3
   b5b00:	46ea      	mov	sl, sp
   b5b02:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5b04:	68b9      	ldr	r1, [r7, #8]
   b5b06:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5b0a:	458b      	cmp	fp, r1
   b5b0c:	f103 0401 	add.w	r4, r3, #1
   b5b10:	d207      	bcs.n	b5b22 <_Z11XBeeHandlerv+0x5e>
   b5b12:	4659      	mov	r1, fp
   b5b14:	4638      	mov	r0, r7
   b5b16:	f008 fe69 	bl	be7ec <_ZNK6String6charAtEj>
   b5b1a:	4623      	mov	r3, r4
   b5b1c:	f80a 000b 	strb.w	r0, [sl, fp]
   b5b20:	e7f0      	b.n	b5b04 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5b22:	2901      	cmp	r1, #1
   b5b24:	d90a      	bls.n	b5b3c <_Z11XBeeHandlerv+0x78>
   b5b26:	3901      	subs	r1, #1
   b5b28:	4638      	mov	r0, r7
   b5b2a:	f008 fe5f 	bl	be7ec <_ZNK6String6charAtEj>
   b5b2e:	280d      	cmp	r0, #13
   b5b30:	bf01      	itttt	eq
   b5b32:	68bb      	ldreq	r3, [r7, #8]
   b5b34:	4453      	addeq	r3, sl
   b5b36:	2200      	moveq	r2, #0
   b5b38:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b5b3c:	f00b fd74 	bl	c1628 <_Z16_fetch_usbserialv>
   b5b40:	4631      	mov	r1, r6
   b5b42:	f00a f848 	bl	bfbd6 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5b46:	f00b fd6f 	bl	c1628 <_Z16_fetch_usbserialv>
   b5b4a:	6839      	ldr	r1, [r7, #0]
   b5b4c:	f00a f843 	bl	bfbd6 <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);
   b5b50:	2201      	movs	r2, #1
   b5b52:	2102      	movs	r1, #2
   b5b54:	4650      	mov	r0, sl
   b5b56:	f7fe fe15 	bl	b4784 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5b5a:	f89a 3000 	ldrb.w	r3, [sl]
   b5b5e:	3b42      	subs	r3, #66	; 0x42
   b5b60:	2b01      	cmp	r3, #1
   b5b62:	d803      	bhi.n	b5b6c <_Z11XBeeHandlerv+0xa8>
   b5b64:	f007 ff8c 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b5b68:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5b6c:	f899 3000 	ldrb.w	r3, [r9]
   b5b70:	b1d3      	cbz	r3, b5ba8 <_Z11XBeeHandlerv+0xe4>
   b5b72:	4813      	ldr	r0, [pc, #76]	; (b5bc0 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5b74:	7c03      	ldrb	r3, [r0, #16]
   b5b76:	b92b      	cbnz	r3, b5b84 <_Z11XBeeHandlerv+0xc0>
   b5b78:	4912      	ldr	r1, [pc, #72]	; (b5bc4 <_Z11XBeeHandlerv+0x100>)
   b5b7a:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b7e:	3010      	adds	r0, #16
   b5b80:	f7fe fd4e 	bl	b4620 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5b84:	4639      	mov	r1, r7
   b5b86:	f107 0010 	add.w	r0, r7, #16
   b5b8a:	f008 fde5 	bl	be758 <_ZN6StringC1ERKS_>
   b5b8e:	490e      	ldr	r1, [pc, #56]	; (b5bc8 <_Z11XBeeHandlerv+0x104>)
   b5b90:	480b      	ldr	r0, [pc, #44]	; (b5bc0 <_Z11XBeeHandlerv+0xfc>)
   b5b92:	f107 0210 	add.w	r2, r7, #16
   b5b96:	f7fe fbe7 	bl	b4368 <_ZN5Print8printlnfEPKcz>
   b5b9a:	f107 0010 	add.w	r0, r7, #16
   b5b9e:	f008 fd45 	bl	be62c <_ZN6StringD1Ev>
            logFile.close();
   b5ba2:	480a      	ldr	r0, [pc, #40]	; (b5bcc <_Z11XBeeHandlerv+0x108>)
   b5ba4:	f001 fd36 	bl	b7614 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5ba8:	4638      	mov	r0, r7
   b5baa:	f008 fd3f 	bl	be62c <_ZN6StringD1Ev>
   b5bae:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b5bb0:	e791      	b.n	b5ad6 <_Z11XBeeHandlerv+0x12>
}
   b5bb2:	3724      	adds	r7, #36	; 0x24
   b5bb4:	46bd      	mov	sp, r7
   b5bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5bba:	bf00      	nop
   b5bbc:	000c696d 	.word	0x000c696d
   b5bc0:	2003dea0 	.word	0x2003dea0
   b5bc4:	2003ddf4 	.word	0x2003ddf4
   b5bc8:	000c697f 	.word	0x000c697f
   b5bcc:	2003deb0 	.word	0x2003deb0
   b5bd0:	2003dda4 	.word	0x2003dda4
   b5bd4:	2003def8 	.word	0x2003def8

000b5bd8 <_Z13dataOffloaderv>:
void dataOffloader(){
   b5bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5bdc:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b5bde:	f00b fd23 	bl	c1628 <_Z16_fetch_usbserialv>
   b5be2:	4963      	ldr	r1, [pc, #396]	; (b5d70 <_Z13dataOffloaderv+0x198>)
   b5be4:	f009 fff7 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    myFile.close();
   b5be8:	4862      	ldr	r0, [pc, #392]	; (b5d74 <_Z13dataOffloaderv+0x19c>)
   b5bea:	f001 fd13 	bl	b7614 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b5bee:	4962      	ldr	r1, [pc, #392]	; (b5d78 <_Z13dataOffloaderv+0x1a0>)
   b5bf0:	4862      	ldr	r0, [pc, #392]	; (b5d7c <_Z13dataOffloaderv+0x1a4>)
   b5bf2:	2200      	movs	r2, #0
   b5bf4:	f7fe fd14 	bl	b4620 <_ZN7FatFile4openEPKci>
   b5bf8:	b948      	cbnz	r0, b5c0e <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b5bfa:	4b61      	ldr	r3, [pc, #388]	; (b5d80 <_Z13dataOffloaderv+0x1a8>)
   b5bfc:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5bfe:	f00b fd13 	bl	c1628 <_Z16_fetch_usbserialv>
   b5c02:	4960      	ldr	r1, [pc, #384]	; (b5d84 <_Z13dataOffloaderv+0x1ac>)
}
   b5c04:	b02d      	add	sp, #180	; 0xb4
   b5c06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5c0a:	f009 bfe4 	b.w	bfbd6 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5c0e:	f00b fd0b 	bl	c1628 <_Z16_fetch_usbserialv>
   b5c12:	495d      	ldr	r1, [pc, #372]	; (b5d88 <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b5c14:	4d5d      	ldr	r5, [pc, #372]	; (b5d8c <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b5c16:	f009 ffde 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5c1a:	f009 f94d 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c1e:	f009 f9a9 	bl	bef74 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5c22:	4604      	mov	r4, r0
   b5c24:	b948      	cbnz	r0, b5c3a <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b5c26:	f009 f947 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c2a:	4622      	mov	r2, r4
   b5c2c:	4629      	mov	r1, r5
   b5c2e:	f009 f9f4 	bl	bf01a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5c32:	200a      	movs	r0, #10
   b5c34:	f00b f8ba 	bl	c0dac <delay>
    while(!BLE.connected()){
   b5c38:	e7ef      	b.n	b5c1a <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b5c3a:	f00b fcf5 	bl	c1628 <_Z16_fetch_usbserialv>
   b5c3e:	4954      	ldr	r1, [pc, #336]	; (b5d90 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5c40:	4f4e      	ldr	r7, [pc, #312]	; (b5d7c <_Z13dataOffloaderv+0x1a4>)
   b5c42:	4d4c      	ldr	r5, [pc, #304]	; (b5d74 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5c44:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5db4 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b5c48:	f009 ffc5 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5c4c:	2200      	movs	r2, #0
   b5c4e:	4639      	mov	r1, r7
   b5c50:	4628      	mov	r0, r5
   b5c52:	f001 fc6c 	bl	b752e <_ZN7FatFile8openNextEPS_i>
   b5c56:	b1f8      	cbz	r0, b5c98 <_Z13dataOffloaderv+0xc0>
   b5c58:	f009 f92e 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c5c:	f009 f98a 	bl	bef74 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5c60:	b1d0      	cbz	r0, b5c98 <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5c62:	221e      	movs	r2, #30
   b5c64:	a901      	add	r1, sp, #4
   b5c66:	4628      	mov	r0, r5
   b5c68:	f000 fec5 	bl	b69f6 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5c6c:	f00b fcdc 	bl	c1628 <_Z16_fetch_usbserialv>
   b5c70:	4641      	mov	r1, r8
   b5c72:	aa01      	add	r2, sp, #4
   b5c74:	f7fe fb78 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5c78:	a801      	add	r0, sp, #4
   b5c7a:	f00e fc78 	bl	c456e <strlen>
   b5c7e:	ab01      	add	r3, sp, #4
   b5c80:	3804      	subs	r0, #4
   b5c82:	4418      	add	r0, r3
   b5c84:	f00e fc7c 	bl	c4580 <strlwr>
   b5c88:	4942      	ldr	r1, [pc, #264]	; (b5d94 <_Z13dataOffloaderv+0x1bc>)
   b5c8a:	f00e fcd2 	bl	c4632 <strstr>
   b5c8e:	b9d8      	cbnz	r0, b5cc8 <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b5c90:	4628      	mov	r0, r5
   b5c92:	f001 fcbf 	bl	b7614 <_ZN7FatFile5closeEv>
   b5c96:	e7d9      	b.n	b5c4c <_Z13dataOffloaderv+0x74>
    logDir.close();
   b5c98:	4838      	ldr	r0, [pc, #224]	; (b5d7c <_Z13dataOffloaderv+0x1a4>)
   b5c9a:	f001 fcbb 	bl	b7614 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5c9e:	2226      	movs	r2, #38	; 0x26
   b5ca0:	2100      	movs	r1, #0
   b5ca2:	a809      	add	r0, sp, #36	; 0x24
   b5ca4:	f00e fbd8 	bl	c4458 <memset>
    strcpy(fileCode,"filedone");
   b5ca8:	493b      	ldr	r1, [pc, #236]	; (b5d98 <_Z13dataOffloaderv+0x1c0>)
   b5caa:	a809      	add	r0, sp, #36	; 0x24
   b5cac:	f00e fc3a 	bl	c4524 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5cb0:	2300      	movs	r3, #0
   b5cb2:	2226      	movs	r2, #38	; 0x26
   b5cb4:	a909      	add	r1, sp, #36	; 0x24
   b5cb6:	4839      	ldr	r0, [pc, #228]	; (b5d9c <_Z13dataOffloaderv+0x1c4>)
   b5cb8:	f008 ffee 	bl	bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5cbc:	4b30      	ldr	r3, [pc, #192]	; (b5d80 <_Z13dataOffloaderv+0x1a8>)
   b5cbe:	2200      	movs	r2, #0
   b5cc0:	701a      	strb	r2, [r3, #0]
}
   b5cc2:	b02d      	add	sp, #180	; 0xb4
   b5cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5cc8:	2226      	movs	r2, #38	; 0x26
   b5cca:	2100      	movs	r1, #0
   b5ccc:	a809      	add	r0, sp, #36	; 0x24
   b5cce:	f00e fbc3 	bl	c4458 <memset>
            strcpy(fileCode,"filename");
   b5cd2:	4933      	ldr	r1, [pc, #204]	; (b5da0 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b5cd4:	4e33      	ldr	r6, [pc, #204]	; (b5da4 <_Z13dataOffloaderv+0x1cc>)
   b5cd6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b5d9c <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b5cda:	a809      	add	r0, sp, #36	; 0x24
   b5cdc:	f00e fc22 	bl	c4524 <strcpy>
            strcat(fileCode,namebuf);
   b5ce0:	a901      	add	r1, sp, #4
   b5ce2:	a809      	add	r0, sp, #36	; 0x24
   b5ce4:	f00e fbee 	bl	c44c4 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5ce8:	f00b fc9e 	bl	c1628 <_Z16_fetch_usbserialv>
   b5cec:	492e      	ldr	r1, [pc, #184]	; (b5da8 <_Z13dataOffloaderv+0x1d0>)
   b5cee:	aa09      	add	r2, sp, #36	; 0x24
   b5cf0:	f7fe fb3a 	bl	b4368 <_ZN5Print8printlnfEPKcz>
   b5cf4:	2300      	movs	r3, #0
   b5cf6:	2226      	movs	r2, #38	; 0x26
   b5cf8:	a909      	add	r1, sp, #36	; 0x24
   b5cfa:	4828      	ldr	r0, [pc, #160]	; (b5d9c <_Z13dataOffloaderv+0x1c4>)
   b5cfc:	f008 ffcc 	bl	bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5d00:	f00b fc92 	bl	c1628 <_Z16_fetch_usbserialv>
   b5d04:	4929      	ldr	r1, [pc, #164]	; (b5dac <_Z13dataOffloaderv+0x1d4>)
   b5d06:	aa01      	add	r2, sp, #4
   b5d08:	f7fe fb2e 	bl	b4368 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5d0c:	2096      	movs	r0, #150	; 0x96
   b5d0e:	f00b f84d 	bl	c0dac <delay>
            noInterrupts();
   b5d12:	f00b fcaf 	bl	c1674 <_Z12noInterruptsv>
            while(myFile.available()){
   b5d16:	4630      	mov	r0, r6
   b5d18:	f7fe f9e1 	bl	b40de <_ZN4File9availableEv>
   b5d1c:	4604      	mov	r4, r0
   b5d1e:	b188      	cbz	r0, b5d44 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5d20:	2264      	movs	r2, #100	; 0x64
   b5d22:	2100      	movs	r1, #0
   b5d24:	a813      	add	r0, sp, #76	; 0x4c
   b5d26:	f00e fb97 	bl	c4458 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5d2a:	aa13      	add	r2, sp, #76	; 0x4c
   b5d2c:	2364      	movs	r3, #100	; 0x64
   b5d2e:	210d      	movs	r1, #13
   b5d30:	4630      	mov	r0, r6
   b5d32:	f009 ffc0 	bl	bfcb6 <_ZN6Stream14readBytesUntilEcPcj>
   b5d36:	2300      	movs	r3, #0
   b5d38:	2264      	movs	r2, #100	; 0x64
   b5d3a:	a913      	add	r1, sp, #76	; 0x4c
   b5d3c:	4648      	mov	r0, r9
   b5d3e:	f008 ffab 	bl	bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5d42:	e7e8      	b.n	b5d16 <_Z13dataOffloaderv+0x13e>
            interrupts();
   b5d44:	f00b fc98 	bl	c1678 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5d48:	2226      	movs	r2, #38	; 0x26
   b5d4a:	4621      	mov	r1, r4
   b5d4c:	a809      	add	r0, sp, #36	; 0x24
   b5d4e:	f00e fb83 	bl	c4458 <memset>
            strcpy(fileCode,"filecomp");
   b5d52:	4917      	ldr	r1, [pc, #92]	; (b5db0 <_Z13dataOffloaderv+0x1d8>)
   b5d54:	a809      	add	r0, sp, #36	; 0x24
   b5d56:	f00e fbe5 	bl	c4524 <strcpy>
   b5d5a:	4623      	mov	r3, r4
   b5d5c:	2226      	movs	r2, #38	; 0x26
   b5d5e:	a909      	add	r1, sp, #36	; 0x24
   b5d60:	480e      	ldr	r0, [pc, #56]	; (b5d9c <_Z13dataOffloaderv+0x1c4>)
   b5d62:	f008 ff99 	bl	bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5d66:	2096      	movs	r0, #150	; 0x96
   b5d68:	f00b f820 	bl	c0dac <delay>
   b5d6c:	e790      	b.n	b5c90 <_Z13dataOffloaderv+0xb8>
   b5d6e:	bf00      	nop
   b5d70:	000c69a0 	.word	0x000c69a0
   b5d74:	2003df30 	.word	0x2003df30
   b5d78:	000c69bd 	.word	0x000c69bd
   b5d7c:	2003de7c 	.word	0x2003de7c
   b5d80:	2003e0d4 	.word	0x2003e0d4
   b5d84:	000c69bf 	.word	0x000c69bf
   b5d88:	000c69ec 	.word	0x000c69ec
   b5d8c:	2003ddac 	.word	0x2003ddac
   b5d90:	000c6a0c 	.word	0x000c6a0c
   b5d94:	000c6a4a 	.word	0x000c6a4a
   b5d98:	000c6a4f 	.word	0x000c6a4f
   b5d9c:	2003e0cc 	.word	0x2003e0cc
   b5da0:	000c6a58 	.word	0x000c6a58
   b5da4:	2003df20 	.word	0x2003df20
   b5da8:	000c6a61 	.word	0x000c6a61
   b5dac:	000c6a74 	.word	0x000c6a74
   b5db0:	000c6a9c 	.word	0x000c6a9c
   b5db4:	000c6a21 	.word	0x000c6a21

000b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5db8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5dba:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5dbc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5dbe:	b17c      	cbz	r4, b5de0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5dc0:	6863      	ldr	r3, [r4, #4]
   b5dc2:	3b01      	subs	r3, #1
   b5dc4:	6063      	str	r3, [r4, #4]
   b5dc6:	b95b      	cbnz	r3, b5de0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5dc8:	6823      	ldr	r3, [r4, #0]
   b5dca:	4620      	mov	r0, r4
   b5dcc:	689b      	ldr	r3, [r3, #8]
   b5dce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5dd0:	68a3      	ldr	r3, [r4, #8]
   b5dd2:	3b01      	subs	r3, #1
   b5dd4:	60a3      	str	r3, [r4, #8]
   b5dd6:	b91b      	cbnz	r3, b5de0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5dd8:	6823      	ldr	r3, [r4, #0]
   b5dda:	4620      	mov	r0, r4
   b5ddc:	68db      	ldr	r3, [r3, #12]
   b5dde:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5de0:	4628      	mov	r0, r5
   b5de2:	bd38      	pop	{r3, r4, r5, pc}

000b5de4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5de8:	b084      	sub	sp, #16
   b5dea:	af02      	add	r7, sp, #8
   b5dec:	4680      	mov	r8, r0
   b5dee:	4691      	mov	r9, r2
   b5df0:	461e      	mov	r6, r3
   b5df2:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5df4:	f00e fbbb 	bl	c456e <strlen>
   b5df8:	3009      	adds	r0, #9
   b5dfa:	f020 0107 	bic.w	r1, r0, #7
   b5dfe:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5e02:	4640      	mov	r0, r8
   b5e04:	f00e fbb3 	bl	c456e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5e08:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5e0c:	4925      	ldr	r1, [pc, #148]	; (b5ea4 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5e0e:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5e10:	4603      	mov	r3, r0
   b5e12:	4642      	mov	r2, r8
   b5e14:	4620      	mov	r0, r4
   b5e16:	f008 f9bb 	bl	be190 <sprintf>
    if(sendLTE || sendMode == 4){
   b5e1a:	f1ba 0f00 	cmp.w	sl, #0
   b5e1e:	d101      	bne.n	b5e24 <_Z8sendDataPKchbbb+0x40>
   b5e20:	2d04      	cmp	r5, #4
   b5e22:	d10c      	bne.n	b5e3e <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5e24:	4b20      	ldr	r3, [pc, #128]	; (b5ea8 <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5e26:	4921      	ldr	r1, [pc, #132]	; (b5eac <_Z8sendDataPKchbbb+0xc8>)
   b5e28:	781b      	ldrb	r3, [r3, #0]
   b5e2a:	f88d 3000 	strb.w	r3, [sp]
   b5e2e:	4638      	mov	r0, r7
   b5e30:	233c      	movs	r3, #60	; 0x3c
   b5e32:	4622      	mov	r2, r4
   b5e34:	f00b f9b2 	bl	c119c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5e38:	1d38      	adds	r0, r7, #4
   b5e3a:	f7ff ffbd 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5e3e:	f1b9 0f00 	cmp.w	r9, #0
   b5e42:	d101      	bne.n	b5e48 <_Z8sendDataPKchbbb+0x64>
   b5e44:	2d01      	cmp	r5, #1
   b5e46:	d121      	bne.n	b5e8c <_Z8sendDataPKchbbb+0xa8>
   b5e48:	f009 f836 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e4c:	f009 f892 	bl	bef74 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5e50:	b1e0      	cbz	r0, b5e8c <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5e52:	4620      	mov	r0, r4
   b5e54:	f00e fb8b 	bl	c456e <strlen>
   b5e58:	3007      	adds	r0, #7
   b5e5a:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5e5e:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5e60:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5e64:	4620      	mov	r0, r4
   b5e66:	f00e fb82 	bl	c456e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5e6a:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5e6e:	4602      	mov	r2, r0
   b5e70:	4621      	mov	r1, r4
   b5e72:	4648      	mov	r0, r9
   b5e74:	f00e fac8 	bl	c4408 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5e78:	4620      	mov	r0, r4
   b5e7a:	f00e fb78 	bl	c456e <strlen>
   b5e7e:	2300      	movs	r3, #0
   b5e80:	4602      	mov	r2, r0
   b5e82:	4649      	mov	r1, r9
   b5e84:	480a      	ldr	r0, [pc, #40]	; (b5eb0 <_Z8sendDataPKchbbb+0xcc>)
   b5e86:	f008 ff07 	bl	bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5e8a:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5e8c:	b90e      	cbnz	r6, b5e92 <_Z8sendDataPKchbbb+0xae>
   b5e8e:	2d02      	cmp	r5, #2
   b5e90:	d104      	bne.n	b5e9c <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5e92:	f00c f855 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b5e96:	4621      	mov	r1, r4
   b5e98:	f009 fe9d 	bl	bfbd6 <_ZN5Print7printlnEPKc>
}
   b5e9c:	3708      	adds	r7, #8
   b5e9e:	46bd      	mov	sp, r7
   b5ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5ea4:	000c6aa5 	.word	0x000c6aa5
   b5ea8:	2003dda8 	.word	0x2003dda8
   b5eac:	000c6aac 	.word	0x000c6aac
   b5eb0:	2003e5e8 	.word	0x2003e5e8

000b5eb4 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5eb4:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5eb6:	4d2a      	ldr	r5, [pc, #168]	; (b5f60 <_Z16sendResponseDatav+0xac>)
   b5eb8:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5eba:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5ebc:	2b00      	cmp	r3, #0
   b5ebe:	d04d      	beq.n	b5f5c <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);
   b5ec0:	2241      	movs	r2, #65	; 0x41
   b5ec2:	2100      	movs	r1, #0
   b5ec4:	a80b      	add	r0, sp, #44	; 0x2c
   b5ec6:	f00e fac7 	bl	c4458 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5eca:	4b26      	ldr	r3, [pc, #152]	; (b5f64 <_Z16sendResponseDatav+0xb0>)
   b5ecc:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5f68 <_Z16sendResponseDatav+0xb4>
   b5ed0:	edd3 7a00 	vldr	s15, [r3]
   b5ed4:	4b25      	ldr	r3, [pc, #148]	; (b5f6c <_Z16sendResponseDatav+0xb8>)
   b5ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);
   b5eda:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ee0:	edcd 7a08 	vstr	s15, [sp, #32]
   b5ee4:	edd3 7a00 	vldr	s15, [r3]
   b5ee8:	4b21      	ldr	r3, [pc, #132]	; (b5f70 <_Z16sendResponseDatav+0xbc>)
   b5eea:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ef2:	edcd 7a07 	vstr	s15, [sp, #28]
   b5ef6:	edd3 7a00 	vldr	s15, [r3]
   b5efa:	4b1e      	ldr	r3, [pc, #120]	; (b5f74 <_Z16sendResponseDatav+0xc0>)
   b5efc:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5f04:	edcd 7a06 	vstr	s15, [sp, #24]
   b5f08:	edd3 7a00 	vldr	s15, [r3]
   b5f0c:	4b1a      	ldr	r3, [pc, #104]	; (b5f78 <_Z16sendResponseDatav+0xc4>)
   b5f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5f16:	edcd 7a05 	vstr	s15, [sp, #20]
   b5f1a:	edd3 7a00 	vldr	s15, [r3]
   b5f1e:	4b17      	ldr	r3, [pc, #92]	; (b5f7c <_Z16sendResponseDatav+0xc8>)
   b5f20:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5f28:	edcd 7a04 	vstr	s15, [sp, #16]
   b5f2c:	6818      	ldr	r0, [r3, #0]
   b5f2e:	f00d fe87 	bl	c3c40 <__aeabi_f2d>
   b5f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5f36:	4b12      	ldr	r3, [pc, #72]	; (b5f80 <_Z16sendResponseDatav+0xcc>)
   b5f38:	6818      	ldr	r0, [r3, #0]
   b5f3a:	f00d fe81 	bl	c3c40 <__aeabi_f2d>
   b5f3e:	2201      	movs	r2, #1
   b5f40:	e9cd 0100 	strd	r0, r1, [sp]
   b5f44:	490f      	ldr	r1, [pc, #60]	; (b5f84 <_Z16sendResponseDatav+0xd0>)
   b5f46:	a80b      	add	r0, sp, #44	; 0x2c
   b5f48:	f008 f922 	bl	be190 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5f4c:	7829      	ldrb	r1, [r5, #0]
   b5f4e:	9400      	str	r4, [sp, #0]
   b5f50:	4623      	mov	r3, r4
   b5f52:	4622      	mov	r2, r4
   b5f54:	a80b      	add	r0, sp, #44	; 0x2c
   b5f56:	f7ff ff45 	bl	b5de4 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5f5a:	702c      	strb	r4, [r5, #0]
}
   b5f5c:	b01d      	add	sp, #116	; 0x74
   b5f5e:	bd30      	pop	{r4, r5, pc}
   b5f60:	2003e0dc 	.word	0x2003e0dc
   b5f64:	2003e57c 	.word	0x2003e57c
   b5f68:	447a0000 	.word	0x447a0000
   b5f6c:	2003e574 	.word	0x2003e574
   b5f70:	2003e56c 	.word	0x2003e56c
   b5f74:	2003e578 	.word	0x2003e578
   b5f78:	2003e570 	.word	0x2003e570
   b5f7c:	2003defc 	.word	0x2003defc
   b5f80:	2003de20 	.word	0x2003de20
   b5f84:	000c6ab4 	.word	0x000c6ab4

000b5f88 <_Z12statusUpdatev>:
void statusUpdate(){
   b5f88:	b530      	push	{r4, r5, lr}
    if(statusReady){
   b5f8a:	4d22      	ldr	r5, [pc, #136]	; (b6014 <_Z12statusUpdatev+0x8c>)
   b5f8c:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b5f8e:	b093      	sub	sp, #76	; 0x4c
    if(statusReady){
   b5f90:	2b00      	cmp	r3, #0
   b5f92:	d035      	beq.n	b6000 <_Z12statusUpdatev+0x78>
        Serial.println("Sending a status update!");
   b5f94:	f00b fb48 	bl	c1628 <_Z16_fetch_usbserialv>
   b5f98:	491f      	ldr	r1, [pc, #124]	; (b6018 <_Z12statusUpdatev+0x90>)
   b5f9a:	4c20      	ldr	r4, [pc, #128]	; (b601c <_Z12statusUpdatev+0x94>)
   b5f9c:	f009 fe1b 	bl	bfbd6 <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5fa0:	4a1f      	ldr	r2, [pc, #124]	; (b6020 <_Z12statusUpdatev+0x98>)
   b5fa2:	4b20      	ldr	r3, [pc, #128]	; (b6024 <_Z12statusUpdatev+0x9c>)
   b5fa4:	6810      	ldr	r0, [r2, #0]
   b5fa6:	781b      	ldrb	r3, [r3, #0]
   b5fa8:	9307      	str	r3, [sp, #28]
   b5faa:	f00d fe49 	bl	c3c40 <__aeabi_f2d>
   b5fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5fb2:	4a1d      	ldr	r2, [pc, #116]	; (b6028 <_Z12statusUpdatev+0xa0>)
   b5fb4:	6810      	ldr	r0, [r2, #0]
   b5fb6:	f00d fe43 	bl	c3c40 <__aeabi_f2d>
   b5fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5fbe:	4a1b      	ldr	r2, [pc, #108]	; (b602c <_Z12statusUpdatev+0xa4>)
   b5fc0:	9b07      	ldr	r3, [sp, #28]
   b5fc2:	8812      	ldrh	r2, [r2, #0]
   b5fc4:	9200      	str	r2, [sp, #0]
   b5fc6:	491a      	ldr	r1, [pc, #104]	; (b6030 <_Z12statusUpdatev+0xa8>)
   b5fc8:	2201      	movs	r2, #1
   b5fca:	a808      	add	r0, sp, #32
   b5fcc:	f008 f8e0 	bl	be190 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5fd0:	4b18      	ldr	r3, [pc, #96]	; (b6034 <_Z12statusUpdatev+0xac>)
   b5fd2:	781b      	ldrb	r3, [r3, #0]
   b5fd4:	b9b3      	cbnz	r3, b6004 <_Z12statusUpdatev+0x7c>
   b5fd6:	4b18      	ldr	r3, [pc, #96]	; (b6038 <_Z12statusUpdatev+0xb0>)
   b5fd8:	781b      	ldrb	r3, [r3, #0]
   b5fda:	b99b      	cbnz	r3, b6004 <_Z12statusUpdatev+0x7c>
   b5fdc:	8823      	ldrh	r3, [r4, #0]
   b5fde:	b1a3      	cbz	r3, b600a <_Z12statusUpdatev+0x82>
   b5fe0:	f013 0303 	ands.w	r3, r3, #3
   b5fe4:	d111      	bne.n	b600a <_Z12statusUpdatev+0x82>
            sendData(updateStr,0,false,false,true);
   b5fe6:	2201      	movs	r2, #1
   b5fe8:	9200      	str	r2, [sp, #0]
   b5fea:	4619      	mov	r1, r3
   b5fec:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5fee:	a808      	add	r0, sp, #32
   b5ff0:	f7ff fef8 	bl	b5de4 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5ff4:	8823      	ldrh	r3, [r4, #0]
   b5ff6:	b10b      	cbz	r3, b5ffc <_Z12statusUpdatev+0x74>
   b5ff8:	3b01      	subs	r3, #1
   b5ffa:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5ffc:	2300      	movs	r3, #0
   b5ffe:	702b      	strb	r3, [r5, #0]
}
   b6000:	b013      	add	sp, #76	; 0x4c
   b6002:	bd30      	pop	{r4, r5, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b6004:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b6008:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b600a:	2100      	movs	r1, #0
   b600c:	2301      	movs	r3, #1
   b600e:	9100      	str	r1, [sp, #0]
   b6010:	461a      	mov	r2, r3
   b6012:	e7ec      	b.n	b5fee <_Z12statusUpdatev+0x66>
   b6014:	2003e5cc 	.word	0x2003e5cc
   b6018:	000c6ad8 	.word	0x000c6ad8
   b601c:	2003dd8e 	.word	0x2003dd8e
   b6020:	2003defc 	.word	0x2003defc
   b6024:	2003ddbc 	.word	0x2003ddbc
   b6028:	2003de20 	.word	0x2003de20
   b602c:	2003e5ac 	.word	0x2003e5ac
   b6030:	000c6af1 	.word	0x000c6af1
   b6034:	2003dd58 	.word	0x2003dd58
   b6038:	2003dda0 	.word	0x2003dda0

000b603c <loop>:
void loop(){
   b603c:	b508      	push	{r3, lr}
    getPositionData();
   b603e:	f7ff f96b 	bl	b5318 <_Z15getPositionDatav>
    readPowerSys();
   b6042:	f7fe fe75 	bl	b4d30 <_Z12readPowerSysv>
    sensorHandler();
   b6046:	f7ff fb8f 	bl	b5768 <_Z13sensorHandlerv>
    XBeeHandler();
   b604a:	f7ff fd3b 	bl	b5ac4 <_Z11XBeeHandlerv>
    statusUpdate();
   b604e:	f7ff ff9b 	bl	b5f88 <_Z12statusUpdatev>
    updateMotors();
   b6052:	f7ff fa79 	bl	b5548 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b6056:	4b06      	ldr	r3, [pc, #24]	; (b6070 <loop+0x34>)
   b6058:	781b      	ldrb	r3, [r3, #0]
   b605a:	b10b      	cbz	r3, b6060 <loop+0x24>
   b605c:	f7ff fdbc 	bl	b5bd8 <_Z13dataOffloaderv>
    sendResponseData();
   b6060:	f7ff ff28 	bl	b5eb4 <_Z16sendResponseDatav>
}
   b6064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);
   b6068:	200a      	movs	r0, #10
   b606a:	f00a be9f 	b.w	c0dac <delay>
   b606e:	bf00      	nop
   b6070:	2003e0d4 	.word	0x2003e0d4

000b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6074:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6076:	e9d0 5300 	ldrd	r5, r3, [r0]
   b607a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b607c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b607e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6082:	42ae      	cmp	r6, r5
   b6084:	d004      	beq.n	b6090 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6086:	4628      	mov	r0, r5
   b6088:	f008 fad0 	bl	be62c <_ZN6StringD1Ev>
   b608c:	3514      	adds	r5, #20
   b608e:	e7f8      	b.n	b6082 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6090:	6820      	ldr	r0, [r4, #0]
   b6092:	f008 f86d 	bl	be170 <free>
    AllocatorT::free(data_);
}
   b6096:	4620      	mov	r0, r4
   b6098:	bd70      	pop	{r4, r5, r6, pc}

000b609a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b609a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b609c:	4616      	mov	r6, r2
   b609e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b60a0:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b60a2:	e9c0 2200 	strd	r2, r2, [r0]
   b60a6:	4604      	mov	r4, r0
   b60a8:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b60aa:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b60ac:	4619      	mov	r1, r3
   b60ae:	a804      	add	r0, sp, #16
   b60b0:	f008 fdb4 	bl	bec1c <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b60b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b60b6:	4638      	mov	r0, r7
   b60b8:	f008 fdb0 	bl	bec1c <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b60bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b60be:	9302      	str	r3, [sp, #8]
   b60c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b60c2:	4620      	mov	r0, r4
   b60c4:	e9cd 7300 	strd	r7, r3, [sp]
   b60c8:	4632      	mov	r2, r6
   b60ca:	ab04      	add	r3, sp, #16
   b60cc:	4629      	mov	r1, r5
   b60ce:	f009 fb1b 	bl	bf708 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b60d2:	4620      	mov	r0, r4
   b60d4:	b00f      	add	sp, #60	; 0x3c
   b60d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b60d8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b60da:	4c0b      	ldr	r4, [pc, #44]	; (b6108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b60dc:	7821      	ldrb	r1, [r4, #0]
   b60de:	f3bf 8f5b 	dmb	ish
   b60e2:	f011 0101 	ands.w	r1, r1, #1
   b60e6:	d10b      	bne.n	b6100 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b60e8:	4620      	mov	r0, r4
   b60ea:	9101      	str	r1, [sp, #4]
   b60ec:	f7fd ffe8 	bl	b40c0 <__cxa_guard_acquire>
   b60f0:	9901      	ldr	r1, [sp, #4]
   b60f2:	b128      	cbz	r0, b6100 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b60f4:	4805      	ldr	r0, [pc, #20]	; (b610c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b60f6:	f008 f907 	bl	be308 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b60fa:	4620      	mov	r0, r4
   b60fc:	f7fd ffe5 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b6100:	4802      	ldr	r0, [pc, #8]	; (b610c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6102:	b002      	add	sp, #8
   b6104:	bd10      	pop	{r4, pc}
   b6106:	bf00      	nop
   b6108:	2003dd4c 	.word	0x2003dd4c
   b610c:	2003dd50 	.word	0x2003dd50

000b6110 <_Z8setupSPIv>:
void setupSPI(){
   b6110:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b6112:	f7ff ffe1 	bl	b60d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6116:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b611a:	2100      	movs	r1, #0
   b611c:	f008 f912 	bl	be344 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b6120:	f7ff ffda 	bl	b60d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b6124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6128:	4901      	ldr	r1, [pc, #4]	; (b6130 <_Z8setupSPIv+0x20>)
   b612a:	2201      	movs	r2, #1
   b612c:	f008 b9a8 	b.w	be480 <_ZN8SPIClass13setClockSpeedEjj>
   b6130:	000f4240 	.word	0x000f4240

000b6134 <setup>:
void setup(){
   b6134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b6138:	48c6      	ldr	r0, [pc, #792]	; (b6454 <setup+0x320>)
    leftMotorSpeed = setLSpeed = 90;
   b613a:	4fc7      	ldr	r7, [pc, #796]	; (b6458 <setup+0x324>)
   b613c:	7c03      	ldrb	r3, [r0, #16]
    rightMotorSpeed = setRSpeed = 90;
   b613e:	4ec7      	ldr	r6, [pc, #796]	; (b645c <setup+0x328>)
   b6140:	f003 0303 	and.w	r3, r3, #3
   b6144:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b6148:	b095      	sub	sp, #84	; 0x54
   b614a:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b614c:	2200      	movs	r2, #0
   b614e:	2101      	movs	r1, #1
   b6150:	3004      	adds	r0, #4
   b6152:	f007 ff17 	bl	bdf84 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b6156:	2101      	movs	r1, #1
   b6158:	2002      	movs	r0, #2
   b615a:	f00b fe95 	bl	c1e88 <pinMode>
        pinMode(PWR_EN, OUTPUT);
   b615e:	2101      	movs	r1, #1
   b6160:	201c      	movs	r0, #28
   b6162:	f00b fe91 	bl	c1e88 <pinMode>
        digitalWrite(PWR_EN,LOW);
   b6166:	2100      	movs	r1, #0
   b6168:	201c      	movs	r0, #28
   b616a:	f00b fe9e 	bl	c1eaa <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b616e:	2100      	movs	r1, #0
   b6170:	201d      	movs	r0, #29
   b6172:	f00b fe89 	bl	c1e88 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b6176:	2100      	movs	r1, #0
   b6178:	2002      	movs	r0, #2
   b617a:	f00b fe96 	bl	c1eaa <digitalWrite>
   b617e:	f007 fc7f 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;
   b6182:	4ab7      	ldr	r2, [pc, #732]	; (b6460 <setup+0x32c>)
   b6184:	235a      	movs	r3, #90	; 0x5a
   b6186:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;
   b6188:	4ab6      	ldr	r2, [pc, #728]	; (b6464 <setup+0x330>)
    leftMotorSpeed = setLSpeed = 90;
   b618a:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b618c:	2400      	movs	r4, #0
   b618e:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;
   b6192:	7033      	strb	r3, [r6, #0]
   b6194:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b6196:	2106      	movs	r1, #6
   b6198:	e9cd 4800 	strd	r4, r8, [sp]
   b619c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b61a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b61a4:	4605      	mov	r5, r0
   b61a6:	48b0      	ldr	r0, [pc, #704]	; (b6468 <setup+0x334>)
   b61a8:	f008 fa02 	bl	be5b0 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b61ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b61b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b61b4:	e9cd 4800 	strd	r4, r8, [sp]
   b61b8:	2105      	movs	r1, #5
   b61ba:	48ac      	ldr	r0, [pc, #688]	; (b646c <setup+0x338>)
    logSensors = true;
   b61bc:	f8df 8360 	ldr.w	r8, [pc, #864]	; b6520 <setup+0x3ec>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b61c0:	f008 f9f6 	bl	be5b0 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b61c4:	7839      	ldrb	r1, [r7, #0]
   b61c6:	48a8      	ldr	r0, [pc, #672]	; (b6468 <setup+0x334>)
    logMessages = true;
   b61c8:	4fa9      	ldr	r7, [pc, #676]	; (b6470 <setup+0x33c>)
    ESCL.write(setLSpeed);
   b61ca:	f008 f9b5 	bl	be538 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b61ce:	7831      	ldrb	r1, [r6, #0]
   b61d0:	48a6      	ldr	r0, [pc, #664]	; (b646c <setup+0x338>)
    SDAvail = true;
   b61d2:	4ea8      	ldr	r6, [pc, #672]	; (b6474 <setup+0x340>)
    ESCR.write(setRSpeed);
   b61d4:	f008 f9b0 	bl	be538 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b61d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b61dc:	f00a fde6 	bl	c0dac <delay>
    BLE.on();
   b61e0:	f008 fe6a 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b61e4:	f008 feb2 	bl	bef4c <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b61e8:	f008 fe66 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b61ec:	2108      	movs	r1, #8
   b61ee:	f008 feb4 	bl	bef5a <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b61f2:	f00b fa19 	bl	c1628 <_Z16_fetch_usbserialv>
   b61f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b61fa:	f00b fa05 	bl	c1608 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b61fe:	f00b fe9f 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   b6202:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6206:	f00b fadb 	bl	c17c0 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b620a:	f7ff ff81 	bl	b6110 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b620e:	f7fe fd41 	bl	b4c94 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b6212:	f7fe fd57 	bl	b4cc4 <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6216:	2301      	movs	r3, #1
   b6218:	4997      	ldr	r1, [pc, #604]	; (b6478 <setup+0x344>)
   b621a:	4898      	ldr	r0, [pc, #608]	; (b647c <setup+0x348>)
   b621c:	4622      	mov	r2, r4
   b621e:	e9cd 4400 	strd	r4, r4, [sp]
   b6222:	f007 ff85 	bl	be130 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b6226:	4996      	ldr	r1, [pc, #600]	; (b6480 <setup+0x34c>)
   b6228:	4a96      	ldr	r2, [pc, #600]	; (b6484 <setup+0x350>)
   b622a:	4897      	ldr	r0, [pc, #604]	; (b6488 <setup+0x354>)
   b622c:	f00a febf 	bl	c0fae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;
   b6230:	4b96      	ldr	r3, [pc, #600]	; (b648c <setup+0x358>)
    SDAvail = true;
   b6232:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;
   b6236:	701c      	strb	r4, [r3, #0]
    SDAvail = true;
   b6238:	f886 9000 	strb.w	r9, [r6]
   b623c:	f007 fc20 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b6240:	4b93      	ldr	r3, [pc, #588]	; (b6490 <setup+0x35c>)
    logSensors = true;
   b6242:	f888 9000 	strb.w	r9, [r8]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b6246:	6018      	str	r0, [r3, #0]
   b6248:	4b92      	ldr	r3, [pc, #584]	; (b6494 <setup+0x360>)
    logMessages = true;
   b624a:	f887 9000 	strb.w	r9, [r7]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b624e:	6018      	str	r0, [r3, #0]
   b6250:	4b91      	ldr	r3, [pc, #580]	; (b6498 <setup+0x364>)
   b6252:	6018      	str	r0, [r3, #0]
   b6254:	4b91      	ldr	r3, [pc, #580]	; (b649c <setup+0x368>)
   b6256:	6018      	str	r0, [r3, #0]
   b6258:	4b91      	ldr	r3, [pc, #580]	; (b64a0 <setup+0x36c>)
   b625a:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b625c:	4b91      	ldr	r3, [pc, #580]	; (b64a4 <setup+0x370>)
   b625e:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b6260:	4b91      	ldr	r3, [pc, #580]	; (b64a8 <setup+0x374>)
   b6262:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b6264:	4b91      	ldr	r3, [pc, #580]	; (b64ac <setup+0x378>)
   b6266:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b6268:	4b91      	ldr	r3, [pc, #580]	; (b64b0 <setup+0x37c>)
   b626a:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b626c:	4b91      	ldr	r3, [pc, #580]	; (b64b4 <setup+0x380>)
   b626e:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b6270:	4b91      	ldr	r3, [pc, #580]	; (b64b8 <setup+0x384>)
   b6272:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b6276:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;
   b6278:	4b90      	ldr	r3, [pc, #576]	; (b64bc <setup+0x388>)
   b627a:	701c      	strb	r4, [r3, #0]
    battPercent = 50;
   b627c:	4b90      	ldr	r3, [pc, #576]	; (b64c0 <setup+0x38c>)
   b627e:	2232      	movs	r2, #50	; 0x32
   b6280:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b6282:	f008 fe19 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6286:	4a8f      	ldr	r2, [pc, #572]	; (b64c4 <setup+0x390>)
   b6288:	4601      	mov	r1, r0
   b628a:	a80f      	add	r0, sp, #60	; 0x3c
   b628c:	f009 fb66 	bl	bf95c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6290:	a80f      	add	r0, sp, #60	; 0x3c
   b6292:	f008 ff16 	bl	bf0c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b6296:	f008 fe0f 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b629a:	4a8b      	ldr	r2, [pc, #556]	; (b64c8 <setup+0x394>)
   b629c:	4601      	mov	r1, r0
   b629e:	a80f      	add	r0, sp, #60	; 0x3c
   b62a0:	f009 fb5c 	bl	bf95c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b62a4:	a80f      	add	r0, sp, #60	; 0x3c
   b62a6:	f008 ff0c 	bl	bf0c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b62aa:	f008 fe05 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62ae:	4a87      	ldr	r2, [pc, #540]	; (b64cc <setup+0x398>)
   b62b0:	4601      	mov	r1, r0
   b62b2:	a80f      	add	r0, sp, #60	; 0x3c
   b62b4:	f009 fb52 	bl	bf95c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b62b8:	a80f      	add	r0, sp, #60	; 0x3c
   b62ba:	f008 ff02 	bl	bf0c2 <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);
   b62be:	f008 fdfb 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62c2:	4a83      	ldr	r2, [pc, #524]	; (b64d0 <setup+0x39c>)
   b62c4:	4601      	mov	r1, r0
   b62c6:	a80f      	add	r0, sp, #60	; 0x3c
   b62c8:	f009 fb48 	bl	bf95c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b62cc:	a80f      	add	r0, sp, #60	; 0x3c
   b62ce:	f008 fef8 	bl	bf0c2 <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b62d2:	4b80      	ldr	r3, [pc, #512]	; (b64d4 <setup+0x3a0>)
   b62d4:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b62d8:	4b7f      	ldr	r3, [pc, #508]	; (b64d8 <setup+0x3a4>)
        BleUuid tempUUID(uuid);
   b62da:	a80f      	add	r0, sp, #60	; 0x3c
   b62dc:	6819      	ldr	r1, [r3, #0]
   b62de:	f008 fc9d 	bl	bec1c <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b62e2:	a80f      	add	r0, sp, #60	; 0x3c
   b62e4:	f008 fbfc 	bl	beae0 <_ZNK8particle7BleUuid4typeEv>
   b62e8:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b62ea:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b62ec:	f1b9 0f00 	cmp.w	r9, #0
   b62f0:	f040 812c 	bne.w	b654c <setup+0x418>
            uint16_t uuid16 = tempUUID.shorted();
   b62f4:	f008 fc10 	bl	beb18 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b62f8:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b62fc:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6300:	2302      	movs	r3, #2
   b6302:	aa0b      	add	r2, sp, #44	; 0x2c
   b6304:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6306:	4875      	ldr	r0, [pc, #468]	; (b64dc <setup+0x3a8>)
    CompassAvail = true;
   b6308:	4c75      	ldr	r4, [pc, #468]	; (b64e0 <setup+0x3ac>)
   b630a:	f009 f805 	bl	bf318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b630e:	2300      	movs	r3, #0
   b6310:	4970      	ldr	r1, [pc, #448]	; (b64d4 <setup+0x3a0>)
   b6312:	4872      	ldr	r0, [pc, #456]	; (b64dc <setup+0x3a8>)
   b6314:	2208      	movs	r2, #8
   b6316:	f009 f81d 	bl	bf354 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b631a:	f008 fdcd 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b631e:	2200      	movs	r2, #0
   b6320:	496e      	ldr	r1, [pc, #440]	; (b64dc <setup+0x3a8>)
   b6322:	f008 fe7a 	bl	bf01a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b6326:	f00b fe47 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b632a:	f00b faa5 	bl	c1878 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b632e:	f00b fe43 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b6332:	496c      	ldr	r1, [pc, #432]	; (b64e4 <setup+0x3b0>)
   b6334:	f00b fa9c 	bl	c1870 <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;
   b6338:	2301      	movs	r3, #1
   b633a:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b633c:	f00b fe3c 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   b6340:	211c      	movs	r1, #28
   b6342:	4602      	mov	r2, r0
   b6344:	4868      	ldr	r0, [pc, #416]	; (b64e8 <setup+0x3b4>)
   b6346:	f007 f80a 	bl	bd35e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b634a:	2800      	cmp	r0, #0
   b634c:	f040 8105 	bne.w	b655a <setup+0x426>
        CompassAvail = false;
   b6350:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b6352:	f00b f969 	bl	c1628 <_Z16_fetch_usbserialv>
   b6356:	4965      	ldr	r1, [pc, #404]	; (b64ec <setup+0x3b8>)
    else Serial.println("LIS3MDL Found!");
   b6358:	f009 fc3d 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b635c:	4862      	ldr	r0, [pc, #392]	; (b64e8 <setup+0x3b4>)
   b635e:	2102      	movs	r1, #2
   b6360:	f006 fef6 	bl	bd150 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b6364:	4860      	ldr	r0, [pc, #384]	; (b64e8 <setup+0x3b4>)
   b6366:	2100      	movs	r1, #0
   b6368:	f006 ff56 	bl	bd218 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b636c:	485e      	ldr	r0, [pc, #376]	; (b64e8 <setup+0x3b4>)
   b636e:	2101      	movs	r1, #1
   b6370:	f006 ff20 	bl	bd1b4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b6374:	485c      	ldr	r0, [pc, #368]	; (b64e8 <setup+0x3b4>)
   b6376:	2101      	movs	r1, #1
   b6378:	f006 ff69 	bl	bd24e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b637c:	2401      	movs	r4, #1
   b637e:	f04f 0900 	mov.w	r9, #0
    lis3mdl.setIntThreshold(500);
   b6382:	4859      	ldr	r0, [pc, #356]	; (b64e8 <setup+0x3b4>)
   b6384:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b6388:	f007 f808 	bl	bd39c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b638c:	4623      	mov	r3, r4
   b638e:	464a      	mov	r2, r9
   b6390:	4649      	mov	r1, r9
   b6392:	e9cd 9401 	strd	r9, r4, [sp, #4]
   b6396:	4854      	ldr	r0, [pc, #336]	; (b64e8 <setup+0x3b4>)
   b6398:	9400      	str	r4, [sp, #0]
   b639a:	f007 f817 	bl	bd3cc <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b639e:	f00a fcdb 	bl	c0d58 <_ZN9TimeClass5monthEv>
   b63a2:	9009      	str	r0, [sp, #36]	; 0x24
   b63a4:	f00a fccc 	bl	c0d40 <_ZN9TimeClass3dayEv>
   b63a8:	4682      	mov	sl, r0
   b63aa:	f00a fcdd 	bl	c0d68 <_ZN9TimeClass4yearEv>
   b63ae:	4683      	mov	fp, r0
   b63b0:	f00a fca2 	bl	c0cf8 <_ZN9TimeClass4hourEv>
   b63b4:	9008      	str	r0, [sp, #32]
   b63b6:	f00a fcab 	bl	c0d10 <_ZN9TimeClass6minuteEv>
   b63ba:	9007      	str	r0, [sp, #28]
   b63bc:	f00a fcb4 	bl	c0d28 <_ZN9TimeClass6secondEv>
   b63c0:	9a08      	ldr	r2, [sp, #32]
   b63c2:	9907      	ldr	r1, [sp, #28]
   b63c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b63c6:	9004      	str	r0, [sp, #16]
   b63c8:	e9cd b201 	strd	fp, r2, [sp, #4]
   b63cc:	9103      	str	r1, [sp, #12]
   b63ce:	4a48      	ldr	r2, [pc, #288]	; (b64f0 <setup+0x3bc>)
   b63d0:	f8cd a000 	str.w	sl, [sp]
   b63d4:	2110      	movs	r1, #16
   b63d6:	a80b      	add	r0, sp, #44	; 0x2c
   b63d8:	f007 feea 	bl	be1b0 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b63dc:	4945      	ldr	r1, [pc, #276]	; (b64f4 <setup+0x3c0>)
   b63de:	4846      	ldr	r0, [pc, #280]	; (b64f8 <setup+0x3c4>)
   b63e0:	f00e f8a0 	bl	c4524 <strcpy>
    strcat(filename,timestamp);
   b63e4:	a90b      	add	r1, sp, #44	; 0x2c
   b63e6:	4844      	ldr	r0, [pc, #272]	; (b64f8 <setup+0x3c4>)
   b63e8:	f00e f86c 	bl	c44c4 <strcat>
    strcpy(filenameMessages,filename);
   b63ec:	4942      	ldr	r1, [pc, #264]	; (b64f8 <setup+0x3c4>)
   b63ee:	4843      	ldr	r0, [pc, #268]	; (b64fc <setup+0x3c8>)
   b63f0:	f00e f898 	bl	c4524 <strcpy>
    strcat(filename,".csv");
   b63f4:	4942      	ldr	r1, [pc, #264]	; (b6500 <setup+0x3cc>)
   b63f6:	4840      	ldr	r0, [pc, #256]	; (b64f8 <setup+0x3c4>)
   b63f8:	f00e f864 	bl	c44c4 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b63fc:	4941      	ldr	r1, [pc, #260]	; (b6504 <setup+0x3d0>)
   b63fe:	483f      	ldr	r0, [pc, #252]	; (b64fc <setup+0x3c8>)
   b6400:	f00e f860 	bl	c44c4 <strcat>
    Serial.println(filename);
   b6404:	f00b f910 	bl	c1628 <_Z16_fetch_usbserialv>
   b6408:	493b      	ldr	r1, [pc, #236]	; (b64f8 <setup+0x3c4>)
   b640a:	f009 fbe4 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b640e:	f00b f90b 	bl	c1628 <_Z16_fetch_usbserialv>
   b6412:	493a      	ldr	r1, [pc, #232]	; (b64fc <setup+0x3c8>)
   b6414:	f009 fbdf 	bl	bfbd6 <_ZN5Print7printlnEPKc>
    watchdog.start();
   b6418:	483b      	ldr	r0, [pc, #236]	; (b6508 <setup+0x3d4>)
   b641a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b641e:	f7fd ff53 	bl	b42c8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b6422:	483a      	ldr	r0, [pc, #232]	; (b650c <setup+0x3d8>)
   b6424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6428:	f7fd ff4e 	bl	b42c8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b642c:	4838      	ldr	r0, [pc, #224]	; (b6510 <setup+0x3dc>)
   b642e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6432:	f7fd ff49 	bl	b42c8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b6436:	4b37      	ldr	r3, [pc, #220]	; (b6514 <setup+0x3e0>)
   b6438:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b643a:	4837      	ldr	r0, [pc, #220]	; (b6518 <setup+0x3e4>)
   b643c:	4b37      	ldr	r3, [pc, #220]	; (b651c <setup+0x3e8>)
   b643e:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
   b6442:	aa0f      	add	r2, sp, #60	; 0x3c
   b6444:	2108      	movs	r1, #8
   b6446:	f88d 9040 	strb.w	r9, [sp, #64]	; 0x40
   b644a:	9311      	str	r3, [sp, #68]	; 0x44
   b644c:	f7fe f95c 	bl	b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6450:	4604      	mov	r4, r0
   b6452:	e067      	b.n	b6524 <setup+0x3f0>
   b6454:	2003e58c 	.word	0x2003e58c
   b6458:	2003e584 	.word	0x2003e584
   b645c:	2003e585 	.word	0x2003e585
   b6460:	2003de40 	.word	0x2003de40
   b6464:	2003e0dd 	.word	0x2003e0dd
   b6468:	2003dd6c 	.word	0x2003dd6c
   b646c:	2003dd7c 	.word	0x2003dd7c
   b6470:	2003def8 	.word	0x2003def8
   b6474:	2003dd90 	.word	0x2003dd90
   b6478:	000b4b3d 	.word	0x000b4b3d
   b647c:	000c6b0c 	.word	0x000c6b0c
   b6480:	000b4b8d 	.word	0x000b4b8d
   b6484:	000c6b12 	.word	0x000c6b12
   b6488:	000c0f83 	.word	0x000c0f83
   b648c:	2003dd8d 	.word	0x2003dd8d
   b6490:	2003e580 	.word	0x2003e580
   b6494:	2003ddd0 	.word	0x2003ddd0
   b6498:	2003de18 	.word	0x2003de18
   b649c:	2003de1c 	.word	0x2003de1c
   b64a0:	2003e0d8 	.word	0x2003e0d8
   b64a4:	2003dda4 	.word	0x2003dda4
   b64a8:	2003dd64 	.word	0x2003dd64
   b64ac:	2003ddd4 	.word	0x2003ddd4
   b64b0:	2003e0d4 	.word	0x2003e0d4
   b64b4:	2003e0dc 	.word	0x2003e0dc
   b64b8:	2003dd8e 	.word	0x2003dd8e
   b64bc:	2003e5dc 	.word	0x2003e5dc
   b64c0:	2003ddbc 	.word	0x2003ddbc
   b64c4:	2003e5e8 	.word	0x2003e5e8
   b64c8:	2003e0e0 	.word	0x2003e0e0
   b64cc:	2003e0cc 	.word	0x2003e0cc
   b64d0:	2003ddc4 	.word	0x2003ddc4
   b64d4:	2003dd59 	.word	0x2003dd59
   b64d8:	2003db40 	.word	0x2003db40
   b64dc:	2003ddac 	.word	0x2003ddac
   b64e0:	2003dd68 	.word	0x2003dd68
   b64e4:	00061a80 	.word	0x00061a80
   b64e8:	2003de44 	.word	0x2003de44
   b64ec:	000c6b20 	.word	0x000c6b20
   b64f0:	000c693c 	.word	0x000c693c
   b64f4:	000c6b4b 	.word	0x000c6b4b
   b64f8:	2003ddd6 	.word	0x2003ddd6
   b64fc:	2003ddf4 	.word	0x2003ddf4
   b6500:	000c6a4a 	.word	0x000c6a4a
   b6504:	000c6b54 	.word	0x000c6b54
   b6508:	2003e5f4 	.word	0x2003e5f4
   b650c:	2003de24 	.word	0x2003de24
   b6510:	2003e5b0 	.word	0x2003e5b0
   b6514:	000c6c14 	.word	0x000c6c14
   b6518:	2003e0e8 	.word	0x2003e0e8
   b651c:	007a1200 	.word	0x007a1200
   b6520:	2003def9 	.word	0x2003def9
   b6524:	b9e8      	cbnz	r0, b6562 <setup+0x42e>
        Serial.println("Error: could not connect to SD card!");
   b6526:	f00b f87f 	bl	c1628 <_Z16_fetch_usbserialv>
   b652a:	4922      	ldr	r1, [pc, #136]	; (b65b4 <setup+0x480>)
   b652c:	f009 fb53 	bl	bfbd6 <_ZN5Print7printlnEPKc>
        logSensors = false;
   b6530:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b6534:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b6536:	7034      	strb	r4, [r6, #0]
   b6538:	f007 faa2 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);
   b653c:	1b40      	subs	r0, r0, r5
   b653e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b6542:	d233      	bcs.n	b65ac <setup+0x478>
   b6544:	2005      	movs	r0, #5
   b6546:	f00a fc31 	bl	c0dac <delay>
   b654a:	e7f5      	b.n	b6538 <setup+0x404>
   b654c:	f008 fae6 	bl	beb1c <_ZNK8particle7BleUuid8rawBytesEv>
   b6550:	9400      	str	r4, [sp, #0]
   b6552:	4602      	mov	r2, r0
   b6554:	2310      	movs	r3, #16
   b6556:	2107      	movs	r1, #7
   b6558:	e6d5      	b.n	b6306 <setup+0x1d2>
    else Serial.println("LIS3MDL Found!");
   b655a:	f00b f865 	bl	c1628 <_Z16_fetch_usbserialv>
   b655e:	4916      	ldr	r1, [pc, #88]	; (b65b8 <setup+0x484>)
   b6560:	e6fa      	b.n	b6358 <setup+0x224>
    if(logSensors){
   b6562:	f898 3000 	ldrb.w	r3, [r8]
   b6566:	b163      	cbz	r3, b6582 <setup+0x44e>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b6568:	4914      	ldr	r1, [pc, #80]	; (b65bc <setup+0x488>)
   b656a:	4815      	ldr	r0, [pc, #84]	; (b65c0 <setup+0x48c>)
   b656c:	f244 2202 	movw	r2, #16898	; 0x4202
   b6570:	f7fe f856 	bl	b4620 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b6574:	4913      	ldr	r1, [pc, #76]	; (b65c4 <setup+0x490>)
   b6576:	4814      	ldr	r0, [pc, #80]	; (b65c8 <setup+0x494>)
   b6578:	f009 fb2d 	bl	bfbd6 <_ZN5Print7printlnEPKc>
        myFile.close();
   b657c:	4810      	ldr	r0, [pc, #64]	; (b65c0 <setup+0x48c>)
   b657e:	f001 f849 	bl	b7614 <_ZN7FatFile5closeEv>
    if(logMessages){
   b6582:	783b      	ldrb	r3, [r7, #0]
   b6584:	2b00      	cmp	r3, #0
   b6586:	d0d7      	beq.n	b6538 <setup+0x404>
   b6588:	4810      	ldr	r0, [pc, #64]	; (b65cc <setup+0x498>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b658a:	7c03      	ldrb	r3, [r0, #16]
   b658c:	b92b      	cbnz	r3, b659a <setup+0x466>
   b658e:	4910      	ldr	r1, [pc, #64]	; (b65d0 <setup+0x49c>)
   b6590:	f244 2202 	movw	r2, #16898	; 0x4202
   b6594:	3010      	adds	r0, #16
   b6596:	f7fe f843 	bl	b4620 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b659a:	490e      	ldr	r1, [pc, #56]	; (b65d4 <setup+0x4a0>)
   b659c:	480b      	ldr	r0, [pc, #44]	; (b65cc <setup+0x498>)
   b659e:	2201      	movs	r2, #1
   b65a0:	f7fd fee2 	bl	b4368 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b65a4:	480c      	ldr	r0, [pc, #48]	; (b65d8 <setup+0x4a4>)
   b65a6:	f001 f835 	bl	b7614 <_ZN7FatFile5closeEv>
   b65aa:	e7c5      	b.n	b6538 <setup+0x404>
}
   b65ac:	b015      	add	sp, #84	; 0x54
   b65ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b65b2:	bf00      	nop
   b65b4:	000c6b5d 	.word	0x000c6b5d
   b65b8:	000c6b3c 	.word	0x000c6b3c
   b65bc:	2003ddd6 	.word	0x2003ddd6
   b65c0:	2003df30 	.word	0x2003df30
   b65c4:	000c6b82 	.word	0x000c6b82
   b65c8:	2003df20 	.word	0x2003df20
   b65cc:	2003dea0 	.word	0x2003dea0
   b65d0:	2003ddf4 	.word	0x2003ddf4
   b65d4:	000c6bd8 	.word	0x000c6bd8
   b65d8:	2003deb0 	.word	0x2003deb0

000b65dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b65dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b65de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65e0:	4604      	mov	r4, r0
   b65e2:	460d      	mov	r5, r1
   b65e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b65e6:	d916      	bls.n	b6616 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b65e8:	4290      	cmp	r0, r2
   b65ea:	d215      	bcs.n	b6618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b65ec:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b65f0:	1a75      	subs	r5, r6, r1
   b65f2:	f1a1 0714 	sub.w	r7, r1, #20
   b65f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b65f8:	42b7      	cmp	r7, r6
   b65fa:	d01c      	beq.n	b6636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b65fc:	b12c      	cbz	r4, b660a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b65fe:	4631      	mov	r1, r6
   b6600:	4620      	mov	r0, r4
   b6602:	f008 f88f 	bl	be724 <_ZN6StringC1EOS_>
   b6606:	7c33      	ldrb	r3, [r6, #16]
   b6608:	7423      	strb	r3, [r4, #16]
   b660a:	4630      	mov	r0, r6
   b660c:	f008 f80e 	bl	be62c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6610:	3e14      	subs	r6, #20
   b6612:	3c14      	subs	r4, #20
   b6614:	e7f0      	b.n	b65f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6616:	d00e      	beq.n	b6636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6618:	42b5      	cmp	r5, r6
   b661a:	d00c      	beq.n	b6636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b661c:	b12c      	cbz	r4, b662a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b661e:	4629      	mov	r1, r5
   b6620:	4620      	mov	r0, r4
   b6622:	f008 f87f 	bl	be724 <_ZN6StringC1EOS_>
   b6626:	7c2b      	ldrb	r3, [r5, #16]
   b6628:	7423      	strb	r3, [r4, #16]
   b662a:	4628      	mov	r0, r5
   b662c:	f007 fffe 	bl	be62c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6630:	3514      	adds	r5, #20
   b6632:	3414      	adds	r4, #20
   b6634:	e7f0      	b.n	b6618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b6636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b663c:	2300      	movs	r3, #0
   b663e:	e9c0 3300 	strd	r3, r3, [r0]
   b6642:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6644:	684f      	ldr	r7, [r1, #4]
   b6646:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6648:	4604      	mov	r4, r0
   b664a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b664c:	dd23      	ble.n	b6696 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b664e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6652:	fb08 f007 	mul.w	r0, r8, r7
   b6656:	f007 fd83 	bl	be160 <malloc>
            if (!d) {
   b665a:	4605      	mov	r5, r0
   b665c:	b1d8      	cbz	r0, b6696 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b665e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6662:	fb08 1202 	mla	r2, r8, r2, r1
   b6666:	f7ff ffb9 	bl	b65dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b666a:	6820      	ldr	r0, [r4, #0]
   b666c:	f007 fd80 	bl	be170 <free>
        data_ = d;
   b6670:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6672:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6674:	e9d6 7300 	ldrd	r7, r3, [r6]
   b6678:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b667c:	45b8      	cmp	r8, r7
   b667e:	d008      	beq.n	b6692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6680:	4639      	mov	r1, r7
   b6682:	4628      	mov	r0, r5
   b6684:	f008 f868 	bl	be758 <_ZN6StringC1ERKS_>
   b6688:	7c3b      	ldrb	r3, [r7, #16]
   b668a:	742b      	strb	r3, [r5, #16]
   b668c:	3714      	adds	r7, #20
   b668e:	3514      	adds	r5, #20
   b6690:	e7f4      	b.n	b667c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6692:	6873      	ldr	r3, [r6, #4]
   b6694:	6063      	str	r3, [r4, #4]
}
   b6696:	4620      	mov	r0, r4
   b6698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b669c <_GLOBAL__sub_I_SystemMode>:
   b669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   b66a0:	4b85      	ldr	r3, [pc, #532]	; (b68b8 <_GLOBAL__sub_I_SystemMode+0x21c>)
        static SPIClass instance(Interface);
   b66a2:	4c86      	ldr	r4, [pc, #536]	; (b68bc <_GLOBAL__sub_I_SystemMode+0x220>)
   b66a4:	2501      	movs	r5, #1
   b66a6:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b66a8:	4b85      	ldr	r3, [pc, #532]	; (b68c0 <_GLOBAL__sub_I_SystemMode+0x224>)
   b66aa:	2200      	movs	r2, #0
   b66ac:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b66b0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b66b4:	609a      	str	r2, [r3, #8]
   b66b6:	b092      	sub	sp, #72	; 0x48

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b66b8:	2003      	movs	r0, #3
   b66ba:	f007 fc75 	bl	bdfa8 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b66be:	4881      	ldr	r0, [pc, #516]	; (b68c4 <_GLOBAL__sub_I_SystemMode+0x228>)
   b66c0:	f001 fd7e 	bl	b81c0 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b66c4:	4880      	ldr	r0, [pc, #512]	; (b68c8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b66c6:	f006 fcc7 	bl	bd058 <_ZN16Adafruit_LIS3MDLC1Ev>
   b66ca:	7823      	ldrb	r3, [r4, #0]
   b66cc:	f3bf 8f5b 	dmb	ish
   b66d0:	07db      	lsls	r3, r3, #31
   b66d2:	d40a      	bmi.n	b66ea <_GLOBAL__sub_I_SystemMode+0x4e>
   b66d4:	4620      	mov	r0, r4
   b66d6:	f7fd fcf3 	bl	b40c0 <__cxa_guard_acquire>
   b66da:	b130      	cbz	r0, b66ea <_GLOBAL__sub_I_SystemMode+0x4e>
   b66dc:	487b      	ldr	r0, [pc, #492]	; (b68cc <_GLOBAL__sub_I_SystemMode+0x230>)
   b66de:	4629      	mov	r1, r5
   b66e0:	f007 fe12 	bl	be308 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b66e4:	4620      	mov	r0, r4
   b66e6:	f7fd fcf0 	bl	b40ca <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b66ea:	4b79      	ldr	r3, [pc, #484]	; (b68d0 <_GLOBAL__sub_I_SystemMode+0x234>)
        filter_(level, filters) {
   b66ec:	4d79      	ldr	r5, [pc, #484]	; (b68d4 <_GLOBAL__sub_I_SystemMode+0x238>)
   b66ee:	2264      	movs	r2, #100	; 0x64
   b66f0:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b66f4:	4a78      	ldr	r2, [pc, #480]	; (b68d8 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b66f6:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b66fa:	2400      	movs	r4, #0
   b66fc:	2601      	movs	r6, #1
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b66fe:	4a73      	ldr	r2, [pc, #460]	; (b68cc <_GLOBAL__sub_I_SystemMode+0x230>)
   b6700:	605c      	str	r4, [r3, #4]
   b6702:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b6706:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b670a:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
   b670e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b6712:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b6716:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b671a:	4b70      	ldr	r3, [pc, #448]	; (b68dc <_GLOBAL__sub_I_SystemMode+0x240>)
  File() {}
   b671c:	4a70      	ldr	r2, [pc, #448]	; (b68e0 <_GLOBAL__sub_I_SystemMode+0x244>)
   b671e:	601a      	str	r2, [r3, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6720:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b6724:	605c      	str	r4, [r3, #4]
   b6726:	f8c3 8008 	str.w	r8, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b672a:	611c      	str	r4, [r3, #16]
   b672c:	4b6d      	ldr	r3, [pc, #436]	; (b68e4 <_GLOBAL__sub_I_SystemMode+0x248>)
        capacity_(0) {
   b672e:	9407      	str	r4, [sp, #28]
   b6730:	601a      	str	r2, [r3, #0]
   b6732:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b6736:	611c      	str	r4, [r3, #16]
   b6738:	4b6b      	ldr	r3, [pc, #428]	; (b68e8 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b673a:	601a      	str	r2, [r3, #0]
   b673c:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b6740:	611c      	str	r4, [r3, #16]
   b6742:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b6746:	f00a ff6f 	bl	c1628 <_Z16_fetch_usbserialv>
   b674a:	a905      	add	r1, sp, #20
   b674c:	4607      	mov	r7, r0
   b674e:	a808      	add	r0, sp, #32
   b6750:	f7ff ff72 	bl	b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b6754:	a908      	add	r1, sp, #32
   b6756:	a80b      	add	r0, sp, #44	; 0x2c
   b6758:	f7ff ff6e 	bl	b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b675c:	4b63      	ldr	r3, [pc, #396]	; (b68ec <_GLOBAL__sub_I_SystemMode+0x250>)
   b675e:	602b      	str	r3, [r5, #0]
   b6760:	a90b      	add	r1, sp, #44	; 0x2c
   b6762:	a80e      	add	r0, sp, #56	; 0x38
   b6764:	f7ff ff68 	bl	b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6768:	aa0e      	add	r2, sp, #56	; 0x38
   b676a:	211e      	movs	r1, #30
   b676c:	1d28      	adds	r0, r5, #4
   b676e:	f009 ff4d 	bl	c060c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6772:	a80e      	add	r0, sp, #56	; 0x38
   b6774:	f7ff fc7e 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6778:	a80b      	add	r0, sp, #44	; 0x2c
   b677a:	f7ff fc7b 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b677e:	4b5c      	ldr	r3, [pc, #368]	; (b68f0 <_GLOBAL__sub_I_SystemMode+0x254>)
   b6780:	602b      	str	r3, [r5, #0]
   b6782:	622f      	str	r7, [r5, #32]
   b6784:	a808      	add	r0, sp, #32
   b6786:	f7ff fc75 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b678a:	4b5a      	ldr	r3, [pc, #360]	; (b68f4 <_GLOBAL__sub_I_SystemMode+0x258>)
   b678c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b678e:	f00a ff4b 	bl	c1628 <_Z16_fetch_usbserialv>
   b6792:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6796:	f00a ff37 	bl	c1608 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b679a:	f009 fc19 	bl	bffd0 <_ZN5spark10LogManager8instanceEv>
   b679e:	4629      	mov	r1, r5
   b67a0:	f009 fe0a 	bl	c03b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b67a4:	a805      	add	r0, sp, #20
   b67a6:	f7ff fc65 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b67aa:	4853      	ldr	r0, [pc, #332]	; (b68f8 <_GLOBAL__sub_I_SystemMode+0x25c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b67ac:	4d53      	ldr	r5, [pc, #332]	; (b68fc <_GLOBAL__sub_I_SystemMode+0x260>)
	    _M_invoker = &_My_handler::_M_invoke;
   b67ae:	4f54      	ldr	r7, [pc, #336]	; (b6900 <_GLOBAL__sub_I_SystemMode+0x264>)
Servo ESCL; 
   b67b0:	f007 feea 	bl	be588 <_ZN5ServoC1Ev>
Servo ESCR;
   b67b4:	4853      	ldr	r0, [pc, #332]	; (b6904 <_GLOBAL__sub_I_SystemMode+0x268>)
   b67b6:	f007 fee7 	bl	be588 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b67ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b67be:	682b      	ldr	r3, [r5, #0]
   b67c0:	9300      	str	r3, [sp, #0]
   b67c2:	4b51      	ldr	r3, [pc, #324]	; (b6908 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b67c4:	4951      	ldr	r1, [pc, #324]	; (b690c <_GLOBAL__sub_I_SystemMode+0x270>)
   b67c6:	681b      	ldr	r3, [r3, #0]
   b67c8:	4851      	ldr	r0, [pc, #324]	; (b6910 <_GLOBAL__sub_I_SystemMode+0x274>)
   b67ca:	f04f 0210 	mov.w	r2, #16
   b67ce:	f7ff fc64 	bl	b609a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b67d2:	4b50      	ldr	r3, [pc, #320]	; (b6914 <_GLOBAL__sub_I_SystemMode+0x278>)
   b67d4:	9402      	str	r4, [sp, #8]
   b67d6:	9301      	str	r3, [sp, #4]
   b67d8:	682b      	ldr	r3, [r5, #0]
   b67da:	9300      	str	r3, [sp, #0]
   b67dc:	4b4e      	ldr	r3, [pc, #312]	; (b6918 <_GLOBAL__sub_I_SystemMode+0x27c>)
   b67de:	494f      	ldr	r1, [pc, #316]	; (b691c <_GLOBAL__sub_I_SystemMode+0x280>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	484f      	ldr	r0, [pc, #316]	; (b6920 <_GLOBAL__sub_I_SystemMode+0x284>)
   b67e4:	f04f 0204 	mov.w	r2, #4
   b67e8:	f7ff fc57 	bl	b609a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b67ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b67f0:	682b      	ldr	r3, [r5, #0]
   b67f2:	9300      	str	r3, [sp, #0]
   b67f4:	4b4b      	ldr	r3, [pc, #300]	; (b6924 <_GLOBAL__sub_I_SystemMode+0x288>)
   b67f6:	494c      	ldr	r1, [pc, #304]	; (b6928 <_GLOBAL__sub_I_SystemMode+0x28c>)
   b67f8:	681b      	ldr	r3, [r3, #0]
   b67fa:	484c      	ldr	r0, [pc, #304]	; (b692c <_GLOBAL__sub_I_SystemMode+0x290>)
   b67fc:	f04f 0210 	mov.w	r2, #16
   b6800:	f7ff fc4b 	bl	b609a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b6804:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6808:	682b      	ldr	r3, [r5, #0]
   b680a:	9300      	str	r3, [sp, #0]
   b680c:	4b48      	ldr	r3, [pc, #288]	; (b6930 <_GLOBAL__sub_I_SystemMode+0x294>)
   b680e:	4949      	ldr	r1, [pc, #292]	; (b6934 <_GLOBAL__sub_I_SystemMode+0x298>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	4849      	ldr	r0, [pc, #292]	; (b6938 <_GLOBAL__sub_I_SystemMode+0x29c>)
	    _M_manager = &_My_handler::_M_manager;
   b6814:	4d49      	ldr	r5, [pc, #292]	; (b693c <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b6816:	f04f 0210 	mov.w	r2, #16
   b681a:	f7ff fc3e 	bl	b609a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b681e:	4848      	ldr	r0, [pc, #288]	; (b6940 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   b6820:	f008 fd85 	bl	bf32e <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6824:	4b47      	ldr	r3, [pc, #284]	; (b6944 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b6826:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b6828:	aa0e      	add	r2, sp, #56	; 0x38
   b682a:	4623      	mov	r3, r4
   b682c:	f643 2198 	movw	r1, #15000	; 0x3a98
   b6830:	4845      	ldr	r0, [pc, #276]	; (b6948 <_GLOBAL__sub_I_SystemMode+0x2ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b6832:	9711      	str	r7, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b6834:	9510      	str	r5, [sp, #64]	; 0x40
   b6836:	f7fd fe57 	bl	b44e8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b683a:	a80e      	add	r0, sp, #56	; 0x38
   b683c:	f7fd fe16 	bl	b446c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6840:	4b42      	ldr	r3, [pc, #264]	; (b694c <_GLOBAL__sub_I_SystemMode+0x2b0>)
   b6842:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b6844:	aa0e      	add	r2, sp, #56	; 0x38
   b6846:	4623      	mov	r3, r4
   b6848:	4641      	mov	r1, r8
   b684a:	4841      	ldr	r0, [pc, #260]	; (b6950 <_GLOBAL__sub_I_SystemMode+0x2b4>)
	    _M_manager = &_My_handler::_M_manager;
   b684c:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6850:	f7fd fe4a 	bl	b44e8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6854:	a80e      	add	r0, sp, #56	; 0x38
   b6856:	f7fd fe09 	bl	b446c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b685a:	4b3e      	ldr	r3, [pc, #248]	; (b6954 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b685c:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b685e:	aa0e      	add	r2, sp, #56	; 0x38
   b6860:	4623      	mov	r3, r4
   b6862:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b6866:	483c      	ldr	r0, [pc, #240]	; (b6958 <_GLOBAL__sub_I_SystemMode+0x2bc>)
	    _M_manager = &_My_handler::_M_manager;
   b6868:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b686c:	f7fd fe3c 	bl	b44e8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6870:	a80e      	add	r0, sp, #56	; 0x38
   b6872:	f7fd fdfb 	bl	b446c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6876:	4b39      	ldr	r3, [pc, #228]	; (b695c <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b6878:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b687a:	aa0e      	add	r2, sp, #56	; 0x38
   b687c:	4623      	mov	r3, r4
   b687e:	f643 2198 	movw	r1, #15000	; 0x3a98
   b6882:	4837      	ldr	r0, [pc, #220]	; (b6960 <_GLOBAL__sub_I_SystemMode+0x2c4>)
	    _M_manager = &_My_handler::_M_manager;
   b6884:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6888:	f7fd fe2e 	bl	b44e8 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b688c:	a80e      	add	r0, sp, #56	; 0x38
   b688e:	f7fd fded 	bl	b446c <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6892:	4622      	mov	r2, r4
   b6894:	2114      	movs	r1, #20
   b6896:	4630      	mov	r0, r6
   b6898:	f007 fbae 	bl	bdff8 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b689c:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b689e:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b68a0:	9200      	str	r2, [sp, #0]
   b68a2:	9601      	str	r6, [sp, #4]
   b68a4:	4632      	mov	r2, r6
   b68a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b68aa:	482e      	ldr	r0, [pc, #184]	; (b6964 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b68ac:	f007 fd04 	bl	be2b8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b68b0:	b012      	add	sp, #72	; 0x48
   b68b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68b6:	bf00      	nop
   b68b8:	2003dda8 	.word	0x2003dda8
   b68bc:	2003dd40 	.word	0x2003dd40
   b68c0:	2003dd94 	.word	0x2003dd94
   b68c4:	2003df54 	.word	0x2003df54
   b68c8:	2003de44 	.word	0x2003de44
   b68cc:	2003dd44 	.word	0x2003dd44
   b68d0:	2003e0e8 	.word	0x2003e0e8
   b68d4:	2003ded4 	.word	0x2003ded4
   b68d8:	000c6c14 	.word	0x000c6c14
   b68dc:	2003df20 	.word	0x2003df20
   b68e0:	000c6c80 	.word	0x000c6c80
   b68e4:	2003dea0 	.word	0x2003dea0
   b68e8:	2003de6c 	.word	0x2003de6c
   b68ec:	000c6c3c 	.word	0x000c6c3c
   b68f0:	000c7da4 	.word	0x000c7da4
   b68f4:	000c6c68 	.word	0x000c6c68
   b68f8:	2003dd6c 	.word	0x2003dd6c
   b68fc:	2003db40 	.word	0x2003db40
   b6900:	000b4243 	.word	0x000b4243
   b6904:	2003dd7c 	.word	0x2003dd7c
   b6908:	2003db54 	.word	0x2003db54
   b690c:	000c6bfd 	.word	0x000c6bfd
   b6910:	2003e5e8 	.word	0x2003e5e8
   b6914:	000b4bed 	.word	0x000b4bed
   b6918:	2003db50 	.word	0x2003db50
   b691c:	000c6c00 	.word	0x000c6c00
   b6920:	2003e0e0 	.word	0x2003e0e0
   b6924:	2003db4c 	.word	0x2003db4c
   b6928:	000c6c03 	.word	0x000c6c03
   b692c:	2003e0cc 	.word	0x2003e0cc
   b6930:	2003db48 	.word	0x2003db48
   b6934:	000c6c07 	.word	0x000c6c07
   b6938:	2003ddc4 	.word	0x2003ddc4
   b693c:	000b422f 	.word	0x000b422f
   b6940:	2003ddac 	.word	0x2003ddac
   b6944:	000b4631 	.word	0x000b4631
   b6948:	2003e5f4 	.word	0x2003e5f4
   b694c:	000b4561 	.word	0x000b4561
   b6950:	2003de24 	.word	0x2003de24
   b6954:	000b4385 	.word	0x000b4385
   b6958:	2003df04 	.word	0x2003df04
   b695c:	000b40f9 	.word	0x000b40f9
   b6960:	2003e5b0 	.word	0x2003e5b0
   b6964:	2003e58c 	.word	0x2003e58c

000b6968 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6968:	2904      	cmp	r1, #4
   b696a:	d804      	bhi.n	b6976 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b696c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6970:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6974:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6976:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6978:	bf9b      	ittet	ls
   b697a:	f101 31ff 	addls.w	r1, r1, #4294967295
   b697e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6982:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6984:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6986:	bf84      	itt	hi
   b6988:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b698c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b698e:	4770      	bx	lr

000b6990 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6990:	b510      	push	{r4, lr}
   b6992:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6994:	3024      	adds	r0, #36	; 0x24
   b6996:	f000 ff69 	bl	b786c <_ZN8FatCache4syncEv>
   b699a:	b128      	cbz	r0, b69a8 <_ZN9FatVolume9cacheSyncEv+0x18>
   b699c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b69a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b69a4:	f000 bf62 	b.w	b786c <_ZN8FatCache4syncEv>
  }
   b69a8:	bd10      	pop	{r4, pc}

000b69aa <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b69aa:	1e41      	subs	r1, r0, #1
   b69ac:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b69b0:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b69b2:	0842      	lsrs	r2, r0, #1
   b69b4:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b69b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b69bc:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b69c0:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b69c2:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b69c4:	d1f5      	bne.n	b69b2 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b69c6:	4770      	bx	lr

000b69c8 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b69c8:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b69ca:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b69cc:	4604      	mov	r4, r0
   b69ce:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b69d0:	b923      	cbnz	r3, b69dc <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b69d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b69d6:	6889      	ldr	r1, [r1, #8]
   b69d8:	f000 bc16 	b.w	b7208 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b69dc:	2224      	movs	r2, #36	; 0x24
   b69de:	2100      	movs	r1, #0
   b69e0:	f00d fd3a 	bl	c4458 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b69e4:	2310      	movs	r3, #16
  m_flags = F_READ;
   b69e6:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b69e8:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b69ea:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b69ec:	68ab      	ldr	r3, [r5, #8]
   b69ee:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b69f0:	68eb      	ldr	r3, [r5, #12]
   b69f2:	6223      	str	r3, [r4, #32]
}
   b69f4:	bd38      	pop	{r3, r4, r5, pc}

000b69f6 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b69f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69fa:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b69fc:	7803      	ldrb	r3, [r0, #0]
   b69fe:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6a02:	4606      	mov	r6, r0
   b6a04:	460f      	mov	r7, r1
   b6a06:	4690      	mov	r8, r2
   b6a08:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6a0c:	2b00      	cmp	r3, #0
   b6a0e:	d05d      	beq.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
   b6a10:	2a0c      	cmp	r2, #12
   b6a12:	d95b      	bls.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6a14:	78c3      	ldrb	r3, [r0, #3]
   b6a16:	b933      	cbnz	r3, b6a26 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6a18:	f000 fb46 	bl	b70a8 <_ZN7FatFile6getSFNEPc>
   b6a1c:	4604      	mov	r4, r0
}
   b6a1e:	4620      	mov	r0, r4
   b6a20:	b00d      	add	sp, #52	; 0x34
   b6a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6a26:	4601      	mov	r1, r0
   b6a28:	a803      	add	r0, sp, #12
   b6a2a:	f7ff ffcd 	bl	b69c8 <_ZN7FatFile11openClusterEPS_>
   b6a2e:	2800      	cmp	r0, #0
   b6a30:	d04c      	beq.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6a32:	eb07 0308 	add.w	r3, r7, r8
   b6a36:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6a3a:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6a3e:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6a40:	78f3      	ldrb	r3, [r6, #3]
   b6a42:	fa5f f58b 	uxtb.w	r5, fp
   b6a46:	42ab      	cmp	r3, r5
   b6a48:	d340      	bcc.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6a4a:	88b1      	ldrh	r1, [r6, #4]
   b6a4c:	eba1 010b 	sub.w	r1, r1, fp
   b6a50:	0149      	lsls	r1, r1, #5
   b6a52:	a803      	add	r0, sp, #12
   b6a54:	f000 fcbe 	bl	b73d4 <_ZN7FatFile7seekSetEm>
   b6a58:	4604      	mov	r4, r0
   b6a5a:	2800      	cmp	r0, #0
   b6a5c:	d036      	beq.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6a5e:	2100      	movs	r1, #0
   b6a60:	a803      	add	r0, sp, #12
   b6a62:	f000 fc98 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6a66:	4603      	mov	r3, r0
   b6a68:	b380      	cbz	r0, b6acc <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6a6a:	7ac2      	ldrb	r2, [r0, #11]
   b6a6c:	2a0f      	cmp	r2, #15
   b6a6e:	d12d      	bne.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6a70:	7802      	ldrb	r2, [r0, #0]
   b6a72:	f002 021f 	and.w	r2, r2, #31
   b6a76:	42aa      	cmp	r2, r5
   b6a78:	d128      	bne.n	b6acc <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6a7a:	f10b 35ff 	add.w	r5, fp, #4294967295
   b6a7e:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6a82:	197a      	adds	r2, r7, r5
   b6a84:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6a86:	4618      	mov	r0, r3
   b6a88:	9101      	str	r1, [sp, #4]
   b6a8a:	f7ff ff6d 	bl	b6968 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6a8e:	b168      	cbz	r0, b6aac <_ZN7FatFile7getNameEPcj+0xb6>
   b6a90:	45a8      	cmp	r8, r5
   b6a92:	d912      	bls.n	b6aba <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b6a94:	9901      	ldr	r1, [sp, #4]
   b6a96:	3101      	adds	r1, #1
   b6a98:	287f      	cmp	r0, #127	; 0x7f
   b6a9a:	b2c9      	uxtb	r1, r1
   b6a9c:	bf28      	it	cs
   b6a9e:	203f      	movcs	r0, #63	; 0x3f
   b6aa0:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6aa2:	f802 0b01 	strb.w	r0, [r2], #1
   b6aa6:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6aaa:	d1ec      	bne.n	b6a86 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6aac:	45a8      	cmp	r8, r5
   b6aae:	d904      	bls.n	b6aba <_ZN7FatFile7getNameEPcj+0xc4>
   b6ab0:	781a      	ldrb	r2, [r3, #0]
   b6ab2:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b6ab4:	bf48      	it	mi
   b6ab6:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6aba:	9a00      	ldr	r2, [sp, #0]
   b6abc:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6ac0:	781b      	ldrb	r3, [r3, #0]
   b6ac2:	065b      	lsls	r3, r3, #25
   b6ac4:	f10b 0b01 	add.w	fp, fp, #1
   b6ac8:	d5ba      	bpl.n	b6a40 <_ZN7FatFile7getNameEPcj+0x4a>
   b6aca:	e7a8      	b.n	b6a1e <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6acc:	2400      	movs	r4, #0
   b6ace:	703c      	strb	r4, [r7, #0]
  return false;
   b6ad0:	e7a5      	b.n	b6a1e <_ZN7FatFile7getNameEPcj+0x28>
	...

000b6ad4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6ad8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6ada:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6ade:	2b20      	cmp	r3, #32
   b6ae0:	d0fa      	beq.n	b6ad8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6ae2:	4d6a      	ldr	r5, [pc, #424]	; (b6c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6ae4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6ae6:	2400      	movs	r4, #0
    c = path[len];
   b6ae8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6aea:	b1c3      	cbz	r3, b6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6aec:	2b2f      	cmp	r3, #47	; 0x2f
   b6aee:	d016      	beq.n	b6b1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6af0:	2b5c      	cmp	r3, #92	; 0x5c
   b6af2:	d102      	bne.n	b6afa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6af4:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6afa:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6afe:	b2c0      	uxtb	r0, r0
   b6b00:	281d      	cmp	r0, #29
   b6b02:	d803      	bhi.n	b6b0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6b04:	fa25 f000 	lsr.w	r0, r5, r0
   b6b08:	07c0      	lsls	r0, r0, #31
   b6b0a:	d4f3      	bmi.n	b6af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6b0c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6b10:	283c      	cmp	r0, #60	; 0x3c
   b6b12:	d0ef      	beq.n	b6af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6b14:	3b20      	subs	r3, #32
   b6b16:	2b5e      	cmp	r3, #94	; 0x5e
   b6b18:	d8ec      	bhi.n	b6af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6b1a:	3401      	adds	r4, #1
    c = path[len];
   b6b1c:	e7e4      	b.n	b6ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6b1e:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6b20:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6b22:	4607      	mov	r7, r0
   b6b24:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6b28:	2d20      	cmp	r5, #32
   b6b2a:	d0fa      	beq.n	b6b22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6b2c:	2d2f      	cmp	r5, #47	; 0x2f
   b6b2e:	d0f8      	beq.n	b6b22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6b30:	6017      	str	r7, [r2, #0]
  while (len) {
   b6b32:	b14c      	cbz	r4, b6b48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6b34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6b38:	2a2e      	cmp	r2, #46	; 0x2e
   b6b3a:	d001      	beq.n	b6b40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6b3c:	2a20      	cmp	r2, #32
   b6b3e:	d101      	bne.n	b6b44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6b40:	3c01      	subs	r4, #1
  while (len) {
   b6b42:	e7f6      	b.n	b6b32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6b44:	2cff      	cmp	r4, #255	; 0xff
   b6b46:	dcd5      	bgt.n	b6af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6b48:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6b4c:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6b50:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6b52:	f8c1 300d 	str.w	r3, [r1, #13]
   b6b56:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6b58:	f04f 0800 	mov.w	r8, #0
   b6b5c:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6b60:	2b2e      	cmp	r3, #46	; 0x2e
   b6b62:	d001      	beq.n	b6b68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6b64:	2b20      	cmp	r3, #32
   b6b66:	d102      	bne.n	b6b6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6b68:	f108 0801 	add.w	r8, r8, #1
   b6b6c:	e7f6      	b.n	b6b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6b6e:	fab8 f088 	clz	r0, r8
   b6b72:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6b74:	1e65      	subs	r5, r4, #1
   b6b76:	1c6b      	adds	r3, r5, #1
   b6b78:	d002      	beq.n	b6b80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6b7a:	5d73      	ldrb	r3, [r6, r5]
   b6b7c:	2b2e      	cmp	r3, #46	; 0x2e
   b6b7e:	d114      	bne.n	b6baa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6b80:	f04f 0900 	mov.w	r9, #0
   b6b84:	2707      	movs	r7, #7
   b6b86:	464a      	mov	r2, r9
   b6b88:	46ca      	mov	sl, r9
   b6b8a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6b8e:	45a0      	cmp	r8, r4
   b6b90:	da68      	bge.n	b6c64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6b92:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6b96:	2b20      	cmp	r3, #32
   b6b98:	d003      	beq.n	b6ba2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6b9a:	2b2e      	cmp	r3, #46	; 0x2e
   b6b9c:	d107      	bne.n	b6bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6b9e:	45a8      	cmp	r8, r5
   b6ba0:	d012      	beq.n	b6bc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6ba2:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6ba4:	f108 0801 	add.w	r8, r8, #1
   b6ba8:	e7f1      	b.n	b6b8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6baa:	3d01      	subs	r5, #1
   b6bac:	e7e3      	b.n	b6b76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6bae:	2b22      	cmp	r3, #34	; 0x22
   b6bb0:	d008      	beq.n	b6bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6bb2:	2b7c      	cmp	r3, #124	; 0x7c
   b6bb4:	d006      	beq.n	b6bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6bb6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6bba:	f1bc 0f05 	cmp.w	ip, #5
   b6bbe:	d80a      	bhi.n	b6bd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6bc0:	2b2d      	cmp	r3, #45	; 0x2d
   b6bc2:	d012      	beq.n	b6bea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6bc4:	45a8      	cmp	r8, r5
   b6bc6:	d15b      	bne.n	b6c80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6bc8:	2f0a      	cmp	r7, #10
   b6bca:	d04a      	beq.n	b6c62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6bcc:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6bce:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6bd0:	f04f 0e10 	mov.w	lr, #16
   b6bd4:	e7e6      	b.n	b6ba4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6bd6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6bda:	f1bc 0f05 	cmp.w	ip, #5
   b6bde:	d9f1      	bls.n	b6bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6be0:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6be4:	f1bc 0f02 	cmp.w	ip, #2
   b6be8:	d9ec      	bls.n	b6bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6bea:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6bee:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6bf2:	d8e7      	bhi.n	b6bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6bf4:	45a8      	cmp	r8, r5
   b6bf6:	d0e7      	beq.n	b6bc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6bf8:	42ba      	cmp	r2, r7
   b6bfa:	d830      	bhi.n	b6c5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6bfc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6c00:	f1bc 0f19 	cmp.w	ip, #25
   b6c04:	d81a      	bhi.n	b6c3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6c06:	3b20      	subs	r3, #32
        lc |= bit;
   b6c08:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6c0c:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6c0e:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6c12:	f102 0c01 	add.w	ip, r2, #1
   b6c16:	fa5f fc8c 	uxtb.w	ip, ip
   b6c1a:	440a      	add	r2, r1
      if (i < 7) {
   b6c1c:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6c20:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6c22:	d801      	bhi.n	b6c28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6c24:	f881 c00c 	strb.w	ip, [r1, #12]
   b6c28:	4662      	mov	r2, ip
   b6c2a:	e7bb      	b.n	b6ba4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6c2c:	45a8      	cmp	r8, r5
   b6c2e:	dc18      	bgt.n	b6c62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6c30:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6c32:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6c34:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6c36:	f04f 0e10 	mov.w	lr, #16
   b6c3a:	e7b2      	b.n	b6ba2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6c3c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6c40:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6c44:	bf98      	it	ls
   b6c46:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6c4a:	e7e2      	b.n	b6c12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6c4c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6c4e:	2001      	movs	r0, #1
   b6c50:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6c52:	4419      	add	r1, r3
   b6c54:	237e      	movs	r3, #126	; 0x7e
   b6c56:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6c58:	2331      	movs	r3, #49	; 0x31
   b6c5a:	738b      	strb	r3, [r1, #14]
   b6c5c:	e74b      	b.n	b6af6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6c5e:	2f0a      	cmp	r7, #10
   b6c60:	d1e4      	bne.n	b6c2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6c62:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6c64:	7b4b      	ldrb	r3, [r1, #13]
   b6c66:	2b20      	cmp	r3, #32
   b6c68:	f43f af44 	beq.w	b6af4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6c6c:	2800      	cmp	r0, #0
   b6c6e:	d0ed      	beq.n	b6c4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6c70:	ea1a 0f09 	tst.w	sl, r9
   b6c74:	bf18      	it	ne
   b6c76:	f04f 0902 	movne.w	r9, #2
   b6c7a:	f881 9000 	strb.w	r9, [r1]
   b6c7e:	e73a      	b.n	b6af6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6c80:	42ba      	cmp	r2, r7
   b6c82:	d8ec      	bhi.n	b6c5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6c84:	2000      	movs	r0, #0
      c = '_';
   b6c86:	235f      	movs	r3, #95	; 0x5f
   b6c88:	e7c3      	b.n	b6c12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6c8a:	bf00      	nop
   b6c8c:	31000101 	.word	0x31000101

000b6c90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6c94:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6c98:	4606      	mov	r6, r0
   b6c9a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6c9c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6c9e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6ca0:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6ca4:	6861      	ldr	r1, [r4, #4]
   b6ca6:	68a2      	ldr	r2, [r4, #8]
   b6ca8:	186b      	adds	r3, r5, r1
   b6caa:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6cac:	4411      	add	r1, r2
   b6cae:	4291      	cmp	r1, r2
   b6cb0:	d006      	beq.n	b6cc0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6cb2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6cb6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6cba:	4043      	eors	r3, r0
   b6cbc:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6cbe:	e7f6      	b.n	b6cae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6cc0:	f1b9 0f03 	cmp.w	r9, #3
   b6cc4:	bf28      	it	cs
   b6cc6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cca:	f109 0204 	add.w	r2, r9, #4
   b6cce:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6cd0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cd4:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cd6:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cd8:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cda:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6cdc:	bf94      	ite	ls
   b6cde:	3130      	addls	r1, #48	; 0x30
   b6ce0:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6ce2:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6ce4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6ce6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6cea:	d1f1      	bne.n	b6cd0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6cec:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6cf0:	2100      	movs	r1, #0
   b6cf2:	735f      	strb	r7, [r3, #13]
   b6cf4:	4630      	mov	r0, r6
   b6cf6:	f000 fb6d 	bl	b73d4 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6cfa:	2101      	movs	r1, #1
   b6cfc:	4630      	mov	r0, r6
   b6cfe:	f000 fb4a 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6d02:	4601      	mov	r1, r0
   b6d04:	b928      	cbnz	r0, b6d12 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6d06:	7870      	ldrb	r0, [r6, #1]
   b6d08:	fab0 f080 	clz	r0, r0
   b6d0c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d12:	7803      	ldrb	r3, [r0, #0]
   b6d14:	b16b      	cbz	r3, b6d32 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6d16:	7ac3      	ldrb	r3, [r0, #11]
   b6d18:	071b      	lsls	r3, r3, #28
   b6d1a:	d4ee      	bmi.n	b6cfa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6d1c:	220b      	movs	r2, #11
   b6d1e:	4640      	mov	r0, r8
   b6d20:	f00d fb62 	bl	c43e8 <memcmp>
   b6d24:	2800      	cmp	r0, #0
   b6d26:	d1e8      	bne.n	b6cfa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6d28:	3501      	adds	r5, #1
   b6d2a:	b2ad      	uxth	r5, r5
   b6d2c:	2d64      	cmp	r5, #100	; 0x64
   b6d2e:	d1b9      	bne.n	b6ca4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6d30:	e7ed      	b.n	b6d0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6d32:	2001      	movs	r0, #1
   b6d34:	e7eb      	b.n	b6d0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6d38 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d3c:	ed2d 8b02 	vpush	{d8}
   b6d40:	b08b      	sub	sp, #44	; 0x2c
   b6d42:	460d      	mov	r5, r1
   b6d44:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6d46:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6d48:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6d4a:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6d4e:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6d50:	d105      	bne.n	b6d5e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6d52:	2000      	movs	r0, #0
}
   b6d54:	b00b      	add	sp, #44	; 0x2c
   b6d56:	ecbd 8b02 	vpop	{d8}
   b6d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6d5e:	9b07      	ldr	r3, [sp, #28]
   b6d60:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6d62:	2b00      	cmp	r3, #0
   b6d64:	d1f5      	bne.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6d66:	6853      	ldr	r3, [r2, #4]
   b6d68:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6d6a:	7813      	ldrb	r3, [r2, #0]
   b6d6c:	079c      	lsls	r4, r3, #30
   b6d6e:	bf1f      	itttt	ne
   b6d70:	9b05      	ldrne	r3, [sp, #20]
   b6d72:	330c      	addne	r3, #12
   b6d74:	220d      	movne	r2, #13
   b6d76:	fbb3 f3f2 	udivne	r3, r3, r2
   b6d7a:	bf1a      	itte	ne
   b6d7c:	3301      	addne	r3, #1
   b6d7e:	b2db      	uxtbne	r3, r3
   b6d80:	2301      	moveq	r3, #1
    seekSet(0);
   b6d82:	2100      	movs	r1, #0
   b6d84:	4628      	mov	r0, r5
   b6d86:	9303      	str	r3, [sp, #12]
   b6d88:	f000 fb24 	bl	b73d4 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6d8c:	f107 030d 	add.w	r3, r7, #13
  }
   b6d90:	f04f 0b00 	mov.w	fp, #0
   b6d94:	ee08 3a10 	vmov	s16, r3
   b6d98:	46da      	mov	sl, fp
   b6d9a:	465c      	mov	r4, fp
   b6d9c:	465e      	mov	r6, fp
   b6d9e:	f8cd b010 	str.w	fp, [sp, #16]
   b6da2:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6da4:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6da6:	2101      	movs	r1, #1
   b6da8:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6daa:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6dae:	f000 faf2 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6db2:	4603      	mov	r3, r0
   b6db4:	2800      	cmp	r0, #0
   b6db6:	d171      	bne.n	b6e9c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6db8:	786b      	ldrb	r3, [r5, #1]
   b6dba:	2b00      	cmp	r3, #0
   b6dbc:	d1c9      	bne.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6dbe:	9b06      	ldr	r3, [sp, #24]
   b6dc0:	059a      	lsls	r2, r3, #22
   b6dc2:	d5c6      	bpl.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6dc4:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6dc8:	3b01      	subs	r3, #1
   b6dca:	2b01      	cmp	r3, #1
   b6dcc:	d8c1      	bhi.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6dce:	9b04      	ldr	r3, [sp, #16]
   b6dd0:	2c00      	cmp	r4, #0
   b6dd2:	bf08      	it	eq
   b6dd4:	4643      	moveq	r3, r8
   b6dd6:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6dd8:	9b03      	ldr	r3, [sp, #12]
   b6dda:	429c      	cmp	r4, r3
   b6ddc:	f0c0 80f1 	bcc.w	b6fc2 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6de0:	f1b9 0f00 	cmp.w	r9, #0
   b6de4:	f040 810a 	bne.w	b6ffc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6de8:	9b04      	ldr	r3, [sp, #16]
   b6dea:	4628      	mov	r0, r5
   b6dec:	0159      	lsls	r1, r3, #5
   b6dee:	f000 faf1 	bl	b73d4 <_ZN7FatFile7seekSetEm>
   b6df2:	2800      	cmp	r0, #0
   b6df4:	d0ad      	beq.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6df6:	9b03      	ldr	r3, [sp, #12]
   b6df8:	f103 39ff 	add.w	r9, r3, #4294967295
   b6dfc:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e00:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6e02:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6e06:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e0a:	2e00      	cmp	r6, #0
   b6e0c:	f000 810d 	beq.w	b702a <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6e10:	2100      	movs	r1, #0
   b6e12:	4628      	mov	r0, r5
   b6e14:	f000 fabf 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6e18:	4604      	mov	r4, r0
   b6e1a:	2800      	cmp	r0, #0
   b6e1c:	d099      	beq.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6e1e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6e20:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6e24:	454e      	cmp	r6, r9
   b6e26:	f043 0301 	orr.w	r3, r3, #1
   b6e2a:	bf0c      	ite	eq
   b6e2c:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6e30:	46b3      	movne	fp, r6
   b6e32:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6e36:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6e3a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6e3e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6e42:	f107 000d 	add.w	r0, r7, #13
   b6e46:	f7ff fdb0 	bl	b69aa <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6e4a:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6e4e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6e50:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6e54:	f00b 031f 	and.w	r3, fp, #31
   b6e58:	220d      	movs	r2, #13
   b6e5a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6e5c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6e60:	4353      	muls	r3, r2
   b6e62:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e64:	9905      	ldr	r1, [sp, #20]
   b6e66:	4299      	cmp	r1, r3
   b6e68:	f240 80d0 	bls.w	b700c <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6e6c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6e70:	2a04      	cmp	r2, #4
   b6e72:	fa5f fe82 	uxtb.w	lr, r2
   b6e76:	f102 0001 	add.w	r0, r2, #1
   b6e7a:	f200 80cd 	bhi.w	b7018 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6e7e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6e82:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6e86:	280d      	cmp	r0, #13
   b6e88:	f103 0301 	add.w	r3, r3, #1
   b6e8c:	4602      	mov	r2, r0
   b6e8e:	d1e9      	bne.n	b6e64 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6e90:	3e01      	subs	r6, #1
   b6e92:	b2f6      	uxtb	r6, r6
   b6e94:	e7b9      	b.n	b6e0a <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6e96:	f04f 0901 	mov.w	r9, #1
   b6e9a:	e783      	b.n	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6e9c:	7802      	ldrb	r2, [r0, #0]
   b6e9e:	2ae5      	cmp	r2, #229	; 0xe5
   b6ea0:	d000      	beq.n	b6ea4 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6ea2:	b97a      	cbnz	r2, b6ec4 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6ea4:	9904      	ldr	r1, [sp, #16]
   b6ea6:	2c00      	cmp	r4, #0
   b6ea8:	bf08      	it	eq
   b6eaa:	4641      	moveq	r1, r8
   b6eac:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6eae:	9903      	ldr	r1, [sp, #12]
   b6eb0:	428c      	cmp	r4, r1
        freeFound++;
   b6eb2:	bf3c      	itt	cc
   b6eb4:	3401      	addcc	r4, #1
   b6eb6:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6eb8:	2a00      	cmp	r2, #0
   b6eba:	d080      	beq.n	b6dbe <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6ebc:	2ae5      	cmp	r2, #229	; 0xe5
   b6ebe:	d105      	bne.n	b6ecc <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6ec0:	2600      	movs	r6, #0
   b6ec2:	e76f      	b.n	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6ec4:	9903      	ldr	r1, [sp, #12]
   b6ec6:	428c      	cmp	r4, r1
   b6ec8:	bf38      	it	cc
   b6eca:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6ecc:	2a2e      	cmp	r2, #46	; 0x2e
   b6ece:	d0f7      	beq.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6ed0:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6ed2:	290f      	cmp	r1, #15
   b6ed4:	d14a      	bne.n	b6f6c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6ed6:	bb16      	cbnz	r6, b6f1e <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6ed8:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6edc:	f43f af62 	beq.w	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6ee0:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6ee4:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6ee8:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6eea:	220d      	movs	r2, #13
   b6eec:	f10a 38ff 	add.w	r8, sl, #4294967295
   b6ef0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6ef4:	9a05      	ldr	r2, [sp, #20]
   b6ef6:	4542      	cmp	r2, r8
   b6ef8:	d9e2      	bls.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6efa:	eba2 0208 	sub.w	r2, r2, r8
   b6efe:	9208      	str	r2, [sp, #32]
   b6f00:	2200      	movs	r2, #0
   b6f02:	eb02 0108 	add.w	r1, r2, r8
   b6f06:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6f08:	4618      	mov	r0, r3
   b6f0a:	b2d1      	uxtb	r1, r2
   b6f0c:	f7ff fd2c 	bl	b6968 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6f10:	9908      	ldr	r1, [sp, #32]
   b6f12:	428a      	cmp	r2, r1
   b6f14:	d10d      	bne.n	b6f32 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6f16:	2800      	cmp	r0, #0
   b6f18:	bf18      	it	ne
   b6f1a:	2600      	movne	r6, #0
   b6f1c:	e742      	b.n	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6f1e:	f10a 3aff 	add.w	sl, sl, #4294967295
   b6f22:	fa5f fa8a 	uxtb.w	sl, sl
   b6f26:	4552      	cmp	r2, sl
   b6f28:	d1ca      	bne.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6f2a:	7b5a      	ldrb	r2, [r3, #13]
   b6f2c:	455a      	cmp	r2, fp
   b6f2e:	d0dc      	beq.n	b6eea <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6f30:	e7c6      	b.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f32:	28ff      	cmp	r0, #255	; 0xff
   b6f34:	d8c4      	bhi.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6f36:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f3a:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6f3e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f40:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f42:	bf9c      	itt	ls
   b6f44:	f10e 0020 	addls.w	r0, lr, #32
   b6f48:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f4c:	4608      	mov	r0, r1
   b6f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6f50:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6f52:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6f56:	f1bc 0f19 	cmp.w	ip, #25
   b6f5a:	bf9c      	itt	ls
   b6f5c:	3120      	addls	r1, #32
   b6f5e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6f60:	4571      	cmp	r1, lr
   b6f62:	d1ad      	bne.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6f64:	3201      	adds	r2, #1
   b6f66:	2a0d      	cmp	r2, #13
   b6f68:	d1cb      	bne.n	b6f02 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6f6a:	e71b      	b.n	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6f6c:	0708      	lsls	r0, r1, #28
   b6f6e:	d4a7      	bmi.n	b6ec0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6f70:	b15e      	cbz	r6, b6f8a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6f72:	f1ba 0f01 	cmp.w	sl, #1
   b6f76:	f47f aeec 	bne.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6f7a:	4618      	mov	r0, r3
   b6f7c:	f7ff fd15 	bl	b69aa <_ZN7FatFile11lfnChecksumEPh>
   b6f80:	4558      	cmp	r0, fp
   b6f82:	f47f aee6 	bne.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6f86:	46b1      	mov	r9, r6
   b6f88:	e00e      	b.n	b6fa8 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6f8a:	ee18 1a10 	vmov	r1, s16
   b6f8e:	220b      	movs	r2, #11
   b6f90:	4618      	mov	r0, r3
   b6f92:	f00d fa29 	bl	c43e8 <memcmp>
   b6f96:	2800      	cmp	r0, #0
   b6f98:	f47f af04 	bne.w	b6da4 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6f9c:	f897 9000 	ldrb.w	r9, [r7]
   b6fa0:	f019 0901 	ands.w	r9, r9, #1
   b6fa4:	f47f af77 	bne.w	b6e96 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6fa8:	9b06      	ldr	r3, [sp, #24]
   b6faa:	0519      	lsls	r1, r3, #20
   b6fac:	f53f aed1 	bmi.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6fb0:	9b06      	ldr	r3, [sp, #24]
   b6fb2:	9807      	ldr	r0, [sp, #28]
   b6fb4:	f8cd 9000 	str.w	r9, [sp]
   b6fb8:	4642      	mov	r2, r8
   b6fba:	4629      	mov	r1, r5
   b6fbc:	f000 fa4d 	bl	b745a <_ZN7FatFile15openCachedEntryEPS_tih>
   b6fc0:	e6c8      	b.n	b6d54 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6fc2:	2100      	movs	r1, #0
   b6fc4:	4628      	mov	r0, r5
   b6fc6:	f000 f9e6 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6fca:	b9a0      	cbnz	r0, b6ff6 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6fcc:	786b      	ldrb	r3, [r5, #1]
   b6fce:	2b00      	cmp	r3, #0
   b6fd0:	f47f aebf 	bne.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6fd4:	4628      	mov	r0, r5
   b6fd6:	f000 f89f 	bl	b7118 <_ZN7FatFile13addDirClusterEv>
   b6fda:	2800      	cmp	r0, #0
   b6fdc:	f43f aeb9 	beq.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6fe0:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6fe2:	791b      	ldrb	r3, [r3, #4]
   b6fe4:	2b01      	cmp	r3, #1
   b6fe6:	f63f aefb 	bhi.w	b6de0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6fea:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6fec:	3410      	adds	r4, #16
   b6fee:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6ff0:	42a3      	cmp	r3, r4
   b6ff2:	d8ef      	bhi.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6ff4:	e6f4      	b.n	b6de0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6ff6:	3401      	adds	r4, #1
   b6ff8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6ffa:	e6ed      	b.n	b6dd8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6ffc:	4639      	mov	r1, r7
   b6ffe:	4628      	mov	r0, r5
   b7000:	f7ff fe46 	bl	b6c90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7004:	2800      	cmp	r0, #0
   b7006:	f47f aeef 	bne.w	b6de8 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b700a:	e6a2      	b.n	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b700c:	bf14      	ite	ne
   b700e:	f04f 31ff 	movne.w	r1, #4294967295
   b7012:	2100      	moveq	r1, #0
   b7014:	b289      	uxth	r1, r1
   b7016:	e72b      	b.n	b6e70 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7018:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b701c:	bf94      	ite	ls
   b701e:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7022:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b7026:	8091      	strh	r1, [r2, #4]
   b7028:	e72d      	b.n	b6e86 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b702a:	4631      	mov	r1, r6
   b702c:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b702e:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7032:	f000 f9b0 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7036:	4604      	mov	r4, r0
   b7038:	2800      	cmp	r0, #0
   b703a:	f43f ae8a 	beq.w	b6d52 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b703e:	2220      	movs	r2, #32
   b7040:	4631      	mov	r1, r6
   b7042:	f00d fa09 	bl	c4458 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7046:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b704a:	6023      	str	r3, [r4, #0]
   b704c:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7050:	6063      	str	r3, [r4, #4]
   b7052:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7056:	8123      	strh	r3, [r4, #8]
   b7058:	7dfb      	ldrb	r3, [r7, #23]
   b705a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b705c:	783b      	ldrb	r3, [r7, #0]
   b705e:	f003 0318 	and.w	r3, r3, #24
   b7062:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7064:	4b0f      	ldr	r3, [pc, #60]	; (b70a4 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7066:	681b      	ldr	r3, [r3, #0]
   b7068:	b19b      	cbz	r3, b7092 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b706a:	f104 010e 	add.w	r1, r4, #14
   b706e:	f104 0010 	add.w	r0, r4, #16
   b7072:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7074:	8a23      	ldrh	r3, [r4, #16]
   b7076:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7078:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b707a:	89e3      	ldrh	r3, [r4, #14]
   b707c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b707e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7080:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7084:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7088:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b708c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b7090:	e78e      	b.n	b6fb0 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7092:	2321      	movs	r3, #33	; 0x21
   b7094:	7423      	strb	r3, [r4, #16]
   b7096:	2328      	movs	r3, #40	; 0x28
   b7098:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b709a:	2308      	movs	r3, #8
   b709c:	73a6      	strb	r6, [r4, #14]
   b709e:	73e3      	strb	r3, [r4, #15]
   b70a0:	e7e8      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b70a2:	bf00      	nop
   b70a4:	2003e610 	.word	0x2003e610

000b70a8 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b70a8:	b510      	push	{r4, lr}
   b70aa:	460c      	mov	r4, r1
    return m_attr;
   b70ac:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b70ae:	b909      	cbnz	r1, b70b4 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b70b0:	2000      	movs	r0, #0
}
   b70b2:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b70b4:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b70b8:	d005      	beq.n	b70c6 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b70ba:	232f      	movs	r3, #47	; 0x2f
   b70bc:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b70be:	2300      	movs	r3, #0
   b70c0:	7063      	strb	r3, [r4, #1]
  return true;
   b70c2:	2001      	movs	r0, #1
   b70c4:	e7f5      	b.n	b70b2 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b70c6:	f000 f865 	bl	b7194 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b70ca:	2800      	cmp	r0, #0
   b70cc:	d0f0      	beq.n	b70b0 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b70ce:	4621      	mov	r1, r4
   b70d0:	f000 f86f 	bl	b71b2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b70d4:	e7f5      	b.n	b70c2 <_ZN7FatFile6getSFNEPc+0x1a>

000b70d6 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b70d6:	b538      	push	{r3, r4, r5, lr}
   b70d8:	4604      	mov	r4, r0
   b70da:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b70dc:	2224      	movs	r2, #36	; 0x24
   b70de:	2100      	movs	r1, #0
   b70e0:	f00d f9ba 	bl	c4458 <memset>

  m_vol = vol;
   b70e4:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b70e6:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b70e8:	2b10      	cmp	r3, #16
   b70ea:	d003      	beq.n	b70f4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b70ec:	2b20      	cmp	r3, #32
   b70ee:	d006      	beq.n	b70fe <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b70f0:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b70f2:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b70f4:	2320      	movs	r3, #32
  m_flags = F_READ;
   b70f6:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b70f8:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b70fa:	70a0      	strb	r0, [r4, #2]
  return true;
   b70fc:	e7f9      	b.n	b70f2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b70fe:	2340      	movs	r3, #64	; 0x40
   b7100:	e7f9      	b.n	b70f6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b7102 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b7102:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7104:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b7106:	f043 0304 	orr.w	r3, r3, #4
   b710a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b710c:	f100 0210 	add.w	r2, r0, #16
   b7110:	6880      	ldr	r0, [r0, #8]
   b7112:	f000 bc61 	b.w	b79d8 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b7118 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b7118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b711c:	7801      	ldrb	r1, [r0, #0]
   b711e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b7122:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b7124:	d003      	beq.n	b712e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b7126:	2600      	movs	r6, #0
}
   b7128:	4630      	mov	r0, r6
   b712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b712e:	6942      	ldr	r2, [r0, #20]
   b7130:	4b17      	ldr	r3, [pc, #92]	; (b7190 <_ZN7FatFile13addDirClusterEv+0x78>)
   b7132:	429a      	cmp	r2, r3
   b7134:	d2f7      	bcs.n	b7126 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b7136:	f7ff ffe4 	bl	b7102 <_ZN7FatFile10addClusterEv>
   b713a:	4606      	mov	r6, r0
   b713c:	2800      	cmp	r0, #0
   b713e:	d0f2      	beq.n	b7126 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b7140:	6921      	ldr	r1, [r4, #16]
   b7142:	68a0      	ldr	r0, [r4, #8]
   b7144:	f000 fbdd 	bl	b7902 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7148:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b714a:	68a0      	ldr	r0, [r4, #8]
   b714c:	2205      	movs	r2, #5
   b714e:	4639      	mov	r1, r7
   b7150:	3024      	adds	r0, #36	; 0x24
   b7152:	f000 fbb3 	bl	b78bc <_ZN8FatCache4readEmh>
  if (!pc) {
   b7156:	4680      	mov	r8, r0
   b7158:	2800      	cmp	r0, #0
   b715a:	d0e4      	beq.n	b7126 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b715c:	4629      	mov	r1, r5
   b715e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7162:	f00d f979 	bl	c4458 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b7166:	2501      	movs	r5, #1
   b7168:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b716a:	791a      	ldrb	r2, [r3, #4]
   b716c:	42aa      	cmp	r2, r5
   b716e:	d909      	bls.n	b7184 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b7170:	6818      	ldr	r0, [r3, #0]
   b7172:	4642      	mov	r2, r8
   b7174:	19e9      	adds	r1, r5, r7
   b7176:	f000 ff0e 	bl	b7f96 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b717a:	2800      	cmp	r0, #0
   b717c:	d0d3      	beq.n	b7126 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b717e:	3501      	adds	r5, #1
   b7180:	b2ed      	uxtb	r5, r5
   b7182:	e7f1      	b.n	b7168 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b7184:	6963      	ldr	r3, [r4, #20]
   b7186:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b718a:	6163      	str	r3, [r4, #20]
  return true;
   b718c:	e7cc      	b.n	b7128 <_ZN7FatFile13addDirClusterEv+0x10>
   b718e:	bf00      	nop
   b7190:	001ffe00 	.word	0x001ffe00

000b7194 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b7194:	b510      	push	{r4, lr}
   b7196:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b7198:	6880      	ldr	r0, [r0, #8]
   b719a:	460a      	mov	r2, r1
   b719c:	3024      	adds	r0, #36	; 0x24
   b719e:	69a1      	ldr	r1, [r4, #24]
   b71a0:	f000 fb8c 	bl	b78bc <_ZN8FatCache4readEmh>
  if (!pc) {
   b71a4:	b120      	cbz	r0, b71b0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b71a6:	88a3      	ldrh	r3, [r4, #4]
   b71a8:	f003 030f 	and.w	r3, r3, #15
   b71ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b71b0:	bd10      	pop	{r4, pc}

000b71b2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b71b2:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b71b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b71b6:	4604      	mov	r4, r0
   b71b8:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b71ba:	2608      	movs	r6, #8
  uint8_t j = 0;
   b71bc:	4618      	mov	r0, r3
      name[j++] = '.';
   b71be:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b71c0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b71c4:	2a20      	cmp	r2, #32
   b71c6:	d018      	beq.n	b71fa <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b71c8:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b71ca:	bf02      	ittt	eq
   b71cc:	540f      	strbeq	r7, [r1, r0]
   b71ce:	1c42      	addeq	r2, r0, #1
   b71d0:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b71d2:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b71d4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b71d8:	bf08      	it	eq
   b71da:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b71dc:	f1bc 0f19 	cmp.w	ip, #25
   b71e0:	d806      	bhi.n	b71f0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b71e2:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b71e6:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b71ea:	bf1c      	itt	ne
   b71ec:	3220      	addne	r2, #32
   b71ee:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b71f0:	f100 0c01 	add.w	ip, r0, #1
   b71f4:	540a      	strb	r2, [r1, r0]
   b71f6:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b71fa:	3301      	adds	r3, #1
   b71fc:	b2db      	uxtb	r3, r3
   b71fe:	2b0b      	cmp	r3, #11
   b7200:	d1de      	bne.n	b71c0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b7202:	2300      	movs	r3, #0
   b7204:	540b      	strb	r3, [r1, r0]
}
   b7206:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7208 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b7208:	7803      	ldrb	r3, [r0, #0]
   b720a:	b90b      	cbnz	r3, b7210 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b720c:	f7ff bf63 	b.w	b70d6 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b7210:	2000      	movs	r0, #0
   b7212:	4770      	bx	lr

000b7214 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b7214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7218:	7803      	ldrb	r3, [r0, #0]
   b721a:	4604      	mov	r4, r0
   b721c:	4688      	mov	r8, r1
   b721e:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b7220:	2b00      	cmp	r3, #0
   b7222:	d05d      	beq.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
   b7224:	7882      	ldrb	r2, [r0, #2]
   b7226:	07d1      	lsls	r1, r2, #31
   b7228:	d55a      	bpl.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b722a:	071a      	lsls	r2, r3, #28
   b722c:	d52d      	bpl.n	b728a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b722e:	69c3      	ldr	r3, [r0, #28]
   b7230:	6942      	ldr	r2, [r0, #20]
   b7232:	1a9b      	subs	r3, r3, r2
   b7234:	429d      	cmp	r5, r3
   b7236:	bf28      	it	cs
   b7238:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b723a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b723c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7240:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b7244:	2e00      	cmp	r6, #0
   b7246:	f000 808f 	beq.w	b7368 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b724a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b724c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b724e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b7250:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7252:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7256:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b725a:	d51f      	bpl.n	b729c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b725c:	6a00      	ldr	r0, [r0, #32]
   b725e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b7260:	68a0      	ldr	r0, [r4, #8]
   b7262:	f1ba 0f00 	cmp.w	sl, #0
   b7266:	d142      	bne.n	b72ee <_ZN7FatFile4readEPvj+0xda>
   b7268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b726c:	d33f      	bcc.n	b72ee <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b726e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7270:	4299      	cmp	r1, r3
   b7272:	d03c      	beq.n	b72ee <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b7274:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b7278:	d252      	bcs.n	b7320 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b727a:	6800      	ldr	r0, [r0, #0]
   b727c:	4642      	mov	r2, r8
   b727e:	f000 fe01 	bl	b7e84 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7282:	b368      	cbz	r0, b72e0 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b7284:	f44f 7700 	mov.w	r7, #512	; 0x200
   b7288:	e044      	b.n	b7314 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b728a:	069b      	lsls	r3, r3, #26
   b728c:	d5d5      	bpl.n	b723a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b728e:	6883      	ldr	r3, [r0, #8]
   b7290:	891a      	ldrh	r2, [r3, #8]
   b7292:	6943      	ldr	r3, [r0, #20]
   b7294:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b7298:	b29b      	uxth	r3, r3
   b729a:	e7cb      	b.n	b7234 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b729c:	f890 9005 	ldrb.w	r9, [r0, #5]
   b72a0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b72a4:	f1ba 0f00 	cmp.w	sl, #0
   b72a8:	d108      	bne.n	b72bc <_ZN7FatFile4readEPvj+0xa8>
   b72aa:	f1b9 0f00 	cmp.w	r9, #0
   b72ae:	d105      	bne.n	b72bc <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b72b0:	b95b      	cbnz	r3, b72ca <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b72b2:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b72b4:	bf4c      	ite	mi
   b72b6:	6a03      	ldrmi	r3, [r0, #32]
   b72b8:	6a23      	ldrpl	r3, [r4, #32]
   b72ba:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b72bc:	6921      	ldr	r1, [r4, #16]
   b72be:	68a0      	ldr	r0, [r4, #8]
   b72c0:	f000 fb1f 	bl	b7902 <_ZNK9FatVolume17clusterFirstBlockEm>
   b72c4:	eb09 0100 	add.w	r1, r9, r0
   b72c8:	e7ca      	b.n	b7260 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b72ca:	6921      	ldr	r1, [r4, #16]
   b72cc:	465a      	mov	r2, fp
   b72ce:	f000 fb1e 	bl	b790e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b72d2:	2800      	cmp	r0, #0
   b72d4:	db04      	blt.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b72d6:	d1f1      	bne.n	b72bc <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b72d8:	7823      	ldrb	r3, [r4, #0]
   b72da:	f013 0f70 	tst.w	r3, #112	; 0x70
   b72de:	d143      	bne.n	b7368 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b72e0:	7863      	ldrb	r3, [r4, #1]
   b72e2:	f043 0302 	orr.w	r3, r3, #2
   b72e6:	7063      	strb	r3, [r4, #1]
  return -1;
   b72e8:	f04f 30ff 	mov.w	r0, #4294967295
   b72ec:	e03d      	b.n	b736a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b72ee:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b72f2:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b72f4:	f04f 0200 	mov.w	r2, #0
   b72f8:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b72fc:	bf28      	it	cs
   b72fe:	4637      	movcs	r7, r6
   b7300:	f000 fadc 	bl	b78bc <_ZN8FatCache4readEmh>
      if (!pc) {
   b7304:	2800      	cmp	r0, #0
   b7306:	d0eb      	beq.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b7308:	eb00 010a 	add.w	r1, r0, sl
   b730c:	463a      	mov	r2, r7
   b730e:	4640      	mov	r0, r8
   b7310:	f00d f87a 	bl	c4408 <memcpy>
    m_curPosition += n;
   b7314:	6963      	ldr	r3, [r4, #20]
   b7316:	443b      	add	r3, r7
    dst += n;
   b7318:	44b8      	add	r8, r7
    m_curPosition += n;
   b731a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b731c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b731e:	e791      	b.n	b7244 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b7320:	7822      	ldrb	r2, [r4, #0]
   b7322:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b7324:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b7328:	d406      	bmi.n	b7338 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b732a:	7902      	ldrb	r2, [r0, #4]
   b732c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b7330:	b2d2      	uxtb	r2, r2
   b7332:	4592      	cmp	sl, r2
   b7334:	bf28      	it	cs
   b7336:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7338:	4299      	cmp	r1, r3
      n = 512*nb;
   b733a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b733e:	d208      	bcs.n	b7352 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b7340:	68a0      	ldr	r0, [r4, #8]
   b7342:	4653      	mov	r3, sl
   b7344:	6800      	ldr	r0, [r0, #0]
   b7346:	4642      	mov	r2, r8
   b7348:	f000 fde4 	bl	b7f14 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b734c:	2800      	cmp	r0, #0
   b734e:	d1e1      	bne.n	b7314 <_ZN7FatFile4readEPvj+0x100>
   b7350:	e7c6      	b.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7352:	4453      	add	r3, sl
   b7354:	428b      	cmp	r3, r1
   b7356:	d9f3      	bls.n	b7340 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b7358:	3024      	adds	r0, #36	; 0x24
   b735a:	9101      	str	r1, [sp, #4]
   b735c:	f000 fa86 	bl	b786c <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7360:	9901      	ldr	r1, [sp, #4]
   b7362:	2800      	cmp	r0, #0
   b7364:	d1ec      	bne.n	b7340 <_ZN7FatFile4readEPvj+0x12c>
   b7366:	e7bb      	b.n	b72e0 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b7368:	1ba8      	subs	r0, r5, r6
}
   b736a:	b003      	add	sp, #12
   b736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7370 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b7370:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7372:	2201      	movs	r2, #1
   b7374:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b7378:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b737c:	4604      	mov	r4, r0
   b737e:	f7ff ff49 	bl	b7214 <_ZN7FatFile4readEPvj>
   b7382:	2801      	cmp	r0, #1
   b7384:	bf0a      	itet	eq
   b7386:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b738a:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b738e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7392:	b002      	add	sp, #8
   b7394:	bd70      	pop	{r4, r5, r6, pc}

000b7396 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b7396:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b7398:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b739a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b739e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b73a0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b73a4:	d000      	beq.n	b73a8 <_ZN7FatFile12readDirCacheEb+0x12>
   b73a6:	b999      	cbnz	r1, b73d0 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b73a8:	2201      	movs	r2, #1
   b73aa:	f10d 0107 	add.w	r1, sp, #7
   b73ae:	4620      	mov	r0, r4
   b73b0:	f7ff ff30 	bl	b7214 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b73b4:	b240      	sxtb	r0, r0
   b73b6:	2801      	cmp	r0, #1
   b73b8:	d002      	beq.n	b73c0 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b73ba:	2000      	movs	r0, #0
}
   b73bc:	b003      	add	sp, #12
   b73be:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b73c0:	6963      	ldr	r3, [r4, #20]
   b73c2:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b73c4:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b73c6:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b73c8:	3030      	adds	r0, #48	; 0x30
   b73ca:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b73ce:	e7f5      	b.n	b73bc <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b73d0:	3320      	adds	r3, #32
   b73d2:	e7f7      	b.n	b73c4 <_ZN7FatFile12readDirCacheEb+0x2e>

000b73d4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b73d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b73d8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b73da:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b73dc:	4604      	mov	r4, r0
   b73de:	460d      	mov	r5, r1
  if (!isOpen()) {
   b73e0:	b162      	cbz	r2, b73fc <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b73e2:	6940      	ldr	r0, [r0, #20]
   b73e4:	4288      	cmp	r0, r1
   b73e6:	d002      	beq.n	b73ee <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b73e8:	b919      	cbnz	r1, b73f2 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b73ea:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b73ec:	6165      	str	r5, [r4, #20]
    return true;
   b73ee:	2001      	movs	r0, #1
   b73f0:	e006      	b.n	b7400 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b73f2:	0716      	lsls	r6, r2, #28
   b73f4:	d506      	bpl.n	b7404 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b73f6:	69e3      	ldr	r3, [r4, #28]
   b73f8:	428b      	cmp	r3, r1
   b73fa:	d20b      	bcs.n	b7414 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b73fc:	6127      	str	r7, [r4, #16]
  return false;
   b73fe:	2000      	movs	r0, #0
}
   b7400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b7404:	0691      	lsls	r1, r2, #26
   b7406:	d505      	bpl.n	b7414 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b7408:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b740a:	891b      	ldrh	r3, [r3, #8]
   b740c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7410:	d9ec      	bls.n	b73ec <_ZN7FatFile7seekSetEm+0x18>
   b7412:	e7f3      	b.n	b73fc <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7414:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b7418:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b741c:	1e43      	subs	r3, r0, #1
   b741e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7422:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7424:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7426:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b7428:	42b3      	cmp	r3, r6
   b742a:	d800      	bhi.n	b742e <_ZN7FatFile7seekSetEm+0x5a>
   b742c:	b998      	cbnz	r0, b7456 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b742e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b7430:	bf4c      	ite	mi
   b7432:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b7436:	6a23      	ldrpl	r3, [r4, #32]
   b7438:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b743a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b743e:	2e00      	cmp	r6, #0
   b7440:	d0d4      	beq.n	b73ec <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7442:	6921      	ldr	r1, [r4, #16]
   b7444:	68a0      	ldr	r0, [r4, #8]
   b7446:	4642      	mov	r2, r8
   b7448:	f000 fa61 	bl	b790e <_ZN9FatVolume6fatGetEmPm>
   b744c:	2800      	cmp	r0, #0
   b744e:	f106 36ff 	add.w	r6, r6, #4294967295
   b7452:	dcf4      	bgt.n	b743e <_ZN7FatFile7seekSetEm+0x6a>
   b7454:	e7d2      	b.n	b73fc <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b7456:	1af6      	subs	r6, r6, r3
   b7458:	e7ef      	b.n	b743a <_ZN7FatFile7seekSetEm+0x66>

000b745a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b745c:	460f      	mov	r7, r1
   b745e:	4604      	mov	r4, r0
   b7460:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7462:	2100      	movs	r1, #0
   b7464:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b7466:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b7468:	f00c fff6 	bl	c4458 <memset>
  m_vol = dirFile->m_vol;
   b746c:	68b8      	ldr	r0, [r7, #8]
   b746e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b7470:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7472:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b7476:	6a3b      	ldr	r3, [r7, #32]
   b7478:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b747a:	016a      	lsls	r2, r5, #5
   b747c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7480:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7484:	071f      	lsls	r7, r3, #28
   b7486:	d444      	bmi.n	b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b7488:	f003 0317 	and.w	r3, r3, #23
   b748c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b748e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7492:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b7496:	bf04      	itt	eq
   b7498:	f043 0308 	orreq.w	r3, r3, #8
   b749c:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b749e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b74a2:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b74a4:	f006 0303 	and.w	r3, r6, #3
   b74a8:	2b01      	cmp	r3, #1
   b74aa:	d02c      	beq.n	b7506 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b74ac:	2b02      	cmp	r3, #2
   b74ae:	d028      	beq.n	b7502 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b74b0:	bb7b      	cbnz	r3, b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b74b2:	0571      	lsls	r1, r6, #21
   b74b4:	d42d      	bmi.n	b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b74b6:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b74b8:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b74ba:	78a1      	ldrb	r1, [r4, #2]
   b74bc:	078b      	lsls	r3, r1, #30
   b74be:	d504      	bpl.n	b74ca <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b74c0:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b74c2:	06df      	lsls	r7, r3, #27
   b74c4:	d425      	bmi.n	b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b74c6:	07dd      	lsls	r5, r3, #31
   b74c8:	d423      	bmi.n	b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b74ca:	11b3      	asrs	r3, r6, #6
   b74cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b74d0:	f006 0508 	and.w	r5, r6, #8
   b74d4:	432b      	orrs	r3, r5
   b74d6:	430b      	orrs	r3, r1
   b74d8:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b74da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b74dc:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b74de:	1883      	adds	r3, r0, r2
   b74e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b74e4:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b74e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b74ec:	0572      	lsls	r2, r6, #21
   b74ee:	d513      	bpl.n	b7518 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b74f0:	b959      	cbnz	r1, b750a <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b74f2:	78a3      	ldrb	r3, [r4, #2]
   b74f4:	f043 0304 	orr.w	r3, r3, #4
   b74f8:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b74fa:	0473      	lsls	r3, r6, #17
   b74fc:	d410      	bmi.n	b7520 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b74fe:	2001      	movs	r0, #1
}
   b7500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7502:	2303      	movs	r3, #3
   b7504:	e7d8      	b.n	b74b8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b7506:	2302      	movs	r3, #2
   b7508:	e7d6      	b.n	b74b8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b750a:	f000 faa0 	bl	b7a4e <_ZN9FatVolume9freeChainEm>
   b750e:	2800      	cmp	r0, #0
   b7510:	d1ef      	bne.n	b74f2 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7512:	2000      	movs	r0, #0
   b7514:	7020      	strb	r0, [r4, #0]
  return false;
   b7516:	e7f3      	b.n	b7500 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b7518:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b751c:	61e3      	str	r3, [r4, #28]
   b751e:	e7ec      	b.n	b74fa <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7520:	69e1      	ldr	r1, [r4, #28]
   b7522:	4620      	mov	r0, r4
   b7524:	f7ff ff56 	bl	b73d4 <_ZN7FatFile7seekSetEm>
   b7528:	2800      	cmp	r0, #0
   b752a:	d1e8      	bne.n	b74fe <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b752c:	e7f1      	b.n	b7512 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b752e <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b752e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b7532:	7803      	ldrb	r3, [r0, #0]
   b7534:	4607      	mov	r7, r0
   b7536:	460d      	mov	r5, r1
   b7538:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b753a:	bb53      	cbnz	r3, b7592 <_ZN7FatFile8openNextEPS_i+0x64>
   b753c:	780b      	ldrb	r3, [r1, #0]
   b753e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7542:	d026      	beq.n	b7592 <_ZN7FatFile8openNextEPS_i+0x64>
   b7544:	694c      	ldr	r4, [r1, #20]
   b7546:	f014 041f 	ands.w	r4, r4, #31
   b754a:	d122      	bne.n	b7592 <_ZN7FatFile8openNextEPS_i+0x64>
   b754c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b754e:	2100      	movs	r1, #0
   b7550:	4628      	mov	r0, r5
    return m_curPosition;
   b7552:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b7556:	f7ff ff1e 	bl	b7396 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b755a:	b1d0      	cbz	r0, b7592 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b755c:	7806      	ldrb	r6, [r0, #0]
   b755e:	b1c6      	cbz	r6, b7592 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b7560:	2e2e      	cmp	r6, #46	; 0x2e
   b7562:	d010      	beq.n	b7586 <_ZN7FatFile8openNextEPS_i+0x58>
   b7564:	2ee5      	cmp	r6, #229	; 0xe5
   b7566:	d00e      	beq.n	b7586 <_ZN7FatFile8openNextEPS_i+0x58>
   b7568:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b756a:	071a      	lsls	r2, r3, #28
   b756c:	d413      	bmi.n	b7596 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b756e:	b964      	cbnz	r4, b758a <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b7570:	9400      	str	r4, [sp, #0]
   b7572:	4653      	mov	r3, sl
   b7574:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b7578:	4629      	mov	r1, r5
   b757a:	4638      	mov	r0, r7
   b757c:	f7ff ff6d 	bl	b745a <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b7580:	b002      	add	sp, #8
   b7582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b7586:	2400      	movs	r4, #0
   b7588:	e7e1      	b.n	b754e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b758a:	f7ff fa0e 	bl	b69aa <_ZN7FatFile11lfnChecksumEPh>
   b758e:	4540      	cmp	r0, r8
   b7590:	d0ee      	beq.n	b7570 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b7592:	2000      	movs	r0, #0
   b7594:	e7f4      	b.n	b7580 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7596:	2b0f      	cmp	r3, #15
   b7598:	d1f5      	bne.n	b7586 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b759a:	0673      	lsls	r3, r6, #25
   b759c:	d5d7      	bpl.n	b754e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b759e:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b75a2:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b75a6:	e7d2      	b.n	b754e <_ZN7FatFile8openNextEPS_i+0x20>

000b75a8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b75a8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b75aa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b75ac:	4604      	mov	r4, r0
  if (!isOpen()) {
   b75ae:	b90b      	cbnz	r3, b75b4 <_ZN7FatFile4syncEv+0xc>
    return true;
   b75b0:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b75b2:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b75b4:	7883      	ldrb	r3, [r0, #2]
   b75b6:	075a      	lsls	r2, r3, #29
   b75b8:	d523      	bpl.n	b7602 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b75ba:	2101      	movs	r1, #1
   b75bc:	f7ff fdea 	bl	b7194 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b75c0:	4605      	mov	r5, r0
   b75c2:	b928      	cbnz	r0, b75d0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b75c4:	7863      	ldrb	r3, [r4, #1]
   b75c6:	f043 0301 	orr.w	r3, r3, #1
   b75ca:	7063      	strb	r3, [r4, #1]
  return false;
   b75cc:	2000      	movs	r0, #0
   b75ce:	e7f0      	b.n	b75b2 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b75d0:	7803      	ldrb	r3, [r0, #0]
   b75d2:	2be5      	cmp	r3, #229	; 0xe5
   b75d4:	d0f6      	beq.n	b75c4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b75d6:	7823      	ldrb	r3, [r4, #0]
   b75d8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b75da:	bf44      	itt	mi
   b75dc:	69e3      	ldrmi	r3, [r4, #28]
   b75de:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b75e0:	6a23      	ldr	r3, [r4, #32]
   b75e2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b75e4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b75e6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b75e8:	4b09      	ldr	r3, [pc, #36]	; (b7610 <_ZN7FatFile4syncEv+0x68>)
   b75ea:	681b      	ldr	r3, [r3, #0]
   b75ec:	b12b      	cbz	r3, b75fa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b75ee:	f100 0116 	add.w	r1, r0, #22
   b75f2:	3018      	adds	r0, #24
   b75f4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b75f6:	8b2b      	ldrh	r3, [r5, #24]
   b75f8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b75fa:	78a3      	ldrb	r3, [r4, #2]
   b75fc:	f023 0304 	bic.w	r3, r3, #4
   b7600:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b7602:	68a0      	ldr	r0, [r4, #8]
   b7604:	f7ff f9c4 	bl	b6990 <_ZN9FatVolume9cacheSyncEv>
   b7608:	2800      	cmp	r0, #0
   b760a:	d0db      	beq.n	b75c4 <_ZN7FatFile4syncEv+0x1c>
   b760c:	e7d0      	b.n	b75b0 <_ZN7FatFile4syncEv+0x8>
   b760e:	bf00      	nop
   b7610:	2003e610 	.word	0x2003e610

000b7614 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b7614:	b510      	push	{r4, lr}
   b7616:	4604      	mov	r4, r0
  bool rtn = sync();
   b7618:	f7ff ffc6 	bl	b75a8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b761c:	2300      	movs	r3, #0
   b761e:	7023      	strb	r3, [r4, #0]
}
   b7620:	bd10      	pop	{r4, pc}

000b7622 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7622:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7624:	b093      	sub	sp, #76	; 0x4c
   b7626:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7628:	2300      	movs	r3, #0
   b762a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b762c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b762e:	9201      	str	r2, [sp, #4]
   b7630:	4606      	mov	r6, r0
   b7632:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7634:	b113      	cbz	r3, b763c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b7636:	2000      	movs	r0, #0
}
   b7638:	b013      	add	sp, #76	; 0x4c
   b763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b763c:	780b      	ldrb	r3, [r1, #0]
   b763e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7642:	d0f8      	beq.n	b7636 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7644:	7813      	ldrb	r3, [r2, #0]
   b7646:	2b2f      	cmp	r3, #47	; 0x2f
   b7648:	d112      	bne.n	b7670 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b764a:	9a01      	ldr	r2, [sp, #4]
   b764c:	7813      	ldrb	r3, [r2, #0]
   b764e:	2b2f      	cmp	r3, #47	; 0x2f
   b7650:	d102      	bne.n	b7658 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7652:	3201      	adds	r2, #1
   b7654:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b7656:	e7f8      	b.n	b764a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b7658:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b765a:	b91b      	cbnz	r3, b7664 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b765c:	4630      	mov	r0, r6
   b765e:	f7ff fdd3 	bl	b7208 <_ZN7FatFile8openRootEP9FatVolume>
   b7662:	e7e9      	b.n	b7638 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7664:	a809      	add	r0, sp, #36	; 0x24
   b7666:	f7ff fd36 	bl	b70d6 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b766a:	2800      	cmp	r0, #0
   b766c:	d0e3      	beq.n	b7636 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b766e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7670:	9801      	ldr	r0, [sp, #4]
   b7672:	aa01      	add	r2, sp, #4
   b7674:	a903      	add	r1, sp, #12
   b7676:	f7ff fa2d 	bl	b6ad4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b767a:	2800      	cmp	r0, #0
   b767c:	d0db      	beq.n	b7636 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b767e:	9b01      	ldr	r3, [sp, #4]
   b7680:	781b      	ldrb	r3, [r3, #0]
   b7682:	b19b      	cbz	r3, b76ac <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7684:	2300      	movs	r3, #0
   b7686:	aa03      	add	r2, sp, #12
   b7688:	4621      	mov	r1, r4
   b768a:	4630      	mov	r0, r6
   b768c:	f7ff fb54 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b7690:	2800      	cmp	r0, #0
   b7692:	d0d0      	beq.n	b7636 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7694:	4635      	mov	r5, r6
   b7696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7698:	ac09      	add	r4, sp, #36	; 0x24
   b769a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b769c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b769e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76a0:	682b      	ldr	r3, [r5, #0]
   b76a2:	6023      	str	r3, [r4, #0]
    close();
   b76a4:	4630      	mov	r0, r6
   b76a6:	f7ff ffb5 	bl	b7614 <_ZN7FatFile5closeEv>
  while (1) {
   b76aa:	e7e0      	b.n	b766e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b76ac:	463b      	mov	r3, r7
   b76ae:	aa03      	add	r2, sp, #12
   b76b0:	4621      	mov	r1, r4
   b76b2:	4630      	mov	r0, r6
   b76b4:	f7ff fb40 	bl	b6d38 <_ZN7FatFile4openEPS_P7fname_ti>
   b76b8:	e7be      	b.n	b7638 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b76bc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b76bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b76c0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b76c2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b76c4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b76c6:	4604      	mov	r4, r0
   b76c8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b76ca:	d55b      	bpl.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
   b76cc:	7883      	ldrb	r3, [r0, #2]
   b76ce:	079a      	lsls	r2, r3, #30
   b76d0:	d558      	bpl.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b76d2:	071b      	lsls	r3, r3, #28
   b76d4:	d451      	bmi.n	b777a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b76d6:	6963      	ldr	r3, [r4, #20]
   b76d8:	43db      	mvns	r3, r3
   b76da:	42bb      	cmp	r3, r7
   b76dc:	d352      	bcc.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
   b76de:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b76e0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b76e4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b76e6:	f1b8 0f00 	cmp.w	r8, #0
   b76ea:	f000 8091 	beq.w	b7810 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b76ee:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b76f0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b76f2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b76f6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b76fa:	d10e      	bne.n	b771a <_ZN7FatFile5writeEPKvj+0x5e>
   b76fc:	b96d      	cbnz	r5, b771a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b76fe:	6921      	ldr	r1, [r4, #16]
   b7700:	2900      	cmp	r1, #0
   b7702:	d046      	beq.n	b7792 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7704:	4652      	mov	r2, sl
   b7706:	f000 f902 	bl	b790e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b770a:	2800      	cmp	r0, #0
   b770c:	db3a      	blt.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b770e:	d104      	bne.n	b771a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7710:	4620      	mov	r0, r4
   b7712:	f7ff fcf6 	bl	b7102 <_ZN7FatFile10addClusterEv>
   b7716:	2800      	cmp	r0, #0
   b7718:	d034      	beq.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b771a:	6921      	ldr	r1, [r4, #16]
   b771c:	68a0      	ldr	r0, [r4, #8]
   b771e:	f000 f8f0 	bl	b7902 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7722:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7724:	68a0      	ldr	r0, [r4, #8]
   b7726:	b915      	cbnz	r5, b772e <_ZN7FatFile5writeEPKvj+0x72>
   b7728:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b772c:	d23f      	bcs.n	b77ae <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b772e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7732:	4546      	cmp	r6, r8
   b7734:	bf28      	it	cs
   b7736:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7738:	2d00      	cmp	r5, #0
   b773a:	d136      	bne.n	b77aa <_ZN7FatFile5writeEPKvj+0xee>
   b773c:	6962      	ldr	r2, [r4, #20]
   b773e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7740:	429a      	cmp	r2, r3
   b7742:	bf34      	ite	cc
   b7744:	2201      	movcc	r2, #1
   b7746:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7748:	3024      	adds	r0, #36	; 0x24
   b774a:	f000 f8b7 	bl	b78bc <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b774e:	b1c8      	cbz	r0, b7784 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7750:	4428      	add	r0, r5
   b7752:	4632      	mov	r2, r6
   b7754:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7756:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7758:	f00c fe56 	bl	c4408 <memcpy>
      if (512 == (n + blockOffset)) {
   b775c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7760:	d104      	bne.n	b776c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7762:	68a0      	ldr	r0, [r4, #8]
   b7764:	3024      	adds	r0, #36	; 0x24
   b7766:	f000 f881 	bl	b786c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b776a:	b158      	cbz	r0, b7784 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b776c:	6963      	ldr	r3, [r4, #20]
   b776e:	4433      	add	r3, r6
   b7770:	6163      	str	r3, [r4, #20]
    src += n;
   b7772:	44b1      	add	r9, r6
    nToWrite -= n;
   b7774:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7778:	e7b4      	b.n	b76e4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b777a:	69c1      	ldr	r1, [r0, #28]
   b777c:	f7ff fe2a 	bl	b73d4 <_ZN7FatFile7seekSetEm>
   b7780:	2800      	cmp	r0, #0
   b7782:	d1a8      	bne.n	b76d6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7784:	7863      	ldrb	r3, [r4, #1]
   b7786:	f043 0301 	orr.w	r3, r3, #1
   b778a:	7063      	strb	r3, [r4, #1]
  return -1;
   b778c:	f04f 30ff 	mov.w	r0, #4294967295
   b7790:	e050      	b.n	b7834 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7792:	6a23      	ldr	r3, [r4, #32]
   b7794:	b93b      	cbnz	r3, b77a6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7796:	4620      	mov	r0, r4
   b7798:	f7ff fcb3 	bl	b7102 <_ZN7FatFile10addClusterEv>
   b779c:	2800      	cmp	r0, #0
   b779e:	d0f1      	beq.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b77a0:	6923      	ldr	r3, [r4, #16]
   b77a2:	6223      	str	r3, [r4, #32]
   b77a4:	e7b9      	b.n	b771a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b77a6:	6123      	str	r3, [r4, #16]
   b77a8:	e7b7      	b.n	b771a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b77aa:	2201      	movs	r2, #1
   b77ac:	e7cc      	b.n	b7748 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b77ae:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b77b2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b77b4:	d31b      	bcc.n	b77ee <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b77b6:	f890 c004 	ldrb.w	ip, [r0, #4]
   b77ba:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b77be:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b77c0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b77c4:	4573      	cmp	r3, lr
   b77c6:	bf28      	it	cs
   b77c8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b77ca:	4291      	cmp	r1, r2
      n = 512*nb;
   b77cc:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b77d0:	d307      	bcc.n	b77e2 <_ZN7FatFile5writeEPKvj+0x126>
   b77d2:	441a      	add	r2, r3
   b77d4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b77d6:	bf82      	ittt	hi
   b77d8:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b77dc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b77e0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b77e2:	68a5      	ldr	r5, [r4, #8]
   b77e4:	464a      	mov	r2, r9
   b77e6:	6828      	ldr	r0, [r5, #0]
   b77e8:	f000 fc4b 	bl	b8082 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b77ec:	e7bd      	b.n	b776a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b77ee:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b77f0:	bf02      	ittt	eq
   b77f2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b77f6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b77fa:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b77fc:	68a3      	ldr	r3, [r4, #8]
   b77fe:	464a      	mov	r2, r9
   b7800:	6818      	ldr	r0, [r3, #0]
   b7802:	f000 fbc8 	bl	b7f96 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7806:	2800      	cmp	r0, #0
   b7808:	d0bc      	beq.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b780a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b780e:	e7ad      	b.n	b776c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7810:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7812:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7814:	42b2      	cmp	r2, r6
   b7816:	d204      	bcs.n	b7822 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7818:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b781a:	f043 0304 	orr.w	r3, r3, #4
   b781e:	70a3      	strb	r3, [r4, #2]
   b7820:	e003      	b.n	b782a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7822:	4a08      	ldr	r2, [pc, #32]	; (b7844 <_ZN7FatFile5writeEPKvj+0x188>)
   b7824:	6812      	ldr	r2, [r2, #0]
   b7826:	2a00      	cmp	r2, #0
   b7828:	d1f7      	bne.n	b781a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b782a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b782e:	2b00      	cmp	r3, #0
   b7830:	db02      	blt.n	b7838 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7832:	4638      	mov	r0, r7
}
   b7834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7838:	4620      	mov	r0, r4
   b783a:	f7ff feb5 	bl	b75a8 <_ZN7FatFile4syncEv>
   b783e:	2800      	cmp	r0, #0
   b7840:	d1f7      	bne.n	b7832 <_ZN7FatFile5writeEPKvj+0x176>
   b7842:	e79f      	b.n	b7784 <_ZN7FatFile5writeEPKvj+0xc8>
   b7844:	2003e610 	.word	0x2003e610

000b7848 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7848:	b513      	push	{r0, r1, r4, lr}
   b784a:	4604      	mov	r4, r0
    }
   b784c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b784e:	b159      	cbz	r1, b7868 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7850:	9101      	str	r1, [sp, #4]
   b7852:	f00c fe8c 	bl	c456e <strlen>
   b7856:	6823      	ldr	r3, [r4, #0]
   b7858:	9901      	ldr	r1, [sp, #4]
   b785a:	68db      	ldr	r3, [r3, #12]
   b785c:	4602      	mov	r2, r0
   b785e:	4620      	mov	r0, r4
    }
   b7860:	b002      	add	sp, #8
   b7862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7866:	4718      	bx	r3
    }
   b7868:	b002      	add	sp, #8
   b786a:	bd10      	pop	{r4, pc}

000b786c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b786c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b786e:	7803      	ldrb	r3, [r0, #0]
   b7870:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7872:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7874:	d520      	bpl.n	b78b8 <_ZN8FatCache4syncEv+0x4c>
   b7876:	6843      	ldr	r3, [r0, #4]
   b7878:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b787a:	f100 020c 	add.w	r2, r0, #12
   b787e:	6818      	ldr	r0, [r3, #0]
   b7880:	9201      	str	r2, [sp, #4]
   b7882:	f000 fb88 	bl	b7f96 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7886:	9a01      	ldr	r2, [sp, #4]
   b7888:	4605      	mov	r5, r0
   b788a:	b918      	cbnz	r0, b7894 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b788c:	2500      	movs	r5, #0
}
   b788e:	4628      	mov	r0, r5
   b7890:	b003      	add	sp, #12
   b7892:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7894:	7823      	ldrb	r3, [r4, #0]
   b7896:	079b      	lsls	r3, r3, #30
   b7898:	d404      	bmi.n	b78a4 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b789a:	7823      	ldrb	r3, [r4, #0]
   b789c:	f023 0301 	bic.w	r3, r3, #1
   b78a0:	7023      	strb	r3, [r4, #0]
   b78a2:	e7f4      	b.n	b788e <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b78a4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b78a8:	6919      	ldr	r1, [r3, #16]
   b78aa:	4401      	add	r1, r0
   b78ac:	6818      	ldr	r0, [r3, #0]
   b78ae:	f000 fb72 	bl	b7f96 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b78b2:	2800      	cmp	r0, #0
   b78b4:	d1f1      	bne.n	b789a <_ZN8FatCache4syncEv+0x2e>
   b78b6:	e7e9      	b.n	b788c <_ZN8FatCache4syncEv+0x20>
  return true;
   b78b8:	2501      	movs	r5, #1
   b78ba:	e7e8      	b.n	b788e <_ZN8FatCache4syncEv+0x22>

000b78bc <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b78bc:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b78be:	6883      	ldr	r3, [r0, #8]
   b78c0:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b78c2:	4604      	mov	r4, r0
   b78c4:	460e      	mov	r6, r1
   b78c6:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b78c8:	d009      	beq.n	b78de <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b78ca:	f7ff ffcf 	bl	b786c <_ZN8FatCache4syncEv>
   b78ce:	b908      	cbnz	r0, b78d4 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b78d0:	2000      	movs	r0, #0
}
   b78d2:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b78d4:	076b      	lsls	r3, r5, #29
   b78d6:	d50a      	bpl.n	b78ee <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b78d8:	2300      	movs	r3, #0
   b78da:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b78dc:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b78de:	7822      	ldrb	r2, [r4, #0]
   b78e0:	f005 0503 	and.w	r5, r5, #3
   b78e4:	4620      	mov	r0, r4
   b78e6:	4315      	orrs	r5, r2
   b78e8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b78ec:	e7f1      	b.n	b78d2 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b78ee:	6863      	ldr	r3, [r4, #4]
   b78f0:	f104 020c 	add.w	r2, r4, #12
   b78f4:	6818      	ldr	r0, [r3, #0]
   b78f6:	4631      	mov	r1, r6
   b78f8:	f000 fac4 	bl	b7e84 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b78fc:	2800      	cmp	r0, #0
   b78fe:	d1eb      	bne.n	b78d8 <_ZN8FatCache4readEmh+0x1c>
   b7900:	e7e6      	b.n	b78d0 <_ZN8FatCache4readEmh+0x14>

000b7902 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7902:	7983      	ldrb	r3, [r0, #6]
   b7904:	6940      	ldr	r0, [r0, #20]
   b7906:	3902      	subs	r1, #2
   b7908:	4099      	lsls	r1, r3
}
   b790a:	4408      	add	r0, r1
   b790c:	4770      	bx	lr

000b790e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b790e:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7910:	b570      	push	{r4, r5, r6, lr}
   b7912:	4605      	mov	r5, r0
   b7914:	460c      	mov	r4, r1
   b7916:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7918:	d802      	bhi.n	b7920 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b791a:	f04f 30ff 	mov.w	r0, #4294967295
}
   b791e:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7920:	69c3      	ldr	r3, [r0, #28]
   b7922:	428b      	cmp	r3, r1
   b7924:	d3f9      	bcc.n	b791a <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7926:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7928:	2b20      	cmp	r3, #32
   b792a:	d116      	bne.n	b795a <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b792c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b792e:	2202      	movs	r2, #2
   b7930:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7934:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7938:	f7ff ffc0 	bl	b78bc <_ZN8FatCache4readEmh>
    if (!pc) {
   b793c:	2800      	cmp	r0, #0
   b793e:	d0ec      	beq.n	b791a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7940:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7944:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7948:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b794c:	69ea      	ldr	r2, [r5, #28]
   b794e:	429a      	cmp	r2, r3
  *value = next;
   b7950:	bf26      	itte	cs
   b7952:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7954:	2001      	movcs	r0, #1
    return 0;
   b7956:	2000      	movcc	r0, #0
   b7958:	e7e1      	b.n	b791e <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b795a:	2b10      	cmp	r3, #16
   b795c:	d1dd      	bne.n	b791a <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b795e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7962:	6981      	ldr	r1, [r0, #24]
   b7964:	2202      	movs	r2, #2
   b7966:	4419      	add	r1, r3
   b7968:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b796c:	f7ff ffa6 	bl	b78bc <_ZN8FatCache4readEmh>
    if (!pc) {
   b7970:	2800      	cmp	r0, #0
   b7972:	d0d2      	beq.n	b791a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7974:	b2e4      	uxtb	r4, r4
   b7976:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b797a:	e7e7      	b.n	b794c <_ZN9FatVolume6fatGetEmPm+0x3e>

000b797c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b797c:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b797e:	b538      	push	{r3, r4, r5, lr}
   b7980:	460c      	mov	r4, r1
   b7982:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7984:	d801      	bhi.n	b798a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7986:	2000      	movs	r0, #0
}
   b7988:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b798a:	69c3      	ldr	r3, [r0, #28]
   b798c:	428b      	cmp	r3, r1
   b798e:	d3fa      	bcc.n	b7986 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7990:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7992:	2b20      	cmp	r3, #32
   b7994:	d10f      	bne.n	b79b6 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7996:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7998:	2203      	movs	r2, #3
   b799a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b799e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b79a2:	f7ff ff8b 	bl	b78bc <_ZN8FatCache4readEmh>
    if (!pc) {
   b79a6:	2800      	cmp	r0, #0
   b79a8:	d0ed      	beq.n	b7986 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b79aa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b79ae:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b79b2:	2001      	movs	r0, #1
   b79b4:	e7e8      	b.n	b7988 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b79b6:	2b10      	cmp	r3, #16
   b79b8:	d1e5      	bne.n	b7986 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b79ba:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b79be:	6981      	ldr	r1, [r0, #24]
   b79c0:	2203      	movs	r2, #3
   b79c2:	4419      	add	r1, r3
   b79c4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b79c8:	f7ff ff78 	bl	b78bc <_ZN8FatCache4readEmh>
    if (!pc) {
   b79cc:	2800      	cmp	r0, #0
   b79ce:	d0da      	beq.n	b7986 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b79d0:	b2e4      	uxtb	r4, r4
   b79d2:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b79d6:	e7ec      	b.n	b79b2 <_ZN9FatVolume6fatPutEmm+0x36>

000b79d8 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b79d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b79dc:	68c4      	ldr	r4, [r0, #12]
   b79de:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b79e0:	4605      	mov	r5, r0
   b79e2:	460e      	mov	r6, r1
   b79e4:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b79e6:	d301      	bcc.n	b79ec <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b79e8:	2701      	movs	r7, #1
   b79ea:	e001      	b.n	b79f0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b79ec:	460c      	mov	r4, r1
    setStart = false;
   b79ee:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b79f0:	69eb      	ldr	r3, [r5, #28]
    find++;
   b79f2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b79f4:	42a3      	cmp	r3, r4
   b79f6:	d202      	bcs.n	b79fe <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b79f8:	b9c7      	cbnz	r7, b7a2c <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b79fa:	68ec      	ldr	r4, [r5, #12]
   b79fc:	e7f4      	b.n	b79e8 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b79fe:	42a6      	cmp	r6, r4
   b7a00:	d014      	beq.n	b7a2c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7a02:	aa01      	add	r2, sp, #4
   b7a04:	4621      	mov	r1, r4
   b7a06:	4628      	mov	r0, r5
   b7a08:	f7ff ff81 	bl	b790e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7a0c:	2800      	cmp	r0, #0
   b7a0e:	db0d      	blt.n	b7a2c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7a10:	d0ee      	beq.n	b79f0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7a12:	9b01      	ldr	r3, [sp, #4]
   b7a14:	2b00      	cmp	r3, #0
   b7a16:	d1eb      	bne.n	b79f0 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7a18:	b107      	cbz	r7, b7a1c <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7a1a:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7a1c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7a20:	4621      	mov	r1, r4
   b7a22:	4628      	mov	r0, r5
   b7a24:	f7ff ffaa 	bl	b797c <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7a28:	4607      	mov	r7, r0
   b7a2a:	b920      	cbnz	r0, b7a36 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7a2c:	2700      	movs	r7, #0
}
   b7a2e:	4638      	mov	r0, r7
   b7a30:	b002      	add	sp, #8
   b7a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7a36:	b916      	cbnz	r6, b7a3e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7a38:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7a3c:	e7f7      	b.n	b7a2e <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7a3e:	4622      	mov	r2, r4
   b7a40:	4631      	mov	r1, r6
   b7a42:	4628      	mov	r0, r5
   b7a44:	f7ff ff9a 	bl	b797c <_ZN9FatVolume6fatPutEmm>
   b7a48:	2800      	cmp	r0, #0
   b7a4a:	d1f5      	bne.n	b7a38 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7a4c:	e7ee      	b.n	b7a2c <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7a4e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a50:	4605      	mov	r5, r0
   b7a52:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7a54:	aa01      	add	r2, sp, #4
   b7a56:	4621      	mov	r1, r4
   b7a58:	4628      	mov	r0, r5
   b7a5a:	f7ff ff58 	bl	b790e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7a5e:	1e06      	subs	r6, r0, #0
   b7a60:	db10      	blt.n	b7a84 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7a62:	2200      	movs	r2, #0
   b7a64:	4621      	mov	r1, r4
   b7a66:	4628      	mov	r0, r5
   b7a68:	f7ff ff88 	bl	b797c <_ZN9FatVolume6fatPutEmm>
   b7a6c:	b150      	cbz	r0, b7a84 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7a6e:	68eb      	ldr	r3, [r5, #12]
   b7a70:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7a72:	bf24      	itt	cs
   b7a74:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7a78:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7a7a:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7a7c:	2e00      	cmp	r6, #0
   b7a7e:	d1e9      	bne.n	b7a54 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7a80:	b002      	add	sp, #8
   b7a82:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7a84:	2000      	movs	r0, #0
   b7a86:	e7fb      	b.n	b7a80 <_ZN9FatVolume9freeChainEm+0x32>

000b7a88 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7a88:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7a8a:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7a8c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7a8e:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7a90:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7a94:	4604      	mov	r4, r0
  m_fatType = 0;
   b7a96:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7a98:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7a9c:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7a9e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7aa2:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7aa4:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7aa8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7aac:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7ab0:	460d      	mov	r5, r1
   b7ab2:	b1b9      	cbz	r1, b7ae4 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7ab4:	2904      	cmp	r1, #4
   b7ab6:	d901      	bls.n	b7abc <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7ab8:	2000      	movs	r0, #0
}
   b7aba:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7abc:	4611      	mov	r1, r2
   b7abe:	4630      	mov	r0, r6
   b7ac0:	f7ff fefc 	bl	b78bc <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ac4:	2800      	cmp	r0, #0
   b7ac6:	d0f7      	beq.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7ac8:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7acc:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7ad0:	065b      	lsls	r3, r3, #25
   b7ad2:	d1f1      	bne.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
   b7ad4:	f105 011b 	add.w	r1, r5, #27
   b7ad8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7adc:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7ae0:	2d00      	cmp	r5, #0
   b7ae2:	d0e9      	beq.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
   b7ae4:	2200      	movs	r2, #0
   b7ae6:	4629      	mov	r1, r5
   b7ae8:	4630      	mov	r0, r6
   b7aea:	f7ff fee7 	bl	b78bc <_ZN8FatCache4readEmh>
  if (!pc) {
   b7aee:	2800      	cmp	r0, #0
   b7af0:	d0e2      	beq.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7af2:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7afa:	d1dd      	bne.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
   b7afc:	7c03      	ldrb	r3, [r0, #16]
   b7afe:	2b02      	cmp	r3, #2
   b7b00:	d1da      	bne.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7b02:	89c3      	ldrh	r3, [r0, #14]
   b7b04:	2b00      	cmp	r3, #0
   b7b06:	d0d7      	beq.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7b08:	7b41      	ldrb	r1, [r0, #13]
   b7b0a:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7b0c:	1e4b      	subs	r3, r1, #1
   b7b0e:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7b10:	2300      	movs	r3, #0
   b7b12:	71a3      	strb	r3, [r4, #6]
   b7b14:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7b16:	2301      	movs	r3, #1
   b7b18:	4299      	cmp	r1, r3
   b7b1a:	d007      	beq.n	b7b2c <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7b1c:	3e01      	subs	r6, #1
   b7b1e:	d0cb      	beq.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7b20:	79a2      	ldrb	r2, [r4, #6]
   b7b22:	005b      	lsls	r3, r3, #1
   b7b24:	3201      	adds	r2, #1
   b7b26:	b2db      	uxtb	r3, r3
   b7b28:	71a2      	strb	r2, [r4, #6]
   b7b2a:	e7f5      	b.n	b7b18 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7b2c:	8ac1      	ldrh	r1, [r0, #22]
   b7b2e:	b901      	cbnz	r1, b7b32 <_ZN9FatVolume4initEh+0xaa>
   b7b30:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7b32:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7b34:	89c3      	ldrh	r3, [r0, #14]
   b7b36:	442b      	add	r3, r5
   b7b38:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7b3a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7b3e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7b40:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7b44:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7b46:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7b4a:	0149      	lsls	r1, r1, #5
   b7b4c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7b50:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7b54:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7b56:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7b5a:	b902      	cbnz	r2, b7b5e <_ZN9FatVolume4initEh+0xd6>
   b7b5c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7b5e:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7b60:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7b62:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7b64:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7b66:	1c4b      	adds	r3, r1, #1
   b7b68:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7b6a:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7b6e:	4299      	cmp	r1, r3
   b7b70:	d802      	bhi.n	b7b78 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7b72:	230c      	movs	r3, #12
   b7b74:	71e3      	strb	r3, [r4, #7]
   b7b76:	e79f      	b.n	b7ab8 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7b78:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7b7c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7b7e:	bf85      	ittet	hi
   b7b80:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7b82:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7b84:	2310      	movls	r3, #16
    m_fatType = 32;
   b7b86:	2320      	movhi	r3, #32
   b7b88:	71e3      	strb	r3, [r4, #7]
  return true;
   b7b8a:	2001      	movs	r0, #1
   b7b8c:	e795      	b.n	b7aba <_ZN9FatVolume4initEh+0x32>

000b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7b8e:	f000 bacb 	b.w	b8128 <_ZN14SdSpiAltDriver4sendEh>

000b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7b92:	f000 baae 	b.w	b80f2 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7b98 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7b98:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7b9a:	4e0e      	ldr	r6, [pc, #56]	; (b7bd4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7b9c:	460d      	mov	r5, r1
   b7b9e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7ba0:	f005 ff66 	bl	bda70 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7ba4:	6833      	ldr	r3, [r6, #0]
   b7ba6:	1ac0      	subs	r0, r0, r3
   b7ba8:	4b0b      	ldr	r3, [pc, #44]	; (b7bd8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7baa:	4298      	cmp	r0, r3
   b7bac:	d908      	bls.n	b7bc0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7bae:	f005 ff67 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7bb2:	4b0a      	ldr	r3, [pc, #40]	; (b7bdc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7bb4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7bb6:	f006 faa3 	bl	be100 <spark_process>
   b7bba:	f005 ff59 	bl	bda70 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7bbe:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7bc0:	f005 ff5e 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7bc4:	b280      	uxth	r0, r0
   b7bc6:	1b40      	subs	r0, r0, r5
}
   b7bc8:	42a0      	cmp	r0, r4
   b7bca:	bfd4      	ite	le
   b7bcc:	2000      	movle	r0, #0
   b7bce:	2001      	movgt	r0, #1
   b7bd0:	bd70      	pop	{r4, r5, r6, pc}
   b7bd2:	bf00      	nop
   b7bd4:	2003e618 	.word	0x2003e618
   b7bd8:	000186a0 	.word	0x000186a0
   b7bdc:	2003e740 	.word	0x2003e740

000b7be0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7be0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7be2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7be4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7be6:	b94d      	cbnz	r5, b7bfc <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7be8:	6840      	ldr	r0, [r0, #4]
   b7bea:	f000 fa6b 	bl	b80c4 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7bee:	6863      	ldr	r3, [r4, #4]
   b7bf0:	4629      	mov	r1, r5
   b7bf2:	7d18      	ldrb	r0, [r3, #20]
   b7bf4:	f00a f959 	bl	c1eaa <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7bf8:	2301      	movs	r3, #1
   b7bfa:	7223      	strb	r3, [r4, #8]
  }
}
   b7bfc:	bd38      	pop	{r3, r4, r5, pc}

000b7bfe <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7bfe:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7c00:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7c02:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7c04:	b16b      	cbz	r3, b7c22 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7c06:	6843      	ldr	r3, [r0, #4]
   b7c08:	2101      	movs	r1, #1
   b7c0a:	7d18      	ldrb	r0, [r3, #20]
   b7c0c:	f00a f94d 	bl	c1eaa <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7c10:	6860      	ldr	r0, [r4, #4]
   b7c12:	21ff      	movs	r1, #255	; 0xff
   b7c14:	f7ff ffbb 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7c18:	6860      	ldr	r0, [r4, #4]
   b7c1a:	f000 fa67 	bl	b80ec <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7c1e:	2300      	movs	r3, #0
   b7c20:	7223      	strb	r3, [r4, #8]
  }
}
   b7c22:	bd10      	pop	{r4, pc}

000b7c24 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c26:	4604      	mov	r4, r0
   b7c28:	460d      	mov	r5, r1
   b7c2a:	4616      	mov	r6, r2
   b7c2c:	f005 ff28 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7c30:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7c32:	6860      	ldr	r0, [r4, #4]
   b7c34:	f7ff ffad 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c38:	28ff      	cmp	r0, #255	; 0xff
   b7c3a:	7260      	strb	r0, [r4, #9]
   b7c3c:	d10e      	bne.n	b7c5c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7c42:	4639      	mov	r1, r7
   b7c44:	4620      	mov	r0, r4
   b7c46:	f7ff ffa7 	bl	b7b98 <_ZN9SdSpiCard10isTimedOutEtt>
   b7c4a:	2800      	cmp	r0, #0
   b7c4c:	d0f1      	beq.n	b7c32 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7c4e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7c50:	4620      	mov	r0, r4
   b7c52:	7023      	strb	r3, [r4, #0]
   b7c54:	f7ff ffd3 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c58:	2000      	movs	r0, #0
}
   b7c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7c5c:	28fe      	cmp	r0, #254	; 0xfe
   b7c5e:	d001      	beq.n	b7c64 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7c60:	2350      	movs	r3, #80	; 0x50
   b7c62:	e7f5      	b.n	b7c50 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7c64:	6860      	ldr	r0, [r4, #4]
   b7c66:	4632      	mov	r2, r6
   b7c68:	4629      	mov	r1, r5
   b7c6a:	f000 fa47 	bl	b80fc <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7c6e:	7260      	strb	r0, [r4, #9]
   b7c70:	b108      	cbz	r0, b7c76 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7c72:	2360      	movs	r3, #96	; 0x60
   b7c74:	e7ec      	b.n	b7c50 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7c76:	6860      	ldr	r0, [r4, #4]
   b7c78:	f7ff ff8b 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7c7c:	6860      	ldr	r0, [r4, #4]
   b7c7e:	f7ff ff88 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7c82:	2001      	movs	r0, #1
   b7c84:	e7e9      	b.n	b7c5a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7c86 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7c86:	b570      	push	{r4, r5, r6, lr}
   b7c88:	4604      	mov	r4, r0
   b7c8a:	460e      	mov	r6, r1
   b7c8c:	f005 fef8 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   b7c90:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7c92:	4632      	mov	r2, r6
   b7c94:	4629      	mov	r1, r5
   b7c96:	4620      	mov	r0, r4
   b7c98:	f7ff ff7e 	bl	b7b98 <_ZN9SdSpiCard10isTimedOutEtt>
   b7c9c:	b930      	cbnz	r0, b7cac <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7c9e:	6860      	ldr	r0, [r4, #4]
   b7ca0:	f7ff ff77 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ca4:	28ff      	cmp	r0, #255	; 0xff
   b7ca6:	d1f4      	bne.n	b7c92 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7ca8:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7caa:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7cac:	2000      	movs	r0, #0
   b7cae:	e7fc      	b.n	b7caa <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7cb0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7cb2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7cb4:	9201      	str	r2, [sp, #4]
   b7cb6:	4604      	mov	r4, r0
   b7cb8:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7cba:	b90b      	cbnz	r3, b7cc0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7cbc:	f7ff ff90 	bl	b7be0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7cc0:	b125      	cbz	r5, b7ccc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7cc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	f7ff ffdd 	bl	b7c86 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7ccc:	6860      	ldr	r0, [r4, #4]
   b7cce:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7cd2:	f7ff ff5c 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7cd6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7cd8:	af01      	add	r7, sp, #4
   b7cda:	5db9      	ldrb	r1, [r7, r6]
   b7cdc:	6860      	ldr	r0, [r4, #4]
   b7cde:	f7ff ff56 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7ce2:	3e01      	subs	r6, #1
   b7ce4:	d2f9      	bcs.n	b7cda <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7ce6:	2d00      	cmp	r5, #0
   b7ce8:	6860      	ldr	r0, [r4, #4]
   b7cea:	bf0c      	ite	eq
   b7cec:	2195      	moveq	r1, #149	; 0x95
   b7cee:	2187      	movne	r1, #135	; 0x87
   b7cf0:	f7ff ff4d 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7cf4:	6860      	ldr	r0, [r4, #4]
   b7cf6:	f7ff ff4c 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7cfa:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7cfc:	6860      	ldr	r0, [r4, #4]
   b7cfe:	f7ff ff48 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7d02:	0603      	lsls	r3, r0, #24
   b7d04:	7260      	strb	r0, [r4, #9]
   b7d06:	d503      	bpl.n	b7d10 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7d08:	3d01      	subs	r5, #1
   b7d0a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7d0e:	d1f5      	bne.n	b7cfc <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7d10:	b003      	add	sp, #12
   b7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d14 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7d14:	b570      	push	{r4, r5, r6, lr}
   b7d16:	4604      	mov	r4, r0
   b7d18:	460d      	mov	r5, r1
   b7d1a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7d1c:	2137      	movs	r1, #55	; 0x37
   b7d1e:	2200      	movs	r2, #0
   b7d20:	f7ff ffc6 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7d24:	4632      	mov	r2, r6
   b7d26:	4629      	mov	r1, r5
   b7d28:	4620      	mov	r0, r4
  }
   b7d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7d2e:	f7ff bfbf 	b.w	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7d34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7d38:	2500      	movs	r5, #0
   b7d3a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7d3c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7d3e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7d40:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7d42:	4604      	mov	r4, r0
   b7d44:	4690      	mov	r8, r2
   b7d46:	461e      	mov	r6, r3
   b7d48:	f005 fe9a 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7d4c:	4641      	mov	r1, r8
   b7d4e:	4607      	mov	r7, r0
   b7d50:	6860      	ldr	r0, [r4, #4]
   b7d52:	f000 f9bb 	bl	b80cc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7d56:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7d58:	4a49      	ldr	r2, [pc, #292]	; (b7e80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7d5a:	721d      	strb	r5, [r3, #8]
   b7d5c:	2501      	movs	r5, #1
   b7d5e:	60da      	str	r2, [r3, #12]
   b7d60:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7d62:	4620      	mov	r0, r4
   b7d64:	f7ff ff3c 	bl	b7be0 <_ZN9SdSpiCard8spiStartEv>
   b7d68:	6863      	ldr	r3, [r4, #4]
   b7d6a:	4629      	mov	r1, r5
   b7d6c:	7d18      	ldrb	r0, [r3, #20]
   b7d6e:	f00a f89c 	bl	c1eaa <digitalWrite>
   b7d72:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7d74:	6860      	ldr	r0, [r4, #4]
   b7d76:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7d78:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7d7a:	f7ff ff08 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7d7e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7d82:	d1f7      	bne.n	b7d74 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7d84:	6863      	ldr	r3, [r4, #4]
   b7d86:	4629      	mov	r1, r5
   b7d88:	7d18      	ldrb	r0, [r3, #20]
   b7d8a:	f00a f88e 	bl	c1eaa <digitalWrite>
  }
   b7d8e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7d90:	2200      	movs	r2, #0
   b7d92:	4611      	mov	r1, r2
   b7d94:	4620      	mov	r0, r4
   b7d96:	f7ff ff8b 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7d9a:	2801      	cmp	r0, #1
   b7d9c:	4680      	mov	r8, r0
   b7d9e:	d018      	beq.n	b7dd2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7da0:	3d01      	subs	r5, #1
   b7da2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7da6:	d107      	bne.n	b7db8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7da8:	2320      	movs	r3, #32
  spiStop();
   b7daa:	4620      	mov	r0, r4
   b7dac:	7023      	strb	r3, [r4, #0]
   b7dae:	f7ff ff26 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7db2:	2000      	movs	r0, #0
}
   b7db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7db8:	6860      	ldr	r0, [r4, #4]
   b7dba:	21fd      	movs	r1, #253	; 0xfd
   b7dbc:	f7ff fee7 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7dc0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7dc4:	6860      	ldr	r0, [r4, #4]
   b7dc6:	f7ff fee4 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7dca:	f1b8 0801 	subs.w	r8, r8, #1
   b7dce:	d1f9      	bne.n	b7dc4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7dd0:	e7de      	b.n	b7d90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7dd2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7dd6:	2108      	movs	r1, #8
   b7dd8:	4620      	mov	r0, r4
   b7dda:	f7ff ff69 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7dde:	2805      	cmp	r0, #5
   b7de0:	d114      	bne.n	b7e0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7de2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7de6:	2500      	movs	r5, #0
   b7de8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7dea:	462a      	mov	r2, r5
   b7dec:	2129      	movs	r1, #41	; 0x29
   b7dee:	4620      	mov	r0, r4
   b7df0:	f7ff ff90 	bl	b7d14 <_ZN9SdSpiCard8cardAcmdEhm>
   b7df4:	4602      	mov	r2, r0
   b7df6:	b1d8      	cbz	r0, b7e30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7df8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7dfc:	4639      	mov	r1, r7
   b7dfe:	4620      	mov	r0, r4
   b7e00:	f7ff feca 	bl	b7b98 <_ZN9SdSpiCard10isTimedOutEtt>
   b7e04:	2800      	cmp	r0, #0
   b7e06:	d0f0      	beq.n	b7dea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7e08:	2343      	movs	r3, #67	; 0x43
   b7e0a:	e7ce      	b.n	b7daa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7e0c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7e0e:	6860      	ldr	r0, [r4, #4]
   b7e10:	f7ff febf 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7e14:	3d01      	subs	r5, #1
   b7e16:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7e1a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7e1c:	d1f7      	bne.n	b7e0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7e1e:	28aa      	cmp	r0, #170	; 0xaa
   b7e20:	d104      	bne.n	b7e2c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7e22:	2302      	movs	r3, #2
   b7e24:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7e26:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7e2a:	e7dd      	b.n	b7de8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7e2c:	2325      	movs	r3, #37	; 0x25
   b7e2e:	e7bc      	b.n	b7daa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7e30:	7aa3      	ldrb	r3, [r4, #10]
   b7e32:	2b02      	cmp	r3, #2
   b7e34:	d118      	bne.n	b7e68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7e36:	213a      	movs	r1, #58	; 0x3a
   b7e38:	4620      	mov	r0, r4
   b7e3a:	f7ff ff39 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7e3e:	b108      	cbz	r0, b7e44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7e40:	2337      	movs	r3, #55	; 0x37
   b7e42:	e7b2      	b.n	b7daa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7e44:	6860      	ldr	r0, [r4, #4]
   b7e46:	f7ff fea4 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e4a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7e4e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7e50:	bf04      	itt	eq
   b7e52:	2303      	moveq	r3, #3
   b7e54:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7e56:	6860      	ldr	r0, [r4, #4]
   b7e58:	f7ff fe9b 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e5c:	6860      	ldr	r0, [r4, #4]
   b7e5e:	f7ff fe98 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e62:	6860      	ldr	r0, [r4, #4]
   b7e64:	f7ff fe95 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7e68:	4620      	mov	r0, r4
   b7e6a:	f7ff fec8 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7e6e:	6863      	ldr	r3, [r4, #4]
   b7e70:	7930      	ldrb	r0, [r6, #4]
   b7e72:	68b1      	ldr	r1, [r6, #8]
   b7e74:	89b2      	ldrh	r2, [r6, #12]
   b7e76:	821a      	strh	r2, [r3, #16]
   b7e78:	7218      	strb	r0, [r3, #8]
   b7e7a:	60d9      	str	r1, [r3, #12]
  return true;
   b7e7c:	2001      	movs	r0, #1
   b7e7e:	e799      	b.n	b7db4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7e80:	0003d090 	.word	0x0003d090

000b7e84 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7e84:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7e86:	7a83      	ldrb	r3, [r0, #10]
   b7e88:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7e8a:	bf18      	it	ne
   b7e8c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7e8e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7e90:	460a      	mov	r2, r1
   b7e92:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7e94:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7e96:	f7ff ff0b 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7e9a:	b130      	cbz	r0, b7eaa <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7e9c:	2330      	movs	r3, #48	; 0x30
   b7e9e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	f7ff feac 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ea6:	2500      	movs	r5, #0
   b7ea8:	e00b      	b.n	b7ec2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7eaa:	4629      	mov	r1, r5
   b7eac:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7eb0:	4620      	mov	r0, r4
   b7eb2:	f7ff feb7 	bl	b7c24 <_ZN9SdSpiCard8readDataEPhj>
   b7eb6:	4605      	mov	r5, r0
   b7eb8:	2800      	cmp	r0, #0
   b7eba:	d0f1      	beq.n	b7ea0 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7ebc:	4620      	mov	r0, r4
   b7ebe:	f7ff fe9e 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
}
   b7ec2:	4628      	mov	r0, r5
   b7ec4:	bd38      	pop	{r3, r4, r5, pc}

000b7ec6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7ec6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7ec8:	7a83      	ldrb	r3, [r0, #10]
   b7eca:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7ecc:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7ece:	bf18      	it	ne
   b7ed0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7ed2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7ed4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7ed6:	f7ff feeb 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7eda:	b130      	cbz	r0, b7eea <_ZN9SdSpiCard9readStartEm+0x24>
   b7edc:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7ede:	4620      	mov	r0, r4
   b7ee0:	7023      	strb	r3, [r4, #0]
   b7ee2:	f7ff fe8c 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ee6:	2000      	movs	r0, #0
}
   b7ee8:	bd10      	pop	{r4, pc}
  return true;
   b7eea:	2001      	movs	r0, #1
   b7eec:	e7fc      	b.n	b7ee8 <_ZN9SdSpiCard9readStartEm+0x22>

000b7eee <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7eee:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7ef0:	2200      	movs	r2, #0
   b7ef2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7ef4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7ef6:	f7ff fedb 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7efa:	b130      	cbz	r0, b7f0a <_ZN9SdSpiCard8readStopEv+0x1c>
   b7efc:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7efe:	4620      	mov	r0, r4
   b7f00:	7023      	strb	r3, [r4, #0]
   b7f02:	f7ff fe7c 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f06:	2000      	movs	r0, #0
}
   b7f08:	bd10      	pop	{r4, pc}
  spiStop();
   b7f0a:	4620      	mov	r0, r4
   b7f0c:	f7ff fe77 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7f10:	2001      	movs	r0, #1
   b7f12:	e7f9      	b.n	b7f08 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7f14 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f16:	4604      	mov	r4, r0
   b7f18:	4616      	mov	r6, r2
   b7f1a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7f1c:	f7ff ffd3 	bl	b7ec6 <_ZN9SdSpiCard9readStartEm>
   b7f20:	b168      	cbz	r0, b7f3e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7f22:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7f24:	b2ab      	uxth	r3, r5
   b7f26:	429f      	cmp	r7, r3
   b7f28:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7f2c:	d909      	bls.n	b7f42 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7ff fe76 	bl	b7c24 <_ZN9SdSpiCard8readDataEPhj>
   b7f38:	3501      	adds	r5, #1
   b7f3a:	2800      	cmp	r0, #0
   b7f3c:	d1f2      	bne.n	b7f24 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7f3e:	2000      	movs	r0, #0
   b7f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7f42:	4620      	mov	r0, r4
}
   b7f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7f48:	f7ff bfd1 	b.w	b7eee <_ZN9SdSpiCard8readStopEv>

000b7f4c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7f4c:	b538      	push	{r3, r4, r5, lr}
   b7f4e:	4604      	mov	r4, r0
   b7f50:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7f52:	6840      	ldr	r0, [r0, #4]
   b7f54:	f7ff fe1b 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7f58:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7f5c:	6860      	ldr	r0, [r4, #4]
   b7f5e:	4629      	mov	r1, r5
   b7f60:	f000 f8e6 	bl	b8130 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7f64:	6860      	ldr	r0, [r4, #4]
   b7f66:	21ff      	movs	r1, #255	; 0xff
   b7f68:	f7ff fe11 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7f6c:	6860      	ldr	r0, [r4, #4]
   b7f6e:	21ff      	movs	r1, #255	; 0xff
   b7f70:	f7ff fe0d 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7f74:	6860      	ldr	r0, [r4, #4]
   b7f76:	f7ff fe0c 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f7a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7f7c:	f000 001f 	and.w	r0, r0, #31
   b7f80:	2805      	cmp	r0, #5
   b7f82:	d006      	beq.n	b7f92 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7f84:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7f86:	4620      	mov	r0, r4
   b7f88:	7023      	strb	r3, [r4, #0]
   b7f8a:	f7ff fe38 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f8e:	2000      	movs	r0, #0
}
   b7f90:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7f92:	2001      	movs	r0, #1
   b7f94:	e7fc      	b.n	b7f90 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7f96 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7f96:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7f98:	7a83      	ldrb	r3, [r0, #10]
   b7f9a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7f9c:	bf18      	it	ne
   b7f9e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7fa0:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7fa2:	460a      	mov	r2, r1
   b7fa4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7fa6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7fa8:	f7ff fe82 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7fac:	4606      	mov	r6, r0
   b7fae:	b130      	cbz	r0, b7fbe <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7fb0:	2332      	movs	r3, #50	; 0x32
   b7fb2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	f7ff fe22 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7fba:	2500      	movs	r5, #0
   b7fbc:	e01f      	b.n	b7ffe <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7fbe:	462a      	mov	r2, r5
   b7fc0:	21fe      	movs	r1, #254	; 0xfe
   b7fc2:	4620      	mov	r0, r4
   b7fc4:	f7ff ffc2 	bl	b7f4c <_ZN9SdSpiCard9writeDataEhPKh>
   b7fc8:	2800      	cmp	r0, #0
   b7fca:	d0f3      	beq.n	b7fb4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7fcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	f7ff fe58 	bl	b7c86 <_ZN9SdSpiCard11waitNotBusyEt>
   b7fd6:	4605      	mov	r5, r0
   b7fd8:	b908      	cbnz	r0, b7fde <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7fda:	235a      	movs	r3, #90	; 0x5a
   b7fdc:	e7e9      	b.n	b7fb2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7fde:	4632      	mov	r2, r6
   b7fe0:	210d      	movs	r1, #13
   b7fe2:	4620      	mov	r0, r4
   b7fe4:	f7ff fe64 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b7fe8:	b108      	cbz	r0, b7fee <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7fea:	2329      	movs	r3, #41	; 0x29
   b7fec:	e7e1      	b.n	b7fb2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7fee:	6860      	ldr	r0, [r4, #4]
   b7ff0:	f7ff fdcf 	bl	b7b92 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ff4:	2800      	cmp	r0, #0
   b7ff6:	d1f8      	bne.n	b7fea <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7ff8:	4620      	mov	r0, r4
   b7ffa:	f7ff fe00 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
}
   b7ffe:	4628      	mov	r0, r5
   b8000:	bd70      	pop	{r4, r5, r6, pc}

000b8002 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b8002:	b513      	push	{r0, r1, r4, lr}
   b8004:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8006:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b800a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b800c:	f7ff fe3b 	bl	b7c86 <_ZN9SdSpiCard11waitNotBusyEt>
   b8010:	9a01      	ldr	r2, [sp, #4]
   b8012:	b930      	cbnz	r0, b8022 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b8014:	235b      	movs	r3, #91	; 0x5b
   b8016:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8018:	4620      	mov	r0, r4
   b801a:	f7ff fdf0 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b801e:	2000      	movs	r0, #0
   b8020:	e005      	b.n	b802e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b8022:	21fc      	movs	r1, #252	; 0xfc
   b8024:	4620      	mov	r0, r4
   b8026:	f7ff ff91 	bl	b7f4c <_ZN9SdSpiCard9writeDataEhPKh>
   b802a:	2800      	cmp	r0, #0
   b802c:	d0f4      	beq.n	b8018 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b802e:	b002      	add	sp, #8
   b8030:	bd10      	pop	{r4, pc}

000b8032 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8032:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b8034:	7a83      	ldrb	r3, [r0, #10]
   b8036:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8038:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b803a:	bf18      	it	ne
   b803c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b803e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8040:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b8042:	f7ff fe35 	bl	b7cb0 <_ZN9SdSpiCard11cardCommandEhm>
   b8046:	b130      	cbz	r0, b8056 <_ZN9SdSpiCard10writeStartEm+0x24>
   b8048:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b804a:	4620      	mov	r0, r4
   b804c:	7023      	strb	r3, [r4, #0]
   b804e:	f7ff fdd6 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8052:	2000      	movs	r0, #0
}
   b8054:	bd10      	pop	{r4, pc}
  return true;
   b8056:	2001      	movs	r0, #1
   b8058:	e7fc      	b.n	b8054 <_ZN9SdSpiCard10writeStartEm+0x22>

000b805a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b805a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b805c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8060:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8062:	f7ff fe10 	bl	b7c86 <_ZN9SdSpiCard11waitNotBusyEt>
   b8066:	4605      	mov	r5, r0
   b8068:	b930      	cbnz	r0, b8078 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b806a:	2356      	movs	r3, #86	; 0x56
   b806c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b806e:	4620      	mov	r0, r4
   b8070:	f7ff fdc5 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8074:	4628      	mov	r0, r5
   b8076:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8078:	6860      	ldr	r0, [r4, #4]
   b807a:	21fd      	movs	r1, #253	; 0xfd
   b807c:	f7ff fd87 	bl	b7b8e <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8080:	e7f5      	b.n	b806e <_ZN9SdSpiCard9writeStopEv+0x14>

000b8082 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8084:	4604      	mov	r4, r0
   b8086:	4616      	mov	r6, r2
   b8088:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b808a:	f7ff ffd2 	bl	b8032 <_ZN9SdSpiCard10writeStartEm>
   b808e:	b170      	cbz	r0, b80ae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8090:	2500      	movs	r5, #0
   b8092:	42bd      	cmp	r5, r7
   b8094:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8098:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b809a:	d004      	beq.n	b80a6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b809c:	f7ff ffb1 	bl	b8002 <_ZN9SdSpiCard9writeDataEPKh>
   b80a0:	b128      	cbz	r0, b80ae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b80a2:	3501      	adds	r5, #1
   b80a4:	e7f5      	b.n	b8092 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b80a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b80aa:	f7ff bfd6 	b.w	b805a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b80ae:	4620      	mov	r0, r4
   b80b0:	f7ff fda5 	bl	b7bfe <_ZN9SdSpiCard7spiStopEv>
}
   b80b4:	2000      	movs	r0, #0
   b80b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80b8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b80b8:	4b01      	ldr	r3, [pc, #4]	; (b80c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b80ba:	2201      	movs	r2, #1
   b80bc:	701a      	strb	r2, [r3, #0]
}
   b80be:	4770      	bx	lr
   b80c0:	2003e61c 	.word	0x2003e61c

000b80c4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b80c4:	1d01      	adds	r1, r0, #4
   b80c6:	6800      	ldr	r0, [r0, #0]
   b80c8:	f006 b96c 	b.w	be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b80cc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b80cc:	b510      	push	{r4, lr}
   b80ce:	4604      	mov	r4, r0
  m_csPin = csPin;
   b80d0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b80d2:	6800      	ldr	r0, [r0, #0]
   b80d4:	f006 f922 	bl	be31c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b80d8:	7d20      	ldrb	r0, [r4, #20]
   b80da:	2101      	movs	r1, #1
   b80dc:	f009 fed4 	bl	c1e88 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b80e0:	7d20      	ldrb	r0, [r4, #20]
   b80e2:	2101      	movs	r1, #1
}
   b80e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b80e8:	f009 bedf 	b.w	c1eaa <digitalWrite>

000b80ec <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b80ec:	6800      	ldr	r0, [r0, #0]
   b80ee:	f006 b940 	b.w	be372 <_ZN8SPIClass14endTransactionEv>

000b80f2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b80f2:	6800      	ldr	r0, [r0, #0]
   b80f4:	21ff      	movs	r1, #255	; 0xff
   b80f6:	f006 b9f5 	b.w	be4e4 <_ZN8SPIClass8transferEh>
	...

000b80fc <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b80fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80fe:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8100:	4a07      	ldr	r2, [pc, #28]	; (b8120 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8102:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8104:	2500      	movs	r5, #0
   b8106:	4c07      	ldr	r4, [pc, #28]	; (b8124 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8108:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b810a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b810c:	460a      	mov	r2, r1
   b810e:	4629      	mov	r1, r5
   b8110:	f006 f9ee 	bl	be4f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8114:	7823      	ldrb	r3, [r4, #0]
   b8116:	2b00      	cmp	r3, #0
   b8118:	d0fc      	beq.n	b8114 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b811a:	2000      	movs	r0, #0
   b811c:	b003      	add	sp, #12
   b811e:	bd30      	pop	{r4, r5, pc}
   b8120:	000b80b9 	.word	0x000b80b9
   b8124:	2003e61c 	.word	0x2003e61c

000b8128 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b8128:	6800      	ldr	r0, [r0, #0]
   b812a:	f006 b9db 	b.w	be4e4 <_ZN8SPIClass8transferEh>
	...

000b8130 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b8130:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8132:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8134:	4a06      	ldr	r2, [pc, #24]	; (b8150 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b8136:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8138:	2500      	movs	r5, #0
   b813a:	4c06      	ldr	r4, [pc, #24]	; (b8154 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b813c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b813e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8140:	462a      	mov	r2, r5
   b8142:	f006 f9d5 	bl	be4f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b8146:	7823      	ldrb	r3, [r4, #0]
   b8148:	2b00      	cmp	r3, #0
   b814a:	d0fc      	beq.n	b8146 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b814c:	b003      	add	sp, #12
   b814e:	bd30      	pop	{r4, r5, pc}
   b8150:	000b80b9 	.word	0x000b80b9
   b8154:	2003e61c 	.word	0x2003e61c

000b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b8158:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b815a:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b815c:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b815e:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8160:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8162:	041b      	lsls	r3, r3, #16
   b8164:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b8168:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b816a:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b816c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b8170:	bd10      	pop	{r4, pc}

000b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8172:	1843      	adds	r3, r0, r1
   b8174:	5c40      	ldrb	r0, [r0, r1]
   b8176:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b8178:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b817c:	4770      	bx	lr

000b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b817e:	b410      	push	{r4}
{
    if (base == 0) {
   b8180:	b92a      	cbnz	r2, b818e <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b8182:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b8184:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b8188:	6892      	ldr	r2, [r2, #8]
   b818a:	b2c9      	uxtb	r1, r1
   b818c:	4710      	bx	r2
}
   b818e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b8192:	b2d2      	uxtb	r2, r2
   b8194:	f007 bd2b 	b.w	bfbee <_ZN5Print11printNumberEmh>

000b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b8198:	b912      	cbnz	r2, b81a0 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b819a:	6803      	ldr	r3, [r0, #0]
   b819c:	689b      	ldr	r3, [r3, #8]
   b819e:	4718      	bx	r3
        return printNumber(val, base) + t;
   b81a0:	b2d2      	uxtb	r2, r2
   b81a2:	f007 bd24 	b.w	bfbee <_ZN5Print11printNumberEmh>

000b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b81a6:	b510      	push	{r4, lr}
   b81a8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b81aa:	f7ff fff5 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b81ae:	4620      	mov	r0, r4
    }
   b81b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b81b4:	f007 bd03 	b.w	bfbbe <_ZN5Print7printlnEv>

000b81b8 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b81b8:	6803      	ldr	r3, [r0, #0]
   b81ba:	b2c9      	uxtb	r1, r1
   b81bc:	689b      	ldr	r3, [r3, #8]
   b81be:	4718      	bx	r3

000b81c0 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b81c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b81c4:	8002      	strh	r2, [r0, #0]
   b81c6:	2142      	movs	r1, #66	; 0x42
   b81c8:	2200      	movs	r2, #0
   b81ca:	b510      	push	{r4, lr}
   b81cc:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b81d0:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b81d4:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b81d8:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b81dc:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b81e0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b81e4:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b81e8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b81ec:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b81f0:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b81f4:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b81f8:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b81fc:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b8200:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8204:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b8208:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b820c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b8210:	2180      	movs	r1, #128	; 0x80
   b8212:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b8216:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b821a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b821e:	4925      	ldr	r1, [pc, #148]	; (b82b4 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b8220:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b8224:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b8228:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b822c:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b8230:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b8234:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b8238:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b823c:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b8240:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b8244:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b8248:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b824c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8250:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8254:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b8258:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b825c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b8260:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b8264:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b8268:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b826c:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b8270:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b8274:	4910      	ldr	r1, [pc, #64]	; (b82b8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b8276:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b827a:	f640 1164 	movw	r1, #2404	; 0x964
   b827e:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b8282:	2158      	movs	r1, #88	; 0x58
   b8284:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8288:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b828a:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b828e:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b8292:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b8296:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b829a:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b829e:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b82a2:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b82a6:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b82aa:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b82ae:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b82b2:	bd10      	pop	{r4, pc}
   b82b4:	02020000 	.word	0x02020000
   b82b8:	64640200 	.word	0x64640200

000b82bc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b82bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82be:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b82c0:	460d      	mov	r5, r1
   b82c2:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b82c6:	b9a9      	cbnz	r1, b82f4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b82c8:	b1a8      	cbz	r0, b82f6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b82ca:	f7fb fee8 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b82ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b82d2:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b82d6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b82da:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b82de:	b913      	cbnz	r3, b82e6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b82e0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b82e4:	b123      	cbz	r3, b82f0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b82e6:	4920      	ldr	r1, [pc, #128]	; (b8368 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b82e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b82ec:	f007 fc7d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b82f0:	2001      	movs	r0, #1
   b82f2:	e011      	b.n	b8318 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b82f4:	b9b8      	cbnz	r0, b8326 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b82f6:	4628      	mov	r0, r5
   b82f8:	f7fb fecf 	bl	b409a <_Znaj>
   b82fc:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8300:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8304:	bb60      	cbnz	r0, b8360 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8306:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b830a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b830e:	b923      	cbnz	r3, b831a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b8310:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8314:	b90b      	cbnz	r3, b831a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b8316:	2000      	movs	r0, #0
}
   b8318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b831a:	4914      	ldr	r1, [pc, #80]	; (b836c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b831c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8320:	f007 fc63 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8324:	e7f7      	b.n	b8316 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b8326:	4608      	mov	r0, r1
   b8328:	f7fb feb7 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b832c:	4606      	mov	r6, r0
   b832e:	b940      	cbnz	r0, b8342 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8330:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8334:	b91b      	cbnz	r3, b833e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b8336:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b833a:	2b00      	cmp	r3, #0
   b833c:	d0eb      	beq.n	b8316 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b833e:	490c      	ldr	r1, [pc, #48]	; (b8370 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b8340:	e7ec      	b.n	b831c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b8342:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b8346:	42aa      	cmp	r2, r5
   b8348:	bf28      	it	cs
   b834a:	462a      	movcs	r2, r5
   b834c:	4639      	mov	r1, r7
   b834e:	f00c f85b 	bl	c4408 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8352:	4638      	mov	r0, r7
   b8354:	f7fb fea3 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b8358:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b835c:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b8360:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b8364:	e7c4      	b.n	b82f0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b8366:	bf00      	nop
   b8368:	000c6d78 	.word	0x000c6d78
   b836c:	000c6da3 	.word	0x000c6da3
   b8370:	000c6dce 	.word	0x000c6dce

000b8374 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b8374:	290d      	cmp	r1, #13
   b8376:	f000 80cd 	beq.w	b8514 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b837a:	d809      	bhi.n	b8390 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b837c:	2902      	cmp	r1, #2
   b837e:	f000 80a7 	beq.w	b84d0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b8382:	2906      	cmp	r1, #6
   b8384:	f000 80be 	beq.w	b8504 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b8388:	2901      	cmp	r1, #1
   b838a:	d016      	beq.n	b83ba <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b838c:	2000      	movs	r0, #0
}
   b838e:	4770      	bx	lr
  switch (Class)
   b8390:	2913      	cmp	r1, #19
   b8392:	f000 80d4 	beq.w	b853e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b8396:	2928      	cmp	r1, #40	; 0x28
   b8398:	f000 80dc 	beq.w	b8554 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b839c:	2910      	cmp	r1, #16
   b839e:	d1f5      	bne.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b83a0:	2a10      	cmp	r2, #16
   b83a2:	f000 80c9 	beq.w	b8538 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b83a6:	f200 80ba 	bhi.w	b851e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b83aa:	2a02      	cmp	r2, #2
   b83ac:	f000 80c1 	beq.w	b8532 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b83b0:	2a03      	cmp	r2, #3
   b83b2:	d1eb      	bne.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b83b4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b83b8:	e066      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b83ba:	2a26      	cmp	r2, #38	; 0x26
   b83bc:	d854      	bhi.n	b8468 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b83be:	2a00      	cmp	r2, #0
   b83c0:	d0e4      	beq.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b83c2:	3a01      	subs	r2, #1
   b83c4:	2a25      	cmp	r2, #37	; 0x25
   b83c6:	d8e1      	bhi.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b83c8:	a301      	add	r3, pc, #4	; (adr r3, b83d0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b83ca:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b83ce:	bf00      	nop
   b83d0:	000b8487 	.word	0x000b8487
   b83d4:	000b838d 	.word	0x000b838d
   b83d8:	000b8491 	.word	0x000b8491
   b83dc:	000b8495 	.word	0x000b8495
   b83e0:	000b8499 	.word	0x000b8499
   b83e4:	000b838d 	.word	0x000b838d
   b83e8:	000b849d 	.word	0x000b849d
   b83ec:	000b838d 	.word	0x000b838d
   b83f0:	000b84a1 	.word	0x000b84a1
   b83f4:	000b838d 	.word	0x000b838d
   b83f8:	000b838d 	.word	0x000b838d
   b83fc:	000b838d 	.word	0x000b838d
   b8400:	000b838d 	.word	0x000b838d
   b8404:	000b838d 	.word	0x000b838d
   b8408:	000b838d 	.word	0x000b838d
   b840c:	000b838d 	.word	0x000b838d
   b8410:	000b84a5 	.word	0x000b84a5
   b8414:	000b84a9 	.word	0x000b84a9
   b8418:	000b84ad 	.word	0x000b84ad
   b841c:	000b84b1 	.word	0x000b84b1
   b8420:	000b838d 	.word	0x000b838d
   b8424:	000b838d 	.word	0x000b838d
   b8428:	000b84b5 	.word	0x000b84b5
   b842c:	000b838d 	.word	0x000b838d
   b8430:	000b838d 	.word	0x000b838d
   b8434:	000b838d 	.word	0x000b838d
   b8438:	000b838d 	.word	0x000b838d
   b843c:	000b838d 	.word	0x000b838d
   b8440:	000b838d 	.word	0x000b838d
   b8444:	000b838d 	.word	0x000b838d
   b8448:	000b838d 	.word	0x000b838d
   b844c:	000b838d 	.word	0x000b838d
   b8450:	000b84b9 	.word	0x000b84b9
   b8454:	000b84bd 	.word	0x000b84bd
   b8458:	000b838d 	.word	0x000b838d
   b845c:	000b838d 	.word	0x000b838d
   b8460:	000b838d 	.word	0x000b838d
   b8464:	000b84c1 	.word	0x000b84c1
   b8468:	2a3c      	cmp	r2, #60	; 0x3c
   b846a:	d02d      	beq.n	b84c8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b846c:	d805      	bhi.n	b847a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b846e:	2a35      	cmp	r2, #53	; 0x35
   b8470:	d028      	beq.n	b84c4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8472:	2a3b      	cmp	r2, #59	; 0x3b
   b8474:	d18a      	bne.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b8476:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b8478:	e006      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b847a:	2a60      	cmp	r2, #96	; 0x60
   b847c:	d026      	beq.n	b84cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b847e:	2a61      	cmp	r2, #97	; 0x61
   b8480:	d184      	bne.n	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8482:	6980      	ldr	r0, [r0, #24]
   b8484:	e000      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b8486:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b8488:	3800      	subs	r0, #0
   b848a:	bf18      	it	ne
   b848c:	2001      	movne	r0, #1
   b848e:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b8490:	6900      	ldr	r0, [r0, #16]
   b8492:	e7f9      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8494:	6940      	ldr	r0, [r0, #20]
   b8496:	e7f7      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b8498:	69c0      	ldr	r0, [r0, #28]
   b849a:	e7f5      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b849c:	6a00      	ldr	r0, [r0, #32]
   b849e:	e7f3      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b84a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b84a2:	e7f1      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b84a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b84a6:	e7ef      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b84a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b84aa:	e7ed      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b84ac:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b84ae:	e7eb      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b84b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b84b2:	e7e9      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b84b4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b84b6:	e7e7      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b84b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b84ba:	e7e5      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b84bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b84be:	e7e3      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b84c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b84c2:	e7e1      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b84c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b84c6:	e7df      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b84c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b84ca:	e7dd      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b84cc:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b84ce:	e7db      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b84d0:	2a34      	cmp	r2, #52	; 0x34
   b84d2:	d015      	beq.n	b8500 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b84d4:	d806      	bhi.n	b84e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b84d6:	2a13      	cmp	r2, #19
   b84d8:	d00b      	beq.n	b84f2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b84da:	2a15      	cmp	r2, #21
   b84dc:	f47f af56 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b84e0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b84e2:	e7d1      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b84e4:	2a72      	cmp	r2, #114	; 0x72
   b84e6:	d006      	beq.n	b84f6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b84e8:	2a73      	cmp	r2, #115	; 0x73
   b84ea:	f47f af4f 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b84ee:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b84f0:	e7ca      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b84f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b84f4:	e7c8      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b84f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b84f8:	2b00      	cmp	r3, #0
   b84fa:	d13b      	bne.n	b8574 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b84fc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b84fe:	e7c3      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8500:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8502:	e7c1      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8504:	b122      	cbz	r2, b8510 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8506:	2a08      	cmp	r2, #8
   b8508:	f47f af40 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b850c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b850e:	e7bb      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8510:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8512:	e7b9      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8514:	2a03      	cmp	r2, #3
   b8516:	f47f af39 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b851a:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b851c:	e7b4      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b851e:	2a14      	cmp	r2, #20
   b8520:	d005      	beq.n	b852e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8522:	2a15      	cmp	r2, #21
   b8524:	f47f af32 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b8528:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b852c:	e7ac      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b852e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8530:	e7aa      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8532:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b8536:	e7a7      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b8538:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b853c:	e7a4      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b853e:	2a60      	cmp	r2, #96	; 0x60
   b8540:	d005      	beq.n	b854e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8542:	2a80      	cmp	r2, #128	; 0x80
   b8544:	f47f af22 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b8548:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b854c:	e79c      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b854e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8552:	e799      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8554:	2a01      	cmp	r2, #1
   b8556:	d007      	beq.n	b8568 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b8558:	2a02      	cmp	r2, #2
   b855a:	d008      	beq.n	b856e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b855c:	2a00      	cmp	r2, #0
   b855e:	f47f af15 	bne.w	b838c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8562:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b8566:	e78f      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b8568:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b856c:	e78c      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b856e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8572:	e789      	b.n	b8488 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8574:	2001      	movs	r0, #1
   b8576:	4770      	bx	lr

000b8578 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8578:	290d      	cmp	r1, #13
   b857a:	d035      	beq.n	b85e8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b857c:	d807      	bhi.n	b858e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b857e:	2902      	cmp	r1, #2
   b8580:	d019      	beq.n	b85b6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8582:	2906      	cmp	r1, #6
   b8584:	d02a      	beq.n	b85dc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8586:	2901      	cmp	r1, #1
   b8588:	d00d      	beq.n	b85a6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b858a:	2000      	movs	r0, #0
}
   b858c:	4770      	bx	lr
  switch (Class)
   b858e:	2913      	cmp	r1, #19
   b8590:	d02f      	beq.n	b85f2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8592:	2928      	cmp	r1, #40	; 0x28
   b8594:	d034      	beq.n	b8600 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8596:	2910      	cmp	r1, #16
   b8598:	d1f7      	bne.n	b858a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b859a:	3a02      	subs	r2, #2
   b859c:	b2d2      	uxtb	r2, r2
   b859e:	2a13      	cmp	r2, #19
   b85a0:	d8f3      	bhi.n	b858a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b85a2:	4b1f      	ldr	r3, [pc, #124]	; (b8620 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b85a4:	e004      	b.n	b85b0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b85a6:	3a01      	subs	r2, #1
   b85a8:	b2d2      	uxtb	r2, r2
   b85aa:	2a60      	cmp	r2, #96	; 0x60
   b85ac:	d8ed      	bhi.n	b858a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b85ae:	4b1d      	ldr	r3, [pc, #116]	; (b8624 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b85b0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b85b4:	4770      	bx	lr
    switch (ID)
   b85b6:	2a34      	cmp	r2, #52	; 0x34
   b85b8:	d027      	beq.n	b860a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b85ba:	d807      	bhi.n	b85cc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b85bc:	2a13      	cmp	r2, #19
   b85be:	d026      	beq.n	b860e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b85c0:	2a15      	cmp	r2, #21
   b85c2:	bf14      	ite	ne
   b85c4:	2000      	movne	r0, #0
   b85c6:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b85ca:	4770      	bx	lr
   b85cc:	2a72      	cmp	r2, #114	; 0x72
   b85ce:	d020      	beq.n	b8612 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b85d0:	2a73      	cmp	r2, #115	; 0x73
   b85d2:	bf14      	ite	ne
   b85d4:	2000      	movne	r0, #0
   b85d6:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b85da:	4770      	bx	lr
    switch (ID)
   b85dc:	b1e2      	cbz	r2, b8618 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b85de:	2a08      	cmp	r2, #8
   b85e0:	bf14      	ite	ne
   b85e2:	2000      	movne	r0, #0
   b85e4:	2006      	moveq	r0, #6
   b85e6:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b85e8:	2a03      	cmp	r2, #3
   b85ea:	bf14      	ite	ne
   b85ec:	2000      	movne	r0, #0
   b85ee:	201c      	moveq	r0, #28
   b85f0:	4770      	bx	lr
    switch (ID)
   b85f2:	2a60      	cmp	r2, #96	; 0x60
   b85f4:	d012      	beq.n	b861c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b85f6:	2a80      	cmp	r2, #128	; 0x80
   b85f8:	bf14      	ite	ne
   b85fa:	2000      	movne	r0, #0
   b85fc:	20a4      	moveq	r0, #164	; 0xa4
   b85fe:	4770      	bx	lr
    switch (ID)
   b8600:	2a02      	cmp	r2, #2
   b8602:	d8c2      	bhi.n	b858a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8604:	4b08      	ldr	r3, [pc, #32]	; (b8628 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8606:	5c98      	ldrb	r0, [r3, r2]
   b8608:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b860a:	200c      	movs	r0, #12
   b860c:	4770      	bx	lr
   b860e:	2048      	movs	r0, #72	; 0x48
   b8610:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8612:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8616:	4770      	bx	lr
   b8618:	2014      	movs	r0, #20
   b861a:	4770      	bx	lr
   b861c:	2008      	movs	r0, #8
   b861e:	4770      	bx	lr
   b8620:	000c7a8e 	.word	0x000c7a8e
   b8624:	000c79cc 	.word	0x000c79cc
   b8628:	000c7ab6 	.word	0x000c7ab6

000b862c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b862c:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b862e:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8632:	07ca      	lsls	r2, r1, #31
   b8634:	d415      	bmi.n	b8662 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b8636:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b863a:	4b59      	ldr	r3, [pc, #356]	; (b87a0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b863c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8640:	429a      	cmp	r2, r3
   b8642:	d101      	bne.n	b8648 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8644:	078b      	lsls	r3, r1, #30
   b8646:	d40c      	bmi.n	b8662 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8648:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b864c:	2b47      	cmp	r3, #71	; 0x47
   b864e:	d174      	bne.n	b873a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8650:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8654:	f245 1441 	movw	r4, #20801	; 0x5141
   b8658:	42a3      	cmp	r3, r4
   b865a:	d104      	bne.n	b8666 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b865c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8660:	d06b      	beq.n	b873a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8662:	2001      	movs	r0, #1
   b8664:	e070      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b8666:	f245 1442 	movw	r4, #20802	; 0x5142
   b866a:	42a3      	cmp	r3, r4
   b866c:	d102      	bne.n	b8674 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b866e:	f011 0f08 	tst.w	r1, #8
   b8672:	e7f5      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8674:	f245 3442 	movw	r4, #21314	; 0x5342
   b8678:	42a3      	cmp	r3, r4
   b867a:	d102      	bne.n	b8682 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b867c:	f011 0f10 	tst.w	r1, #16
   b8680:	e7ee      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8682:	f244 1447 	movw	r4, #16711	; 0x4147
   b8686:	42a3      	cmp	r3, r4
   b8688:	d102      	bne.n	b8690 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b868a:	f011 0f20 	tst.w	r1, #32
   b868e:	e7e7      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8690:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8694:	42a3      	cmp	r3, r4
   b8696:	d102      	bne.n	b869e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8698:	f011 0f40 	tst.w	r1, #64	; 0x40
   b869c:	e7e0      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b869e:	f245 144c 	movw	r4, #20812	; 0x514c
   b86a2:	42a3      	cmp	r3, r4
   b86a4:	d102      	bne.n	b86ac <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b86a6:	f011 0f80 	tst.w	r1, #128	; 0x80
   b86aa:	e7d9      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b86ac:	f245 114e 	movw	r1, #20814	; 0x514e
   b86b0:	428b      	cmp	r3, r1
   b86b2:	d104      	bne.n	b86be <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b86b4:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b86b8:	f013 0f01 	tst.w	r3, #1
   b86bc:	e7d0      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b86be:	f245 314e 	movw	r1, #21326	; 0x534e
   b86c2:	428b      	cmp	r3, r1
   b86c4:	d104      	bne.n	b86d0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b86c6:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b86ca:	f013 0f02 	tst.w	r3, #2
   b86ce:	e7c7      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b86d0:	f245 1150 	movw	r1, #20816	; 0x5150
   b86d4:	428b      	cmp	r3, r1
   b86d6:	d104      	bne.n	b86e2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b86d8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b86dc:	f013 0f04 	tst.w	r3, #4
   b86e0:	e7be      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b86e2:	f245 1151 	movw	r1, #20817	; 0x5151
   b86e6:	428b      	cmp	r3, r1
   b86e8:	d104      	bne.n	b86f4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b86ea:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b86ee:	f013 0f08 	tst.w	r3, #8
   b86f2:	e7b5      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b86f4:	f245 3152 	movw	r1, #21330	; 0x5352
   b86f8:	428b      	cmp	r3, r1
   b86fa:	d104      	bne.n	b8706 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b86fc:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8700:	f013 0f10 	tst.w	r3, #16
   b8704:	e7ac      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8706:	f244 1153 	movw	r1, #16723	; 0x4153
   b870a:	428b      	cmp	r3, r1
   b870c:	d104      	bne.n	b8718 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b870e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8712:	f013 0f20 	tst.w	r3, #32
   b8716:	e7a3      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8718:	f245 4153 	movw	r1, #21587	; 0x5453
   b871c:	428b      	cmp	r3, r1
   b871e:	d104      	bne.n	b872a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8720:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8724:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8728:	e79a      	b.n	b8660 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b872a:	f245 6153 	movw	r1, #22099	; 0x5653
   b872e:	428b      	cmp	r3, r1
   b8730:	d103      	bne.n	b873a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8732:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8736:	2b00      	cmp	r3, #0
   b8738:	db93      	blt.n	b8662 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b873a:	4b1a      	ldr	r3, [pc, #104]	; (b87a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b873c:	429a      	cmp	r2, r3
   b873e:	d104      	bne.n	b874a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8740:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8744:	f000 0001 	and.w	r0, r0, #1
}
   b8748:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b874a:	4b17      	ldr	r3, [pc, #92]	; (b87a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b874c:	429a      	cmp	r2, r3
   b874e:	d104      	bne.n	b875a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8750:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8754:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8758:	e7f6      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b875a:	4b14      	ldr	r3, [pc, #80]	; (b87ac <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b875c:	429a      	cmp	r2, r3
   b875e:	d104      	bne.n	b876a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8760:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8764:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8768:	e7ee      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b876a:	4b11      	ldr	r3, [pc, #68]	; (b87b0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b876c:	429a      	cmp	r2, r3
   b876e:	d104      	bne.n	b877a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8770:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8774:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8778:	e7e6      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b877a:	4b0e      	ldr	r3, [pc, #56]	; (b87b4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b877c:	429a      	cmp	r2, r3
   b877e:	d104      	bne.n	b878a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8780:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8784:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8788:	e7de      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b878a:	4b0b      	ldr	r3, [pc, #44]	; (b87b8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b878c:	429a      	cmp	r2, r3
   b878e:	d104      	bne.n	b879a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8790:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8794:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8798:	e7d6      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b879a:	2000      	movs	r0, #0
   b879c:	e7d4      	b.n	b8748 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b879e:	bf00      	nop
   b87a0:	4d544400 	.word	0x4d544400
   b87a4:	4d4c5200 	.word	0x4d4c5200
   b87a8:	434d5200 	.word	0x434d5200
   b87ac:	54585400 	.word	0x54585400
   b87b0:	574c5600 	.word	0x574c5600
   b87b4:	47545600 	.word	0x47545600
   b87b8:	41445a00 	.word	0x41445a00

000b87bc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b87bc:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b87c0:	2b2a      	cmp	r3, #42	; 0x2a
   b87c2:	d157      	bne.n	b8874 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b87c4:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b87c8:	2b47      	cmp	r3, #71	; 0x47
   b87ca:	d153      	bne.n	b8874 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b87cc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b87d0:	4a29      	ldr	r2, [pc, #164]	; (b8878 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b87d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b87d6:	4293      	cmp	r3, r2
   b87d8:	d011      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b87da:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b87de:	2a47      	cmp	r2, #71	; 0x47
   b87e0:	d11a      	bne.n	b8818 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b87e2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b87e6:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b87ea:	3941      	subs	r1, #65	; 0x41
   b87ec:	b289      	uxth	r1, r1
   b87ee:	2910      	cmp	r1, #16
   b87f0:	d907      	bls.n	b8802 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b87f2:	f022 0110 	bic.w	r1, r2, #16
   b87f6:	f245 3042 	movw	r0, #21314	; 0x5342
   b87fa:	4281      	cmp	r1, r0
   b87fc:	d129      	bne.n	b8852 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b87fe:	2001      	movs	r0, #1
}
   b8800:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8802:	481e      	ldr	r0, [pc, #120]	; (b887c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8804:	fa20 f101 	lsr.w	r1, r0, r1
   b8808:	07c9      	lsls	r1, r1, #31
   b880a:	d4f8      	bmi.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b880c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8810:	f245 4153 	movw	r1, #21587	; 0x5453
   b8814:	428a      	cmp	r2, r1
   b8816:	d0f2      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8818:	4a19      	ldr	r2, [pc, #100]	; (b8880 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b881a:	4293      	cmp	r3, r2
   b881c:	d0ef      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b881e:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8822:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8826:	4293      	cmp	r3, r2
   b8828:	d0e9      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b882a:	4a16      	ldr	r2, [pc, #88]	; (b8884 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b882c:	4293      	cmp	r3, r2
   b882e:	d0e6      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8830:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8834:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8838:	4293      	cmp	r3, r2
   b883a:	d0e0      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b883c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8840:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8844:	4293      	cmp	r3, r2
   b8846:	d0da      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8848:	480f      	ldr	r0, [pc, #60]	; (b8888 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b884a:	1a1b      	subs	r3, r3, r0
   b884c:	4258      	negs	r0, r3
   b884e:	4158      	adcs	r0, r3
   b8850:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8852:	f244 1147 	movw	r1, #16711	; 0x4147
   b8856:	428a      	cmp	r2, r1
   b8858:	d0d1      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b885a:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b885e:	428a      	cmp	r2, r1
   b8860:	d0cd      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8862:	f245 314e 	movw	r1, #21326	; 0x534e
   b8866:	428a      	cmp	r2, r1
   b8868:	d0c9      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b886a:	f244 1153 	movw	r1, #16723	; 0x4153
   b886e:	428a      	cmp	r2, r1
   b8870:	d0c5      	beq.n	b87fe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8872:	e7cb      	b.n	b880c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8874:	2000      	movs	r0, #0
   b8876:	4770      	bx	lr
   b8878:	4d544400 	.word	0x4d544400
   b887c:	0001a803 	.word	0x0001a803
   b8880:	4d4c5200 	.word	0x4d4c5200
   b8884:	54585400 	.word	0x54585400
   b8888:	41445a00 	.word	0x41445a00

000b888c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b888c:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b888e:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8892:	07ca      	lsls	r2, r1, #31
   b8894:	d415      	bmi.n	b88c2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8896:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b889a:	4b59      	ldr	r3, [pc, #356]	; (b8a00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b889c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b88a0:	429a      	cmp	r2, r3
   b88a2:	d101      	bne.n	b88a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b88a4:	078b      	lsls	r3, r1, #30
   b88a6:	d40c      	bmi.n	b88c2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b88a8:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b88ac:	2b47      	cmp	r3, #71	; 0x47
   b88ae:	d174      	bne.n	b899a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b88b0:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b88b4:	f245 1441 	movw	r4, #20801	; 0x5141
   b88b8:	42a3      	cmp	r3, r4
   b88ba:	d104      	bne.n	b88c6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b88bc:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b88c0:	d06b      	beq.n	b899a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b88c2:	2001      	movs	r0, #1
   b88c4:	e070      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b88c6:	f245 1442 	movw	r4, #20802	; 0x5142
   b88ca:	42a3      	cmp	r3, r4
   b88cc:	d102      	bne.n	b88d4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b88ce:	f011 0f08 	tst.w	r1, #8
   b88d2:	e7f5      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b88d4:	f245 3442 	movw	r4, #21314	; 0x5342
   b88d8:	42a3      	cmp	r3, r4
   b88da:	d102      	bne.n	b88e2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b88dc:	f011 0f10 	tst.w	r1, #16
   b88e0:	e7ee      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b88e2:	f244 1447 	movw	r4, #16711	; 0x4147
   b88e6:	42a3      	cmp	r3, r4
   b88e8:	d102      	bne.n	b88f0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b88ea:	f011 0f20 	tst.w	r1, #32
   b88ee:	e7e7      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b88f0:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b88f4:	42a3      	cmp	r3, r4
   b88f6:	d102      	bne.n	b88fe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b88f8:	f011 0f40 	tst.w	r1, #64	; 0x40
   b88fc:	e7e0      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b88fe:	f245 144c 	movw	r4, #20812	; 0x514c
   b8902:	42a3      	cmp	r3, r4
   b8904:	d102      	bne.n	b890c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8906:	f011 0f80 	tst.w	r1, #128	; 0x80
   b890a:	e7d9      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b890c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8910:	428b      	cmp	r3, r1
   b8912:	d104      	bne.n	b891e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8914:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8918:	f013 0f01 	tst.w	r3, #1
   b891c:	e7d0      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b891e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8922:	428b      	cmp	r3, r1
   b8924:	d104      	bne.n	b8930 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8926:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b892a:	f013 0f02 	tst.w	r3, #2
   b892e:	e7c7      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8930:	f245 1150 	movw	r1, #20816	; 0x5150
   b8934:	428b      	cmp	r3, r1
   b8936:	d104      	bne.n	b8942 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8938:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b893c:	f013 0f04 	tst.w	r3, #4
   b8940:	e7be      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8942:	f245 1151 	movw	r1, #20817	; 0x5151
   b8946:	428b      	cmp	r3, r1
   b8948:	d104      	bne.n	b8954 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b894a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b894e:	f013 0f08 	tst.w	r3, #8
   b8952:	e7b5      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8954:	f245 3152 	movw	r1, #21330	; 0x5352
   b8958:	428b      	cmp	r3, r1
   b895a:	d104      	bne.n	b8966 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b895c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8960:	f013 0f10 	tst.w	r3, #16
   b8964:	e7ac      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8966:	f244 1153 	movw	r1, #16723	; 0x4153
   b896a:	428b      	cmp	r3, r1
   b896c:	d104      	bne.n	b8978 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b896e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8972:	f013 0f20 	tst.w	r3, #32
   b8976:	e7a3      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8978:	f245 4153 	movw	r1, #21587	; 0x5453
   b897c:	428b      	cmp	r3, r1
   b897e:	d104      	bne.n	b898a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8980:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8984:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8988:	e79a      	b.n	b88c0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b898a:	f245 6153 	movw	r1, #22099	; 0x5653
   b898e:	428b      	cmp	r3, r1
   b8990:	d103      	bne.n	b899a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8992:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8996:	2b00      	cmp	r3, #0
   b8998:	db93      	blt.n	b88c2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b899a:	4b1a      	ldr	r3, [pc, #104]	; (b8a04 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b899c:	429a      	cmp	r2, r3
   b899e:	d104      	bne.n	b89aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b89a0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89a4:	f000 0001 	and.w	r0, r0, #1
}
   b89a8:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b89aa:	4b17      	ldr	r3, [pc, #92]	; (b8a08 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b89ac:	429a      	cmp	r2, r3
   b89ae:	d104      	bne.n	b89ba <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b89b0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b89b8:	e7f6      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b89ba:	4b14      	ldr	r3, [pc, #80]	; (b8a0c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b89bc:	429a      	cmp	r2, r3
   b89be:	d104      	bne.n	b89ca <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b89c0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b89c8:	e7ee      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b89ca:	4b11      	ldr	r3, [pc, #68]	; (b8a10 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b89cc:	429a      	cmp	r2, r3
   b89ce:	d104      	bne.n	b89da <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b89d0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89d4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b89d8:	e7e6      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b89da:	4b0e      	ldr	r3, [pc, #56]	; (b8a14 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b89dc:	429a      	cmp	r2, r3
   b89de:	d104      	bne.n	b89ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b89e0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89e4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b89e8:	e7de      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b89ea:	4b0b      	ldr	r3, [pc, #44]	; (b8a18 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b89ec:	429a      	cmp	r2, r3
   b89ee:	d104      	bne.n	b89fa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b89f0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b89f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b89f8:	e7d6      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b89fa:	2000      	movs	r0, #0
   b89fc:	e7d4      	b.n	b89a8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b89fe:	bf00      	nop
   b8a00:	4d544400 	.word	0x4d544400
   b8a04:	4d4c5200 	.word	0x4d4c5200
   b8a08:	434d5200 	.word	0x434d5200
   b8a0c:	54585400 	.word	0x54585400
   b8a10:	574c5600 	.word	0x574c5600
   b8a14:	47545600 	.word	0x47545600
   b8a18:	41445a00 	.word	0x41445a00

000b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8a1c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8a20:	b110      	cbz	r0, b8a28 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8a22:	6803      	ldr	r3, [r0, #0]
   b8a24:	689b      	ldr	r3, [r3, #8]
   b8a26:	4718      	bx	r3
}
   b8a28:	4770      	bx	lr
	...

000b8a2c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a2e:	4b3d      	ldr	r3, [pc, #244]	; (b8b24 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8a30:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a32:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a36:	6818      	ldr	r0, [r3, #0]
   b8a38:	9000      	str	r0, [sp, #0]
   b8a3a:	889b      	ldrh	r3, [r3, #4]
   b8a3c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a40:	2205      	movs	r2, #5
   b8a42:	4629      	mov	r1, r5
   b8a44:	4668      	mov	r0, sp
   b8a46:	f00b fccf 	bl	c43e8 <memcmp>
   b8a4a:	b928      	cbnz	r0, b8a58 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8a4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8a50:	b113      	cbz	r3, b8a58 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8a52:	2001      	movs	r0, #1
}
   b8a54:	b003      	add	sp, #12
   b8a56:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a58:	4933      	ldr	r1, [pc, #204]	; (b8b28 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b8a5a:	4668      	mov	r0, sp
   b8a5c:	f00b fd62 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a60:	2205      	movs	r2, #5
   b8a62:	4629      	mov	r1, r5
   b8a64:	4668      	mov	r0, sp
   b8a66:	f00b fcbf 	bl	c43e8 <memcmp>
   b8a6a:	b918      	cbnz	r0, b8a74 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8a6c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8a70:	2b00      	cmp	r3, #0
   b8a72:	d1ee      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8a74:	492d      	ldr	r1, [pc, #180]	; (b8b2c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8a76:	4668      	mov	r0, sp
   b8a78:	f00b fd54 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a7c:	2205      	movs	r2, #5
   b8a7e:	4629      	mov	r1, r5
   b8a80:	4668      	mov	r0, sp
   b8a82:	f00b fcb1 	bl	c43e8 <memcmp>
   b8a86:	b918      	cbnz	r0, b8a90 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8a88:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8a8c:	2b00      	cmp	r3, #0
   b8a8e:	d1e0      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8a90:	4927      	ldr	r1, [pc, #156]	; (b8b30 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8a92:	4668      	mov	r0, sp
   b8a94:	f00b fd46 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a98:	2205      	movs	r2, #5
   b8a9a:	4629      	mov	r1, r5
   b8a9c:	4668      	mov	r0, sp
   b8a9e:	f00b fca3 	bl	c43e8 <memcmp>
   b8aa2:	b918      	cbnz	r0, b8aac <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8aa4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8aa8:	2b00      	cmp	r3, #0
   b8aaa:	d1d2      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8aac:	4921      	ldr	r1, [pc, #132]	; (b8b34 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8aae:	4668      	mov	r0, sp
   b8ab0:	f00b fd38 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ab4:	2205      	movs	r2, #5
   b8ab6:	4629      	mov	r1, r5
   b8ab8:	4668      	mov	r0, sp
   b8aba:	f00b fc95 	bl	c43e8 <memcmp>
   b8abe:	b918      	cbnz	r0, b8ac8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8ac0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8ac4:	2b00      	cmp	r3, #0
   b8ac6:	d1c4      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8ac8:	491b      	ldr	r1, [pc, #108]	; (b8b38 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8aca:	4668      	mov	r0, sp
   b8acc:	f00b fd2a 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ad0:	2205      	movs	r2, #5
   b8ad2:	4629      	mov	r1, r5
   b8ad4:	4668      	mov	r0, sp
   b8ad6:	f00b fc87 	bl	c43e8 <memcmp>
   b8ada:	b918      	cbnz	r0, b8ae4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8adc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8ae0:	2b00      	cmp	r3, #0
   b8ae2:	d1b6      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8ae4:	4915      	ldr	r1, [pc, #84]	; (b8b3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8ae6:	4668      	mov	r0, sp
   b8ae8:	f00b fd1c 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aec:	2205      	movs	r2, #5
   b8aee:	4629      	mov	r1, r5
   b8af0:	4668      	mov	r0, sp
   b8af2:	f00b fc79 	bl	c43e8 <memcmp>
   b8af6:	b918      	cbnz	r0, b8b00 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8af8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8afc:	2b00      	cmp	r3, #0
   b8afe:	d1a8      	bne.n	b8a52 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8b00:	490f      	ldr	r1, [pc, #60]	; (b8b40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8b02:	4668      	mov	r0, sp
   b8b04:	f00b fd0e 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b08:	2205      	movs	r2, #5
   b8b0a:	4629      	mov	r1, r5
   b8b0c:	4668      	mov	r0, sp
   b8b0e:	f00b fc6b 	bl	c43e8 <memcmp>
   b8b12:	b928      	cbnz	r0, b8b20 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8b14:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8b18:	3800      	subs	r0, #0
   b8b1a:	bf18      	it	ne
   b8b1c:	2001      	movne	r0, #1
   b8b1e:	e799      	b.n	b8a54 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8b20:	2000      	movs	r0, #0
   b8b22:	e797      	b.n	b8a54 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8b24:	000c6e24 	.word	0x000c6e24
   b8b28:	000c6dfa 	.word	0x000c6dfa
   b8b2c:	000c6e00 	.word	0x000c6e00
   b8b30:	000c6e06 	.word	0x000c6e06
   b8b34:	000c6e0c 	.word	0x000c6e0c
   b8b38:	000c6e12 	.word	0x000c6e12
   b8b3c:	000c6e18 	.word	0x000c6e18
   b8b40:	000c6e1e 	.word	0x000c6e1e

000b8b44 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8b46:	4b62      	ldr	r3, [pc, #392]	; (b8cd0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8b48:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b4a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b4e:	6818      	ldr	r0, [r3, #0]
   b8b50:	9000      	str	r0, [sp, #0]
   b8b52:	889b      	ldrh	r3, [r3, #4]
   b8b54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b58:	2205      	movs	r2, #5
   b8b5a:	4629      	mov	r1, r5
   b8b5c:	4668      	mov	r0, sp
   b8b5e:	f00b fc43 	bl	c43e8 <memcmp>
   b8b62:	b978      	cbnz	r0, b8b84 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8b64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8b68:	b163      	cbz	r3, b8b84 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b8b6a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8b6e:	b14a      	cbz	r2, b8b84 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8b70:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8b74:	2a00      	cmp	r2, #0
   b8b76:	f040 80a3 	bne.w	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8b7a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8b7e:	2b00      	cmp	r3, #0
   b8b80:	f040 809e 	bne.w	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8b84:	4953      	ldr	r1, [pc, #332]	; (b8cd4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8b86:	4668      	mov	r0, sp
   b8b88:	f00b fccc 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b8c:	2205      	movs	r2, #5
   b8b8e:	4629      	mov	r1, r5
   b8b90:	4668      	mov	r0, sp
   b8b92:	f00b fc29 	bl	c43e8 <memcmp>
   b8b96:	b978      	cbnz	r0, b8bb8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b8b98:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8b9c:	b163      	cbz	r3, b8bb8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8b9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8ba2:	b14a      	cbz	r2, b8bb8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8ba4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8ba8:	2a00      	cmp	r2, #0
   b8baa:	f040 8089 	bne.w	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8bae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8bb2:	2b00      	cmp	r3, #0
   b8bb4:	f040 8084 	bne.w	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8bb8:	4947      	ldr	r1, [pc, #284]	; (b8cd8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b8bba:	4668      	mov	r0, sp
   b8bbc:	f00b fcb2 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bc0:	2205      	movs	r2, #5
   b8bc2:	4629      	mov	r1, r5
   b8bc4:	4668      	mov	r0, sp
   b8bc6:	f00b fc0f 	bl	c43e8 <memcmp>
   b8bca:	b968      	cbnz	r0, b8be8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8bcc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8bd0:	b153      	cbz	r3, b8be8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8bd2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8bd6:	b13a      	cbz	r2, b8be8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8bd8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8bdc:	2a00      	cmp	r2, #0
   b8bde:	d16f      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8be0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8be4:	2b00      	cmp	r3, #0
   b8be6:	d16b      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8be8:	493c      	ldr	r1, [pc, #240]	; (b8cdc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b8bea:	4668      	mov	r0, sp
   b8bec:	f00b fc9a 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf0:	2205      	movs	r2, #5
   b8bf2:	4629      	mov	r1, r5
   b8bf4:	4668      	mov	r0, sp
   b8bf6:	f00b fbf7 	bl	c43e8 <memcmp>
   b8bfa:	b968      	cbnz	r0, b8c18 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8bfc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8c00:	b153      	cbz	r3, b8c18 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8c02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8c06:	b13a      	cbz	r2, b8c18 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8c08:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8c0c:	2a00      	cmp	r2, #0
   b8c0e:	d157      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8c14:	2b00      	cmp	r3, #0
   b8c16:	d153      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8c18:	4931      	ldr	r1, [pc, #196]	; (b8ce0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b8c1a:	4668      	mov	r0, sp
   b8c1c:	f00b fc82 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c20:	2205      	movs	r2, #5
   b8c22:	4629      	mov	r1, r5
   b8c24:	4668      	mov	r0, sp
   b8c26:	f00b fbdf 	bl	c43e8 <memcmp>
   b8c2a:	b968      	cbnz	r0, b8c48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8c2c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8c30:	b153      	cbz	r3, b8c48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8c32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8c36:	b13a      	cbz	r2, b8c48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8c38:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8c3c:	2a00      	cmp	r2, #0
   b8c3e:	d13f      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c40:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8c44:	2b00      	cmp	r3, #0
   b8c46:	d13b      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8c48:	4926      	ldr	r1, [pc, #152]	; (b8ce4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b8c4a:	4668      	mov	r0, sp
   b8c4c:	f00b fc6a 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c50:	2205      	movs	r2, #5
   b8c52:	4629      	mov	r1, r5
   b8c54:	4668      	mov	r0, sp
   b8c56:	f00b fbc7 	bl	c43e8 <memcmp>
   b8c5a:	b958      	cbnz	r0, b8c74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8c5c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8c60:	b143      	cbz	r3, b8c74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8c62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8c66:	b12a      	cbz	r2, b8c74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8c68:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8c6c:	bb42      	cbnz	r2, b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c6e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8c72:	bb2b      	cbnz	r3, b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8c74:	491c      	ldr	r1, [pc, #112]	; (b8ce8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b8c76:	4668      	mov	r0, sp
   b8c78:	f00b fc54 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c7c:	2205      	movs	r2, #5
   b8c7e:	4629      	mov	r1, r5
   b8c80:	4668      	mov	r0, sp
   b8c82:	f00b fbb1 	bl	c43e8 <memcmp>
   b8c86:	b940      	cbnz	r0, b8c9a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b8c88:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8c8c:	b12b      	cbz	r3, b8c9a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b8c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b8c90:	b11a      	cbz	r2, b8c9a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b8c92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8c94:	b9a2      	cbnz	r2, b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8c98:	b993      	cbnz	r3, b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b8c9a:	4914      	ldr	r1, [pc, #80]	; (b8cec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b8c9c:	4668      	mov	r0, sp
   b8c9e:	f00b fc41 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ca2:	2205      	movs	r2, #5
   b8ca4:	4629      	mov	r1, r5
   b8ca6:	4668      	mov	r0, sp
   b8ca8:	f00b fb9e 	bl	c43e8 <memcmp>
   b8cac:	b958      	cbnz	r0, b8cc6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b8cae:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8cb2:	b153      	cbz	r3, b8cca <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b8cb4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8cb6:	b120      	cbz	r0, b8cc2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b8cb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8cba:	b90a      	cbnz	r2, b8cc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8cbc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8cbe:	b100      	cbz	r0, b8cc2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8cc0:	2001      	movs	r0, #1
}
   b8cc2:	b003      	add	sp, #12
   b8cc4:	bd30      	pop	{r4, r5, pc}
  return false;
   b8cc6:	2000      	movs	r0, #0
   b8cc8:	e7fb      	b.n	b8cc2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8cca:	4618      	mov	r0, r3
   b8ccc:	e7f9      	b.n	b8cc2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8cce:	bf00      	nop
   b8cd0:	000c6e24 	.word	0x000c6e24
   b8cd4:	000c6dfa 	.word	0x000c6dfa
   b8cd8:	000c6e00 	.word	0x000c6e00
   b8cdc:	000c6e06 	.word	0x000c6e06
   b8ce0:	000c6e0c 	.word	0x000c6e0c
   b8ce4:	000c6e12 	.word	0x000c6e12
   b8ce8:	000c6e18 	.word	0x000c6e18
   b8cec:	000c6e1e 	.word	0x000c6e1e

000b8cf0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8cf2:	4b38      	ldr	r3, [pc, #224]	; (b8dd4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8cf4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cf6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8cfa:	6818      	ldr	r0, [r3, #0]
   b8cfc:	9000      	str	r0, [sp, #0]
   b8cfe:	889b      	ldrh	r3, [r3, #4]
   b8d00:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d04:	2205      	movs	r2, #5
   b8d06:	4629      	mov	r1, r5
   b8d08:	4668      	mov	r0, sp
   b8d0a:	f00b fb6d 	bl	c43e8 <memcmp>
   b8d0e:	b920      	cbnz	r0, b8d1a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8d10:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8d14:	3001      	adds	r0, #1
}
   b8d16:	b003      	add	sp, #12
   b8d18:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d1a:	492f      	ldr	r1, [pc, #188]	; (b8dd8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8d1c:	4668      	mov	r0, sp
   b8d1e:	f00b fc01 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d22:	2205      	movs	r2, #5
   b8d24:	4629      	mov	r1, r5
   b8d26:	4668      	mov	r0, sp
   b8d28:	f00b fb5e 	bl	c43e8 <memcmp>
   b8d2c:	b910      	cbnz	r0, b8d34 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8d2e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8d32:	e7ef      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d34:	4929      	ldr	r1, [pc, #164]	; (b8ddc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8d36:	4668      	mov	r0, sp
   b8d38:	f00b fbf4 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d3c:	2205      	movs	r2, #5
   b8d3e:	4629      	mov	r1, r5
   b8d40:	4668      	mov	r0, sp
   b8d42:	f00b fb51 	bl	c43e8 <memcmp>
   b8d46:	b910      	cbnz	r0, b8d4e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8d48:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8d4c:	e7e2      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8d4e:	4924      	ldr	r1, [pc, #144]	; (b8de0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8d50:	4668      	mov	r0, sp
   b8d52:	f00b fbe7 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d56:	2205      	movs	r2, #5
   b8d58:	4629      	mov	r1, r5
   b8d5a:	4668      	mov	r0, sp
   b8d5c:	f00b fb44 	bl	c43e8 <memcmp>
   b8d60:	b910      	cbnz	r0, b8d68 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8d62:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8d66:	e7d5      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8d68:	491e      	ldr	r1, [pc, #120]	; (b8de4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b8d6a:	4668      	mov	r0, sp
   b8d6c:	f00b fbda 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d70:	2205      	movs	r2, #5
   b8d72:	4629      	mov	r1, r5
   b8d74:	4668      	mov	r0, sp
   b8d76:	f00b fb37 	bl	c43e8 <memcmp>
   b8d7a:	b910      	cbnz	r0, b8d82 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8d7c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8d80:	e7c8      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8d82:	4919      	ldr	r1, [pc, #100]	; (b8de8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8d84:	4668      	mov	r0, sp
   b8d86:	f00b fbcd 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d8a:	2205      	movs	r2, #5
   b8d8c:	4629      	mov	r1, r5
   b8d8e:	4668      	mov	r0, sp
   b8d90:	f00b fb2a 	bl	c43e8 <memcmp>
   b8d94:	b910      	cbnz	r0, b8d9c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b8d96:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8d9a:	e7bb      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8d9c:	4913      	ldr	r1, [pc, #76]	; (b8dec <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8d9e:	4668      	mov	r0, sp
   b8da0:	f00b fbc0 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da4:	2205      	movs	r2, #5
   b8da6:	4629      	mov	r1, r5
   b8da8:	4668      	mov	r0, sp
   b8daa:	f00b fb1d 	bl	c43e8 <memcmp>
   b8dae:	b910      	cbnz	r0, b8db6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8db0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8db4:	e7ae      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8db6:	490e      	ldr	r1, [pc, #56]	; (b8df0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b8db8:	4668      	mov	r0, sp
   b8dba:	f00b fbb3 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dbe:	2205      	movs	r2, #5
   b8dc0:	4629      	mov	r1, r5
   b8dc2:	4668      	mov	r0, sp
   b8dc4:	f00b fb10 	bl	c43e8 <memcmp>
   b8dc8:	b910      	cbnz	r0, b8dd0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b8dca:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8dce:	e7a1      	b.n	b8d14 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8dd0:	2000      	movs	r0, #0
   b8dd2:	e7a0      	b.n	b8d16 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8dd4:	000c6e24 	.word	0x000c6e24
   b8dd8:	000c6dfa 	.word	0x000c6dfa
   b8ddc:	000c6e00 	.word	0x000c6e00
   b8de0:	000c6e06 	.word	0x000c6e06
   b8de4:	000c6e0c 	.word	0x000c6e0c
   b8de8:	000c6e12 	.word	0x000c6e12
   b8dec:	000c6e18 	.word	0x000c6e18
   b8df0:	000c6e1e 	.word	0x000c6e1e

000b8df4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8df6:	4b38      	ldr	r3, [pc, #224]	; (b8ed8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b8df8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dfa:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8dfe:	6818      	ldr	r0, [r3, #0]
   b8e00:	9000      	str	r0, [sp, #0]
   b8e02:	889b      	ldrh	r3, [r3, #4]
   b8e04:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e08:	2205      	movs	r2, #5
   b8e0a:	4629      	mov	r1, r5
   b8e0c:	4668      	mov	r0, sp
   b8e0e:	f00b faeb 	bl	c43e8 <memcmp>
   b8e12:	b920      	cbnz	r0, b8e1e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8e14:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8e18:	3002      	adds	r0, #2
}
   b8e1a:	b003      	add	sp, #12
   b8e1c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e1e:	492f      	ldr	r1, [pc, #188]	; (b8edc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8e20:	4668      	mov	r0, sp
   b8e22:	f00b fb7f 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e26:	2205      	movs	r2, #5
   b8e28:	4629      	mov	r1, r5
   b8e2a:	4668      	mov	r0, sp
   b8e2c:	f00b fadc 	bl	c43e8 <memcmp>
   b8e30:	b910      	cbnz	r0, b8e38 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8e32:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8e36:	e7ef      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8e38:	4929      	ldr	r1, [pc, #164]	; (b8ee0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b8e3a:	4668      	mov	r0, sp
   b8e3c:	f00b fb72 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e40:	2205      	movs	r2, #5
   b8e42:	4629      	mov	r1, r5
   b8e44:	4668      	mov	r0, sp
   b8e46:	f00b facf 	bl	c43e8 <memcmp>
   b8e4a:	b910      	cbnz	r0, b8e52 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8e4c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8e50:	e7e2      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8e52:	4924      	ldr	r1, [pc, #144]	; (b8ee4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8e54:	4668      	mov	r0, sp
   b8e56:	f00b fb65 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e5a:	2205      	movs	r2, #5
   b8e5c:	4629      	mov	r1, r5
   b8e5e:	4668      	mov	r0, sp
   b8e60:	f00b fac2 	bl	c43e8 <memcmp>
   b8e64:	b910      	cbnz	r0, b8e6c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b8e66:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8e6a:	e7d5      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8e6c:	491e      	ldr	r1, [pc, #120]	; (b8ee8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b8e6e:	4668      	mov	r0, sp
   b8e70:	f00b fb58 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e74:	2205      	movs	r2, #5
   b8e76:	4629      	mov	r1, r5
   b8e78:	4668      	mov	r0, sp
   b8e7a:	f00b fab5 	bl	c43e8 <memcmp>
   b8e7e:	b910      	cbnz	r0, b8e86 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b8e80:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8e84:	e7c8      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8e86:	4919      	ldr	r1, [pc, #100]	; (b8eec <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b8e88:	4668      	mov	r0, sp
   b8e8a:	f00b fb4b 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e8e:	2205      	movs	r2, #5
   b8e90:	4629      	mov	r1, r5
   b8e92:	4668      	mov	r0, sp
   b8e94:	f00b faa8 	bl	c43e8 <memcmp>
   b8e98:	b910      	cbnz	r0, b8ea0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b8e9a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8e9e:	e7bb      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8ea0:	4913      	ldr	r1, [pc, #76]	; (b8ef0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b8ea2:	4668      	mov	r0, sp
   b8ea4:	f00b fb3e 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ea8:	2205      	movs	r2, #5
   b8eaa:	4629      	mov	r1, r5
   b8eac:	4668      	mov	r0, sp
   b8eae:	f00b fa9b 	bl	c43e8 <memcmp>
   b8eb2:	b910      	cbnz	r0, b8eba <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b8eb4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8eb8:	e7ae      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8eba:	490e      	ldr	r1, [pc, #56]	; (b8ef4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b8ebc:	4668      	mov	r0, sp
   b8ebe:	f00b fb31 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ec2:	2205      	movs	r2, #5
   b8ec4:	4629      	mov	r1, r5
   b8ec6:	4668      	mov	r0, sp
   b8ec8:	f00b fa8e 	bl	c43e8 <memcmp>
   b8ecc:	b910      	cbnz	r0, b8ed4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8ece:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8ed2:	e7a1      	b.n	b8e18 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b8ed4:	2000      	movs	r0, #0
   b8ed6:	e7a0      	b.n	b8e1a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b8ed8:	000c6e24 	.word	0x000c6e24
   b8edc:	000c6dfa 	.word	0x000c6dfa
   b8ee0:	000c6e00 	.word	0x000c6e00
   b8ee4:	000c6e06 	.word	0x000c6e06
   b8ee8:	000c6e0c 	.word	0x000c6e0c
   b8eec:	000c6e12 	.word	0x000c6e12
   b8ef0:	000c6e18 	.word	0x000c6e18
   b8ef4:	000c6e1e 	.word	0x000c6e1e

000b8ef8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8efa:	4b39      	ldr	r3, [pc, #228]	; (b8fe0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8efc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8efe:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f02:	6818      	ldr	r0, [r3, #0]
   b8f04:	9000      	str	r0, [sp, #0]
   b8f06:	889b      	ldrh	r3, [r3, #4]
   b8f08:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f0c:	2205      	movs	r2, #5
   b8f0e:	4629      	mov	r1, r5
   b8f10:	4668      	mov	r0, sp
   b8f12:	f00b fa69 	bl	c43e8 <memcmp>
   b8f16:	b920      	cbnz	r0, b8f22 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8f18:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8f1c:	3066      	adds	r0, #102	; 0x66
}
   b8f1e:	b003      	add	sp, #12
   b8f20:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f22:	4930      	ldr	r1, [pc, #192]	; (b8fe4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8f24:	4668      	mov	r0, sp
   b8f26:	f00b fafd 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f2a:	2205      	movs	r2, #5
   b8f2c:	4629      	mov	r1, r5
   b8f2e:	4668      	mov	r0, sp
   b8f30:	f00b fa5a 	bl	c43e8 <memcmp>
   b8f34:	b910      	cbnz	r0, b8f3c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8f36:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f3a:	e7ef      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f3c:	492a      	ldr	r1, [pc, #168]	; (b8fe8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8f3e:	4668      	mov	r0, sp
   b8f40:	f00b faf0 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f44:	2205      	movs	r2, #5
   b8f46:	4629      	mov	r1, r5
   b8f48:	4668      	mov	r0, sp
   b8f4a:	f00b fa4d 	bl	c43e8 <memcmp>
   b8f4e:	b910      	cbnz	r0, b8f56 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8f50:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f54:	e7e2      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f56:	4925      	ldr	r1, [pc, #148]	; (b8fec <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8f58:	4668      	mov	r0, sp
   b8f5a:	f00b fae3 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f5e:	2205      	movs	r2, #5
   b8f60:	4629      	mov	r1, r5
   b8f62:	4668      	mov	r0, sp
   b8f64:	f00b fa40 	bl	c43e8 <memcmp>
   b8f68:	b910      	cbnz	r0, b8f70 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8f6a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f6e:	e7d5      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f70:	491f      	ldr	r1, [pc, #124]	; (b8ff0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8f72:	4668      	mov	r0, sp
   b8f74:	f00b fad6 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f78:	2205      	movs	r2, #5
   b8f7a:	4629      	mov	r1, r5
   b8f7c:	4668      	mov	r0, sp
   b8f7e:	f00b fa33 	bl	c43e8 <memcmp>
   b8f82:	b910      	cbnz	r0, b8f8a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8f84:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f88:	e7c8      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8f8a:	491a      	ldr	r1, [pc, #104]	; (b8ff4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8f8c:	4668      	mov	r0, sp
   b8f8e:	f00b fac9 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f92:	2205      	movs	r2, #5
   b8f94:	4629      	mov	r1, r5
   b8f96:	4668      	mov	r0, sp
   b8f98:	f00b fa26 	bl	c43e8 <memcmp>
   b8f9c:	b910      	cbnz	r0, b8fa4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8f9e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8fa2:	e7bb      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8fa4:	4914      	ldr	r1, [pc, #80]	; (b8ff8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8fa6:	4668      	mov	r0, sp
   b8fa8:	f00b fabc 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fac:	2205      	movs	r2, #5
   b8fae:	4629      	mov	r1, r5
   b8fb0:	4668      	mov	r0, sp
   b8fb2:	f00b fa19 	bl	c43e8 <memcmp>
   b8fb6:	b918      	cbnz	r0, b8fc0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8fb8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8fbc:	3034      	adds	r0, #52	; 0x34
   b8fbe:	e7ae      	b.n	b8f1e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8fc0:	490e      	ldr	r1, [pc, #56]	; (b8ffc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8fc2:	4668      	mov	r0, sp
   b8fc4:	f00b faae 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fc8:	2205      	movs	r2, #5
   b8fca:	4629      	mov	r1, r5
   b8fcc:	4668      	mov	r0, sp
   b8fce:	f00b fa0b 	bl	c43e8 <memcmp>
   b8fd2:	b910      	cbnz	r0, b8fda <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8fd4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8fd8:	e7f0      	b.n	b8fbc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8fda:	2000      	movs	r0, #0
   b8fdc:	e79f      	b.n	b8f1e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8fde:	bf00      	nop
   b8fe0:	000c6e24 	.word	0x000c6e24
   b8fe4:	000c6dfa 	.word	0x000c6dfa
   b8fe8:	000c6e00 	.word	0x000c6e00
   b8fec:	000c6e06 	.word	0x000c6e06
   b8ff0:	000c6e0c 	.word	0x000c6e0c
   b8ff4:	000c6e12 	.word	0x000c6e12
   b8ff8:	000c6e18 	.word	0x000c6e18
   b8ffc:	000c6e1e 	.word	0x000c6e1e

000b9000 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b9000:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9002:	4b39      	ldr	r3, [pc, #228]	; (b90e8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b9004:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9006:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b900a:	6818      	ldr	r0, [r3, #0]
   b900c:	9000      	str	r0, [sp, #0]
   b900e:	889b      	ldrh	r3, [r3, #4]
   b9010:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9014:	2205      	movs	r2, #5
   b9016:	4629      	mov	r1, r5
   b9018:	4668      	mov	r0, sp
   b901a:	f00b f9e5 	bl	c43e8 <memcmp>
   b901e:	b920      	cbnz	r0, b902a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b9020:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9024:	3067      	adds	r0, #103	; 0x67
}
   b9026:	b003      	add	sp, #12
   b9028:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b902a:	4930      	ldr	r1, [pc, #192]	; (b90ec <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b902c:	4668      	mov	r0, sp
   b902e:	f00b fa79 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9032:	2205      	movs	r2, #5
   b9034:	4629      	mov	r1, r5
   b9036:	4668      	mov	r0, sp
   b9038:	f00b f9d6 	bl	c43e8 <memcmp>
   b903c:	b910      	cbnz	r0, b9044 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b903e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9042:	e7ef      	b.n	b9024 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9044:	492a      	ldr	r1, [pc, #168]	; (b90f0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b9046:	4668      	mov	r0, sp
   b9048:	f00b fa6c 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b904c:	2205      	movs	r2, #5
   b904e:	4629      	mov	r1, r5
   b9050:	4668      	mov	r0, sp
   b9052:	f00b f9c9 	bl	c43e8 <memcmp>
   b9056:	b910      	cbnz	r0, b905e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b9058:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b905c:	e7e2      	b.n	b9024 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b905e:	4925      	ldr	r1, [pc, #148]	; (b90f4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b9060:	4668      	mov	r0, sp
   b9062:	f00b fa5f 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9066:	2205      	movs	r2, #5
   b9068:	4629      	mov	r1, r5
   b906a:	4668      	mov	r0, sp
   b906c:	f00b f9bc 	bl	c43e8 <memcmp>
   b9070:	b910      	cbnz	r0, b9078 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b9072:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9076:	e7d5      	b.n	b9024 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9078:	491f      	ldr	r1, [pc, #124]	; (b90f8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b907a:	4668      	mov	r0, sp
   b907c:	f00b fa52 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9080:	2205      	movs	r2, #5
   b9082:	4629      	mov	r1, r5
   b9084:	4668      	mov	r0, sp
   b9086:	f00b f9af 	bl	c43e8 <memcmp>
   b908a:	b910      	cbnz	r0, b9092 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b908c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9090:	e7c8      	b.n	b9024 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9092:	491a      	ldr	r1, [pc, #104]	; (b90fc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b9094:	4668      	mov	r0, sp
   b9096:	f00b fa45 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b909a:	2205      	movs	r2, #5
   b909c:	4629      	mov	r1, r5
   b909e:	4668      	mov	r0, sp
   b90a0:	f00b f9a2 	bl	c43e8 <memcmp>
   b90a4:	b910      	cbnz	r0, b90ac <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b90a6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b90aa:	e7bb      	b.n	b9024 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b90ac:	4914      	ldr	r1, [pc, #80]	; (b9100 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b90ae:	4668      	mov	r0, sp
   b90b0:	f00b fa38 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90b4:	2205      	movs	r2, #5
   b90b6:	4629      	mov	r1, r5
   b90b8:	4668      	mov	r0, sp
   b90ba:	f00b f995 	bl	c43e8 <memcmp>
   b90be:	b918      	cbnz	r0, b90c8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b90c0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b90c4:	3035      	adds	r0, #53	; 0x35
   b90c6:	e7ae      	b.n	b9026 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b90c8:	490e      	ldr	r1, [pc, #56]	; (b9104 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b90ca:	4668      	mov	r0, sp
   b90cc:	f00b fa2a 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90d0:	2205      	movs	r2, #5
   b90d2:	4629      	mov	r1, r5
   b90d4:	4668      	mov	r0, sp
   b90d6:	f00b f987 	bl	c43e8 <memcmp>
   b90da:	b910      	cbnz	r0, b90e2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b90dc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b90e0:	e7f0      	b.n	b90c4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b90e2:	2000      	movs	r0, #0
   b90e4:	e79f      	b.n	b9026 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b90e6:	bf00      	nop
   b90e8:	000c6e24 	.word	0x000c6e24
   b90ec:	000c6dfa 	.word	0x000c6dfa
   b90f0:	000c6e00 	.word	0x000c6e00
   b90f4:	000c6e06 	.word	0x000c6e06
   b90f8:	000c6e0c 	.word	0x000c6e0c
   b90fc:	000c6e12 	.word	0x000c6e12
   b9100:	000c6e18 	.word	0x000c6e18
   b9104:	000c6e1e 	.word	0x000c6e1e

000b9108 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b9108:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b910a:	4b39      	ldr	r3, [pc, #228]	; (b91f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b910c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b910e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9112:	6818      	ldr	r0, [r3, #0]
   b9114:	9000      	str	r0, [sp, #0]
   b9116:	889b      	ldrh	r3, [r3, #4]
   b9118:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b911c:	2205      	movs	r2, #5
   b911e:	4629      	mov	r1, r5
   b9120:	4668      	mov	r0, sp
   b9122:	f00b f961 	bl	c43e8 <memcmp>
   b9126:	b928      	cbnz	r0, b9134 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b9128:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b912c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b9130:	b003      	add	sp, #12
   b9132:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9134:	492f      	ldr	r1, [pc, #188]	; (b91f4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b9136:	4668      	mov	r0, sp
   b9138:	f00b f9f4 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b913c:	2205      	movs	r2, #5
   b913e:	4629      	mov	r1, r5
   b9140:	4668      	mov	r0, sp
   b9142:	f00b f951 	bl	c43e8 <memcmp>
   b9146:	b910      	cbnz	r0, b914e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b9148:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b914c:	e7ee      	b.n	b912c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b914e:	492a      	ldr	r1, [pc, #168]	; (b91f8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9150:	4668      	mov	r0, sp
   b9152:	f00b f9e7 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9156:	2205      	movs	r2, #5
   b9158:	4629      	mov	r1, r5
   b915a:	4668      	mov	r0, sp
   b915c:	f00b f944 	bl	c43e8 <memcmp>
   b9160:	b910      	cbnz	r0, b9168 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b9162:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9166:	e7e1      	b.n	b912c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9168:	4924      	ldr	r1, [pc, #144]	; (b91fc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b916a:	4668      	mov	r0, sp
   b916c:	f00b f9da 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9170:	2205      	movs	r2, #5
   b9172:	4629      	mov	r1, r5
   b9174:	4668      	mov	r0, sp
   b9176:	f00b f937 	bl	c43e8 <memcmp>
   b917a:	b910      	cbnz	r0, b9182 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b917c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9180:	e7d4      	b.n	b912c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9182:	491f      	ldr	r1, [pc, #124]	; (b9200 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9184:	4668      	mov	r0, sp
   b9186:	f00b f9cd 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b918a:	2205      	movs	r2, #5
   b918c:	4629      	mov	r1, r5
   b918e:	4668      	mov	r0, sp
   b9190:	f00b f92a 	bl	c43e8 <memcmp>
   b9194:	b910      	cbnz	r0, b919c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b9196:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b919a:	e7c7      	b.n	b912c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b919c:	4919      	ldr	r1, [pc, #100]	; (b9204 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b919e:	4668      	mov	r0, sp
   b91a0:	f00b f9c0 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91a4:	2205      	movs	r2, #5
   b91a6:	4629      	mov	r1, r5
   b91a8:	4668      	mov	r0, sp
   b91aa:	f00b f91d 	bl	c43e8 <memcmp>
   b91ae:	b910      	cbnz	r0, b91b6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b91b0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b91b4:	e7ba      	b.n	b912c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b91b6:	4914      	ldr	r1, [pc, #80]	; (b9208 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b91b8:	4668      	mov	r0, sp
   b91ba:	f00b f9b3 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91be:	2205      	movs	r2, #5
   b91c0:	4629      	mov	r1, r5
   b91c2:	4668      	mov	r0, sp
   b91c4:	f00b f910 	bl	c43e8 <memcmp>
   b91c8:	b918      	cbnz	r0, b91d2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b91ca:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b91ce:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b91d0:	e7ae      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b91d2:	490e      	ldr	r1, [pc, #56]	; (b920c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b91d4:	4668      	mov	r0, sp
   b91d6:	f00b f9a5 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91da:	2205      	movs	r2, #5
   b91dc:	4629      	mov	r1, r5
   b91de:	4668      	mov	r0, sp
   b91e0:	f00b f902 	bl	c43e8 <memcmp>
   b91e4:	b910      	cbnz	r0, b91ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b91e6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b91ea:	e7f0      	b.n	b91ce <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b91ec:	2000      	movs	r0, #0
   b91ee:	e79f      	b.n	b9130 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b91f0:	000c6e24 	.word	0x000c6e24
   b91f4:	000c6dfa 	.word	0x000c6dfa
   b91f8:	000c6e00 	.word	0x000c6e00
   b91fc:	000c6e06 	.word	0x000c6e06
   b9200:	000c6e0c 	.word	0x000c6e0c
   b9204:	000c6e12 	.word	0x000c6e12
   b9208:	000c6e18 	.word	0x000c6e18
   b920c:	000c6e1e 	.word	0x000c6e1e

000b9210 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b9210:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9212:	4b3a      	ldr	r3, [pc, #232]	; (b92fc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b9214:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9216:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b921a:	6818      	ldr	r0, [r3, #0]
   b921c:	9000      	str	r0, [sp, #0]
   b921e:	889b      	ldrh	r3, [r3, #4]
   b9220:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9224:	2205      	movs	r2, #5
   b9226:	4629      	mov	r1, r5
   b9228:	4668      	mov	r0, sp
   b922a:	f00b f8dd 	bl	c43e8 <memcmp>
   b922e:	b930      	cbnz	r0, b923e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b9230:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b9234:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9238:	3001      	adds	r0, #1
}
   b923a:	b003      	add	sp, #12
   b923c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b923e:	4930      	ldr	r1, [pc, #192]	; (b9300 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b9240:	4668      	mov	r0, sp
   b9242:	f00b f96f 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9246:	2205      	movs	r2, #5
   b9248:	4629      	mov	r1, r5
   b924a:	4668      	mov	r0, sp
   b924c:	f00b f8cc 	bl	c43e8 <memcmp>
   b9250:	b910      	cbnz	r0, b9258 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9252:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9256:	e7ed      	b.n	b9234 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9258:	492a      	ldr	r1, [pc, #168]	; (b9304 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b925a:	4668      	mov	r0, sp
   b925c:	f00b f962 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9260:	2205      	movs	r2, #5
   b9262:	4629      	mov	r1, r5
   b9264:	4668      	mov	r0, sp
   b9266:	f00b f8bf 	bl	c43e8 <memcmp>
   b926a:	b910      	cbnz	r0, b9272 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b926c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9270:	e7e0      	b.n	b9234 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9272:	4925      	ldr	r1, [pc, #148]	; (b9308 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b9274:	4668      	mov	r0, sp
   b9276:	f00b f955 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b927a:	2205      	movs	r2, #5
   b927c:	4629      	mov	r1, r5
   b927e:	4668      	mov	r0, sp
   b9280:	f00b f8b2 	bl	c43e8 <memcmp>
   b9284:	b910      	cbnz	r0, b928c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b9286:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b928a:	e7d3      	b.n	b9234 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b928c:	491f      	ldr	r1, [pc, #124]	; (b930c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b928e:	4668      	mov	r0, sp
   b9290:	f00b f948 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9294:	2205      	movs	r2, #5
   b9296:	4629      	mov	r1, r5
   b9298:	4668      	mov	r0, sp
   b929a:	f00b f8a5 	bl	c43e8 <memcmp>
   b929e:	b910      	cbnz	r0, b92a6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b92a0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b92a4:	e7c6      	b.n	b9234 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b92a6:	491a      	ldr	r1, [pc, #104]	; (b9310 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b92a8:	4668      	mov	r0, sp
   b92aa:	f00b f93b 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92ae:	2205      	movs	r2, #5
   b92b0:	4629      	mov	r1, r5
   b92b2:	4668      	mov	r0, sp
   b92b4:	f00b f898 	bl	c43e8 <memcmp>
   b92b8:	b910      	cbnz	r0, b92c0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b92ba:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b92be:	e7b9      	b.n	b9234 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b92c0:	4914      	ldr	r1, [pc, #80]	; (b9314 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b92c2:	4668      	mov	r0, sp
   b92c4:	f00b f92e 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92c8:	2205      	movs	r2, #5
   b92ca:	4629      	mov	r1, r5
   b92cc:	4668      	mov	r0, sp
   b92ce:	f00b f88b 	bl	c43e8 <memcmp>
   b92d2:	b918      	cbnz	r0, b92dc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b92d4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b92d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b92da:	e7ad      	b.n	b9238 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b92dc:	490e      	ldr	r1, [pc, #56]	; (b9318 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b92de:	4668      	mov	r0, sp
   b92e0:	f00b f920 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92e4:	2205      	movs	r2, #5
   b92e6:	4629      	mov	r1, r5
   b92e8:	4668      	mov	r0, sp
   b92ea:	f00b f87d 	bl	c43e8 <memcmp>
   b92ee:	b910      	cbnz	r0, b92f6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b92f0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b92f4:	e7f0      	b.n	b92d8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b92f6:	2000      	movs	r0, #0
   b92f8:	e79f      	b.n	b923a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b92fa:	bf00      	nop
   b92fc:	000c6e24 	.word	0x000c6e24
   b9300:	000c6dfa 	.word	0x000c6dfa
   b9304:	000c6e00 	.word	0x000c6e00
   b9308:	000c6e06 	.word	0x000c6e06
   b930c:	000c6e0c 	.word	0x000c6e0c
   b9310:	000c6e12 	.word	0x000c6e12
   b9314:	000c6e18 	.word	0x000c6e18
   b9318:	000c6e1e 	.word	0x000c6e1e

000b931c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b931c:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b931e:	4b30      	ldr	r3, [pc, #192]	; (b93e0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b9320:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9322:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9326:	6818      	ldr	r0, [r3, #0]
   b9328:	9000      	str	r0, [sp, #0]
   b932a:	889b      	ldrh	r3, [r3, #4]
   b932c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9330:	2205      	movs	r2, #5
   b9332:	4621      	mov	r1, r4
   b9334:	4668      	mov	r0, sp
   b9336:	f00b f857 	bl	c43e8 <memcmp>
   b933a:	b910      	cbnz	r0, b9342 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b933c:	2064      	movs	r0, #100	; 0x64
}
   b933e:	b002      	add	sp, #8
   b9340:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b9342:	4928      	ldr	r1, [pc, #160]	; (b93e4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b9344:	4668      	mov	r0, sp
   b9346:	f00b f8ed 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b934a:	2205      	movs	r2, #5
   b934c:	4621      	mov	r1, r4
   b934e:	4668      	mov	r0, sp
   b9350:	f00b f84a 	bl	c43e8 <memcmp>
   b9354:	2800      	cmp	r0, #0
   b9356:	d0f1      	beq.n	b933c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b9358:	4923      	ldr	r1, [pc, #140]	; (b93e8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b935a:	4668      	mov	r0, sp
   b935c:	f00b f8e2 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9360:	2205      	movs	r2, #5
   b9362:	4621      	mov	r1, r4
   b9364:	4668      	mov	r0, sp
   b9366:	f00b f83f 	bl	c43e8 <memcmp>
   b936a:	2800      	cmp	r0, #0
   b936c:	d0e6      	beq.n	b933c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b936e:	491f      	ldr	r1, [pc, #124]	; (b93ec <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b9370:	4668      	mov	r0, sp
   b9372:	f00b f8d7 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9376:	2205      	movs	r2, #5
   b9378:	4621      	mov	r1, r4
   b937a:	4668      	mov	r0, sp
   b937c:	f00b f834 	bl	c43e8 <memcmp>
   b9380:	2800      	cmp	r0, #0
   b9382:	d0db      	beq.n	b933c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9384:	491a      	ldr	r1, [pc, #104]	; (b93f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b9386:	4668      	mov	r0, sp
   b9388:	f00b f8cc 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b938c:	2205      	movs	r2, #5
   b938e:	4621      	mov	r1, r4
   b9390:	4668      	mov	r0, sp
   b9392:	f00b f829 	bl	c43e8 <memcmp>
   b9396:	2800      	cmp	r0, #0
   b9398:	d0d0      	beq.n	b933c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b939a:	4916      	ldr	r1, [pc, #88]	; (b93f4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b939c:	4668      	mov	r0, sp
   b939e:	f00b f8c1 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93a2:	2205      	movs	r2, #5
   b93a4:	4621      	mov	r1, r4
   b93a6:	4668      	mov	r0, sp
   b93a8:	f00b f81e 	bl	c43e8 <memcmp>
   b93ac:	2800      	cmp	r0, #0
   b93ae:	d0c5      	beq.n	b933c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b93b0:	4911      	ldr	r1, [pc, #68]	; (b93f8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b93b2:	4668      	mov	r0, sp
   b93b4:	f00b f8b6 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93b8:	2205      	movs	r2, #5
   b93ba:	4621      	mov	r1, r4
   b93bc:	4668      	mov	r0, sp
   b93be:	f00b f813 	bl	c43e8 <memcmp>
   b93c2:	b148      	cbz	r0, b93d8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b93c4:	490d      	ldr	r1, [pc, #52]	; (b93fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b93c6:	4668      	mov	r0, sp
   b93c8:	f00b f8ac 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93cc:	2205      	movs	r2, #5
   b93ce:	4621      	mov	r1, r4
   b93d0:	4668      	mov	r0, sp
   b93d2:	f00b f809 	bl	c43e8 <memcmp>
   b93d6:	b908      	cbnz	r0, b93dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b93d8:	2032      	movs	r0, #50	; 0x32
   b93da:	e7b0      	b.n	b933e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b93dc:	2000      	movs	r0, #0
   b93de:	e7ae      	b.n	b933e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b93e0:	000c6e24 	.word	0x000c6e24
   b93e4:	000c6dfa 	.word	0x000c6dfa
   b93e8:	000c6e00 	.word	0x000c6e00
   b93ec:	000c6e06 	.word	0x000c6e06
   b93f0:	000c6e0c 	.word	0x000c6e0c
   b93f4:	000c6e12 	.word	0x000c6e12
   b93f8:	000c6e18 	.word	0x000c6e18
   b93fc:	000c6e1e 	.word	0x000c6e1e

000b9400 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b9400:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9402:	4b38      	ldr	r3, [pc, #224]	; (b94e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9404:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9406:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b940a:	6818      	ldr	r0, [r3, #0]
   b940c:	9000      	str	r0, [sp, #0]
   b940e:	889b      	ldrh	r3, [r3, #4]
   b9410:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9414:	2205      	movs	r2, #5
   b9416:	4629      	mov	r1, r5
   b9418:	4668      	mov	r0, sp
   b941a:	f00a ffe5 	bl	c43e8 <memcmp>
   b941e:	b918      	cbnz	r0, b9428 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b9420:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b9424:	b003      	add	sp, #12
   b9426:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9428:	492f      	ldr	r1, [pc, #188]	; (b94e8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b942a:	4668      	mov	r0, sp
   b942c:	f00b f87a 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9430:	2205      	movs	r2, #5
   b9432:	4629      	mov	r1, r5
   b9434:	4668      	mov	r0, sp
   b9436:	f00a ffd7 	bl	c43e8 <memcmp>
   b943a:	b910      	cbnz	r0, b9442 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b943c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9440:	e7f0      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9442:	492a      	ldr	r1, [pc, #168]	; (b94ec <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b9444:	4668      	mov	r0, sp
   b9446:	f00b f86d 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b944a:	2205      	movs	r2, #5
   b944c:	4629      	mov	r1, r5
   b944e:	4668      	mov	r0, sp
   b9450:	f00a ffca 	bl	c43e8 <memcmp>
   b9454:	b910      	cbnz	r0, b945c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b9456:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b945a:	e7e3      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b945c:	4924      	ldr	r1, [pc, #144]	; (b94f0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b945e:	4668      	mov	r0, sp
   b9460:	f00b f860 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9464:	2205      	movs	r2, #5
   b9466:	4629      	mov	r1, r5
   b9468:	4668      	mov	r0, sp
   b946a:	f00a ffbd 	bl	c43e8 <memcmp>
   b946e:	b910      	cbnz	r0, b9476 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9470:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9474:	e7d6      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9476:	491f      	ldr	r1, [pc, #124]	; (b94f4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b9478:	4668      	mov	r0, sp
   b947a:	f00b f853 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b947e:	2205      	movs	r2, #5
   b9480:	4629      	mov	r1, r5
   b9482:	4668      	mov	r0, sp
   b9484:	f00a ffb0 	bl	c43e8 <memcmp>
   b9488:	b910      	cbnz	r0, b9490 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b948a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b948e:	e7c9      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9490:	4919      	ldr	r1, [pc, #100]	; (b94f8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b9492:	4668      	mov	r0, sp
   b9494:	f00b f846 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9498:	2205      	movs	r2, #5
   b949a:	4629      	mov	r1, r5
   b949c:	4668      	mov	r0, sp
   b949e:	f00a ffa3 	bl	c43e8 <memcmp>
   b94a2:	b910      	cbnz	r0, b94aa <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b94a4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b94a8:	e7bc      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b94aa:	4914      	ldr	r1, [pc, #80]	; (b94fc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b94ac:	4668      	mov	r0, sp
   b94ae:	f00b f839 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94b2:	2205      	movs	r2, #5
   b94b4:	4629      	mov	r1, r5
   b94b6:	4668      	mov	r0, sp
   b94b8:	f00a ff96 	bl	c43e8 <memcmp>
   b94bc:	b910      	cbnz	r0, b94c4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b94be:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b94c2:	e7af      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b94c4:	490e      	ldr	r1, [pc, #56]	; (b9500 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b94c6:	4668      	mov	r0, sp
   b94c8:	f00b f82c 	bl	c4524 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94cc:	2205      	movs	r2, #5
   b94ce:	4629      	mov	r1, r5
   b94d0:	4668      	mov	r0, sp
   b94d2:	f00a ff89 	bl	c43e8 <memcmp>
   b94d6:	b910      	cbnz	r0, b94de <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b94d8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b94dc:	e7a2      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b94de:	2000      	movs	r0, #0
   b94e0:	e7a0      	b.n	b9424 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b94e2:	bf00      	nop
   b94e4:	000c6e24 	.word	0x000c6e24
   b94e8:	000c6dfa 	.word	0x000c6dfa
   b94ec:	000c6e00 	.word	0x000c6e00
   b94f0:	000c6e06 	.word	0x000c6e06
   b94f4:	000c6e0c 	.word	0x000c6e0c
   b94f8:	000c6e12 	.word	0x000c6e12
   b94fc:	000c6e18 	.word	0x000c6e18
   b9500:	000c6e1e 	.word	0x000c6e1e

000b9504 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9504:	4770      	bx	lr
	...

000b9508 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9508:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b950a:	8813      	ldrh	r3, [r2, #0]
   b950c:	4d0c      	ldr	r5, [pc, #48]	; (b9540 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b950e:	2b01      	cmp	r3, #1
{
   b9510:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9512:	d10e      	bne.n	b9532 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9514:	020a      	lsls	r2, r1, #8
   b9516:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b951a:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b951c:	3301      	adds	r3, #1
   b951e:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9520:	f7ff fff0 	bl	b9504 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9524:	8820      	ldrh	r0, [r4, #0]
   b9526:	882b      	ldrh	r3, [r5, #0]
}
   b9528:	4298      	cmp	r0, r3
   b952a:	bf14      	ite	ne
   b952c:	2003      	movne	r0, #3
   b952e:	2000      	moveq	r0, #0
   b9530:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9532:	2b02      	cmp	r3, #2
   b9534:	d1f2      	bne.n	b951c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b9536:	882a      	ldrh	r2, [r5, #0]
   b9538:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b953a:	3206      	adds	r2, #6
   b953c:	e7ed      	b.n	b951a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b953e:	bf00      	nop
   b9540:	2003e61e 	.word	0x2003e61e

000b9544 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9544:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b9546:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b9548:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b954a:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b954c:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b954e:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9552:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b9556:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b955a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b955e:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9562:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9564:	4413      	add	r3, r2
   b9566:	734b      	strb	r3, [r1, #13]
   b9568:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b956a:	b293      	uxth	r3, r2
   b956c:	429c      	cmp	r4, r3
   b956e:	d90a      	bls.n	b9586 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9570:	688b      	ldr	r3, [r1, #8]
   b9572:	7b08      	ldrb	r0, [r1, #12]
   b9574:	5c9b      	ldrb	r3, [r3, r2]
   b9576:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9578:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b957a:	b2db      	uxtb	r3, r3
   b957c:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b957e:	4403      	add	r3, r0
   b9580:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9582:	3201      	adds	r2, #1
   b9584:	e7f1      	b.n	b956a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9586:	bd30      	pop	{r4, r5, pc}

000b9588 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9588:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b958c:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b958e:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9592:	b2c9      	uxtb	r1, r1
   b9594:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9598:	4419      	add	r1, r3
   b959a:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b959e:	4770      	bx	lr

000b95a0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b95a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b95a4:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b95a8:	f10b 0b08 	add.w	fp, fp, #8
   b95ac:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b95b0:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b95b4:	f1ab 0302 	sub.w	r3, fp, #2
{
   b95b8:	4604      	mov	r4, r0
   b95ba:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b95bc:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b95be:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b95c0:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b95c2:	f1ba 0f00 	cmp.w	sl, #0
   b95c6:	f000 80a6 	beq.w	b9716 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b95ca:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b95cc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b95d0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b95d4:	4556      	cmp	r6, sl
   b95d6:	bf28      	it	cs
   b95d8:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b95da:	ebaa 0a06 	sub.w	sl, sl, r6
   b95de:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b95e2:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b95e6:	bf02      	ittt	eq
   b95e8:	f106 36ff 	addeq.w	r6, r6, #4294967295
   b95ec:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b95ee:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b95f2:	f008 f973 	bl	c18dc <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b95f6:	f1b9 0f00 	cmp.w	r9, #0
   b95fa:	d15c      	bne.n	b96b6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b95fc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9600:	6803      	ldr	r3, [r0, #0]
   b9602:	21b5      	movs	r1, #181	; 0xb5
   b9604:	689b      	ldr	r3, [r3, #8]
   b9606:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9608:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b960c:	6803      	ldr	r3, [r0, #0]
   b960e:	2162      	movs	r1, #98	; 0x62
   b9610:	689b      	ldr	r3, [r3, #8]
   b9612:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9614:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9618:	7829      	ldrb	r1, [r5, #0]
   b961a:	6803      	ldr	r3, [r0, #0]
   b961c:	689b      	ldr	r3, [r3, #8]
   b961e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9620:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9624:	7869      	ldrb	r1, [r5, #1]
   b9626:	6803      	ldr	r3, [r0, #0]
   b9628:	689b      	ldr	r3, [r3, #8]
   b962a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b962c:	78a9      	ldrb	r1, [r5, #2]
   b962e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9632:	f7fe fdc1 	bl	b81b8 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b9636:	8869      	ldrh	r1, [r5, #2]
   b9638:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b963c:	0a09      	lsrs	r1, r1, #8
   b963e:	f7fe fdbb 	bl	b81b8 <_ZN7TwoWire5writeEi.isra.0>
   b9642:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9644:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9646:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b964a:	fa1f f983 	uxth.w	r9, r3
   b964e:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9652:	454a      	cmp	r2, r9
   b9654:	b2bf      	uxth	r7, r7
   b9656:	d90d      	bls.n	b9674 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b9658:	42be      	cmp	r6, r7
   b965a:	d90b      	bls.n	b9674 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b965c:	68aa      	ldr	r2, [r5, #8]
   b965e:	6801      	ldr	r1, [r0, #0]
   b9660:	9301      	str	r3, [sp, #4]
   b9662:	4442      	add	r2, r8
   b9664:	688f      	ldr	r7, [r1, #8]
   b9666:	5cd1      	ldrb	r1, [r2, r3]
   b9668:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b966a:	9b01      	ldr	r3, [sp, #4]
   b966c:	3301      	adds	r3, #1
   b966e:	e7e9      	b.n	b9644 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9670:	46b9      	mov	r9, r7
   b9672:	e7a6      	b.n	b95c2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9674:	3e02      	subs	r6, #2
      startSpot += x;
   b9676:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9678:	42b7      	cmp	r7, r6
      startSpot += x;
   b967a:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b967e:	d10c      	bne.n	b969a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9680:	6803      	ldr	r3, [r0, #0]
   b9682:	7b29      	ldrb	r1, [r5, #12]
   b9684:	689b      	ldr	r3, [r3, #8]
   b9686:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9688:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b968c:	7b69      	ldrb	r1, [r5, #13]
   b968e:	6803      	ldr	r3, [r0, #0]
   b9690:	689b      	ldr	r3, [r3, #8]
   b9692:	4798      	blx	r3
        bytesSent += 2;
   b9694:	f109 0708 	add.w	r7, r9, #8
   b9698:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b969a:	455f      	cmp	r7, fp
   b969c:	d2e8      	bcs.n	b9670 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b969e:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b96a2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b96a6:	f008 f920 	bl	c18ea <_ZN7TwoWire15endTransmissionEh>
   b96aa:	2800      	cmp	r0, #0
   b96ac:	d0e0      	beq.n	b9670 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b96ae:	200c      	movs	r0, #12
}
   b96b0:	b003      	add	sp, #12
   b96b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96b6:	2200      	movs	r2, #0
   b96b8:	b291      	uxth	r1, r2
   b96ba:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b96be:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b96c0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b96c4:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b96c6:	d910      	bls.n	b96ea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b96c8:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b96cc:	eb08 0c02 	add.w	ip, r8, r2
   b96d0:	1c53      	adds	r3, r2, #1
   b96d2:	45f4      	cmp	ip, lr
   b96d4:	9301      	str	r3, [sp, #4]
   b96d6:	da08      	bge.n	b96ea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b96d8:	68a9      	ldr	r1, [r5, #8]
   b96da:	6802      	ldr	r2, [r0, #0]
   b96dc:	f811 100c 	ldrb.w	r1, [r1, ip]
   b96e0:	6892      	ldr	r2, [r2, #8]
   b96e2:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b96e4:	9b01      	ldr	r3, [sp, #4]
   b96e6:	461a      	mov	r2, r3
   b96e8:	e7e6      	b.n	b96b8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b96ea:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b96ec:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b96ee:	429f      	cmp	r7, r3
      startSpot += x;
   b96f0:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b96f4:	d1d1      	bne.n	b969a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b96f6:	3e02      	subs	r6, #2
   b96f8:	42b2      	cmp	r2, r6
   b96fa:	d1ce      	bne.n	b969a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b96fc:	6803      	ldr	r3, [r0, #0]
   b96fe:	7b29      	ldrb	r1, [r5, #12]
   b9700:	689b      	ldr	r3, [r3, #8]
   b9702:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9704:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9708:	7b69      	ldrb	r1, [r5, #13]
   b970a:	6803      	ldr	r3, [r0, #0]
   b970c:	689b      	ldr	r3, [r3, #8]
   b970e:	4798      	blx	r3
        bytesSent += 2;
   b9710:	fa1f f78b 	uxth.w	r7, fp
   b9714:	e7c1      	b.n	b969a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9716:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b971a:	f008 f8ea 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
   b971e:	2800      	cmp	r0, #0
   b9720:	d0c6      	beq.n	b96b0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9722:	e7c4      	b.n	b96ae <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9724 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9724:	b570      	push	{r4, r5, r6, lr}
   b9726:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9728:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b972c:	6803      	ldr	r3, [r0, #0]
{
   b972e:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9730:	689b      	ldr	r3, [r3, #8]
   b9732:	21b5      	movs	r1, #181	; 0xb5
   b9734:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9736:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b973a:	6803      	ldr	r3, [r0, #0]
   b973c:	2162      	movs	r1, #98	; 0x62
   b973e:	689b      	ldr	r3, [r3, #8]
   b9740:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9742:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9746:	7821      	ldrb	r1, [r4, #0]
   b9748:	6803      	ldr	r3, [r0, #0]
   b974a:	689b      	ldr	r3, [r3, #8]
   b974c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b974e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9752:	7861      	ldrb	r1, [r4, #1]
   b9754:	6803      	ldr	r3, [r0, #0]
   b9756:	689b      	ldr	r3, [r3, #8]
   b9758:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b975a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b975e:	78a1      	ldrb	r1, [r4, #2]
   b9760:	6803      	ldr	r3, [r0, #0]
   b9762:	689b      	ldr	r3, [r3, #8]
   b9764:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9766:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b976a:	8861      	ldrh	r1, [r4, #2]
   b976c:	6803      	ldr	r3, [r0, #0]
   b976e:	0a09      	lsrs	r1, r1, #8
   b9770:	689b      	ldr	r3, [r3, #8]
   b9772:	4798      	blx	r3
   b9774:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9776:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b977a:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b977c:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b977e:	b2b2      	uxth	r2, r6
   b9780:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9782:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9784:	d904      	bls.n	b9790 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9786:	68a1      	ldr	r1, [r4, #8]
   b9788:	5c89      	ldrb	r1, [r1, r2]
   b978a:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b978c:	3601      	adds	r6, #1
   b978e:	e7f2      	b.n	b9776 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9790:	7b21      	ldrb	r1, [r4, #12]
   b9792:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9794:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9798:	7b61      	ldrb	r1, [r4, #13]
   b979a:	6803      	ldr	r3, [r0, #0]
}
   b979c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b97a0:	689b      	ldr	r3, [r3, #8]
   b97a2:	4718      	bx	r3

000b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b97a4:	b510      	push	{r4, lr}
   b97a6:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b97a8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b97ac:	f004 fe9a 	bl	be4e4 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b97b0:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b97b4:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b97b8:	429a      	cmp	r2, r3
   b97ba:	d90b      	bls.n	b97d4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b97bc:	28ff      	cmp	r0, #255	; 0xff
   b97be:	d101      	bne.n	b97c4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b97c0:	7822      	ldrb	r2, [r4, #0]
   b97c2:	b13a      	cbz	r2, b97d4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b97c4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b97c8:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b97ca:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b97ce:	3301      	adds	r3, #1
   b97d0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b97d4:	bd10      	pop	{r4, pc}
	...

000b97d8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b97d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b97dc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b97e0:	4604      	mov	r4, r0
   b97e2:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b97e4:	b97b      	cbnz	r3, b9806 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b97e6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b97ea:	b923      	cbnz	r3, b97f6 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b97ec:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b97f0:	2b00      	cmp	r3, #0
   b97f2:	f000 80ca 	beq.w	b998a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b97f6:	4966      	ldr	r1, [pc, #408]	; (b9990 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b97f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b97fc:	b004      	add	sp, #16
   b97fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9802:	f006 b9d8 	b.w	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9806:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b980a:	4a62      	ldr	r2, [pc, #392]	; (b9994 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b980c:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b980e:	2600      	movs	r6, #0
   b9810:	2301      	movs	r3, #1
   b9812:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9816:	4669      	mov	r1, sp
   b9818:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b981c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9820:	9200      	str	r2, [sp, #0]
   b9822:	f88d 6004 	strb.w	r6, [sp, #4]
   b9826:	f004 fdbd 	bl	be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b982a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b982e:	4631      	mov	r1, r6
   b9830:	f008 fb3b 	bl	c1eaa <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9834:	21b5      	movs	r1, #181	; 0xb5
   b9836:	4620      	mov	r0, r4
   b9838:	f7ff ffb4 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b983c:	2162      	movs	r1, #98	; 0x62
   b983e:	4620      	mov	r0, r4
   b9840:	f7ff ffb0 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9844:	7829      	ldrb	r1, [r5, #0]
   b9846:	4620      	mov	r0, r4
   b9848:	f7ff ffac 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b984c:	7869      	ldrb	r1, [r5, #1]
   b984e:	4620      	mov	r0, r4
   b9850:	f7ff ffa8 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9854:	78a9      	ldrb	r1, [r5, #2]
   b9856:	4620      	mov	r0, r4
   b9858:	f7ff ffa4 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b985c:	8869      	ldrh	r1, [r5, #2]
   b985e:	4620      	mov	r0, r4
   b9860:	0a09      	lsrs	r1, r1, #8
   b9862:	f7ff ff9f 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9866:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b986a:	2b00      	cmp	r3, #0
   b986c:	d042      	beq.n	b98f4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b986e:	494a      	ldr	r1, [pc, #296]	; (b9998 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9870:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9874:	f006 f99f 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9878:	2210      	movs	r2, #16
   b987a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b987e:	21b5      	movs	r1, #181	; 0xb5
   b9880:	f7fe fc8a 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9884:	4945      	ldr	r1, [pc, #276]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9886:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b988a:	f006 f994 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b988e:	2210      	movs	r2, #16
   b9890:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9894:	2162      	movs	r1, #98	; 0x62
   b9896:	f7fe fc7f 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b989a:	4940      	ldr	r1, [pc, #256]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b989c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98a0:	f006 f989 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b98a4:	2210      	movs	r2, #16
   b98a6:	7829      	ldrb	r1, [r5, #0]
   b98a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98ac:	f7fe fc74 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b98b0:	493a      	ldr	r1, [pc, #232]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b98b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98b6:	f006 f97e 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b98ba:	2210      	movs	r2, #16
   b98bc:	7869      	ldrb	r1, [r5, #1]
   b98be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98c2:	f7fe fc69 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b98c6:	4935      	ldr	r1, [pc, #212]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b98c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98cc:	f006 f973 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b98d0:	2210      	movs	r2, #16
   b98d2:	78a9      	ldrb	r1, [r5, #2]
   b98d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98d8:	f006 f989 	bl	bfbee <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b98dc:	492f      	ldr	r1, [pc, #188]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b98de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98e2:	f006 f968 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b98e6:	8869      	ldrh	r1, [r5, #2]
   b98e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98ec:	2210      	movs	r2, #16
   b98ee:	0a09      	lsrs	r1, r1, #8
   b98f0:	f006 f97d 	bl	bfbee <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b98f4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b98f8:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b98fa:	886a      	ldrh	r2, [r5, #2]
   b98fc:	b2b3      	uxth	r3, r6
   b98fe:	429a      	cmp	r2, r3
   b9900:	d916      	bls.n	b9930 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9902:	461f      	mov	r7, r3
   b9904:	68ab      	ldr	r3, [r5, #8]
   b9906:	4620      	mov	r0, r4
   b9908:	5dd9      	ldrb	r1, [r3, r7]
   b990a:	f7ff ff4b 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b990e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9912:	b15b      	cbz	r3, b992c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9914:	4641      	mov	r1, r8
   b9916:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b991a:	f006 f94c 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b991e:	68ab      	ldr	r3, [r5, #8]
   b9920:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9924:	5dd9      	ldrb	r1, [r3, r7]
   b9926:	2210      	movs	r2, #16
   b9928:	f7fe fc36 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b992c:	3601      	adds	r6, #1
   b992e:	e7e4      	b.n	b98fa <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9930:	7b29      	ldrb	r1, [r5, #12]
   b9932:	4620      	mov	r0, r4
   b9934:	f7ff ff36 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9938:	7b69      	ldrb	r1, [r5, #13]
   b993a:	4620      	mov	r0, r4
   b993c:	f7ff ff32 	bl	b97a4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9940:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9944:	2101      	movs	r1, #1
   b9946:	f008 fab0 	bl	c1eaa <digitalWrite>
  _spiPort->endTransaction();
   b994a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b994e:	f004 fd10 	bl	be372 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9952:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9956:	b1c3      	cbz	r3, b998a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9958:	4910      	ldr	r1, [pc, #64]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b995a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b995e:	f006 f92a 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9962:	7b29      	ldrb	r1, [r5, #12]
   b9964:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9968:	2210      	movs	r2, #16
   b996a:	f7fe fc15 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b996e:	490b      	ldr	r1, [pc, #44]	; (b999c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9970:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9974:	f006 f91f 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9978:	7b69      	ldrb	r1, [r5, #13]
   b997a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b997e:	2210      	movs	r2, #16
}
   b9980:	b004      	add	sp, #16
   b9982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9986:	f7fe bc0e 	b.w	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b998a:	b004      	add	sp, #16
   b998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9990:	000c6e2a 	.word	0x000c6e2a
   b9994:	000c6c14 	.word	0x000c6c14
   b9998:	000c6e5f 	.word	0x000c6e5f
   b999c:	000c7d4a 	.word	0x000c7d4a

000b99a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b99a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b99a2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b99a6:	4604      	mov	r4, r0
   b99a8:	460d      	mov	r5, r1
   b99aa:	4616      	mov	r6, r2
  if (_printDebug == true)
   b99ac:	2b00      	cmp	r3, #0
   b99ae:	f000 8082 	beq.w	b9ab6 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b99b2:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b99b6:	4940      	ldr	r1, [pc, #256]	; (b9ab8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b99b8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b99bc:	f006 f8fb 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b99c0:	782b      	ldrb	r3, [r5, #0]
   b99c2:	2b01      	cmp	r3, #1
   b99c4:	d13c      	bne.n	b9a40 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b99c6:	493d      	ldr	r1, [pc, #244]	; (b9abc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b99c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b99cc:	f006 f8f3 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b99d0:	493b      	ldr	r1, [pc, #236]	; (b9ac0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b99d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b99d6:	f006 f8ee 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b99da:	882b      	ldrh	r3, [r5, #0]
   b99dc:	f240 7201 	movw	r2, #1793	; 0x701
   b99e0:	4293      	cmp	r3, r2
   b99e2:	d145      	bne.n	b9a70 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b99e4:	4937      	ldr	r1, [pc, #220]	; (b9ac4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b99e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b99ea:	f006 f8e4 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b99ee:	4936      	ldr	r1, [pc, #216]	; (b9ac8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b99f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b99f4:	f006 f8df 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
   b99f8:	8869      	ldrh	r1, [r5, #2]
   b99fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b99fe:	2210      	movs	r2, #16
   b9a00:	f006 f8f5 	bl	bfbee <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9a04:	2f01      	cmp	r7, #1
   b9a06:	d101      	bne.n	b9a0c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9a08:	2e00      	cmp	r6, #0
   b9a0a:	d049      	beq.n	b9aa0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9a0c:	492f      	ldr	r1, [pc, #188]	; (b9acc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9a0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9a12:	4f2f      	ldr	r7, [pc, #188]	; (b9ad0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9a14:	f006 f8cf 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
   b9a18:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9a1a:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9a1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9a20:	b2b3      	uxth	r3, r6
   b9a22:	429a      	cmp	r2, r3
   b9a24:	d941      	bls.n	b9aaa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9a26:	4639      	mov	r1, r7
   b9a28:	f006 f8c5 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9a2c:	b2b3      	uxth	r3, r6
   b9a2e:	68a9      	ldr	r1, [r5, #8]
   b9a30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a34:	5cc9      	ldrb	r1, [r1, r3]
   b9a36:	2210      	movs	r2, #16
   b9a38:	f7fe fbae 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9a3c:	3601      	adds	r6, #1
   b9a3e:	e7ec      	b.n	b9a1a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9a40:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9a42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9a46:	d101      	bne.n	b9a4c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9a48:	4922      	ldr	r1, [pc, #136]	; (b9ad4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b9a4a:	e7bf      	b.n	b99cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9a4c:	2b06      	cmp	r3, #6
   b9a4e:	d101      	bne.n	b9a54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9a50:	4921      	ldr	r1, [pc, #132]	; (b9ad8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9a52:	e7bb      	b.n	b99cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9a54:	2b0a      	cmp	r3, #10
   b9a56:	d101      	bne.n	b9a5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9a58:	4920      	ldr	r1, [pc, #128]	; (b9adc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b9a5a:	e7b7      	b.n	b99cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9a5c:	4920      	ldr	r1, [pc, #128]	; (b9ae0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9a5e:	f006 f8aa 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9a62:	7829      	ldrb	r1, [r5, #0]
   b9a64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a68:	2210      	movs	r2, #16
   b9a6a:	f7fe fb95 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9a6e:	e7af      	b.n	b99d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9a70:	f640 0206 	movw	r2, #2054	; 0x806
   b9a74:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9a76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9a7a:	d101      	bne.n	b9a80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9a7c:	4919      	ldr	r1, [pc, #100]	; (b9ae4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9a7e:	e7b4      	b.n	b99ea <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9a80:	f640 1206 	movw	r2, #2310	; 0x906
   b9a84:	4293      	cmp	r3, r2
   b9a86:	d101      	bne.n	b9a8c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9a88:	4917      	ldr	r1, [pc, #92]	; (b9ae8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9a8a:	e7ae      	b.n	b99ea <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9a8c:	4914      	ldr	r1, [pc, #80]	; (b9ae0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9a8e:	f006 f892 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9a92:	7869      	ldrb	r1, [r5, #1]
   b9a94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a98:	2210      	movs	r2, #16
   b9a9a:	f7fe fb7d 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9a9e:	e7a6      	b.n	b99ee <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9aa0:	4912      	ldr	r1, [pc, #72]	; (b9aec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9aa2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9aa6:	f006 f886 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9aaa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9ab2:	f006 b884 	b.w	bfbbe <_ZN5Print7printlnEv>
}
   b9ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9ab8:	000c6e70 	.word	0x000c6e70
   b9abc:	000c6e75 	.word	0x000c6e75
   b9ac0:	000c6e85 	.word	0x000c6e85
   b9ac4:	000c6e8a 	.word	0x000c6e8a
   b9ac8:	000c6e98 	.word	0x000c6e98
   b9acc:	000c6ea1 	.word	0x000c6ea1
   b9ad0:	000c7d4a 	.word	0x000c7d4a
   b9ad4:	000c6e79 	.word	0x000c6e79
   b9ad8:	000c6e7d 	.word	0x000c6e7d
   b9adc:	000c6e81 	.word	0x000c6e81
   b9ae0:	000c70f6 	.word	0x000c70f6
   b9ae4:	000c6e8e 	.word	0x000c6e8e
   b9ae8:	000c6e93 	.word	0x000c6e93
   b9aec:	000c6eab 	.word	0x000c6eab

000b9af0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9af0:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9af2:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9af6:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9af8:	b955      	cbnz	r5, b9b10 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b9afa:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9afe:	b90b      	cbnz	r3, b9b04 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9b00:	2000      	movs	r0, #0
}
   b9b02:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9b04:	491a      	ldr	r1, [pc, #104]	; (b9b70 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9b06:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b0a:	f006 f86e 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9b0e:	e7f7      	b.n	b9b00 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9b10:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9b14:	b12b      	cbz	r3, b9b22 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9b16:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9b1a:	2b00      	cmp	r3, #0
   b9b1c:	d0f0      	beq.n	b9b00 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9b1e:	4915      	ldr	r1, [pc, #84]	; (b9b74 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9b20:	e7f1      	b.n	b9b06 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9b22:	4628      	mov	r0, r5
   b9b24:	f7fa fab9 	bl	b409a <_Znaj>
   b9b28:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9b2c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9b30:	b930      	cbnz	r0, b9b40 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9b32:	b91b      	cbnz	r3, b9b3c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9b34:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9b38:	2b00      	cmp	r3, #0
   b9b3a:	d0e1      	beq.n	b9b00 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9b3c:	490e      	ldr	r1, [pc, #56]	; (b9b78 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9b3e:	e7e2      	b.n	b9b06 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9b40:	b17b      	cbz	r3, b9b62 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9b42:	490e      	ldr	r1, [pc, #56]	; (b9b7c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9b44:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b48:	f006 f835 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9b4c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9b50:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9b54:	220a      	movs	r2, #10
   b9b56:	4628      	mov	r0, r5
   b9b58:	f006 f849 	bl	bfbee <_ZN5Print11printNumberEmh>
        n += println();
   b9b5c:	4628      	mov	r0, r5
   b9b5e:	f006 f82e 	bl	bfbbe <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9b62:	2300      	movs	r3, #0
   b9b64:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9b68:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9b6c:	2001      	movs	r0, #1
   b9b6e:	e7c8      	b.n	b9b02 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9b70:	000c6ebd 	.word	0x000c6ebd
   b9b74:	000c6f0e 	.word	0x000c6f0e
   b9b78:	000c6f51 	.word	0x000c6f51
   b9b7c:	000c6f75 	.word	0x000c6f75

000b9b80 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9b80:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9b84:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9b88:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9b8a:	bf3b      	ittet	cc
   b9b8c:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9b90:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9b92:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9b94:	1a80      	subcc	r0, r0, r2
   b9b96:	b280      	uxth	r0, r0
}
   b9b98:	4770      	bx	lr

000b9b9a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b9b9a:	b508      	push	{r3, lr}
   b9b9c:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9b9e:	f7ff ffef 	bl	b9b80 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9ba2:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b9ba6:	1a18      	subs	r0, r3, r0
}
   b9ba8:	b280      	uxth	r0, r0
   b9baa:	bd08      	pop	{r3, pc}

000b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b9bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9bb0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9bb4:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9bb8:	1aed      	subs	r5, r5, r3
   b9bba:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9bbc:	4295      	cmp	r5, r2
   b9bbe:	bf28      	it	cs
   b9bc0:	4615      	movcs	r5, r2
{
   b9bc2:	4616      	mov	r6, r2
   b9bc4:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9bc6:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9bca:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9bcc:	462a      	mov	r2, r5
   b9bce:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9bd0:	b2bf      	uxth	r7, r7
{
   b9bd2:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9bd4:	f00a fc18 	bl	c4408 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9bd8:	b19f      	cbz	r7, b9c02 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b9bda:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9bde:	463a      	mov	r2, r7
   b9be0:	eb08 0105 	add.w	r1, r8, r5
   b9be4:	f00a fc10 	bl	c4408 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9be8:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9bec:	4620      	mov	r0, r4
   b9bee:	f7ff ffc7 	bl	b9b80 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9bf2:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9bf6:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9bf8:	bf38      	it	cc
   b9bfa:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9c02:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9c06:	4416      	add	r6, r2
   b9c08:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9c0c:	e7ee      	b.n	b9bec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9c10 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9c12:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9c16:	4604      	mov	r4, r0
   b9c18:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9c1a:	b113      	cbz	r3, b9c22 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9c1c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9c20:	b953      	cbnz	r3, b9c38 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9c22:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9c26:	b128      	cbz	r0, b9c34 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9c28:	4924      	ldr	r1, [pc, #144]	; (b9cbc <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9c2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c2e:	f005 ffdc 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9c32:	2000      	movs	r0, #0
}
   b9c34:	b003      	add	sp, #12
   b9c36:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9c38:	f7ff ffaf 	bl	b9b9a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9c3c:	886b      	ldrh	r3, [r5, #2]
   b9c3e:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9c40:	b29b      	uxth	r3, r3
   b9c42:	4283      	cmp	r3, r0
   b9c44:	d908      	bls.n	b9c58 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9c46:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9c4a:	b91b      	cbnz	r3, b9c54 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9c4c:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9c50:	2800      	cmp	r0, #0
   b9c52:	d0ef      	beq.n	b9c34 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9c54:	491a      	ldr	r1, [pc, #104]	; (b9cc0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9c56:	e7e8      	b.n	b9c2a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9c58:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9c5c:	2202      	movs	r2, #2
   b9c5e:	4669      	mov	r1, sp
   b9c60:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9c62:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9c66:	f7ff ffa1 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b9c6a:	2201      	movs	r2, #1
   b9c6c:	4629      	mov	r1, r5
   b9c6e:	4620      	mov	r0, r4
   b9c70:	f7ff ff9c 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9c74:	2201      	movs	r2, #1
   b9c76:	18a9      	adds	r1, r5, r2
   b9c78:	4620      	mov	r0, r4
   b9c7a:	f7ff ff97 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b9c7e:	886b      	ldrh	r3, [r5, #2]
   b9c80:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9c84:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b9c86:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b9c88:	a901      	add	r1, sp, #4
   b9c8a:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b9c8c:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b9c90:	f7ff ff8c 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b9c94:	886a      	ldrh	r2, [r5, #2]
   b9c96:	68a9      	ldr	r1, [r5, #8]
   b9c98:	4620      	mov	r0, r4
   b9c9a:	f7ff ff87 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b9c9e:	2201      	movs	r2, #1
   b9ca0:	f105 010c 	add.w	r1, r5, #12
   b9ca4:	4620      	mov	r0, r4
   b9ca6:	f7ff ff81 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b9caa:	4620      	mov	r0, r4
   b9cac:	2201      	movs	r2, #1
   b9cae:	f105 010d 	add.w	r1, r5, #13
   b9cb2:	f7ff ff7b 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b9cb6:	2001      	movs	r0, #1
   b9cb8:	e7bc      	b.n	b9c34 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b9cba:	bf00      	nop
   b9cbc:	000c6f9b 	.word	0x000c6f9b
   b9cc0:	000c6fc3 	.word	0x000c6fc3

000b9cc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b9cc8:	780e      	ldrb	r6, [r1, #0]
   b9cca:	2e0d      	cmp	r6, #13
{
   b9ccc:	4604      	mov	r4, r0
   b9cce:	460d      	mov	r5, r1
  switch (msg->cls)
   b9cd0:	f001 8228 	beq.w	bb124 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9cd4:	d809      	bhi.n	b9cea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b9cd6:	2e02      	cmp	r6, #2
   b9cd8:	f000 879a 	beq.w	bac10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9cdc:	2e06      	cmp	r6, #6
   b9cde:	f001 81cc 	beq.w	bb07a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9ce2:	2e01      	cmp	r6, #1
   b9ce4:	d04f      	beq.n	b9d86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b9ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b9cea:	2e13      	cmp	r6, #19
   b9cec:	f001 83eb 	beq.w	bb4c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9cf0:	2e28      	cmp	r6, #40	; 0x28
   b9cf2:	f001 84ca 	beq.w	bb68a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9cf6:	2e10      	cmp	r6, #16
   b9cf8:	d1f5      	bne.n	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b9cfa:	680b      	ldr	r3, [r1, #0]
   b9cfc:	4a8e      	ldr	r2, [pc, #568]	; (b9f38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9d02:	4293      	cmp	r3, r2
   b9d04:	f041 826a 	bne.w	bb1dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9d08:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b9d0a:	2e00      	cmp	r6, #0
   b9d0c:	d0eb      	beq.n	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9d0e:	68a8      	ldr	r0, [r5, #8]
   b9d10:	2100      	movs	r1, #0
   b9d12:	f7fe fa21 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d16:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9d18:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9d1a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9d1c:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9d1e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9d20:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9d22:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9d24:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9d26:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9d28:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9d2a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9d2c:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9d2e:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9d30:	68a8      	ldr	r0, [r5, #8]
   b9d32:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9d34:	2108      	movs	r1, #8
   b9d36:	f7fe fa0f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d3a:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9d3c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9d3e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9d40:	210c      	movs	r1, #12
   b9d42:	f7fe fa16 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9d46:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9d48:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9d4a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9d4c:	210e      	movs	r1, #14
   b9d4e:	f7fe fa10 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9d52:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9d56:	f04f 32ff 	mov.w	r2, #4294967295
   b9d5a:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d5c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9d5e:	6a1a      	ldr	r2, [r3, #32]
   b9d60:	b17a      	cbz	r2, b9d82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d62:	7819      	ldrb	r1, [r3, #0]
   b9d64:	0708      	lsls	r0, r1, #28
   b9d66:	d40c      	bmi.n	b9d82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9d68:	1d19      	adds	r1, r3, #4
   b9d6a:	3314      	adds	r3, #20
   b9d6c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d70:	f842 0b04 	str.w	r0, [r2], #4
   b9d74:	4299      	cmp	r1, r3
   b9d76:	d1f9      	bne.n	b9d6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d78:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b9d7a:	7813      	ldrb	r3, [r2, #0]
   b9d7c:	f043 0308 	orr.w	r3, r3, #8
   b9d80:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9d82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9d84:	e03d      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b9d86:	680b      	ldr	r3, [r1, #0]
   b9d88:	4a6c      	ldr	r2, [pc, #432]	; (b9f3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b9d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9d8e:	4293      	cmp	r3, r2
   b9d90:	d141      	bne.n	b9e16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b9d92:	68c6      	ldr	r6, [r0, #12]
   b9d94:	2e00      	cmp	r6, #0
   b9d96:	d0a6      	beq.n	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b9d98:	68a8      	ldr	r0, [r5, #8]
   b9d9a:	2100      	movs	r1, #0
   b9d9c:	f7fe f9dc 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9da0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9da4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da6:	2104      	movs	r1, #4
   b9da8:	f7fe f9d6 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9dac:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9db0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9db2:	2108      	movs	r1, #8
   b9db4:	f7fe f9d0 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9db8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9dbc:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dbe:	210c      	movs	r1, #12
   b9dc0:	f7fe f9ca 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9dc4:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b9dc6:	68a8      	ldr	r0, [r5, #8]
   b9dc8:	68e6      	ldr	r6, [r4, #12]
   b9dca:	2110      	movs	r1, #16
   b9dcc:	f7fe f9c4 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dd0:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9dd2:	68e3      	ldr	r3, [r4, #12]
   b9dd4:	f04f 32ff 	mov.w	r2, #4294967295
   b9dd8:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9dda:	68e3      	ldr	r3, [r4, #12]
   b9ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9dde:	b17a      	cbz	r2, b9e00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9de0:	7819      	ldrb	r1, [r3, #0]
   b9de2:	0709      	lsls	r1, r1, #28
   b9de4:	d40c      	bmi.n	b9e00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b9de6:	1d19      	adds	r1, r3, #4
   b9de8:	3318      	adds	r3, #24
   b9dea:	f851 0b04 	ldr.w	r0, [r1], #4
   b9dee:	f842 0b04 	str.w	r0, [r2], #4
   b9df2:	4299      	cmp	r1, r3
   b9df4:	d1f9      	bne.n	b9dea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9df6:	68e2      	ldr	r2, [r4, #12]
   b9df8:	7813      	ldrb	r3, [r2, #0]
   b9dfa:	f043 0308 	orr.w	r3, r3, #8
   b9dfe:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9e00:	68e3      	ldr	r3, [r4, #12]
   b9e02:	781b      	ldrb	r3, [r3, #0]
   b9e04:	075f      	lsls	r7, r3, #29
   b9e06:	f57f af6e 	bpl.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b9e0a:	4629      	mov	r1, r5
   b9e0c:	4620      	mov	r0, r4
}
   b9e0e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9e12:	f7ff befd 	b.w	b9c10 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b9e16:	4a4a      	ldr	r2, [pc, #296]	; (b9f40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9e18:	4293      	cmp	r3, r2
   b9e1a:	d13d      	bne.n	b9e98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9e1c:	6906      	ldr	r6, [r0, #16]
   b9e1e:	2e00      	cmp	r6, #0
   b9e20:	f43f af61 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9e24:	68a8      	ldr	r0, [r5, #8]
   b9e26:	2100      	movs	r1, #0
   b9e28:	f7fe f996 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e2c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9e2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9e30:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9e32:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9e34:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9e36:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9e38:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9e3a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9e3c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9e3e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9e40:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9e42:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9e44:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9e46:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9e48:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9e4a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9e4c:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9e4e:	68a8      	ldr	r0, [r5, #8]
   b9e50:	6926      	ldr	r6, [r4, #16]
   b9e52:	2108      	movs	r1, #8
   b9e54:	f7fe f980 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e58:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b9e5a:	68a8      	ldr	r0, [r5, #8]
   b9e5c:	6926      	ldr	r6, [r4, #16]
   b9e5e:	210c      	movs	r1, #12
   b9e60:	f7fe f97a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e64:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e66:	6923      	ldr	r3, [r4, #16]
   b9e68:	f04f 32ff 	mov.w	r2, #4294967295
   b9e6c:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e6e:	6923      	ldr	r3, [r4, #16]
   b9e70:	6a1a      	ldr	r2, [r3, #32]
   b9e72:	b17a      	cbz	r2, b9e94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e74:	7819      	ldrb	r1, [r3, #0]
   b9e76:	070e      	lsls	r6, r1, #28
   b9e78:	d40c      	bmi.n	b9e94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b9e7a:	1d19      	adds	r1, r3, #4
   b9e7c:	3314      	adds	r3, #20
   b9e7e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e82:	f842 0b04 	str.w	r0, [r2], #4
   b9e86:	4299      	cmp	r1, r3
   b9e88:	d1f9      	bne.n	b9e7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e8a:	6922      	ldr	r2, [r4, #16]
   b9e8c:	7813      	ldrb	r3, [r2, #0]
   b9e8e:	f043 0308 	orr.w	r3, r3, #8
   b9e92:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b9e94:	6923      	ldr	r3, [r4, #16]
   b9e96:	e7b4      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b9e98:	4a2a      	ldr	r2, [pc, #168]	; (b9f44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b9e9a:	4293      	cmp	r3, r2
   b9e9c:	d154      	bne.n	b9f48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b9e9e:	6946      	ldr	r6, [r0, #20]
   b9ea0:	2e00      	cmp	r6, #0
   b9ea2:	f43f af20 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b9ea6:	68a8      	ldr	r0, [r5, #8]
   b9ea8:	2100      	movs	r1, #0
   b9eaa:	f7fe f955 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eae:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b9eb0:	68a8      	ldr	r0, [r5, #8]
   b9eb2:	6966      	ldr	r6, [r4, #20]
   b9eb4:	2104      	movs	r1, #4
   b9eb6:	f7fe f95c 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9eba:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b9ebc:	68a8      	ldr	r0, [r5, #8]
   b9ebe:	6966      	ldr	r6, [r4, #20]
   b9ec0:	2106      	movs	r1, #6
   b9ec2:	f7fe f956 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ec6:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b9ec8:	68a8      	ldr	r0, [r5, #8]
   b9eca:	6966      	ldr	r6, [r4, #20]
   b9ecc:	2108      	movs	r1, #8
   b9ece:	f7fe f950 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ed2:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b9ed4:	68a8      	ldr	r0, [r5, #8]
   b9ed6:	6966      	ldr	r6, [r4, #20]
   b9ed8:	210a      	movs	r1, #10
   b9eda:	f7fe f94a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ede:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9ee0:	68a8      	ldr	r0, [r5, #8]
   b9ee2:	6966      	ldr	r6, [r4, #20]
   b9ee4:	210c      	movs	r1, #12
   b9ee6:	f7fe f944 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9eea:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b9eec:	68a8      	ldr	r0, [r5, #8]
   b9eee:	6966      	ldr	r6, [r4, #20]
   b9ef0:	210e      	movs	r1, #14
   b9ef2:	f7fe f93e 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ef6:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9ef8:	68a8      	ldr	r0, [r5, #8]
   b9efa:	6966      	ldr	r6, [r4, #20]
   b9efc:	2110      	movs	r1, #16
   b9efe:	f7fe f938 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f02:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f04:	6963      	ldr	r3, [r4, #20]
   b9f06:	f04f 32ff 	mov.w	r2, #4294967295
   b9f0a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f0c:	6963      	ldr	r3, [r4, #20]
   b9f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9f10:	b17a      	cbz	r2, b9f32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f12:	7819      	ldrb	r1, [r3, #0]
   b9f14:	0708      	lsls	r0, r1, #28
   b9f16:	d40c      	bmi.n	b9f32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9f18:	1d19      	adds	r1, r3, #4
   b9f1a:	3318      	adds	r3, #24
   b9f1c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f20:	f842 0b04 	str.w	r0, [r2], #4
   b9f24:	4299      	cmp	r1, r3
   b9f26:	d1f9      	bne.n	b9f1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f28:	6962      	ldr	r2, [r4, #20]
   b9f2a:	7813      	ldrb	r3, [r2, #0]
   b9f2c:	f043 0308 	orr.w	r3, r3, #8
   b9f30:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9f32:	6963      	ldr	r3, [r4, #20]
   b9f34:	e765      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9f36:	bf00      	nop
   b9f38:	00101400 	.word	0x00101400
   b9f3c:	00140100 	.word	0x00140100
   b9f40:	00100300 	.word	0x00100300
   b9f44:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9f48:	4a8c      	ldr	r2, [pc, #560]	; (ba17c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9f4a:	4293      	cmp	r3, r2
   b9f4c:	d149      	bne.n	b9fe2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9f4e:	69c6      	ldr	r6, [r0, #28]
   b9f50:	2e00      	cmp	r6, #0
   b9f52:	f43f aec8 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9f56:	68a8      	ldr	r0, [r5, #8]
   b9f58:	2100      	movs	r1, #0
   b9f5a:	f7fe f8fd 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f5e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9f60:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9f62:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9f64:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9f66:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f68:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9f6a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f6c:	2108      	movs	r1, #8
   b9f6e:	f7fe f8f3 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9f72:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f74:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9f76:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f78:	210c      	movs	r1, #12
   b9f7a:	f7fe f8ed 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9f7e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f80:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9f82:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f84:	2110      	movs	r1, #16
   b9f86:	f7fe f8e7 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9f8a:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9f8c:	68a8      	ldr	r0, [r5, #8]
   b9f8e:	69e6      	ldr	r6, [r4, #28]
   b9f90:	2114      	movs	r1, #20
   b9f92:	f7fe f8e1 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f96:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9f98:	68a8      	ldr	r0, [r5, #8]
   b9f9a:	69e6      	ldr	r6, [r4, #28]
   b9f9c:	2118      	movs	r1, #24
   b9f9e:	f7fe f8db 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fa2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9fa4:	68a8      	ldr	r0, [r5, #8]
   b9fa6:	69e6      	ldr	r6, [r4, #28]
   b9fa8:	211c      	movs	r1, #28
   b9faa:	f7fe f8d5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fae:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9fb0:	69e3      	ldr	r3, [r4, #28]
   b9fb2:	f04f 32ff 	mov.w	r2, #4294967295
   b9fb6:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9fb8:	69e3      	ldr	r3, [r4, #28]
   b9fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9fbc:	b17a      	cbz	r2, b9fde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9fbe:	7819      	ldrb	r1, [r3, #0]
   b9fc0:	0709      	lsls	r1, r1, #28
   b9fc2:	d40c      	bmi.n	b9fde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9fc4:	1d19      	adds	r1, r3, #4
   b9fc6:	3324      	adds	r3, #36	; 0x24
   b9fc8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9fcc:	f842 0b04 	str.w	r0, [r2], #4
   b9fd0:	4299      	cmp	r1, r3
   b9fd2:	d1f9      	bne.n	b9fc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9fd4:	69e2      	ldr	r2, [r4, #28]
   b9fd6:	7813      	ldrb	r3, [r2, #0]
   b9fd8:	f043 0308 	orr.w	r3, r3, #8
   b9fdc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9fde:	69e3      	ldr	r3, [r4, #28]
   b9fe0:	e70f      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9fe2:	4a67      	ldr	r2, [pc, #412]	; (ba180 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9fe4:	4293      	cmp	r3, r2
   b9fe6:	f040 80cd 	bne.w	ba184 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9fea:	6a06      	ldr	r6, [r0, #32]
   b9fec:	2e00      	cmp	r6, #0
   b9fee:	f43f ae7a 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9ff2:	68a8      	ldr	r0, [r5, #8]
   b9ff4:	2100      	movs	r1, #0
   b9ff6:	f7fe f8af 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ffa:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9ffc:	68a8      	ldr	r0, [r5, #8]
   b9ffe:	6a26      	ldr	r6, [r4, #32]
   ba000:	2104      	movs	r1, #4
   ba002:	f7fe f8b6 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba006:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba008:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba00a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba00c:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba00e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba010:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba012:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba014:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba016:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba018:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba01a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba01c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba01e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba020:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba022:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba024:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba026:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba028:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba02a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba02c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba02e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba030:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba032:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba034:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba036:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba038:	210c      	movs	r1, #12
   ba03a:	68a8      	ldr	r0, [r5, #8]
   ba03c:	6a26      	ldr	r6, [r4, #32]
   ba03e:	f7fe f88b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba042:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba044:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba046:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba048:	2110      	movs	r1, #16
   ba04a:	f7fe f885 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba04e:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba050:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba052:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba054:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba056:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba058:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba05a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba05c:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba05e:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba060:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba062:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba064:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba066:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba068:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba06a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba06c:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba06e:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba070:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba072:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba074:	2118      	movs	r1, #24
   ba076:	f7fe f86f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba07a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba07c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba07e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba080:	211c      	movs	r1, #28
   ba082:	f7fe f869 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba086:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba088:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba08a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba08c:	2120      	movs	r1, #32
   ba08e:	f7fe f863 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba092:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba094:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba096:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba098:	2124      	movs	r1, #36	; 0x24
   ba09a:	f7fe f85d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba09e:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba0a0:	68a8      	ldr	r0, [r5, #8]
   ba0a2:	6a26      	ldr	r6, [r4, #32]
   ba0a4:	2128      	movs	r1, #40	; 0x28
   ba0a6:	f7fe f857 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0aa:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba0ac:	6a26      	ldr	r6, [r4, #32]
   ba0ae:	68a8      	ldr	r0, [r5, #8]
   ba0b0:	212c      	movs	r1, #44	; 0x2c
   ba0b2:	f7fe f851 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0b6:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba0ba:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0bc:	2130      	movs	r1, #48	; 0x30
   ba0be:	f7fe f84b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba0c2:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba0c6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c8:	2134      	movs	r1, #52	; 0x34
   ba0ca:	f7fe f845 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba0ce:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba0d2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d4:	2138      	movs	r1, #56	; 0x38
   ba0d6:	f7fe f83f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba0da:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba0de:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e0:	213c      	movs	r1, #60	; 0x3c
   ba0e2:	f7fe f839 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba0e6:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba0ea:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ec:	2140      	movs	r1, #64	; 0x40
   ba0ee:	f7fe f833 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba0f2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba0f4:	68a8      	ldr	r0, [r5, #8]
   ba0f6:	6a26      	ldr	r6, [r4, #32]
   ba0f8:	2144      	movs	r1, #68	; 0x44
   ba0fa:	f7fe f82d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0fe:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba100:	68a8      	ldr	r0, [r5, #8]
   ba102:	6a26      	ldr	r6, [r4, #32]
   ba104:	2148      	movs	r1, #72	; 0x48
   ba106:	f7fe f827 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba10a:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba10c:	68a8      	ldr	r0, [r5, #8]
   ba10e:	6a26      	ldr	r6, [r4, #32]
   ba110:	214c      	movs	r1, #76	; 0x4c
   ba112:	f7fe f82e 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba116:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba11a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba11c:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba11e:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba122:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba126:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba128:	68a8      	ldr	r0, [r5, #8]
   ba12a:	2154      	movs	r1, #84	; 0x54
   ba12c:	f7fe f814 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba130:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba132:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba134:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba136:	2158      	movs	r1, #88	; 0x58
   ba138:	f7fe f81b 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba13c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba140:	68a8      	ldr	r0, [r5, #8]
   ba142:	6a26      	ldr	r6, [r4, #32]
   ba144:	215a      	movs	r1, #90	; 0x5a
   ba146:	f7fe f814 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba14a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba14e:	6a22      	ldr	r2, [r4, #32]
   ba150:	f04f 33ff 	mov.w	r3, #4294967295
   ba154:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba156:	6a22      	ldr	r2, [r4, #32]
   ba158:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba15a:	6a21      	ldr	r1, [r4, #32]
   ba15c:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba15e:	b158      	cbz	r0, ba178 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba160:	780b      	ldrb	r3, [r1, #0]
   ba162:	071b      	lsls	r3, r3, #28
   ba164:	d408      	bmi.n	ba178 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba166:	225c      	movs	r2, #92	; 0x5c
   ba168:	3104      	adds	r1, #4
   ba16a:	f00a f94d 	bl	c4408 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba16e:	6a22      	ldr	r2, [r4, #32]
   ba170:	7813      	ldrb	r3, [r2, #0]
   ba172:	f043 0308 	orr.w	r3, r3, #8
   ba176:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba178:	6a23      	ldr	r3, [r4, #32]
   ba17a:	e642      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba17c:	00200500 	.word	0x00200500
   ba180:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba184:	4a8e      	ldr	r2, [pc, #568]	; (ba3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba186:	4293      	cmp	r3, r2
   ba188:	d137      	bne.n	ba1fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba18a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba18c:	2b00      	cmp	r3, #0
   ba18e:	f43f adaa 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba192:	688a      	ldr	r2, [r1, #8]
   ba194:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba196:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba198:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba19a:	68a8      	ldr	r0, [r5, #8]
   ba19c:	2104      	movs	r1, #4
   ba19e:	f7fd ffdb 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1a2:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba1a4:	68a8      	ldr	r0, [r5, #8]
   ba1a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba1a8:	2108      	movs	r1, #8
   ba1aa:	f7fd ffd5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1ae:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba1b0:	68a8      	ldr	r0, [r5, #8]
   ba1b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba1b4:	210c      	movs	r1, #12
   ba1b6:	f7fd ffcf 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1ba:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba1bc:	68a8      	ldr	r0, [r5, #8]
   ba1be:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba1c0:	2110      	movs	r1, #16
   ba1c2:	f7fd ffc9 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1c6:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1ca:	f04f 32ff 	mov.w	r2, #4294967295
   ba1ce:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba1d4:	b17a      	cbz	r2, ba1f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1d6:	7819      	ldrb	r1, [r3, #0]
   ba1d8:	070f      	lsls	r7, r1, #28
   ba1da:	d40c      	bmi.n	ba1f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba1dc:	1d19      	adds	r1, r3, #4
   ba1de:	3318      	adds	r3, #24
   ba1e0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba1e4:	f842 0b04 	str.w	r0, [r2], #4
   ba1e8:	4299      	cmp	r1, r3
   ba1ea:	d1f9      	bne.n	ba1e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba1ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba1ee:	7813      	ldrb	r3, [r2, #0]
   ba1f0:	f043 0308 	orr.w	r3, r3, #8
   ba1f4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba1f8:	e603      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba1fa:	4a72      	ldr	r2, [pc, #456]	; (ba3c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba1fc:	4293      	cmp	r3, r2
   ba1fe:	d139      	bne.n	ba274 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba200:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba202:	2e00      	cmp	r6, #0
   ba204:	f43f ad6f 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba208:	68a8      	ldr	r0, [r5, #8]
   ba20a:	2100      	movs	r1, #0
   ba20c:	f7fd ffa4 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba210:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba212:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba216:	2104      	movs	r1, #4
   ba218:	f7fd ff9e 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba21c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba21e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba222:	2108      	movs	r1, #8
   ba224:	f7fd ff98 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba228:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba22a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba22e:	210c      	movs	r1, #12
   ba230:	f7fd ff92 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba234:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba236:	68a8      	ldr	r0, [r5, #8]
   ba238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba23a:	2110      	movs	r1, #16
   ba23c:	f7fd ff8c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba240:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba244:	f04f 32ff 	mov.w	r2, #4294967295
   ba248:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba24a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba24e:	b17a      	cbz	r2, ba270 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba250:	7819      	ldrb	r1, [r3, #0]
   ba252:	070e      	lsls	r6, r1, #28
   ba254:	d40c      	bmi.n	ba270 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba256:	1d19      	adds	r1, r3, #4
   ba258:	3318      	adds	r3, #24
   ba25a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba25e:	f842 0b04 	str.w	r0, [r2], #4
   ba262:	4299      	cmp	r1, r3
   ba264:	d1f9      	bne.n	ba25a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba268:	7813      	ldrb	r3, [r2, #0]
   ba26a:	f043 0308 	orr.w	r3, r3, #8
   ba26e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba270:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba272:	e5c6      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba274:	4a54      	ldr	r2, [pc, #336]	; (ba3c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba276:	4293      	cmp	r3, r2
   ba278:	d151      	bne.n	ba31e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba27a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba27c:	2e00      	cmp	r6, #0
   ba27e:	f43f ad32 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba282:	68a8      	ldr	r0, [r5, #8]
   ba284:	2100      	movs	r1, #0
   ba286:	f7fd ff67 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba28a:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba28c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba28e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba290:	2104      	movs	r1, #4
   ba292:	f7fd ff61 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba296:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba298:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba29a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba29c:	2108      	movs	r1, #8
   ba29e:	f7fd ff5b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba2a2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba2a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2a8:	210c      	movs	r1, #12
   ba2aa:	f7fd ff55 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba2ae:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba2b0:	68a8      	ldr	r0, [r5, #8]
   ba2b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba2b4:	2110      	movs	r1, #16
   ba2b6:	f7fd ff4f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ba:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba2bc:	68a8      	ldr	r0, [r5, #8]
   ba2be:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba2c0:	2114      	movs	r1, #20
   ba2c2:	f7fd ff49 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2c6:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2c8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba2ca:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2cc:	2118      	movs	r1, #24
   ba2ce:	f7fd ff43 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba2d2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba2d4:	68a8      	ldr	r0, [r5, #8]
   ba2d6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba2d8:	211c      	movs	r1, #28
   ba2da:	f7fd ff3d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2de:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba2e0:	68a8      	ldr	r0, [r5, #8]
   ba2e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba2e4:	2120      	movs	r1, #32
   ba2e6:	f7fd ff37 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ea:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba2ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba2ee:	f04f 32ff 	mov.w	r2, #4294967295
   ba2f2:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba2f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba2f8:	b17a      	cbz	r2, ba31a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba2fa:	7819      	ldrb	r1, [r3, #0]
   ba2fc:	0708      	lsls	r0, r1, #28
   ba2fe:	d40c      	bmi.n	ba31a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba300:	1d19      	adds	r1, r3, #4
   ba302:	3328      	adds	r3, #40	; 0x28
   ba304:	f851 0b04 	ldr.w	r0, [r1], #4
   ba308:	f842 0b04 	str.w	r0, [r2], #4
   ba30c:	4299      	cmp	r1, r3
   ba30e:	d1f9      	bne.n	ba304 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba310:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba312:	7813      	ldrb	r3, [r2, #0]
   ba314:	f043 0308 	orr.w	r3, r3, #8
   ba318:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba31a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba31c:	e571      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba31e:	4a2b      	ldr	r2, [pc, #172]	; (ba3cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba320:	4293      	cmp	r3, r2
   ba322:	d155      	bne.n	ba3d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba324:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba326:	2b00      	cmp	r3, #0
   ba328:	f43f acdd 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba32c:	688a      	ldr	r2, [r1, #8]
   ba32e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba330:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba332:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba334:	68a8      	ldr	r0, [r5, #8]
   ba336:	2104      	movs	r1, #4
   ba338:	f7fd ff0e 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba33c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba33e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba340:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba342:	2108      	movs	r1, #8
   ba344:	f7fd ff08 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba348:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba34a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba34c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba34e:	210c      	movs	r1, #12
   ba350:	f7fd ff02 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba354:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba356:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba358:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba35a:	2110      	movs	r1, #16
   ba35c:	f7fd fefc 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba360:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba362:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba364:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba366:	7d12      	ldrb	r2, [r2, #20]
   ba368:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba36a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba36e:	7d52      	ldrb	r2, [r2, #21]
   ba370:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba372:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba374:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba376:	7d92      	ldrb	r2, [r2, #22]
   ba378:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba37a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba37c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba37e:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba380:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba382:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba384:	68a8      	ldr	r0, [r5, #8]
   ba386:	2118      	movs	r1, #24
   ba388:	f7fd fee6 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38c:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba390:	f04f 32ff 	mov.w	r2, #4294967295
   ba394:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba396:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba39a:	b17a      	cbz	r2, ba3bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba39c:	7819      	ldrb	r1, [r3, #0]
   ba39e:	0709      	lsls	r1, r1, #28
   ba3a0:	d40c      	bmi.n	ba3bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba3a2:	1d19      	adds	r1, r3, #4
   ba3a4:	3320      	adds	r3, #32
   ba3a6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3aa:	f842 0b04 	str.w	r0, [r2], #4
   ba3ae:	4299      	cmp	r1, r3
   ba3b0:	d1f9      	bne.n	ba3a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba3b4:	7813      	ldrb	r3, [r2, #0]
   ba3b6:	f043 0308 	orr.w	r3, r3, #8
   ba3ba:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba3be:	e520      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba3c0:	00140900 	.word	0x00140900
   ba3c4:	00141100 	.word	0x00141100
   ba3c8:	00241200 	.word	0x00241200
   ba3cc:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba3d0:	4a30      	ldr	r2, [pc, #192]	; (ba494 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba3d2:	4293      	cmp	r3, r2
   ba3d4:	d160      	bne.n	ba498 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba3d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba3d8:	2b00      	cmp	r3, #0
   ba3da:	f43f ac84 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba3de:	688a      	ldr	r2, [r1, #8]
   ba3e0:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba3e2:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba3e4:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba3e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba3e8:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba3ea:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba3ec:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba3ee:	68a8      	ldr	r0, [r5, #8]
   ba3f0:	2104      	movs	r1, #4
   ba3f2:	f7fd feb1 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3f6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba3fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3fc:	2108      	movs	r1, #8
   ba3fe:	f7fd feab 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba402:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba404:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba406:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba408:	210c      	movs	r1, #12
   ba40a:	f7fd fea5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba40e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba410:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba412:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba414:	2110      	movs	r1, #16
   ba416:	f7fd fe9f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba41a:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba41c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba41e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba420:	2114      	movs	r1, #20
   ba422:	f7fd fe99 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba426:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba428:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba42a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba42c:	7e12      	ldrb	r2, [r2, #24]
   ba42e:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba430:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba434:	7e52      	ldrb	r2, [r2, #25]
   ba436:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba438:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba43a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba43c:	7e92      	ldrb	r2, [r2, #26]
   ba43e:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba440:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba444:	7ed2      	ldrb	r2, [r2, #27]
   ba446:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba448:	68a8      	ldr	r0, [r5, #8]
   ba44a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba44c:	211c      	movs	r1, #28
   ba44e:	f7fd fe83 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba452:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba454:	68a8      	ldr	r0, [r5, #8]
   ba456:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba458:	2120      	movs	r1, #32
   ba45a:	f7fd fe7d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba45e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba462:	f04f 32ff 	mov.w	r2, #4294967295
   ba466:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba46a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba46c:	b17a      	cbz	r2, ba48e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba46e:	7819      	ldrb	r1, [r3, #0]
   ba470:	070f      	lsls	r7, r1, #28
   ba472:	d40c      	bmi.n	ba48e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba474:	1d19      	adds	r1, r3, #4
   ba476:	3328      	adds	r3, #40	; 0x28
   ba478:	f851 0b04 	ldr.w	r0, [r1], #4
   ba47c:	f842 0b04 	str.w	r0, [r2], #4
   ba480:	4299      	cmp	r1, r3
   ba482:	d1f9      	bne.n	ba478 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba484:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba486:	7813      	ldrb	r3, [r2, #0]
   ba488:	f043 0308 	orr.w	r3, r3, #8
   ba48c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba48e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba490:	e4b7      	b.n	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba492:	bf00      	nop
   ba494:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba498:	4aa1      	ldr	r2, [pc, #644]	; (ba720 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba49a:	4293      	cmp	r3, r2
   ba49c:	f040 80f0 	bne.w	ba680 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba4a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba4a2:	2e00      	cmp	r6, #0
   ba4a4:	f43f ac1f 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba4a8:	68a8      	ldr	r0, [r5, #8]
   ba4aa:	2100      	movs	r1, #0
   ba4ac:	f7fd fe54 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4b0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba4b2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba4b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4b6:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba4b8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba4ba:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba4bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4be:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba4c0:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba4c2:	68a8      	ldr	r0, [r5, #8]
   ba4c4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba4c6:	2106      	movs	r1, #6
   ba4c8:	f7fd fe53 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4cc:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba4ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba4d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4d2:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba4d4:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba4d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba4d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4da:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba4dc:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba4de:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba4e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4e2:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba4e4:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba4e6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba4e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4ea:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba4ec:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba4ee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba4f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4f2:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba4f4:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba4f6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba4f8:	68a8      	ldr	r0, [r5, #8]
   ba4fa:	2110      	movs	r1, #16
   ba4fc:	f7fd fe2c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba500:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba502:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba504:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba506:	2114      	movs	r1, #20
   ba508:	f7fd fe26 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba50c:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba50e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba512:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba514:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba516:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba51a:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba51c:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba51e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba520:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba522:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba524:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba526:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba52a:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba52c:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba52e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba530:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba532:	211c      	movs	r1, #28
   ba534:	f7fd fe10 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba538:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba53a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba53c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba53e:	2120      	movs	r1, #32
   ba540:	f7fd fe0a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba544:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba546:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba548:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba54a:	2124      	movs	r1, #36	; 0x24
   ba54c:	f7fd fe04 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba550:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba552:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba554:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba556:	2128      	movs	r1, #40	; 0x28
   ba558:	f7fd fdfe 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba55c:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba55e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba560:	68a8      	ldr	r0, [r5, #8]
   ba562:	212c      	movs	r1, #44	; 0x2c
   ba564:	f7fd fdf8 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba568:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba56a:	68a8      	ldr	r0, [r5, #8]
   ba56c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba56e:	2130      	movs	r1, #48	; 0x30
   ba570:	f7fd fdf2 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba574:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba576:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba578:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba57a:	2134      	movs	r1, #52	; 0x34
   ba57c:	f7fd fdec 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba580:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba582:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba584:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba586:	2138      	movs	r1, #56	; 0x38
   ba588:	f7fd fde6 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba58c:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba58e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba590:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba592:	213c      	movs	r1, #60	; 0x3c
   ba594:	f7fd fde0 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba598:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba59a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba59c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba59e:	2140      	movs	r1, #64	; 0x40
   ba5a0:	f7fd fdda 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba5a4:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba5a6:	68a8      	ldr	r0, [r5, #8]
   ba5a8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5aa:	2144      	movs	r1, #68	; 0x44
   ba5ac:	f7fd fdd4 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5b0:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba5b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b6:	2148      	movs	r1, #72	; 0x48
   ba5b8:	f7fd fdce 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba5bc:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5be:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba5c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c2:	214c      	movs	r1, #76	; 0x4c
   ba5c4:	f7fd fdc8 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba5c8:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ca:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba5cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ce:	2150      	movs	r1, #80	; 0x50
   ba5d0:	f7fd fdc2 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba5d4:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5d6:	2154      	movs	r1, #84	; 0x54
   ba5d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba5da:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5dc:	f7fd fdbc 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba5e0:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba5e2:	68a8      	ldr	r0, [r5, #8]
   ba5e4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5e6:	2158      	movs	r1, #88	; 0x58
   ba5e8:	f7fd fdc3 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5ec:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba5f0:	68a8      	ldr	r0, [r5, #8]
   ba5f2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5f4:	215a      	movs	r1, #90	; 0x5a
   ba5f6:	f7fd fdbc 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5fa:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba5fe:	68a8      	ldr	r0, [r5, #8]
   ba600:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba602:	215c      	movs	r1, #92	; 0x5c
   ba604:	f7fd fdb5 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba608:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba60c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba60e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba610:	215e      	movs	r1, #94	; 0x5e
   ba612:	f7fd fdae 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba616:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba61a:	68a8      	ldr	r0, [r5, #8]
   ba61c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba61e:	2160      	movs	r1, #96	; 0x60
   ba620:	f7fd fda7 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba624:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba628:	68a8      	ldr	r0, [r5, #8]
   ba62a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba62c:	2162      	movs	r1, #98	; 0x62
   ba62e:	f7fd fda0 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba632:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba636:	68a8      	ldr	r0, [r5, #8]
   ba638:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba63a:	2164      	movs	r1, #100	; 0x64
   ba63c:	f7fd fd8c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba640:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba642:	68a8      	ldr	r0, [r5, #8]
   ba644:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba646:	2168      	movs	r1, #104	; 0x68
   ba648:	f7fd fd86 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba64c:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba64e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba650:	f04f 33ff 	mov.w	r3, #4294967295
   ba654:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba656:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba658:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba65a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba65c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba660:	b158      	cbz	r0, ba67a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba662:	780b      	ldrb	r3, [r1, #0]
   ba664:	071e      	lsls	r6, r3, #28
   ba666:	d408      	bmi.n	ba67a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba668:	2274      	movs	r2, #116	; 0x74
   ba66a:	3104      	adds	r1, #4
   ba66c:	f009 fecc 	bl	c4408 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba670:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba672:	7813      	ldrb	r3, [r2, #0]
   ba674:	f043 0308 	orr.w	r3, r3, #8
   ba678:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba67a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba67c:	f7ff bbc1 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba680:	4a28      	ldr	r2, [pc, #160]	; (ba724 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba682:	4293      	cmp	r3, r2
   ba684:	d150      	bne.n	ba728 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba686:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba688:	2e00      	cmp	r6, #0
   ba68a:	f43f ab2c 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba68e:	68a8      	ldr	r0, [r5, #8]
   ba690:	2100      	movs	r1, #0
   ba692:	f7fd fd61 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba696:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba698:	68a8      	ldr	r0, [r5, #8]
   ba69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba69c:	2104      	movs	r1, #4
   ba69e:	f7fd fd5b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6a2:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba6a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6a8:	2108      	movs	r1, #8
   ba6aa:	f7fd fd55 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba6ae:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba6b0:	68a8      	ldr	r0, [r5, #8]
   ba6b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba6b4:	210c      	movs	r1, #12
   ba6b6:	f7fd fd5c 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba6ba:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba6bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba6be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6c0:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba6c2:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba6c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba6c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6c8:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba6ca:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba6cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba6ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6d0:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba6d2:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba6d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba6d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6d8:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba6da:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba6dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba6de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6e0:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba6e2:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba6e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba6e6:	68aa      	ldr	r2, [r5, #8]
   ba6e8:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba6ea:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba6ee:	f04f 32ff 	mov.w	r2, #4294967295
   ba6f2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba6f6:	6a1a      	ldr	r2, [r3, #32]
   ba6f8:	b17a      	cbz	r2, ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6fa:	7819      	ldrb	r1, [r3, #0]
   ba6fc:	0708      	lsls	r0, r1, #28
   ba6fe:	d40c      	bmi.n	ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba700:	1d19      	adds	r1, r3, #4
   ba702:	3318      	adds	r3, #24
   ba704:	f851 0b04 	ldr.w	r0, [r1], #4
   ba708:	f842 0b04 	str.w	r0, [r2], #4
   ba70c:	4299      	cmp	r1, r3
   ba70e:	d1f9      	bne.n	ba704 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba710:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba712:	7813      	ldrb	r3, [r2, #0]
   ba714:	f043 0308 	orr.w	r3, r3, #8
   ba718:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba71a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba71c:	f7ff bb71 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba720:	00741700 	.word	0x00741700
   ba724:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba728:	4a84      	ldr	r2, [pc, #528]	; (ba93c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba72a:	4293      	cmp	r3, r2
   ba72c:	d13a      	bne.n	ba7a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba72e:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba730:	2e00      	cmp	r6, #0
   ba732:	f43f aad8 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba736:	68a8      	ldr	r0, [r5, #8]
   ba738:	2100      	movs	r1, #0
   ba73a:	f7fd fd0d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba73e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba740:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba742:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba744:	2104      	movs	r1, #4
   ba746:	f7fd fd07 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba74a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba74c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba74e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba750:	2108      	movs	r1, #8
   ba752:	f7fd fd01 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba756:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba758:	68a8      	ldr	r0, [r5, #8]
   ba75a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba75c:	210c      	movs	r1, #12
   ba75e:	f7fd fcfb 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba762:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba764:	68a8      	ldr	r0, [r5, #8]
   ba766:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba768:	2110      	movs	r1, #16
   ba76a:	f7fd fcf5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba76e:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba770:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba772:	f04f 32ff 	mov.w	r2, #4294967295
   ba776:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba778:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba77c:	b17a      	cbz	r2, ba79e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba77e:	7819      	ldrb	r1, [r3, #0]
   ba780:	0709      	lsls	r1, r1, #28
   ba782:	d40c      	bmi.n	ba79e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba784:	1d19      	adds	r1, r3, #4
   ba786:	3318      	adds	r3, #24
   ba788:	f851 0b04 	ldr.w	r0, [r1], #4
   ba78c:	f842 0b04 	str.w	r0, [r2], #4
   ba790:	4299      	cmp	r1, r3
   ba792:	d1f9      	bne.n	ba788 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba794:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba796:	7813      	ldrb	r3, [r2, #0]
   ba798:	f043 0308 	orr.w	r3, r3, #8
   ba79c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba79e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba7a0:	f7ff bb2f 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba7a4:	4a66      	ldr	r2, [pc, #408]	; (ba940 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba7a6:	4293      	cmp	r3, r2
   ba7a8:	d138      	bne.n	ba81c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba7aa:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba7ac:	2e00      	cmp	r6, #0
   ba7ae:	f43f aa9a 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba7b2:	68a8      	ldr	r0, [r5, #8]
   ba7b4:	2100      	movs	r1, #0
   ba7b6:	f7fd fccf 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7ba:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba7bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba7be:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba7c0:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba7c2:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba7c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba7c8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba7ca:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba7cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba7ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba7d0:	7a52      	ldrb	r2, [r2, #9]
   ba7d2:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba7d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba7d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba7d8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba7da:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba7dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba7de:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba7e0:	7ad2      	ldrb	r2, [r2, #11]
   ba7e2:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7e4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba7e6:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7e8:	210c      	movs	r1, #12
   ba7ea:	f7fd fcb5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba7ee:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba7f0:	68a8      	ldr	r0, [r5, #8]
   ba7f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba7f4:	2110      	movs	r1, #16
   ba7f6:	f7fd fcbc 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7fa:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba7fc:	68a8      	ldr	r0, [r5, #8]
   ba7fe:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba800:	2112      	movs	r1, #18
   ba802:	f7fd fcb6 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba806:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba808:	68ab      	ldr	r3, [r5, #8]
   ba80a:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba80c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba80e:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba810:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba812:	f04f 32ff 	mov.w	r2, #4294967295
   ba816:	61da      	str	r2, [r3, #28]
   ba818:	f7ff ba65 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba81c:	4a49      	ldr	r2, [pc, #292]	; (ba944 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba81e:	4293      	cmp	r3, r2
   ba820:	d162      	bne.n	ba8e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba822:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba824:	2b00      	cmp	r3, #0
   ba826:	f43f aa5e 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba82a:	688a      	ldr	r2, [r1, #8]
   ba82c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba82e:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba830:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba832:	68a8      	ldr	r0, [r5, #8]
   ba834:	2104      	movs	r1, #4
   ba836:	f7fd fc8f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba83a:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba83c:	68a8      	ldr	r0, [r5, #8]
   ba83e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba840:	2108      	movs	r1, #8
   ba842:	f7fd fc89 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba846:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba848:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba84a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba84c:	210c      	movs	r1, #12
   ba84e:	f7fd fc83 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba852:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba854:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba856:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba858:	2110      	movs	r1, #16
   ba85a:	f7fd fc7d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba85e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba860:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba862:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba864:	2114      	movs	r1, #20
   ba866:	f7fd fc77 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba86a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba86c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba86e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba870:	7e12      	ldrb	r2, [r2, #24]
   ba872:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba874:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba876:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba878:	7e52      	ldrb	r2, [r2, #25]
   ba87a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba87c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba87e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba880:	7e92      	ldrb	r2, [r2, #26]
   ba882:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba884:	211c      	movs	r1, #28
   ba886:	68a8      	ldr	r0, [r5, #8]
   ba888:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba88a:	f7fd fc65 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba88e:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba890:	68a8      	ldr	r0, [r5, #8]
   ba892:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba894:	2120      	movs	r1, #32
   ba896:	f7fd fc5f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba89a:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba89c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba89e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba8a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba8a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba8a8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba8aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba8ac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba8b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba8b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba8b6:	f04f 32ff 	mov.w	r2, #4294967295
   ba8ba:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba8bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba8be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba8c0:	b17a      	cbz	r2, ba8e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba8c2:	7819      	ldrb	r1, [r3, #0]
   ba8c4:	070f      	lsls	r7, r1, #28
   ba8c6:	d40c      	bmi.n	ba8e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba8c8:	1d19      	adds	r1, r3, #4
   ba8ca:	332c      	adds	r3, #44	; 0x2c
   ba8cc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba8d0:	f842 0b04 	str.w	r0, [r2], #4
   ba8d4:	4299      	cmp	r1, r3
   ba8d6:	d1f9      	bne.n	ba8cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba8da:	7813      	ldrb	r3, [r2, #0]
   ba8dc:	f043 0308 	orr.w	r3, r3, #8
   ba8e0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba8e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba8e4:	f7ff ba8d 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba8e8:	784a      	ldrb	r2, [r1, #1]
   ba8ea:	2a35      	cmp	r2, #53	; 0x35
   ba8ec:	d17f      	bne.n	ba9ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba8ee:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba8f0:	2e00      	cmp	r6, #0
   ba8f2:	f43f a9f8 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba8f6:	68a8      	ldr	r0, [r5, #8]
   ba8f8:	2100      	movs	r1, #0
   ba8fa:	f7fd fc2d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8fe:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba900:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba902:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba904:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba906:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba908:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba90a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba90c:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba90e:	725a      	strb	r2, [r3, #9]
   ba910:	f04f 0808 	mov.w	r8, #8
   ba914:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba916:	f04f 0a0c 	mov.w	sl, #12
   ba91a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba91c:	7a59      	ldrb	r1, [r3, #9]
   ba91e:	b2ba      	uxth	r2, r7
   ba920:	4291      	cmp	r1, r2
   ba922:	d811      	bhi.n	ba948 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba924:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba926:	2201      	movs	r2, #1
   ba928:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba92c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba92e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba932:	2800      	cmp	r0, #0
   ba934:	d14d      	bne.n	ba9d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba936:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba938:	f7ff ba63 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba93c:	00142200 	.word	0x00142200
   ba940:	00182600 	.word	0x00182600
   ba944:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba948:	886a      	ldrh	r2, [r5, #2]
   ba94a:	fb0a f607 	mul.w	r6, sl, r7
   ba94e:	3a08      	subs	r2, #8
   ba950:	42b2      	cmp	r2, r6
   ba952:	dde7      	ble.n	ba924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba954:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba956:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba958:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba95c:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba95e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba960:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba962:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba964:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba966:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba968:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba96a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba96c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba96e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba970:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba972:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba974:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba976:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba978:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba97a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba97c:	4433      	add	r3, r6
   ba97e:	78d2      	ldrb	r2, [r2, #3]
   ba980:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba982:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba986:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba98a:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba98e:	68a8      	ldr	r0, [r5, #8]
   ba990:	b289      	uxth	r1, r1
   ba992:	f7fd fbee 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba996:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba998:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba99c:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba9a0:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba9a4:	68a8      	ldr	r0, [r5, #8]
   ba9a6:	b289      	uxth	r1, r1
   ba9a8:	f7fd fbe3 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba9ac:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba9ae:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba9b2:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba9b6:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba9ba:	68a8      	ldr	r0, [r5, #8]
   ba9bc:	b289      	uxth	r1, r1
   ba9be:	f7fd fbcb 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9c2:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba9c4:	3701      	adds	r7, #1
   ba9c6:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba9c8:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba9ca:	f108 080c 	add.w	r8, r8, #12
   ba9ce:	d1a4      	bne.n	ba91a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba9d0:	e7a8      	b.n	ba924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9d2:	780b      	ldrb	r3, [r1, #0]
   ba9d4:	071e      	lsls	r6, r3, #28
   ba9d6:	d4ae      	bmi.n	ba936 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba9d8:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba9dc:	3104      	adds	r1, #4
   ba9de:	f009 fd13 	bl	c4408 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba9e4:	7813      	ldrb	r3, [r2, #0]
   ba9e6:	f043 0308 	orr.w	r3, r3, #8
   ba9ea:	7013      	strb	r3, [r2, #0]
   ba9ec:	e7a3      	b.n	ba936 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba9ee:	2a3c      	cmp	r2, #60	; 0x3c
   ba9f0:	f040 80bf 	bne.w	bab72 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba9f4:	884a      	ldrh	r2, [r1, #2]
   ba9f6:	2a28      	cmp	r2, #40	; 0x28
   ba9f8:	d002      	beq.n	baa00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba9fa:	2a40      	cmp	r2, #64	; 0x40
   ba9fc:	f040 80b9 	bne.w	bab72 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   baa00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa02:	2b00      	cmp	r3, #0
   baa04:	f43f a96f 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   baa08:	68aa      	ldr	r2, [r5, #8]
   baa0a:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   baa0c:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   baa0e:	68a8      	ldr	r0, [r5, #8]
   baa10:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baa12:	2102      	movs	r1, #2
   baa14:	f7fd fbad 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa18:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   baa1a:	68a8      	ldr	r0, [r5, #8]
   baa1c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baa1e:	2104      	movs	r1, #4
   baa20:	f7fd fb9a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa24:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa26:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   baa28:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa2a:	2108      	movs	r1, #8
   baa2c:	f7fd fb94 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   baa30:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa32:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baa34:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa36:	210c      	movs	r1, #12
   baa38:	f7fd fb8e 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baa3c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   baa40:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa42:	2110      	movs	r1, #16
   baa44:	f7fd fb88 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   baa48:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   baa4a:	886b      	ldrh	r3, [r5, #2]
   baa4c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa4e:	2b28      	cmp	r3, #40	; 0x28
   baa50:	d14b      	bne.n	baaea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   baa52:	2600      	movs	r6, #0
   baa54:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   baa56:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa58:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   baa5a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   baa5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa5e:	7d12      	ldrb	r2, [r2, #20]
   baa60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baa64:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   baa66:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa68:	7d52      	ldrb	r2, [r2, #21]
   baa6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   baa6e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   baa70:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa72:	7d92      	ldrb	r2, [r2, #22]
   baa74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   baa78:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa7a:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   baa7e:	68a8      	ldr	r0, [r5, #8]
   baa80:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa82:	2118      	movs	r1, #24
   baa84:	f7fd fb68 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa88:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   baa8a:	68a8      	ldr	r0, [r5, #8]
   baa8c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa8e:	211c      	movs	r1, #28
   baa90:	f7fd fb62 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa94:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   baa96:	68a8      	ldr	r0, [r5, #8]
   baa98:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa9a:	2120      	movs	r1, #32
   baa9c:	f7fd fb5c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaa0:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   baaa2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baaa4:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   baaa6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baaa8:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   baaaa:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baaac:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   baaae:	68a8      	ldr	r0, [r5, #8]
   baab0:	f7fd fb52 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baab4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baab6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baab8:	f04f 32ff 	mov.w	r2, #4294967295
   baabc:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baabe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   baac2:	b17a      	cbz	r2, baae4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baac4:	7819      	ldrb	r1, [r3, #0]
   baac6:	0708      	lsls	r0, r1, #28
   baac8:	d40c      	bmi.n	baae4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   baaca:	1d19      	adds	r1, r3, #4
   baacc:	3344      	adds	r3, #68	; 0x44
   baace:	f851 0b04 	ldr.w	r0, [r1], #4
   baad2:	f842 0b04 	str.w	r0, [r2], #4
   baad6:	4299      	cmp	r1, r3
   baad8:	d1f9      	bne.n	baace <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   baada:	6d22      	ldr	r2, [r4, #80]	; 0x50
   baadc:	7813      	ldrb	r3, [r2, #0]
   baade:	f043 0308 	orr.w	r3, r3, #8
   baae2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   baae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baae6:	f7ff b98c 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaea:	68a8      	ldr	r0, [r5, #8]
   baaec:	2114      	movs	r1, #20
   baaee:	f7fd fb33 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   baaf2:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaf4:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   baaf6:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaf8:	2118      	movs	r1, #24
   baafa:	f7fd fb2d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   baafe:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bab00:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bab02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bab04:	f892 2020 	ldrb.w	r2, [r2, #32]
   bab08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bab0c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bab0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bab10:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bab14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bab18:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bab1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bab1c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bab20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bab24:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bab26:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bab28:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bab2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bab30:	68a8      	ldr	r0, [r5, #8]
   bab32:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab34:	2124      	movs	r1, #36	; 0x24
   bab36:	f7fd fb0f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab3a:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bab3c:	68a8      	ldr	r0, [r5, #8]
   bab3e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab40:	2128      	movs	r1, #40	; 0x28
   bab42:	f7fd fb09 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab46:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bab48:	68a8      	ldr	r0, [r5, #8]
   bab4a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab4c:	212c      	movs	r1, #44	; 0x2c
   bab4e:	f7fd fb03 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab52:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bab54:	68a8      	ldr	r0, [r5, #8]
   bab56:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab58:	2130      	movs	r1, #48	; 0x30
   bab5a:	f7fd fafd 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab5e:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bab60:	2134      	movs	r1, #52	; 0x34
   bab62:	68a8      	ldr	r0, [r5, #8]
   bab64:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab66:	f7fd faf7 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab6a:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bab6c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bab6e:	213c      	movs	r1, #60	; 0x3c
   bab70:	e79d      	b.n	baaae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bab72:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bab76:	d12a      	bne.n	babce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bab78:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bab7a:	2e00      	cmp	r6, #0
   bab7c:	f43f a8b3 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bab80:	68a8      	ldr	r0, [r5, #8]
   bab82:	2100      	movs	r1, #0
   bab84:	f7fd fae8 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab88:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bab8a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bab8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bab8e:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bab90:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab92:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bab94:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bab96:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bab98:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bab9c:	f04f 32ff 	mov.w	r2, #4294967295
   baba0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   baba4:	6a1a      	ldr	r2, [r3, #32]
   baba6:	b17a      	cbz	r2, babc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baba8:	7819      	ldrb	r1, [r3, #0]
   babaa:	0709      	lsls	r1, r1, #28
   babac:	d40c      	bmi.n	babc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   babae:	1d19      	adds	r1, r3, #4
   babb0:	3314      	adds	r3, #20
   babb2:	f851 0b04 	ldr.w	r0, [r1], #4
   babb6:	f842 0b04 	str.w	r0, [r2], #4
   babba:	4299      	cmp	r1, r3
   babbc:	d1f9      	bne.n	babb2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   babbe:	6d62      	ldr	r2, [r4, #84]	; 0x54
   babc0:	7813      	ldrb	r3, [r2, #0]
   babc2:	f043 0308 	orr.w	r3, r3, #8
   babc6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   babc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   babca:	f7ff b91a 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   babce:	4aa1      	ldr	r2, [pc, #644]	; (bae54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   babd0:	4293      	cmp	r3, r2
   babd2:	f47f a888 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   babd6:	69a6      	ldr	r6, [r4, #24]
   babd8:	2e00      	cmp	r6, #0
   babda:	f43f a884 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   babde:	68a8      	ldr	r0, [r5, #8]
   babe0:	2100      	movs	r1, #0
   babe2:	f7fd fab9 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babe6:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   babe8:	69a3      	ldr	r3, [r4, #24]
   babea:	f04f 32ff 	mov.w	r2, #4294967295
   babee:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   babf0:	69a3      	ldr	r3, [r4, #24]
   babf2:	691a      	ldr	r2, [r3, #16]
   babf4:	b14a      	cbz	r2, bac0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   babf6:	7819      	ldrb	r1, [r3, #0]
   babf8:	070f      	lsls	r7, r1, #28
   babfa:	d406      	bmi.n	bac0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   babfc:	685b      	ldr	r3, [r3, #4]
   babfe:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bac00:	69a2      	ldr	r2, [r4, #24]
   bac02:	7813      	ldrb	r3, [r2, #0]
   bac04:	f043 0308 	orr.w	r3, r3, #8
   bac08:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bac0a:	69a3      	ldr	r3, [r4, #24]
   bac0c:	f7ff b8f9 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bac10:	784b      	ldrb	r3, [r1, #1]
   bac12:	2b72      	cmp	r3, #114	; 0x72
   bac14:	f040 80a4 	bne.w	bad60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bac18:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bac1a:	2b00      	cmp	r3, #0
   bac1c:	d069      	beq.n	bacf2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bac1e:	689b      	ldr	r3, [r3, #8]
   bac20:	2b00      	cmp	r3, #0
   bac22:	d066      	beq.n	bacf2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bac24:	688a      	ldr	r2, [r1, #8]
   bac26:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bac28:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bac2a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bac2c:	68a8      	ldr	r0, [r5, #8]
   bac2e:	689f      	ldr	r7, [r3, #8]
   bac30:	4631      	mov	r1, r6
   bac32:	f7fd fa9e 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac36:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bac38:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac3a:	68a8      	ldr	r0, [r5, #8]
   bac3c:	689e      	ldr	r6, [r3, #8]
   bac3e:	2104      	movs	r1, #4
   bac40:	f7fd fa8a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac44:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bac46:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac48:	68a8      	ldr	r0, [r5, #8]
   bac4a:	689e      	ldr	r6, [r3, #8]
   bac4c:	2108      	movs	r1, #8
   bac4e:	f7fd fa83 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac52:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bac54:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac56:	68a8      	ldr	r0, [r5, #8]
   bac58:	689e      	ldr	r6, [r3, #8]
   bac5a:	210c      	movs	r1, #12
   bac5c:	f7fd fa7c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac60:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bac62:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac64:	68a8      	ldr	r0, [r5, #8]
   bac66:	689e      	ldr	r6, [r3, #8]
   bac68:	2110      	movs	r1, #16
   bac6a:	f7fd fa82 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac6e:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bac70:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bac72:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bac74:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bac76:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bac78:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bac7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bac7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bac7e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bac80:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bac82:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bac84:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac86:	689e      	ldr	r6, [r3, #8]
   bac88:	7833      	ldrb	r3, [r6, #0]
   bac8a:	bb23      	cbnz	r3, bacd6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bac8c:	68a8      	ldr	r0, [r5, #8]
   bac8e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bac92:	f7fd fa6e 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac96:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bac98:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bac9a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bac9c:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bac9e:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   baca2:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   baca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   baca6:	689b      	ldr	r3, [r3, #8]
   baca8:	781a      	ldrb	r2, [r3, #0]
   bacaa:	2a00      	cmp	r2, #0
   bacac:	f040 865d 	bne.w	bb96a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bacb0:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bacb2:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bacb6:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bacb8:	b299      	uxth	r1, r3
   bacba:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bacbc:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bacbe:	d914      	bls.n	bacea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bacc0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bacc4:	d011      	beq.n	bacea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bacc6:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bacc8:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bacca:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   baccc:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bacce:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bacd0:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bacd2:	3301      	adds	r3, #1
   bacd4:	e7f0      	b.n	bacb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bacd6:	68a8      	ldr	r0, [r5, #8]
   bacd8:	2114      	movs	r1, #20
   bacda:	f7fd fa4a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bacde:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bace0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bace2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bace4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bace6:	7d92      	ldrb	r2, [r2, #22]
   bace8:	e7db      	b.n	baca2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bacea:	7813      	ldrb	r3, [r2, #0]
   bacec:	f043 0308 	orr.w	r3, r3, #8
   bacf0:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bacf2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bacf4:	2b00      	cmp	r3, #0
   bacf6:	f43e aff6 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bacfa:	689b      	ldr	r3, [r3, #8]
   bacfc:	2b00      	cmp	r3, #0
   bacfe:	f43e aff2 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bad02:	22b5      	movs	r2, #181	; 0xb5
   bad04:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bad06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad08:	689b      	ldr	r3, [r3, #8]
   bad0a:	2262      	movs	r2, #98	; 0x62
   bad0c:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bad0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad10:	689b      	ldr	r3, [r3, #8]
   bad12:	2202      	movs	r2, #2
   bad14:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bad16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad18:	689b      	ldr	r3, [r3, #8]
   bad1a:	2272      	movs	r2, #114	; 0x72
   bad1c:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bad1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad20:	886a      	ldrh	r2, [r5, #2]
   bad22:	689b      	ldr	r3, [r3, #8]
   bad24:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   bad26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad28:	689a      	ldr	r2, [r3, #8]
   bad2a:	886b      	ldrh	r3, [r5, #2]
   bad2c:	0a1b      	lsrs	r3, r3, #8
   bad2e:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bad30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad32:	886a      	ldrh	r2, [r5, #2]
   bad34:	6898      	ldr	r0, [r3, #8]
   bad36:	68a9      	ldr	r1, [r5, #8]
   bad38:	3006      	adds	r0, #6
   bad3a:	f009 fb65 	bl	c4408 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bad3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad40:	7b2a      	ldrb	r2, [r5, #12]
   bad42:	689b      	ldr	r3, [r3, #8]
   bad44:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bad48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bad4a:	7b6a      	ldrb	r2, [r5, #13]
   bad4c:	689b      	ldr	r3, [r3, #8]
   bad4e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bad52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bad54:	7813      	ldrb	r3, [r2, #0]
   bad56:	f043 0308 	orr.w	r3, r3, #8
   bad5a:	7013      	strb	r3, [r2, #0]
   bad5c:	f7fe bfc3 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bad60:	2b73      	cmp	r3, #115	; 0x73
   bad62:	d14d      	bne.n	bae00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bad64:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bad66:	780b      	ldrb	r3, [r1, #0]
   bad68:	071e      	lsls	r6, r3, #28
   bad6a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bad6e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bad72:	d543      	bpl.n	badfc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bad74:	0843      	lsrs	r3, r0, #1
   bad76:	f47e afb6 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bad7a:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bad7c:	f44f 7688 	mov.w	r6, #272	; 0x110
   bad80:	688b      	ldr	r3, [r1, #8]
   bad82:	437e      	muls	r6, r7
   bad84:	22b5      	movs	r2, #181	; 0xb5
   bad86:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bad88:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad8a:	689b      	ldr	r3, [r3, #8]
   bad8c:	4433      	add	r3, r6
   bad8e:	2262      	movs	r2, #98	; 0x62
   bad90:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bad92:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad94:	689b      	ldr	r3, [r3, #8]
   bad96:	4433      	add	r3, r6
   bad98:	2202      	movs	r2, #2
   bad9a:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bad9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad9e:	689b      	ldr	r3, [r3, #8]
   bada0:	4433      	add	r3, r6
   bada2:	2273      	movs	r2, #115	; 0x73
   bada4:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bada6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bada8:	886a      	ldrh	r2, [r5, #2]
   badaa:	689b      	ldr	r3, [r3, #8]
   badac:	4433      	add	r3, r6
   badae:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   badb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   badb2:	886a      	ldrh	r2, [r5, #2]
   badb4:	689b      	ldr	r3, [r3, #8]
   badb6:	4433      	add	r3, r6
   badb8:	0a12      	lsrs	r2, r2, #8
   badba:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   badbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   badbe:	886a      	ldrh	r2, [r5, #2]
   badc0:	6898      	ldr	r0, [r3, #8]
   badc2:	68a9      	ldr	r1, [r5, #8]
   badc4:	4430      	add	r0, r6
   badc6:	3006      	adds	r0, #6
   badc8:	f009 fb1e 	bl	c4408 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   badcc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   badce:	7b2a      	ldrb	r2, [r5, #12]
   badd0:	689b      	ldr	r3, [r3, #8]
   badd2:	4433      	add	r3, r6
   badd4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   badd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   badda:	7b6a      	ldrb	r2, [r5, #13]
   baddc:	689b      	ldr	r3, [r3, #8]
   badde:	441e      	add	r6, r3
   bade0:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bade4:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bade6:	780b      	ldrb	r3, [r1, #0]
   bade8:	2201      	movs	r2, #1
   badea:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   badee:	40ba      	lsls	r2, r7
   badf0:	4302      	orrs	r2, r0
   badf2:	f362 03c4 	bfi	r3, r2, #3, #2
   badf6:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   badf8:	f7fe bf75 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   badfc:	4617      	mov	r7, r2
   badfe:	e7bd      	b.n	bad7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bae00:	2b34      	cmp	r3, #52	; 0x34
   bae02:	d129      	bne.n	bae58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bae04:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bae06:	2b00      	cmp	r3, #0
   bae08:	f43e af6d 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bae0c:	689b      	ldr	r3, [r3, #8]
   bae0e:	2b00      	cmp	r3, #0
   bae10:	f43e af69 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bae14:	688a      	ldr	r2, [r1, #8]
   bae16:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bae18:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bae1a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bae1c:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bae1e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae20:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bae22:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bae24:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bae26:	68a8      	ldr	r0, [r5, #8]
   bae28:	689e      	ldr	r6, [r3, #8]
   bae2a:	2104      	movs	r1, #4
   bae2c:	f7fd f994 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae30:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bae32:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bae34:	68a8      	ldr	r0, [r5, #8]
   bae36:	689e      	ldr	r6, [r3, #8]
   bae38:	2108      	movs	r1, #8
   bae3a:	f7fd f99a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae3e:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bae40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bae42:	68a8      	ldr	r0, [r5, #8]
   bae44:	689e      	ldr	r6, [r3, #8]
   bae46:	210a      	movs	r1, #10
   bae48:	f7fd f993 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae4c:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bae4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bae50:	e780      	b.n	bad54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bae52:	bf00      	nop
   bae54:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bae58:	2b13      	cmp	r3, #19
   bae5a:	d14a      	bne.n	baef2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bae5c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bae5e:	2b00      	cmp	r3, #0
   bae60:	f43e af41 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bae64:	688a      	ldr	r2, [r1, #8]
   bae66:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bae68:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bae6a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bae6c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae6e:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bae70:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bae72:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bae74:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae76:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bae78:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bae7a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bae7c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae7e:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bae80:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bae82:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bae84:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae86:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bae88:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bae8a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bae8c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae8e:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bae90:	729a      	strb	r2, [r3, #10]
   bae92:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bae94:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bae96:	7a3a      	ldrb	r2, [r7, #8]
   bae98:	b2f3      	uxtb	r3, r6
   bae9a:	429a      	cmp	r2, r3
   bae9c:	d809      	bhi.n	baeb2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bae9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   baea0:	2201      	movs	r2, #1
   baea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baea6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   baea8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   baeaa:	b9a8      	cbnz	r0, baed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   baeac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   baeae:	f7fe bfa8 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   baeb2:	886b      	ldrh	r3, [r5, #2]
   baeb4:	3b08      	subs	r3, #8
   baeb6:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   baeba:	ea4f 0186 	mov.w	r1, r6, lsl #2
   baebe:	ddee      	ble.n	bae9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   baec0:	3108      	adds	r1, #8
   baec2:	68a8      	ldr	r0, [r5, #8]
   baec4:	b289      	uxth	r1, r1
   baec6:	f7fd f947 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baeca:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   baece:	3601      	adds	r6, #1
   baed0:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   baed2:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   baed4:	d1de      	bne.n	bae94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   baed6:	e7e2      	b.n	bae9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baed8:	780b      	ldrb	r3, [r1, #0]
   baeda:	071b      	lsls	r3, r3, #28
   baedc:	d4e6      	bmi.n	baeac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   baede:	2248      	movs	r2, #72	; 0x48
   baee0:	3104      	adds	r1, #4
   baee2:	f009 fa91 	bl	c4408 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   baee6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   baee8:	7813      	ldrb	r3, [r2, #0]
   baeea:	f043 0308 	orr.w	r3, r3, #8
   baeee:	7013      	strb	r3, [r2, #0]
   baef0:	e7dc      	b.n	baeac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   baef2:	2b15      	cmp	r3, #21
   baef4:	f47e aef7 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   baef8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   baefa:	2b00      	cmp	r3, #0
   baefc:	f43e aef3 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baf00:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baf02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf04:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baf06:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   baf08:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baf0a:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   baf0c:	3101      	adds	r1, #1
   baf0e:	2908      	cmp	r1, #8
   baf10:	d1f7      	bne.n	baf02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   baf12:	68a8      	ldr	r0, [r5, #8]
   baf14:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   baf16:	f7fd f92c 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baf1a:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baf1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   baf1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baf20:	7a92      	ldrb	r2, [r2, #10]
   baf22:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baf24:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baf26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf28:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baf2a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baf2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baf2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf30:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baf32:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baf34:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baf36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf38:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baf3a:	73da      	strb	r2, [r3, #15]
   baf3c:	2610      	movs	r6, #16
   baf3e:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baf40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baf42:	7b51      	ldrb	r1, [r2, #13]
   baf44:	b2da      	uxtb	r2, r3
   baf46:	4291      	cmp	r1, r2
   baf48:	d80b      	bhi.n	baf62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baf4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baf4c:	2201      	movs	r2, #1
   baf4e:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf52:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baf54:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baf58:	2800      	cmp	r0, #0
   baf5a:	d17f      	bne.n	bb05c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baf5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baf5e:	f7fe bf50 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baf62:	886a      	ldrh	r2, [r5, #2]
   baf64:	3a10      	subs	r2, #16
   baf66:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baf6a:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baf6e:	ddec      	ble.n	baf4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baf70:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baf72:	46b4      	mov	ip, r6
   baf74:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baf76:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf78:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baf7a:	4440      	add	r0, r8
   baf7c:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baf7e:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baf82:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baf84:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf88:	4437      	add	r7, r6
   baf8a:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf8c:	4440      	add	r0, r8
   baf8e:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baf90:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf92:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baf94:	2a03      	cmp	r2, #3
   baf96:	d80b      	bhi.n	bafb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf98:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf9a:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf9c:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bafa0:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bafa4:	4440      	add	r0, r8
   bafa6:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bafa8:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bafac:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bafb0:	3201      	adds	r2, #1
   bafb2:	2a08      	cmp	r2, #8
   bafb4:	f10c 0c01 	add.w	ip, ip, #1
   bafb8:	d1dd      	bne.n	baf76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bafba:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bafbc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bafbe:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bafc0:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bafc2:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bafc6:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bafc8:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bafca:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bafcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafce:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bafd0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bafd4:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bafd6:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bafd8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bafda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafdc:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bafde:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bafe2:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bafe4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bafe6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bafe8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafea:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bafec:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baff0:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baff2:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   baff4:	3118      	adds	r1, #24
   baff6:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   baffa:	68a8      	ldr	r0, [r5, #8]
   baffc:	b289      	uxth	r1, r1
   baffe:	f7fd f8b8 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb002:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb004:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb006:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb00a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb00c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb00e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb010:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb012:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb018:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb01a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb01c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb01e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb020:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb022:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb026:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb028:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb02a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb02c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb02e:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb030:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb034:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb036:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb038:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb03a:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb03c:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb03e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb042:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb044:	68aa      	ldr	r2, [r5, #8]
   bb046:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb048:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb04a:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb04c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb050:	f106 0620 	add.w	r6, r6, #32
   bb054:	463b      	mov	r3, r7
   bb056:	f47f af73 	bne.w	baf40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb05a:	e776      	b.n	baf4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb05c:	780b      	ldrb	r3, [r1, #0]
   bb05e:	071f      	lsls	r7, r3, #28
   bb060:	f53f af7c 	bmi.w	baf5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb064:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb068:	3102      	adds	r1, #2
   bb06a:	f009 f9cd 	bl	c4408 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb06e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb070:	7813      	ldrb	r3, [r2, #0]
   bb072:	f043 0308 	orr.w	r3, r3, #8
   bb076:	7013      	strb	r3, [r2, #0]
   bb078:	e770      	b.n	baf5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb07a:	680b      	ldr	r3, [r1, #0]
   bb07c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb080:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb084:	d12f      	bne.n	bb0e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb086:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb088:	2b00      	cmp	r3, #0
   bb08a:	f43e ae2c 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb08e:	688a      	ldr	r2, [r1, #8]
   bb090:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb092:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb094:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb096:	68a8      	ldr	r0, [r5, #8]
   bb098:	2102      	movs	r1, #2
   bb09a:	f7fd f86a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb09e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb0a0:	68a8      	ldr	r0, [r5, #8]
   bb0a2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb0a4:	2104      	movs	r1, #4
   bb0a6:	f7fd f857 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0aa:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb0ac:	68a8      	ldr	r0, [r5, #8]
   bb0ae:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb0b0:	2108      	movs	r1, #8
   bb0b2:	f7fd f851 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0b6:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb0b8:	68a8      	ldr	r0, [r5, #8]
   bb0ba:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb0bc:	210c      	movs	r1, #12
   bb0be:	f7fd f858 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0c2:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb0c4:	68a8      	ldr	r0, [r5, #8]
   bb0c6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb0c8:	210e      	movs	r1, #14
   bb0ca:	f7fd f852 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0ce:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb0d0:	68a8      	ldr	r0, [r5, #8]
   bb0d2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb0d4:	2110      	movs	r1, #16
   bb0d6:	f7fd f84c 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0da:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb0dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb0de:	2201      	movs	r2, #1
   bb0e0:	751a      	strb	r2, [r3, #20]
   bb0e2:	f7fe be00 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb0e6:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb0ea:	f47e adfc 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb0ee:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb0f0:	2e00      	cmp	r6, #0
   bb0f2:	f43e adf8 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb0f6:	68a8      	ldr	r0, [r5, #8]
   bb0f8:	2100      	movs	r1, #0
   bb0fa:	f7fd f83a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0fe:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb100:	68a8      	ldr	r0, [r5, #8]
   bb102:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb104:	2102      	movs	r1, #2
   bb106:	f7fd f834 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb10a:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb10c:	68a8      	ldr	r0, [r5, #8]
   bb10e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb110:	2104      	movs	r1, #4
   bb112:	f7fd f82e 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb116:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb118:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb11a:	f04f 32ff 	mov.w	r2, #4294967295
   bb11e:	609a      	str	r2, [r3, #8]
   bb120:	f7fe bde1 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb124:	680b      	ldr	r3, [r1, #0]
   bb126:	4ab0      	ldr	r2, [pc, #704]	; (bb3e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb128:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb12c:	4293      	cmp	r3, r2
   bb12e:	f47e adda 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb132:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb134:	2b00      	cmp	r3, #0
   bb136:	f43e add6 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb13a:	688a      	ldr	r2, [r1, #8]
   bb13c:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb13e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb140:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb142:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb144:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb146:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb148:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb14a:	68a8      	ldr	r0, [r5, #8]
   bb14c:	2102      	movs	r1, #2
   bb14e:	f7fd f810 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb152:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb154:	68a8      	ldr	r0, [r5, #8]
   bb156:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb158:	2104      	movs	r1, #4
   bb15a:	f7fd f80a 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb15e:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb160:	68a8      	ldr	r0, [r5, #8]
   bb162:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb164:	2106      	movs	r1, #6
   bb166:	f7fd f804 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb16a:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb16c:	68a8      	ldr	r0, [r5, #8]
   bb16e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb170:	2108      	movs	r1, #8
   bb172:	f7fc fff1 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb176:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb178:	68a8      	ldr	r0, [r5, #8]
   bb17a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb17c:	210c      	movs	r1, #12
   bb17e:	f7fc ffeb 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb182:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb184:	68a8      	ldr	r0, [r5, #8]
   bb186:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb188:	2110      	movs	r1, #16
   bb18a:	f7fc ffe5 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb18e:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb190:	68a8      	ldr	r0, [r5, #8]
   bb192:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb194:	2114      	movs	r1, #20
   bb196:	f7fc ffdf 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb19a:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb19c:	68a8      	ldr	r0, [r5, #8]
   bb19e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb1a0:	2118      	movs	r1, #24
   bb1a2:	f7fc ffd9 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1a6:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb1a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb1aa:	f04f 32ff 	mov.w	r2, #4294967295
   bb1ae:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb1b0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb1b4:	b17a      	cbz	r2, bb1d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb1b6:	7819      	ldrb	r1, [r3, #0]
   bb1b8:	070e      	lsls	r6, r1, #28
   bb1ba:	d40c      	bmi.n	bb1d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb1bc:	1d19      	adds	r1, r3, #4
   bb1be:	3320      	adds	r3, #32
   bb1c0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb1c4:	f842 0b04 	str.w	r0, [r2], #4
   bb1c8:	4299      	cmp	r1, r3
   bb1ca:	d1f9      	bne.n	bb1c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb1ce:	7813      	ldrb	r3, [r2, #0]
   bb1d0:	f043 0308 	orr.w	r3, r3, #8
   bb1d4:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb1d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb1d8:	f7fe be13 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb1dc:	4a83      	ldr	r2, [pc, #524]	; (bb3ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb1de:	4293      	cmp	r3, r2
   bb1e0:	d158      	bne.n	bb294 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb1e2:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb1e6:	2f00      	cmp	r7, #0
   bb1e8:	f43e ad7d 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb1ec:	68a8      	ldr	r0, [r5, #8]
   bb1ee:	2100      	movs	r1, #0
   bb1f0:	f7fc ffb2 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1f4:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb1f6:	68a8      	ldr	r0, [r5, #8]
   bb1f8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb1fc:	2108      	movs	r1, #8
   bb1fe:	f7fc ffab 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb202:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb204:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb206:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb20a:	210c      	movs	r1, #12
   bb20c:	f7fc ffa4 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb210:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb212:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb214:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb218:	4631      	mov	r1, r6
   bb21a:	f7fc ff9d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb21e:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb220:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb222:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb226:	2114      	movs	r1, #20
   bb228:	f7fc ff96 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb22c:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb22e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb230:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb234:	2118      	movs	r1, #24
   bb236:	f7fc ff8f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb23a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb23e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb242:	211c      	movs	r1, #28
   bb244:	f7fc ff88 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb248:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb24a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb24c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb250:	2120      	movs	r1, #32
   bb252:	f7fc ff81 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb256:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb258:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb25c:	f04f 32ff 	mov.w	r2, #4294967295
   bb260:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb262:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb268:	b182      	cbz	r2, bb28c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb26a:	7819      	ldrb	r1, [r3, #0]
   bb26c:	0709      	lsls	r1, r1, #28
   bb26e:	d40d      	bmi.n	bb28c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb270:	1d19      	adds	r1, r3, #4
   bb272:	3328      	adds	r3, #40	; 0x28
   bb274:	f851 0b04 	ldr.w	r0, [r1], #4
   bb278:	f842 0b04 	str.w	r0, [r2], #4
   bb27c:	4299      	cmp	r1, r3
   bb27e:	d1f9      	bne.n	bb274 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb280:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb284:	7813      	ldrb	r3, [r2, #0]
   bb286:	f043 0308 	orr.w	r3, r3, #8
   bb28a:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb28c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb290:	f7fe bdb7 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb294:	784b      	ldrb	r3, [r1, #1]
   bb296:	2b02      	cmp	r3, #2
   bb298:	d158      	bne.n	bb34c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb29a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb29e:	2e00      	cmp	r6, #0
   bb2a0:	f43e ad21 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb2a4:	68a8      	ldr	r0, [r5, #8]
   bb2a6:	2100      	movs	r1, #0
   bb2a8:	f7fc ff56 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2ac:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb2ae:	68a8      	ldr	r0, [r5, #8]
   bb2b0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb2b4:	2104      	movs	r1, #4
   bb2b6:	f7fc ff5c 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2ba:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb2bc:	68a8      	ldr	r0, [r5, #8]
   bb2be:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb2c2:	2106      	movs	r1, #6
   bb2c4:	f7fc ff55 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2c8:	8170      	strh	r0, [r6, #10]
   bb2ca:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb2cc:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb2d0:	886b      	ldrh	r3, [r5, #2]
   bb2d2:	7a7a      	ldrb	r2, [r7, #9]
   bb2d4:	b2b1      	uxth	r1, r6
   bb2d6:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb2da:	d320      	bcc.n	bb31e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb2dc:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb2e0:	886a      	ldrh	r2, [r5, #2]
   bb2e2:	7a73      	ldrb	r3, [r6, #9]
   bb2e4:	08db      	lsrs	r3, r3, #3
   bb2e6:	3302      	adds	r3, #2
   bb2e8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb2ec:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb2f0:	d826      	bhi.n	bb340 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2f2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb2f6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb2fa:	b160      	cbz	r0, bb316 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb2fc:	780b      	ldrb	r3, [r1, #0]
   bb2fe:	071a      	lsls	r2, r3, #28
   bb300:	d409      	bmi.n	bb316 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb302:	2288      	movs	r2, #136	; 0x88
   bb304:	3104      	adds	r1, #4
   bb306:	f009 f87f 	bl	c4408 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb30a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb30e:	7813      	ldrb	r3, [r2, #0]
   bb310:	f043 0308 	orr.w	r3, r3, #8
   bb314:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb316:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb31a:	f7fe bd72 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb31e:	3b08      	subs	r3, #8
   bb320:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb324:	ddda      	ble.n	bb2dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb326:	0089      	lsls	r1, r1, #2
   bb328:	3108      	adds	r1, #8
   bb32a:	68a8      	ldr	r0, [r5, #8]
   bb32c:	b289      	uxth	r1, r1
   bb32e:	f7fc ff13 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb332:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb336:	3601      	adds	r6, #1
   bb338:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb33a:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb33c:	d1c6      	bne.n	bb2cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb33e:	e7cd      	b.n	bb2dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb340:	68a8      	ldr	r0, [r5, #8]
   bb342:	f7fc ff09 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb346:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb34a:	e7d2      	b.n	bb2f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb34c:	2b03      	cmp	r3, #3
   bb34e:	d14f      	bne.n	bb3f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb350:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb354:	2900      	cmp	r1, #0
   bb356:	f43e acc6 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb35a:	886a      	ldrh	r2, [r5, #2]
   bb35c:	1f13      	subs	r3, r2, #4
   bb35e:	bf48      	it	mi
   bb360:	1cd3      	addmi	r3, r2, #3
   bb362:	10db      	asrs	r3, r3, #3
   bb364:	2700      	movs	r7, #0
   bb366:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb36a:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb36c:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb36e:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb372:	3b04      	subs	r3, #4
   bb374:	42bb      	cmp	r3, r7
   bb376:	dc08      	bgt.n	bb38a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb378:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb37c:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb380:	bb10      	cbnz	r0, bb3c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb382:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb386:	f7fe bd3c 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb38a:	fa1f f887 	uxth.w	r8, r7
   bb38e:	f108 0104 	add.w	r1, r8, #4
   bb392:	68a8      	ldr	r0, [r5, #8]
   bb394:	b289      	uxth	r1, r1
   bb396:	f7fc fedf 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb39a:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb39e:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb3a2:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb3a6:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb3aa:	68a8      	ldr	r0, [r5, #8]
   bb3ac:	b289      	uxth	r1, r1
   bb3ae:	f7fc fed3 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb3b2:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb3b6:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb3b8:	3601      	adds	r6, #1
   bb3ba:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb3bc:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb3c0:	f107 0708 	add.w	r7, r7, #8
   bb3c4:	d1d2      	bne.n	bb36c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb3c6:	e7d7      	b.n	bb378 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb3c8:	780b      	ldrb	r3, [r1, #0]
   bb3ca:	071b      	lsls	r3, r3, #28
   bb3cc:	d4d9      	bmi.n	bb382 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb3ce:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb3d2:	3108      	adds	r1, #8
   bb3d4:	3004      	adds	r0, #4
   bb3d6:	f009 f817 	bl	c4408 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3da:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb3de:	7813      	ldrb	r3, [r2, #0]
   bb3e0:	f043 0308 	orr.w	r3, r3, #8
   bb3e4:	7013      	strb	r3, [r2, #0]
   bb3e6:	e7cc      	b.n	bb382 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb3e8:	001c0300 	.word	0x001c0300
   bb3ec:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb3f0:	2b10      	cmp	r3, #16
   bb3f2:	f47e ac78 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb3f6:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb3fa:	2e00      	cmp	r6, #0
   bb3fc:	f43e ac73 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb400:	68a8      	ldr	r0, [r5, #8]
   bb402:	2100      	movs	r1, #0
   bb404:	f7fc fea8 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb408:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb40a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb40c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb410:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb412:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb414:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb416:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb41a:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb41c:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb41e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb420:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb424:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb426:	74da      	strb	r2, [r3, #19]
   bb428:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb42a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb42e:	7cc6      	ldrb	r6, [r0, #19]
   bb430:	b28a      	uxth	r2, r1
   bb432:	4296      	cmp	r6, r2
   bb434:	d80c      	bhi.n	bb450 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb436:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb43a:	f04f 32ff 	mov.w	r2, #4294967295
   bb43e:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb440:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb446:	bb62      	cbnz	r2, bb4a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb448:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb44c:	f7fe bcd9 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb450:	886a      	ldrh	r2, [r5, #2]
   bb452:	3a10      	subs	r2, #16
   bb454:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb458:	dded      	ble.n	bb436 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb45a:	68aa      	ldr	r2, [r5, #8]
   bb45c:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb45e:	1d0a      	adds	r2, r1, #4
   bb460:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb464:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb466:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb468:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb46a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb46e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb470:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb474:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb476:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb478:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb47a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb47e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb480:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb484:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb486:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb488:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb48a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb48e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb490:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb494:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb496:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb498:	2907      	cmp	r1, #7
   bb49a:	f103 0304 	add.w	r3, r3, #4
   bb49e:	d1c4      	bne.n	bb42a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb4a0:	e7c9      	b.n	bb436 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb4a2:	7819      	ldrb	r1, [r3, #0]
   bb4a4:	070f      	lsls	r7, r1, #28
   bb4a6:	d4cf      	bmi.n	bb448 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb4a8:	1d19      	adds	r1, r3, #4
   bb4aa:	3330      	adds	r3, #48	; 0x30
   bb4ac:	f851 0b04 	ldr.w	r0, [r1], #4
   bb4b0:	f842 0b04 	str.w	r0, [r2], #4
   bb4b4:	4299      	cmp	r1, r3
   bb4b6:	d1f9      	bne.n	bb4ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb4b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb4bc:	7813      	ldrb	r3, [r2, #0]
   bb4be:	f043 0308 	orr.w	r3, r3, #8
   bb4c2:	7013      	strb	r3, [r2, #0]
   bb4c4:	e7c0      	b.n	bb448 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb4c6:	680b      	ldr	r3, [r1, #0]
   bb4c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb4cc:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb4d0:	d16a      	bne.n	bb5a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb4d2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb4d6:	2b00      	cmp	r3, #0
   bb4d8:	f43e ac05 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb4dc:	7818      	ldrb	r0, [r3, #0]
   bb4de:	7859      	ldrb	r1, [r3, #1]
   bb4e0:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb4e2:	bf36      	itet	cc
   bb4e4:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb4e8:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb4ea:	1a52      	subcc	r2, r2, r1
   bb4ec:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb4ee:	2a0e      	cmp	r2, #14
   bb4f0:	d84b      	bhi.n	bb58a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb4f2:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb4f4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb4f8:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb4fa:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb4fc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb500:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb502:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb504:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb506:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb50a:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb50c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb510:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb512:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb514:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb516:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb51a:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb51c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb520:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb522:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb524:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb526:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb52a:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb52c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb530:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb532:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb534:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb536:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb53a:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb53c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb540:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb542:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb544:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb546:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb54a:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb54c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb550:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb552:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb554:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb556:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb55a:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb55c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb560:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb562:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb564:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb566:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb56a:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb56c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb570:	7813      	ldrb	r3, [r2, #0]
   bb572:	3301      	adds	r3, #1
   bb574:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb576:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb57a:	781a      	ldrb	r2, [r3, #0]
   bb57c:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb57e:	f47e abb2 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb582:	2200      	movs	r2, #0
   bb584:	701a      	strb	r2, [r3, #0]
   bb586:	f7fe bbae 	b.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb58a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb58e:	b923      	cbnz	r3, bb59a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb590:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb594:	2b00      	cmp	r3, #0
   bb596:	f43e aba6 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb59a:	4996      	ldr	r1, [pc, #600]	; (bb7f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb59c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb5a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb5a4:	f004 bb21 	b.w	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb5a8:	784b      	ldrb	r3, [r1, #1]
   bb5aa:	2b80      	cmp	r3, #128	; 0x80
   bb5ac:	f47e ab9b 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb5b0:	884b      	ldrh	r3, [r1, #2]
   bb5b2:	2ba4      	cmp	r3, #164	; 0xa4
   bb5b4:	f63e ab97 	bhi.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb5b8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb5bc:	2a00      	cmp	r2, #0
   bb5be:	f43e ab92 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb5c2:	7810      	ldrb	r0, [r2, #0]
   bb5c4:	7851      	ldrb	r1, [r2, #1]
   bb5c6:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb5c8:	bf36      	itet	cc
   bb5ca:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb5cc:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb5ce:	1a5b      	subcc	r3, r3, r1
   bb5d0:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb5d2:	2bf8      	cmp	r3, #248	; 0xf8
   bb5d4:	d84f      	bhi.n	bb676 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb5d6:	23ac      	movs	r3, #172	; 0xac
   bb5d8:	fb03 2200 	mla	r2, r3, r0, r2
   bb5dc:	21b5      	movs	r1, #181	; 0xb5
   bb5de:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb5e0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb5e4:	7811      	ldrb	r1, [r2, #0]
   bb5e6:	fb03 2201 	mla	r2, r3, r1, r2
   bb5ea:	2162      	movs	r1, #98	; 0x62
   bb5ec:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb5ee:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb5f2:	7811      	ldrb	r1, [r2, #0]
   bb5f4:	fb03 2201 	mla	r2, r3, r1, r2
   bb5f8:	2113      	movs	r1, #19
   bb5fa:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb5fc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb600:	7811      	ldrb	r1, [r2, #0]
   bb602:	fb03 2201 	mla	r2, r3, r1, r2
   bb606:	2180      	movs	r1, #128	; 0x80
   bb608:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb60a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb60e:	7811      	ldrb	r1, [r2, #0]
   bb610:	fb03 2201 	mla	r2, r3, r1, r2
   bb614:	8869      	ldrh	r1, [r5, #2]
   bb616:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb618:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb61c:	7811      	ldrb	r1, [r2, #0]
   bb61e:	fb03 2201 	mla	r2, r3, r1, r2
   bb622:	8869      	ldrh	r1, [r5, #2]
   bb624:	0a09      	lsrs	r1, r1, #8
   bb626:	71d1      	strb	r1, [r2, #7]
   bb628:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb62a:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb62c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb630:	b28e      	uxth	r6, r1
   bb632:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb634:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb636:	d907      	bls.n	bb648 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb638:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb63a:	fb03 2200 	mla	r2, r3, r0, r2
   bb63e:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb640:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb642:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb644:	3101      	adds	r1, #1
   bb646:	e7f0      	b.n	bb62a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb648:	fb03 2200 	mla	r2, r3, r0, r2
   bb64c:	7b29      	ldrb	r1, [r5, #12]
   bb64e:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb652:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb656:	7b69      	ldrb	r1, [r5, #13]
   bb658:	7810      	ldrb	r0, [r2, #0]
   bb65a:	fb03 2300 	mla	r3, r3, r0, r2
   bb65e:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb662:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb666:	7813      	ldrb	r3, [r2, #0]
   bb668:	3301      	adds	r3, #1
   bb66a:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb66c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb670:	781a      	ldrb	r2, [r3, #0]
   bb672:	2afa      	cmp	r2, #250	; 0xfa
   bb674:	e783      	b.n	bb57e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb676:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb67a:	b923      	cbnz	r3, bb686 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb67c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb680:	2b00      	cmp	r3, #0
   bb682:	f43e ab30 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb686:	495c      	ldr	r1, [pc, #368]	; (bb7f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb688:	e788      	b.n	bb59c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb68a:	680b      	ldr	r3, [r1, #0]
   bb68c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb690:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb694:	f040 80b2 	bne.w	bb7fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb698:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb69c:	2f00      	cmp	r7, #0
   bb69e:	f43e ab22 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb6a2:	68a8      	ldr	r0, [r5, #8]
   bb6a4:	2100      	movs	r1, #0
   bb6a6:	f7fc fd57 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6aa:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb6ac:	68a8      	ldr	r0, [r5, #8]
   bb6ae:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb6b2:	2104      	movs	r1, #4
   bb6b4:	f7fc fd5d 	bl	b8172 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb6b8:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb6ba:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb6bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6c0:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb6c2:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb6c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb6c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6ca:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb6cc:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb6ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb6d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6d4:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb6d6:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb6d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb6da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6de:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb6e0:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb6e2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb6e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6e8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb6ea:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb6ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb6ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb6f2:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb6f4:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6f6:	210c      	movs	r1, #12
   bb6f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb6fa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6fe:	f7fc fd2b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb702:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb704:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb706:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb70a:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb70c:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb70e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb710:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb714:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb716:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb718:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb71a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb71e:	2114      	movs	r1, #20
   bb720:	f7fc fd1a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb724:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb726:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb728:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb72c:	2118      	movs	r1, #24
   bb72e:	f7fc fd13 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb732:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb734:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb736:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb73a:	211c      	movs	r1, #28
   bb73c:	f7fc fd0c 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb740:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb742:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb744:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb748:	2120      	movs	r1, #32
   bb74a:	f7fc fd05 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb74e:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb750:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb752:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb756:	2124      	movs	r1, #36	; 0x24
   bb758:	f7fc fcfe 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb75c:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb75e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb760:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb764:	4631      	mov	r1, r6
   bb766:	f7fc fcf7 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb76a:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb76c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb76e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb772:	212c      	movs	r1, #44	; 0x2c
   bb774:	f7fc fcf0 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb778:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb77a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb77c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb780:	2130      	movs	r1, #48	; 0x30
   bb782:	f7fc fce9 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb786:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb788:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb78c:	68a8      	ldr	r0, [r5, #8]
   bb78e:	2134      	movs	r1, #52	; 0x34
   bb790:	f7fc fce2 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb794:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb796:	68a8      	ldr	r0, [r5, #8]
   bb798:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb79c:	2138      	movs	r1, #56	; 0x38
   bb79e:	f7fc fcdb 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7a2:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb7a4:	68a8      	ldr	r0, [r5, #8]
   bb7a6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb7aa:	213c      	movs	r1, #60	; 0x3c
   bb7ac:	f7fc fcd4 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7b0:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb7b2:	68a8      	ldr	r0, [r5, #8]
   bb7b4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb7b8:	2140      	movs	r1, #64	; 0x40
   bb7ba:	f7fc fccd 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7be:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb7c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb7c4:	f04f 32ff 	mov.w	r2, #4294967295
   bb7c8:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb7ca:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb7ce:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb7d0:	b160      	cbz	r0, bb7ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb7d2:	780b      	ldrb	r3, [r1, #0]
   bb7d4:	071e      	lsls	r6, r3, #28
   bb7d6:	d409      	bmi.n	bb7ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb7d8:	2248      	movs	r2, #72	; 0x48
   bb7da:	3104      	adds	r1, #4
   bb7dc:	f008 fe14 	bl	c4408 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb7e0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb7e4:	7813      	ldrb	r3, [r2, #0]
   bb7e6:	f043 0308 	orr.w	r3, r3, #8
   bb7ea:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb7ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb7f0:	f7fe bb07 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb7f4:	000c7001 	.word	0x000c7001
   bb7f8:	000c703e 	.word	0x000c703e
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb7fc:	4a5d      	ldr	r2, [pc, #372]	; (bb974 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb7fe:	4293      	cmp	r3, r2
   bb800:	d156      	bne.n	bb8b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb802:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb806:	2e00      	cmp	r6, #0
   bb808:	f43e aa6d 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb80c:	68a8      	ldr	r0, [r5, #8]
   bb80e:	2100      	movs	r1, #0
   bb810:	f7fc fca2 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb814:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb816:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb818:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb81c:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb81e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb820:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb822:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb826:	2108      	movs	r1, #8
   bb828:	f7fc fc96 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb82c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb82e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb830:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb834:	210c      	movs	r1, #12
   bb836:	f7fc fc8f 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb83a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb83c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb83e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb842:	2110      	movs	r1, #16
   bb844:	f7fc fc88 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb848:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb84a:	68a8      	ldr	r0, [r5, #8]
   bb84c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb850:	2114      	movs	r1, #20
   bb852:	f7fc fc81 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb856:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb858:	68a8      	ldr	r0, [r5, #8]
   bb85a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb85e:	2118      	movs	r1, #24
   bb860:	f7fc fc7a 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb864:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb866:	68a8      	ldr	r0, [r5, #8]
   bb868:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb86c:	211c      	movs	r1, #28
   bb86e:	f7fc fc73 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb872:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb874:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb878:	f04f 32ff 	mov.w	r2, #4294967295
   bb87c:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb87e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb884:	b182      	cbz	r2, bb8a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb886:	7819      	ldrb	r1, [r3, #0]
   bb888:	0708      	lsls	r0, r1, #28
   bb88a:	d40d      	bmi.n	bb8a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb88c:	1d19      	adds	r1, r3, #4
   bb88e:	3324      	adds	r3, #36	; 0x24
   bb890:	f851 0b04 	ldr.w	r0, [r1], #4
   bb894:	f842 0b04 	str.w	r0, [r2], #4
   bb898:	4299      	cmp	r1, r3
   bb89a:	d1f9      	bne.n	bb890 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb89c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb8a0:	7813      	ldrb	r3, [r2, #0]
   bb8a2:	f043 0308 	orr.w	r3, r3, #8
   bb8a6:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb8a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb8ac:	f7fe baa9 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb8b0:	4a31      	ldr	r2, [pc, #196]	; (bb978 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb8b2:	4293      	cmp	r3, r2
   bb8b4:	f47e aa17 	bne.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb8b8:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb8bc:	2e00      	cmp	r6, #0
   bb8be:	f43e aa12 	beq.w	b9ce6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb8c2:	68a8      	ldr	r0, [r5, #8]
   bb8c4:	2100      	movs	r1, #0
   bb8c6:	f7fc fc47 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8ca:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb8cc:	68a8      	ldr	r0, [r5, #8]
   bb8ce:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb8d2:	2108      	movs	r1, #8
   bb8d4:	f7fc fc40 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8d8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8da:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb8dc:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8e0:	210c      	movs	r1, #12
   bb8e2:	f7fc fc39 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb8e6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb8ea:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8ee:	2110      	movs	r1, #16
   bb8f0:	f7fc fc32 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb8f4:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8f6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb8f8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8fc:	2114      	movs	r1, #20
   bb8fe:	f7fc fc2b 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb902:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb904:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb906:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb90a:	2118      	movs	r1, #24
   bb90c:	f7fc fc24 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb910:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb912:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb914:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb918:	211c      	movs	r1, #28
   bb91a:	f7fc fc1d 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb91e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb920:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb922:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb926:	2120      	movs	r1, #32
   bb928:	f7fc fc16 	bl	b8158 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb92c:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb92e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb932:	f04f 32ff 	mov.w	r2, #4294967295
   bb936:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb938:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb93c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb93e:	b182      	cbz	r2, bb962 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb940:	7819      	ldrb	r1, [r3, #0]
   bb942:	0709      	lsls	r1, r1, #28
   bb944:	d40d      	bmi.n	bb962 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb946:	1d19      	adds	r1, r3, #4
   bb948:	3328      	adds	r3, #40	; 0x28
   bb94a:	f851 0b04 	ldr.w	r0, [r1], #4
   bb94e:	f842 0b04 	str.w	r0, [r2], #4
   bb952:	4299      	cmp	r1, r3
   bb954:	d1f9      	bne.n	bb94a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb956:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb95a:	7813      	ldrb	r3, [r2, #0]
   bb95c:	f043 0308 	orr.w	r3, r3, #8
   bb960:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb962:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb966:	f7fe ba4c 	b.w	b9e02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb96a:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb96c:	2018      	movs	r0, #24
   bb96e:	f7ff b9a2 	b.w	bacb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb972:	bf00      	nop
   bb974:	00200100 	.word	0x00200100
   bb978:	00240200 	.word	0x00240200

000bb97c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb980:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb982:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb986:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb98a:	4604      	mov	r4, r0
   bb98c:	460f      	mov	r7, r1
   bb98e:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb990:	b993      	cbnz	r3, bb9b8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb992:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb996:	886b      	ldrh	r3, [r5, #2]
   bb998:	88aa      	ldrh	r2, [r5, #4]
   bb99a:	3303      	adds	r3, #3
   bb99c:	4293      	cmp	r3, r2
   bb99e:	db03      	blt.n	bb9a8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb9a0:	4639      	mov	r1, r7
   bb9a2:	4620      	mov	r0, r4
   bb9a4:	f7fd fdf0 	bl	b9588 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb9a8:	88ae      	ldrh	r6, [r5, #4]
   bb9aa:	bb7e      	cbnz	r6, bba0c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb9ac:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb9ae:	88ab      	ldrh	r3, [r5, #4]
   bb9b0:	3301      	adds	r3, #1
   bb9b2:	80ab      	strh	r3, [r5, #4]
}
   bb9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb9b8:	2b03      	cmp	r3, #3
   bb9ba:	d124      	bne.n	bba06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb9bc:	7852      	ldrb	r2, [r2, #1]
   bb9be:	7829      	ldrb	r1, [r5, #0]
   bb9c0:	f7fc fdda 	bl	b8578 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb9c4:	4680      	mov	r8, r0
   bb9c6:	2800      	cmp	r0, #0
   bb9c8:	d1e5      	bne.n	bb996 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb9ca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb9ce:	b91b      	cbnz	r3, bb9d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb9d0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb9d4:	2b00      	cmp	r3, #0
   bb9d6:	d0de      	beq.n	bb996 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb9d8:	49b7      	ldr	r1, [pc, #732]	; (bbcb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb9da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9de:	f004 f8ea 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb9e2:	7829      	ldrb	r1, [r5, #0]
   bb9e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9e8:	220a      	movs	r2, #10
   bb9ea:	f7fc fbd5 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb9ee:	49b3      	ldr	r1, [pc, #716]	; (bbcbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb9f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9f4:	f004 f8df 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb9f8:	7869      	ldrb	r1, [r5, #1]
   bb9fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9fe:	220a      	movs	r2, #10
   bba00:	f7fc fbd1 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bba04:	e7c7      	b.n	bb996 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bba06:	f04f 0802 	mov.w	r8, #2
   bba0a:	e7c4      	b.n	bb996 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bba0c:	2e01      	cmp	r6, #1
   bba0e:	d101      	bne.n	bba14 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bba10:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bba12:	e7cc      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bba14:	2e02      	cmp	r6, #2
   bba16:	d101      	bne.n	bba1c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bba18:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bba1a:	e7c8      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bba1c:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bba1e:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bba20:	d103      	bne.n	bba2a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bba22:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bba26:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bba28:	e7c1      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bba2a:	1d0b      	adds	r3, r1, #4
   bba2c:	429e      	cmp	r6, r3
   bba2e:	d136      	bne.n	bba9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bba30:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bba32:	88aa      	ldrh	r2, [r5, #4]
   bba34:	f108 0306 	add.w	r3, r8, #6
   bba38:	429a      	cmp	r2, r3
   bba3a:	d1b8      	bne.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bba3c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bba40:	2b00      	cmp	r3, #0
   bba42:	d1b4      	bne.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bba44:	2200      	movs	r2, #0
   bba46:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba48:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bba4c:	b91a      	cbnz	r2, bba56 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bba4e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bba52:	2a00      	cmp	r2, #0
   bba54:	d0ab      	beq.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bba56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bba5a:	2b00      	cmp	r3, #0
   bba5c:	f000 8170 	beq.w	bbd40 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bba60:	4997      	ldr	r1, [pc, #604]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bba62:	f004 f8a8 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bba66:	4997      	ldr	r1, [pc, #604]	; (bbcc4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bba68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba6c:	f004 f8a3 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bba70:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bba74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba78:	220a      	movs	r2, #10
   bba7a:	f004 f8b8 	bl	bfbee <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bba7e:	4992      	ldr	r1, [pc, #584]	; (bbcc8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bba80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba84:	f004 f897 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bba88:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bba8c:	220a      	movs	r2, #10
   bba8e:	4641      	mov	r1, r8
   bba90:	4620      	mov	r0, r4
   bba92:	f004 f8ac 	bl	bfbee <_ZN5Print11printNumberEmh>
        n += println();
   bba96:	4620      	mov	r0, r4
   bba98:	f004 f891 	bl	bfbbe <_ZN5Print7printlnEv>
        return n;
   bba9c:	e787      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bba9e:	3105      	adds	r1, #5
   bbaa0:	428e      	cmp	r6, r1
   bbaa2:	f040 812f 	bne.w	bbd04 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbaa6:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bbaa8:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbaaa:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bbaac:	89a9      	ldrh	r1, [r5, #12]
   bbaae:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bbab2:	4291      	cmp	r1, r2
   bbab4:	f040 80ae 	bne.w	bbc14 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bbab8:	2301      	movs	r3, #1
   bbaba:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bbabc:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbac0:	7829      	ldrb	r1, [r5, #0]
   bbac2:	4549      	cmp	r1, r9
   bbac4:	d155      	bne.n	bbb72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bbac6:	786b      	ldrb	r3, [r5, #1]
   bbac8:	4553      	cmp	r3, sl
   bbaca:	d152      	bne.n	bbb72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bbacc:	2301      	movs	r3, #1
   bbace:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bbad0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbad4:	b3b3      	cbz	r3, bbb44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bbad6:	497d      	ldr	r1, [pc, #500]	; (bbccc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bbad8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbadc:	f004 f86b 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbae0:	220a      	movs	r2, #10
   bbae2:	8869      	ldrh	r1, [r5, #2]
   bbae4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbae8:	f004 f881 	bl	bfbee <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bbaec:	4978      	ldr	r1, [pc, #480]	; (bbcd0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bbaee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaf2:	f004 f860 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bbaf6:	2200      	movs	r2, #0
   bbaf8:	4629      	mov	r1, r5
   bbafa:	4620      	mov	r0, r4
   bbafc:	f7fd ff50 	bl	b99a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbb00:	7bab      	ldrb	r3, [r5, #14]
   bbb02:	2b01      	cmp	r3, #1
   bbb04:	d104      	bne.n	bbb10 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bbb06:	4973      	ldr	r1, [pc, #460]	; (bbcd4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bbb08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb0c:	f004 f86d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbb10:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bbb14:	2b01      	cmp	r3, #1
   bbb16:	d104      	bne.n	bbb22 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bbb18:	496f      	ldr	r1, [pc, #444]	; (bbcd8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bbb1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb1e:	f004 f864 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbb22:	7beb      	ldrb	r3, [r5, #15]
   bbb24:	2b01      	cmp	r3, #1
   bbb26:	d104      	bne.n	bbb32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bbb28:	496c      	ldr	r1, [pc, #432]	; (bbcdc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bbb2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb2e:	f004 f85c 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbb32:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bbb36:	2b01      	cmp	r3, #1
   bbb38:	d104      	bne.n	bbb44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bbb3a:	4969      	ldr	r1, [pc, #420]	; (bbce0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bbb3c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb40:	f004 f853 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bbb44:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbb48:	b91b      	cbnz	r3, bbb52 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bbb4a:	4629      	mov	r1, r5
   bbb4c:	4620      	mov	r0, r4
   bbb4e:	f7fe f8b9 	bl	b9cc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbb52:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbb56:	2b03      	cmp	r3, #3
   bbb58:	f47f af6b 	bne.w	bba32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bbb5c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbb60:	b108      	cbz	r0, bbb66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bbb62:	f7f8 fa9c 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bbb66:	2300      	movs	r3, #0
   bbb68:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bbb6c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbb70:	e75f      	b.n	bba32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbb72:	882b      	ldrh	r3, [r5, #0]
   bbb74:	f240 1205 	movw	r2, #261	; 0x105
   bbb78:	4293      	cmp	r3, r2
   bbb7a:	d123      	bne.n	bbbc4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bbb7c:	68ab      	ldr	r3, [r5, #8]
   bbb7e:	781a      	ldrb	r2, [r3, #0]
   bbb80:	454a      	cmp	r2, r9
   bbb82:	d102      	bne.n	bbb8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbb84:	785b      	ldrb	r3, [r3, #1]
   bbb86:	4553      	cmp	r3, sl
   bbb88:	d0a0      	beq.n	bbacc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbb8a:	786a      	ldrb	r2, [r5, #1]
   bbb8c:	4620      	mov	r0, r4
   bbb8e:	f7fc fbf1 	bl	b8374 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbb92:	2800      	cmp	r0, #0
   bbb94:	d09c      	beq.n	bbad0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bbb96:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb9a:	2b00      	cmp	r3, #0
   bbb9c:	d0d2      	beq.n	bbb44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bbb9e:	4951      	ldr	r1, [pc, #324]	; (bbce4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bbba0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbba4:	f004 f807 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bbba8:	2210      	movs	r2, #16
   bbbaa:	7829      	ldrb	r1, [r5, #0]
   bbbac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbb0:	f7fc faf2 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbbb4:	4941      	ldr	r1, [pc, #260]	; (bbcbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbbb6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbba:	f003 fffc 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bbbbe:	7869      	ldrb	r1, [r5, #1]
   bbbc0:	2210      	movs	r2, #16
   bbbc2:	e022      	b.n	bbc0a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbbc4:	2b05      	cmp	r3, #5
   bbbc6:	d1e0      	bne.n	bbb8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbbc8:	68ab      	ldr	r3, [r5, #8]
   bbbca:	781a      	ldrb	r2, [r3, #0]
   bbbcc:	454a      	cmp	r2, r9
   bbbce:	d1dc      	bne.n	bbb8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbbd0:	785b      	ldrb	r3, [r3, #1]
   bbbd2:	4553      	cmp	r3, sl
   bbbd4:	d1d9      	bne.n	bbb8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bbbd6:	2303      	movs	r3, #3
   bbbd8:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bbbda:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbde:	2b00      	cmp	r3, #0
   bbbe0:	d0b0      	beq.n	bbb44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bbbe2:	4941      	ldr	r1, [pc, #260]	; (bbce8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bbbe4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbe8:	f003 ffe5 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bbbec:	68ab      	ldr	r3, [r5, #8]
   bbbee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbf2:	7819      	ldrb	r1, [r3, #0]
   bbbf4:	2210      	movs	r2, #16
   bbbf6:	f7fc facf 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bbbfa:	493c      	ldr	r1, [pc, #240]	; (bbcec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bbbfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc00:	f003 ffd9 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bbc04:	68ab      	ldr	r3, [r5, #8]
   bbc06:	7859      	ldrb	r1, [r3, #1]
   bbc08:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bbc0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc0e:	f7fc faca 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbc12:	e75d      	b.n	bbad0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bbc14:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbc16:	782b      	ldrb	r3, [r5, #0]
   bbc18:	454b      	cmp	r3, r9
   bbc1a:	d143      	bne.n	bbca4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bbc1c:	786a      	ldrb	r2, [r5, #1]
   bbc1e:	4552      	cmp	r2, sl
   bbc20:	d140      	bne.n	bbca4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bbc22:	2300      	movs	r3, #0
   bbc24:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc26:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc2a:	b91b      	cbnz	r3, bbc34 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bbc2c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc30:	2b00      	cmp	r3, #0
   bbc32:	d08e      	beq.n	bbb52 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bbc34:	492e      	ldr	r1, [pc, #184]	; (bbcf0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bbc36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc3a:	f003 ffbc 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bbc3e:	492d      	ldr	r1, [pc, #180]	; (bbcf4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bbc40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc44:	f003 ffb7 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bbc48:	7b29      	ldrb	r1, [r5, #12]
   bbc4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc4e:	220a      	movs	r2, #10
   bbc50:	f7fc faa2 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bbc54:	4928      	ldr	r1, [pc, #160]	; (bbcf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bbc56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc5a:	f003 ffac 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bbc5e:	7b69      	ldrb	r1, [r5, #13]
   bbc60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc64:	220a      	movs	r2, #10
   bbc66:	f7fc fa97 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bbc6a:	4924      	ldr	r1, [pc, #144]	; (bbcfc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bbc6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc70:	f003 ffa1 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bbc74:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bbc78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc7c:	220a      	movs	r2, #10
   bbc7e:	f7fc fa8b 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bbc82:	491f      	ldr	r1, [pc, #124]	; (bbd00 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bbc84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc88:	f003 ff95 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bbc8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc90:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bbc94:	220a      	movs	r2, #10
   bbc96:	f7fc fa7f 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bbc9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc9e:	f003 ff8e 	bl	bfbbe <_ZN5Print7printlnEv>
   bbca2:	e756      	b.n	bbb52 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbca4:	2b05      	cmp	r3, #5
   bbca6:	d1be      	bne.n	bbc26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbca8:	68ab      	ldr	r3, [r5, #8]
   bbcaa:	781a      	ldrb	r2, [r3, #0]
   bbcac:	454a      	cmp	r2, r9
   bbcae:	d1ba      	bne.n	bbc26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbcb0:	785b      	ldrb	r3, [r3, #1]
   bbcb2:	4553      	cmp	r3, sl
   bbcb4:	d1b7      	bne.n	bbc26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbcb6:	e7b4      	b.n	bbc22 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bbcb8:	000c7080 	.word	0x000c7080
   bbcbc:	000c70f1 	.word	0x000c70f1
   bbcc0:	000c71f9 	.word	0x000c71f9
   bbcc4:	000c7250 	.word	0x000c7250
   bbcc8:	000c7266 	.word	0x000c7266
   bbccc:	000c712d 	.word	0x000c712d
   bbcd0:	000c713e 	.word	0x000c713e
   bbcd4:	000c714a 	.word	0x000c714a
   bbcd8:	000c715e 	.word	0x000c715e
   bbcdc:	000c7172 	.word	0x000c7172
   bbce0:	000c718c 	.word	0x000c718c
   bbce4:	000c70f9 	.word	0x000c70f9
   bbce8:	000c70b8 	.word	0x000c70b8
   bbcec:	000c70e7 	.word	0x000c70e7
   bbcf0:	000c71a6 	.word	0x000c71a6
   bbcf4:	000c71b7 	.word	0x000c71b7
   bbcf8:	000c71c4 	.word	0x000c71c4
   bbcfc:	000c71d1 	.word	0x000c71d1
   bbd00:	000c71e5 	.word	0x000c71e5
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbd04:	786a      	ldrb	r2, [r5, #1]
   bbd06:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bbd08:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbd0c:	4620      	mov	r0, r4
   bbd0e:	f7fc fb31 	bl	b8374 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bbd12:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bbd16:	2800      	cmp	r0, #0
   bbd18:	bf18      	it	ne
   bbd1a:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bbd1e:	2b00      	cmp	r3, #0
   bbd20:	f47f ae87 	bne.w	bba32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bbd24:	1ef3      	subs	r3, r6, #3
   bbd26:	454b      	cmp	r3, r9
   bbd28:	f77f ae83 	ble.w	bba32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bbd2c:	3e04      	subs	r6, #4
   bbd2e:	eba6 0609 	sub.w	r6, r6, r9
   bbd32:	4546      	cmp	r6, r8
   bbd34:	da02      	bge.n	bbd3c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bbd36:	68ab      	ldr	r3, [r5, #8]
   bbd38:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbd3a:	e67a      	b.n	bba32 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bbd3c:	2301      	movs	r3, #1
   bbd3e:	e681      	b.n	bba44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbd40:	4900      	ldr	r1, [pc, #0]	; (bbd44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bbd42:	e68e      	b.n	bba62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bbd44:	000c721e 	.word	0x000c721e

000bbd48 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bbd48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbd4a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bbd4e:	4604      	mov	r4, r0
   bbd50:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbd52:	b113      	cbz	r3, bbd5a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bbd54:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bbd58:	b953      	cbnz	r3, bbd70 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bbd5a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bbd5e:	b128      	cbz	r0, bbd6c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bbd60:	490e      	ldr	r1, [pc, #56]	; (bbd9c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbd62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd66:	f003 ff40 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bbd6a:	2000      	movs	r0, #0
}
   bbd6c:	b003      	add	sp, #12
   bbd6e:	bd30      	pop	{r4, r5, pc}
   bbd70:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bbd72:	f7fd ff12 	bl	b9b9a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bbd76:	4285      	cmp	r5, r0
   bbd78:	9901      	ldr	r1, [sp, #4]
   bbd7a:	d908      	bls.n	bbd8e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd7c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd80:	b91b      	cbnz	r3, bbd8a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bbd82:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bbd86:	2800      	cmp	r0, #0
   bbd88:	d0f0      	beq.n	bbd6c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbd8a:	4905      	ldr	r1, [pc, #20]	; (bbda0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bbd8c:	e7e9      	b.n	bbd62 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bbd8e:	4620      	mov	r0, r4
   bbd90:	462a      	mov	r2, r5
   bbd92:	f7fd ff0b 	bl	b9bac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bbd96:	2001      	movs	r0, #1
   bbd98:	e7e8      	b.n	bbd6c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bbd9a:	bf00      	nop
   bbd9c:	000c727e 	.word	0x000c727e
   bbda0:	000c72a9 	.word	0x000c72a9

000bbda4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bbda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbda8:	4604      	mov	r4, r0
   bbdaa:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bbdac:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bbdb0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bbdb4:	f88d 100f 	strb.w	r1, [sp, #15]
   bbdb8:	4615      	mov	r5, r2
   bbdba:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bbdbc:	b118      	cbz	r0, bbdc6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bbdbe:	6803      	ldr	r3, [r0, #0]
   bbdc0:	b2c9      	uxtb	r1, r1
   bbdc2:	689b      	ldr	r3, [r3, #8]
   bbdc4:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bbdc6:	7823      	ldrb	r3, [r4, #0]
   bbdc8:	2b01      	cmp	r3, #1
   bbdca:	d80e      	bhi.n	bbdea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbdcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbdd0:	2bb5      	cmp	r3, #181	; 0xb5
   bbdd2:	d12e      	bne.n	bbe32 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bbdd4:	2300      	movs	r3, #0
   bbdd6:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbdda:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bbddc:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbde0:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbde4:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbde6:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bbdea:	7826      	ldrb	r6, [r4, #0]
   bbdec:	2e02      	cmp	r6, #2
   bbdee:	f040 81d5 	bne.w	bc19c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bbdf2:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbdf6:	bb5b      	cbnz	r3, bbe50 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bbdf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbdfc:	2bb5      	cmp	r3, #181	; 0xb5
   bbdfe:	d001      	beq.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bbe00:	2300      	movs	r3, #0
   bbe02:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbe04:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbe08:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbe0c:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbe10:	2b01      	cmp	r3, #1
   bbe12:	f040 81a3 	bne.w	bc15c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbe16:	463b      	mov	r3, r7
   bbe18:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbe1c:	4620      	mov	r0, r4
   bbe1e:	f7ff fdad 	bl	bb97c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bbe22:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbe26:	3301      	adds	r3, #1
   bbe28:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bbe2c:	b005      	add	sp, #20
   bbe2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bbe32:	2b24      	cmp	r3, #36	; 0x24
   bbe34:	d105      	bne.n	bbe42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bbe36:	2300      	movs	r3, #0
   bbe38:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bbe3c:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bbe3e:	7023      	strb	r3, [r4, #0]
   bbe40:	e7d3      	b.n	bbdea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bbe42:	2bd3      	cmp	r3, #211	; 0xd3
   bbe44:	d1d1      	bne.n	bbdea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bbe46:	2300      	movs	r3, #0
   bbe48:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bbe4c:	2303      	movs	r3, #3
   bbe4e:	e7f6      	b.n	bbe3e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bbe50:	2b01      	cmp	r3, #1
   bbe52:	d103      	bne.n	bbe5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bbe54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbe58:	2b62      	cmp	r3, #98	; 0x62
   bbe5a:	e7d0      	b.n	bbdfe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bbe5c:	2b02      	cmp	r3, #2
   bbe5e:	d10e      	bne.n	bbe7e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bbe60:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbe64:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bbe68:	2200      	movs	r2, #0
   bbe6a:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bbe6e:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bbe72:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bbe76:	88eb      	ldrh	r3, [r5, #6]
   bbe78:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bbe7c:	e7c2      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bbe7e:	2b03      	cmp	r3, #3
   bbe80:	f040 80b7 	bne.w	bbff2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bbe84:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bbe88:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bbe8c:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bbe90:	2905      	cmp	r1, #5
   bbe92:	d0b7      	beq.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bbe94:	42b9      	cmp	r1, r7
   bbe96:	d10c      	bne.n	bbeb2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bbe98:	4546      	cmp	r6, r8
   bbe9a:	d10a      	bne.n	bbeb2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbe9c:	2300      	movs	r3, #0
   bbe9e:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbea2:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bbea4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bbea8:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bbeaa:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bbeae:	80ab      	strh	r3, [r5, #4]
   bbeb0:	e7a8      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bbeb2:	4632      	mov	r2, r6
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	f7fc fa5d 	bl	b8374 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbeba:	2800      	cmp	r0, #0
   bbebc:	f000 8095 	beq.w	bbfea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bbec0:	4632      	mov	r2, r6
   bbec2:	4620      	mov	r0, r4
   bbec4:	f7fc fb58 	bl	b8578 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bbec8:	4606      	mov	r6, r0
   bbeca:	b9e8      	cbnz	r0, bbf08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbecc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbed0:	b913      	cbnz	r3, bbed8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bbed2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbed6:	b1bb      	cbz	r3, bbf08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbed8:	49a7      	ldr	r1, [pc, #668]	; (bc178 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bbeda:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbede:	f003 fe6a 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bbee2:	220a      	movs	r2, #10
   bbee4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbee8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbeec:	f7fc f954 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbef0:	49a2      	ldr	r1, [pc, #648]	; (bc17c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbef2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbef6:	f003 fe5e 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bbefa:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbefe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf02:	220a      	movs	r2, #10
   bbf04:	f7fc f94f 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bbf08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bbf0c:	b1a3      	cbz	r3, bbf38 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf0e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf12:	b913      	cbnz	r3, bbf1a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bbf14:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf18:	b123      	cbz	r3, bbf24 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bbf1a:	4999      	ldr	r1, [pc, #612]	; (bc180 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bbf1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf20:	f003 fe63 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bbf24:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbf28:	b108      	cbz	r0, bbf2e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bbf2a:	f7f8 f8b8 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bbf2e:	2300      	movs	r3, #0
   bbf30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bbf34:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bbf38:	4630      	mov	r0, r6
   bbf3a:	f7f8 f8ae 	bl	b409a <_Znaj>
   bbf3e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf42:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bbf46:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bbf4a:	bb38      	cbnz	r0, bbf9c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf4c:	b913      	cbnz	r3, bbf54 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bbf4e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf52:	b1e3      	cbz	r3, bbf8e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bbf54:	498b      	ldr	r1, [pc, #556]	; (bc184 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bbf56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf5a:	f003 fe2c 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbf5e:	2210      	movs	r2, #16
   bbf60:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbf64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf68:	f7fc f916 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbf6c:	4983      	ldr	r1, [pc, #524]	; (bc17c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbf6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf72:	f003 fe20 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbf76:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbf7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf7e:	2210      	movs	r2, #16
   bbf80:	f7fc f911 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bbf84:	4980      	ldr	r1, [pc, #512]	; (bc188 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bbf86:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf8a:	f003 fe2e 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbf8e:	2300      	movs	r3, #0
   bbf90:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbf94:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bbf98:	702b      	strb	r3, [r5, #0]
   bbf9a:	e783      	b.n	bbea4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bbf9c:	2203      	movs	r2, #3
   bbf9e:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bbfa2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bbfa6:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bbfaa:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbfae:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbfb2:	2b00      	cmp	r3, #0
   bbfb4:	f43f af26 	beq.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbfb8:	4974      	ldr	r1, [pc, #464]	; (bc18c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbfba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfbe:	f003 fdfa 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbfc2:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbfc6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfca:	2210      	movs	r2, #16
   bbfcc:	f7fc f8e4 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbfd0:	496a      	ldr	r1, [pc, #424]	; (bc17c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbfd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfd6:	f003 fdee 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbfda:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbfde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfe2:	2210      	movs	r2, #16
   bbfe4:	f7fc f8df 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbfe8:	e70c      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbfea:	2301      	movs	r3, #1
   bbfec:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbff0:	e708      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbff2:	2b04      	cmp	r3, #4
   bbff4:	d104      	bne.n	bc000 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbff6:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbffa:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbffe:	e701      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc000:	2b05      	cmp	r3, #5
   bc002:	d106      	bne.n	bc012 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc004:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc008:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc00c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc010:	e7f3      	b.n	bbffa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc012:	2b06      	cmp	r3, #6
   bc014:	d12b      	bne.n	bc06e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc016:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc01a:	bb13      	cbnz	r3, bc062 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc01c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc020:	b913      	cbnz	r3, bc028 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc022:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc026:	b1bb      	cbz	r3, bc058 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc028:	4959      	ldr	r1, [pc, #356]	; (bc190 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc02a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc02e:	f003 fdc2 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc032:	2210      	movs	r2, #16
   bc034:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc038:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc03c:	f7fc f8ac 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc040:	494e      	ldr	r1, [pc, #312]	; (bc17c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc042:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc046:	f003 fdb6 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc04a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc04e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc052:	2210      	movs	r2, #16
   bc054:	f7fc f8a7 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc058:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc05c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc060:	e6d0      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc066:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc06a:	701a      	strb	r2, [r3, #0]
   bc06c:	e6ca      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc06e:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc070:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc074:	f47f aec6 	bne.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc078:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc07c:	bb9b      	cbnz	r3, bc0e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc07e:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc082:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc086:	2b02      	cmp	r3, #2
   bc088:	f47f aebc 	bne.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc08c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc090:	2905      	cmp	r1, #5
   bc092:	f47f aeb7 	bne.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc096:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc09a:	781a      	ldrb	r2, [r3, #0]
   bc09c:	42ba      	cmp	r2, r7
   bc09e:	f47f aeb1 	bne.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc0a2:	785a      	ldrb	r2, [r3, #1]
   bc0a4:	4542      	cmp	r2, r8
   bc0a6:	f47f aead 	bne.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc0aa:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc0ae:	2a02      	cmp	r2, #2
   bc0b0:	d121      	bne.n	bc0f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc0b2:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc0b6:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc0ba:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc0be:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc0c2:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc0c6:	2001      	movs	r0, #1
   bc0c8:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc0cc:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc0d0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc0d4:	781b      	ldrb	r3, [r3, #0]
   bc0d6:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc0d8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc0dc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc0e0:	7852      	ldrb	r2, [r2, #1]
   bc0e2:	705a      	strb	r2, [r3, #1]
   bc0e4:	e68e      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc0e6:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc0e8:	bf16      	itet	ne
   bc0ea:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc0ee:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc0f2:	705a      	strbne	r2, [r3, #1]
   bc0f4:	e7c5      	b.n	bc082 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc0f6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0fa:	b923      	cbnz	r3, bc106 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc0fc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc100:	2b00      	cmp	r3, #0
   bc102:	f43f ae7f 	beq.w	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc106:	4923      	ldr	r1, [pc, #140]	; (bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc108:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc10c:	f003 fd53 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc114:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc118:	7819      	ldrb	r1, [r3, #0]
   bc11a:	2210      	movs	r2, #16
   bc11c:	f7fc f83c 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc120:	4916      	ldr	r1, [pc, #88]	; (bc17c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc122:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc126:	f003 fd46 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc12a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc12e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc132:	7859      	ldrb	r1, [r3, #1]
   bc134:	2210      	movs	r2, #16
   bc136:	f7fc f82f 	bl	b8198 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc13a:	4917      	ldr	r1, [pc, #92]	; (bc198 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc13c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc140:	f003 fd39 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc144:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc148:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc14c:	220a      	movs	r2, #10
   bc14e:	4630      	mov	r0, r6
   bc150:	f003 fd4d 	bl	bfbee <_ZN5Print11printNumberEmh>
        n += println();
   bc154:	4630      	mov	r0, r6
   bc156:	f003 fd32 	bl	bfbbe <_ZN5Print7printlnEv>
        return n;
   bc15a:	e653      	b.n	bbe04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc15c:	b913      	cbnz	r3, bc164 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc15e:	463b      	mov	r3, r7
   bc160:	462a      	mov	r2, r5
   bc162:	e65b      	b.n	bbe1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc164:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc166:	bf08      	it	eq
   bc168:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc16c:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc16e:	bf18      	it	ne
   bc170:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc174:	e652      	b.n	bbe1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc176:	bf00      	nop
   bc178:	000c72ea 	.word	0x000c72ea
   bc17c:	000c70f1 	.word	0x000c70f1
   bc180:	000c731f 	.word	0x000c731f
   bc184:	000c7361 	.word	0x000c7361
   bc188:	000c73a6 	.word	0x000c73a6
   bc18c:	000c73d8 	.word	0x000c73d8
   bc190:	000c7409 	.word	0x000c7409
   bc194:	000c7439 	.word	0x000c7439
   bc198:	000c7469 	.word	0x000c7469
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc19c:	2e01      	cmp	r6, #1
   bc19e:	f040 8188 	bne.w	bc4b2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc1a2:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc1a6:	2b00      	cmp	r3, #0
   bc1a8:	d146      	bne.n	bc238 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc1aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc1ae:	2a24      	cmp	r2, #36	; 0x24
   bc1b0:	f000 8086 	beq.w	bc2c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc1b4:	2300      	movs	r3, #0
   bc1b6:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc1b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc1bc:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc1be:	bf04      	itt	eq
   bc1c0:	23fb      	moveq	r3, #251	; 0xfb
   bc1c2:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc1c6:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc1ca:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc1ce:	3501      	adds	r5, #1
   bc1d0:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc1d2:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc1d4:	bf08      	it	eq
   bc1d6:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc1d8:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc1dc:	bf08      	it	eq
   bc1de:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc1e0:	2d00      	cmp	r5, #0
   bc1e2:	f47f ae23 	bne.w	bbe2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc1e6:	4620      	mov	r0, r4
   bc1e8:	f7fc fc20 	bl	b8a2c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc1ec:	2800      	cmp	r0, #0
   bc1ee:	f000 8120 	beq.w	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc1f2:	4620      	mov	r0, r4
   bc1f4:	f7fc fd7c 	bl	b8cf0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc1f8:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc1fa:	4620      	mov	r0, r4
   bc1fc:	f7fc fdfa 	bl	b8df4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc200:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc202:	4620      	mov	r0, r4
   bc204:	f7fd f88a 	bl	b931c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc208:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc20a:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc20c:	1e41      	subs	r1, r0, #1
   bc20e:	428e      	cmp	r6, r1
   bc210:	f280 80b4 	bge.w	bc37c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc214:	783a      	ldrb	r2, [r7, #0]
   bc216:	3a04      	subs	r2, #4
   bc218:	4296      	cmp	r6, r2
   bc21a:	f280 80af 	bge.w	bc37c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc21e:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc220:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc224:	f000 80ad 	beq.w	bc382 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc228:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc22a:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc22e:	bf18      	it	ne
   bc230:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc232:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc234:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc236:	e7ea      	b.n	bc20e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc238:	2b01      	cmp	r3, #1
   bc23a:	d103      	bne.n	bc244 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc23c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc240:	2a47      	cmp	r2, #71	; 0x47
   bc242:	e7b5      	b.n	bc1b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc244:	b2da      	uxtb	r2, r3
   bc246:	2a05      	cmp	r2, #5
   bc248:	d93a      	bls.n	bc2c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc24a:	4620      	mov	r0, r4
   bc24c:	f7fc fbee 	bl	b8a2c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc250:	b308      	cbz	r0, bc296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc252:	4620      	mov	r0, r4
   bc254:	f7fc fd4c 	bl	b8cf0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc258:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc25a:	4620      	mov	r0, r4
   bc25c:	f7fc fdca 	bl	b8df4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc260:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc262:	4620      	mov	r0, r4
   bc264:	f7fd f85a 	bl	b931c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc268:	782b      	ldrb	r3, [r5, #0]
   bc26a:	4283      	cmp	r3, r0
   bc26c:	d213      	bcs.n	bc296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc26e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc272:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc274:	782b      	ldrb	r3, [r5, #0]
   bc276:	3301      	adds	r3, #1
   bc278:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc27a:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc27c:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc27e:	d10a      	bne.n	bc296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc280:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc284:	b913      	cbnz	r3, bc28c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc286:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc28a:	b123      	cbz	r3, bc296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc28c:	498f      	ldr	r1, [pc, #572]	; (bc4cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc28e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc292:	f003 fcaa 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc296:	4620      	mov	r0, r4
   bc298:	f7fc f9c8 	bl	b862c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc29c:	b128      	cbz	r0, bc2aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc29e:	2201      	movs	r2, #1
   bc2a0:	f10d 010f 	add.w	r1, sp, #15
   bc2a4:	4620      	mov	r0, r4
   bc2a6:	f7ff fd4f 	bl	bbd48 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc2aa:	4620      	mov	r0, r4
   bc2ac:	f7fc faee 	bl	b888c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc2b0:	2800      	cmp	r0, #0
   bc2b2:	d081      	beq.n	bc1b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc2b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc2b8:	4620      	mov	r0, r4
   bc2ba:	f7fc fbaf 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc2be:	e77b      	b.n	bc1b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc2c0:	18e2      	adds	r2, r4, r3
   bc2c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc2c6:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc2ca:	2b05      	cmp	r3, #5
   bc2cc:	f47f af74 	bne.w	bc1b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc2d0:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc2d4:	b923      	cbnz	r3, bc2e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc2d6:	4620      	mov	r0, r4
   bc2d8:	f7fc fa70 	bl	b87bc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc2dc:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc2e0:	4620      	mov	r0, r4
   bc2e2:	f7fc fba3 	bl	b8a2c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc2e6:	b1b8      	cbz	r0, bc318 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc2e8:	4620      	mov	r0, r4
   bc2ea:	f7fc fd01 	bl	b8cf0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc2ee:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc2f0:	4620      	mov	r0, r4
   bc2f2:	f7fc fd7f 	bl	b8df4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc2f6:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc2f8:	4620      	mov	r0, r4
   bc2fa:	f7fd f80f 	bl	b931c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc2fe:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc300:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc302:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc304:	2100      	movs	r1, #0
   bc306:	4628      	mov	r0, r5
   bc308:	f008 f8a6 	bl	c4458 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc30c:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc310:	602b      	str	r3, [r5, #0]
   bc312:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc316:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc318:	4620      	mov	r0, r4
   bc31a:	f7fc f987 	bl	b862c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc31e:	b128      	cbz	r0, bc32c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc320:	2206      	movs	r2, #6
   bc322:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc326:	4620      	mov	r0, r4
   bc328:	f7ff fd0e 	bl	bbd48 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc32c:	4620      	mov	r0, r4
   bc32e:	f7fc faad 	bl	b888c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc332:	b1e8      	cbz	r0, bc370 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc334:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc338:	4620      	mov	r0, r4
   bc33a:	f7fc fb6f 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc33e:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc342:	4620      	mov	r0, r4
   bc344:	f7fc fb6a 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc348:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc34c:	4620      	mov	r0, r4
   bc34e:	f7fc fb65 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc352:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc356:	4620      	mov	r0, r4
   bc358:	f7fc fb60 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc35c:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc360:	4620      	mov	r0, r4
   bc362:	f7fc fb5b 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc366:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc36a:	4620      	mov	r0, r4
   bc36c:	f7fc fb56 	bl	b8a1c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc370:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc374:	2b05      	cmp	r3, #5
   bc376:	f67f af1f 	bls.w	bc1b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc37a:	e766      	b.n	bc24a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc37c:	2d2a      	cmp	r5, #42	; 0x2a
   bc37e:	f040 808b 	bne.w	bc498 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc382:	091a      	lsrs	r2, r3, #4
   bc384:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc388:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc38a:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc38c:	f003 030f 	and.w	r3, r3, #15
   bc390:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc394:	bf84      	itt	hi
   bc396:	3237      	addhi	r2, #55	; 0x37
   bc398:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc39a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc39e:	bf88      	it	hi
   bc3a0:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc3a4:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc3a8:	42ab      	cmp	r3, r5
   bc3aa:	eb08 0b06 	add.w	fp, r8, r6
   bc3ae:	d143      	bne.n	bc438 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc3b0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc3b4:	4553      	cmp	r3, sl
   bc3b6:	d13f      	bne.n	bc438 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc3b8:	4620      	mov	r0, r4
   bc3ba:	f7fc fd9d 	bl	b8ef8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc3be:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc3c0:	4620      	mov	r0, r4
   bc3c2:	f7fc fe1d 	bl	b9000 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc3c6:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc3c8:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc3ca:	2100      	movs	r1, #0
   bc3cc:	f008 f844 	bl	c4458 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc3d0:	783a      	ldrb	r2, [r7, #0]
   bc3d2:	4641      	mov	r1, r8
   bc3d4:	4630      	mov	r0, r6
   bc3d6:	f008 f817 	bl	c4408 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc3da:	783b      	ldrb	r3, [r7, #0]
   bc3dc:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc3de:	4620      	mov	r0, r4
   bc3e0:	f7fd f80e 	bl	b9400 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc3e4:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc3e6:	f025 0503 	bic.w	r5, r5, #3
   bc3ea:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc3ee:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc3f0:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc3f4:	4620      	mov	r0, r4
   bc3f6:	f7fc fba5 	bl	b8b44 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc3fa:	b1d0      	cbz	r0, bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc3fc:	f01a 0104 	ands.w	r1, sl, #4
   bc400:	d117      	bne.n	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc402:	4620      	mov	r0, r4
   bc404:	9102      	str	r1, [sp, #8]
   bc406:	f7fc fe7f 	bl	b9108 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc40a:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc40c:	4620      	mov	r0, r4
   bc40e:	f7fc feff 	bl	b9210 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc412:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc414:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc416:	464a      	mov	r2, r9
   bc418:	f008 f81e 	bl	c4458 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc41c:	783a      	ldrb	r2, [r7, #0]
   bc41e:	4641      	mov	r1, r8
   bc420:	4650      	mov	r0, sl
   bc422:	f007 fff1 	bl	c4408 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc426:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc42a:	783b      	ldrb	r3, [r7, #0]
   bc42c:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc430:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc432:	2300      	movs	r3, #0
   bc434:	7023      	strb	r3, [r4, #0]
   bc436:	e4f9      	b.n	bbe2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc438:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc43c:	b91b      	cbnz	r3, bc446 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc43e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc442:	2b00      	cmp	r3, #0
   bc444:	d0f5      	beq.n	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc446:	4922      	ldr	r1, [pc, #136]	; (bc4d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc448:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc44c:	f003 fbb3 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc450:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc454:	6803      	ldr	r3, [r0, #0]
   bc456:	4629      	mov	r1, r5
   bc458:	689b      	ldr	r3, [r3, #8]
   bc45a:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc45c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc460:	6803      	ldr	r3, [r0, #0]
   bc462:	4651      	mov	r1, sl
   bc464:	689b      	ldr	r3, [r3, #8]
   bc466:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc468:	491a      	ldr	r1, [pc, #104]	; (bc4d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc46a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc46e:	f003 fba2 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc472:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc476:	f89b 1000 	ldrb.w	r1, [fp]
   bc47a:	6803      	ldr	r3, [r0, #0]
   bc47c:	689b      	ldr	r3, [r3, #8]
   bc47e:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc480:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc484:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc488:	6803      	ldr	r3, [r0, #0]
   bc48a:	689b      	ldr	r3, [r3, #8]
   bc48c:	4798      	blx	r3
              _debugSerial->println();
   bc48e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc492:	f003 fb94 	bl	bfbbe <_ZN5Print7printlnEv>
   bc496:	e7cc      	b.n	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc498:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc49c:	b91b      	cbnz	r3, bc4a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc49e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc4a2:	2b00      	cmp	r3, #0
   bc4a4:	d0c5      	beq.n	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc4a6:	490c      	ldr	r1, [pc, #48]	; (bc4d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc4a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ac:	f003 fb9d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc4b0:	e7bf      	b.n	bc432 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc4b2:	2e03      	cmp	r6, #3
   bc4b4:	f47f acba 	bne.w	bbe2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc4b8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc4bc:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc4c0:	4620      	mov	r0, r4
   bc4c2:	f7fd f821 	bl	b9508 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc4c6:	7020      	strb	r0, [r4, #0]
}
   bc4c8:	e4b0      	b.n	bbe2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc4ca:	bf00      	nop
   bc4cc:	000c7470 	.word	0x000c7470
   bc4d0:	000c748e 	.word	0x000c748e
   bc4d4:	000c74b9 	.word	0x000c74b9
   bc4d8:	000c74bf 	.word	0x000c74bf

000bc4dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc4dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc4e0:	4604      	mov	r4, r0
   bc4e2:	4699      	mov	r9, r3
   bc4e4:	460f      	mov	r7, r1
   bc4e6:	4690      	mov	r8, r2
   bc4e8:	f001 faca 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc4ec:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc4f0:	1ac0      	subs	r0, r0, r3
   bc4f2:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc4f6:	4298      	cmp	r0, r3
   bc4f8:	f0c0 80a8 	bcc.w	bc64c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc4fc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc500:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc504:	f005 f9ea 	bl	c18dc <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc508:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc50c:	21fd      	movs	r1, #253	; 0xfd
   bc50e:	f7fb fe53 	bl	b81b8 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc512:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc516:	2100      	movs	r1, #0
   bc518:	f005 f9e7 	bl	c18ea <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc51c:	4605      	mov	r5, r0
   bc51e:	b1a8      	cbz	r0, bc54c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc520:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc524:	b933      	cbnz	r3, bc534 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc526:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc52a:	b91b      	cbnz	r3, bc534 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc52c:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc52e:	b002      	add	sp, #8
   bc530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc534:	4946      	ldr	r1, [pc, #280]	; (bc650 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc536:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc53a:	f003 fb3c 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc53e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc542:	220a      	movs	r2, #10
   bc544:	4629      	mov	r1, r5
   bc546:	f7fb fe2e 	bl	b81a6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc54a:	e7ef      	b.n	bc52c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc54c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc550:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc554:	2202      	movs	r2, #2
   bc556:	f005 f9be 	bl	c18d6 <_ZN7TwoWire11requestFromEhj>
   bc55a:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc55c:	2d02      	cmp	r5, #2
   bc55e:	d008      	beq.n	bc572 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc560:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc564:	b91b      	cbnz	r3, bc56e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc566:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc56a:	2b00      	cmp	r3, #0
   bc56c:	d0de      	beq.n	bc52c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc56e:	4939      	ldr	r1, [pc, #228]	; (bc654 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc570:	e7e1      	b.n	bc536 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc572:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc576:	6803      	ldr	r3, [r0, #0]
   bc578:	695b      	ldr	r3, [r3, #20]
   bc57a:	4798      	blx	r3
   bc57c:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc57e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc582:	6803      	ldr	r3, [r0, #0]
   bc584:	695b      	ldr	r3, [r3, #20]
   bc586:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc588:	b2c6      	uxtb	r6, r0
   bc58a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc58e:	b22a      	sxth	r2, r5
   bc590:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc592:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc596:	b955      	cbnz	r5, bc5ae <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc598:	b123      	cbz	r3, bc5a4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc59a:	492f      	ldr	r1, [pc, #188]	; (bc658 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc59c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5a0:	f003 fb23 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc5a4:	f001 fa6c 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc5a8:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc5ac:	e7be      	b.n	bc52c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc5ae:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc5b0:	bfb8      	it	lt
   bc5b2:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc5b6:	2d64      	cmp	r5, #100	; 0x64
   bc5b8:	d936      	bls.n	bc628 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc5ba:	b17b      	cbz	r3, bc5dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc5bc:	4927      	ldr	r1, [pc, #156]	; (bc65c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc5be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5c2:	f003 faf8 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc5c6:	4629      	mov	r1, r5
   bc5c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5cc:	220a      	movs	r2, #10
   bc5ce:	f003 fb0e 	bl	bfbee <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc5d2:	4923      	ldr	r1, [pc, #140]	; (bc660 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc5d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5d8:	f003 fb07 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc5dc:	2d00      	cmp	r5, #0
   bc5de:	d035      	beq.n	bc64c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc5e0:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc5e2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc5e6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc5ea:	42ae      	cmp	r6, r5
   bc5ec:	bf28      	it	cs
   bc5ee:	462e      	movcs	r6, r5
   bc5f0:	4632      	mov	r2, r6
   bc5f2:	f005 f970 	bl	c18d6 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc5f6:	b2c0      	uxtb	r0, r0
   bc5f8:	4286      	cmp	r6, r0
   bc5fa:	d197      	bne.n	bc52c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc5fc:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc600:	fa1f f38a 	uxth.w	r3, sl
   bc604:	429e      	cmp	r6, r3
   bc606:	d91e      	bls.n	bc646 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc608:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc60c:	6803      	ldr	r3, [r0, #0]
   bc60e:	695b      	ldr	r3, [r3, #20]
   bc610:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc612:	f8cd 9000 	str.w	r9, [sp]
   bc616:	b2c1      	uxtb	r1, r0
   bc618:	4643      	mov	r3, r8
   bc61a:	463a      	mov	r2, r7
   bc61c:	4620      	mov	r0, r4
   bc61e:	f7ff fbc1 	bl	bbda4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc622:	f10a 0a01 	add.w	sl, sl, #1
   bc626:	e7eb      	b.n	bc600 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc628:	2b00      	cmp	r3, #0
   bc62a:	d0d7      	beq.n	bc5dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc62c:	490d      	ldr	r1, [pc, #52]	; (bc664 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc62e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc632:	f003 fac0 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
   bc636:	4629      	mov	r1, r5
   bc638:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc63c:	220a      	movs	r2, #10
   bc63e:	f003 fad6 	bl	bfbee <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc642:	4909      	ldr	r1, [pc, #36]	; (bc668 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc644:	e7c6      	b.n	bc5d4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc646:	1bad      	subs	r5, r5, r6
   bc648:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc64a:	e7c7      	b.n	bc5dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc64c:	2001      	movs	r0, #1
   bc64e:	e76e      	b.n	bc52e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc650:	000c74e0 	.word	0x000c74e0
   bc654:	000c7514 	.word	0x000c7514
   bc658:	000c7549 	.word	0x000c7549
   bc65c:	000c7571 	.word	0x000c7571
   bc660:	000c7591 	.word	0x000c7591
   bc664:	000c75a1 	.word	0x000c75a1
   bc668:	000c75b9 	.word	0x000c75b9

000bc66c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc66e:	4604      	mov	r4, r0
   bc670:	460d      	mov	r5, r1
   bc672:	4616      	mov	r6, r2
   bc674:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc676:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc67a:	6803      	ldr	r3, [r0, #0]
   bc67c:	691b      	ldr	r3, [r3, #16]
   bc67e:	4798      	blx	r3
   bc680:	b160      	cbz	r0, bc69c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc682:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc686:	6803      	ldr	r3, [r0, #0]
   bc688:	695b      	ldr	r3, [r3, #20]
   bc68a:	4798      	blx	r3
   bc68c:	9700      	str	r7, [sp, #0]
   bc68e:	b2c1      	uxtb	r1, r0
   bc690:	4633      	mov	r3, r6
   bc692:	462a      	mov	r2, r5
   bc694:	4620      	mov	r0, r4
   bc696:	f7ff fb85 	bl	bbda4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc69a:	e7ec      	b.n	bc676 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc69c:	2001      	movs	r0, #1
   bc69e:	b003      	add	sp, #12
   bc6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc6a4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc6a8:	4604      	mov	r4, r0
   bc6aa:	b087      	sub	sp, #28
   bc6ac:	460d      	mov	r5, r1
   bc6ae:	4616      	mov	r6, r2
   bc6b0:	461f      	mov	r7, r3
   bc6b2:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc6b6:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc6ba:	fa5f f388 	uxtb.w	r3, r8
   bc6be:	429a      	cmp	r2, r3
   bc6c0:	d90b      	bls.n	bc6da <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc6c2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc6c6:	4620      	mov	r0, r4
   bc6c8:	5cd1      	ldrb	r1, [r2, r3]
   bc6ca:	9700      	str	r7, [sp, #0]
   bc6cc:	4633      	mov	r3, r6
   bc6ce:	462a      	mov	r2, r5
   bc6d0:	f7ff fb68 	bl	bbda4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc6d4:	f108 0801 	add.w	r8, r8, #1
   bc6d8:	e7ed      	b.n	bc6b6 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc6da:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc6de:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc6e2:	4a25      	ldr	r2, [pc, #148]	; (bc778 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc6e4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc6e8:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc6ec:	a902      	add	r1, sp, #8
   bc6ee:	f04f 0901 	mov.w	r9, #1
   bc6f2:	9202      	str	r2, [sp, #8]
   bc6f4:	9304      	str	r3, [sp, #16]
   bc6f6:	f88d 800c 	strb.w	r8, [sp, #12]
   bc6fa:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc6fe:	f001 fe51 	bl	be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc702:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc706:	4641      	mov	r1, r8
   bc708:	f005 fbcf 	bl	c1eaa <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc70c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc710:	21ff      	movs	r1, #255	; 0xff
   bc712:	f001 fee7 	bl	be4e4 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc716:	28ff      	cmp	r0, #255	; 0xff
   bc718:	d116      	bne.n	bc748 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc71a:	7823      	ldrb	r3, [r4, #0]
   bc71c:	b983      	cbnz	r3, bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc71e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc722:	4649      	mov	r1, r9
   bc724:	f005 fbc1 	bl	c1eaa <digitalWrite>
    _spiPort->endTransaction();
   bc728:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc72c:	f001 fe21 	bl	be372 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc730:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc734:	f004 fb3a 	bl	c0dac <delay>
} // end checkUbloxSpi()
   bc738:	2001      	movs	r0, #1
   bc73a:	b007      	add	sp, #28
   bc73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc740:	28ff      	cmp	r0, #255	; 0xff
   bc742:	d101      	bne.n	bc748 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc744:	7823      	ldrb	r3, [r4, #0]
   bc746:	b163      	cbz	r3, bc762 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc748:	4601      	mov	r1, r0
   bc74a:	9700      	str	r7, [sp, #0]
   bc74c:	4620      	mov	r0, r4
   bc74e:	4633      	mov	r3, r6
   bc750:	462a      	mov	r2, r5
   bc752:	f7ff fb27 	bl	bbda4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc756:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc75a:	21ff      	movs	r1, #255	; 0xff
   bc75c:	f001 fec2 	bl	be4e4 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc760:	e7ee      	b.n	bc740 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc762:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc766:	2101      	movs	r1, #1
   bc768:	f005 fb9f 	bl	c1eaa <digitalWrite>
  _spiPort->endTransaction();
   bc76c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc770:	f001 fdff 	bl	be372 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc774:	e7e0      	b.n	bc738 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc776:	bf00      	nop
   bc778:	000c6c14 	.word	0x000c6c14

000bc77c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc77c:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc77e:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc782:	b91c      	cbnz	r4, bc78c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc784:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc788:	f7ff bea8 	b.w	bc4dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc78c:	2c01      	cmp	r4, #1
   bc78e:	d103      	bne.n	bc798 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc790:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc794:	f7ff bf6a 	b.w	bc66c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc798:	2c02      	cmp	r4, #2
   bc79a:	d103      	bne.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc79c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc7a0:	f7ff bf80 	b.w	bc6a4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc7a4:	2000      	movs	r0, #0
   bc7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc7aa:	4770      	bx	lr

000bc7ac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc7b0:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc7b2:	2102      	movs	r1, #2
   bc7b4:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7b6:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7ba:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7be:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc7c2:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7c4:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7c8:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc7cc:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc7d0:	4604      	mov	r4, r0
   bc7d2:	4617      	mov	r7, r2
   bc7d4:	4698      	mov	r8, r3
   bc7d6:	f001 f953 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc7da:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc7de:	4606      	mov	r6, r0
   bc7e0:	4481      	add	r9, r0
   bc7e2:	f001 f94d 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc7e6:	4581      	cmp	r9, r0
   bc7e8:	f240 80a8 	bls.w	bc93c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc7ec:	4643      	mov	r3, r8
   bc7ee:	463a      	mov	r2, r7
   bc7f0:	4629      	mov	r1, r5
   bc7f2:	4620      	mov	r0, r4
   bc7f4:	f7ff ffc2 	bl	bc77c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc7f8:	2800      	cmp	r0, #0
   bc7fa:	f000 809b 	beq.w	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc7fe:	7beb      	ldrb	r3, [r5, #15]
   bc800:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc804:	2b01      	cmp	r3, #1
   bc806:	d125      	bne.n	bc854 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc808:	2901      	cmp	r1, #1
   bc80a:	f040 80ec 	bne.w	bc9e6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc80e:	7bab      	ldrb	r3, [r5, #14]
   bc810:	2b01      	cmp	r3, #1
   bc812:	782b      	ldrb	r3, [r5, #0]
   bc814:	d13b      	bne.n	bc88e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc816:	42bb      	cmp	r3, r7
   bc818:	d13e      	bne.n	bc898 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc81a:	786a      	ldrb	r2, [r5, #1]
   bc81c:	4542      	cmp	r2, r8
   bc81e:	d136      	bne.n	bc88e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc820:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc824:	b913      	cbnz	r3, bc82c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc826:	200b      	movs	r0, #11
}
   bc828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc82c:	4978      	ldr	r1, [pc, #480]	; (bca10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc82e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc832:	f003 f9c0 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc836:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc83a:	f001 f921 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc83e:	220a      	movs	r2, #10
   bc840:	1b81      	subs	r1, r0, r6
   bc842:	4628      	mov	r0, r5
   bc844:	f7fb fc9b 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc848:	4972      	ldr	r1, [pc, #456]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc84a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc84e:	f003 f9cc 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc852:	e7e8      	b.n	bc826 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc854:	2b02      	cmp	r3, #2
   bc856:	d137      	bne.n	bc8c8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc858:	2901      	cmp	r1, #1
   bc85a:	f040 80aa 	bne.w	bc9b2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc85e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc862:	b193      	cbz	r3, bc88a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc864:	496c      	ldr	r1, [pc, #432]	; (bca18 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc866:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc86a:	f003 f9a4 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc86e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc872:	f001 f905 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc876:	220a      	movs	r2, #10
   bc878:	1b81      	subs	r1, r0, r6
   bc87a:	4628      	mov	r0, r5
   bc87c:	f7fb fc7f 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc880:	4964      	ldr	r1, [pc, #400]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc882:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc886:	f003 f9b0 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc88a:	200a      	movs	r0, #10
   bc88c:	e7cc      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc88e:	42bb      	cmp	r3, r7
   bc890:	d102      	bne.n	bc898 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc892:	786b      	ldrb	r3, [r5, #1]
   bc894:	4543      	cmp	r3, r8
   bc896:	d019      	beq.n	bc8cc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc898:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc89c:	b193      	cbz	r3, bc8c4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc89e:	495f      	ldr	r1, [pc, #380]	; (bca1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc8a0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8a4:	f003 f987 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc8a8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc8ac:	f001 f8e8 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc8b0:	220a      	movs	r2, #10
   bc8b2:	1b81      	subs	r1, r0, r6
   bc8b4:	4628      	mov	r0, r5
   bc8b6:	f7fb fc62 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc8ba:	4956      	ldr	r1, [pc, #344]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc8bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8c0:	f003 f993 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc8c4:	200d      	movs	r0, #13
   bc8c6:	e7af      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc8c8:	2901      	cmp	r1, #1
   bc8ca:	d172      	bne.n	bc9b2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc8cc:	89eb      	ldrh	r3, [r5, #14]
   bc8ce:	bb8b      	cbnz	r3, bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc8d0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc8d4:	b193      	cbz	r3, bc8fc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc8d6:	4952      	ldr	r1, [pc, #328]	; (bca20 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc8d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8dc:	f003 f96b 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc8e0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc8e4:	f001 f8cc 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc8e8:	220a      	movs	r2, #10
   bc8ea:	1b81      	subs	r1, r0, r6
   bc8ec:	4628      	mov	r0, r5
   bc8ee:	f7fb fc46 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc8f2:	4948      	ldr	r1, [pc, #288]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc8f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8f8:	f003 f977 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc8fc:	2002      	movs	r0, #2
   bc8fe:	e793      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc900:	430b      	orrs	r3, r1
   bc902:	d117      	bne.n	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc904:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc908:	b193      	cbz	r3, bc930 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc90a:	4946      	ldr	r1, [pc, #280]	; (bca24 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc90c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc910:	f003 f951 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc914:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc918:	f001 f8b2 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc91c:	220a      	movs	r2, #10
   bc91e:	1b81      	subs	r1, r0, r6
   bc920:	4628      	mov	r0, r5
   bc922:	f7fb fc2c 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc926:	493b      	ldr	r1, [pc, #236]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc928:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc92c:	f003 f95d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc930:	2001      	movs	r0, #1
   bc932:	e779      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc934:	2001      	movs	r0, #1
   bc936:	f004 fa39 	bl	c0dac <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc93a:	e752      	b.n	bc7e2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc93c:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc93e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc942:	2a01      	cmp	r2, #1
   bc944:	d11f      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc946:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc94a:	2a02      	cmp	r2, #2
   bc94c:	d11b      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc94e:	7baa      	ldrb	r2, [r5, #14]
   bc950:	2a01      	cmp	r2, #1
   bc952:	d118      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc954:	782a      	ldrb	r2, [r5, #0]
   bc956:	42ba      	cmp	r2, r7
   bc958:	d115      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc95a:	786a      	ldrb	r2, [r5, #1]
   bc95c:	4542      	cmp	r2, r8
   bc95e:	d112      	bne.n	bc986 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc960:	2b00      	cmp	r3, #0
   bc962:	f43f af60 	beq.w	bc826 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc966:	4930      	ldr	r1, [pc, #192]	; (bca28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc968:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc96c:	f003 f923 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc970:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc974:	f001 f884 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc978:	220a      	movs	r2, #10
   bc97a:	1b81      	subs	r1, r0, r6
   bc97c:	4628      	mov	r0, r5
   bc97e:	f7fb fbfe 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc982:	492a      	ldr	r1, [pc, #168]	; (bca2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc984:	e761      	b.n	bc84a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc986:	b193      	cbz	r3, bc9ae <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc988:	4929      	ldr	r1, [pc, #164]	; (bca30 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc98a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc98e:	f003 f912 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc992:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc996:	f001 f873 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc99a:	220a      	movs	r2, #10
   bc99c:	1b81      	subs	r1, r0, r6
   bc99e:	4628      	mov	r0, r5
   bc9a0:	f7fb fbed 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc9a4:	4923      	ldr	r1, [pc, #140]	; (bca34 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc9a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9aa:	f003 f91e 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc9ae:	2003      	movs	r0, #3
   bc9b0:	e73a      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc9b2:	2903      	cmp	r1, #3
   bc9b4:	d1a4      	bne.n	bc900 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc9b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9ba:	b193      	cbz	r3, bc9e2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc9bc:	491e      	ldr	r1, [pc, #120]	; (bca38 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc9be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9c2:	f003 f8f8 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc9c6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc9ca:	f001 f859 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bc9ce:	220a      	movs	r2, #10
   bc9d0:	1b81      	subs	r1, r0, r6
   bc9d2:	4628      	mov	r0, r5
   bc9d4:	f7fb fbd3 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc9d8:	490e      	ldr	r1, [pc, #56]	; (bca14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc9da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9de:	f003 f904 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc9e2:	2004      	movs	r0, #4
   bc9e4:	e720      	b.n	bc828 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc9e6:	2903      	cmp	r1, #3
   bc9e8:	d0e5      	beq.n	bc9b6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc9ea:	2900      	cmp	r1, #0
   bc9ec:	d1a2      	bne.n	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc9ee:	7bab      	ldrb	r3, [r5, #14]
   bc9f0:	2b01      	cmp	r3, #1
   bc9f2:	d19f      	bne.n	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc9f4:	782b      	ldrb	r3, [r5, #0]
   bc9f6:	42bb      	cmp	r3, r7
   bc9f8:	d19c      	bne.n	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc9fa:	786b      	ldrb	r3, [r5, #1]
   bc9fc:	4543      	cmp	r3, r8
   bc9fe:	d199      	bne.n	bc934 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bca00:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca04:	2b00      	cmp	r3, #0
   bca06:	f43f af0e 	beq.w	bc826 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bca0a:	490c      	ldr	r1, [pc, #48]	; (bca3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bca0c:	e70f      	b.n	bc82e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bca0e:	bf00      	nop
   bca10:	000c75c0 	.word	0x000c75c0
   bca14:	000c75fd 	.word	0x000c75fd
   bca18:	000c7603 	.word	0x000c7603
   bca1c:	000c7634 	.word	0x000c7634
   bca20:	000c7666 	.word	0x000c7666
   bca24:	000c7706 	.word	0x000c7706
   bca28:	000c7747 	.word	0x000c7747
   bca2c:	000c777a 	.word	0x000c777a
   bca30:	000c7782 	.word	0x000c7782
   bca34:	000c77a5 	.word	0x000c77a5
   bca38:	000c768c 	.word	0x000c768c
   bca3c:	000c76c7 	.word	0x000c76c7

000bca40 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bca40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bca44:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bca46:	2102      	movs	r1, #2
   bca48:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca4a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca4e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca52:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bca56:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca58:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca5c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bca60:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bca64:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bca68:	4604      	mov	r4, r0
   bca6a:	4617      	mov	r7, r2
   bca6c:	4698      	mov	r8, r3
   bca6e:	f001 f807 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bca72:	f240 1a01 	movw	sl, #257	; 0x101
   bca76:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bca78:	f240 2b01 	movw	fp, #513	; 0x201
   bca7c:	f001 f800 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bca80:	1b80      	subs	r0, r0, r6
   bca82:	4548      	cmp	r0, r9
   bca84:	d269      	bcs.n	bcb5a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bca86:	4643      	mov	r3, r8
   bca88:	463a      	mov	r2, r7
   bca8a:	4629      	mov	r1, r5
   bca8c:	4620      	mov	r0, r4
   bca8e:	f7ff fe75 	bl	bc77c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bca92:	2800      	cmp	r0, #0
   bca94:	d05d      	beq.n	bcb52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bca96:	89ea      	ldrh	r2, [r5, #14]
   bca98:	4552      	cmp	r2, sl
   bca9a:	d11e      	bne.n	bcada <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bca9c:	782b      	ldrb	r3, [r5, #0]
   bca9e:	42bb      	cmp	r3, r7
   bcaa0:	d11b      	bne.n	bcada <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bcaa2:	786b      	ldrb	r3, [r5, #1]
   bcaa4:	4543      	cmp	r3, r8
   bcaa6:	d118      	bne.n	bcada <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bcaa8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcaac:	b193      	cbz	r3, bcad4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bcaae:	4937      	ldr	r1, [pc, #220]	; (bcb8c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bcab0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcab4:	f003 f87f 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcab8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcabc:	f000 ffe0 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bcac0:	220a      	movs	r2, #10
   bcac2:	1b81      	subs	r1, r0, r6
   bcac4:	4628      	mov	r0, r5
   bcac6:	f7fb fb5a 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcaca:	4931      	ldr	r1, [pc, #196]	; (bcb90 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcacc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcad0:	f003 f88b 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bcad4:	200b      	movs	r0, #11
}
   bcad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcada:	7beb      	ldrb	r3, [r5, #15]
   bcadc:	2b01      	cmp	r3, #1
   bcade:	d11d      	bne.n	bcb1c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bcae0:	782b      	ldrb	r3, [r5, #0]
   bcae2:	42bb      	cmp	r3, r7
   bcae4:	d102      	bne.n	bcaec <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bcae6:	786b      	ldrb	r3, [r5, #1]
   bcae8:	4543      	cmp	r3, r8
   bcaea:	d032      	beq.n	bcb52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bcaec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcaf0:	b193      	cbz	r3, bcb18 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bcaf2:	4928      	ldr	r1, [pc, #160]	; (bcb94 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bcaf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaf8:	f003 f85d 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcafc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb00:	f000 ffbe 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bcb04:	220a      	movs	r2, #10
   bcb06:	1b81      	subs	r1, r0, r6
   bcb08:	4628      	mov	r0, r5
   bcb0a:	f7fb fb38 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcb0e:	4920      	ldr	r1, [pc, #128]	; (bcb90 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcb10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb14:	f003 f869 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcb18:	200d      	movs	r0, #13
   bcb1a:	e7dc      	b.n	bcad6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcb1c:	455a      	cmp	r2, fp
   bcb1e:	d018      	beq.n	bcb52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bcb20:	b9bb      	cbnz	r3, bcb52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bcb22:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb26:	b193      	cbz	r3, bcb4e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bcb28:	491b      	ldr	r1, [pc, #108]	; (bcb98 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bcb2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb2e:	f003 f842 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcb32:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb36:	f000 ffa3 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bcb3a:	220a      	movs	r2, #10
   bcb3c:	1b81      	subs	r1, r0, r6
   bcb3e:	4628      	mov	r0, r5
   bcb40:	f7fb fb1d 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcb44:	4912      	ldr	r1, [pc, #72]	; (bcb90 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcb46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb4a:	f003 f84e 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bcb4e:	2002      	movs	r0, #2
   bcb50:	e7c1      	b.n	bcad6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcb52:	2001      	movs	r0, #1
   bcb54:	f004 f92a 	bl	c0dac <delay>
  while (millis() - startTime < maxTime)
   bcb58:	e790      	b.n	bca7c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bcb5a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb5e:	b193      	cbz	r3, bcb86 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bcb60:	490e      	ldr	r1, [pc, #56]	; (bcb9c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bcb62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb66:	f003 f826 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcb6a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb6e:	f000 ff87 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
   bcb72:	220a      	movs	r2, #10
   bcb74:	1b81      	subs	r1, r0, r6
   bcb76:	4628      	mov	r0, r5
   bcb78:	f7fb fb01 	bl	b817e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bcb7c:	4908      	ldr	r1, [pc, #32]	; (bcba0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bcb7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb82:	f003 f832 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcb86:	2003      	movs	r0, #3
   bcb88:	e7a5      	b.n	bcad6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bcb8a:	bf00      	nop
   bcb8c:	000c77ac 	.word	0x000c77ac
   bcb90:	000c75fd 	.word	0x000c75fd
   bcb94:	000c77e6 	.word	0x000c77e6
   bcb98:	000c781a 	.word	0x000c781a
   bcb9c:	000c7853 	.word	0x000c7853
   bcba0:	000c7878 	.word	0x000c7878

000bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bcba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcba8:	4604      	mov	r4, r0
   bcbaa:	4698      	mov	r8, r3
   bcbac:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bcbae:	f7fc fcc9 	bl	b9544 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bcbb2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bcbb6:	460d      	mov	r5, r1
  if (_printDebug == true)
   bcbb8:	b14b      	cbz	r3, bcbce <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bcbba:	492a      	ldr	r1, [pc, #168]	; (bcc64 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bcbbc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbc0:	f002 fff9 	bl	bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bcbc4:	2201      	movs	r2, #1
   bcbc6:	4629      	mov	r1, r5
   bcbc8:	4620      	mov	r0, r4
   bcbca:	f7fc fee9 	bl	b99a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bcbce:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bcbd2:	b993      	cbnz	r3, bcbfa <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bcbd4:	463a      	mov	r2, r7
   bcbd6:	4629      	mov	r1, r5
   bcbd8:	4620      	mov	r0, r4
   bcbda:	f7fc fce1 	bl	b95a0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bcbde:	4606      	mov	r6, r0
   bcbe0:	b188      	cbz	r0, bcc06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcbe2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbe6:	b123      	cbz	r3, bcbf2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bcbe8:	491f      	ldr	r1, [pc, #124]	; (bcc68 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bcbea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbee:	f002 fffc 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bcbf2:	4630      	mov	r0, r6
   bcbf4:	b002      	add	sp, #8
   bcbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bcbfa:	2b01      	cmp	r3, #1
   bcbfc:	d11b      	bne.n	bcc36 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bcbfe:	4629      	mov	r1, r5
   bcc00:	4620      	mov	r0, r4
   bcc02:	f7fc fd8f 	bl	b9724 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bcc06:	b35f      	cbz	r7, bcc60 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcc08:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bcc0a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcc0e:	2a06      	cmp	r2, #6
   bcc10:	d002      	beq.n	bcc18 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bcc12:	f1b8 0f00 	cmp.w	r8, #0
   bcc16:	d015      	beq.n	bcc44 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bcc18:	b123      	cbz	r3, bcc24 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bcc1a:	4914      	ldr	r1, [pc, #80]	; (bcc6c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bcc1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc20:	f002 ffe3 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcc24:	786b      	ldrb	r3, [r5, #1]
   bcc26:	782a      	ldrb	r2, [r5, #0]
   bcc28:	9700      	str	r7, [sp, #0]
   bcc2a:	4629      	mov	r1, r5
   bcc2c:	4620      	mov	r0, r4
   bcc2e:	f7ff fdbd 	bl	bc7ac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcc32:	4606      	mov	r6, r0
   bcc34:	e7dd      	b.n	bcbf2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bcc36:	2b02      	cmp	r3, #2
   bcc38:	d1e5      	bne.n	bcc06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bcc3a:	4629      	mov	r1, r5
   bcc3c:	4620      	mov	r0, r4
   bcc3e:	f7fc fdcb 	bl	b97d8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bcc42:	e7e0      	b.n	bcc06 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcc44:	b123      	cbz	r3, bcc50 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bcc46:	490a      	ldr	r1, [pc, #40]	; (bcc70 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bcc48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc4c:	f002 ffcd 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcc50:	786b      	ldrb	r3, [r5, #1]
   bcc52:	782a      	ldrb	r2, [r5, #0]
   bcc54:	9700      	str	r7, [sp, #0]
   bcc56:	4629      	mov	r1, r5
   bcc58:	4620      	mov	r0, r4
   bcc5a:	f7ff fef1 	bl	bca40 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bcc5e:	e7e8      	b.n	bcc32 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bcc60:	463e      	mov	r6, r7
   bcc62:	e7c6      	b.n	bcbf2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bcc64:	000c7893 	.word	0x000c7893
   bcc68:	000c789e 	.word	0x000c789e
   bcc6c:	000c78b6 	.word	0x000c78b6
   bcc70:	000c78dc 	.word	0x000c78dc

000bcc74 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bcc74:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bcc76:	4b09      	ldr	r3, [pc, #36]	; (bcc9c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bcc78:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcc7c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcc80:	2300      	movs	r3, #0
   bcc82:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bcc86:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bcc88:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bcc8c:	f7ff ff8a 	bl	bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bcc90:	f1a0 030b 	sub.w	r3, r0, #11
   bcc94:	4258      	negs	r0, r3
   bcc96:	4158      	adcs	r0, r3
   bcc98:	bd38      	pop	{r3, r4, r5, pc}
   bcc9a:	bf00      	nop
   bcc9c:	00010006 	.word	0x00010006

000bcca0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bcca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcca2:	4615      	mov	r5, r2
   bcca4:	461a      	mov	r2, r3
   bcca6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcca8:	9301      	str	r3, [sp, #4]
   bccaa:	f7ff ffe3 	bl	bcc74 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bccae:	b190      	cbz	r0, bccd6 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bccb0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bccb4:	4b09      	ldr	r3, [pc, #36]	; (bccdc <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bccb6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bccba:	2300      	movs	r3, #0
   bccbc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bccc0:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bccc2:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bccc4:	4620      	mov	r0, r4
   bccc6:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bccca:	f7ff ff6b 	bl	bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bccce:	f1a0 030a 	sub.w	r3, r0, #10
   bccd2:	4258      	negs	r0, r3
   bccd4:	4158      	adcs	r0, r3
}
   bccd6:	b003      	add	sp, #12
   bccd8:	bd30      	pop	{r4, r5, pc}
   bccda:	bf00      	nop
   bccdc:	00140006 	.word	0x00140006

000bcce0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bcce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcce2:	4615      	mov	r5, r2
   bcce4:	461a      	mov	r2, r3
   bcce6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcce8:	9301      	str	r3, [sp, #4]
   bccea:	f7ff ffc3 	bl	bcc74 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bccee:	b190      	cbz	r0, bcd16 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bccf0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bccf4:	4b09      	ldr	r3, [pc, #36]	; (bcd1c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bccf6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bccfa:	2300      	movs	r3, #0
   bccfc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcd00:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcd02:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcd04:	4620      	mov	r0, r4
   bcd06:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcd0a:	f7ff ff4b 	bl	bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcd0e:	f1a0 030a 	sub.w	r3, r0, #10
   bcd12:	4258      	negs	r0, r3
   bcd14:	4158      	adcs	r0, r3
}
   bcd16:	b003      	add	sp, #12
   bcd18:	bd30      	pop	{r4, r5, pc}
   bcd1a:	bf00      	nop
   bcd1c:	00140006 	.word	0x00140006

000bcd20 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bcd20:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bcd22:	460a      	mov	r2, r1
   bcd24:	2100      	movs	r1, #0
   bcd26:	f7ff bfbb 	b.w	bcca0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bcd2c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bcd2c:	b510      	push	{r4, lr}
   bcd2e:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bcd30:	2074      	movs	r0, #116	; 0x74
   bcd32:	f7f7 f9b0 	bl	b4096 <_Znwj>
   bcd36:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bcd38:	b960      	cbnz	r0, bcd54 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcd3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd3e:	b913      	cbnz	r3, bcd46 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bcd40:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bcd44:	b128      	cbz	r0, bcd52 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bcd46:	4908      	ldr	r1, [pc, #32]	; (bcd68 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bcd48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd4c:	f002 ff4d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcd50:	2000      	movs	r0, #0
}
   bcd52:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bcd54:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bcd56:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bcd5a:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bcd5e:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bcd60:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bcd62:	2001      	movs	r0, #1
   bcd64:	e7f5      	b.n	bcd52 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bcd66:	bf00      	nop
   bcd68:	000c7905 	.word	0x000c7905

000bcd6c <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bcd6c:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcd6e:	6a03      	ldr	r3, [r0, #32]
{
   bcd70:	4604      	mov	r4, r0
   bcd72:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bcd74:	b91b      	cbnz	r3, bcd7e <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bcd76:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcd78:	f7ff ffd8 	bl	bcd2c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcd7c:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcd7e:	6a20      	ldr	r0, [r4, #32]
   bcd80:	b180      	cbz	r0, bcda4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bcd82:	7803      	ldrb	r3, [r0, #0]
   bcd84:	f003 0303 	and.w	r3, r3, #3
   bcd88:	2b03      	cmp	r3, #3
   bcd8a:	d10d      	bne.n	bcda8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bcd8c:	2307      	movs	r3, #7
   bcd8e:	2201      	movs	r2, #1
   bcd90:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcd94:	4620      	mov	r0, r4
   bcd96:	f7ff fcf1 	bl	bc77c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bcd9a:	6a23      	ldr	r3, [r4, #32]
   bcd9c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bcda0:	f000 0001 	and.w	r0, r0, #1
}
   bcda4:	b002      	add	sp, #8
   bcda6:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bcda8:	2b01      	cmp	r3, #1
   bcdaa:	f04f 0300 	mov.w	r3, #0
   bcdae:	d011      	beq.n	bcdd4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bcdb0:	f240 7101 	movw	r1, #1793	; 0x701
   bcdb4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bcdb8:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bcdbc:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcdc0:	4620      	mov	r0, r4
   bcdc2:	f7ff feef 	bl	bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bcdc6:	280b      	cmp	r0, #11
   bcdc8:	d006      	beq.n	bcdd8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bcdca:	f1a0 030d 	sub.w	r3, r0, #13
   bcdce:	4258      	negs	r0, r3
   bcdd0:	4158      	adcs	r0, r3
   bcdd2:	e7e7      	b.n	bcda4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bcdd4:	4618      	mov	r0, r3
   bcdd6:	e7e5      	b.n	bcda4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bcdd8:	2001      	movs	r0, #1
   bcdda:	e7e3      	b.n	bcda4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bcddc <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bcddc:	b510      	push	{r4, lr}
   bcdde:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bcde0:	2018      	movs	r0, #24
   bcde2:	f7f7 f958 	bl	b4096 <_Znwj>
   bcde6:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bcde8:	b960      	cbnz	r0, bce04 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcdea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcdee:	b913      	cbnz	r3, bcdf6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bcdf0:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bcdf4:	b128      	cbz	r0, bce02 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bcdf6:	4905      	ldr	r1, [pc, #20]	; (bce0c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bcdf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdfc:	f002 fef5 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bce00:	2000      	movs	r0, #0
}
   bce02:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bce04:	2300      	movs	r3, #0
   bce06:	7503      	strb	r3, [r0, #20]
  return (true);
   bce08:	2001      	movs	r0, #1
   bce0a:	e7fa      	b.n	bce02 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bce0c:	000c792c 	.word	0x000c792c

000bce10 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bce10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bce12:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bce14:	4605      	mov	r5, r0
   bce16:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bce18:	b18b      	cbz	r3, bce3e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bce1a:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bce1e:	4b13      	ldr	r3, [pc, #76]	; (bce6c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bce20:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bce24:	2300      	movs	r3, #0
   bce26:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bce2a:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bce2c:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bce2e:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bce32:	f7ff feb7 	bl	bcba4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bce36:	280b      	cmp	r0, #11
   bce38:	d10b      	bne.n	bce52 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bce3a:	2401      	movs	r4, #1
   bce3c:	e00d      	b.n	bce5a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bce3e:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bce40:	f7ff ffcc 	bl	bcddc <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bce44:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bce46:	9a01      	ldr	r2, [sp, #4]
   bce48:	2c00      	cmp	r4, #0
   bce4a:	d1e6      	bne.n	bce1a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bce4c:	4620      	mov	r0, r4
   bce4e:	b002      	add	sp, #8
   bce50:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bce52:	f1a0 030d 	sub.w	r3, r0, #13
   bce56:	425c      	negs	r4, r3
   bce58:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bce5a:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bce5c:	b110      	cbz	r0, bce64 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bce5e:	2118      	movs	r1, #24
   bce60:	f7f7 f91f 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bce64:	2300      	movs	r3, #0
   bce66:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bce68:	e7f0      	b.n	bce4c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bce6a:	bf00      	nop
   bce6c:	00010006 	.word	0x00010006

000bce70 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bce70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bce72:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bce76:	4604      	mov	r4, r0
   bce78:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bce7a:	b145      	cbz	r5, bce8e <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bce7c:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bce80:	b9b1      	cbnz	r1, bceb0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bce82:	4620      	mov	r0, r4
}
   bce84:	b003      	add	sp, #12
   bce86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bce8a:	f7ff bfc1 	b.w	bce10 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bce8e:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bce90:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bce94:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bce98:	f004 fd20 	bl	c18dc <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bce9c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcea0:	f004 fd27 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
   bcea4:	9a01      	ldr	r2, [sp, #4]
   bcea6:	2800      	cmp	r0, #0
   bcea8:	d0e8      	beq.n	bce7c <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bceaa:	4628      	mov	r0, r5
   bceac:	b003      	add	sp, #12
   bceae:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bceb0:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bceb2:	bf18      	it	ne
   bceb4:	2104      	movne	r1, #4
   bceb6:	e7e4      	b.n	bce82 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bceb8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bceb8:	b570      	push	{r4, r5, r6, lr}
   bceba:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bcebc:	2300      	movs	r3, #0
   bcebe:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bcec2:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bcec6:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bceca:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bcece:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bced2:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bced4:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bced8:	b91b      	cbnz	r3, bcee2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bceda:	f44f 7180 	mov.w	r1, #256	; 0x100
   bcede:	f7fb f9ed 	bl	b82bc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bcee2:	4620      	mov	r0, r4
   bcee4:	f7fc fe04 	bl	b9af0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bcee8:	4631      	mov	r1, r6
   bceea:	4620      	mov	r0, r4
   bceec:	f7ff ffc0 	bl	bce70 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bcef0:	b110      	cbz	r0, bcef8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bcef2:	2501      	movs	r5, #1
}
   bcef4:	4628      	mov	r0, r5
   bcef6:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcef8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcefc:	b913      	cbnz	r3, bcf04 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bcefe:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcf02:	b123      	cbz	r3, bcf0e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bcf04:	4917      	ldr	r1, [pc, #92]	; (bcf64 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bcf06:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf0a:	f002 fe6e 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bcf0e:	4631      	mov	r1, r6
   bcf10:	4620      	mov	r0, r4
   bcf12:	f7ff ffad 	bl	bce70 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bcf16:	2800      	cmp	r0, #0
   bcf18:	d1eb      	bne.n	bcef2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcf1a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf1e:	b913      	cbnz	r3, bcf26 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bcf20:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcf24:	b123      	cbz	r3, bcf30 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bcf26:	4910      	ldr	r1, [pc, #64]	; (bcf68 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bcf28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf2c:	f002 fe5d 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bcf30:	4631      	mov	r1, r6
   bcf32:	4620      	mov	r0, r4
   bcf34:	f7ff ff9c 	bl	bce70 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bcf38:	2800      	cmp	r0, #0
   bcf3a:	d1da      	bne.n	bcef2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bcf3c:	2d00      	cmp	r5, #0
   bcf3e:	d0d9      	beq.n	bcef4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bcf40:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bcf44:	2d00      	cmp	r5, #0
   bcf46:	d0d5      	beq.n	bcef4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcf48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf4c:	b91b      	cbnz	r3, bcf56 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bcf4e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcf52:	2b00      	cmp	r3, #0
   bcf54:	d0cd      	beq.n	bcef2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bcf56:	4905      	ldr	r1, [pc, #20]	; (bcf6c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bcf58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf5c:	f002 fe45 	bl	bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcf60:	e7c8      	b.n	bcef4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bcf62:	bf00      	nop
   bcf64:	000c7953 	.word	0x000c7953
   bcf68:	000c7977 	.word	0x000c7977
   bcf6c:	000c799a 	.word	0x000c799a

000bcf70 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bcf70:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcf72:	6a03      	ldr	r3, [r0, #32]
{
   bcf74:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bcf76:	b91b      	cbnz	r3, bcf80 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bcf78:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcf7a:	f7ff fed7 	bl	bcd2c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcf7e:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcf80:	6a20      	ldr	r0, [r4, #32]
   bcf82:	b1b0      	cbz	r0, bcfb2 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bcf84:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bcf88:	07db      	lsls	r3, r3, #31
   bcf8a:	d402      	bmi.n	bcf92 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bcf8c:	4620      	mov	r0, r4
   bcf8e:	f7ff feed 	bl	bcd6c <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bcf92:	6a23      	ldr	r3, [r4, #32]
   bcf94:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bcf98:	f36f 0200 	bfc	r2, #0, #1
   bcf9c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bcfa0:	6a23      	ldr	r3, [r4, #32]
   bcfa2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bcfa6:	f36f 0200 	bfc	r2, #0, #1
   bcfaa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bcfae:	6a23      	ldr	r3, [r4, #32]
   bcfb0:	69d8      	ldr	r0, [r3, #28]
}
   bcfb2:	b002      	add	sp, #8
   bcfb4:	bd10      	pop	{r4, pc}

000bcfb6 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bcfb6:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcfb8:	6a03      	ldr	r3, [r0, #32]
{
   bcfba:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bcfbc:	b91b      	cbnz	r3, bcfc6 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bcfbe:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcfc0:	f7ff feb4 	bl	bcd2c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcfc4:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcfc6:	6a20      	ldr	r0, [r4, #32]
   bcfc8:	b1b0      	cbz	r0, bcff8 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bcfca:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bcfce:	079b      	lsls	r3, r3, #30
   bcfd0:	d402      	bmi.n	bcfd8 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bcfd2:	4620      	mov	r0, r4
   bcfd4:	f7ff feca 	bl	bcd6c <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bcfd8:	6a23      	ldr	r3, [r4, #32]
   bcfda:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bcfde:	f36f 0241 	bfc	r2, #1, #1
   bcfe2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bcfe6:	6a23      	ldr	r3, [r4, #32]
   bcfe8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bcfec:	f36f 0200 	bfc	r2, #0, #1
   bcff0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bcff4:	6a23      	ldr	r3, [r4, #32]
   bcff6:	6a18      	ldr	r0, [r3, #32]
}
   bcff8:	b002      	add	sp, #8
   bcffa:	bd10      	pop	{r4, pc}

000bcffc <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   bcffc:	4770      	bx	lr

000bcffe <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   bcffe:	4770      	bx	lr

000bd000 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   bd000:	b538      	push	{r3, r4, r5, lr}
   bd002:	460c      	mov	r4, r1
   bd004:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   bd006:	2220      	movs	r2, #32
   bd008:	2100      	movs	r1, #0
   bd00a:	f104 0008 	add.w	r0, r4, #8
   bd00e:	f007 fa23 	bl	c4458 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   bd012:	4909      	ldr	r1, [pc, #36]	; (bd038 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   bd014:	220b      	movs	r2, #11
   bd016:	4620      	mov	r0, r4
   bd018:	f007 fad8 	bl	c45cc <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   bd01c:	2301      	movs	r3, #1
   bd01e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   bd020:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd022:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bd024:	2302      	movs	r3, #2
   bd026:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   bd028:	4b04      	ldr	r3, [pc, #16]	; (bd03c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   bd02a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   bd02c:	4b04      	ldr	r3, [pc, #16]	; (bd040 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   bd02e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   bd030:	4b04      	ldr	r3, [pc, #16]	; (bd044 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   bd032:	6223      	str	r3, [r4, #32]
}
   bd034:	bd38      	pop	{r3, r4, r5, pc}
   bd036:	bf00      	nop
   bd038:	000c7ab9 	.word	0x000c7ab9
   bd03c:	c4c80000 	.word	0xc4c80000
   bd040:	44c80000 	.word	0x44c80000
   bd044:	3c75c28f 	.word	0x3c75c28f

000bd048 <_ZN16Adafruit_LIS3MDLD0Ev>:
   bd048:	b510      	push	{r4, lr}
   bd04a:	2128      	movs	r1, #40	; 0x28
   bd04c:	4604      	mov	r4, r0
   bd04e:	f7f7 f828 	bl	b40a2 <_ZdlPvj>
   bd052:	4620      	mov	r0, r4
   bd054:	bd10      	pop	{r4, pc}
	...

000bd058 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   bd058:	4a03      	ldr	r2, [pc, #12]	; (bd068 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   bd05a:	6002      	str	r2, [r0, #0]
   bd05c:	2200      	movs	r2, #0
   bd05e:	e9c0 2207 	strd	r2, r2, [r0, #28]
   bd062:	7602      	strb	r2, [r0, #24]
   bd064:	4770      	bx	lr
   bd066:	bf00      	nop
   bd068:	000c7adc 	.word	0x000c7adc

000bd06c <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   bd06c:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd06e:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   bd070:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd072:	2200      	movs	r2, #0
   bd074:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd078:	2506      	movs	r5, #6
   bd07a:	2228      	movs	r2, #40	; 0x28
   bd07c:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   bd080:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd082:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd086:	a806      	add	r0, sp, #24
   bd088:	f000 f9c8 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   bd08c:	462a      	mov	r2, r5
   bd08e:	a904      	add	r1, sp, #16
   bd090:	a806      	add	r0, sp, #24
   bd092:	f000 fa41 	bl	bd518 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   bd096:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   bd098:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   bd09c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   bd0a0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   bd0a4:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   bd0a6:	2d03      	cmp	r5, #3
   bd0a8:	bf98      	it	ls
   bd0aa:	4812      	ldrls	r0, [pc, #72]	; (bd0f4 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   bd0ac:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   bd0ae:	ee07 1a10 	vmov	s14, r1
   bd0b2:	bf9c      	itt	ls
   bd0b4:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   bd0b8:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   bd0bc:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   bd0be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   bd0c2:	bf88      	it	hi
   bd0c4:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   bd0c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   bd0cc:	ee07 2a10 	vmov	s14, r2
   bd0d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   bd0d4:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   bd0d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   bd0dc:	ee07 3a10 	vmov	s14, r3
   bd0e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   bd0e4:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   bd0e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
   bd0ec:	edc4 6a05 	vstr	s13, [r4, #20]
}
   bd0f0:	b00d      	add	sp, #52	; 0x34
   bd0f2:	bd30      	pop	{r4, r5, pc}
   bd0f4:	000c7ac4 	.word	0x000c7ac4

000bd0f8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   bd0f8:	b538      	push	{r3, r4, r5, lr}
   bd0fa:	460c      	mov	r4, r1
   bd0fc:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   bd0fe:	2220      	movs	r2, #32
   bd100:	2100      	movs	r1, #0
   bd102:	1d20      	adds	r0, r4, #4
   bd104:	f007 f9a8 	bl	c4458 <memset>
  event->version = sizeof(sensors_event_t);
   bd108:	2324      	movs	r3, #36	; 0x24
   bd10a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   bd10c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd10e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bd110:	2302      	movs	r3, #2
   bd112:	60a3      	str	r3, [r4, #8]
   bd114:	f000 fcb4 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   bd118:	6120      	str	r0, [r4, #16]
  read();
   bd11a:	4628      	mov	r0, r5
   bd11c:	f7ff ffa6 	bl	bd06c <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bd120:	edd5 7a03 	vldr	s15, [r5, #12]
   bd124:	ed9f 7a09 	vldr	s14, [pc, #36]	; bd14c <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   bd128:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   bd12c:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bd12e:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   bd132:	edd5 7a04 	vldr	s15, [r5, #16]
   bd136:	ee67 7a87 	vmul.f32	s15, s15, s14
   bd13a:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   bd13e:	edd5 7a05 	vldr	s15, [r5, #20]
   bd142:	ee67 7a87 	vmul.f32	s15, s15, s14
   bd146:	edc4 7a07 	vstr	s15, [r4, #28]
}
   bd14a:	bd38      	pop	{r3, r4, r5, pc}
   bd14c:	42c80000 	.word	0x42c80000

000bd150 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd150:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd152:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd154:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd156:	2700      	movs	r7, #0
   bd158:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bd15c:	2320      	movs	r3, #32
   bd15e:	9300      	str	r3, [sp, #0]
   bd160:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd162:	460e      	mov	r6, r1
   bd164:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd166:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd16a:	462b      	mov	r3, r5
   bd16c:	a808      	add	r0, sp, #32
   bd16e:	f000 f955 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   bd172:	2305      	movs	r3, #5
   bd174:	2202      	movs	r2, #2
   bd176:	a908      	add	r1, sp, #32
   bd178:	a804      	add	r0, sp, #16
   bd17a:	f000 fa2b 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   bd17e:	4631      	mov	r1, r6
   bd180:	a804      	add	r0, sp, #16
   bd182:	f000 fa39 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   bd186:	2323      	movs	r3, #35	; 0x23
   bd188:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   bd18c:	9300      	str	r3, [sp, #0]
   bd18e:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bd192:	462b      	mov	r3, r5
   bd194:	9501      	str	r5, [sp, #4]
   bd196:	a80e      	add	r0, sp, #56	; 0x38
   bd198:	f000 f940 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   bd19c:	2302      	movs	r3, #2
   bd19e:	461a      	mov	r2, r3
   bd1a0:	a90e      	add	r1, sp, #56	; 0x38
   bd1a2:	a806      	add	r0, sp, #24
   bd1a4:	f000 fa16 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   bd1a8:	4631      	mov	r1, r6
   bd1aa:	a806      	add	r0, sp, #24
   bd1ac:	f000 fa24 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd1b0:	b015      	add	sp, #84	; 0x54
   bd1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd1b4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bd1b4:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bd1b6:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bd1b8:	b08c      	sub	sp, #48	; 0x30
   bd1ba:	4606      	mov	r6, r0
   bd1bc:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bd1be:	d103      	bne.n	bd1c8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bd1c0:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bd1c2:	f7ff ffc5 	bl	bd150 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   bd1c6:	e009      	b.n	bd1dc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   bd1c8:	2903      	cmp	r1, #3
   bd1ca:	d003      	beq.n	bd1d4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   bd1cc:	2905      	cmp	r1, #5
   bd1ce:	d103      	bne.n	bd1d8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   bd1d0:	2101      	movs	r1, #1
   bd1d2:	e7f6      	b.n	bd1c2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   bd1d4:	2102      	movs	r1, #2
   bd1d6:	e7f4      	b.n	bd1c2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   bd1d8:	2907      	cmp	r1, #7
   bd1da:	d01b      	beq.n	bd214 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   bd1dc:	200a      	movs	r0, #10
   bd1de:	f003 fde5 	bl	c0dac <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd1e2:	2501      	movs	r5, #1
   bd1e4:	2300      	movs	r3, #0
   bd1e6:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bd1ea:	2320      	movs	r3, #32
   bd1ec:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   bd1f0:	9300      	str	r3, [sp, #0]
   bd1f2:	9501      	str	r5, [sp, #4]
   bd1f4:	462b      	mov	r3, r5
   bd1f6:	a806      	add	r0, sp, #24
   bd1f8:	f000 f910 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   bd1fc:	462b      	mov	r3, r5
   bd1fe:	2204      	movs	r2, #4
   bd200:	a906      	add	r1, sp, #24
   bd202:	a804      	add	r0, sp, #16
   bd204:	f000 f9e6 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   bd208:	4621      	mov	r1, r4
   bd20a:	a804      	add	r0, sp, #16
   bd20c:	f000 f9f4 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd210:	b00c      	add	sp, #48	; 0x30
   bd212:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bd214:	2100      	movs	r1, #0
   bd216:	e7d4      	b.n	bd1c2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000bd218 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd218:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd21a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd21c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd21e:	2500      	movs	r5, #0
   bd220:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bd224:	2222      	movs	r2, #34	; 0x22
   bd226:	9301      	str	r3, [sp, #4]
   bd228:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd22a:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd22c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd230:	a806      	add	r0, sp, #24
   bd232:	f000 f8f3 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   bd236:	462b      	mov	r3, r5
   bd238:	2202      	movs	r2, #2
   bd23a:	a906      	add	r1, sp, #24
   bd23c:	a804      	add	r0, sp, #16
   bd23e:	f000 f9c9 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   bd242:	4621      	mov	r1, r4
   bd244:	a804      	add	r0, sp, #16
   bd246:	f000 f9d7 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd24a:	b00d      	add	sp, #52	; 0x34
   bd24c:	bd30      	pop	{r4, r5, pc}

000bd24e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd24e:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd250:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd252:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd254:	2200      	movs	r2, #0
   bd256:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd25a:	2221      	movs	r2, #33	; 0x21
   bd25c:	9301      	str	r3, [sp, #4]
   bd25e:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd260:	460d      	mov	r5, r1
   bd262:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd264:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd268:	a806      	add	r0, sp, #24
   bd26a:	f000 f8d7 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bd26e:	2305      	movs	r3, #5
   bd270:	2202      	movs	r2, #2
   bd272:	a906      	add	r1, sp, #24
   bd274:	a804      	add	r0, sp, #16
   bd276:	f000 f9ad 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   bd27a:	4629      	mov	r1, r5
   bd27c:	a804      	add	r0, sp, #16
   bd27e:	f000 f9bb 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   bd282:	7625      	strb	r5, [r4, #24]
}
   bd284:	b00d      	add	sp, #52	; 0x34
   bd286:	bd30      	pop	{r4, r5, pc}

000bd288 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd288:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd28a:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd28c:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd28e:	2200      	movs	r2, #0
   bd290:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd294:	2221      	movs	r2, #33	; 0x21
   bd296:	9301      	str	r3, [sp, #4]
   bd298:	9200      	str	r2, [sp, #0]
   bd29a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd29e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd2a0:	a806      	add	r0, sp, #24
   bd2a2:	f000 f8bb 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bd2a6:	2305      	movs	r3, #5
   bd2a8:	2202      	movs	r2, #2
   bd2aa:	a906      	add	r1, sp, #24
   bd2ac:	a804      	add	r0, sp, #16
   bd2ae:	f000 f991 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   bd2b2:	a804      	add	r0, sp, #16
   bd2b4:	f000 f993 	bl	bd5de <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   bd2b8:	b2c0      	uxtb	r0, r0
   bd2ba:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   bd2bc:	b00c      	add	sp, #48	; 0x30
   bd2be:	bd10      	pop	{r4, pc}

000bd2c0 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   bd2c0:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd2c2:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   bd2c4:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd2c6:	2501      	movs	r5, #1
   bd2c8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bd2cc:	2321      	movs	r3, #33	; 0x21
   bd2ce:	9300      	str	r3, [sp, #0]
   bd2d0:	9501      	str	r5, [sp, #4]
   bd2d2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   bd2d6:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd2d8:	462b      	mov	r3, r5
   bd2da:	a806      	add	r0, sp, #24
   bd2dc:	f000 f89e 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   bd2e0:	2302      	movs	r3, #2
   bd2e2:	462a      	mov	r2, r5
   bd2e4:	a906      	add	r1, sp, #24
   bd2e6:	a804      	add	r0, sp, #16
   bd2e8:	f000 f974 	bl	bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   bd2ec:	4629      	mov	r1, r5
   bd2ee:	a804      	add	r0, sp, #16
   bd2f0:	f000 f982 	bl	bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   bd2f4:	200a      	movs	r0, #10
   bd2f6:	f003 fd59 	bl	c0dac <delay>
  getRange();
   bd2fa:	4620      	mov	r0, r4
   bd2fc:	f7ff ffc4 	bl	bd288 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   bd300:	b00d      	add	sp, #52	; 0x34
   bd302:	bd30      	pop	{r4, r5, pc}

000bd304 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   bd304:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd306:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   bd308:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd30a:	2500      	movs	r5, #0
   bd30c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   bd310:	230f      	movs	r3, #15
   bd312:	9300      	str	r3, [sp, #0]
   bd314:	9601      	str	r6, [sp, #4]
   bd316:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd31a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   bd31c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd31e:	a804      	add	r0, sp, #16
   bd320:	f000 f87c 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   bd324:	a804      	add	r0, sp, #16
   bd326:	f000 f939 	bl	bd59c <_ZN23Adafruit_BusIO_Register4readEv>
   bd32a:	283d      	cmp	r0, #61	; 0x3d
   bd32c:	d115      	bne.n	bd35a <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   bd32e:	4620      	mov	r0, r4
   bd330:	f7ff ffc6 	bl	bd2c0 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bd334:	2103      	movs	r1, #3
   bd336:	4620      	mov	r0, r4
   bd338:	f7ff ff0a 	bl	bd150 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   bd33c:	4631      	mov	r1, r6
   bd33e:	4620      	mov	r0, r4
   bd340:	f7ff ff38 	bl	bd1b4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   bd344:	4629      	mov	r1, r5
   bd346:	4620      	mov	r0, r4
   bd348:	f7ff ff81 	bl	bd24e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   bd34c:	4620      	mov	r0, r4
   bd34e:	4629      	mov	r1, r5
   bd350:	f7ff ff62 	bl	bd218 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   bd354:	4630      	mov	r0, r6
}
   bd356:	b00a      	add	sp, #40	; 0x28
   bd358:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   bd35a:	4628      	mov	r0, r5
   bd35c:	e7fb      	b.n	bd356 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000bd35e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bd35e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   bd360:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bd362:	4604      	mov	r4, r0
  if (!i2c_dev) {
   bd364:	b95b      	cbnz	r3, bd37e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   bd366:	2010      	movs	r0, #16
   bd368:	e9cd 1200 	strd	r1, r2, [sp]
   bd36c:	f7f6 fe93 	bl	b4096 <_Znwj>
   bd370:	4605      	mov	r5, r0
   bd372:	b118      	cbz	r0, bd37c <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   bd374:	e9dd 1200 	ldrd	r1, r2, [sp]
   bd378:	f000 fa71 	bl	bd85e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   bd37c:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   bd37e:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   bd380:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   bd382:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   bd384:	2101      	movs	r1, #1
   bd386:	f000 fa86 	bl	bd896 <_ZN18Adafruit_I2CDevice5beginEb>
   bd38a:	b128      	cbz	r0, bd398 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   bd38c:	4620      	mov	r0, r4
}
   bd38e:	b003      	add	sp, #12
   bd390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   bd394:	f7ff bfb6 	b.w	bd304 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   bd398:	b003      	add	sp, #12
   bd39a:	bd30      	pop	{r4, r5, pc}

000bd39c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bd39c:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   bd39e:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bd3a0:	b08b      	sub	sp, #44	; 0x2c
   bd3a2:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   bd3a4:	2500      	movs	r5, #0
   bd3a6:	2232      	movs	r2, #50	; 0x32
   bd3a8:	2102      	movs	r1, #2
   bd3aa:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bd3ae:	e9cd 2100 	strd	r2, r1, [sp]
   bd3b2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd3b6:	a804      	add	r0, sp, #16
   bd3b8:	f000 f830 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   bd3bc:	462a      	mov	r2, r5
   bd3be:	f3c4 010e 	ubfx	r1, r4, #0, #15
   bd3c2:	a804      	add	r0, sp, #16
   bd3c4:	f000 f88a 	bl	bd4dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bd3c8:	b00b      	add	sp, #44	; 0x2c
   bd3ca:	bd30      	pop	{r4, r5, pc}

000bd3cc <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   bd3cc:	b530      	push	{r4, r5, lr}
   bd3ce:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd3d0:	2500      	movs	r5, #0
  value |= latch << 1;
   bd3d2:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   bd3d6:	0064      	lsls	r4, r4, #1
   bd3d8:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   bd3dc:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   bd3e0:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   bd3e4:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   bd3e8:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   bd3ec:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd3f0:	2301      	movs	r3, #1
  value |= latch << 1;
   bd3f2:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd3f6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   bd3fa:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   bd3fc:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd3fe:	2230      	movs	r2, #48	; 0x30
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	9200      	str	r2, [sp, #0]
   bd404:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd408:	a804      	add	r0, sp, #16
   bd40a:	f000 f807 	bl	bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   bd40e:	462a      	mov	r2, r5
   bd410:	4621      	mov	r1, r4
   bd412:	a804      	add	r0, sp, #16
   bd414:	f000 f862 	bl	bd4dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bd418:	b00b      	add	sp, #44	; 0x2c
   bd41a:	bd30      	pop	{r4, r5, pc}

000bd41c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd41c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd41e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd420:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd424:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd426:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd42a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd42c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd430:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd432:	2500      	movs	r5, #0
  _width = width;
   bd434:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd438:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd43a:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd43e:	7303      	strb	r3, [r0, #12]
}
   bd440:	bd30      	pop	{r4, r5, pc}

000bd442 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd442:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd444:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd446:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd448:	b085      	sub	sp, #20
   bd44a:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd44c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd44e:	f88d 400c 	strb.w	r4, [sp, #12]
   bd452:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd454:	460e      	mov	r6, r1
   bd456:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd458:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd45c:	b140      	cbz	r0, bd470 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd45e:	7b5b      	ldrb	r3, [r3, #13]
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	ab03      	add	r3, sp, #12
   bd464:	9300      	str	r3, [sp, #0]
   bd466:	2301      	movs	r3, #1
   bd468:	f000 fa24 	bl	bd8b4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd46c:	b005      	add	sp, #20
   bd46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd470:	6858      	ldr	r0, [r3, #4]
   bd472:	2800      	cmp	r0, #0
   bd474:	d0fa      	beq.n	bd46c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd476:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd47a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd47e:	f1be 0f03 	cmp.w	lr, #3
   bd482:	d10c      	bne.n	bd49e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd484:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd488:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd48c:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd48e:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd492:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd496:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd498:	f000 f97b 	bl	bd792 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd49c:	e7e6      	b.n	bd46c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd49e:	f1be 0f00 	cmp.w	lr, #0
   bd4a2:	d109      	bne.n	bd4b8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd4a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd4a8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd4ac:	f8cd c000 	str.w	ip, [sp]
   bd4b0:	ab03      	add	r3, sp, #12
   bd4b2:	463a      	mov	r2, r7
   bd4b4:	4631      	mov	r1, r6
   bd4b6:	e7ef      	b.n	bd498 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd4b8:	f1be 0f02 	cmp.w	lr, #2
   bd4bc:	d102      	bne.n	bd4c4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd4be:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd4c2:	e7f1      	b.n	bd4a8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd4c4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd4c8:	bf01      	itttt	eq
   bd4ca:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd4ce:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd4d2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd4d6:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd4da:	e7e7      	b.n	bd4ac <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd4dc <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd4dc:	b4f0      	push	{r4, r5, r6, r7}
   bd4de:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd4e0:	b902      	cbnz	r2, bd4e4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd4e2:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd4e4:	2a04      	cmp	r2, #4
   bd4e6:	d814      	bhi.n	bd512 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd4e8:	f100 050f 	add.w	r5, r0, #15
   bd4ec:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd4ee:	1884      	adds	r4, r0, r2
   bd4f0:	4629      	mov	r1, r5
   bd4f2:	4284      	cmp	r4, r0
   bd4f4:	d009      	beq.n	bd50a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd4f6:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd4f8:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd4fa:	b927      	cbnz	r7, bd506 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd4fc:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd4fe:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd500:	3501      	adds	r5, #1
   bd502:	3c01      	subs	r4, #1
   bd504:	e7f5      	b.n	bd4f2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd506:	73a6      	strb	r6, [r4, #14]
   bd508:	e7f9      	b.n	bd4fe <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd50a:	4620      	mov	r0, r4
}
   bd50c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd50e:	f7ff bf98 	b.w	bd442 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd512:	2000      	movs	r0, #0
   bd514:	bcf0      	pop	{r4, r5, r6, r7}
   bd516:	4770      	bx	lr

000bd518 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd51a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd51c:	7a85      	ldrb	r5, [r0, #10]
   bd51e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd522:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd524:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd526:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd528:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd52a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd52e:	b140      	cbz	r0, bd542 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd530:	2100      	movs	r1, #0
   bd532:	e9cd 2100 	strd	r2, r1, [sp]
   bd536:	a903      	add	r1, sp, #12
   bd538:	7b62      	ldrb	r2, [r4, #13]
   bd53a:	f000 fa29 	bl	bd990 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd53e:	b004      	add	sp, #16
   bd540:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd542:	6860      	ldr	r0, [r4, #4]
   bd544:	2800      	cmp	r0, #0
   bd546:	d0fa      	beq.n	bd53e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd548:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd54a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd54c:	2903      	cmp	r1, #3
   bd54e:	d10d      	bne.n	bd56c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd550:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd554:	21ff      	movs	r1, #255	; 0xff
   bd556:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd55a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd55e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd562:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd564:	a903      	add	r1, sp, #12
   bd566:	f000 f946 	bl	bd7f6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd56a:	e7e8      	b.n	bd53e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd56c:	b941      	cbnz	r1, bd580 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd56e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd572:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd576:	21ff      	movs	r1, #255	; 0xff
   bd578:	e9cd 2100 	strd	r2, r1, [sp]
   bd57c:	4622      	mov	r2, r4
   bd57e:	e7f1      	b.n	bd564 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd580:	2902      	cmp	r1, #2
   bd582:	d102      	bne.n	bd58a <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd584:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd588:	e7f3      	b.n	bd572 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd58a:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd58c:	bf02      	ittt	eq
   bd58e:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd592:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd596:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd59a:	e7ec      	b.n	bd576 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd59c <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd59c:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd59e:	f100 050f 	add.w	r5, r0, #15
   bd5a2:	7b02      	ldrb	r2, [r0, #12]
   bd5a4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd5a6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd5a8:	f7ff ffb6 	bl	bd518 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd5ac:	b178      	cbz	r0, bd5ce <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd5ae:	7b22      	ldrb	r2, [r4, #12]
   bd5b0:	4629      	mov	r1, r5
   bd5b2:	4422      	add	r2, r4
  uint32_t value = 0;
   bd5b4:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd5b6:	42a2      	cmp	r2, r4
   bd5b8:	d00b      	beq.n	bd5d2 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd5ba:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd5bc:	7ba0      	ldrb	r0, [r4, #14]
   bd5be:	b920      	cbnz	r0, bd5ca <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd5c0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd5c2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd5c4:	3a01      	subs	r2, #1
   bd5c6:	3101      	adds	r1, #1
   bd5c8:	e7f5      	b.n	bd5b6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd5ca:	7808      	ldrb	r0, [r1, #0]
   bd5cc:	e7f9      	b.n	bd5c2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd5ce:	f04f 30ff 	mov.w	r0, #4294967295
}
   bd5d2:	bd38      	pop	{r3, r4, r5, pc}

000bd5d4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd5d4:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd5d6:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd5d8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd5da:	7143      	strb	r3, [r0, #5]
}
   bd5dc:	bd10      	pop	{r4, pc}

000bd5de <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd5de:	b510      	push	{r4, lr}
   bd5e0:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd5e2:	6800      	ldr	r0, [r0, #0]
   bd5e4:	f7ff ffda 	bl	bd59c <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd5e8:	7922      	ldrb	r2, [r4, #4]
   bd5ea:	2301      	movs	r3, #1
   bd5ec:	4093      	lsls	r3, r2
  val >>= _shift;
   bd5ee:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd5f0:	3b01      	subs	r3, #1
  val >>= _shift;
   bd5f2:	40d0      	lsrs	r0, r2
}
   bd5f4:	4018      	ands	r0, r3
   bd5f6:	bd10      	pop	{r4, pc}

000bd5f8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd5f8:	b570      	push	{r4, r5, r6, lr}
   bd5fa:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd5fc:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd5fe:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd600:	f7ff ffcc 	bl	bd59c <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd604:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd606:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd608:	2201      	movs	r2, #1
   bd60a:	409a      	lsls	r2, r3
   bd60c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd60e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd612:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd616:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd618:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd61a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd61e:	4329      	orrs	r1, r5
   bd620:	7b02      	ldrb	r2, [r0, #12]
}
   bd622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd626:	f7ff bf59 	b.w	bd4dc <_ZN23Adafruit_BusIO_Register5writeEmh>
	...

000bd62c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd630:	4604      	mov	r4, r0
  if (_spi) {
   bd632:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd634:	b085      	sub	sp, #20
   bd636:	460d      	mov	r5, r1
  if (_spi) {
   bd638:	b140      	cbz	r0, bd64c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd63a:	2300      	movs	r3, #0
   bd63c:	9300      	str	r3, [sp, #0]
   bd63e:	4613      	mov	r3, r2
   bd640:	460a      	mov	r2, r1
   bd642:	f000 ff55 	bl	be4f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd646:	b005      	add	sp, #20
   bd648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd64c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd64e:	68a0      	ldr	r0, [r4, #8]
   bd650:	4f48      	ldr	r7, [pc, #288]	; (bd774 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd652:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd656:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd658:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd65a:	bf0c      	ite	eq
   bd65c:	f04f 0b01 	moveq.w	fp, #1
   bd660:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd664:	ea1b 0f03 	tst.w	fp, r3
   bd668:	eb01 0302 	add.w	r3, r1, r2
   bd66c:	bf0c      	ite	eq
   bd66e:	f04f 0901 	moveq.w	r9, #1
   bd672:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd676:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd678:	9303      	str	r3, [sp, #12]
   bd67a:	9b03      	ldr	r3, [sp, #12]
   bd67c:	42ab      	cmp	r3, r5
   bd67e:	d0e2      	beq.n	bd646 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd680:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd684:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd686:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd68a:	b117      	cbz	r7, bd692 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd68c:	4638      	mov	r0, r7
   bd68e:	f000 f9e7 	bl	bda60 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd692:	7b63      	ldrb	r3, [r4, #13]
   bd694:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd698:	d141      	bne.n	bd71e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd69a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd69e:	1c5a      	adds	r2, r3, #1
   bd6a0:	d00f      	beq.n	bd6c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd6a2:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd6a6:	bf14      	ite	ne
   bd6a8:	2301      	movne	r3, #1
   bd6aa:	2300      	moveq	r3, #0
   bd6ac:	454b      	cmp	r3, r9
   bd6ae:	d008      	beq.n	bd6c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd6b0:	6963      	ldr	r3, [r4, #20]
   bd6b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd6b4:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd6b6:	2900      	cmp	r1, #0
   bd6b8:	d02c      	beq.n	bd714 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd6ba:	4302      	orrs	r2, r0
   bd6bc:	601a      	str	r2, [r3, #0]
   bd6be:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd6c2:	69a1      	ldr	r1, [r4, #24]
   bd6c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd6c6:	680a      	ldr	r2, [r1, #0]
   bd6c8:	4313      	orrs	r3, r2
   bd6ca:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd6cc:	b117      	cbz	r7, bd6d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd6ce:	4638      	mov	r0, r7
   bd6d0:	f000 f9c6 	bl	bda60 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd6d4:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd6d8:	3301      	adds	r3, #1
   bd6da:	d006      	beq.n	bd6ea <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd6dc:	69e3      	ldr	r3, [r4, #28]
   bd6de:	681a      	ldr	r2, [r3, #0]
   bd6e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd6e2:	421a      	tst	r2, r3
            reply |= b;
   bd6e4:	bf18      	it	ne
   bd6e6:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd6ea:	69a1      	ldr	r1, [r4, #24]
   bd6ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd6ee:	680a      	ldr	r2, [r1, #0]
   bd6f0:	ea22 0303 	bic.w	r3, r2, r3
   bd6f4:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd6f6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd6fa:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd6fc:	bf18      	it	ne
   bd6fe:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd702:	7b23      	ldrb	r3, [r4, #12]
   bd704:	2b00      	cmp	r3, #0
   bd706:	d132      	bne.n	bd76e <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd708:	0076      	lsls	r6, r6, #1
   bd70a:	b2f6      	uxtb	r6, r6
   bd70c:	2e00      	cmp	r6, #0
   bd70e:	d1bc      	bne.n	bd68a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd710:	3501      	adds	r5, #1
   bd712:	e7b2      	b.n	bd67a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd714:	ea22 0200 	bic.w	r2, r2, r0
   bd718:	601a      	str	r2, [r3, #0]
   bd71a:	4689      	mov	r9, r1
   bd71c:	e7d1      	b.n	bd6c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd71e:	69a1      	ldr	r1, [r4, #24]
   bd720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd722:	680a      	ldr	r2, [r1, #0]
   bd724:	4313      	orrs	r3, r2
   bd726:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd728:	b117      	cbz	r7, bd730 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd72a:	4638      	mov	r0, r7
   bd72c:	f000 f998 	bl	bda60 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd730:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd734:	3301      	adds	r3, #1
   bd736:	d008      	beq.n	bd74a <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd738:	6963      	ldr	r3, [r4, #20]
   bd73a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd73c:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd73e:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd742:	bf14      	ite	ne
   bd744:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd746:	438a      	biceq	r2, r1
   bd748:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd74a:	69a1      	ldr	r1, [r4, #24]
   bd74c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd74e:	680a      	ldr	r2, [r1, #0]
   bd750:	ea22 0303 	bic.w	r3, r2, r3
   bd754:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd756:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd75a:	3301      	adds	r3, #1
   bd75c:	d0cb      	beq.n	bd6f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd75e:	69e3      	ldr	r3, [r4, #28]
   bd760:	681a      	ldr	r2, [r3, #0]
   bd762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd764:	421a      	tst	r2, r3
            reply |= b;
   bd766:	bf18      	it	ne
   bd768:	ea46 0808 	orrne.w	r8, r6, r8
   bd76c:	e7c3      	b.n	bd6f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd76e:	0876      	lsrs	r6, r6, #1
   bd770:	e7cc      	b.n	bd70c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd772:	bf00      	nop
   bd774:	0007a120 	.word	0x0007a120

000bd778 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd778:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd77a:	2201      	movs	r2, #1
  uint8_t data = send;
   bd77c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd780:	f10d 0107 	add.w	r1, sp, #7
   bd784:	f7ff ff52 	bl	bd62c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd788:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd78c:	b003      	add	sp, #12
   bd78e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd792 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd796:	4604      	mov	r4, r0
  if (_spi) {
   bd798:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd79a:	460e      	mov	r6, r1
   bd79c:	4617      	mov	r7, r2
   bd79e:	461d      	mov	r5, r3
  if (_spi) {
   bd7a0:	b110      	cbz	r0, bd7a8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd7a2:	6861      	ldr	r1, [r4, #4]
   bd7a4:	f000 fdfe 	bl	be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd7a8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd7ac:	2100      	movs	r1, #0
   bd7ae:	b280      	uxth	r0, r0
   bd7b0:	f004 fb7b 	bl	c1eaa <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd7b4:	9b06      	ldr	r3, [sp, #24]
   bd7b6:	eb05 0803 	add.w	r8, r5, r3
   bd7ba:	4545      	cmp	r5, r8
   bd7bc:	d108      	bne.n	bd7d0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd7be:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd7c0:	42b7      	cmp	r7, r6
   bd7c2:	d00b      	beq.n	bd7dc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd7c4:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd7c8:	4620      	mov	r0, r4
   bd7ca:	f7ff ffd5 	bl	bd778 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd7ce:	e7f7      	b.n	bd7c0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd7d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd7d4:	4620      	mov	r0, r4
   bd7d6:	f7ff ffcf 	bl	bd778 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd7da:	e7ee      	b.n	bd7ba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd7dc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd7e0:	2101      	movs	r1, #1
   bd7e2:	b280      	uxth	r0, r0
   bd7e4:	f004 fb61 	bl	c1eaa <digitalWrite>

  if (_spi) {
   bd7e8:	6820      	ldr	r0, [r4, #0]
   bd7ea:	b108      	cbz	r0, bd7f0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd7ec:	f000 fdc1 	bl	be372 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd7f0:	2001      	movs	r0, #1
   bd7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd7f6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd7fa:	4604      	mov	r4, r0
  if (_spi) {
   bd7fc:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd7fe:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd802:	460e      	mov	r6, r1
   bd804:	4617      	mov	r7, r2
   bd806:	461d      	mov	r5, r3
  if (_spi) {
   bd808:	b110      	cbz	r0, bd810 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd80a:	6861      	ldr	r1, [r4, #4]
   bd80c:	f000 fdca 	bl	be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd810:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd814:	2100      	movs	r1, #0
   bd816:	b280      	uxth	r0, r0
   bd818:	f004 fb47 	bl	c1eaa <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd81c:	4437      	add	r7, r6
   bd81e:	42be      	cmp	r6, r7
   bd820:	d10a      	bne.n	bd838 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd822:	9b06      	ldr	r3, [sp, #24]
   bd824:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd826:	42ae      	cmp	r6, r5
   bd828:	d00c      	beq.n	bd844 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd82a:	4641      	mov	r1, r8
   bd82c:	4620      	mov	r0, r4
   bd82e:	f7ff ffa3 	bl	bd778 <_ZN18Adafruit_SPIDevice8transferEh>
   bd832:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd836:	e7f6      	b.n	bd826 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd838:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd83c:	4620      	mov	r0, r4
   bd83e:	f7ff ff9b 	bl	bd778 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd842:	e7ec      	b.n	bd81e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd844:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd848:	2101      	movs	r1, #1
   bd84a:	b280      	uxth	r0, r0
   bd84c:	f004 fb2d 	bl	c1eaa <digitalWrite>

  if (_spi) {
   bd850:	6820      	ldr	r0, [r4, #0]
   bd852:	b108      	cbz	r0, bd858 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd854:	f000 fd8d 	bl	be372 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd858:	2001      	movs	r0, #1
   bd85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd85e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd85e:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd860:	2200      	movs	r2, #0
   bd862:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd864:	2220      	movs	r2, #32
  _addr = addr;
   bd866:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd868:	60c2      	str	r2, [r0, #12]
#endif
}
   bd86a:	4770      	bx	lr

000bd86c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd86c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd86e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd870:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd872:	b153      	cbz	r3, bd88a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd874:	7821      	ldrb	r1, [r4, #0]
   bd876:	6860      	ldr	r0, [r4, #4]
   bd878:	f004 f830 	bl	c18dc <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd87c:	6860      	ldr	r0, [r4, #4]
   bd87e:	f004 f838 	bl	c18f2 <_ZN7TwoWire15endTransmissionEv>
   bd882:	fab0 f080 	clz	r0, r0
   bd886:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd888:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd88a:	2101      	movs	r1, #1
   bd88c:	f000 f803 	bl	bd896 <_ZN18Adafruit_I2CDevice5beginEb>
   bd890:	2800      	cmp	r0, #0
   bd892:	d1ef      	bne.n	bd874 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd894:	e7f8      	b.n	bd888 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd896 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd896:	b538      	push	{r3, r4, r5, lr}
   bd898:	4604      	mov	r4, r0
  _wire->begin();
   bd89a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd89c:	460d      	mov	r5, r1
  _wire->begin();
   bd89e:	f003 ffeb 	bl	c1878 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd8a2:	2001      	movs	r0, #1
   bd8a4:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd8a6:	b125      	cbz	r5, bd8b2 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd8a8:	4620      	mov	r0, r4
}
   bd8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd8ae:	f7ff bfdd 	b.w	bd86c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd8b2:	bd38      	pop	{r3, r4, r5, pc}

000bd8b4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd8b8:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd8bc:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd8be:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd8c0:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd8c2:	4432      	add	r2, r6
   bd8c4:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd8c6:	4604      	mov	r4, r0
   bd8c8:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd8ca:	d902      	bls.n	bd8d2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd8cc:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd8d2:	7801      	ldrb	r1, [r0, #0]
   bd8d4:	6840      	ldr	r0, [r0, #4]
   bd8d6:	f004 f801 	bl	c18dc <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd8da:	b97e      	cbnz	r6, bd8fc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd8dc:	6860      	ldr	r0, [r4, #4]
   bd8de:	6803      	ldr	r3, [r0, #0]
   bd8e0:	462a      	mov	r2, r5
   bd8e2:	68db      	ldr	r3, [r3, #12]
   bd8e4:	4641      	mov	r1, r8
   bd8e6:	4798      	blx	r3
   bd8e8:	4285      	cmp	r5, r0
   bd8ea:	d1ef      	bne.n	bd8cc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd8ec:	6860      	ldr	r0, [r4, #4]
   bd8ee:	4639      	mov	r1, r7
   bd8f0:	f003 fffb 	bl	c18ea <_ZN7TwoWire15endTransmissionEh>
   bd8f4:	fab0 f080 	clz	r0, r0
   bd8f8:	0940      	lsrs	r0, r0, #5
   bd8fa:	e7e8      	b.n	bd8ce <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd8fc:	f1b9 0f00 	cmp.w	r9, #0
   bd900:	d0ec      	beq.n	bd8dc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd902:	6860      	ldr	r0, [r4, #4]
   bd904:	6803      	ldr	r3, [r0, #0]
   bd906:	4632      	mov	r2, r6
   bd908:	68db      	ldr	r3, [r3, #12]
   bd90a:	4649      	mov	r1, r9
   bd90c:	4798      	blx	r3
   bd90e:	4286      	cmp	r6, r0
   bd910:	d1dc      	bne.n	bd8cc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd912:	e7e3      	b.n	bd8dc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd914 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd918:	4615      	mov	r5, r2
   bd91a:	4604      	mov	r4, r0
   bd91c:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd91e:	b2d2      	uxtb	r2, r2
   bd920:	7801      	ldrb	r1, [r0, #0]
   bd922:	6840      	ldr	r0, [r0, #4]
   bd924:	f003 ffc5 	bl	c18b2 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd928:	4285      	cmp	r5, r0
   bd92a:	d10d      	bne.n	bd948 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd92c:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd92e:	fa1f f887 	uxth.w	r8, r7
   bd932:	45a8      	cmp	r8, r5
   bd934:	f107 0701 	add.w	r7, r7, #1
   bd938:	d209      	bcs.n	bd94e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd93a:	6860      	ldr	r0, [r4, #4]
   bd93c:	6803      	ldr	r3, [r0, #0]
   bd93e:	695b      	ldr	r3, [r3, #20]
   bd940:	4798      	blx	r3
   bd942:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd946:	e7f2      	b.n	bd92e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd948:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd94e:	2001      	movs	r0, #1
   bd950:	e7fb      	b.n	bd94a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd952 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd952:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd956:	4607      	mov	r7, r0
   bd958:	4688      	mov	r8, r1
   bd95a:	4616      	mov	r6, r2
   bd95c:	4699      	mov	r9, r3
  size_t pos = 0;
   bd95e:	2500      	movs	r5, #0
  while (pos < len) {
   bd960:	42b5      	cmp	r5, r6
   bd962:	d212      	bcs.n	bd98a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd964:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd966:	1b74      	subs	r4, r6, r5
   bd968:	4294      	cmp	r4, r2
   bd96a:	bf28      	it	cs
   bd96c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd96e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd970:	42ab      	cmp	r3, r5
   bd972:	bf94      	ite	ls
   bd974:	464b      	movls	r3, r9
   bd976:	2300      	movhi	r3, #0
   bd978:	4622      	mov	r2, r4
   bd97a:	eb08 0105 	add.w	r1, r8, r5
   bd97e:	4638      	mov	r0, r7
   bd980:	f7ff ffc8 	bl	bd914 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd984:	b110      	cbz	r0, bd98c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd986:	4425      	add	r5, r4
  while (pos < len) {
   bd988:	e7ea      	b.n	bd960 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd98a:	2001      	movs	r0, #1
}
   bd98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd990 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd990:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd992:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd994:	2300      	movs	r3, #0
   bd996:	e9cd 3300 	strd	r3, r3, [sp]
   bd99a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd99e:	9e06      	ldr	r6, [sp, #24]
   bd9a0:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd9a2:	f7ff ff87 	bl	bd8b4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd9a6:	b140      	cbz	r0, bd9ba <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd9a8:	2301      	movs	r3, #1
   bd9aa:	4632      	mov	r2, r6
   bd9ac:	4629      	mov	r1, r5
   bd9ae:	4620      	mov	r0, r4
}
   bd9b0:	b002      	add	sp, #8
   bd9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd9b6:	f7ff bfcc 	b.w	bd952 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd9ba:	b002      	add	sp, #8
   bd9bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd9c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd9c0:	b508      	push	{r3, lr}
   bd9c2:	4b02      	ldr	r3, [pc, #8]	; (bd9cc <netdb_freeaddrinfo+0xc>)
   bd9c4:	681b      	ldr	r3, [r3, #0]
   bd9c6:	689b      	ldr	r3, [r3, #8]
   bd9c8:	9301      	str	r3, [sp, #4]
   bd9ca:	bd08      	pop	{r3, pc}
   bd9cc:	00030268 	.word	0x00030268

000bd9d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd9d0:	b508      	push	{r3, lr}
   bd9d2:	4b02      	ldr	r3, [pc, #8]	; (bd9dc <netdb_getaddrinfo+0xc>)
   bd9d4:	681b      	ldr	r3, [r3, #0]
   bd9d6:	68db      	ldr	r3, [r3, #12]
   bd9d8:	9301      	str	r3, [sp, #4]
   bd9da:	bd08      	pop	{r3, pc}
   bd9dc:	00030268 	.word	0x00030268

000bd9e0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd9e0:	b508      	push	{r3, lr}
   bd9e2:	4b02      	ldr	r3, [pc, #8]	; (bd9ec <HAL_Validate_Pin_Function+0xc>)
   bd9e4:	681b      	ldr	r3, [r3, #0]
   bd9e6:	685b      	ldr	r3, [r3, #4]
   bd9e8:	9301      	str	r3, [sp, #4]
   bd9ea:	bd08      	pop	{r3, pc}
   bd9ec:	0003022c 	.word	0x0003022c

000bd9f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd9f0:	b508      	push	{r3, lr}
   bd9f2:	4b02      	ldr	r3, [pc, #8]	; (bd9fc <HAL_Pin_Mode+0xc>)
   bd9f4:	681b      	ldr	r3, [r3, #0]
   bd9f6:	689b      	ldr	r3, [r3, #8]
   bd9f8:	9301      	str	r3, [sp, #4]
   bd9fa:	bd08      	pop	{r3, pc}
   bd9fc:	0003022c 	.word	0x0003022c

000bda00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bda00:	b508      	push	{r3, lr}
   bda02:	4b02      	ldr	r3, [pc, #8]	; (bda0c <HAL_Get_Pin_Mode+0xc>)
   bda04:	681b      	ldr	r3, [r3, #0]
   bda06:	68db      	ldr	r3, [r3, #12]
   bda08:	9301      	str	r3, [sp, #4]
   bda0a:	bd08      	pop	{r3, pc}
   bda0c:	0003022c 	.word	0x0003022c

000bda10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bda10:	b508      	push	{r3, lr}
   bda12:	4b02      	ldr	r3, [pc, #8]	; (bda1c <HAL_GPIO_Write+0xc>)
   bda14:	681b      	ldr	r3, [r3, #0]
   bda16:	691b      	ldr	r3, [r3, #16]
   bda18:	9301      	str	r3, [sp, #4]
   bda1a:	bd08      	pop	{r3, pc}
   bda1c:	0003022c 	.word	0x0003022c

000bda20 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bda20:	b508      	push	{r3, lr}
   bda22:	4b02      	ldr	r3, [pc, #8]	; (bda2c <HAL_Interrupts_Enable_All+0xc>)
   bda24:	681b      	ldr	r3, [r3, #0]
   bda26:	6a1b      	ldr	r3, [r3, #32]
   bda28:	9301      	str	r3, [sp, #4]
   bda2a:	bd08      	pop	{r3, pc}
   bda2c:	0003022c 	.word	0x0003022c

000bda30 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bda30:	b508      	push	{r3, lr}
   bda32:	4b02      	ldr	r3, [pc, #8]	; (bda3c <HAL_Interrupts_Disable_All+0xc>)
   bda34:	681b      	ldr	r3, [r3, #0]
   bda36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bda38:	9301      	str	r3, [sp, #4]
   bda3a:	bd08      	pop	{r3, pc}
   bda3c:	0003022c 	.word	0x0003022c

000bda40 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bda40:	b508      	push	{r3, lr}
   bda42:	4b02      	ldr	r3, [pc, #8]	; (bda4c <hal_adc_read+0xc>)
   bda44:	681b      	ldr	r3, [r3, #0]
   bda46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bda48:	9301      	str	r3, [sp, #4]
   bda4a:	bd08      	pop	{r3, pc}
   bda4c:	0003022c 	.word	0x0003022c

000bda50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bda50:	b508      	push	{r3, lr}
   bda52:	4b02      	ldr	r3, [pc, #8]	; (bda5c <HAL_RNG_GetRandomNumber+0xc>)
   bda54:	681b      	ldr	r3, [r3, #0]
   bda56:	685b      	ldr	r3, [r3, #4]
   bda58:	9301      	str	r3, [sp, #4]
   bda5a:	bd08      	pop	{r3, pc}
   bda5c:	00030218 	.word	0x00030218

000bda60 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bda60:	b508      	push	{r3, lr}
   bda62:	4b02      	ldr	r3, [pc, #8]	; (bda6c <HAL_Delay_Microseconds+0xc>)
   bda64:	681b      	ldr	r3, [r3, #0]
   bda66:	68db      	ldr	r3, [r3, #12]
   bda68:	9301      	str	r3, [sp, #4]
   bda6a:	bd08      	pop	{r3, pc}
   bda6c:	00030218 	.word	0x00030218

000bda70 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bda70:	b508      	push	{r3, lr}
   bda72:	4b02      	ldr	r3, [pc, #8]	; (bda7c <HAL_Timer_Get_Micro_Seconds+0xc>)
   bda74:	681b      	ldr	r3, [r3, #0]
   bda76:	691b      	ldr	r3, [r3, #16]
   bda78:	9301      	str	r3, [sp, #4]
   bda7a:	bd08      	pop	{r3, pc}
   bda7c:	00030218 	.word	0x00030218

000bda80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bda80:	b508      	push	{r3, lr}
   bda82:	4b02      	ldr	r3, [pc, #8]	; (bda8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   bda84:	681b      	ldr	r3, [r3, #0]
   bda86:	695b      	ldr	r3, [r3, #20]
   bda88:	9301      	str	r3, [sp, #4]
   bda8a:	bd08      	pop	{r3, pc}
   bda8c:	00030218 	.word	0x00030218

000bda90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bda90:	b508      	push	{r3, lr}
   bda92:	4b02      	ldr	r3, [pc, #8]	; (bda9c <hal_rtc_time_is_valid+0xc>)
   bda94:	681b      	ldr	r3, [r3, #0]
   bda96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bda98:	9301      	str	r3, [sp, #4]
   bda9a:	bd08      	pop	{r3, pc}
   bda9c:	00030218 	.word	0x00030218

000bdaa0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdaa0:	b508      	push	{r3, lr}
   bdaa2:	4b02      	ldr	r3, [pc, #8]	; (bdaac <hal_rtc_get_time+0xc>)
   bdaa4:	681b      	ldr	r3, [r3, #0]
   bdaa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdaa8:	9301      	str	r3, [sp, #4]
   bdaaa:	bd08      	pop	{r3, pc}
   bdaac:	00030218 	.word	0x00030218

000bdab0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdab0:	b508      	push	{r3, lr}
   bdab2:	4b02      	ldr	r3, [pc, #8]	; (bdabc <hal_ble_stack_init+0xc>)
   bdab4:	681b      	ldr	r3, [r3, #0]
   bdab6:	689b      	ldr	r3, [r3, #8]
   bdab8:	9301      	str	r3, [sp, #4]
   bdaba:	bd08      	pop	{r3, pc}
   bdabc:	00030278 	.word	0x00030278

000bdac0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdac0:	b508      	push	{r3, lr}
   bdac2:	4b02      	ldr	r3, [pc, #8]	; (bdacc <hal_ble_gap_set_tx_power+0xc>)
   bdac4:	681b      	ldr	r3, [r3, #0]
   bdac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdac8:	9301      	str	r3, [sp, #4]
   bdaca:	bd08      	pop	{r3, pc}
   bdacc:	00030278 	.word	0x00030278

000bdad0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdad0:	b508      	push	{r3, lr}
   bdad2:	4b02      	ldr	r3, [pc, #8]	; (bdadc <hal_ble_gap_set_advertising_data+0xc>)
   bdad4:	681b      	ldr	r3, [r3, #0]
   bdad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdad8:	9301      	str	r3, [sp, #4]
   bdada:	bd08      	pop	{r3, pc}
   bdadc:	00030278 	.word	0x00030278

000bdae0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdae0:	b508      	push	{r3, lr}
   bdae2:	4b02      	ldr	r3, [pc, #8]	; (bdaec <hal_ble_gap_set_scan_response_data+0xc>)
   bdae4:	681b      	ldr	r3, [r3, #0]
   bdae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdae8:	9301      	str	r3, [sp, #4]
   bdaea:	bd08      	pop	{r3, pc}
   bdaec:	00030278 	.word	0x00030278

000bdaf0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdaf0:	b508      	push	{r3, lr}
   bdaf2:	4b02      	ldr	r3, [pc, #8]	; (bdafc <hal_ble_gap_start_advertising+0xc>)
   bdaf4:	681b      	ldr	r3, [r3, #0]
   bdaf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdaf8:	9301      	str	r3, [sp, #4]
   bdafa:	bd08      	pop	{r3, pc}
   bdafc:	00030278 	.word	0x00030278

000bdb00 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdb00:	b508      	push	{r3, lr}
   bdb02:	4b03      	ldr	r3, [pc, #12]	; (bdb10 <hal_ble_gap_disconnect+0x10>)
   bdb04:	681b      	ldr	r3, [r3, #0]
   bdb06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdb0a:	9301      	str	r3, [sp, #4]
   bdb0c:	bd08      	pop	{r3, pc}
   bdb0e:	0000      	.short	0x0000
   bdb10:	00030278 	.word	0x00030278

000bdb14 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdb14:	b508      	push	{r3, lr}
   bdb16:	4b03      	ldr	r3, [pc, #12]	; (bdb24 <hal_ble_gatt_server_add_service+0x10>)
   bdb18:	681b      	ldr	r3, [r3, #0]
   bdb1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdb1e:	9301      	str	r3, [sp, #4]
   bdb20:	bd08      	pop	{r3, pc}
   bdb22:	0000      	.short	0x0000
   bdb24:	00030278 	.word	0x00030278

000bdb28 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb28:	b508      	push	{r3, lr}
   bdb2a:	4b03      	ldr	r3, [pc, #12]	; (bdb38 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdb2c:	681b      	ldr	r3, [r3, #0]
   bdb2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdb32:	9301      	str	r3, [sp, #4]
   bdb34:	bd08      	pop	{r3, pc}
   bdb36:	0000      	.short	0x0000
   bdb38:	00030278 	.word	0x00030278

000bdb3c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb3c:	b508      	push	{r3, lr}
   bdb3e:	4b03      	ldr	r3, [pc, #12]	; (bdb4c <hal_ble_gatt_client_write_with_response+0x10>)
   bdb40:	681b      	ldr	r3, [r3, #0]
   bdb42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdb46:	9301      	str	r3, [sp, #4]
   bdb48:	bd08      	pop	{r3, pc}
   bdb4a:	0000      	.short	0x0000
   bdb4c:	00030278 	.word	0x00030278

000bdb50 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb50:	b508      	push	{r3, lr}
   bdb52:	4b03      	ldr	r3, [pc, #12]	; (bdb60 <hal_ble_gatt_client_write_without_response+0x10>)
   bdb54:	681b      	ldr	r3, [r3, #0]
   bdb56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdb5a:	9301      	str	r3, [sp, #4]
   bdb5c:	bd08      	pop	{r3, pc}
   bdb5e:	0000      	.short	0x0000
   bdb60:	00030278 	.word	0x00030278

000bdb64 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdb64:	b508      	push	{r3, lr}
   bdb66:	4b03      	ldr	r3, [pc, #12]	; (bdb74 <hal_ble_gatt_server_add_characteristic+0x10>)
   bdb68:	681b      	ldr	r3, [r3, #0]
   bdb6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdb6e:	9301      	str	r3, [sp, #4]
   bdb70:	bd08      	pop	{r3, pc}
   bdb72:	0000      	.short	0x0000
   bdb74:	00030278 	.word	0x00030278

000bdb78 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdb78:	b508      	push	{r3, lr}
   bdb7a:	4b03      	ldr	r3, [pc, #12]	; (bdb88 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdb7c:	681b      	ldr	r3, [r3, #0]
   bdb7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdb82:	9301      	str	r3, [sp, #4]
   bdb84:	bd08      	pop	{r3, pc}
   bdb86:	0000      	.short	0x0000
   bdb88:	00030278 	.word	0x00030278

000bdb8c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb8c:	b508      	push	{r3, lr}
   bdb8e:	4b03      	ldr	r3, [pc, #12]	; (bdb9c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdb90:	681b      	ldr	r3, [r3, #0]
   bdb92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdb96:	9301      	str	r3, [sp, #4]
   bdb98:	bd08      	pop	{r3, pc}
   bdb9a:	0000      	.short	0x0000
   bdb9c:	00030278 	.word	0x00030278

000bdba0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdba0:	b508      	push	{r3, lr}
   bdba2:	4b03      	ldr	r3, [pc, #12]	; (bdbb0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdba4:	681b      	ldr	r3, [r3, #0]
   bdba6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdbaa:	9301      	str	r3, [sp, #4]
   bdbac:	bd08      	pop	{r3, pc}
   bdbae:	0000      	.short	0x0000
   bdbb0:	00030278 	.word	0x00030278

000bdbb4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdbb4:	b508      	push	{r3, lr}
   bdbb6:	4b02      	ldr	r3, [pc, #8]	; (bdbc0 <os_thread_yield+0xc>)
   bdbb8:	681b      	ldr	r3, [r3, #0]
   bdbba:	68db      	ldr	r3, [r3, #12]
   bdbbc:	9301      	str	r3, [sp, #4]
   bdbbe:	bd08      	pop	{r3, pc}
   bdbc0:	00030248 	.word	0x00030248

000bdbc4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdbc4:	b508      	push	{r3, lr}
   bdbc6:	4b02      	ldr	r3, [pc, #8]	; (bdbd0 <os_thread_scheduling+0xc>)
   bdbc8:	681b      	ldr	r3, [r3, #0]
   bdbca:	69db      	ldr	r3, [r3, #28]
   bdbcc:	9301      	str	r3, [sp, #4]
   bdbce:	bd08      	pop	{r3, pc}
   bdbd0:	00030248 	.word	0x00030248

000bdbd4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bdbd4:	b508      	push	{r3, lr}
   bdbd6:	4b02      	ldr	r3, [pc, #8]	; (bdbe0 <os_timer_create+0xc>)
   bdbd8:	681b      	ldr	r3, [r3, #0]
   bdbda:	6a1b      	ldr	r3, [r3, #32]
   bdbdc:	9301      	str	r3, [sp, #4]
   bdbde:	bd08      	pop	{r3, pc}
   bdbe0:	00030248 	.word	0x00030248

000bdbe4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bdbe4:	b508      	push	{r3, lr}
   bdbe6:	4b02      	ldr	r3, [pc, #8]	; (bdbf0 <os_timer_destroy+0xc>)
   bdbe8:	681b      	ldr	r3, [r3, #0]
   bdbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdbec:	9301      	str	r3, [sp, #4]
   bdbee:	bd08      	pop	{r3, pc}
   bdbf0:	00030248 	.word	0x00030248

000bdbf4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bdbf4:	b508      	push	{r3, lr}
   bdbf6:	4b02      	ldr	r3, [pc, #8]	; (bdc00 <os_timer_get_id+0xc>)
   bdbf8:	681b      	ldr	r3, [r3, #0]
   bdbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdbfc:	9301      	str	r3, [sp, #4]
   bdbfe:	bd08      	pop	{r3, pc}
   bdc00:	00030248 	.word	0x00030248

000bdc04 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdc04:	b508      	push	{r3, lr}
   bdc06:	4b02      	ldr	r3, [pc, #8]	; (bdc10 <os_timer_change+0xc>)
   bdc08:	681b      	ldr	r3, [r3, #0]
   bdc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdc0c:	9301      	str	r3, [sp, #4]
   bdc0e:	bd08      	pop	{r3, pc}
   bdc10:	00030248 	.word	0x00030248

000bdc14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bdc14:	b508      	push	{r3, lr}
   bdc16:	4b02      	ldr	r3, [pc, #8]	; (bdc20 <os_mutex_recursive_create+0xc>)
   bdc18:	681b      	ldr	r3, [r3, #0]
   bdc1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdc1c:	9301      	str	r3, [sp, #4]
   bdc1e:	bd08      	pop	{r3, pc}
   bdc20:	00030248 	.word	0x00030248

000bdc24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdc24:	b508      	push	{r3, lr}
   bdc26:	4b02      	ldr	r3, [pc, #8]	; (bdc30 <os_mutex_recursive_destroy+0xc>)
   bdc28:	681b      	ldr	r3, [r3, #0]
   bdc2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdc2c:	9301      	str	r3, [sp, #4]
   bdc2e:	bd08      	pop	{r3, pc}
   bdc30:	00030248 	.word	0x00030248

000bdc34 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdc34:	b508      	push	{r3, lr}
   bdc36:	4b02      	ldr	r3, [pc, #8]	; (bdc40 <os_mutex_recursive_lock+0xc>)
   bdc38:	681b      	ldr	r3, [r3, #0]
   bdc3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdc3c:	9301      	str	r3, [sp, #4]
   bdc3e:	bd08      	pop	{r3, pc}
   bdc40:	00030248 	.word	0x00030248

000bdc44 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdc44:	b508      	push	{r3, lr}
   bdc46:	4b02      	ldr	r3, [pc, #8]	; (bdc50 <os_mutex_recursive_unlock+0xc>)
   bdc48:	681b      	ldr	r3, [r3, #0]
   bdc4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdc4c:	9301      	str	r3, [sp, #4]
   bdc4e:	bd08      	pop	{r3, pc}
   bdc50:	00030248 	.word	0x00030248

000bdc54 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdc54:	b508      	push	{r3, lr}
   bdc56:	4b02      	ldr	r3, [pc, #8]	; (bdc60 <os_timer_set_id+0xc>)
   bdc58:	681b      	ldr	r3, [r3, #0]
   bdc5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdc5c:	9301      	str	r3, [sp, #4]
   bdc5e:	bd08      	pop	{r3, pc}
   bdc60:	00030248 	.word	0x00030248

000bdc64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bdc64:	b508      	push	{r3, lr}
   bdc66:	4b02      	ldr	r3, [pc, #8]	; (bdc70 <inet_inet_ntop+0xc>)
   bdc68:	681b      	ldr	r3, [r3, #0]
   bdc6a:	695b      	ldr	r3, [r3, #20]
   bdc6c:	9301      	str	r3, [sp, #4]
   bdc6e:	bd08      	pop	{r3, pc}
   bdc70:	00030264 	.word	0x00030264

000bdc74 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bdc74:	b508      	push	{r3, lr}
   bdc76:	4b02      	ldr	r3, [pc, #8]	; (bdc80 <hal_usart_end+0xc>)
   bdc78:	681b      	ldr	r3, [r3, #0]
   bdc7a:	689b      	ldr	r3, [r3, #8]
   bdc7c:	9301      	str	r3, [sp, #4]
   bdc7e:	bd08      	pop	{r3, pc}
   bdc80:	0003023c 	.word	0x0003023c

000bdc84 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bdc84:	b508      	push	{r3, lr}
   bdc86:	4b02      	ldr	r3, [pc, #8]	; (bdc90 <hal_usart_write+0xc>)
   bdc88:	681b      	ldr	r3, [r3, #0]
   bdc8a:	68db      	ldr	r3, [r3, #12]
   bdc8c:	9301      	str	r3, [sp, #4]
   bdc8e:	bd08      	pop	{r3, pc}
   bdc90:	0003023c 	.word	0x0003023c

000bdc94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b02      	ldr	r3, [pc, #8]	; (bdca0 <hal_usart_available+0xc>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	691b      	ldr	r3, [r3, #16]
   bdc9c:	9301      	str	r3, [sp, #4]
   bdc9e:	bd08      	pop	{r3, pc}
   bdca0:	0003023c 	.word	0x0003023c

000bdca4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bdca4:	b508      	push	{r3, lr}
   bdca6:	4b02      	ldr	r3, [pc, #8]	; (bdcb0 <hal_usart_read+0xc>)
   bdca8:	681b      	ldr	r3, [r3, #0]
   bdcaa:	695b      	ldr	r3, [r3, #20]
   bdcac:	9301      	str	r3, [sp, #4]
   bdcae:	bd08      	pop	{r3, pc}
   bdcb0:	0003023c 	.word	0x0003023c

000bdcb4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bdcb4:	b508      	push	{r3, lr}
   bdcb6:	4b02      	ldr	r3, [pc, #8]	; (bdcc0 <hal_usart_peek+0xc>)
   bdcb8:	681b      	ldr	r3, [r3, #0]
   bdcba:	699b      	ldr	r3, [r3, #24]
   bdcbc:	9301      	str	r3, [sp, #4]
   bdcbe:	bd08      	pop	{r3, pc}
   bdcc0:	0003023c 	.word	0x0003023c

000bdcc4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bdcc4:	b508      	push	{r3, lr}
   bdcc6:	4b02      	ldr	r3, [pc, #8]	; (bdcd0 <hal_usart_flush+0xc>)
   bdcc8:	681b      	ldr	r3, [r3, #0]
   bdcca:	69db      	ldr	r3, [r3, #28]
   bdccc:	9301      	str	r3, [sp, #4]
   bdcce:	bd08      	pop	{r3, pc}
   bdcd0:	0003023c 	.word	0x0003023c

000bdcd4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bdcd4:	b508      	push	{r3, lr}
   bdcd6:	4b02      	ldr	r3, [pc, #8]	; (bdce0 <hal_usart_is_enabled+0xc>)
   bdcd8:	681b      	ldr	r3, [r3, #0]
   bdcda:	6a1b      	ldr	r3, [r3, #32]
   bdcdc:	9301      	str	r3, [sp, #4]
   bdcde:	bd08      	pop	{r3, pc}
   bdce0:	0003023c 	.word	0x0003023c

000bdce4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b02      	ldr	r3, [pc, #8]	; (bdcf0 <hal_usart_available_data_for_write+0xc>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdcec:	9301      	str	r3, [sp, #4]
   bdcee:	bd08      	pop	{r3, pc}
   bdcf0:	0003023c 	.word	0x0003023c

000bdcf4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bdcf4:	b508      	push	{r3, lr}
   bdcf6:	4b02      	ldr	r3, [pc, #8]	; (bdd00 <hal_usart_begin_config+0xc>)
   bdcf8:	681b      	ldr	r3, [r3, #0]
   bdcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdcfc:	9301      	str	r3, [sp, #4]
   bdcfe:	bd08      	pop	{r3, pc}
   bdd00:	0003023c 	.word	0x0003023c

000bdd04 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bdd04:	b508      	push	{r3, lr}
   bdd06:	4b02      	ldr	r3, [pc, #8]	; (bdd10 <hal_usart_init_ex+0xc>)
   bdd08:	681b      	ldr	r3, [r3, #0]
   bdd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdd0c:	9301      	str	r3, [sp, #4]
   bdd0e:	bd08      	pop	{r3, pc}
   bdd10:	0003023c 	.word	0x0003023c

000bdd14 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bdd14:	b508      	push	{r3, lr}
   bdd16:	4b02      	ldr	r3, [pc, #8]	; (bdd20 <hal_i2c_set_speed+0xc>)
   bdd18:	681b      	ldr	r3, [r3, #0]
   bdd1a:	681b      	ldr	r3, [r3, #0]
   bdd1c:	9301      	str	r3, [sp, #4]
   bdd1e:	bd08      	pop	{r3, pc}
   bdd20:	00030228 	.word	0x00030228

000bdd24 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bdd24:	b508      	push	{r3, lr}
   bdd26:	4b02      	ldr	r3, [pc, #8]	; (bdd30 <hal_i2c_begin+0xc>)
   bdd28:	681b      	ldr	r3, [r3, #0]
   bdd2a:	68db      	ldr	r3, [r3, #12]
   bdd2c:	9301      	str	r3, [sp, #4]
   bdd2e:	bd08      	pop	{r3, pc}
   bdd30:	00030228 	.word	0x00030228

000bdd34 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bdd34:	b508      	push	{r3, lr}
   bdd36:	4b02      	ldr	r3, [pc, #8]	; (bdd40 <hal_i2c_begin_transmission+0xc>)
   bdd38:	681b      	ldr	r3, [r3, #0]
   bdd3a:	699b      	ldr	r3, [r3, #24]
   bdd3c:	9301      	str	r3, [sp, #4]
   bdd3e:	bd08      	pop	{r3, pc}
   bdd40:	00030228 	.word	0x00030228

000bdd44 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bdd44:	b508      	push	{r3, lr}
   bdd46:	4b02      	ldr	r3, [pc, #8]	; (bdd50 <hal_i2c_end_transmission+0xc>)
   bdd48:	681b      	ldr	r3, [r3, #0]
   bdd4a:	69db      	ldr	r3, [r3, #28]
   bdd4c:	9301      	str	r3, [sp, #4]
   bdd4e:	bd08      	pop	{r3, pc}
   bdd50:	00030228 	.word	0x00030228

000bdd54 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bdd54:	b508      	push	{r3, lr}
   bdd56:	4b02      	ldr	r3, [pc, #8]	; (bdd60 <hal_i2c_write+0xc>)
   bdd58:	681b      	ldr	r3, [r3, #0]
   bdd5a:	6a1b      	ldr	r3, [r3, #32]
   bdd5c:	9301      	str	r3, [sp, #4]
   bdd5e:	bd08      	pop	{r3, pc}
   bdd60:	00030228 	.word	0x00030228

000bdd64 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bdd64:	b508      	push	{r3, lr}
   bdd66:	4b02      	ldr	r3, [pc, #8]	; (bdd70 <hal_i2c_available+0xc>)
   bdd68:	681b      	ldr	r3, [r3, #0]
   bdd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd6c:	9301      	str	r3, [sp, #4]
   bdd6e:	bd08      	pop	{r3, pc}
   bdd70:	00030228 	.word	0x00030228

000bdd74 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdd74:	b508      	push	{r3, lr}
   bdd76:	4b02      	ldr	r3, [pc, #8]	; (bdd80 <hal_i2c_read+0xc>)
   bdd78:	681b      	ldr	r3, [r3, #0]
   bdd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdd7c:	9301      	str	r3, [sp, #4]
   bdd7e:	bd08      	pop	{r3, pc}
   bdd80:	00030228 	.word	0x00030228

000bdd84 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bdd84:	b508      	push	{r3, lr}
   bdd86:	4b02      	ldr	r3, [pc, #8]	; (bdd90 <hal_i2c_peek+0xc>)
   bdd88:	681b      	ldr	r3, [r3, #0]
   bdd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdd8c:	9301      	str	r3, [sp, #4]
   bdd8e:	bd08      	pop	{r3, pc}
   bdd90:	00030228 	.word	0x00030228

000bdd94 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bdd94:	b508      	push	{r3, lr}
   bdd96:	4b02      	ldr	r3, [pc, #8]	; (bdda0 <hal_i2c_flush+0xc>)
   bdd98:	681b      	ldr	r3, [r3, #0]
   bdd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdd9c:	9301      	str	r3, [sp, #4]
   bdd9e:	bd08      	pop	{r3, pc}
   bdda0:	00030228 	.word	0x00030228

000bdda4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdda4:	b508      	push	{r3, lr}
   bdda6:	4b02      	ldr	r3, [pc, #8]	; (bddb0 <hal_i2c_is_enabled+0xc>)
   bdda8:	681b      	ldr	r3, [r3, #0]
   bddaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bddac:	9301      	str	r3, [sp, #4]
   bddae:	bd08      	pop	{r3, pc}
   bddb0:	00030228 	.word	0x00030228

000bddb4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bddb4:	b508      	push	{r3, lr}
   bddb6:	4b02      	ldr	r3, [pc, #8]	; (bddc0 <hal_i2c_init+0xc>)
   bddb8:	681b      	ldr	r3, [r3, #0]
   bddba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bddbc:	9301      	str	r3, [sp, #4]
   bddbe:	bd08      	pop	{r3, pc}
   bddc0:	00030228 	.word	0x00030228

000bddc4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bddc4:	b508      	push	{r3, lr}
   bddc6:	4b02      	ldr	r3, [pc, #8]	; (bddd0 <hal_i2c_request_ex+0xc>)
   bddc8:	681b      	ldr	r3, [r3, #0]
   bddca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bddcc:	9301      	str	r3, [sp, #4]
   bddce:	bd08      	pop	{r3, pc}
   bddd0:	00030228 	.word	0x00030228

000bddd4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bddd4:	b508      	push	{r3, lr}
   bddd6:	4b02      	ldr	r3, [pc, #8]	; (bdde0 <hal_spi_begin+0xc>)
   bddd8:	681b      	ldr	r3, [r3, #0]
   bddda:	681b      	ldr	r3, [r3, #0]
   bdddc:	9301      	str	r3, [sp, #4]
   bddde:	bd08      	pop	{r3, pc}
   bdde0:	00030230 	.word	0x00030230

000bdde4 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bdde4:	b508      	push	{r3, lr}
   bdde6:	4b02      	ldr	r3, [pc, #8]	; (bddf0 <hal_spi_set_clock_divider+0xc>)
   bdde8:	681b      	ldr	r3, [r3, #0]
   bddea:	691b      	ldr	r3, [r3, #16]
   bddec:	9301      	str	r3, [sp, #4]
   bddee:	bd08      	pop	{r3, pc}
   bddf0:	00030230 	.word	0x00030230

000bddf4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bddf4:	b508      	push	{r3, lr}
   bddf6:	4b02      	ldr	r3, [pc, #8]	; (bde00 <hal_spi_transfer+0xc>)
   bddf8:	681b      	ldr	r3, [r3, #0]
   bddfa:	695b      	ldr	r3, [r3, #20]
   bddfc:	9301      	str	r3, [sp, #4]
   bddfe:	bd08      	pop	{r3, pc}
   bde00:	00030230 	.word	0x00030230

000bde04 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bde04:	b508      	push	{r3, lr}
   bde06:	4b02      	ldr	r3, [pc, #8]	; (bde10 <hal_spi_init+0xc>)
   bde08:	681b      	ldr	r3, [r3, #0]
   bde0a:	69db      	ldr	r3, [r3, #28]
   bde0c:	9301      	str	r3, [sp, #4]
   bde0e:	bd08      	pop	{r3, pc}
   bde10:	00030230 	.word	0x00030230

000bde14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bde14:	b508      	push	{r3, lr}
   bde16:	4b02      	ldr	r3, [pc, #8]	; (bde20 <hal_spi_is_enabled+0xc>)
   bde18:	681b      	ldr	r3, [r3, #0]
   bde1a:	6a1b      	ldr	r3, [r3, #32]
   bde1c:	9301      	str	r3, [sp, #4]
   bde1e:	bd08      	pop	{r3, pc}
   bde20:	00030230 	.word	0x00030230

000bde24 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bde24:	b508      	push	{r3, lr}
   bde26:	4b02      	ldr	r3, [pc, #8]	; (bde30 <hal_spi_info+0xc>)
   bde28:	681b      	ldr	r3, [r3, #0]
   bde2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bde2c:	9301      	str	r3, [sp, #4]
   bde2e:	bd08      	pop	{r3, pc}
   bde30:	00030230 	.word	0x00030230

000bde34 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bde34:	b508      	push	{r3, lr}
   bde36:	4b02      	ldr	r3, [pc, #8]	; (bde40 <hal_spi_transfer_dma+0xc>)
   bde38:	681b      	ldr	r3, [r3, #0]
   bde3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bde3c:	9301      	str	r3, [sp, #4]
   bde3e:	bd08      	pop	{r3, pc}
   bde40:	00030230 	.word	0x00030230

000bde44 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bde44:	b508      	push	{r3, lr}
   bde46:	4b02      	ldr	r3, [pc, #8]	; (bde50 <hal_spi_begin_ext+0xc>)
   bde48:	681b      	ldr	r3, [r3, #0]
   bde4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde4c:	9301      	str	r3, [sp, #4]
   bde4e:	bd08      	pop	{r3, pc}
   bde50:	00030230 	.word	0x00030230

000bde54 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bde54:	b508      	push	{r3, lr}
   bde56:	4b02      	ldr	r3, [pc, #8]	; (bde60 <hal_spi_transfer_dma_status+0xc>)
   bde58:	681b      	ldr	r3, [r3, #0]
   bde5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bde5c:	9301      	str	r3, [sp, #4]
   bde5e:	bd08      	pop	{r3, pc}
   bde60:	00030230 	.word	0x00030230

000bde64 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bde64:	b508      	push	{r3, lr}
   bde66:	4b02      	ldr	r3, [pc, #8]	; (bde70 <hal_spi_set_settings+0xc>)
   bde68:	681b      	ldr	r3, [r3, #0]
   bde6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bde6c:	9301      	str	r3, [sp, #4]
   bde6e:	bd08      	pop	{r3, pc}
   bde70:	00030230 	.word	0x00030230

000bde74 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bde74:	b508      	push	{r3, lr}
   bde76:	4b02      	ldr	r3, [pc, #8]	; (bde80 <hal_spi_acquire+0xc>)
   bde78:	681b      	ldr	r3, [r3, #0]
   bde7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bde7c:	9301      	str	r3, [sp, #4]
   bde7e:	bd08      	pop	{r3, pc}
   bde80:	00030230 	.word	0x00030230

000bde84 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bde84:	b508      	push	{r3, lr}
   bde86:	4b02      	ldr	r3, [pc, #8]	; (bde90 <hal_spi_release+0xc>)
   bde88:	681b      	ldr	r3, [r3, #0]
   bde8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bde8c:	9301      	str	r3, [sp, #4]
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	00030230 	.word	0x00030230

000bde94 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bde94:	b508      	push	{r3, lr}
   bde96:	4b02      	ldr	r3, [pc, #8]	; (bdea0 <HAL_Servo_Attach+0xc>)
   bde98:	681b      	ldr	r3, [r3, #0]
   bde9a:	691b      	ldr	r3, [r3, #16]
   bde9c:	9301      	str	r3, [sp, #4]
   bde9e:	bd08      	pop	{r3, pc}
   bdea0:	00030224 	.word	0x00030224

000bdea4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bdea4:	b508      	push	{r3, lr}
   bdea6:	4b02      	ldr	r3, [pc, #8]	; (bdeb0 <HAL_Servo_Detach+0xc>)
   bdea8:	681b      	ldr	r3, [r3, #0]
   bdeaa:	695b      	ldr	r3, [r3, #20]
   bdeac:	9301      	str	r3, [sp, #4]
   bdeae:	bd08      	pop	{r3, pc}
   bdeb0:	00030224 	.word	0x00030224

000bdeb4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bdeb4:	b508      	push	{r3, lr}
   bdeb6:	4b02      	ldr	r3, [pc, #8]	; (bdec0 <HAL_Servo_Write_Pulse_Width+0xc>)
   bdeb8:	681b      	ldr	r3, [r3, #0]
   bdeba:	699b      	ldr	r3, [r3, #24]
   bdebc:	9301      	str	r3, [sp, #4]
   bdebe:	bd08      	pop	{r3, pc}
   bdec0:	00030224 	.word	0x00030224

000bdec4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bdec4:	b508      	push	{r3, lr}
   bdec6:	4b02      	ldr	r3, [pc, #8]	; (bded0 <HAL_USB_USART_Init+0xc>)
   bdec8:	681b      	ldr	r3, [r3, #0]
   bdeca:	681b      	ldr	r3, [r3, #0]
   bdecc:	9301      	str	r3, [sp, #4]
   bdece:	bd08      	pop	{r3, pc}
   bded0:	0003024c 	.word	0x0003024c

000bded4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bded4:	b508      	push	{r3, lr}
   bded6:	4b02      	ldr	r3, [pc, #8]	; (bdee0 <HAL_USB_USART_Begin+0xc>)
   bded8:	681b      	ldr	r3, [r3, #0]
   bdeda:	685b      	ldr	r3, [r3, #4]
   bdedc:	9301      	str	r3, [sp, #4]
   bdede:	bd08      	pop	{r3, pc}
   bdee0:	0003024c 	.word	0x0003024c

000bdee4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bdee4:	b508      	push	{r3, lr}
   bdee6:	4b02      	ldr	r3, [pc, #8]	; (bdef0 <HAL_USB_USART_End+0xc>)
   bdee8:	681b      	ldr	r3, [r3, #0]
   bdeea:	689b      	ldr	r3, [r3, #8]
   bdeec:	9301      	str	r3, [sp, #4]
   bdeee:	bd08      	pop	{r3, pc}
   bdef0:	0003024c 	.word	0x0003024c

000bdef4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bdef4:	b508      	push	{r3, lr}
   bdef6:	4b02      	ldr	r3, [pc, #8]	; (bdf00 <HAL_USB_USART_Available_Data+0xc>)
   bdef8:	681b      	ldr	r3, [r3, #0]
   bdefa:	691b      	ldr	r3, [r3, #16]
   bdefc:	9301      	str	r3, [sp, #4]
   bdefe:	bd08      	pop	{r3, pc}
   bdf00:	0003024c 	.word	0x0003024c

000bdf04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bdf04:	b508      	push	{r3, lr}
   bdf06:	4b02      	ldr	r3, [pc, #8]	; (bdf10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bdf08:	681b      	ldr	r3, [r3, #0]
   bdf0a:	695b      	ldr	r3, [r3, #20]
   bdf0c:	9301      	str	r3, [sp, #4]
   bdf0e:	bd08      	pop	{r3, pc}
   bdf10:	0003024c 	.word	0x0003024c

000bdf14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bdf14:	b508      	push	{r3, lr}
   bdf16:	4b02      	ldr	r3, [pc, #8]	; (bdf20 <HAL_USB_USART_Receive_Data+0xc>)
   bdf18:	681b      	ldr	r3, [r3, #0]
   bdf1a:	699b      	ldr	r3, [r3, #24]
   bdf1c:	9301      	str	r3, [sp, #4]
   bdf1e:	bd08      	pop	{r3, pc}
   bdf20:	0003024c 	.word	0x0003024c

000bdf24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bdf24:	b508      	push	{r3, lr}
   bdf26:	4b02      	ldr	r3, [pc, #8]	; (bdf30 <HAL_USB_USART_Send_Data+0xc>)
   bdf28:	681b      	ldr	r3, [r3, #0]
   bdf2a:	69db      	ldr	r3, [r3, #28]
   bdf2c:	9301      	str	r3, [sp, #4]
   bdf2e:	bd08      	pop	{r3, pc}
   bdf30:	0003024c 	.word	0x0003024c

000bdf34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bdf34:	b508      	push	{r3, lr}
   bdf36:	4b02      	ldr	r3, [pc, #8]	; (bdf40 <HAL_USB_USART_Flush_Data+0xc>)
   bdf38:	681b      	ldr	r3, [r3, #0]
   bdf3a:	6a1b      	ldr	r3, [r3, #32]
   bdf3c:	9301      	str	r3, [sp, #4]
   bdf3e:	bd08      	pop	{r3, pc}
   bdf40:	0003024c 	.word	0x0003024c

000bdf44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bdf44:	b508      	push	{r3, lr}
   bdf46:	4b02      	ldr	r3, [pc, #8]	; (bdf50 <panic_+0xc>)
   bdf48:	681b      	ldr	r3, [r3, #0]
   bdf4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdf4c:	9301      	str	r3, [sp, #4]
   bdf4e:	bd08      	pop	{r3, pc}
   bdf50:	00030260 	.word	0x00030260

000bdf54 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bdf54:	b508      	push	{r3, lr}
   bdf56:	4b02      	ldr	r3, [pc, #8]	; (bdf60 <log_message+0xc>)
   bdf58:	681b      	ldr	r3, [r3, #0]
   bdf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdf5c:	9301      	str	r3, [sp, #4]
   bdf5e:	bd08      	pop	{r3, pc}
   bdf60:	00030260 	.word	0x00030260

000bdf64 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bdf64:	b508      	push	{r3, lr}
   bdf66:	4b02      	ldr	r3, [pc, #8]	; (bdf70 <log_level_name+0xc>)
   bdf68:	681b      	ldr	r3, [r3, #0]
   bdf6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bdf6c:	9301      	str	r3, [sp, #4]
   bdf6e:	bd08      	pop	{r3, pc}
   bdf70:	00030260 	.word	0x00030260

000bdf74 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bdf74:	b508      	push	{r3, lr}
   bdf76:	4b02      	ldr	r3, [pc, #8]	; (bdf80 <log_set_callbacks+0xc>)
   bdf78:	681b      	ldr	r3, [r3, #0]
   bdf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdf7c:	9301      	str	r3, [sp, #4]
   bdf7e:	bd08      	pop	{r3, pc}
   bdf80:	00030260 	.word	0x00030260

000bdf84 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bdf84:	b508      	push	{r3, lr}
   bdf86:	4b03      	ldr	r3, [pc, #12]	; (bdf94 <led_set_status_active+0x10>)
   bdf88:	681b      	ldr	r3, [r3, #0]
   bdf8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bdf8e:	9301      	str	r3, [sp, #4]
   bdf90:	bd08      	pop	{r3, pc}
   bdf92:	0000      	.short	0x0000
   bdf94:	00030260 	.word	0x00030260

000bdf98 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bdf98:	b508      	push	{r3, lr}
   bdf9a:	4b02      	ldr	r3, [pc, #8]	; (bdfa4 <system_mode+0xc>)
   bdf9c:	681b      	ldr	r3, [r3, #0]
   bdf9e:	681b      	ldr	r3, [r3, #0]
   bdfa0:	9301      	str	r3, [sp, #4]
   bdfa2:	bd08      	pop	{r3, pc}
   bdfa4:	00030220 	.word	0x00030220

000bdfa8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bdfa8:	b508      	push	{r3, lr}
   bdfaa:	4b02      	ldr	r3, [pc, #8]	; (bdfb4 <set_system_mode+0xc>)
   bdfac:	681b      	ldr	r3, [r3, #0]
   bdfae:	685b      	ldr	r3, [r3, #4]
   bdfb0:	9301      	str	r3, [sp, #4]
   bdfb2:	bd08      	pop	{r3, pc}
   bdfb4:	00030220 	.word	0x00030220

000bdfb8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bdfb8:	b508      	push	{r3, lr}
   bdfba:	4b02      	ldr	r3, [pc, #8]	; (bdfc4 <system_delay_ms+0xc>)
   bdfbc:	681b      	ldr	r3, [r3, #0]
   bdfbe:	695b      	ldr	r3, [r3, #20]
   bdfc0:	9301      	str	r3, [sp, #4]
   bdfc2:	bd08      	pop	{r3, pc}
   bdfc4:	00030220 	.word	0x00030220

000bdfc8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bdfc8:	b508      	push	{r3, lr}
   bdfca:	4b02      	ldr	r3, [pc, #8]	; (bdfd4 <application_thread_current+0xc>)
   bdfcc:	681b      	ldr	r3, [r3, #0]
   bdfce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdfd0:	9301      	str	r3, [sp, #4]
   bdfd2:	bd08      	pop	{r3, pc}
   bdfd4:	00030220 	.word	0x00030220

000bdfd8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bdfd8:	b508      	push	{r3, lr}
   bdfda:	4b02      	ldr	r3, [pc, #8]	; (bdfe4 <application_thread_invoke+0xc>)
   bdfdc:	681b      	ldr	r3, [r3, #0]
   bdfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdfe0:	9301      	str	r3, [sp, #4]
   bdfe2:	bd08      	pop	{r3, pc}
   bdfe4:	00030220 	.word	0x00030220

000bdfe8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bdfe8:	b508      	push	{r3, lr}
   bdfea:	4b02      	ldr	r3, [pc, #8]	; (bdff4 <system_thread_get_state+0xc>)
   bdfec:	681b      	ldr	r3, [r3, #0]
   bdfee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdff0:	9301      	str	r3, [sp, #4]
   bdff2:	bd08      	pop	{r3, pc}
   bdff4:	00030220 	.word	0x00030220

000bdff8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bdff8:	b508      	push	{r3, lr}
   bdffa:	4b02      	ldr	r3, [pc, #8]	; (be004 <led_pattern_period+0xc>)
   bdffc:	681b      	ldr	r3, [r3, #0]
   bdffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be000:	9301      	str	r3, [sp, #4]
   be002:	bd08      	pop	{r3, pc}
   be004:	00030220 	.word	0x00030220

000be008 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be008:	b508      	push	{r3, lr}
   be00a:	4b03      	ldr	r3, [pc, #12]	; (be018 <system_ctrl_set_app_request_handler+0x10>)
   be00c:	681b      	ldr	r3, [r3, #0]
   be00e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be012:	9301      	str	r3, [sp, #4]
   be014:	bd08      	pop	{r3, pc}
   be016:	0000      	.short	0x0000
   be018:	00030220 	.word	0x00030220

000be01c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be01c:	b508      	push	{r3, lr}
   be01e:	4b03      	ldr	r3, [pc, #12]	; (be02c <system_ctrl_set_result+0x10>)
   be020:	681b      	ldr	r3, [r3, #0]
   be022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be026:	9301      	str	r3, [sp, #4]
   be028:	bd08      	pop	{r3, pc}
   be02a:	0000      	.short	0x0000
   be02c:	00030220 	.word	0x00030220

000be030 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be030:	b508      	push	{r3, lr}
   be032:	4b02      	ldr	r3, [pc, #8]	; (be03c <network_connect+0xc>)
   be034:	681b      	ldr	r3, [r3, #0]
   be036:	685b      	ldr	r3, [r3, #4]
   be038:	9301      	str	r3, [sp, #4]
   be03a:	bd08      	pop	{r3, pc}
   be03c:	00030240 	.word	0x00030240

000be040 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be040:	b508      	push	{r3, lr}
   be042:	4b02      	ldr	r3, [pc, #8]	; (be04c <network_connecting+0xc>)
   be044:	681b      	ldr	r3, [r3, #0]
   be046:	689b      	ldr	r3, [r3, #8]
   be048:	9301      	str	r3, [sp, #4]
   be04a:	bd08      	pop	{r3, pc}
   be04c:	00030240 	.word	0x00030240

000be050 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be050:	b508      	push	{r3, lr}
   be052:	4b02      	ldr	r3, [pc, #8]	; (be05c <network_disconnect+0xc>)
   be054:	681b      	ldr	r3, [r3, #0]
   be056:	68db      	ldr	r3, [r3, #12]
   be058:	9301      	str	r3, [sp, #4]
   be05a:	bd08      	pop	{r3, pc}
   be05c:	00030240 	.word	0x00030240

000be060 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be060:	b508      	push	{r3, lr}
   be062:	4b02      	ldr	r3, [pc, #8]	; (be06c <network_ready+0xc>)
   be064:	681b      	ldr	r3, [r3, #0]
   be066:	691b      	ldr	r3, [r3, #16]
   be068:	9301      	str	r3, [sp, #4]
   be06a:	bd08      	pop	{r3, pc}
   be06c:	00030240 	.word	0x00030240

000be070 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be070:	b508      	push	{r3, lr}
   be072:	4b02      	ldr	r3, [pc, #8]	; (be07c <network_on+0xc>)
   be074:	681b      	ldr	r3, [r3, #0]
   be076:	695b      	ldr	r3, [r3, #20]
   be078:	9301      	str	r3, [sp, #4]
   be07a:	bd08      	pop	{r3, pc}
   be07c:	00030240 	.word	0x00030240

000be080 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be080:	b508      	push	{r3, lr}
   be082:	4b02      	ldr	r3, [pc, #8]	; (be08c <network_off+0xc>)
   be084:	681b      	ldr	r3, [r3, #0]
   be086:	699b      	ldr	r3, [r3, #24]
   be088:	9301      	str	r3, [sp, #4]
   be08a:	bd08      	pop	{r3, pc}
   be08c:	00030240 	.word	0x00030240

000be090 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be090:	b508      	push	{r3, lr}
   be092:	4b02      	ldr	r3, [pc, #8]	; (be09c <network_listen+0xc>)
   be094:	681b      	ldr	r3, [r3, #0]
   be096:	69db      	ldr	r3, [r3, #28]
   be098:	9301      	str	r3, [sp, #4]
   be09a:	bd08      	pop	{r3, pc}
   be09c:	00030240 	.word	0x00030240

000be0a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be0a0:	b508      	push	{r3, lr}
   be0a2:	4b02      	ldr	r3, [pc, #8]	; (be0ac <network_listening+0xc>)
   be0a4:	681b      	ldr	r3, [r3, #0]
   be0a6:	6a1b      	ldr	r3, [r3, #32]
   be0a8:	9301      	str	r3, [sp, #4]
   be0aa:	bd08      	pop	{r3, pc}
   be0ac:	00030240 	.word	0x00030240

000be0b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be0b0:	b508      	push	{r3, lr}
   be0b2:	4b02      	ldr	r3, [pc, #8]	; (be0bc <network_set_listen_timeout+0xc>)
   be0b4:	681b      	ldr	r3, [r3, #0]
   be0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be0b8:	9301      	str	r3, [sp, #4]
   be0ba:	bd08      	pop	{r3, pc}
   be0bc:	00030240 	.word	0x00030240

000be0c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be0c0:	b508      	push	{r3, lr}
   be0c2:	4b02      	ldr	r3, [pc, #8]	; (be0cc <network_get_listen_timeout+0xc>)
   be0c4:	681b      	ldr	r3, [r3, #0]
   be0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be0c8:	9301      	str	r3, [sp, #4]
   be0ca:	bd08      	pop	{r3, pc}
   be0cc:	00030240 	.word	0x00030240

000be0d0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be0d0:	b508      	push	{r3, lr}
   be0d2:	4b02      	ldr	r3, [pc, #8]	; (be0dc <network_is_on+0xc>)
   be0d4:	681b      	ldr	r3, [r3, #0]
   be0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be0d8:	9301      	str	r3, [sp, #4]
   be0da:	bd08      	pop	{r3, pc}
   be0dc:	00030240 	.word	0x00030240

000be0e0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be0e0:	b508      	push	{r3, lr}
   be0e2:	4b02      	ldr	r3, [pc, #8]	; (be0ec <network_is_off+0xc>)
   be0e4:	681b      	ldr	r3, [r3, #0]
   be0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be0e8:	9301      	str	r3, [sp, #4]
   be0ea:	bd08      	pop	{r3, pc}
   be0ec:	00030240 	.word	0x00030240

000be0f0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be0f0:	b508      	push	{r3, lr}
   be0f2:	4b02      	ldr	r3, [pc, #8]	; (be0fc <spark_function+0xc>)
   be0f4:	681b      	ldr	r3, [r3, #0]
   be0f6:	685b      	ldr	r3, [r3, #4]
   be0f8:	9301      	str	r3, [sp, #4]
   be0fa:	bd08      	pop	{r3, pc}
   be0fc:	00030244 	.word	0x00030244

000be100 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be100:	b508      	push	{r3, lr}
   be102:	4b02      	ldr	r3, [pc, #8]	; (be10c <spark_process+0xc>)
   be104:	681b      	ldr	r3, [r3, #0]
   be106:	689b      	ldr	r3, [r3, #8]
   be108:	9301      	str	r3, [sp, #4]
   be10a:	bd08      	pop	{r3, pc}
   be10c:	00030244 	.word	0x00030244

000be110 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be110:	b508      	push	{r3, lr}
   be112:	4b02      	ldr	r3, [pc, #8]	; (be11c <spark_cloud_flag_connected+0xc>)
   be114:	681b      	ldr	r3, [r3, #0]
   be116:	695b      	ldr	r3, [r3, #20]
   be118:	9301      	str	r3, [sp, #4]
   be11a:	bd08      	pop	{r3, pc}
   be11c:	00030244 	.word	0x00030244

000be120 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be120:	b508      	push	{r3, lr}
   be122:	4b02      	ldr	r3, [pc, #8]	; (be12c <spark_send_event+0xc>)
   be124:	681b      	ldr	r3, [r3, #0]
   be126:	6a1b      	ldr	r3, [r3, #32]
   be128:	9301      	str	r3, [sp, #4]
   be12a:	bd08      	pop	{r3, pc}
   be12c:	00030244 	.word	0x00030244

000be130 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be130:	b508      	push	{r3, lr}
   be132:	4b02      	ldr	r3, [pc, #8]	; (be13c <spark_subscribe+0xc>)
   be134:	681b      	ldr	r3, [r3, #0]
   be136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be138:	9301      	str	r3, [sp, #4]
   be13a:	bd08      	pop	{r3, pc}
   be13c:	00030244 	.word	0x00030244

000be140 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be140:	b508      	push	{r3, lr}
   be142:	4b02      	ldr	r3, [pc, #8]	; (be14c <spark_sync_time_pending+0xc>)
   be144:	681b      	ldr	r3, [r3, #0]
   be146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be148:	9301      	str	r3, [sp, #4]
   be14a:	bd08      	pop	{r3, pc}
   be14c:	00030244 	.word	0x00030244

000be150 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be150:	b508      	push	{r3, lr}
   be152:	4b02      	ldr	r3, [pc, #8]	; (be15c <spark_set_random_seed_from_cloud_handler+0xc>)
   be154:	681b      	ldr	r3, [r3, #0]
   be156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be158:	9301      	str	r3, [sp, #4]
   be15a:	bd08      	pop	{r3, pc}
   be15c:	00030244 	.word	0x00030244

000be160 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be160:	b508      	push	{r3, lr}
   be162:	4b02      	ldr	r3, [pc, #8]	; (be16c <malloc+0xc>)
   be164:	681b      	ldr	r3, [r3, #0]
   be166:	681b      	ldr	r3, [r3, #0]
   be168:	9301      	str	r3, [sp, #4]
   be16a:	bd08      	pop	{r3, pc}
   be16c:	0003021c 	.word	0x0003021c

000be170 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be170:	b508      	push	{r3, lr}
   be172:	4b02      	ldr	r3, [pc, #8]	; (be17c <free+0xc>)
   be174:	681b      	ldr	r3, [r3, #0]
   be176:	685b      	ldr	r3, [r3, #4]
   be178:	9301      	str	r3, [sp, #4]
   be17a:	bd08      	pop	{r3, pc}
   be17c:	0003021c 	.word	0x0003021c

000be180 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be180:	b508      	push	{r3, lr}
   be182:	4b02      	ldr	r3, [pc, #8]	; (be18c <realloc+0xc>)
   be184:	681b      	ldr	r3, [r3, #0]
   be186:	689b      	ldr	r3, [r3, #8]
   be188:	9301      	str	r3, [sp, #4]
   be18a:	bd08      	pop	{r3, pc}
   be18c:	0003021c 	.word	0x0003021c

000be190 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be190:	b508      	push	{r3, lr}
   be192:	4b02      	ldr	r3, [pc, #8]	; (be19c <sprintf+0xc>)
   be194:	681b      	ldr	r3, [r3, #0]
   be196:	68db      	ldr	r3, [r3, #12]
   be198:	9301      	str	r3, [sp, #4]
   be19a:	bd08      	pop	{r3, pc}
   be19c:	0003021c 	.word	0x0003021c

000be1a0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be1a0:	b508      	push	{r3, lr}
   be1a2:	4b02      	ldr	r3, [pc, #8]	; (be1ac <sscanf+0xc>)
   be1a4:	681b      	ldr	r3, [r3, #0]
   be1a6:	695b      	ldr	r3, [r3, #20]
   be1a8:	9301      	str	r3, [sp, #4]
   be1aa:	bd08      	pop	{r3, pc}
   be1ac:	0003021c 	.word	0x0003021c

000be1b0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be1b0:	b508      	push	{r3, lr}
   be1b2:	4b02      	ldr	r3, [pc, #8]	; (be1bc <snprintf+0xc>)
   be1b4:	681b      	ldr	r3, [r3, #0]
   be1b6:	69db      	ldr	r3, [r3, #28]
   be1b8:	9301      	str	r3, [sp, #4]
   be1ba:	bd08      	pop	{r3, pc}
   be1bc:	0003021c 	.word	0x0003021c

000be1c0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be1c0:	b508      	push	{r3, lr}
   be1c2:	4b02      	ldr	r3, [pc, #8]	; (be1cc <vsnprintf+0xc>)
   be1c4:	681b      	ldr	r3, [r3, #0]
   be1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be1c8:	9301      	str	r3, [sp, #4]
   be1ca:	bd08      	pop	{r3, pc}
   be1cc:	0003021c 	.word	0x0003021c

000be1d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be1d0:	b508      	push	{r3, lr}
   be1d2:	4b02      	ldr	r3, [pc, #8]	; (be1dc <abort+0xc>)
   be1d4:	681b      	ldr	r3, [r3, #0]
   be1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be1d8:	9301      	str	r3, [sp, #4]
   be1da:	bd08      	pop	{r3, pc}
   be1dc:	0003021c 	.word	0x0003021c

000be1e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be1e0:	b508      	push	{r3, lr}
   be1e2:	4b02      	ldr	r3, [pc, #8]	; (be1ec <_malloc_r+0xc>)
   be1e4:	681b      	ldr	r3, [r3, #0]
   be1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be1e8:	9301      	str	r3, [sp, #4]
   be1ea:	bd08      	pop	{r3, pc}
   be1ec:	0003021c 	.word	0x0003021c

000be1f0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be1f0:	b508      	push	{r3, lr}
   be1f2:	4b02      	ldr	r3, [pc, #8]	; (be1fc <__errno+0xc>)
   be1f4:	681b      	ldr	r3, [r3, #0]
   be1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be1f8:	9301      	str	r3, [sp, #4]
   be1fa:	bd08      	pop	{r3, pc}
   be1fc:	0003021c 	.word	0x0003021c

000be200 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be200:	b508      	push	{r3, lr}
   be202:	4b02      	ldr	r3, [pc, #8]	; (be20c <__assert_func+0xc>)
   be204:	681b      	ldr	r3, [r3, #0]
   be206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be208:	9301      	str	r3, [sp, #4]
   be20a:	bd08      	pop	{r3, pc}
   be20c:	0003021c 	.word	0x0003021c

000be210 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be210:	b508      	push	{r3, lr}
   be212:	4b02      	ldr	r3, [pc, #8]	; (be21c <newlib_impure_ptr_callback+0xc>)
   be214:	681b      	ldr	r3, [r3, #0]
   be216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be218:	9301      	str	r3, [sp, #4]
   be21a:	bd08      	pop	{r3, pc}
   be21c:	0003021c 	.word	0x0003021c

000be220 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be220:	b508      	push	{r3, lr}
   be222:	4b02      	ldr	r3, [pc, #8]	; (be22c <localtime_r+0xc>)
   be224:	681b      	ldr	r3, [r3, #0]
   be226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be228:	9301      	str	r3, [sp, #4]
   be22a:	bd08      	pop	{r3, pc}
   be22c:	0003021c 	.word	0x0003021c

000be230 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   be230:	2200      	movs	r2, #0
   be232:	6840      	ldr	r0, [r0, #4]
   be234:	4611      	mov	r1, r2
   be236:	f7ff bf33 	b.w	be0a0 <network_listening>

000be23a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   be23a:	2200      	movs	r2, #0
   be23c:	6840      	ldr	r0, [r0, #4]
   be23e:	4611      	mov	r1, r2
   be240:	f7ff bf3e 	b.w	be0c0 <network_get_listen_timeout>

000be244 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   be244:	6840      	ldr	r0, [r0, #4]
   be246:	2200      	movs	r2, #0
   be248:	f7ff bf32 	b.w	be0b0 <network_set_listen_timeout>

000be24c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   be24c:	6840      	ldr	r0, [r0, #4]
   be24e:	2200      	movs	r2, #0
   be250:	f081 0101 	eor.w	r1, r1, #1
   be254:	f7ff bf1c 	b.w	be090 <network_listen>

000be258 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   be258:	2300      	movs	r3, #0
   be25a:	6840      	ldr	r0, [r0, #4]
   be25c:	461a      	mov	r2, r3
   be25e:	4619      	mov	r1, r3
   be260:	f7ff bf0e 	b.w	be080 <network_off>

000be264 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   be264:	2300      	movs	r3, #0
   be266:	6840      	ldr	r0, [r0, #4]
   be268:	461a      	mov	r2, r3
   be26a:	4619      	mov	r1, r3
   be26c:	f7ff bf00 	b.w	be070 <network_on>

000be270 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   be270:	2200      	movs	r2, #0
   be272:	6840      	ldr	r0, [r0, #4]
   be274:	4611      	mov	r1, r2
   be276:	f7ff bef3 	b.w	be060 <network_ready>

000be27a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   be27a:	2200      	movs	r2, #0
   be27c:	6840      	ldr	r0, [r0, #4]
   be27e:	4611      	mov	r1, r2
   be280:	f7ff bede 	b.w	be040 <network_connecting>

000be284 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   be284:	6840      	ldr	r0, [r0, #4]
   be286:	2200      	movs	r2, #0
   be288:	2102      	movs	r1, #2
   be28a:	f7ff bee1 	b.w	be050 <network_disconnect>

000be28e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   be28e:	2300      	movs	r3, #0
   be290:	6840      	ldr	r0, [r0, #4]
   be292:	461a      	mov	r2, r3
   be294:	f7ff becc 	b.w	be030 <network_connect>

000be298 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   be298:	4b02      	ldr	r3, [pc, #8]	; (be2a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   be29a:	2203      	movs	r2, #3
   be29c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   be29e:	4a02      	ldr	r2, [pc, #8]	; (be2a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   be2a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   be2a2:	4770      	bx	lr
   be2a4:	2003e620 	.word	0x2003e620
   be2a8:	000c7af8 	.word	0x000c7af8

000be2ac <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   be2ac:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   be2ae:	460b      	mov	r3, r1
    s->update(ticks);
   be2b0:	6892      	ldr	r2, [r2, #8]
   be2b2:	4601      	mov	r1, r0
   be2b4:	4618      	mov	r0, r3
   be2b6:	4710      	bx	r2

000be2b8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   be2b8:	b570      	push	{r4, r5, r6, lr}
   be2ba:	4c0e      	ldr	r4, [pc, #56]	; (be2f4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   be2bc:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   be2be:	2500      	movs	r5, #0
   be2c0:	241c      	movs	r4, #28
   be2c2:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be2c6:	f89d 4014 	ldrb.w	r4, [sp, #20]
   be2ca:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   be2ce:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be2d0:	f004 0403 	and.w	r4, r4, #3
   be2d4:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   be2d8:	b2e4      	uxtb	r4, r4
   be2da:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   be2dc:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   be2de:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   be2e0:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   be2e2:	7c42      	ldrb	r2, [r0, #17]
   be2e4:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   be2e6:	bf0a      	itet	eq
   be2e8:	4b03      	ldreq	r3, [pc, #12]	; (be2f8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   be2ea:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   be2ec:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   be2f0:	bd70      	pop	{r4, r5, r6, pc}
   be2f2:	bf00      	nop
   be2f4:	000c6c54 	.word	0x000c6c54
   be2f8:	000be2ad 	.word	0x000be2ad

000be2fc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   be2fc:	2100      	movs	r1, #0
   be2fe:	f7ff bdc1 	b.w	bde84 <hal_spi_release>

000be302 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   be302:	2100      	movs	r1, #0
   be304:	f7ff bdb6 	b.w	bde74 <hal_spi_acquire>

000be308 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   be308:	b510      	push	{r4, lr}
   be30a:	4604      	mov	r4, r0
   be30c:	4608      	mov	r0, r1
{
    _spi = spi;
   be30e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   be310:	f7ff fd78 	bl	bde04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   be314:	2300      	movs	r3, #0
   be316:	6063      	str	r3, [r4, #4]
}
   be318:	4620      	mov	r0, r4
   be31a:	bd10      	pop	{r4, pc}

000be31c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   be31c:	b513      	push	{r0, r1, r4, lr}
   be31e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   be320:	7800      	ldrb	r0, [r0, #0]
   be322:	f7ff ffee 	bl	be302 <_ZN8SPIClass4lockEv.isra.0>
   be326:	b958      	cbnz	r0, be340 <_ZN8SPIClass5beginEv+0x24>
   be328:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   be32a:	9001      	str	r0, [sp, #4]
   be32c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be330:	f7ff fd50 	bl	bddd4 <hal_spi_begin>
        unlock();
   be334:	9801      	ldr	r0, [sp, #4]
    }
}
   be336:	b002      	add	sp, #8
   be338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be33c:	f7ff bfde 	b.w	be2fc <_ZN8SPIClass6unlockEv.isra.0>
   be340:	b002      	add	sp, #8
   be342:	bd10      	pop	{r4, pc}

000be344 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   be344:	b513      	push	{r0, r1, r4, lr}
   be346:	4604      	mov	r4, r0
    if (!lock())
   be348:	7800      	ldrb	r0, [r0, #0]
{
   be34a:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   be34e:	f7ff ffd8 	bl	be302 <_ZN8SPIClass4lockEv.isra.0>
   be352:	e9dd 2100 	ldrd	r2, r1, [sp]
   be356:	4603      	mov	r3, r0
   be358:	b948      	cbnz	r0, be36e <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   be35a:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   be35c:	9000      	str	r0, [sp, #0]
   be35e:	f7ff fd71 	bl	bde44 <hal_spi_begin_ext>
        unlock();
   be362:	9800      	ldr	r0, [sp, #0]
    }
}
   be364:	b002      	add	sp, #8
   be366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be36a:	f7ff bfc7 	b.w	be2fc <_ZN8SPIClass6unlockEv.isra.0>
   be36e:	b002      	add	sp, #8
   be370:	bd10      	pop	{r4, pc}

000be372 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   be372:	7800      	ldrb	r0, [r0, #0]
   be374:	f7ff bfc2 	b.w	be2fc <_ZN8SPIClass6unlockEv.isra.0>

000be378 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   be378:	0840      	lsrs	r0, r0, #1
{
   be37a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   be37c:	6018      	str	r0, [r3, #0]
   be37e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   be380:	6818      	ldr	r0, [r3, #0]
   be382:	4288      	cmp	r0, r1
   be384:	b2e5      	uxtb	r5, r4
   be386:	d906      	bls.n	be396 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   be388:	3401      	adds	r4, #1
   be38a:	2c08      	cmp	r4, #8
   be38c:	d002      	beq.n	be394 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   be38e:	0840      	lsrs	r0, r0, #1
   be390:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   be392:	e7f5      	b.n	be380 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   be394:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   be396:	4b02      	ldr	r3, [pc, #8]	; (be3a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   be398:	5d5b      	ldrb	r3, [r3, r5]
   be39a:	7013      	strb	r3, [r2, #0]
}
   be39c:	bd30      	pop	{r4, r5, pc}
   be39e:	bf00      	nop
   be3a0:	000c7b2c 	.word	0x000c7b2c

000be3a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   be3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be3a8:	4606      	mov	r6, r0
   be3aa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   be3ac:	7800      	ldrb	r0, [r0, #0]
{
   be3ae:	460c      	mov	r4, r1
    CHECK(lock());
   be3b0:	f7ff ffa7 	bl	be302 <_ZN8SPIClass4lockEv.isra.0>
   be3b4:	2800      	cmp	r0, #0
   be3b6:	db1b      	blt.n	be3f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   be3b8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   be3ba:	2214      	movs	r2, #20
   be3bc:	2100      	movs	r1, #0
   be3be:	a809      	add	r0, sp, #36	; 0x24
   be3c0:	f006 f84a 	bl	c4458 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   be3c4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   be3c6:	2200      	movs	r2, #0
   be3c8:	a909      	add	r1, sp, #36	; 0x24
   be3ca:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   be3cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   be3d0:	f7ff fd28 	bl	bde24 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   be3d4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   be3d8:	b113      	cbz	r3, be3e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   be3da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   be3de:	b155      	cbz	r5, be3f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   be3e0:	2700      	movs	r7, #0
   be3e2:	46b9      	mov	r9, r7
   be3e4:	46b8      	mov	r8, r7
   be3e6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   be3e8:	7923      	ldrb	r3, [r4, #4]
   be3ea:	b15d      	cbz	r5, be404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   be3ec:	b1c3      	cbz	r3, be420 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   be3ee:	2000      	movs	r0, #0
}
   be3f0:	b00f      	add	sp, #60	; 0x3c
   be3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   be3f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   be3fa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   be3fe:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   be402:	e7f1      	b.n	be3e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   be404:	2b00      	cmp	r3, #0
   be406:	d135      	bne.n	be474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   be408:	68a3      	ldr	r3, [r4, #8]
   be40a:	4543      	cmp	r3, r8
   be40c:	d108      	bne.n	be420 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   be40e:	f88d 9020 	strb.w	r9, [sp, #32]
   be412:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be416:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be41a:	89a3      	ldrh	r3, [r4, #12]
   be41c:	429a      	cmp	r2, r3
   be41e:	d0e6      	beq.n	be3ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   be420:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be422:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   be424:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be428:	980a      	ldr	r0, [sp, #40]	; 0x28
   be42a:	ab04      	add	r3, sp, #16
   be42c:	f10d 020f 	add.w	r2, sp, #15
   be430:	f7ff ffa2 	bl	be378 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   be434:	7921      	ldrb	r1, [r4, #4]
   be436:	b985      	cbnz	r5, be45a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   be438:	b989      	cbnz	r1, be45e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be43a:	68a3      	ldr	r3, [r4, #8]
   be43c:	4543      	cmp	r3, r8
   be43e:	d30e      	bcc.n	be45e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   be440:	f88d 9020 	strb.w	r9, [sp, #32]
   be444:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be448:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be44c:	89a3      	ldrh	r3, [r4, #12]
   be44e:	429a      	cmp	r2, r3
   be450:	d105      	bne.n	be45e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   be452:	9b04      	ldr	r3, [sp, #16]
   be454:	4543      	cmp	r3, r8
   be456:	d102      	bne.n	be45e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be458:	e7c9      	b.n	be3ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   be45a:	2900      	cmp	r1, #0
   be45c:	d1f9      	bne.n	be452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   be45e:	2300      	movs	r3, #0
   be460:	9301      	str	r3, [sp, #4]
   be462:	7b63      	ldrb	r3, [r4, #13]
   be464:	9300      	str	r3, [sp, #0]
   be466:	f89d 200f 	ldrb.w	r2, [sp, #15]
   be46a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   be46c:	7830      	ldrb	r0, [r6, #0]
   be46e:	f7ff fcf9 	bl	bde64 <hal_spi_set_settings>
   be472:	e7bc      	b.n	be3ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   be474:	e9cd 5500 	strd	r5, r5, [sp]
   be478:	462b      	mov	r3, r5
   be47a:	462a      	mov	r2, r5
   be47c:	2101      	movs	r1, #1
   be47e:	e7f5      	b.n	be46c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000be480 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   be480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be484:	b088      	sub	sp, #32
    unsigned clock = 0;
   be486:	2300      	movs	r3, #0
{
   be488:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   be48a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   be48c:	9302      	str	r3, [sp, #8]
{
   be48e:	460e      	mov	r6, r1
   be490:	4617      	mov	r7, r2
    if (!lock())
   be492:	f7ff ff36 	bl	be302 <_ZN8SPIClass4lockEv.isra.0>
   be496:	4605      	mov	r5, r0
   be498:	bb00      	cbnz	r0, be4dc <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   be49a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   be49e:	4601      	mov	r1, r0
   be4a0:	2214      	movs	r2, #20
   be4a2:	a803      	add	r0, sp, #12
   be4a4:	f005 ffd8 	bl	c4458 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   be4a8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   be4aa:	462a      	mov	r2, r5
   be4ac:	a903      	add	r1, sp, #12
   be4ae:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   be4b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   be4b4:	f7ff fcb6 	bl	bde24 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   be4b8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   be4ba:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   be4be:	ab02      	add	r3, sp, #8
   be4c0:	f10d 0207 	add.w	r2, sp, #7
   be4c4:	fb07 f106 	mul.w	r1, r7, r6
   be4c8:	f7ff ff56 	bl	be378 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   be4cc:	7820      	ldrb	r0, [r4, #0]
   be4ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
   be4d2:	f7ff fc87 	bl	bdde4 <hal_spi_set_clock_divider>
        unlock();
   be4d6:	7820      	ldrb	r0, [r4, #0]
   be4d8:	f7ff ff10 	bl	be2fc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   be4dc:	9802      	ldr	r0, [sp, #8]
   be4de:	b008      	add	sp, #32
   be4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000be4e4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   be4e4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   be4e6:	7800      	ldrb	r0, [r0, #0]
   be4e8:	f7ff fc84 	bl	bddf4 <hal_spi_transfer>
}
   be4ec:	b2c0      	uxtb	r0, r0
   be4ee:	bd08      	pop	{r3, pc}

000be4f0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   be4f0:	b530      	push	{r4, r5, lr}
   be4f2:	b087      	sub	sp, #28
   be4f4:	4604      	mov	r4, r0
   be4f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   be4f8:	9500      	str	r5, [sp, #0]
   be4fa:	7800      	ldrb	r0, [r0, #0]
   be4fc:	f7ff fc9a 	bl	bde34 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   be500:	b93d      	cbnz	r5, be512 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   be502:	7820      	ldrb	r0, [r4, #0]
   be504:	a902      	add	r1, sp, #8
   be506:	f7ff fca5 	bl	bde54 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   be50a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   be50e:	07db      	lsls	r3, r3, #31
   be510:	d4f7      	bmi.n	be502 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   be512:	b007      	add	sp, #28
   be514:	bd30      	pop	{r4, r5, pc}

000be516 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   be516:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   be51a:	1c53      	adds	r3, r2, #1
   be51c:	d00b      	beq.n	be536 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   be51e:	8843      	ldrh	r3, [r0, #2]
   be520:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   be522:	428b      	cmp	r3, r1
   be524:	d803      	bhi.n	be52e <_ZN5Servo17writeMicrosecondsEt+0x18>
   be526:	4288      	cmp	r0, r1
   be528:	4603      	mov	r3, r0
   be52a:	bf28      	it	cs
   be52c:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   be52e:	4619      	mov	r1, r3
   be530:	b290      	uxth	r0, r2
   be532:	f7ff bcbf 	b.w	bdeb4 <HAL_Servo_Write_Pulse_Width>
}
   be536:	4770      	bx	lr

000be538 <_ZN5Servo5writeEi>:
{
   be538:	b513      	push	{r0, r1, r4, lr}
   be53a:	4604      	mov	r4, r0
   be53c:	4608      	mov	r0, r1
   be53e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   be542:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   be546:	4288      	cmp	r0, r1
   be548:	db10      	blt.n	be56c <_ZN5Servo5writeEi+0x34>
   be54a:	4290      	cmp	r0, r2
   be54c:	bfa8      	it	ge
   be54e:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be550:	88a3      	ldrh	r3, [r4, #4]
   be552:	9300      	str	r3, [sp, #0]
   be554:	8863      	ldrh	r3, [r4, #2]
   be556:	f002 fc1d 	bl	c0d94 <_Z3mapiiiii>
   be55a:	68e1      	ldr	r1, [r4, #12]
   be55c:	4401      	add	r1, r0
   be55e:	b289      	uxth	r1, r1
   be560:	4620      	mov	r0, r4
}
   be562:	b002      	add	sp, #8
   be564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be568:	f7ff bfd5 	b.w	be516 <_ZN5Servo17writeMicrosecondsEt>
   be56c:	4608      	mov	r0, r1
   be56e:	e7ef      	b.n	be550 <_ZN5Servo5writeEi+0x18>

000be570 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   be570:	4a04      	ldr	r2, [pc, #16]	; (be584 <_ZN5Servo11resetFieldsEv+0x14>)
   be572:	f44f 6316 	mov.w	r3, #2400	; 0x960
   be576:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   be57a:	23b4      	movs	r3, #180	; 0xb4
   be57c:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   be57e:	2300      	movs	r3, #0
   be580:	60c3      	str	r3, [r0, #12]
}
   be582:	4770      	bx	lr
   be584:	0220ffff 	.word	0x0220ffff

000be588 <_ZN5ServoC1Ev>:
Servo::Servo()
   be588:	b508      	push	{r3, lr}
  this->resetFields();
   be58a:	f7ff fff1 	bl	be570 <_ZN5Servo11resetFieldsEv>
}
   be58e:	bd08      	pop	{r3, pc}

000be590 <_ZN5Servo6detachEv>:
{
   be590:	b510      	push	{r4, lr}
   be592:	4604      	mov	r4, r0
   be594:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   be598:	1c43      	adds	r3, r0, #1
   be59a:	d007      	beq.n	be5ac <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   be59c:	b280      	uxth	r0, r0
   be59e:	f7ff fc81 	bl	bdea4 <HAL_Servo_Detach>
  this->resetFields();
   be5a2:	4620      	mov	r0, r4
   be5a4:	f7ff ffe4 	bl	be570 <_ZN5Servo11resetFieldsEv>
  return true;
   be5a8:	2001      	movs	r0, #1
}
   be5aa:	bd10      	pop	{r4, pc}
    return false;
   be5ac:	2000      	movs	r0, #0
   be5ae:	e7fc      	b.n	be5aa <_ZN5Servo6detachEv+0x1a>

000be5b0 <_ZN5Servo6attachEtttss>:
{
   be5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be5b4:	460d      	mov	r5, r1
   be5b6:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be5b8:	2102      	movs	r1, #2
   be5ba:	4628      	mov	r0, r5
{
   be5bc:	4690      	mov	r8, r2
   be5be:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be5c0:	f7ff fa0e 	bl	bd9e0 <HAL_Validate_Pin_Function>
   be5c4:	2802      	cmp	r0, #2
   be5c6:	d003      	beq.n	be5d0 <_ZN5Servo6attachEtttss+0x20>
    return false;
   be5c8:	2600      	movs	r6, #0
}
   be5ca:	4630      	mov	r0, r6
   be5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   be5d0:	4628      	mov	r0, r5
   be5d2:	f003 fc1b 	bl	c1e0c <pinAvailable>
   be5d6:	4606      	mov	r6, r0
   be5d8:	2800      	cmp	r0, #0
   be5da:	d0f5      	beq.n	be5c8 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   be5dc:	f9b4 3000 	ldrsh.w	r3, [r4]
   be5e0:	3301      	adds	r3, #1
   be5e2:	d002      	beq.n	be5ea <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   be5e4:	4620      	mov	r0, r4
   be5e6:	f7ff ffd3 	bl	be590 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   be5ea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   be5ee:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   be5f0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   be5f4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   be5f6:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   be5fa:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   be5fc:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   be5fe:	4628      	mov	r0, r5
   be600:	f7ff fc48 	bl	bde94 <HAL_Servo_Attach>
  return true;
   be604:	e7e1      	b.n	be5ca <_ZN5Servo6attachEtttss+0x1a>
	...

000be608 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be608:	4b05      	ldr	r3, [pc, #20]	; (be620 <_GLOBAL__sub_I_System+0x18>)
   be60a:	2202      	movs	r2, #2
   be60c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   be60e:	4b05      	ldr	r3, [pc, #20]	; (be624 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be610:	4a05      	ldr	r2, [pc, #20]	; (be628 <_GLOBAL__sub_I_System+0x20>)
   be612:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be614:	2000      	movs	r0, #0
   be616:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be61a:	f7ff bcc5 	b.w	bdfa8 <set_system_mode>
   be61e:	bf00      	nop
   be620:	2003e634 	.word	0x2003e634
   be624:	2003e628 	.word	0x2003e628
   be628:	ffff0000 	.word	0xffff0000

000be62c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   be62c:	b510      	push	{r4, lr}
   be62e:	4604      	mov	r4, r0
{
	free(buffer);
   be630:	6800      	ldr	r0, [r0, #0]
   be632:	f7ff fd9d 	bl	be170 <free>
}
   be636:	4620      	mov	r0, r4
   be638:	bd10      	pop	{r4, pc}

000be63a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   be63a:	b510      	push	{r4, lr}
   be63c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be63e:	6800      	ldr	r0, [r0, #0]
   be640:	b108      	cbz	r0, be646 <_ZN6String10invalidateEv+0xc>
   be642:	f7ff fd95 	bl	be170 <free>
	buffer = NULL;
   be646:	2300      	movs	r3, #0
	capacity = len = 0;
   be648:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be64c:	6023      	str	r3, [r4, #0]
}
   be64e:	bd10      	pop	{r4, pc}

000be650 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be650:	b538      	push	{r3, r4, r5, lr}
   be652:	4604      	mov	r4, r0
   be654:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be656:	6800      	ldr	r0, [r0, #0]
   be658:	3101      	adds	r1, #1
   be65a:	f7ff fd91 	bl	be180 <realloc>
	if (newbuffer) {
   be65e:	b110      	cbz	r0, be666 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be660:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be664:	2001      	movs	r0, #1
	}
	return 0;
}
   be666:	bd38      	pop	{r3, r4, r5, pc}

000be668 <_ZN6String7reserveEj>:
{
   be668:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be66a:	6803      	ldr	r3, [r0, #0]
{
   be66c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be66e:	b123      	cbz	r3, be67a <_ZN6String7reserveEj+0x12>
   be670:	6843      	ldr	r3, [r0, #4]
   be672:	428b      	cmp	r3, r1
   be674:	d301      	bcc.n	be67a <_ZN6String7reserveEj+0x12>
   be676:	2001      	movs	r0, #1
}
   be678:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be67a:	4620      	mov	r0, r4
   be67c:	f7ff ffe8 	bl	be650 <_ZN6String12changeBufferEj>
   be680:	2800      	cmp	r0, #0
   be682:	d0f9      	beq.n	be678 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be684:	68a3      	ldr	r3, [r4, #8]
   be686:	2b00      	cmp	r3, #0
   be688:	d1f5      	bne.n	be676 <_ZN6String7reserveEj+0xe>
   be68a:	6822      	ldr	r2, [r4, #0]
   be68c:	7013      	strb	r3, [r2, #0]
   be68e:	e7f2      	b.n	be676 <_ZN6String7reserveEj+0xe>

000be690 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be690:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be692:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be694:	4611      	mov	r1, r2
   be696:	9201      	str	r2, [sp, #4]
{
   be698:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be69a:	f7ff ffe5 	bl	be668 <_ZN6String7reserveEj>
   be69e:	9a01      	ldr	r2, [sp, #4]
   be6a0:	b928      	cbnz	r0, be6ae <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be6a2:	4620      	mov	r0, r4
   be6a4:	f7ff ffc9 	bl	be63a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be6a8:	4620      	mov	r0, r4
   be6aa:	b003      	add	sp, #12
   be6ac:	bd30      	pop	{r4, r5, pc}
	len = length;
   be6ae:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be6b0:	4629      	mov	r1, r5
   be6b2:	6820      	ldr	r0, [r4, #0]
   be6b4:	f005 fea8 	bl	c4408 <memcpy>
	buffer[len] = 0;
   be6b8:	6822      	ldr	r2, [r4, #0]
   be6ba:	68a3      	ldr	r3, [r4, #8]
   be6bc:	2100      	movs	r1, #0
   be6be:	54d1      	strb	r1, [r2, r3]
	return *this;
   be6c0:	e7f2      	b.n	be6a8 <_ZN6String4copyEPKcj+0x18>

000be6c2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be6c2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be6c4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be6c6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be6ca:	4604      	mov	r4, r0
	len = 0;
   be6cc:	6083      	str	r3, [r0, #8]
	flags = 0;
   be6ce:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be6d0:	b141      	cbz	r1, be6e4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be6d2:	4608      	mov	r0, r1
   be6d4:	9101      	str	r1, [sp, #4]
   be6d6:	f005 ff4a 	bl	c456e <strlen>
   be6da:	9901      	ldr	r1, [sp, #4]
   be6dc:	4602      	mov	r2, r0
   be6de:	4620      	mov	r0, r4
   be6e0:	f7ff ffd6 	bl	be690 <_ZN6String4copyEPKcj>
}
   be6e4:	4620      	mov	r0, r4
   be6e6:	b002      	add	sp, #8
   be6e8:	bd10      	pop	{r4, pc}

000be6ea <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   be6ea:	b538      	push	{r3, r4, r5, lr}
   be6ec:	4605      	mov	r5, r0
	if (buffer) {
   be6ee:	6800      	ldr	r0, [r0, #0]
{
   be6f0:	460c      	mov	r4, r1
	if (buffer) {
   be6f2:	b168      	cbz	r0, be710 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   be6f4:	686a      	ldr	r2, [r5, #4]
   be6f6:	688b      	ldr	r3, [r1, #8]
   be6f8:	429a      	cmp	r2, r3
   be6fa:	d307      	bcc.n	be70c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   be6fc:	6809      	ldr	r1, [r1, #0]
   be6fe:	f005 ff11 	bl	c4524 <strcpy>
			len = rhs.len;
   be702:	68a3      	ldr	r3, [r4, #8]
   be704:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   be706:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   be708:	60a3      	str	r3, [r4, #8]
}
   be70a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   be70c:	f7ff fd30 	bl	be170 <free>
	buffer = rhs.buffer;
   be710:	6823      	ldr	r3, [r4, #0]
   be712:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   be714:	6863      	ldr	r3, [r4, #4]
   be716:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   be718:	68a3      	ldr	r3, [r4, #8]
   be71a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   be71c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   be71e:	e9c4 3300 	strd	r3, r3, [r4]
   be722:	e7f1      	b.n	be708 <_ZN6String4moveERS_+0x1e>

000be724 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   be724:	b510      	push	{r4, lr}
	buffer = NULL;
   be726:	2300      	movs	r3, #0
	capacity = 0;
   be728:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   be72c:	4604      	mov	r4, r0
	len = 0;
   be72e:	6083      	str	r3, [r0, #8]
	flags = 0;
   be730:	7303      	strb	r3, [r0, #12]
	move(rval);
   be732:	f7ff ffda 	bl	be6ea <_ZN6String4moveERS_>
}
   be736:	4620      	mov	r0, r4
   be738:	bd10      	pop	{r4, pc}

000be73a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   be73a:	4288      	cmp	r0, r1
{
   be73c:	b510      	push	{r4, lr}
   be73e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   be740:	d005      	beq.n	be74e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   be742:	680b      	ldr	r3, [r1, #0]
   be744:	b12b      	cbz	r3, be752 <_ZN6StringaSERKS_+0x18>
   be746:	688a      	ldr	r2, [r1, #8]
   be748:	4619      	mov	r1, r3
   be74a:	f7ff ffa1 	bl	be690 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be74e:	4620      	mov	r0, r4
   be750:	bd10      	pop	{r4, pc}
	else invalidate();
   be752:	f7ff ff72 	bl	be63a <_ZN6String10invalidateEv>
   be756:	e7fa      	b.n	be74e <_ZN6StringaSERKS_+0x14>

000be758 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   be758:	b510      	push	{r4, lr}
	buffer = NULL;
   be75a:	2300      	movs	r3, #0
String::String(const String &value)
   be75c:	4604      	mov	r4, r0
	capacity = 0;
   be75e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   be762:	6083      	str	r3, [r0, #8]
	flags = 0;
   be764:	7303      	strb	r3, [r0, #12]
	*this = value;
   be766:	f7ff ffe8 	bl	be73a <_ZN6StringaSERKS_>
}
   be76a:	4620      	mov	r0, r4
   be76c:	bd10      	pop	{r4, pc}

000be76e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   be76e:	b513      	push	{r0, r1, r4, lr}
   be770:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   be772:	b159      	cbz	r1, be78c <_ZN6StringaSEPKc+0x1e>
   be774:	4608      	mov	r0, r1
   be776:	9101      	str	r1, [sp, #4]
   be778:	f005 fef9 	bl	c456e <strlen>
   be77c:	9901      	ldr	r1, [sp, #4]
   be77e:	4602      	mov	r2, r0
   be780:	4620      	mov	r0, r4
   be782:	f7ff ff85 	bl	be690 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be786:	4620      	mov	r0, r4
   be788:	b002      	add	sp, #8
   be78a:	bd10      	pop	{r4, pc}
	else invalidate();
   be78c:	f7ff ff55 	bl	be63a <_ZN6String10invalidateEv>
   be790:	e7f9      	b.n	be786 <_ZN6StringaSEPKc+0x18>

000be792 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   be792:	b570      	push	{r4, r5, r6, lr}
   be794:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   be796:	460e      	mov	r6, r1
   be798:	b909      	cbnz	r1, be79e <_ZN6String6concatEPKcj+0xc>
   be79a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   be79c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   be79e:	b16a      	cbz	r2, be7bc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   be7a0:	6884      	ldr	r4, [r0, #8]
   be7a2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   be7a4:	4621      	mov	r1, r4
   be7a6:	f7ff ff5f 	bl	be668 <_ZN6String7reserveEj>
   be7aa:	2800      	cmp	r0, #0
   be7ac:	d0f5      	beq.n	be79a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   be7ae:	6828      	ldr	r0, [r5, #0]
   be7b0:	68ab      	ldr	r3, [r5, #8]
   be7b2:	4631      	mov	r1, r6
   be7b4:	4418      	add	r0, r3
   be7b6:	f005 feb5 	bl	c4524 <strcpy>
	len = newlen;
   be7ba:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   be7bc:	2001      	movs	r0, #1
   be7be:	e7ed      	b.n	be79c <_ZN6String6concatEPKcj+0xa>

000be7c0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   be7c0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   be7c2:	2300      	movs	r3, #0
	buf[0] = c;
   be7c4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   be7c8:	2201      	movs	r2, #1
   be7ca:	a901      	add	r1, sp, #4
	buf[1] = 0;
   be7cc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   be7d0:	f7ff ffdf 	bl	be792 <_ZN6String6concatEPKcj>
}
   be7d4:	b003      	add	sp, #12
   be7d6:	f85d fb04 	ldr.w	pc, [sp], #4

000be7da <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   be7da:	6883      	ldr	r3, [r0, #8]
   be7dc:	428b      	cmp	r3, r1
   be7de:	d903      	bls.n	be7e8 <_ZNK6StringixEj+0xe>
   be7e0:	6800      	ldr	r0, [r0, #0]
   be7e2:	b110      	cbz	r0, be7ea <_ZNK6StringixEj+0x10>
	return buffer[index];
   be7e4:	5c40      	ldrb	r0, [r0, r1]
   be7e6:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   be7e8:	2000      	movs	r0, #0
}
   be7ea:	4770      	bx	lr

000be7ec <_ZNK6String6charAtEj>:
	return operator[](loc);
   be7ec:	f7ff bff5 	b.w	be7da <_ZNK6StringixEj>

000be7f0 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   be7f0:	b558      	push	{r3, r4, r6, lr}
   be7f2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   be7f4:	b12a      	cbz	r2, be802 <_ZNK6String8getBytesEPhjj+0x12>
   be7f6:	b121      	cbz	r1, be802 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   be7f8:	6884      	ldr	r4, [r0, #8]
   be7fa:	42a3      	cmp	r3, r4
   be7fc:	d302      	bcc.n	be804 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   be7fe:	2300      	movs	r3, #0
   be800:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   be802:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   be804:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   be806:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   be808:	6801      	ldr	r1, [r0, #0]
   be80a:	4294      	cmp	r4, r2
   be80c:	bf28      	it	cs
   be80e:	4614      	movcs	r4, r2
   be810:	4419      	add	r1, r3
   be812:	4622      	mov	r2, r4
   be814:	4630      	mov	r0, r6
   be816:	f005 fed9 	bl	c45cc <strncpy>
	buf[n] = 0;
   be81a:	2300      	movs	r3, #0
   be81c:	5533      	strb	r3, [r6, r4]
   be81e:	e7f0      	b.n	be802 <_ZNK6String8getBytesEPhjj+0x12>

000be820 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be820:	4770      	bx	lr

000be822 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be822:	4770      	bx	lr

000be824 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be824:	4770      	bx	lr

000be826 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be826:	4770      	bx	lr

000be828 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be828:	4b06      	ldr	r3, [pc, #24]	; (be844 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be82a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be82c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be82e:	f100 040c 	add.w	r4, r0, #12
	    ||
   be832:	d005      	beq.n	be840 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be834:	4608      	mov	r0, r1
   be836:	f003 fbeb 	bl	c2010 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be83a:	2800      	cmp	r0, #0
   be83c:	bf08      	it	eq
   be83e:	2400      	moveq	r4, #0
      }
   be840:	4620      	mov	r0, r4
   be842:	bd10      	pop	{r4, pc}
   be844:	000c7cd4 	.word	0x000c7cd4

000be848 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be848:	4b06      	ldr	r3, [pc, #24]	; (be864 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be84a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be84c:	b510      	push	{r4, lr}
   be84e:	f100 040c 	add.w	r4, r0, #12
	    ||
   be852:	d005      	beq.n	be860 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be854:	4608      	mov	r0, r1
   be856:	f003 fbdb 	bl	c2010 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be85a:	2800      	cmp	r0, #0
   be85c:	bf08      	it	eq
   be85e:	2400      	moveq	r4, #0
      }
   be860:	4620      	mov	r0, r4
   be862:	bd10      	pop	{r4, pc}
   be864:	000c7cd4 	.word	0x000c7cd4

000be868 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be868:	4b06      	ldr	r3, [pc, #24]	; (be884 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be86a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be86c:	b510      	push	{r4, lr}
   be86e:	f100 040c 	add.w	r4, r0, #12
	    ||
   be872:	d005      	beq.n	be880 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be874:	4608      	mov	r0, r1
   be876:	f003 fbcb 	bl	c2010 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be87a:	2800      	cmp	r0, #0
   be87c:	bf08      	it	eq
   be87e:	2400      	moveq	r4, #0
      }
   be880:	4620      	mov	r0, r4
   be882:	bd10      	pop	{r4, pc}
   be884:	000c7cd4 	.word	0x000c7cd4

000be888 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be888:	b510      	push	{r4, lr}
   be88a:	2168      	movs	r1, #104	; 0x68
   be88c:	4604      	mov	r4, r0
   be88e:	f7f5 fc08 	bl	b40a2 <_ZdlPvj>
   be892:	4620      	mov	r0, r4
   be894:	bd10      	pop	{r4, pc}

000be896 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be896:	b510      	push	{r4, lr}
   be898:	2128      	movs	r1, #40	; 0x28
   be89a:	4604      	mov	r4, r0
   be89c:	f7f5 fc01 	bl	b40a2 <_ZdlPvj>
   be8a0:	4620      	mov	r0, r4
   be8a2:	bd10      	pop	{r4, pc}

000be8a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be8a4:	b510      	push	{r4, lr}
   be8a6:	2130      	movs	r1, #48	; 0x30
   be8a8:	4604      	mov	r4, r0
   be8aa:	f7f5 fbfa 	bl	b40a2 <_ZdlPvj>
   be8ae:	4620      	mov	r0, r4
   be8b0:	bd10      	pop	{r4, pc}

000be8b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be8b2:	2168      	movs	r1, #104	; 0x68
   be8b4:	f7f5 bbf5 	b.w	b40a2 <_ZdlPvj>

000be8b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be8b8:	2128      	movs	r1, #40	; 0x28
   be8ba:	f7f5 bbf2 	b.w	b40a2 <_ZdlPvj>

000be8be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be8be:	2130      	movs	r1, #48	; 0x30
   be8c0:	f7f5 bbef 	b.w	b40a2 <_ZdlPvj>

000be8c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be8c6:	2500      	movs	r5, #0
   be8c8:	1cec      	adds	r4, r5, #3
   be8ca:	428c      	cmp	r4, r1
   be8cc:	d80d      	bhi.n	be8ea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be8ce:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be8d0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be8d2:	5d87      	ldrb	r7, [r0, r6]
   be8d4:	4297      	cmp	r7, r2
   be8d6:	d105      	bne.n	be8e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be8d8:	4426      	add	r6, r4
   be8da:	42b1      	cmp	r1, r6
   be8dc:	d305      	bcc.n	be8ea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be8de:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be8e0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be8e4:	3401      	adds	r4, #1
   be8e6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be8e8:	e7ee      	b.n	be8c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be8ea:	2000      	movs	r0, #0
   be8ec:	e7f9      	b.n	be8e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be8f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be8f0:	4a02      	ldr	r2, [pc, #8]	; (be8fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be8f2:	4903      	ldr	r1, [pc, #12]	; (be900 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be8f4:	200a      	movs	r0, #10
   be8f6:	f7ff bb25 	b.w	bdf44 <panic_>
   be8fa:	bf00      	nop
   be8fc:	000bda61 	.word	0x000bda61
   be900:	000c7b34 	.word	0x000c7b34

000be904 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be904:	b430      	push	{r4, r5}
   be906:	460d      	mov	r5, r1
   be908:	4611      	mov	r1, r2
   be90a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be90c:	6803      	ldr	r3, [r0, #0]
   be90e:	6809      	ldr	r1, [r1, #0]
   be910:	6828      	ldr	r0, [r5, #0]
   be912:	e9d3 4300 	ldrd	r4, r3, [r3]
   be916:	46a4      	mov	ip, r4
      }
   be918:	bc30      	pop	{r4, r5}
   be91a:	4760      	bx	ip

000be91c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be91c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be91e:	b538      	push	{r3, r4, r5, lr}
   be920:	4604      	mov	r4, r0
	switch (__op)
   be922:	d102      	bne.n	be92a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be924:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be926:	6023      	str	r3, [r4, #0]
	}
   be928:	e003      	b.n	be932 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be92a:	2a02      	cmp	r2, #2
   be92c:	d003      	beq.n	be936 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be92e:	2a03      	cmp	r2, #3
   be930:	d00d      	beq.n	be94e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be932:	2000      	movs	r0, #0
   be934:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be936:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be938:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be93a:	f7f5 fbac 	bl	b4096 <_Znwj>
   be93e:	4603      	mov	r3, r0
   be940:	2800      	cmp	r0, #0
   be942:	d0f0      	beq.n	be926 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be944:	e895 0003 	ldmia.w	r5, {r0, r1}
   be948:	e883 0003 	stmia.w	r3, {r0, r1}
   be94c:	e7eb      	b.n	be926 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be94e:	6800      	ldr	r0, [r0, #0]
   be950:	2800      	cmp	r0, #0
   be952:	d0ee      	beq.n	be932 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be954:	2108      	movs	r1, #8
   be956:	f7f5 fba4 	bl	b40a2 <_ZdlPvj>
   be95a:	e7ea      	b.n	be932 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be95c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be95c:	b510      	push	{r4, lr}
   be95e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be960:	3058      	adds	r0, #88	; 0x58
   be962:	f7f5 fd83 	bl	b446c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be966:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be96e:	f7ff be5d 	b.w	be62c <_ZN6StringD1Ev>

000be972 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be972:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be974:	6843      	ldr	r3, [r0, #4]
   be976:	3b01      	subs	r3, #1
    {
   be978:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be97a:	6043      	str	r3, [r0, #4]
   be97c:	b963      	cbnz	r3, be998 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be97e:	6803      	ldr	r3, [r0, #0]
   be980:	689b      	ldr	r3, [r3, #8]
   be982:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be984:	68a3      	ldr	r3, [r4, #8]
   be986:	3b01      	subs	r3, #1
   be988:	60a3      	str	r3, [r4, #8]
   be98a:	b92b      	cbnz	r3, be998 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be98c:	6823      	ldr	r3, [r4, #0]
   be98e:	4620      	mov	r0, r4
   be990:	68db      	ldr	r3, [r3, #12]
    }
   be992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be996:	4718      	bx	r3
    }
   be998:	bd10      	pop	{r4, pc}

000be99a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be99a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be99e:	b2da      	uxtb	r2, r3
   be9a0:	2a09      	cmp	r2, #9
   be9a2:	d801      	bhi.n	be9a8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be9a4:	4618      	mov	r0, r3
   be9a6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be9a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be9ac:	2b05      	cmp	r3, #5
   be9ae:	d801      	bhi.n	be9b4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be9b0:	3857      	subs	r0, #87	; 0x57
   be9b2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be9b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be9b8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be9ba:	bf94      	ite	ls
   be9bc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be9be:	f04f 30ff 	movhi.w	r0, #4294967295
}
   be9c2:	4770      	bx	lr

000be9c4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be9c4:	b510      	push	{r4, lr}
            locked_(false) {
   be9c6:	2300      	movs	r3, #0
   be9c8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be9ca:	4b04      	ldr	r3, [pc, #16]	; (be9dc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be9cc:	4604      	mov	r4, r0
   be9ce:	6818      	ldr	r0, [r3, #0]
   be9d0:	f7ff f930 	bl	bdc34 <os_mutex_recursive_lock>
        locked_ = true;
   be9d4:	2301      	movs	r3, #1
   be9d6:	7023      	strb	r3, [r4, #0]
    }
   be9d8:	4620      	mov	r0, r4
   be9da:	bd10      	pop	{r4, pc}
   be9dc:	2003e640 	.word	0x2003e640

000be9e0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be9e0:	b510      	push	{r4, lr}
        if (locked_) {
   be9e2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be9e4:	4604      	mov	r4, r0
        if (locked_) {
   be9e6:	b11b      	cbz	r3, be9f0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be9e8:	4b02      	ldr	r3, [pc, #8]	; (be9f4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be9ea:	6818      	ldr	r0, [r3, #0]
   be9ec:	f7ff f92a 	bl	bdc44 <os_mutex_recursive_unlock>
    }
   be9f0:	4620      	mov	r0, r4
   be9f2:	bd10      	pop	{r4, pc}
   be9f4:	2003e640 	.word	0x2003e640

000be9f8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be9f8:	b082      	sub	sp, #8
   be9fa:	4603      	mov	r3, r0
    address_ = addr;
   be9fc:	6808      	ldr	r0, [r1, #0]
   be9fe:	6849      	ldr	r1, [r1, #4]
   bea00:	466a      	mov	r2, sp
   bea02:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bea04:	466a      	mov	r2, sp
   bea06:	ca03      	ldmia	r2!, {r0, r1}
   bea08:	6018      	str	r0, [r3, #0]
}
   bea0a:	4618      	mov	r0, r3
    address_ = addr.address_;
   bea0c:	6059      	str	r1, [r3, #4]
}
   bea0e:	b002      	add	sp, #8
   bea10:	4770      	bx	lr

000bea12 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bea12:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bea14:	7982      	ldrb	r2, [r0, #6]
   bea16:	798b      	ldrb	r3, [r1, #6]
   bea18:	429a      	cmp	r2, r3
   bea1a:	d106      	bne.n	bea2a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bea1c:	2206      	movs	r2, #6
   bea1e:	f005 fce3 	bl	c43e8 <memcmp>
   bea22:	fab0 f080 	clz	r0, r0
   bea26:	0940      	lsrs	r0, r0, #5
}
   bea28:	bd08      	pop	{r3, pc}
    return false;
   bea2a:	2000      	movs	r0, #0
   bea2c:	e7fc      	b.n	bea28 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bea2e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bea2e:	f04f 33ff 	mov.w	r3, #4294967295
   bea32:	6003      	str	r3, [r0, #0]
   bea34:	8083      	strh	r3, [r0, #4]
}
   bea36:	2000      	movs	r0, #0
   bea38:	4770      	bx	lr

000bea3a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bea3a:	b508      	push	{r3, lr}
   bea3c:	4602      	mov	r2, r0
        : address_{} {
   bea3e:	2100      	movs	r1, #0
   bea40:	6001      	str	r1, [r0, #0]
   bea42:	6041      	str	r1, [r0, #4]
    clear();
   bea44:	f7ff fff3 	bl	bea2e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bea48:	7191      	strb	r1, [r2, #6]
}
   bea4a:	4610      	mov	r0, r2
   bea4c:	bd08      	pop	{r3, pc}
	...

000bea50 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bea50:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bea52:	2301      	movs	r3, #1
   bea54:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bea56:	4b05      	ldr	r3, [pc, #20]	; (bea6c <_ZN8particle7BleUuidC1Ev+0x1c>)
   bea58:	4602      	mov	r2, r0
   bea5a:	f103 0110 	add.w	r1, r3, #16
   bea5e:	f853 4b04 	ldr.w	r4, [r3], #4
   bea62:	f842 4b04 	str.w	r4, [r2], #4
   bea66:	428b      	cmp	r3, r1
   bea68:	d1f9      	bne.n	bea5e <_ZN8particle7BleUuidC1Ev+0xe>
}
   bea6a:	bd10      	pop	{r4, pc}
   bea6c:	000c7ce2 	.word	0x000c7ce2

000bea70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bea70:	b510      	push	{r4, lr}
    if (uuid128) {
   bea72:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bea74:	4604      	mov	r4, r0
    if (uuid128) {
   bea76:	b1b1      	cbz	r1, beaa6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bea78:	2a01      	cmp	r2, #1
   bea7a:	f101 0210 	add.w	r2, r1, #16
   bea7e:	d10a      	bne.n	bea96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bea80:	4601      	mov	r1, r0
   bea82:	f853 0b04 	ldr.w	r0, [r3], #4
   bea86:	f841 0b04 	str.w	r0, [r1], #4
   bea8a:	4293      	cmp	r3, r2
   bea8c:	d1f9      	bne.n	bea82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bea8e:	2301      	movs	r3, #1
   bea90:	6123      	str	r3, [r4, #16]
}
   bea92:	4620      	mov	r0, r4
   bea94:	bd10      	pop	{r4, pc}
   bea96:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bea98:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bea9c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   beaa0:	429a      	cmp	r2, r3
   beaa2:	d1f9      	bne.n	bea98 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   beaa4:	e7f3      	b.n	bea8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   beaa6:	2210      	movs	r2, #16
   beaa8:	f005 fcd6 	bl	c4458 <memset>
   beaac:	e7f1      	b.n	bea92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000beaae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   beaae:	b538      	push	{r3, r4, r5, lr}
   beab0:	4604      	mov	r4, r0
   beab2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   beab4:	461a      	mov	r2, r3
   beab6:	f7ff ffdb 	bl	bea70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   beaba:	81a5      	strh	r5, [r4, #12]
}
   beabc:	4620      	mov	r0, r4
   beabe:	bd38      	pop	{r3, r4, r5, pc}

000beac0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   beac0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   beac2:	6902      	ldr	r2, [r0, #16]
   beac4:	b922      	cbnz	r2, bead0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   beac6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beac8:	3800      	subs	r0, #0
   beaca:	bf18      	it	ne
   beacc:	2001      	movne	r0, #1
}
   beace:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bead0:	4902      	ldr	r1, [pc, #8]	; (beadc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bead2:	2210      	movs	r2, #16
   bead4:	f005 fc88 	bl	c43e8 <memcmp>
   bead8:	e7f6      	b.n	beac8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   beada:	bf00      	nop
   beadc:	000c7d02 	.word	0x000c7d02

000beae0 <_ZNK8particle7BleUuid4typeEv>:
}
   beae0:	6900      	ldr	r0, [r0, #16]
   beae2:	4770      	bx	lr

000beae4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   beae4:	b538      	push	{r3, r4, r5, lr}
   beae6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   beae8:	2214      	movs	r2, #20
   beaea:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   beaec:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   beaee:	f005 fcb3 	bl	c4458 <memset>
    if (type_ == BleUuidType::SHORT) {
   beaf2:	6923      	ldr	r3, [r4, #16]
   beaf4:	b91b      	cbnz	r3, beafe <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   beaf6:	89a3      	ldrh	r3, [r4, #12]
   beaf8:	802b      	strh	r3, [r5, #0]
}
   beafa:	4628      	mov	r0, r5
   beafc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   beafe:	2301      	movs	r3, #1
   beb00:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   beb02:	4621      	mov	r1, r4
   beb04:	462b      	mov	r3, r5
   beb06:	f104 0210 	add.w	r2, r4, #16
   beb0a:	f851 0b04 	ldr.w	r0, [r1], #4
   beb0e:	f843 0b04 	str.w	r0, [r3], #4
   beb12:	4291      	cmp	r1, r2
   beb14:	d1f9      	bne.n	beb0a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   beb16:	e7f0      	b.n	beafa <_ZN8particle7BleUuid7halUUIDEv+0x16>

000beb18 <_ZNK8particle7BleUuid7shortedEv>:
}
   beb18:	8980      	ldrh	r0, [r0, #12]
   beb1a:	4770      	bx	lr

000beb1c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   beb1c:	4770      	bx	lr

000beb1e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   beb1e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   beb20:	6902      	ldr	r2, [r0, #16]
   beb22:	690b      	ldr	r3, [r1, #16]
   beb24:	429a      	cmp	r2, r3
   beb26:	d106      	bne.n	beb36 <_ZNK8particle7BleUuideqERKS0_+0x18>
   beb28:	2210      	movs	r2, #16
   beb2a:	f005 fc5d 	bl	c43e8 <memcmp>
   beb2e:	fab0 f080 	clz	r0, r0
   beb32:	0940      	lsrs	r0, r0, #5
}
   beb34:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   beb36:	2000      	movs	r0, #0
   beb38:	e7fc      	b.n	beb34 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000beb3c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   beb3c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   beb3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   beb42:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beb44:	4b34      	ldr	r3, [pc, #208]	; (bec18 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   beb46:	460c      	mov	r4, r1
   beb48:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beb4a:	4602      	mov	r2, r0
   beb4c:	f103 0110 	add.w	r1, r3, #16
   beb50:	f853 0b04 	ldr.w	r0, [r3], #4
   beb54:	f842 0b04 	str.w	r0, [r2], #4
   beb58:	428b      	cmp	r3, r1
   beb5a:	d1f9      	bne.n	beb50 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   beb5c:	b344      	cbz	r4, bebb0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   beb5e:	2124      	movs	r1, #36	; 0x24
   beb60:	4620      	mov	r0, r4
   beb62:	f005 fd46 	bl	c45f2 <strnlen>
   beb66:	2804      	cmp	r0, #4
   beb68:	f04f 0500 	mov.w	r5, #0
   beb6c:	d123      	bne.n	bebb6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   beb6e:	f8ad 5004 	strh.w	r5, [sp, #4]
   beb72:	af01      	add	r7, sp, #4
   beb74:	1ca5      	adds	r5, r4, #2
   beb76:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   beb78:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   beb7c:	f7ff ff0d 	bl	be99a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   beb80:	f1b0 0800 	subs.w	r8, r0, #0
   beb84:	db12      	blt.n	bebac <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   beb86:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   beb8a:	f7ff ff06 	bl	be99a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   beb8e:	2800      	cmp	r0, #0
   beb90:	db0c      	blt.n	bebac <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   beb92:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   beb94:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   beb98:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   beb9a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   beb9e:	d1eb      	bne.n	beb78 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   beba0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   beba4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   beba6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bebaa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bebac:	2300      	movs	r3, #0
   bebae:	6133      	str	r3, [r6, #16]
}
   bebb0:	b002      	add	sp, #8
   bebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bebb6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bebba:	2124      	movs	r1, #36	; 0x24
   bebbc:	4620      	mov	r0, r4
   bebbe:	f005 fd18 	bl	c45f2 <strnlen>
   bebc2:	42a8      	cmp	r0, r5
   bebc4:	d807      	bhi.n	bebd6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bebc6:	4642      	mov	r2, r8
   bebc8:	2100      	movs	r1, #0
   bebca:	4630      	mov	r0, r6
}
   bebcc:	b002      	add	sp, #8
   bebce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bebd2:	f005 bc41 	b.w	c4458 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bebd6:	f1b8 0f00 	cmp.w	r8, #0
   bebda:	d0e9      	beq.n	bebb0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bebdc:	5d60      	ldrb	r0, [r4, r5]
   bebde:	f7ff fedc 	bl	be99a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bebe2:	0603      	lsls	r3, r0, #24
   bebe4:	d415      	bmi.n	bec12 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bebe6:	0100      	lsls	r0, r0, #4
   bebe8:	f108 38ff 	add.w	r8, r8, #4294967295
   bebec:	b2c7      	uxtb	r7, r0
   bebee:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bebf2:	2124      	movs	r1, #36	; 0x24
   bebf4:	4620      	mov	r0, r4
   bebf6:	f005 fcfc 	bl	c45f2 <strnlen>
   bebfa:	3501      	adds	r5, #1
   bebfc:	42a8      	cmp	r0, r5
   bebfe:	d908      	bls.n	bec12 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bec00:	5d60      	ldrb	r0, [r4, r5]
   bec02:	f7ff feca 	bl	be99a <_ZN8particle11hexToNibbleEc>
   bec06:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bec08:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bec0a:	bfa4      	itt	ge
   bec0c:	4338      	orrge	r0, r7
   bec0e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bec12:	3501      	adds	r5, #1
   bec14:	e7d1      	b.n	bebba <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bec16:	bf00      	nop
   bec18:	000c7ce2 	.word	0x000c7ce2

000bec1c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bec1c:	b513      	push	{r0, r1, r4, lr}
   bec1e:	4604      	mov	r4, r0
   bec20:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bec22:	f7ff ff15 	bl	bea50 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bec26:	4620      	mov	r0, r4
   bec28:	9901      	ldr	r1, [sp, #4]
   bec2a:	f7ff ff87 	bl	beb3c <_ZN8particle7BleUuid9constructEPKc>
}
   bec2e:	4620      	mov	r0, r4
   bec30:	b002      	add	sp, #8
   bec32:	bd10      	pop	{r4, pc}

000bec34 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bec34:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bec36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bec3a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bec3c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bec3e:	8043      	strh	r3, [r0, #2]
   bec40:	220e      	movs	r2, #14
   bec42:	4629      	mov	r1, r5
   bec44:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bec46:	7105      	strb	r5, [r0, #4]
   bec48:	3006      	adds	r0, #6
   bec4a:	f005 fc05 	bl	c4458 <memset>
   bec4e:	f104 0014 	add.w	r0, r4, #20
   bec52:	f7ff fefd 	bl	bea50 <_ZN8particle7BleUuidC1Ev>
   bec56:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bec5a:	f7ff fef9 	bl	bea50 <_ZN8particle7BleUuidC1Ev>
   bec5e:	4904      	ldr	r1, [pc, #16]	; (bec70 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bec60:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bec64:	f7ff fd2d 	bl	be6c2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bec68:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bec6a:	4620      	mov	r0, r4
   bec6c:	bd38      	pop	{r3, r4, r5, pc}
   bec6e:	bf00      	nop
   bec70:	000c7d6c 	.word	0x000c7d6c

000bec74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bec74:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bec76:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bec7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bec7e:	4293      	cmp	r3, r2
   bec80:	4618      	mov	r0, r3
   bec82:	d006      	beq.n	bec92 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bec84:	6804      	ldr	r4, [r0, #0]
   bec86:	8824      	ldrh	r4, [r4, #0]
   bec88:	428c      	cmp	r4, r1
   bec8a:	f103 0308 	add.w	r3, r3, #8
   bec8e:	d1f6      	bne.n	bec7e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bec90:	bd10      	pop	{r4, pc}
        return nullptr;
   bec92:	2000      	movs	r0, #0
   bec94:	e7fc      	b.n	bec90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bec98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bec98:	b5f0      	push	{r4, r5, r6, r7, lr}
   bec9a:	4606      	mov	r6, r0
   bec9c:	b085      	sub	sp, #20
   bec9e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   beca0:	460d      	mov	r5, r1
   beca2:	2900      	cmp	r1, #0
   beca4:	d050      	beq.n	bed48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   beca6:	2a00      	cmp	r2, #0
   beca8:	d04e      	beq.n	bed48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   becaa:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   becac:	7823      	ldrb	r3, [r4, #0]
   becae:	2af4      	cmp	r2, #244	; 0xf4
   becb0:	bf28      	it	cs
   becb2:	22f4      	movcs	r2, #244	; 0xf4
   becb4:	b343      	cbz	r3, bed08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   becb6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   becb8:	0798      	lsls	r0, r3, #30
   becba:	d509      	bpl.n	becd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   becbc:	89a0      	ldrh	r0, [r4, #12]
   becbe:	9203      	str	r2, [sp, #12]
   becc0:	2300      	movs	r3, #0
   becc2:	f7fe ff31 	bl	bdb28 <hal_ble_gatt_server_set_characteristic_value>
   becc6:	2800      	cmp	r0, #0
   becc8:	9a03      	ldr	r2, [sp, #12]
   becca:	da03      	bge.n	becd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   beccc:	b005      	add	sp, #20
   becce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   becd0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   becd4:	6834      	ldr	r4, [r6, #0]
   becd6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   becd8:	06d9      	lsls	r1, r3, #27
   becda:	d509      	bpl.n	becf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   becdc:	2f01      	cmp	r7, #1
   becde:	d007      	beq.n	becf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bece0:	89a0      	ldrh	r0, [r4, #12]
   bece2:	2300      	movs	r3, #0
   bece4:	4629      	mov	r1, r5
}
   bece6:	b005      	add	sp, #20
   bece8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   becec:	f7fe bf4e 	b.w	bdb8c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   becf0:	069b      	lsls	r3, r3, #26
   becf2:	d5eb      	bpl.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   becf4:	2f02      	cmp	r7, #2
   becf6:	d0e9      	beq.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   becf8:	89a0      	ldrh	r0, [r4, #12]
   becfa:	2300      	movs	r3, #0
   becfc:	4629      	mov	r1, r5
}
   becfe:	b005      	add	sp, #20
   bed00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bed04:	f7fe bf4c 	b.w	bdba0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bed08:	8860      	ldrh	r0, [r4, #2]
   bed0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bed0e:	4288      	cmp	r0, r1
   bed10:	d01c      	beq.n	bed4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bed12:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bed14:	074e      	lsls	r6, r1, #29
   bed16:	d501      	bpl.n	bed1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bed18:	2f01      	cmp	r7, #1
   bed1a:	d104      	bne.n	bed26 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bed1c:	070b      	lsls	r3, r1, #28
   bed1e:	d409      	bmi.n	bed34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bed20:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bed24:	e7d2      	b.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bed26:	89a1      	ldrh	r1, [r4, #12]
   bed28:	9300      	str	r3, [sp, #0]
   bed2a:	4613      	mov	r3, r2
   bed2c:	462a      	mov	r2, r5
   bed2e:	f7fe ff0f 	bl	bdb50 <hal_ble_gatt_client_write_without_response>
   bed32:	e7cb      	b.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bed34:	2f02      	cmp	r7, #2
   bed36:	d0f3      	beq.n	bed20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bed38:	2300      	movs	r3, #0
   bed3a:	89a1      	ldrh	r1, [r4, #12]
   bed3c:	9300      	str	r3, [sp, #0]
   bed3e:	4613      	mov	r3, r2
   bed40:	462a      	mov	r2, r5
   bed42:	f7fe fefb 	bl	bdb3c <hal_ble_gatt_client_write_with_response>
   bed46:	e7c1      	b.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bed48:	4802      	ldr	r0, [pc, #8]	; (bed54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bed4a:	e7bf      	b.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bed4c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bed50:	e7bc      	b.n	beccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bed52:	bf00      	nop
   bed54:	fffffef2 	.word	0xfffffef2

000bed58 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bed58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bed5c:	2600      	movs	r6, #0
   bed5e:	6006      	str	r6, [r0, #0]
   bed60:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bed62:	2028      	movs	r0, #40	; 0x28
   bed64:	460c      	mov	r4, r1
   bed66:	f7f5 f996 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bed6a:	1e05      	subs	r5, r0, #0
   bed6c:	f105 080c 	add.w	r8, r5, #12
   bed70:	d00f      	beq.n	bed92 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bed72:	2301      	movs	r3, #1
   bed74:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bed78:	4b08      	ldr	r3, [pc, #32]	; (bed9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bed7a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bed7c:	4640      	mov	r0, r8
   bed7e:	f7ff fe67 	bl	bea50 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bed82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bed84:	622e      	str	r6, [r5, #32]
   bed86:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bed8a:	4646      	mov	r6, r8
   bed8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bed8e:	6823      	ldr	r3, [r4, #0]
   bed90:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bed92:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bed96:	4638      	mov	r0, r7
   bed98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bed9c:	000c7ca4 	.word	0x000c7ca4

000beda0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   beda0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   beda2:	2500      	movs	r5, #0
   beda4:	6005      	str	r5, [r0, #0]
   beda6:	4606      	mov	r6, r0
   beda8:	2030      	movs	r0, #48	; 0x30
   bedaa:	f7f5 f974 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bedae:	4604      	mov	r4, r0
   bedb0:	b188      	cbz	r0, bedd6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bedb2:	2301      	movs	r3, #1
   bedb4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bedb8:	4b09      	ldr	r3, [pc, #36]	; (bede0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bedba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bedbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bedc0:	8183      	strh	r3, [r0, #12]
   bedc2:	300e      	adds	r0, #14
   bedc4:	f7ff fe39 	bl	bea3a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bedc8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bedcc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bedd0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bedd4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bedd6:	6074      	str	r4, [r6, #4]
   bedd8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bedda:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   beddc:	4630      	mov	r0, r6
   bedde:	bd70      	pop	{r4, r5, r6, pc}
   bede0:	000c7cc0 	.word	0x000c7cc0

000bede4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bede4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bede6:	460d      	mov	r5, r1
   bede8:	4604      	mov	r4, r0
    WiringBleLock lk;
   bedea:	a801      	add	r0, sp, #4
   bedec:	f7ff fdea 	bl	be9c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bedf0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bedf2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bedf6:	6023      	str	r3, [r4, #0]
   bedf8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bedfc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bedfe:	a801      	add	r0, sp, #4
   bee00:	f7ff fdee 	bl	be9e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bee04:	4620      	mov	r0, r4
   bee06:	b003      	add	sp, #12
   bee08:	bd30      	pop	{r4, r5, pc}

000bee0a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bee0a:	b530      	push	{r4, r5, lr}
   bee0c:	4605      	mov	r5, r0
   bee0e:	b087      	sub	sp, #28
   bee10:	460c      	mov	r4, r1
    WiringBleLock lk;
   bee12:	a801      	add	r0, sp, #4
   bee14:	f7ff fdd6 	bl	be9c4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bee18:	682a      	ldr	r2, [r5, #0]
   bee1a:	6823      	ldr	r3, [r4, #0]
   bee1c:	8812      	ldrh	r2, [r2, #0]
   bee1e:	881b      	ldrh	r3, [r3, #0]
   bee20:	429a      	cmp	r2, r3
   bee22:	d10d      	bne.n	bee40 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bee24:	4629      	mov	r1, r5
   bee26:	a802      	add	r0, sp, #8
   bee28:	f7ff ffdc 	bl	bede4 <_ZNK8particle13BlePeerDevice7addressEv>
   bee2c:	4621      	mov	r1, r4
   bee2e:	a804      	add	r0, sp, #16
   bee30:	f7ff ffd8 	bl	bede4 <_ZNK8particle13BlePeerDevice7addressEv>
   bee34:	a904      	add	r1, sp, #16
   bee36:	a802      	add	r0, sp, #8
   bee38:	f7ff fdeb 	bl	bea12 <_ZNK8particle10BleAddresseqERKS0_>
   bee3c:	4604      	mov	r4, r0
   bee3e:	b900      	cbnz	r0, bee42 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bee40:	2400      	movs	r4, #0
    WiringBleLock lk;
   bee42:	a801      	add	r0, sp, #4
   bee44:	f7ff fdcc 	bl	be9e0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bee48:	4620      	mov	r0, r4
   bee4a:	b007      	add	sp, #28
   bee4c:	bd30      	pop	{r4, r5, pc}
	...

000bee50 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bee50:	b510      	push	{r4, lr}
   bee52:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bee54:	2064      	movs	r0, #100	; 0x64
   bee56:	f7f5 f91e 	bl	b4096 <_Znwj>
   bee5a:	b168      	cbz	r0, bee78 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bee5c:	2300      	movs	r3, #0
   bee5e:	e9c0 3300 	strd	r3, r3, [r0]
   bee62:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bee66:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bee6a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bee6e:	6203      	str	r3, [r0, #32]
   bee70:	62c3      	str	r3, [r0, #44]	; 0x2c
   bee72:	63c3      	str	r3, [r0, #60]	; 0x3c
   bee74:	64c3      	str	r3, [r0, #76]	; 0x4c
   bee76:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bee78:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bee7a:	b920      	cbnz	r0, bee86 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bee7c:	4a0a      	ldr	r2, [pc, #40]	; (beea8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bee7e:	490b      	ldr	r1, [pc, #44]	; (beeac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bee80:	200a      	movs	r0, #10
   bee82:	f7ff f85f 	bl	bdf44 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bee86:	2000      	movs	r0, #0
   bee88:	f7fe fe12 	bl	bdab0 <hal_ble_stack_init>
   bee8c:	b120      	cbz	r0, bee98 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bee8e:	4a06      	ldr	r2, [pc, #24]	; (beea8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bee90:	4907      	ldr	r1, [pc, #28]	; (beeb0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bee92:	200a      	movs	r0, #10
   bee94:	f7ff f856 	bl	bdf44 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bee98:	6821      	ldr	r1, [r4, #0]
   bee9a:	4806      	ldr	r0, [pc, #24]	; (beeb4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bee9c:	2200      	movs	r2, #0
   bee9e:	f7fe fe6b 	bl	bdb78 <hal_ble_set_callback_on_periph_link_events>
}
   beea2:	4620      	mov	r0, r4
   beea4:	bd10      	pop	{r4, pc}
   beea6:	bf00      	nop
   beea8:	000bda61 	.word	0x000bda61
   beeac:	000c7b34 	.word	0x000c7b34
   beeb0:	000c7b72 	.word	0x000c7b72
   beeb4:	000bf475 	.word	0x000bf475

000beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   beeb8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   beeba:	4c0a      	ldr	r4, [pc, #40]	; (beee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   beebc:	7823      	ldrb	r3, [r4, #0]
   beebe:	f3bf 8f5b 	dmb	ish
   beec2:	07db      	lsls	r3, r3, #31
   beec4:	d40c      	bmi.n	beee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beec6:	4620      	mov	r0, r4
   beec8:	f7f5 f8fa 	bl	b40c0 <__cxa_guard_acquire>
   beecc:	b140      	cbz	r0, beee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beece:	4806      	ldr	r0, [pc, #24]	; (beee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beed0:	f7ff ffbe 	bl	bee50 <_ZN8particle14BleLocalDeviceC1Ev>
   beed4:	4620      	mov	r0, r4
   beed6:	f7f5 f8f8 	bl	b40ca <__cxa_guard_release>
   beeda:	4804      	ldr	r0, [pc, #16]	; (beeec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   beedc:	f005 fa6e 	bl	c43bc <atexit>
    return instance;
}
   beee0:	4801      	ldr	r0, [pc, #4]	; (beee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beee2:	bd10      	pop	{r4, pc}
   beee4:	2003e638 	.word	0x2003e638
   beee8:	2003e644 	.word	0x2003e644
   beeec:	000bf12d 	.word	0x000bf12d

000beef0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beef0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   beef2:	6803      	ldr	r3, [r0, #0]
   beef4:	3b09      	subs	r3, #9
   beef6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beef8:	b08d      	sub	sp, #52	; 0x34
   beefa:	4604      	mov	r4, r0
   beefc:	460d      	mov	r5, r1
    switch (event->type) {
   beefe:	d811      	bhi.n	bef24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bef00:	f7ff ffda 	bl	beeb8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bef04:	88a1      	ldrh	r1, [r4, #4]
   bef06:	6800      	ldr	r0, [r0, #0]
   bef08:	f7ff feb4 	bl	bec74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bef0c:	4603      	mov	r3, r0
   bef0e:	b958      	cbnz	r0, bef28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bef10:	2220      	movs	r2, #32
   bef12:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bef16:	4a0b      	ldr	r2, [pc, #44]	; (bef44 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bef18:	9200      	str	r2, [sp, #0]
   bef1a:	490b      	ldr	r1, [pc, #44]	; (bef48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bef1c:	aa04      	add	r2, sp, #16
   bef1e:	2032      	movs	r0, #50	; 0x32
   bef20:	f7ff f818 	bl	bdf54 <log_message>
}
   bef24:	b00d      	add	sp, #52	; 0x34
   bef26:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bef28:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bef2a:	2a00      	cmp	r2, #0
   bef2c:	d0fa      	beq.n	bef24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bef2e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bef32:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bef36:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bef3a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bef3c:	aa04      	add	r2, sp, #16
   bef3e:	a903      	add	r1, sp, #12
   bef40:	47a0      	blx	r4
}
   bef42:	e7ef      	b.n	bef24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bef44:	000c7bb4 	.word	0x000c7bb4
   bef48:	000c7b4b 	.word	0x000c7b4b

000bef4c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bef4c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bef4e:	2000      	movs	r0, #0
   bef50:	f7fe fdae 	bl	bdab0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bef54:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bef58:	bd08      	pop	{r3, pc}

000bef5a <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bef5a:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bef5c:	2100      	movs	r1, #0
   bef5e:	f7fe bdaf 	b.w	bdac0 <hal_ble_gap_set_tx_power>

000bef62 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bef62:	b919      	cbnz	r1, bef6c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bef64:	460a      	mov	r2, r1
   bef66:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bef68:	f7fe bdb2 	b.w	bdad0 <hal_ble_gap_set_advertising_data>
   bef6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bef70:	2200      	movs	r2, #0
   bef72:	e7f9      	b.n	bef68 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bef74 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bef74:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bef76:	69d8      	ldr	r0, [r3, #28]
}
   bef78:	2800      	cmp	r0, #0
   bef7a:	bfd4      	ite	le
   bef7c:	2000      	movle	r0, #0
   bef7e:	2001      	movgt	r0, #1
   bef80:	4770      	bx	lr

000bef82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bef82:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bef84:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bef88:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bef8a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bef8e:	42ae      	cmp	r6, r5
   bef90:	d004      	beq.n	bef9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bef92:	4628      	mov	r0, r5
   bef94:	f7ff fb4a 	bl	be62c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bef98:	3510      	adds	r5, #16
   bef9a:	e7f8      	b.n	bef8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bef9c:	6820      	ldr	r0, [r4, #0]
   bef9e:	f7ff f8e7 	bl	be170 <free>
}
   befa2:	4620      	mov	r0, r4
   befa4:	bd70      	pop	{r4, r5, r6, pc}

000befa6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   befa6:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   befa8:	1e14      	subs	r4, r2, #0
   befaa:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   befac:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   befae:	db02      	blt.n	befb6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   befb0:	1862      	adds	r2, r4, r1
   befb2:	429a      	cmp	r2, r3
   befb4:	dd00      	ble.n	befb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   befb6:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   befb8:	682a      	ldr	r2, [r5, #0]
   befba:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   befbc:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   befbe:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   befc0:	1a52      	subs	r2, r2, r1
   befc2:	f005 fa2f 	bl	c4424 <memmove>
    size_ -= n;
   befc6:	686a      	ldr	r2, [r5, #4]
   befc8:	1b12      	subs	r2, r2, r4
   befca:	606a      	str	r2, [r5, #4]
}
   befcc:	bd38      	pop	{r3, r4, r5, pc}

000befce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   befce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   befd0:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   befd2:	4604      	mov	r4, r0
   befd4:	460d      	mov	r5, r1
   befd6:	ab01      	add	r3, sp, #4
   befd8:	e9d0 0100 	ldrd	r0, r1, [r0]
   befdc:	f7ff fc72 	bl	be8c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   befe0:	4602      	mov	r2, r0
   befe2:	b138      	cbz	r0, beff4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   befe4:	9901      	ldr	r1, [sp, #4]
   befe6:	4620      	mov	r0, r4
   befe8:	f7ff ffdd 	bl	befa6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   befec:	4629      	mov	r1, r5
   befee:	4620      	mov	r0, r4
   beff0:	f7ff ffed 	bl	befce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   beff4:	b003      	add	sp, #12
   beff6:	bd30      	pop	{r4, r5, pc}

000beff8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   beff8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   beffa:	460c      	mov	r4, r1
   beffc:	b929      	cbnz	r1, bf00a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   beffe:	460a      	mov	r2, r1
   bf000:	4608      	mov	r0, r1
}
   bf002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf006:	f7fe bd6b 	b.w	bdae0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bf00a:	2101      	movs	r1, #1
   bf00c:	4620      	mov	r0, r4
   bf00e:	f7ff ffde 	bl	befce <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf012:	e9d4 0100 	ldrd	r0, r1, [r4]
   bf016:	2200      	movs	r2, #0
   bf018:	e7f3      	b.n	bf002 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bf01a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bf01a:	b538      	push	{r3, r4, r5, lr}
   bf01c:	4604      	mov	r4, r0
   bf01e:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bf020:	f7ff ff9f 	bl	bef62 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bf024:	2800      	cmp	r0, #0
   bf026:	db0a      	blt.n	bf03e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bf028:	4629      	mov	r1, r5
   bf02a:	4620      	mov	r0, r4
   bf02c:	f7ff ffe4 	bl	beff8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bf030:	2800      	cmp	r0, #0
   bf032:	db04      	blt.n	bf03e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bf034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bf038:	2000      	movs	r0, #0
   bf03a:	f7fe bd59 	b.w	bdaf0 <hal_ble_gap_start_advertising>
}
   bf03e:	bd38      	pop	{r3, r4, r5, pc}

000bf040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bf040:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf042:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bf044:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bf046:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf048:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bf04a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf04c:	f7f5 f823 	bl	b4096 <_Znwj>
   bf050:	b118      	cbz	r0, bf05a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bf052:	682b      	ldr	r3, [r5, #0]
   bf054:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf056:	686b      	ldr	r3, [r5, #4]
   bf058:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bf05a:	4b03      	ldr	r3, [pc, #12]	; (bf068 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bf05c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf05e:	4b03      	ldr	r3, [pc, #12]	; (bf06c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf060:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf062:	60a3      	str	r3, [r4, #8]
      }
   bf064:	4620      	mov	r0, r4
   bf066:	bd38      	pop	{r3, r4, r5, pc}
   bf068:	000be905 	.word	0x000be905
   bf06c:	000be91d 	.word	0x000be91d

000bf070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bf070:	680b      	ldr	r3, [r1, #0]
   bf072:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bf074:	b113      	cbz	r3, bf07c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bf076:	685a      	ldr	r2, [r3, #4]
   bf078:	3201      	adds	r2, #1
   bf07a:	605a      	str	r2, [r3, #4]
      }
   bf07c:	4770      	bx	lr

000bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bf07e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf080:	f851 3b04 	ldr.w	r3, [r1], #4
   bf084:	4604      	mov	r4, r0
   bf086:	f840 3b04 	str.w	r3, [r0], #4
   bf08a:	f7ff fff1 	bl	bf070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bf08e:	6823      	ldr	r3, [r4, #0]
   bf090:	b90b      	cbnz	r3, bf096 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bf092:	f7ff fc2d 	bl	be8f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bf096:	4620      	mov	r0, r4
   bf098:	bd10      	pop	{r4, pc}

000bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf09a:	b510      	push	{r4, lr}
   bf09c:	f851 3b04 	ldr.w	r3, [r1], #4
   bf0a0:	4604      	mov	r4, r0
   bf0a2:	f840 3b04 	str.w	r3, [r0], #4
   bf0a6:	f7ff ffe3 	bl	bf070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf0aa:	4620      	mov	r0, r4
   bf0ac:	bd10      	pop	{r4, pc}

000bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf0ae:	b510      	push	{r4, lr}
   bf0b0:	f851 3b04 	ldr.w	r3, [r1], #4
   bf0b4:	4604      	mov	r4, r0
   bf0b6:	f840 3b04 	str.w	r3, [r0], #4
   bf0ba:	f7ff ffd9 	bl	bf070 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf0be:	4620      	mov	r0, r4
   bf0c0:	bd10      	pop	{r4, pc}

000bf0c2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bf0c2:	b510      	push	{r4, lr}
   bf0c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf0c6:	3004      	adds	r0, #4
   bf0c8:	f7f6 fe76 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf0cc:	4620      	mov	r0, r4
   bf0ce:	bd10      	pop	{r4, pc}

000bf0d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf0d2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf0d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf0dc:	42ae      	cmp	r6, r5
   bf0de:	d004      	beq.n	bf0ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bf0e0:	1d28      	adds	r0, r5, #4
   bf0e2:	f7f6 fe69 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf0e6:	3508      	adds	r5, #8
   bf0e8:	e7f8      	b.n	bf0dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf0ea:	6820      	ldr	r0, [r4, #0]
   bf0ec:	f7ff f840 	bl	be170 <free>
}
   bf0f0:	4620      	mov	r0, r4
   bf0f2:	bd70      	pop	{r4, r5, r6, pc}

000bf0f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf0f6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf0fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf100:	42ae      	cmp	r6, r5
   bf102:	d004      	beq.n	bf10e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bf104:	1d28      	adds	r0, r5, #4
   bf106:	f7f6 fe57 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf10a:	3508      	adds	r5, #8
   bf10c:	e7f8      	b.n	bf100 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf10e:	6820      	ldr	r0, [r4, #0]
   bf110:	f7ff f82e 	bl	be170 <free>
}
   bf114:	4620      	mov	r0, r4
   bf116:	bd70      	pop	{r4, r5, r6, pc}

000bf118 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf118:	b510      	push	{r4, lr}
   bf11a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bf11c:	3024      	adds	r0, #36	; 0x24
   bf11e:	f7ff ffe9 	bl	bf0f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf122:	f104 0018 	add.w	r0, r4, #24
   bf126:	f7ff ffd3 	bl	bf0d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bf12a:	bd10      	pop	{r4, pc}

000bf12c <__tcf_0>:
    static BleLocalDevice instance;
   bf12c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bf12e:	4b17      	ldr	r3, [pc, #92]	; (bf18c <__tcf_0+0x60>)
   bf130:	681c      	ldr	r4, [r3, #0]
   bf132:	b354      	cbz	r4, bf18a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bf134:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf138:	f7f5 f998 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   bf13c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf140:	f7f5 f994 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   bf144:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf148:	f7f5 f990 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   bf14c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf150:	f7f5 f98c 	bl	b446c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bf154:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bf158:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf15c:	42ae      	cmp	r6, r5
   bf15e:	d004      	beq.n	bf16a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bf160:	1d28      	adds	r0, r5, #4
   bf162:	f7f6 fe29 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf166:	3508      	adds	r5, #8
   bf168:	e7f8      	b.n	bf15c <__tcf_0+0x30>
    ::free(ptr);
   bf16a:	69a0      	ldr	r0, [r4, #24]
   bf16c:	f7ff f800 	bl	be170 <free>
    ~BleLocalDeviceImpl() = default;
   bf170:	f104 000c 	add.w	r0, r4, #12
   bf174:	f7ff ffbe 	bl	bf0f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf178:	4620      	mov	r0, r4
   bf17a:	f7ff ffa9 	bl	bf0d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bf17e:	4620      	mov	r0, r4
   bf180:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bf182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bf186:	f7f4 bf8c 	b.w	b40a2 <_ZdlPvj>
   bf18a:	bd70      	pop	{r4, r5, r6, pc}
   bf18c:	2003e644 	.word	0x2003e644

000bf190 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bf190:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bf192:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf194:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bf198:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bf19c:	6803      	ldr	r3, [r0, #0]
   bf19e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf1a0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf1a2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bf1a4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bf1a6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bf1a8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bf1aa:	f7f6 fe05 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bf1ae:	b002      	add	sp, #8
   bf1b0:	bd10      	pop	{r4, pc}

000bf1b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bf1b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf1b4:	b510      	push	{r4, lr}
      if (_M_empty())
   bf1b6:	b90a      	cbnz	r2, bf1bc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bf1b8:	f002 ff26 	bl	c2008 <_ZSt25__throw_bad_function_callv>
    }
   bf1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf1c0:	68c3      	ldr	r3, [r0, #12]
   bf1c2:	4718      	bx	r3

000bf1c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bf1c4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bf1c6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bf1c8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bf1ca:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bf1cc:	dd03      	ble.n	bf1d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bf1ce:	f7fe ffd7 	bl	be180 <realloc>
            if (!d) {
   bf1d2:	b918      	cbnz	r0, bf1dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bf1d4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bf1d6:	f7fe ffcb 	bl	be170 <free>
        T* d = nullptr;
   bf1da:	2000      	movs	r0, #0
        data_ = d;
   bf1dc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bf1de:	60a5      	str	r5, [r4, #8]
        return true;
   bf1e0:	2001      	movs	r0, #1
   bf1e2:	e7f7      	b.n	bf1d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bf1e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bf1e4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bf1e6:	6883      	ldr	r3, [r0, #8]
   bf1e8:	428b      	cmp	r3, r1
   bf1ea:	da02      	bge.n	bf1f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bf1ec:	f7ff ffea 	bl	bf1c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bf1f0:	bd08      	pop	{r3, pc}
    return true;
   bf1f2:	2001      	movs	r0, #1
   bf1f4:	e7fc      	b.n	bf1f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bf1f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf1fa:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf1fc:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf1fe:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf200:	4419      	add	r1, r3
   bf202:	6883      	ldr	r3, [r0, #8]
   bf204:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf206:	4604      	mov	r4, r0
   bf208:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf20a:	dc12      	bgt.n	bf232 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bf20c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf20e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf210:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf212:	1bd2      	subs	r2, r2, r7
   bf214:	4631      	mov	r1, r6
   bf216:	1970      	adds	r0, r6, r5
   bf218:	f005 f904 	bl	c4424 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bf21c:	462a      	mov	r2, r5
   bf21e:	4641      	mov	r1, r8
   bf220:	4630      	mov	r0, r6
   bf222:	f005 f8f1 	bl	c4408 <memcpy>
    size_ += n;
   bf226:	6863      	ldr	r3, [r4, #4]
   bf228:	442b      	add	r3, r5
   bf22a:	6063      	str	r3, [r4, #4]
    return true;
   bf22c:	2001      	movs	r0, #1
}
   bf22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf232:	f7ff ffc7 	bl	bf1c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf236:	2800      	cmp	r0, #0
   bf238:	d1e8      	bne.n	bf20c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bf23a:	e7f8      	b.n	bf22e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bf23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf23e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf240:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bf244:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf246:	4604      	mov	r4, r0
   bf248:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf24a:	da0b      	bge.n	bf264 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bf24c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf24e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf250:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf252:	1b52      	subs	r2, r2, r5
   bf254:	1c48      	adds	r0, r1, #1
   bf256:	f005 f8e5 	bl	c4424 <memmove>
    new(p) T(std::move(value));
   bf25a:	557e      	strb	r6, [r7, r5]
    ++size_;
   bf25c:	6863      	ldr	r3, [r4, #4]
   bf25e:	3301      	adds	r3, #1
   bf260:	6063      	str	r3, [r4, #4]
}
   bf262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf264:	3101      	adds	r1, #1
   bf266:	f7ff ffad 	bl	bf1c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf26a:	2800      	cmp	r0, #0
   bf26c:	d1ee      	bne.n	bf24c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bf26e:	e7f8      	b.n	bf262 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bf270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf270:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bf272:	6841      	ldr	r1, [r0, #4]
   bf274:	f7ff bfe2 	b.w	bf23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bf278 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf27c:	4604      	mov	r4, r0
   bf27e:	461d      	mov	r5, r3
   bf280:	460f      	mov	r7, r1
   bf282:	ab01      	add	r3, sp, #4
   bf284:	4690      	mov	r8, r2
   bf286:	460a      	mov	r2, r1
   bf288:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf28c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bf290:	f7ff fb18 	bl	be8c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bf294:	1cae      	adds	r6, r5, #2
   bf296:	6863      	ldr	r3, [r4, #4]
   bf298:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bf29a:	f1b9 0f00 	cmp.w	r9, #0
   bf29e:	d126      	bne.n	bf2ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bf2a0:	b328      	cbz	r0, bf2ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf2a2:	4433      	add	r3, r6
   bf2a4:	1a1b      	subs	r3, r3, r0
   bf2a6:	2bff      	cmp	r3, #255	; 0xff
   bf2a8:	d809      	bhi.n	bf2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bf2aa:	9901      	ldr	r1, [sp, #4]
   bf2ac:	4620      	mov	r0, r4
   bf2ae:	f7ff fe7a 	bl	befa6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf2b2:	6861      	ldr	r1, [r4, #4]
   bf2b4:	4620      	mov	r0, r4
   bf2b6:	4431      	add	r1, r6
   bf2b8:	f7ff ff94 	bl	bf1e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf2bc:	b918      	cbnz	r0, bf2c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bf2be:	6860      	ldr	r0, [r4, #4]
}
   bf2c0:	b003      	add	sp, #12
   bf2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bf2c6:	1c6a      	adds	r2, r5, #1
   bf2c8:	9901      	ldr	r1, [sp, #4]
   bf2ca:	b2d2      	uxtb	r2, r2
   bf2cc:	4620      	mov	r0, r4
   bf2ce:	f7ff ffb5 	bl	bf23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bf2d2:	9901      	ldr	r1, [sp, #4]
   bf2d4:	463a      	mov	r2, r7
   bf2d6:	3101      	adds	r1, #1
   bf2d8:	4620      	mov	r0, r4
   bf2da:	f7ff ffaf 	bl	bf23c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bf2de:	9901      	ldr	r1, [sp, #4]
   bf2e0:	462b      	mov	r3, r5
   bf2e2:	4642      	mov	r2, r8
   bf2e4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bf2e6:	4620      	mov	r0, r4
   bf2e8:	f7ff ff85 	bl	bf1f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bf2ec:	e7e7      	b.n	bf2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf2ee:	18f1      	adds	r1, r6, r3
   bf2f0:	29ff      	cmp	r1, #255	; 0xff
   bf2f2:	d8e4      	bhi.n	bf2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf2f4:	4620      	mov	r0, r4
   bf2f6:	f7ff ff75 	bl	bf1e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf2fa:	2800      	cmp	r0, #0
   bf2fc:	d0df      	beq.n	bf2be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bf2fe:	1c69      	adds	r1, r5, #1
   bf300:	b2c9      	uxtb	r1, r1
   bf302:	4620      	mov	r0, r4
   bf304:	f7ff ffb4 	bl	bf270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bf308:	4639      	mov	r1, r7
   bf30a:	4620      	mov	r0, r4
   bf30c:	f7ff ffb0 	bl	bf270 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bf310:	6861      	ldr	r1, [r4, #4]
   bf312:	462b      	mov	r3, r5
   bf314:	4642      	mov	r2, r8
   bf316:	e7e6      	b.n	bf2e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bf318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf318:	b430      	push	{r4, r5}
   bf31a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bf31e:	b11a      	cbz	r2, bf328 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bf320:	9502      	str	r5, [sp, #8]
}
   bf322:	bc30      	pop	{r4, r5}
   bf324:	f7ff bfa8 	b.w	bf278 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bf328:	6840      	ldr	r0, [r0, #4]
}
   bf32a:	bc30      	pop	{r4, r5}
   bf32c:	4770      	bx	lr

000bf32e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bf32e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bf330:	2300      	movs	r3, #0
   bf332:	e9c0 3300 	strd	r3, r3, [r0]
   bf336:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf338:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf33a:	9300      	str	r3, [sp, #0]
   bf33c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf33e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf342:	4619      	mov	r1, r3
   bf344:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bf348:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf34a:	f7ff ffe5 	bl	bf318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf34e:	4620      	mov	r0, r4
   bf350:	b004      	add	sp, #16
   bf352:	bd10      	pop	{r4, pc}

000bf354 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bf354:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bf356:	9300      	str	r3, [sp, #0]
   bf358:	4613      	mov	r3, r2
   bf35a:	460a      	mov	r2, r1
   bf35c:	21ff      	movs	r1, #255	; 0xff
   bf35e:	f7ff ffdb 	bl	bf318 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf362:	b003      	add	sp, #12
   bf364:	f85d fb04 	ldr.w	pc, [sp], #4

000bf368 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf368:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf36c:	4604      	mov	r4, r0
   bf36e:	460d      	mov	r5, r1
   bf370:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf372:	d914      	bls.n	bf39e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf374:	4290      	cmp	r0, r2
   bf376:	d213      	bcs.n	bf3a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf378:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf37c:	1a75      	subs	r5, r6, r1
   bf37e:	f1a1 0708 	sub.w	r7, r1, #8
   bf382:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf384:	42b7      	cmp	r7, r6
   bf386:	d018      	beq.n	bf3ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf388:	b11c      	cbz	r4, bf392 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf38a:	4631      	mov	r1, r6
   bf38c:	4620      	mov	r0, r4
   bf38e:	f7ff fe8e 	bl	bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bf392:	1d30      	adds	r0, r6, #4
   bf394:	f7f6 fd10 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf398:	3e08      	subs	r6, #8
   bf39a:	3c08      	subs	r4, #8
   bf39c:	e7f2      	b.n	bf384 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf39e:	d00c      	beq.n	bf3ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf3a0:	42b5      	cmp	r5, r6
   bf3a2:	d00a      	beq.n	bf3ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf3a4:	b11c      	cbz	r4, bf3ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf3a6:	4629      	mov	r1, r5
   bf3a8:	4620      	mov	r0, r4
   bf3aa:	f7ff fe80 	bl	bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf3ae:	1d28      	adds	r0, r5, #4
   bf3b0:	f7f6 fd02 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf3b4:	3508      	adds	r5, #8
   bf3b6:	3408      	adds	r4, #8
   bf3b8:	e7f2      	b.n	bf3a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf3bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bf3be:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf3c0:	6846      	ldr	r6, [r0, #4]
   bf3c2:	4668      	mov	r0, sp
   bf3c4:	f7ff fe73 	bl	bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf3c8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bf3cc:	429f      	cmp	r7, r3
   bf3ce:	db12      	blt.n	bf3f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bf3d0:	3701      	adds	r7, #1
        if (n > 0) {
   bf3d2:	2f00      	cmp	r7, #0
   bf3d4:	dd29      	ble.n	bf42a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bf3d6:	00f8      	lsls	r0, r7, #3
   bf3d8:	f7fe fec2 	bl	be160 <malloc>
            if (!d) {
   bf3dc:	4605      	mov	r5, r0
   bf3de:	b1f0      	cbz	r0, bf41e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bf3e0:	e9d4 1200 	ldrd	r1, r2, [r4]
   bf3e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf3e8:	f7ff ffbe 	bl	bf368 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf3ec:	6820      	ldr	r0, [r4, #0]
   bf3ee:	f7fe febf 	bl	be170 <free>
        data_ = d;
   bf3f2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bf3f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bf3f6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf3f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf3fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bf3fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf402:	4631      	mov	r1, r6
   bf404:	f106 0008 	add.w	r0, r6, #8
   bf408:	f7ff ffae 	bl	bf368 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf40c:	b11e      	cbz	r6, bf416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bf40e:	4669      	mov	r1, sp
   bf410:	4630      	mov	r0, r6
   bf412:	f7ff fe4c 	bl	bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bf416:	6863      	ldr	r3, [r4, #4]
   bf418:	3301      	adds	r3, #1
   bf41a:	6063      	str	r3, [r4, #4]
    return true;
   bf41c:	2501      	movs	r5, #1
   bf41e:	a801      	add	r0, sp, #4
   bf420:	f7f6 fcca 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf424:	4628      	mov	r0, r5
   bf426:	b003      	add	sp, #12
   bf428:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bf42a:	2500      	movs	r5, #0
   bf42c:	e7de      	b.n	bf3ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bf42e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bf430:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf434:	4605      	mov	r5, r0
   bf436:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bf438:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bf43c:	42a6      	cmp	r6, r4
   bf43e:	d005      	beq.n	bf44c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bf440:	4639      	mov	r1, r7
   bf442:	4620      	mov	r0, r4
   bf444:	f7ff fce1 	bl	bee0a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bf448:	b108      	cbz	r0, bf44e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bf44a:	b914      	cbnz	r4, bf452 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bf44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bf44e:	3408      	adds	r4, #8
   bf450:	e7f4      	b.n	bf43c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bf452:	1d20      	adds	r0, r4, #4
   bf454:	f7f6 fcb0 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bf458:	e9d5 3200 	ldrd	r3, r2, [r5]
   bf45c:	f104 0108 	add.w	r1, r4, #8
   bf460:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf464:	4620      	mov	r0, r4
   bf466:	f7ff ff7f 	bl	bf368 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bf46a:	686b      	ldr	r3, [r5, #4]
   bf46c:	3b01      	subs	r3, #1
   bf46e:	606b      	str	r3, [r5, #4]
    return true;
   bf470:	e7ec      	b.n	bf44c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bf474 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf478:	4605      	mov	r5, r0
   bf47a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bf47c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf47e:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf480:	f7ff faa0 	bl	be9c4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf484:	682e      	ldr	r6, [r5, #0]
   bf486:	1ef3      	subs	r3, r6, #3
   bf488:	2b0d      	cmp	r3, #13
   bf48a:	d83c      	bhi.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf48c:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf490:	0053000e 	.word	0x0053000e
   bf494:	00d1003b 	.word	0x00d1003b
   bf498:	003b003b 	.word	0x003b003b
   bf49c:	003b003b 	.word	0x003b003b
   bf4a0:	009b003b 	.word	0x009b003b
   bf4a4:	009b009b 	.word	0x009b009b
   bf4a8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf4ac:	a804      	add	r0, sp, #16
   bf4ae:	f7ff fc77 	bl	beda0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf4b2:	9b04      	ldr	r3, [sp, #16]
   bf4b4:	89aa      	ldrh	r2, [r5, #12]
   bf4b6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf4b8:	6869      	ldr	r1, [r5, #4]
   bf4ba:	9804      	ldr	r0, [sp, #16]
   bf4bc:	3108      	adds	r1, #8
   bf4be:	3002      	adds	r0, #2
   bf4c0:	f7ff fa9a 	bl	be9f8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf4c4:	a904      	add	r1, sp, #16
   bf4c6:	a806      	add	r0, sp, #24
   bf4c8:	f7ff fdf1 	bl	bf0ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf4cc:	a906      	add	r1, sp, #24
   bf4ce:	f104 0018 	add.w	r0, r4, #24
   bf4d2:	f7ff ff73 	bl	bf3bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf4d6:	4605      	mov	r5, r0
   bf4d8:	a807      	add	r0, sp, #28
   bf4da:	f7f6 fc6d 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf4de:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf4e0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf4e2:	b9b5      	cbnz	r5, bf512 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf4e4:	4b5d      	ldr	r3, [pc, #372]	; (bf65c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf4e6:	495e      	ldr	r1, [pc, #376]	; (bf660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf4e8:	9300      	str	r3, [sp, #0]
   bf4ea:	2032      	movs	r0, #50	; 0x32
   bf4ec:	462b      	mov	r3, r5
   bf4ee:	aa06      	add	r2, sp, #24
   bf4f0:	9507      	str	r5, [sp, #28]
   bf4f2:	f7fe fd2f 	bl	bdf54 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf4f6:	9b04      	ldr	r3, [sp, #16]
   bf4f8:	4629      	mov	r1, r5
   bf4fa:	8818      	ldrh	r0, [r3, #0]
   bf4fc:	f7fe fb00 	bl	bdb00 <hal_ble_gap_disconnect>
   bf500:	a805      	add	r0, sp, #20
   bf502:	f7f6 fc59 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf506:	a803      	add	r0, sp, #12
   bf508:	f7ff fa6a 	bl	be9e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf50c:	b00e      	add	sp, #56	; 0x38
   bf50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf512:	4a54      	ldr	r2, [pc, #336]	; (bf664 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf514:	9200      	str	r2, [sp, #0]
   bf516:	2300      	movs	r3, #0
   bf518:	4951      	ldr	r1, [pc, #324]	; (bf660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf51a:	9307      	str	r3, [sp, #28]
   bf51c:	aa06      	add	r2, sp, #24
   bf51e:	2001      	movs	r0, #1
   bf520:	f7fe fd18 	bl	bdf54 <log_message>
                if (impl->connectedCallback_) {
   bf524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf526:	2b00      	cmp	r3, #0
   bf528:	d0ea      	beq.n	bf500 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf52a:	a904      	add	r1, sp, #16
   bf52c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf530:	f7ff fe3f 	bl	bf1b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf534:	e7e4      	b.n	bf500 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf536:	89a9      	ldrh	r1, [r5, #12]
   bf538:	4620      	mov	r0, r4
   bf53a:	f7ff fb9b 	bl	bec74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf53e:	4606      	mov	r6, r0
   bf540:	2800      	cmp	r0, #0
   bf542:	d0e0      	beq.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf544:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf546:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf54a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf54e:	8029      	strh	r1, [r5, #0]
   bf550:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf554:	429a      	cmp	r2, r3
   bf556:	d003      	beq.n	bf560 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf558:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf55c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf55e:	e7f9      	b.n	bf554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf560:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf564:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf568:	45b8      	cmp	r8, r7
   bf56a:	d004      	beq.n	bf576 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf56c:	1d38      	adds	r0, r7, #4
   bf56e:	f7f6 fc23 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf572:	3708      	adds	r7, #8
   bf574:	e7f8      	b.n	bf568 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf576:	2300      	movs	r3, #0
   bf578:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf57a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf57e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf582:	45b8      	cmp	r8, r7
   bf584:	d004      	beq.n	bf590 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf586:	1d38      	adds	r0, r7, #4
   bf588:	f7f6 fc16 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf58c:	3708      	adds	r7, #8
   bf58e:	e7f8      	b.n	bf582 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf590:	2300      	movs	r3, #0
   bf592:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf594:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf598:	b123      	cbz	r3, bf5a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf59a:	4631      	mov	r1, r6
   bf59c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf5a0:	f7ff fe07 	bl	bf1b2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf5a4:	2300      	movs	r3, #0
   bf5a6:	2220      	movs	r2, #32
   bf5a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf5ac:	4a2e      	ldr	r2, [pc, #184]	; (bf668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf5ae:	9200      	str	r2, [sp, #0]
   bf5b0:	492b      	ldr	r1, [pc, #172]	; (bf660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf5b2:	aa06      	add	r2, sp, #24
   bf5b4:	2001      	movs	r0, #1
   bf5b6:	f7fe fccd 	bl	bdf54 <log_message>
                    impl->peers_.removeOne(*peer);
   bf5ba:	4631      	mov	r1, r6
   bf5bc:	f104 0018 	add.w	r0, r4, #24
   bf5c0:	f7ff ff35 	bl	bf42e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf5c4:	e79f      	b.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf5c6:	89a9      	ldrh	r1, [r5, #12]
   bf5c8:	4620      	mov	r0, r4
   bf5ca:	f7ff fb53 	bl	bec74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf5ce:	2800      	cmp	r0, #0
   bf5d0:	d099      	beq.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf5d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf5d4:	2b00      	cmp	r3, #0
   bf5d6:	d096      	beq.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf5d8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf5da:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf5e0:	d001      	beq.n	bf5e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf5e2:	2e10      	cmp	r6, #16
   bf5e4:	d117      	bne.n	bf616 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf5e6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf5e8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf5ea:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf5ec:	2506      	movs	r5, #6
                        };
   bf5ee:	f88d 3015 	strb.w	r3, [sp, #21]
   bf5f2:	9104      	str	r1, [sp, #16]
   bf5f4:	f88d 2014 	strb.w	r2, [sp, #20]
   bf5f8:	9006      	str	r0, [sp, #24]
   bf5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf5fe:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf600:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf604:	9508      	str	r5, [sp, #32]
   bf606:	e883 0003 	stmia.w	r3, {r0, r1}
   bf60a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf60c:	a906      	add	r1, sp, #24
   bf60e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf612:	4798      	blx	r3
   bf614:	e777      	b.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf616:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf618:	bf01      	itttt	eq
   bf61a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf61c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf61e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf622:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf624:	bf0f      	iteee	eq
   bf626:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf62a:	461a      	movne	r2, r3
   bf62c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf62e:	461d      	movne	r5, r3
   bf630:	e7dd      	b.n	bf5ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf632:	89a9      	ldrh	r1, [r5, #12]
   bf634:	4620      	mov	r0, r4
   bf636:	f7ff fb1d 	bl	bec74 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf63a:	4601      	mov	r1, r0
   bf63c:	2800      	cmp	r0, #0
   bf63e:	f43f af62 	beq.w	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf644:	2b00      	cmp	r3, #0
   bf646:	f43f af5e 	beq.w	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf64a:	686b      	ldr	r3, [r5, #4]
   bf64c:	9306      	str	r3, [sp, #24]
   bf64e:	aa06      	add	r2, sp, #24
   bf650:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf652:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf656:	4798      	blx	r3
   bf658:	e755      	b.n	bf506 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf65a:	bf00      	nop
   bf65c:	000c7bcc 	.word	0x000c7bcc
   bf660:	000c7b4b 	.word	0x000c7b4b
   bf664:	000c7bf2 	.word	0x000c7bf2
   bf668:	000c7c0f 	.word	0x000c7c0f

000bf66c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf66c:	b513      	push	{r0, r1, r4, lr}
   bf66e:	460b      	mov	r3, r1
   bf670:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf672:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf676:	466c      	mov	r4, sp
   bf678:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf67c:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf680:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf684:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf688:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf68c:	b002      	add	sp, #8
   bf68e:	bd10      	pop	{r4, pc}

000bf690 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf690:	b538      	push	{r3, r4, r5, lr}
   bf692:	4605      	mov	r5, r0
   bf694:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf696:	f7ff ffe9 	bl	bf66c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf69a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf69c:	68a2      	ldr	r2, [r4, #8]
   bf69e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf6a0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf6a2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf6a4:	68e2      	ldr	r2, [r4, #12]
   bf6a6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf6a8:	60e3      	str	r3, [r4, #12]
      }
   bf6aa:	bd38      	pop	{r3, r4, r5, pc}

000bf6ac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf6ac:	b570      	push	{r4, r5, r6, lr}
   bf6ae:	4604      	mov	r4, r0
   bf6b0:	b08c      	sub	sp, #48	; 0x30
   bf6b2:	460e      	mov	r6, r1
   bf6b4:	9201      	str	r2, [sp, #4]
   bf6b6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf6b8:	f7ff fabc 	bl	bec34 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf6bc:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf6be:	9901      	ldr	r1, [sp, #4]
   bf6c0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf6c4:	f7ff f853 	bl	be76e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf6c8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf6cc:	b1cd      	cbz	r5, bf702 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf6ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf6d0:	9502      	str	r5, [sp, #8]
   bf6d2:	a902      	add	r1, sp, #8
   bf6d4:	a804      	add	r0, sp, #16
   bf6d6:	9303      	str	r3, [sp, #12]
   bf6d8:	f7ff fcb2 	bl	bf040 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf6dc:	2300      	movs	r3, #0
	__x.swap(*this);
   bf6de:	a908      	add	r1, sp, #32
   bf6e0:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf6e2:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf6e4:	f7ff ffd4 	bl	bf690 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf6e8:	4631      	mov	r1, r6
   bf6ea:	a808      	add	r0, sp, #32
   bf6ec:	f7ff ffd0 	bl	bf690 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf6f0:	a808      	add	r0, sp, #32
   bf6f2:	f7f4 febb 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   bf6f6:	a804      	add	r0, sp, #16
   bf6f8:	f7f4 feb8 	bl	b446c <_ZNSt14_Function_baseD1Ev>
    }
   bf6fc:	4620      	mov	r0, r4
   bf6fe:	b00c      	add	sp, #48	; 0x30
   bf700:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf702:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf704:	e7ea      	b.n	bf6dc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf708 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf70c:	b087      	sub	sp, #28
   bf70e:	461d      	mov	r5, r3
   bf710:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf714:	4680      	mov	r8, r0
   bf716:	468b      	mov	fp, r1
   bf718:	4692      	mov	sl, r2
   bf71a:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf71c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf71e:	2200      	movs	r2, #0
   bf720:	2068      	movs	r0, #104	; 0x68
   bf722:	9102      	str	r1, [sp, #8]
   bf724:	9204      	str	r2, [sp, #16]
   bf726:	f7f4 fcb6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf72a:	1e06      	subs	r6, r0, #0
   bf72c:	f106 090c 	add.w	r9, r6, #12
   bf730:	d018      	beq.n	bf764 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf732:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf734:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf736:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf73a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf73c:	4a15      	ldr	r2, [pc, #84]	; (bf794 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf73e:	f847 2b20 	str.w	r2, [r7], #32
   bf742:	9b03      	ldr	r3, [sp, #12]
   bf744:	9100      	str	r1, [sp, #0]
   bf746:	465a      	mov	r2, fp
   bf748:	4651      	mov	r1, sl
   bf74a:	4648      	mov	r0, r9
   bf74c:	f7ff ffae 	bl	bf6ac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf752:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf754:	682b      	ldr	r3, [r5, #0]
   bf756:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf75a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf75e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf760:	6823      	ldr	r3, [r4, #0]
   bf762:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf764:	a904      	add	r1, sp, #16
   bf766:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf768:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf76c:	f7ff fd10 	bl	bf190 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf770:	a805      	add	r0, sp, #20
   bf772:	f7f6 fb21 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf776:	f8d8 3000 	ldr.w	r3, [r8]
   bf77a:	b93b      	cbnz	r3, bf78c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf77c:	4a06      	ldr	r2, [pc, #24]	; (bf798 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf77e:	4907      	ldr	r1, [pc, #28]	; (bf79c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf780:	200a      	movs	r0, #10
}
   bf782:	b007      	add	sp, #28
   bf784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf788:	f7fe bbdc 	b.w	bdf44 <panic_>
}
   bf78c:	b007      	add	sp, #28
   bf78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf792:	bf00      	nop
   bf794:	000c7c88 	.word	0x000c7c88
   bf798:	000bda61 	.word	0x000bda61
   bf79c:	000c7b34 	.word	0x000c7b34

000bf7a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf7a0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf7a4:	4604      	mov	r4, r0
   bf7a6:	460d      	mov	r5, r1
   bf7a8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf7aa:	d914      	bls.n	bf7d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf7ac:	4290      	cmp	r0, r2
   bf7ae:	d213      	bcs.n	bf7d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf7b0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf7b4:	1a75      	subs	r5, r6, r1
   bf7b6:	f1a1 0708 	sub.w	r7, r1, #8
   bf7ba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf7bc:	42b7      	cmp	r7, r6
   bf7be:	d018      	beq.n	bf7f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf7c0:	b11c      	cbz	r4, bf7ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf7c2:	4631      	mov	r1, r6
   bf7c4:	4620      	mov	r0, r4
   bf7c6:	f7ff fc68 	bl	bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf7ca:	1d30      	adds	r0, r6, #4
   bf7cc:	f7f6 faf4 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf7d0:	3e08      	subs	r6, #8
   bf7d2:	3c08      	subs	r4, #8
   bf7d4:	e7f2      	b.n	bf7bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf7d6:	d00c      	beq.n	bf7f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf7d8:	42b5      	cmp	r5, r6
   bf7da:	d00a      	beq.n	bf7f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf7dc:	b11c      	cbz	r4, bf7e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf7de:	4629      	mov	r1, r5
   bf7e0:	4620      	mov	r0, r4
   bf7e2:	f7ff fc5a 	bl	bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf7e6:	1d28      	adds	r0, r5, #4
   bf7e8:	f7f6 fae6 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf7ec:	3508      	adds	r5, #8
   bf7ee:	3408      	adds	r4, #8
   bf7f0:	e7f2      	b.n	bf7d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf7f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf7f4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf7f6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf7f8:	4605      	mov	r5, r0
        if (n > 0) {
   bf7fa:	dd11      	ble.n	bf820 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf7fc:	00f0      	lsls	r0, r6, #3
   bf7fe:	f7fe fcaf 	bl	be160 <malloc>
            if (!d) {
   bf802:	4604      	mov	r4, r0
   bf804:	b158      	cbz	r0, bf81e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf806:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf80a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf80e:	f7ff ffc7 	bl	bf7a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf812:	6828      	ldr	r0, [r5, #0]
   bf814:	f7fe fcac 	bl	be170 <free>
        data_ = d;
   bf818:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf81a:	60ae      	str	r6, [r5, #8]
        return true;
   bf81c:	2001      	movs	r0, #1
    }
   bf81e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf820:	2400      	movs	r4, #0
   bf822:	e7f6      	b.n	bf812 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf824 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf824:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf826:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf828:	6845      	ldr	r5, [r0, #4]
   bf82a:	4668      	mov	r0, sp
   bf82c:	f7ff fc35 	bl	bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf830:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf834:	4299      	cmp	r1, r3
   bf836:	da10      	bge.n	bf85a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf838:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf83a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf83c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf840:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf844:	4629      	mov	r1, r5
   bf846:	f105 0008 	add.w	r0, r5, #8
   bf84a:	f7ff ffa9 	bl	bf7a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf84e:	b98d      	cbnz	r5, bf874 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf850:	6863      	ldr	r3, [r4, #4]
   bf852:	3301      	adds	r3, #1
   bf854:	6063      	str	r3, [r4, #4]
    return true;
   bf856:	2601      	movs	r6, #1
   bf858:	e006      	b.n	bf868 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf85a:	3101      	adds	r1, #1
   bf85c:	4620      	mov	r0, r4
   bf85e:	f7ff ffc9 	bl	bf7f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf862:	4606      	mov	r6, r0
   bf864:	2800      	cmp	r0, #0
   bf866:	d1e7      	bne.n	bf838 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf868:	a801      	add	r0, sp, #4
   bf86a:	f7f6 faa5 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf86e:	4630      	mov	r0, r6
   bf870:	b002      	add	sp, #8
   bf872:	bd70      	pop	{r4, r5, r6, pc}
   bf874:	4669      	mov	r1, sp
   bf876:	4628      	mov	r0, r5
   bf878:	f7ff fc0f 	bl	bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf87c:	e7e8      	b.n	bf850 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf87e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf87e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf882:	4604      	mov	r4, r0
   bf884:	460d      	mov	r5, r1
   bf886:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf888:	d914      	bls.n	bf8b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf88a:	4290      	cmp	r0, r2
   bf88c:	d213      	bcs.n	bf8b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf88e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf892:	1a75      	subs	r5, r6, r1
   bf894:	f1a1 0708 	sub.w	r7, r1, #8
   bf898:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf89a:	42b7      	cmp	r7, r6
   bf89c:	d018      	beq.n	bf8d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf89e:	b11c      	cbz	r4, bf8a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf8a0:	4631      	mov	r1, r6
   bf8a2:	4620      	mov	r0, r4
   bf8a4:	f7ff fbeb 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf8a8:	1d30      	adds	r0, r6, #4
   bf8aa:	f7f6 fa85 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf8ae:	3e08      	subs	r6, #8
   bf8b0:	3c08      	subs	r4, #8
   bf8b2:	e7f2      	b.n	bf89a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf8b4:	d00c      	beq.n	bf8d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf8b6:	42b5      	cmp	r5, r6
   bf8b8:	d00a      	beq.n	bf8d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf8ba:	b11c      	cbz	r4, bf8c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf8bc:	4629      	mov	r1, r5
   bf8be:	4620      	mov	r0, r4
   bf8c0:	f7ff fbdd 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf8c4:	1d28      	adds	r0, r5, #4
   bf8c6:	f7f6 fa77 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf8ca:	3508      	adds	r5, #8
   bf8cc:	3408      	adds	r4, #8
   bf8ce:	e7f2      	b.n	bf8b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf8d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf8d2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf8d4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf8d6:	4605      	mov	r5, r0
        if (n > 0) {
   bf8d8:	dd11      	ble.n	bf8fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf8da:	00f0      	lsls	r0, r6, #3
   bf8dc:	f7fe fc40 	bl	be160 <malloc>
            if (!d) {
   bf8e0:	4604      	mov	r4, r0
   bf8e2:	b158      	cbz	r0, bf8fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf8e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf8e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf8ec:	f7ff ffc7 	bl	bf87e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf8f0:	6828      	ldr	r0, [r5, #0]
   bf8f2:	f7fe fc3d 	bl	be170 <free>
        data_ = d;
   bf8f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf8f8:	60ae      	str	r6, [r5, #8]
        return true;
   bf8fa:	2001      	movs	r0, #1
    }
   bf8fc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf8fe:	2400      	movs	r4, #0
   bf900:	e7f6      	b.n	bf8f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf902 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf902:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf904:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf906:	6845      	ldr	r5, [r0, #4]
   bf908:	4668      	mov	r0, sp
   bf90a:	f7ff fbb8 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf90e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf912:	4299      	cmp	r1, r3
   bf914:	da10      	bge.n	bf938 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf916:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf918:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf91a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf91e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf922:	4629      	mov	r1, r5
   bf924:	f105 0008 	add.w	r0, r5, #8
   bf928:	f7ff ffa9 	bl	bf87e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf92c:	b98d      	cbnz	r5, bf952 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf92e:	6863      	ldr	r3, [r4, #4]
   bf930:	3301      	adds	r3, #1
   bf932:	6063      	str	r3, [r4, #4]
    return true;
   bf934:	2601      	movs	r6, #1
   bf936:	e006      	b.n	bf946 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf938:	3101      	adds	r1, #1
   bf93a:	4620      	mov	r0, r4
   bf93c:	f7ff ffc9 	bl	bf8d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf940:	4606      	mov	r6, r0
   bf942:	2800      	cmp	r0, #0
   bf944:	d1e7      	bne.n	bf916 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf946:	a801      	add	r0, sp, #4
   bf948:	f7f6 fa36 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf94c:	4630      	mov	r0, r6
   bf94e:	b002      	add	sp, #8
   bf950:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf952:	4669      	mov	r1, sp
   bf954:	4628      	mov	r0, r5
   bf956:	f7ff fb92 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf95a:	e7e8      	b.n	bf92e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf95c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf960:	4617      	mov	r7, r2
   bf962:	b0a1      	sub	sp, #132	; 0x84
   bf964:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf966:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf968:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf96a:	f7ff f82b 	bl	be9c4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf96e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf970:	7923      	ldrb	r3, [r4, #4]
   bf972:	b953      	cbnz	r3, bf98a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf974:	4639      	mov	r1, r7
   bf976:	4640      	mov	r0, r8
   bf978:	f7ff fb81 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf97c:	a80a      	add	r0, sp, #40	; 0x28
   bf97e:	f7ff f82f 	bl	be9e0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf982:	4640      	mov	r0, r8
   bf984:	b021      	add	sp, #132	; 0x84
   bf986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf98a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf98c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf990:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf994:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf996:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf99a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf99e:	9b03      	ldr	r3, [sp, #12]
   bf9a0:	429d      	cmp	r5, r3
   bf9a2:	d021      	beq.n	bf9e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf9a4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf9a8:	4658      	mov	r0, fp
   bf9aa:	f109 0114 	add.w	r1, r9, #20
   bf9ae:	f7ff f8b6 	bl	beb1e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf9b2:	b1b8      	cbz	r0, bf9e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf9b4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf9b8:	4650      	mov	r0, sl
   bf9ba:	f7ff f8b0 	bl	beb1e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf9be:	b188      	cbz	r0, bf9e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf9c0:	6823      	ldr	r3, [r4, #0]
   bf9c2:	f8d9 2000 	ldr.w	r2, [r9]
   bf9c6:	4053      	eors	r3, r2
   bf9c8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf9cc:	d10a      	bne.n	bf9e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf9ce:	2220      	movs	r2, #32
   bf9d0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf9d4:	4a5e      	ldr	r2, [pc, #376]	; (bfb50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf9d6:	9200      	str	r2, [sp, #0]
   bf9d8:	aa15      	add	r2, sp, #84	; 0x54
   bf9da:	495e      	ldr	r1, [pc, #376]	; (bfb54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf9dc:	2032      	movs	r0, #50	; 0x32
   bf9de:	f7fe fab9 	bl	bdf54 <log_message>
   bf9e2:	e7c7      	b.n	bf974 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf9e4:	3508      	adds	r5, #8
   bf9e6:	e7da      	b.n	bf99e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf9e8:	4650      	mov	r0, sl
   bf9ea:	f7ff f869 	bl	beac0 <_ZNK8particle7BleUuid7isValidEv>
   bf9ee:	b960      	cbnz	r0, bfa0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf9f0:	4959      	ldr	r1, [pc, #356]	; (bfb58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf9f2:	2201      	movs	r2, #1
   bf9f4:	a815      	add	r0, sp, #84	; 0x54
   bf9f6:	ad15      	add	r5, sp, #84	; 0x54
   bf9f8:	f7ff f83a 	bl	bea70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf9fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf9fe:	46d4      	mov	ip, sl
   bfa00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfa04:	682b      	ldr	r3, [r5, #0]
   bfa06:	f8cc 3000 	str.w	r3, [ip]
   bfa0a:	6833      	ldr	r3, [r6, #0]
   bfa0c:	e9d3 5300 	ldrd	r5, r3, [r3]
   bfa10:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bfa14:	455d      	cmp	r5, fp
   bfa16:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bfa18:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bfa1a:	d06e      	beq.n	bfafa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bfa1c:	f855 0b08 	ldr.w	r0, [r5], #8
   bfa20:	f7ff f87d 	bl	beb1e <_ZNK8particle7BleUuideqERKS0_>
   bfa24:	2800      	cmp	r0, #0
   bfa26:	d0f5      	beq.n	bfa14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bfa28:	f104 0a14 	add.w	sl, r4, #20
   bfa2c:	4650      	mov	r0, sl
   bfa2e:	f7ff f847 	bl	beac0 <_ZNK8particle7BleUuid7isValidEv>
   bfa32:	b988      	cbnz	r0, bfa58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bfa34:	4b49      	ldr	r3, [pc, #292]	; (bfb5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfa36:	4948      	ldr	r1, [pc, #288]	; (bfb58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bfa38:	881a      	ldrh	r2, [r3, #0]
   bfa3a:	3201      	adds	r2, #1
   bfa3c:	b292      	uxth	r2, r2
   bfa3e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfa40:	a815      	add	r0, sp, #84	; 0x54
   bfa42:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bfa44:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfa46:	f7ff f832 	bl	beaae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bfa4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bfa4c:	46d4      	mov	ip, sl
   bfa4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfa52:	682b      	ldr	r3, [r5, #0]
   bfa54:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bfa58:	4b41      	ldr	r3, [pc, #260]	; (bfb60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bfa5a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bfa5c:	2228      	movs	r2, #40	; 0x28
   bfa5e:	2100      	movs	r1, #0
   bfa60:	a816      	add	r0, sp, #88	; 0x58
   bfa62:	f004 fcf9 	bl	c4458 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bfa66:	4651      	mov	r1, sl
   bfa68:	a804      	add	r0, sp, #16
   bfa6a:	f7ff f83b 	bl	beae4 <_ZN8particle7BleUuid7halUUIDEv>
   bfa6e:	ab04      	add	r3, sp, #16
   bfa70:	aa18      	add	r2, sp, #96	; 0x60
   bfa72:	f10d 0c20 	add.w	ip, sp, #32
   bfa76:	6818      	ldr	r0, [r3, #0]
   bfa78:	6859      	ldr	r1, [r3, #4]
   bfa7a:	4615      	mov	r5, r2
   bfa7c:	c503      	stmia	r5!, {r0, r1}
   bfa7e:	3308      	adds	r3, #8
   bfa80:	4563      	cmp	r3, ip
   bfa82:	462a      	mov	r2, r5
   bfa84:	d1f7      	bne.n	bfa76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bfa86:	6818      	ldr	r0, [r3, #0]
   bfa88:	6028      	str	r0, [r5, #0]
    return value_;
   bfa8a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bfa8c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bfa90:	f8d9 3000 	ldr.w	r3, [r9]
   bfa94:	8a9b      	ldrh	r3, [r3, #20]
   bfa96:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bfa9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bfa9c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bfa9e:	4b31      	ldr	r3, [pc, #196]	; (bfb64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfaa0:	2200      	movs	r2, #0
   bfaa2:	1da1      	adds	r1, r4, #6
   bfaa4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bfaa6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfaaa:	f7fe f85b 	bl	bdb64 <hal_ble_gatt_server_add_characteristic>
   bfaae:	2800      	cmp	r0, #0
   bfab0:	f47f af60 	bne.w	bf974 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bfab4:	2301      	movs	r3, #1
   bfab6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bfab8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bfaba:	4639      	mov	r1, r7
        return characteristics_;
   bfabc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bfabe:	a80d      	add	r0, sp, #52	; 0x34
   bfac0:	f7ff fadd 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfac4:	4620      	mov	r0, r4
   bfac6:	a90d      	add	r1, sp, #52	; 0x34
   bfac8:	f7ff ff1b 	bl	bf902 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bfacc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bface:	a80e      	add	r0, sp, #56	; 0x38
   bfad0:	f7f6 f972 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfad4:	2c00      	cmp	r4, #0
   bfad6:	f47f af4d 	bne.w	bf974 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bfada:	2320      	movs	r3, #32
   bfadc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bfae0:	4b21      	ldr	r3, [pc, #132]	; (bfb68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bfae2:	9300      	str	r3, [sp, #0]
   bfae4:	aa0d      	add	r2, sp, #52	; 0x34
   bfae6:	4623      	mov	r3, r4
   bfae8:	e777      	b.n	bf9da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bfaea:	4639      	mov	r1, r7
   bfaec:	4640      	mov	r0, r8
   bfaee:	f7ff fac6 	bl	bf07e <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfaf2:	a80c      	add	r0, sp, #48	; 0x30
   bfaf4:	f7f6 f960 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfaf8:	e740      	b.n	bf97c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bfafa:	a80b      	add	r0, sp, #44	; 0x2c
   bfafc:	f7ff f92c 	bl	bed58 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bfb00:	4651      	mov	r1, sl
   bfb02:	a815      	add	r0, sp, #84	; 0x54
   bfb04:	f7fe ffee 	bl	beae4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bfb08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bfb0a:	2300      	movs	r3, #0
   bfb0c:	3214      	adds	r2, #20
   bfb0e:	a915      	add	r1, sp, #84	; 0x54
   bfb10:	2001      	movs	r0, #1
   bfb12:	f7fd ffff 	bl	bdb14 <hal_ble_gatt_server_add_service>
   bfb16:	2800      	cmp	r0, #0
   bfb18:	d1e7      	bne.n	bfaea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bfb1a:	6835      	ldr	r5, [r6, #0]
   bfb1c:	a90b      	add	r1, sp, #44	; 0x2c
   bfb1e:	a80d      	add	r0, sp, #52	; 0x34
   bfb20:	f7ff fabb 	bl	bf09a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bfb24:	4628      	mov	r0, r5
   bfb26:	a90d      	add	r1, sp, #52	; 0x34
   bfb28:	f7ff fe7c 	bl	bf824 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bfb2c:	4605      	mov	r5, r0
   bfb2e:	a80e      	add	r0, sp, #56	; 0x38
   bfb30:	f7f6 f942 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb34:	2d00      	cmp	r5, #0
   bfb36:	d0d8      	beq.n	bfaea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bfb38:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bfb3a:	6853      	ldr	r3, [r2, #4]
   bfb3c:	6812      	ldr	r2, [r2, #0]
   bfb3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bfb42:	3b01      	subs	r3, #1
   bfb44:	a80c      	add	r0, sp, #48	; 0x30
   bfb46:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bfb4a:	f7f6 f935 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb4e:	e76b      	b.n	bfa28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bfb50:	000c7c2e 	.word	0x000c7c2e
   bfb54:	000c7b4b 	.word	0x000c7b4b
   bfb58:	000c7cf2 	.word	0x000c7cf2
   bfb5c:	2003e63c 	.word	0x2003e63c
   bfb60:	002c0003 	.word	0x002c0003
   bfb64:	000beef1 	.word	0x000beef1
   bfb68:	000c7c59 	.word	0x000c7c59

000bfb6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bfb6c:	4802      	ldr	r0, [pc, #8]	; (bfb78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bfb6e:	2300      	movs	r3, #0
   bfb70:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bfb72:	f7fe b84f 	b.w	bdc14 <os_mutex_recursive_create>
   bfb76:	bf00      	nop
   bfb78:	2003e640 	.word	0x2003e640

000bfb7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bfb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfb7e:	4606      	mov	r6, r0
   bfb80:	460d      	mov	r5, r1
  size_t n = 0;
   bfb82:	188f      	adds	r7, r1, r2
   bfb84:	2400      	movs	r4, #0
  while (size--) {
   bfb86:	42bd      	cmp	r5, r7
   bfb88:	d00c      	beq.n	bfba4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bfb8a:	6833      	ldr	r3, [r6, #0]
   bfb8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   bfb90:	689b      	ldr	r3, [r3, #8]
   bfb92:	4630      	mov	r0, r6
   bfb94:	4798      	blx	r3
     if (chunk>=0)
   bfb96:	1e03      	subs	r3, r0, #0
   bfb98:	db01      	blt.n	bfb9e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bfb9a:	441c      	add	r4, r3
  while (size--) {
   bfb9c:	e7f3      	b.n	bfb86 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bfb9e:	2c00      	cmp	r4, #0
   bfba0:	bf08      	it	eq
   bfba2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bfba4:	4620      	mov	r0, r4
   bfba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfba8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bfba8:	b508      	push	{r3, lr}
  return write(str);
   bfbaa:	f7f7 fe4d 	bl	b7848 <_ZN5Print5writeEPKc>
}
   bfbae:	bd08      	pop	{r3, pc}

000bfbb0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bfbb0:	6803      	ldr	r3, [r0, #0]
   bfbb2:	689b      	ldr	r3, [r3, #8]
   bfbb4:	4718      	bx	r3

000bfbb6 <_ZN5Print5printEPK19__FlashStringHelper>:
   bfbb6:	b508      	push	{r3, lr}
   bfbb8:	f7f7 fe46 	bl	b7848 <_ZN5Print5writeEPKc>
   bfbbc:	bd08      	pop	{r3, pc}

000bfbbe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bfbbe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bfbc0:	210d      	movs	r1, #13
{
   bfbc2:	4605      	mov	r5, r0
  size_t n = print('\r');
   bfbc4:	f7ff fff4 	bl	bfbb0 <_ZN5Print5printEc>
  n += print('\n');
   bfbc8:	210a      	movs	r1, #10
  size_t n = print('\r');
   bfbca:	4604      	mov	r4, r0
  n += print('\n');
   bfbcc:	4628      	mov	r0, r5
   bfbce:	f7ff ffef 	bl	bfbb0 <_ZN5Print5printEc>
  return n;
}
   bfbd2:	4420      	add	r0, r4
   bfbd4:	bd38      	pop	{r3, r4, r5, pc}

000bfbd6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bfbd6:	b538      	push	{r3, r4, r5, lr}
   bfbd8:	4605      	mov	r5, r0
  return write(str);
   bfbda:	f7f7 fe35 	bl	b7848 <_ZN5Print5writeEPKc>
   bfbde:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bfbe0:	4628      	mov	r0, r5
   bfbe2:	f7ff ffec 	bl	bfbbe <_ZN5Print7printlnEv>
  return n;
}
   bfbe6:	4420      	add	r0, r4
   bfbe8:	bd38      	pop	{r3, r4, r5, pc}

000bfbea <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   bfbea:	f7ff bff4 	b.w	bfbd6 <_ZN5Print7printlnEPKc>

000bfbee <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bfbee:	b530      	push	{r4, r5, lr}
   bfbf0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bfbf2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bfbf4:	2a01      	cmp	r2, #1
  *str = '\0';
   bfbf6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bfbfa:	bf98      	it	ls
   bfbfc:	220a      	movls	r2, #10
   bfbfe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bfc00:	460d      	mov	r5, r1
   bfc02:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bfc06:	fb01 5312 	mls	r3, r1, r2, r5
   bfc0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfc0e:	2b09      	cmp	r3, #9
   bfc10:	bf94      	ite	ls
   bfc12:	3330      	addls	r3, #48	; 0x30
   bfc14:	3337      	addhi	r3, #55	; 0x37
   bfc16:	b2db      	uxtb	r3, r3
  } while(n);
   bfc18:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfc1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bfc1e:	d9ef      	bls.n	bfc00 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bfc20:	4621      	mov	r1, r4
   bfc22:	f7f7 fe11 	bl	b7848 <_ZN5Print5writeEPKc>
}
   bfc26:	b00b      	add	sp, #44	; 0x2c
   bfc28:	bd30      	pop	{r4, r5, pc}

000bfc2a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bfc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfc2e:	b086      	sub	sp, #24
   bfc30:	af00      	add	r7, sp, #0
   bfc32:	4605      	mov	r5, r0
   bfc34:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bfc36:	1d38      	adds	r0, r7, #4
   bfc38:	2114      	movs	r1, #20
{
   bfc3a:	4614      	mov	r4, r2
    va_copy(args2, args);
   bfc3c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bfc3e:	f7fe fabf 	bl	be1c0 <vsnprintf>

    if (n<bufsize)
   bfc42:	2813      	cmp	r0, #19
   bfc44:	d80e      	bhi.n	bfc64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bfc46:	1d39      	adds	r1, r7, #4
   bfc48:	4628      	mov	r0, r5
   bfc4a:	f7f7 fdfd 	bl	b7848 <_ZN5Print5writeEPKc>
   bfc4e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bfc50:	b11e      	cbz	r6, bfc5a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bfc52:	4628      	mov	r0, r5
   bfc54:	f7ff ffb3 	bl	bfbbe <_ZN5Print7printlnEv>
   bfc58:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bfc5a:	4620      	mov	r0, r4
   bfc5c:	3718      	adds	r7, #24
   bfc5e:	46bd      	mov	sp, r7
   bfc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bfc64:	f100 0308 	add.w	r3, r0, #8
   bfc68:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bfc6c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bfc6e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bfc72:	4622      	mov	r2, r4
   bfc74:	1c41      	adds	r1, r0, #1
   bfc76:	683b      	ldr	r3, [r7, #0]
   bfc78:	4668      	mov	r0, sp
   bfc7a:	f7fe faa1 	bl	be1c0 <vsnprintf>
  return write(str);
   bfc7e:	4669      	mov	r1, sp
   bfc80:	4628      	mov	r0, r5
   bfc82:	f7f7 fde1 	bl	b7848 <_ZN5Print5writeEPKc>
   bfc86:	4604      	mov	r4, r0
   bfc88:	46c5      	mov	sp, r8
   bfc8a:	e7e1      	b.n	bfc50 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bfc8c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bfc8c:	b510      	push	{r4, lr}
   bfc8e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bfc90:	f7fd fef6 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bfc94:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bfc96:	6823      	ldr	r3, [r4, #0]
   bfc98:	4620      	mov	r0, r4
   bfc9a:	695b      	ldr	r3, [r3, #20]
   bfc9c:	4798      	blx	r3
    if (c >= 0) return c;
   bfc9e:	2800      	cmp	r0, #0
   bfca0:	da08      	bge.n	bfcb4 <_ZN6Stream9timedReadEv+0x28>
   bfca2:	f7fd feed 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bfca6:	68e3      	ldr	r3, [r4, #12]
   bfca8:	1ac0      	subs	r0, r0, r3
   bfcaa:	68a3      	ldr	r3, [r4, #8]
   bfcac:	4298      	cmp	r0, r3
   bfcae:	d3f2      	bcc.n	bfc96 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bfcb0:	f04f 30ff 	mov.w	r0, #4294967295
}
   bfcb4:	bd10      	pop	{r4, pc}

000bfcb6 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   bfcb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfcba:	4607      	mov	r7, r0
   bfcbc:	4688      	mov	r8, r1
   bfcbe:	4616      	mov	r6, r2
  if (length < 1) return 0;
   bfcc0:	461d      	mov	r5, r3
   bfcc2:	b173      	cbz	r3, bfce2 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   bfcc4:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   bfcc6:	4638      	mov	r0, r7
   bfcc8:	f7ff ffe0 	bl	bfc8c <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   bfccc:	1e03      	subs	r3, r0, #0
   bfcce:	db05      	blt.n	bfcdc <_ZN6Stream14readBytesUntilEcPcj+0x26>
   bfcd0:	4543      	cmp	r3, r8
   bfcd2:	d003      	beq.n	bfcdc <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   bfcd4:	5533      	strb	r3, [r6, r4]
    index++;
   bfcd6:	3401      	adds	r4, #1
  while (index < length) {
   bfcd8:	42a5      	cmp	r5, r4
   bfcda:	d1f4      	bne.n	bfcc6 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   bfcdc:	4620      	mov	r0, r4
   bfcde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   bfce2:	461c      	mov	r4, r3
   bfce4:	e7fa      	b.n	bfcdc <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000bfce8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bfce8:	b570      	push	{r4, r5, r6, lr}
   bfcea:	460d      	mov	r5, r1
  String ret;
   bfcec:	4909      	ldr	r1, [pc, #36]	; (bfd14 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bfcee:	4604      	mov	r4, r0
   bfcf0:	4616      	mov	r6, r2
  String ret;
   bfcf2:	f7fe fce6 	bl	be6c2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bfcf6:	4628      	mov	r0, r5
   bfcf8:	f7ff ffc8 	bl	bfc8c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bfcfc:	2800      	cmp	r0, #0
   bfcfe:	db06      	blt.n	bfd0e <_ZN6Stream15readStringUntilEc+0x26>
   bfd00:	4286      	cmp	r6, r0
   bfd02:	d004      	beq.n	bfd0e <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   bfd04:	b2c1      	uxtb	r1, r0
   bfd06:	4620      	mov	r0, r4
   bfd08:	f7fe fd5a 	bl	be7c0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bfd0c:	e7f3      	b.n	bfcf6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bfd0e:	4620      	mov	r0, r4
   bfd10:	bd70      	pop	{r4, r5, r6, pc}
   bfd12:	bf00      	nop
   bfd14:	000c7d6c 	.word	0x000c7d6c

000bfd18 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bfd18:	6880      	ldr	r0, [r0, #8]
   bfd1a:	6803      	ldr	r3, [r0, #0]
   bfd1c:	68db      	ldr	r3, [r3, #12]
   bfd1e:	4718      	bx	r3

000bfd20 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bfd20:	4770      	bx	lr

000bfd22 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bfd22:	4608      	mov	r0, r1
   bfd24:	b111      	cbz	r1, bfd2c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bfd26:	680b      	ldr	r3, [r1, #0]
   bfd28:	685b      	ldr	r3, [r3, #4]
   bfd2a:	4718      	bx	r3
}
   bfd2c:	4770      	bx	lr

000bfd2e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bfd2e:	4770      	bx	lr

000bfd30 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfd30:	4770      	bx	lr

000bfd32 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bfd32:	4770      	bx	lr

000bfd34 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bfd34:	4770      	bx	lr

000bfd36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bfd36:	b538      	push	{r3, r4, r5, lr}
   bfd38:	4604      	mov	r4, r0
   bfd3a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bfd3c:	6800      	ldr	r0, [r0, #0]
   bfd3e:	212e      	movs	r1, #46	; 0x2e
   bfd40:	f004 fbdc 	bl	c44fc <strchrnul>
    size = s - category;
   bfd44:	6823      	ldr	r3, [r4, #0]
   bfd46:	1ac3      	subs	r3, r0, r3
   bfd48:	602b      	str	r3, [r5, #0]
    if (size) {
   bfd4a:	b123      	cbz	r3, bfd56 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bfd4c:	7803      	ldrb	r3, [r0, #0]
   bfd4e:	b103      	cbz	r3, bfd52 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bfd50:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   bfd52:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bfd54:	6020      	str	r0, [r4, #0]
}
   bfd56:	4618      	mov	r0, r3
   bfd58:	bd38      	pop	{r3, r4, r5, pc}

000bfd5a <_ZN5spark16JSONStreamWriterD0Ev>:
   bfd5a:	b510      	push	{r4, lr}
   bfd5c:	210c      	movs	r1, #12
   bfd5e:	4604      	mov	r4, r0
   bfd60:	f7f4 f99f 	bl	b40a2 <_ZdlPvj>
   bfd64:	4620      	mov	r0, r4
   bfd66:	bd10      	pop	{r4, pc}

000bfd68 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bfd68:	b510      	push	{r4, lr}
   bfd6a:	2104      	movs	r1, #4
   bfd6c:	4604      	mov	r4, r0
   bfd6e:	f7f4 f998 	bl	b40a2 <_ZdlPvj>
   bfd72:	4620      	mov	r0, r4
   bfd74:	bd10      	pop	{r4, pc}

000bfd76 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfd76:	b510      	push	{r4, lr}
   bfd78:	2104      	movs	r1, #4
   bfd7a:	4604      	mov	r4, r0
   bfd7c:	f7f4 f991 	bl	b40a2 <_ZdlPvj>
   bfd80:	4620      	mov	r0, r4
   bfd82:	bd10      	pop	{r4, pc}

000bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bfd84:	f7fd bf56 	b.w	bdc34 <os_mutex_recursive_lock>

000bfd88 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bfd88:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bfd8a:	f004 fbc1 	bl	c4510 <strcmp>
}
   bfd8e:	fab0 f080 	clz	r0, r0
   bfd92:	0940      	lsrs	r0, r0, #5
   bfd94:	bd08      	pop	{r3, pc}

000bfd96 <__tcf_1>:
   bfd96:	4770      	bx	lr

000bfd98 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bfd98:	b510      	push	{r4, lr}
   bfd9a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bfd9c:	f001 fc44 	bl	c1628 <_Z16_fetch_usbserialv>
   bfda0:	4284      	cmp	r4, r0
   bfda2:	d010      	beq.n	bfdc6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bfda4:	f002 f8cc 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   bfda8:	4284      	cmp	r4, r0
   bfdaa:	d105      	bne.n	bfdb8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bfdac:	f002 f8c8 	bl	c1f40 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bfdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bfdb4:	f001 bd07 	b.w	c17c6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bfdb8:	b12c      	cbz	r4, bfdc6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bfdba:	6823      	ldr	r3, [r4, #0]
   bfdbc:	4620      	mov	r0, r4
   bfdbe:	685b      	ldr	r3, [r3, #4]
}
   bfdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bfdc4:	4718      	bx	r3
   bfdc6:	bd10      	pop	{r4, pc}

000bfdc8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfdc8:	680b      	ldr	r3, [r1, #0]
   bfdca:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bfdcc:	684b      	ldr	r3, [r1, #4]
   bfdce:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bfdd0:	b113      	cbz	r3, bfdd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bfdd2:	685a      	ldr	r2, [r3, #4]
   bfdd4:	3201      	adds	r2, #1
   bfdd6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfdd8:	4770      	bx	lr

000bfdda <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bfdda:	b513      	push	{r0, r1, r4, lr}
   bfddc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bfdde:	4608      	mov	r0, r1
   bfde0:	9101      	str	r1, [sp, #4]
   bfde2:	f004 fbc4 	bl	c456e <strlen>
   bfde6:	9901      	ldr	r1, [sp, #4]
   bfde8:	4602      	mov	r2, r0
   bfdea:	4620      	mov	r0, r4
}
   bfdec:	b002      	add	sp, #8
   bfdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bfdf2:	f001 bffb 	b.w	c1dec <_ZN5spark10JSONWriter5valueEPKcj>

000bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bfdf6:	b513      	push	{r0, r1, r4, lr}
   bfdf8:	4604      	mov	r4, r0
    write(str, strlen(str));
   bfdfa:	4608      	mov	r0, r1
   bfdfc:	9101      	str	r1, [sp, #4]
   bfdfe:	f004 fbb6 	bl	c456e <strlen>
   bfe02:	6823      	ldr	r3, [r4, #0]
   bfe04:	9901      	ldr	r1, [sp, #4]
   bfe06:	68db      	ldr	r3, [r3, #12]
   bfe08:	4602      	mov	r2, r0
   bfe0a:	4620      	mov	r0, r4
}
   bfe0c:	b002      	add	sp, #8
   bfe0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bfe12:	4718      	bx	r3

000bfe14 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bfe14:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfe16:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bfe18:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfe1c:	68db      	ldr	r3, [r3, #12]
   bfe1e:	2201      	movs	r2, #1
   bfe20:	f10d 0107 	add.w	r1, sp, #7
   bfe24:	4798      	blx	r3
}
   bfe26:	b003      	add	sp, #12
   bfe28:	f85d fb04 	ldr.w	pc, [sp], #4

000bfe2c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfe2c:	b40e      	push	{r1, r2, r3}
   bfe2e:	b503      	push	{r0, r1, lr}
   bfe30:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bfe32:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfe34:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bfe38:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bfe3a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bfe3c:	f7ff fef5 	bl	bfc2a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bfe40:	b002      	add	sp, #8
   bfe42:	f85d eb04 	ldr.w	lr, [sp], #4
   bfe46:	b003      	add	sp, #12
   bfe48:	4770      	bx	lr

000bfe4a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfe4a:	680a      	ldr	r2, [r1, #0]
   bfe4c:	6002      	str	r2, [r0, #0]
   bfe4e:	684a      	ldr	r2, [r1, #4]
   bfe50:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfe52:	2200      	movs	r2, #0
   bfe54:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfe58:	b510      	push	{r4, lr}
   bfe5a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfe5c:	688c      	ldr	r4, [r1, #8]
   bfe5e:	6084      	str	r4, [r0, #8]
   bfe60:	68cc      	ldr	r4, [r1, #12]
   bfe62:	60c4      	str	r4, [r0, #12]
   bfe64:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfe66:	608a      	str	r2, [r1, #8]
   bfe68:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bfe6a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfe6c:	610a      	str	r2, [r1, #16]
   bfe6e:	bd10      	pop	{r4, pc}

000bfe70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfe70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bfe74:	e9d0 8400 	ldrd	r8, r4, [r0]
   bfe78:	f04f 0a14 	mov.w	sl, #20
   bfe7c:	9300      	str	r3, [sp, #0]
   bfe7e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bfe82:	4b18      	ldr	r3, [pc, #96]	; (bfee4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfe84:	10a4      	asrs	r4, r4, #2
   bfe86:	4617      	mov	r7, r2
   bfe88:	435c      	muls	r4, r3
   bfe8a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bfe8c:	2c00      	cmp	r4, #0
   bfe8e:	dd21      	ble.n	bfed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bfe90:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bfe92:	fb0a f006 	mul.w	r0, sl, r6
   bfe96:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bfe9a:	463a      	mov	r2, r7
   bfe9c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bfea0:	5828      	ldr	r0, [r5, r0]
   bfea2:	9101      	str	r1, [sp, #4]
   bfea4:	455f      	cmp	r7, fp
   bfea6:	bf28      	it	cs
   bfea8:	465a      	movcs	r2, fp
   bfeaa:	f004 fb7b 	bl	c45a4 <strncmp>
                if (cmp == 0) {
   bfeae:	2800      	cmp	r0, #0
   bfeb0:	9901      	ldr	r1, [sp, #4]
   bfeb2:	f04f 0301 	mov.w	r3, #1
   bfeb6:	d10b      	bne.n	bfed0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bfeb8:	455f      	cmp	r7, fp
   bfeba:	d103      	bne.n	bfec4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bfebc:	9a00      	ldr	r2, [sp, #0]
   bfebe:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfec0:	4634      	mov	r4, r6
   bfec2:	e7e3      	b.n	bfe8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bfec4:	d9fc      	bls.n	bfec0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bfec6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bfec8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bfecc:	3e01      	subs	r6, #1
   bfece:	e7f7      	b.n	bfec0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bfed0:	dbf9      	blt.n	bfec6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bfed2:	e7f5      	b.n	bfec0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bfed4:	eba5 0508 	sub.w	r5, r5, r8
}
   bfed8:	4802      	ldr	r0, [pc, #8]	; (bfee4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfeda:	10ad      	asrs	r5, r5, #2
   bfedc:	4368      	muls	r0, r5
   bfede:	b003      	add	sp, #12
   bfee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfee4:	cccccccd 	.word	0xcccccccd

000bfee8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bfeea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bfeec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfeee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bfef0:	b303      	cbz	r3, bff34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bfef2:	b1f9      	cbz	r1, bff34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bfef4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bfef6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bfefa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bfefc:	a903      	add	r1, sp, #12
   bfefe:	a801      	add	r0, sp, #4
   bff00:	f7ff ff19 	bl	bfd36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bff04:	4601      	mov	r1, r0
   bff06:	b1a8      	cbz	r0, bff34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bff08:	f10d 030b 	add.w	r3, sp, #11
   bff0c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bff0e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bff12:	4620      	mov	r0, r4
   bff14:	f7ff ffac 	bl	bfe70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bff18:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bff1c:	b153      	cbz	r3, bff34 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bff1e:	6823      	ldr	r3, [r4, #0]
   bff20:	2414      	movs	r4, #20
   bff22:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bff26:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bff28:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bff2c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bff2e:	bfa8      	it	ge
   bff30:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bff32:	e7e3      	b.n	bfefc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bff34:	4628      	mov	r0, r5
   bff36:	b004      	add	sp, #16
   bff38:	bd70      	pop	{r4, r5, r6, pc}
	...

000bff3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bff3c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bff3e:	4c09      	ldr	r4, [pc, #36]	; (bff64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bff40:	7823      	ldrb	r3, [r4, #0]
   bff42:	f3bf 8f5b 	dmb	ish
   bff46:	07db      	lsls	r3, r3, #31
   bff48:	d409      	bmi.n	bff5e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bff4a:	4620      	mov	r0, r4
   bff4c:	f7f4 f8b8 	bl	b40c0 <__cxa_guard_acquire>
   bff50:	b128      	cbz	r0, bff5e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bff52:	4620      	mov	r0, r4
   bff54:	f7f4 f8b9 	bl	b40ca <__cxa_guard_release>
   bff58:	4803      	ldr	r0, [pc, #12]	; (bff68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bff5a:	f004 fa2f 	bl	c43bc <atexit>
}
   bff5e:	4803      	ldr	r0, [pc, #12]	; (bff6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bff60:	bd10      	pop	{r4, pc}
   bff62:	bf00      	nop
   bff64:	2003e64c 	.word	0x2003e64c
   bff68:	000bfd2f 	.word	0x000bfd2f
   bff6c:	2003db58 	.word	0x2003db58

000bff70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bff70:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bff72:	4c09      	ldr	r4, [pc, #36]	; (bff98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bff74:	7823      	ldrb	r3, [r4, #0]
   bff76:	f3bf 8f5b 	dmb	ish
   bff7a:	07db      	lsls	r3, r3, #31
   bff7c:	d409      	bmi.n	bff92 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bff7e:	4620      	mov	r0, r4
   bff80:	f7f4 f89e 	bl	b40c0 <__cxa_guard_acquire>
   bff84:	b128      	cbz	r0, bff92 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bff86:	4620      	mov	r0, r4
   bff88:	f7f4 f89f 	bl	b40ca <__cxa_guard_release>
   bff8c:	4803      	ldr	r0, [pc, #12]	; (bff9c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bff8e:	f004 fa15 	bl	c43bc <atexit>
    return &factory;
}
   bff92:	4803      	ldr	r0, [pc, #12]	; (bffa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bff94:	bd10      	pop	{r4, pc}
   bff96:	bf00      	nop
   bff98:	2003e650 	.word	0x2003e650
   bff9c:	000bfd97 	.word	0x000bfd97
   bffa0:	2003db5c 	.word	0x2003db5c

000bffa4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bffa4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bffa6:	2500      	movs	r5, #0
   bffa8:	4604      	mov	r4, r0
   bffaa:	e9c0 5500 	strd	r5, r5, [r0]
   bffae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bffb2:	6085      	str	r5, [r0, #8]
   bffb4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bffb6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bffba:	f7fd fe2b 	bl	bdc14 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bffbe:	f7ff ffbd 	bl	bff3c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bffc2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bffc4:	f7ff ffd4 	bl	bff70 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bffc8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bffca:	6220      	str	r0, [r4, #32]
}
   bffcc:	4620      	mov	r0, r4
   bffce:	bd38      	pop	{r3, r4, r5, pc}

000bffd0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bffd0:	b510      	push	{r4, lr}
    static LogManager mgr;
   bffd2:	4c0a      	ldr	r4, [pc, #40]	; (bfffc <_ZN5spark10LogManager8instanceEv+0x2c>)
   bffd4:	7823      	ldrb	r3, [r4, #0]
   bffd6:	f3bf 8f5b 	dmb	ish
   bffda:	07db      	lsls	r3, r3, #31
   bffdc:	d40c      	bmi.n	bfff8 <_ZN5spark10LogManager8instanceEv+0x28>
   bffde:	4620      	mov	r0, r4
   bffe0:	f7f4 f86e 	bl	b40c0 <__cxa_guard_acquire>
   bffe4:	b140      	cbz	r0, bfff8 <_ZN5spark10LogManager8instanceEv+0x28>
   bffe6:	4806      	ldr	r0, [pc, #24]	; (c0000 <_ZN5spark10LogManager8instanceEv+0x30>)
   bffe8:	f7ff ffdc 	bl	bffa4 <_ZN5spark10LogManagerC1Ev>
   bffec:	4620      	mov	r0, r4
   bffee:	f7f4 f86c 	bl	b40ca <__cxa_guard_release>
   bfff2:	4804      	ldr	r0, [pc, #16]	; (c0004 <_ZN5spark10LogManager8instanceEv+0x34>)
   bfff4:	f004 f9e2 	bl	c43bc <atexit>
    return &mgr;
}
   bfff8:	4801      	ldr	r0, [pc, #4]	; (c0000 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfffa:	bd10      	pop	{r4, pc}
   bfffc:	2003e648 	.word	0x2003e648
   c0000:	2003e658 	.word	0x2003e658
   c0004:	000c0525 	.word	0x000c0525

000c0008 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c0008:	4a02      	ldr	r2, [pc, #8]	; (c0014 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c000a:	4903      	ldr	r1, [pc, #12]	; (c0018 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c000c:	4803      	ldr	r0, [pc, #12]	; (c001c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c000e:	2300      	movs	r3, #0
   c0010:	f7fd bfb0 	b.w	bdf74 <log_set_callbacks>
   c0014:	000c0309 	.word	0x000c0309
   c0018:	000c0295 	.word	0x000c0295
   c001c:	000c0215 	.word	0x000c0215

000c0020 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c0020:	2300      	movs	r3, #0
   c0022:	461a      	mov	r2, r3
   c0024:	4619      	mov	r1, r3
   c0026:	4618      	mov	r0, r3
   c0028:	f7fd bfa4 	b.w	bdf74 <log_set_callbacks>

000c002c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c002c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c002e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c0030:	4604      	mov	r4, r0
   c0032:	4668      	mov	r0, sp
   c0034:	f7ff fec8 	bl	bfdc8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c0038:	466a      	mov	r2, sp
   c003a:	4629      	mov	r1, r5
   c003c:	4620      	mov	r0, r4
   c003e:	f001 fdf5 	bl	c1c2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c0042:	a801      	add	r0, sp, #4
   c0044:	f7f5 feb8 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0048:	4620      	mov	r0, r4
   c004a:	b003      	add	sp, #12
   c004c:	bd30      	pop	{r4, r5, pc}

000c004e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c004e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0050:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0052:	4604      	mov	r4, r0
   c0054:	4668      	mov	r0, sp
   c0056:	f7ff feb7 	bl	bfdc8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c005a:	466a      	mov	r2, sp
   c005c:	4629      	mov	r1, r5
   c005e:	4620      	mov	r0, r4
   c0060:	f001 fdc0 	bl	c1be4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0064:	a801      	add	r0, sp, #4
   c0066:	f7f5 fea7 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c006a:	4620      	mov	r0, r4
   c006c:	b003      	add	sp, #12
   c006e:	bd30      	pop	{r4, r5, pc}

000c0070 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0070:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c0072:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0074:	4604      	mov	r4, r0
   c0076:	4668      	mov	r0, sp
   c0078:	f7ff fea6 	bl	bfdc8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c007c:	466a      	mov	r2, sp
   c007e:	4629      	mov	r1, r5
   c0080:	4620      	mov	r0, r4
   c0082:	f001 fd58 	bl	c1b36 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0086:	a801      	add	r0, sp, #4
   c0088:	f7f5 fe96 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c008c:	4620      	mov	r0, r4
   c008e:	b003      	add	sp, #12
   c0090:	bd30      	pop	{r4, r5, pc}
	...

000c0094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0094:	b570      	push	{r4, r5, r6, lr}
   c0096:	b08a      	sub	sp, #40	; 0x28
   c0098:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c009a:	4601      	mov	r1, r0
   c009c:	a804      	add	r0, sp, #16
   c009e:	f7ff ffc5 	bl	c002c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c00a2:	4e14      	ldr	r6, [pc, #80]	; (c00f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c00a4:	a804      	add	r0, sp, #16
   c00a6:	f001 fdd9 	bl	c1c5c <_ZN5spark18JSONObjectIterator4nextEv>
   c00aa:	b1e8      	cbz	r0, c00e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c00ac:	a904      	add	r1, sp, #16
   c00ae:	4668      	mov	r0, sp
   c00b0:	f7ff ffcd 	bl	c004e <_ZNK5spark18JSONObjectIterator4nameEv>
   c00b4:	9802      	ldr	r0, [sp, #8]
   c00b6:	4631      	mov	r1, r6
   c00b8:	f7ff fe66 	bl	bfd88 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c00bc:	4604      	mov	r4, r0
   c00be:	b110      	cbz	r0, c00c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c00c0:	1e2c      	subs	r4, r5, #0
   c00c2:	bf18      	it	ne
   c00c4:	2401      	movne	r4, #1
   c00c6:	a801      	add	r0, sp, #4
   c00c8:	f7f5 fe76 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c00cc:	2c00      	cmp	r4, #0
   c00ce:	d0e9      	beq.n	c00a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c00d0:	a904      	add	r1, sp, #16
   c00d2:	4668      	mov	r0, sp
   c00d4:	f7ff ffcc 	bl	c0070 <_ZNK5spark18JSONObjectIterator5valueEv>
   c00d8:	4668      	mov	r0, sp
   c00da:	f001 fd62 	bl	c1ba2 <_ZNK5spark9JSONValue5toIntEv>
   c00de:	6028      	str	r0, [r5, #0]
   c00e0:	a801      	add	r0, sp, #4
   c00e2:	f7f5 fe69 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c00e6:	e7dd      	b.n	c00a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c00e8:	a805      	add	r0, sp, #20
   c00ea:	f7f5 fe65 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c00ee:	b00a      	add	sp, #40	; 0x28
   c00f0:	bd70      	pop	{r4, r5, r6, pc}
   c00f2:	bf00      	nop
   c00f4:	000c7d12 	.word	0x000c7d12

000c00f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c00f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c00fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c00fc:	4620      	mov	r0, r4
   c00fe:	4913      	ldr	r1, [pc, #76]	; (c014c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c0100:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c0102:	f004 fa05 	bl	c4510 <strcmp>
   c0106:	b950      	cbnz	r0, c011e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c0108:	f001 fa8e 	bl	c1628 <_Z16_fetch_usbserialv>
   c010c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c0110:	f001 fa7a 	bl	c1608 <_ZN9USBSerial5beginEl>
}
   c0114:	b003      	add	sp, #12
   c0116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c011a:	f001 ba85 	b.w	c1628 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c011e:	490c      	ldr	r1, [pc, #48]	; (c0150 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c0120:	4620      	mov	r0, r4
   c0122:	f004 f9f5 	bl	c4510 <strcmp>
   c0126:	b978      	cbnz	r0, c0148 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c0128:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c012c:	a901      	add	r1, sp, #4
   c012e:	4628      	mov	r0, r5
        int baud = 9600;
   c0130:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c0132:	f7ff ffaf 	bl	c0094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c0136:	f001 ff03 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   c013a:	9901      	ldr	r1, [sp, #4]
   c013c:	f001 fb40 	bl	c17c0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c0140:	f001 fefe 	bl	c1f40 <_Z22__fetch_global_Serial1v>
}
   c0144:	b003      	add	sp, #12
   c0146:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c0148:	2000      	movs	r0, #0
   c014a:	e7fb      	b.n	c0144 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c014c:	000c7d17 	.word	0x000c7d17
   c0150:	000c7d1e 	.word	0x000c7d1e

000c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0154:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c0156:	e9d0 5300 	ldrd	r5, r3, [r0]
   c015a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c015c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c015e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0162:	42ae      	cmp	r6, r5
   c0164:	d005      	beq.n	c0172 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c0166:	f105 0008 	add.w	r0, r5, #8
   c016a:	f7ff fff3 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c016e:	3514      	adds	r5, #20
   c0170:	e7f7      	b.n	c0162 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c0172:	6820      	ldr	r0, [r4, #0]
   c0174:	f7fd fffc 	bl	be170 <free>
}
   c0178:	4620      	mov	r0, r4
   c017a:	bd70      	pop	{r4, r5, r6, pc}

000c017c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c017c:	b510      	push	{r4, lr}
   c017e:	4604      	mov	r4, r0
   c0180:	300c      	adds	r0, #12
   c0182:	f7ff ffe7 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0186:	4620      	mov	r0, r4
   c0188:	f7fe fefb 	bl	bef82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c018c:	4620      	mov	r0, r4
   c018e:	bd10      	pop	{r4, pc}

000c0190 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0190:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0192:	4b04      	ldr	r3, [pc, #16]	; (c01a4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0194:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c0196:	f840 3b04 	str.w	r3, [r0], #4
   c019a:	f7ff ffef 	bl	c017c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c019e:	4620      	mov	r0, r4
   c01a0:	bd10      	pop	{r4, pc}
   c01a2:	bf00      	nop
   c01a4:	000c6c3c 	.word	0x000c6c3c

000c01a8 <_ZN5spark16StreamLogHandlerD0Ev>:
   c01a8:	b510      	push	{r4, lr}
   c01aa:	4604      	mov	r4, r0
   c01ac:	f7ff fff0 	bl	c0190 <_ZN5spark16StreamLogHandlerD1Ev>
   c01b0:	4620      	mov	r0, r4
   c01b2:	2124      	movs	r1, #36	; 0x24
   c01b4:	f7f3 ff75 	bl	b40a2 <_ZdlPvj>
   c01b8:	4620      	mov	r0, r4
   c01ba:	bd10      	pop	{r4, pc}

000c01bc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c01bc:	b510      	push	{r4, lr}
   c01be:	4b03      	ldr	r3, [pc, #12]	; (c01cc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c01c0:	6003      	str	r3, [r0, #0]
   c01c2:	4604      	mov	r4, r0
   c01c4:	f7ff ffe4 	bl	c0190 <_ZN5spark16StreamLogHandlerD1Ev>
   c01c8:	4620      	mov	r0, r4
   c01ca:	bd10      	pop	{r4, pc}
   c01cc:	000c7dbc 	.word	0x000c7dbc

000c01d0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c01d0:	b510      	push	{r4, lr}
   c01d2:	4604      	mov	r4, r0
   c01d4:	f7ff fff2 	bl	c01bc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c01d8:	4620      	mov	r0, r4
   c01da:	2124      	movs	r1, #36	; 0x24
   c01dc:	f7f3 ff61 	bl	b40a2 <_ZdlPvj>
   c01e0:	4620      	mov	r0, r4
   c01e2:	bd10      	pop	{r4, pc}

000c01e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c01e4:	2200      	movs	r2, #0
   c01e6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c01ea:	b510      	push	{r4, lr}
        capacity_(0) {
   c01ec:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c01ee:	680c      	ldr	r4, [r1, #0]
   c01f0:	6004      	str	r4, [r0, #0]
   c01f2:	684c      	ldr	r4, [r1, #4]
   c01f4:	6044      	str	r4, [r0, #4]
   c01f6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c01f8:	600a      	str	r2, [r1, #0]
   c01fa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c01fc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c01fe:	608a      	str	r2, [r1, #8]
}
   c0200:	bd10      	pop	{r4, pc}

000c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c0202:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c0204:	6803      	ldr	r3, [r0, #0]
   c0206:	4604      	mov	r4, r0
   c0208:	6818      	ldr	r0, [r3, #0]
   c020a:	f7fd fd1b 	bl	bdc44 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c020e:	4620      	mov	r0, r4
   c0210:	bd10      	pop	{r4, pc}
	...

000c0214 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c0214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0218:	b087      	sub	sp, #28
   c021a:	4680      	mov	r8, r0
   c021c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c021e:	4b1c      	ldr	r3, [pc, #112]	; (c0290 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c0220:	685b      	ldr	r3, [r3, #4]
   c0222:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0226:	4689      	mov	r9, r1
   c0228:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c022a:	b96b      	cbnz	r3, c0248 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c022c:	f7ff fed0 	bl	bffd0 <_ZN5spark10LogManager8instanceEv>
   c0230:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0232:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c0236:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0238:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c023a:	f7ff fda3 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c023e:	7b23      	ldrb	r3, [r4, #12]
   c0240:	b12b      	cbz	r3, c024e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c0242:	a805      	add	r0, sp, #20
   c0244:	f7ff ffdd 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c0248:	b007      	add	sp, #28
   c024a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c024e:	2301      	movs	r3, #1
   c0250:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c0252:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c0256:	fa5f f989 	uxtb.w	r9, r9
   c025a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c025e:	45aa      	cmp	sl, r5
   c0260:	d012      	beq.n	c0288 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c0262:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c0266:	4631      	mov	r1, r6
   c0268:	1d38      	adds	r0, r7, #4
   c026a:	f7ff fe3d 	bl	bfee8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c026e:	4581      	cmp	r9, r0
   c0270:	d3f5      	bcc.n	c025e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c0272:	683b      	ldr	r3, [r7, #0]
   c0274:	9a03      	ldr	r2, [sp, #12]
   c0276:	9200      	str	r2, [sp, #0]
   c0278:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c027c:	464a      	mov	r2, r9
   c027e:	4633      	mov	r3, r6
   c0280:	4641      	mov	r1, r8
   c0282:	4638      	mov	r0, r7
   c0284:	47d8      	blx	fp
   c0286:	e7ea      	b.n	c025e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c0288:	2300      	movs	r3, #0
   c028a:	7323      	strb	r3, [r4, #12]
   c028c:	e7d9      	b.n	c0242 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c028e:	bf00      	nop
   c0290:	e000ed00 	.word	0xe000ed00

000c0294 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0298:	469b      	mov	fp, r3
   c029a:	4b1a      	ldr	r3, [pc, #104]	; (c0304 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c029c:	685b      	ldr	r3, [r3, #4]
   c029e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c02a2:	4680      	mov	r8, r0
   c02a4:	4689      	mov	r9, r1
   c02a6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c02a8:	b96b      	cbnz	r3, c02c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c02aa:	f7ff fe91 	bl	bffd0 <_ZN5spark10LogManager8instanceEv>
   c02ae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c02b0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c02b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c02b6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c02b8:	f7ff fd64 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c02bc:	7b23      	ldrb	r3, [r4, #12]
   c02be:	b12b      	cbz	r3, c02cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c02c0:	a801      	add	r0, sp, #4
   c02c2:	f7ff ff9e 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c02c6:	b003      	add	sp, #12
   c02c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c02cc:	2301      	movs	r3, #1
   c02ce:	7323      	strb	r3, [r4, #12]
   c02d0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c02d4:	b2f6      	uxtb	r6, r6
   c02d6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c02da:	4555      	cmp	r5, sl
   c02dc:	d00e      	beq.n	c02fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c02de:	f855 7b04 	ldr.w	r7, [r5], #4
   c02e2:	4659      	mov	r1, fp
   c02e4:	1d38      	adds	r0, r7, #4
   c02e6:	f7ff fdff 	bl	bfee8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c02ea:	4286      	cmp	r6, r0
   c02ec:	d3f5      	bcc.n	c02da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c02ee:	683b      	ldr	r3, [r7, #0]
   c02f0:	464a      	mov	r2, r9
   c02f2:	68db      	ldr	r3, [r3, #12]
   c02f4:	4641      	mov	r1, r8
   c02f6:	4638      	mov	r0, r7
   c02f8:	4798      	blx	r3
   c02fa:	e7ee      	b.n	c02da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c02fc:	2300      	movs	r3, #0
   c02fe:	7323      	strb	r3, [r4, #12]
   c0300:	e7de      	b.n	c02c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c0302:	bf00      	nop
   c0304:	e000ed00 	.word	0xe000ed00

000c0308 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c0308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c030c:	4b16      	ldr	r3, [pc, #88]	; (c0368 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c030e:	685b      	ldr	r3, [r3, #4]
   c0310:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0314:	4605      	mov	r5, r0
   c0316:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c0318:	bb1b      	cbnz	r3, c0362 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c031a:	f7ff fe59 	bl	bffd0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c031e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c0322:	4604      	mov	r4, r0
   c0324:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0326:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0328:	f7ff fd2c 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
   c032c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c0330:	2446      	movs	r4, #70	; 0x46
   c0332:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0336:	45b0      	cmp	r8, r6
   c0338:	d109      	bne.n	c034e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c033a:	a801      	add	r0, sp, #4
   c033c:	f7ff ff61 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0340:	42a5      	cmp	r5, r4
   c0342:	bfb4      	ite	lt
   c0344:	2000      	movlt	r0, #0
   c0346:	2001      	movge	r0, #1
}
   c0348:	b002      	add	sp, #8
   c034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c034e:	f856 0b04 	ldr.w	r0, [r6], #4
   c0352:	4639      	mov	r1, r7
   c0354:	3004      	adds	r0, #4
   c0356:	f7ff fdc7 	bl	bfee8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c035a:	4284      	cmp	r4, r0
   c035c:	bfa8      	it	ge
   c035e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0360:	e7e9      	b.n	c0336 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0362:	2000      	movs	r0, #0
   c0364:	e7f0      	b.n	c0348 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c0366:	bf00      	nop
   c0368:	e000ed00 	.word	0xe000ed00

000c036c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c036e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0372:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0374:	4604      	mov	r4, r0
   c0376:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0378:	db0d      	blt.n	c0396 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c037a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c037c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c037e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0380:	dd04      	ble.n	c038c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0382:	00b9      	lsls	r1, r7, #2
   c0384:	f7fd fefc 	bl	be180 <realloc>
            if (!d) {
   c0388:	b918      	cbnz	r0, c0392 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c038a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c038c:	f7fd fef0 	bl	be170 <free>
        T* d = nullptr;
   c0390:	2000      	movs	r0, #0
        data_ = d;
   c0392:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0394:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c0396:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0398:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c039a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c039e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c03a0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c03a4:	1d08      	adds	r0, r1, #4
   c03a6:	f004 f83d 	bl	c4424 <memmove>
    new(p) T(std::move(value));
   c03aa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c03ae:	6863      	ldr	r3, [r4, #4]
   c03b0:	3301      	adds	r3, #1
   c03b2:	6063      	str	r3, [r4, #4]
    return true;
   c03b4:	2001      	movs	r0, #1
   c03b6:	e7e8      	b.n	c038a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c03b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c03b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c03ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c03be:	4604      	mov	r4, r0
   c03c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c03c2:	9301      	str	r3, [sp, #4]
   c03c4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c03c6:	f7ff fcdd 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c03ca:	e9d4 3200 	ldrd	r3, r2, [r4]
   c03ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c03d2:	4293      	cmp	r3, r2
   c03d4:	4619      	mov	r1, r3
   c03d6:	d00b      	beq.n	c03f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c03d8:	6809      	ldr	r1, [r1, #0]
   c03da:	42a9      	cmp	r1, r5
   c03dc:	f103 0304 	add.w	r3, r3, #4
   c03e0:	d1f7      	bne.n	c03d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c03e2:	a801      	add	r0, sp, #4
   c03e4:	f7ff ff0d 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c03e8:	2500      	movs	r5, #0
}
   c03ea:	4628      	mov	r0, r5
   c03ec:	b003      	add	sp, #12
   c03ee:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c03f0:	4629      	mov	r1, r5
   c03f2:	4620      	mov	r0, r4
   c03f4:	f7ff ffba 	bl	c036c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c03f8:	4605      	mov	r5, r0
   c03fa:	2800      	cmp	r0, #0
   c03fc:	d0f1      	beq.n	c03e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c03fe:	6863      	ldr	r3, [r4, #4]
   c0400:	2b01      	cmp	r3, #1
   c0402:	d101      	bne.n	c0408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c0404:	f7ff fe00 	bl	c0008 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0408:	a801      	add	r0, sp, #4
   c040a:	f7ff fefa 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c040e:	e7ec      	b.n	c03ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0410 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0410:	b570      	push	{r4, r5, r6, lr}
   c0412:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0414:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0418:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c041a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c041e:	4282      	cmp	r2, r0
   c0420:	d00f      	beq.n	c0442 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0422:	4601      	mov	r1, r0
            if (*p == value) {
   c0424:	681d      	ldr	r5, [r3, #0]
   c0426:	f851 6b04 	ldr.w	r6, [r1], #4
   c042a:	42ae      	cmp	r6, r5
   c042c:	d107      	bne.n	c043e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c042e:	1a52      	subs	r2, r2, r1
   c0430:	f003 fff8 	bl	c4424 <memmove>
    --size_;
   c0434:	6863      	ldr	r3, [r4, #4]
   c0436:	3b01      	subs	r3, #1
   c0438:	6063      	str	r3, [r4, #4]
    return true;
   c043a:	2001      	movs	r0, #1
}
   c043c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c043e:	4608      	mov	r0, r1
   c0440:	e7ed      	b.n	c041e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0442:	2000      	movs	r0, #0
   c0444:	e7fa      	b.n	c043c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0446 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0446:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0448:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c044c:	4604      	mov	r4, r0
   c044e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0450:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0452:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0454:	f7ff fc96 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0458:	a901      	add	r1, sp, #4
   c045a:	4620      	mov	r0, r4
   c045c:	f7ff ffd8 	bl	c0410 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0460:	b118      	cbz	r0, c046a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0462:	6863      	ldr	r3, [r4, #4]
   c0464:	b90b      	cbnz	r3, c046a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0466:	f7ff fddb 	bl	c0020 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c046a:	a803      	add	r0, sp, #12
   c046c:	f7ff fec9 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0470:	b004      	add	sp, #16
   c0472:	bd10      	pop	{r4, pc}

000c0474 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0474:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0476:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c047a:	2318      	movs	r3, #24
   c047c:	4604      	mov	r4, r0
   c047e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0482:	42ae      	cmp	r6, r5
   c0484:	d015      	beq.n	c04b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0486:	f105 0110 	add.w	r1, r5, #16
   c048a:	4620      	mov	r0, r4
   c048c:	f7ff ffc0 	bl	c0410 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0490:	6863      	ldr	r3, [r4, #4]
   c0492:	b90b      	cbnz	r3, c0498 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0494:	f7ff fdc4 	bl	c0020 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0498:	69e0      	ldr	r0, [r4, #28]
   c049a:	6929      	ldr	r1, [r5, #16]
   c049c:	6803      	ldr	r3, [r0, #0]
   c049e:	68db      	ldr	r3, [r3, #12]
   c04a0:	4798      	blx	r3
        if (h.stream) {
   c04a2:	6969      	ldr	r1, [r5, #20]
   c04a4:	b119      	cbz	r1, c04ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c04a6:	6a20      	ldr	r0, [r4, #32]
   c04a8:	6803      	ldr	r3, [r0, #0]
   c04aa:	68db      	ldr	r3, [r3, #12]
   c04ac:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c04ae:	3518      	adds	r5, #24
   c04b0:	e7e7      	b.n	c0482 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c04b2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c04b6:	2618      	movs	r6, #24
   c04b8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c04bc:	42ae      	cmp	r6, r5
   c04be:	d004      	beq.n	c04ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c04c0:	4628      	mov	r0, r5
   c04c2:	f7fe f8b3 	bl	be62c <_ZN6StringD1Ev>
   c04c6:	3518      	adds	r5, #24
   c04c8:	e7f8      	b.n	c04bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c04ca:	2300      	movs	r3, #0
   c04cc:	6163      	str	r3, [r4, #20]
}
   c04ce:	bd70      	pop	{r4, r5, r6, pc}

000c04d0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c04d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c04d2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c04d4:	f7ff fda4 	bl	c0020 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c04d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c04dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c04de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c04e0:	f7ff fc50 	bl	bfd84 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c04e4:	4620      	mov	r0, r4
   c04e6:	f7ff ffc5 	bl	c0474 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c04ea:	a801      	add	r0, sp, #4
   c04ec:	f7ff fe89 	bl	c0202 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c04f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c04f2:	b108      	cbz	r0, c04f8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c04f4:	f7fd fb96 	bl	bdc24 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c04f8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c04fc:	2618      	movs	r6, #24
   c04fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0502:	42ae      	cmp	r6, r5
   c0504:	d004      	beq.n	c0510 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c0506:	4628      	mov	r0, r5
   c0508:	f7fe f890 	bl	be62c <_ZN6StringD1Ev>
   c050c:	3518      	adds	r5, #24
   c050e:	e7f8      	b.n	c0502 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0510:	6920      	ldr	r0, [r4, #16]
   c0512:	f7fd fe2d 	bl	be170 <free>
   c0516:	6820      	ldr	r0, [r4, #0]
   c0518:	f7fd fe2a 	bl	be170 <free>
}
   c051c:	4620      	mov	r0, r4
   c051e:	b002      	add	sp, #8
   c0520:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0524 <__tcf_2>:
    static LogManager mgr;
   c0524:	4801      	ldr	r0, [pc, #4]	; (c052c <__tcf_2+0x8>)
   c0526:	f7ff bfd3 	b.w	c04d0 <_ZN5spark10LogManagerD1Ev>
   c052a:	bf00      	nop
   c052c:	2003e658 	.word	0x2003e658

000c0530 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0530:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0534:	4604      	mov	r4, r0
   c0536:	460d      	mov	r5, r1
   c0538:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c053a:	d915      	bls.n	c0568 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c053c:	4290      	cmp	r0, r2
   c053e:	d214      	bcs.n	c056a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0540:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0544:	1a75      	subs	r5, r6, r1
   c0546:	f1a1 0714 	sub.w	r7, r1, #20
   c054a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c054c:	42b7      	cmp	r7, r6
   c054e:	d01a      	beq.n	c0586 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0550:	b11c      	cbz	r4, c055a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0552:	4631      	mov	r1, r6
   c0554:	4620      	mov	r0, r4
   c0556:	f7ff fc78 	bl	bfe4a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c055a:	f106 0008 	add.w	r0, r6, #8
   c055e:	f7ff fdf9 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0562:	3e14      	subs	r6, #20
   c0564:	3c14      	subs	r4, #20
   c0566:	e7f1      	b.n	c054c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0568:	d00d      	beq.n	c0586 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c056a:	42b5      	cmp	r5, r6
   c056c:	d00b      	beq.n	c0586 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c056e:	b11c      	cbz	r4, c0578 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0570:	4629      	mov	r1, r5
   c0572:	4620      	mov	r0, r4
   c0574:	f7ff fc69 	bl	bfe4a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0578:	f105 0008 	add.w	r0, r5, #8
   c057c:	f7ff fdea 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0580:	3514      	adds	r5, #20
   c0582:	3414      	adds	r4, #20
   c0584:	e7f1      	b.n	c056a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0588:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c058a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c058c:	4604      	mov	r4, r0
   c058e:	460d      	mov	r5, r1
   c0590:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0592:	d914      	bls.n	c05be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0594:	4290      	cmp	r0, r2
   c0596:	d213      	bcs.n	c05c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0598:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c059c:	1a75      	subs	r5, r6, r1
   c059e:	f1a1 0710 	sub.w	r7, r1, #16
   c05a2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c05a4:	42b7      	cmp	r7, r6
   c05a6:	d018      	beq.n	c05da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c05a8:	b11c      	cbz	r4, c05b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c05aa:	4631      	mov	r1, r6
   c05ac:	4620      	mov	r0, r4
   c05ae:	f7fe f8b9 	bl	be724 <_ZN6StringC1EOS_>
                end->~T();
   c05b2:	4630      	mov	r0, r6
   c05b4:	f7fe f83a 	bl	be62c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c05b8:	3e10      	subs	r6, #16
   c05ba:	3c10      	subs	r4, #16
   c05bc:	e7f2      	b.n	c05a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c05be:	d00c      	beq.n	c05da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c05c0:	42b5      	cmp	r5, r6
   c05c2:	d00a      	beq.n	c05da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c05c4:	b11c      	cbz	r4, c05ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c05c6:	4629      	mov	r1, r5
   c05c8:	4620      	mov	r0, r4
   c05ca:	f7fe f8ab 	bl	be724 <_ZN6StringC1EOS_>
                p->~T();
   c05ce:	4628      	mov	r0, r5
   c05d0:	f7fe f82c 	bl	be62c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c05d4:	3510      	adds	r5, #16
   c05d6:	3410      	adds	r4, #16
   c05d8:	e7f2      	b.n	c05c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c05da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c05dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c05dc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c05de:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c05e0:	4605      	mov	r5, r0
        if (n > 0) {
   c05e2:	dd11      	ble.n	c0608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c05e4:	0130      	lsls	r0, r6, #4
   c05e6:	f7fd fdbb 	bl	be160 <malloc>
            if (!d) {
   c05ea:	4604      	mov	r4, r0
   c05ec:	b158      	cbz	r0, c0606 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c05ee:	e9d5 1200 	ldrd	r1, r2, [r5]
   c05f2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c05f6:	f7ff ffc7 	bl	c0588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c05fa:	6828      	ldr	r0, [r5, #0]
   c05fc:	f7fd fdb8 	bl	be170 <free>
        data_ = d;
   c0600:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0602:	60ae      	str	r6, [r5, #8]
        return true;
   c0604:	2001      	movs	r0, #1
    }
   c0606:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0608:	2400      	movs	r4, #0
   c060a:	e7f6      	b.n	c05fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c060c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c060c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0610:	4690      	mov	r8, r2
   c0612:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0614:	2300      	movs	r3, #0
   c0616:	9103      	str	r1, [sp, #12]
    return size_;
   c0618:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c061c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c061e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0620:	4299      	cmp	r1, r3
        capacity_(0) {
   c0622:	e9c0 3300 	strd	r3, r3, [r0]
   c0626:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c062a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c062e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0632:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0634:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0636:	dc23      	bgt.n	c0680 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0638:	e9d8 5700 	ldrd	r5, r7, [r8]
   c063c:	2314      	movs	r3, #20
   c063e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0642:	42af      	cmp	r7, r5
   c0644:	d03b      	beq.n	c06be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0646:	4629      	mov	r1, r5
   c0648:	a80b      	add	r0, sp, #44	; 0x2c
   c064a:	f7fe f86b 	bl	be724 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c064e:	a90b      	add	r1, sp, #44	; 0x2c
   c0650:	a80f      	add	r0, sp, #60	; 0x3c
   c0652:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0654:	f7fe f866 	bl	be724 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0658:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c065c:	4299      	cmp	r1, r3
   c065e:	da1b      	bge.n	c0698 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0660:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0662:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0664:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0668:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c066c:	4631      	mov	r1, r6
   c066e:	f106 0010 	add.w	r0, r6, #16
   c0672:	f7ff ff89 	bl	c0588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0676:	b9ee      	cbnz	r6, c06b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c067a:	3301      	adds	r3, #1
   c067c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c067e:	e011      	b.n	c06a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0680:	a808      	add	r0, sp, #32
   c0682:	f7ff ffab 	bl	c05dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0686:	2800      	cmp	r0, #0
   c0688:	d1d6      	bne.n	c0638 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c068a:	a808      	add	r0, sp, #32
   c068c:	f7fe fc79 	bl	bef82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0690:	4620      	mov	r0, r4
   c0692:	b015      	add	sp, #84	; 0x54
   c0694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0698:	3101      	adds	r1, #1
   c069a:	a808      	add	r0, sp, #32
   c069c:	f7ff ff9e 	bl	c05dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c06a0:	2800      	cmp	r0, #0
   c06a2:	d1dd      	bne.n	c0660 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c06a4:	a80f      	add	r0, sp, #60	; 0x3c
   c06a6:	f7fd ffc1 	bl	be62c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c06aa:	a80b      	add	r0, sp, #44	; 0x2c
   c06ac:	f7fd ffbe 	bl	be62c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c06b0:	3514      	adds	r5, #20
   c06b2:	e7c6      	b.n	c0642 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c06b4:	a90f      	add	r1, sp, #60	; 0x3c
   c06b6:	4630      	mov	r0, r6
   c06b8:	f7fe f834 	bl	be724 <_ZN6StringC1EOS_>
   c06bc:	e7dc      	b.n	c0678 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c06be:	2600      	movs	r6, #0
   c06c0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c06c4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c06c6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c06ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c06ce:	429e      	cmp	r6, r3
   c06d0:	da7c      	bge.n	c07cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c06d2:	0133      	lsls	r3, r6, #4
   c06d4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c06d6:	9306      	str	r3, [sp, #24]
        if (!category) {
   c06d8:	b90b      	cbnz	r3, c06de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c06da:	3601      	adds	r6, #1
   c06dc:	e7f5      	b.n	c06ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c06de:	2300      	movs	r3, #0
   c06e0:	9307      	str	r3, [sp, #28]
   c06e2:	fb09 f306 	mul.w	r3, r9, r6
   c06e6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c06e8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c06ea:	a907      	add	r1, sp, #28
   c06ec:	a806      	add	r0, sp, #24
   c06ee:	f7ff fb22 	bl	bfd36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c06f2:	4682      	mov	sl, r0
   c06f4:	2800      	cmp	r0, #0
   c06f6:	d0f0      	beq.n	c06da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c06f8:	f04f 0300 	mov.w	r3, #0
   c06fc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0700:	4601      	mov	r1, r0
   c0702:	9a07      	ldr	r2, [sp, #28]
   c0704:	f10d 0317 	add.w	r3, sp, #23
   c0708:	4628      	mov	r0, r5
   c070a:	f7ff fbb1 	bl	bfe70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c070e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0712:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0714:	2f00      	cmp	r7, #0
   c0716:	d14a      	bne.n	c07ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0718:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c071c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0720:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0724:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0728:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c072c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0730:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0732:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0736:	4293      	cmp	r3, r2
   c0738:	db17      	blt.n	c076a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c073a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c073e:	f1ba 0f00 	cmp.w	sl, #0
   c0742:	dd30      	ble.n	c07a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0744:	fb09 f00a 	mul.w	r0, r9, sl
   c0748:	f7fd fd0a 	bl	be160 <malloc>
            if (!d) {
   c074c:	4683      	mov	fp, r0
   c074e:	b360      	cbz	r0, c07aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0750:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0754:	fb09 1202 	mla	r2, r9, r2, r1
   c0758:	f7ff feea 	bl	c0530 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c075c:	6828      	ldr	r0, [r5, #0]
   c075e:	f7fd fd07 	bl	be170 <free>
        data_ = d;
   c0762:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0766:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c076a:	682b      	ldr	r3, [r5, #0]
   c076c:	9a01      	ldr	r2, [sp, #4]
   c076e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0772:	686a      	ldr	r2, [r5, #4]
   c0774:	4651      	mov	r1, sl
   c0776:	fb09 3202 	mla	r2, r9, r2, r3
   c077a:	f10a 0014 	add.w	r0, sl, #20
   c077e:	f7ff fed7 	bl	c0530 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0782:	f1ba 0f00 	cmp.w	sl, #0
   c0786:	d003      	beq.n	c0790 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0788:	a90f      	add	r1, sp, #60	; 0x3c
   c078a:	4650      	mov	r0, sl
   c078c:	f7ff fb5d 	bl	bfe4a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0790:	686b      	ldr	r3, [r5, #4]
   c0792:	3301      	adds	r3, #1
   c0794:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0796:	a811      	add	r0, sp, #68	; 0x44
   c0798:	f7ff fcdc 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c079c:	b13f      	cbz	r7, c07ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c079e:	a80b      	add	r0, sp, #44	; 0x2c
   c07a0:	f7ff fcd8 	bl	c0154 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c07a4:	e771      	b.n	c068a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c07a6:	46bb      	mov	fp, r7
   c07a8:	e7d8      	b.n	c075c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c07aa:	2701      	movs	r7, #1
   c07ac:	e7f3      	b.n	c0796 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c07ae:	9b01      	ldr	r3, [sp, #4]
   c07b0:	682d      	ldr	r5, [r5, #0]
   c07b2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c07b6:	9b06      	ldr	r3, [sp, #24]
   c07b8:	781b      	ldrb	r3, [r3, #0]
   c07ba:	b92b      	cbnz	r3, c07c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c07bc:	f8d8 3000 	ldr.w	r3, [r8]
   c07c0:	9a02      	ldr	r2, [sp, #8]
   c07c2:	4413      	add	r3, r2
   c07c4:	7c1b      	ldrb	r3, [r3, #16]
   c07c6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c07c8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c07ca:	e78e      	b.n	c06ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07cc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c07ce:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07d0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c07d2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07d4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c07d6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c07d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c07da:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07dc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c07de:	60a2      	str	r2, [r4, #8]
   c07e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c07e2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07e4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c07e6:	60e2      	str	r2, [r4, #12]
   c07e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c07ea:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07ec:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c07ee:	6122      	str	r2, [r4, #16]
   c07f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c07f2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c07f4:	9b03      	ldr	r3, [sp, #12]
   c07f6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c07f8:	6162      	str	r2, [r4, #20]
   c07fa:	7623      	strb	r3, [r4, #24]
   c07fc:	e7cf      	b.n	c079e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0800 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0800:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0802:	4604      	mov	r4, r0
   c0804:	b087      	sub	sp, #28
   c0806:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0808:	4626      	mov	r6, r4
        stream_(&stream) {
   c080a:	4619      	mov	r1, r3
   c080c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c080e:	4617      	mov	r7, r2
        stream_(&stream) {
   c0810:	f7f5 ff12 	bl	b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0814:	4b0b      	ldr	r3, [pc, #44]	; (c0844 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0816:	f846 3b04 	str.w	r3, [r6], #4
   c081a:	4669      	mov	r1, sp
   c081c:	a803      	add	r0, sp, #12
   c081e:	f7f5 ff0b 	bl	b6638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0822:	aa03      	add	r2, sp, #12
   c0824:	4639      	mov	r1, r7
   c0826:	4630      	mov	r0, r6
   c0828:	f7ff fef0 	bl	c060c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c082c:	a803      	add	r0, sp, #12
   c082e:	f7f5 fc21 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0832:	4668      	mov	r0, sp
   c0834:	f7f5 fc1e 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0838:	4b03      	ldr	r3, [pc, #12]	; (c0848 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c083a:	6023      	str	r3, [r4, #0]
}
   c083c:	4620      	mov	r0, r4
        stream_(&stream) {
   c083e:	6225      	str	r5, [r4, #32]
}
   c0840:	b007      	add	sp, #28
   c0842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0844:	000c6c3c 	.word	0x000c6c3c
   c0848:	000c7da4 	.word	0x000c7da4

000c084c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c084c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c084e:	460f      	mov	r7, r1
   c0850:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0852:	491d      	ldr	r1, [pc, #116]	; (c08c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0854:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0856:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0858:	4616      	mov	r6, r2
   c085a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c085c:	f003 fe58 	bl	c4510 <strcmp>
   c0860:	b9c0      	cbnz	r0, c0894 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0862:	b1a4      	cbz	r4, c088e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0864:	4629      	mov	r1, r5
   c0866:	a801      	add	r0, sp, #4
   c0868:	f7ff fcbc 	bl	c01e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c086c:	4917      	ldr	r1, [pc, #92]	; (c08cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c086e:	2024      	movs	r0, #36	; 0x24
   c0870:	f001 fbc6 	bl	c2000 <_ZnwjRKSt9nothrow_t>
   c0874:	4605      	mov	r5, r0
   c0876:	b130      	cbz	r0, c0886 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0878:	ab01      	add	r3, sp, #4
   c087a:	4632      	mov	r2, r6
   c087c:	4621      	mov	r1, r4
   c087e:	f7ff ffbf 	bl	c0800 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0882:	4b13      	ldr	r3, [pc, #76]	; (c08d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0884:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0886:	a801      	add	r0, sp, #4
   c0888:	f7f5 fbf4 	bl	b6074 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c088c:	462c      	mov	r4, r5
}
   c088e:	4620      	mov	r0, r4
   c0890:	b005      	add	sp, #20
   c0892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0894:	490f      	ldr	r1, [pc, #60]	; (c08d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0896:	4638      	mov	r0, r7
   c0898:	f003 fe3a 	bl	c4510 <strcmp>
   c089c:	b990      	cbnz	r0, c08c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c089e:	2c00      	cmp	r4, #0
   c08a0:	d0f5      	beq.n	c088e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c08a2:	4629      	mov	r1, r5
   c08a4:	a801      	add	r0, sp, #4
   c08a6:	f7ff fc9d 	bl	c01e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c08aa:	4908      	ldr	r1, [pc, #32]	; (c08cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c08ac:	2024      	movs	r0, #36	; 0x24
   c08ae:	f001 fba7 	bl	c2000 <_ZnwjRKSt9nothrow_t>
   c08b2:	4605      	mov	r5, r0
   c08b4:	2800      	cmp	r0, #0
   c08b6:	d0e6      	beq.n	c0886 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c08b8:	ab01      	add	r3, sp, #4
   c08ba:	4632      	mov	r2, r6
   c08bc:	4621      	mov	r1, r4
   c08be:	f7ff ff9f 	bl	c0800 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c08c2:	e7e0      	b.n	c0886 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c08c4:	2400      	movs	r4, #0
   c08c6:	e7e2      	b.n	c088e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c08c8:	000c7d26 	.word	0x000c7d26
   c08cc:	000c7f51 	.word	0x000c7f51
   c08d0:	000c7dbc 	.word	0x000c7dbc
   c08d4:	000c7d2a 	.word	0x000c7d2a

000c08d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c08d8:	4b01      	ldr	r3, [pc, #4]	; (c08e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c08da:	4a02      	ldr	r2, [pc, #8]	; (c08e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c08dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c08de:	4770      	bx	lr
   c08e0:	2003e654 	.word	0x2003e654
   c08e4:	000c7d3b 	.word	0x000c7d3b

000c08e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c08e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c08ec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c08ee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c08f2:	4604      	mov	r4, r0
   c08f4:	460e      	mov	r6, r1
   c08f6:	4617      	mov	r7, r2
   c08f8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c08fa:	f000 fe95 	bl	c1628 <_Z16_fetch_usbserialv>
   c08fe:	4581      	cmp	r9, r0
   c0900:	d04c      	beq.n	c099c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0902:	792b      	ldrb	r3, [r5, #4]
   c0904:	0719      	lsls	r1, r3, #28
   c0906:	d504      	bpl.n	c0912 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0908:	696a      	ldr	r2, [r5, #20]
   c090a:	4954      	ldr	r1, [pc, #336]	; (c0a5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c090c:	4620      	mov	r0, r4
   c090e:	f7ff fa8d 	bl	bfe2c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0912:	f1b8 0f00 	cmp.w	r8, #0
   c0916:	d00d      	beq.n	c0934 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0918:	215b      	movs	r1, #91	; 0x5b
   c091a:	4620      	mov	r0, r4
   c091c:	f7ff fa7a 	bl	bfe14 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0920:	4641      	mov	r1, r8
   c0922:	4620      	mov	r0, r4
   c0924:	f7ff fa67 	bl	bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0928:	6823      	ldr	r3, [r4, #0]
   c092a:	494d      	ldr	r1, [pc, #308]	; (c0a60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c092c:	68db      	ldr	r3, [r3, #12]
   c092e:	2202      	movs	r2, #2
   c0930:	4620      	mov	r0, r4
   c0932:	4798      	blx	r3
    if (attr.has_file) {
   c0934:	792b      	ldrb	r3, [r5, #4]
   c0936:	07da      	lsls	r2, r3, #31
   c0938:	d523      	bpl.n	c0982 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c093a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c093e:	212f      	movs	r1, #47	; 0x2f
   c0940:	4640      	mov	r0, r8
   c0942:	f003 fe62 	bl	c460a <strrchr>
    if (s1) {
   c0946:	b108      	cbz	r0, c094c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0948:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c094c:	4641      	mov	r1, r8
   c094e:	4620      	mov	r0, r4
   c0950:	f7ff fa51 	bl	bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0954:	792b      	ldrb	r3, [r5, #4]
   c0956:	079b      	lsls	r3, r3, #30
   c0958:	d508      	bpl.n	c096c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c095a:	213a      	movs	r1, #58	; 0x3a
   c095c:	4620      	mov	r0, r4
   c095e:	f7ff fa59 	bl	bfe14 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0962:	68ea      	ldr	r2, [r5, #12]
   c0964:	493f      	ldr	r1, [pc, #252]	; (c0a64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0966:	4620      	mov	r0, r4
   c0968:	f7ff fa60 	bl	bfe2c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c096c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c096e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0970:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0974:	68db      	ldr	r3, [r3, #12]
   c0976:	bf14      	ite	ne
   c0978:	493b      	ldrne	r1, [pc, #236]	; (c0a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c097a:	493c      	ldreq	r1, [pc, #240]	; (c0a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c097c:	2202      	movs	r2, #2
            write(": ", 2);
   c097e:	4620      	mov	r0, r4
   c0980:	4798      	blx	r3
    if (attr.has_function) {
   c0982:	792b      	ldrb	r3, [r5, #4]
   c0984:	0758      	lsls	r0, r3, #29
   c0986:	d51d      	bpl.n	c09c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0988:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c098a:	460b      	mov	r3, r1
   c098c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c098e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0992:	b160      	cbz	r0, c09ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0994:	2820      	cmp	r0, #32
   c0996:	d108      	bne.n	c09aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0998:	4619      	mov	r1, r3
   c099a:	e7f7      	b.n	c098c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c099c:	4834      	ldr	r0, [pc, #208]	; (c0a70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c099e:	f000 ffe2 	bl	c1966 <_ZN5spark12NetworkClass9listeningEv>
   c09a2:	2800      	cmp	r0, #0
   c09a4:	d0ad      	beq.n	c0902 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c09a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c09aa:	2828      	cmp	r0, #40	; 0x28
   c09ac:	d1ee      	bne.n	c098c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c09ae:	6823      	ldr	r3, [r4, #0]
   c09b0:	1a52      	subs	r2, r2, r1
   c09b2:	68db      	ldr	r3, [r3, #12]
   c09b4:	4620      	mov	r0, r4
   c09b6:	4798      	blx	r3
        write("(): ", 4);
   c09b8:	6823      	ldr	r3, [r4, #0]
   c09ba:	492e      	ldr	r1, [pc, #184]	; (c0a74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c09bc:	68db      	ldr	r3, [r3, #12]
   c09be:	2204      	movs	r2, #4
   c09c0:	4620      	mov	r0, r4
   c09c2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c09c4:	2100      	movs	r1, #0
   c09c6:	4638      	mov	r0, r7
   c09c8:	f7fd facc 	bl	bdf64 <log_level_name>
   c09cc:	4601      	mov	r1, r0
    write(s);
   c09ce:	4620      	mov	r0, r4
   c09d0:	f7ff fa11 	bl	bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c09d4:	6823      	ldr	r3, [r4, #0]
   c09d6:	4925      	ldr	r1, [pc, #148]	; (c0a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c09d8:	68db      	ldr	r3, [r3, #12]
   c09da:	2202      	movs	r2, #2
   c09dc:	4620      	mov	r0, r4
   c09de:	4798      	blx	r3
    if (msg) {
   c09e0:	b11e      	cbz	r6, c09ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c09e2:	4631      	mov	r1, r6
   c09e4:	4620      	mov	r0, r4
   c09e6:	f7ff fa06 	bl	bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c09ea:	792b      	ldrb	r3, [r5, #4]
   c09ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   c09f0:	d02c      	beq.n	c0a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c09f2:	6823      	ldr	r3, [r4, #0]
   c09f4:	4920      	ldr	r1, [pc, #128]	; (c0a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c09f6:	68db      	ldr	r3, [r3, #12]
   c09f8:	2202      	movs	r2, #2
   c09fa:	4620      	mov	r0, r4
   c09fc:	4798      	blx	r3
        if (attr.has_code) {
   c09fe:	792b      	ldrb	r3, [r5, #4]
   c0a00:	06d9      	lsls	r1, r3, #27
   c0a02:	d50a      	bpl.n	c0a1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0a04:	6823      	ldr	r3, [r4, #0]
   c0a06:	491d      	ldr	r1, [pc, #116]	; (c0a7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0a08:	68db      	ldr	r3, [r3, #12]
   c0a0a:	2207      	movs	r2, #7
   c0a0c:	4620      	mov	r0, r4
   c0a0e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0a10:	69aa      	ldr	r2, [r5, #24]
   c0a12:	491b      	ldr	r1, [pc, #108]	; (c0a80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0a14:	4620      	mov	r0, r4
   c0a16:	f7ff fa09 	bl	bfe2c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0a1a:	792b      	ldrb	r3, [r5, #4]
   c0a1c:	069a      	lsls	r2, r3, #26
   c0a1e:	d511      	bpl.n	c0a44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0a20:	06db      	lsls	r3, r3, #27
   c0a22:	d505      	bpl.n	c0a30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0a24:	6823      	ldr	r3, [r4, #0]
   c0a26:	4910      	ldr	r1, [pc, #64]	; (c0a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0a28:	68db      	ldr	r3, [r3, #12]
   c0a2a:	2202      	movs	r2, #2
   c0a2c:	4620      	mov	r0, r4
   c0a2e:	4798      	blx	r3
            write("details = ", 10);
   c0a30:	6823      	ldr	r3, [r4, #0]
   c0a32:	4914      	ldr	r1, [pc, #80]	; (c0a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0a34:	68db      	ldr	r3, [r3, #12]
   c0a36:	4620      	mov	r0, r4
   c0a38:	220a      	movs	r2, #10
   c0a3a:	4798      	blx	r3
            write(attr.details);
   c0a3c:	69e9      	ldr	r1, [r5, #28]
   c0a3e:	4620      	mov	r0, r4
   c0a40:	f7ff f9d9 	bl	bfdf6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0a44:	215d      	movs	r1, #93	; 0x5d
   c0a46:	4620      	mov	r0, r4
   c0a48:	f7ff f9e4 	bl	bfe14 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0a4c:	6823      	ldr	r3, [r4, #0]
   c0a4e:	490e      	ldr	r1, [pc, #56]	; (c0a88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0a50:	68db      	ldr	r3, [r3, #12]
   c0a52:	4620      	mov	r0, r4
   c0a54:	2202      	movs	r2, #2
}
   c0a56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0a5a:	4718      	bx	r3
   c0a5c:	000c7d3f 	.word	0x000c7d3f
   c0a60:	000c7d46 	.word	0x000c7d46
   c0a64:	000c6784 	.word	0x000c6784
   c0a68:	000c7d49 	.word	0x000c7d49
   c0a6c:	000c7d4e 	.word	0x000c7d4e
   c0a70:	2003e720 	.word	0x2003e720
   c0a74:	000c7d4c 	.word	0x000c7d4c
   c0a78:	000c7d51 	.word	0x000c7d51
   c0a7c:	000c7d54 	.word	0x000c7d54
   c0a80:	000c7d5c 	.word	0x000c7d5c
   c0a84:	000c7d5f 	.word	0x000c7d5f
   c0a88:	000c7d6a 	.word	0x000c7d6a

000c0a8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0a90:	b085      	sub	sp, #20
    return stream_;
   c0a92:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0a96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0a98:	4605      	mov	r5, r0
   c0a9a:	460f      	mov	r7, r1
   c0a9c:	4690      	mov	r8, r2
   c0a9e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0aa0:	f000 fdc2 	bl	c1628 <_Z16_fetch_usbserialv>
   c0aa4:	4581      	cmp	r9, r0
   c0aa6:	d105      	bne.n	c0ab4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0aa8:	4849      	ldr	r0, [pc, #292]	; (c0bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0aaa:	f000 ff5c 	bl	c1966 <_ZN5spark12NetworkClass9listeningEv>
   c0aae:	2800      	cmp	r0, #0
   c0ab0:	f040 808a 	bne.w	c0bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0ab4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0ab6:	4a47      	ldr	r2, [pc, #284]	; (c0bd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0ab8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0aba:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0abe:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0ac0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0ac2:	f88d 9008 	strb.w	r9, [sp, #8]
   c0ac6:	f001 f8f2 	bl	c1cae <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0aca:	4649      	mov	r1, r9
   c0acc:	4640      	mov	r0, r8
   c0ace:	f7fd fa49 	bl	bdf64 <log_level_name>
    json.name("l", 1).value(s);
   c0ad2:	4941      	ldr	r1, [pc, #260]	; (c0bd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0ad4:	4680      	mov	r8, r0
   c0ad6:	2201      	movs	r2, #1
   c0ad8:	a801      	add	r0, sp, #4
   c0ada:	f001 f977 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0ade:	4641      	mov	r1, r8
   c0ae0:	f7ff f97b 	bl	bfdda <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0ae4:	b13f      	cbz	r7, c0af6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0ae6:	493d      	ldr	r1, [pc, #244]	; (c0bdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0ae8:	2201      	movs	r2, #1
   c0aea:	a801      	add	r0, sp, #4
   c0aec:	f001 f96e 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0af0:	4639      	mov	r1, r7
   c0af2:	f7ff f972 	bl	bfdda <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0af6:	b13e      	cbz	r6, c0b08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0af8:	4939      	ldr	r1, [pc, #228]	; (c0be0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0afa:	2201      	movs	r2, #1
   c0afc:	a801      	add	r0, sp, #4
   c0afe:	f001 f965 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b02:	4631      	mov	r1, r6
   c0b04:	f7ff f969 	bl	bfdda <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0b08:	7923      	ldrb	r3, [r4, #4]
   c0b0a:	07df      	lsls	r7, r3, #31
   c0b0c:	d50e      	bpl.n	c0b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0b0e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0b10:	212f      	movs	r1, #47	; 0x2f
   c0b12:	4630      	mov	r0, r6
   c0b14:	f003 fd79 	bl	c460a <strrchr>
    if (s1) {
   c0b18:	b100      	cbz	r0, c0b1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0b1a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0b1c:	4931      	ldr	r1, [pc, #196]	; (c0be4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0b1e:	2201      	movs	r2, #1
   c0b20:	a801      	add	r0, sp, #4
   c0b22:	f001 f953 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b26:	4631      	mov	r1, r6
   c0b28:	f7ff f957 	bl	bfdda <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0b2c:	7923      	ldrb	r3, [r4, #4]
   c0b2e:	079e      	lsls	r6, r3, #30
   c0b30:	d507      	bpl.n	c0b42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0b32:	492d      	ldr	r1, [pc, #180]	; (c0be8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0b34:	2202      	movs	r2, #2
   c0b36:	a801      	add	r0, sp, #4
   c0b38:	f001 f948 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b3c:	68e1      	ldr	r1, [r4, #12]
   c0b3e:	f001 f8c3 	bl	c1cc8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0b42:	7923      	ldrb	r3, [r4, #4]
   c0b44:	0758      	lsls	r0, r3, #29
   c0b46:	d514      	bpl.n	c0b72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0b48:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0b4a:	4633      	mov	r3, r6
   c0b4c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0b52:	b12a      	cbz	r2, c0b60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0b54:	2a20      	cmp	r2, #32
   c0b56:	d101      	bne.n	c0b5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0b58:	461e      	mov	r6, r3
   c0b5a:	e7f7      	b.n	c0b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0b5c:	2a28      	cmp	r2, #40	; 0x28
   c0b5e:	d1f5      	bne.n	c0b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0b60:	4922      	ldr	r1, [pc, #136]	; (c0bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0b62:	2202      	movs	r2, #2
   c0b64:	a801      	add	r0, sp, #4
   c0b66:	f001 f931 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b6a:	1bba      	subs	r2, r7, r6
   c0b6c:	4631      	mov	r1, r6
   c0b6e:	f001 f93d 	bl	c1dec <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0b72:	7923      	ldrb	r3, [r4, #4]
   c0b74:	0719      	lsls	r1, r3, #28
   c0b76:	d507      	bpl.n	c0b88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0b78:	491d      	ldr	r1, [pc, #116]	; (c0bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0b7a:	2201      	movs	r2, #1
   c0b7c:	a801      	add	r0, sp, #4
   c0b7e:	f001 f925 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b82:	6961      	ldr	r1, [r4, #20]
   c0b84:	f001 f8b2 	bl	c1cec <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0b88:	7923      	ldrb	r3, [r4, #4]
   c0b8a:	06da      	lsls	r2, r3, #27
   c0b8c:	d508      	bpl.n	c0ba0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0b8e:	2204      	movs	r2, #4
   c0b90:	4918      	ldr	r1, [pc, #96]	; (c0bf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0b92:	eb0d 0002 	add.w	r0, sp, r2
   c0b96:	f001 f919 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0b9a:	69a1      	ldr	r1, [r4, #24]
   c0b9c:	f001 f894 	bl	c1cc8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0ba0:	7923      	ldrb	r3, [r4, #4]
   c0ba2:	069b      	lsls	r3, r3, #26
   c0ba4:	d507      	bpl.n	c0bb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0ba6:	4914      	ldr	r1, [pc, #80]	; (c0bf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0ba8:	2206      	movs	r2, #6
   c0baa:	a801      	add	r0, sp, #4
   c0bac:	f001 f90e 	bl	c1dcc <_ZN5spark10JSONWriter4nameEPKcj>
   c0bb0:	69e1      	ldr	r1, [r4, #28]
   c0bb2:	f7ff f912 	bl	bfdda <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0bb6:	a801      	add	r0, sp, #4
   c0bb8:	f001 f863 	bl	c1c82 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0bbc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0bbe:	490f      	ldr	r1, [pc, #60]	; (c0bfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0bc0:	6803      	ldr	r3, [r0, #0]
   c0bc2:	2202      	movs	r2, #2
   c0bc4:	68db      	ldr	r3, [r3, #12]
   c0bc6:	4798      	blx	r3
}
   c0bc8:	b005      	add	sp, #20
   c0bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0bce:	bf00      	nop
   c0bd0:	2003e720 	.word	0x2003e720
   c0bd4:	000c7d8c 	.word	0x000c7d8c
   c0bd8:	000c7d1c 	.word	0x000c7d1c
   c0bdc:	000c7d6d 	.word	0x000c7d6d
   c0be0:	000c87d6 	.word	0x000c87d6
   c0be4:	000c6805 	.word	0x000c6805
   c0be8:	000c7d6f 	.word	0x000c7d6f
   c0bec:	000c7d72 	.word	0x000c7d72
   c0bf0:	000c6ab2 	.word	0x000c6ab2
   c0bf4:	000c7d75 	.word	0x000c7d75
   c0bf8:	000c7d7a 	.word	0x000c7d7a
   c0bfc:	000c7d6a 	.word	0x000c7d6a

000c0c00 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0c04:	4a15      	ldr	r2, [pc, #84]	; (c0c5c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0c06:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0c68 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0c0a:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0c0e:	1980      	adds	r0, r0, r6
   c0c10:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0c14:	4b12      	ldr	r3, [pc, #72]	; (c0c60 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0c16:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0c1a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0c1e:	1986      	adds	r6, r0, r6
   c0c20:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0c24:	42bb      	cmp	r3, r7
   c0c26:	bf08      	it	eq
   c0c28:	42b2      	cmpeq	r2, r6
{
   c0c2a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0c2c:	d013      	beq.n	c0c56 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0c2e:	a903      	add	r1, sp, #12
   c0c30:	4668      	mov	r0, sp
   c0c32:	e9cd 6700 	strd	r6, r7, [sp]
   c0c36:	f7fd faf3 	bl	be220 <localtime_r>
	calendar_time.tm_year += 1900;
   c0c3a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0c3c:	4d09      	ldr	r5, [pc, #36]	; (c0c64 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0c3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0c42:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0c44:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0c4e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0c52:	6823      	ldr	r3, [r4, #0]
   c0c54:	602b      	str	r3, [r5, #0]
    }
}
   c0c56:	b00c      	add	sp, #48	; 0x30
   c0c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0c5c:	2003e6b0 	.word	0x2003e6b0
   c0c60:	2003e6a8 	.word	0x2003e6a8
   c0c64:	2003e684 	.word	0x2003e684
   c0c68:	2003e6b8 	.word	0x2003e6b8

000c0c6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   c0c6c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0c6e:	2000      	movs	r0, #0
   c0c70:	f7fd fa66 	bl	be140 <spark_sync_time_pending>
   c0c74:	b128      	cbz	r0, c0c82 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0c76:	f7fd fa4b 	bl	be110 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0c7a:	f080 0001 	eor.w	r0, r0, #1
   c0c7e:	b2c0      	uxtb	r0, r0
    }
   c0c80:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0c82:	2001      	movs	r0, #1
   c0c84:	e7fc      	b.n	c0c80 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0c88 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0c88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0c8a:	f7ff ffb9 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0c8e:	4b02      	ldr	r3, [pc, #8]	; (c0c98 <_ZN9TimeClass5monthEx+0x10>)
   c0c90:	6918      	ldr	r0, [r3, #16]
}
   c0c92:	3001      	adds	r0, #1
   c0c94:	bd08      	pop	{r3, pc}
   c0c96:	bf00      	nop
   c0c98:	2003e684 	.word	0x2003e684

000c0c9c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0c9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0c9e:	2000      	movs	r0, #0
   c0ca0:	f7fc fef6 	bl	bda90 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0ca4:	4604      	mov	r4, r0
   c0ca6:	b9a0      	cbnz	r0, c0cd2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0ca8:	f7fd f976 	bl	bdf98 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0cac:	2801      	cmp	r0, #1
   c0cae:	d110      	bne.n	c0cd2 <_ZN9TimeClass7isValidEv+0x36>
   c0cb0:	4620      	mov	r0, r4
   c0cb2:	f7fd f999 	bl	bdfe8 <system_thread_get_state>
   c0cb6:	b960      	cbnz	r0, c0cd2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0cb8:	f7ff ffd8 	bl	c0c6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0cbc:	b910      	cbnz	r0, c0cc4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0cbe:	f7fd fa1f 	bl	be100 <spark_process>
        while (_while() && !_condition()) {
   c0cc2:	e7f9      	b.n	c0cb8 <_ZN9TimeClass7isValidEv+0x1c>
   c0cc4:	f7ff ffd2 	bl	c0c6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0ccc:	2000      	movs	r0, #0
   c0cce:	f7fc bedf 	b.w	bda90 <hal_rtc_time_is_valid>
}
   c0cd2:	4620      	mov	r0, r4
   c0cd4:	bd10      	pop	{r4, pc}

000c0cd6 <_ZN9TimeClass3nowEv>:
{
   c0cd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0cd8:	f7ff ffe0 	bl	c0c9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0cdc:	2210      	movs	r2, #16
   c0cde:	2100      	movs	r1, #0
   c0ce0:	4668      	mov	r0, sp
   c0ce2:	f003 fbb9 	bl	c4458 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0ce6:	2100      	movs	r1, #0
   c0ce8:	4668      	mov	r0, sp
   c0cea:	f7fc fed9 	bl	bdaa0 <hal_rtc_get_time>
}
   c0cee:	9800      	ldr	r0, [sp, #0]
   c0cf0:	b005      	add	sp, #20
   c0cf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0cf8 <_ZN9TimeClass4hourEv>:
{
   c0cf8:	b508      	push	{r3, lr}
	return hour(now());
   c0cfa:	f7ff ffec 	bl	c0cd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0cfe:	17c1      	asrs	r1, r0, #31
   c0d00:	f7ff ff7e 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0d04:	4b01      	ldr	r3, [pc, #4]	; (c0d0c <_ZN9TimeClass4hourEv+0x14>)
   c0d06:	6898      	ldr	r0, [r3, #8]
   c0d08:	bd08      	pop	{r3, pc}
   c0d0a:	bf00      	nop
   c0d0c:	2003e684 	.word	0x2003e684

000c0d10 <_ZN9TimeClass6minuteEv>:
{
   c0d10:	b508      	push	{r3, lr}
	return minute(now());
   c0d12:	f7ff ffe0 	bl	c0cd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0d16:	17c1      	asrs	r1, r0, #31
   c0d18:	f7ff ff72 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0d1c:	4b01      	ldr	r3, [pc, #4]	; (c0d24 <_ZN9TimeClass6minuteEv+0x14>)
   c0d1e:	6858      	ldr	r0, [r3, #4]
   c0d20:	bd08      	pop	{r3, pc}
   c0d22:	bf00      	nop
   c0d24:	2003e684 	.word	0x2003e684

000c0d28 <_ZN9TimeClass6secondEv>:
{
   c0d28:	b508      	push	{r3, lr}
	return second(now());
   c0d2a:	f7ff ffd4 	bl	c0cd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0d2e:	17c1      	asrs	r1, r0, #31
   c0d30:	f7ff ff66 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0d34:	4b01      	ldr	r3, [pc, #4]	; (c0d3c <_ZN9TimeClass6secondEv+0x14>)
   c0d36:	6818      	ldr	r0, [r3, #0]
   c0d38:	bd08      	pop	{r3, pc}
   c0d3a:	bf00      	nop
   c0d3c:	2003e684 	.word	0x2003e684

000c0d40 <_ZN9TimeClass3dayEv>:
{
   c0d40:	b508      	push	{r3, lr}
	return day(now());
   c0d42:	f7ff ffc8 	bl	c0cd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0d46:	17c1      	asrs	r1, r0, #31
   c0d48:	f7ff ff5a 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0d4c:	4b01      	ldr	r3, [pc, #4]	; (c0d54 <_ZN9TimeClass3dayEv+0x14>)
   c0d4e:	68d8      	ldr	r0, [r3, #12]
   c0d50:	bd08      	pop	{r3, pc}
   c0d52:	bf00      	nop
   c0d54:	2003e684 	.word	0x2003e684

000c0d58 <_ZN9TimeClass5monthEv>:
{
   c0d58:	b508      	push	{r3, lr}
	return month(now());
   c0d5a:	f7ff ffbc 	bl	c0cd6 <_ZN9TimeClass3nowEv>
}
   c0d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c0d62:	17c1      	asrs	r1, r0, #31
   c0d64:	f7ff bf90 	b.w	c0c88 <_ZN9TimeClass5monthEx>

000c0d68 <_ZN9TimeClass4yearEv>:
{
   c0d68:	b508      	push	{r3, lr}
	return year(now());
   c0d6a:	f7ff ffb4 	bl	c0cd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0d6e:	17c1      	asrs	r1, r0, #31
   c0d70:	f7ff ff46 	bl	c0c00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0d74:	4b01      	ldr	r3, [pc, #4]	; (c0d7c <_ZN9TimeClass4yearEv+0x14>)
   c0d76:	6958      	ldr	r0, [r3, #20]
   c0d78:	bd08      	pop	{r3, pc}
   c0d7a:	bf00      	nop
   c0d7c:	2003e684 	.word	0x2003e684

000c0d80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0d80:	4b02      	ldr	r3, [pc, #8]	; (c0d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0d82:	681a      	ldr	r2, [r3, #0]
   c0d84:	4b02      	ldr	r3, [pc, #8]	; (c0d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0d86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0d88:	4770      	bx	lr
   c0d8a:	bf00      	nop
   c0d8c:	2003db60 	.word	0x2003db60
   c0d90:	2003e680 	.word	0x2003e680

000c0d94 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   c0d94:	428a      	cmp	r2, r1
{
   c0d96:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   c0d98:	d007      	beq.n	c0daa <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   c0d9a:	1a44      	subs	r4, r0, r1
   c0d9c:	9802      	ldr	r0, [sp, #8]
   c0d9e:	1ac0      	subs	r0, r0, r3
   c0da0:	4344      	muls	r4, r0
   c0da2:	1a50      	subs	r0, r2, r1
   c0da4:	fb94 f0f0 	sdiv	r0, r4, r0
   c0da8:	4418      	add	r0, r3
}
   c0daa:	bd10      	pop	{r4, pc}

000c0dac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c0dac:	2100      	movs	r1, #0
   c0dae:	f7fd b903 	b.w	bdfb8 <system_delay_ms>
	...

000c0db4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0db4:	4b01      	ldr	r3, [pc, #4]	; (c0dbc <_GLOBAL__sub_I_RGB+0x8>)
   c0db6:	2200      	movs	r2, #0
   c0db8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0dba:	4770      	bx	lr
   c0dbc:	2003e6c0 	.word	0x2003e6c0

000c0dc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0dc0:	4b01      	ldr	r3, [pc, #4]	; (c0dc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c0dc2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0dc4:	4770      	bx	lr
   c0dc6:	bf00      	nop
   c0dc8:	2003db68 	.word	0x2003db68

000c0dcc <serialEventRun>:
{
   c0dcc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0dce:	4b0b      	ldr	r3, [pc, #44]	; (c0dfc <serialEventRun+0x30>)
   c0dd0:	b143      	cbz	r3, c0de4 <serialEventRun+0x18>
   c0dd2:	f000 fc29 	bl	c1628 <_Z16_fetch_usbserialv>
   c0dd6:	6803      	ldr	r3, [r0, #0]
   c0dd8:	691b      	ldr	r3, [r3, #16]
   c0dda:	4798      	blx	r3
   c0ddc:	2800      	cmp	r0, #0
   c0dde:	dd01      	ble.n	c0de4 <serialEventRun+0x18>
        serialEvent();
   c0de0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0de4:	4b06      	ldr	r3, [pc, #24]	; (c0e00 <serialEventRun+0x34>)
   c0de6:	b143      	cbz	r3, c0dfa <serialEventRun+0x2e>
   c0de8:	f001 f8aa 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   c0dec:	6803      	ldr	r3, [r0, #0]
   c0dee:	691b      	ldr	r3, [r3, #16]
   c0df0:	4798      	blx	r3
   c0df2:	2800      	cmp	r0, #0
   c0df4:	dd01      	ble.n	c0dfa <serialEventRun+0x2e>
        serialEvent1();
   c0df6:	f3af 8000 	nop.w
}
   c0dfa:	bd08      	pop	{r3, pc}
	...

000c0e04 <_post_loop>:
{
   c0e04:	b508      	push	{r3, lr}
	serialEventRun();
   c0e06:	f7ff ffe1 	bl	c0dcc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0e0a:	f7fc fe39 	bl	bda80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0e0e:	4b01      	ldr	r3, [pc, #4]	; (c0e14 <_post_loop+0x10>)
   c0e10:	6018      	str	r0, [r3, #0]
}
   c0e12:	bd08      	pop	{r3, pc}
   c0e14:	2003e740 	.word	0x2003e740

000c0e18 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0e18:	4805      	ldr	r0, [pc, #20]	; (c0e30 <_Z33system_initialize_user_backup_ramv+0x18>)
   c0e1a:	4a06      	ldr	r2, [pc, #24]	; (c0e34 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0e1c:	4906      	ldr	r1, [pc, #24]	; (c0e38 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0e1e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0e20:	1a12      	subs	r2, r2, r0
   c0e22:	f003 faf1 	bl	c4408 <memcpy>
    __backup_sram_signature = signature;
   c0e26:	4b05      	ldr	r3, [pc, #20]	; (c0e3c <_Z33system_initialize_user_backup_ramv+0x24>)
   c0e28:	4a05      	ldr	r2, [pc, #20]	; (c0e40 <_Z33system_initialize_user_backup_ramv+0x28>)
   c0e2a:	601a      	str	r2, [r3, #0]
}
   c0e2c:	bd08      	pop	{r3, pc}
   c0e2e:	bf00      	nop
   c0e30:	2003f400 	.word	0x2003f400
   c0e34:	2003f404 	.word	0x2003f404
   c0e38:	000c8924 	.word	0x000c8924
   c0e3c:	2003f400 	.word	0x2003f400
   c0e40:	9a271c1e 	.word	0x9a271c1e

000c0e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0e44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0e46:	2300      	movs	r3, #0
   c0e48:	9300      	str	r3, [sp, #0]
   c0e4a:	461a      	mov	r2, r3
   c0e4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0e50:	f7fd f8e4 	bl	be01c <system_ctrl_set_result>
}
   c0e54:	b003      	add	sp, #12
   c0e56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0e5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0e5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0e5e:	8843      	ldrh	r3, [r0, #2]
   c0e60:	2b0a      	cmp	r3, #10
   c0e62:	d008      	beq.n	c0e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0e64:	2b50      	cmp	r3, #80	; 0x50
   c0e66:	d10b      	bne.n	c0e80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0e68:	4b09      	ldr	r3, [pc, #36]	; (c0e90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c0e6a:	681b      	ldr	r3, [r3, #0]
   c0e6c:	b14b      	cbz	r3, c0e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0e6e:	b003      	add	sp, #12
   c0e70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0e74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c0e76:	f7ff ffe5 	bl	c0e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c0e7a:	b003      	add	sp, #12
   c0e7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0e80:	2300      	movs	r3, #0
   c0e82:	9300      	str	r3, [sp, #0]
   c0e84:	461a      	mov	r2, r3
   c0e86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0e8a:	f7fd f8c7 	bl	be01c <system_ctrl_set_result>
}
   c0e8e:	e7f4      	b.n	c0e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0e90:	2003e6d4 	.word	0x2003e6d4

000c0e94 <module_user_init_hook>:
{
   c0e94:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c0e96:	4812      	ldr	r0, [pc, #72]	; (c0ee0 <module_user_init_hook+0x4c>)
   c0e98:	2100      	movs	r1, #0
   c0e9a:	f7fd f9b9 	bl	be210 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0e9e:	4b11      	ldr	r3, [pc, #68]	; (c0ee4 <module_user_init_hook+0x50>)
   c0ea0:	681a      	ldr	r2, [r3, #0]
   c0ea2:	4b11      	ldr	r3, [pc, #68]	; (c0ee8 <module_user_init_hook+0x54>)
   c0ea4:	429a      	cmp	r2, r3
   c0ea6:	4b11      	ldr	r3, [pc, #68]	; (c0eec <module_user_init_hook+0x58>)
   c0ea8:	bf0c      	ite	eq
   c0eaa:	2201      	moveq	r2, #1
   c0eac:	2200      	movne	r2, #0
   c0eae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0eb0:	d001      	beq.n	c0eb6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c0eb2:	f7ff ffb1 	bl	c0e18 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c0eb6:	f7fc fdcb 	bl	bda50 <HAL_RNG_GetRandomNumber>
   c0eba:	4604      	mov	r4, r0
    srand(seed);
   c0ebc:	f003 fad4 	bl	c4468 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c0ec0:	4b0b      	ldr	r3, [pc, #44]	; (c0ef0 <module_user_init_hook+0x5c>)
   c0ec2:	b113      	cbz	r3, c0eca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c0ec4:	4620      	mov	r0, r4
   c0ec6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c0eca:	2100      	movs	r1, #0
   c0ecc:	4808      	ldr	r0, [pc, #32]	; (c0ef0 <module_user_init_hook+0x5c>)
   c0ece:	f7fd f93f 	bl	be150 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c0ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c0ed6:	4807      	ldr	r0, [pc, #28]	; (c0ef4 <module_user_init_hook+0x60>)
   c0ed8:	2100      	movs	r1, #0
   c0eda:	f7fd b895 	b.w	be008 <system_ctrl_set_app_request_handler>
   c0ede:	bf00      	nop
   c0ee0:	000c0dc1 	.word	0x000c0dc1
   c0ee4:	2003f400 	.word	0x2003f400
   c0ee8:	9a271c1e 	.word	0x9a271c1e
   c0eec:	2003e6d0 	.word	0x2003e6d0
   c0ef0:	00000000 	.word	0x00000000
   c0ef4:	000c0e5d 	.word	0x000c0e5d

000c0ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c0ef8:	4770      	bx	lr

000c0efa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c0efa:	2000      	movs	r0, #0
   c0efc:	4770      	bx	lr

000c0efe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c0efe:	b510      	push	{r4, lr}
   c0f00:	2110      	movs	r1, #16
   c0f02:	4604      	mov	r4, r0
   c0f04:	f7f3 f8cd 	bl	b40a2 <_ZdlPvj>
   c0f08:	4620      	mov	r0, r4
   c0f0a:	bd10      	pop	{r4, pc}

000c0f0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c0f0c:	b508      	push	{r3, lr}
      { delete this; }
   c0f0e:	f7ff fff6 	bl	c0efe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c0f12:	bd08      	pop	{r3, pc}

000c0f14 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c0f14:	b530      	push	{r4, r5, lr}
        type_(type) {
   c0f16:	2200      	movs	r2, #0
   c0f18:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c0f1c:	6002      	str	r2, [r0, #0]
   c0f1e:	8084      	strh	r4, [r0, #4]
   c0f20:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c0f22:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0f24:	680c      	ldr	r4, [r1, #0]
   c0f26:	8085      	strh	r5, [r0, #4]
   c0f28:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c0f2a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c0f2c:	bd30      	pop	{r4, r5, pc}

000c0f2e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c0f2e:	b510      	push	{r4, lr}
   c0f30:	4604      	mov	r4, r0
    free((void*)msg_);
   c0f32:	6800      	ldr	r0, [r0, #0]
   c0f34:	f7fd f91c 	bl	be170 <free>
}
   c0f38:	4620      	mov	r0, r4
   c0f3a:	bd10      	pop	{r4, pc}

000c0f3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c0f3c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c0f3e:	68c4      	ldr	r4, [r0, #12]
   c0f40:	b1f4      	cbz	r4, c0f80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   c0f42:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c0f44:	2b02      	cmp	r3, #2
   c0f46:	d103      	bne.n	c0f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c0f48:	f104 000c 	add.w	r0, r4, #12
   c0f4c:	f7ff ffef 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c0f50:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c0f52:	b135      	cbz	r5, c0f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c0f54:	4628      	mov	r0, r5
   c0f56:	f7f3 fa89 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   c0f5a:	2110      	movs	r1, #16
   c0f5c:	4628      	mov	r0, r5
   c0f5e:	f7f3 f8a0 	bl	b40a2 <_ZdlPvj>
   c0f62:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c0f64:	b135      	cbz	r5, c0f74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c0f66:	4628      	mov	r0, r5
   c0f68:	f7f3 fa80 	bl	b446c <_ZNSt14_Function_baseD1Ev>
   c0f6c:	2110      	movs	r1, #16
   c0f6e:	4628      	mov	r0, r5
   c0f70:	f7f3 f897 	bl	b40a2 <_ZdlPvj>
   c0f74:	4620      	mov	r0, r4
   c0f76:	2114      	movs	r1, #20
   c0f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c0f7c:	f7f3 b891 	b.w	b40a2 <_ZdlPvj>
   c0f80:	bd38      	pop	{r3, r4, r5, pc}

000c0f82 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   c0f82:	b510      	push	{r4, lr}
   c0f84:	b088      	sub	sp, #32
   c0f86:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   c0f88:	4668      	mov	r0, sp
   c0f8a:	f7fd fb9a 	bl	be6c2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   c0f8e:	4669      	mov	r1, sp
   c0f90:	a804      	add	r0, sp, #16
   c0f92:	f7fd fbe1 	bl	be758 <_ZN6StringC1ERKS_>
   c0f96:	a804      	add	r0, sp, #16
   c0f98:	47a0      	blx	r4
   c0f9a:	4604      	mov	r4, r0
   c0f9c:	a804      	add	r0, sp, #16
   c0f9e:	f7fd fb45 	bl	be62c <_ZN6StringD1Ev>
    String p(param);
   c0fa2:	4668      	mov	r0, sp
   c0fa4:	f7fd fb42 	bl	be62c <_ZN6StringD1Ev>
}
   c0fa8:	4620      	mov	r0, r4
   c0faa:	b008      	add	sp, #32
   c0fac:	bd10      	pop	{r4, pc}

000c0fae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   c0fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   c0fb0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   c0fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   c0fb6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   c0fb8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   c0fba:	461a      	mov	r2, r3
   c0fbc:	4669      	mov	r1, sp
   c0fbe:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   c0fc0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   c0fc4:	f8ad 4000 	strh.w	r4, [sp]
   c0fc8:	f7fd f892 	bl	be0f0 <spark_function>
}
   c0fcc:	b004      	add	sp, #16
   c0fce:	bd10      	pop	{r4, pc}

000c0fd0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0fd0:	680b      	ldr	r3, [r1, #0]
   c0fd2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c0fd4:	684b      	ldr	r3, [r1, #4]
   c0fd6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c0fd8:	b113      	cbz	r3, c0fe0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c0fda:	685a      	ldr	r2, [r3, #4]
   c0fdc:	3201      	adds	r2, #1
   c0fde:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0fe0:	4770      	bx	lr

000c0fe2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c0fe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0fe4:	4604      	mov	r4, r0
   c0fe6:	4668      	mov	r0, sp
   c0fe8:	460d      	mov	r5, r1
   c0fea:	f7ff fff1 	bl	c0fd0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c0fee:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c0ff0:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c0ff2:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c0ff4:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c0ff6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c0ff8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c0ffa:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   c0ffc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c0ffe:	f7f4 fedb 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c1002:	b135      	cbz	r5, c1012 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c1004:	1d28      	adds	r0, r5, #4
   c1006:	f7f4 fed7 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c100a:	2108      	movs	r1, #8
   c100c:	4628      	mov	r0, r5
   c100e:	f7f3 f848 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   c1012:	4620      	mov	r0, r4
   c1014:	b003      	add	sp, #12
   c1016:	bd30      	pop	{r4, r5, pc}

000c1018 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c1018:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c101a:	b510      	push	{r4, lr}
      if (_M_empty())
   c101c:	b90a      	cbnz	r2, c1022 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c101e:	f000 fff3 	bl	c2008 <_ZSt25__throw_bad_function_callv>
    }
   c1022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c1026:	68c3      	ldr	r3, [r0, #12]
   c1028:	4718      	bx	r3

000c102a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c102a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c102c:	6800      	ldr	r0, [r0, #0]
   c102e:	f100 0110 	add.w	r1, r0, #16
   c1032:	f7ff fff1 	bl	c1018 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c1036:	bd08      	pop	{r3, pc}

000c1038 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c1038:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c103a:	b510      	push	{r4, lr}
      if (_M_empty())
   c103c:	b90a      	cbnz	r2, c1042 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c103e:	f000 ffe3 	bl	c2008 <_ZSt25__throw_bad_function_callv>
    }
   c1042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c1046:	68c3      	ldr	r3, [r0, #12]
   c1048:	4718      	bx	r3

000c104a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c104a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c104c:	6800      	ldr	r0, [r0, #0]
   c104e:	f100 0110 	add.w	r1, r0, #16
   c1052:	f7ff fff1 	bl	c1038 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c1056:	bd08      	pop	{r3, pc}

000c1058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c1058:	b538      	push	{r3, r4, r5, lr}
   c105a:	2300      	movs	r3, #0
   c105c:	4604      	mov	r4, r0
   c105e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c1060:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c1062:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c1064:	f7f3 f817 	bl	b4096 <_Znwj>
   c1068:	b128      	cbz	r0, c1076 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c106a:	2301      	movs	r3, #1
   c106c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c1070:	4b02      	ldr	r3, [pc, #8]	; (c107c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c1072:	6003      	str	r3, [r0, #0]
   c1074:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c1076:	6020      	str	r0, [r4, #0]
	}
   c1078:	4620      	mov	r0, r4
   c107a:	bd38      	pop	{r3, r4, r5, pc}
   c107c:	000c7e20 	.word	0x000c7e20

000c1080 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c1080:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c1082:	2300      	movs	r3, #0
   c1084:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c1086:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c1088:	4604      	mov	r4, r0
   c108a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c108c:	b12b      	cbz	r3, c109a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c108e:	2202      	movs	r2, #2
   c1090:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c1092:	68eb      	ldr	r3, [r5, #12]
   c1094:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c1096:	68ab      	ldr	r3, [r5, #8]
   c1098:	60a3      	str	r3, [r4, #8]
    }
   c109a:	4620      	mov	r0, r4
   c109c:	bd38      	pop	{r3, r4, r5, pc}
	...

000c10a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c10a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c10a2:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   c10a4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c10a6:	4668      	mov	r0, sp
   c10a8:	f7ff ff34 	bl	c0f14 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c10ac:	f04f 0302 	mov.w	r3, #2
   c10b0:	e8d4 2f4f 	ldrexb	r2, [r4]
   c10b4:	2a00      	cmp	r2, #0
   c10b6:	d103      	bne.n	c10c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c10b8:	e8c4 3f41 	strexb	r1, r3, [r4]
   c10bc:	2900      	cmp	r1, #0
   c10be:	d1f7      	bne.n	c10b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c10c0:	d125      	bne.n	c110e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c10c2:	f104 050c 	add.w	r5, r4, #12
   c10c6:	4669      	mov	r1, sp
   c10c8:	4628      	mov	r0, r5
   c10ca:	f7ff ff23 	bl	c0f14 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c10ce:	f3bf 8f5b 	dmb	ish
   c10d2:	2301      	movs	r3, #1
   c10d4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c10d6:	2000      	movs	r0, #0
   c10d8:	f104 0308 	add.w	r3, r4, #8
   c10dc:	f3bf 8f5b 	dmb	ish
   c10e0:	e853 6f00 	ldrex	r6, [r3]
   c10e4:	e843 0200 	strex	r2, r0, [r3]
   c10e8:	2a00      	cmp	r2, #0
   c10ea:	d1f9      	bne.n	c10e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c10ec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c10f0:	b16e      	cbz	r6, c110e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c10f2:	f7fc ff69 	bl	bdfc8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c10f6:	b178      	cbz	r0, c1118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c10f8:	4629      	mov	r1, r5
   c10fa:	4630      	mov	r0, r6
   c10fc:	f7ff ff8c 	bl	c1018 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c1100:	4630      	mov	r0, r6
   c1102:	f7f3 f9b3 	bl	b446c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c1106:	2110      	movs	r1, #16
   c1108:	4630      	mov	r0, r6
   c110a:	f7f2 ffca 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   c110e:	4668      	mov	r0, sp
   c1110:	f7ff ff0d 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
    }
   c1114:	b009      	add	sp, #36	; 0x24
   c1116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1118:	4631      	mov	r1, r6
   c111a:	a802      	add	r0, sp, #8
   c111c:	f7ff ffb0 	bl	c1080 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c1120:	68e0      	ldr	r0, [r4, #12]
   c1122:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c1126:	b108      	cbz	r0, c112c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c1128:	f003 fa04 	bl	c4534 <strdup>
        type_(type) {
   c112c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c112e:	2010      	movs	r0, #16
   c1130:	f8ad 501c 	strh.w	r5, [sp, #28]
   c1134:	f7f2 ffaf 	bl	b4096 <_Znwj>
   c1138:	4605      	mov	r5, r0
   c113a:	b1e8      	cbz	r0, c1178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c113c:	2700      	movs	r7, #0
   c113e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c1140:	2018      	movs	r0, #24
   c1142:	f7f2 ffa8 	bl	b4096 <_Znwj>
   c1146:	4604      	mov	r4, r0
   c1148:	b188      	cbz	r0, c116e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c114a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c114c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c114e:	a802      	add	r0, sp, #8
   c1150:	f7fe fa8c 	bl	bf66c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1154:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c1156:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c1158:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c115a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c115c:	9204      	str	r2, [sp, #16]
   c115e:	a906      	add	r1, sp, #24
   c1160:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c1162:	60e3      	str	r3, [r4, #12]
   c1164:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c1168:	9205      	str	r2, [sp, #20]
   c116a:	f7ff fed3 	bl	c0f14 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c116e:	4b08      	ldr	r3, [pc, #32]	; (c1190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c1170:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c1172:	4b08      	ldr	r3, [pc, #32]	; (c1194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c1174:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c1176:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c1178:	a806      	add	r0, sp, #24
   c117a:	f7ff fed8 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c117e:	a802      	add	r0, sp, #8
   c1180:	f7f3 f974 	bl	b446c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c1184:	2200      	movs	r2, #0
   c1186:	4629      	mov	r1, r5
   c1188:	4803      	ldr	r0, [pc, #12]	; (c1198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c118a:	f7fc ff25 	bl	bdfd8 <application_thread_invoke>
   c118e:	e7b7      	b.n	c1100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c1190:	000c102b 	.word	0x000c102b
   c1194:	000c12ad 	.word	0x000c12ad
   c1198:	000c17cd 	.word	0x000c17cd

000c119c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   c119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c11a0:	b08b      	sub	sp, #44	; 0x2c
   c11a2:	4605      	mov	r5, r0
   c11a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   c11a8:	460f      	mov	r7, r1
   c11aa:	4690      	mov	r8, r2
   c11ac:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c11ae:	f7fc ffaf 	bl	be110 <spark_cloud_flag_connected>
   c11b2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   c11b4:	4683      	mov	fp, r0
   c11b6:	bb38      	cbnz	r0, c1208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   c11b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   c11bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c11be:	a905      	add	r1, sp, #20
   c11c0:	4630      	mov	r0, r6
   c11c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   c11c6:	f7ff fea5 	bl	c0f14 <_ZN8particle5ErrorC1EOS0_>
   c11ca:	2014      	movs	r0, #20
   c11cc:	f7f2 ff63 	bl	b4096 <_Znwj>
   c11d0:	4604      	mov	r4, r0
   c11d2:	b148      	cbz	r0, c11e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c11d4:	2302      	movs	r3, #2
   c11d6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c11d8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c11da:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c11de:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c11e0:	4631      	mov	r1, r6
   c11e2:	300c      	adds	r0, #12
   c11e4:	f7ff fe96 	bl	c0f14 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c11e8:	4628      	mov	r0, r5
	: __shared_count(__p)
   c11ea:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c11ec:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c11f0:	f7ff ff32 	bl	c1058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c11f4:	4630      	mov	r0, r6
   c11f6:	f7ff fe9a 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   c11fa:	a805      	add	r0, sp, #20
   c11fc:	f7ff fe97 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   c1200:	4628      	mov	r0, r5
   c1202:	b00b      	add	sp, #44	; 0x2c
   c1204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   c1208:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   c120a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c120c:	2014      	movs	r0, #20
   c120e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c1212:	9307      	str	r3, [sp, #28]
   c1214:	f7f2 ff3f 	bl	b4096 <_Znwj>
   c1218:	4601      	mov	r1, r0
   c121a:	b118      	cbz	r0, c1224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c121c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c1220:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c1222:	7044      	strb	r4, [r0, #1]
   c1224:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c1226:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c1228:	f7ff ff16 	bl	c1058 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c122c:	4b1e      	ldr	r3, [pc, #120]	; (c12a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   c122e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c1230:	2008      	movs	r0, #8
   c1232:	f7f2 ff30 	bl	b4096 <_Znwj>
   c1236:	4604      	mov	r4, r0
   c1238:	b110      	cbz	r0, c1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   c123a:	a903      	add	r1, sp, #12
   c123c:	f7ff fec8 	bl	c0fd0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c1240:	9600      	str	r6, [sp, #0]
   c1242:	fa5f f38a 	uxtb.w	r3, sl
   c1246:	464a      	mov	r2, r9
   c1248:	4641      	mov	r1, r8
   c124a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   c124c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c124e:	f7fc ff67 	bl	be120 <spark_send_event>
   c1252:	b9b8      	cbnz	r0, c1284 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   c1254:	9b03      	ldr	r3, [sp, #12]
   c1256:	785b      	ldrb	r3, [r3, #1]
   c1258:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c125c:	b993      	cbnz	r3, c1284 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   c125e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c1262:	a905      	add	r1, sp, #20
   c1264:	a803      	add	r0, sp, #12
   c1266:	9205      	str	r2, [sp, #20]
   c1268:	f8ad 3018 	strh.w	r3, [sp, #24]
   c126c:	f7ff ff18 	bl	c10a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c1270:	a805      	add	r0, sp, #20
   c1272:	f7ff fe5c 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c1276:	a805      	add	r0, sp, #20
   c1278:	9909      	ldr	r1, [sp, #36]	; 0x24
   c127a:	f7ff feb2 	bl	c0fe2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c127e:	a806      	add	r0, sp, #24
   c1280:	f7f4 fd9a 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c1284:	a903      	add	r1, sp, #12
   c1286:	a805      	add	r0, sp, #20
   c1288:	f7ff fea2 	bl	c0fd0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c128c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c128e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1290:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   c1292:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   c1294:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c1296:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c1298:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c129a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c129c:	f7f4 fd8c 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c12a0:	a804      	add	r0, sp, #16
   c12a2:	f7f4 fd89 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c12a6:	e7ab      	b.n	c1200 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   c12a8:	000c1329 	.word	0x000c1329

000c12ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c12ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c12ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c12b0:	4605      	mov	r5, r0
	switch (__op)
   c12b2:	d103      	bne.n	c12bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c12b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c12b6:	6003      	str	r3, [r0, #0]
      }
   c12b8:	2000      	movs	r0, #0
   c12ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c12bc:	2a02      	cmp	r2, #2
   c12be:	d010      	beq.n	c12e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c12c0:	2a03      	cmp	r2, #3
   c12c2:	d1f9      	bne.n	c12b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c12c4:	6804      	ldr	r4, [r0, #0]
   c12c6:	2c00      	cmp	r4, #0
   c12c8:	d0f6      	beq.n	c12b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c12ca:	f104 0010 	add.w	r0, r4, #16
   c12ce:	f7ff fe2e 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c12d2:	4620      	mov	r0, r4
   c12d4:	f7f3 f8ca 	bl	b446c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c12d8:	2118      	movs	r1, #24
   c12da:	4620      	mov	r0, r4
   c12dc:	f7f2 fee1 	bl	b40a2 <_ZdlPvj>
   c12e0:	e7ea      	b.n	c12b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c12e2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c12e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c12e6:	f7f2 fed6 	bl	b4096 <_Znwj>
   c12ea:	4604      	mov	r4, r0
   c12ec:	b150      	cbz	r0, c1304 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   c12ee:	4631      	mov	r1, r6
   c12f0:	f7ff fec6 	bl	c1080 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c12f4:	6930      	ldr	r0, [r6, #16]
   c12f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c12fa:	b108      	cbz	r0, c1300 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c12fc:	f003 f91a 	bl	c4534 <strdup>
        type_(type) {
   c1300:	6120      	str	r0, [r4, #16]
   c1302:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c1304:	602c      	str	r4, [r5, #0]
	}
   c1306:	e7d7      	b.n	c12b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c1308 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c1308:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c130a:	2300      	movs	r3, #0
   c130c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c130e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c1310:	4604      	mov	r4, r0
   c1312:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c1314:	b12b      	cbz	r3, c1322 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c1316:	2202      	movs	r2, #2
   c1318:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c131a:	68eb      	ldr	r3, [r5, #12]
   c131c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c131e:	68ab      	ldr	r3, [r5, #8]
   c1320:	60a3      	str	r3, [r4, #8]
    }
   c1322:	4620      	mov	r0, r4
   c1324:	bd38      	pop	{r3, r4, r5, pc}
	...

000c1328 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c1328:	b5f0      	push	{r4, r5, r6, r7, lr}
   c132a:	b089      	sub	sp, #36	; 0x24
   c132c:	4604      	mov	r4, r0
   c132e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c1330:	a801      	add	r0, sp, #4
   c1332:	4611      	mov	r1, r2
   c1334:	f7ff fe55 	bl	c0fe2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c1338:	b1a4      	cbz	r4, c1364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c133a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c133c:	b11d      	cbz	r5, c1346 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c133e:	4628      	mov	r0, r5
   c1340:	f003 f8f8 	bl	c4534 <strdup>
   c1344:	4605      	mov	r5, r0
   c1346:	a801      	add	r0, sp, #4
   c1348:	a903      	add	r1, sp, #12
        type_(type) {
   c134a:	9503      	str	r5, [sp, #12]
   c134c:	f8ad 4010 	strh.w	r4, [sp, #16]
   c1350:	f7ff fea6 	bl	c10a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c1354:	a803      	add	r0, sp, #12
   c1356:	f7ff fdea 	bl	c0f2e <_ZN8particle5ErrorD1Ev>
   c135a:	a802      	add	r0, sp, #8
   c135c:	f7f4 fd2c 	bl	b5db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c1360:	b009      	add	sp, #36	; 0x24
   c1362:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c1364:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c1366:	2301      	movs	r3, #1
   c1368:	e8d5 2f4f 	ldrexb	r2, [r5]
   c136c:	2a00      	cmp	r2, #0
   c136e:	d103      	bne.n	c1378 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c1370:	e8c5 3f41 	strexb	r1, r3, [r5]
   c1374:	2900      	cmp	r1, #0
   c1376:	d1f7      	bne.n	c1368 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c1378:	d1ef      	bne.n	c135a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c137a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c137c:	f3bf 8f5b 	dmb	ish
   c1380:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c1382:	1d2b      	adds	r3, r5, #4
   c1384:	f3bf 8f5b 	dmb	ish
   c1388:	e853 6f00 	ldrex	r6, [r3]
   c138c:	e843 4200 	strex	r2, r4, [r3]
   c1390:	2a00      	cmp	r2, #0
   c1392:	d1f9      	bne.n	c1388 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c1394:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c1398:	2e00      	cmp	r6, #0
   c139a:	d0de      	beq.n	c135a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c139c:	4620      	mov	r0, r4
   c139e:	f7fc fe13 	bl	bdfc8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c13a2:	4607      	mov	r7, r0
   c13a4:	b160      	cbz	r0, c13c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c13a6:	f105 010c 	add.w	r1, r5, #12
   c13aa:	4630      	mov	r0, r6
   c13ac:	f7ff fe44 	bl	c1038 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c13b0:	4630      	mov	r0, r6
   c13b2:	f7f3 f85b 	bl	b446c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c13b6:	2110      	movs	r1, #16
   c13b8:	4630      	mov	r0, r6
   c13ba:	f7f2 fe72 	bl	b40a2 <_ZdlPvj>
   c13be:	e7cc      	b.n	c135a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c13c0:	4631      	mov	r1, r6
   c13c2:	a803      	add	r0, sp, #12
   c13c4:	f7ff ffa0 	bl	c1308 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c13c8:	7b2b      	ldrb	r3, [r5, #12]
   c13ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c13ce:	2010      	movs	r0, #16
   c13d0:	f7f2 fe61 	bl	b4096 <_Znwj>
   c13d4:	4605      	mov	r5, r0
   c13d6:	b1d0      	cbz	r0, c140e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c13d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c13da:	2014      	movs	r0, #20
   c13dc:	f7f2 fe5b 	bl	b4096 <_Znwj>
   c13e0:	4604      	mov	r4, r0
   c13e2:	b178      	cbz	r0, c1404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c13e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c13e6:	4601      	mov	r1, r0
   c13e8:	a803      	add	r0, sp, #12
   c13ea:	f7fe f93f 	bl	bf66c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c13ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c13f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c13f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c13f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c13f6:	9205      	str	r2, [sp, #20]
   c13f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c13fa:	60e3      	str	r3, [r4, #12]
   c13fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c1400:	9206      	str	r2, [sp, #24]
   c1402:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c1404:	4b06      	ldr	r3, [pc, #24]	; (c1420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c1406:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c1408:	4b06      	ldr	r3, [pc, #24]	; (c1424 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c140a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c140c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c140e:	a803      	add	r0, sp, #12
   c1410:	f7f3 f82c 	bl	b446c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c1414:	2200      	movs	r2, #0
   c1416:	4629      	mov	r1, r5
   c1418:	4803      	ldr	r0, [pc, #12]	; (c1428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c141a:	f7fc fddd 	bl	bdfd8 <application_thread_invoke>
   c141e:	e7c7      	b.n	c13b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c1420:	000c104b 	.word	0x000c104b
   c1424:	000c142d 	.word	0x000c142d
   c1428:	000c17cd 	.word	0x000c17cd

000c142c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c142c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c142e:	b570      	push	{r4, r5, r6, lr}
   c1430:	4604      	mov	r4, r0
	switch (__op)
   c1432:	d103      	bne.n	c143c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c1434:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c1436:	6003      	str	r3, [r0, #0]
      }
   c1438:	2000      	movs	r0, #0
   c143a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c143c:	2a02      	cmp	r2, #2
   c143e:	d00c      	beq.n	c145a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c1440:	2a03      	cmp	r2, #3
   c1442:	d1f9      	bne.n	c1438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c1444:	6804      	ldr	r4, [r0, #0]
   c1446:	2c00      	cmp	r4, #0
   c1448:	d0f6      	beq.n	c1438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c144a:	4620      	mov	r0, r4
   c144c:	f7f3 f80e 	bl	b446c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c1450:	2114      	movs	r1, #20
   c1452:	4620      	mov	r0, r4
   c1454:	f7f2 fe25 	bl	b40a2 <_ZdlPvj>
   c1458:	e7ee      	b.n	c1438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c145a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c145c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c145e:	f7f2 fe1a 	bl	b4096 <_Znwj>
   c1462:	4605      	mov	r5, r0
   c1464:	b120      	cbz	r0, c1470 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   c1466:	4631      	mov	r1, r6
   c1468:	f7ff ff4e 	bl	c1308 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c146c:	7c33      	ldrb	r3, [r6, #16]
   c146e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c1470:	6025      	str	r5, [r4, #0]
	}
   c1472:	e7e1      	b.n	c1438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000c1474 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c1474:	4770      	bx	lr

000c1476 <_ZN9IPAddressD0Ev>:
   c1476:	b510      	push	{r4, lr}
   c1478:	2118      	movs	r1, #24
   c147a:	4604      	mov	r4, r0
   c147c:	f7f2 fe11 	bl	b40a2 <_ZdlPvj>
   c1480:	4620      	mov	r0, r4
   c1482:	bd10      	pop	{r4, pc}

000c1484 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c1484:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c1486:	7d03      	ldrb	r3, [r0, #20]
   c1488:	2b06      	cmp	r3, #6
{
   c148a:	b08d      	sub	sp, #52	; 0x34
   c148c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c148e:	f100 0704 	add.w	r7, r0, #4
   c1492:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c1496:	d012      	beq.n	c14be <_ZNK9IPAddress7printToER5Print+0x3a>
   c1498:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c149c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c14a0:	220a      	movs	r2, #10
   c14a2:	4630      	mov	r0, r6
   c14a4:	f7fe fba3 	bl	bfbee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c14a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c14aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c14ac:	d019      	beq.n	c14e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c14ae:	2c00      	cmp	r4, #0
   c14b0:	d0f4      	beq.n	c149c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c14b2:	212e      	movs	r1, #46	; 0x2e
   c14b4:	4630      	mov	r0, r6
   c14b6:	f7fe fb7b 	bl	bfbb0 <_ZN5Print5printEc>
   c14ba:	4404      	add	r4, r0
   c14bc:	e7ee      	b.n	c149c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c14be:	232f      	movs	r3, #47	; 0x2f
   c14c0:	466a      	mov	r2, sp
   c14c2:	4639      	mov	r1, r7
   c14c4:	200a      	movs	r0, #10
		buf[0] = 0;
   c14c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c14ca:	f7fc fbcb 	bl	bdc64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c14ce:	4668      	mov	r0, sp
   c14d0:	f003 f84d 	bl	c456e <strlen>
   c14d4:	6833      	ldr	r3, [r6, #0]
   c14d6:	4602      	mov	r2, r0
   c14d8:	68db      	ldr	r3, [r3, #12]
   c14da:	4669      	mov	r1, sp
   c14dc:	4630      	mov	r0, r6
   c14de:	4798      	blx	r3
   c14e0:	4604      	mov	r4, r0
    }
    return n;
}
   c14e2:	4620      	mov	r0, r4
   c14e4:	b00d      	add	sp, #52	; 0x34
   c14e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c14e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c14e8:	b510      	push	{r4, lr}
   c14ea:	4b05      	ldr	r3, [pc, #20]	; (c1500 <_ZN9IPAddressC1Ev+0x18>)
   c14ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c14ee:	2211      	movs	r2, #17
   c14f0:	f840 3b04 	str.w	r3, [r0], #4
   c14f4:	2100      	movs	r1, #0
   c14f6:	f002 ffaf 	bl	c4458 <memset>
}
   c14fa:	4620      	mov	r0, r4
   c14fc:	bd10      	pop	{r4, pc}
   c14fe:	bf00      	nop
   c1500:	000c7e3c 	.word	0x000c7e3c

000c1504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c1504:	4603      	mov	r3, r0
   c1506:	4a07      	ldr	r2, [pc, #28]	; (c1524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c1508:	b510      	push	{r4, lr}
   c150a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c150e:	f101 0210 	add.w	r2, r1, #16
   c1512:	f851 4b04 	ldr.w	r4, [r1], #4
   c1516:	f843 4b04 	str.w	r4, [r3], #4
   c151a:	4291      	cmp	r1, r2
   c151c:	d1f9      	bne.n	c1512 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c151e:	780a      	ldrb	r2, [r1, #0]
   c1520:	701a      	strb	r2, [r3, #0]
}
   c1522:	bd10      	pop	{r4, pc}
   c1524:	000c7e3c 	.word	0x000c7e3c

000c1528 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c1528:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c152a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c152e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c1532:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c1536:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c153a:	2304      	movs	r3, #4
   c153c:	6041      	str	r1, [r0, #4]
   c153e:	7503      	strb	r3, [r0, #20]
}
   c1540:	bd10      	pop	{r4, pc}
	...

000c1544 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c1544:	b507      	push	{r0, r1, r2, lr}
   c1546:	4b06      	ldr	r3, [pc, #24]	; (c1560 <_ZN9IPAddressC1EPKh+0x1c>)
   c1548:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c154a:	78cb      	ldrb	r3, [r1, #3]
   c154c:	9300      	str	r3, [sp, #0]
   c154e:	788b      	ldrb	r3, [r1, #2]
   c1550:	784a      	ldrb	r2, [r1, #1]
   c1552:	7809      	ldrb	r1, [r1, #0]
   c1554:	f7ff ffe8 	bl	c1528 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c1558:	b003      	add	sp, #12
   c155a:	f85d fb04 	ldr.w	pc, [sp], #4
   c155e:	bf00      	nop
   c1560:	000c7e3c 	.word	0x000c7e3c

000c1564 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1564:	7441      	strb	r1, [r0, #17]
}
   c1566:	4770      	bx	lr

000c1568 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1568:	4770      	bx	lr

000c156a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c156a:	4770      	bx	lr

000c156c <_ZN9USBSerial4readEv>:
{
   c156c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c156e:	2100      	movs	r1, #0
   c1570:	7c00      	ldrb	r0, [r0, #16]
   c1572:	f7fc fccf 	bl	bdf14 <HAL_USB_USART_Receive_Data>
}
   c1576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c157a:	bd08      	pop	{r3, pc}

000c157c <_ZN9USBSerial4peekEv>:
{
   c157c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c157e:	2101      	movs	r1, #1
   c1580:	7c00      	ldrb	r0, [r0, #16]
   c1582:	f7fc fcc7 	bl	bdf14 <HAL_USB_USART_Receive_Data>
}
   c1586:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c158a:	bd08      	pop	{r3, pc}

000c158c <_ZN9USBSerial17availableForWriteEv>:
{
   c158c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c158e:	7c00      	ldrb	r0, [r0, #16]
   c1590:	f7fc fcb8 	bl	bdf04 <HAL_USB_USART_Available_Data_For_Write>
}
   c1594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1598:	bd08      	pop	{r3, pc}

000c159a <_ZN9USBSerial9availableEv>:
{
   c159a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c159c:	7c00      	ldrb	r0, [r0, #16]
   c159e:	f7fc fca9 	bl	bdef4 <HAL_USB_USART_Available_Data>
}
   c15a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c15a6:	bd08      	pop	{r3, pc}

000c15a8 <_ZN9USBSerial5writeEh>:
{
   c15a8:	b513      	push	{r0, r1, r4, lr}
   c15aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c15ac:	7c00      	ldrb	r0, [r0, #16]
{
   c15ae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c15b0:	f7fc fca8 	bl	bdf04 <HAL_USB_USART_Available_Data_For_Write>
   c15b4:	2800      	cmp	r0, #0
   c15b6:	9901      	ldr	r1, [sp, #4]
   c15b8:	dc01      	bgt.n	c15be <_ZN9USBSerial5writeEh+0x16>
   c15ba:	7c60      	ldrb	r0, [r4, #17]
   c15bc:	b120      	cbz	r0, c15c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c15be:	7c20      	ldrb	r0, [r4, #16]
   c15c0:	f7fc fcb0 	bl	bdf24 <HAL_USB_USART_Send_Data>
   c15c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c15c8:	b002      	add	sp, #8
   c15ca:	bd10      	pop	{r4, pc}

000c15cc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c15cc:	7c00      	ldrb	r0, [r0, #16]
   c15ce:	f7fc bcb1 	b.w	bdf34 <HAL_USB_USART_Flush_Data>

000c15d2 <_ZN9USBSerialD0Ev>:
   c15d2:	b510      	push	{r4, lr}
   c15d4:	2114      	movs	r1, #20
   c15d6:	4604      	mov	r4, r0
   c15d8:	f7f2 fd63 	bl	b40a2 <_ZdlPvj>
   c15dc:	4620      	mov	r0, r4
   c15de:	bd10      	pop	{r4, pc}

000c15e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c15e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c15e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c15e6:	4604      	mov	r4, r0
   c15e8:	4608      	mov	r0, r1
   c15ea:	2100      	movs	r1, #0
   c15ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c15f0:	4b04      	ldr	r3, [pc, #16]	; (c1604 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c15f2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c15f4:	2301      	movs	r3, #1
  _serial = serial;
   c15f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c15f8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c15fa:	4611      	mov	r1, r2
   c15fc:	f7fc fc62 	bl	bdec4 <HAL_USB_USART_Init>
}
   c1600:	4620      	mov	r0, r4
   c1602:	bd10      	pop	{r4, pc}
   c1604:	000c7e50 	.word	0x000c7e50

000c1608 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1608:	7c00      	ldrb	r0, [r0, #16]
   c160a:	2200      	movs	r2, #0
   c160c:	f7fc bc62 	b.w	bded4 <HAL_USB_USART_Begin>

000c1610 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1610:	7c00      	ldrb	r0, [r0, #16]
   c1612:	f7fc bc67 	b.w	bdee4 <HAL_USB_USART_End>

000c1616 <_Z19acquireSerialBufferv>:
{
   c1616:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1618:	2214      	movs	r2, #20
{
   c161a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c161c:	2100      	movs	r1, #0
   c161e:	f002 ff1b 	bl	c4458 <memset>
}
   c1622:	4620      	mov	r0, r4
   c1624:	bd10      	pop	{r4, pc}
	...

000c1628 <_Z16_fetch_usbserialv>:
{
   c1628:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c162a:	4c0f      	ldr	r4, [pc, #60]	; (c1668 <_Z16_fetch_usbserialv+0x40>)
{
   c162c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c162e:	a803      	add	r0, sp, #12
   c1630:	f7ff fff1 	bl	c1616 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1634:	7821      	ldrb	r1, [r4, #0]
   c1636:	f3bf 8f5b 	dmb	ish
   c163a:	f011 0101 	ands.w	r1, r1, #1
   c163e:	d10f      	bne.n	c1660 <_Z16_fetch_usbserialv+0x38>
   c1640:	4620      	mov	r0, r4
   c1642:	9101      	str	r1, [sp, #4]
   c1644:	f7f2 fd3c 	bl	b40c0 <__cxa_guard_acquire>
   c1648:	9901      	ldr	r1, [sp, #4]
   c164a:	b148      	cbz	r0, c1660 <_Z16_fetch_usbserialv+0x38>
   c164c:	aa03      	add	r2, sp, #12
   c164e:	4807      	ldr	r0, [pc, #28]	; (c166c <_Z16_fetch_usbserialv+0x44>)
   c1650:	f7ff ffc6 	bl	c15e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1654:	4620      	mov	r0, r4
   c1656:	f7f2 fd38 	bl	b40ca <__cxa_guard_release>
   c165a:	4805      	ldr	r0, [pc, #20]	; (c1670 <_Z16_fetch_usbserialv+0x48>)
   c165c:	f002 feae 	bl	c43bc <atexit>
	return _usbserial;
}
   c1660:	4802      	ldr	r0, [pc, #8]	; (c166c <_Z16_fetch_usbserialv+0x44>)
   c1662:	b008      	add	sp, #32
   c1664:	bd10      	pop	{r4, pc}
   c1666:	bf00      	nop
   c1668:	2003e6d8 	.word	0x2003e6d8
   c166c:	2003e6dc 	.word	0x2003e6dc
   c1670:	000c1569 	.word	0x000c1569

000c1674 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   c1674:	f7fc b9dc 	b.w	bda30 <HAL_Interrupts_Disable_All>

000c1678 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   c1678:	f7fc b9d2 	b.w	bda20 <HAL_Interrupts_Enable_All>

000c167c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c167c:	2200      	movs	r2, #0
   c167e:	6840      	ldr	r0, [r0, #4]
   c1680:	4611      	mov	r1, r2
   c1682:	f7fc bced 	b.w	be060 <network_ready>

000c1686 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c1686:	2200      	movs	r2, #0
   c1688:	6840      	ldr	r0, [r0, #4]
   c168a:	4611      	mov	r1, r2
   c168c:	f7fc bd08 	b.w	be0a0 <network_listening>

000c1690 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c1690:	2200      	movs	r2, #0
   c1692:	6840      	ldr	r0, [r0, #4]
   c1694:	4611      	mov	r1, r2
   c1696:	f7fc bd13 	b.w	be0c0 <network_get_listen_timeout>

000c169a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c169a:	6840      	ldr	r0, [r0, #4]
   c169c:	2200      	movs	r2, #0
   c169e:	f7fc bd07 	b.w	be0b0 <network_set_listen_timeout>

000c16a2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c16a2:	6840      	ldr	r0, [r0, #4]
   c16a4:	2200      	movs	r2, #0
   c16a6:	f081 0101 	eor.w	r1, r1, #1
   c16aa:	f7fc bcf1 	b.w	be090 <network_listen>

000c16ae <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c16ae:	2300      	movs	r3, #0
   c16b0:	6840      	ldr	r0, [r0, #4]
   c16b2:	461a      	mov	r2, r3
   c16b4:	4619      	mov	r1, r3
   c16b6:	f7fc bce3 	b.w	be080 <network_off>

000c16ba <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c16ba:	2300      	movs	r3, #0
   c16bc:	6840      	ldr	r0, [r0, #4]
   c16be:	461a      	mov	r2, r3
   c16c0:	4619      	mov	r1, r3
   c16c2:	f7fc bcd5 	b.w	be070 <network_on>

000c16c6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c16c6:	2200      	movs	r2, #0
   c16c8:	6840      	ldr	r0, [r0, #4]
   c16ca:	4611      	mov	r1, r2
   c16cc:	f7fc bcb8 	b.w	be040 <network_connecting>

000c16d0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c16d0:	6840      	ldr	r0, [r0, #4]
   c16d2:	2200      	movs	r2, #0
   c16d4:	2102      	movs	r1, #2
   c16d6:	f7fc bcbb 	b.w	be050 <network_disconnect>

000c16da <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c16da:	2300      	movs	r3, #0
   c16dc:	6840      	ldr	r0, [r0, #4]
   c16de:	461a      	mov	r2, r3
   c16e0:	f7fc bca6 	b.w	be030 <network_connect>

000c16e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c16e4:	4b08      	ldr	r3, [pc, #32]	; (c1708 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c16e6:	b510      	push	{r4, lr}
   c16e8:	2428      	movs	r4, #40	; 0x28
   c16ea:	4622      	mov	r2, r4
   c16ec:	4618      	mov	r0, r3
   c16ee:	2100      	movs	r1, #0
   c16f0:	f002 feb2 	bl	c4458 <memset>
   c16f4:	4b05      	ldr	r3, [pc, #20]	; (c170c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c16f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c16f8:	f04f 32ff 	mov.w	r2, #4294967295
   c16fc:	6042      	str	r2, [r0, #4]
   c16fe:	2204      	movs	r2, #4
   c1700:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c1702:	4a03      	ldr	r2, [pc, #12]	; (c1710 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c1704:	601a      	str	r2, [r3, #0]
   c1706:	bd10      	pop	{r4, pc}
   c1708:	2003e6f8 	.word	0x2003e6f8
   c170c:	2003e6f0 	.word	0x2003e6f0
   c1710:	000c7e80 	.word	0x000c7e80

000c1714 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1714:	4770      	bx	lr

000c1716 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1716:	7441      	strb	r1, [r0, #17]
}
   c1718:	4770      	bx	lr

000c171a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c171a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c171c:	7c00      	ldrb	r0, [r0, #16]
   c171e:	f7fc fae1 	bl	bdce4 <hal_usart_available_data_for_write>
}
   c1722:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1726:	bd08      	pop	{r3, pc}

000c1728 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1728:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c172a:	7c00      	ldrb	r0, [r0, #16]
   c172c:	f7fc fab2 	bl	bdc94 <hal_usart_available>
}
   c1730:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1734:	bd08      	pop	{r3, pc}

000c1736 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1736:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1738:	7c00      	ldrb	r0, [r0, #16]
   c173a:	f7fc fabb 	bl	bdcb4 <hal_usart_peek>
}
   c173e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1742:	bd08      	pop	{r3, pc}

000c1744 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1744:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1746:	7c00      	ldrb	r0, [r0, #16]
   c1748:	f7fc faac 	bl	bdca4 <hal_usart_read>
}
   c174c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1750:	bd08      	pop	{r3, pc}

000c1752 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1752:	7c00      	ldrb	r0, [r0, #16]
   c1754:	f7fc bab6 	b.w	bdcc4 <hal_usart_flush>

000c1758 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1758:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c175a:	7c45      	ldrb	r5, [r0, #17]
{
   c175c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c175e:	b12d      	cbz	r5, c176c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1760:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1762:	b003      	add	sp, #12
   c1764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1768:	f7fc ba8c 	b.w	bdc84 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c176c:	7c00      	ldrb	r0, [r0, #16]
   c176e:	9101      	str	r1, [sp, #4]
   c1770:	f7fc fab8 	bl	bdce4 <hal_usart_available_data_for_write>
   c1774:	2800      	cmp	r0, #0
   c1776:	9901      	ldr	r1, [sp, #4]
   c1778:	dcf2      	bgt.n	c1760 <_ZN11USARTSerial5writeEh+0x8>
}
   c177a:	4628      	mov	r0, r5
   c177c:	b003      	add	sp, #12
   c177e:	bd30      	pop	{r4, r5, pc}

000c1780 <_ZN11USARTSerialD0Ev>:
   c1780:	b510      	push	{r4, lr}
   c1782:	2114      	movs	r1, #20
   c1784:	4604      	mov	r4, r0
   c1786:	f7f2 fc8c 	bl	b40a2 <_ZdlPvj>
   c178a:	4620      	mov	r0, r4
   c178c:	bd10      	pop	{r4, pc}
	...

000c1790 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1790:	b510      	push	{r4, lr}
   c1792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1796:	4604      	mov	r4, r0
   c1798:	4608      	mov	r0, r1
   c179a:	4611      	mov	r1, r2
   c179c:	2200      	movs	r2, #0
   c179e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c17a2:	4b04      	ldr	r3, [pc, #16]	; (c17b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c17a4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c17a6:	2301      	movs	r3, #1
  _serial = serial;
   c17a8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c17aa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c17ac:	f7fc faaa 	bl	bdd04 <hal_usart_init_ex>
}
   c17b0:	4620      	mov	r0, r4
   c17b2:	bd10      	pop	{r4, pc}
   c17b4:	000c7ebc 	.word	0x000c7ebc

000c17b8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c17b8:	7c00      	ldrb	r0, [r0, #16]
   c17ba:	2300      	movs	r3, #0
   c17bc:	f7fc ba9a 	b.w	bdcf4 <hal_usart_begin_config>

000c17c0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c17c0:	2200      	movs	r2, #0
   c17c2:	f7ff bff9 	b.w	c17b8 <_ZN11USARTSerial5beginEmm>

000c17c6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c17c6:	7c00      	ldrb	r0, [r0, #16]
   c17c8:	f7fc ba54 	b.w	bdc74 <hal_usart_end>

000c17cc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c17cc:	b510      	push	{r4, lr}
      if (_M_empty())
   c17ce:	6883      	ldr	r3, [r0, #8]
   c17d0:	4604      	mov	r4, r0
   c17d2:	b90b      	cbnz	r3, c17d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c17d4:	f000 fc18 	bl	c2008 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c17d8:	68c3      	ldr	r3, [r0, #12]
   c17da:	4798      	blx	r3
      if (_M_manager)
   c17dc:	68a3      	ldr	r3, [r4, #8]
   c17de:	b11b      	cbz	r3, c17e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c17e0:	2203      	movs	r2, #3
   c17e2:	4621      	mov	r1, r4
   c17e4:	4620      	mov	r0, r4
   c17e6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c17e8:	4620      	mov	r0, r4
   c17ea:	2110      	movs	r1, #16
}
   c17ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c17f0:	f7f2 bc57 	b.w	b40a2 <_ZdlPvj>

000c17f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c17f4:	4770      	bx	lr

000c17f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c17f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c17f8:	4606      	mov	r6, r0
   c17fa:	4615      	mov	r5, r2
   c17fc:	460c      	mov	r4, r1
   c17fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c1800:	42bc      	cmp	r4, r7
   c1802:	d006      	beq.n	c1812 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c1804:	6833      	ldr	r3, [r6, #0]
   c1806:	f814 1b01 	ldrb.w	r1, [r4], #1
   c180a:	689b      	ldr	r3, [r3, #8]
   c180c:	4630      	mov	r0, r6
   c180e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c1810:	e7f6      	b.n	c1800 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c1812:	4628      	mov	r0, r5
   c1814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1816 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c1816:	7c00      	ldrb	r0, [r0, #16]
   c1818:	2200      	movs	r2, #0
   c181a:	f7fc ba9b 	b.w	bdd54 <hal_i2c_write>

000c181e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c181e:	7c00      	ldrb	r0, [r0, #16]
   c1820:	2100      	movs	r1, #0
   c1822:	f7fc ba9f 	b.w	bdd64 <hal_i2c_available>

000c1826 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c1826:	7c00      	ldrb	r0, [r0, #16]
   c1828:	2100      	movs	r1, #0
   c182a:	f7fc baa3 	b.w	bdd74 <hal_i2c_read>

000c182e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c182e:	7c00      	ldrb	r0, [r0, #16]
   c1830:	2100      	movs	r1, #0
   c1832:	f7fc baa7 	b.w	bdd84 <hal_i2c_peek>

000c1836 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c1836:	7c00      	ldrb	r0, [r0, #16]
   c1838:	2100      	movs	r1, #0
   c183a:	f7fc baab 	b.w	bdd94 <hal_i2c_flush>

000c183e <_ZN7TwoWireD0Ev>:
   c183e:	b510      	push	{r4, lr}
   c1840:	2114      	movs	r1, #20
   c1842:	4604      	mov	r4, r0
   c1844:	f7f2 fc2d 	bl	b40a2 <_ZdlPvj>
   c1848:	4620      	mov	r0, r4
   c184a:	bd10      	pop	{r4, pc}

000c184c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c184c:	b510      	push	{r4, lr}
   c184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1852:	4604      	mov	r4, r0
   c1854:	4608      	mov	r0, r1
   c1856:	2100      	movs	r1, #0
   c1858:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c185c:	4b03      	ldr	r3, [pc, #12]	; (c186c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   c185e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   c1860:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   c1862:	4611      	mov	r1, r2
   c1864:	f7fc faa6 	bl	bddb4 <hal_i2c_init>
}
   c1868:	4620      	mov	r0, r4
   c186a:	bd10      	pop	{r4, pc}
   c186c:	000c7eec 	.word	0x000c7eec

000c1870 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c1870:	7c00      	ldrb	r0, [r0, #16]
   c1872:	2200      	movs	r2, #0
   c1874:	f7fc ba4e 	b.w	bdd14 <hal_i2c_set_speed>

000c1878 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c1878:	2300      	movs	r3, #0
   c187a:	7c00      	ldrb	r0, [r0, #16]
   c187c:	461a      	mov	r2, r3
   c187e:	4619      	mov	r1, r3
   c1880:	f7fc ba50 	b.w	bdd24 <hal_i2c_begin>

000c1884 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c1884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c1886:	2200      	movs	r2, #0
   c1888:	2314      	movs	r3, #20
   c188a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c188e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c1892:	780b      	ldrb	r3, [r1, #0]
   c1894:	f88d 3008 	strb.w	r3, [sp, #8]
   c1898:	684b      	ldr	r3, [r1, #4]
   c189a:	9303      	str	r3, [sp, #12]
   c189c:	68cb      	ldr	r3, [r1, #12]
   c189e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c18a0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c18a2:	7a0b      	ldrb	r3, [r1, #8]
   c18a4:	9305      	str	r3, [sp, #20]
   c18a6:	a901      	add	r1, sp, #4
   c18a8:	f7fc fa8c 	bl	bddc4 <hal_i2c_request_ex>
}
   c18ac:	b007      	add	sp, #28
   c18ae:	f85d fb04 	ldr.w	pc, [sp], #4

000c18b2 <_ZN7TwoWire11requestFromEhjh>:
{
   c18b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c18b4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c18b6:	f88d 1000 	strb.w	r1, [sp]
   c18ba:	f04f 0164 	mov.w	r1, #100	; 0x64
   c18be:	9103      	str	r1, [sp, #12]
   c18c0:	bf18      	it	ne
   c18c2:	2301      	movne	r3, #1
   c18c4:	4669      	mov	r1, sp
    size_ = size;
   c18c6:	9201      	str	r2, [sp, #4]
   c18c8:	f88d 3008 	strb.w	r3, [sp, #8]
   c18cc:	f7ff ffda 	bl	c1884 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c18d0:	b005      	add	sp, #20
   c18d2:	f85d fb04 	ldr.w	pc, [sp], #4

000c18d6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c18d6:	2301      	movs	r3, #1
   c18d8:	f7ff bfeb 	b.w	c18b2 <_ZN7TwoWire11requestFromEhjh>

000c18dc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c18dc:	7c00      	ldrb	r0, [r0, #16]
   c18de:	2200      	movs	r2, #0
   c18e0:	f7fc ba28 	b.w	bdd34 <hal_i2c_begin_transmission>

000c18e4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c18e4:	b2c9      	uxtb	r1, r1
   c18e6:	f7ff bff9 	b.w	c18dc <_ZN7TwoWire17beginTransmissionEh>

000c18ea <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c18ea:	7c00      	ldrb	r0, [r0, #16]
   c18ec:	2200      	movs	r2, #0
   c18ee:	f7fc ba29 	b.w	bdd44 <hal_i2c_end_transmission>

000c18f2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c18f2:	2101      	movs	r1, #1
   c18f4:	f7ff bff9 	b.w	c18ea <_ZN7TwoWire15endTransmissionEh>

000c18f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c18f8:	2300      	movs	r3, #0
   c18fa:	6840      	ldr	r0, [r0, #4]
   c18fc:	461a      	mov	r2, r3
   c18fe:	f7fc bb97 	b.w	be030 <network_connect>

000c1902 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c1902:	6840      	ldr	r0, [r0, #4]
   c1904:	2200      	movs	r2, #0
   c1906:	2102      	movs	r1, #2
   c1908:	f7fc bba2 	b.w	be050 <network_disconnect>

000c190c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c190c:	2200      	movs	r2, #0
   c190e:	6840      	ldr	r0, [r0, #4]
   c1910:	4611      	mov	r1, r2
   c1912:	f7fc bb95 	b.w	be040 <network_connecting>

000c1916 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c1916:	2200      	movs	r2, #0
   c1918:	6840      	ldr	r0, [r0, #4]
   c191a:	4611      	mov	r1, r2
   c191c:	f7fc bba0 	b.w	be060 <network_ready>

000c1920 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c1920:	2300      	movs	r3, #0
   c1922:	6840      	ldr	r0, [r0, #4]
   c1924:	461a      	mov	r2, r3
   c1926:	4619      	mov	r1, r3
   c1928:	f7fc bba2 	b.w	be070 <network_on>

000c192c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c192c:	2300      	movs	r3, #0
   c192e:	6840      	ldr	r0, [r0, #4]
   c1930:	461a      	mov	r2, r3
   c1932:	4619      	mov	r1, r3
   c1934:	f7fc bba4 	b.w	be080 <network_off>

000c1938 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c1938:	6840      	ldr	r0, [r0, #4]
   c193a:	2100      	movs	r1, #0
   c193c:	f7fc bbc8 	b.w	be0d0 <network_is_on>

000c1940 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1940:	6840      	ldr	r0, [r0, #4]
   c1942:	2100      	movs	r1, #0
   c1944:	f7fc bbcc 	b.w	be0e0 <network_is_off>

000c1948 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1948:	6840      	ldr	r0, [r0, #4]
   c194a:	2200      	movs	r2, #0
   c194c:	f081 0101 	eor.w	r1, r1, #1
   c1950:	f7fc bb9e 	b.w	be090 <network_listen>

000c1954 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c1954:	6840      	ldr	r0, [r0, #4]
   c1956:	2200      	movs	r2, #0
   c1958:	f7fc bbaa 	b.w	be0b0 <network_set_listen_timeout>

000c195c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c195c:	2200      	movs	r2, #0
   c195e:	6840      	ldr	r0, [r0, #4]
   c1960:	4611      	mov	r1, r2
   c1962:	f7fc bbad 	b.w	be0c0 <network_get_listen_timeout>

000c1966 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c1966:	2200      	movs	r2, #0
   c1968:	6840      	ldr	r0, [r0, #4]
   c196a:	4611      	mov	r1, r2
   c196c:	f7fc bb98 	b.w	be0a0 <network_listening>

000c1970 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1974:	b095      	sub	sp, #84	; 0x54
   c1976:	4614      	mov	r4, r2
   c1978:	460d      	mov	r5, r1
   c197a:	4607      	mov	r7, r0
    IPAddress addr;
   c197c:	f7ff fdb4 	bl	c14e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1980:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c1982:	221c      	movs	r2, #28
   c1984:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1986:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1988:	f002 fd66 	bl	c4458 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c198c:	2340      	movs	r3, #64	; 0x40
   c198e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1990:	4620      	mov	r0, r4
   c1992:	466b      	mov	r3, sp
   c1994:	aa0c      	add	r2, sp, #48	; 0x30
   c1996:	2100      	movs	r1, #0
   c1998:	f7fc f81a 	bl	bd9d0 <netdb_getaddrinfo>
    if (!r) {
   c199c:	4604      	mov	r4, r0
   c199e:	2800      	cmp	r0, #0
   c19a0:	d14b      	bne.n	c1a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c19a2:	4602      	mov	r2, r0
   c19a4:	2101      	movs	r1, #1
   c19a6:	6868      	ldr	r0, [r5, #4]
   c19a8:	f7fc fb5a 	bl	be060 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c19ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c19ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c19b0:	4622      	mov	r2, r4
   c19b2:	6868      	ldr	r0, [r5, #4]
   c19b4:	f7fc fb54 	bl	be060 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c19b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c19ba:	4681      	mov	r9, r0
        bool ok = false;
   c19bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c19be:	2e00      	cmp	r6, #0
   c19c0:	d03b      	beq.n	c1a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c19c2:	2900      	cmp	r1, #0
   c19c4:	d139      	bne.n	c1a3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c19c6:	6873      	ldr	r3, [r6, #4]
   c19c8:	2b02      	cmp	r3, #2
   c19ca:	d003      	beq.n	c19d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c19cc:	2b0a      	cmp	r3, #10
   c19ce:	d011      	beq.n	c19f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c19d0:	69f6      	ldr	r6, [r6, #28]
   c19d2:	e7f4      	b.n	c19be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c19d4:	f1b8 0f00 	cmp.w	r8, #0
   c19d8:	d0fa      	beq.n	c19d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c19da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c19dc:	a806      	add	r0, sp, #24
   c19de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c19e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c19e2:	f7ff fdaf 	bl	c1544 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c19e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c19e8:	1d3c      	adds	r4, r7, #4
   c19ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c19ec:	682b      	ldr	r3, [r5, #0]
   c19ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c19f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c19f2:	e7ed      	b.n	c19d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c19f4:	f1b9 0f00 	cmp.w	r9, #0
   c19f8:	d0ea      	beq.n	c19d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c19fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c19fc:	2210      	movs	r2, #16
   c19fe:	a801      	add	r0, sp, #4
   c1a00:	f002 fd2a 	bl	c4458 <memset>
                    a.v = 6;
   c1a04:	2306      	movs	r3, #6
   c1a06:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1a0a:	ad01      	add	r5, sp, #4
   c1a0c:	f104 0308 	add.w	r3, r4, #8
   c1a10:	3418      	adds	r4, #24
   c1a12:	6818      	ldr	r0, [r3, #0]
   c1a14:	6859      	ldr	r1, [r3, #4]
   c1a16:	462a      	mov	r2, r5
   c1a18:	c203      	stmia	r2!, {r0, r1}
   c1a1a:	3308      	adds	r3, #8
   c1a1c:	42a3      	cmp	r3, r4
   c1a1e:	4615      	mov	r5, r2
   c1a20:	d1f7      	bne.n	c1a12 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c1a22:	a901      	add	r1, sp, #4
   c1a24:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c1a26:	ad07      	add	r5, sp, #28
   c1a28:	f7ff fd6c 	bl	c1504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c1a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1a2e:	1d3c      	adds	r4, r7, #4
   c1a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1a32:	682b      	ldr	r3, [r5, #0]
   c1a34:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1a36:	4649      	mov	r1, r9
   c1a38:	e7ca      	b.n	c19d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c1a3a:	9800      	ldr	r0, [sp, #0]
   c1a3c:	f7fb ffc0 	bl	bd9c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1a40:	4638      	mov	r0, r7
   c1a42:	b015      	add	sp, #84	; 0x54
   c1a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1a48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1a48:	4b02      	ldr	r3, [pc, #8]	; (c1a54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c1a4a:	4a03      	ldr	r2, [pc, #12]	; (c1a58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c1a4c:	601a      	str	r2, [r3, #0]
   c1a4e:	2200      	movs	r2, #0
   c1a50:	605a      	str	r2, [r3, #4]

} // spark
   c1a52:	4770      	bx	lr
   c1a54:	2003e720 	.word	0x2003e720
   c1a58:	000c7f14 	.word	0x000c7f14

000c1a5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c1a5c:	f100 0310 	add.w	r3, r0, #16
   c1a60:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c1a62:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c1a66:	2901      	cmp	r1, #1
   c1a68:	4618      	mov	r0, r3
   c1a6a:	d108      	bne.n	c1a7e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c1a6c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c1a70:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c1a74:	3a01      	subs	r2, #1
   c1a76:	f103 0310 	add.w	r3, r3, #16
   c1a7a:	d1f2      	bne.n	c1a62 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c1a7c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c1a7e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c1a80:	bf04      	itt	eq
   c1a82:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c1a86:	1852      	addeq	r2, r2, r1
   c1a88:	e7f4      	b.n	c1a74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c1a8a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c1a8a:	b40e      	push	{r1, r2, r3}
   c1a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1a8e:	b088      	sub	sp, #32
   c1a90:	af00      	add	r7, sp, #0
   c1a92:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1a96:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1a98:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1a9c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1a9e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1aa0:	462b      	mov	r3, r5
   c1aa2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c1aa4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1aa6:	f7fc fb8b 	bl	be1c0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c1aaa:	280f      	cmp	r0, #15
   c1aac:	687a      	ldr	r2, [r7, #4]
   c1aae:	d91a      	bls.n	c1ae6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c1ab0:	f100 0308 	add.w	r3, r0, #8
   c1ab4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c1ab8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c1aba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1abe:	1c41      	adds	r1, r0, #1
   c1ac0:	462b      	mov	r3, r5
   c1ac2:	4668      	mov	r0, sp
        va_start(args, fmt);
   c1ac4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1ac6:	f7fc fb7b 	bl	be1c0 <vsnprintf>
        if (n > 0) {
   c1aca:	1e02      	subs	r2, r0, #0
   c1acc:	dd04      	ble.n	c1ad8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c1ace:	6823      	ldr	r3, [r4, #0]
   c1ad0:	4669      	mov	r1, sp
   c1ad2:	689b      	ldr	r3, [r3, #8]
   c1ad4:	4620      	mov	r0, r4
   c1ad6:	4798      	blx	r3
   c1ad8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c1ada:	3720      	adds	r7, #32
   c1adc:	46bd      	mov	sp, r7
   c1ade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1ae2:	b003      	add	sp, #12
   c1ae4:	4770      	bx	lr
    } else if (n > 0) {
   c1ae6:	2800      	cmp	r0, #0
   c1ae8:	d0f7      	beq.n	c1ada <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c1aea:	6823      	ldr	r3, [r4, #0]
   c1aec:	4602      	mov	r2, r0
   c1aee:	689b      	ldr	r3, [r3, #8]
   c1af0:	f107 0110 	add.w	r1, r7, #16
   c1af4:	4620      	mov	r0, r4
   c1af6:	4798      	blx	r3
}
   c1af8:	e7ef      	b.n	c1ada <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c1afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1afa:	b538      	push	{r3, r4, r5, lr}
   c1afc:	680b      	ldr	r3, [r1, #0]
   c1afe:	6003      	str	r3, [r0, #0]
   c1b00:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c1b02:	6843      	ldr	r3, [r0, #4]
   c1b04:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1b06:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c1b08:	d008      	beq.n	c1b1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c1b0a:	b115      	cbz	r5, c1b12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c1b0c:	686b      	ldr	r3, [r5, #4]
   c1b0e:	3301      	adds	r3, #1
   c1b10:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c1b12:	6860      	ldr	r0, [r4, #4]
   c1b14:	b108      	cbz	r0, c1b1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c1b16:	f7fc ff2c 	bl	be972 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c1b1a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1b1c:	bd38      	pop	{r3, r4, r5, pc}

000c1b1e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c1b1e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c1b20:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c1b22:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c1b26:	689b      	ldr	r3, [r3, #8]
   c1b28:	2201      	movs	r2, #1
   c1b2a:	f10d 0107 	add.w	r1, sp, #7
   c1b2e:	4798      	blx	r3
}
   c1b30:	b003      	add	sp, #12
   c1b32:	f85d fb04 	ldr.w	pc, [sp], #4

000c1b36 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1b36:	460b      	mov	r3, r1
   c1b38:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c1b3a:	2200      	movs	r2, #0
   c1b3c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c1b3e:	e9c0 2200 	strd	r2, r2, [r0]
   c1b42:	4604      	mov	r4, r0
        t_ = t;
   c1b44:	6083      	str	r3, [r0, #8]
    if (t) {
   c1b46:	b90b      	cbnz	r3, c1b4c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c1b48:	4620      	mov	r0, r4
   c1b4a:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c1b4c:	f7ff ffd5 	bl	c1afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c1b50:	e7fa      	b.n	c1b48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c1b52 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c1b52:	6883      	ldr	r3, [r0, #8]
   c1b54:	b1eb      	cbz	r3, c1b92 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c1b56:	781a      	ldrb	r2, [r3, #0]
   c1b58:	2a03      	cmp	r2, #3
   c1b5a:	d81a      	bhi.n	c1b92 <_ZNK5spark9JSONValue4typeEv+0x40>
   c1b5c:	e8df f002 	tbb	[pc, r2]
   c1b60:	1b021704 	.word	0x1b021704
   c1b64:	2005      	movs	r0, #5
   c1b66:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c1b68:	6802      	ldr	r2, [r0, #0]
   c1b6a:	685b      	ldr	r3, [r3, #4]
   c1b6c:	6852      	ldr	r2, [r2, #4]
   c1b6e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c1b70:	282d      	cmp	r0, #45	; 0x2d
   c1b72:	d012      	beq.n	c1b9a <_ZNK5spark9JSONValue4typeEv+0x48>
   c1b74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c1b78:	2b09      	cmp	r3, #9
   c1b7a:	d90e      	bls.n	c1b9a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c1b7c:	2874      	cmp	r0, #116	; 0x74
   c1b7e:	d00e      	beq.n	c1b9e <_ZNK5spark9JSONValue4typeEv+0x4c>
   c1b80:	2866      	cmp	r0, #102	; 0x66
   c1b82:	d00c      	beq.n	c1b9e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c1b84:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c1b88:	4258      	negs	r0, r3
   c1b8a:	4158      	adcs	r0, r3
   c1b8c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c1b8e:	2006      	movs	r0, #6
   c1b90:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c1b92:	2000      	movs	r0, #0
   c1b94:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c1b96:	2004      	movs	r0, #4
   c1b98:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c1b9a:	2003      	movs	r0, #3
   c1b9c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c1b9e:	2002      	movs	r0, #2
}
   c1ba0:	4770      	bx	lr

000c1ba2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c1ba2:	b510      	push	{r4, lr}
   c1ba4:	4604      	mov	r4, r0
    switch (type()) {
   c1ba6:	f7ff ffd4 	bl	c1b52 <_ZNK5spark9JSONValue4typeEv>
   c1baa:	2802      	cmp	r0, #2
   c1bac:	d00e      	beq.n	c1bcc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c1bae:	1ec3      	subs	r3, r0, #3
   c1bb0:	b2db      	uxtb	r3, r3
   c1bb2:	2b01      	cmp	r3, #1
   c1bb4:	d814      	bhi.n	c1be0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c1bb6:	6822      	ldr	r2, [r4, #0]
   c1bb8:	68a3      	ldr	r3, [r4, #8]
   c1bba:	6850      	ldr	r0, [r2, #4]
   c1bbc:	685b      	ldr	r3, [r3, #4]
}
   c1bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c1bc2:	220a      	movs	r2, #10
   c1bc4:	2100      	movs	r1, #0
   c1bc6:	4418      	add	r0, r3
   c1bc8:	f003 bbfa 	b.w	c53c0 <strtol>
        const char* const s = d_->json + t_->start;
   c1bcc:	6822      	ldr	r2, [r4, #0]
   c1bce:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c1bd0:	6852      	ldr	r2, [r2, #4]
   c1bd2:	685b      	ldr	r3, [r3, #4]
   c1bd4:	5cd0      	ldrb	r0, [r2, r3]
   c1bd6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c1bda:	4258      	negs	r0, r3
   c1bdc:	4158      	adcs	r0, r3
}
   c1bde:	bd10      	pop	{r4, pc}
    switch (type()) {
   c1be0:	2000      	movs	r0, #0
   c1be2:	e7fc      	b.n	c1bde <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c1be4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1be4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1be6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c1be8:	e9c0 3300 	strd	r3, r3, [r0]
   c1bec:	4604      	mov	r4, r0
        n_(0) {
   c1bee:	480e      	ldr	r0, [pc, #56]	; (c1c28 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c1bf0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c1bf4:	b1a9      	cbz	r1, c1c22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c1bf6:	780b      	ldrb	r3, [r1, #0]
   c1bf8:	2b03      	cmp	r3, #3
   c1bfa:	d006      	beq.n	c1c0a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c1bfc:	b98b      	cbnz	r3, c1c22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c1bfe:	6813      	ldr	r3, [r2, #0]
   c1c00:	6858      	ldr	r0, [r3, #4]
   c1c02:	684b      	ldr	r3, [r1, #4]
   c1c04:	5cc3      	ldrb	r3, [r0, r3]
   c1c06:	2b6e      	cmp	r3, #110	; 0x6e
   c1c08:	d007      	beq.n	c1c1a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c1c0a:	6813      	ldr	r3, [r2, #0]
   c1c0c:	684d      	ldr	r5, [r1, #4]
   c1c0e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c1c10:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c1c12:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c1c14:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c1c16:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c1c18:	60e3      	str	r3, [r4, #12]
   c1c1a:	4611      	mov	r1, r2
   c1c1c:	4620      	mov	r0, r4
   c1c1e:	f7ff ff6c 	bl	c1afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1c22:	4620      	mov	r0, r4
   c1c24:	bd38      	pop	{r3, r4, r5, pc}
   c1c26:	bf00      	nop
   c1c28:	000c7d6c 	.word	0x000c7d6c

000c1c2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1c2c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1c2e:	2500      	movs	r5, #0
   c1c30:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c1c32:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c1c36:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c1c3a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c1c3e:	4604      	mov	r4, r0
   c1c40:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c1c42:	b14b      	cbz	r3, c1c58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c1c44:	781a      	ldrb	r2, [r3, #0]
   c1c46:	2a01      	cmp	r2, #1
   c1c48:	d106      	bne.n	c1c58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c1c4a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c1c4e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c1c50:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c1c52:	6143      	str	r3, [r0, #20]
   c1c54:	f7ff ff51 	bl	c1afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1c58:	4620      	mov	r0, r4
   c1c5a:	bd38      	pop	{r3, r4, r5, pc}

000c1c5c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c1c5c:	b510      	push	{r4, lr}
    if (!n_) {
   c1c5e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c1c60:	4604      	mov	r4, r0
    if (!n_) {
   c1c62:	b163      	cbz	r3, c1c7e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c1c64:	6880      	ldr	r0, [r0, #8]
   c1c66:	60e0      	str	r0, [r4, #12]
    --n_;
   c1c68:	3b01      	subs	r3, #1
    ++t_;
   c1c6a:	3010      	adds	r0, #16
   c1c6c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c1c6e:	6120      	str	r0, [r4, #16]
    --n_;
   c1c70:	6163      	str	r3, [r4, #20]
    if (n_) {
   c1c72:	b113      	cbz	r3, c1c7a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c1c74:	f7ff fef2 	bl	c1a5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c1c78:	60a0      	str	r0, [r4, #8]
    return true;
   c1c7a:	2001      	movs	r0, #1
   c1c7c:	e000      	b.n	c1c80 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c1c7e:	4618      	mov	r0, r3
}
   c1c80:	bd10      	pop	{r4, pc}

000c1c82 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1c82:	b510      	push	{r4, lr}
    write('}');
   c1c84:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1c86:	4604      	mov	r4, r0
    write('}');
   c1c88:	f7ff ff49 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c1c8c:	2301      	movs	r3, #1
   c1c8e:	7123      	strb	r3, [r4, #4]
}
   c1c90:	4620      	mov	r0, r4
   c1c92:	bd10      	pop	{r4, pc}

000c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c1c94:	b508      	push	{r3, lr}
    switch (state_) {
   c1c96:	7903      	ldrb	r3, [r0, #4]
   c1c98:	2b01      	cmp	r3, #1
   c1c9a:	d002      	beq.n	c1ca2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c1c9c:	2b02      	cmp	r3, #2
   c1c9e:	d004      	beq.n	c1caa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c1ca0:	bd08      	pop	{r3, pc}
        write(',');
   c1ca2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c1ca4:	f7ff ff3b 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
}
   c1ca8:	e7fa      	b.n	c1ca0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c1caa:	213a      	movs	r1, #58	; 0x3a
   c1cac:	e7fa      	b.n	c1ca4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c1cae <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c1cae:	b510      	push	{r4, lr}
   c1cb0:	4604      	mov	r4, r0
    writeSeparator();
   c1cb2:	f7ff ffef 	bl	c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c1cb6:	4620      	mov	r0, r4
   c1cb8:	217b      	movs	r1, #123	; 0x7b
   c1cba:	f7ff ff30 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c1cbe:	2300      	movs	r3, #0
   c1cc0:	7123      	strb	r3, [r4, #4]
}
   c1cc2:	4620      	mov	r0, r4
   c1cc4:	bd10      	pop	{r4, pc}
	...

000c1cc8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c1cc8:	b513      	push	{r0, r1, r4, lr}
   c1cca:	4604      	mov	r4, r0
   c1ccc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1cce:	f7ff ffe1 	bl	c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c1cd2:	6823      	ldr	r3, [r4, #0]
   c1cd4:	9a01      	ldr	r2, [sp, #4]
   c1cd6:	68db      	ldr	r3, [r3, #12]
   c1cd8:	4903      	ldr	r1, [pc, #12]	; (c1ce8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c1cda:	4620      	mov	r0, r4
   c1cdc:	4798      	blx	r3
    state_ = NEXT;
   c1cde:	2301      	movs	r3, #1
}
   c1ce0:	4620      	mov	r0, r4
    state_ = NEXT;
   c1ce2:	7123      	strb	r3, [r4, #4]
}
   c1ce4:	b002      	add	sp, #8
   c1ce6:	bd10      	pop	{r4, pc}
   c1ce8:	000c6784 	.word	0x000c6784

000c1cec <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c1cec:	b513      	push	{r0, r1, r4, lr}
   c1cee:	4604      	mov	r4, r0
   c1cf0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1cf2:	f7ff ffcf 	bl	c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c1cf6:	6823      	ldr	r3, [r4, #0]
   c1cf8:	9a01      	ldr	r2, [sp, #4]
   c1cfa:	68db      	ldr	r3, [r3, #12]
   c1cfc:	4903      	ldr	r1, [pc, #12]	; (c1d0c <_ZN5spark10JSONWriter5valueEj+0x20>)
   c1cfe:	4620      	mov	r0, r4
   c1d00:	4798      	blx	r3
    state_ = NEXT;
   c1d02:	2301      	movs	r3, #1
}
   c1d04:	4620      	mov	r0, r4
    state_ = NEXT;
   c1d06:	7123      	strb	r3, [r4, #4]
}
   c1d08:	b002      	add	sp, #8
   c1d0a:	bd10      	pop	{r4, pc}
   c1d0c:	000c7f48 	.word	0x000c7f48

000c1d10 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1d14:	460d      	mov	r5, r1
    write('"');
   c1d16:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1d18:	4690      	mov	r8, r2
   c1d1a:	4604      	mov	r4, r0
    write('"');
   c1d1c:	f7ff feff 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c1d20:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c1dc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c1d24:	44a8      	add	r8, r5
    const char *s = str;
   c1d26:	462f      	mov	r7, r5
    while (s != end) {
   c1d28:	4547      	cmp	r7, r8
   c1d2a:	46ba      	mov	sl, r7
   c1d2c:	d03d      	beq.n	c1daa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c1d2e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c1d32:	2e22      	cmp	r6, #34	; 0x22
   c1d34:	d006      	beq.n	c1d44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1d36:	2e5c      	cmp	r6, #92	; 0x5c
   c1d38:	d004      	beq.n	c1d44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1d3a:	4630      	mov	r0, r6
   c1d3c:	f002 fb4c 	bl	c43d8 <isprint>
   c1d40:	2800      	cmp	r0, #0
   c1d42:	d1f1      	bne.n	c1d28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c1d44:	6823      	ldr	r3, [r4, #0]
   c1d46:	ebaa 0205 	sub.w	r2, sl, r5
   c1d4a:	689b      	ldr	r3, [r3, #8]
   c1d4c:	4629      	mov	r1, r5
   c1d4e:	4620      	mov	r0, r4
   c1d50:	4798      	blx	r3
            write('\\');
   c1d52:	215c      	movs	r1, #92	; 0x5c
   c1d54:	4620      	mov	r0, r4
   c1d56:	f7ff fee2 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c1d5a:	2e0d      	cmp	r6, #13
   c1d5c:	d80a      	bhi.n	c1d74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c1d5e:	2e07      	cmp	r6, #7
   c1d60:	d91c      	bls.n	c1d9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1d62:	f1a6 0308 	sub.w	r3, r6, #8
   c1d66:	2b05      	cmp	r3, #5
   c1d68:	d818      	bhi.n	c1d9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1d6a:	e8df f003 	tbb	[pc, r3]
   c1d6e:	0f0d      	.short	0x0f0d
   c1d70:	15131711 	.word	0x15131711
   c1d74:	2e22      	cmp	r6, #34	; 0x22
   c1d76:	d001      	beq.n	c1d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c1d78:	2e5c      	cmp	r6, #92	; 0x5c
   c1d7a:	d10f      	bne.n	c1d9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c1d7c:	4631      	mov	r1, r6
                write('b');
   c1d7e:	4620      	mov	r0, r4
   c1d80:	f7ff fecd 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c1d84:	463d      	mov	r5, r7
    while (s != end) {
   c1d86:	e7cf      	b.n	c1d28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c1d88:	2162      	movs	r1, #98	; 0x62
   c1d8a:	e7f8      	b.n	c1d7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c1d8c:	2174      	movs	r1, #116	; 0x74
   c1d8e:	e7f6      	b.n	c1d7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c1d90:	216e      	movs	r1, #110	; 0x6e
   c1d92:	e7f4      	b.n	c1d7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c1d94:	2166      	movs	r1, #102	; 0x66
   c1d96:	e7f2      	b.n	c1d7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c1d98:	2172      	movs	r1, #114	; 0x72
   c1d9a:	e7f0      	b.n	c1d7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c1d9c:	6823      	ldr	r3, [r4, #0]
   c1d9e:	4632      	mov	r2, r6
   c1da0:	68db      	ldr	r3, [r3, #12]
   c1da2:	4649      	mov	r1, r9
   c1da4:	4620      	mov	r0, r4
   c1da6:	4798      	blx	r3
                break;
   c1da8:	e7ec      	b.n	c1d84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c1daa:	42bd      	cmp	r5, r7
   c1dac:	d005      	beq.n	c1dba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c1dae:	6823      	ldr	r3, [r4, #0]
   c1db0:	1b7a      	subs	r2, r7, r5
   c1db2:	689b      	ldr	r3, [r3, #8]
   c1db4:	4629      	mov	r1, r5
   c1db6:	4620      	mov	r0, r4
   c1db8:	4798      	blx	r3
    }
    write('"');
   c1dba:	2122      	movs	r1, #34	; 0x22
   c1dbc:	4620      	mov	r0, r4
   c1dbe:	f7ff feae 	bl	c1b1e <_ZN5spark10JSONWriter5writeEc>
}
   c1dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1dc6:	bf00      	nop
   c1dc8:	000c7f4b 	.word	0x000c7f4b

000c1dcc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c1dcc:	b513      	push	{r0, r1, r4, lr}
   c1dce:	4604      	mov	r4, r0
   c1dd0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1dd4:	f7ff ff5e 	bl	c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c1dd8:	4620      	mov	r0, r4
   c1dda:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1dde:	f7ff ff97 	bl	c1d10 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c1de2:	2302      	movs	r3, #2
}
   c1de4:	4620      	mov	r0, r4
    state_ = VALUE;
   c1de6:	7123      	strb	r3, [r4, #4]
}
   c1de8:	b002      	add	sp, #8
   c1dea:	bd10      	pop	{r4, pc}

000c1dec <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c1dec:	b513      	push	{r0, r1, r4, lr}
   c1dee:	4604      	mov	r4, r0
   c1df0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1df4:	f7ff ff4e 	bl	c1c94 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c1df8:	4620      	mov	r0, r4
   c1dfa:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1dfe:	f7ff ff87 	bl	c1d10 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c1e02:	2301      	movs	r3, #1
}
   c1e04:	4620      	mov	r0, r4
    state_ = NEXT;
   c1e06:	7123      	strb	r3, [r4, #4]
}
   c1e08:	b002      	add	sp, #8
   c1e0a:	bd10      	pop	{r4, pc}

000c1e0c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1e0c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1e0e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1e10:	d902      	bls.n	c1e18 <pinAvailable+0xc>
    return false;
   c1e12:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1e14:	b002      	add	sp, #8
   c1e16:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1e18:	f1a0 030b 	sub.w	r3, r0, #11
   c1e1c:	2b02      	cmp	r3, #2
   c1e1e:	d81a      	bhi.n	c1e56 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1e20:	4c17      	ldr	r4, [pc, #92]	; (c1e80 <pinAvailable+0x74>)
   c1e22:	7821      	ldrb	r1, [r4, #0]
   c1e24:	f3bf 8f5b 	dmb	ish
   c1e28:	f011 0101 	ands.w	r1, r1, #1
   c1e2c:	d10b      	bne.n	c1e46 <pinAvailable+0x3a>
   c1e2e:	4620      	mov	r0, r4
   c1e30:	9101      	str	r1, [sp, #4]
   c1e32:	f7f2 f945 	bl	b40c0 <__cxa_guard_acquire>
   c1e36:	9901      	ldr	r1, [sp, #4]
   c1e38:	b128      	cbz	r0, c1e46 <pinAvailable+0x3a>
   c1e3a:	4812      	ldr	r0, [pc, #72]	; (c1e84 <pinAvailable+0x78>)
   c1e3c:	f7fc fa64 	bl	be308 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1e40:	4620      	mov	r0, r4
   c1e42:	f7f2 f942 	bl	b40ca <__cxa_guard_release>
   c1e46:	4b0f      	ldr	r3, [pc, #60]	; (c1e84 <pinAvailable+0x78>)
   c1e48:	7818      	ldrb	r0, [r3, #0]
   c1e4a:	f7fb ffe3 	bl	bde14 <hal_spi_is_enabled>
   c1e4e:	2800      	cmp	r0, #0
   c1e50:	d1df      	bne.n	c1e12 <pinAvailable+0x6>
  return true; // 'pin' is available
   c1e52:	2001      	movs	r0, #1
   c1e54:	e7de      	b.n	c1e14 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1e56:	2801      	cmp	r0, #1
   c1e58:	d809      	bhi.n	c1e6e <pinAvailable+0x62>
   c1e5a:	f000 f8ad 	bl	c1fb8 <_Z19__fetch_global_Wirev>
   c1e5e:	2100      	movs	r1, #0
   c1e60:	7c00      	ldrb	r0, [r0, #16]
   c1e62:	f7fb ff9f 	bl	bdda4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c1e66:	f080 0001 	eor.w	r0, r0, #1
   c1e6a:	b2c0      	uxtb	r0, r0
   c1e6c:	e7d2      	b.n	c1e14 <pinAvailable+0x8>
   c1e6e:	3809      	subs	r0, #9
   c1e70:	2801      	cmp	r0, #1
   c1e72:	d8ee      	bhi.n	c1e52 <pinAvailable+0x46>
   c1e74:	f000 f864 	bl	c1f40 <_Z22__fetch_global_Serial1v>
   c1e78:	7c00      	ldrb	r0, [r0, #16]
   c1e7a:	f7fb ff2b 	bl	bdcd4 <hal_usart_is_enabled>
   c1e7e:	e7f2      	b.n	c1e66 <pinAvailable+0x5a>
   c1e80:	2003dd4c 	.word	0x2003dd4c
   c1e84:	2003dd50 	.word	0x2003dd50

000c1e88 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1e88:	2825      	cmp	r0, #37	; 0x25
{
   c1e8a:	b538      	push	{r3, r4, r5, lr}
   c1e8c:	4604      	mov	r4, r0
   c1e8e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1e90:	d80a      	bhi.n	c1ea8 <pinMode+0x20>
   c1e92:	29ff      	cmp	r1, #255	; 0xff
   c1e94:	d008      	beq.n	c1ea8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1e96:	f7ff ffb9 	bl	c1e0c <pinAvailable>
   c1e9a:	b128      	cbz	r0, c1ea8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1e9c:	4629      	mov	r1, r5
   c1e9e:	4620      	mov	r0, r4
}
   c1ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1ea4:	f7fb bda4 	b.w	bd9f0 <HAL_Pin_Mode>
}
   c1ea8:	bd38      	pop	{r3, r4, r5, pc}

000c1eaa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1eaa:	b538      	push	{r3, r4, r5, lr}
   c1eac:	4604      	mov	r4, r0
   c1eae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1eb0:	f7fb fda6 	bl	bda00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1eb4:	28ff      	cmp	r0, #255	; 0xff
   c1eb6:	d010      	beq.n	c1eda <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1eb8:	2806      	cmp	r0, #6
   c1eba:	d804      	bhi.n	c1ec6 <digitalWrite+0x1c>
   c1ebc:	234d      	movs	r3, #77	; 0x4d
   c1ebe:	fa23 f000 	lsr.w	r0, r3, r0
   c1ec2:	07c3      	lsls	r3, r0, #31
   c1ec4:	d409      	bmi.n	c1eda <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1ec6:	4620      	mov	r0, r4
   c1ec8:	f7ff ffa0 	bl	c1e0c <pinAvailable>
   c1ecc:	b128      	cbz	r0, c1eda <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1ece:	4629      	mov	r1, r5
   c1ed0:	4620      	mov	r0, r4
}
   c1ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1ed6:	f7fb bd9b 	b.w	bda10 <HAL_GPIO_Write>
}
   c1eda:	bd38      	pop	{r3, r4, r5, pc}

000c1edc <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1edc:	280d      	cmp	r0, #13
{
   c1ede:	b510      	push	{r4, lr}
   c1ee0:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c1ee2:	bf9c      	itt	ls
   c1ee4:	340e      	addls	r4, #14
   c1ee6:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1ee8:	4620      	mov	r0, r4
   c1eea:	f7ff ff8f 	bl	c1e0c <pinAvailable>
   c1eee:	b150      	cbz	r0, c1f06 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1ef0:	2103      	movs	r1, #3
   c1ef2:	4620      	mov	r0, r4
   c1ef4:	f7fb fd74 	bl	bd9e0 <HAL_Validate_Pin_Function>
   c1ef8:	2803      	cmp	r0, #3
   c1efa:	d104      	bne.n	c1f06 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1efc:	4620      	mov	r0, r4
}
   c1efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c1f02:	f7fb bd9d 	b.w	bda40 <hal_adc_read>
}
   c1f06:	2000      	movs	r0, #0
   c1f08:	bd10      	pop	{r4, pc}

000c1f0a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1f0a:	4770      	bx	lr

000c1f0c <_Z20acquireSerial1Bufferv>:
{
   c1f0c:	b538      	push	{r3, r4, r5, lr}
   c1f0e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1f10:	2514      	movs	r5, #20
   c1f12:	462a      	mov	r2, r5
   c1f14:	2100      	movs	r1, #0
   c1f16:	f002 fa9f 	bl	c4458 <memset>
   c1f1a:	8025      	strh	r5, [r4, #0]
   c1f1c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f1e:	4907      	ldr	r1, [pc, #28]	; (c1f3c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1f20:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f22:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1f24:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f26:	f000 f86d 	bl	c2004 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f2a:	4904      	ldr	r1, [pc, #16]	; (c1f3c <_Z20acquireSerial1Bufferv+0x30>)
    };
   c1f2c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f2e:	4628      	mov	r0, r5
   c1f30:	f000 f868 	bl	c2004 <_ZnajRKSt9nothrow_t>
    };
   c1f34:	60e0      	str	r0, [r4, #12]
}
   c1f36:	4620      	mov	r0, r4
   c1f38:	bd38      	pop	{r3, r4, r5, pc}
   c1f3a:	bf00      	nop
   c1f3c:	000c7f51 	.word	0x000c7f51

000c1f40 <_Z22__fetch_global_Serial1v>:
{
   c1f40:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1f42:	4d0e      	ldr	r5, [pc, #56]	; (c1f7c <_Z22__fetch_global_Serial1v+0x3c>)
   c1f44:	7829      	ldrb	r1, [r5, #0]
   c1f46:	f3bf 8f5b 	dmb	ish
   c1f4a:	f011 0401 	ands.w	r4, r1, #1
{
   c1f4e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1f50:	d111      	bne.n	c1f76 <_Z22__fetch_global_Serial1v+0x36>
   c1f52:	4628      	mov	r0, r5
   c1f54:	f7f2 f8b4 	bl	b40c0 <__cxa_guard_acquire>
   c1f58:	b168      	cbz	r0, c1f76 <_Z22__fetch_global_Serial1v+0x36>
   c1f5a:	a801      	add	r0, sp, #4
   c1f5c:	f7ff ffd6 	bl	c1f0c <_Z20acquireSerial1Bufferv>
   c1f60:	aa01      	add	r2, sp, #4
   c1f62:	4621      	mov	r1, r4
   c1f64:	4806      	ldr	r0, [pc, #24]	; (c1f80 <_Z22__fetch_global_Serial1v+0x40>)
   c1f66:	f7ff fc13 	bl	c1790 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c1f6a:	4628      	mov	r0, r5
   c1f6c:	f7f2 f8ad 	bl	b40ca <__cxa_guard_release>
   c1f70:	4804      	ldr	r0, [pc, #16]	; (c1f84 <_Z22__fetch_global_Serial1v+0x44>)
   c1f72:	f002 fa23 	bl	c43bc <atexit>
    return serial1;
}
   c1f76:	4802      	ldr	r0, [pc, #8]	; (c1f80 <_Z22__fetch_global_Serial1v+0x40>)
   c1f78:	b007      	add	sp, #28
   c1f7a:	bd30      	pop	{r4, r5, pc}
   c1f7c:	2003e728 	.word	0x2003e728
   c1f80:	2003e72c 	.word	0x2003e72c
   c1f84:	000c1f0b 	.word	0x000c1f0b

000c1f88 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1f88:	4770      	bx	lr
	...

000c1f8c <_Z17acquireWireBufferv>:
{
   c1f8c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1f8e:	2520      	movs	r5, #32
   c1f90:	2314      	movs	r3, #20
{
   c1f92:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1f94:	6003      	str	r3, [r0, #0]
   c1f96:	6085      	str	r5, [r0, #8]
   c1f98:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1f9a:	4906      	ldr	r1, [pc, #24]	; (c1fb4 <_Z17acquireWireBufferv+0x28>)
   c1f9c:	4628      	mov	r0, r5
   c1f9e:	f000 f831 	bl	c2004 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1fa2:	4904      	ldr	r1, [pc, #16]	; (c1fb4 <_Z17acquireWireBufferv+0x28>)
	};
   c1fa4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1fa6:	4628      	mov	r0, r5
   c1fa8:	f000 f82c 	bl	c2004 <_ZnajRKSt9nothrow_t>
	};
   c1fac:	60e0      	str	r0, [r4, #12]
}
   c1fae:	4620      	mov	r0, r4
   c1fb0:	bd38      	pop	{r3, r4, r5, pc}
   c1fb2:	bf00      	nop
   c1fb4:	000c7f51 	.word	0x000c7f51

000c1fb8 <_Z19__fetch_global_Wirev>:
{
   c1fb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1fba:	4d0e      	ldr	r5, [pc, #56]	; (c1ff4 <_Z19__fetch_global_Wirev+0x3c>)
   c1fbc:	7829      	ldrb	r1, [r5, #0]
   c1fbe:	f3bf 8f5b 	dmb	ish
   c1fc2:	f011 0401 	ands.w	r4, r1, #1
{
   c1fc6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1fc8:	d111      	bne.n	c1fee <_Z19__fetch_global_Wirev+0x36>
   c1fca:	4628      	mov	r0, r5
   c1fcc:	f7f2 f878 	bl	b40c0 <__cxa_guard_acquire>
   c1fd0:	b168      	cbz	r0, c1fee <_Z19__fetch_global_Wirev+0x36>
   c1fd2:	a801      	add	r0, sp, #4
   c1fd4:	f7ff ffda 	bl	c1f8c <_Z17acquireWireBufferv>
   c1fd8:	aa01      	add	r2, sp, #4
   c1fda:	4621      	mov	r1, r4
   c1fdc:	4806      	ldr	r0, [pc, #24]	; (c1ff8 <_Z19__fetch_global_Wirev+0x40>)
   c1fde:	f7ff fc35 	bl	c184c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c1fe2:	4628      	mov	r0, r5
   c1fe4:	f7f2 f871 	bl	b40ca <__cxa_guard_release>
   c1fe8:	4804      	ldr	r0, [pc, #16]	; (c1ffc <_Z19__fetch_global_Wirev+0x44>)
   c1fea:	f002 f9e7 	bl	c43bc <atexit>
	return wire;
}
   c1fee:	4802      	ldr	r0, [pc, #8]	; (c1ff8 <_Z19__fetch_global_Wirev+0x40>)
   c1ff0:	b007      	add	sp, #28
   c1ff2:	bd30      	pop	{r4, r5, pc}
   c1ff4:	2003e744 	.word	0x2003e744
   c1ff8:	2003e748 	.word	0x2003e748
   c1ffc:	000c1f89 	.word	0x000c1f89

000c2000 <_ZnwjRKSt9nothrow_t>:
   c2000:	f7f2 b849 	b.w	b4096 <_Znwj>

000c2004 <_ZnajRKSt9nothrow_t>:
   c2004:	f7f2 b849 	b.w	b409a <_Znaj>

000c2008 <_ZSt25__throw_bad_function_callv>:
   c2008:	b508      	push	{r3, lr}
   c200a:	f7fc f8e1 	bl	be1d0 <abort>
	...

000c2010 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c2010:	4901      	ldr	r1, [pc, #4]	; (c2018 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c2012:	f000 b8f9 	b.w	c2208 <_ZNKSt9type_infoeqERKS_>
   c2016:	bf00      	nop
   c2018:	000c7f6c 	.word	0x000c7f6c

000c201c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c201c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c201e:	2400      	movs	r4, #0
   c2020:	2310      	movs	r3, #16
   c2022:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c2026:	6803      	ldr	r3, [r0, #0]
   c2028:	4615      	mov	r5, r2
   c202a:	699e      	ldr	r6, [r3, #24]
   c202c:	6812      	ldr	r2, [r2, #0]
   c202e:	466b      	mov	r3, sp
   c2030:	e9cd 4400 	strd	r4, r4, [sp]
   c2034:	47b0      	blx	r6
   c2036:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c203a:	f003 0306 	and.w	r3, r3, #6
   c203e:	2b06      	cmp	r3, #6
   c2040:	bf03      	ittte	eq
   c2042:	9b00      	ldreq	r3, [sp, #0]
   c2044:	602b      	streq	r3, [r5, #0]
   c2046:	2001      	moveq	r0, #1
   c2048:	4620      	movne	r0, r4
   c204a:	b004      	add	sp, #16
   c204c:	bd70      	pop	{r4, r5, r6, pc}

000c204e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c204e:	9800      	ldr	r0, [sp, #0]
   c2050:	4290      	cmp	r0, r2
   c2052:	bf14      	ite	ne
   c2054:	2001      	movne	r0, #1
   c2056:	2006      	moveq	r0, #6
   c2058:	4770      	bx	lr
	...

000c205c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c205c:	b510      	push	{r4, lr}
   c205e:	4b03      	ldr	r3, [pc, #12]	; (c206c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c2060:	6003      	str	r3, [r0, #0]
   c2062:	4604      	mov	r4, r0
   c2064:	f000 f8cd 	bl	c2202 <_ZNSt9type_infoD1Ev>
   c2068:	4620      	mov	r0, r4
   c206a:	bd10      	pop	{r4, pc}
   c206c:	000c7fac 	.word	0x000c7fac

000c2070 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c2070:	b510      	push	{r4, lr}
   c2072:	4604      	mov	r4, r0
   c2074:	f7ff fff2 	bl	c205c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2078:	4620      	mov	r0, r4
   c207a:	2108      	movs	r1, #8
   c207c:	f7f2 f811 	bl	b40a2 <_ZdlPvj>
   c2080:	4620      	mov	r0, r4
   c2082:	bd10      	pop	{r4, pc}

000c2084 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c2084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2088:	461f      	mov	r7, r3
   c208a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c208e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c2092:	4598      	cmp	r8, r3
   c2094:	4606      	mov	r6, r0
   c2096:	4615      	mov	r5, r2
   c2098:	d107      	bne.n	c20aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c209a:	9907      	ldr	r1, [sp, #28]
   c209c:	f000 f8b4 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c20a0:	b118      	cbz	r0, c20aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c20a2:	7165      	strb	r5, [r4, #5]
   c20a4:	2000      	movs	r0, #0
   c20a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c20aa:	4639      	mov	r1, r7
   c20ac:	4630      	mov	r0, r6
   c20ae:	f000 f8ab 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c20b2:	2800      	cmp	r0, #0
   c20b4:	d0f6      	beq.n	c20a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c20b6:	2301      	movs	r3, #1
   c20b8:	f8c4 8000 	str.w	r8, [r4]
   c20bc:	7125      	strb	r5, [r4, #4]
   c20be:	71a3      	strb	r3, [r4, #6]
   c20c0:	e7f0      	b.n	c20a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c20c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c20c2:	b538      	push	{r3, r4, r5, lr}
   c20c4:	4615      	mov	r5, r2
   c20c6:	461c      	mov	r4, r3
   c20c8:	f000 f89e 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c20cc:	b120      	cbz	r0, c20d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c20ce:	2308      	movs	r3, #8
   c20d0:	60e3      	str	r3, [r4, #12]
   c20d2:	2306      	movs	r3, #6
   c20d4:	6025      	str	r5, [r4, #0]
   c20d6:	7123      	strb	r3, [r4, #4]
   c20d8:	bd38      	pop	{r3, r4, r5, pc}

000c20da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c20da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c20dc:	4605      	mov	r5, r0
   c20de:	460c      	mov	r4, r1
   c20e0:	9201      	str	r2, [sp, #4]
   c20e2:	461e      	mov	r6, r3
   c20e4:	f000 f890 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c20e8:	b950      	cbnz	r0, c2100 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c20ea:	2e03      	cmp	r6, #3
   c20ec:	d808      	bhi.n	c2100 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c20ee:	6823      	ldr	r3, [r4, #0]
   c20f0:	9a01      	ldr	r2, [sp, #4]
   c20f2:	695b      	ldr	r3, [r3, #20]
   c20f4:	4629      	mov	r1, r5
   c20f6:	4620      	mov	r0, r4
   c20f8:	b002      	add	sp, #8
   c20fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c20fe:	4718      	bx	r3
   c2100:	b002      	add	sp, #8
   c2102:	bd70      	pop	{r4, r5, r6, pc}

000c2104 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2104:	b510      	push	{r4, lr}
   c2106:	4b03      	ldr	r3, [pc, #12]	; (c2114 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c2108:	6003      	str	r3, [r0, #0]
   c210a:	4604      	mov	r4, r0
   c210c:	f7ff ffa6 	bl	c205c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2110:	4620      	mov	r0, r4
   c2112:	bd10      	pop	{r4, pc}
   c2114:	000c800c 	.word	0x000c800c

000c2118 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c2118:	b510      	push	{r4, lr}
   c211a:	4604      	mov	r4, r0
   c211c:	f7ff fff2 	bl	c2104 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c2120:	4620      	mov	r0, r4
   c2122:	210c      	movs	r1, #12
   c2124:	f7f1 ffbd 	bl	b40a2 <_ZdlPvj>
   c2128:	4620      	mov	r0, r4
   c212a:	bd10      	pop	{r4, pc}

000c212c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c212c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c212e:	9f08      	ldr	r7, [sp, #32]
   c2130:	4297      	cmp	r7, r2
   c2132:	4605      	mov	r5, r0
   c2134:	460e      	mov	r6, r1
   c2136:	4614      	mov	r4, r2
   c2138:	d00a      	beq.n	c2150 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c213a:	68a8      	ldr	r0, [r5, #8]
   c213c:	6802      	ldr	r2, [r0, #0]
   c213e:	9708      	str	r7, [sp, #32]
   c2140:	6a15      	ldr	r5, [r2, #32]
   c2142:	4631      	mov	r1, r6
   c2144:	4622      	mov	r2, r4
   c2146:	46ac      	mov	ip, r5
   c2148:	b003      	add	sp, #12
   c214a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c214e:	4760      	bx	ip
   c2150:	4619      	mov	r1, r3
   c2152:	9301      	str	r3, [sp, #4]
   c2154:	f000 f858 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c2158:	9b01      	ldr	r3, [sp, #4]
   c215a:	2800      	cmp	r0, #0
   c215c:	d0ed      	beq.n	c213a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c215e:	2006      	movs	r0, #6
   c2160:	b003      	add	sp, #12
   c2162:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c2164 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c2164:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2168:	460d      	mov	r5, r1
   c216a:	4619      	mov	r1, r3
   c216c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c2170:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c2174:	4681      	mov	r9, r0
   c2176:	4617      	mov	r7, r2
   c2178:	4698      	mov	r8, r3
   c217a:	f000 f845 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c217e:	b190      	cbz	r0, c21a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c2180:	2d00      	cmp	r5, #0
   c2182:	6034      	str	r4, [r6, #0]
   c2184:	7137      	strb	r7, [r6, #4]
   c2186:	db09      	blt.n	c219c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c2188:	1961      	adds	r1, r4, r5
   c218a:	458a      	cmp	sl, r1
   c218c:	bf0c      	ite	eq
   c218e:	2106      	moveq	r1, #6
   c2190:	2101      	movne	r1, #1
   c2192:	71b1      	strb	r1, [r6, #6]
   c2194:	2000      	movs	r0, #0
   c2196:	b001      	add	sp, #4
   c2198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c219c:	3502      	adds	r5, #2
   c219e:	d1f9      	bne.n	c2194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c21a0:	2301      	movs	r3, #1
   c21a2:	71b3      	strb	r3, [r6, #6]
   c21a4:	e7f6      	b.n	c2194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c21a6:	4554      	cmp	r4, sl
   c21a8:	d106      	bne.n	c21b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c21aa:	4659      	mov	r1, fp
   c21ac:	4648      	mov	r0, r9
   c21ae:	f000 f82b 	bl	c2208 <_ZNKSt9type_infoeqERKS_>
   c21b2:	b108      	cbz	r0, c21b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c21b4:	7177      	strb	r7, [r6, #5]
   c21b6:	e7ed      	b.n	c2194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c21b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c21bc:	6803      	ldr	r3, [r0, #0]
   c21be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c21c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c21c6:	69dc      	ldr	r4, [r3, #28]
   c21c8:	463a      	mov	r2, r7
   c21ca:	4643      	mov	r3, r8
   c21cc:	4629      	mov	r1, r5
   c21ce:	46a4      	mov	ip, r4
   c21d0:	b001      	add	sp, #4
   c21d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c21d6:	4760      	bx	ip

000c21d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c21dc:	4607      	mov	r7, r0
   c21de:	460c      	mov	r4, r1
   c21e0:	4615      	mov	r5, r2
   c21e2:	461e      	mov	r6, r3
   c21e4:	f7ff ff6d 	bl	c20c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c21e8:	b948      	cbnz	r0, c21fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c21ea:	68b8      	ldr	r0, [r7, #8]
   c21ec:	6803      	ldr	r3, [r0, #0]
   c21ee:	699f      	ldr	r7, [r3, #24]
   c21f0:	462a      	mov	r2, r5
   c21f2:	4633      	mov	r3, r6
   c21f4:	4621      	mov	r1, r4
   c21f6:	46bc      	mov	ip, r7
   c21f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c21fc:	4760      	bx	ip
   c21fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c2202 <_ZNSt9type_infoD1Ev>:
   c2202:	4770      	bx	lr

000c2204 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2204:	2000      	movs	r0, #0
   c2206:	4770      	bx	lr

000c2208 <_ZNKSt9type_infoeqERKS_>:
   c2208:	4281      	cmp	r1, r0
   c220a:	b508      	push	{r3, lr}
   c220c:	d00e      	beq.n	c222c <_ZNKSt9type_infoeqERKS_+0x24>
   c220e:	6840      	ldr	r0, [r0, #4]
   c2210:	7803      	ldrb	r3, [r0, #0]
   c2212:	2b2a      	cmp	r3, #42	; 0x2a
   c2214:	d00c      	beq.n	c2230 <_ZNKSt9type_infoeqERKS_+0x28>
   c2216:	6849      	ldr	r1, [r1, #4]
   c2218:	780b      	ldrb	r3, [r1, #0]
   c221a:	2b2a      	cmp	r3, #42	; 0x2a
   c221c:	bf08      	it	eq
   c221e:	3101      	addeq	r1, #1
   c2220:	f002 f976 	bl	c4510 <strcmp>
   c2224:	fab0 f080 	clz	r0, r0
   c2228:	0940      	lsrs	r0, r0, #5
   c222a:	bd08      	pop	{r3, pc}
   c222c:	2001      	movs	r0, #1
   c222e:	e7fc      	b.n	c222a <_ZNKSt9type_infoeqERKS_+0x22>
   c2230:	2000      	movs	r0, #0
   c2232:	e7fa      	b.n	c222a <_ZNKSt9type_infoeqERKS_+0x22>

000c2234 <cosf>:
   c2234:	ee10 3a10 	vmov	r3, s0
   c2238:	4a18      	ldr	r2, [pc, #96]	; (c229c <cosf+0x68>)
   c223a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c223e:	4293      	cmp	r3, r2
   c2240:	dd1b      	ble.n	c227a <cosf+0x46>
   c2242:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c2246:	db02      	blt.n	c224e <cosf+0x1a>
   c2248:	ee30 0a40 	vsub.f32	s0, s0, s0
   c224c:	4770      	bx	lr
   c224e:	b500      	push	{lr}
   c2250:	b083      	sub	sp, #12
   c2252:	4668      	mov	r0, sp
   c2254:	f000 fb12 	bl	c287c <__ieee754_rem_pio2f>
   c2258:	f000 0003 	and.w	r0, r0, #3
   c225c:	2801      	cmp	r0, #1
   c225e:	eddd 0a01 	vldr	s1, [sp, #4]
   c2262:	ed9d 0a00 	vldr	s0, [sp]
   c2266:	d00c      	beq.n	c2282 <cosf+0x4e>
   c2268:	2802      	cmp	r0, #2
   c226a:	d012      	beq.n	c2292 <cosf+0x5e>
   c226c:	b170      	cbz	r0, c228c <cosf+0x58>
   c226e:	2001      	movs	r0, #1
   c2270:	f000 fff6 	bl	c3260 <__kernel_sinf>
   c2274:	b003      	add	sp, #12
   c2276:	f85d fb04 	ldr.w	pc, [sp], #4
   c227a:	eddf 0a09 	vldr	s1, [pc, #36]	; c22a0 <cosf+0x6c>
   c227e:	f000 bc33 	b.w	c2ae8 <__kernel_cosf>
   c2282:	f000 ffed 	bl	c3260 <__kernel_sinf>
   c2286:	eeb1 0a40 	vneg.f32	s0, s0
   c228a:	e7f3      	b.n	c2274 <cosf+0x40>
   c228c:	f000 fc2c 	bl	c2ae8 <__kernel_cosf>
   c2290:	e7f0      	b.n	c2274 <cosf+0x40>
   c2292:	f000 fc29 	bl	c2ae8 <__kernel_cosf>
   c2296:	eeb1 0a40 	vneg.f32	s0, s0
   c229a:	e7eb      	b.n	c2274 <cosf+0x40>
   c229c:	3f490fd8 	.word	0x3f490fd8
   c22a0:	00000000 	.word	0x00000000

000c22a4 <sinf>:
   c22a4:	ee10 3a10 	vmov	r3, s0
   c22a8:	4a19      	ldr	r2, [pc, #100]	; (c2310 <sinf+0x6c>)
   c22aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c22ae:	4293      	cmp	r3, r2
   c22b0:	dd1c      	ble.n	c22ec <sinf+0x48>
   c22b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c22b6:	db02      	blt.n	c22be <sinf+0x1a>
   c22b8:	ee30 0a40 	vsub.f32	s0, s0, s0
   c22bc:	4770      	bx	lr
   c22be:	b500      	push	{lr}
   c22c0:	b083      	sub	sp, #12
   c22c2:	4668      	mov	r0, sp
   c22c4:	f000 fada 	bl	c287c <__ieee754_rem_pio2f>
   c22c8:	f000 0003 	and.w	r0, r0, #3
   c22cc:	2801      	cmp	r0, #1
   c22ce:	eddd 0a01 	vldr	s1, [sp, #4]
   c22d2:	ed9d 0a00 	vldr	s0, [sp]
   c22d6:	d00e      	beq.n	c22f6 <sinf+0x52>
   c22d8:	2802      	cmp	r0, #2
   c22da:	d013      	beq.n	c2304 <sinf+0x60>
   c22dc:	b170      	cbz	r0, c22fc <sinf+0x58>
   c22de:	f000 fc03 	bl	c2ae8 <__kernel_cosf>
   c22e2:	eeb1 0a40 	vneg.f32	s0, s0
   c22e6:	b003      	add	sp, #12
   c22e8:	f85d fb04 	ldr.w	pc, [sp], #4
   c22ec:	eddf 0a09 	vldr	s1, [pc, #36]	; c2314 <sinf+0x70>
   c22f0:	2000      	movs	r0, #0
   c22f2:	f000 bfb5 	b.w	c3260 <__kernel_sinf>
   c22f6:	f000 fbf7 	bl	c2ae8 <__kernel_cosf>
   c22fa:	e7f4      	b.n	c22e6 <sinf+0x42>
   c22fc:	2001      	movs	r0, #1
   c22fe:	f000 ffaf 	bl	c3260 <__kernel_sinf>
   c2302:	e7f0      	b.n	c22e6 <sinf+0x42>
   c2304:	2001      	movs	r0, #1
   c2306:	f000 ffab 	bl	c3260 <__kernel_sinf>
   c230a:	eeb1 0a40 	vneg.f32	s0, s0
   c230e:	e7ea      	b.n	c22e6 <sinf+0x42>
   c2310:	3f490fd8 	.word	0x3f490fd8
   c2314:	00000000 	.word	0x00000000

000c2318 <atan2>:
   c2318:	f000 b866 	b.w	c23e8 <__ieee754_atan2>

000c231c <sqrt>:
   c231c:	b538      	push	{r3, r4, r5, lr}
   c231e:	ed2d 8b02 	vpush	{d8}
   c2322:	ec55 4b10 	vmov	r4, r5, d0
   c2326:	f000 f935 	bl	c2594 <__ieee754_sqrt>
   c232a:	4b18      	ldr	r3, [pc, #96]	; (c238c <sqrt+0x70>)
   c232c:	eeb0 8a40 	vmov.f32	s16, s0
   c2330:	eef0 8a60 	vmov.f32	s17, s1
   c2334:	f993 3000 	ldrsb.w	r3, [r3]
   c2338:	3301      	adds	r3, #1
   c233a:	d00d      	beq.n	c2358 <sqrt+0x3c>
   c233c:	4622      	mov	r2, r4
   c233e:	462b      	mov	r3, r5
   c2340:	4620      	mov	r0, r4
   c2342:	4629      	mov	r1, r5
   c2344:	f001 ff6e 	bl	c4224 <__aeabi_dcmpun>
   c2348:	b930      	cbnz	r0, c2358 <sqrt+0x3c>
   c234a:	2200      	movs	r2, #0
   c234c:	2300      	movs	r3, #0
   c234e:	4620      	mov	r0, r4
   c2350:	4629      	mov	r1, r5
   c2352:	f001 ff3f 	bl	c41d4 <__aeabi_dcmplt>
   c2356:	b930      	cbnz	r0, c2366 <sqrt+0x4a>
   c2358:	eeb0 0a48 	vmov.f32	s0, s16
   c235c:	eef0 0a68 	vmov.f32	s1, s17
   c2360:	ecbd 8b02 	vpop	{d8}
   c2364:	bd38      	pop	{r3, r4, r5, pc}
   c2366:	f7fb ff43 	bl	be1f0 <__errno>
   c236a:	2200      	movs	r2, #0
   c236c:	2300      	movs	r3, #0
   c236e:	2121      	movs	r1, #33	; 0x21
   c2370:	6001      	str	r1, [r0, #0]
   c2372:	4610      	mov	r0, r2
   c2374:	4619      	mov	r1, r3
   c2376:	f001 fde5 	bl	c3f44 <__aeabi_ddiv>
   c237a:	ec41 0b18 	vmov	d8, r0, r1
   c237e:	eeb0 0a48 	vmov.f32	s0, s16
   c2382:	eef0 0a68 	vmov.f32	s1, s17
   c2386:	ecbd 8b02 	vpop	{d8}
   c238a:	bd38      	pop	{r3, r4, r5, pc}
   c238c:	2003db64 	.word	0x2003db64

000c2390 <atan2f>:
   c2390:	f000 b9cc 	b.w	c272c <__ieee754_atan2f>

000c2394 <sqrtf>:
   c2394:	b508      	push	{r3, lr}
   c2396:	ed2d 8b02 	vpush	{d8}
   c239a:	eeb0 8a40 	vmov.f32	s16, s0
   c239e:	f000 fb9f 	bl	c2ae0 <__ieee754_sqrtf>
   c23a2:	4b0e      	ldr	r3, [pc, #56]	; (c23dc <sqrtf+0x48>)
   c23a4:	f993 3000 	ldrsb.w	r3, [r3]
   c23a8:	3301      	adds	r3, #1
   c23aa:	d00b      	beq.n	c23c4 <sqrtf+0x30>
   c23ac:	eeb4 8a48 	vcmp.f32	s16, s16
   c23b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c23b4:	d606      	bvs.n	c23c4 <sqrtf+0x30>
   c23b6:	eddf 8a0a 	vldr	s17, [pc, #40]	; c23e0 <sqrtf+0x4c>
   c23ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c23be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c23c2:	d402      	bmi.n	c23ca <sqrtf+0x36>
   c23c4:	ecbd 8b02 	vpop	{d8}
   c23c8:	bd08      	pop	{r3, pc}
   c23ca:	f7fb ff11 	bl	be1f0 <__errno>
   c23ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c23d2:	ecbd 8b02 	vpop	{d8}
   c23d6:	2321      	movs	r3, #33	; 0x21
   c23d8:	6003      	str	r3, [r0, #0]
   c23da:	bd08      	pop	{r3, pc}
   c23dc:	2003db64 	.word	0x2003db64
	...

000c23e8 <__ieee754_atan2>:
   c23e8:	ec51 0b11 	vmov	r0, r1, d1
   c23ec:	4243      	negs	r3, r0
   c23ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c23f2:	4303      	orrs	r3, r0
   c23f4:	4e64      	ldr	r6, [pc, #400]	; (c2588 <__ieee754_atan2+0x1a0>)
   c23f6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c23fa:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c23fe:	42b3      	cmp	r3, r6
   c2400:	ec55 4b10 	vmov	r4, r5, d0
   c2404:	d83e      	bhi.n	c2484 <__ieee754_atan2+0x9c>
   c2406:	4263      	negs	r3, r4
   c2408:	4323      	orrs	r3, r4
   c240a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c240e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c2412:	42b3      	cmp	r3, r6
   c2414:	46a9      	mov	r9, r5
   c2416:	d835      	bhi.n	c2484 <__ieee754_atan2+0x9c>
   c2418:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c241c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2420:	4303      	orrs	r3, r0
   c2422:	d03e      	beq.n	c24a2 <__ieee754_atan2+0xba>
   c2424:	178f      	asrs	r7, r1, #30
   c2426:	f007 0702 	and.w	r7, r7, #2
   c242a:	ea5a 0304 	orrs.w	r3, sl, r4
   c242e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c2432:	d02f      	beq.n	c2494 <__ieee754_atan2+0xac>
   c2434:	ea5e 0300 	orrs.w	r3, lr, r0
   c2438:	d037      	beq.n	c24aa <__ieee754_atan2+0xc2>
   c243a:	45b6      	cmp	lr, r6
   c243c:	d044      	beq.n	c24c8 <__ieee754_atan2+0xe0>
   c243e:	45b2      	cmp	sl, r6
   c2440:	d033      	beq.n	c24aa <__ieee754_atan2+0xc2>
   c2442:	ebaa 0e0e 	sub.w	lr, sl, lr
   c2446:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c244a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c244e:	da38      	bge.n	c24c2 <__ieee754_atan2+0xda>
   c2450:	2900      	cmp	r1, #0
   c2452:	da45      	bge.n	c24e0 <__ieee754_atan2+0xf8>
   c2454:	333c      	adds	r3, #60	; 0x3c
   c2456:	da43      	bge.n	c24e0 <__ieee754_atan2+0xf8>
   c2458:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2550 <__ieee754_atan2+0x168>
   c245c:	2f01      	cmp	r7, #1
   c245e:	d05d      	beq.n	c251c <__ieee754_atan2+0x134>
   c2460:	2f02      	cmp	r7, #2
   c2462:	d04a      	beq.n	c24fa <__ieee754_atan2+0x112>
   c2464:	b1a7      	cbz	r7, c2490 <__ieee754_atan2+0xa8>
   c2466:	ec51 0b10 	vmov	r0, r1, d0
   c246a:	a33b      	add	r3, pc, #236	; (adr r3, c2558 <__ieee754_atan2+0x170>)
   c246c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2470:	f001 fa86 	bl	c3980 <__aeabi_dsub>
   c2474:	a33a      	add	r3, pc, #232	; (adr r3, c2560 <__ieee754_atan2+0x178>)
   c2476:	e9d3 2300 	ldrd	r2, r3, [r3]
   c247a:	f001 fa81 	bl	c3980 <__aeabi_dsub>
   c247e:	ec41 0b10 	vmov	d0, r0, r1
   c2482:	e005      	b.n	c2490 <__ieee754_atan2+0xa8>
   c2484:	4622      	mov	r2, r4
   c2486:	462b      	mov	r3, r5
   c2488:	f001 fa7c 	bl	c3984 <__adddf3>
   c248c:	ec41 0b10 	vmov	d0, r0, r1
   c2490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2494:	2f02      	cmp	r7, #2
   c2496:	d00e      	beq.n	c24b6 <__ieee754_atan2+0xce>
   c2498:	2f03      	cmp	r7, #3
   c249a:	d1f9      	bne.n	c2490 <__ieee754_atan2+0xa8>
   c249c:	ed9f 0b32 	vldr	d0, [pc, #200]	; c2568 <__ieee754_atan2+0x180>
   c24a0:	e7f6      	b.n	c2490 <__ieee754_atan2+0xa8>
   c24a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c24a6:	f000 bf23 	b.w	c32f0 <atan>
   c24aa:	f1b9 0f00 	cmp.w	r9, #0
   c24ae:	db05      	blt.n	c24bc <__ieee754_atan2+0xd4>
   c24b0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c2570 <__ieee754_atan2+0x188>
   c24b4:	e7ec      	b.n	c2490 <__ieee754_atan2+0xa8>
   c24b6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2560 <__ieee754_atan2+0x178>
   c24ba:	e7e9      	b.n	c2490 <__ieee754_atan2+0xa8>
   c24bc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c2578 <__ieee754_atan2+0x190>
   c24c0:	e7e6      	b.n	c2490 <__ieee754_atan2+0xa8>
   c24c2:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c2570 <__ieee754_atan2+0x188>
   c24c6:	e7c9      	b.n	c245c <__ieee754_atan2+0x74>
   c24c8:	45f2      	cmp	sl, lr
   c24ca:	f107 37ff 	add.w	r7, r7, #4294967295
   c24ce:	d02e      	beq.n	c252e <__ieee754_atan2+0x146>
   c24d0:	2f02      	cmp	r7, #2
   c24d2:	d834      	bhi.n	c253e <__ieee754_atan2+0x156>
   c24d4:	4b2d      	ldr	r3, [pc, #180]	; (c258c <__ieee754_atan2+0x1a4>)
   c24d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c24da:	ed97 0b00 	vldr	d0, [r7]
   c24de:	e7d7      	b.n	c2490 <__ieee754_atan2+0xa8>
   c24e0:	4602      	mov	r2, r0
   c24e2:	460b      	mov	r3, r1
   c24e4:	4620      	mov	r0, r4
   c24e6:	4629      	mov	r1, r5
   c24e8:	f001 fd2c 	bl	c3f44 <__aeabi_ddiv>
   c24ec:	ec41 0b10 	vmov	d0, r0, r1
   c24f0:	f001 f89e 	bl	c3630 <fabs>
   c24f4:	f000 fefc 	bl	c32f0 <atan>
   c24f8:	e7b0      	b.n	c245c <__ieee754_atan2+0x74>
   c24fa:	a317      	add	r3, pc, #92	; (adr r3, c2558 <__ieee754_atan2+0x170>)
   c24fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2500:	ec51 0b10 	vmov	r0, r1, d0
   c2504:	f001 fa3c 	bl	c3980 <__aeabi_dsub>
   c2508:	4602      	mov	r2, r0
   c250a:	460b      	mov	r3, r1
   c250c:	a114      	add	r1, pc, #80	; (adr r1, c2560 <__ieee754_atan2+0x178>)
   c250e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2512:	f001 fa35 	bl	c3980 <__aeabi_dsub>
   c2516:	ec41 0b10 	vmov	d0, r0, r1
   c251a:	e7b9      	b.n	c2490 <__ieee754_atan2+0xa8>
   c251c:	ee10 1a90 	vmov	r1, s1
   c2520:	ec53 2b10 	vmov	r2, r3, d0
   c2524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2528:	ec43 2b10 	vmov	d0, r2, r3
   c252c:	e7b0      	b.n	c2490 <__ieee754_atan2+0xa8>
   c252e:	2f02      	cmp	r7, #2
   c2530:	d808      	bhi.n	c2544 <__ieee754_atan2+0x15c>
   c2532:	4b17      	ldr	r3, [pc, #92]	; (c2590 <__ieee754_atan2+0x1a8>)
   c2534:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2538:	ed97 0b00 	vldr	d0, [r7]
   c253c:	e7a8      	b.n	c2490 <__ieee754_atan2+0xa8>
   c253e:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2550 <__ieee754_atan2+0x168>
   c2542:	e7a5      	b.n	c2490 <__ieee754_atan2+0xa8>
   c2544:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c2580 <__ieee754_atan2+0x198>
   c2548:	e7a2      	b.n	c2490 <__ieee754_atan2+0xa8>
   c254a:	bf00      	nop
   c254c:	f3af 8000 	nop.w
	...
   c2558:	33145c07 	.word	0x33145c07
   c255c:	3ca1a626 	.word	0x3ca1a626
   c2560:	54442d18 	.word	0x54442d18
   c2564:	400921fb 	.word	0x400921fb
   c2568:	54442d18 	.word	0x54442d18
   c256c:	c00921fb 	.word	0xc00921fb
   c2570:	54442d18 	.word	0x54442d18
   c2574:	3ff921fb 	.word	0x3ff921fb
   c2578:	54442d18 	.word	0x54442d18
   c257c:	bff921fb 	.word	0xbff921fb
   c2580:	54442d18 	.word	0x54442d18
   c2584:	3fe921fb 	.word	0x3fe921fb
   c2588:	7ff00000 	.word	0x7ff00000
   c258c:	000c8060 	.word	0x000c8060
   c2590:	000c8048 	.word	0x000c8048

000c2594 <__ieee754_sqrt>:
   c2594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2598:	4a63      	ldr	r2, [pc, #396]	; (c2728 <__ieee754_sqrt+0x194>)
   c259a:	ec55 4b10 	vmov	r4, r5, d0
   c259e:	43aa      	bics	r2, r5
   c25a0:	f000 809f 	beq.w	c26e2 <__ieee754_sqrt+0x14e>
   c25a4:	2d00      	cmp	r5, #0
   c25a6:	ee10 ca10 	vmov	ip, s0
   c25aa:	462b      	mov	r3, r5
   c25ac:	dd54      	ble.n	c2658 <__ieee754_sqrt+0xc4>
   c25ae:	1529      	asrs	r1, r5, #20
   c25b0:	d063      	beq.n	c267a <__ieee754_sqrt+0xe6>
   c25b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c25b6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c25ba:	07c9      	lsls	r1, r1, #31
   c25bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c25c0:	d404      	bmi.n	c25cc <__ieee754_sqrt+0x38>
   c25c2:	005b      	lsls	r3, r3, #1
   c25c4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c25c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c25cc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c25d0:	2600      	movs	r6, #0
   c25d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c25d6:	107f      	asrs	r7, r7, #1
   c25d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c25dc:	f04f 0e16 	mov.w	lr, #22
   c25e0:	4634      	mov	r4, r6
   c25e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c25e6:	18a1      	adds	r1, r4, r2
   c25e8:	4299      	cmp	r1, r3
   c25ea:	dc02      	bgt.n	c25f2 <__ieee754_sqrt+0x5e>
   c25ec:	1a5b      	subs	r3, r3, r1
   c25ee:	188c      	adds	r4, r1, r2
   c25f0:	4416      	add	r6, r2
   c25f2:	005b      	lsls	r3, r3, #1
   c25f4:	f1be 0e01 	subs.w	lr, lr, #1
   c25f8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c25fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2600:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2604:	d1ef      	bne.n	c25e6 <__ieee754_sqrt+0x52>
   c2606:	4675      	mov	r5, lr
   c2608:	2020      	movs	r0, #32
   c260a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c260e:	e00a      	b.n	c2626 <__ieee754_sqrt+0x92>
   c2610:	d044      	beq.n	c269c <__ieee754_sqrt+0x108>
   c2612:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c2616:	3801      	subs	r0, #1
   c2618:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c261c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2620:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2624:	d043      	beq.n	c26ae <__ieee754_sqrt+0x11a>
   c2626:	42a3      	cmp	r3, r4
   c2628:	eb02 010e 	add.w	r1, r2, lr
   c262c:	ddf0      	ble.n	c2610 <__ieee754_sqrt+0x7c>
   c262e:	2900      	cmp	r1, #0
   c2630:	eb01 0e02 	add.w	lr, r1, r2
   c2634:	db0a      	blt.n	c264c <__ieee754_sqrt+0xb8>
   c2636:	46a0      	mov	r8, r4
   c2638:	1b1b      	subs	r3, r3, r4
   c263a:	4561      	cmp	r1, ip
   c263c:	bf88      	it	hi
   c263e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   c2642:	ebac 0c01 	sub.w	ip, ip, r1
   c2646:	4415      	add	r5, r2
   c2648:	4644      	mov	r4, r8
   c264a:	e7e2      	b.n	c2612 <__ieee754_sqrt+0x7e>
   c264c:	f1be 0f00 	cmp.w	lr, #0
   c2650:	dbf1      	blt.n	c2636 <__ieee754_sqrt+0xa2>
   c2652:	f104 0801 	add.w	r8, r4, #1
   c2656:	e7ef      	b.n	c2638 <__ieee754_sqrt+0xa4>
   c2658:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c265c:	4322      	orrs	r2, r4
   c265e:	d038      	beq.n	c26d2 <__ieee754_sqrt+0x13e>
   c2660:	2d00      	cmp	r5, #0
   c2662:	d14e      	bne.n	c2702 <__ieee754_sqrt+0x16e>
   c2664:	4629      	mov	r1, r5
   c2666:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c266a:	3915      	subs	r1, #21
   c266c:	4613      	mov	r3, r2
   c266e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c2672:	2a00      	cmp	r2, #0
   c2674:	d0f7      	beq.n	c2666 <__ieee754_sqrt+0xd2>
   c2676:	02d6      	lsls	r6, r2, #11
   c2678:	d450      	bmi.n	c271c <__ieee754_sqrt+0x188>
   c267a:	2000      	movs	r0, #0
   c267c:	005b      	lsls	r3, r3, #1
   c267e:	02dd      	lsls	r5, r3, #11
   c2680:	4604      	mov	r4, r0
   c2682:	f100 0001 	add.w	r0, r0, #1
   c2686:	d5f9      	bpl.n	c267c <__ieee754_sqrt+0xe8>
   c2688:	461a      	mov	r2, r3
   c268a:	4663      	mov	r3, ip
   c268c:	fa0c fc00 	lsl.w	ip, ip, r0
   c2690:	f1c0 0020 	rsb	r0, r0, #32
   c2694:	40c3      	lsrs	r3, r0
   c2696:	1b09      	subs	r1, r1, r4
   c2698:	4313      	orrs	r3, r2
   c269a:	e78a      	b.n	c25b2 <__ieee754_sqrt+0x1e>
   c269c:	4561      	cmp	r1, ip
   c269e:	d8b8      	bhi.n	c2612 <__ieee754_sqrt+0x7e>
   c26a0:	2900      	cmp	r1, #0
   c26a2:	eb01 0e02 	add.w	lr, r1, r2
   c26a6:	dbd1      	blt.n	c264c <__ieee754_sqrt+0xb8>
   c26a8:	4698      	mov	r8, r3
   c26aa:	2300      	movs	r3, #0
   c26ac:	e7c9      	b.n	c2642 <__ieee754_sqrt+0xae>
   c26ae:	ea53 030c 	orrs.w	r3, r3, ip
   c26b2:	d110      	bne.n	c26d6 <__ieee754_sqrt+0x142>
   c26b4:	0868      	lsrs	r0, r5, #1
   c26b6:	1071      	asrs	r1, r6, #1
   c26b8:	07f3      	lsls	r3, r6, #31
   c26ba:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c26be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c26c2:	bf48      	it	mi
   c26c4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c26c8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c26cc:	4602      	mov	r2, r0
   c26ce:	ec43 2b10 	vmov	d0, r2, r3
   c26d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c26d6:	1c6a      	adds	r2, r5, #1
   c26d8:	bf16      	itet	ne
   c26da:	1c68      	addne	r0, r5, #1
   c26dc:	3601      	addeq	r6, #1
   c26de:	0840      	lsrne	r0, r0, #1
   c26e0:	e7e9      	b.n	c26b6 <__ieee754_sqrt+0x122>
   c26e2:	ee10 2a10 	vmov	r2, s0
   c26e6:	ee10 0a10 	vmov	r0, s0
   c26ea:	462b      	mov	r3, r5
   c26ec:	4629      	mov	r1, r5
   c26ee:	f001 faff 	bl	c3cf0 <__aeabi_dmul>
   c26f2:	4622      	mov	r2, r4
   c26f4:	462b      	mov	r3, r5
   c26f6:	f001 f945 	bl	c3984 <__adddf3>
   c26fa:	ec41 0b10 	vmov	d0, r0, r1
   c26fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2702:	ee10 2a10 	vmov	r2, s0
   c2706:	4620      	mov	r0, r4
   c2708:	4629      	mov	r1, r5
   c270a:	f001 f939 	bl	c3980 <__aeabi_dsub>
   c270e:	4602      	mov	r2, r0
   c2710:	460b      	mov	r3, r1
   c2712:	f001 fc17 	bl	c3f44 <__aeabi_ddiv>
   c2716:	ec41 0b10 	vmov	d0, r0, r1
   c271a:	e7da      	b.n	c26d2 <__ieee754_sqrt+0x13e>
   c271c:	4663      	mov	r3, ip
   c271e:	2020      	movs	r0, #32
   c2720:	f04f 34ff 	mov.w	r4, #4294967295
   c2724:	e7b6      	b.n	c2694 <__ieee754_sqrt+0x100>
   c2726:	bf00      	nop
   c2728:	7ff00000 	.word	0x7ff00000

000c272c <__ieee754_atan2f>:
   c272c:	b510      	push	{r4, lr}
   c272e:	b082      	sub	sp, #8
   c2730:	edcd 0a01 	vstr	s1, [sp, #4]
   c2734:	9b01      	ldr	r3, [sp, #4]
   c2736:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c273a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c273e:	eef0 7a40 	vmov.f32	s15, s0
   c2742:	dc30      	bgt.n	c27a6 <__ieee754_atan2f+0x7a>
   c2744:	ee10 0a10 	vmov	r0, s0
   c2748:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c274c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2750:	dc29      	bgt.n	c27a6 <__ieee754_atan2f+0x7a>
   c2752:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c2756:	d042      	beq.n	c27de <__ieee754_atan2f+0xb2>
   c2758:	179c      	asrs	r4, r3, #30
   c275a:	f004 0402 	and.w	r4, r4, #2
   c275e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c2762:	b331      	cbz	r1, c27b2 <__ieee754_atan2f+0x86>
   c2764:	b37a      	cbz	r2, c27c6 <__ieee754_atan2f+0x9a>
   c2766:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c276a:	d040      	beq.n	c27ee <__ieee754_atan2f+0xc2>
   c276c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2770:	d029      	beq.n	c27c6 <__ieee754_atan2f+0x9a>
   c2772:	1a8a      	subs	r2, r1, r2
   c2774:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c2778:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c277c:	da34      	bge.n	c27e8 <__ieee754_atan2f+0xbc>
   c277e:	2b00      	cmp	r3, #0
   c2780:	da42      	bge.n	c2808 <__ieee754_atan2f+0xdc>
   c2782:	313c      	adds	r1, #60	; 0x3c
   c2784:	da40      	bge.n	c2808 <__ieee754_atan2f+0xdc>
   c2786:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2858 <__ieee754_atan2f+0x12c>
   c278a:	2c01      	cmp	r4, #1
   c278c:	d04e      	beq.n	c282c <__ieee754_atan2f+0x100>
   c278e:	2c02      	cmp	r4, #2
   c2790:	d043      	beq.n	c281a <__ieee754_atan2f+0xee>
   c2792:	b164      	cbz	r4, c27ae <__ieee754_atan2f+0x82>
   c2794:	ed9f 7a31 	vldr	s14, [pc, #196]	; c285c <__ieee754_atan2f+0x130>
   c2798:	eddf 7a31 	vldr	s15, [pc, #196]	; c2860 <__ieee754_atan2f+0x134>
   c279c:	ee30 0a07 	vadd.f32	s0, s0, s14
   c27a0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c27a4:	e003      	b.n	c27ae <__ieee754_atan2f+0x82>
   c27a6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c27aa:	ee37 0a27 	vadd.f32	s0, s14, s15
   c27ae:	b002      	add	sp, #8
   c27b0:	bd10      	pop	{r4, pc}
   c27b2:	2c02      	cmp	r4, #2
   c27b4:	d010      	beq.n	c27d8 <__ieee754_atan2f+0xac>
   c27b6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2864 <__ieee754_atan2f+0x138>
   c27ba:	2c03      	cmp	r4, #3
   c27bc:	bf18      	it	ne
   c27be:	eeb0 0a67 	vmovne.f32	s0, s15
   c27c2:	b002      	add	sp, #8
   c27c4:	bd10      	pop	{r4, pc}
   c27c6:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2868 <__ieee754_atan2f+0x13c>
   c27ca:	eddf 7a28 	vldr	s15, [pc, #160]	; c286c <__ieee754_atan2f+0x140>
   c27ce:	2800      	cmp	r0, #0
   c27d0:	bfb8      	it	lt
   c27d2:	eeb0 0a67 	vmovlt.f32	s0, s15
   c27d6:	e7ea      	b.n	c27ae <__ieee754_atan2f+0x82>
   c27d8:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2860 <__ieee754_atan2f+0x134>
   c27dc:	e7e7      	b.n	c27ae <__ieee754_atan2f+0x82>
   c27de:	b002      	add	sp, #8
   c27e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c27e4:	f000 bf2e 	b.w	c3644 <atanf>
   c27e8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2868 <__ieee754_atan2f+0x13c>
   c27ec:	e7cd      	b.n	c278a <__ieee754_atan2f+0x5e>
   c27ee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c27f2:	f104 34ff 	add.w	r4, r4, #4294967295
   c27f6:	d020      	beq.n	c283a <__ieee754_atan2f+0x10e>
   c27f8:	2c02      	cmp	r4, #2
   c27fa:	d826      	bhi.n	c284a <__ieee754_atan2f+0x11e>
   c27fc:	4b1c      	ldr	r3, [pc, #112]	; (c2870 <__ieee754_atan2f+0x144>)
   c27fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2802:	ed94 0a00 	vldr	s0, [r4]
   c2806:	e7d2      	b.n	c27ae <__ieee754_atan2f+0x82>
   c2808:	ed9d 7a01 	vldr	s14, [sp, #4]
   c280c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2810:	f000 fff2 	bl	c37f8 <fabsf>
   c2814:	f000 ff16 	bl	c3644 <atanf>
   c2818:	e7b7      	b.n	c278a <__ieee754_atan2f+0x5e>
   c281a:	ed9f 7a10 	vldr	s14, [pc, #64]	; c285c <__ieee754_atan2f+0x130>
   c281e:	eddf 7a10 	vldr	s15, [pc, #64]	; c2860 <__ieee754_atan2f+0x134>
   c2822:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2826:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c282a:	e7c0      	b.n	c27ae <__ieee754_atan2f+0x82>
   c282c:	ee10 3a10 	vmov	r3, s0
   c2830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c2834:	ee00 3a10 	vmov	s0, r3
   c2838:	e7b9      	b.n	c27ae <__ieee754_atan2f+0x82>
   c283a:	2c02      	cmp	r4, #2
   c283c:	d808      	bhi.n	c2850 <__ieee754_atan2f+0x124>
   c283e:	4b0d      	ldr	r3, [pc, #52]	; (c2874 <__ieee754_atan2f+0x148>)
   c2840:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2844:	ed94 0a00 	vldr	s0, [r4]
   c2848:	e7b1      	b.n	c27ae <__ieee754_atan2f+0x82>
   c284a:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2858 <__ieee754_atan2f+0x12c>
   c284e:	e7ae      	b.n	c27ae <__ieee754_atan2f+0x82>
   c2850:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2878 <__ieee754_atan2f+0x14c>
   c2854:	e7ab      	b.n	c27ae <__ieee754_atan2f+0x82>
   c2856:	bf00      	nop
   c2858:	00000000 	.word	0x00000000
   c285c:	33bbbd2e 	.word	0x33bbbd2e
   c2860:	40490fdb 	.word	0x40490fdb
   c2864:	c0490fdb 	.word	0xc0490fdb
   c2868:	3fc90fdb 	.word	0x3fc90fdb
   c286c:	bfc90fdb 	.word	0xbfc90fdb
   c2870:	000c8084 	.word	0x000c8084
   c2874:	000c8078 	.word	0x000c8078
   c2878:	3f490fdb 	.word	0x3f490fdb

000c287c <__ieee754_rem_pio2f>:
   c287c:	b570      	push	{r4, r5, r6, lr}
   c287e:	ee10 3a10 	vmov	r3, s0
   c2882:	4a89      	ldr	r2, [pc, #548]	; (c2aa8 <__ieee754_rem_pio2f+0x22c>)
   c2884:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2888:	4294      	cmp	r4, r2
   c288a:	b086      	sub	sp, #24
   c288c:	4605      	mov	r5, r0
   c288e:	dd70      	ble.n	c2972 <__ieee754_rem_pio2f+0xf6>
   c2890:	4a86      	ldr	r2, [pc, #536]	; (c2aac <__ieee754_rem_pio2f+0x230>)
   c2892:	4294      	cmp	r4, r2
   c2894:	ee10 6a10 	vmov	r6, s0
   c2898:	dc22      	bgt.n	c28e0 <__ieee754_rem_pio2f+0x64>
   c289a:	2b00      	cmp	r3, #0
   c289c:	eddf 7a84 	vldr	s15, [pc, #528]	; c2ab0 <__ieee754_rem_pio2f+0x234>
   c28a0:	4a84      	ldr	r2, [pc, #528]	; (c2ab4 <__ieee754_rem_pio2f+0x238>)
   c28a2:	f024 040f 	bic.w	r4, r4, #15
   c28a6:	eeb0 7a40 	vmov.f32	s14, s0
   c28aa:	f340 80e4 	ble.w	c2a76 <__ieee754_rem_pio2f+0x1fa>
   c28ae:	4294      	cmp	r4, r2
   c28b0:	ee70 7a67 	vsub.f32	s15, s0, s15
   c28b4:	bf09      	itett	eq
   c28b6:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2ab8 <__ieee754_rem_pio2f+0x23c>
   c28ba:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2abc <__ieee754_rem_pio2f+0x240>
   c28be:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2ac0 <__ieee754_rem_pio2f+0x244>
   c28c2:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c28c6:	2001      	movs	r0, #1
   c28c8:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c28cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c28d0:	edc5 6a00 	vstr	s13, [r5]
   c28d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c28d8:	edc5 7a01 	vstr	s15, [r5, #4]
   c28dc:	b006      	add	sp, #24
   c28de:	bd70      	pop	{r4, r5, r6, pc}
   c28e0:	4a78      	ldr	r2, [pc, #480]	; (c2ac4 <__ieee754_rem_pio2f+0x248>)
   c28e2:	4294      	cmp	r4, r2
   c28e4:	dd54      	ble.n	c2990 <__ieee754_rem_pio2f+0x114>
   c28e6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c28ea:	da49      	bge.n	c2980 <__ieee754_rem_pio2f+0x104>
   c28ec:	15e2      	asrs	r2, r4, #23
   c28ee:	3a86      	subs	r2, #134	; 0x86
   c28f0:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c28f4:	ee07 3a90 	vmov	s15, r3
   c28f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c28fc:	eddf 6a72 	vldr	s13, [pc, #456]	; c2ac8 <__ieee754_rem_pio2f+0x24c>
   c2900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2904:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2908:	ed8d 7a03 	vstr	s14, [sp, #12]
   c290c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2910:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2918:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c291c:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2920:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2924:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c292c:	edcd 7a05 	vstr	s15, [sp, #20]
   c2930:	f040 8090 	bne.w	c2a54 <__ieee754_rem_pio2f+0x1d8>
   c2934:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c293c:	bf14      	ite	ne
   c293e:	2302      	movne	r3, #2
   c2940:	2301      	moveq	r3, #1
   c2942:	4962      	ldr	r1, [pc, #392]	; (c2acc <__ieee754_rem_pio2f+0x250>)
   c2944:	9101      	str	r1, [sp, #4]
   c2946:	2102      	movs	r1, #2
   c2948:	9100      	str	r1, [sp, #0]
   c294a:	a803      	add	r0, sp, #12
   c294c:	4629      	mov	r1, r5
   c294e:	f000 f94d 	bl	c2bec <__kernel_rem_pio2f>
   c2952:	2e00      	cmp	r6, #0
   c2954:	dac2      	bge.n	c28dc <__ieee754_rem_pio2f+0x60>
   c2956:	ed95 7a00 	vldr	s14, [r5]
   c295a:	edd5 7a01 	vldr	s15, [r5, #4]
   c295e:	eeb1 7a47 	vneg.f32	s14, s14
   c2962:	eef1 7a67 	vneg.f32	s15, s15
   c2966:	ed85 7a00 	vstr	s14, [r5]
   c296a:	edc5 7a01 	vstr	s15, [r5, #4]
   c296e:	4240      	negs	r0, r0
   c2970:	e7b4      	b.n	c28dc <__ieee754_rem_pio2f+0x60>
   c2972:	2200      	movs	r2, #0
   c2974:	ed85 0a00 	vstr	s0, [r5]
   c2978:	6042      	str	r2, [r0, #4]
   c297a:	2000      	movs	r0, #0
   c297c:	b006      	add	sp, #24
   c297e:	bd70      	pop	{r4, r5, r6, pc}
   c2980:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2984:	2000      	movs	r0, #0
   c2986:	edc5 7a01 	vstr	s15, [r5, #4]
   c298a:	edc5 7a00 	vstr	s15, [r5]
   c298e:	e7a5      	b.n	c28dc <__ieee754_rem_pio2f+0x60>
   c2990:	f000 ff32 	bl	c37f8 <fabsf>
   c2994:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2ad0 <__ieee754_rem_pio2f+0x254>
   c2998:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2ab0 <__ieee754_rem_pio2f+0x234>
   c299c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c29a0:	eee0 7a07 	vfma.f32	s15, s0, s14
   c29a4:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2abc <__ieee754_rem_pio2f+0x240>
   c29a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c29ac:	ee17 0a90 	vmov	r0, s15
   c29b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c29b4:	281f      	cmp	r0, #31
   c29b6:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c29ba:	ee66 7a87 	vmul.f32	s15, s13, s14
   c29be:	eeb1 6a66 	vneg.f32	s12, s13
   c29c2:	dc1e      	bgt.n	c2a02 <__ieee754_rem_pio2f+0x186>
   c29c4:	4a43      	ldr	r2, [pc, #268]	; (c2ad4 <__ieee754_rem_pio2f+0x258>)
   c29c6:	1e41      	subs	r1, r0, #1
   c29c8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c29cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c29d0:	4293      	cmp	r3, r2
   c29d2:	d016      	beq.n	c2a02 <__ieee754_rem_pio2f+0x186>
   c29d4:	ee30 7a67 	vsub.f32	s14, s0, s15
   c29d8:	ed85 7a00 	vstr	s14, [r5]
   c29dc:	ee30 0a47 	vsub.f32	s0, s0, s14
   c29e0:	2e00      	cmp	r6, #0
   c29e2:	ee30 0a67 	vsub.f32	s0, s0, s15
   c29e6:	ed85 0a01 	vstr	s0, [r5, #4]
   c29ea:	f6bf af77 	bge.w	c28dc <__ieee754_rem_pio2f+0x60>
   c29ee:	eeb1 7a47 	vneg.f32	s14, s14
   c29f2:	eeb1 0a40 	vneg.f32	s0, s0
   c29f6:	ed85 7a00 	vstr	s14, [r5]
   c29fa:	ed85 0a01 	vstr	s0, [r5, #4]
   c29fe:	4240      	negs	r0, r0
   c2a00:	e76c      	b.n	c28dc <__ieee754_rem_pio2f+0x60>
   c2a02:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2a06:	15e2      	asrs	r2, r4, #23
   c2a08:	ee17 3a10 	vmov	r3, s14
   c2a0c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2a10:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2a14:	2c08      	cmp	r4, #8
   c2a16:	dddf      	ble.n	c29d8 <__ieee754_rem_pio2f+0x15c>
   c2a18:	eddf 7a27 	vldr	s15, [pc, #156]	; c2ab8 <__ieee754_rem_pio2f+0x23c>
   c2a1c:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2ac0 <__ieee754_rem_pio2f+0x244>
   c2a20:	eef0 5a40 	vmov.f32	s11, s0
   c2a24:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2a28:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2a2c:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2a30:	eef0 7a40 	vmov.f32	s15, s0
   c2a34:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2a38:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2a3c:	ee17 3a10 	vmov	r3, s14
   c2a40:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2a44:	1ad2      	subs	r2, r2, r3
   c2a46:	2a19      	cmp	r2, #25
   c2a48:	dc06      	bgt.n	c2a58 <__ieee754_rem_pio2f+0x1dc>
   c2a4a:	eeb0 0a65 	vmov.f32	s0, s11
   c2a4e:	ed85 7a00 	vstr	s14, [r5]
   c2a52:	e7c3      	b.n	c29dc <__ieee754_rem_pio2f+0x160>
   c2a54:	2303      	movs	r3, #3
   c2a56:	e774      	b.n	c2942 <__ieee754_rem_pio2f+0xc6>
   c2a58:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2ad8 <__ieee754_rem_pio2f+0x25c>
   c2a5c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2adc <__ieee754_rem_pio2f+0x260>
   c2a60:	eeb0 0a65 	vmov.f32	s0, s11
   c2a64:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2a68:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2a6c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2a70:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2a74:	e7ae      	b.n	c29d4 <__ieee754_rem_pio2f+0x158>
   c2a76:	4294      	cmp	r4, r2
   c2a78:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2a7c:	bf09      	itett	eq
   c2a7e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2ab8 <__ieee754_rem_pio2f+0x23c>
   c2a82:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2abc <__ieee754_rem_pio2f+0x240>
   c2a86:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2ac0 <__ieee754_rem_pio2f+0x244>
   c2a8a:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2a8e:	f04f 30ff 	mov.w	r0, #4294967295
   c2a92:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2a96:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2a9a:	edc5 6a00 	vstr	s13, [r5]
   c2a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2aa2:	edc5 7a01 	vstr	s15, [r5, #4]
   c2aa6:	e719      	b.n	c28dc <__ieee754_rem_pio2f+0x60>
   c2aa8:	3f490fd8 	.word	0x3f490fd8
   c2aac:	4016cbe3 	.word	0x4016cbe3
   c2ab0:	3fc90f80 	.word	0x3fc90f80
   c2ab4:	3fc90fd0 	.word	0x3fc90fd0
   c2ab8:	37354400 	.word	0x37354400
   c2abc:	37354443 	.word	0x37354443
   c2ac0:	2e85a308 	.word	0x2e85a308
   c2ac4:	43490f80 	.word	0x43490f80
   c2ac8:	43800000 	.word	0x43800000
   c2acc:	000c8110 	.word	0x000c8110
   c2ad0:	3f22f984 	.word	0x3f22f984
   c2ad4:	000c8090 	.word	0x000c8090
   c2ad8:	2e85a300 	.word	0x2e85a300
   c2adc:	248d3132 	.word	0x248d3132

000c2ae0 <__ieee754_sqrtf>:
   c2ae0:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2ae4:	4770      	bx	lr
   c2ae6:	bf00      	nop

000c2ae8 <__kernel_cosf>:
   c2ae8:	ee10 3a10 	vmov	r3, s0
   c2aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2af0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2af4:	da2c      	bge.n	c2b50 <__kernel_cosf+0x68>
   c2af6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2afa:	ee17 3a90 	vmov	r3, s15
   c2afe:	2b00      	cmp	r3, #0
   c2b00:	d060      	beq.n	c2bc4 <__kernel_cosf+0xdc>
   c2b02:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2b06:	eddf 7a31 	vldr	s15, [pc, #196]	; c2bcc <__kernel_cosf+0xe4>
   c2b0a:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2bd0 <__kernel_cosf+0xe8>
   c2b0e:	eddf 5a31 	vldr	s11, [pc, #196]	; c2bd4 <__kernel_cosf+0xec>
   c2b12:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2bd8 <__kernel_cosf+0xf0>
   c2b16:	eddf 6a31 	vldr	s13, [pc, #196]	; c2bdc <__kernel_cosf+0xf4>
   c2b1a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2b1e:	eddf 7a30 	vldr	s15, [pc, #192]	; c2be0 <__kernel_cosf+0xf8>
   c2b22:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2b26:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2b2a:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2b2e:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2b32:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2b36:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2b3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2b3e:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2b42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2b46:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2b4a:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2b4e:	4770      	bx	lr
   c2b50:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2b54:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2bcc <__kernel_cosf+0xe4>
   c2b58:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2bd0 <__kernel_cosf+0xe8>
   c2b5c:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2bd4 <__kernel_cosf+0xec>
   c2b60:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2bd8 <__kernel_cosf+0xf0>
   c2b64:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2bdc <__kernel_cosf+0xf4>
   c2b68:	4a1e      	ldr	r2, [pc, #120]	; (c2be4 <__kernel_cosf+0xfc>)
   c2b6a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2b6e:	4293      	cmp	r3, r2
   c2b70:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2be0 <__kernel_cosf+0xf8>
   c2b74:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2b78:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2b7c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2b80:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2b84:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2b88:	ddd5      	ble.n	c2b36 <__kernel_cosf+0x4e>
   c2b8a:	4a17      	ldr	r2, [pc, #92]	; (c2be8 <__kernel_cosf+0x100>)
   c2b8c:	4293      	cmp	r3, r2
   c2b8e:	dc14      	bgt.n	c2bba <__kernel_cosf+0xd2>
   c2b90:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2b94:	ee07 3a90 	vmov	s15, r3
   c2b98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2b9c:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2ba0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2ba4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2ba8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2bac:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2bb0:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2bb4:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2bb8:	4770      	bx	lr
   c2bba:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2bbe:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2bc2:	e7ed      	b.n	c2ba0 <__kernel_cosf+0xb8>
   c2bc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2bc8:	4770      	bx	lr
   c2bca:	bf00      	nop
   c2bcc:	ad47d74e 	.word	0xad47d74e
   c2bd0:	310f74f6 	.word	0x310f74f6
   c2bd4:	b493f27c 	.word	0xb493f27c
   c2bd8:	37d00d01 	.word	0x37d00d01
   c2bdc:	3d2aaaab 	.word	0x3d2aaaab
   c2be0:	bab60b61 	.word	0xbab60b61
   c2be4:	3e999999 	.word	0x3e999999
   c2be8:	3f480000 	.word	0x3f480000

000c2bec <__kernel_rem_pio2f>:
   c2bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2bf0:	ed2d 8b04 	vpush	{d8-d9}
   c2bf4:	b0db      	sub	sp, #364	; 0x16c
   c2bf6:	461c      	mov	r4, r3
   c2bf8:	9303      	str	r3, [sp, #12]
   c2bfa:	9106      	str	r1, [sp, #24]
   c2bfc:	4ba3      	ldr	r3, [pc, #652]	; (c2e8c <__kernel_rem_pio2f+0x2a0>)
   c2bfe:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2c00:	9208      	str	r2, [sp, #32]
   c2c02:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2c06:	1d11      	adds	r1, r2, #4
   c2c08:	4682      	mov	sl, r0
   c2c0a:	f104 38ff 	add.w	r8, r4, #4294967295
   c2c0e:	f2c0 82a2 	blt.w	c3156 <__kernel_rem_pio2f+0x56a>
   c2c12:	1ed3      	subs	r3, r2, #3
   c2c14:	bf44      	itt	mi
   c2c16:	4613      	movmi	r3, r2
   c2c18:	3304      	addmi	r3, #4
   c2c1a:	10db      	asrs	r3, r3, #3
   c2c1c:	9302      	str	r3, [sp, #8]
   c2c1e:	3301      	adds	r3, #1
   c2c20:	00db      	lsls	r3, r3, #3
   c2c22:	9307      	str	r3, [sp, #28]
   c2c24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2c28:	1a9b      	subs	r3, r3, r2
   c2c2a:	9305      	str	r3, [sp, #20]
   c2c2c:	9b02      	ldr	r3, [sp, #8]
   c2c2e:	eb15 0108 	adds.w	r1, r5, r8
   c2c32:	eba3 0308 	sub.w	r3, r3, r8
   c2c36:	d416      	bmi.n	c2c66 <__kernel_rem_pio2f+0x7a>
   c2c38:	3101      	adds	r1, #1
   c2c3a:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2e90 <__kernel_rem_pio2f+0x2a4>
   c2c3e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2c40:	4419      	add	r1, r3
   c2c42:	aa1e      	add	r2, sp, #120	; 0x78
   c2c44:	2b00      	cmp	r3, #0
   c2c46:	bfa4      	itt	ge
   c2c48:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2c4c:	ee07 4a90 	vmovge	s15, r4
   c2c50:	f103 0301 	add.w	r3, r3, #1
   c2c54:	bfac      	ite	ge
   c2c56:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2c5a:	eef0 7a47 	vmovlt.f32	s15, s14
   c2c5e:	428b      	cmp	r3, r1
   c2c60:	ece2 7a01 	vstmia	r2!, {s15}
   c2c64:	d1ee      	bne.n	c2c44 <__kernel_rem_pio2f+0x58>
   c2c66:	2d00      	cmp	r5, #0
   c2c68:	f2c0 82e5 	blt.w	c3236 <__kernel_rem_pio2f+0x64a>
   c2c6c:	9b03      	ldr	r3, [sp, #12]
   c2c6e:	a91e      	add	r1, sp, #120	; 0x78
   c2c70:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2c74:	ae46      	add	r6, sp, #280	; 0x118
   c2c76:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2c7a:	4640      	mov	r0, r8
   c2c7c:	18ef      	adds	r7, r5, r3
   c2c7e:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2c82:	f1b8 0f00 	cmp.w	r8, #0
   c2c86:	eddf 7a82 	vldr	s15, [pc, #520]	; c2e90 <__kernel_rem_pio2f+0x2a4>
   c2c8a:	db09      	blt.n	c2ca0 <__kernel_rem_pio2f+0xb4>
   c2c8c:	4622      	mov	r2, r4
   c2c8e:	4653      	mov	r3, sl
   c2c90:	ecf3 6a01 	vldmia	r3!, {s13}
   c2c94:	ed32 7a01 	vldmdb	r2!, {s14}
   c2c98:	428b      	cmp	r3, r1
   c2c9a:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2c9e:	d1f7      	bne.n	c2c90 <__kernel_rem_pio2f+0xa4>
   c2ca0:	3001      	adds	r0, #1
   c2ca2:	42b8      	cmp	r0, r7
   c2ca4:	ece6 7a01 	vstmia	r6!, {s15}
   c2ca8:	f104 0404 	add.w	r4, r4, #4
   c2cac:	d1e9      	bne.n	c2c82 <__kernel_rem_pio2f+0x96>
   c2cae:	ab09      	add	r3, sp, #36	; 0x24
   c2cb0:	af0a      	add	r7, sp, #40	; 0x28
   c2cb2:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2cb6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2cba:	3b08      	subs	r3, #8
   c2cbc:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2e98 <__kernel_rem_pio2f+0x2ac>
   c2cc0:	eddf 8a74 	vldr	s17, [pc, #464]	; c2e94 <__kernel_rem_pio2f+0x2a8>
   c2cc4:	9805      	ldr	r0, [sp, #20]
   c2cc6:	9304      	str	r3, [sp, #16]
   c2cc8:	eb0a 040c 	add.w	r4, sl, ip
   c2ccc:	ae46      	add	r6, sp, #280	; 0x118
   c2cce:	9500      	str	r5, [sp, #0]
   c2cd0:	ab5a      	add	r3, sp, #360	; 0x168
   c2cd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2cd6:	2d00      	cmp	r5, #0
   c2cd8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2cdc:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2ce0:	dd16      	ble.n	c2d10 <__kernel_rem_pio2f+0x124>
   c2ce2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2ce6:	463a      	mov	r2, r7
   c2ce8:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2cec:	eeb0 7a40 	vmov.f32	s14, s0
   c2cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2cf4:	ed73 6a01 	vldmdb	r3!, {s13}
   c2cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2cfc:	42b3      	cmp	r3, r6
   c2cfe:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2d02:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2d06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2d0a:	eca2 7a01 	vstmia	r2!, {s14}
   c2d0e:	d1eb      	bne.n	c2ce8 <__kernel_rem_pio2f+0xfc>
   c2d10:	9001      	str	r0, [sp, #4]
   c2d12:	f000 fdbf 	bl	c3894 <scalbnf>
   c2d16:	eeb0 8a40 	vmov.f32	s16, s0
   c2d1a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2d1e:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2d22:	f000 fd71 	bl	c3808 <floorf>
   c2d26:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2d2a:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2d2e:	9801      	ldr	r0, [sp, #4]
   c2d30:	2800      	cmp	r0, #0
   c2d32:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2d36:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2d3a:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2d3e:	dd79      	ble.n	c2e34 <__kernel_rem_pio2f+0x248>
   c2d40:	f105 3eff 	add.w	lr, r5, #4294967295
   c2d44:	f1c0 0308 	rsb	r3, r0, #8
   c2d48:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2d4c:	fa41 fc03 	asr.w	ip, r1, r3
   c2d50:	fa0c f303 	lsl.w	r3, ip, r3
   c2d54:	1acb      	subs	r3, r1, r3
   c2d56:	f1c0 0207 	rsb	r2, r0, #7
   c2d5a:	ee19 1a90 	vmov	r1, s19
   c2d5e:	fa43 f202 	asr.w	r2, r3, r2
   c2d62:	4461      	add	r1, ip
   c2d64:	2a00      	cmp	r2, #0
   c2d66:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2d6a:	ee09 1a90 	vmov	s19, r1
   c2d6e:	dc69      	bgt.n	c2e44 <__kernel_rem_pio2f+0x258>
   c2d70:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2d78:	f040 80c1 	bne.w	c2efe <__kernel_rem_pio2f+0x312>
   c2d7c:	9b00      	ldr	r3, [sp, #0]
   c2d7e:	f105 3bff 	add.w	fp, r5, #4294967295
   c2d82:	455b      	cmp	r3, fp
   c2d84:	dc10      	bgt.n	c2da8 <__kernel_rem_pio2f+0x1bc>
   c2d86:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2d8a:	3b01      	subs	r3, #1
   c2d8c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2d90:	2100      	movs	r1, #0
   c2d92:	4694      	mov	ip, r2
   c2d94:	f853 2904 	ldr.w	r2, [r3], #-4
   c2d98:	454b      	cmp	r3, r9
   c2d9a:	ea41 0102 	orr.w	r1, r1, r2
   c2d9e:	d1f9      	bne.n	c2d94 <__kernel_rem_pio2f+0x1a8>
   c2da0:	4662      	mov	r2, ip
   c2da2:	2900      	cmp	r1, #0
   c2da4:	f040 80f3 	bne.w	c2f8e <__kernel_rem_pio2f+0x3a2>
   c2da8:	9b00      	ldr	r3, [sp, #0]
   c2daa:	3b01      	subs	r3, #1
   c2dac:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2db0:	2b00      	cmp	r3, #0
   c2db2:	f040 80e8 	bne.w	c2f86 <__kernel_rem_pio2f+0x39a>
   c2db6:	9b04      	ldr	r3, [sp, #16]
   c2db8:	f04f 0c01 	mov.w	ip, #1
   c2dbc:	f853 2904 	ldr.w	r2, [r3], #-4
   c2dc0:	f10c 0c01 	add.w	ip, ip, #1
   c2dc4:	2a00      	cmp	r2, #0
   c2dc6:	d0f9      	beq.n	c2dbc <__kernel_rem_pio2f+0x1d0>
   c2dc8:	1c6b      	adds	r3, r5, #1
   c2dca:	44ac      	add	ip, r5
   c2dcc:	469e      	mov	lr, r3
   c2dce:	9a03      	ldr	r2, [sp, #12]
   c2dd0:	1951      	adds	r1, r2, r5
   c2dd2:	9a02      	ldr	r2, [sp, #8]
   c2dd4:	eb02 0b03 	add.w	fp, r2, r3
   c2dd8:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2ddc:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2dde:	f10b 3bff 	add.w	fp, fp, #4294967295
   c2de2:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2de6:	ab1e      	add	r3, sp, #120	; 0x78
   c2de8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2dec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2df0:	eddb 7a01 	vldr	s15, [fp, #4]
   c2df4:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2e90 <__kernel_rem_pio2f+0x2a4>
   c2df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2dfc:	f1b8 0f00 	cmp.w	r8, #0
   c2e00:	f10b 0b04 	add.w	fp, fp, #4
   c2e04:	edc1 7a00 	vstr	s15, [r1]
   c2e08:	460a      	mov	r2, r1
   c2e0a:	f101 0104 	add.w	r1, r1, #4
   c2e0e:	db09      	blt.n	c2e24 <__kernel_rem_pio2f+0x238>
   c2e10:	4653      	mov	r3, sl
   c2e12:	e001      	b.n	c2e18 <__kernel_rem_pio2f+0x22c>
   c2e14:	ed72 7a01 	vldmdb	r2!, {s15}
   c2e18:	ecf3 6a01 	vldmia	r3!, {s13}
   c2e1c:	42a3      	cmp	r3, r4
   c2e1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2e22:	d1f7      	bne.n	c2e14 <__kernel_rem_pio2f+0x228>
   c2e24:	f10e 0e01 	add.w	lr, lr, #1
   c2e28:	45e6      	cmp	lr, ip
   c2e2a:	eca5 7a01 	vstmia	r5!, {s14}
   c2e2e:	dddf      	ble.n	c2df0 <__kernel_rem_pio2f+0x204>
   c2e30:	4665      	mov	r5, ip
   c2e32:	e74d      	b.n	c2cd0 <__kernel_rem_pio2f+0xe4>
   c2e34:	f040 809d 	bne.w	c2f72 <__kernel_rem_pio2f+0x386>
   c2e38:	1e6b      	subs	r3, r5, #1
   c2e3a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2e3e:	1212      	asrs	r2, r2, #8
   c2e40:	2a00      	cmp	r2, #0
   c2e42:	dd95      	ble.n	c2d70 <__kernel_rem_pio2f+0x184>
   c2e44:	ee19 3a90 	vmov	r3, s19
   c2e48:	2d00      	cmp	r5, #0
   c2e4a:	f103 0301 	add.w	r3, r3, #1
   c2e4e:	ee09 3a90 	vmov	s19, r3
   c2e52:	f340 8196 	ble.w	c3182 <__kernel_rem_pio2f+0x596>
   c2e56:	6839      	ldr	r1, [r7, #0]
   c2e58:	2900      	cmp	r1, #0
   c2e5a:	f040 8080 	bne.w	c2f5e <__kernel_rem_pio2f+0x372>
   c2e5e:	2d01      	cmp	r5, #1
   c2e60:	d026      	beq.n	c2eb0 <__kernel_rem_pio2f+0x2c4>
   c2e62:	463b      	mov	r3, r7
   c2e64:	f04f 0c01 	mov.w	ip, #1
   c2e68:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2e6c:	2900      	cmp	r1, #0
   c2e6e:	d07a      	beq.n	c2f66 <__kernel_rem_pio2f+0x37a>
   c2e70:	f10c 0301 	add.w	r3, ip, #1
   c2e74:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c2e78:	429d      	cmp	r5, r3
   c2e7a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c2e7e:	dd16      	ble.n	c2eae <__kernel_rem_pio2f+0x2c2>
   c2e80:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c2e84:	44bb      	add	fp, r7
   c2e86:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2e8a:	e00a      	b.n	c2ea2 <__kernel_rem_pio2f+0x2b6>
   c2e8c:	000c8454 	.word	0x000c8454
   c2e90:	00000000 	.word	0x00000000
   c2e94:	43800000 	.word	0x43800000
   c2e98:	3b800000 	.word	0x3b800000
   c2e9c:	3fc90000 	.word	0x3fc90000
   c2ea0:	6819      	ldr	r1, [r3, #0]
   c2ea2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c2ea6:	f843 1b04 	str.w	r1, [r3], #4
   c2eaa:	455b      	cmp	r3, fp
   c2eac:	d1f8      	bne.n	c2ea0 <__kernel_rem_pio2f+0x2b4>
   c2eae:	2101      	movs	r1, #1
   c2eb0:	2800      	cmp	r0, #0
   c2eb2:	dd0c      	ble.n	c2ece <__kernel_rem_pio2f+0x2e2>
   c2eb4:	2801      	cmp	r0, #1
   c2eb6:	f000 8145 	beq.w	c3144 <__kernel_rem_pio2f+0x558>
   c2eba:	2802      	cmp	r0, #2
   c2ebc:	d107      	bne.n	c2ece <__kernel_rem_pio2f+0x2e2>
   c2ebe:	f105 3cff 	add.w	ip, r5, #4294967295
   c2ec2:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2eca:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2ece:	2a02      	cmp	r2, #2
   c2ed0:	f47f af4e 	bne.w	c2d70 <__kernel_rem_pio2f+0x184>
   c2ed4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2ed8:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2edc:	2900      	cmp	r1, #0
   c2ede:	f43f af47 	beq.w	c2d70 <__kernel_rem_pio2f+0x184>
   c2ee2:	9209      	str	r2, [sp, #36]	; 0x24
   c2ee4:	9001      	str	r0, [sp, #4]
   c2ee6:	f000 fcd5 	bl	c3894 <scalbnf>
   c2eea:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2ef0:	9801      	ldr	r0, [sp, #4]
   c2ef2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2efa:	f43f af3f 	beq.w	c2d7c <__kernel_rem_pio2f+0x190>
   c2efe:	9202      	str	r2, [sp, #8]
   c2f00:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c2f04:	eeb0 0a48 	vmov.f32	s0, s16
   c2f08:	1a98      	subs	r0, r3, r2
   c2f0a:	9501      	str	r5, [sp, #4]
   c2f0c:	9d00      	ldr	r5, [sp, #0]
   c2f0e:	f000 fcc1 	bl	c3894 <scalbnf>
   c2f12:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c2e94 <__kernel_rem_pio2f+0x2a8>
   c2f16:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2f1e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c2f22:	f2c0 8156 	blt.w	c31d2 <__kernel_rem_pio2f+0x5e6>
   c2f26:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2e98 <__kernel_rem_pio2f+0x2ac>
   c2f2a:	9905      	ldr	r1, [sp, #20]
   c2f2c:	ee60 7a27 	vmul.f32	s15, s0, s15
   c2f30:	3108      	adds	r1, #8
   c2f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2f36:	9105      	str	r1, [sp, #20]
   c2f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f3c:	f103 0b01 	add.w	fp, r3, #1
   c2f40:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c2f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2f48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2f4c:	ee10 1a10 	vmov	r1, s0
   c2f50:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2f54:	ee17 3a90 	vmov	r3, s15
   c2f58:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c2f5c:	e02e      	b.n	c2fbc <__kernel_rem_pio2f+0x3d0>
   c2f5e:	2301      	movs	r3, #1
   c2f60:	f04f 0c00 	mov.w	ip, #0
   c2f64:	e786      	b.n	c2e74 <__kernel_rem_pio2f+0x288>
   c2f66:	f10c 0c01 	add.w	ip, ip, #1
   c2f6a:	45ac      	cmp	ip, r5
   c2f6c:	f47f af7c 	bne.w	c2e68 <__kernel_rem_pio2f+0x27c>
   c2f70:	e79e      	b.n	c2eb0 <__kernel_rem_pio2f+0x2c4>
   c2f72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2f76:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c2f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2f7e:	f280 80ef 	bge.w	c3160 <__kernel_rem_pio2f+0x574>
   c2f82:	2200      	movs	r2, #0
   c2f84:	e6f4      	b.n	c2d70 <__kernel_rem_pio2f+0x184>
   c2f86:	1c6b      	adds	r3, r5, #1
   c2f88:	469e      	mov	lr, r3
   c2f8a:	469c      	mov	ip, r3
   c2f8c:	e71f      	b.n	c2dce <__kernel_rem_pio2f+0x1e2>
   c2f8e:	9905      	ldr	r1, [sp, #20]
   c2f90:	f1a1 0008 	sub.w	r0, r1, #8
   c2f94:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c2f98:	9005      	str	r0, [sp, #20]
   c2f9a:	462b      	mov	r3, r5
   c2f9c:	9d00      	ldr	r5, [sp, #0]
   c2f9e:	b969      	cbnz	r1, c2fbc <__kernel_rem_pio2f+0x3d0>
   c2fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c2fa4:	3b02      	subs	r3, #2
   c2fa6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2faa:	4601      	mov	r1, r0
   c2fac:	f853 0904 	ldr.w	r0, [r3], #-4
   c2fb0:	f10b 3bff 	add.w	fp, fp, #4294967295
   c2fb4:	3908      	subs	r1, #8
   c2fb6:	2800      	cmp	r0, #0
   c2fb8:	d0f8      	beq.n	c2fac <__kernel_rem_pio2f+0x3c0>
   c2fba:	9105      	str	r1, [sp, #20]
   c2fbc:	9805      	ldr	r0, [sp, #20]
   c2fbe:	9200      	str	r2, [sp, #0]
   c2fc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2fc4:	f000 fc66 	bl	c3894 <scalbnf>
   c2fc8:	f1bb 0f00 	cmp.w	fp, #0
   c2fcc:	9a00      	ldr	r2, [sp, #0]
   c2fce:	f2c0 8125 	blt.w	c321c <__kernel_rem_pio2f+0x630>
   c2fd2:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c2fd6:	ab46      	add	r3, sp, #280	; 0x118
   c2fd8:	eb03 060e 	add.w	r6, r3, lr
   c2fdc:	f10e 0c04 	add.w	ip, lr, #4
   c2fe0:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2e98 <__kernel_rem_pio2f+0x2ac>
   c2fe4:	eb07 030c 	add.w	r3, r7, ip
   c2fe8:	1d31      	adds	r1, r6, #4
   c2fea:	ed73 7a01 	vldmdb	r3!, {s15}
   c2fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2ff2:	42bb      	cmp	r3, r7
   c2ff4:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2ff8:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2ffc:	ed61 7a01 	vstmdb	r1!, {s15}
   c3000:	d1f3      	bne.n	c2fea <__kernel_rem_pio2f+0x3fe>
   c3002:	2d00      	cmp	r5, #0
   c3004:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2e9c <__kernel_rem_pio2f+0x2b0>
   c3008:	f04f 0400 	mov.w	r4, #0
   c300c:	db20      	blt.n	c3050 <__kernel_rem_pio2f+0x464>
   c300e:	4892      	ldr	r0, [pc, #584]	; (c3258 <__kernel_rem_pio2f+0x66c>)
   c3010:	eddf 7a92 	vldr	s15, [pc, #584]	; c325c <__kernel_rem_pio2f+0x670>
   c3014:	eeb0 7a46 	vmov.f32	s14, s12
   c3018:	4631      	mov	r1, r6
   c301a:	2300      	movs	r3, #0
   c301c:	e003      	b.n	c3026 <__kernel_rem_pio2f+0x43a>
   c301e:	429c      	cmp	r4, r3
   c3020:	db08      	blt.n	c3034 <__kernel_rem_pio2f+0x448>
   c3022:	ecb0 7a01 	vldmia	r0!, {s14}
   c3026:	ecf1 6a01 	vldmia	r1!, {s13}
   c302a:	3301      	adds	r3, #1
   c302c:	429d      	cmp	r5, r3
   c302e:	eee6 7a87 	vfma.f32	s15, s13, s14
   c3032:	daf4      	bge.n	c301e <__kernel_rem_pio2f+0x432>
   c3034:	ab5a      	add	r3, sp, #360	; 0x168
   c3036:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c303a:	45a3      	cmp	fp, r4
   c303c:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3040:	f1a6 0604 	sub.w	r6, r6, #4
   c3044:	f104 0301 	add.w	r3, r4, #1
   c3048:	d005      	beq.n	c3056 <__kernel_rem_pio2f+0x46a>
   c304a:	2d00      	cmp	r5, #0
   c304c:	461c      	mov	r4, r3
   c304e:	dade      	bge.n	c300e <__kernel_rem_pio2f+0x422>
   c3050:	eddf 7a82 	vldr	s15, [pc, #520]	; c325c <__kernel_rem_pio2f+0x670>
   c3054:	e7ee      	b.n	c3034 <__kernel_rem_pio2f+0x448>
   c3056:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c3058:	2902      	cmp	r1, #2
   c305a:	dc1c      	bgt.n	c3096 <__kernel_rem_pio2f+0x4aa>
   c305c:	2900      	cmp	r1, #0
   c305e:	f300 8092 	bgt.w	c3186 <__kernel_rem_pio2f+0x59a>
   c3062:	d10f      	bne.n	c3084 <__kernel_rem_pio2f+0x498>
   c3064:	ab32      	add	r3, sp, #200	; 0xc8
   c3066:	eddf 7a7d 	vldr	s15, [pc, #500]	; c325c <__kernel_rem_pio2f+0x670>
   c306a:	449c      	add	ip, r3
   c306c:	ed3c 7a01 	vldmdb	ip!, {s14}
   c3070:	4563      	cmp	r3, ip
   c3072:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3076:	d1f9      	bne.n	c306c <__kernel_rem_pio2f+0x480>
   c3078:	b10a      	cbz	r2, c307e <__kernel_rem_pio2f+0x492>
   c307a:	eef1 7a67 	vneg.f32	s15, s15
   c307e:	9b06      	ldr	r3, [sp, #24]
   c3080:	edc3 7a00 	vstr	s15, [r3]
   c3084:	ee19 3a90 	vmov	r3, s19
   c3088:	f003 0007 	and.w	r0, r3, #7
   c308c:	b05b      	add	sp, #364	; 0x16c
   c308e:	ecbd 8b04 	vpop	{d8-d9}
   c3092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3096:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3098:	2b03      	cmp	r3, #3
   c309a:	d1f3      	bne.n	c3084 <__kernel_rem_pio2f+0x498>
   c309c:	f1bb 0f00 	cmp.w	fp, #0
   c30a0:	f000 80d1 	beq.w	c3246 <__kernel_rem_pio2f+0x65a>
   c30a4:	ab5a      	add	r3, sp, #360	; 0x168
   c30a6:	4473      	add	r3, lr
   c30a8:	a932      	add	r1, sp, #200	; 0xc8
   c30aa:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c30ae:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c30b2:	ed73 7a01 	vldmdb	r3!, {s15}
   c30b6:	eef0 6a47 	vmov.f32	s13, s14
   c30ba:	ee37 7a27 	vadd.f32	s14, s14, s15
   c30be:	4299      	cmp	r1, r3
   c30c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c30c4:	ed83 7a00 	vstr	s14, [r3]
   c30c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c30cc:	edc3 7a01 	vstr	s15, [r3, #4]
   c30d0:	d1ef      	bne.n	c30b2 <__kernel_rem_pio2f+0x4c6>
   c30d2:	f1bb 0f01 	cmp.w	fp, #1
   c30d6:	f340 80b6 	ble.w	c3246 <__kernel_rem_pio2f+0x65a>
   c30da:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c30de:	ab5a      	add	r3, sp, #360	; 0x168
   c30e0:	f10b 3bff 	add.w	fp, fp, #4294967295
   c30e4:	449e      	add	lr, r3
   c30e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c30ea:	f10b 0304 	add.w	r3, fp, #4
   c30ee:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c30f2:	440b      	add	r3, r1
   c30f4:	a833      	add	r0, sp, #204	; 0xcc
   c30f6:	ed73 7a01 	vldmdb	r3!, {s15}
   c30fa:	eef0 6a47 	vmov.f32	s13, s14
   c30fe:	ee37 7a27 	vadd.f32	s14, s14, s15
   c3102:	4298      	cmp	r0, r3
   c3104:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3108:	ed83 7a00 	vstr	s14, [r3]
   c310c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3110:	edc3 7a01 	vstr	s15, [r3, #4]
   c3114:	d1ef      	bne.n	c30f6 <__kernel_rem_pio2f+0x50a>
   c3116:	f10b 0b08 	add.w	fp, fp, #8
   c311a:	eddf 7a50 	vldr	s15, [pc, #320]	; c325c <__kernel_rem_pio2f+0x670>
   c311e:	eb01 030b 	add.w	r3, r1, fp
   c3122:	3108      	adds	r1, #8
   c3124:	ed33 7a01 	vldmdb	r3!, {s14}
   c3128:	4299      	cmp	r1, r3
   c312a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c312e:	d1f9      	bne.n	c3124 <__kernel_rem_pio2f+0x538>
   c3130:	2a00      	cmp	r2, #0
   c3132:	d156      	bne.n	c31e2 <__kernel_rem_pio2f+0x5f6>
   c3134:	9906      	ldr	r1, [sp, #24]
   c3136:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c3138:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c313a:	600a      	str	r2, [r1, #0]
   c313c:	604b      	str	r3, [r1, #4]
   c313e:	edc1 7a02 	vstr	s15, [r1, #8]
   c3142:	e79f      	b.n	c3084 <__kernel_rem_pio2f+0x498>
   c3144:	f105 3cff 	add.w	ip, r5, #4294967295
   c3148:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c314c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c3150:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c3154:	e6bb      	b.n	c2ece <__kernel_rem_pio2f+0x2e2>
   c3156:	2308      	movs	r3, #8
   c3158:	9307      	str	r3, [sp, #28]
   c315a:	2300      	movs	r3, #0
   c315c:	9302      	str	r3, [sp, #8]
   c315e:	e561      	b.n	c2c24 <__kernel_rem_pio2f+0x38>
   c3160:	ee19 3a90 	vmov	r3, s19
   c3164:	2d00      	cmp	r5, #0
   c3166:	f103 0301 	add.w	r3, r3, #1
   c316a:	ee09 3a90 	vmov	s19, r3
   c316e:	bfc8      	it	gt
   c3170:	2202      	movgt	r2, #2
   c3172:	f73f ae70 	bgt.w	c2e56 <__kernel_rem_pio2f+0x26a>
   c3176:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c317a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c317e:	2202      	movs	r2, #2
   c3180:	e5f6      	b.n	c2d70 <__kernel_rem_pio2f+0x184>
   c3182:	2100      	movs	r1, #0
   c3184:	e694      	b.n	c2eb0 <__kernel_rem_pio2f+0x2c4>
   c3186:	a932      	add	r1, sp, #200	; 0xc8
   c3188:	eddf 7a34 	vldr	s15, [pc, #208]	; c325c <__kernel_rem_pio2f+0x670>
   c318c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c3190:	ed33 7a01 	vldmdb	r3!, {s14}
   c3194:	4299      	cmp	r1, r3
   c3196:	ee77 7a87 	vadd.f32	s15, s15, s14
   c319a:	d1f9      	bne.n	c3190 <__kernel_rem_pio2f+0x5a4>
   c319c:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c31a0:	bb8a      	cbnz	r2, c3206 <__kernel_rem_pio2f+0x61a>
   c31a2:	9b06      	ldr	r3, [sp, #24]
   c31a4:	f1bb 0f00 	cmp.w	fp, #0
   c31a8:	edc3 7a00 	vstr	s15, [r3]
   c31ac:	ee77 7a67 	vsub.f32	s15, s14, s15
   c31b0:	dd0b      	ble.n	c31ca <__kernel_rem_pio2f+0x5de>
   c31b2:	a933      	add	r1, sp, #204	; 0xcc
   c31b4:	2301      	movs	r3, #1
   c31b6:	ecb1 7a01 	vldmia	r1!, {s14}
   c31ba:	3301      	adds	r3, #1
   c31bc:	459b      	cmp	fp, r3
   c31be:	ee77 7a87 	vadd.f32	s15, s15, s14
   c31c2:	daf8      	bge.n	c31b6 <__kernel_rem_pio2f+0x5ca>
   c31c4:	b10a      	cbz	r2, c31ca <__kernel_rem_pio2f+0x5de>
   c31c6:	eef1 7a67 	vneg.f32	s15, s15
   c31ca:	9b06      	ldr	r3, [sp, #24]
   c31cc:	edc3 7a01 	vstr	s15, [r3, #4]
   c31d0:	e758      	b.n	c3084 <__kernel_rem_pio2f+0x498>
   c31d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c31d6:	469b      	mov	fp, r3
   c31d8:	ee10 1a10 	vmov	r1, s0
   c31dc:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c31e0:	e6ec      	b.n	c2fbc <__kernel_rem_pio2f+0x3d0>
   c31e2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c31e6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c31ea:	9b06      	ldr	r3, [sp, #24]
   c31ec:	eef1 6a66 	vneg.f32	s13, s13
   c31f0:	eeb1 7a47 	vneg.f32	s14, s14
   c31f4:	eef1 7a67 	vneg.f32	s15, s15
   c31f8:	edc3 6a00 	vstr	s13, [r3]
   c31fc:	ed83 7a01 	vstr	s14, [r3, #4]
   c3200:	edc3 7a02 	vstr	s15, [r3, #8]
   c3204:	e73e      	b.n	c3084 <__kernel_rem_pio2f+0x498>
   c3206:	9b06      	ldr	r3, [sp, #24]
   c3208:	eef1 6a67 	vneg.f32	s13, s15
   c320c:	f1bb 0f00 	cmp.w	fp, #0
   c3210:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3214:	edc3 6a00 	vstr	s13, [r3]
   c3218:	dccb      	bgt.n	c31b2 <__kernel_rem_pio2f+0x5c6>
   c321a:	e7d4      	b.n	c31c6 <__kernel_rem_pio2f+0x5da>
   c321c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c321e:	2b02      	cmp	r3, #2
   c3220:	dc0d      	bgt.n	c323e <__kernel_rem_pio2f+0x652>
   c3222:	2b00      	cmp	r3, #0
   c3224:	dc14      	bgt.n	c3250 <__kernel_rem_pio2f+0x664>
   c3226:	f47f af2d 	bne.w	c3084 <__kernel_rem_pio2f+0x498>
   c322a:	eddf 7a0c 	vldr	s15, [pc, #48]	; c325c <__kernel_rem_pio2f+0x670>
   c322e:	2a00      	cmp	r2, #0
   c3230:	f43f af25 	beq.w	c307e <__kernel_rem_pio2f+0x492>
   c3234:	e721      	b.n	c307a <__kernel_rem_pio2f+0x48e>
   c3236:	9b03      	ldr	r3, [sp, #12]
   c3238:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c323c:	e537      	b.n	c2cae <__kernel_rem_pio2f+0xc2>
   c323e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3240:	2b03      	cmp	r3, #3
   c3242:	f47f af1f 	bne.w	c3084 <__kernel_rem_pio2f+0x498>
   c3246:	eddf 7a05 	vldr	s15, [pc, #20]	; c325c <__kernel_rem_pio2f+0x670>
   c324a:	2a00      	cmp	r2, #0
   c324c:	d1c9      	bne.n	c31e2 <__kernel_rem_pio2f+0x5f6>
   c324e:	e771      	b.n	c3134 <__kernel_rem_pio2f+0x548>
   c3250:	eddf 7a02 	vldr	s15, [pc, #8]	; c325c <__kernel_rem_pio2f+0x670>
   c3254:	e7a2      	b.n	c319c <__kernel_rem_pio2f+0x5b0>
   c3256:	bf00      	nop
   c3258:	000c842c 	.word	0x000c842c
   c325c:	00000000 	.word	0x00000000

000c3260 <__kernel_sinf>:
   c3260:	ee10 3a10 	vmov	r3, s0
   c3264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3268:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c326c:	da04      	bge.n	c3278 <__kernel_sinf+0x18>
   c326e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c3272:	ee17 3a90 	vmov	r3, s15
   c3276:	b35b      	cbz	r3, c32d0 <__kernel_sinf+0x70>
   c3278:	ee60 7a00 	vmul.f32	s15, s0, s0
   c327c:	ed9f 7a15 	vldr	s14, [pc, #84]	; c32d4 <__kernel_sinf+0x74>
   c3280:	eddf 5a15 	vldr	s11, [pc, #84]	; c32d8 <__kernel_sinf+0x78>
   c3284:	ed9f 6a15 	vldr	s12, [pc, #84]	; c32dc <__kernel_sinf+0x7c>
   c3288:	eddf 6a15 	vldr	s13, [pc, #84]	; c32e0 <__kernel_sinf+0x80>
   c328c:	eee7 5a87 	vfma.f32	s11, s15, s14
   c3290:	ed9f 7a14 	vldr	s14, [pc, #80]	; c32e4 <__kernel_sinf+0x84>
   c3294:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c3298:	ee20 5a27 	vmul.f32	s10, s0, s15
   c329c:	eee6 6a27 	vfma.f32	s13, s12, s15
   c32a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c32a4:	b930      	cbnz	r0, c32b4 <__kernel_sinf+0x54>
   c32a6:	eddf 6a10 	vldr	s13, [pc, #64]	; c32e8 <__kernel_sinf+0x88>
   c32aa:	eee7 6a87 	vfma.f32	s13, s15, s14
   c32ae:	eea6 0a85 	vfma.f32	s0, s13, s10
   c32b2:	4770      	bx	lr
   c32b4:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c32b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c32bc:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c32c0:	eddf 6a0a 	vldr	s13, [pc, #40]	; c32ec <__kernel_sinf+0x8c>
   c32c4:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c32c8:	eee5 0a26 	vfma.f32	s1, s10, s13
   c32cc:	ee30 0a60 	vsub.f32	s0, s0, s1
   c32d0:	4770      	bx	lr
   c32d2:	bf00      	nop
   c32d4:	2f2ec9d3 	.word	0x2f2ec9d3
   c32d8:	b2d72f34 	.word	0xb2d72f34
   c32dc:	3638ef1b 	.word	0x3638ef1b
   c32e0:	b9500d01 	.word	0xb9500d01
   c32e4:	3c088889 	.word	0x3c088889
   c32e8:	be2aaaab 	.word	0xbe2aaaab
   c32ec:	3e2aaaab 	.word	0x3e2aaaab

000c32f0 <atan>:
   c32f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c32f4:	ec55 4b10 	vmov	r4, r5, d0
   c32f8:	4bc3      	ldr	r3, [pc, #780]	; (c3608 <atan+0x318>)
   c32fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c32fe:	429e      	cmp	r6, r3
   c3300:	46aa      	mov	sl, r5
   c3302:	dd17      	ble.n	c3334 <atan+0x44>
   c3304:	4bc1      	ldr	r3, [pc, #772]	; (c360c <atan+0x31c>)
   c3306:	429e      	cmp	r6, r3
   c3308:	dc0a      	bgt.n	c3320 <atan+0x30>
   c330a:	d007      	beq.n	c331c <atan+0x2c>
   c330c:	f1ba 0f00 	cmp.w	sl, #0
   c3310:	f340 80cb 	ble.w	c34aa <atan+0x1ba>
   c3314:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c3598 <atan+0x2a8>
   c3318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c331c:	2c00      	cmp	r4, #0
   c331e:	d0f5      	beq.n	c330c <atan+0x1c>
   c3320:	4622      	mov	r2, r4
   c3322:	462b      	mov	r3, r5
   c3324:	4620      	mov	r0, r4
   c3326:	4629      	mov	r1, r5
   c3328:	f000 fb2c 	bl	c3984 <__adddf3>
   c332c:	ec41 0b10 	vmov	d0, r0, r1
   c3330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3334:	4bb6      	ldr	r3, [pc, #728]	; (c3610 <atan+0x320>)
   c3336:	429e      	cmp	r6, r3
   c3338:	f300 80bb 	bgt.w	c34b2 <atan+0x1c2>
   c333c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3340:	429e      	cmp	r6, r3
   c3342:	f340 80a0 	ble.w	c3486 <atan+0x196>
   c3346:	f04f 3bff 	mov.w	fp, #4294967295
   c334a:	4622      	mov	r2, r4
   c334c:	462b      	mov	r3, r5
   c334e:	4620      	mov	r0, r4
   c3350:	4629      	mov	r1, r5
   c3352:	f000 fccd 	bl	c3cf0 <__aeabi_dmul>
   c3356:	4602      	mov	r2, r0
   c3358:	460b      	mov	r3, r1
   c335a:	4680      	mov	r8, r0
   c335c:	4689      	mov	r9, r1
   c335e:	f000 fcc7 	bl	c3cf0 <__aeabi_dmul>
   c3362:	a38f      	add	r3, pc, #572	; (adr r3, c35a0 <atan+0x2b0>)
   c3364:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3368:	4606      	mov	r6, r0
   c336a:	460f      	mov	r7, r1
   c336c:	f000 fcc0 	bl	c3cf0 <__aeabi_dmul>
   c3370:	a38d      	add	r3, pc, #564	; (adr r3, c35a8 <atan+0x2b8>)
   c3372:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3376:	f000 fb05 	bl	c3984 <__adddf3>
   c337a:	4632      	mov	r2, r6
   c337c:	463b      	mov	r3, r7
   c337e:	f000 fcb7 	bl	c3cf0 <__aeabi_dmul>
   c3382:	a38b      	add	r3, pc, #556	; (adr r3, c35b0 <atan+0x2c0>)
   c3384:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3388:	f000 fafc 	bl	c3984 <__adddf3>
   c338c:	4632      	mov	r2, r6
   c338e:	463b      	mov	r3, r7
   c3390:	f000 fcae 	bl	c3cf0 <__aeabi_dmul>
   c3394:	a388      	add	r3, pc, #544	; (adr r3, c35b8 <atan+0x2c8>)
   c3396:	e9d3 2300 	ldrd	r2, r3, [r3]
   c339a:	f000 faf3 	bl	c3984 <__adddf3>
   c339e:	4632      	mov	r2, r6
   c33a0:	463b      	mov	r3, r7
   c33a2:	f000 fca5 	bl	c3cf0 <__aeabi_dmul>
   c33a6:	a386      	add	r3, pc, #536	; (adr r3, c35c0 <atan+0x2d0>)
   c33a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33ac:	f000 faea 	bl	c3984 <__adddf3>
   c33b0:	4632      	mov	r2, r6
   c33b2:	463b      	mov	r3, r7
   c33b4:	f000 fc9c 	bl	c3cf0 <__aeabi_dmul>
   c33b8:	a383      	add	r3, pc, #524	; (adr r3, c35c8 <atan+0x2d8>)
   c33ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33be:	f000 fae1 	bl	c3984 <__adddf3>
   c33c2:	4642      	mov	r2, r8
   c33c4:	464b      	mov	r3, r9
   c33c6:	f000 fc93 	bl	c3cf0 <__aeabi_dmul>
   c33ca:	a381      	add	r3, pc, #516	; (adr r3, c35d0 <atan+0x2e0>)
   c33cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33d0:	4680      	mov	r8, r0
   c33d2:	4689      	mov	r9, r1
   c33d4:	4630      	mov	r0, r6
   c33d6:	4639      	mov	r1, r7
   c33d8:	f000 fc8a 	bl	c3cf0 <__aeabi_dmul>
   c33dc:	a37e      	add	r3, pc, #504	; (adr r3, c35d8 <atan+0x2e8>)
   c33de:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33e2:	f000 facd 	bl	c3980 <__aeabi_dsub>
   c33e6:	4632      	mov	r2, r6
   c33e8:	463b      	mov	r3, r7
   c33ea:	f000 fc81 	bl	c3cf0 <__aeabi_dmul>
   c33ee:	a37c      	add	r3, pc, #496	; (adr r3, c35e0 <atan+0x2f0>)
   c33f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33f4:	f000 fac4 	bl	c3980 <__aeabi_dsub>
   c33f8:	4632      	mov	r2, r6
   c33fa:	463b      	mov	r3, r7
   c33fc:	f000 fc78 	bl	c3cf0 <__aeabi_dmul>
   c3400:	a379      	add	r3, pc, #484	; (adr r3, c35e8 <atan+0x2f8>)
   c3402:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3406:	f000 fabb 	bl	c3980 <__aeabi_dsub>
   c340a:	4632      	mov	r2, r6
   c340c:	463b      	mov	r3, r7
   c340e:	f000 fc6f 	bl	c3cf0 <__aeabi_dmul>
   c3412:	a377      	add	r3, pc, #476	; (adr r3, c35f0 <atan+0x300>)
   c3414:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3418:	f000 fab2 	bl	c3980 <__aeabi_dsub>
   c341c:	4632      	mov	r2, r6
   c341e:	463b      	mov	r3, r7
   c3420:	f000 fc66 	bl	c3cf0 <__aeabi_dmul>
   c3424:	f1bb 3fff 	cmp.w	fp, #4294967295
   c3428:	4602      	mov	r2, r0
   c342a:	460b      	mov	r3, r1
   c342c:	4640      	mov	r0, r8
   c342e:	4649      	mov	r1, r9
   c3430:	d062      	beq.n	c34f8 <atan+0x208>
   c3432:	f000 faa7 	bl	c3984 <__adddf3>
   c3436:	4e77      	ldr	r6, [pc, #476]	; (c3614 <atan+0x324>)
   c3438:	4622      	mov	r2, r4
   c343a:	462b      	mov	r3, r5
   c343c:	f000 fc58 	bl	c3cf0 <__aeabi_dmul>
   c3440:	4b75      	ldr	r3, [pc, #468]	; (c3618 <atan+0x328>)
   c3442:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c3446:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c344a:	449b      	add	fp, r3
   c344c:	e9db 2300 	ldrd	r2, r3, [fp]
   c3450:	f000 fa96 	bl	c3980 <__aeabi_dsub>
   c3454:	4622      	mov	r2, r4
   c3456:	462b      	mov	r3, r5
   c3458:	f000 fa92 	bl	c3980 <__aeabi_dsub>
   c345c:	4602      	mov	r2, r0
   c345e:	460b      	mov	r3, r1
   c3460:	e9d6 0100 	ldrd	r0, r1, [r6]
   c3464:	f000 fa8c 	bl	c3980 <__aeabi_dsub>
   c3468:	f1ba 0f00 	cmp.w	sl, #0
   c346c:	ec41 0b10 	vmov	d0, r0, r1
   c3470:	f6bf af5e 	bge.w	c3330 <atan+0x40>
   c3474:	ee10 1a90 	vmov	r1, s1
   c3478:	4602      	mov	r2, r0
   c347a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c347e:	ec43 2b10 	vmov	d0, r2, r3
   c3482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3486:	a35c      	add	r3, pc, #368	; (adr r3, c35f8 <atan+0x308>)
   c3488:	e9d3 2300 	ldrd	r2, r3, [r3]
   c348c:	ee10 0a10 	vmov	r0, s0
   c3490:	4629      	mov	r1, r5
   c3492:	f000 fa77 	bl	c3984 <__adddf3>
   c3496:	4b61      	ldr	r3, [pc, #388]	; (c361c <atan+0x32c>)
   c3498:	2200      	movs	r2, #0
   c349a:	f000 feb9 	bl	c4210 <__aeabi_dcmpgt>
   c349e:	2800      	cmp	r0, #0
   c34a0:	f43f af51 	beq.w	c3346 <atan+0x56>
   c34a4:	ec45 4b10 	vmov	d0, r4, r5
   c34a8:	e742      	b.n	c3330 <atan+0x40>
   c34aa:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3600 <atan+0x310>
   c34ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c34b2:	f000 f8bd 	bl	c3630 <fabs>
   c34b6:	4b5a      	ldr	r3, [pc, #360]	; (c3620 <atan+0x330>)
   c34b8:	429e      	cmp	r6, r3
   c34ba:	ec55 4b10 	vmov	r4, r5, d0
   c34be:	dc2b      	bgt.n	c3518 <atan+0x228>
   c34c0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c34c4:	429e      	cmp	r6, r3
   c34c6:	dc56      	bgt.n	c3576 <atan+0x286>
   c34c8:	ee10 2a10 	vmov	r2, s0
   c34cc:	462b      	mov	r3, r5
   c34ce:	ee10 0a10 	vmov	r0, s0
   c34d2:	4629      	mov	r1, r5
   c34d4:	f000 fa56 	bl	c3984 <__adddf3>
   c34d8:	4b50      	ldr	r3, [pc, #320]	; (c361c <atan+0x32c>)
   c34da:	2200      	movs	r2, #0
   c34dc:	f000 fa50 	bl	c3980 <__aeabi_dsub>
   c34e0:	4602      	mov	r2, r0
   c34e2:	460b      	mov	r3, r1
   c34e4:	4620      	mov	r0, r4
   c34e6:	4629      	mov	r1, r5
   c34e8:	4614      	mov	r4, r2
   c34ea:	461d      	mov	r5, r3
   c34ec:	f04f 0b00 	mov.w	fp, #0
   c34f0:	2200      	movs	r2, #0
   c34f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c34f6:	e027      	b.n	c3548 <atan+0x258>
   c34f8:	f000 fa44 	bl	c3984 <__adddf3>
   c34fc:	4622      	mov	r2, r4
   c34fe:	462b      	mov	r3, r5
   c3500:	f000 fbf6 	bl	c3cf0 <__aeabi_dmul>
   c3504:	4602      	mov	r2, r0
   c3506:	460b      	mov	r3, r1
   c3508:	4620      	mov	r0, r4
   c350a:	4629      	mov	r1, r5
   c350c:	f000 fa38 	bl	c3980 <__aeabi_dsub>
   c3510:	ec41 0b10 	vmov	d0, r0, r1
   c3514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3518:	4b42      	ldr	r3, [pc, #264]	; (c3624 <atan+0x334>)
   c351a:	429e      	cmp	r6, r3
   c351c:	da1f      	bge.n	c355e <atan+0x26e>
   c351e:	4b42      	ldr	r3, [pc, #264]	; (c3628 <atan+0x338>)
   c3520:	2200      	movs	r2, #0
   c3522:	4629      	mov	r1, r5
   c3524:	ee10 0a10 	vmov	r0, s0
   c3528:	f000 fa2a 	bl	c3980 <__aeabi_dsub>
   c352c:	4602      	mov	r2, r0
   c352e:	460b      	mov	r3, r1
   c3530:	4620      	mov	r0, r4
   c3532:	4629      	mov	r1, r5
   c3534:	4614      	mov	r4, r2
   c3536:	461d      	mov	r5, r3
   c3538:	2200      	movs	r2, #0
   c353a:	4b3b      	ldr	r3, [pc, #236]	; (c3628 <atan+0x338>)
   c353c:	f04f 0b02 	mov.w	fp, #2
   c3540:	f000 fbd6 	bl	c3cf0 <__aeabi_dmul>
   c3544:	4b35      	ldr	r3, [pc, #212]	; (c361c <atan+0x32c>)
   c3546:	2200      	movs	r2, #0
   c3548:	f000 fa1c 	bl	c3984 <__adddf3>
   c354c:	4602      	mov	r2, r0
   c354e:	460b      	mov	r3, r1
   c3550:	4620      	mov	r0, r4
   c3552:	4629      	mov	r1, r5
   c3554:	f000 fcf6 	bl	c3f44 <__aeabi_ddiv>
   c3558:	4604      	mov	r4, r0
   c355a:	460d      	mov	r5, r1
   c355c:	e6f5      	b.n	c334a <atan+0x5a>
   c355e:	462b      	mov	r3, r5
   c3560:	4932      	ldr	r1, [pc, #200]	; (c362c <atan+0x33c>)
   c3562:	ee10 2a10 	vmov	r2, s0
   c3566:	2000      	movs	r0, #0
   c3568:	f000 fcec 	bl	c3f44 <__aeabi_ddiv>
   c356c:	f04f 0b03 	mov.w	fp, #3
   c3570:	4604      	mov	r4, r0
   c3572:	460d      	mov	r5, r1
   c3574:	e6e9      	b.n	c334a <atan+0x5a>
   c3576:	4b29      	ldr	r3, [pc, #164]	; (c361c <atan+0x32c>)
   c3578:	2200      	movs	r2, #0
   c357a:	4629      	mov	r1, r5
   c357c:	ee10 0a10 	vmov	r0, s0
   c3580:	f000 f9fe 	bl	c3980 <__aeabi_dsub>
   c3584:	4602      	mov	r2, r0
   c3586:	460b      	mov	r3, r1
   c3588:	4620      	mov	r0, r4
   c358a:	4629      	mov	r1, r5
   c358c:	f04f 0b01 	mov.w	fp, #1
   c3590:	4614      	mov	r4, r2
   c3592:	461d      	mov	r5, r3
   c3594:	e7d6      	b.n	c3544 <atan+0x254>
   c3596:	bf00      	nop
   c3598:	54442d18 	.word	0x54442d18
   c359c:	3ff921fb 	.word	0x3ff921fb
   c35a0:	e322da11 	.word	0xe322da11
   c35a4:	3f90ad3a 	.word	0x3f90ad3a
   c35a8:	24760deb 	.word	0x24760deb
   c35ac:	3fa97b4b 	.word	0x3fa97b4b
   c35b0:	a0d03d51 	.word	0xa0d03d51
   c35b4:	3fb10d66 	.word	0x3fb10d66
   c35b8:	c54c206e 	.word	0xc54c206e
   c35bc:	3fb745cd 	.word	0x3fb745cd
   c35c0:	920083ff 	.word	0x920083ff
   c35c4:	3fc24924 	.word	0x3fc24924
   c35c8:	5555550d 	.word	0x5555550d
   c35cc:	3fd55555 	.word	0x3fd55555
   c35d0:	2c6a6c2f 	.word	0x2c6a6c2f
   c35d4:	bfa2b444 	.word	0xbfa2b444
   c35d8:	52defd9a 	.word	0x52defd9a
   c35dc:	3fadde2d 	.word	0x3fadde2d
   c35e0:	af749a6d 	.word	0xaf749a6d
   c35e4:	3fb3b0f2 	.word	0x3fb3b0f2
   c35e8:	fe231671 	.word	0xfe231671
   c35ec:	3fbc71c6 	.word	0x3fbc71c6
   c35f0:	9998ebc4 	.word	0x9998ebc4
   c35f4:	3fc99999 	.word	0x3fc99999
   c35f8:	8800759c 	.word	0x8800759c
   c35fc:	7e37e43c 	.word	0x7e37e43c
   c3600:	54442d18 	.word	0x54442d18
   c3604:	bff921fb 	.word	0xbff921fb
   c3608:	440fffff 	.word	0x440fffff
   c360c:	7ff00000 	.word	0x7ff00000
   c3610:	3fdbffff 	.word	0x3fdbffff
   c3614:	000c8460 	.word	0x000c8460
   c3618:	000c8480 	.word	0x000c8480
   c361c:	3ff00000 	.word	0x3ff00000
   c3620:	3ff2ffff 	.word	0x3ff2ffff
   c3624:	40038000 	.word	0x40038000
   c3628:	3ff80000 	.word	0x3ff80000
   c362c:	bff00000 	.word	0xbff00000

000c3630 <fabs>:
   c3630:	ec51 0b10 	vmov	r0, r1, d0
   c3634:	ee10 2a10 	vmov	r2, s0
   c3638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c363c:	ec43 2b10 	vmov	d0, r2, r3
   c3640:	4770      	bx	lr
   c3642:	bf00      	nop

000c3644 <atanf>:
   c3644:	b538      	push	{r3, r4, r5, lr}
   c3646:	ee10 5a10 	vmov	r5, s0
   c364a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c364e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c3652:	eef0 7a40 	vmov.f32	s15, s0
   c3656:	db0b      	blt.n	c3670 <atanf+0x2c>
   c3658:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c365c:	dc5b      	bgt.n	c3716 <atanf+0xd2>
   c365e:	eddf 7a53 	vldr	s15, [pc, #332]	; c37ac <atanf+0x168>
   c3662:	ed9f 0a53 	vldr	s0, [pc, #332]	; c37b0 <atanf+0x16c>
   c3666:	2d00      	cmp	r5, #0
   c3668:	bfc8      	it	gt
   c366a:	eeb0 0a67 	vmovgt.f32	s0, s15
   c366e:	bd38      	pop	{r3, r4, r5, pc}
   c3670:	4b50      	ldr	r3, [pc, #320]	; (c37b4 <atanf+0x170>)
   c3672:	429c      	cmp	r4, r3
   c3674:	dc5e      	bgt.n	c3734 <atanf+0xf0>
   c3676:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c367a:	db4f      	blt.n	c371c <atanf+0xd8>
   c367c:	f04f 33ff 	mov.w	r3, #4294967295
   c3680:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c3684:	eddf 4a4c 	vldr	s9, [pc, #304]	; c37b8 <atanf+0x174>
   c3688:	eddf 5a4c 	vldr	s11, [pc, #304]	; c37bc <atanf+0x178>
   c368c:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c37c0 <atanf+0x17c>
   c3690:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c37c4 <atanf+0x180>
   c3694:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c3698:	eeb0 6a66 	vmov.f32	s12, s13
   c369c:	eee7 5a24 	vfma.f32	s11, s14, s9
   c36a0:	1c5a      	adds	r2, r3, #1
   c36a2:	eddf 4a49 	vldr	s9, [pc, #292]	; c37c8 <atanf+0x184>
   c36a6:	eddf 6a49 	vldr	s13, [pc, #292]	; c37cc <atanf+0x188>
   c36aa:	eea5 5a87 	vfma.f32	s10, s11, s14
   c36ae:	eee7 6a24 	vfma.f32	s13, s14, s9
   c36b2:	eddf 5a47 	vldr	s11, [pc, #284]	; c37d0 <atanf+0x18c>
   c36b6:	eddf 4a47 	vldr	s9, [pc, #284]	; c37d4 <atanf+0x190>
   c36ba:	eee6 5a87 	vfma.f32	s11, s13, s14
   c36be:	eea5 4a07 	vfma.f32	s8, s10, s14
   c36c2:	ed9f 5a45 	vldr	s10, [pc, #276]	; c37d8 <atanf+0x194>
   c36c6:	eddf 6a45 	vldr	s13, [pc, #276]	; c37dc <atanf+0x198>
   c36ca:	eea5 5a87 	vfma.f32	s10, s11, s14
   c36ce:	eee4 4a07 	vfma.f32	s9, s8, s14
   c36d2:	eddf 5a43 	vldr	s11, [pc, #268]	; c37e0 <atanf+0x19c>
   c36d6:	eee4 6a87 	vfma.f32	s13, s9, s14
   c36da:	eee5 5a07 	vfma.f32	s11, s10, s14
   c36de:	ee66 6a86 	vmul.f32	s13, s13, s12
   c36e2:	ee25 7a87 	vmul.f32	s14, s11, s14
   c36e6:	d03a      	beq.n	c375e <atanf+0x11a>
   c36e8:	4a3e      	ldr	r2, [pc, #248]	; (c37e4 <atanf+0x1a0>)
   c36ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c36ee:	ee76 6a87 	vadd.f32	s13, s13, s14
   c36f2:	ed92 0a00 	vldr	s0, [r2]
   c36f6:	4a3c      	ldr	r2, [pc, #240]	; (c37e8 <atanf+0x1a4>)
   c36f8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c36fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3700:	2d00      	cmp	r5, #0
   c3702:	ed93 7a00 	vldr	s14, [r3]
   c3706:	ee70 7a67 	vsub.f32	s15, s0, s15
   c370a:	ee37 0a67 	vsub.f32	s0, s14, s15
   c370e:	daae      	bge.n	c366e <atanf+0x2a>
   c3710:	eeb1 0a40 	vneg.f32	s0, s0
   c3714:	bd38      	pop	{r3, r4, r5, pc}
   c3716:	ee30 0a00 	vadd.f32	s0, s0, s0
   c371a:	bd38      	pop	{r3, r4, r5, pc}
   c371c:	ed9f 7a33 	vldr	s14, [pc, #204]	; c37ec <atanf+0x1a8>
   c3720:	ee30 7a07 	vadd.f32	s14, s0, s14
   c3724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3728:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3730:	dda4      	ble.n	c367c <atanf+0x38>
   c3732:	bd38      	pop	{r3, r4, r5, pc}
   c3734:	f000 f860 	bl	c37f8 <fabsf>
   c3738:	4b2d      	ldr	r3, [pc, #180]	; (c37f0 <atanf+0x1ac>)
   c373a:	429c      	cmp	r4, r3
   c373c:	dc16      	bgt.n	c376c <atanf+0x128>
   c373e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c3742:	429c      	cmp	r4, r3
   c3744:	dc27      	bgt.n	c3796 <atanf+0x152>
   c3746:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c374a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c374e:	eea0 7a27 	vfma.f32	s14, s0, s15
   c3752:	2300      	movs	r3, #0
   c3754:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3758:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c375c:	e790      	b.n	c3680 <atanf+0x3c>
   c375e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3762:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c3766:	eeb0 0a67 	vmov.f32	s0, s15
   c376a:	bd38      	pop	{r3, r4, r5, pc}
   c376c:	4b21      	ldr	r3, [pc, #132]	; (c37f4 <atanf+0x1b0>)
   c376e:	429c      	cmp	r4, r3
   c3770:	dc0b      	bgt.n	c378a <atanf+0x146>
   c3772:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c3776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c377a:	eea0 7a27 	vfma.f32	s14, s0, s15
   c377e:	2302      	movs	r3, #2
   c3780:	ee30 0a67 	vsub.f32	s0, s0, s15
   c3784:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c3788:	e77a      	b.n	c3680 <atanf+0x3c>
   c378a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c378e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3792:	2303      	movs	r3, #3
   c3794:	e774      	b.n	c3680 <atanf+0x3c>
   c3796:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c379a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c379e:	ee30 0a27 	vadd.f32	s0, s0, s15
   c37a2:	2301      	movs	r3, #1
   c37a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c37a8:	e76a      	b.n	c3680 <atanf+0x3c>
   c37aa:	bf00      	nop
   c37ac:	3fc90fdb 	.word	0x3fc90fdb
   c37b0:	bfc90fdb 	.word	0xbfc90fdb
   c37b4:	3edfffff 	.word	0x3edfffff
   c37b8:	3c8569d7 	.word	0x3c8569d7
   c37bc:	3d4bda59 	.word	0x3d4bda59
   c37c0:	3d886b35 	.word	0x3d886b35
   c37c4:	3dba2e6e 	.word	0x3dba2e6e
   c37c8:	bd15a221 	.word	0xbd15a221
   c37cc:	bd6ef16b 	.word	0xbd6ef16b
   c37d0:	bd9d8795 	.word	0xbd9d8795
   c37d4:	3e124925 	.word	0x3e124925
   c37d8:	bde38e38 	.word	0xbde38e38
   c37dc:	3eaaaaab 	.word	0x3eaaaaab
   c37e0:	be4ccccd 	.word	0xbe4ccccd
   c37e4:	000c84b0 	.word	0x000c84b0
   c37e8:	000c84a0 	.word	0x000c84a0
   c37ec:	7149f2ca 	.word	0x7149f2ca
   c37f0:	3f97ffff 	.word	0x3f97ffff
   c37f4:	401bffff 	.word	0x401bffff

000c37f8 <fabsf>:
   c37f8:	ee10 3a10 	vmov	r3, s0
   c37fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3800:	ee00 3a10 	vmov	s0, r3
   c3804:	4770      	bx	lr
   c3806:	bf00      	nop

000c3808 <floorf>:
   c3808:	ee10 2a10 	vmov	r2, s0
   c380c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3810:	3b7f      	subs	r3, #127	; 0x7f
   c3812:	2b16      	cmp	r3, #22
   c3814:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3818:	dc28      	bgt.n	c386c <floorf+0x64>
   c381a:	2b00      	cmp	r3, #0
   c381c:	db18      	blt.n	c3850 <floorf+0x48>
   c381e:	491a      	ldr	r1, [pc, #104]	; (c3888 <floorf+0x80>)
   c3820:	4119      	asrs	r1, r3
   c3822:	420a      	tst	r2, r1
   c3824:	d021      	beq.n	c386a <floorf+0x62>
   c3826:	eddf 7a19 	vldr	s15, [pc, #100]	; c388c <floorf+0x84>
   c382a:	ee70 7a27 	vadd.f32	s15, s0, s15
   c382e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3836:	dd18      	ble.n	c386a <floorf+0x62>
   c3838:	2a00      	cmp	r2, #0
   c383a:	da04      	bge.n	c3846 <floorf+0x3e>
   c383c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3840:	fa40 f303 	asr.w	r3, r0, r3
   c3844:	441a      	add	r2, r3
   c3846:	ea22 0301 	bic.w	r3, r2, r1
   c384a:	ee00 3a10 	vmov	s0, r3
   c384e:	4770      	bx	lr
   c3850:	eddf 7a0e 	vldr	s15, [pc, #56]	; c388c <floorf+0x84>
   c3854:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3860:	dd03      	ble.n	c386a <floorf+0x62>
   c3862:	2a00      	cmp	r2, #0
   c3864:	db08      	blt.n	c3878 <floorf+0x70>
   c3866:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3890 <floorf+0x88>
   c386a:	4770      	bx	lr
   c386c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3870:	d3fb      	bcc.n	c386a <floorf+0x62>
   c3872:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3876:	4770      	bx	lr
   c3878:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c387c:	2900      	cmp	r1, #0
   c387e:	bf18      	it	ne
   c3880:	eeb0 0a67 	vmovne.f32	s0, s15
   c3884:	4770      	bx	lr
   c3886:	bf00      	nop
   c3888:	007fffff 	.word	0x007fffff
   c388c:	7149f2ca 	.word	0x7149f2ca
   c3890:	00000000 	.word	0x00000000

000c3894 <scalbnf>:
   c3894:	b082      	sub	sp, #8
   c3896:	ed8d 0a01 	vstr	s0, [sp, #4]
   c389a:	9b01      	ldr	r3, [sp, #4]
   c389c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c38a0:	d02a      	beq.n	c38f8 <scalbnf+0x64>
   c38a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c38a6:	d223      	bcs.n	c38f0 <scalbnf+0x5c>
   c38a8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c38ac:	d128      	bne.n	c3900 <scalbnf+0x6c>
   c38ae:	ed9d 7a01 	vldr	s14, [sp, #4]
   c38b2:	eddf 7a2a 	vldr	s15, [pc, #168]	; c395c <scalbnf+0xc8>
   c38b6:	4b2a      	ldr	r3, [pc, #168]	; (c3960 <scalbnf+0xcc>)
   c38b8:	ee67 7a27 	vmul.f32	s15, s14, s15
   c38bc:	4298      	cmp	r0, r3
   c38be:	edcd 7a01 	vstr	s15, [sp, #4]
   c38c2:	db37      	blt.n	c3934 <scalbnf+0xa0>
   c38c4:	9b01      	ldr	r3, [sp, #4]
   c38c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c38ca:	3a19      	subs	r2, #25
   c38cc:	4402      	add	r2, r0
   c38ce:	2afe      	cmp	r2, #254	; 0xfe
   c38d0:	dd1a      	ble.n	c3908 <scalbnf+0x74>
   c38d2:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3964 <scalbnf+0xd0>
   c38d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3968 <scalbnf+0xd4>
   c38da:	9b01      	ldr	r3, [sp, #4]
   c38dc:	2b00      	cmp	r3, #0
   c38de:	eef0 7a40 	vmov.f32	s15, s0
   c38e2:	bfb8      	it	lt
   c38e4:	eeb0 0a47 	vmovlt.f32	s0, s14
   c38e8:	ee20 0a27 	vmul.f32	s0, s0, s15
   c38ec:	b002      	add	sp, #8
   c38ee:	4770      	bx	lr
   c38f0:	ee30 0a00 	vadd.f32	s0, s0, s0
   c38f4:	b002      	add	sp, #8
   c38f6:	4770      	bx	lr
   c38f8:	ed9d 0a01 	vldr	s0, [sp, #4]
   c38fc:	b002      	add	sp, #8
   c38fe:	4770      	bx	lr
   c3900:	0dd2      	lsrs	r2, r2, #23
   c3902:	4402      	add	r2, r0
   c3904:	2afe      	cmp	r2, #254	; 0xfe
   c3906:	dce4      	bgt.n	c38d2 <scalbnf+0x3e>
   c3908:	2a00      	cmp	r2, #0
   c390a:	dc0b      	bgt.n	c3924 <scalbnf+0x90>
   c390c:	f112 0f16 	cmn.w	r2, #22
   c3910:	da17      	bge.n	c3942 <scalbnf+0xae>
   c3912:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3916:	4298      	cmp	r0, r3
   c3918:	dcdb      	bgt.n	c38d2 <scalbnf+0x3e>
   c391a:	ed9f 0a14 	vldr	s0, [pc, #80]	; c396c <scalbnf+0xd8>
   c391e:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3970 <scalbnf+0xdc>
   c3922:	e7da      	b.n	c38da <scalbnf+0x46>
   c3924:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3928:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c392c:	ee00 3a10 	vmov	s0, r3
   c3930:	b002      	add	sp, #8
   c3932:	4770      	bx	lr
   c3934:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c396c <scalbnf+0xd8>
   c3938:	eddd 7a01 	vldr	s15, [sp, #4]
   c393c:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3940:	e7d8      	b.n	c38f4 <scalbnf+0x60>
   c3942:	3219      	adds	r2, #25
   c3944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3948:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c394c:	eddf 7a09 	vldr	s15, [pc, #36]	; c3974 <scalbnf+0xe0>
   c3950:	ee07 3a10 	vmov	s14, r3
   c3954:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3958:	e7cc      	b.n	c38f4 <scalbnf+0x60>
   c395a:	bf00      	nop
   c395c:	4c000000 	.word	0x4c000000
   c3960:	ffff3cb0 	.word	0xffff3cb0
   c3964:	7149f2ca 	.word	0x7149f2ca
   c3968:	f149f2ca 	.word	0xf149f2ca
   c396c:	0da24260 	.word	0x0da24260
   c3970:	8da24260 	.word	0x8da24260
   c3974:	33000000 	.word	0x33000000

000c3978 <__aeabi_drsub>:
   c3978:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c397c:	e002      	b.n	c3984 <__adddf3>
   c397e:	bf00      	nop

000c3980 <__aeabi_dsub>:
   c3980:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3984 <__adddf3>:
   c3984:	b530      	push	{r4, r5, lr}
   c3986:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c398a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c398e:	ea94 0f05 	teq	r4, r5
   c3992:	bf08      	it	eq
   c3994:	ea90 0f02 	teqeq	r0, r2
   c3998:	bf1f      	itttt	ne
   c399a:	ea54 0c00 	orrsne.w	ip, r4, r0
   c399e:	ea55 0c02 	orrsne.w	ip, r5, r2
   c39a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c39a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c39aa:	f000 80e2 	beq.w	c3b72 <__adddf3+0x1ee>
   c39ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c39b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c39b6:	bfb8      	it	lt
   c39b8:	426d      	neglt	r5, r5
   c39ba:	dd0c      	ble.n	c39d6 <__adddf3+0x52>
   c39bc:	442c      	add	r4, r5
   c39be:	ea80 0202 	eor.w	r2, r0, r2
   c39c2:	ea81 0303 	eor.w	r3, r1, r3
   c39c6:	ea82 0000 	eor.w	r0, r2, r0
   c39ca:	ea83 0101 	eor.w	r1, r3, r1
   c39ce:	ea80 0202 	eor.w	r2, r0, r2
   c39d2:	ea81 0303 	eor.w	r3, r1, r3
   c39d6:	2d36      	cmp	r5, #54	; 0x36
   c39d8:	bf88      	it	hi
   c39da:	bd30      	pophi	{r4, r5, pc}
   c39dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c39e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c39e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c39e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c39ec:	d002      	beq.n	c39f4 <__adddf3+0x70>
   c39ee:	4240      	negs	r0, r0
   c39f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c39f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c39f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c39fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3a00:	d002      	beq.n	c3a08 <__adddf3+0x84>
   c3a02:	4252      	negs	r2, r2
   c3a04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3a08:	ea94 0f05 	teq	r4, r5
   c3a0c:	f000 80a7 	beq.w	c3b5e <__adddf3+0x1da>
   c3a10:	f1a4 0401 	sub.w	r4, r4, #1
   c3a14:	f1d5 0e20 	rsbs	lr, r5, #32
   c3a18:	db0d      	blt.n	c3a36 <__adddf3+0xb2>
   c3a1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3a1e:	fa22 f205 	lsr.w	r2, r2, r5
   c3a22:	1880      	adds	r0, r0, r2
   c3a24:	f141 0100 	adc.w	r1, r1, #0
   c3a28:	fa03 f20e 	lsl.w	r2, r3, lr
   c3a2c:	1880      	adds	r0, r0, r2
   c3a2e:	fa43 f305 	asr.w	r3, r3, r5
   c3a32:	4159      	adcs	r1, r3
   c3a34:	e00e      	b.n	c3a54 <__adddf3+0xd0>
   c3a36:	f1a5 0520 	sub.w	r5, r5, #32
   c3a3a:	f10e 0e20 	add.w	lr, lr, #32
   c3a3e:	2a01      	cmp	r2, #1
   c3a40:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3a44:	bf28      	it	cs
   c3a46:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3a4a:	fa43 f305 	asr.w	r3, r3, r5
   c3a4e:	18c0      	adds	r0, r0, r3
   c3a50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3a54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3a58:	d507      	bpl.n	c3a6a <__adddf3+0xe6>
   c3a5a:	f04f 0e00 	mov.w	lr, #0
   c3a5e:	f1dc 0c00 	rsbs	ip, ip, #0
   c3a62:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3a66:	eb6e 0101 	sbc.w	r1, lr, r1
   c3a6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3a6e:	d31b      	bcc.n	c3aa8 <__adddf3+0x124>
   c3a70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3a74:	d30c      	bcc.n	c3a90 <__adddf3+0x10c>
   c3a76:	0849      	lsrs	r1, r1, #1
   c3a78:	ea5f 0030 	movs.w	r0, r0, rrx
   c3a7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3a80:	f104 0401 	add.w	r4, r4, #1
   c3a84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3a88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3a8c:	f080 809a 	bcs.w	c3bc4 <__adddf3+0x240>
   c3a90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3a94:	bf08      	it	eq
   c3a96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3a9a:	f150 0000 	adcs.w	r0, r0, #0
   c3a9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3aa2:	ea41 0105 	orr.w	r1, r1, r5
   c3aa6:	bd30      	pop	{r4, r5, pc}
   c3aa8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3aac:	4140      	adcs	r0, r0
   c3aae:	eb41 0101 	adc.w	r1, r1, r1
   c3ab2:	3c01      	subs	r4, #1
   c3ab4:	bf28      	it	cs
   c3ab6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3aba:	d2e9      	bcs.n	c3a90 <__adddf3+0x10c>
   c3abc:	f091 0f00 	teq	r1, #0
   c3ac0:	bf04      	itt	eq
   c3ac2:	4601      	moveq	r1, r0
   c3ac4:	2000      	moveq	r0, #0
   c3ac6:	fab1 f381 	clz	r3, r1
   c3aca:	bf08      	it	eq
   c3acc:	3320      	addeq	r3, #32
   c3ace:	f1a3 030b 	sub.w	r3, r3, #11
   c3ad2:	f1b3 0220 	subs.w	r2, r3, #32
   c3ad6:	da0c      	bge.n	c3af2 <__adddf3+0x16e>
   c3ad8:	320c      	adds	r2, #12
   c3ada:	dd08      	ble.n	c3aee <__adddf3+0x16a>
   c3adc:	f102 0c14 	add.w	ip, r2, #20
   c3ae0:	f1c2 020c 	rsb	r2, r2, #12
   c3ae4:	fa01 f00c 	lsl.w	r0, r1, ip
   c3ae8:	fa21 f102 	lsr.w	r1, r1, r2
   c3aec:	e00c      	b.n	c3b08 <__adddf3+0x184>
   c3aee:	f102 0214 	add.w	r2, r2, #20
   c3af2:	bfd8      	it	le
   c3af4:	f1c2 0c20 	rsble	ip, r2, #32
   c3af8:	fa01 f102 	lsl.w	r1, r1, r2
   c3afc:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3b00:	bfdc      	itt	le
   c3b02:	ea41 010c 	orrle.w	r1, r1, ip
   c3b06:	4090      	lslle	r0, r2
   c3b08:	1ae4      	subs	r4, r4, r3
   c3b0a:	bfa2      	ittt	ge
   c3b0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3b10:	4329      	orrge	r1, r5
   c3b12:	bd30      	popge	{r4, r5, pc}
   c3b14:	ea6f 0404 	mvn.w	r4, r4
   c3b18:	3c1f      	subs	r4, #31
   c3b1a:	da1c      	bge.n	c3b56 <__adddf3+0x1d2>
   c3b1c:	340c      	adds	r4, #12
   c3b1e:	dc0e      	bgt.n	c3b3e <__adddf3+0x1ba>
   c3b20:	f104 0414 	add.w	r4, r4, #20
   c3b24:	f1c4 0220 	rsb	r2, r4, #32
   c3b28:	fa20 f004 	lsr.w	r0, r0, r4
   c3b2c:	fa01 f302 	lsl.w	r3, r1, r2
   c3b30:	ea40 0003 	orr.w	r0, r0, r3
   c3b34:	fa21 f304 	lsr.w	r3, r1, r4
   c3b38:	ea45 0103 	orr.w	r1, r5, r3
   c3b3c:	bd30      	pop	{r4, r5, pc}
   c3b3e:	f1c4 040c 	rsb	r4, r4, #12
   c3b42:	f1c4 0220 	rsb	r2, r4, #32
   c3b46:	fa20 f002 	lsr.w	r0, r0, r2
   c3b4a:	fa01 f304 	lsl.w	r3, r1, r4
   c3b4e:	ea40 0003 	orr.w	r0, r0, r3
   c3b52:	4629      	mov	r1, r5
   c3b54:	bd30      	pop	{r4, r5, pc}
   c3b56:	fa21 f004 	lsr.w	r0, r1, r4
   c3b5a:	4629      	mov	r1, r5
   c3b5c:	bd30      	pop	{r4, r5, pc}
   c3b5e:	f094 0f00 	teq	r4, #0
   c3b62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3b66:	bf06      	itte	eq
   c3b68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3b6c:	3401      	addeq	r4, #1
   c3b6e:	3d01      	subne	r5, #1
   c3b70:	e74e      	b.n	c3a10 <__adddf3+0x8c>
   c3b72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3b76:	bf18      	it	ne
   c3b78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3b7c:	d029      	beq.n	c3bd2 <__adddf3+0x24e>
   c3b7e:	ea94 0f05 	teq	r4, r5
   c3b82:	bf08      	it	eq
   c3b84:	ea90 0f02 	teqeq	r0, r2
   c3b88:	d005      	beq.n	c3b96 <__adddf3+0x212>
   c3b8a:	ea54 0c00 	orrs.w	ip, r4, r0
   c3b8e:	bf04      	itt	eq
   c3b90:	4619      	moveq	r1, r3
   c3b92:	4610      	moveq	r0, r2
   c3b94:	bd30      	pop	{r4, r5, pc}
   c3b96:	ea91 0f03 	teq	r1, r3
   c3b9a:	bf1e      	ittt	ne
   c3b9c:	2100      	movne	r1, #0
   c3b9e:	2000      	movne	r0, #0
   c3ba0:	bd30      	popne	{r4, r5, pc}
   c3ba2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3ba6:	d105      	bne.n	c3bb4 <__adddf3+0x230>
   c3ba8:	0040      	lsls	r0, r0, #1
   c3baa:	4149      	adcs	r1, r1
   c3bac:	bf28      	it	cs
   c3bae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3bb2:	bd30      	pop	{r4, r5, pc}
   c3bb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3bb8:	bf3c      	itt	cc
   c3bba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3bbe:	bd30      	popcc	{r4, r5, pc}
   c3bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3bc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3bc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3bcc:	f04f 0000 	mov.w	r0, #0
   c3bd0:	bd30      	pop	{r4, r5, pc}
   c3bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3bd6:	bf1a      	itte	ne
   c3bd8:	4619      	movne	r1, r3
   c3bda:	4610      	movne	r0, r2
   c3bdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3be0:	bf1c      	itt	ne
   c3be2:	460b      	movne	r3, r1
   c3be4:	4602      	movne	r2, r0
   c3be6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3bea:	bf06      	itte	eq
   c3bec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3bf0:	ea91 0f03 	teqeq	r1, r3
   c3bf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3bf8:	bd30      	pop	{r4, r5, pc}
   c3bfa:	bf00      	nop

000c3bfc <__aeabi_ui2d>:
   c3bfc:	f090 0f00 	teq	r0, #0
   c3c00:	bf04      	itt	eq
   c3c02:	2100      	moveq	r1, #0
   c3c04:	4770      	bxeq	lr
   c3c06:	b530      	push	{r4, r5, lr}
   c3c08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3c0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3c10:	f04f 0500 	mov.w	r5, #0
   c3c14:	f04f 0100 	mov.w	r1, #0
   c3c18:	e750      	b.n	c3abc <__adddf3+0x138>
   c3c1a:	bf00      	nop

000c3c1c <__aeabi_i2d>:
   c3c1c:	f090 0f00 	teq	r0, #0
   c3c20:	bf04      	itt	eq
   c3c22:	2100      	moveq	r1, #0
   c3c24:	4770      	bxeq	lr
   c3c26:	b530      	push	{r4, r5, lr}
   c3c28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3c2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3c30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3c34:	bf48      	it	mi
   c3c36:	4240      	negmi	r0, r0
   c3c38:	f04f 0100 	mov.w	r1, #0
   c3c3c:	e73e      	b.n	c3abc <__adddf3+0x138>
   c3c3e:	bf00      	nop

000c3c40 <__aeabi_f2d>:
   c3c40:	0042      	lsls	r2, r0, #1
   c3c42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3c46:	ea4f 0131 	mov.w	r1, r1, rrx
   c3c4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3c4e:	bf1f      	itttt	ne
   c3c50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3c54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3c58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3c5c:	4770      	bxne	lr
   c3c5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3c62:	bf08      	it	eq
   c3c64:	4770      	bxeq	lr
   c3c66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3c6a:	bf04      	itt	eq
   c3c6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3c70:	4770      	bxeq	lr
   c3c72:	b530      	push	{r4, r5, lr}
   c3c74:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3c78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3c7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3c80:	e71c      	b.n	c3abc <__adddf3+0x138>
   c3c82:	bf00      	nop

000c3c84 <__aeabi_ul2d>:
   c3c84:	ea50 0201 	orrs.w	r2, r0, r1
   c3c88:	bf08      	it	eq
   c3c8a:	4770      	bxeq	lr
   c3c8c:	b530      	push	{r4, r5, lr}
   c3c8e:	f04f 0500 	mov.w	r5, #0
   c3c92:	e00a      	b.n	c3caa <__aeabi_l2d+0x16>

000c3c94 <__aeabi_l2d>:
   c3c94:	ea50 0201 	orrs.w	r2, r0, r1
   c3c98:	bf08      	it	eq
   c3c9a:	4770      	bxeq	lr
   c3c9c:	b530      	push	{r4, r5, lr}
   c3c9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3ca2:	d502      	bpl.n	c3caa <__aeabi_l2d+0x16>
   c3ca4:	4240      	negs	r0, r0
   c3ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3caa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3cae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3cb2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3cb6:	f43f aed8 	beq.w	c3a6a <__adddf3+0xe6>
   c3cba:	f04f 0203 	mov.w	r2, #3
   c3cbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3cc2:	bf18      	it	ne
   c3cc4:	3203      	addne	r2, #3
   c3cc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3cca:	bf18      	it	ne
   c3ccc:	3203      	addne	r2, #3
   c3cce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3cd2:	f1c2 0320 	rsb	r3, r2, #32
   c3cd6:	fa00 fc03 	lsl.w	ip, r0, r3
   c3cda:	fa20 f002 	lsr.w	r0, r0, r2
   c3cde:	fa01 fe03 	lsl.w	lr, r1, r3
   c3ce2:	ea40 000e 	orr.w	r0, r0, lr
   c3ce6:	fa21 f102 	lsr.w	r1, r1, r2
   c3cea:	4414      	add	r4, r2
   c3cec:	e6bd      	b.n	c3a6a <__adddf3+0xe6>
   c3cee:	bf00      	nop

000c3cf0 <__aeabi_dmul>:
   c3cf0:	b570      	push	{r4, r5, r6, lr}
   c3cf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3cf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3cfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3cfe:	bf1d      	ittte	ne
   c3d00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3d04:	ea94 0f0c 	teqne	r4, ip
   c3d08:	ea95 0f0c 	teqne	r5, ip
   c3d0c:	f000 f8de 	bleq	c3ecc <__aeabi_dmul+0x1dc>
   c3d10:	442c      	add	r4, r5
   c3d12:	ea81 0603 	eor.w	r6, r1, r3
   c3d16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3d1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3d1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3d22:	bf18      	it	ne
   c3d24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3d28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3d30:	d038      	beq.n	c3da4 <__aeabi_dmul+0xb4>
   c3d32:	fba0 ce02 	umull	ip, lr, r0, r2
   c3d36:	f04f 0500 	mov.w	r5, #0
   c3d3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3d3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3d42:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3d46:	f04f 0600 	mov.w	r6, #0
   c3d4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3d4e:	f09c 0f00 	teq	ip, #0
   c3d52:	bf18      	it	ne
   c3d54:	f04e 0e01 	orrne.w	lr, lr, #1
   c3d58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3d5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3d60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3d64:	d204      	bcs.n	c3d70 <__aeabi_dmul+0x80>
   c3d66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3d6a:	416d      	adcs	r5, r5
   c3d6c:	eb46 0606 	adc.w	r6, r6, r6
   c3d70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3d74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3d78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3d7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3d80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3d84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3d88:	bf88      	it	hi
   c3d8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3d8e:	d81e      	bhi.n	c3dce <__aeabi_dmul+0xde>
   c3d90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3d94:	bf08      	it	eq
   c3d96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3d9a:	f150 0000 	adcs.w	r0, r0, #0
   c3d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3da2:	bd70      	pop	{r4, r5, r6, pc}
   c3da4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3da8:	ea46 0101 	orr.w	r1, r6, r1
   c3dac:	ea40 0002 	orr.w	r0, r0, r2
   c3db0:	ea81 0103 	eor.w	r1, r1, r3
   c3db4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3db8:	bfc2      	ittt	gt
   c3dba:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3dbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3dc2:	bd70      	popgt	{r4, r5, r6, pc}
   c3dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3dc8:	f04f 0e00 	mov.w	lr, #0
   c3dcc:	3c01      	subs	r4, #1
   c3dce:	f300 80ab 	bgt.w	c3f28 <__aeabi_dmul+0x238>
   c3dd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c3dd6:	bfde      	ittt	le
   c3dd8:	2000      	movle	r0, #0
   c3dda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3dde:	bd70      	pople	{r4, r5, r6, pc}
   c3de0:	f1c4 0400 	rsb	r4, r4, #0
   c3de4:	3c20      	subs	r4, #32
   c3de6:	da35      	bge.n	c3e54 <__aeabi_dmul+0x164>
   c3de8:	340c      	adds	r4, #12
   c3dea:	dc1b      	bgt.n	c3e24 <__aeabi_dmul+0x134>
   c3dec:	f104 0414 	add.w	r4, r4, #20
   c3df0:	f1c4 0520 	rsb	r5, r4, #32
   c3df4:	fa00 f305 	lsl.w	r3, r0, r5
   c3df8:	fa20 f004 	lsr.w	r0, r0, r4
   c3dfc:	fa01 f205 	lsl.w	r2, r1, r5
   c3e00:	ea40 0002 	orr.w	r0, r0, r2
   c3e04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3e08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3e0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3e10:	fa21 f604 	lsr.w	r6, r1, r4
   c3e14:	eb42 0106 	adc.w	r1, r2, r6
   c3e18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3e1c:	bf08      	it	eq
   c3e1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3e22:	bd70      	pop	{r4, r5, r6, pc}
   c3e24:	f1c4 040c 	rsb	r4, r4, #12
   c3e28:	f1c4 0520 	rsb	r5, r4, #32
   c3e2c:	fa00 f304 	lsl.w	r3, r0, r4
   c3e30:	fa20 f005 	lsr.w	r0, r0, r5
   c3e34:	fa01 f204 	lsl.w	r2, r1, r4
   c3e38:	ea40 0002 	orr.w	r0, r0, r2
   c3e3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3e40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3e44:	f141 0100 	adc.w	r1, r1, #0
   c3e48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3e4c:	bf08      	it	eq
   c3e4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3e52:	bd70      	pop	{r4, r5, r6, pc}
   c3e54:	f1c4 0520 	rsb	r5, r4, #32
   c3e58:	fa00 f205 	lsl.w	r2, r0, r5
   c3e5c:	ea4e 0e02 	orr.w	lr, lr, r2
   c3e60:	fa20 f304 	lsr.w	r3, r0, r4
   c3e64:	fa01 f205 	lsl.w	r2, r1, r5
   c3e68:	ea43 0302 	orr.w	r3, r3, r2
   c3e6c:	fa21 f004 	lsr.w	r0, r1, r4
   c3e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3e74:	fa21 f204 	lsr.w	r2, r1, r4
   c3e78:	ea20 0002 	bic.w	r0, r0, r2
   c3e7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c3e80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3e84:	bf08      	it	eq
   c3e86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3e8a:	bd70      	pop	{r4, r5, r6, pc}
   c3e8c:	f094 0f00 	teq	r4, #0
   c3e90:	d10f      	bne.n	c3eb2 <__aeabi_dmul+0x1c2>
   c3e92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c3e96:	0040      	lsls	r0, r0, #1
   c3e98:	eb41 0101 	adc.w	r1, r1, r1
   c3e9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3ea0:	bf08      	it	eq
   c3ea2:	3c01      	subeq	r4, #1
   c3ea4:	d0f7      	beq.n	c3e96 <__aeabi_dmul+0x1a6>
   c3ea6:	ea41 0106 	orr.w	r1, r1, r6
   c3eaa:	f095 0f00 	teq	r5, #0
   c3eae:	bf18      	it	ne
   c3eb0:	4770      	bxne	lr
   c3eb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c3eb6:	0052      	lsls	r2, r2, #1
   c3eb8:	eb43 0303 	adc.w	r3, r3, r3
   c3ebc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3ec0:	bf08      	it	eq
   c3ec2:	3d01      	subeq	r5, #1
   c3ec4:	d0f7      	beq.n	c3eb6 <__aeabi_dmul+0x1c6>
   c3ec6:	ea43 0306 	orr.w	r3, r3, r6
   c3eca:	4770      	bx	lr
   c3ecc:	ea94 0f0c 	teq	r4, ip
   c3ed0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3ed4:	bf18      	it	ne
   c3ed6:	ea95 0f0c 	teqne	r5, ip
   c3eda:	d00c      	beq.n	c3ef6 <__aeabi_dmul+0x206>
   c3edc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3ee0:	bf18      	it	ne
   c3ee2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3ee6:	d1d1      	bne.n	c3e8c <__aeabi_dmul+0x19c>
   c3ee8:	ea81 0103 	eor.w	r1, r1, r3
   c3eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3ef0:	f04f 0000 	mov.w	r0, #0
   c3ef4:	bd70      	pop	{r4, r5, r6, pc}
   c3ef6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3efa:	bf06      	itte	eq
   c3efc:	4610      	moveq	r0, r2
   c3efe:	4619      	moveq	r1, r3
   c3f00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3f04:	d019      	beq.n	c3f3a <__aeabi_dmul+0x24a>
   c3f06:	ea94 0f0c 	teq	r4, ip
   c3f0a:	d102      	bne.n	c3f12 <__aeabi_dmul+0x222>
   c3f0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3f10:	d113      	bne.n	c3f3a <__aeabi_dmul+0x24a>
   c3f12:	ea95 0f0c 	teq	r5, ip
   c3f16:	d105      	bne.n	c3f24 <__aeabi_dmul+0x234>
   c3f18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3f1c:	bf1c      	itt	ne
   c3f1e:	4610      	movne	r0, r2
   c3f20:	4619      	movne	r1, r3
   c3f22:	d10a      	bne.n	c3f3a <__aeabi_dmul+0x24a>
   c3f24:	ea81 0103 	eor.w	r1, r1, r3
   c3f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3f2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3f34:	f04f 0000 	mov.w	r0, #0
   c3f38:	bd70      	pop	{r4, r5, r6, pc}
   c3f3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3f3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c3f42:	bd70      	pop	{r4, r5, r6, pc}

000c3f44 <__aeabi_ddiv>:
   c3f44:	b570      	push	{r4, r5, r6, lr}
   c3f46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3f4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3f4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3f52:	bf1d      	ittte	ne
   c3f54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3f58:	ea94 0f0c 	teqne	r4, ip
   c3f5c:	ea95 0f0c 	teqne	r5, ip
   c3f60:	f000 f8a7 	bleq	c40b2 <__aeabi_ddiv+0x16e>
   c3f64:	eba4 0405 	sub.w	r4, r4, r5
   c3f68:	ea81 0e03 	eor.w	lr, r1, r3
   c3f6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3f70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3f74:	f000 8088 	beq.w	c4088 <__aeabi_ddiv+0x144>
   c3f78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3f7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c3f80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c3f84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c3f88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c3f8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c3f90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c3f94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c3f98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c3f9c:	429d      	cmp	r5, r3
   c3f9e:	bf08      	it	eq
   c3fa0:	4296      	cmpeq	r6, r2
   c3fa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c3fa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c3faa:	d202      	bcs.n	c3fb2 <__aeabi_ddiv+0x6e>
   c3fac:	085b      	lsrs	r3, r3, #1
   c3fae:	ea4f 0232 	mov.w	r2, r2, rrx
   c3fb2:	1ab6      	subs	r6, r6, r2
   c3fb4:	eb65 0503 	sbc.w	r5, r5, r3
   c3fb8:	085b      	lsrs	r3, r3, #1
   c3fba:	ea4f 0232 	mov.w	r2, r2, rrx
   c3fbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c3fc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c3fc6:	ebb6 0e02 	subs.w	lr, r6, r2
   c3fca:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3fce:	bf22      	ittt	cs
   c3fd0:	1ab6      	subcs	r6, r6, r2
   c3fd2:	4675      	movcs	r5, lr
   c3fd4:	ea40 000c 	orrcs.w	r0, r0, ip
   c3fd8:	085b      	lsrs	r3, r3, #1
   c3fda:	ea4f 0232 	mov.w	r2, r2, rrx
   c3fde:	ebb6 0e02 	subs.w	lr, r6, r2
   c3fe2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3fe6:	bf22      	ittt	cs
   c3fe8:	1ab6      	subcs	r6, r6, r2
   c3fea:	4675      	movcs	r5, lr
   c3fec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3ff0:	085b      	lsrs	r3, r3, #1
   c3ff2:	ea4f 0232 	mov.w	r2, r2, rrx
   c3ff6:	ebb6 0e02 	subs.w	lr, r6, r2
   c3ffa:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3ffe:	bf22      	ittt	cs
   c4000:	1ab6      	subcs	r6, r6, r2
   c4002:	4675      	movcs	r5, lr
   c4004:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4008:	085b      	lsrs	r3, r3, #1
   c400a:	ea4f 0232 	mov.w	r2, r2, rrx
   c400e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4012:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4016:	bf22      	ittt	cs
   c4018:	1ab6      	subcs	r6, r6, r2
   c401a:	4675      	movcs	r5, lr
   c401c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4020:	ea55 0e06 	orrs.w	lr, r5, r6
   c4024:	d018      	beq.n	c4058 <__aeabi_ddiv+0x114>
   c4026:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c402a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c402e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c4032:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c4036:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c403a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c403e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4042:	d1c0      	bne.n	c3fc6 <__aeabi_ddiv+0x82>
   c4044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4048:	d10b      	bne.n	c4062 <__aeabi_ddiv+0x11e>
   c404a:	ea41 0100 	orr.w	r1, r1, r0
   c404e:	f04f 0000 	mov.w	r0, #0
   c4052:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c4056:	e7b6      	b.n	c3fc6 <__aeabi_ddiv+0x82>
   c4058:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c405c:	bf04      	itt	eq
   c405e:	4301      	orreq	r1, r0
   c4060:	2000      	moveq	r0, #0
   c4062:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4066:	bf88      	it	hi
   c4068:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c406c:	f63f aeaf 	bhi.w	c3dce <__aeabi_dmul+0xde>
   c4070:	ebb5 0c03 	subs.w	ip, r5, r3
   c4074:	bf04      	itt	eq
   c4076:	ebb6 0c02 	subseq.w	ip, r6, r2
   c407a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c407e:	f150 0000 	adcs.w	r0, r0, #0
   c4082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c4086:	bd70      	pop	{r4, r5, r6, pc}
   c4088:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c408c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c4090:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c4094:	bfc2      	ittt	gt
   c4096:	ebd4 050c 	rsbsgt	r5, r4, ip
   c409a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c409e:	bd70      	popgt	{r4, r5, r6, pc}
   c40a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c40a4:	f04f 0e00 	mov.w	lr, #0
   c40a8:	3c01      	subs	r4, #1
   c40aa:	e690      	b.n	c3dce <__aeabi_dmul+0xde>
   c40ac:	ea45 0e06 	orr.w	lr, r5, r6
   c40b0:	e68d      	b.n	c3dce <__aeabi_dmul+0xde>
   c40b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c40b6:	ea94 0f0c 	teq	r4, ip
   c40ba:	bf08      	it	eq
   c40bc:	ea95 0f0c 	teqeq	r5, ip
   c40c0:	f43f af3b 	beq.w	c3f3a <__aeabi_dmul+0x24a>
   c40c4:	ea94 0f0c 	teq	r4, ip
   c40c8:	d10a      	bne.n	c40e0 <__aeabi_ddiv+0x19c>
   c40ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c40ce:	f47f af34 	bne.w	c3f3a <__aeabi_dmul+0x24a>
   c40d2:	ea95 0f0c 	teq	r5, ip
   c40d6:	f47f af25 	bne.w	c3f24 <__aeabi_dmul+0x234>
   c40da:	4610      	mov	r0, r2
   c40dc:	4619      	mov	r1, r3
   c40de:	e72c      	b.n	c3f3a <__aeabi_dmul+0x24a>
   c40e0:	ea95 0f0c 	teq	r5, ip
   c40e4:	d106      	bne.n	c40f4 <__aeabi_ddiv+0x1b0>
   c40e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c40ea:	f43f aefd 	beq.w	c3ee8 <__aeabi_dmul+0x1f8>
   c40ee:	4610      	mov	r0, r2
   c40f0:	4619      	mov	r1, r3
   c40f2:	e722      	b.n	c3f3a <__aeabi_dmul+0x24a>
   c40f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c40f8:	bf18      	it	ne
   c40fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c40fe:	f47f aec5 	bne.w	c3e8c <__aeabi_dmul+0x19c>
   c4102:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c4106:	f47f af0d 	bne.w	c3f24 <__aeabi_dmul+0x234>
   c410a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c410e:	f47f aeeb 	bne.w	c3ee8 <__aeabi_dmul+0x1f8>
   c4112:	e712      	b.n	c3f3a <__aeabi_dmul+0x24a>

000c4114 <__gedf2>:
   c4114:	f04f 3cff 	mov.w	ip, #4294967295
   c4118:	e006      	b.n	c4128 <__cmpdf2+0x4>
   c411a:	bf00      	nop

000c411c <__ledf2>:
   c411c:	f04f 0c01 	mov.w	ip, #1
   c4120:	e002      	b.n	c4128 <__cmpdf2+0x4>
   c4122:	bf00      	nop

000c4124 <__cmpdf2>:
   c4124:	f04f 0c01 	mov.w	ip, #1
   c4128:	f84d cd04 	str.w	ip, [sp, #-4]!
   c412c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4134:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4138:	bf18      	it	ne
   c413a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c413e:	d01b      	beq.n	c4178 <__cmpdf2+0x54>
   c4140:	b001      	add	sp, #4
   c4142:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c4146:	bf0c      	ite	eq
   c4148:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c414c:	ea91 0f03 	teqne	r1, r3
   c4150:	bf02      	ittt	eq
   c4152:	ea90 0f02 	teqeq	r0, r2
   c4156:	2000      	moveq	r0, #0
   c4158:	4770      	bxeq	lr
   c415a:	f110 0f00 	cmn.w	r0, #0
   c415e:	ea91 0f03 	teq	r1, r3
   c4162:	bf58      	it	pl
   c4164:	4299      	cmppl	r1, r3
   c4166:	bf08      	it	eq
   c4168:	4290      	cmpeq	r0, r2
   c416a:	bf2c      	ite	cs
   c416c:	17d8      	asrcs	r0, r3, #31
   c416e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c4172:	f040 0001 	orr.w	r0, r0, #1
   c4176:	4770      	bx	lr
   c4178:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c417c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4180:	d102      	bne.n	c4188 <__cmpdf2+0x64>
   c4182:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4186:	d107      	bne.n	c4198 <__cmpdf2+0x74>
   c4188:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c418c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4190:	d1d6      	bne.n	c4140 <__cmpdf2+0x1c>
   c4192:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4196:	d0d3      	beq.n	c4140 <__cmpdf2+0x1c>
   c4198:	f85d 0b04 	ldr.w	r0, [sp], #4
   c419c:	4770      	bx	lr
   c419e:	bf00      	nop

000c41a0 <__aeabi_cdrcmple>:
   c41a0:	4684      	mov	ip, r0
   c41a2:	4610      	mov	r0, r2
   c41a4:	4662      	mov	r2, ip
   c41a6:	468c      	mov	ip, r1
   c41a8:	4619      	mov	r1, r3
   c41aa:	4663      	mov	r3, ip
   c41ac:	e000      	b.n	c41b0 <__aeabi_cdcmpeq>
   c41ae:	bf00      	nop

000c41b0 <__aeabi_cdcmpeq>:
   c41b0:	b501      	push	{r0, lr}
   c41b2:	f7ff ffb7 	bl	c4124 <__cmpdf2>
   c41b6:	2800      	cmp	r0, #0
   c41b8:	bf48      	it	mi
   c41ba:	f110 0f00 	cmnmi.w	r0, #0
   c41be:	bd01      	pop	{r0, pc}

000c41c0 <__aeabi_dcmpeq>:
   c41c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c41c4:	f7ff fff4 	bl	c41b0 <__aeabi_cdcmpeq>
   c41c8:	bf0c      	ite	eq
   c41ca:	2001      	moveq	r0, #1
   c41cc:	2000      	movne	r0, #0
   c41ce:	f85d fb08 	ldr.w	pc, [sp], #8
   c41d2:	bf00      	nop

000c41d4 <__aeabi_dcmplt>:
   c41d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c41d8:	f7ff ffea 	bl	c41b0 <__aeabi_cdcmpeq>
   c41dc:	bf34      	ite	cc
   c41de:	2001      	movcc	r0, #1
   c41e0:	2000      	movcs	r0, #0
   c41e2:	f85d fb08 	ldr.w	pc, [sp], #8
   c41e6:	bf00      	nop

000c41e8 <__aeabi_dcmple>:
   c41e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c41ec:	f7ff ffe0 	bl	c41b0 <__aeabi_cdcmpeq>
   c41f0:	bf94      	ite	ls
   c41f2:	2001      	movls	r0, #1
   c41f4:	2000      	movhi	r0, #0
   c41f6:	f85d fb08 	ldr.w	pc, [sp], #8
   c41fa:	bf00      	nop

000c41fc <__aeabi_dcmpge>:
   c41fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4200:	f7ff ffce 	bl	c41a0 <__aeabi_cdrcmple>
   c4204:	bf94      	ite	ls
   c4206:	2001      	movls	r0, #1
   c4208:	2000      	movhi	r0, #0
   c420a:	f85d fb08 	ldr.w	pc, [sp], #8
   c420e:	bf00      	nop

000c4210 <__aeabi_dcmpgt>:
   c4210:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4214:	f7ff ffc4 	bl	c41a0 <__aeabi_cdrcmple>
   c4218:	bf34      	ite	cc
   c421a:	2001      	movcc	r0, #1
   c421c:	2000      	movcs	r0, #0
   c421e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4222:	bf00      	nop

000c4224 <__aeabi_dcmpun>:
   c4224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c422c:	d102      	bne.n	c4234 <__aeabi_dcmpun+0x10>
   c422e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4232:	d10a      	bne.n	c424a <__aeabi_dcmpun+0x26>
   c4234:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c423c:	d102      	bne.n	c4244 <__aeabi_dcmpun+0x20>
   c423e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4242:	d102      	bne.n	c424a <__aeabi_dcmpun+0x26>
   c4244:	f04f 0000 	mov.w	r0, #0
   c4248:	4770      	bx	lr
   c424a:	f04f 0001 	mov.w	r0, #1
   c424e:	4770      	bx	lr

000c4250 <__aeabi_d2iz>:
   c4250:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4254:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4258:	d215      	bcs.n	c4286 <__aeabi_d2iz+0x36>
   c425a:	d511      	bpl.n	c4280 <__aeabi_d2iz+0x30>
   c425c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4260:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4264:	d912      	bls.n	c428c <__aeabi_d2iz+0x3c>
   c4266:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c426a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c426e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c4276:	fa23 f002 	lsr.w	r0, r3, r2
   c427a:	bf18      	it	ne
   c427c:	4240      	negne	r0, r0
   c427e:	4770      	bx	lr
   c4280:	f04f 0000 	mov.w	r0, #0
   c4284:	4770      	bx	lr
   c4286:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c428a:	d105      	bne.n	c4298 <__aeabi_d2iz+0x48>
   c428c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c4290:	bf08      	it	eq
   c4292:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c4296:	4770      	bx	lr
   c4298:	f04f 0000 	mov.w	r0, #0
   c429c:	4770      	bx	lr
   c429e:	bf00      	nop

000c42a0 <__aeabi_d2uiz>:
   c42a0:	004a      	lsls	r2, r1, #1
   c42a2:	d211      	bcs.n	c42c8 <__aeabi_d2uiz+0x28>
   c42a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c42a8:	d211      	bcs.n	c42ce <__aeabi_d2uiz+0x2e>
   c42aa:	d50d      	bpl.n	c42c8 <__aeabi_d2uiz+0x28>
   c42ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c42b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c42b4:	d40e      	bmi.n	c42d4 <__aeabi_d2uiz+0x34>
   c42b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c42ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c42be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c42c2:	fa23 f002 	lsr.w	r0, r3, r2
   c42c6:	4770      	bx	lr
   c42c8:	f04f 0000 	mov.w	r0, #0
   c42cc:	4770      	bx	lr
   c42ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c42d2:	d102      	bne.n	c42da <__aeabi_d2uiz+0x3a>
   c42d4:	f04f 30ff 	mov.w	r0, #4294967295
   c42d8:	4770      	bx	lr
   c42da:	f04f 0000 	mov.w	r0, #0
   c42de:	4770      	bx	lr

000c42e0 <__aeabi_d2f>:
   c42e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c42e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c42e8:	bf24      	itt	cs
   c42ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c42ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c42f2:	d90d      	bls.n	c4310 <__aeabi_d2f+0x30>
   c42f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c42f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c42fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4300:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c4304:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4308:	bf08      	it	eq
   c430a:	f020 0001 	biceq.w	r0, r0, #1
   c430e:	4770      	bx	lr
   c4310:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c4314:	d121      	bne.n	c435a <__aeabi_d2f+0x7a>
   c4316:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c431a:	bfbc      	itt	lt
   c431c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4320:	4770      	bxlt	lr
   c4322:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4326:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c432a:	f1c2 0218 	rsb	r2, r2, #24
   c432e:	f1c2 0c20 	rsb	ip, r2, #32
   c4332:	fa10 f30c 	lsls.w	r3, r0, ip
   c4336:	fa20 f002 	lsr.w	r0, r0, r2
   c433a:	bf18      	it	ne
   c433c:	f040 0001 	orrne.w	r0, r0, #1
   c4340:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c4344:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4348:	fa03 fc0c 	lsl.w	ip, r3, ip
   c434c:	ea40 000c 	orr.w	r0, r0, ip
   c4350:	fa23 f302 	lsr.w	r3, r3, r2
   c4354:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c4358:	e7cc      	b.n	c42f4 <__aeabi_d2f+0x14>
   c435a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c435e:	d107      	bne.n	c4370 <__aeabi_d2f+0x90>
   c4360:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c4364:	bf1e      	ittt	ne
   c4366:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c436a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c436e:	4770      	bxne	lr
   c4370:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c4374:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c4378:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c437c:	4770      	bx	lr
   c437e:	bf00      	nop

000c4380 <__aeabi_d2ulz>:
   c4380:	b5d0      	push	{r4, r6, r7, lr}
   c4382:	4b0c      	ldr	r3, [pc, #48]	; (c43b4 <__aeabi_d2ulz+0x34>)
   c4384:	2200      	movs	r2, #0
   c4386:	4606      	mov	r6, r0
   c4388:	460f      	mov	r7, r1
   c438a:	f7ff fcb1 	bl	c3cf0 <__aeabi_dmul>
   c438e:	f7ff ff87 	bl	c42a0 <__aeabi_d2uiz>
   c4392:	4604      	mov	r4, r0
   c4394:	f7ff fc32 	bl	c3bfc <__aeabi_ui2d>
   c4398:	4b07      	ldr	r3, [pc, #28]	; (c43b8 <__aeabi_d2ulz+0x38>)
   c439a:	2200      	movs	r2, #0
   c439c:	f7ff fca8 	bl	c3cf0 <__aeabi_dmul>
   c43a0:	4602      	mov	r2, r0
   c43a2:	460b      	mov	r3, r1
   c43a4:	4630      	mov	r0, r6
   c43a6:	4639      	mov	r1, r7
   c43a8:	f7ff faea 	bl	c3980 <__aeabi_dsub>
   c43ac:	f7ff ff78 	bl	c42a0 <__aeabi_d2uiz>
   c43b0:	4621      	mov	r1, r4
   c43b2:	bdd0      	pop	{r4, r6, r7, pc}
   c43b4:	3df00000 	.word	0x3df00000
   c43b8:	41f00000 	.word	0x41f00000

000c43bc <atexit>:
   c43bc:	2300      	movs	r3, #0
   c43be:	4601      	mov	r1, r0
   c43c0:	461a      	mov	r2, r3
   c43c2:	4618      	mov	r0, r3
   c43c4:	f001 b806 	b.w	c53d4 <__register_exitproc>

000c43c8 <atof>:
   c43c8:	2100      	movs	r1, #0
   c43ca:	f000 bf6b 	b.w	c52a4 <strtod>

000c43ce <atoi>:
   c43ce:	220a      	movs	r2, #10
   c43d0:	2100      	movs	r1, #0
   c43d2:	f000 bff5 	b.w	c53c0 <strtol>
	...

000c43d8 <isprint>:
   c43d8:	4b02      	ldr	r3, [pc, #8]	; (c43e4 <isprint+0xc>)
   c43da:	4418      	add	r0, r3
   c43dc:	7840      	ldrb	r0, [r0, #1]
   c43de:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c43e2:	4770      	bx	lr
   c43e4:	000c85b0 	.word	0x000c85b0

000c43e8 <memcmp>:
   c43e8:	b510      	push	{r4, lr}
   c43ea:	3901      	subs	r1, #1
   c43ec:	4402      	add	r2, r0
   c43ee:	4290      	cmp	r0, r2
   c43f0:	d101      	bne.n	c43f6 <memcmp+0xe>
   c43f2:	2000      	movs	r0, #0
   c43f4:	e005      	b.n	c4402 <memcmp+0x1a>
   c43f6:	7803      	ldrb	r3, [r0, #0]
   c43f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c43fc:	42a3      	cmp	r3, r4
   c43fe:	d001      	beq.n	c4404 <memcmp+0x1c>
   c4400:	1b18      	subs	r0, r3, r4
   c4402:	bd10      	pop	{r4, pc}
   c4404:	3001      	adds	r0, #1
   c4406:	e7f2      	b.n	c43ee <memcmp+0x6>

000c4408 <memcpy>:
   c4408:	440a      	add	r2, r1
   c440a:	4291      	cmp	r1, r2
   c440c:	f100 33ff 	add.w	r3, r0, #4294967295
   c4410:	d100      	bne.n	c4414 <memcpy+0xc>
   c4412:	4770      	bx	lr
   c4414:	b510      	push	{r4, lr}
   c4416:	f811 4b01 	ldrb.w	r4, [r1], #1
   c441a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c441e:	4291      	cmp	r1, r2
   c4420:	d1f9      	bne.n	c4416 <memcpy+0xe>
   c4422:	bd10      	pop	{r4, pc}

000c4424 <memmove>:
   c4424:	4288      	cmp	r0, r1
   c4426:	b510      	push	{r4, lr}
   c4428:	eb01 0402 	add.w	r4, r1, r2
   c442c:	d902      	bls.n	c4434 <memmove+0x10>
   c442e:	4284      	cmp	r4, r0
   c4430:	4623      	mov	r3, r4
   c4432:	d807      	bhi.n	c4444 <memmove+0x20>
   c4434:	1e43      	subs	r3, r0, #1
   c4436:	42a1      	cmp	r1, r4
   c4438:	d008      	beq.n	c444c <memmove+0x28>
   c443a:	f811 2b01 	ldrb.w	r2, [r1], #1
   c443e:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4442:	e7f8      	b.n	c4436 <memmove+0x12>
   c4444:	4402      	add	r2, r0
   c4446:	4601      	mov	r1, r0
   c4448:	428a      	cmp	r2, r1
   c444a:	d100      	bne.n	c444e <memmove+0x2a>
   c444c:	bd10      	pop	{r4, pc}
   c444e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c4452:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c4456:	e7f7      	b.n	c4448 <memmove+0x24>

000c4458 <memset>:
   c4458:	4402      	add	r2, r0
   c445a:	4603      	mov	r3, r0
   c445c:	4293      	cmp	r3, r2
   c445e:	d100      	bne.n	c4462 <memset+0xa>
   c4460:	4770      	bx	lr
   c4462:	f803 1b01 	strb.w	r1, [r3], #1
   c4466:	e7f9      	b.n	c445c <memset+0x4>

000c4468 <srand>:
   c4468:	b538      	push	{r3, r4, r5, lr}
   c446a:	4b10      	ldr	r3, [pc, #64]	; (c44ac <srand+0x44>)
   c446c:	681d      	ldr	r5, [r3, #0]
   c446e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4470:	4604      	mov	r4, r0
   c4472:	b9b3      	cbnz	r3, c44a2 <srand+0x3a>
   c4474:	2018      	movs	r0, #24
   c4476:	f7f9 fe73 	bl	be160 <malloc>
   c447a:	4602      	mov	r2, r0
   c447c:	63a8      	str	r0, [r5, #56]	; 0x38
   c447e:	b920      	cbnz	r0, c448a <srand+0x22>
   c4480:	4b0b      	ldr	r3, [pc, #44]	; (c44b0 <srand+0x48>)
   c4482:	480c      	ldr	r0, [pc, #48]	; (c44b4 <srand+0x4c>)
   c4484:	2142      	movs	r1, #66	; 0x42
   c4486:	f7f9 febb 	bl	be200 <__assert_func>
   c448a:	490b      	ldr	r1, [pc, #44]	; (c44b8 <srand+0x50>)
   c448c:	4b0b      	ldr	r3, [pc, #44]	; (c44bc <srand+0x54>)
   c448e:	e9c0 1300 	strd	r1, r3, [r0]
   c4492:	4b0b      	ldr	r3, [pc, #44]	; (c44c0 <srand+0x58>)
   c4494:	6083      	str	r3, [r0, #8]
   c4496:	230b      	movs	r3, #11
   c4498:	8183      	strh	r3, [r0, #12]
   c449a:	2100      	movs	r1, #0
   c449c:	2001      	movs	r0, #1
   c449e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c44a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c44a4:	2200      	movs	r2, #0
   c44a6:	611c      	str	r4, [r3, #16]
   c44a8:	615a      	str	r2, [r3, #20]
   c44aa:	bd38      	pop	{r3, r4, r5, pc}
   c44ac:	2003db68 	.word	0x2003db68
   c44b0:	000c84c0 	.word	0x000c84c0
   c44b4:	000c84d7 	.word	0x000c84d7
   c44b8:	abcd330e 	.word	0xabcd330e
   c44bc:	e66d1234 	.word	0xe66d1234
   c44c0:	0005deec 	.word	0x0005deec

000c44c4 <strcat>:
   c44c4:	b510      	push	{r4, lr}
   c44c6:	4602      	mov	r2, r0
   c44c8:	7814      	ldrb	r4, [r2, #0]
   c44ca:	4613      	mov	r3, r2
   c44cc:	3201      	adds	r2, #1
   c44ce:	2c00      	cmp	r4, #0
   c44d0:	d1fa      	bne.n	c44c8 <strcat+0x4>
   c44d2:	3b01      	subs	r3, #1
   c44d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   c44d8:	f803 2f01 	strb.w	r2, [r3, #1]!
   c44dc:	2a00      	cmp	r2, #0
   c44de:	d1f9      	bne.n	c44d4 <strcat+0x10>
   c44e0:	bd10      	pop	{r4, pc}

000c44e2 <strchr>:
   c44e2:	b2c9      	uxtb	r1, r1
   c44e4:	4603      	mov	r3, r0
   c44e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   c44ea:	b11a      	cbz	r2, c44f4 <strchr+0x12>
   c44ec:	428a      	cmp	r2, r1
   c44ee:	d1f9      	bne.n	c44e4 <strchr+0x2>
   c44f0:	4618      	mov	r0, r3
   c44f2:	4770      	bx	lr
   c44f4:	2900      	cmp	r1, #0
   c44f6:	bf18      	it	ne
   c44f8:	2300      	movne	r3, #0
   c44fa:	e7f9      	b.n	c44f0 <strchr+0xe>

000c44fc <strchrnul>:
   c44fc:	b510      	push	{r4, lr}
   c44fe:	4604      	mov	r4, r0
   c4500:	f7ff ffef 	bl	c44e2 <strchr>
   c4504:	b918      	cbnz	r0, c450e <strchrnul+0x12>
   c4506:	4620      	mov	r0, r4
   c4508:	f000 f831 	bl	c456e <strlen>
   c450c:	4420      	add	r0, r4
   c450e:	bd10      	pop	{r4, pc}

000c4510 <strcmp>:
   c4510:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4514:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4518:	2a01      	cmp	r2, #1
   c451a:	bf28      	it	cs
   c451c:	429a      	cmpcs	r2, r3
   c451e:	d0f7      	beq.n	c4510 <strcmp>
   c4520:	1ad0      	subs	r0, r2, r3
   c4522:	4770      	bx	lr

000c4524 <strcpy>:
   c4524:	4603      	mov	r3, r0
   c4526:	f811 2b01 	ldrb.w	r2, [r1], #1
   c452a:	f803 2b01 	strb.w	r2, [r3], #1
   c452e:	2a00      	cmp	r2, #0
   c4530:	d1f9      	bne.n	c4526 <strcpy+0x2>
   c4532:	4770      	bx	lr

000c4534 <strdup>:
   c4534:	4b02      	ldr	r3, [pc, #8]	; (c4540 <strdup+0xc>)
   c4536:	4601      	mov	r1, r0
   c4538:	6818      	ldr	r0, [r3, #0]
   c453a:	f000 b803 	b.w	c4544 <_strdup_r>
   c453e:	bf00      	nop
   c4540:	2003db68 	.word	0x2003db68

000c4544 <_strdup_r>:
   c4544:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4546:	4604      	mov	r4, r0
   c4548:	4608      	mov	r0, r1
   c454a:	460d      	mov	r5, r1
   c454c:	f000 f80f 	bl	c456e <strlen>
   c4550:	1c42      	adds	r2, r0, #1
   c4552:	4611      	mov	r1, r2
   c4554:	4620      	mov	r0, r4
   c4556:	9201      	str	r2, [sp, #4]
   c4558:	f7f9 fe42 	bl	be1e0 <_malloc_r>
   c455c:	4604      	mov	r4, r0
   c455e:	b118      	cbz	r0, c4568 <_strdup_r+0x24>
   c4560:	9a01      	ldr	r2, [sp, #4]
   c4562:	4629      	mov	r1, r5
   c4564:	f7ff ff50 	bl	c4408 <memcpy>
   c4568:	4620      	mov	r0, r4
   c456a:	b003      	add	sp, #12
   c456c:	bd30      	pop	{r4, r5, pc}

000c456e <strlen>:
   c456e:	4603      	mov	r3, r0
   c4570:	f813 2b01 	ldrb.w	r2, [r3], #1
   c4574:	2a00      	cmp	r2, #0
   c4576:	d1fb      	bne.n	c4570 <strlen+0x2>
   c4578:	1a18      	subs	r0, r3, r0
   c457a:	3801      	subs	r0, #1
   c457c:	4770      	bx	lr
	...

000c4580 <strlwr>:
   c4580:	b510      	push	{r4, lr}
   c4582:	4c07      	ldr	r4, [pc, #28]	; (c45a0 <strlwr+0x20>)
   c4584:	1e42      	subs	r2, r0, #1
   c4586:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c458a:	b903      	cbnz	r3, c458e <strlwr+0xe>
   c458c:	bd10      	pop	{r4, pc}
   c458e:	5ce1      	ldrb	r1, [r4, r3]
   c4590:	f001 0103 	and.w	r1, r1, #3
   c4594:	2901      	cmp	r1, #1
   c4596:	bf08      	it	eq
   c4598:	3320      	addeq	r3, #32
   c459a:	7013      	strb	r3, [r2, #0]
   c459c:	e7f3      	b.n	c4586 <strlwr+0x6>
   c459e:	bf00      	nop
   c45a0:	000c85b1 	.word	0x000c85b1

000c45a4 <strncmp>:
   c45a4:	b510      	push	{r4, lr}
   c45a6:	b17a      	cbz	r2, c45c8 <strncmp+0x24>
   c45a8:	4603      	mov	r3, r0
   c45aa:	3901      	subs	r1, #1
   c45ac:	1884      	adds	r4, r0, r2
   c45ae:	f813 0b01 	ldrb.w	r0, [r3], #1
   c45b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c45b6:	4290      	cmp	r0, r2
   c45b8:	d101      	bne.n	c45be <strncmp+0x1a>
   c45ba:	42a3      	cmp	r3, r4
   c45bc:	d101      	bne.n	c45c2 <strncmp+0x1e>
   c45be:	1a80      	subs	r0, r0, r2
   c45c0:	bd10      	pop	{r4, pc}
   c45c2:	2800      	cmp	r0, #0
   c45c4:	d1f3      	bne.n	c45ae <strncmp+0xa>
   c45c6:	e7fa      	b.n	c45be <strncmp+0x1a>
   c45c8:	4610      	mov	r0, r2
   c45ca:	e7f9      	b.n	c45c0 <strncmp+0x1c>

000c45cc <strncpy>:
   c45cc:	b510      	push	{r4, lr}
   c45ce:	3901      	subs	r1, #1
   c45d0:	4603      	mov	r3, r0
   c45d2:	b132      	cbz	r2, c45e2 <strncpy+0x16>
   c45d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c45d8:	f803 4b01 	strb.w	r4, [r3], #1
   c45dc:	3a01      	subs	r2, #1
   c45de:	2c00      	cmp	r4, #0
   c45e0:	d1f7      	bne.n	c45d2 <strncpy+0x6>
   c45e2:	441a      	add	r2, r3
   c45e4:	2100      	movs	r1, #0
   c45e6:	4293      	cmp	r3, r2
   c45e8:	d100      	bne.n	c45ec <strncpy+0x20>
   c45ea:	bd10      	pop	{r4, pc}
   c45ec:	f803 1b01 	strb.w	r1, [r3], #1
   c45f0:	e7f9      	b.n	c45e6 <strncpy+0x1a>

000c45f2 <strnlen>:
   c45f2:	b510      	push	{r4, lr}
   c45f4:	4602      	mov	r2, r0
   c45f6:	4401      	add	r1, r0
   c45f8:	428a      	cmp	r2, r1
   c45fa:	4613      	mov	r3, r2
   c45fc:	d003      	beq.n	c4606 <strnlen+0x14>
   c45fe:	781c      	ldrb	r4, [r3, #0]
   c4600:	3201      	adds	r2, #1
   c4602:	2c00      	cmp	r4, #0
   c4604:	d1f8      	bne.n	c45f8 <strnlen+0x6>
   c4606:	1a18      	subs	r0, r3, r0
   c4608:	bd10      	pop	{r4, pc}

000c460a <strrchr>:
   c460a:	b538      	push	{r3, r4, r5, lr}
   c460c:	4603      	mov	r3, r0
   c460e:	460c      	mov	r4, r1
   c4610:	b969      	cbnz	r1, c462e <strrchr+0x24>
   c4612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4616:	f7ff bf64 	b.w	c44e2 <strchr>
   c461a:	1c43      	adds	r3, r0, #1
   c461c:	4605      	mov	r5, r0
   c461e:	4621      	mov	r1, r4
   c4620:	4618      	mov	r0, r3
   c4622:	f7ff ff5e 	bl	c44e2 <strchr>
   c4626:	2800      	cmp	r0, #0
   c4628:	d1f7      	bne.n	c461a <strrchr+0x10>
   c462a:	4628      	mov	r0, r5
   c462c:	bd38      	pop	{r3, r4, r5, pc}
   c462e:	2500      	movs	r5, #0
   c4630:	e7f5      	b.n	c461e <strrchr+0x14>

000c4632 <strstr>:
   c4632:	780a      	ldrb	r2, [r1, #0]
   c4634:	b570      	push	{r4, r5, r6, lr}
   c4636:	b96a      	cbnz	r2, c4654 <strstr+0x22>
   c4638:	bd70      	pop	{r4, r5, r6, pc}
   c463a:	429a      	cmp	r2, r3
   c463c:	d109      	bne.n	c4652 <strstr+0x20>
   c463e:	460c      	mov	r4, r1
   c4640:	4605      	mov	r5, r0
   c4642:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c4646:	2b00      	cmp	r3, #0
   c4648:	d0f6      	beq.n	c4638 <strstr+0x6>
   c464a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c464e:	429e      	cmp	r6, r3
   c4650:	d0f7      	beq.n	c4642 <strstr+0x10>
   c4652:	3001      	adds	r0, #1
   c4654:	7803      	ldrb	r3, [r0, #0]
   c4656:	2b00      	cmp	r3, #0
   c4658:	d1ef      	bne.n	c463a <strstr+0x8>
   c465a:	4618      	mov	r0, r3
   c465c:	e7ec      	b.n	c4638 <strstr+0x6>

000c465e <sulp>:
   c465e:	b570      	push	{r4, r5, r6, lr}
   c4660:	4604      	mov	r4, r0
   c4662:	460d      	mov	r5, r1
   c4664:	ec45 4b10 	vmov	d0, r4, r5
   c4668:	4616      	mov	r6, r2
   c466a:	f001 fe0d 	bl	c6288 <__ulp>
   c466e:	ec51 0b10 	vmov	r0, r1, d0
   c4672:	b17e      	cbz	r6, c4694 <sulp+0x36>
   c4674:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c4678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c467c:	2b00      	cmp	r3, #0
   c467e:	dd09      	ble.n	c4694 <sulp+0x36>
   c4680:	051b      	lsls	r3, r3, #20
   c4682:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c4686:	2400      	movs	r4, #0
   c4688:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c468c:	4622      	mov	r2, r4
   c468e:	462b      	mov	r3, r5
   c4690:	f7ff fb2e 	bl	c3cf0 <__aeabi_dmul>
   c4694:	bd70      	pop	{r4, r5, r6, pc}
	...

000c4698 <_strtod_l>:
   c4698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c469c:	ed2d 8b02 	vpush	{d8}
   c46a0:	b09d      	sub	sp, #116	; 0x74
   c46a2:	461f      	mov	r7, r3
   c46a4:	2300      	movs	r3, #0
   c46a6:	9318      	str	r3, [sp, #96]	; 0x60
   c46a8:	4ba2      	ldr	r3, [pc, #648]	; (c4934 <_strtod_l+0x29c>)
   c46aa:	9213      	str	r2, [sp, #76]	; 0x4c
   c46ac:	681b      	ldr	r3, [r3, #0]
   c46ae:	9305      	str	r3, [sp, #20]
   c46b0:	4604      	mov	r4, r0
   c46b2:	4618      	mov	r0, r3
   c46b4:	4688      	mov	r8, r1
   c46b6:	f7ff ff5a 	bl	c456e <strlen>
   c46ba:	f04f 0a00 	mov.w	sl, #0
   c46be:	4605      	mov	r5, r0
   c46c0:	f04f 0b00 	mov.w	fp, #0
   c46c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c46c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c46ca:	781a      	ldrb	r2, [r3, #0]
   c46cc:	2a2b      	cmp	r2, #43	; 0x2b
   c46ce:	d04e      	beq.n	c476e <_strtod_l+0xd6>
   c46d0:	d83b      	bhi.n	c474a <_strtod_l+0xb2>
   c46d2:	2a0d      	cmp	r2, #13
   c46d4:	d834      	bhi.n	c4740 <_strtod_l+0xa8>
   c46d6:	2a08      	cmp	r2, #8
   c46d8:	d834      	bhi.n	c4744 <_strtod_l+0xac>
   c46da:	2a00      	cmp	r2, #0
   c46dc:	d03e      	beq.n	c475c <_strtod_l+0xc4>
   c46de:	2300      	movs	r3, #0
   c46e0:	930a      	str	r3, [sp, #40]	; 0x28
   c46e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c46e4:	7833      	ldrb	r3, [r6, #0]
   c46e6:	2b30      	cmp	r3, #48	; 0x30
   c46e8:	f040 80b0 	bne.w	c484c <_strtod_l+0x1b4>
   c46ec:	7873      	ldrb	r3, [r6, #1]
   c46ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c46f2:	2b58      	cmp	r3, #88	; 0x58
   c46f4:	d168      	bne.n	c47c8 <_strtod_l+0x130>
   c46f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c46f8:	9301      	str	r3, [sp, #4]
   c46fa:	ab18      	add	r3, sp, #96	; 0x60
   c46fc:	9702      	str	r7, [sp, #8]
   c46fe:	9300      	str	r3, [sp, #0]
   c4700:	4a8d      	ldr	r2, [pc, #564]	; (c4938 <_strtod_l+0x2a0>)
   c4702:	ab19      	add	r3, sp, #100	; 0x64
   c4704:	a917      	add	r1, sp, #92	; 0x5c
   c4706:	4620      	mov	r0, r4
   c4708:	f000 ff2e 	bl	c5568 <__gethex>
   c470c:	f010 0707 	ands.w	r7, r0, #7
   c4710:	4605      	mov	r5, r0
   c4712:	d005      	beq.n	c4720 <_strtod_l+0x88>
   c4714:	2f06      	cmp	r7, #6
   c4716:	d12c      	bne.n	c4772 <_strtod_l+0xda>
   c4718:	3601      	adds	r6, #1
   c471a:	2300      	movs	r3, #0
   c471c:	9617      	str	r6, [sp, #92]	; 0x5c
   c471e:	930a      	str	r3, [sp, #40]	; 0x28
   c4720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4722:	2b00      	cmp	r3, #0
   c4724:	f040 8590 	bne.w	c5248 <_strtod_l+0xbb0>
   c4728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c472a:	b1eb      	cbz	r3, c4768 <_strtod_l+0xd0>
   c472c:	4652      	mov	r2, sl
   c472e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c4732:	ec43 2b10 	vmov	d0, r2, r3
   c4736:	b01d      	add	sp, #116	; 0x74
   c4738:	ecbd 8b02 	vpop	{d8}
   c473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4740:	2a20      	cmp	r2, #32
   c4742:	d1cc      	bne.n	c46de <_strtod_l+0x46>
   c4744:	3301      	adds	r3, #1
   c4746:	9317      	str	r3, [sp, #92]	; 0x5c
   c4748:	e7be      	b.n	c46c8 <_strtod_l+0x30>
   c474a:	2a2d      	cmp	r2, #45	; 0x2d
   c474c:	d1c7      	bne.n	c46de <_strtod_l+0x46>
   c474e:	2201      	movs	r2, #1
   c4750:	920a      	str	r2, [sp, #40]	; 0x28
   c4752:	1c5a      	adds	r2, r3, #1
   c4754:	9217      	str	r2, [sp, #92]	; 0x5c
   c4756:	785b      	ldrb	r3, [r3, #1]
   c4758:	2b00      	cmp	r3, #0
   c475a:	d1c2      	bne.n	c46e2 <_strtod_l+0x4a>
   c475c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c475e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4762:	2b00      	cmp	r3, #0
   c4764:	f040 856e 	bne.w	c5244 <_strtod_l+0xbac>
   c4768:	4652      	mov	r2, sl
   c476a:	465b      	mov	r3, fp
   c476c:	e7e1      	b.n	c4732 <_strtod_l+0x9a>
   c476e:	2200      	movs	r2, #0
   c4770:	e7ee      	b.n	c4750 <_strtod_l+0xb8>
   c4772:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4774:	b13a      	cbz	r2, c4786 <_strtod_l+0xee>
   c4776:	2135      	movs	r1, #53	; 0x35
   c4778:	a81a      	add	r0, sp, #104	; 0x68
   c477a:	f001 fe90 	bl	c649e <__copybits>
   c477e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4780:	4620      	mov	r0, r4
   c4782:	f001 fa4f 	bl	c5c24 <_Bfree>
   c4786:	3f01      	subs	r7, #1
   c4788:	2f04      	cmp	r7, #4
   c478a:	d806      	bhi.n	c479a <_strtod_l+0x102>
   c478c:	e8df f007 	tbb	[pc, r7]
   c4790:	1714030a 	.word	0x1714030a
   c4794:	0a          	.byte	0x0a
   c4795:	00          	.byte	0x00
   c4796:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c479a:	0728      	lsls	r0, r5, #28
   c479c:	d5c0      	bpl.n	c4720 <_strtod_l+0x88>
   c479e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c47a2:	e7bd      	b.n	c4720 <_strtod_l+0x88>
   c47a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c47a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c47aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c47ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c47b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c47b6:	e7f0      	b.n	c479a <_strtod_l+0x102>
   c47b8:	f8df b180 	ldr.w	fp, [pc, #384]	; c493c <_strtod_l+0x2a4>
   c47bc:	e7ed      	b.n	c479a <_strtod_l+0x102>
   c47be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c47c2:	f04f 3aff 	mov.w	sl, #4294967295
   c47c6:	e7e8      	b.n	c479a <_strtod_l+0x102>
   c47c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47ca:	1c5a      	adds	r2, r3, #1
   c47cc:	9217      	str	r2, [sp, #92]	; 0x5c
   c47ce:	785b      	ldrb	r3, [r3, #1]
   c47d0:	2b30      	cmp	r3, #48	; 0x30
   c47d2:	d0f9      	beq.n	c47c8 <_strtod_l+0x130>
   c47d4:	2b00      	cmp	r3, #0
   c47d6:	d0a3      	beq.n	c4720 <_strtod_l+0x88>
   c47d8:	2301      	movs	r3, #1
   c47da:	f04f 0900 	mov.w	r9, #0
   c47de:	9304      	str	r3, [sp, #16]
   c47e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47e2:	9308      	str	r3, [sp, #32]
   c47e4:	f8cd 901c 	str.w	r9, [sp, #28]
   c47e8:	464f      	mov	r7, r9
   c47ea:	220a      	movs	r2, #10
   c47ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c47ee:	7806      	ldrb	r6, [r0, #0]
   c47f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c47f4:	b2d9      	uxtb	r1, r3
   c47f6:	2909      	cmp	r1, #9
   c47f8:	d92a      	bls.n	c4850 <_strtod_l+0x1b8>
   c47fa:	9905      	ldr	r1, [sp, #20]
   c47fc:	462a      	mov	r2, r5
   c47fe:	f7ff fed1 	bl	c45a4 <strncmp>
   c4802:	b398      	cbz	r0, c486c <_strtod_l+0x1d4>
   c4804:	2000      	movs	r0, #0
   c4806:	4632      	mov	r2, r6
   c4808:	463d      	mov	r5, r7
   c480a:	9005      	str	r0, [sp, #20]
   c480c:	4603      	mov	r3, r0
   c480e:	2a65      	cmp	r2, #101	; 0x65
   c4810:	d001      	beq.n	c4816 <_strtod_l+0x17e>
   c4812:	2a45      	cmp	r2, #69	; 0x45
   c4814:	d118      	bne.n	c4848 <_strtod_l+0x1b0>
   c4816:	b91d      	cbnz	r5, c4820 <_strtod_l+0x188>
   c4818:	9a04      	ldr	r2, [sp, #16]
   c481a:	4302      	orrs	r2, r0
   c481c:	d09e      	beq.n	c475c <_strtod_l+0xc4>
   c481e:	2500      	movs	r5, #0
   c4820:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4824:	f108 0201 	add.w	r2, r8, #1
   c4828:	9217      	str	r2, [sp, #92]	; 0x5c
   c482a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c482e:	2a2b      	cmp	r2, #43	; 0x2b
   c4830:	d075      	beq.n	c491e <_strtod_l+0x286>
   c4832:	2a2d      	cmp	r2, #45	; 0x2d
   c4834:	d07b      	beq.n	c492e <_strtod_l+0x296>
   c4836:	f04f 0c00 	mov.w	ip, #0
   c483a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c483e:	2909      	cmp	r1, #9
   c4840:	f240 8082 	bls.w	c4948 <_strtod_l+0x2b0>
   c4844:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4848:	2600      	movs	r6, #0
   c484a:	e09d      	b.n	c4988 <_strtod_l+0x2f0>
   c484c:	2300      	movs	r3, #0
   c484e:	e7c4      	b.n	c47da <_strtod_l+0x142>
   c4850:	2f08      	cmp	r7, #8
   c4852:	bfd8      	it	le
   c4854:	9907      	ldrle	r1, [sp, #28]
   c4856:	f100 0001 	add.w	r0, r0, #1
   c485a:	bfda      	itte	le
   c485c:	fb02 3301 	mlale	r3, r2, r1, r3
   c4860:	9307      	strle	r3, [sp, #28]
   c4862:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4866:	3701      	adds	r7, #1
   c4868:	9017      	str	r0, [sp, #92]	; 0x5c
   c486a:	e7bf      	b.n	c47ec <_strtod_l+0x154>
   c486c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c486e:	195a      	adds	r2, r3, r5
   c4870:	9217      	str	r2, [sp, #92]	; 0x5c
   c4872:	5d5a      	ldrb	r2, [r3, r5]
   c4874:	2f00      	cmp	r7, #0
   c4876:	d037      	beq.n	c48e8 <_strtod_l+0x250>
   c4878:	9005      	str	r0, [sp, #20]
   c487a:	463d      	mov	r5, r7
   c487c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c4880:	2b09      	cmp	r3, #9
   c4882:	d912      	bls.n	c48aa <_strtod_l+0x212>
   c4884:	2301      	movs	r3, #1
   c4886:	e7c2      	b.n	c480e <_strtod_l+0x176>
   c4888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c488a:	1c5a      	adds	r2, r3, #1
   c488c:	9217      	str	r2, [sp, #92]	; 0x5c
   c488e:	785a      	ldrb	r2, [r3, #1]
   c4890:	3001      	adds	r0, #1
   c4892:	2a30      	cmp	r2, #48	; 0x30
   c4894:	d0f8      	beq.n	c4888 <_strtod_l+0x1f0>
   c4896:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c489a:	2b08      	cmp	r3, #8
   c489c:	f200 84d9 	bhi.w	c5252 <_strtod_l+0xbba>
   c48a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c48a2:	9005      	str	r0, [sp, #20]
   c48a4:	2000      	movs	r0, #0
   c48a6:	9308      	str	r3, [sp, #32]
   c48a8:	4605      	mov	r5, r0
   c48aa:	3a30      	subs	r2, #48	; 0x30
   c48ac:	f100 0301 	add.w	r3, r0, #1
   c48b0:	d014      	beq.n	c48dc <_strtod_l+0x244>
   c48b2:	9905      	ldr	r1, [sp, #20]
   c48b4:	4419      	add	r1, r3
   c48b6:	9105      	str	r1, [sp, #20]
   c48b8:	462b      	mov	r3, r5
   c48ba:	eb00 0e05 	add.w	lr, r0, r5
   c48be:	210a      	movs	r1, #10
   c48c0:	4573      	cmp	r3, lr
   c48c2:	d113      	bne.n	c48ec <_strtod_l+0x254>
   c48c4:	182b      	adds	r3, r5, r0
   c48c6:	2b08      	cmp	r3, #8
   c48c8:	f105 0501 	add.w	r5, r5, #1
   c48cc:	4405      	add	r5, r0
   c48ce:	dc1c      	bgt.n	c490a <_strtod_l+0x272>
   c48d0:	9907      	ldr	r1, [sp, #28]
   c48d2:	230a      	movs	r3, #10
   c48d4:	fb03 2301 	mla	r3, r3, r1, r2
   c48d8:	9307      	str	r3, [sp, #28]
   c48da:	2300      	movs	r3, #0
   c48dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c48de:	1c51      	adds	r1, r2, #1
   c48e0:	9117      	str	r1, [sp, #92]	; 0x5c
   c48e2:	7852      	ldrb	r2, [r2, #1]
   c48e4:	4618      	mov	r0, r3
   c48e6:	e7c9      	b.n	c487c <_strtod_l+0x1e4>
   c48e8:	4638      	mov	r0, r7
   c48ea:	e7d2      	b.n	c4892 <_strtod_l+0x1fa>
   c48ec:	2b08      	cmp	r3, #8
   c48ee:	dc04      	bgt.n	c48fa <_strtod_l+0x262>
   c48f0:	9e07      	ldr	r6, [sp, #28]
   c48f2:	434e      	muls	r6, r1
   c48f4:	9607      	str	r6, [sp, #28]
   c48f6:	3301      	adds	r3, #1
   c48f8:	e7e2      	b.n	c48c0 <_strtod_l+0x228>
   c48fa:	f103 0c01 	add.w	ip, r3, #1
   c48fe:	f1bc 0f10 	cmp.w	ip, #16
   c4902:	bfd8      	it	le
   c4904:	fb01 f909 	mulle.w	r9, r1, r9
   c4908:	e7f5      	b.n	c48f6 <_strtod_l+0x25e>
   c490a:	2d10      	cmp	r5, #16
   c490c:	bfdc      	itt	le
   c490e:	230a      	movle	r3, #10
   c4910:	fb03 2909 	mlale	r9, r3, r9, r2
   c4914:	e7e1      	b.n	c48da <_strtod_l+0x242>
   c4916:	2300      	movs	r3, #0
   c4918:	9305      	str	r3, [sp, #20]
   c491a:	2301      	movs	r3, #1
   c491c:	e77c      	b.n	c4818 <_strtod_l+0x180>
   c491e:	f04f 0c00 	mov.w	ip, #0
   c4922:	f108 0202 	add.w	r2, r8, #2
   c4926:	9217      	str	r2, [sp, #92]	; 0x5c
   c4928:	f898 2002 	ldrb.w	r2, [r8, #2]
   c492c:	e785      	b.n	c483a <_strtod_l+0x1a2>
   c492e:	f04f 0c01 	mov.w	ip, #1
   c4932:	e7f6      	b.n	c4922 <_strtod_l+0x28a>
   c4934:	000c8748 	.word	0x000c8748
   c4938:	000c8560 	.word	0x000c8560
   c493c:	7ff00000 	.word	0x7ff00000
   c4940:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4942:	1c51      	adds	r1, r2, #1
   c4944:	9117      	str	r1, [sp, #92]	; 0x5c
   c4946:	7852      	ldrb	r2, [r2, #1]
   c4948:	2a30      	cmp	r2, #48	; 0x30
   c494a:	d0f9      	beq.n	c4940 <_strtod_l+0x2a8>
   c494c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4950:	2908      	cmp	r1, #8
   c4952:	f63f af79 	bhi.w	c4848 <_strtod_l+0x1b0>
   c4956:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c495a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c495c:	9206      	str	r2, [sp, #24]
   c495e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4960:	1c51      	adds	r1, r2, #1
   c4962:	9117      	str	r1, [sp, #92]	; 0x5c
   c4964:	7852      	ldrb	r2, [r2, #1]
   c4966:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c496a:	2e09      	cmp	r6, #9
   c496c:	d937      	bls.n	c49de <_strtod_l+0x346>
   c496e:	9e06      	ldr	r6, [sp, #24]
   c4970:	1b89      	subs	r1, r1, r6
   c4972:	2908      	cmp	r1, #8
   c4974:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4978:	dc02      	bgt.n	c4980 <_strtod_l+0x2e8>
   c497a:	4576      	cmp	r6, lr
   c497c:	bfa8      	it	ge
   c497e:	4676      	movge	r6, lr
   c4980:	f1bc 0f00 	cmp.w	ip, #0
   c4984:	d000      	beq.n	c4988 <_strtod_l+0x2f0>
   c4986:	4276      	negs	r6, r6
   c4988:	2d00      	cmp	r5, #0
   c498a:	d14d      	bne.n	c4a28 <_strtod_l+0x390>
   c498c:	9904      	ldr	r1, [sp, #16]
   c498e:	4301      	orrs	r1, r0
   c4990:	f47f aec6 	bne.w	c4720 <_strtod_l+0x88>
   c4994:	2b00      	cmp	r3, #0
   c4996:	f47f aee1 	bne.w	c475c <_strtod_l+0xc4>
   c499a:	2a69      	cmp	r2, #105	; 0x69
   c499c:	d027      	beq.n	c49ee <_strtod_l+0x356>
   c499e:	dc24      	bgt.n	c49ea <_strtod_l+0x352>
   c49a0:	2a49      	cmp	r2, #73	; 0x49
   c49a2:	d024      	beq.n	c49ee <_strtod_l+0x356>
   c49a4:	2a4e      	cmp	r2, #78	; 0x4e
   c49a6:	f47f aed9 	bne.w	c475c <_strtod_l+0xc4>
   c49aa:	499f      	ldr	r1, [pc, #636]	; (c4c28 <_strtod_l+0x590>)
   c49ac:	a817      	add	r0, sp, #92	; 0x5c
   c49ae:	f001 f833 	bl	c5a18 <__match>
   c49b2:	2800      	cmp	r0, #0
   c49b4:	f43f aed2 	beq.w	c475c <_strtod_l+0xc4>
   c49b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49ba:	781b      	ldrb	r3, [r3, #0]
   c49bc:	2b28      	cmp	r3, #40	; 0x28
   c49be:	d12d      	bne.n	c4a1c <_strtod_l+0x384>
   c49c0:	499a      	ldr	r1, [pc, #616]	; (c4c2c <_strtod_l+0x594>)
   c49c2:	aa1a      	add	r2, sp, #104	; 0x68
   c49c4:	a817      	add	r0, sp, #92	; 0x5c
   c49c6:	f001 f83b 	bl	c5a40 <__hexnan>
   c49ca:	2805      	cmp	r0, #5
   c49cc:	d126      	bne.n	c4a1c <_strtod_l+0x384>
   c49ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c49d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c49d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c49d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c49dc:	e6a0      	b.n	c4720 <_strtod_l+0x88>
   c49de:	210a      	movs	r1, #10
   c49e0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c49e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c49e8:	e7b9      	b.n	c495e <_strtod_l+0x2c6>
   c49ea:	2a6e      	cmp	r2, #110	; 0x6e
   c49ec:	e7db      	b.n	c49a6 <_strtod_l+0x30e>
   c49ee:	4990      	ldr	r1, [pc, #576]	; (c4c30 <_strtod_l+0x598>)
   c49f0:	a817      	add	r0, sp, #92	; 0x5c
   c49f2:	f001 f811 	bl	c5a18 <__match>
   c49f6:	2800      	cmp	r0, #0
   c49f8:	f43f aeb0 	beq.w	c475c <_strtod_l+0xc4>
   c49fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49fe:	498d      	ldr	r1, [pc, #564]	; (c4c34 <_strtod_l+0x59c>)
   c4a00:	3b01      	subs	r3, #1
   c4a02:	a817      	add	r0, sp, #92	; 0x5c
   c4a04:	9317      	str	r3, [sp, #92]	; 0x5c
   c4a06:	f001 f807 	bl	c5a18 <__match>
   c4a0a:	b910      	cbnz	r0, c4a12 <_strtod_l+0x37a>
   c4a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a0e:	3301      	adds	r3, #1
   c4a10:	9317      	str	r3, [sp, #92]	; 0x5c
   c4a12:	f8df b230 	ldr.w	fp, [pc, #560]	; c4c44 <_strtod_l+0x5ac>
   c4a16:	f04f 0a00 	mov.w	sl, #0
   c4a1a:	e681      	b.n	c4720 <_strtod_l+0x88>
   c4a1c:	4886      	ldr	r0, [pc, #536]	; (c4c38 <_strtod_l+0x5a0>)
   c4a1e:	f001 fd93 	bl	c6548 <nan>
   c4a22:	ec5b ab10 	vmov	sl, fp, d0
   c4a26:	e67b      	b.n	c4720 <_strtod_l+0x88>
   c4a28:	9b05      	ldr	r3, [sp, #20]
   c4a2a:	9807      	ldr	r0, [sp, #28]
   c4a2c:	1af3      	subs	r3, r6, r3
   c4a2e:	2f00      	cmp	r7, #0
   c4a30:	bf08      	it	eq
   c4a32:	462f      	moveq	r7, r5
   c4a34:	2d10      	cmp	r5, #16
   c4a36:	9306      	str	r3, [sp, #24]
   c4a38:	46a8      	mov	r8, r5
   c4a3a:	bfa8      	it	ge
   c4a3c:	f04f 0810 	movge.w	r8, #16
   c4a40:	f7ff f8dc 	bl	c3bfc <__aeabi_ui2d>
   c4a44:	2d09      	cmp	r5, #9
   c4a46:	4682      	mov	sl, r0
   c4a48:	468b      	mov	fp, r1
   c4a4a:	dd13      	ble.n	c4a74 <_strtod_l+0x3dc>
   c4a4c:	4b7b      	ldr	r3, [pc, #492]	; (c4c3c <_strtod_l+0x5a4>)
   c4a4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4a52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4a56:	f7ff f94b 	bl	c3cf0 <__aeabi_dmul>
   c4a5a:	4682      	mov	sl, r0
   c4a5c:	4648      	mov	r0, r9
   c4a5e:	468b      	mov	fp, r1
   c4a60:	f7ff f8cc 	bl	c3bfc <__aeabi_ui2d>
   c4a64:	4602      	mov	r2, r0
   c4a66:	460b      	mov	r3, r1
   c4a68:	4650      	mov	r0, sl
   c4a6a:	4659      	mov	r1, fp
   c4a6c:	f7fe ff8a 	bl	c3984 <__adddf3>
   c4a70:	4682      	mov	sl, r0
   c4a72:	468b      	mov	fp, r1
   c4a74:	2d0f      	cmp	r5, #15
   c4a76:	dc38      	bgt.n	c4aea <_strtod_l+0x452>
   c4a78:	9b06      	ldr	r3, [sp, #24]
   c4a7a:	2b00      	cmp	r3, #0
   c4a7c:	f43f ae50 	beq.w	c4720 <_strtod_l+0x88>
   c4a80:	dd24      	ble.n	c4acc <_strtod_l+0x434>
   c4a82:	2b16      	cmp	r3, #22
   c4a84:	dc0b      	bgt.n	c4a9e <_strtod_l+0x406>
   c4a86:	496d      	ldr	r1, [pc, #436]	; (c4c3c <_strtod_l+0x5a4>)
   c4a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4a90:	4652      	mov	r2, sl
   c4a92:	465b      	mov	r3, fp
   c4a94:	f7ff f92c 	bl	c3cf0 <__aeabi_dmul>
   c4a98:	4682      	mov	sl, r0
   c4a9a:	468b      	mov	fp, r1
   c4a9c:	e640      	b.n	c4720 <_strtod_l+0x88>
   c4a9e:	9a06      	ldr	r2, [sp, #24]
   c4aa0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4aa4:	4293      	cmp	r3, r2
   c4aa6:	db20      	blt.n	c4aea <_strtod_l+0x452>
   c4aa8:	4c64      	ldr	r4, [pc, #400]	; (c4c3c <_strtod_l+0x5a4>)
   c4aaa:	f1c5 050f 	rsb	r5, r5, #15
   c4aae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4ab2:	4652      	mov	r2, sl
   c4ab4:	465b      	mov	r3, fp
   c4ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4aba:	f7ff f919 	bl	c3cf0 <__aeabi_dmul>
   c4abe:	9b06      	ldr	r3, [sp, #24]
   c4ac0:	1b5d      	subs	r5, r3, r5
   c4ac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4ac6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4aca:	e7e3      	b.n	c4a94 <_strtod_l+0x3fc>
   c4acc:	9b06      	ldr	r3, [sp, #24]
   c4ace:	3316      	adds	r3, #22
   c4ad0:	db0b      	blt.n	c4aea <_strtod_l+0x452>
   c4ad2:	9b05      	ldr	r3, [sp, #20]
   c4ad4:	1b9e      	subs	r6, r3, r6
   c4ad6:	4b59      	ldr	r3, [pc, #356]	; (c4c3c <_strtod_l+0x5a4>)
   c4ad8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4adc:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4ae0:	4650      	mov	r0, sl
   c4ae2:	4659      	mov	r1, fp
   c4ae4:	f7ff fa2e 	bl	c3f44 <__aeabi_ddiv>
   c4ae8:	e7d6      	b.n	c4a98 <_strtod_l+0x400>
   c4aea:	9b06      	ldr	r3, [sp, #24]
   c4aec:	eba5 0808 	sub.w	r8, r5, r8
   c4af0:	4498      	add	r8, r3
   c4af2:	f1b8 0f00 	cmp.w	r8, #0
   c4af6:	dd74      	ble.n	c4be2 <_strtod_l+0x54a>
   c4af8:	f018 030f 	ands.w	r3, r8, #15
   c4afc:	d00a      	beq.n	c4b14 <_strtod_l+0x47c>
   c4afe:	494f      	ldr	r1, [pc, #316]	; (c4c3c <_strtod_l+0x5a4>)
   c4b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4b04:	4652      	mov	r2, sl
   c4b06:	465b      	mov	r3, fp
   c4b08:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4b0c:	f7ff f8f0 	bl	c3cf0 <__aeabi_dmul>
   c4b10:	4682      	mov	sl, r0
   c4b12:	468b      	mov	fp, r1
   c4b14:	f038 080f 	bics.w	r8, r8, #15
   c4b18:	d04f      	beq.n	c4bba <_strtod_l+0x522>
   c4b1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4b1e:	dd22      	ble.n	c4b66 <_strtod_l+0x4ce>
   c4b20:	2500      	movs	r5, #0
   c4b22:	462e      	mov	r6, r5
   c4b24:	9507      	str	r5, [sp, #28]
   c4b26:	9505      	str	r5, [sp, #20]
   c4b28:	2322      	movs	r3, #34	; 0x22
   c4b2a:	f8df b118 	ldr.w	fp, [pc, #280]	; c4c44 <_strtod_l+0x5ac>
   c4b2e:	6023      	str	r3, [r4, #0]
   c4b30:	f04f 0a00 	mov.w	sl, #0
   c4b34:	9b07      	ldr	r3, [sp, #28]
   c4b36:	2b00      	cmp	r3, #0
   c4b38:	f43f adf2 	beq.w	c4720 <_strtod_l+0x88>
   c4b3c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4b3e:	4620      	mov	r0, r4
   c4b40:	f001 f870 	bl	c5c24 <_Bfree>
   c4b44:	9905      	ldr	r1, [sp, #20]
   c4b46:	4620      	mov	r0, r4
   c4b48:	f001 f86c 	bl	c5c24 <_Bfree>
   c4b4c:	4631      	mov	r1, r6
   c4b4e:	4620      	mov	r0, r4
   c4b50:	f001 f868 	bl	c5c24 <_Bfree>
   c4b54:	9907      	ldr	r1, [sp, #28]
   c4b56:	4620      	mov	r0, r4
   c4b58:	f001 f864 	bl	c5c24 <_Bfree>
   c4b5c:	4629      	mov	r1, r5
   c4b5e:	4620      	mov	r0, r4
   c4b60:	f001 f860 	bl	c5c24 <_Bfree>
   c4b64:	e5dc      	b.n	c4720 <_strtod_l+0x88>
   c4b66:	4b36      	ldr	r3, [pc, #216]	; (c4c40 <_strtod_l+0x5a8>)
   c4b68:	9304      	str	r3, [sp, #16]
   c4b6a:	2300      	movs	r3, #0
   c4b6c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4b70:	4650      	mov	r0, sl
   c4b72:	4659      	mov	r1, fp
   c4b74:	4699      	mov	r9, r3
   c4b76:	f1b8 0f01 	cmp.w	r8, #1
   c4b7a:	dc21      	bgt.n	c4bc0 <_strtod_l+0x528>
   c4b7c:	b10b      	cbz	r3, c4b82 <_strtod_l+0x4ea>
   c4b7e:	4682      	mov	sl, r0
   c4b80:	468b      	mov	fp, r1
   c4b82:	4b2f      	ldr	r3, [pc, #188]	; (c4c40 <_strtod_l+0x5a8>)
   c4b84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4b88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4b8c:	4652      	mov	r2, sl
   c4b8e:	465b      	mov	r3, fp
   c4b90:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4b94:	f7ff f8ac 	bl	c3cf0 <__aeabi_dmul>
   c4b98:	4b2a      	ldr	r3, [pc, #168]	; (c4c44 <_strtod_l+0x5ac>)
   c4b9a:	460a      	mov	r2, r1
   c4b9c:	400b      	ands	r3, r1
   c4b9e:	492a      	ldr	r1, [pc, #168]	; (c4c48 <_strtod_l+0x5b0>)
   c4ba0:	428b      	cmp	r3, r1
   c4ba2:	4682      	mov	sl, r0
   c4ba4:	d8bc      	bhi.n	c4b20 <_strtod_l+0x488>
   c4ba6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4baa:	428b      	cmp	r3, r1
   c4bac:	bf86      	itte	hi
   c4bae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4c4c <_strtod_l+0x5b4>
   c4bb2:	f04f 3aff 	movhi.w	sl, #4294967295
   c4bb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4bba:	2300      	movs	r3, #0
   c4bbc:	9304      	str	r3, [sp, #16]
   c4bbe:	e084      	b.n	c4cca <_strtod_l+0x632>
   c4bc0:	f018 0f01 	tst.w	r8, #1
   c4bc4:	d005      	beq.n	c4bd2 <_strtod_l+0x53a>
   c4bc6:	9b04      	ldr	r3, [sp, #16]
   c4bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4bcc:	f7ff f890 	bl	c3cf0 <__aeabi_dmul>
   c4bd0:	2301      	movs	r3, #1
   c4bd2:	9a04      	ldr	r2, [sp, #16]
   c4bd4:	3208      	adds	r2, #8
   c4bd6:	f109 0901 	add.w	r9, r9, #1
   c4bda:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4bde:	9204      	str	r2, [sp, #16]
   c4be0:	e7c9      	b.n	c4b76 <_strtod_l+0x4de>
   c4be2:	d0ea      	beq.n	c4bba <_strtod_l+0x522>
   c4be4:	f1c8 0800 	rsb	r8, r8, #0
   c4be8:	f018 020f 	ands.w	r2, r8, #15
   c4bec:	d00a      	beq.n	c4c04 <_strtod_l+0x56c>
   c4bee:	4b13      	ldr	r3, [pc, #76]	; (c4c3c <_strtod_l+0x5a4>)
   c4bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4bf4:	4650      	mov	r0, sl
   c4bf6:	4659      	mov	r1, fp
   c4bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4bfc:	f7ff f9a2 	bl	c3f44 <__aeabi_ddiv>
   c4c00:	4682      	mov	sl, r0
   c4c02:	468b      	mov	fp, r1
   c4c04:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4c08:	d0d7      	beq.n	c4bba <_strtod_l+0x522>
   c4c0a:	f1b8 0f1f 	cmp.w	r8, #31
   c4c0e:	dd1f      	ble.n	c4c50 <_strtod_l+0x5b8>
   c4c10:	2500      	movs	r5, #0
   c4c12:	462e      	mov	r6, r5
   c4c14:	9507      	str	r5, [sp, #28]
   c4c16:	9505      	str	r5, [sp, #20]
   c4c18:	2322      	movs	r3, #34	; 0x22
   c4c1a:	f04f 0a00 	mov.w	sl, #0
   c4c1e:	f04f 0b00 	mov.w	fp, #0
   c4c22:	6023      	str	r3, [r4, #0]
   c4c24:	e786      	b.n	c4b34 <_strtod_l+0x49c>
   c4c26:	bf00      	nop
   c4c28:	000c855d 	.word	0x000c855d
   c4c2c:	000c8574 	.word	0x000c8574
   c4c30:	000c8554 	.word	0x000c8554
   c4c34:	000c8557 	.word	0x000c8557
   c4c38:	000c7d6c 	.word	0x000c7d6c
   c4c3c:	000c8800 	.word	0x000c8800
   c4c40:	000c87d8 	.word	0x000c87d8
   c4c44:	7ff00000 	.word	0x7ff00000
   c4c48:	7ca00000 	.word	0x7ca00000
   c4c4c:	7fefffff 	.word	0x7fefffff
   c4c50:	f018 0310 	ands.w	r3, r8, #16
   c4c54:	bf18      	it	ne
   c4c56:	236a      	movne	r3, #106	; 0x6a
   c4c58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c5008 <_strtod_l+0x970>
   c4c5c:	9304      	str	r3, [sp, #16]
   c4c5e:	4650      	mov	r0, sl
   c4c60:	4659      	mov	r1, fp
   c4c62:	2300      	movs	r3, #0
   c4c64:	f018 0f01 	tst.w	r8, #1
   c4c68:	d004      	beq.n	c4c74 <_strtod_l+0x5dc>
   c4c6a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4c6e:	f7ff f83f 	bl	c3cf0 <__aeabi_dmul>
   c4c72:	2301      	movs	r3, #1
   c4c74:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4c78:	f109 0908 	add.w	r9, r9, #8
   c4c7c:	d1f2      	bne.n	c4c64 <_strtod_l+0x5cc>
   c4c7e:	b10b      	cbz	r3, c4c84 <_strtod_l+0x5ec>
   c4c80:	4682      	mov	sl, r0
   c4c82:	468b      	mov	fp, r1
   c4c84:	9b04      	ldr	r3, [sp, #16]
   c4c86:	b1c3      	cbz	r3, c4cba <_strtod_l+0x622>
   c4c88:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4c8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4c90:	2b00      	cmp	r3, #0
   c4c92:	4659      	mov	r1, fp
   c4c94:	dd11      	ble.n	c4cba <_strtod_l+0x622>
   c4c96:	2b1f      	cmp	r3, #31
   c4c98:	f340 8124 	ble.w	c4ee4 <_strtod_l+0x84c>
   c4c9c:	2b34      	cmp	r3, #52	; 0x34
   c4c9e:	bfde      	ittt	le
   c4ca0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4ca4:	f04f 33ff 	movle.w	r3, #4294967295
   c4ca8:	fa03 f202 	lslle.w	r2, r3, r2
   c4cac:	f04f 0a00 	mov.w	sl, #0
   c4cb0:	bfcc      	ite	gt
   c4cb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4cb6:	ea02 0b01 	andle.w	fp, r2, r1
   c4cba:	2200      	movs	r2, #0
   c4cbc:	2300      	movs	r3, #0
   c4cbe:	4650      	mov	r0, sl
   c4cc0:	4659      	mov	r1, fp
   c4cc2:	f7ff fa7d 	bl	c41c0 <__aeabi_dcmpeq>
   c4cc6:	2800      	cmp	r0, #0
   c4cc8:	d1a2      	bne.n	c4c10 <_strtod_l+0x578>
   c4cca:	9b07      	ldr	r3, [sp, #28]
   c4ccc:	9300      	str	r3, [sp, #0]
   c4cce:	9908      	ldr	r1, [sp, #32]
   c4cd0:	462b      	mov	r3, r5
   c4cd2:	463a      	mov	r2, r7
   c4cd4:	4620      	mov	r0, r4
   c4cd6:	f001 f80d 	bl	c5cf4 <__s2b>
   c4cda:	9007      	str	r0, [sp, #28]
   c4cdc:	2800      	cmp	r0, #0
   c4cde:	f43f af1f 	beq.w	c4b20 <_strtod_l+0x488>
   c4ce2:	9b05      	ldr	r3, [sp, #20]
   c4ce4:	1b9e      	subs	r6, r3, r6
   c4ce6:	9b06      	ldr	r3, [sp, #24]
   c4ce8:	2b00      	cmp	r3, #0
   c4cea:	bfb4      	ite	lt
   c4cec:	4633      	movlt	r3, r6
   c4cee:	2300      	movge	r3, #0
   c4cf0:	930c      	str	r3, [sp, #48]	; 0x30
   c4cf2:	9b06      	ldr	r3, [sp, #24]
   c4cf4:	2500      	movs	r5, #0
   c4cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4cfa:	9312      	str	r3, [sp, #72]	; 0x48
   c4cfc:	462e      	mov	r6, r5
   c4cfe:	9b07      	ldr	r3, [sp, #28]
   c4d00:	4620      	mov	r0, r4
   c4d02:	6859      	ldr	r1, [r3, #4]
   c4d04:	f000 ff4e 	bl	c5ba4 <_Balloc>
   c4d08:	9005      	str	r0, [sp, #20]
   c4d0a:	2800      	cmp	r0, #0
   c4d0c:	f43f af0c 	beq.w	c4b28 <_strtod_l+0x490>
   c4d10:	9b07      	ldr	r3, [sp, #28]
   c4d12:	691a      	ldr	r2, [r3, #16]
   c4d14:	3202      	adds	r2, #2
   c4d16:	f103 010c 	add.w	r1, r3, #12
   c4d1a:	0092      	lsls	r2, r2, #2
   c4d1c:	300c      	adds	r0, #12
   c4d1e:	f7ff fb73 	bl	c4408 <memcpy>
   c4d22:	ec4b ab10 	vmov	d0, sl, fp
   c4d26:	aa1a      	add	r2, sp, #104	; 0x68
   c4d28:	a919      	add	r1, sp, #100	; 0x64
   c4d2a:	4620      	mov	r0, r4
   c4d2c:	f001 fb28 	bl	c6380 <__d2b>
   c4d30:	ec4b ab18 	vmov	d8, sl, fp
   c4d34:	9018      	str	r0, [sp, #96]	; 0x60
   c4d36:	2800      	cmp	r0, #0
   c4d38:	f43f aef6 	beq.w	c4b28 <_strtod_l+0x490>
   c4d3c:	2101      	movs	r1, #1
   c4d3e:	4620      	mov	r0, r4
   c4d40:	f001 f872 	bl	c5e28 <__i2b>
   c4d44:	4606      	mov	r6, r0
   c4d46:	2800      	cmp	r0, #0
   c4d48:	f43f aeee 	beq.w	c4b28 <_strtod_l+0x490>
   c4d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4d4e:	9904      	ldr	r1, [sp, #16]
   c4d50:	2b00      	cmp	r3, #0
   c4d52:	bfab      	itete	ge
   c4d54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4d56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4d58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4d5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4d5e:	bfac      	ite	ge
   c4d60:	eb03 0902 	addge.w	r9, r3, r2
   c4d64:	1ad7      	sublt	r7, r2, r3
   c4d66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4d68:	eba3 0801 	sub.w	r8, r3, r1
   c4d6c:	4490      	add	r8, r2
   c4d6e:	4ba1      	ldr	r3, [pc, #644]	; (c4ff4 <_strtod_l+0x95c>)
   c4d70:	f108 38ff 	add.w	r8, r8, #4294967295
   c4d74:	4598      	cmp	r8, r3
   c4d76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4d7a:	f280 80c7 	bge.w	c4f0c <_strtod_l+0x874>
   c4d7e:	eba3 0308 	sub.w	r3, r3, r8
   c4d82:	2b1f      	cmp	r3, #31
   c4d84:	eba2 0203 	sub.w	r2, r2, r3
   c4d88:	f04f 0101 	mov.w	r1, #1
   c4d8c:	f300 80b1 	bgt.w	c4ef2 <_strtod_l+0x85a>
   c4d90:	fa01 f303 	lsl.w	r3, r1, r3
   c4d94:	930d      	str	r3, [sp, #52]	; 0x34
   c4d96:	2300      	movs	r3, #0
   c4d98:	9308      	str	r3, [sp, #32]
   c4d9a:	eb09 0802 	add.w	r8, r9, r2
   c4d9e:	9b04      	ldr	r3, [sp, #16]
   c4da0:	45c1      	cmp	r9, r8
   c4da2:	4417      	add	r7, r2
   c4da4:	441f      	add	r7, r3
   c4da6:	464b      	mov	r3, r9
   c4da8:	bfa8      	it	ge
   c4daa:	4643      	movge	r3, r8
   c4dac:	42bb      	cmp	r3, r7
   c4dae:	bfa8      	it	ge
   c4db0:	463b      	movge	r3, r7
   c4db2:	2b00      	cmp	r3, #0
   c4db4:	bfc2      	ittt	gt
   c4db6:	eba8 0803 	subgt.w	r8, r8, r3
   c4dba:	1aff      	subgt	r7, r7, r3
   c4dbc:	eba9 0903 	subgt.w	r9, r9, r3
   c4dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4dc2:	2b00      	cmp	r3, #0
   c4dc4:	dd17      	ble.n	c4df6 <_strtod_l+0x75e>
   c4dc6:	4631      	mov	r1, r6
   c4dc8:	461a      	mov	r2, r3
   c4dca:	4620      	mov	r0, r4
   c4dcc:	f001 f8ec 	bl	c5fa8 <__pow5mult>
   c4dd0:	4606      	mov	r6, r0
   c4dd2:	2800      	cmp	r0, #0
   c4dd4:	f43f aea8 	beq.w	c4b28 <_strtod_l+0x490>
   c4dd8:	4601      	mov	r1, r0
   c4dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4ddc:	4620      	mov	r0, r4
   c4dde:	f001 f839 	bl	c5e54 <__multiply>
   c4de2:	900b      	str	r0, [sp, #44]	; 0x2c
   c4de4:	2800      	cmp	r0, #0
   c4de6:	f43f ae9f 	beq.w	c4b28 <_strtod_l+0x490>
   c4dea:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4dec:	4620      	mov	r0, r4
   c4dee:	f000 ff19 	bl	c5c24 <_Bfree>
   c4df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4df4:	9318      	str	r3, [sp, #96]	; 0x60
   c4df6:	f1b8 0f00 	cmp.w	r8, #0
   c4dfa:	f300 808c 	bgt.w	c4f16 <_strtod_l+0x87e>
   c4dfe:	9b06      	ldr	r3, [sp, #24]
   c4e00:	2b00      	cmp	r3, #0
   c4e02:	dd08      	ble.n	c4e16 <_strtod_l+0x77e>
   c4e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4e06:	9905      	ldr	r1, [sp, #20]
   c4e08:	4620      	mov	r0, r4
   c4e0a:	f001 f8cd 	bl	c5fa8 <__pow5mult>
   c4e0e:	9005      	str	r0, [sp, #20]
   c4e10:	2800      	cmp	r0, #0
   c4e12:	f43f ae89 	beq.w	c4b28 <_strtod_l+0x490>
   c4e16:	2f00      	cmp	r7, #0
   c4e18:	dd08      	ble.n	c4e2c <_strtod_l+0x794>
   c4e1a:	9905      	ldr	r1, [sp, #20]
   c4e1c:	463a      	mov	r2, r7
   c4e1e:	4620      	mov	r0, r4
   c4e20:	f001 f91c 	bl	c605c <__lshift>
   c4e24:	9005      	str	r0, [sp, #20]
   c4e26:	2800      	cmp	r0, #0
   c4e28:	f43f ae7e 	beq.w	c4b28 <_strtod_l+0x490>
   c4e2c:	f1b9 0f00 	cmp.w	r9, #0
   c4e30:	dd08      	ble.n	c4e44 <_strtod_l+0x7ac>
   c4e32:	4631      	mov	r1, r6
   c4e34:	464a      	mov	r2, r9
   c4e36:	4620      	mov	r0, r4
   c4e38:	f001 f910 	bl	c605c <__lshift>
   c4e3c:	4606      	mov	r6, r0
   c4e3e:	2800      	cmp	r0, #0
   c4e40:	f43f ae72 	beq.w	c4b28 <_strtod_l+0x490>
   c4e44:	9a05      	ldr	r2, [sp, #20]
   c4e46:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4e48:	4620      	mov	r0, r4
   c4e4a:	f001 f993 	bl	c6174 <__mdiff>
   c4e4e:	4605      	mov	r5, r0
   c4e50:	2800      	cmp	r0, #0
   c4e52:	f43f ae69 	beq.w	c4b28 <_strtod_l+0x490>
   c4e56:	68c3      	ldr	r3, [r0, #12]
   c4e58:	930b      	str	r3, [sp, #44]	; 0x2c
   c4e5a:	2300      	movs	r3, #0
   c4e5c:	60c3      	str	r3, [r0, #12]
   c4e5e:	4631      	mov	r1, r6
   c4e60:	f001 f96c 	bl	c613c <__mcmp>
   c4e64:	2800      	cmp	r0, #0
   c4e66:	da60      	bge.n	c4f2a <_strtod_l+0x892>
   c4e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4e6a:	ea53 030a 	orrs.w	r3, r3, sl
   c4e6e:	f040 8082 	bne.w	c4f76 <_strtod_l+0x8de>
   c4e72:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4e76:	2b00      	cmp	r3, #0
   c4e78:	d17d      	bne.n	c4f76 <_strtod_l+0x8de>
   c4e7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4e7e:	0d1b      	lsrs	r3, r3, #20
   c4e80:	051b      	lsls	r3, r3, #20
   c4e82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c4e86:	d976      	bls.n	c4f76 <_strtod_l+0x8de>
   c4e88:	696b      	ldr	r3, [r5, #20]
   c4e8a:	b913      	cbnz	r3, c4e92 <_strtod_l+0x7fa>
   c4e8c:	692b      	ldr	r3, [r5, #16]
   c4e8e:	2b01      	cmp	r3, #1
   c4e90:	dd71      	ble.n	c4f76 <_strtod_l+0x8de>
   c4e92:	4629      	mov	r1, r5
   c4e94:	2201      	movs	r2, #1
   c4e96:	4620      	mov	r0, r4
   c4e98:	f001 f8e0 	bl	c605c <__lshift>
   c4e9c:	4631      	mov	r1, r6
   c4e9e:	4605      	mov	r5, r0
   c4ea0:	f001 f94c 	bl	c613c <__mcmp>
   c4ea4:	2800      	cmp	r0, #0
   c4ea6:	dd66      	ble.n	c4f76 <_strtod_l+0x8de>
   c4ea8:	9904      	ldr	r1, [sp, #16]
   c4eaa:	4a53      	ldr	r2, [pc, #332]	; (c4ff8 <_strtod_l+0x960>)
   c4eac:	465b      	mov	r3, fp
   c4eae:	2900      	cmp	r1, #0
   c4eb0:	f000 8081 	beq.w	c4fb6 <_strtod_l+0x91e>
   c4eb4:	ea02 010b 	and.w	r1, r2, fp
   c4eb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4ebc:	dc7b      	bgt.n	c4fb6 <_strtod_l+0x91e>
   c4ebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c4ec2:	f77f aea9 	ble.w	c4c18 <_strtod_l+0x580>
   c4ec6:	4b4d      	ldr	r3, [pc, #308]	; (c4ffc <_strtod_l+0x964>)
   c4ec8:	4650      	mov	r0, sl
   c4eca:	4659      	mov	r1, fp
   c4ecc:	2200      	movs	r2, #0
   c4ece:	f7fe ff0f 	bl	c3cf0 <__aeabi_dmul>
   c4ed2:	460b      	mov	r3, r1
   c4ed4:	4303      	orrs	r3, r0
   c4ed6:	bf08      	it	eq
   c4ed8:	2322      	moveq	r3, #34	; 0x22
   c4eda:	4682      	mov	sl, r0
   c4edc:	468b      	mov	fp, r1
   c4ede:	bf08      	it	eq
   c4ee0:	6023      	streq	r3, [r4, #0]
   c4ee2:	e62b      	b.n	c4b3c <_strtod_l+0x4a4>
   c4ee4:	f04f 32ff 	mov.w	r2, #4294967295
   c4ee8:	fa02 f303 	lsl.w	r3, r2, r3
   c4eec:	ea03 0a0a 	and.w	sl, r3, sl
   c4ef0:	e6e3      	b.n	c4cba <_strtod_l+0x622>
   c4ef2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c4ef6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4efa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4efe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c4f02:	fa01 f308 	lsl.w	r3, r1, r8
   c4f06:	9308      	str	r3, [sp, #32]
   c4f08:	910d      	str	r1, [sp, #52]	; 0x34
   c4f0a:	e746      	b.n	c4d9a <_strtod_l+0x702>
   c4f0c:	2300      	movs	r3, #0
   c4f0e:	9308      	str	r3, [sp, #32]
   c4f10:	2301      	movs	r3, #1
   c4f12:	930d      	str	r3, [sp, #52]	; 0x34
   c4f14:	e741      	b.n	c4d9a <_strtod_l+0x702>
   c4f16:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4f18:	4642      	mov	r2, r8
   c4f1a:	4620      	mov	r0, r4
   c4f1c:	f001 f89e 	bl	c605c <__lshift>
   c4f20:	9018      	str	r0, [sp, #96]	; 0x60
   c4f22:	2800      	cmp	r0, #0
   c4f24:	f47f af6b 	bne.w	c4dfe <_strtod_l+0x766>
   c4f28:	e5fe      	b.n	c4b28 <_strtod_l+0x490>
   c4f2a:	465f      	mov	r7, fp
   c4f2c:	d16e      	bne.n	c500c <_strtod_l+0x974>
   c4f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4f34:	b342      	cbz	r2, c4f88 <_strtod_l+0x8f0>
   c4f36:	4a32      	ldr	r2, [pc, #200]	; (c5000 <_strtod_l+0x968>)
   c4f38:	4293      	cmp	r3, r2
   c4f3a:	d128      	bne.n	c4f8e <_strtod_l+0x8f6>
   c4f3c:	9b04      	ldr	r3, [sp, #16]
   c4f3e:	4651      	mov	r1, sl
   c4f40:	b1eb      	cbz	r3, c4f7e <_strtod_l+0x8e6>
   c4f42:	4b2d      	ldr	r3, [pc, #180]	; (c4ff8 <_strtod_l+0x960>)
   c4f44:	403b      	ands	r3, r7
   c4f46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4f4a:	f04f 32ff 	mov.w	r2, #4294967295
   c4f4e:	d819      	bhi.n	c4f84 <_strtod_l+0x8ec>
   c4f50:	0d1b      	lsrs	r3, r3, #20
   c4f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c4f56:	fa02 f303 	lsl.w	r3, r2, r3
   c4f5a:	4299      	cmp	r1, r3
   c4f5c:	d117      	bne.n	c4f8e <_strtod_l+0x8f6>
   c4f5e:	4b29      	ldr	r3, [pc, #164]	; (c5004 <_strtod_l+0x96c>)
   c4f60:	429f      	cmp	r7, r3
   c4f62:	d102      	bne.n	c4f6a <_strtod_l+0x8d2>
   c4f64:	3101      	adds	r1, #1
   c4f66:	f43f addf 	beq.w	c4b28 <_strtod_l+0x490>
   c4f6a:	4b23      	ldr	r3, [pc, #140]	; (c4ff8 <_strtod_l+0x960>)
   c4f6c:	403b      	ands	r3, r7
   c4f6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c4f72:	f04f 0a00 	mov.w	sl, #0
   c4f76:	9b04      	ldr	r3, [sp, #16]
   c4f78:	2b00      	cmp	r3, #0
   c4f7a:	d1a4      	bne.n	c4ec6 <_strtod_l+0x82e>
   c4f7c:	e5de      	b.n	c4b3c <_strtod_l+0x4a4>
   c4f7e:	f04f 33ff 	mov.w	r3, #4294967295
   c4f82:	e7ea      	b.n	c4f5a <_strtod_l+0x8c2>
   c4f84:	4613      	mov	r3, r2
   c4f86:	e7e8      	b.n	c4f5a <_strtod_l+0x8c2>
   c4f88:	ea53 030a 	orrs.w	r3, r3, sl
   c4f8c:	d08c      	beq.n	c4ea8 <_strtod_l+0x810>
   c4f8e:	9b08      	ldr	r3, [sp, #32]
   c4f90:	b1db      	cbz	r3, c4fca <_strtod_l+0x932>
   c4f92:	423b      	tst	r3, r7
   c4f94:	d0ef      	beq.n	c4f76 <_strtod_l+0x8de>
   c4f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f98:	9a04      	ldr	r2, [sp, #16]
   c4f9a:	4650      	mov	r0, sl
   c4f9c:	4659      	mov	r1, fp
   c4f9e:	b1c3      	cbz	r3, c4fd2 <_strtod_l+0x93a>
   c4fa0:	f7ff fb5d 	bl	c465e <sulp>
   c4fa4:	4602      	mov	r2, r0
   c4fa6:	460b      	mov	r3, r1
   c4fa8:	ec51 0b18 	vmov	r0, r1, d8
   c4fac:	f7fe fcea 	bl	c3984 <__adddf3>
   c4fb0:	4682      	mov	sl, r0
   c4fb2:	468b      	mov	fp, r1
   c4fb4:	e7df      	b.n	c4f76 <_strtod_l+0x8de>
   c4fb6:	4013      	ands	r3, r2
   c4fb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4fbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4fc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c4fc4:	f04f 3aff 	mov.w	sl, #4294967295
   c4fc8:	e7d5      	b.n	c4f76 <_strtod_l+0x8de>
   c4fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4fcc:	ea13 0f0a 	tst.w	r3, sl
   c4fd0:	e7e0      	b.n	c4f94 <_strtod_l+0x8fc>
   c4fd2:	f7ff fb44 	bl	c465e <sulp>
   c4fd6:	4602      	mov	r2, r0
   c4fd8:	460b      	mov	r3, r1
   c4fda:	ec51 0b18 	vmov	r0, r1, d8
   c4fde:	f7fe fccf 	bl	c3980 <__aeabi_dsub>
   c4fe2:	2200      	movs	r2, #0
   c4fe4:	2300      	movs	r3, #0
   c4fe6:	4682      	mov	sl, r0
   c4fe8:	468b      	mov	fp, r1
   c4fea:	f7ff f8e9 	bl	c41c0 <__aeabi_dcmpeq>
   c4fee:	2800      	cmp	r0, #0
   c4ff0:	d0c1      	beq.n	c4f76 <_strtod_l+0x8de>
   c4ff2:	e611      	b.n	c4c18 <_strtod_l+0x580>
   c4ff4:	fffffc02 	.word	0xfffffc02
   c4ff8:	7ff00000 	.word	0x7ff00000
   c4ffc:	39500000 	.word	0x39500000
   c5000:	000fffff 	.word	0x000fffff
   c5004:	7fefffff 	.word	0x7fefffff
   c5008:	000c8588 	.word	0x000c8588
   c500c:	4631      	mov	r1, r6
   c500e:	4628      	mov	r0, r5
   c5010:	f001 fa12 	bl	c6438 <__ratio>
   c5014:	ec59 8b10 	vmov	r8, r9, d0
   c5018:	ee10 0a10 	vmov	r0, s0
   c501c:	2200      	movs	r2, #0
   c501e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5022:	4649      	mov	r1, r9
   c5024:	f7ff f8e0 	bl	c41e8 <__aeabi_dcmple>
   c5028:	2800      	cmp	r0, #0
   c502a:	d07a      	beq.n	c5122 <_strtod_l+0xa8a>
   c502c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c502e:	2b00      	cmp	r3, #0
   c5030:	d04a      	beq.n	c50c8 <_strtod_l+0xa30>
   c5032:	4b95      	ldr	r3, [pc, #596]	; (c5288 <_strtod_l+0xbf0>)
   c5034:	2200      	movs	r2, #0
   c5036:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c503a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c5288 <_strtod_l+0xbf0>
   c503e:	f04f 0800 	mov.w	r8, #0
   c5042:	4b92      	ldr	r3, [pc, #584]	; (c528c <_strtod_l+0xbf4>)
   c5044:	403b      	ands	r3, r7
   c5046:	930d      	str	r3, [sp, #52]	; 0x34
   c5048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c504a:	4b91      	ldr	r3, [pc, #580]	; (c5290 <_strtod_l+0xbf8>)
   c504c:	429a      	cmp	r2, r3
   c504e:	f040 80b0 	bne.w	c51b2 <_strtod_l+0xb1a>
   c5052:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5056:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c505a:	ec4b ab10 	vmov	d0, sl, fp
   c505e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5062:	f001 f911 	bl	c6288 <__ulp>
   c5066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c506a:	ec53 2b10 	vmov	r2, r3, d0
   c506e:	f7fe fe3f 	bl	c3cf0 <__aeabi_dmul>
   c5072:	4652      	mov	r2, sl
   c5074:	465b      	mov	r3, fp
   c5076:	f7fe fc85 	bl	c3984 <__adddf3>
   c507a:	460b      	mov	r3, r1
   c507c:	4983      	ldr	r1, [pc, #524]	; (c528c <_strtod_l+0xbf4>)
   c507e:	4a85      	ldr	r2, [pc, #532]	; (c5294 <_strtod_l+0xbfc>)
   c5080:	4019      	ands	r1, r3
   c5082:	4291      	cmp	r1, r2
   c5084:	4682      	mov	sl, r0
   c5086:	d960      	bls.n	c514a <_strtod_l+0xab2>
   c5088:	ee18 3a90 	vmov	r3, s17
   c508c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c5090:	4293      	cmp	r3, r2
   c5092:	d104      	bne.n	c509e <_strtod_l+0xa06>
   c5094:	ee18 3a10 	vmov	r3, s16
   c5098:	3301      	adds	r3, #1
   c509a:	f43f ad45 	beq.w	c4b28 <_strtod_l+0x490>
   c509e:	f8df b200 	ldr.w	fp, [pc, #512]	; c52a0 <_strtod_l+0xc08>
   c50a2:	f04f 3aff 	mov.w	sl, #4294967295
   c50a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c50a8:	4620      	mov	r0, r4
   c50aa:	f000 fdbb 	bl	c5c24 <_Bfree>
   c50ae:	9905      	ldr	r1, [sp, #20]
   c50b0:	4620      	mov	r0, r4
   c50b2:	f000 fdb7 	bl	c5c24 <_Bfree>
   c50b6:	4631      	mov	r1, r6
   c50b8:	4620      	mov	r0, r4
   c50ba:	f000 fdb3 	bl	c5c24 <_Bfree>
   c50be:	4629      	mov	r1, r5
   c50c0:	4620      	mov	r0, r4
   c50c2:	f000 fdaf 	bl	c5c24 <_Bfree>
   c50c6:	e61a      	b.n	c4cfe <_strtod_l+0x666>
   c50c8:	f1ba 0f00 	cmp.w	sl, #0
   c50cc:	d11b      	bne.n	c5106 <_strtod_l+0xa6e>
   c50ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c50d2:	b9f3      	cbnz	r3, c5112 <_strtod_l+0xa7a>
   c50d4:	4b6c      	ldr	r3, [pc, #432]	; (c5288 <_strtod_l+0xbf0>)
   c50d6:	2200      	movs	r2, #0
   c50d8:	4640      	mov	r0, r8
   c50da:	4649      	mov	r1, r9
   c50dc:	f7ff f87a 	bl	c41d4 <__aeabi_dcmplt>
   c50e0:	b9d0      	cbnz	r0, c5118 <_strtod_l+0xa80>
   c50e2:	4640      	mov	r0, r8
   c50e4:	4649      	mov	r1, r9
   c50e6:	4b6c      	ldr	r3, [pc, #432]	; (c5298 <_strtod_l+0xc00>)
   c50e8:	2200      	movs	r2, #0
   c50ea:	f7fe fe01 	bl	c3cf0 <__aeabi_dmul>
   c50ee:	4680      	mov	r8, r0
   c50f0:	4689      	mov	r9, r1
   c50f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c50f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c50fa:	9315      	str	r3, [sp, #84]	; 0x54
   c50fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5100:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5104:	e79d      	b.n	c5042 <_strtod_l+0x9aa>
   c5106:	f1ba 0f01 	cmp.w	sl, #1
   c510a:	d102      	bne.n	c5112 <_strtod_l+0xa7a>
   c510c:	2f00      	cmp	r7, #0
   c510e:	f43f ad83 	beq.w	c4c18 <_strtod_l+0x580>
   c5112:	4b62      	ldr	r3, [pc, #392]	; (c529c <_strtod_l+0xc04>)
   c5114:	2200      	movs	r2, #0
   c5116:	e78e      	b.n	c5036 <_strtod_l+0x99e>
   c5118:	f8df 917c 	ldr.w	r9, [pc, #380]	; c5298 <_strtod_l+0xc00>
   c511c:	f04f 0800 	mov.w	r8, #0
   c5120:	e7e7      	b.n	c50f2 <_strtod_l+0xa5a>
   c5122:	4b5d      	ldr	r3, [pc, #372]	; (c5298 <_strtod_l+0xc00>)
   c5124:	4640      	mov	r0, r8
   c5126:	4649      	mov	r1, r9
   c5128:	2200      	movs	r2, #0
   c512a:	f7fe fde1 	bl	c3cf0 <__aeabi_dmul>
   c512e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5130:	4680      	mov	r8, r0
   c5132:	4689      	mov	r9, r1
   c5134:	b933      	cbnz	r3, c5144 <_strtod_l+0xaac>
   c5136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c513a:	900e      	str	r0, [sp, #56]	; 0x38
   c513c:	930f      	str	r3, [sp, #60]	; 0x3c
   c513e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c5142:	e7dd      	b.n	c5100 <_strtod_l+0xa68>
   c5144:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5148:	e7f9      	b.n	c513e <_strtod_l+0xaa6>
   c514a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c514e:	9b04      	ldr	r3, [sp, #16]
   c5150:	2b00      	cmp	r3, #0
   c5152:	d1a8      	bne.n	c50a6 <_strtod_l+0xa0e>
   c5154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c5158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c515a:	0d1b      	lsrs	r3, r3, #20
   c515c:	051b      	lsls	r3, r3, #20
   c515e:	429a      	cmp	r2, r3
   c5160:	d1a1      	bne.n	c50a6 <_strtod_l+0xa0e>
   c5162:	4640      	mov	r0, r8
   c5164:	4649      	mov	r1, r9
   c5166:	f001 fa05 	bl	c6574 <__aeabi_d2lz>
   c516a:	f7fe fd93 	bl	c3c94 <__aeabi_l2d>
   c516e:	4602      	mov	r2, r0
   c5170:	460b      	mov	r3, r1
   c5172:	4640      	mov	r0, r8
   c5174:	4649      	mov	r1, r9
   c5176:	f7fe fc03 	bl	c3980 <__aeabi_dsub>
   c517a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c517c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5180:	ea43 030a 	orr.w	r3, r3, sl
   c5184:	4313      	orrs	r3, r2
   c5186:	4680      	mov	r8, r0
   c5188:	4689      	mov	r9, r1
   c518a:	d055      	beq.n	c5238 <_strtod_l+0xba0>
   c518c:	a336      	add	r3, pc, #216	; (adr r3, c5268 <_strtod_l+0xbd0>)
   c518e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5192:	f7ff f81f 	bl	c41d4 <__aeabi_dcmplt>
   c5196:	2800      	cmp	r0, #0
   c5198:	f47f acd0 	bne.w	c4b3c <_strtod_l+0x4a4>
   c519c:	a334      	add	r3, pc, #208	; (adr r3, c5270 <_strtod_l+0xbd8>)
   c519e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c51a2:	4640      	mov	r0, r8
   c51a4:	4649      	mov	r1, r9
   c51a6:	f7ff f833 	bl	c4210 <__aeabi_dcmpgt>
   c51aa:	2800      	cmp	r0, #0
   c51ac:	f43f af7b 	beq.w	c50a6 <_strtod_l+0xa0e>
   c51b0:	e4c4      	b.n	c4b3c <_strtod_l+0x4a4>
   c51b2:	9b04      	ldr	r3, [sp, #16]
   c51b4:	b333      	cbz	r3, c5204 <_strtod_l+0xb6c>
   c51b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c51b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c51bc:	d822      	bhi.n	c5204 <_strtod_l+0xb6c>
   c51be:	a32e      	add	r3, pc, #184	; (adr r3, c5278 <_strtod_l+0xbe0>)
   c51c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c51c4:	4640      	mov	r0, r8
   c51c6:	4649      	mov	r1, r9
   c51c8:	f7ff f80e 	bl	c41e8 <__aeabi_dcmple>
   c51cc:	b1a0      	cbz	r0, c51f8 <_strtod_l+0xb60>
   c51ce:	4649      	mov	r1, r9
   c51d0:	4640      	mov	r0, r8
   c51d2:	f7ff f865 	bl	c42a0 <__aeabi_d2uiz>
   c51d6:	2801      	cmp	r0, #1
   c51d8:	bf38      	it	cc
   c51da:	2001      	movcc	r0, #1
   c51dc:	f7fe fd0e 	bl	c3bfc <__aeabi_ui2d>
   c51e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c51e2:	4680      	mov	r8, r0
   c51e4:	4689      	mov	r9, r1
   c51e6:	bb23      	cbnz	r3, c5232 <_strtod_l+0xb9a>
   c51e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c51ec:	9010      	str	r0, [sp, #64]	; 0x40
   c51ee:	9311      	str	r3, [sp, #68]	; 0x44
   c51f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c51f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c51f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c51fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c51fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5200:	1a9b      	subs	r3, r3, r2
   c5202:	9309      	str	r3, [sp, #36]	; 0x24
   c5204:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5208:	eeb0 0a48 	vmov.f32	s0, s16
   c520c:	eef0 0a68 	vmov.f32	s1, s17
   c5210:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5214:	f001 f838 	bl	c6288 <__ulp>
   c5218:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c521c:	ec53 2b10 	vmov	r2, r3, d0
   c5220:	f7fe fd66 	bl	c3cf0 <__aeabi_dmul>
   c5224:	ec53 2b18 	vmov	r2, r3, d8
   c5228:	f7fe fbac 	bl	c3984 <__adddf3>
   c522c:	4682      	mov	sl, r0
   c522e:	468b      	mov	fp, r1
   c5230:	e78d      	b.n	c514e <_strtod_l+0xab6>
   c5232:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c5236:	e7db      	b.n	c51f0 <_strtod_l+0xb58>
   c5238:	a311      	add	r3, pc, #68	; (adr r3, c5280 <_strtod_l+0xbe8>)
   c523a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c523e:	f7fe ffc9 	bl	c41d4 <__aeabi_dcmplt>
   c5242:	e7b2      	b.n	c51aa <_strtod_l+0xb12>
   c5244:	2300      	movs	r3, #0
   c5246:	930a      	str	r3, [sp, #40]	; 0x28
   c5248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c524a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c524c:	6013      	str	r3, [r2, #0]
   c524e:	f7ff ba6b 	b.w	c4728 <_strtod_l+0x90>
   c5252:	2a65      	cmp	r2, #101	; 0x65
   c5254:	f43f ab5f 	beq.w	c4916 <_strtod_l+0x27e>
   c5258:	2a45      	cmp	r2, #69	; 0x45
   c525a:	f43f ab5c 	beq.w	c4916 <_strtod_l+0x27e>
   c525e:	2301      	movs	r3, #1
   c5260:	f7ff bb94 	b.w	c498c <_strtod_l+0x2f4>
   c5264:	f3af 8000 	nop.w
   c5268:	94a03595 	.word	0x94a03595
   c526c:	3fdfffff 	.word	0x3fdfffff
   c5270:	35afe535 	.word	0x35afe535
   c5274:	3fe00000 	.word	0x3fe00000
   c5278:	ffc00000 	.word	0xffc00000
   c527c:	41dfffff 	.word	0x41dfffff
   c5280:	94a03595 	.word	0x94a03595
   c5284:	3fcfffff 	.word	0x3fcfffff
   c5288:	3ff00000 	.word	0x3ff00000
   c528c:	7ff00000 	.word	0x7ff00000
   c5290:	7fe00000 	.word	0x7fe00000
   c5294:	7c9fffff 	.word	0x7c9fffff
   c5298:	3fe00000 	.word	0x3fe00000
   c529c:	bff00000 	.word	0xbff00000
   c52a0:	7fefffff 	.word	0x7fefffff

000c52a4 <strtod>:
   c52a4:	460a      	mov	r2, r1
   c52a6:	4601      	mov	r1, r0
   c52a8:	4802      	ldr	r0, [pc, #8]	; (c52b4 <strtod+0x10>)
   c52aa:	4b03      	ldr	r3, [pc, #12]	; (c52b8 <strtod+0x14>)
   c52ac:	6800      	ldr	r0, [r0, #0]
   c52ae:	f7ff b9f3 	b.w	c4698 <_strtod_l>
   c52b2:	bf00      	nop
   c52b4:	2003db68 	.word	0x2003db68
   c52b8:	2003dbd4 	.word	0x2003dbd4

000c52bc <_strtol_l.constprop.0>:
   c52bc:	2b01      	cmp	r3, #1
   c52be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c52c2:	d001      	beq.n	c52c8 <_strtol_l.constprop.0+0xc>
   c52c4:	2b24      	cmp	r3, #36	; 0x24
   c52c6:	d906      	bls.n	c52d6 <_strtol_l.constprop.0+0x1a>
   c52c8:	f7f8 ff92 	bl	be1f0 <__errno>
   c52cc:	2316      	movs	r3, #22
   c52ce:	6003      	str	r3, [r0, #0]
   c52d0:	2000      	movs	r0, #0
   c52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c52d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c53bc <_strtol_l.constprop.0+0x100>
   c52da:	460d      	mov	r5, r1
   c52dc:	462e      	mov	r6, r5
   c52de:	f815 4b01 	ldrb.w	r4, [r5], #1
   c52e2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c52e6:	f017 0708 	ands.w	r7, r7, #8
   c52ea:	d1f7      	bne.n	c52dc <_strtol_l.constprop.0+0x20>
   c52ec:	2c2d      	cmp	r4, #45	; 0x2d
   c52ee:	d132      	bne.n	c5356 <_strtol_l.constprop.0+0x9a>
   c52f0:	782c      	ldrb	r4, [r5, #0]
   c52f2:	2701      	movs	r7, #1
   c52f4:	1cb5      	adds	r5, r6, #2
   c52f6:	2b00      	cmp	r3, #0
   c52f8:	d05b      	beq.n	c53b2 <_strtol_l.constprop.0+0xf6>
   c52fa:	2b10      	cmp	r3, #16
   c52fc:	d109      	bne.n	c5312 <_strtol_l.constprop.0+0x56>
   c52fe:	2c30      	cmp	r4, #48	; 0x30
   c5300:	d107      	bne.n	c5312 <_strtol_l.constprop.0+0x56>
   c5302:	782c      	ldrb	r4, [r5, #0]
   c5304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5308:	2c58      	cmp	r4, #88	; 0x58
   c530a:	d14d      	bne.n	c53a8 <_strtol_l.constprop.0+0xec>
   c530c:	786c      	ldrb	r4, [r5, #1]
   c530e:	2310      	movs	r3, #16
   c5310:	3502      	adds	r5, #2
   c5312:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c5316:	f108 38ff 	add.w	r8, r8, #4294967295
   c531a:	f04f 0c00 	mov.w	ip, #0
   c531e:	fbb8 f9f3 	udiv	r9, r8, r3
   c5322:	4666      	mov	r6, ip
   c5324:	fb03 8a19 	mls	sl, r3, r9, r8
   c5328:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c532c:	f1be 0f09 	cmp.w	lr, #9
   c5330:	d816      	bhi.n	c5360 <_strtol_l.constprop.0+0xa4>
   c5332:	4674      	mov	r4, lr
   c5334:	42a3      	cmp	r3, r4
   c5336:	dd24      	ble.n	c5382 <_strtol_l.constprop.0+0xc6>
   c5338:	f1bc 0f00 	cmp.w	ip, #0
   c533c:	db1e      	blt.n	c537c <_strtol_l.constprop.0+0xc0>
   c533e:	45b1      	cmp	r9, r6
   c5340:	d31c      	bcc.n	c537c <_strtol_l.constprop.0+0xc0>
   c5342:	d101      	bne.n	c5348 <_strtol_l.constprop.0+0x8c>
   c5344:	45a2      	cmp	sl, r4
   c5346:	db19      	blt.n	c537c <_strtol_l.constprop.0+0xc0>
   c5348:	fb06 4603 	mla	r6, r6, r3, r4
   c534c:	f04f 0c01 	mov.w	ip, #1
   c5350:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5354:	e7e8      	b.n	c5328 <_strtol_l.constprop.0+0x6c>
   c5356:	2c2b      	cmp	r4, #43	; 0x2b
   c5358:	bf04      	itt	eq
   c535a:	782c      	ldrbeq	r4, [r5, #0]
   c535c:	1cb5      	addeq	r5, r6, #2
   c535e:	e7ca      	b.n	c52f6 <_strtol_l.constprop.0+0x3a>
   c5360:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c5364:	f1be 0f19 	cmp.w	lr, #25
   c5368:	d801      	bhi.n	c536e <_strtol_l.constprop.0+0xb2>
   c536a:	3c37      	subs	r4, #55	; 0x37
   c536c:	e7e2      	b.n	c5334 <_strtol_l.constprop.0+0x78>
   c536e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c5372:	f1be 0f19 	cmp.w	lr, #25
   c5376:	d804      	bhi.n	c5382 <_strtol_l.constprop.0+0xc6>
   c5378:	3c57      	subs	r4, #87	; 0x57
   c537a:	e7db      	b.n	c5334 <_strtol_l.constprop.0+0x78>
   c537c:	f04f 3cff 	mov.w	ip, #4294967295
   c5380:	e7e6      	b.n	c5350 <_strtol_l.constprop.0+0x94>
   c5382:	f1bc 0f00 	cmp.w	ip, #0
   c5386:	da05      	bge.n	c5394 <_strtol_l.constprop.0+0xd8>
   c5388:	2322      	movs	r3, #34	; 0x22
   c538a:	6003      	str	r3, [r0, #0]
   c538c:	4646      	mov	r6, r8
   c538e:	b942      	cbnz	r2, c53a2 <_strtol_l.constprop.0+0xe6>
   c5390:	4630      	mov	r0, r6
   c5392:	e79e      	b.n	c52d2 <_strtol_l.constprop.0+0x16>
   c5394:	b107      	cbz	r7, c5398 <_strtol_l.constprop.0+0xdc>
   c5396:	4276      	negs	r6, r6
   c5398:	2a00      	cmp	r2, #0
   c539a:	d0f9      	beq.n	c5390 <_strtol_l.constprop.0+0xd4>
   c539c:	f1bc 0f00 	cmp.w	ip, #0
   c53a0:	d000      	beq.n	c53a4 <_strtol_l.constprop.0+0xe8>
   c53a2:	1e69      	subs	r1, r5, #1
   c53a4:	6011      	str	r1, [r2, #0]
   c53a6:	e7f3      	b.n	c5390 <_strtol_l.constprop.0+0xd4>
   c53a8:	2430      	movs	r4, #48	; 0x30
   c53aa:	2b00      	cmp	r3, #0
   c53ac:	d1b1      	bne.n	c5312 <_strtol_l.constprop.0+0x56>
   c53ae:	2308      	movs	r3, #8
   c53b0:	e7af      	b.n	c5312 <_strtol_l.constprop.0+0x56>
   c53b2:	2c30      	cmp	r4, #48	; 0x30
   c53b4:	d0a5      	beq.n	c5302 <_strtol_l.constprop.0+0x46>
   c53b6:	230a      	movs	r3, #10
   c53b8:	e7ab      	b.n	c5312 <_strtol_l.constprop.0+0x56>
   c53ba:	bf00      	nop
   c53bc:	000c85b1 	.word	0x000c85b1

000c53c0 <strtol>:
   c53c0:	4613      	mov	r3, r2
   c53c2:	460a      	mov	r2, r1
   c53c4:	4601      	mov	r1, r0
   c53c6:	4802      	ldr	r0, [pc, #8]	; (c53d0 <strtol+0x10>)
   c53c8:	6800      	ldr	r0, [r0, #0]
   c53ca:	f7ff bf77 	b.w	c52bc <_strtol_l.constprop.0>
   c53ce:	bf00      	nop
   c53d0:	2003db68 	.word	0x2003db68

000c53d4 <__register_exitproc>:
   c53d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c53d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c5494 <__register_exitproc+0xc0>
   c53dc:	4606      	mov	r6, r0
   c53de:	f8d8 0000 	ldr.w	r0, [r8]
   c53e2:	461f      	mov	r7, r3
   c53e4:	460d      	mov	r5, r1
   c53e6:	4691      	mov	r9, r2
   c53e8:	f000 fbc6 	bl	c5b78 <__retarget_lock_acquire_recursive>
   c53ec:	4b25      	ldr	r3, [pc, #148]	; (c5484 <__register_exitproc+0xb0>)
   c53ee:	681c      	ldr	r4, [r3, #0]
   c53f0:	b934      	cbnz	r4, c5400 <__register_exitproc+0x2c>
   c53f2:	4c25      	ldr	r4, [pc, #148]	; (c5488 <__register_exitproc+0xb4>)
   c53f4:	601c      	str	r4, [r3, #0]
   c53f6:	4b25      	ldr	r3, [pc, #148]	; (c548c <__register_exitproc+0xb8>)
   c53f8:	b113      	cbz	r3, c5400 <__register_exitproc+0x2c>
   c53fa:	681b      	ldr	r3, [r3, #0]
   c53fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5400:	6863      	ldr	r3, [r4, #4]
   c5402:	2b1f      	cmp	r3, #31
   c5404:	dd07      	ble.n	c5416 <__register_exitproc+0x42>
   c5406:	f8d8 0000 	ldr.w	r0, [r8]
   c540a:	f000 fbb7 	bl	c5b7c <__retarget_lock_release_recursive>
   c540e:	f04f 30ff 	mov.w	r0, #4294967295
   c5412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5416:	b34e      	cbz	r6, c546c <__register_exitproc+0x98>
   c5418:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c541c:	b988      	cbnz	r0, c5442 <__register_exitproc+0x6e>
   c541e:	4b1c      	ldr	r3, [pc, #112]	; (c5490 <__register_exitproc+0xbc>)
   c5420:	b923      	cbnz	r3, c542c <__register_exitproc+0x58>
   c5422:	f8d8 0000 	ldr.w	r0, [r8]
   c5426:	f000 fba8 	bl	c5b7a <__retarget_lock_release>
   c542a:	e7f0      	b.n	c540e <__register_exitproc+0x3a>
   c542c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5430:	f7f8 fe96 	bl	be160 <malloc>
   c5434:	2800      	cmp	r0, #0
   c5436:	d0f4      	beq.n	c5422 <__register_exitproc+0x4e>
   c5438:	2300      	movs	r3, #0
   c543a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c543e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c5442:	6863      	ldr	r3, [r4, #4]
   c5444:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5448:	2201      	movs	r2, #1
   c544a:	409a      	lsls	r2, r3
   c544c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5450:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c5454:	4313      	orrs	r3, r2
   c5456:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c545a:	2e02      	cmp	r6, #2
   c545c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5460:	bf02      	ittt	eq
   c5462:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c5466:	4313      	orreq	r3, r2
   c5468:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c546c:	6863      	ldr	r3, [r4, #4]
   c546e:	f8d8 0000 	ldr.w	r0, [r8]
   c5472:	1c5a      	adds	r2, r3, #1
   c5474:	3302      	adds	r3, #2
   c5476:	6062      	str	r2, [r4, #4]
   c5478:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c547c:	f000 fb7e 	bl	c5b7c <__retarget_lock_release_recursive>
   c5480:	2000      	movs	r0, #0
   c5482:	e7c6      	b.n	c5412 <__register_exitproc+0x3e>
   c5484:	2003e7e8 	.word	0x2003e7e8
   c5488:	2003e75c 	.word	0x2003e75c
   c548c:	00000000 	.word	0x00000000
   c5490:	000be161 	.word	0x000be161
   c5494:	2003dbcc 	.word	0x2003dbcc

000c5498 <rshift>:
   c5498:	6903      	ldr	r3, [r0, #16]
   c549a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c549e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c54a2:	ea4f 1261 	mov.w	r2, r1, asr #5
   c54a6:	f100 0414 	add.w	r4, r0, #20
   c54aa:	dd45      	ble.n	c5538 <rshift+0xa0>
   c54ac:	f011 011f 	ands.w	r1, r1, #31
   c54b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c54b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c54b8:	d10c      	bne.n	c54d4 <rshift+0x3c>
   c54ba:	f100 0710 	add.w	r7, r0, #16
   c54be:	4629      	mov	r1, r5
   c54c0:	42b1      	cmp	r1, r6
   c54c2:	d334      	bcc.n	c552e <rshift+0x96>
   c54c4:	1a9b      	subs	r3, r3, r2
   c54c6:	009b      	lsls	r3, r3, #2
   c54c8:	1eea      	subs	r2, r5, #3
   c54ca:	4296      	cmp	r6, r2
   c54cc:	bf38      	it	cc
   c54ce:	2300      	movcc	r3, #0
   c54d0:	4423      	add	r3, r4
   c54d2:	e015      	b.n	c5500 <rshift+0x68>
   c54d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c54d8:	f1c1 0820 	rsb	r8, r1, #32
   c54dc:	40cf      	lsrs	r7, r1
   c54de:	f105 0e04 	add.w	lr, r5, #4
   c54e2:	46a1      	mov	r9, r4
   c54e4:	4576      	cmp	r6, lr
   c54e6:	46f4      	mov	ip, lr
   c54e8:	d815      	bhi.n	c5516 <rshift+0x7e>
   c54ea:	1a9a      	subs	r2, r3, r2
   c54ec:	0092      	lsls	r2, r2, #2
   c54ee:	3a04      	subs	r2, #4
   c54f0:	3501      	adds	r5, #1
   c54f2:	42ae      	cmp	r6, r5
   c54f4:	bf38      	it	cc
   c54f6:	2200      	movcc	r2, #0
   c54f8:	18a3      	adds	r3, r4, r2
   c54fa:	50a7      	str	r7, [r4, r2]
   c54fc:	b107      	cbz	r7, c5500 <rshift+0x68>
   c54fe:	3304      	adds	r3, #4
   c5500:	1b1a      	subs	r2, r3, r4
   c5502:	42a3      	cmp	r3, r4
   c5504:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5508:	bf08      	it	eq
   c550a:	2300      	moveq	r3, #0
   c550c:	6102      	str	r2, [r0, #16]
   c550e:	bf08      	it	eq
   c5510:	6143      	streq	r3, [r0, #20]
   c5512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5516:	f8dc c000 	ldr.w	ip, [ip]
   c551a:	fa0c fc08 	lsl.w	ip, ip, r8
   c551e:	ea4c 0707 	orr.w	r7, ip, r7
   c5522:	f849 7b04 	str.w	r7, [r9], #4
   c5526:	f85e 7b04 	ldr.w	r7, [lr], #4
   c552a:	40cf      	lsrs	r7, r1
   c552c:	e7da      	b.n	c54e4 <rshift+0x4c>
   c552e:	f851 cb04 	ldr.w	ip, [r1], #4
   c5532:	f847 cf04 	str.w	ip, [r7, #4]!
   c5536:	e7c3      	b.n	c54c0 <rshift+0x28>
   c5538:	4623      	mov	r3, r4
   c553a:	e7e1      	b.n	c5500 <rshift+0x68>

000c553c <__hexdig_fun>:
   c553c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5540:	2b09      	cmp	r3, #9
   c5542:	d802      	bhi.n	c554a <__hexdig_fun+0xe>
   c5544:	3820      	subs	r0, #32
   c5546:	b2c0      	uxtb	r0, r0
   c5548:	4770      	bx	lr
   c554a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c554e:	2b05      	cmp	r3, #5
   c5550:	d801      	bhi.n	c5556 <__hexdig_fun+0x1a>
   c5552:	3847      	subs	r0, #71	; 0x47
   c5554:	e7f7      	b.n	c5546 <__hexdig_fun+0xa>
   c5556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c555a:	2b05      	cmp	r3, #5
   c555c:	d801      	bhi.n	c5562 <__hexdig_fun+0x26>
   c555e:	3827      	subs	r0, #39	; 0x27
   c5560:	e7f1      	b.n	c5546 <__hexdig_fun+0xa>
   c5562:	2000      	movs	r0, #0
   c5564:	4770      	bx	lr
	...

000c5568 <__gethex>:
   c5568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c556c:	ed2d 8b02 	vpush	{d8}
   c5570:	b089      	sub	sp, #36	; 0x24
   c5572:	ee08 0a10 	vmov	s16, r0
   c5576:	9304      	str	r3, [sp, #16]
   c5578:	4bb4      	ldr	r3, [pc, #720]	; (c584c <__gethex+0x2e4>)
   c557a:	681b      	ldr	r3, [r3, #0]
   c557c:	9301      	str	r3, [sp, #4]
   c557e:	4618      	mov	r0, r3
   c5580:	468b      	mov	fp, r1
   c5582:	4690      	mov	r8, r2
   c5584:	f7fe fff3 	bl	c456e <strlen>
   c5588:	9b01      	ldr	r3, [sp, #4]
   c558a:	f8db 2000 	ldr.w	r2, [fp]
   c558e:	4403      	add	r3, r0
   c5590:	4682      	mov	sl, r0
   c5592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c5596:	9305      	str	r3, [sp, #20]
   c5598:	1c93      	adds	r3, r2, #2
   c559a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c559e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c55a2:	32fe      	adds	r2, #254	; 0xfe
   c55a4:	18d1      	adds	r1, r2, r3
   c55a6:	461f      	mov	r7, r3
   c55a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   c55ac:	9100      	str	r1, [sp, #0]
   c55ae:	2830      	cmp	r0, #48	; 0x30
   c55b0:	d0f8      	beq.n	c55a4 <__gethex+0x3c>
   c55b2:	f7ff ffc3 	bl	c553c <__hexdig_fun>
   c55b6:	4604      	mov	r4, r0
   c55b8:	2800      	cmp	r0, #0
   c55ba:	d13a      	bne.n	c5632 <__gethex+0xca>
   c55bc:	9901      	ldr	r1, [sp, #4]
   c55be:	4652      	mov	r2, sl
   c55c0:	4638      	mov	r0, r7
   c55c2:	f7fe ffef 	bl	c45a4 <strncmp>
   c55c6:	4605      	mov	r5, r0
   c55c8:	2800      	cmp	r0, #0
   c55ca:	d168      	bne.n	c569e <__gethex+0x136>
   c55cc:	f817 000a 	ldrb.w	r0, [r7, sl]
   c55d0:	eb07 060a 	add.w	r6, r7, sl
   c55d4:	f7ff ffb2 	bl	c553c <__hexdig_fun>
   c55d8:	2800      	cmp	r0, #0
   c55da:	d062      	beq.n	c56a2 <__gethex+0x13a>
   c55dc:	4633      	mov	r3, r6
   c55de:	7818      	ldrb	r0, [r3, #0]
   c55e0:	2830      	cmp	r0, #48	; 0x30
   c55e2:	461f      	mov	r7, r3
   c55e4:	f103 0301 	add.w	r3, r3, #1
   c55e8:	d0f9      	beq.n	c55de <__gethex+0x76>
   c55ea:	f7ff ffa7 	bl	c553c <__hexdig_fun>
   c55ee:	2301      	movs	r3, #1
   c55f0:	fab0 f480 	clz	r4, r0
   c55f4:	0964      	lsrs	r4, r4, #5
   c55f6:	4635      	mov	r5, r6
   c55f8:	9300      	str	r3, [sp, #0]
   c55fa:	463a      	mov	r2, r7
   c55fc:	4616      	mov	r6, r2
   c55fe:	3201      	adds	r2, #1
   c5600:	7830      	ldrb	r0, [r6, #0]
   c5602:	f7ff ff9b 	bl	c553c <__hexdig_fun>
   c5606:	2800      	cmp	r0, #0
   c5608:	d1f8      	bne.n	c55fc <__gethex+0x94>
   c560a:	9901      	ldr	r1, [sp, #4]
   c560c:	4652      	mov	r2, sl
   c560e:	4630      	mov	r0, r6
   c5610:	f7fe ffc8 	bl	c45a4 <strncmp>
   c5614:	b980      	cbnz	r0, c5638 <__gethex+0xd0>
   c5616:	b94d      	cbnz	r5, c562c <__gethex+0xc4>
   c5618:	eb06 050a 	add.w	r5, r6, sl
   c561c:	462a      	mov	r2, r5
   c561e:	4616      	mov	r6, r2
   c5620:	3201      	adds	r2, #1
   c5622:	7830      	ldrb	r0, [r6, #0]
   c5624:	f7ff ff8a 	bl	c553c <__hexdig_fun>
   c5628:	2800      	cmp	r0, #0
   c562a:	d1f8      	bne.n	c561e <__gethex+0xb6>
   c562c:	1bad      	subs	r5, r5, r6
   c562e:	00ad      	lsls	r5, r5, #2
   c5630:	e004      	b.n	c563c <__gethex+0xd4>
   c5632:	2400      	movs	r4, #0
   c5634:	4625      	mov	r5, r4
   c5636:	e7e0      	b.n	c55fa <__gethex+0x92>
   c5638:	2d00      	cmp	r5, #0
   c563a:	d1f7      	bne.n	c562c <__gethex+0xc4>
   c563c:	7833      	ldrb	r3, [r6, #0]
   c563e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c5642:	2b50      	cmp	r3, #80	; 0x50
   c5644:	d13b      	bne.n	c56be <__gethex+0x156>
   c5646:	7873      	ldrb	r3, [r6, #1]
   c5648:	2b2b      	cmp	r3, #43	; 0x2b
   c564a:	d02c      	beq.n	c56a6 <__gethex+0x13e>
   c564c:	2b2d      	cmp	r3, #45	; 0x2d
   c564e:	d02e      	beq.n	c56ae <__gethex+0x146>
   c5650:	1c71      	adds	r1, r6, #1
   c5652:	f04f 0900 	mov.w	r9, #0
   c5656:	7808      	ldrb	r0, [r1, #0]
   c5658:	f7ff ff70 	bl	c553c <__hexdig_fun>
   c565c:	1e43      	subs	r3, r0, #1
   c565e:	b2db      	uxtb	r3, r3
   c5660:	2b18      	cmp	r3, #24
   c5662:	d82c      	bhi.n	c56be <__gethex+0x156>
   c5664:	f1a0 0210 	sub.w	r2, r0, #16
   c5668:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c566c:	f7ff ff66 	bl	c553c <__hexdig_fun>
   c5670:	1e43      	subs	r3, r0, #1
   c5672:	b2db      	uxtb	r3, r3
   c5674:	2b18      	cmp	r3, #24
   c5676:	d91d      	bls.n	c56b4 <__gethex+0x14c>
   c5678:	f1b9 0f00 	cmp.w	r9, #0
   c567c:	d000      	beq.n	c5680 <__gethex+0x118>
   c567e:	4252      	negs	r2, r2
   c5680:	4415      	add	r5, r2
   c5682:	f8cb 1000 	str.w	r1, [fp]
   c5686:	b1e4      	cbz	r4, c56c2 <__gethex+0x15a>
   c5688:	9b00      	ldr	r3, [sp, #0]
   c568a:	2b00      	cmp	r3, #0
   c568c:	bf14      	ite	ne
   c568e:	2700      	movne	r7, #0
   c5690:	2706      	moveq	r7, #6
   c5692:	4638      	mov	r0, r7
   c5694:	b009      	add	sp, #36	; 0x24
   c5696:	ecbd 8b02 	vpop	{d8}
   c569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c569e:	463e      	mov	r6, r7
   c56a0:	4625      	mov	r5, r4
   c56a2:	2401      	movs	r4, #1
   c56a4:	e7ca      	b.n	c563c <__gethex+0xd4>
   c56a6:	f04f 0900 	mov.w	r9, #0
   c56aa:	1cb1      	adds	r1, r6, #2
   c56ac:	e7d3      	b.n	c5656 <__gethex+0xee>
   c56ae:	f04f 0901 	mov.w	r9, #1
   c56b2:	e7fa      	b.n	c56aa <__gethex+0x142>
   c56b4:	230a      	movs	r3, #10
   c56b6:	fb03 0202 	mla	r2, r3, r2, r0
   c56ba:	3a10      	subs	r2, #16
   c56bc:	e7d4      	b.n	c5668 <__gethex+0x100>
   c56be:	4631      	mov	r1, r6
   c56c0:	e7df      	b.n	c5682 <__gethex+0x11a>
   c56c2:	1bf3      	subs	r3, r6, r7
   c56c4:	3b01      	subs	r3, #1
   c56c6:	4621      	mov	r1, r4
   c56c8:	2b07      	cmp	r3, #7
   c56ca:	dc0b      	bgt.n	c56e4 <__gethex+0x17c>
   c56cc:	ee18 0a10 	vmov	r0, s16
   c56d0:	f000 fa68 	bl	c5ba4 <_Balloc>
   c56d4:	4604      	mov	r4, r0
   c56d6:	b940      	cbnz	r0, c56ea <__gethex+0x182>
   c56d8:	4b5d      	ldr	r3, [pc, #372]	; (c5850 <__gethex+0x2e8>)
   c56da:	4602      	mov	r2, r0
   c56dc:	21de      	movs	r1, #222	; 0xde
   c56de:	485d      	ldr	r0, [pc, #372]	; (c5854 <__gethex+0x2ec>)
   c56e0:	f7f8 fd8e 	bl	be200 <__assert_func>
   c56e4:	3101      	adds	r1, #1
   c56e6:	105b      	asrs	r3, r3, #1
   c56e8:	e7ee      	b.n	c56c8 <__gethex+0x160>
   c56ea:	f100 0914 	add.w	r9, r0, #20
   c56ee:	f04f 0b00 	mov.w	fp, #0
   c56f2:	f1ca 0301 	rsb	r3, sl, #1
   c56f6:	f8cd 9008 	str.w	r9, [sp, #8]
   c56fa:	f8cd b000 	str.w	fp, [sp]
   c56fe:	9306      	str	r3, [sp, #24]
   c5700:	42b7      	cmp	r7, r6
   c5702:	d340      	bcc.n	c5786 <__gethex+0x21e>
   c5704:	9802      	ldr	r0, [sp, #8]
   c5706:	9b00      	ldr	r3, [sp, #0]
   c5708:	f840 3b04 	str.w	r3, [r0], #4
   c570c:	eba0 0009 	sub.w	r0, r0, r9
   c5710:	1080      	asrs	r0, r0, #2
   c5712:	0146      	lsls	r6, r0, #5
   c5714:	6120      	str	r0, [r4, #16]
   c5716:	4618      	mov	r0, r3
   c5718:	f000 fb36 	bl	c5d88 <__hi0bits>
   c571c:	1a30      	subs	r0, r6, r0
   c571e:	f8d8 6000 	ldr.w	r6, [r8]
   c5722:	42b0      	cmp	r0, r6
   c5724:	dd63      	ble.n	c57ee <__gethex+0x286>
   c5726:	1b87      	subs	r7, r0, r6
   c5728:	4639      	mov	r1, r7
   c572a:	4620      	mov	r0, r4
   c572c:	f000 feda 	bl	c64e4 <__any_on>
   c5730:	4682      	mov	sl, r0
   c5732:	b1a8      	cbz	r0, c5760 <__gethex+0x1f8>
   c5734:	1e7b      	subs	r3, r7, #1
   c5736:	1159      	asrs	r1, r3, #5
   c5738:	f003 021f 	and.w	r2, r3, #31
   c573c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5740:	f04f 0a01 	mov.w	sl, #1
   c5744:	fa0a f202 	lsl.w	r2, sl, r2
   c5748:	420a      	tst	r2, r1
   c574a:	d009      	beq.n	c5760 <__gethex+0x1f8>
   c574c:	4553      	cmp	r3, sl
   c574e:	dd05      	ble.n	c575c <__gethex+0x1f4>
   c5750:	1eb9      	subs	r1, r7, #2
   c5752:	4620      	mov	r0, r4
   c5754:	f000 fec6 	bl	c64e4 <__any_on>
   c5758:	2800      	cmp	r0, #0
   c575a:	d145      	bne.n	c57e8 <__gethex+0x280>
   c575c:	f04f 0a02 	mov.w	sl, #2
   c5760:	4639      	mov	r1, r7
   c5762:	4620      	mov	r0, r4
   c5764:	f7ff fe98 	bl	c5498 <rshift>
   c5768:	443d      	add	r5, r7
   c576a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c576e:	42ab      	cmp	r3, r5
   c5770:	da4c      	bge.n	c580c <__gethex+0x2a4>
   c5772:	ee18 0a10 	vmov	r0, s16
   c5776:	4621      	mov	r1, r4
   c5778:	f000 fa54 	bl	c5c24 <_Bfree>
   c577c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c577e:	2300      	movs	r3, #0
   c5780:	6013      	str	r3, [r2, #0]
   c5782:	27a3      	movs	r7, #163	; 0xa3
   c5784:	e785      	b.n	c5692 <__gethex+0x12a>
   c5786:	1e73      	subs	r3, r6, #1
   c5788:	9a05      	ldr	r2, [sp, #20]
   c578a:	9303      	str	r3, [sp, #12]
   c578c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c5790:	4293      	cmp	r3, r2
   c5792:	d019      	beq.n	c57c8 <__gethex+0x260>
   c5794:	f1bb 0f20 	cmp.w	fp, #32
   c5798:	d107      	bne.n	c57aa <__gethex+0x242>
   c579a:	9b02      	ldr	r3, [sp, #8]
   c579c:	9a00      	ldr	r2, [sp, #0]
   c579e:	f843 2b04 	str.w	r2, [r3], #4
   c57a2:	9302      	str	r3, [sp, #8]
   c57a4:	2300      	movs	r3, #0
   c57a6:	9300      	str	r3, [sp, #0]
   c57a8:	469b      	mov	fp, r3
   c57aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c57ae:	f7ff fec5 	bl	c553c <__hexdig_fun>
   c57b2:	9b00      	ldr	r3, [sp, #0]
   c57b4:	f000 000f 	and.w	r0, r0, #15
   c57b8:	fa00 f00b 	lsl.w	r0, r0, fp
   c57bc:	4303      	orrs	r3, r0
   c57be:	9300      	str	r3, [sp, #0]
   c57c0:	f10b 0b04 	add.w	fp, fp, #4
   c57c4:	9b03      	ldr	r3, [sp, #12]
   c57c6:	e00d      	b.n	c57e4 <__gethex+0x27c>
   c57c8:	9b03      	ldr	r3, [sp, #12]
   c57ca:	9a06      	ldr	r2, [sp, #24]
   c57cc:	4413      	add	r3, r2
   c57ce:	42bb      	cmp	r3, r7
   c57d0:	d3e0      	bcc.n	c5794 <__gethex+0x22c>
   c57d2:	4618      	mov	r0, r3
   c57d4:	9901      	ldr	r1, [sp, #4]
   c57d6:	9307      	str	r3, [sp, #28]
   c57d8:	4652      	mov	r2, sl
   c57da:	f7fe fee3 	bl	c45a4 <strncmp>
   c57de:	9b07      	ldr	r3, [sp, #28]
   c57e0:	2800      	cmp	r0, #0
   c57e2:	d1d7      	bne.n	c5794 <__gethex+0x22c>
   c57e4:	461e      	mov	r6, r3
   c57e6:	e78b      	b.n	c5700 <__gethex+0x198>
   c57e8:	f04f 0a03 	mov.w	sl, #3
   c57ec:	e7b8      	b.n	c5760 <__gethex+0x1f8>
   c57ee:	da0a      	bge.n	c5806 <__gethex+0x29e>
   c57f0:	1a37      	subs	r7, r6, r0
   c57f2:	4621      	mov	r1, r4
   c57f4:	ee18 0a10 	vmov	r0, s16
   c57f8:	463a      	mov	r2, r7
   c57fa:	f000 fc2f 	bl	c605c <__lshift>
   c57fe:	1bed      	subs	r5, r5, r7
   c5800:	4604      	mov	r4, r0
   c5802:	f100 0914 	add.w	r9, r0, #20
   c5806:	f04f 0a00 	mov.w	sl, #0
   c580a:	e7ae      	b.n	c576a <__gethex+0x202>
   c580c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5810:	42a8      	cmp	r0, r5
   c5812:	dd72      	ble.n	c58fa <__gethex+0x392>
   c5814:	1b45      	subs	r5, r0, r5
   c5816:	42ae      	cmp	r6, r5
   c5818:	dc36      	bgt.n	c5888 <__gethex+0x320>
   c581a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c581e:	2b02      	cmp	r3, #2
   c5820:	d02a      	beq.n	c5878 <__gethex+0x310>
   c5822:	2b03      	cmp	r3, #3
   c5824:	d02c      	beq.n	c5880 <__gethex+0x318>
   c5826:	2b01      	cmp	r3, #1
   c5828:	d11c      	bne.n	c5864 <__gethex+0x2fc>
   c582a:	42ae      	cmp	r6, r5
   c582c:	d11a      	bne.n	c5864 <__gethex+0x2fc>
   c582e:	2e01      	cmp	r6, #1
   c5830:	d112      	bne.n	c5858 <__gethex+0x2f0>
   c5832:	9a04      	ldr	r2, [sp, #16]
   c5834:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5838:	6013      	str	r3, [r2, #0]
   c583a:	2301      	movs	r3, #1
   c583c:	6123      	str	r3, [r4, #16]
   c583e:	f8c9 3000 	str.w	r3, [r9]
   c5842:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5844:	2762      	movs	r7, #98	; 0x62
   c5846:	601c      	str	r4, [r3, #0]
   c5848:	e723      	b.n	c5692 <__gethex+0x12a>
   c584a:	bf00      	nop
   c584c:	000c8748 	.word	0x000c8748
   c5850:	000c86b1 	.word	0x000c86b1
   c5854:	000c86c2 	.word	0x000c86c2
   c5858:	1e71      	subs	r1, r6, #1
   c585a:	4620      	mov	r0, r4
   c585c:	f000 fe42 	bl	c64e4 <__any_on>
   c5860:	2800      	cmp	r0, #0
   c5862:	d1e6      	bne.n	c5832 <__gethex+0x2ca>
   c5864:	ee18 0a10 	vmov	r0, s16
   c5868:	4621      	mov	r1, r4
   c586a:	f000 f9db 	bl	c5c24 <_Bfree>
   c586e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5870:	2300      	movs	r3, #0
   c5872:	6013      	str	r3, [r2, #0]
   c5874:	2750      	movs	r7, #80	; 0x50
   c5876:	e70c      	b.n	c5692 <__gethex+0x12a>
   c5878:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c587a:	2b00      	cmp	r3, #0
   c587c:	d1f2      	bne.n	c5864 <__gethex+0x2fc>
   c587e:	e7d8      	b.n	c5832 <__gethex+0x2ca>
   c5880:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5882:	2b00      	cmp	r3, #0
   c5884:	d1d5      	bne.n	c5832 <__gethex+0x2ca>
   c5886:	e7ed      	b.n	c5864 <__gethex+0x2fc>
   c5888:	1e6f      	subs	r7, r5, #1
   c588a:	f1ba 0f00 	cmp.w	sl, #0
   c588e:	d131      	bne.n	c58f4 <__gethex+0x38c>
   c5890:	b127      	cbz	r7, c589c <__gethex+0x334>
   c5892:	4639      	mov	r1, r7
   c5894:	4620      	mov	r0, r4
   c5896:	f000 fe25 	bl	c64e4 <__any_on>
   c589a:	4682      	mov	sl, r0
   c589c:	117b      	asrs	r3, r7, #5
   c589e:	2101      	movs	r1, #1
   c58a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c58a4:	f007 071f 	and.w	r7, r7, #31
   c58a8:	fa01 f707 	lsl.w	r7, r1, r7
   c58ac:	421f      	tst	r7, r3
   c58ae:	4629      	mov	r1, r5
   c58b0:	4620      	mov	r0, r4
   c58b2:	bf18      	it	ne
   c58b4:	f04a 0a02 	orrne.w	sl, sl, #2
   c58b8:	1b76      	subs	r6, r6, r5
   c58ba:	f7ff fded 	bl	c5498 <rshift>
   c58be:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c58c2:	2702      	movs	r7, #2
   c58c4:	f1ba 0f00 	cmp.w	sl, #0
   c58c8:	d048      	beq.n	c595c <__gethex+0x3f4>
   c58ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c58ce:	2b02      	cmp	r3, #2
   c58d0:	d015      	beq.n	c58fe <__gethex+0x396>
   c58d2:	2b03      	cmp	r3, #3
   c58d4:	d017      	beq.n	c5906 <__gethex+0x39e>
   c58d6:	2b01      	cmp	r3, #1
   c58d8:	d109      	bne.n	c58ee <__gethex+0x386>
   c58da:	f01a 0f02 	tst.w	sl, #2
   c58de:	d006      	beq.n	c58ee <__gethex+0x386>
   c58e0:	f8d9 0000 	ldr.w	r0, [r9]
   c58e4:	ea4a 0a00 	orr.w	sl, sl, r0
   c58e8:	f01a 0f01 	tst.w	sl, #1
   c58ec:	d10e      	bne.n	c590c <__gethex+0x3a4>
   c58ee:	f047 0710 	orr.w	r7, r7, #16
   c58f2:	e033      	b.n	c595c <__gethex+0x3f4>
   c58f4:	f04f 0a01 	mov.w	sl, #1
   c58f8:	e7d0      	b.n	c589c <__gethex+0x334>
   c58fa:	2701      	movs	r7, #1
   c58fc:	e7e2      	b.n	c58c4 <__gethex+0x35c>
   c58fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5900:	f1c3 0301 	rsb	r3, r3, #1
   c5904:	9315      	str	r3, [sp, #84]	; 0x54
   c5906:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5908:	2b00      	cmp	r3, #0
   c590a:	d0f0      	beq.n	c58ee <__gethex+0x386>
   c590c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5910:	f104 0314 	add.w	r3, r4, #20
   c5914:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5918:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c591c:	f04f 0c00 	mov.w	ip, #0
   c5920:	4618      	mov	r0, r3
   c5922:	f853 2b04 	ldr.w	r2, [r3], #4
   c5926:	f1b2 3fff 	cmp.w	r2, #4294967295
   c592a:	d01c      	beq.n	c5966 <__gethex+0x3fe>
   c592c:	3201      	adds	r2, #1
   c592e:	6002      	str	r2, [r0, #0]
   c5930:	2f02      	cmp	r7, #2
   c5932:	f104 0314 	add.w	r3, r4, #20
   c5936:	d13f      	bne.n	c59b8 <__gethex+0x450>
   c5938:	f8d8 2000 	ldr.w	r2, [r8]
   c593c:	3a01      	subs	r2, #1
   c593e:	42b2      	cmp	r2, r6
   c5940:	d10a      	bne.n	c5958 <__gethex+0x3f0>
   c5942:	1171      	asrs	r1, r6, #5
   c5944:	2201      	movs	r2, #1
   c5946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c594a:	f006 061f 	and.w	r6, r6, #31
   c594e:	fa02 f606 	lsl.w	r6, r2, r6
   c5952:	421e      	tst	r6, r3
   c5954:	bf18      	it	ne
   c5956:	4617      	movne	r7, r2
   c5958:	f047 0720 	orr.w	r7, r7, #32
   c595c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c595e:	601c      	str	r4, [r3, #0]
   c5960:	9b04      	ldr	r3, [sp, #16]
   c5962:	601d      	str	r5, [r3, #0]
   c5964:	e695      	b.n	c5692 <__gethex+0x12a>
   c5966:	4299      	cmp	r1, r3
   c5968:	f843 cc04 	str.w	ip, [r3, #-4]
   c596c:	d8d8      	bhi.n	c5920 <__gethex+0x3b8>
   c596e:	68a3      	ldr	r3, [r4, #8]
   c5970:	459b      	cmp	fp, r3
   c5972:	db19      	blt.n	c59a8 <__gethex+0x440>
   c5974:	6861      	ldr	r1, [r4, #4]
   c5976:	ee18 0a10 	vmov	r0, s16
   c597a:	3101      	adds	r1, #1
   c597c:	f000 f912 	bl	c5ba4 <_Balloc>
   c5980:	4681      	mov	r9, r0
   c5982:	b918      	cbnz	r0, c598c <__gethex+0x424>
   c5984:	4b1a      	ldr	r3, [pc, #104]	; (c59f0 <__gethex+0x488>)
   c5986:	4602      	mov	r2, r0
   c5988:	2184      	movs	r1, #132	; 0x84
   c598a:	e6a8      	b.n	c56de <__gethex+0x176>
   c598c:	6922      	ldr	r2, [r4, #16]
   c598e:	3202      	adds	r2, #2
   c5990:	f104 010c 	add.w	r1, r4, #12
   c5994:	0092      	lsls	r2, r2, #2
   c5996:	300c      	adds	r0, #12
   c5998:	f7fe fd36 	bl	c4408 <memcpy>
   c599c:	4621      	mov	r1, r4
   c599e:	ee18 0a10 	vmov	r0, s16
   c59a2:	f000 f93f 	bl	c5c24 <_Bfree>
   c59a6:	464c      	mov	r4, r9
   c59a8:	6923      	ldr	r3, [r4, #16]
   c59aa:	1c5a      	adds	r2, r3, #1
   c59ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c59b0:	6122      	str	r2, [r4, #16]
   c59b2:	2201      	movs	r2, #1
   c59b4:	615a      	str	r2, [r3, #20]
   c59b6:	e7bb      	b.n	c5930 <__gethex+0x3c8>
   c59b8:	6922      	ldr	r2, [r4, #16]
   c59ba:	455a      	cmp	r2, fp
   c59bc:	dd0b      	ble.n	c59d6 <__gethex+0x46e>
   c59be:	2101      	movs	r1, #1
   c59c0:	4620      	mov	r0, r4
   c59c2:	f7ff fd69 	bl	c5498 <rshift>
   c59c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c59ca:	3501      	adds	r5, #1
   c59cc:	42ab      	cmp	r3, r5
   c59ce:	f6ff aed0 	blt.w	c5772 <__gethex+0x20a>
   c59d2:	2701      	movs	r7, #1
   c59d4:	e7c0      	b.n	c5958 <__gethex+0x3f0>
   c59d6:	f016 061f 	ands.w	r6, r6, #31
   c59da:	d0fa      	beq.n	c59d2 <__gethex+0x46a>
   c59dc:	4453      	add	r3, sl
   c59de:	f1c6 0620 	rsb	r6, r6, #32
   c59e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c59e6:	f000 f9cf 	bl	c5d88 <__hi0bits>
   c59ea:	42b0      	cmp	r0, r6
   c59ec:	dbe7      	blt.n	c59be <__gethex+0x456>
   c59ee:	e7f0      	b.n	c59d2 <__gethex+0x46a>
   c59f0:	000c86b1 	.word	0x000c86b1

000c59f4 <L_shift>:
   c59f4:	f1c2 0208 	rsb	r2, r2, #8
   c59f8:	0092      	lsls	r2, r2, #2
   c59fa:	b570      	push	{r4, r5, r6, lr}
   c59fc:	f1c2 0620 	rsb	r6, r2, #32
   c5a00:	6843      	ldr	r3, [r0, #4]
   c5a02:	6804      	ldr	r4, [r0, #0]
   c5a04:	fa03 f506 	lsl.w	r5, r3, r6
   c5a08:	432c      	orrs	r4, r5
   c5a0a:	40d3      	lsrs	r3, r2
   c5a0c:	6004      	str	r4, [r0, #0]
   c5a0e:	f840 3f04 	str.w	r3, [r0, #4]!
   c5a12:	4288      	cmp	r0, r1
   c5a14:	d3f4      	bcc.n	c5a00 <L_shift+0xc>
   c5a16:	bd70      	pop	{r4, r5, r6, pc}

000c5a18 <__match>:
   c5a18:	b530      	push	{r4, r5, lr}
   c5a1a:	6803      	ldr	r3, [r0, #0]
   c5a1c:	3301      	adds	r3, #1
   c5a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5a22:	b914      	cbnz	r4, c5a2a <__match+0x12>
   c5a24:	6003      	str	r3, [r0, #0]
   c5a26:	2001      	movs	r0, #1
   c5a28:	bd30      	pop	{r4, r5, pc}
   c5a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5a2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5a32:	2d19      	cmp	r5, #25
   c5a34:	bf98      	it	ls
   c5a36:	3220      	addls	r2, #32
   c5a38:	42a2      	cmp	r2, r4
   c5a3a:	d0f0      	beq.n	c5a1e <__match+0x6>
   c5a3c:	2000      	movs	r0, #0
   c5a3e:	e7f3      	b.n	c5a28 <__match+0x10>

000c5a40 <__hexnan>:
   c5a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5a44:	680b      	ldr	r3, [r1, #0]
   c5a46:	115e      	asrs	r6, r3, #5
   c5a48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5a4c:	f013 031f 	ands.w	r3, r3, #31
   c5a50:	b087      	sub	sp, #28
   c5a52:	bf18      	it	ne
   c5a54:	3604      	addne	r6, #4
   c5a56:	2500      	movs	r5, #0
   c5a58:	1f37      	subs	r7, r6, #4
   c5a5a:	4690      	mov	r8, r2
   c5a5c:	6802      	ldr	r2, [r0, #0]
   c5a5e:	9301      	str	r3, [sp, #4]
   c5a60:	4682      	mov	sl, r0
   c5a62:	f846 5c04 	str.w	r5, [r6, #-4]
   c5a66:	46b9      	mov	r9, r7
   c5a68:	463c      	mov	r4, r7
   c5a6a:	9502      	str	r5, [sp, #8]
   c5a6c:	46ab      	mov	fp, r5
   c5a6e:	7851      	ldrb	r1, [r2, #1]
   c5a70:	1c53      	adds	r3, r2, #1
   c5a72:	9303      	str	r3, [sp, #12]
   c5a74:	b341      	cbz	r1, c5ac8 <__hexnan+0x88>
   c5a76:	4608      	mov	r0, r1
   c5a78:	9205      	str	r2, [sp, #20]
   c5a7a:	9104      	str	r1, [sp, #16]
   c5a7c:	f7ff fd5e 	bl	c553c <__hexdig_fun>
   c5a80:	2800      	cmp	r0, #0
   c5a82:	d14f      	bne.n	c5b24 <__hexnan+0xe4>
   c5a84:	9904      	ldr	r1, [sp, #16]
   c5a86:	9a05      	ldr	r2, [sp, #20]
   c5a88:	2920      	cmp	r1, #32
   c5a8a:	d818      	bhi.n	c5abe <__hexnan+0x7e>
   c5a8c:	9b02      	ldr	r3, [sp, #8]
   c5a8e:	459b      	cmp	fp, r3
   c5a90:	dd13      	ble.n	c5aba <__hexnan+0x7a>
   c5a92:	454c      	cmp	r4, r9
   c5a94:	d206      	bcs.n	c5aa4 <__hexnan+0x64>
   c5a96:	2d07      	cmp	r5, #7
   c5a98:	dc04      	bgt.n	c5aa4 <__hexnan+0x64>
   c5a9a:	462a      	mov	r2, r5
   c5a9c:	4649      	mov	r1, r9
   c5a9e:	4620      	mov	r0, r4
   c5aa0:	f7ff ffa8 	bl	c59f4 <L_shift>
   c5aa4:	4544      	cmp	r4, r8
   c5aa6:	d950      	bls.n	c5b4a <__hexnan+0x10a>
   c5aa8:	2300      	movs	r3, #0
   c5aaa:	f1a4 0904 	sub.w	r9, r4, #4
   c5aae:	f844 3c04 	str.w	r3, [r4, #-4]
   c5ab2:	f8cd b008 	str.w	fp, [sp, #8]
   c5ab6:	464c      	mov	r4, r9
   c5ab8:	461d      	mov	r5, r3
   c5aba:	9a03      	ldr	r2, [sp, #12]
   c5abc:	e7d7      	b.n	c5a6e <__hexnan+0x2e>
   c5abe:	2929      	cmp	r1, #41	; 0x29
   c5ac0:	d156      	bne.n	c5b70 <__hexnan+0x130>
   c5ac2:	3202      	adds	r2, #2
   c5ac4:	f8ca 2000 	str.w	r2, [sl]
   c5ac8:	f1bb 0f00 	cmp.w	fp, #0
   c5acc:	d050      	beq.n	c5b70 <__hexnan+0x130>
   c5ace:	454c      	cmp	r4, r9
   c5ad0:	d206      	bcs.n	c5ae0 <__hexnan+0xa0>
   c5ad2:	2d07      	cmp	r5, #7
   c5ad4:	dc04      	bgt.n	c5ae0 <__hexnan+0xa0>
   c5ad6:	462a      	mov	r2, r5
   c5ad8:	4649      	mov	r1, r9
   c5ada:	4620      	mov	r0, r4
   c5adc:	f7ff ff8a 	bl	c59f4 <L_shift>
   c5ae0:	4544      	cmp	r4, r8
   c5ae2:	d934      	bls.n	c5b4e <__hexnan+0x10e>
   c5ae4:	f1a8 0204 	sub.w	r2, r8, #4
   c5ae8:	4623      	mov	r3, r4
   c5aea:	f853 1b04 	ldr.w	r1, [r3], #4
   c5aee:	f842 1f04 	str.w	r1, [r2, #4]!
   c5af2:	429f      	cmp	r7, r3
   c5af4:	d2f9      	bcs.n	c5aea <__hexnan+0xaa>
   c5af6:	1b3b      	subs	r3, r7, r4
   c5af8:	f023 0303 	bic.w	r3, r3, #3
   c5afc:	3304      	adds	r3, #4
   c5afe:	3401      	adds	r4, #1
   c5b00:	3e03      	subs	r6, #3
   c5b02:	42b4      	cmp	r4, r6
   c5b04:	bf88      	it	hi
   c5b06:	2304      	movhi	r3, #4
   c5b08:	4443      	add	r3, r8
   c5b0a:	2200      	movs	r2, #0
   c5b0c:	f843 2b04 	str.w	r2, [r3], #4
   c5b10:	429f      	cmp	r7, r3
   c5b12:	d2fb      	bcs.n	c5b0c <__hexnan+0xcc>
   c5b14:	683b      	ldr	r3, [r7, #0]
   c5b16:	b91b      	cbnz	r3, c5b20 <__hexnan+0xe0>
   c5b18:	4547      	cmp	r7, r8
   c5b1a:	d127      	bne.n	c5b6c <__hexnan+0x12c>
   c5b1c:	2301      	movs	r3, #1
   c5b1e:	603b      	str	r3, [r7, #0]
   c5b20:	2005      	movs	r0, #5
   c5b22:	e026      	b.n	c5b72 <__hexnan+0x132>
   c5b24:	3501      	adds	r5, #1
   c5b26:	2d08      	cmp	r5, #8
   c5b28:	f10b 0b01 	add.w	fp, fp, #1
   c5b2c:	dd06      	ble.n	c5b3c <__hexnan+0xfc>
   c5b2e:	4544      	cmp	r4, r8
   c5b30:	d9c3      	bls.n	c5aba <__hexnan+0x7a>
   c5b32:	2300      	movs	r3, #0
   c5b34:	f844 3c04 	str.w	r3, [r4, #-4]
   c5b38:	2501      	movs	r5, #1
   c5b3a:	3c04      	subs	r4, #4
   c5b3c:	6822      	ldr	r2, [r4, #0]
   c5b3e:	f000 000f 	and.w	r0, r0, #15
   c5b42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5b46:	6022      	str	r2, [r4, #0]
   c5b48:	e7b7      	b.n	c5aba <__hexnan+0x7a>
   c5b4a:	2508      	movs	r5, #8
   c5b4c:	e7b5      	b.n	c5aba <__hexnan+0x7a>
   c5b4e:	9b01      	ldr	r3, [sp, #4]
   c5b50:	2b00      	cmp	r3, #0
   c5b52:	d0df      	beq.n	c5b14 <__hexnan+0xd4>
   c5b54:	f04f 32ff 	mov.w	r2, #4294967295
   c5b58:	f1c3 0320 	rsb	r3, r3, #32
   c5b5c:	fa22 f303 	lsr.w	r3, r2, r3
   c5b60:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5b64:	401a      	ands	r2, r3
   c5b66:	f846 2c04 	str.w	r2, [r6, #-4]
   c5b6a:	e7d3      	b.n	c5b14 <__hexnan+0xd4>
   c5b6c:	3f04      	subs	r7, #4
   c5b6e:	e7d1      	b.n	c5b14 <__hexnan+0xd4>
   c5b70:	2004      	movs	r0, #4
   c5b72:	b007      	add	sp, #28
   c5b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5b78 <__retarget_lock_acquire_recursive>:
   c5b78:	4770      	bx	lr

000c5b7a <__retarget_lock_release>:
   c5b7a:	4770      	bx	lr

000c5b7c <__retarget_lock_release_recursive>:
   c5b7c:	4770      	bx	lr

000c5b7e <__ascii_mbtowc>:
   c5b7e:	b082      	sub	sp, #8
   c5b80:	b901      	cbnz	r1, c5b84 <__ascii_mbtowc+0x6>
   c5b82:	a901      	add	r1, sp, #4
   c5b84:	b142      	cbz	r2, c5b98 <__ascii_mbtowc+0x1a>
   c5b86:	b14b      	cbz	r3, c5b9c <__ascii_mbtowc+0x1e>
   c5b88:	7813      	ldrb	r3, [r2, #0]
   c5b8a:	600b      	str	r3, [r1, #0]
   c5b8c:	7812      	ldrb	r2, [r2, #0]
   c5b8e:	1e10      	subs	r0, r2, #0
   c5b90:	bf18      	it	ne
   c5b92:	2001      	movne	r0, #1
   c5b94:	b002      	add	sp, #8
   c5b96:	4770      	bx	lr
   c5b98:	4610      	mov	r0, r2
   c5b9a:	e7fb      	b.n	c5b94 <__ascii_mbtowc+0x16>
   c5b9c:	f06f 0001 	mvn.w	r0, #1
   c5ba0:	e7f8      	b.n	c5b94 <__ascii_mbtowc+0x16>
	...

000c5ba4 <_Balloc>:
   c5ba4:	b570      	push	{r4, r5, r6, lr}
   c5ba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5ba8:	4604      	mov	r4, r0
   c5baa:	460d      	mov	r5, r1
   c5bac:	b976      	cbnz	r6, c5bcc <_Balloc+0x28>
   c5bae:	2010      	movs	r0, #16
   c5bb0:	f7f8 fad6 	bl	be160 <malloc>
   c5bb4:	4602      	mov	r2, r0
   c5bb6:	6260      	str	r0, [r4, #36]	; 0x24
   c5bb8:	b920      	cbnz	r0, c5bc4 <_Balloc+0x20>
   c5bba:	4b18      	ldr	r3, [pc, #96]	; (c5c1c <_Balloc+0x78>)
   c5bbc:	4818      	ldr	r0, [pc, #96]	; (c5c20 <_Balloc+0x7c>)
   c5bbe:	2166      	movs	r1, #102	; 0x66
   c5bc0:	f7f8 fb1e 	bl	be200 <__assert_func>
   c5bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5bc8:	6006      	str	r6, [r0, #0]
   c5bca:	60c6      	str	r6, [r0, #12]
   c5bcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5bce:	68f3      	ldr	r3, [r6, #12]
   c5bd0:	b183      	cbz	r3, c5bf4 <_Balloc+0x50>
   c5bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5bd4:	68db      	ldr	r3, [r3, #12]
   c5bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5bda:	b9b8      	cbnz	r0, c5c0c <_Balloc+0x68>
   c5bdc:	2101      	movs	r1, #1
   c5bde:	fa01 f605 	lsl.w	r6, r1, r5
   c5be2:	1d72      	adds	r2, r6, #5
   c5be4:	0092      	lsls	r2, r2, #2
   c5be6:	4620      	mov	r0, r4
   c5be8:	f000 fc9d 	bl	c6526 <_calloc_r>
   c5bec:	b160      	cbz	r0, c5c08 <_Balloc+0x64>
   c5bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5bf2:	e00e      	b.n	c5c12 <_Balloc+0x6e>
   c5bf4:	2221      	movs	r2, #33	; 0x21
   c5bf6:	2104      	movs	r1, #4
   c5bf8:	4620      	mov	r0, r4
   c5bfa:	f000 fc94 	bl	c6526 <_calloc_r>
   c5bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5c00:	60f0      	str	r0, [r6, #12]
   c5c02:	68db      	ldr	r3, [r3, #12]
   c5c04:	2b00      	cmp	r3, #0
   c5c06:	d1e4      	bne.n	c5bd2 <_Balloc+0x2e>
   c5c08:	2000      	movs	r0, #0
   c5c0a:	bd70      	pop	{r4, r5, r6, pc}
   c5c0c:	6802      	ldr	r2, [r0, #0]
   c5c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5c12:	2300      	movs	r3, #0
   c5c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5c18:	e7f7      	b.n	c5c0a <_Balloc+0x66>
   c5c1a:	bf00      	nop
   c5c1c:	000c84c0 	.word	0x000c84c0
   c5c20:	000c875a 	.word	0x000c875a

000c5c24 <_Bfree>:
   c5c24:	b570      	push	{r4, r5, r6, lr}
   c5c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5c28:	4605      	mov	r5, r0
   c5c2a:	460c      	mov	r4, r1
   c5c2c:	b976      	cbnz	r6, c5c4c <_Bfree+0x28>
   c5c2e:	2010      	movs	r0, #16
   c5c30:	f7f8 fa96 	bl	be160 <malloc>
   c5c34:	4602      	mov	r2, r0
   c5c36:	6268      	str	r0, [r5, #36]	; 0x24
   c5c38:	b920      	cbnz	r0, c5c44 <_Bfree+0x20>
   c5c3a:	4b09      	ldr	r3, [pc, #36]	; (c5c60 <_Bfree+0x3c>)
   c5c3c:	4809      	ldr	r0, [pc, #36]	; (c5c64 <_Bfree+0x40>)
   c5c3e:	218a      	movs	r1, #138	; 0x8a
   c5c40:	f7f8 fade 	bl	be200 <__assert_func>
   c5c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5c48:	6006      	str	r6, [r0, #0]
   c5c4a:	60c6      	str	r6, [r0, #12]
   c5c4c:	b13c      	cbz	r4, c5c5e <_Bfree+0x3a>
   c5c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5c50:	6862      	ldr	r2, [r4, #4]
   c5c52:	68db      	ldr	r3, [r3, #12]
   c5c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5c58:	6021      	str	r1, [r4, #0]
   c5c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5c5e:	bd70      	pop	{r4, r5, r6, pc}
   c5c60:	000c84c0 	.word	0x000c84c0
   c5c64:	000c875a 	.word	0x000c875a

000c5c68 <__multadd>:
   c5c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5c6c:	690d      	ldr	r5, [r1, #16]
   c5c6e:	4607      	mov	r7, r0
   c5c70:	460c      	mov	r4, r1
   c5c72:	461e      	mov	r6, r3
   c5c74:	f101 0c14 	add.w	ip, r1, #20
   c5c78:	2000      	movs	r0, #0
   c5c7a:	f8dc 3000 	ldr.w	r3, [ip]
   c5c7e:	b299      	uxth	r1, r3
   c5c80:	fb02 6101 	mla	r1, r2, r1, r6
   c5c84:	0c1e      	lsrs	r6, r3, #16
   c5c86:	0c0b      	lsrs	r3, r1, #16
   c5c88:	fb02 3306 	mla	r3, r2, r6, r3
   c5c8c:	b289      	uxth	r1, r1
   c5c8e:	3001      	adds	r0, #1
   c5c90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5c94:	4285      	cmp	r5, r0
   c5c96:	f84c 1b04 	str.w	r1, [ip], #4
   c5c9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5c9e:	dcec      	bgt.n	c5c7a <__multadd+0x12>
   c5ca0:	b30e      	cbz	r6, c5ce6 <__multadd+0x7e>
   c5ca2:	68a3      	ldr	r3, [r4, #8]
   c5ca4:	42ab      	cmp	r3, r5
   c5ca6:	dc19      	bgt.n	c5cdc <__multadd+0x74>
   c5ca8:	6861      	ldr	r1, [r4, #4]
   c5caa:	4638      	mov	r0, r7
   c5cac:	3101      	adds	r1, #1
   c5cae:	f7ff ff79 	bl	c5ba4 <_Balloc>
   c5cb2:	4680      	mov	r8, r0
   c5cb4:	b928      	cbnz	r0, c5cc2 <__multadd+0x5a>
   c5cb6:	4602      	mov	r2, r0
   c5cb8:	4b0c      	ldr	r3, [pc, #48]	; (c5cec <__multadd+0x84>)
   c5cba:	480d      	ldr	r0, [pc, #52]	; (c5cf0 <__multadd+0x88>)
   c5cbc:	21b5      	movs	r1, #181	; 0xb5
   c5cbe:	f7f8 fa9f 	bl	be200 <__assert_func>
   c5cc2:	6922      	ldr	r2, [r4, #16]
   c5cc4:	3202      	adds	r2, #2
   c5cc6:	f104 010c 	add.w	r1, r4, #12
   c5cca:	0092      	lsls	r2, r2, #2
   c5ccc:	300c      	adds	r0, #12
   c5cce:	f7fe fb9b 	bl	c4408 <memcpy>
   c5cd2:	4621      	mov	r1, r4
   c5cd4:	4638      	mov	r0, r7
   c5cd6:	f7ff ffa5 	bl	c5c24 <_Bfree>
   c5cda:	4644      	mov	r4, r8
   c5cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5ce0:	3501      	adds	r5, #1
   c5ce2:	615e      	str	r6, [r3, #20]
   c5ce4:	6125      	str	r5, [r4, #16]
   c5ce6:	4620      	mov	r0, r4
   c5ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5cec:	000c86b1 	.word	0x000c86b1
   c5cf0:	000c875a 	.word	0x000c875a

000c5cf4 <__s2b>:
   c5cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5cf8:	460c      	mov	r4, r1
   c5cfa:	4615      	mov	r5, r2
   c5cfc:	461f      	mov	r7, r3
   c5cfe:	2209      	movs	r2, #9
   c5d00:	3308      	adds	r3, #8
   c5d02:	4606      	mov	r6, r0
   c5d04:	fb93 f3f2 	sdiv	r3, r3, r2
   c5d08:	2100      	movs	r1, #0
   c5d0a:	2201      	movs	r2, #1
   c5d0c:	429a      	cmp	r2, r3
   c5d0e:	db09      	blt.n	c5d24 <__s2b+0x30>
   c5d10:	4630      	mov	r0, r6
   c5d12:	f7ff ff47 	bl	c5ba4 <_Balloc>
   c5d16:	b940      	cbnz	r0, c5d2a <__s2b+0x36>
   c5d18:	4602      	mov	r2, r0
   c5d1a:	4b19      	ldr	r3, [pc, #100]	; (c5d80 <__s2b+0x8c>)
   c5d1c:	4819      	ldr	r0, [pc, #100]	; (c5d84 <__s2b+0x90>)
   c5d1e:	21ce      	movs	r1, #206	; 0xce
   c5d20:	f7f8 fa6e 	bl	be200 <__assert_func>
   c5d24:	0052      	lsls	r2, r2, #1
   c5d26:	3101      	adds	r1, #1
   c5d28:	e7f0      	b.n	c5d0c <__s2b+0x18>
   c5d2a:	9b08      	ldr	r3, [sp, #32]
   c5d2c:	6143      	str	r3, [r0, #20]
   c5d2e:	2d09      	cmp	r5, #9
   c5d30:	f04f 0301 	mov.w	r3, #1
   c5d34:	6103      	str	r3, [r0, #16]
   c5d36:	dd16      	ble.n	c5d66 <__s2b+0x72>
   c5d38:	f104 0909 	add.w	r9, r4, #9
   c5d3c:	46c8      	mov	r8, r9
   c5d3e:	442c      	add	r4, r5
   c5d40:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5d44:	4601      	mov	r1, r0
   c5d46:	3b30      	subs	r3, #48	; 0x30
   c5d48:	220a      	movs	r2, #10
   c5d4a:	4630      	mov	r0, r6
   c5d4c:	f7ff ff8c 	bl	c5c68 <__multadd>
   c5d50:	45a0      	cmp	r8, r4
   c5d52:	d1f5      	bne.n	c5d40 <__s2b+0x4c>
   c5d54:	f1a5 0408 	sub.w	r4, r5, #8
   c5d58:	444c      	add	r4, r9
   c5d5a:	1b2d      	subs	r5, r5, r4
   c5d5c:	1963      	adds	r3, r4, r5
   c5d5e:	42bb      	cmp	r3, r7
   c5d60:	db04      	blt.n	c5d6c <__s2b+0x78>
   c5d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5d66:	340a      	adds	r4, #10
   c5d68:	2509      	movs	r5, #9
   c5d6a:	e7f6      	b.n	c5d5a <__s2b+0x66>
   c5d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5d70:	4601      	mov	r1, r0
   c5d72:	3b30      	subs	r3, #48	; 0x30
   c5d74:	220a      	movs	r2, #10
   c5d76:	4630      	mov	r0, r6
   c5d78:	f7ff ff76 	bl	c5c68 <__multadd>
   c5d7c:	e7ee      	b.n	c5d5c <__s2b+0x68>
   c5d7e:	bf00      	nop
   c5d80:	000c86b1 	.word	0x000c86b1
   c5d84:	000c875a 	.word	0x000c875a

000c5d88 <__hi0bits>:
   c5d88:	0c03      	lsrs	r3, r0, #16
   c5d8a:	041b      	lsls	r3, r3, #16
   c5d8c:	b9d3      	cbnz	r3, c5dc4 <__hi0bits+0x3c>
   c5d8e:	0400      	lsls	r0, r0, #16
   c5d90:	2310      	movs	r3, #16
   c5d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5d96:	bf04      	itt	eq
   c5d98:	0200      	lsleq	r0, r0, #8
   c5d9a:	3308      	addeq	r3, #8
   c5d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5da0:	bf04      	itt	eq
   c5da2:	0100      	lsleq	r0, r0, #4
   c5da4:	3304      	addeq	r3, #4
   c5da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5daa:	bf04      	itt	eq
   c5dac:	0080      	lsleq	r0, r0, #2
   c5dae:	3302      	addeq	r3, #2
   c5db0:	2800      	cmp	r0, #0
   c5db2:	db05      	blt.n	c5dc0 <__hi0bits+0x38>
   c5db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5db8:	f103 0301 	add.w	r3, r3, #1
   c5dbc:	bf08      	it	eq
   c5dbe:	2320      	moveq	r3, #32
   c5dc0:	4618      	mov	r0, r3
   c5dc2:	4770      	bx	lr
   c5dc4:	2300      	movs	r3, #0
   c5dc6:	e7e4      	b.n	c5d92 <__hi0bits+0xa>

000c5dc8 <__lo0bits>:
   c5dc8:	6803      	ldr	r3, [r0, #0]
   c5dca:	f013 0207 	ands.w	r2, r3, #7
   c5dce:	4601      	mov	r1, r0
   c5dd0:	d00b      	beq.n	c5dea <__lo0bits+0x22>
   c5dd2:	07da      	lsls	r2, r3, #31
   c5dd4:	d423      	bmi.n	c5e1e <__lo0bits+0x56>
   c5dd6:	0798      	lsls	r0, r3, #30
   c5dd8:	bf49      	itett	mi
   c5dda:	085b      	lsrmi	r3, r3, #1
   c5ddc:	089b      	lsrpl	r3, r3, #2
   c5dde:	2001      	movmi	r0, #1
   c5de0:	600b      	strmi	r3, [r1, #0]
   c5de2:	bf5c      	itt	pl
   c5de4:	600b      	strpl	r3, [r1, #0]
   c5de6:	2002      	movpl	r0, #2
   c5de8:	4770      	bx	lr
   c5dea:	b298      	uxth	r0, r3
   c5dec:	b9a8      	cbnz	r0, c5e1a <__lo0bits+0x52>
   c5dee:	0c1b      	lsrs	r3, r3, #16
   c5df0:	2010      	movs	r0, #16
   c5df2:	b2da      	uxtb	r2, r3
   c5df4:	b90a      	cbnz	r2, c5dfa <__lo0bits+0x32>
   c5df6:	3008      	adds	r0, #8
   c5df8:	0a1b      	lsrs	r3, r3, #8
   c5dfa:	071a      	lsls	r2, r3, #28
   c5dfc:	bf04      	itt	eq
   c5dfe:	091b      	lsreq	r3, r3, #4
   c5e00:	3004      	addeq	r0, #4
   c5e02:	079a      	lsls	r2, r3, #30
   c5e04:	bf04      	itt	eq
   c5e06:	089b      	lsreq	r3, r3, #2
   c5e08:	3002      	addeq	r0, #2
   c5e0a:	07da      	lsls	r2, r3, #31
   c5e0c:	d403      	bmi.n	c5e16 <__lo0bits+0x4e>
   c5e0e:	085b      	lsrs	r3, r3, #1
   c5e10:	f100 0001 	add.w	r0, r0, #1
   c5e14:	d005      	beq.n	c5e22 <__lo0bits+0x5a>
   c5e16:	600b      	str	r3, [r1, #0]
   c5e18:	4770      	bx	lr
   c5e1a:	4610      	mov	r0, r2
   c5e1c:	e7e9      	b.n	c5df2 <__lo0bits+0x2a>
   c5e1e:	2000      	movs	r0, #0
   c5e20:	4770      	bx	lr
   c5e22:	2020      	movs	r0, #32
   c5e24:	4770      	bx	lr
	...

000c5e28 <__i2b>:
   c5e28:	b510      	push	{r4, lr}
   c5e2a:	460c      	mov	r4, r1
   c5e2c:	2101      	movs	r1, #1
   c5e2e:	f7ff feb9 	bl	c5ba4 <_Balloc>
   c5e32:	4602      	mov	r2, r0
   c5e34:	b928      	cbnz	r0, c5e42 <__i2b+0x1a>
   c5e36:	4b05      	ldr	r3, [pc, #20]	; (c5e4c <__i2b+0x24>)
   c5e38:	4805      	ldr	r0, [pc, #20]	; (c5e50 <__i2b+0x28>)
   c5e3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5e3e:	f7f8 f9df 	bl	be200 <__assert_func>
   c5e42:	2301      	movs	r3, #1
   c5e44:	6144      	str	r4, [r0, #20]
   c5e46:	6103      	str	r3, [r0, #16]
   c5e48:	bd10      	pop	{r4, pc}
   c5e4a:	bf00      	nop
   c5e4c:	000c86b1 	.word	0x000c86b1
   c5e50:	000c875a 	.word	0x000c875a

000c5e54 <__multiply>:
   c5e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5e58:	4691      	mov	r9, r2
   c5e5a:	690a      	ldr	r2, [r1, #16]
   c5e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5e60:	429a      	cmp	r2, r3
   c5e62:	bfb8      	it	lt
   c5e64:	460b      	movlt	r3, r1
   c5e66:	460c      	mov	r4, r1
   c5e68:	bfbc      	itt	lt
   c5e6a:	464c      	movlt	r4, r9
   c5e6c:	4699      	movlt	r9, r3
   c5e6e:	6927      	ldr	r7, [r4, #16]
   c5e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c5e74:	68a3      	ldr	r3, [r4, #8]
   c5e76:	6861      	ldr	r1, [r4, #4]
   c5e78:	eb07 060a 	add.w	r6, r7, sl
   c5e7c:	42b3      	cmp	r3, r6
   c5e7e:	b085      	sub	sp, #20
   c5e80:	bfb8      	it	lt
   c5e82:	3101      	addlt	r1, #1
   c5e84:	f7ff fe8e 	bl	c5ba4 <_Balloc>
   c5e88:	b930      	cbnz	r0, c5e98 <__multiply+0x44>
   c5e8a:	4602      	mov	r2, r0
   c5e8c:	4b44      	ldr	r3, [pc, #272]	; (c5fa0 <__multiply+0x14c>)
   c5e8e:	4845      	ldr	r0, [pc, #276]	; (c5fa4 <__multiply+0x150>)
   c5e90:	f240 115d 	movw	r1, #349	; 0x15d
   c5e94:	f7f8 f9b4 	bl	be200 <__assert_func>
   c5e98:	f100 0514 	add.w	r5, r0, #20
   c5e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5ea0:	462b      	mov	r3, r5
   c5ea2:	2200      	movs	r2, #0
   c5ea4:	4543      	cmp	r3, r8
   c5ea6:	d321      	bcc.n	c5eec <__multiply+0x98>
   c5ea8:	f104 0314 	add.w	r3, r4, #20
   c5eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5eb0:	f109 0314 	add.w	r3, r9, #20
   c5eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5eb8:	9202      	str	r2, [sp, #8]
   c5eba:	1b3a      	subs	r2, r7, r4
   c5ebc:	3a15      	subs	r2, #21
   c5ebe:	f022 0203 	bic.w	r2, r2, #3
   c5ec2:	3204      	adds	r2, #4
   c5ec4:	f104 0115 	add.w	r1, r4, #21
   c5ec8:	428f      	cmp	r7, r1
   c5eca:	bf38      	it	cc
   c5ecc:	2204      	movcc	r2, #4
   c5ece:	9201      	str	r2, [sp, #4]
   c5ed0:	9a02      	ldr	r2, [sp, #8]
   c5ed2:	9303      	str	r3, [sp, #12]
   c5ed4:	429a      	cmp	r2, r3
   c5ed6:	d80c      	bhi.n	c5ef2 <__multiply+0x9e>
   c5ed8:	2e00      	cmp	r6, #0
   c5eda:	dd03      	ble.n	c5ee4 <__multiply+0x90>
   c5edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5ee0:	2b00      	cmp	r3, #0
   c5ee2:	d05a      	beq.n	c5f9a <__multiply+0x146>
   c5ee4:	6106      	str	r6, [r0, #16]
   c5ee6:	b005      	add	sp, #20
   c5ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5eec:	f843 2b04 	str.w	r2, [r3], #4
   c5ef0:	e7d8      	b.n	c5ea4 <__multiply+0x50>
   c5ef2:	f8b3 a000 	ldrh.w	sl, [r3]
   c5ef6:	f1ba 0f00 	cmp.w	sl, #0
   c5efa:	d024      	beq.n	c5f46 <__multiply+0xf2>
   c5efc:	f104 0e14 	add.w	lr, r4, #20
   c5f00:	46a9      	mov	r9, r5
   c5f02:	f04f 0c00 	mov.w	ip, #0
   c5f06:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5f0a:	f8d9 1000 	ldr.w	r1, [r9]
   c5f0e:	fa1f fb82 	uxth.w	fp, r2
   c5f12:	b289      	uxth	r1, r1
   c5f14:	fb0a 110b 	mla	r1, sl, fp, r1
   c5f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5f1c:	f8d9 2000 	ldr.w	r2, [r9]
   c5f20:	4461      	add	r1, ip
   c5f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5f26:	fb0a c20b 	mla	r2, sl, fp, ip
   c5f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c5f2e:	b289      	uxth	r1, r1
   c5f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c5f34:	4577      	cmp	r7, lr
   c5f36:	f849 1b04 	str.w	r1, [r9], #4
   c5f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5f3e:	d8e2      	bhi.n	c5f06 <__multiply+0xb2>
   c5f40:	9a01      	ldr	r2, [sp, #4]
   c5f42:	f845 c002 	str.w	ip, [r5, r2]
   c5f46:	9a03      	ldr	r2, [sp, #12]
   c5f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c5f4c:	3304      	adds	r3, #4
   c5f4e:	f1b9 0f00 	cmp.w	r9, #0
   c5f52:	d020      	beq.n	c5f96 <__multiply+0x142>
   c5f54:	6829      	ldr	r1, [r5, #0]
   c5f56:	f104 0c14 	add.w	ip, r4, #20
   c5f5a:	46ae      	mov	lr, r5
   c5f5c:	f04f 0a00 	mov.w	sl, #0
   c5f60:	f8bc b000 	ldrh.w	fp, [ip]
   c5f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c5f68:	fb09 220b 	mla	r2, r9, fp, r2
   c5f6c:	4492      	add	sl, r2
   c5f6e:	b289      	uxth	r1, r1
   c5f70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c5f74:	f84e 1b04 	str.w	r1, [lr], #4
   c5f78:	f85c 2b04 	ldr.w	r2, [ip], #4
   c5f7c:	f8be 1000 	ldrh.w	r1, [lr]
   c5f80:	0c12      	lsrs	r2, r2, #16
   c5f82:	fb09 1102 	mla	r1, r9, r2, r1
   c5f86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c5f8a:	4567      	cmp	r7, ip
   c5f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c5f90:	d8e6      	bhi.n	c5f60 <__multiply+0x10c>
   c5f92:	9a01      	ldr	r2, [sp, #4]
   c5f94:	50a9      	str	r1, [r5, r2]
   c5f96:	3504      	adds	r5, #4
   c5f98:	e79a      	b.n	c5ed0 <__multiply+0x7c>
   c5f9a:	3e01      	subs	r6, #1
   c5f9c:	e79c      	b.n	c5ed8 <__multiply+0x84>
   c5f9e:	bf00      	nop
   c5fa0:	000c86b1 	.word	0x000c86b1
   c5fa4:	000c875a 	.word	0x000c875a

000c5fa8 <__pow5mult>:
   c5fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5fac:	4615      	mov	r5, r2
   c5fae:	f012 0203 	ands.w	r2, r2, #3
   c5fb2:	4606      	mov	r6, r0
   c5fb4:	460f      	mov	r7, r1
   c5fb6:	d007      	beq.n	c5fc8 <__pow5mult+0x20>
   c5fb8:	4c25      	ldr	r4, [pc, #148]	; (c6050 <__pow5mult+0xa8>)
   c5fba:	3a01      	subs	r2, #1
   c5fbc:	2300      	movs	r3, #0
   c5fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c5fc2:	f7ff fe51 	bl	c5c68 <__multadd>
   c5fc6:	4607      	mov	r7, r0
   c5fc8:	10ad      	asrs	r5, r5, #2
   c5fca:	d03d      	beq.n	c6048 <__pow5mult+0xa0>
   c5fcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5fce:	b97c      	cbnz	r4, c5ff0 <__pow5mult+0x48>
   c5fd0:	2010      	movs	r0, #16
   c5fd2:	f7f8 f8c5 	bl	be160 <malloc>
   c5fd6:	4602      	mov	r2, r0
   c5fd8:	6270      	str	r0, [r6, #36]	; 0x24
   c5fda:	b928      	cbnz	r0, c5fe8 <__pow5mult+0x40>
   c5fdc:	4b1d      	ldr	r3, [pc, #116]	; (c6054 <__pow5mult+0xac>)
   c5fde:	481e      	ldr	r0, [pc, #120]	; (c6058 <__pow5mult+0xb0>)
   c5fe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c5fe4:	f7f8 f90c 	bl	be200 <__assert_func>
   c5fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5fec:	6004      	str	r4, [r0, #0]
   c5fee:	60c4      	str	r4, [r0, #12]
   c5ff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c5ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5ff8:	b94c      	cbnz	r4, c600e <__pow5mult+0x66>
   c5ffa:	f240 2171 	movw	r1, #625	; 0x271
   c5ffe:	4630      	mov	r0, r6
   c6000:	f7ff ff12 	bl	c5e28 <__i2b>
   c6004:	2300      	movs	r3, #0
   c6006:	f8c8 0008 	str.w	r0, [r8, #8]
   c600a:	4604      	mov	r4, r0
   c600c:	6003      	str	r3, [r0, #0]
   c600e:	f04f 0900 	mov.w	r9, #0
   c6012:	07eb      	lsls	r3, r5, #31
   c6014:	d50a      	bpl.n	c602c <__pow5mult+0x84>
   c6016:	4639      	mov	r1, r7
   c6018:	4622      	mov	r2, r4
   c601a:	4630      	mov	r0, r6
   c601c:	f7ff ff1a 	bl	c5e54 <__multiply>
   c6020:	4639      	mov	r1, r7
   c6022:	4680      	mov	r8, r0
   c6024:	4630      	mov	r0, r6
   c6026:	f7ff fdfd 	bl	c5c24 <_Bfree>
   c602a:	4647      	mov	r7, r8
   c602c:	106d      	asrs	r5, r5, #1
   c602e:	d00b      	beq.n	c6048 <__pow5mult+0xa0>
   c6030:	6820      	ldr	r0, [r4, #0]
   c6032:	b938      	cbnz	r0, c6044 <__pow5mult+0x9c>
   c6034:	4622      	mov	r2, r4
   c6036:	4621      	mov	r1, r4
   c6038:	4630      	mov	r0, r6
   c603a:	f7ff ff0b 	bl	c5e54 <__multiply>
   c603e:	6020      	str	r0, [r4, #0]
   c6040:	f8c0 9000 	str.w	r9, [r0]
   c6044:	4604      	mov	r4, r0
   c6046:	e7e4      	b.n	c6012 <__pow5mult+0x6a>
   c6048:	4638      	mov	r0, r7
   c604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c604e:	bf00      	nop
   c6050:	000c88c8 	.word	0x000c88c8
   c6054:	000c84c0 	.word	0x000c84c0
   c6058:	000c875a 	.word	0x000c875a

000c605c <__lshift>:
   c605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c6060:	460c      	mov	r4, r1
   c6062:	6849      	ldr	r1, [r1, #4]
   c6064:	6923      	ldr	r3, [r4, #16]
   c6066:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c606a:	68a3      	ldr	r3, [r4, #8]
   c606c:	4607      	mov	r7, r0
   c606e:	4691      	mov	r9, r2
   c6070:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c6074:	f108 0601 	add.w	r6, r8, #1
   c6078:	42b3      	cmp	r3, r6
   c607a:	db0b      	blt.n	c6094 <__lshift+0x38>
   c607c:	4638      	mov	r0, r7
   c607e:	f7ff fd91 	bl	c5ba4 <_Balloc>
   c6082:	4605      	mov	r5, r0
   c6084:	b948      	cbnz	r0, c609a <__lshift+0x3e>
   c6086:	4602      	mov	r2, r0
   c6088:	4b2a      	ldr	r3, [pc, #168]	; (c6134 <__lshift+0xd8>)
   c608a:	482b      	ldr	r0, [pc, #172]	; (c6138 <__lshift+0xdc>)
   c608c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c6090:	f7f8 f8b6 	bl	be200 <__assert_func>
   c6094:	3101      	adds	r1, #1
   c6096:	005b      	lsls	r3, r3, #1
   c6098:	e7ee      	b.n	c6078 <__lshift+0x1c>
   c609a:	2300      	movs	r3, #0
   c609c:	f100 0114 	add.w	r1, r0, #20
   c60a0:	f100 0210 	add.w	r2, r0, #16
   c60a4:	4618      	mov	r0, r3
   c60a6:	4553      	cmp	r3, sl
   c60a8:	db37      	blt.n	c611a <__lshift+0xbe>
   c60aa:	6920      	ldr	r0, [r4, #16]
   c60ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c60b0:	f104 0314 	add.w	r3, r4, #20
   c60b4:	f019 091f 	ands.w	r9, r9, #31
   c60b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c60bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c60c0:	d02f      	beq.n	c6122 <__lshift+0xc6>
   c60c2:	f1c9 0e20 	rsb	lr, r9, #32
   c60c6:	468a      	mov	sl, r1
   c60c8:	f04f 0c00 	mov.w	ip, #0
   c60cc:	681a      	ldr	r2, [r3, #0]
   c60ce:	fa02 f209 	lsl.w	r2, r2, r9
   c60d2:	ea42 020c 	orr.w	r2, r2, ip
   c60d6:	f84a 2b04 	str.w	r2, [sl], #4
   c60da:	f853 2b04 	ldr.w	r2, [r3], #4
   c60de:	4298      	cmp	r0, r3
   c60e0:	fa22 fc0e 	lsr.w	ip, r2, lr
   c60e4:	d8f2      	bhi.n	c60cc <__lshift+0x70>
   c60e6:	1b03      	subs	r3, r0, r4
   c60e8:	3b15      	subs	r3, #21
   c60ea:	f023 0303 	bic.w	r3, r3, #3
   c60ee:	3304      	adds	r3, #4
   c60f0:	f104 0215 	add.w	r2, r4, #21
   c60f4:	4290      	cmp	r0, r2
   c60f6:	bf38      	it	cc
   c60f8:	2304      	movcc	r3, #4
   c60fa:	f841 c003 	str.w	ip, [r1, r3]
   c60fe:	f1bc 0f00 	cmp.w	ip, #0
   c6102:	d001      	beq.n	c6108 <__lshift+0xac>
   c6104:	f108 0602 	add.w	r6, r8, #2
   c6108:	3e01      	subs	r6, #1
   c610a:	4638      	mov	r0, r7
   c610c:	612e      	str	r6, [r5, #16]
   c610e:	4621      	mov	r1, r4
   c6110:	f7ff fd88 	bl	c5c24 <_Bfree>
   c6114:	4628      	mov	r0, r5
   c6116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c611a:	f842 0f04 	str.w	r0, [r2, #4]!
   c611e:	3301      	adds	r3, #1
   c6120:	e7c1      	b.n	c60a6 <__lshift+0x4a>
   c6122:	3904      	subs	r1, #4
   c6124:	f853 2b04 	ldr.w	r2, [r3], #4
   c6128:	f841 2f04 	str.w	r2, [r1, #4]!
   c612c:	4298      	cmp	r0, r3
   c612e:	d8f9      	bhi.n	c6124 <__lshift+0xc8>
   c6130:	e7ea      	b.n	c6108 <__lshift+0xac>
   c6132:	bf00      	nop
   c6134:	000c86b1 	.word	0x000c86b1
   c6138:	000c875a 	.word	0x000c875a

000c613c <__mcmp>:
   c613c:	b530      	push	{r4, r5, lr}
   c613e:	6902      	ldr	r2, [r0, #16]
   c6140:	690c      	ldr	r4, [r1, #16]
   c6142:	1b12      	subs	r2, r2, r4
   c6144:	d10e      	bne.n	c6164 <__mcmp+0x28>
   c6146:	f100 0314 	add.w	r3, r0, #20
   c614a:	3114      	adds	r1, #20
   c614c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c6150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c6154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c6158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c615c:	42a5      	cmp	r5, r4
   c615e:	d003      	beq.n	c6168 <__mcmp+0x2c>
   c6160:	d305      	bcc.n	c616e <__mcmp+0x32>
   c6162:	2201      	movs	r2, #1
   c6164:	4610      	mov	r0, r2
   c6166:	bd30      	pop	{r4, r5, pc}
   c6168:	4283      	cmp	r3, r0
   c616a:	d3f3      	bcc.n	c6154 <__mcmp+0x18>
   c616c:	e7fa      	b.n	c6164 <__mcmp+0x28>
   c616e:	f04f 32ff 	mov.w	r2, #4294967295
   c6172:	e7f7      	b.n	c6164 <__mcmp+0x28>

000c6174 <__mdiff>:
   c6174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6178:	460c      	mov	r4, r1
   c617a:	4606      	mov	r6, r0
   c617c:	4611      	mov	r1, r2
   c617e:	4620      	mov	r0, r4
   c6180:	4690      	mov	r8, r2
   c6182:	f7ff ffdb 	bl	c613c <__mcmp>
   c6186:	1e05      	subs	r5, r0, #0
   c6188:	d110      	bne.n	c61ac <__mdiff+0x38>
   c618a:	4629      	mov	r1, r5
   c618c:	4630      	mov	r0, r6
   c618e:	f7ff fd09 	bl	c5ba4 <_Balloc>
   c6192:	b930      	cbnz	r0, c61a2 <__mdiff+0x2e>
   c6194:	4b3a      	ldr	r3, [pc, #232]	; (c6280 <__mdiff+0x10c>)
   c6196:	4602      	mov	r2, r0
   c6198:	f240 2132 	movw	r1, #562	; 0x232
   c619c:	4839      	ldr	r0, [pc, #228]	; (c6284 <__mdiff+0x110>)
   c619e:	f7f8 f82f 	bl	be200 <__assert_func>
   c61a2:	2301      	movs	r3, #1
   c61a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c61a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c61ac:	bfa4      	itt	ge
   c61ae:	4643      	movge	r3, r8
   c61b0:	46a0      	movge	r8, r4
   c61b2:	4630      	mov	r0, r6
   c61b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c61b8:	bfa6      	itte	ge
   c61ba:	461c      	movge	r4, r3
   c61bc:	2500      	movge	r5, #0
   c61be:	2501      	movlt	r5, #1
   c61c0:	f7ff fcf0 	bl	c5ba4 <_Balloc>
   c61c4:	b920      	cbnz	r0, c61d0 <__mdiff+0x5c>
   c61c6:	4b2e      	ldr	r3, [pc, #184]	; (c6280 <__mdiff+0x10c>)
   c61c8:	4602      	mov	r2, r0
   c61ca:	f44f 7110 	mov.w	r1, #576	; 0x240
   c61ce:	e7e5      	b.n	c619c <__mdiff+0x28>
   c61d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c61d4:	6926      	ldr	r6, [r4, #16]
   c61d6:	60c5      	str	r5, [r0, #12]
   c61d8:	f104 0914 	add.w	r9, r4, #20
   c61dc:	f108 0514 	add.w	r5, r8, #20
   c61e0:	f100 0e14 	add.w	lr, r0, #20
   c61e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c61e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c61ec:	f108 0210 	add.w	r2, r8, #16
   c61f0:	46f2      	mov	sl, lr
   c61f2:	2100      	movs	r1, #0
   c61f4:	f859 3b04 	ldr.w	r3, [r9], #4
   c61f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c61fc:	fa1f f883 	uxth.w	r8, r3
   c6200:	fa11 f18b 	uxtah	r1, r1, fp
   c6204:	0c1b      	lsrs	r3, r3, #16
   c6206:	eba1 0808 	sub.w	r8, r1, r8
   c620a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c620e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c6212:	fa1f f888 	uxth.w	r8, r8
   c6216:	1419      	asrs	r1, r3, #16
   c6218:	454e      	cmp	r6, r9
   c621a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c621e:	f84a 3b04 	str.w	r3, [sl], #4
   c6222:	d8e7      	bhi.n	c61f4 <__mdiff+0x80>
   c6224:	1b33      	subs	r3, r6, r4
   c6226:	3b15      	subs	r3, #21
   c6228:	f023 0303 	bic.w	r3, r3, #3
   c622c:	3304      	adds	r3, #4
   c622e:	3415      	adds	r4, #21
   c6230:	42a6      	cmp	r6, r4
   c6232:	bf38      	it	cc
   c6234:	2304      	movcc	r3, #4
   c6236:	441d      	add	r5, r3
   c6238:	4473      	add	r3, lr
   c623a:	469e      	mov	lr, r3
   c623c:	462e      	mov	r6, r5
   c623e:	4566      	cmp	r6, ip
   c6240:	d30e      	bcc.n	c6260 <__mdiff+0xec>
   c6242:	f10c 0203 	add.w	r2, ip, #3
   c6246:	1b52      	subs	r2, r2, r5
   c6248:	f022 0203 	bic.w	r2, r2, #3
   c624c:	3d03      	subs	r5, #3
   c624e:	45ac      	cmp	ip, r5
   c6250:	bf38      	it	cc
   c6252:	2200      	movcc	r2, #0
   c6254:	441a      	add	r2, r3
   c6256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c625a:	b17b      	cbz	r3, c627c <__mdiff+0x108>
   c625c:	6107      	str	r7, [r0, #16]
   c625e:	e7a3      	b.n	c61a8 <__mdiff+0x34>
   c6260:	f856 8b04 	ldr.w	r8, [r6], #4
   c6264:	fa11 f288 	uxtah	r2, r1, r8
   c6268:	1414      	asrs	r4, r2, #16
   c626a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c626e:	b292      	uxth	r2, r2
   c6270:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c6274:	f84e 2b04 	str.w	r2, [lr], #4
   c6278:	1421      	asrs	r1, r4, #16
   c627a:	e7e0      	b.n	c623e <__mdiff+0xca>
   c627c:	3f01      	subs	r7, #1
   c627e:	e7ea      	b.n	c6256 <__mdiff+0xe2>
   c6280:	000c86b1 	.word	0x000c86b1
   c6284:	000c875a 	.word	0x000c875a

000c6288 <__ulp>:
   c6288:	b082      	sub	sp, #8
   c628a:	ed8d 0b00 	vstr	d0, [sp]
   c628e:	9b01      	ldr	r3, [sp, #4]
   c6290:	4912      	ldr	r1, [pc, #72]	; (c62dc <__ulp+0x54>)
   c6292:	4019      	ands	r1, r3
   c6294:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c6298:	2900      	cmp	r1, #0
   c629a:	dd05      	ble.n	c62a8 <__ulp+0x20>
   c629c:	2200      	movs	r2, #0
   c629e:	460b      	mov	r3, r1
   c62a0:	ec43 2b10 	vmov	d0, r2, r3
   c62a4:	b002      	add	sp, #8
   c62a6:	4770      	bx	lr
   c62a8:	4249      	negs	r1, r1
   c62aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c62ae:	ea4f 5021 	mov.w	r0, r1, asr #20
   c62b2:	f04f 0200 	mov.w	r2, #0
   c62b6:	f04f 0300 	mov.w	r3, #0
   c62ba:	da04      	bge.n	c62c6 <__ulp+0x3e>
   c62bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c62c0:	fa41 f300 	asr.w	r3, r1, r0
   c62c4:	e7ec      	b.n	c62a0 <__ulp+0x18>
   c62c6:	f1a0 0114 	sub.w	r1, r0, #20
   c62ca:	291e      	cmp	r1, #30
   c62cc:	bfda      	itte	le
   c62ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c62d2:	fa20 f101 	lsrle.w	r1, r0, r1
   c62d6:	2101      	movgt	r1, #1
   c62d8:	460a      	mov	r2, r1
   c62da:	e7e1      	b.n	c62a0 <__ulp+0x18>
   c62dc:	7ff00000 	.word	0x7ff00000

000c62e0 <__b2d>:
   c62e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c62e2:	6905      	ldr	r5, [r0, #16]
   c62e4:	f100 0714 	add.w	r7, r0, #20
   c62e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c62ec:	1f2e      	subs	r6, r5, #4
   c62ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c62f2:	4620      	mov	r0, r4
   c62f4:	f7ff fd48 	bl	c5d88 <__hi0bits>
   c62f8:	f1c0 0320 	rsb	r3, r0, #32
   c62fc:	280a      	cmp	r0, #10
   c62fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; c637c <__b2d+0x9c>
   c6302:	600b      	str	r3, [r1, #0]
   c6304:	dc14      	bgt.n	c6330 <__b2d+0x50>
   c6306:	f1c0 0e0b 	rsb	lr, r0, #11
   c630a:	fa24 f10e 	lsr.w	r1, r4, lr
   c630e:	42b7      	cmp	r7, r6
   c6310:	ea41 030c 	orr.w	r3, r1, ip
   c6314:	bf34      	ite	cc
   c6316:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c631a:	2100      	movcs	r1, #0
   c631c:	3015      	adds	r0, #21
   c631e:	fa04 f000 	lsl.w	r0, r4, r0
   c6322:	fa21 f10e 	lsr.w	r1, r1, lr
   c6326:	ea40 0201 	orr.w	r2, r0, r1
   c632a:	ec43 2b10 	vmov	d0, r2, r3
   c632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c6330:	42b7      	cmp	r7, r6
   c6332:	bf3a      	itte	cc
   c6334:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6338:	f1a5 0608 	subcc.w	r6, r5, #8
   c633c:	2100      	movcs	r1, #0
   c633e:	380b      	subs	r0, #11
   c6340:	d017      	beq.n	c6372 <__b2d+0x92>
   c6342:	f1c0 0c20 	rsb	ip, r0, #32
   c6346:	fa04 f500 	lsl.w	r5, r4, r0
   c634a:	42be      	cmp	r6, r7
   c634c:	fa21 f40c 	lsr.w	r4, r1, ip
   c6350:	ea45 0504 	orr.w	r5, r5, r4
   c6354:	bf8c      	ite	hi
   c6356:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c635a:	2400      	movls	r4, #0
   c635c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c6360:	fa01 f000 	lsl.w	r0, r1, r0
   c6364:	fa24 f40c 	lsr.w	r4, r4, ip
   c6368:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c636c:	ea40 0204 	orr.w	r2, r0, r4
   c6370:	e7db      	b.n	c632a <__b2d+0x4a>
   c6372:	ea44 030c 	orr.w	r3, r4, ip
   c6376:	460a      	mov	r2, r1
   c6378:	e7d7      	b.n	c632a <__b2d+0x4a>
   c637a:	bf00      	nop
   c637c:	3ff00000 	.word	0x3ff00000

000c6380 <__d2b>:
   c6380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c6384:	4689      	mov	r9, r1
   c6386:	2101      	movs	r1, #1
   c6388:	ec57 6b10 	vmov	r6, r7, d0
   c638c:	4690      	mov	r8, r2
   c638e:	f7ff fc09 	bl	c5ba4 <_Balloc>
   c6392:	4604      	mov	r4, r0
   c6394:	b930      	cbnz	r0, c63a4 <__d2b+0x24>
   c6396:	4602      	mov	r2, r0
   c6398:	4b25      	ldr	r3, [pc, #148]	; (c6430 <__d2b+0xb0>)
   c639a:	4826      	ldr	r0, [pc, #152]	; (c6434 <__d2b+0xb4>)
   c639c:	f240 310a 	movw	r1, #778	; 0x30a
   c63a0:	f7f7 ff2e 	bl	be200 <__assert_func>
   c63a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c63a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c63ac:	bb35      	cbnz	r5, c63fc <__d2b+0x7c>
   c63ae:	2e00      	cmp	r6, #0
   c63b0:	9301      	str	r3, [sp, #4]
   c63b2:	d028      	beq.n	c6406 <__d2b+0x86>
   c63b4:	4668      	mov	r0, sp
   c63b6:	9600      	str	r6, [sp, #0]
   c63b8:	f7ff fd06 	bl	c5dc8 <__lo0bits>
   c63bc:	9900      	ldr	r1, [sp, #0]
   c63be:	b300      	cbz	r0, c6402 <__d2b+0x82>
   c63c0:	9a01      	ldr	r2, [sp, #4]
   c63c2:	f1c0 0320 	rsb	r3, r0, #32
   c63c6:	fa02 f303 	lsl.w	r3, r2, r3
   c63ca:	430b      	orrs	r3, r1
   c63cc:	40c2      	lsrs	r2, r0
   c63ce:	6163      	str	r3, [r4, #20]
   c63d0:	9201      	str	r2, [sp, #4]
   c63d2:	9b01      	ldr	r3, [sp, #4]
   c63d4:	61a3      	str	r3, [r4, #24]
   c63d6:	2b00      	cmp	r3, #0
   c63d8:	bf14      	ite	ne
   c63da:	2202      	movne	r2, #2
   c63dc:	2201      	moveq	r2, #1
   c63de:	6122      	str	r2, [r4, #16]
   c63e0:	b1d5      	cbz	r5, c6418 <__d2b+0x98>
   c63e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c63e6:	4405      	add	r5, r0
   c63e8:	f8c9 5000 	str.w	r5, [r9]
   c63ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c63f0:	f8c8 0000 	str.w	r0, [r8]
   c63f4:	4620      	mov	r0, r4
   c63f6:	b003      	add	sp, #12
   c63f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c63fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6400:	e7d5      	b.n	c63ae <__d2b+0x2e>
   c6402:	6161      	str	r1, [r4, #20]
   c6404:	e7e5      	b.n	c63d2 <__d2b+0x52>
   c6406:	a801      	add	r0, sp, #4
   c6408:	f7ff fcde 	bl	c5dc8 <__lo0bits>
   c640c:	9b01      	ldr	r3, [sp, #4]
   c640e:	6163      	str	r3, [r4, #20]
   c6410:	2201      	movs	r2, #1
   c6412:	6122      	str	r2, [r4, #16]
   c6414:	3020      	adds	r0, #32
   c6416:	e7e3      	b.n	c63e0 <__d2b+0x60>
   c6418:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c641c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6420:	f8c9 0000 	str.w	r0, [r9]
   c6424:	6918      	ldr	r0, [r3, #16]
   c6426:	f7ff fcaf 	bl	c5d88 <__hi0bits>
   c642a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c642e:	e7df      	b.n	c63f0 <__d2b+0x70>
   c6430:	000c86b1 	.word	0x000c86b1
   c6434:	000c875a 	.word	0x000c875a

000c6438 <__ratio>:
   c6438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c643c:	4688      	mov	r8, r1
   c643e:	4669      	mov	r1, sp
   c6440:	4681      	mov	r9, r0
   c6442:	f7ff ff4d 	bl	c62e0 <__b2d>
   c6446:	a901      	add	r1, sp, #4
   c6448:	4640      	mov	r0, r8
   c644a:	ec55 4b10 	vmov	r4, r5, d0
   c644e:	f7ff ff47 	bl	c62e0 <__b2d>
   c6452:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6456:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c645a:	eba3 0c02 	sub.w	ip, r3, r2
   c645e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c6462:	1a9b      	subs	r3, r3, r2
   c6464:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c6468:	ec51 0b10 	vmov	r0, r1, d0
   c646c:	2b00      	cmp	r3, #0
   c646e:	bfd6      	itet	le
   c6470:	460a      	movle	r2, r1
   c6472:	462a      	movgt	r2, r5
   c6474:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c6478:	468b      	mov	fp, r1
   c647a:	462f      	mov	r7, r5
   c647c:	bfd4      	ite	le
   c647e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c6482:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c6486:	4620      	mov	r0, r4
   c6488:	ee10 2a10 	vmov	r2, s0
   c648c:	465b      	mov	r3, fp
   c648e:	4639      	mov	r1, r7
   c6490:	f7fd fd58 	bl	c3f44 <__aeabi_ddiv>
   c6494:	ec41 0b10 	vmov	d0, r0, r1
   c6498:	b003      	add	sp, #12
   c649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c649e <__copybits>:
   c649e:	3901      	subs	r1, #1
   c64a0:	b570      	push	{r4, r5, r6, lr}
   c64a2:	1149      	asrs	r1, r1, #5
   c64a4:	6914      	ldr	r4, [r2, #16]
   c64a6:	3101      	adds	r1, #1
   c64a8:	f102 0314 	add.w	r3, r2, #20
   c64ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c64b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c64b4:	1f05      	subs	r5, r0, #4
   c64b6:	42a3      	cmp	r3, r4
   c64b8:	d30c      	bcc.n	c64d4 <__copybits+0x36>
   c64ba:	1aa3      	subs	r3, r4, r2
   c64bc:	3b11      	subs	r3, #17
   c64be:	f023 0303 	bic.w	r3, r3, #3
   c64c2:	3211      	adds	r2, #17
   c64c4:	42a2      	cmp	r2, r4
   c64c6:	bf88      	it	hi
   c64c8:	2300      	movhi	r3, #0
   c64ca:	4418      	add	r0, r3
   c64cc:	2300      	movs	r3, #0
   c64ce:	4288      	cmp	r0, r1
   c64d0:	d305      	bcc.n	c64de <__copybits+0x40>
   c64d2:	bd70      	pop	{r4, r5, r6, pc}
   c64d4:	f853 6b04 	ldr.w	r6, [r3], #4
   c64d8:	f845 6f04 	str.w	r6, [r5, #4]!
   c64dc:	e7eb      	b.n	c64b6 <__copybits+0x18>
   c64de:	f840 3b04 	str.w	r3, [r0], #4
   c64e2:	e7f4      	b.n	c64ce <__copybits+0x30>

000c64e4 <__any_on>:
   c64e4:	f100 0214 	add.w	r2, r0, #20
   c64e8:	6900      	ldr	r0, [r0, #16]
   c64ea:	114b      	asrs	r3, r1, #5
   c64ec:	4298      	cmp	r0, r3
   c64ee:	b510      	push	{r4, lr}
   c64f0:	db11      	blt.n	c6516 <__any_on+0x32>
   c64f2:	dd0a      	ble.n	c650a <__any_on+0x26>
   c64f4:	f011 011f 	ands.w	r1, r1, #31
   c64f8:	d007      	beq.n	c650a <__any_on+0x26>
   c64fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c64fe:	fa24 f001 	lsr.w	r0, r4, r1
   c6502:	fa00 f101 	lsl.w	r1, r0, r1
   c6506:	428c      	cmp	r4, r1
   c6508:	d10b      	bne.n	c6522 <__any_on+0x3e>
   c650a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c650e:	4293      	cmp	r3, r2
   c6510:	d803      	bhi.n	c651a <__any_on+0x36>
   c6512:	2000      	movs	r0, #0
   c6514:	bd10      	pop	{r4, pc}
   c6516:	4603      	mov	r3, r0
   c6518:	e7f7      	b.n	c650a <__any_on+0x26>
   c651a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c651e:	2900      	cmp	r1, #0
   c6520:	d0f5      	beq.n	c650e <__any_on+0x2a>
   c6522:	2001      	movs	r0, #1
   c6524:	e7f6      	b.n	c6514 <__any_on+0x30>

000c6526 <_calloc_r>:
   c6526:	b513      	push	{r0, r1, r4, lr}
   c6528:	434a      	muls	r2, r1
   c652a:	4611      	mov	r1, r2
   c652c:	9201      	str	r2, [sp, #4]
   c652e:	f7f7 fe57 	bl	be1e0 <_malloc_r>
   c6532:	4604      	mov	r4, r0
   c6534:	b118      	cbz	r0, c653e <_calloc_r+0x18>
   c6536:	9a01      	ldr	r2, [sp, #4]
   c6538:	2100      	movs	r1, #0
   c653a:	f7fd ff8d 	bl	c4458 <memset>
   c653e:	4620      	mov	r0, r4
   c6540:	b002      	add	sp, #8
   c6542:	bd10      	pop	{r4, pc}
   c6544:	0000      	movs	r0, r0
	...

000c6548 <nan>:
   c6548:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6550 <nan+0x8>
   c654c:	4770      	bx	lr
   c654e:	bf00      	nop
   c6550:	00000000 	.word	0x00000000
   c6554:	7ff80000 	.word	0x7ff80000

000c6558 <__ascii_wctomb>:
   c6558:	b149      	cbz	r1, c656e <__ascii_wctomb+0x16>
   c655a:	2aff      	cmp	r2, #255	; 0xff
   c655c:	bf85      	ittet	hi
   c655e:	238a      	movhi	r3, #138	; 0x8a
   c6560:	6003      	strhi	r3, [r0, #0]
   c6562:	700a      	strbls	r2, [r1, #0]
   c6564:	f04f 30ff 	movhi.w	r0, #4294967295
   c6568:	bf98      	it	ls
   c656a:	2001      	movls	r0, #1
   c656c:	4770      	bx	lr
   c656e:	4608      	mov	r0, r1
   c6570:	4770      	bx	lr
	...

000c6574 <__aeabi_d2lz>:
   c6574:	b538      	push	{r3, r4, r5, lr}
   c6576:	2200      	movs	r2, #0
   c6578:	2300      	movs	r3, #0
   c657a:	4604      	mov	r4, r0
   c657c:	460d      	mov	r5, r1
   c657e:	f7fd fe29 	bl	c41d4 <__aeabi_dcmplt>
   c6582:	b928      	cbnz	r0, c6590 <__aeabi_d2lz+0x1c>
   c6584:	4620      	mov	r0, r4
   c6586:	4629      	mov	r1, r5
   c6588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c658c:	f7fd bef8 	b.w	c4380 <__aeabi_d2ulz>
   c6590:	4620      	mov	r0, r4
   c6592:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c6596:	f7fd fef3 	bl	c4380 <__aeabi_d2ulz>
   c659a:	4240      	negs	r0, r0
   c659c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c65a0:	bd38      	pop	{r3, r4, r5, pc}
   c65a2:	bf00      	nop

000c65a4 <dynalib_user>:
   c65a4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c65b4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c65c4:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c65d4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c65e4:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c65f4:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c6604:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c6614:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c6624:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c6634:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c6644:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c6654:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c6664:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c6674:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c6684:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c6694:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c66a4:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c66b4:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c66c4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c66d4:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c66e4:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c66f4:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c6704:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c6714:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6724:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c6734:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c6744:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c6754:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c6764:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c6774:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c6784:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   c6794:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   c67a4:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   c67b4:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   c67c4:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   c67d4:	7463 006c 7325 2520 2073 6425 2520 2064     ctl.%s %s %d %d 
   c67e4:	6425 4e00 7765 7420 7261 6567 2074 5047     %d.New target GP
   c67f4:	2c53 4c20 7461 203a 6625 4c20 6e6f 203a     S, Lat: %f Lon: 
   c6804:	6625 6d00 7274 5200 6365 6965 6576 2064     %f.mtr.Received 
   c6814:	6f4d 6f74 2072 6f43 6d6d 6e61 3a64 4c20     Motor Command: L
   c6824:	7053 6565 3d64 6425 522c 7053 6565 3d64     Speed=%d,RSpeed=
   c6834:	6425 7200 7165 7000 7374 5b00 5550 5354     %d.req.pts.[PUTS
   c6844:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c6854:	2067 6f43 6d6d 6e61 3a64 2520 0073 7073     g Command: %s.sp
   c6864:	0063 7768 0061 6d64 0070 6765 0070 7325     c.hwa.dmp.egp.%s
   c6874:	2520 0073 495b 464e 5d4f 5220 6365 6965      %s.[INFO] Recei
   c6884:	6576 2064 544c 2045 654d 7373 6761 3a65     ved LTE Message:
   c6894:	2520 0073 654e 2077 5442 4320 6d6f 616d      %s.New BT Comma
   c68a4:	646e 003a 495b 464e 5d4f 5220 6365 6965     nd:.[INFO] Recei
   c68b4:	6576 2064 4c42 2045 654d 7373 6761 3a65     ved BLE Message:
   c68c4:	2520 0073 7245 6f72 2c72 4320 756f 646c      %s.Error, Could
   c68d4:	6e20 746f 6920 696e 6974 6c61 7a69 2065      not initialize 
   c68e4:	5047 0053 614c 3a74 2520 2066 6f4c 206e     GPS.Lat: %f Lon 
   c68f4:	6625 5420 614c 3a74 2520 2066 4c54 6e6f     %f TLat: %f TLon
   c6904:	203a 6625 202c 6f43 706d 7361 3a73 2520     : %f, Compass: %
   c6914:	2c66 5420 6172 6576 206c 6468 203a 6625     f, Travel hd: %f
   c6924:	202c 2054 6544 746c 3a61 2520 2c66 4420     , T Delta: %f, D
   c6934:	7369 3a74 2520 0066 3025 6432 3025 6432     ist: %f.%02d%02d
   c6944:	3025 6434 3025 6432 3025 6432 3025 6432     %04d%02d%02d%02d
   c6954:	2500 2c73 6625 252c 2c66 6625 252c 2c66     .%s,%f,%f,%f,%f,
   c6964:	6625 252c 2c66 6625 4e00 7765 5820 6542     %f,%f,%f.New XBe
   c6974:	2065 6f43 6d6d 6e61 3a64 5b00 4e49 4f46     e Command:.[INFO
   c6984:	205d 6552 6563 7669 6465 5820 6542 2065     ] Received XBee 
   c6994:	654d 7373 6761 3a65 2520 0073 6e45 6574     Message: %s.Ente
   c69a4:	6972 676e 4420 7461 2061 664f 6c66 616f     ring Data Offloa
   c69b4:	6564 2072 6f4d 6564 2f00 4500 7272 726f     der Mode./.Error
   c69c4:	202c 6f63 6c75 2064 6f6e 2074 706f 6e65     , could not open
   c69d4:	7220 6f6f 2074 4453 6320 7261 2064 6964      root SD card di
   c69e4:	6572 7463 726f 0079 6157 7469 6e69 2067     rectory.Waiting 
   c69f4:	6f66 2072 4343 7548 2062 6f63 6e6e 6365     for CCHub connec
   c6a04:	6974 6e6f 2e2e 002e 7453 7261 6974 676e     tion....Starting
   c6a14:	7420 6172 736e 6566 2e72 2e2e 4300 6568      transfer....Che
   c6a24:	6b63 6e69 2067 6669 6620 6c69 2065 7325     cking if file %s
   c6a34:	6920 2073 2061 632e 7673 6f20 2072 742e      is a .csv or .t
   c6a44:	7478 2e2e 002e 632e 7673 6600 6c69 6465     xt.....csv.filed
   c6a54:	6e6f 0065 6966 656c 616e 656d 5300 6e65     one.filename.Sen
   c6a64:	6964 676e 6320 6d6f 616d 646e 2520 0073     ding command %s.
   c6a74:	6946 656c 2520 2073 7369 6120 2e20 7363     File %s is a .cs
   c6a84:	2076 726f 2e20 7874 2074 7270 6e69 6974     v or .txt printi
   c6a94:	676e 6420 7461 0061 6966 656c 6f63 706d     ng data.filecomp
   c6aa4:	2500 2573 3230 0078 6f42 3174 6164 0074     .%s%02x.Bot1dat.
   c6ab4:	2542 4364 7343 736e 3025 362e 2066 3025     B%dCCsns%0.6f %0
   c6ac4:	362e 2066 6425 2520 2064 6425 2520 2064     .6f %d %d %d %d 
   c6ad4:	6425 0020 6553 646e 6e69 2067 2061 7473     %d .Sending a st
   c6ae4:	7461 7375 7520 6470 7461 2165 4200 6425     atus update!.B%d
   c6af4:	4241 7573 2570 2064 6425 2520 2e30 6636     ABsup%d %d %0.6f
   c6b04:	2520 2e30 6636 0020 4343 7548 0062 6e49      %0.6f .CCHub.In
   c6b14:	7570 2074 6f43 6d6d 6e61 0064 6146 6c69     put Command.Fail
   c6b24:	6465 7420 206f 6966 646e 4c20 5349 4d33     ed to find LIS3M
   c6b34:	4c44 6320 6968 0070 494c 3353 444d 204c     DL chip.LIS3MDL 
   c6b44:	6f46 6e75 2164 5700 7461 7265 6f42 0074     Found!.WaterBot.
   c6b54:	4c5f 474f 742e 7478 4500 7272 726f 203a     _LOG.txt.Error: 
   c6b64:	6f63 6c75 2064 6f6e 2074 6f63 6e6e 6365     could not connec
   c6b74:	2074 6f74 5320 2044 6163 6472 0021 6954     t to SD card!.Ti
   c6b84:	656d 4c2c 7461 7469 6475 2c65 6f4c 676e     me,Latitude,Long
   c6b94:	7469 6475 2c65 6554 706d 7265 7461 7275     itude,Temperatur
   c6ba4:	2c65 4870 442c 7369 6f73 766c 6465 4f20     e,pH,Dissolved O
   c6bb4:	2c32 6f43 646e 6375 6974 6976 7974 3020     2,Conductivity 0
   c6bc4:	312e 2c4b 6f43 646e 6375 6974 6976 7974     .1K,Conductivity
   c6bd4:	3120 004b 495b 464e 5d4f 5720 7461 7265      1K.[INFO] Water
   c6be4:	6f42 2074 6425 203a 7453 7261 6574 2064     Bot %d: Started 
   c6bf4:	6f4c 6767 6e69 2167 7400 0078 7872 6f00     Logging!.tx.rx.o
   c6c04:	6666 6400 6762 0000                         ff.dbg..

000c6c0c <_ZTVN8particle11SPISettingsE>:
	...
   c6c14:	4315 000b 40d1 000b 4183 000b               .C...@...A..

000c6c20 <_ZTV5Timer>:
	...
   c6c28:	4481 000b 44d5 000b 41e9 000b               .D...D...A..

000c6c34 <_ZTVN5spark10LogHandlerE>:
	...
   c6c44:	40a9 000b 40d3 000b                         .@...@..

000c6c4c <_ZTVN8particle9LEDStatusE>:
	...
   c6c54:	4251 000b 426d 000b 40dd 000b               QB..mB...@..

000c6c60 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6c68:	4281 000b 42b5 000b 08e9 000c 40d5 000b     .B...B.......@..

000c6c78 <_ZTV4File>:
	...
   c6c80:	4181 000b 4191 000b 41d1 000b 41cb 000b     .A...A...A...A..
   c6c90:	40df 000b 41ab 000b 41a5 000b 419f 000b     .@...A...A...A..
   c6ca0:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6cb0:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6cc0:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6cd0:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6ce0:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6cf0:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6d00:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6d10:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6d20:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6d30:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6d40:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6d50:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6d5c <CSWTCH.395>:
   c6d5c:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6d6c:	ffff 00ff ff00 00ff ffff 0000 6573 5074     ............setP
   c6d7c:	6361 656b 4374 6766 6150 6c79 616f 5364     acketCfgPayloadS
   c6d8c:	7a69 3a65 5a20 7265 206f 6170 6c79 616f     ize: Zero payloa
   c6d9c:	5364 7a69 2165 7300 7465 6150 6b63 7465     dSize!.setPacket
   c6dac:	6643 5067 7961 6f6c 6461 6953 657a 203a     CfgPayloadSize: 
   c6dbc:	4152 204d 6c61 6f6c 2063 6166 6c69 6465     RAM alloc failed
   c6dcc:	0021 6573 5074 6361 656b 4374 6766 6150     !.setPacketCfgPa
   c6ddc:	6c79 616f 5364 7a69 3a65 5220 4d41 7220     yloadSize: RAM r
   c6dec:	7365 7a69 2065 6166 6c69 6465 0021 4e47     esize failed!.GN
   c6dfc:	4747 0041 5047 5456 0047 4e47 5456 0047     GGA.GPVTG.GNVTG.
   c6e0c:	5047 4d52 0043 4e47 4d52 0043 5047 445a     GPRMC.GNRMC.GPZD
   c6e1c:	0041 4e47 445a 0041 5047 4747 0041 6573     A.GNZDA.GPGGA.se
   c6e2c:	646e 7053 4369 6d6f 616d 646e 203a 6f6e     ndSpiCommand: no
   c6e3c:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   c6e4c:	6e6f 6620 726f 5320 4950 4220 6675 6566     on for SPI Buffe
   c6e5c:	2172 7300 6e65 5364 6970 6f43 6d6d 6e61     r!.sendSpiComman
   c6e6c:	3a64 0020 4c43 3a53 4e00 5641 4100 4b43     d: .CLS:.NAV.ACK
   c6e7c:	4300 4746 4d00 4e4f 2000 4449 003a 5650     .CFG.MON. ID:.PV
   c6e8c:	0054 4152 4554 5300 5641 0045 4c20 6e65     T.RATE.SAVE. Len
   c6e9c:	203a 7830 2000 6150 6c79 616f 3a64 2000     : 0x. Payload:. 
   c6eac:	6150 6c79 616f 3a64 4920 4e47 524f 4445     Payload: IGNORED
   c6ebc:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c6ecc:	3a72 5720 7261 696e 676e 202e 6966 656c     r: Warning. file
   c6edc:	7542 6666 7265 6953 657a 6920 2073 657a     BufferSize is ze
   c6eec:	6f72 202e 6144 6174 6c20 676f 6967 676e     ro. Data logging
   c6efc:	6920 2073 6f6e 2074 6f70 7373 6269 656c      is not possible
   c6f0c:	002e 7263 6165 6574 6946 656c 7542 6666     ..createFileBuff
   c6f1c:	7265 203a 6157 6e72 6e69 2e67 4620 6c69     er: Warning. Fil
   c6f2c:	2065 7562 6666 7265 6120 726c 6165 7964     e buffer already
   c6f3c:	6520 6978 7473 2e73 5320 696b 7070 6e69      exists. Skippin
   c6f4c:	2e67 2e2e 6300 6572 7461 4665 6c69 4265     g....createFileB
   c6f5c:	6675 6566 3a72 5220 4d41 6120 6c6c 636f     uffer: RAM alloc
   c6f6c:	6620 6961 656c 2164 6300 6572 7461 4665      failed!.createF
   c6f7c:	6c69 4265 6675 6566 3a72 6620 6c69 4265     ileBuffer: fileB
   c6f8c:	6675 6566 5372 7a69 2065 7369 203a 7300     ufferSize is: .s
   c6f9c:	6f74 6572 6150 6b63 7465 203a 6966 656c     torePacket: file
   c6fac:	6220 6675 6566 2072 6f6e 2074 7661 6961      buffer not avai
   c6fbc:	616c 6c62 2165 7300 6f74 6572 6150 6b63     lable!.storePack
   c6fcc:	7465 203a 6e69 7573 6666 6369 6569 746e     et: insufficient
   c6fdc:	7320 6170 6563 6120 6176 6c69 6261 656c      space available
   c6fec:	2021 6144 6174 7720 6c69 206c 6562 6c20     ! Data will be l
   c6ffc:	736f 2174 7000 6f72 6563 7373 4255 7058     ost!.processUBXp
   c700c:	6361 656b 3a74 7020 6361 656b 5574 5842     acket: packetUBX
   c701c:	474d 4141 4b43 6920 2073 7566 6c6c 202e     MGAACK is full. 
   c702c:	4341 204b 6977 6c6c 6220 2065 6f6c 7473     ACK will be lost
   c703c:	0021 7270 636f 7365 5573 5842 6170 6b63     !.processUBXpack
   c704c:	7465 203a 6170 6b63 7465 4255 4d58 4147     et: packetUBXMGA
   c705c:	4244 2044 7369 6620 6c75 2e6c 4420 4442     DBD is full. DBD
   c706c:	6420 7461 2061 6977 6c6c 6220 2065 6f6c      data will be lo
   c707c:	7473 0021 7270 636f 7365 5573 5842 203a     st!.processUBX: 
   c708c:	6567 4d74 7861 6150 6c79 616f 5364 7a69     getMaxPayloadSiz
   c709c:	2065 6572 7574 6e72 6465 5a20 5245 214f     e returned ZERO!
   c70ac:	2021 6c43 7361 3a73 3020 0078 7270 636f     ! Class: 0x.proc
   c70bc:	7365 5573 5842 203a 414e 4b43 7220 6365     essUBX: NACK rec
   c70cc:	6965 6576 3a64 5220 7165 6575 7473 6465     eived: Requested
   c70dc:	4320 616c 7373 203a 7830 2000 6552 7571      Class: 0x. Requ
   c70ec:	7365 6574 2064 4449 203a 7830 7000 6f72     ested ID: 0x.pro
   c70fc:	6563 7373 4255 3a58 6920 636e 6d6f 6e69     cessUBX: incomin
   c710c:	2067 6122 7475 6d6f 7461 6369 2022 656d     g "automatic" me
   c711c:	7373 6761 3a65 4320 616c 7373 203a 7830     ssage: Class: 0x
   c712c:	4900 636e 6d6f 6e69 3a67 5320 7a69 3a65     .Incoming: Size:
   c713c:	0020 5220 6365 6965 6576 3a64 0020 6170      . Received: .pa
   c714c:	6b63 7465 6643 2067 6f6e 2077 6176 696c     cketCfg now vali
   c715c:	0064 6170 6b63 7465 6341 206b 6f6e 2077     d.packetAck now 
   c716c:	6176 696c 0064 6170 6b63 7465 6643 2067     valid.packetCfg 
   c717c:	6c63 7361 4173 646e 4449 616d 6374 0068     classAndIDmatch.
   c718c:	6170 6b63 7465 6341 206b 6c63 7361 4173     packetAck classA
   c719c:	646e 4449 616d 6374 0068 6843 6365 736b     ndIDmatch.Checks
   c71ac:	6d75 6620 6961 656c 3a64 2000 6863 6365     um failed:. chec
   c71bc:	736b 6d75 3a41 0020 6320 6568 6b63 7573     ksumA: . checksu
   c71cc:	426d 203a 2000 6f72 6c6c 6e69 4367 6568     mB: . rollingChe
   c71dc:	6b63 7573 416d 203a 2000 6f72 6c6c 6e69     cksumA: . rollin
   c71ec:	4367 6568 6b63 7573 426d 203a 7000 6f72     gChecksumB: .pro
   c71fc:	6563 7373 4255 3a58 6220 6675 6566 2072     cessUBX: buffer 
   c720c:	766f 7265 7572 206e 6564 6574 7463 6465     overrun detected
   c721c:	0021 7270 636f 7365 5573 5842 203a 6f63     !.processUBX: co
   c722c:	6e75 6574 2072 6968 2074 616d 6978 756d     unter hit maximu
   c723c:	5f6d 6170 6c79 616f 5f64 6973 657a 2b20     m_payload_size +
   c724c:	3620 0021 6120 7463 7669 5065 6361 656b      6!. activePacke
   c725c:	4274 6675 6566 3a72 0020 6d20 7861 6d69     tBuffer: . maxim
   c726c:	6d75 705f 7961 6f6c 6461 735f 7a69 3a65     um_payload_size:
   c727c:	0020 7473 726f 4665 6c69 4265 7479 7365      .storeFileBytes
   c728c:	203a 6966 656c 6220 6675 6566 2072 6f6e     : file buffer no
   c729c:	2074 7661 6961 616c 6c62 2165 7300 6f74     t available!.sto
   c72ac:	6572 6946 656c 7942 6574 3a73 6920 736e     reFileBytes: ins
   c72bc:	6675 6966 6963 6e65 2074 7073 6361 2065     ufficient space 
   c72cc:	7661 6961 616c 6c62 2165 4420 7461 2061     available! Data 
   c72dc:	6977 6c6c 6220 2065 6f6c 7473 0021 7270     will be lost!.pr
   c72ec:	636f 7365 3a73 6720 7465 614d 5078 7961     ocess: getMaxPay
   c72fc:	6f6c 6461 6953 657a 7220 7465 7275 656e     loadSize returne
   c730c:	2064 455a 4f52 2121 4320 616c 7373 203a     d ZERO!! Class: 
   c731c:	7830 7000 6f72 6563 7373 203a 656d 6f6d     0x.process: memo
   c732c:	7972 6920 2073 6c61 6572 6461 2079 6c61     ry is already al
   c733c:	6f6c 6163 6574 2064 6f66 2072 6170 6c79     located for payl
   c734c:	616f 4164 7475 216f 4420 6c65 7465 6e69     oadAuto! Deletin
   c735c:	2e67 2e2e 7000 6f72 6563 7373 203a 656d     g....process: me
   c736c:	6f6d 7972 6120 6c6c 636f 7461 6f69 206e     mory allocation 
   c737c:	6166 6c69 6465 6620 726f 2220 7561 6f74     failed for "auto
   c738c:	616d 6974 2263 6d20 7365 6173 6567 203a     matic" message: 
   c739c:	6c43 7361 3a73 3020 0078 7270 636f 7365     Class: 0x.proces
   c73ac:	3a73 2220 7561 6f74 616d 6974 2263 6d20     s: "automatic" m
   c73bc:	7365 6173 6567 6320 756f 646c 6f20 6576     essage could ove
   c73cc:	7772 6972 6574 6420 7461 0061 7270 636f     rwrite data.proc
   c73dc:	7365 3a73 6920 636e 6d6f 6e69 2067 6122     ess: incoming "a
   c73ec:	7475 6d6f 7461 6369 2022 656d 7373 6761     utomatic" messag
   c73fc:	3a65 4320 616c 7373 203a 7830 7000 6f72     e: Class: 0x.pro
   c740c:	6563 7373 203a 455a 4f52 4c20 4e45 5447     cess: ZERO LENGT
   c741c:	2048 6170 6b63 7465 7220 6365 6965 6576     H packet receive
   c742c:	3a64 4320 616c 7373 203a 7830 7000 6f72     d: Class: 0x.pro
   c743c:	6563 7373 203a 4341 204b 6572 6563 7669     cess: ACK receiv
   c744c:	6465 7720 7469 2068 6c2e 6e65 2120 203d     ed with .len != 
   c745c:	3a32 4320 616c 7373 203a 7830 2000 656c     2: Class: 0x. le
   c746c:	3a6e 0020 7270 636f 7365 3a73 4e20 454d     n: .process: NME
   c747c:	2041 7562 6666 7265 6920 2073 7566 6c6c     A buffer is full
   c748c:	0021 7270 636f 7365 3a73 4e20 454d 2041     !.process: NMEA 
   c749c:	6863 6365 736b 6d75 6620 6961 206c 3228     checksum fail (2
   c74ac:	2129 4520 7078 6365 6574 2064 2000 6f47     )! Expected . Go
   c74bc:	2074 7000 6f72 6563 7373 203a 4d4e 4145     t .process: NMEA
   c74cc:	6320 6568 6b63 7573 206d 6166 6c69 2820      checksum fail (
   c74dc:	2931 0021 6863 6365 556b 6c62 786f 3249     1)!.checkUbloxI2
   c74ec:	3a43 4920 4332 6520 7272 726f 203a 6e65     C: I2C error: en
   c74fc:	5464 6172 736e 696d 7373 6f69 206e 6572     dTransmission re
   c750c:	7574 6e72 6465 0020 6863 6365 556b 6c62     turned .checkUbl
   c751c:	786f 3249 3a43 4920 4332 6520 7272 726f     oxI2C: I2C error
   c752c:	203a 6572 7571 7365 4674 6f72 206d 7830     : requestFrom 0x
   c753c:	4446 7220 7465 7275 656e 2064 6300 6568     FD returned .che
   c754c:	6b63 6255 6f6c 4978 4332 203a 4b4f 202c     ckUbloxI2C: OK, 
   c755c:	657a 6f72 6220 7479 7365 6120 6176 6c69     zero bytes avail
   c756c:	6261 656c 6300 6568 6b63 6255 6f6c 4978     able.checkUbloxI
   c757c:	4332 203a 614c 6772 2065 6170 6b63 7465     2C: Large packet
   c758c:	6f20 2066 2000 7962 6574 2073 6572 6563      of . bytes rece
   c759c:	7669 6465 6300 6568 6b63 6255 6f6c 4978     ived.checkUbloxI
   c75ac:	4332 203a 6552 6461 6e69 2067 2000 7962     2C: Reading . by
   c75bc:	6574 0073 6177 7469 6f46 4172 4b43 6552     tes.waitForACKRe
   c75cc:	7073 6e6f 6573 203a 6176 696c 2064 6164     sponse: valid da
   c75dc:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c75ec:	7220 6365 6965 6576 2064 6661 6574 2072      received after 
   c75fc:	2000 736d 6365 7700 6961 4674 726f 4341     . msec.waitForAC
   c760c:	524b 7365 6f70 736e 3a65 6e20 206f 6164     KResponse: no da
   c761c:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c762c:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c763c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c764c:	6220 6965 676e 4f20 4556 5752 4952 5454      being OVERWRITT
   c765c:	4e45 6120 7466 7265 0020 6177 7469 6f46     EN after .waitFo
   c766c:	4172 4b43 6552 7073 6e6f 6573 203a 5243     rACKResponse: CR
   c767c:	2043 6166 6c69 6465 6120 7466 7265 0020     C failed after .
   c768c:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c769c:	6573 203a 6164 6174 7720 7361 4e20 544f     se: data was NOT
   c76ac:	4341 4e4b 574f 454c 4744 4445 2820 414e     ACKNOWLEDGED (NA
   c76bc:	4b43 2029 6661 6574 2072 7700 6961 4674     CK) after .waitF
   c76cc:	726f 4341 524b 7365 6f70 736e 3a65 5620     orACKResponse: V
   c76dc:	4c41 4449 6420 7461 2061 6e61 2064 4e49     ALID data and IN
   c76ec:	4156 494c 2044 4341 204b 6572 6563 7669     VALID ACK receiv
   c76fc:	6465 6120 7466 7265 0020 6177 7469 6f46     ed after .waitFo
   c770c:	4172 4b43 6552 7073 6e6f 6573 203a 4e49     rACKResponse: IN
   c771c:	4156 494c 2044 6164 6174 6120 646e 4920     VALID data and I
   c772c:	564e 4c41 4449 4120 4b43 7220 6365 6965     NVALID ACK recei
   c773c:	6576 2064 6661 6574 2072 7700 6961 4674     ved after .waitF
   c774c:	726f 4341 524b 7365 6f70 736e 3a65 5420     orACKResponse: T
   c775c:	4d49 4f45 5455 7720 7469 2068 6176 696c     IMEOUT with vali
   c776c:	2064 6164 6174 6120 7466 7265 0020 6d20     d data after . m
   c777c:	6573 2e63 0020 6177 7469 6f46 4172 4b43     sec. .waitForACK
   c778c:	6552 7073 6e6f 6573 203a 4954 454d 554f     Response: TIMEOU
   c779c:	2054 6661 6574 2072 2000 736d 6365 002e     T after . msec..
   c77ac:	6177 7469 6f46 4e72 416f 4b43 6552 7073     waitForNoACKResp
   c77bc:	6e6f 6573 203a 6176 696c 2064 6164 6174     onse: valid data
   c77cc:	7720 7469 2068 4c43 2f53 4449 6d20 7461      with CLS/ID mat
   c77dc:	6863 6120 7466 7265 0020 6177 7469 6f46     ch after .waitFo
   c77ec:	4e72 416f 4b43 6552 7073 6e6f 6573 203a     rNoACKResponse: 
   c77fc:	6164 6174 6220 6965 676e 4f20 4556 5752     data being OVERW
   c780c:	4952 5454 4e45 6120 7466 7265 0020 6177     RITTEN after .wa
   c781c:	7469 6f46 4e72 416f 4b43 6552 7073 6e6f     itForNoACKRespon
   c782c:	6573 203a 4c43 2f53 4449 6d20 7461 6863     se: CLS/ID match
   c783c:	6220 7475 6620 6961 656c 2064 5243 2043      but failed CRC 
   c784c:	6661 6574 2072 7700 6961 4674 726f 6f4e     after .waitForNo
   c785c:	4341 524b 7365 6f70 736e 3a65 5420 4d49     ACKResponse: TIM
   c786c:	4f45 5455 6120 7466 7265 0020 6d20 6573     EOUT after . mse
   c787c:	2e63 4e20 206f 6170 6b63 7465 7220 6365     c. No packet rec
   c788c:	6965 6576 2e64 0a00 6553 646e 6e69 3a67     eived...Sending:
   c789c:	0020 6553 646e 4920 4332 4320 6d6f 616d      .Send I2C Comma
   c78ac:	646e 6620 6961 656c 0064 6573 646e 6f43     nd failed.sendCo
   c78bc:	6d6d 6e61 3a64 5720 6961 6974 676e 6620     mmand: Waiting f
   c78cc:	726f 4120 4b43 7220 7365 6f70 736e 0065     or ACK response.
   c78dc:	6573 646e 6f43 6d6d 6e61 3a64 5720 6961     sendCommand: Wai
   c78ec:	6974 676e 6620 726f 4e20 206f 4341 204b     ting for No ACK 
   c78fc:	6572 7073 6e6f 6573 6900 696e 5074 6361     response.initPac
   c790c:	656b 5574 5842 414e 5056 5456 203a 4152     ketUBXNAVPVT: RA
   c791c:	204d 6c61 6f6c 2063 6166 6c69 6465 0021     M alloc failed!.
   c792c:	6e69 7469 6150 6b63 7465 4255 4358 4746     initPacketUBXCFG
   c793c:	5250 3a54 5220 4d41 6120 6c6c 636f 6620     PRT: RAM alloc f
   c794c:	6961 656c 2164 6200 6765 6e69 203a 7369     ailed!.begin: is
   c795c:	6f43 6e6e 6365 6574 2064 202d 6573 6f63     Connected - seco
   c796c:	646e 6120 7474 6d65 7470 6200 6765 6e69     nd attempt.begin
   c797c:	203a 7369 6f43 6e6e 6365 6574 2064 202d     : isConnected - 
   c798c:	6874 7269 2064 7461 6574 706d 0074 6562     third attempt.be
   c799c:	6967 3a6e 7420 6968 6472 6120 7474 6d65     gin: third attem
   c79ac:	7470 6620 6961 656c 2e64 4120 7373 6d75     pt failed. Assum
   c79bc:	6e69 2067 7573 6363 7365 2e73 2e2e 0000     ing success.....

000c79cc <CSWTCH.334>:
   c79cc:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c79dc:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c79ec:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7a0c:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7a34:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7a88:	0000 0010 0004                              ......

000c7a8e <CSWTCH.335>:
   c7a8e:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7aaa:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7ab6 <CSWTCH.336>:
   c7ab6:	2048 4c24 5349 4d33 4c44 0000 0000          H $LIS3MDL....

000c7ac4 <CSWTCH.26>:
   c7ac4:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c7ad4 <_ZTV16Adafruit_LIS3MDL>:
	...
   c7adc:	cfff 000b d049 000b cffd 000b d0f9 000b     ....I...........
   c7aec:	d001 000b                                   ....

000c7af0 <_ZTVN5spark13EthernetClassE>:
	...
   c7af8:	e28f 000b e285 000b e27b 000b e271 000b     ........{...q...
   c7b08:	e265 000b e259 000b 1939 000c 1941 000c     e...Y...9...A...
   c7b18:	e24d 000b e245 000b e23b 000b e231 000b     M...E...;...1...
   c7b28:	1971 000c                                   q...

000c7b2c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7b2c:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c7b3c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c7b4c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c7b5c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c7b6c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c7b7c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c7b8c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c7b9c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c7bac:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c7bbc:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c7bcc:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   c7bdc:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   c7bec:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   c7bfc:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   c7c0c:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   c7c1c:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   c7c2c:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   c7c3c:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   c7c4c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   c7c5c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   c7c6c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   c7c7c:	6369 002e                                   ic..

000c7c80 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7c88:	e827 000b e889 000b e95d 000b e8b3 000b     '.......].......
   c7c98:	e829 000b                                   )...

000c7c9c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7ca4:	e823 000b e897 000b e825 000b e8b9 000b     #.......%.......
   c7cb4:	e849 000b                                   I...

000c7cb8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7cc0:	e821 000b e8a5 000b f119 000b e8bf 000b     !...............
   c7cd0:	e869 000b                                   i...

000c7cd4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7ce0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7cf2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7cf2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7d02 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7d02:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   c7d12:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   c7d22:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   c7d32:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   c7d42:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   c7d52:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   c7d62:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   c7d72:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000c7d84 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7d8c:	fd35 000b fd5b 000b fd19 000b 1a8b 000c     5...[...........

000c7d9c <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7da4:	0191 000c 01a9 000c 08e9 000c 40d5 000b     .............@..

000c7db4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7dbc:	01bd 000c 01d1 000c 0a8d 000c fd21 000b     ............!...

000c7dcc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7dd4:	fd33 000b fd69 000b 084d 000c fd23 000b     3...i...M...#...

000c7de4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7dec:	fd31 000b fd77 000b 00f9 000c fd99 000b     1...w...........
   c7dfc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   c7e0c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000c7e18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e20:	0ef9 000c 0eff 000c 0f3d 000c 0f0d 000c     ........=.......
   c7e30:	0efb 000c                                   ....

000c7e34 <_ZTV9IPAddress>:
	...
   c7e3c:	1485 000c 1475 000c 1477 000c               ....u...w...

000c7e48 <_ZTV9USBSerial>:
	...
   c7e50:	156b 000c 15d3 000c 15a9 000c fb7d 000b     k...........}...
   c7e60:	159b 000c 156d 000c 157d 000c 15cd 000c     ....m...}.......
   c7e70:	158d 000c 1565 000c                         ....e...

000c7e78 <_ZTVN5spark13CellularClassE>:
	...
   c7e80:	16db 000c 16d1 000c 16c7 000c 167d 000c     ............}...
   c7e90:	16bb 000c 16af 000c 1939 000c 1941 000c     ........9...A...
   c7ea0:	16a3 000c 169b 000c 1691 000c 1687 000c     ................
   c7eb0:	1971 000c                                   q...

000c7eb4 <_ZTV11USARTSerial>:
	...
   c7ebc:	1715 000c 1781 000c 1759 000c fb7d 000b     ........Y...}...
   c7ecc:	1729 000c 1745 000c 1737 000c 1753 000c     )...E...7...S...
   c7edc:	1717 000c 171b 000c                         ........

000c7ee4 <_ZTV7TwoWire>:
	...
   c7eec:	17f5 000c 183f 000c 1817 000c 17f7 000c     ....?...........
   c7efc:	181f 000c 1827 000c 182f 000c 1837 000c     ....'.../...7...

000c7f0c <_ZTVN5spark12NetworkClassE>:
	...
   c7f14:	18f9 000c 1903 000c 190d 000c 1917 000c     ................
   c7f24:	1921 000c 192d 000c 1939 000c 1941 000c     !...-...9...A...
   c7f34:	1949 000c 1955 000c 195d 000c 1967 000c     I...U...]...g...
   c7f44:	1971 000c 7525 7500 3025 7834                q...%u.u%04x.

000c7f51 <_ZSt7nothrow>:
	...

000c7f52 <_ZTSSt19_Sp_make_shared_tag>:
   c7f52:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c7f62:	6572 5f64 6174 0067 0000                    red_tag...

000c7f6c <_ZTISt19_Sp_make_shared_tag>:
   c7f6c:	7fac 000c 7f52 000c                         ....R...

000c7f74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7f74:	800c 000c 7f80 000c 8030 000c               ........0...

000c7f80 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c7f80:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c7f90:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c7fa0:	0045 0000                                   E...

000c7fa4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7fa4:	0000 0000 7f74 000c 205d 000c 2071 000c     ....t...] ..q ..
   c7fb4:	2205 000c 2205 000c 20db 000c 201d 000c     ."..."... ... ..
   c7fc4:	20c3 000c 2085 000c 204f 000c               . ... ..O ..

000c7fd0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c7fd0:	800c 000c 7fdc 000c 7f74 000c               ........t...

000c7fdc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7fdc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7fec:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7ffc:	666e 456f 0000 0000                         nfoE....

000c8004 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c8004:	0000 0000 7fd0 000c 2105 000c 2119 000c     .........!...!..
   c8014:	2205 000c 2205 000c 20db 000c 201d 000c     ."..."... ... ..
   c8024:	21d9 000c 2165 000c 212d 000c               .!..e!..-!..

000c8030 <_ZTISt9type_info>:
   c8030:	7fac 000c 8038 000c                         ....8...

000c8038 <_ZTSSt9type_info>:
   c8038:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000c8048 <CSWTCH.8>:
   c8048:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c8058:	21d2 7f33 d97c c002                         .!3.|...

000c8060 <CSWTCH.9>:
   c8060:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c8070:	2d18 5444 21fb c009                         .-DT.!..

000c8078 <CSWTCH.8>:
   c8078:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c8084 <CSWTCH.9>:
   c8084:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c8090 <npio2_hw>:
   c8090:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c80a0:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c80b0:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c80c0:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c80d0:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c80e0:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c80f0:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8100:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8110 <two_over_pi>:
   c8110:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8120:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8130:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8140:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c8150:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c8160:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c8170:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c8180:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c8190:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c81a0:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c81b0:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c81c0:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c81d0:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c81e0:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c81f0:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8200:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8210:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8220:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8230:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8240:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c8250:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c8260:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c8270:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c8280:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c8290:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c82a0:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c82b0:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c82c0:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c82d0:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c82e0:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c82f0:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8300:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8310:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8320:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8330:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8340:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c8350:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c8360:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c8370:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c8380:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c8390:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c83a0:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c83b0:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c83c0:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c83d0:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c83e0:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c83f0:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8400:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8410:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8420:	008c 0000 006b 0000                         ....k...

000c8428 <PIo2>:
   c8428:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8438:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c8448:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c8454 <init_jk>:
   c8454:	0004 0000 0007 0000 0009 0000               ............

000c8460 <atanhi>:
   c8460:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c8470:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c8480 <atanlo>:
   c8480:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c8490:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c84a0 <atanhi>:
   c84a0:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c84b0 <atanlo>:
   c84b0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c84c0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c84d0:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   c84e0:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   c84f0:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   c8500:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c8510:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c8520:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   c8530:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c8540:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   c8550:	2e64 0063 666e 6900 696e 7974 6100 006e     d.c.nf.inity.an.

000c8560 <fpi.1>:
   c8560:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c8570:	0000 0000                                   ....

000c8574 <fpinan.0>:
   c8574:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c8584:	0000 0000                                   ....

000c8588 <tinytens>:
   c8588:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c8598:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c85a8:	6f43 64ac 0628 1168                         Co.d(.h.

000c85b0 <_ctype_>:
   c85b0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c85c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c85d0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c85e0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c85f0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c8600:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8610:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8620:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8630:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c86b0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c86c0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c86d0:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c86e0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c86f0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c8700:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c8710:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c8720:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c8730:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c8740:	6874 7865 632e 0000                         thex.c..

000c8748 <_C_numeric_locale>:
   c8748:	6f4f 000c 7d6c 000c dbd0 2003 4f50 4953     Oo..l}..... POSI
   c8758:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   c8768:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c8778:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c8788:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c8798:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c87a8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c87b8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c87c8:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000c87d8 <__mprec_bigtens>:
   c87d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c87e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c87f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c8800 <__mprec_tens>:
   c8800:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8810:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c8820:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8830:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8840:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8850:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8860:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8870:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8880:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8890:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c88a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c88b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c88c0:	9db4 79d9 7843 44ea                         ...yCx.D

000c88c8 <p05.0>:
   c88c8:	0005 0000 0019 0000 007d 0000               ........}...

000c88d4 <link_const_variable_data_end>:
   c88d4:	000b669d 	.word	0x000b669d
   c88d8:	000be299 	.word	0x000be299
   c88dc:	000be609 	.word	0x000be609
   c88e0:	000bfb6d 	.word	0x000bfb6d
   c88e4:	000c08d9 	.word	0x000c08d9
   c88e8:	000c0d81 	.word	0x000c0d81
   c88ec:	000c0db5 	.word	0x000c0db5
   c88f0:	000c16e5 	.word	0x000c16e5
   c88f4:	000c1a49 	.word	0x000c1a49

000c88f8 <link_constructors_end>:
	...
