
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012080  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c60a0  000c60a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c60c4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003db7c  000c60c8  0002db7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a80  2003dd70  2003dd70  0003dd70  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c62bc  000c62bc  000362bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c62e4  000c62e4  000362e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022cc4d  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f36  00000000  00000000  00262f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000706ea  00000000  00000000  00283e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f58  00000000  00000000  002f4555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000112f0  00000000  00000000  002f94ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff37  00000000  00000000  0030a79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000871d7  00000000  00000000  0035a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bd61  00000000  00000000  003e18ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f858  00000000  00000000  0053d60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00e f875 	bl	c2120 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00e f897 	bl	c2170 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db7c 	.word	0x2003db7c
   b404c:	000c60c8 	.word	0x000c60c8
   b4050:	2003dd70 	.word	0x2003dd70
   b4054:	2003dd70 	.word	0x2003dd70
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d f8e5 	bl	c1230 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c6074 	.word	0x000c6074
   b4080:	000c6098 	.word	0x000c6098

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bb56 	b.w	b5734 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fa6f 	bl	b556c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d b885 	b.w	c11a0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 baed 	b.w	bd674 <malloc>

000b409a <_Znaj>:
   b409a:	f009 baeb 	b.w	bd674 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 baf1 	b.w	bd684 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 baef 	b.w	bd684 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 f9da 	bl	bd468 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd0a9 	.word	0x000bd0a9
   b40bc:	000c42d0 	.word	0x000c42d0

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00c ffe8 	bl	c1110 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bb3a 	b.w	c07be <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddbc 	.word	0x2003ddbc
   b4150:	2003dd7c 	.word	0x2003dd7c
   b4154:	2003ddac 	.word	0x2003ddac
   b4158:	2003e0e4 	.word	0x2003e0e4
   b415c:	2003dde5 	.word	0x2003dde5
   b4160:	2003df10 	.word	0x2003df10
   b4164:	2003df05 	.word	0x2003df05
   b4168:	2003e5b0 	.word	0x2003e5b0
   b416c:	2003e5d0 	.word	0x2003e5d0
   b4170:	000c42e5 	.word	0x000c42e5

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 b97d 	b.w	b6490 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 f974 	bl	b6490 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 b8e4 	b.w	b637c <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f001 bfc5 	b.w	b6144 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f001 ff10 	bl	b5fe8 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 ff03 	bl	bcff8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f008 ff15 	bl	bd028 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 fef5 	bl	bcff8 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 f92b 	bl	bd4a8 <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c48fc 	.word	0x000c48fc

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b fbaa 	bl	bf9d0 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00b fde2 	bl	bfe46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00c ff45 	bl	c1110 <_Z16_fetch_usbserialv>
   b4286:	f00c ff37 	bl	c10f8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00b fc73 	bl	bfb7c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c4910 	.word	0x000c4910
   b42a0:	000c48e4 	.word	0x000c48e4

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f008 feb4 	bl	bd038 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f008 feab 	bl	bd038 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00c fa8d 	bl	c0812 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00c ba39 	b.w	c0790 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c430f 	.word	0x000c430f
   b4344:	000c5a83 	.word	0x000c5a83
   b4348:	000c430b 	.word	0x000c430b
   b434c:	000c4307 	.word	0x000c4307
   b4350:	000c4325 	.word	0x000c4325
   b4354:	000c42fe 	.word	0x000c42fe

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00c fa54 	bl	c0812 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b510      	push	{r4, lr}
    if(driveMode == 0 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4b11      	ldr	r3, [pc, #68]	; (b43bc <_Z13motionHandlerv+0x48>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	b9eb      	cbnz	r3, b43b8 <_Z13motionHandlerv+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437c:	f008 fea4 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   b4380:	4b0f      	ldr	r3, [pc, #60]	; (b43c0 <_Z13motionHandlerv+0x4c>)
   b4382:	681b      	ldr	r3, [r3, #0]
   b4384:	1ac0      	subs	r0, r0, r3
   b4386:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b438a:	d915      	bls.n	b43b8 <_Z13motionHandlerv+0x44>
        setLSpeed = 90;
   b438c:	4b0d      	ldr	r3, [pc, #52]	; (b43c4 <_Z13motionHandlerv+0x50>)
        setRSpeed = 90;
   b438e:	4c0e      	ldr	r4, [pc, #56]	; (b43c8 <_Z13motionHandlerv+0x54>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4390:	480e      	ldr	r0, [pc, #56]	; (b43cc <_Z13motionHandlerv+0x58>)
        setLSpeed = 90;
   b4392:	215a      	movs	r1, #90	; 0x5a
   b4394:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4396:	4b0e      	ldr	r3, [pc, #56]	; (b43d0 <_Z13motionHandlerv+0x5c>)
        setRSpeed = 90;
   b4398:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b439a:	2201      	movs	r2, #1
   b439c:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b439e:	f00c fa80 	bl	c08a2 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	480b      	ldr	r0, [pc, #44]	; (b43d4 <_Z13motionHandlerv+0x60>)
   b43a6:	f00c fa7c 	bl	c08a2 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43aa:	f00c feb1 	bl	c1110 <_Z16_fetch_usbserialv>
   b43ae:	490a      	ldr	r1, [pc, #40]	; (b43d8 <_Z13motionHandlerv+0x64>)
   b43b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43b4:	f7ff ffd0 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b43b8:	bd10      	pop	{r4, pc}
   b43ba:	bf00      	nop
   b43bc:	2003dde5 	.word	0x2003dde5
   b43c0:	2003de24 	.word	0x2003de24
   b43c4:	2003e588 	.word	0x2003e588
   b43c8:	2003e589 	.word	0x2003e589
   b43cc:	2003dd8c 	.word	0x2003dd8c
   b43d0:	2003e5dc 	.word	0x2003e5dc
   b43d4:	2003dd9c 	.word	0x2003dd9c
   b43d8:	000c4342 	.word	0x000c4342

000b43dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b43de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e0:	4604      	mov	r4, r0
      if (_M_manager)
   b43e2:	b113      	cbz	r3, b43ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e4:	2203      	movs	r2, #3
   b43e6:	4601      	mov	r1, r0
   b43e8:	4798      	blx	r3
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
	...

000b43f0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43f2:	4b13      	ldr	r3, [pc, #76]	; (b4440 <_ZN5TimerD1Ev+0x50>)
   b43f4:	6003      	str	r3, [r0, #0]
   b43f6:	4604      	mov	r4, r0
        if (handle) {
   b43f8:	6880      	ldr	r0, [r0, #8]
   b43fa:	b1c8      	cbz	r0, b4430 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43fc:	2500      	movs	r5, #0
   b43fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4402:	e9cd 3500 	strd	r3, r5, [sp]
   b4406:	2102      	movs	r1, #2
   b4408:	462b      	mov	r3, r5
   b440a:	462a      	mov	r2, r5
   b440c:	f008 fe14 	bl	bd038 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	4629      	mov	r1, r5
   b4414:	f008 fe38 	bl	bd088 <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4420:	f008 fde2 	bl	bcfe8 <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f008 fdf5 	bl	bd018 <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	bf00      	nop
   b4440:	000c48d0 	.word	0x000c48d0

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffd2 	bl	b43f0 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe27 	bl	b40a2 <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4458:	b5f0      	push	{r4, r5, r6, r7, lr}
   b445a:	468c      	mov	ip, r1
   b445c:	2500      	movs	r5, #0
   b445e:	4914      	ldr	r1, [pc, #80]	; (b44b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4460:	7105      	strb	r5, [r0, #4]
   b4462:	4604      	mov	r4, r0
   b4464:	6085      	str	r5, [r0, #8]
   b4466:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4468:	e892 0003 	ldmia.w	r2, {r0, r1}
   b446c:	b085      	sub	sp, #20
   b446e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4470:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4474:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4478:	e896 0003 	ldmia.w	r6, {r0, r1}
   b447c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4480:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4484:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b448a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b448c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b448e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4490:	6095      	str	r5, [r2, #8]
   b4492:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4496:	e9cd 3500 	strd	r3, r5, [sp]
   b449a:	4a06      	ldr	r2, [pc, #24]	; (b44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b449c:	4623      	mov	r3, r4
   b449e:	4661      	mov	r1, ip
   b44a0:	f104 0008 	add.w	r0, r4, #8
   b44a4:	f008 fdb0 	bl	bd008 <os_timer_create>
    }
   b44a8:	4620      	mov	r0, r4
   b44aa:	b005      	add	sp, #20
   b44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44ae:	bf00      	nop
   b44b0:	000c48d0 	.word	0x000c48d0
   b44b4:	000b41e7 	.word	0x000b41e7

000b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b44bc:	2200      	movs	r2, #0
   b44be:	7c40      	ldrb	r0, [r0, #17]
   b44c0:	f009 f82c 	bl	bd51c <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b44c4:	7c63      	ldrb	r3, [r4, #17]
   b44c6:	2b0f      	cmp	r3, #15
        d_.period = period;
   b44c8:	bf18      	it	ne
   b44ca:	8320      	strhne	r0, [r4, #24]
}
   b44cc:	bd10      	pop	{r4, pc}
	...

000b44d0 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b44d2:	4b24      	ldr	r3, [pc, #144]	; (b4564 <_Z10LEDHandlerv+0x94>)
   b44d4:	4d24      	ldr	r5, [pc, #144]	; (b4568 <_Z10LEDHandlerv+0x98>)
   b44d6:	781b      	ldrb	r3, [r3, #0]
   b44d8:	b15b      	cbz	r3, b44f2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44da:	7c6b      	ldrb	r3, [r5, #17]
   b44dc:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44de:	bf1c      	itt	ne
   b44e0:	2302      	movne	r3, #2
   b44e2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44e4:	23ff      	movs	r3, #255	; 0xff
   b44e6:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44e8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44ea:	481f      	ldr	r0, [pc, #124]	; (b4568 <_Z10LEDHandlerv+0x98>)
   b44ec:	f7ff ffe4 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lowBattery){
   b44f2:	4b1e      	ldr	r3, [pc, #120]	; (b456c <_Z10LEDHandlerv+0x9c>)
   b44f4:	781b      	ldrb	r3, [r3, #0]
   b44f6:	2b00      	cmp	r3, #0
   b44f8:	d12d      	bne.n	b4556 <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b44fa:	4b1d      	ldr	r3, [pc, #116]	; (b4570 <_Z10LEDHandlerv+0xa0>)
   b44fc:	781b      	ldrb	r3, [r3, #0]
   b44fe:	2b00      	cmp	r3, #0
   b4500:	d12c      	bne.n	b455c <_Z10LEDHandlerv+0x8c>
    else if(driveMode == 0){
   b4502:	4b1c      	ldr	r3, [pc, #112]	; (b4574 <_Z10LEDHandlerv+0xa4>)
   b4504:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b4506:	2b00      	cmp	r3, #0
   b4508:	bf0b      	itete	eq
   b450a:	260a      	moveq	r6, #10
   b450c:	2614      	movne	r6, #20
   b450e:	2702      	moveq	r7, #2
   b4510:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b4512:	4b19      	ldr	r3, [pc, #100]	; (b4578 <_Z10LEDHandlerv+0xa8>)
   b4514:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b4516:	4b19      	ldr	r3, [pc, #100]	; (b457c <_Z10LEDHandlerv+0xac>)
   b4518:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b451a:	4b19      	ldr	r3, [pc, #100]	; (b4580 <_Z10LEDHandlerv+0xb0>)
    statusMode |= BLEAvail << 2;
   b451c:	00a4      	lsls	r4, r4, #2
   b451e:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b4522:	781a      	ldrb	r2, [r3, #0]
   b4524:	4314      	orrs	r4, r2
   b4526:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b4528:	f00c fdf2 	bl	c1110 <_Z16_fetch_usbserialv>
   b452c:	4622      	mov	r2, r4
   b452e:	3c01      	subs	r4, #1
   b4530:	4914      	ldr	r1, [pc, #80]	; (b4584 <_Z10LEDHandlerv+0xb4>)
   b4532:	b2e4      	uxtb	r4, r4
   b4534:	f7ff ff10 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b4538:	2c06      	cmp	r4, #6
   b453a:	bf98      	it	ls
   b453c:	4b12      	ldrls	r3, [pc, #72]	; (b4588 <_Z10LEDHandlerv+0xb8>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b453e:	7c6a      	ldrb	r2, [r5, #17]
   b4540:	bf94      	ite	ls
   b4542:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b4546:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b454a:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b454c:	bf18      	it	ne
   b454e:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4550:	4631      	mov	r1, r6
    d_.color = color;
   b4552:	616b      	str	r3, [r5, #20]
   b4554:	e7c9      	b.n	b44ea <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b4556:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b4558:	2702      	movs	r7, #2
   b455a:	e7da      	b.n	b4512 <_Z10LEDHandlerv+0x42>
        SetSpeed = LED_SPEED_NORMAL;
   b455c:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b455e:	2701      	movs	r7, #1
   b4560:	e7d7      	b.n	b4512 <_Z10LEDHandlerv+0x42>
   b4562:	bf00      	nop
   b4564:	2003e0e4 	.word	0x2003e0e4
   b4568:	2003e590 	.word	0x2003e590
   b456c:	2003df10 	.word	0x2003df10
   b4570:	2003df05 	.word	0x2003df05
   b4574:	2003dde5 	.word	0x2003dde5
   b4578:	2003ddbc 	.word	0x2003ddbc
   b457c:	2003dd7c 	.word	0x2003dd7c
   b4580:	2003ddac 	.word	0x2003ddac
   b4584:	000c438c 	.word	0x000c438c
   b4588:	000c49dc 	.word	0x000c49dc

000b458c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b458c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b458e:	460a      	mov	r2, r1
   b4590:	4901      	ldr	r1, [pc, #4]	; (b4598 <_ZN7FatFile4openEPKci+0xc>)
   b4592:	6809      	ldr	r1, [r1, #0]
   b4594:	f001 bf2f 	b.w	b63f6 <_ZN7FatFile4openEPS_PKci>
   b4598:	2003e610 	.word	0x2003e610

000b459c <_Z11wdogHandlerv>:
void wdogHandler(){
   b459c:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b459e:	f008 ffe1 	bl	bd564 <spark_cloud_flag_connected>
   b45a2:	4c2b      	ldr	r4, [pc, #172]	; (b4650 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b45a4:	b1e0      	cbz	r0, b45e0 <_Z11wdogHandlerv+0x44>
   b45a6:	2301      	movs	r3, #1
        LTEAvail = false;
   b45a8:	7023      	strb	r3, [r4, #0]
   b45aa:	f008 fd8d 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b45ae:	4b29      	ldr	r3, [pc, #164]	; (b4654 <_Z11wdogHandlerv+0xb8>)
   b45b0:	4c29      	ldr	r4, [pc, #164]	; (b4658 <_Z11wdogHandlerv+0xbc>)
   b45b2:	681b      	ldr	r3, [r3, #0]
   b45b4:	f247 5230 	movw	r2, #30000	; 0x7530
   b45b8:	1ac0      	subs	r0, r0, r3
   b45ba:	4290      	cmp	r0, r2
   b45bc:	d823      	bhi.n	b4606 <_Z11wdogHandlerv+0x6a>
   b45be:	b313      	cbz	r3, b4606 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b45c0:	2301      	movs	r3, #1
        XBeeAvail = false;
   b45c2:	7023      	strb	r3, [r4, #0]
   b45c4:	f008 fd80 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b45c8:	4b24      	ldr	r3, [pc, #144]	; (b465c <_Z11wdogHandlerv+0xc0>)
   b45ca:	4c25      	ldr	r4, [pc, #148]	; (b4660 <_Z11wdogHandlerv+0xc4>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	f247 5230 	movw	r2, #30000	; 0x7530
   b45d2:	1ac0      	subs	r0, r0, r3
   b45d4:	4290      	cmp	r0, r2
   b45d6:	d828      	bhi.n	b462a <_Z11wdogHandlerv+0x8e>
   b45d8:	b33b      	cbz	r3, b462a <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b45da:	2301      	movs	r3, #1
        BLEAvail = false;
   b45dc:	7023      	strb	r3, [r4, #0]
}
   b45de:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45e0:	7823      	ldrb	r3, [r4, #0]
   b45e2:	2b00      	cmp	r3, #0
   b45e4:	d0e1      	beq.n	b45aa <_Z11wdogHandlerv+0xe>
    return m_attr;
   b45e6:	481f      	ldr	r0, [pc, #124]	; (b4664 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45e8:	7c03      	ldrb	r3, [r0, #16]
   b45ea:	b92b      	cbnz	r3, b45f8 <_Z11wdogHandlerv+0x5c>
   b45ec:	491e      	ldr	r1, [pc, #120]	; (b4668 <_Z11wdogHandlerv+0xcc>)
   b45ee:	f244 2202 	movw	r2, #16898	; 0x4202
   b45f2:	3010      	adds	r0, #16
   b45f4:	f7ff ffca 	bl	b458c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45f8:	491c      	ldr	r1, [pc, #112]	; (b466c <_Z11wdogHandlerv+0xd0>)
   b45fa:	481a      	ldr	r0, [pc, #104]	; (b4664 <_Z11wdogHandlerv+0xc8>)
   b45fc:	221e      	movs	r2, #30
   b45fe:	f7ff feab 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4602:	2300      	movs	r3, #0
   b4604:	e7d0      	b.n	b45a8 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4606:	7823      	ldrb	r3, [r4, #0]
   b4608:	b16b      	cbz	r3, b4626 <_Z11wdogHandlerv+0x8a>
   b460a:	4816      	ldr	r0, [pc, #88]	; (b4664 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b460c:	7c03      	ldrb	r3, [r0, #16]
   b460e:	b92b      	cbnz	r3, b461c <_Z11wdogHandlerv+0x80>
   b4610:	4915      	ldr	r1, [pc, #84]	; (b4668 <_Z11wdogHandlerv+0xcc>)
   b4612:	f244 2202 	movw	r2, #16898	; 0x4202
   b4616:	3010      	adds	r0, #16
   b4618:	f7ff ffb8 	bl	b458c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b461c:	4913      	ldr	r1, [pc, #76]	; (b466c <_Z11wdogHandlerv+0xd0>)
   b461e:	4811      	ldr	r0, [pc, #68]	; (b4664 <_Z11wdogHandlerv+0xc8>)
   b4620:	221e      	movs	r2, #30
   b4622:	f7ff fe99 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4626:	2300      	movs	r3, #0
   b4628:	e7cb      	b.n	b45c2 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b462a:	7822      	ldrb	r2, [r4, #0]
   b462c:	b172      	cbz	r2, b464c <_Z11wdogHandlerv+0xb0>
   b462e:	b16b      	cbz	r3, b464c <_Z11wdogHandlerv+0xb0>
   b4630:	480c      	ldr	r0, [pc, #48]	; (b4664 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4632:	7c03      	ldrb	r3, [r0, #16]
   b4634:	b92b      	cbnz	r3, b4642 <_Z11wdogHandlerv+0xa6>
   b4636:	490c      	ldr	r1, [pc, #48]	; (b4668 <_Z11wdogHandlerv+0xcc>)
   b4638:	f244 2202 	movw	r2, #16898	; 0x4202
   b463c:	3010      	adds	r0, #16
   b463e:	f7ff ffa5 	bl	b458c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b4642:	490b      	ldr	r1, [pc, #44]	; (b4670 <_Z11wdogHandlerv+0xd4>)
   b4644:	4807      	ldr	r0, [pc, #28]	; (b4664 <_Z11wdogHandlerv+0xc8>)
   b4646:	221e      	movs	r2, #30
   b4648:	f7ff fe86 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b464c:	2300      	movs	r3, #0
   b464e:	e7c5      	b.n	b45dc <_Z11wdogHandlerv+0x40>
   b4650:	2003ddac 	.word	0x2003ddac
   b4654:	2003ddc0 	.word	0x2003ddc0
   b4658:	2003ddbc 	.word	0x2003ddbc
   b465c:	2003dd88 	.word	0x2003dd88
   b4660:	2003dd7c 	.word	0x2003dd7c
   b4664:	2003deac 	.word	0x2003deac
   b4668:	2003de04 	.word	0x2003de04
   b466c:	000c4397 	.word	0x000c4397
   b4670:	000c43e8 	.word	0x000c43e8

000b4674 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4674:	b530      	push	{r4, r5, lr}
   b4676:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4678:	4b1b      	ldr	r3, [pc, #108]	; (b46e8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b467a:	9300      	str	r3, [sp, #0]
   b467c:	7913      	ldrb	r3, [r2, #4]
   b467e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4682:	6893      	ldr	r3, [r2, #8]
   b4684:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4686:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b468a:	8993      	ldrh	r3, [r2, #12]
   b468c:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4690:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4692:	460a      	mov	r2, r1
   b4694:	466b      	mov	r3, sp
   b4696:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b469a:	4628      	mov	r0, r5
   b469c:	f002 fddc 	bl	b7258 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b46a0:	b910      	cbnz	r0, b46a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b46a2:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b46a4:	b005      	add	sp, #20
   b46a6:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b46a8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b46aa:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b46ae:	4628      	mov	r0, r5
   b46b0:	f001 fe9a 	bl	b63e8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b46b4:	2101      	movs	r1, #1
   b46b6:	4620      	mov	r0, r4
   b46b8:	f002 fc79 	bl	b6fae <_ZN9FatVolume4initEh>
   b46bc:	4601      	mov	r1, r0
   b46be:	b168      	cbz	r0, b46dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b46c0:	4621      	mov	r1, r4
   b46c2:	4628      	mov	r0, r5
   b46c4:	f001 fc8a 	bl	b5fdc <_ZN7FatFile8openRootEP9FatVolume>
   b46c8:	2800      	cmp	r0, #0
   b46ca:	d0ea      	beq.n	b46a2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b46cc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b46d0:	f013 0f70 	tst.w	r3, #112	; 0x70
   b46d4:	d0e5      	beq.n	b46a2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b46d6:	4b05      	ldr	r3, [pc, #20]	; (b46ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b46d8:	601d      	str	r5, [r3, #0]
    return true;
   b46da:	e7e3      	b.n	b46a4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b46dc:	4620      	mov	r0, r4
   b46de:	f002 fc66 	bl	b6fae <_ZN9FatVolume4initEh>
   b46e2:	2800      	cmp	r0, #0
   b46e4:	d1ec      	bne.n	b46c0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b46e6:	e7dc      	b.n	b46a2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b46e8:	000c48bc 	.word	0x000c48bc
   b46ec:	2003e610 	.word	0x2003e610

000b46f0 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46f4:	b084      	sub	sp, #16
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b46f6:	7883      	ldrb	r3, [r0, #2]
   b46f8:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46fa:	af00      	add	r7, sp, #0
   b46fc:	4604      	mov	r4, r0
   b46fe:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4700:	d14b      	bne.n	b479a <_Z14processCommandPKchb+0xaa>
   b4702:	78c3      	ldrb	r3, [r0, #3]
   b4704:	2b42      	cmp	r3, #66	; 0x42
   b4706:	d174      	bne.n	b47f2 <_Z14processCommandPKchb+0x102>
        char dataStr[strlen(command)-8];
   b4708:	4620      	mov	r0, r4
   b470a:	f00d fdbc 	bl	c2286 <strlen>
   b470e:	3801      	subs	r0, #1
   b4710:	f020 0007 	bic.w	r0, r0, #7
        }
   b4714:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4716:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b471a:	4620      	mov	r0, r4
   b471c:	f00d fdb3 	bl	c2286 <strlen>
   b4720:	4468      	add	r0, sp
   b4722:	2600      	movs	r6, #0
   b4724:	f800 6c09 	strb.w	r6, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b4728:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b472a:	73fe      	strb	r6, [r7, #15]
        checkStr[0] = command[strlen(command)-2];
   b472c:	f00d fdab 	bl	c2286 <strlen>
   b4730:	4420      	add	r0, r4
        char dataStr[strlen(command)-8];
   b4732:	466d      	mov	r5, sp
        checkStr[0] = command[strlen(command)-2];
   b4734:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4738:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   b473a:	4620      	mov	r0, r4
   b473c:	f00d fda3 	bl	c2286 <strlen>
   b4740:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4742:	4631      	mov	r1, r6
        checkStr[1] = command[strlen(command)-1];
   b4744:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4748:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b474a:	2210      	movs	r2, #16
   b474c:	4638      	mov	r0, r7
        checkStr[2] = '\0';
   b474e:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4750:	f00e fcc2 	bl	c30d8 <strtol>
   b4754:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4756:	fa5f f888 	uxtb.w	r8, r8
   b475a:	f00c fcd9 	bl	c1110 <_Z16_fetch_usbserialv>
   b475e:	497b      	ldr	r1, [pc, #492]	; (b494c <_Z14processCommandPKchb+0x25c>)
   b4760:	4643      	mov	r3, r8
   b4762:	4642      	mov	r2, r8
   b4764:	f7ff fdf8 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4768:	2604      	movs	r6, #4
   b476a:	4620      	mov	r0, r4
   b476c:	f00d fd8b 	bl	c2286 <strlen>
   b4770:	3802      	subs	r0, #2
   b4772:	4286      	cmp	r6, r0
   b4774:	d216      	bcs.n	b47a4 <_Z14processCommandPKchb+0xb4>
            if(i < 7) cmdStr[i-4] = command[i];
   b4776:	2e06      	cmp	r6, #6
   b4778:	bf9b      	ittet	ls
   b477a:	f107 0310 	addls.w	r3, r7, #16
   b477e:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4780:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4782:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b4784:	bf8c      	ite	hi
   b4786:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b4788:	f803 2c08 	strbls.w	r2, [r3, #-8]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b478c:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4790:	bf88      	it	hi
   b4792:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4796:	b2f6      	uxtb	r6, r6
   b4798:	e7e7      	b.n	b476a <_Z14processCommandPKchb+0x7a>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b479a:	2b42      	cmp	r3, #66	; 0x42
   b479c:	d129      	bne.n	b47f2 <_Z14processCommandPKchb+0x102>
   b479e:	78c3      	ldrb	r3, [r0, #3]
   b47a0:	2b31      	cmp	r3, #49	; 0x31
   b47a2:	e7b0      	b.n	b4706 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47a4:	4540      	cmp	r0, r8
   b47a6:	d02e      	beq.n	b4806 <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47a8:	f00c fcb2 	bl	c1110 <_Z16_fetch_usbserialv>
   b47ac:	4605      	mov	r5, r0
   b47ae:	4620      	mov	r0, r4
   b47b0:	f00d fd69 	bl	c2286 <strlen>
   b47b4:	1e82      	subs	r2, r0, #2
   b47b6:	4628      	mov	r0, r5
    return m_attr;
   b47b8:	4d65      	ldr	r5, [pc, #404]	; (b4950 <_Z14processCommandPKchb+0x260>)
   b47ba:	4966      	ldr	r1, [pc, #408]	; (b4954 <_Z14processCommandPKchb+0x264>)
   b47bc:	4643      	mov	r3, r8
   b47be:	f7ff fdcb 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47c2:	7c2b      	ldrb	r3, [r5, #16]
   b47c4:	b9cb      	cbnz	r3, b47fa <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47c6:	4964      	ldr	r1, [pc, #400]	; (b4958 <_Z14processCommandPKchb+0x268>)
   b47c8:	f244 2202 	movw	r2, #16898	; 0x4202
   b47cc:	f105 0010 	add.w	r0, r5, #16
   b47d0:	f7ff fedc 	bl	b458c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47d4:	4961      	ldr	r1, [pc, #388]	; (b495c <_Z14processCommandPKchb+0x26c>)
   b47d6:	4622      	mov	r2, r4
   b47d8:	4628      	mov	r0, r5
   b47da:	f7ff fdbd 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47de:	f105 0010 	add.w	r0, r5, #16
   b47e2:	f001 fe01 	bl	b63e8 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b47e6:	f00c fc93 	bl	c1110 <_Z16_fetch_usbserialv>
   b47ea:	495d      	ldr	r1, [pc, #372]	; (b4960 <_Z14processCommandPKchb+0x270>)
   b47ec:	f00b ffe7 	bl	c07be <_ZN5Print7printlnEPKc>
            return;
   b47f0:	46cd      	mov	sp, r9
}
   b47f2:	3710      	adds	r7, #16
   b47f4:	46bd      	mov	sp, r7
   b47f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47fa:	4958      	ldr	r1, [pc, #352]	; (b495c <_Z14processCommandPKchb+0x26c>)
   b47fc:	4622      	mov	r2, r4
   b47fe:	4628      	mov	r0, r5
   b4800:	f7ff fdaa 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4804:	e7ef      	b.n	b47e6 <_Z14processCommandPKchb+0xf6>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4806:	4957      	ldr	r1, [pc, #348]	; (b4964 <_Z14processCommandPKchb+0x274>)
   b4808:	f107 000c 	add.w	r0, r7, #12
   b480c:	f00d fd0c 	bl	c2228 <strcmp>
   b4810:	2800      	cmp	r0, #0
   b4812:	d0ed      	beq.n	b47f0 <_Z14processCommandPKchb+0x100>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4814:	4954      	ldr	r1, [pc, #336]	; (b4968 <_Z14processCommandPKchb+0x278>)
   b4816:	f107 000c 	add.w	r0, r7, #12
   b481a:	f00d fd05 	bl	c2228 <strcmp>
   b481e:	4604      	mov	r4, r0
   b4820:	2800      	cmp	r0, #0
   b4822:	d12f      	bne.n	b4884 <_Z14processCommandPKchb+0x194>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4824:	782b      	ldrb	r3, [r5, #0]
   b4826:	713b      	strb	r3, [r7, #4]
   b4828:	786b      	ldrb	r3, [r5, #1]
   b482a:	717b      	strb	r3, [r7, #5]
   b482c:	78ab      	ldrb	r3, [r5, #2]
   b482e:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b4830:	78eb      	ldrb	r3, [r5, #3]
   b4832:	723b      	strb	r3, [r7, #8]
   b4834:	792b      	ldrb	r3, [r5, #4]
   b4836:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   b4838:	1d38      	adds	r0, r7, #4
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b483a:	796b      	ldrb	r3, [r5, #5]
   b483c:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   b483e:	f00d fc52 	bl	c20e6 <atoi>
   b4842:	4e4a      	ldr	r6, [pc, #296]	; (b496c <_Z14processCommandPKchb+0x27c>)
            setRSpeed = atoi(rSpd);
   b4844:	4d4a      	ldr	r5, [pc, #296]	; (b4970 <_Z14processCommandPKchb+0x280>)
            setLSpeed = atoi(lSpd);
   b4846:	7030      	strb	r0, [r6, #0]
            setRSpeed = atoi(rSpd);
   b4848:	f107 0008 	add.w	r0, r7, #8
   b484c:	f00d fc4b 	bl	c20e6 <atoi>
   b4850:	7028      	strb	r0, [r5, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4852:	f00c fc5d 	bl	c1110 <_Z16_fetch_usbserialv>
   b4856:	782b      	ldrb	r3, [r5, #0]
   b4858:	7832      	ldrb	r2, [r6, #0]
   b485a:	4946      	ldr	r1, [pc, #280]	; (b4974 <_Z14processCommandPKchb+0x284>)
   b485c:	f7ff fd7c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b4860:	7831      	ldrb	r1, [r6, #0]
   b4862:	4845      	ldr	r0, [pc, #276]	; (b4978 <_Z14processCommandPKchb+0x288>)
   b4864:	f00c f81d 	bl	c08a2 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b4868:	7829      	ldrb	r1, [r5, #0]
   b486a:	4844      	ldr	r0, [pc, #272]	; (b497c <_Z14processCommandPKchb+0x28c>)
   b486c:	f00c f819 	bl	c08a2 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4870:	4b43      	ldr	r3, [pc, #268]	; (b4980 <_Z14processCommandPKchb+0x290>)
   b4872:	2201      	movs	r2, #1
   b4874:	701a      	strb	r2, [r3, #0]
   b4876:	f008 fc27 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b487a:	4b42      	ldr	r3, [pc, #264]	; (b4984 <_Z14processCommandPKchb+0x294>)
   b487c:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b487e:	4b42      	ldr	r3, [pc, #264]	; (b4988 <_Z14processCommandPKchb+0x298>)
   b4880:	701c      	strb	r4, [r3, #0]
   b4882:	e7b5      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b4884:	4941      	ldr	r1, [pc, #260]	; (b498c <_Z14processCommandPKchb+0x29c>)
   b4886:	f107 000c 	add.w	r0, r7, #12
   b488a:	f00d fccd 	bl	c2228 <strcmp>
   b488e:	b918      	cbnz	r0, b4898 <_Z14processCommandPKchb+0x1a8>
            requestActive = mode;
   b4890:	4b3f      	ldr	r3, [pc, #252]	; (b4990 <_Z14processCommandPKchb+0x2a0>)
   b4892:	f883 a000 	strb.w	sl, [r3]
   b4896:	e7ab      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"pts")){
   b4898:	493e      	ldr	r1, [pc, #248]	; (b4994 <_Z14processCommandPKchb+0x2a4>)
   b489a:	f107 000c 	add.w	r0, r7, #12
   b489e:	f00d fcc3 	bl	c2228 <strcmp>
   b48a2:	b9f0      	cbnz	r0, b48e2 <_Z14processCommandPKchb+0x1f2>
   b48a4:	4c2a      	ldr	r4, [pc, #168]	; (b4950 <_Z14processCommandPKchb+0x260>)
            Serial.println(dataStr);
   b48a6:	f00c fc33 	bl	c1110 <_Z16_fetch_usbserialv>
   b48aa:	4629      	mov	r1, r5
   b48ac:	f00b ff87 	bl	c07be <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b48b0:	7c23      	ldrb	r3, [r4, #16]
   b48b2:	b983      	cbnz	r3, b48d6 <_Z14processCommandPKchb+0x1e6>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b48b4:	4928      	ldr	r1, [pc, #160]	; (b4958 <_Z14processCommandPKchb+0x268>)
   b48b6:	f244 2202 	movw	r2, #16898	; 0x4202
   b48ba:	f104 0010 	add.w	r0, r4, #16
   b48be:	f7ff fe65 	bl	b458c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b48c2:	4935      	ldr	r1, [pc, #212]	; (b4998 <_Z14processCommandPKchb+0x2a8>)
   b48c4:	462a      	mov	r2, r5
   b48c6:	4620      	mov	r0, r4
   b48c8:	f7ff fd46 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b48cc:	f104 0010 	add.w	r0, r4, #16
   b48d0:	f001 fd8a 	bl	b63e8 <_ZN7FatFile5closeEv>
   b48d4:	e78c      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b48d6:	4930      	ldr	r1, [pc, #192]	; (b4998 <_Z14processCommandPKchb+0x2a8>)
   b48d8:	462a      	mov	r2, r5
   b48da:	4620      	mov	r0, r4
   b48dc:	f7ff fd3c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b48e0:	e786      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b48e2:	492e      	ldr	r1, [pc, #184]	; (b499c <_Z14processCommandPKchb+0x2ac>)
   b48e4:	f107 000c 	add.w	r0, r7, #12
   b48e8:	f00d fc9e 	bl	c2228 <strcmp>
   b48ec:	b920      	cbnz	r0, b48f8 <_Z14processCommandPKchb+0x208>
   b48ee:	f008 fbeb 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b48f2:	4b2b      	ldr	r3, [pc, #172]	; (b49a0 <_Z14processCommandPKchb+0x2b0>)
   b48f4:	6018      	str	r0, [r3, #0]
   b48f6:	e77b      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"hwa")){
   b48f8:	492a      	ldr	r1, [pc, #168]	; (b49a4 <_Z14processCommandPKchb+0x2b4>)
   b48fa:	f107 000c 	add.w	r0, r7, #12
   b48fe:	f00d fc93 	bl	c2228 <strcmp>
   b4902:	b910      	cbnz	r0, b490a <_Z14processCommandPKchb+0x21a>
            waitForConnection = false;
   b4904:	4b28      	ldr	r3, [pc, #160]	; (b49a8 <_Z14processCommandPKchb+0x2b8>)
   b4906:	7018      	strb	r0, [r3, #0]
   b4908:	e772      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b490a:	4928      	ldr	r1, [pc, #160]	; (b49ac <_Z14processCommandPKchb+0x2bc>)
   b490c:	f107 000c 	add.w	r0, r7, #12
   b4910:	f00d fc8a 	bl	c2228 <strcmp>
   b4914:	2800      	cmp	r0, #0
   b4916:	f43f af6b 	beq.w	b47f0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b491a:	4925      	ldr	r1, [pc, #148]	; (b49b0 <_Z14processCommandPKchb+0x2c0>)
   b491c:	f107 000c 	add.w	r0, r7, #12
   b4920:	f00d fc82 	bl	c2228 <strcmp>
   b4924:	2800      	cmp	r0, #0
   b4926:	f47f af63 	bne.w	b47f0 <_Z14processCommandPKchb+0x100>
            offloadMode = true;
   b492a:	4b22      	ldr	r3, [pc, #136]	; (b49b4 <_Z14processCommandPKchb+0x2c4>)
            status.setSpeed(LED_SPEED_FAST);
   b492c:	4822      	ldr	r0, [pc, #136]	; (b49b8 <_Z14processCommandPKchb+0x2c8>)
            offloadMode = true;
   b492e:	2201      	movs	r2, #1
   b4930:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4932:	4b21      	ldr	r3, [pc, #132]	; (b49b8 <_Z14processCommandPKchb+0x2c8>)
   b4934:	7c5a      	ldrb	r2, [r3, #17]
   b4936:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4938:	bf1c      	itt	ne
   b493a:	2202      	movne	r2, #2
   b493c:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b493e:	211e      	movs	r1, #30
    d_.color = color;
   b4940:	22ff      	movs	r2, #255	; 0xff
   b4942:	615a      	str	r2, [r3, #20]
   b4944:	f7ff fdb8 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4948:	e752      	b.n	b47f0 <_Z14processCommandPKchb+0x100>
   b494a:	bf00      	nop
   b494c:	000c4437 	.word	0x000c4437
   b4950:	2003deac 	.word	0x2003deac
   b4954:	000c444c 	.word	0x000c444c
   b4958:	2003de04 	.word	0x2003de04
   b495c:	000c4469 	.word	0x000c4469
   b4960:	000c4495 	.word	0x000c4495
   b4964:	000c44b6 	.word	0x000c44b6
   b4968:	000c44ba 	.word	0x000c44ba
   b496c:	2003e588 	.word	0x2003e588
   b4970:	2003e589 	.word	0x2003e589
   b4974:	000c44be 	.word	0x000c44be
   b4978:	2003dd8c 	.word	0x2003dd8c
   b497c:	2003dd9c 	.word	0x2003dd9c
   b4980:	2003e5dc 	.word	0x2003e5dc
   b4984:	2003de24 	.word	0x2003de24
   b4988:	2003dde5 	.word	0x2003dde5
   b498c:	000c44ea 	.word	0x000c44ea
   b4990:	2003e0e5 	.word	0x2003e0e5
   b4994:	000c44ee 	.word	0x000c44ee
   b4998:	000c44f2 	.word	0x000c44f2
   b499c:	000c4515 	.word	0x000c4515
   b49a0:	2003de28 	.word	0x2003de28
   b49a4:	000c4519 	.word	0x000c4519
   b49a8:	2003e5dd 	.word	0x2003e5dd
   b49ac:	000c451d 	.word	0x000c451d
   b49b0:	000c4521 	.word	0x000c4521
   b49b4:	2003e0e4 	.word	0x2003e0e4
   b49b8:	2003e590 	.word	0x2003e590

000b49bc <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b49bc:	b510      	push	{r4, lr}
   b49be:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b49c0:	2200      	movs	r2, #0
   b49c2:	2104      	movs	r1, #4
   b49c4:	4620      	mov	r0, r4
   b49c6:	f7ff fe93 	bl	b46f0 <_Z14processCommandPKchb>
    if(logMessages){
   b49ca:	4b0b      	ldr	r3, [pc, #44]	; (b49f8 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b49cc:	781b      	ldrb	r3, [r3, #0]
   b49ce:	b193      	cbz	r3, b49f6 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b49d0:	480a      	ldr	r0, [pc, #40]	; (b49fc <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49d2:	7c03      	ldrb	r3, [r0, #16]
   b49d4:	b92b      	cbnz	r3, b49e2 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b49d6:	490a      	ldr	r1, [pc, #40]	; (b4a00 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b49d8:	f244 2202 	movw	r2, #16898	; 0x4202
   b49dc:	3010      	adds	r0, #16
   b49de:	f7ff fdd5 	bl	b458c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b49e2:	4622      	mov	r2, r4
   b49e4:	4907      	ldr	r1, [pc, #28]	; (b4a04 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b49e6:	4805      	ldr	r0, [pc, #20]	; (b49fc <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b49e8:	f7ff fcb6 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b49ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b49f0:	4805      	ldr	r0, [pc, #20]	; (b4a08 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b49f2:	f001 bcf9 	b.w	b63e8 <_ZN7FatFile5closeEv>
}
   b49f6:	bd10      	pop	{r4, pc}
   b49f8:	2003df04 	.word	0x2003df04
   b49fc:	2003deac 	.word	0x2003deac
   b4a00:	2003de04 	.word	0x2003de04
   b4a04:	000c4525 	.word	0x000c4525
   b4a08:	2003debc 	.word	0x2003debc

000b4a0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a0c:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4a0e:	f101 0308 	add.w	r3, r1, #8
   b4a12:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a16:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4a18:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a1c:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4a1e:	460a      	mov	r2, r1
   b4a20:	4601      	mov	r1, r0
   b4a22:	4668      	mov	r0, sp
   b4a24:	f00d fb7c 	bl	c2120 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a28:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4a2c:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4a32:	b113      	cbz	r3, b4a3a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4a34:	2300      	movs	r3, #0
   b4a36:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4a3a:	f00c fb69 	bl	c1110 <_Z16_fetch_usbserialv>
   b4a3e:	4916      	ldr	r1, [pc, #88]	; (b4a98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4a40:	f00b febd 	bl	c07be <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4a44:	f00c fb64 	bl	c1110 <_Z16_fetch_usbserialv>
   b4a48:	4629      	mov	r1, r5
   b4a4a:	f00b feb8 	bl	c07be <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4a4e:	2201      	movs	r2, #1
   b4a50:	4611      	mov	r1, r2
   b4a52:	4628      	mov	r0, r5
   b4a54:	f7ff fe4c 	bl	b46f0 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4a58:	782b      	ldrb	r3, [r5, #0]
   b4a5a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4a5e:	2b41      	cmp	r3, #65	; 0x41
   b4a60:	d103      	bne.n	b4a6a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4a62:	f008 fb31 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   b4a66:	4b0d      	ldr	r3, [pc, #52]	; (b4a9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4a68:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4a6a:	4b0d      	ldr	r3, [pc, #52]	; (b4aa0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4a6c:	781b      	ldrb	r3, [r3, #0]
   b4a6e:	b183      	cbz	r3, b4a92 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4a70:	480c      	ldr	r0, [pc, #48]	; (b4aa4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a72:	7c03      	ldrb	r3, [r0, #16]
   b4a74:	b92b      	cbnz	r3, b4a82 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4a76:	490c      	ldr	r1, [pc, #48]	; (b4aa8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4a78:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a7c:	3010      	adds	r0, #16
   b4a7e:	f7ff fd85 	bl	b458c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4a82:	490a      	ldr	r1, [pc, #40]	; (b4aac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4a84:	4807      	ldr	r0, [pc, #28]	; (b4aa4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4a86:	462a      	mov	r2, r5
   b4a88:	f7ff fc66 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4a8c:	4808      	ldr	r0, [pc, #32]	; (b4ab0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4a8e:	f001 fcab 	bl	b63e8 <_ZN7FatFile5closeEv>
}
   b4a92:	46bd      	mov	sp, r7
   b4a94:	bdb0      	pop	{r4, r5, r7, pc}
   b4a96:	bf00      	nop
   b4a98:	000c4545 	.word	0x000c4545
   b4a9c:	2003dd88 	.word	0x2003dd88
   b4aa0:	2003df04 	.word	0x2003df04
   b4aa4:	2003deac 	.word	0x2003deac
   b4aa8:	2003de04 	.word	0x2003de04
   b4aac:	000c4555 	.word	0x000c4555
   b4ab0:	2003debc 	.word	0x2003debc

000b4ab4 <_Z8setupLTEv>:
void setupLTE(){
   b4ab4:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4ab6:	2400      	movs	r4, #0
   b4ab8:	e9cd 4400 	strd	r4, r4, [sp]
   b4abc:	4904      	ldr	r1, [pc, #16]	; (b4ad0 <_Z8setupLTEv+0x1c>)
   b4abe:	4805      	ldr	r0, [pc, #20]	; (b4ad4 <_Z8setupLTEv+0x20>)
   b4ac0:	2301      	movs	r3, #1
   b4ac2:	4622      	mov	r2, r4
   b4ac4:	f008 fd5e 	bl	bd584 <spark_subscribe>
    LTEAvail = false;
   b4ac8:	4b03      	ldr	r3, [pc, #12]	; (b4ad8 <_Z8setupLTEv+0x24>)
   b4aca:	701c      	strb	r4, [r3, #0]
}
   b4acc:	b002      	add	sp, #8
   b4ace:	bd10      	pop	{r4, pc}
   b4ad0:	000b49bd 	.word	0x000b49bd
   b4ad4:	000c4575 	.word	0x000c4575
   b4ad8:	2003ddac 	.word	0x2003ddac

000b4adc <_Z9setupXBeev>:
void setupXBee(){
   b4adc:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4ade:	f00c fcaf 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b4ae2:	4908      	ldr	r1, [pc, #32]	; (b4b04 <_Z9setupXBeev+0x28>)
   b4ae4:	f7ff fbff 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4ae8:	2014      	movs	r0, #20
   b4aea:	f008 fe2f 	bl	bd74c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4aee:	f00c fca7 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b4af2:	4905      	ldr	r1, [pc, #20]	; (b4b08 <_Z9setupXBeev+0x2c>)
   b4af4:	f7ff fbf7 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4af8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4afc:	2014      	movs	r0, #20
   b4afe:	f008 be25 	b.w	bd74c <delay>
   b4b02:	bf00      	nop
   b4b04:	000c5a82 	.word	0x000c5a82
   b4b08:	000c430d 	.word	0x000c430d

000b4b0c <_Z8setupGPSv>:
void setupGPS(){
   b4b0c:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4b0e:	f00c fc57 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4b12:	2300      	movs	r3, #0
   b4b14:	4601      	mov	r1, r0
   b4b16:	9300      	str	r3, [sp, #0]
   b4b18:	4812      	ldr	r0, [pc, #72]	; (b4b64 <_Z8setupGPSv+0x58>)
   b4b1a:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b1e:	2242      	movs	r2, #66	; 0x42
   b4b20:	f007 fe6c 	bl	bc7fc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4b24:	b940      	cbnz	r0, b4b38 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b2a:	f008 fe0f 	bl	bd74c <delay>
        Serial.println("Error, Could not initialize GPS");
   b4b2e:	f00c faef 	bl	c1110 <_Z16_fetch_usbserialv>
   b4b32:	490d      	ldr	r1, [pc, #52]	; (b4b68 <_Z8setupGPSv+0x5c>)
   b4b34:	f00b fe43 	bl	c07be <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4b38:	f240 424c 	movw	r2, #1100	; 0x44c
   b4b3c:	2101      	movs	r1, #1
   b4b3e:	4809      	ldr	r0, [pc, #36]	; (b4b64 <_Z8setupGPSv+0x58>)
   b4b40:	f007 fd90 	bl	bc664 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4b44:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b48:	2201      	movs	r2, #1
   b4b4a:	2100      	movs	r1, #0
   b4b4c:	4805      	ldr	r0, [pc, #20]	; (b4b64 <_Z8setupGPSv+0x58>)
   b4b4e:	f007 fd69 	bl	bc624 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4b52:	f00c fc35 	bl	c13c0 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4b56:	4905      	ldr	r1, [pc, #20]	; (b4b6c <_Z8setupGPSv+0x60>)
}
   b4b58:	b003      	add	sp, #12
   b4b5a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b5e:	f00a bb1b 	b.w	bf198 <_ZN7TwoWire8setSpeedEm>
   b4b62:	bf00      	nop
   b4b64:	2003df64 	.word	0x2003df64
   b4b68:	000c457b 	.word	0x000c457b
   b4b6c:	00061a80 	.word	0x00061a80

000b4b70 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4b70:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4b72:	2015      	movs	r0, #21
   b4b74:	f00c fbf6 	bl	c1364 <analogRead>
   b4b78:	ee07 0a90 	vmov	s15, r0
   b4b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4b80:	4c33      	ldr	r4, [pc, #204]	; (b4c50 <_Z12readPowerSysv+0xe0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4b82:	ee17 0a90 	vmov	r0, s15
   b4b86:	f00c fefd 	bl	c1984 <__aeabi_f2d>
   b4b8a:	a329      	add	r3, pc, #164	; (adr r3, b4c30 <_Z12readPowerSysv+0xc0>)
   b4b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b90:	f00c ff50 	bl	c1a34 <__aeabi_dmul>
   b4b94:	f00d fa30 	bl	c1ff8 <__aeabi_d2f>
   b4b98:	4b2e      	ldr	r3, [pc, #184]	; (b4c54 <_Z12readPowerSysv+0xe4>)
   b4b9a:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4b9c:	f00c fef2 	bl	c1984 <__aeabi_f2d>
   b4ba0:	a325      	add	r3, pc, #148	; (adr r3, b4c38 <_Z12readPowerSysv+0xc8>)
   b4ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ba6:	f00c fd8d 	bl	c16c4 <__aeabi_dsub>
   b4baa:	4b2b      	ldr	r3, [pc, #172]	; (b4c58 <_Z12readPowerSysv+0xe8>)
   b4bac:	2200      	movs	r2, #0
   b4bae:	f00c ff41 	bl	c1a34 <__aeabi_dmul>
   b4bb2:	a323      	add	r3, pc, #140	; (adr r3, b4c40 <_Z12readPowerSysv+0xd0>)
   b4bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bb8:	f00d f866 	bl	c1c88 <__aeabi_ddiv>
   b4bbc:	f00d f9d4 	bl	c1f68 <__aeabi_d2iz>
   b4bc0:	2864      	cmp	r0, #100	; 0x64
   b4bc2:	bfa8      	it	ge
   b4bc4:	2064      	movge	r0, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4bc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bca:	7020      	strb	r0, [r4, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4bcc:	2010      	movs	r0, #16
   b4bce:	f00c fbc9 	bl	c1364 <analogRead>
   b4bd2:	ee07 0a90 	vmov	s15, r0
   b4bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4bda:	ee17 0a90 	vmov	r0, s15
   b4bde:	f00c fed1 	bl	c1984 <__aeabi_f2d>
   b4be2:	4b1e      	ldr	r3, [pc, #120]	; (b4c5c <_Z12readPowerSysv+0xec>)
   b4be4:	2200      	movs	r2, #0
   b4be6:	f00c ff25 	bl	c1a34 <__aeabi_dmul>
   b4bea:	a317      	add	r3, pc, #92	; (adr r3, b4c48 <_Z12readPowerSysv+0xd8>)
   b4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bf0:	f00d f84a 	bl	c1c88 <__aeabi_ddiv>
   b4bf4:	f00d fa00 	bl	c1ff8 <__aeabi_d2f>
   b4bf8:	4b19      	ldr	r3, [pc, #100]	; (b4c60 <_Z12readPowerSysv+0xf0>)
   b4bfa:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4bfc:	2011      	movs	r0, #17
   b4bfe:	f00c fbb1 	bl	c1364 <analogRead>
   b4c02:	ee07 0a90 	vmov	s15, r0
   b4c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c0a:	ee17 0a90 	vmov	r0, s15
   b4c0e:	f00c feb9 	bl	c1984 <__aeabi_f2d>
   b4c12:	4b14      	ldr	r3, [pc, #80]	; (b4c64 <_Z12readPowerSysv+0xf4>)
   b4c14:	2200      	movs	r2, #0
   b4c16:	f00c ff0d 	bl	c1a34 <__aeabi_dmul>
   b4c1a:	a30b      	add	r3, pc, #44	; (adr r3, b4c48 <_Z12readPowerSysv+0xd8>)
   b4c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c20:	f00d f832 	bl	c1c88 <__aeabi_ddiv>
   b4c24:	f00d f9e8 	bl	c1ff8 <__aeabi_d2f>
   b4c28:	4b0f      	ldr	r3, [pc, #60]	; (b4c68 <_Z12readPowerSysv+0xf8>)
   b4c2a:	6018      	str	r0, [r3, #0]
}
   b4c2c:	7820      	ldrb	r0, [r4, #0]
   b4c2e:	bd10      	pop	{r4, pc}
   b4c30:	6e04c059 	.word	0x6e04c059
   b4c34:	3f73cddd 	.word	0x3f73cddd
   b4c38:	66666666 	.word	0x66666666
   b4c3c:	402a6666 	.word	0x402a6666
   b4c40:	99999998 	.word	0x99999998
   b4c44:	40099999 	.word	0x40099999
   b4c48:	00000000 	.word	0x00000000
   b4c4c:	40affe00 	.word	0x40affe00
   b4c50:	2003ddd8 	.word	0x2003ddd8
   b4c54:	2003dddc 	.word	0x2003dddc
   b4c58:	40590000 	.word	0x40590000
   b4c5c:	40408000 	.word	0x40408000
   b4c60:	2003ddd4 	.word	0x2003ddd4
   b4c64:	40308000 	.word	0x40308000
   b4c68:	2003e58c 	.word	0x2003e58c

000b4c6c <_Z12getGPSLatLonv>:
bool getGPSLatLon(){
   b4c6c:	b510      	push	{r4, lr}
    latitude_mdeg= myGPS.getLatitude();
   b4c6e:	4c08      	ldr	r4, [pc, #32]	; (b4c90 <_Z12getGPSLatLonv+0x24>)
   b4c70:	f240 414c 	movw	r1, #1100	; 0x44c
   b4c74:	4620      	mov	r0, r4
   b4c76:	f007 fe40 	bl	bc8fa <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b4c7a:	4b06      	ldr	r3, [pc, #24]	; (b4c94 <_Z12getGPSLatLonv+0x28>)
    longitude_mdeg = myGPS.getLongitude();
   b4c7c:	f240 414c 	movw	r1, #1100	; 0x44c
    latitude_mdeg= myGPS.getLatitude();
   b4c80:	6018      	str	r0, [r3, #0]
    longitude_mdeg = myGPS.getLongitude();
   b4c82:	4620      	mov	r0, r4
   b4c84:	f007 fe16 	bl	bc8b4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b4c88:	4b03      	ldr	r3, [pc, #12]	; (b4c98 <_Z12getGPSLatLonv+0x2c>)
   b4c8a:	6018      	str	r0, [r3, #0]
}
   b4c8c:	2001      	movs	r0, #1
   b4c8e:	bd10      	pop	{r4, pc}
   b4c90:	2003df64 	.word	0x2003df64
   b4c94:	2003de30 	.word	0x2003de30
   b4c98:	2003df0c 	.word	0x2003df0c

000b4c9c <_Z12updateMotorsv>:
void updateMotors(){
   b4c9c:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4c9e:	4c08      	ldr	r4, [pc, #32]	; (b4cc0 <_Z12updateMotorsv+0x24>)
   b4ca0:	7823      	ldrb	r3, [r4, #0]
   b4ca2:	b15b      	cbz	r3, b4cbc <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4ca4:	4b07      	ldr	r3, [pc, #28]	; (b4cc4 <_Z12updateMotorsv+0x28>)
   b4ca6:	4808      	ldr	r0, [pc, #32]	; (b4cc8 <_Z12updateMotorsv+0x2c>)
   b4ca8:	7819      	ldrb	r1, [r3, #0]
   b4caa:	f00b fdfa 	bl	c08a2 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4cae:	4b07      	ldr	r3, [pc, #28]	; (b4ccc <_Z12updateMotorsv+0x30>)
   b4cb0:	4807      	ldr	r0, [pc, #28]	; (b4cd0 <_Z12updateMotorsv+0x34>)
   b4cb2:	7819      	ldrb	r1, [r3, #0]
   b4cb4:	f00b fdf5 	bl	c08a2 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4cb8:	2300      	movs	r3, #0
   b4cba:	7023      	strb	r3, [r4, #0]
}
   b4cbc:	bd10      	pop	{r4, pc}
   b4cbe:	bf00      	nop
   b4cc0:	2003e5dc 	.word	0x2003e5dc
   b4cc4:	2003e588 	.word	0x2003e588
   b4cc8:	2003dd8c 	.word	0x2003dd8c
   b4ccc:	2003e589 	.word	0x2003e589
   b4cd0:	2003dd9c 	.word	0x2003dd9c
   b4cd4:	00000000 	.word	0x00000000

000b4cd8 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4cdc:	4db2      	ldr	r5, [pc, #712]	; (b4fa8 <_Z13sensorHandlerv+0x2d0>)
void sensorHandler(){
   b4cde:	b0ab      	sub	sp, #172	; 0xac
   b4ce0:	f008 f9f2 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4ce4:	682b      	ldr	r3, [r5, #0]
   b4ce6:	4283      	cmp	r3, r0
   b4ce8:	f080 8109 	bcs.w	b4efe <_Z13sensorHandlerv+0x226>
   b4cec:	f8df b2e8 	ldr.w	fp, [pc, #744]	; b4fd8 <_Z13sensorHandlerv+0x300>
   b4cf0:	f89b 3000 	ldrb.w	r3, [fp]
   b4cf4:	2b00      	cmp	r3, #0
   b4cf6:	f000 8102 	beq.w	b4efe <_Z13sensorHandlerv+0x226>
        Wire.requestFrom(PHADDR, 20, 1);
   b4cfa:	f00c fb61 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4cfe:	2301      	movs	r3, #1
   b4d00:	2214      	movs	r2, #20
   b4d02:	2163      	movs	r1, #99	; 0x63
   b4d04:	f00a fa69 	bl	bf1da <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4d08:	f00c fb5a 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d0c:	6803      	ldr	r3, [r0, #0]
   b4d0e:	695b      	ldr	r3, [r3, #20]
   b4d10:	4798      	blx	r3
        int c = 0;
   b4d12:	ac16      	add	r4, sp, #88	; 0x58
   b4d14:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4d16:	f00c fb53 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d1a:	6803      	ldr	r3, [r0, #0]
   b4d1c:	691b      	ldr	r3, [r3, #16]
   b4d1e:	4798      	blx	r3
   b4d20:	b138      	cbz	r0, b4d32 <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4d22:	f00c fb4d 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d26:	6803      	ldr	r3, [r0, #0]
   b4d28:	695b      	ldr	r3, [r3, #20]
   b4d2a:	4798      	blx	r3
   b4d2c:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4d30:	e7f1      	b.n	b4d16 <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4d32:	4630      	mov	r0, r6
   b4d34:	f00d f9d4 	bl	c20e0 <atof>
   b4d38:	ec51 0b10 	vmov	r0, r1, d0
   b4d3c:	f00d f95c 	bl	c1ff8 <__aeabi_d2f>
   b4d40:	f8df a298 	ldr.w	sl, [pc, #664]	; b4fdc <_Z13sensorHandlerv+0x304>
   b4d44:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b4d48:	f00c fb3a 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d4c:	2301      	movs	r3, #1
   b4d4e:	2214      	movs	r2, #20
   b4d50:	2164      	movs	r1, #100	; 0x64
   b4d52:	f00a fa42 	bl	bf1da <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4d56:	f00c fb33 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d5a:	6803      	ldr	r3, [r0, #0]
   b4d5c:	695b      	ldr	r3, [r3, #20]
   b4d5e:	4798      	blx	r3
        c = 0;
   b4d60:	ac1b      	add	r4, sp, #108	; 0x6c
   b4d62:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4d64:	f00c fb2c 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d68:	6803      	ldr	r3, [r0, #0]
   b4d6a:	691b      	ldr	r3, [r3, #16]
   b4d6c:	4798      	blx	r3
   b4d6e:	b138      	cbz	r0, b4d80 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b4d70:	f00c fb26 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d74:	6803      	ldr	r3, [r0, #0]
   b4d76:	695b      	ldr	r3, [r3, #20]
   b4d78:	4798      	blx	r3
   b4d7a:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4d7e:	e7f1      	b.n	b4d64 <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b4d80:	4630      	mov	r0, r6
   b4d82:	f00d f9ad 	bl	c20e0 <atof>
        Wire.requestFrom(COND, 20, 1);
   b4d86:	f00c fb1b 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d8a:	2301      	movs	r3, #1
   b4d8c:	2214      	movs	r2, #20
   b4d8e:	2165      	movs	r1, #101	; 0x65
   b4d90:	f00a fa23 	bl	bf1da <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4d94:	f00c fb14 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4d98:	6803      	ldr	r3, [r0, #0]
   b4d9a:	695b      	ldr	r3, [r3, #20]
   b4d9c:	4798      	blx	r3
        c = 0;
   b4d9e:	ac20      	add	r4, sp, #128	; 0x80
   b4da0:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4da2:	f00c fb0d 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4da6:	6803      	ldr	r3, [r0, #0]
   b4da8:	691b      	ldr	r3, [r3, #16]
   b4daa:	4798      	blx	r3
   b4dac:	b138      	cbz	r0, b4dbe <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b4dae:	f00c fb07 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4db2:	6803      	ldr	r3, [r0, #0]
   b4db4:	695b      	ldr	r3, [r3, #20]
   b4db6:	4798      	blx	r3
   b4db8:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4dbc:	e7f1      	b.n	b4da2 <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b4dbe:	4630      	mov	r0, r6
   b4dc0:	f00d f98e 	bl	c20e0 <atof>
   b4dc4:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b4dc8:	f00c fafa 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4dcc:	2301      	movs	r3, #1
   b4dce:	2214      	movs	r2, #20
   b4dd0:	2166      	movs	r1, #102	; 0x66
   b4dd2:	f00a fa02 	bl	bf1da <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4dd6:	f00c faf3 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4dda:	6803      	ldr	r3, [r0, #0]
   b4ddc:	695b      	ldr	r3, [r3, #20]
   b4dde:	4798      	blx	r3
        c = 0;
   b4de0:	af25      	add	r7, sp, #148	; 0x94
   b4de2:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b4de4:	f00c faec 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4de8:	6803      	ldr	r3, [r0, #0]
   b4dea:	691b      	ldr	r3, [r3, #16]
   b4dec:	4798      	blx	r3
   b4dee:	4604      	mov	r4, r0
   b4df0:	b138      	cbz	r0, b4e02 <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b4df2:	f00c fae5 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4df6:	6803      	ldr	r3, [r0, #0]
   b4df8:	695b      	ldr	r3, [r3, #20]
   b4dfa:	4798      	blx	r3
   b4dfc:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b4e00:	e7f0      	b.n	b4de4 <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b4e02:	4630      	mov	r0, r6
   b4e04:	f00d f96c 	bl	c20e0 <atof>
        if(logSensors){
   b4e08:	4b68      	ldr	r3, [pc, #416]	; (b4fac <_Z13sensorHandlerv+0x2d4>)
        dataWait = false;
   b4e0a:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b4e0e:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b4e10:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b4e14:	2b00      	cmp	r3, #0
   b4e16:	d072      	beq.n	b4efe <_Z13sensorHandlerv+0x226>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b4e18:	f00c f89e 	bl	c0f58 <_ZN9TimeClass5monthEv>
   b4e1c:	9011      	str	r0, [sp, #68]	; 0x44
   b4e1e:	f00c f88f 	bl	c0f40 <_ZN9TimeClass3dayEv>
   b4e22:	4604      	mov	r4, r0
   b4e24:	f00c f8a0 	bl	c0f68 <_ZN9TimeClass4yearEv>
   b4e28:	4683      	mov	fp, r0
   b4e2a:	f00c f865 	bl	c0ef8 <_ZN9TimeClass4hourEv>
   b4e2e:	9010      	str	r0, [sp, #64]	; 0x40
   b4e30:	f00c f86e 	bl	c0f10 <_ZN9TimeClass6minuteEv>
   b4e34:	900f      	str	r0, [sp, #60]	; 0x3c
   b4e36:	f00c f877 	bl	c0f28 <_ZN9TimeClass6secondEv>
   b4e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4e3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4e40:	9004      	str	r0, [sp, #16]
   b4e42:	e9cd b201 	strd	fp, r2, [sp, #4]
   b4e46:	9103      	str	r1, [sp, #12]
   b4e48:	4a59      	ldr	r2, [pc, #356]	; (b4fb0 <_Z13sensorHandlerv+0x2d8>)
   b4e4a:	9400      	str	r4, [sp, #0]
   b4e4c:	2110      	movs	r1, #16
   b4e4e:	a812      	add	r0, sp, #72	; 0x48
   b4e50:	f008 fc30 	bl	bd6b4 <snprintf>
   b4e54:	4857      	ldr	r0, [pc, #348]	; (b4fb4 <_Z13sensorHandlerv+0x2dc>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b4e56:	7c03      	ldrb	r3, [r0, #16]
   b4e58:	b92b      	cbnz	r3, b4e66 <_Z13sensorHandlerv+0x18e>
   b4e5a:	4957      	ldr	r1, [pc, #348]	; (b4fb8 <_Z13sensorHandlerv+0x2e0>)
   b4e5c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4e60:	3010      	adds	r0, #16
   b4e62:	f7ff fb93 	bl	b458c <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b4e66:	4649      	mov	r1, r9
   b4e68:	4640      	mov	r0, r8
   b4e6a:	f00d f8c5 	bl	c1ff8 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4e6e:	f00c fd89 	bl	c1984 <__aeabi_f2d>
   b4e72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b4e76:	4b51      	ldr	r3, [pc, #324]	; (b4fbc <_Z13sensorHandlerv+0x2e4>)
   b4e78:	6818      	ldr	r0, [r3, #0]
   b4e7a:	f00c fd83 	bl	c1984 <__aeabi_f2d>
   b4e7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4e82:	4b4f      	ldr	r3, [pc, #316]	; (b4fc0 <_Z13sensorHandlerv+0x2e8>)
   b4e84:	6818      	ldr	r0, [r3, #0]
   b4e86:	f00c fd7d 	bl	c1984 <__aeabi_f2d>
   b4e8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4e8e:	f8da 0000 	ldr.w	r0, [sl]
   b4e92:	f00c fd77 	bl	c1984 <__aeabi_f2d>
   b4e96:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b4e9a:	4639      	mov	r1, r7
   b4e9c:	4630      	mov	r0, r6
   b4e9e:	f00d f8ab 	bl	c1ff8 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4ea2:	f00c fd6f 	bl	c1984 <__aeabi_f2d>
   b4ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4eaa:	4b46      	ldr	r3, [pc, #280]	; (b4fc4 <_Z13sensorHandlerv+0x2ec>)
   b4eac:	6818      	ldr	r0, [r3, #0]
   b4eae:	ee07 0a90 	vmov	s15, r0
   b4eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4eb6:	ee17 0a90 	vmov	r0, s15
   b4eba:	f00c fd63 	bl	c1984 <__aeabi_f2d>
   b4ebe:	a338      	add	r3, pc, #224	; (adr r3, b4fa0 <_Z13sensorHandlerv+0x2c8>)
   b4ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ec4:	f00c fee0 	bl	c1c88 <__aeabi_ddiv>
   b4ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4ecc:	4b3e      	ldr	r3, [pc, #248]	; (b4fc8 <_Z13sensorHandlerv+0x2f0>)
   b4ece:	6818      	ldr	r0, [r3, #0]
   b4ed0:	ee07 0a90 	vmov	s15, r0
   b4ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ed8:	ee17 0a90 	vmov	r0, s15
   b4edc:	f00c fd52 	bl	c1984 <__aeabi_f2d>
   b4ee0:	a32f      	add	r3, pc, #188	; (adr r3, b4fa0 <_Z13sensorHandlerv+0x2c8>)
   b4ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ee6:	f00c fecf 	bl	c1c88 <__aeabi_ddiv>
   b4eea:	aa12      	add	r2, sp, #72	; 0x48
   b4eec:	e9cd 0100 	strd	r0, r1, [sp]
   b4ef0:	4936      	ldr	r1, [pc, #216]	; (b4fcc <_Z13sensorHandlerv+0x2f4>)
   b4ef2:	4830      	ldr	r0, [pc, #192]	; (b4fb4 <_Z13sensorHandlerv+0x2dc>)
   b4ef4:	f7ff fa30 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b4ef8:	4835      	ldr	r0, [pc, #212]	; (b4fd0 <_Z13sensorHandlerv+0x2f8>)
   b4efa:	f001 fa75 	bl	b63e8 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b4efe:	4c35      	ldr	r4, [pc, #212]	; (b4fd4 <_Z13sensorHandlerv+0x2fc>)
   b4f00:	f008 f8e2 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   b4f04:	6823      	ldr	r3, [r4, #0]
   b4f06:	4283      	cmp	r3, r0
   b4f08:	d244      	bcs.n	b4f94 <_Z13sensorHandlerv+0x2bc>
   b4f0a:	f008 f8dd 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b4f0e:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b4f12:	6020      	str	r0, [r4, #0]
   b4f14:	f008 f8d8 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b4f18:	f200 3039 	addw	r0, r0, #825	; 0x339
   b4f1c:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b4f1e:	f00c fa4f 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f22:	2163      	movs	r1, #99	; 0x63
   b4f24:	f00a f972 	bl	bf20c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4f28:	f00c fa4a 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f2c:	2172      	movs	r1, #114	; 0x72
   b4f2e:	f7ff f983 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4f32:	f00c fa45 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f36:	f00a f970 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b4f3a:	f00c fa41 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f3e:	2164      	movs	r1, #100	; 0x64
   b4f40:	f00a f964 	bl	bf20c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4f44:	f00c fa3c 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f48:	2172      	movs	r1, #114	; 0x72
   b4f4a:	f7ff f975 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4f4e:	f00c fa37 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f52:	f00a f962 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b4f56:	f00c fa33 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f5a:	2165      	movs	r1, #101	; 0x65
   b4f5c:	f00a f956 	bl	bf20c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4f60:	f00c fa2e 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f64:	2172      	movs	r1, #114	; 0x72
   b4f66:	f7ff f967 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4f6a:	f00c fa29 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f6e:	f00a f954 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b4f72:	f00c fa25 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f76:	2166      	movs	r1, #102	; 0x66
   b4f78:	f00a f948 	bl	bf20c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4f7c:	f00c fa20 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f80:	2172      	movs	r1, #114	; 0x72
   b4f82:	f7ff f959 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4f86:	f00c fa1b 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b4f8a:	f00a f946 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b4f8e:	4b12      	ldr	r3, [pc, #72]	; (b4fd8 <_Z13sensorHandlerv+0x300>)
   b4f90:	2201      	movs	r2, #1
   b4f92:	701a      	strb	r2, [r3, #0]
}
   b4f94:	b02b      	add	sp, #172	; 0xac
   b4f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f9a:	bf00      	nop
   b4f9c:	f3af 8000 	nop.w
   b4fa0:	00000000 	.word	0x00000000
   b4fa4:	412e8480 	.word	0x412e8480
   b4fa8:	2003dde0 	.word	0x2003dde0
   b4fac:	2003df05 	.word	0x2003df05
   b4fb0:	000c459b 	.word	0x000c459b
   b4fb4:	2003df30 	.word	0x2003df30
   b4fb8:	2003dde6 	.word	0x2003dde6
   b4fbc:	2003e57c 	.word	0x2003e57c
   b4fc0:	2003e578 	.word	0x2003e578
   b4fc4:	2003df0c 	.word	0x2003df0c
   b4fc8:	2003de30 	.word	0x2003de30
   b4fcc:	000c45b4 	.word	0x000c45b4
   b4fd0:	2003df40 	.word	0x2003df40
   b4fd4:	2003e584 	.word	0x2003e584
   b4fd8:	2003dde4 	.word	0x2003dde4
   b4fdc:	2003e580 	.word	0x2003e580

000b4fe0 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4fe4:	4e3c      	ldr	r6, [pc, #240]	; (b50d8 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4fe6:	f8df 8104 	ldr.w	r8, [pc, #260]	; b50ec <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b4fea:	f8df 9104 	ldr.w	r9, [pc, #260]	; b50f0 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b4fee:	b089      	sub	sp, #36	; 0x24
   b4ff0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4ff2:	f00c fa25 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b4ff6:	6803      	ldr	r3, [r0, #0]
   b4ff8:	691b      	ldr	r3, [r3, #16]
   b4ffa:	4798      	blx	r3
   b4ffc:	2800      	cmp	r0, #0
   b4ffe:	d066      	beq.n	b50ce <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5000:	f00c fa1e 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b5004:	220a      	movs	r2, #10
   b5006:	4601      	mov	r1, r0
   b5008:	4638      	mov	r0, r7
   b500a:	f00b fded 	bl	c0be8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b500e:	68bb      	ldr	r3, [r7, #8]
   b5010:	3307      	adds	r3, #7
   b5012:	f023 0307 	bic.w	r3, r3, #7
    }
   b5016:	466d      	mov	r5, sp
        char buffer[data.length()];
   b5018:	ebad 0d03 	sub.w	sp, sp, r3
   b501c:	46ea      	mov	sl, sp
   b501e:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b5020:	68b9      	ldr	r1, [r7, #8]
   b5022:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5026:	458b      	cmp	fp, r1
   b5028:	f103 0401 	add.w	r4, r3, #1
   b502c:	d207      	bcs.n	b503e <_Z11XBeeHandlerv+0x5e>
   b502e:	4659      	mov	r1, fp
   b5030:	4638      	mov	r0, r7
   b5032:	f00b fed1 	bl	c0dd8 <_ZNK6String6charAtEj>
   b5036:	4623      	mov	r3, r4
   b5038:	f80a 000b 	strb.w	r0, [sl, fp]
   b503c:	e7f0      	b.n	b5020 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b503e:	2901      	cmp	r1, #1
   b5040:	d90a      	bls.n	b5058 <_Z11XBeeHandlerv+0x78>
   b5042:	3901      	subs	r1, #1
   b5044:	4638      	mov	r0, r7
   b5046:	f00b fec7 	bl	c0dd8 <_ZNK6String6charAtEj>
   b504a:	280d      	cmp	r0, #13
   b504c:	bf01      	itttt	eq
   b504e:	68bb      	ldreq	r3, [r7, #8]
   b5050:	4453      	addeq	r3, sl
   b5052:	2200      	moveq	r2, #0
   b5054:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5058:	2201      	movs	r2, #1
   b505a:	2102      	movs	r1, #2
   b505c:	4650      	mov	r0, sl
   b505e:	f7ff fb47 	bl	b46f0 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5062:	f00c f855 	bl	c1110 <_Z16_fetch_usbserialv>
   b5066:	4631      	mov	r1, r6
   b5068:	f00b fba9 	bl	c07be <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b506c:	f00c f850 	bl	c1110 <_Z16_fetch_usbserialv>
   b5070:	6839      	ldr	r1, [r7, #0]
   b5072:	f00b fba4 	bl	c07be <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5076:	f89a 3000 	ldrb.w	r3, [sl]
   b507a:	3b42      	subs	r3, #66	; 0x42
   b507c:	2b01      	cmp	r3, #1
   b507e:	d803      	bhi.n	b5088 <_Z11XBeeHandlerv+0xa8>
   b5080:	f008 f822 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   b5084:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5088:	f899 3000 	ldrb.w	r3, [r9]
   b508c:	b1d3      	cbz	r3, b50c4 <_Z11XBeeHandlerv+0xe4>
   b508e:	4813      	ldr	r0, [pc, #76]	; (b50dc <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5090:	7c03      	ldrb	r3, [r0, #16]
   b5092:	b92b      	cbnz	r3, b50a0 <_Z11XBeeHandlerv+0xc0>
   b5094:	4912      	ldr	r1, [pc, #72]	; (b50e0 <_Z11XBeeHandlerv+0x100>)
   b5096:	f244 2202 	movw	r2, #16898	; 0x4202
   b509a:	3010      	adds	r0, #16
   b509c:	f7ff fa76 	bl	b458c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b50a0:	4639      	mov	r1, r7
   b50a2:	f107 0010 	add.w	r0, r7, #16
   b50a6:	f00b fe4d 	bl	c0d44 <_ZN6StringC1ERKS_>
   b50aa:	490e      	ldr	r1, [pc, #56]	; (b50e4 <_Z11XBeeHandlerv+0x104>)
   b50ac:	480b      	ldr	r0, [pc, #44]	; (b50dc <_Z11XBeeHandlerv+0xfc>)
   b50ae:	f107 0210 	add.w	r2, r7, #16
   b50b2:	f7ff f951 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b50b6:	f107 0010 	add.w	r0, r7, #16
   b50ba:	f00b fdad 	bl	c0c18 <_ZN6StringD1Ev>
            logFile.close();
   b50be:	480a      	ldr	r0, [pc, #40]	; (b50e8 <_Z11XBeeHandlerv+0x108>)
   b50c0:	f001 f992 	bl	b63e8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b50c4:	4638      	mov	r0, r7
   b50c6:	f00b fda7 	bl	c0c18 <_ZN6StringD1Ev>
   b50ca:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b50cc:	e791      	b.n	b4ff2 <_Z11XBeeHandlerv+0x12>
}
   b50ce:	3724      	adds	r7, #36	; 0x24
   b50d0:	46bd      	mov	sp, r7
   b50d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b50d6:	bf00      	nop
   b50d8:	000c45cc 	.word	0x000c45cc
   b50dc:	2003deac 	.word	0x2003deac
   b50e0:	2003de04 	.word	0x2003de04
   b50e4:	000c45de 	.word	0x000c45de
   b50e8:	2003debc 	.word	0x2003debc
   b50ec:	2003ddc0 	.word	0x2003ddc0
   b50f0:	2003df04 	.word	0x2003df04

000b50f4 <_Z13dataOffloaderv>:
void dataOffloader(){
   b50f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b50f8:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b50fa:	f00c f809 	bl	c1110 <_Z16_fetch_usbserialv>
   b50fe:	4961      	ldr	r1, [pc, #388]	; (b5284 <_Z13dataOffloaderv+0x190>)
   b5100:	f00b fb5d 	bl	c07be <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b5104:	4960      	ldr	r1, [pc, #384]	; (b5288 <_Z13dataOffloaderv+0x194>)
   b5106:	4861      	ldr	r0, [pc, #388]	; (b528c <_Z13dataOffloaderv+0x198>)
   b5108:	2200      	movs	r2, #0
   b510a:	f7ff fa3f 	bl	b458c <_ZN7FatFile4openEPKci>
   b510e:	b948      	cbnz	r0, b5124 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b5110:	4b5f      	ldr	r3, [pc, #380]	; (b5290 <_Z13dataOffloaderv+0x19c>)
   b5112:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5114:	f00b fffc 	bl	c1110 <_Z16_fetch_usbserialv>
   b5118:	495e      	ldr	r1, [pc, #376]	; (b5294 <_Z13dataOffloaderv+0x1a0>)
}
   b511a:	b02d      	add	sp, #180	; 0xb4
   b511c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5120:	f00b bb4d 	b.w	c07be <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5124:	f00b fff4 	bl	c1110 <_Z16_fetch_usbserialv>
   b5128:	495b      	ldr	r1, [pc, #364]	; (b5298 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b512a:	4d5c      	ldr	r5, [pc, #368]	; (b529c <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b512c:	f00b fb47 	bl	c07be <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5130:	f008 fe70 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5134:	f008 fecc 	bl	bded0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5138:	4604      	mov	r4, r0
   b513a:	b948      	cbnz	r0, b5150 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b513c:	f008 fe6a 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5140:	4622      	mov	r2, r4
   b5142:	4629      	mov	r1, r5
   b5144:	f008 ff17 	bl	bdf76 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5148:	200a      	movs	r0, #10
   b514a:	f008 faff 	bl	bd74c <delay>
    while(!BLE.connected()){
   b514e:	e7ef      	b.n	b5130 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b5150:	f00b ffde 	bl	c1110 <_Z16_fetch_usbserialv>
   b5154:	4952      	ldr	r1, [pc, #328]	; (b52a0 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5156:	4f4d      	ldr	r7, [pc, #308]	; (b528c <_Z13dataOffloaderv+0x198>)
   b5158:	4d52      	ldr	r5, [pc, #328]	; (b52a4 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b515a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b52c8 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b515e:	f00b fb2e 	bl	c07be <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5162:	2200      	movs	r2, #0
   b5164:	4639      	mov	r1, r7
   b5166:	4628      	mov	r0, r5
   b5168:	f001 f8cb 	bl	b6302 <_ZN7FatFile8openNextEPS_i>
   b516c:	b1f8      	cbz	r0, b51ae <_Z13dataOffloaderv+0xba>
   b516e:	f008 fe51 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5172:	f008 fead 	bl	bded0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5176:	b1d0      	cbz	r0, b51ae <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5178:	221e      	movs	r2, #30
   b517a:	a901      	add	r1, sp, #4
   b517c:	4628      	mov	r0, r5
   b517e:	f001 fa87 	bl	b6690 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5182:	f00b ffc5 	bl	c1110 <_Z16_fetch_usbserialv>
   b5186:	4641      	mov	r1, r8
   b5188:	aa01      	add	r2, sp, #4
   b518a:	f7ff f8e5 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b518e:	a801      	add	r0, sp, #4
   b5190:	f00d f879 	bl	c2286 <strlen>
   b5194:	ab01      	add	r3, sp, #4
   b5196:	3804      	subs	r0, #4
   b5198:	4418      	add	r0, r3
   b519a:	f00d f87d 	bl	c2298 <strlwr>
   b519e:	4942      	ldr	r1, [pc, #264]	; (b52a8 <_Z13dataOffloaderv+0x1b4>)
   b51a0:	f00d f8d3 	bl	c234a <strstr>
   b51a4:	b9d8      	cbnz	r0, b51de <_Z13dataOffloaderv+0xea>
            myFile.close();
   b51a6:	4628      	mov	r0, r5
   b51a8:	f001 f91e 	bl	b63e8 <_ZN7FatFile5closeEv>
   b51ac:	e7d9      	b.n	b5162 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b51ae:	4837      	ldr	r0, [pc, #220]	; (b528c <_Z13dataOffloaderv+0x198>)
   b51b0:	f001 f91a 	bl	b63e8 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b51b4:	2226      	movs	r2, #38	; 0x26
   b51b6:	2100      	movs	r1, #0
   b51b8:	a809      	add	r0, sp, #36	; 0x24
   b51ba:	f00c ffd9 	bl	c2170 <memset>
    strcpy(fileCode,"filedone");
   b51be:	493b      	ldr	r1, [pc, #236]	; (b52ac <_Z13dataOffloaderv+0x1b8>)
   b51c0:	a809      	add	r0, sp, #36	; 0x24
   b51c2:	f00d f83b 	bl	c223c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b51c6:	2300      	movs	r3, #0
   b51c8:	2226      	movs	r2, #38	; 0x26
   b51ca:	a909      	add	r1, sp, #36	; 0x24
   b51cc:	4838      	ldr	r0, [pc, #224]	; (b52b0 <_Z13dataOffloaderv+0x1bc>)
   b51ce:	f008 fd11 	bl	bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b51d2:	4b2f      	ldr	r3, [pc, #188]	; (b5290 <_Z13dataOffloaderv+0x19c>)
   b51d4:	2200      	movs	r2, #0
   b51d6:	701a      	strb	r2, [r3, #0]
}
   b51d8:	b02d      	add	sp, #180	; 0xb4
   b51da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b51de:	2226      	movs	r2, #38	; 0x26
   b51e0:	2100      	movs	r1, #0
   b51e2:	a809      	add	r0, sp, #36	; 0x24
   b51e4:	f00c ffc4 	bl	c2170 <memset>
            strcpy(fileCode,"filename");
   b51e8:	4932      	ldr	r1, [pc, #200]	; (b52b4 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b51ea:	4e33      	ldr	r6, [pc, #204]	; (b52b8 <_Z13dataOffloaderv+0x1c4>)
   b51ec:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b52b0 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b51f0:	a809      	add	r0, sp, #36	; 0x24
   b51f2:	f00d f823 	bl	c223c <strcpy>
            strcat(fileCode,namebuf);
   b51f6:	a901      	add	r1, sp, #4
   b51f8:	a809      	add	r0, sp, #36	; 0x24
   b51fa:	f00c ffef 	bl	c21dc <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b51fe:	f00b ff87 	bl	c1110 <_Z16_fetch_usbserialv>
   b5202:	492e      	ldr	r1, [pc, #184]	; (b52bc <_Z13dataOffloaderv+0x1c8>)
   b5204:	aa09      	add	r2, sp, #36	; 0x24
   b5206:	f7ff f8a7 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b520a:	2300      	movs	r3, #0
   b520c:	2226      	movs	r2, #38	; 0x26
   b520e:	a909      	add	r1, sp, #36	; 0x24
   b5210:	4827      	ldr	r0, [pc, #156]	; (b52b0 <_Z13dataOffloaderv+0x1bc>)
   b5212:	f008 fcef 	bl	bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5216:	f00b ff7b 	bl	c1110 <_Z16_fetch_usbserialv>
   b521a:	4929      	ldr	r1, [pc, #164]	; (b52c0 <_Z13dataOffloaderv+0x1cc>)
   b521c:	aa01      	add	r2, sp, #4
   b521e:	f7ff f89b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5222:	2096      	movs	r0, #150	; 0x96
   b5224:	f008 fa92 	bl	bd74c <delay>
            noInterrupts();
   b5228:	f009 fffa 	bl	bf220 <_Z12noInterruptsv>
            while(myFile.available()){
   b522c:	4630      	mov	r0, r6
   b522e:	f7fe ff56 	bl	b40de <_ZN4File9availableEv>
   b5232:	4604      	mov	r4, r0
   b5234:	b188      	cbz	r0, b525a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5236:	2264      	movs	r2, #100	; 0x64
   b5238:	2100      	movs	r1, #0
   b523a:	a813      	add	r0, sp, #76	; 0x4c
   b523c:	f00c ff98 	bl	c2170 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5240:	aa13      	add	r2, sp, #76	; 0x4c
   b5242:	2364      	movs	r3, #100	; 0x64
   b5244:	210d      	movs	r1, #13
   b5246:	4630      	mov	r0, r6
   b5248:	f00b fcb6 	bl	c0bb8 <_ZN6Stream14readBytesUntilEcPcj>
   b524c:	2300      	movs	r3, #0
   b524e:	2264      	movs	r2, #100	; 0x64
   b5250:	a913      	add	r1, sp, #76	; 0x4c
   b5252:	4648      	mov	r0, r9
   b5254:	f008 fcce 	bl	bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5258:	e7e8      	b.n	b522c <_Z13dataOffloaderv+0x138>
            interrupts();
   b525a:	f009 ffe3 	bl	bf224 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b525e:	2226      	movs	r2, #38	; 0x26
   b5260:	4621      	mov	r1, r4
   b5262:	a809      	add	r0, sp, #36	; 0x24
   b5264:	f00c ff84 	bl	c2170 <memset>
            strcpy(fileCode,"filecomp");
   b5268:	4916      	ldr	r1, [pc, #88]	; (b52c4 <_Z13dataOffloaderv+0x1d0>)
   b526a:	a809      	add	r0, sp, #36	; 0x24
   b526c:	f00c ffe6 	bl	c223c <strcpy>
   b5270:	4623      	mov	r3, r4
   b5272:	2226      	movs	r2, #38	; 0x26
   b5274:	a909      	add	r1, sp, #36	; 0x24
   b5276:	480e      	ldr	r0, [pc, #56]	; (b52b0 <_Z13dataOffloaderv+0x1bc>)
   b5278:	f008 fcbc 	bl	bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b527c:	2096      	movs	r0, #150	; 0x96
   b527e:	f008 fa65 	bl	bd74c <delay>
   b5282:	e790      	b.n	b51a6 <_Z13dataOffloaderv+0xb2>
   b5284:	000c45ff 	.word	0x000c45ff
   b5288:	000c461c 	.word	0x000c461c
   b528c:	2003de88 	.word	0x2003de88
   b5290:	2003e0e4 	.word	0x2003e0e4
   b5294:	000c461e 	.word	0x000c461e
   b5298:	000c464b 	.word	0x000c464b
   b529c:	2003ddc8 	.word	0x2003ddc8
   b52a0:	000c466b 	.word	0x000c466b
   b52a4:	2003df40 	.word	0x2003df40
   b52a8:	000c46a9 	.word	0x000c46a9
   b52ac:	000c46ae 	.word	0x000c46ae
   b52b0:	2003e0dc 	.word	0x2003e0dc
   b52b4:	000c46b7 	.word	0x000c46b7
   b52b8:	2003df30 	.word	0x2003df30
   b52bc:	000c46c0 	.word	0x000c46c0
   b52c0:	000c46d3 	.word	0x000c46d3
   b52c4:	000c46fb 	.word	0x000c46fb
   b52c8:	000c4680 	.word	0x000c4680

000b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b52cc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b52ce:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b52d0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b52d2:	b17c      	cbz	r4, b52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b52d4:	6863      	ldr	r3, [r4, #4]
   b52d6:	3b01      	subs	r3, #1
   b52d8:	6063      	str	r3, [r4, #4]
   b52da:	b95b      	cbnz	r3, b52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b52dc:	6823      	ldr	r3, [r4, #0]
   b52de:	4620      	mov	r0, r4
   b52e0:	689b      	ldr	r3, [r3, #8]
   b52e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b52e4:	68a3      	ldr	r3, [r4, #8]
   b52e6:	3b01      	subs	r3, #1
   b52e8:	60a3      	str	r3, [r4, #8]
   b52ea:	b91b      	cbnz	r3, b52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b52ec:	6823      	ldr	r3, [r4, #0]
   b52ee:	4620      	mov	r0, r4
   b52f0:	68db      	ldr	r3, [r3, #12]
   b52f2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b52f4:	4628      	mov	r0, r5
   b52f6:	bd38      	pop	{r3, r4, r5, pc}

000b52f8 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b52f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b52fc:	b084      	sub	sp, #16
   b52fe:	af02      	add	r7, sp, #8
   b5300:	4680      	mov	r8, r0
   b5302:	4691      	mov	r9, r2
   b5304:	461e      	mov	r6, r3
   b5306:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5308:	f00c ffbd 	bl	c2286 <strlen>
   b530c:	3009      	adds	r0, #9
   b530e:	f020 0107 	bic.w	r1, r0, #7
   b5312:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5316:	4640      	mov	r0, r8
   b5318:	f00c ffb5 	bl	c2286 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b531c:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5320:	4925      	ldr	r1, [pc, #148]	; (b53b8 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5322:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5324:	4603      	mov	r3, r0
   b5326:	4642      	mov	r2, r8
   b5328:	4620      	mov	r0, r4
   b532a:	f008 f9bb 	bl	bd6a4 <sprintf>
    if(sendLTE || sendMode == 4){
   b532e:	f1ba 0f00 	cmp.w	sl, #0
   b5332:	d101      	bne.n	b5338 <_Z8sendDataPKchbbb+0x40>
   b5334:	2d04      	cmp	r5, #4
   b5336:	d10c      	bne.n	b5352 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5338:	4b20      	ldr	r3, [pc, #128]	; (b53bc <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b533a:	4921      	ldr	r1, [pc, #132]	; (b53c0 <_Z8sendDataPKchbbb+0xc8>)
   b533c:	781b      	ldrb	r3, [r3, #0]
   b533e:	f88d 3000 	strb.w	r3, [sp]
   b5342:	4638      	mov	r0, r7
   b5344:	233c      	movs	r3, #60	; 0x3c
   b5346:	4622      	mov	r2, r4
   b5348:	f009 fd3e 	bl	bedc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b534c:	1d38      	adds	r0, r7, #4
   b534e:	f7ff ffbd 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5352:	f1b9 0f00 	cmp.w	r9, #0
   b5356:	d101      	bne.n	b535c <_Z8sendDataPKchbbb+0x64>
   b5358:	2d01      	cmp	r5, #1
   b535a:	d121      	bne.n	b53a0 <_Z8sendDataPKchbbb+0xa8>
   b535c:	f008 fd5a 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5360:	f008 fdb6 	bl	bded0 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5364:	b1e0      	cbz	r0, b53a0 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5366:	4620      	mov	r0, r4
   b5368:	f00c ff8d 	bl	c2286 <strlen>
   b536c:	3007      	adds	r0, #7
   b536e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5372:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5374:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5378:	4620      	mov	r0, r4
   b537a:	f00c ff84 	bl	c2286 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b537e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5382:	4602      	mov	r2, r0
   b5384:	4621      	mov	r1, r4
   b5386:	4648      	mov	r0, r9
   b5388:	f00c feca 	bl	c2120 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b538c:	4620      	mov	r0, r4
   b538e:	f00c ff7a 	bl	c2286 <strlen>
   b5392:	2300      	movs	r3, #0
   b5394:	4602      	mov	r2, r0
   b5396:	4649      	mov	r1, r9
   b5398:	480a      	ldr	r0, [pc, #40]	; (b53c4 <_Z8sendDataPKchbbb+0xcc>)
   b539a:	f008 fc2b 	bl	bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b539e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b53a0:	b90e      	cbnz	r6, b53a6 <_Z8sendDataPKchbbb+0xae>
   b53a2:	2d02      	cmp	r5, #2
   b53a4:	d104      	bne.n	b53b0 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b53a6:	f00c f84b 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b53aa:	4621      	mov	r1, r4
   b53ac:	f00b fa07 	bl	c07be <_ZN5Print7printlnEPKc>
}
   b53b0:	3708      	adds	r7, #8
   b53b2:	46bd      	mov	sp, r7
   b53b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b53b8:	000c4704 	.word	0x000c4704
   b53bc:	2003ddc4 	.word	0x2003ddc4
   b53c0:	000c470b 	.word	0x000c470b
   b53c4:	2003e5d4 	.word	0x2003e5d4

000b53c8 <_Z16sendResponseDatav>:
void sendResponseData(){
   b53c8:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b53ca:	4d27      	ldr	r5, [pc, #156]	; (b5468 <_Z16sendResponseDatav+0xa0>)
   b53cc:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b53ce:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b53d0:	2b00      	cmp	r3, #0
   b53d2:	d046      	beq.n	b5462 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b53d4:	2241      	movs	r2, #65	; 0x41
   b53d6:	2100      	movs	r1, #0
   b53d8:	a80b      	add	r0, sp, #44	; 0x2c
   b53da:	f00c fec9 	bl	c2170 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b53de:	4b23      	ldr	r3, [pc, #140]	; (b546c <_Z16sendResponseDatav+0xa4>)
   b53e0:	9308      	str	r3, [sp, #32]
   b53e2:	4b23      	ldr	r3, [pc, #140]	; (b5470 <_Z16sendResponseDatav+0xa8>)
   b53e4:	eddf 6a23 	vldr	s13, [pc, #140]	; b5474 <_Z16sendResponseDatav+0xac>
   b53e8:	ed93 7a00 	vldr	s14, [r3]
   b53ec:	4b22      	ldr	r3, [pc, #136]	; (b5478 <_Z16sendResponseDatav+0xb0>)
   b53ee:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b53f2:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b53f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b53f8:	ed8d 7a07 	vstr	s14, [sp, #28]
   b53fc:	ed93 7a00 	vldr	s14, [r3]
   b5400:	4b1e      	ldr	r3, [pc, #120]	; (b547c <_Z16sendResponseDatav+0xb4>)
   b5402:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5406:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b540a:	ed8d 7a06 	vstr	s14, [sp, #24]
   b540e:	ed93 7a00 	vldr	s14, [r3]
   b5412:	4b1b      	ldr	r3, [pc, #108]	; (b5480 <_Z16sendResponseDatav+0xb8>)
   b5414:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5418:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b541c:	ed8d 7a05 	vstr	s14, [sp, #20]
   b5420:	edd3 7a00 	vldr	s15, [r3]
   b5424:	4b17      	ldr	r3, [pc, #92]	; (b5484 <_Z16sendResponseDatav+0xbc>)
   b5426:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b542a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b542e:	edcd 7a04 	vstr	s15, [sp, #16]
   b5432:	6818      	ldr	r0, [r3, #0]
   b5434:	f00c faa6 	bl	c1984 <__aeabi_f2d>
   b5438:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b543c:	4b12      	ldr	r3, [pc, #72]	; (b5488 <_Z16sendResponseDatav+0xc0>)
   b543e:	6818      	ldr	r0, [r3, #0]
   b5440:	f00c faa0 	bl	c1984 <__aeabi_f2d>
   b5444:	2201      	movs	r2, #1
   b5446:	e9cd 0100 	strd	r0, r1, [sp]
   b544a:	4910      	ldr	r1, [pc, #64]	; (b548c <_Z16sendResponseDatav+0xc4>)
   b544c:	a80b      	add	r0, sp, #44	; 0x2c
   b544e:	f008 f929 	bl	bd6a4 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5452:	7829      	ldrb	r1, [r5, #0]
   b5454:	9400      	str	r4, [sp, #0]
   b5456:	4623      	mov	r3, r4
   b5458:	4622      	mov	r2, r4
   b545a:	a80b      	add	r0, sp, #44	; 0x2c
   b545c:	f7ff ff4c 	bl	b52f8 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5460:	702c      	strb	r4, [r5, #0]
}
   b5462:	b01d      	add	sp, #116	; 0x74
   b5464:	bd30      	pop	{r4, r5, pc}
   b5466:	bf00      	nop
   b5468:	2003e0e5 	.word	0x2003e0e5
   b546c:	00010d88 	.word	0x00010d88
   b5470:	2003e57c 	.word	0x2003e57c
   b5474:	447a0000 	.word	0x447a0000
   b5478:	2003e574 	.word	0x2003e574
   b547c:	2003e580 	.word	0x2003e580
   b5480:	2003e578 	.word	0x2003e578
   b5484:	2003df08 	.word	0x2003df08
   b5488:	2003de2c 	.word	0x2003de2c
   b548c:	000c4713 	.word	0x000c4713

000b5490 <_Z12statusUpdatev>:
void statusUpdate(){
   b5490:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5492:	4e2c      	ldr	r6, [pc, #176]	; (b5544 <_Z12statusUpdatev+0xb4>)
   b5494:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5496:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5498:	2b00      	cmp	r3, #0
   b549a:	d049      	beq.n	b5530 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b549c:	4a2a      	ldr	r2, [pc, #168]	; (b5548 <_Z12statusUpdatev+0xb8>)
   b549e:	4b2b      	ldr	r3, [pc, #172]	; (b554c <_Z12statusUpdatev+0xbc>)
   b54a0:	6810      	ldr	r0, [r2, #0]
   b54a2:	781b      	ldrb	r3, [r3, #0]
   b54a4:	9307      	str	r3, [sp, #28]
   b54a6:	f00c fa6d 	bl	c1984 <__aeabi_f2d>
   b54aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b54ae:	4a28      	ldr	r2, [pc, #160]	; (b5550 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b54b0:	4c28      	ldr	r4, [pc, #160]	; (b5554 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b54b2:	6810      	ldr	r0, [r2, #0]
   b54b4:	f00c fa66 	bl	c1984 <__aeabi_f2d>
   b54b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b54bc:	4a26      	ldr	r2, [pc, #152]	; (b5558 <_Z12statusUpdatev+0xc8>)
   b54be:	9b07      	ldr	r3, [sp, #28]
   b54c0:	7812      	ldrb	r2, [r2, #0]
   b54c2:	4926      	ldr	r1, [pc, #152]	; (b555c <_Z12statusUpdatev+0xcc>)
   b54c4:	9200      	str	r2, [sp, #0]
   b54c6:	a809      	add	r0, sp, #36	; 0x24
   b54c8:	2201      	movs	r2, #1
   b54ca:	f008 f8eb 	bl	bd6a4 <sprintf>
        Serial.println(updateStr);
   b54ce:	f00b fe1f 	bl	c1110 <_Z16_fetch_usbserialv>
   b54d2:	a909      	add	r1, sp, #36	; 0x24
   b54d4:	f00b f973 	bl	c07be <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b54d8:	f00b fe1a 	bl	c1110 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b54dc:	8821      	ldrh	r1, [r4, #0]
   b54de:	4605      	mov	r5, r0
   b54e0:	220a      	movs	r2, #10
   b54e2:	f00b f978 	bl	c07d6 <_ZN5Print11printNumberEmh>
        n += println();
   b54e6:	4628      	mov	r0, r5
   b54e8:	f00b f95d 	bl	c07a6 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b54ec:	4b1c      	ldr	r3, [pc, #112]	; (b5560 <_Z12statusUpdatev+0xd0>)
   b54ee:	781b      	ldrb	r3, [r3, #0]
   b54f0:	bb03      	cbnz	r3, b5534 <_Z12statusUpdatev+0xa4>
   b54f2:	4b1c      	ldr	r3, [pc, #112]	; (b5564 <_Z12statusUpdatev+0xd4>)
   b54f4:	781b      	ldrb	r3, [r3, #0]
   b54f6:	b9eb      	cbnz	r3, b5534 <_Z12statusUpdatev+0xa4>
   b54f8:	8823      	ldrh	r3, [r4, #0]
   b54fa:	b1f3      	cbz	r3, b553a <_Z12statusUpdatev+0xaa>
   b54fc:	f013 0303 	ands.w	r3, r3, #3
   b5500:	d11b      	bne.n	b553a <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5502:	2201      	movs	r2, #1
   b5504:	9200      	str	r2, [sp, #0]
   b5506:	4619      	mov	r1, r3
   b5508:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b550a:	a809      	add	r0, sp, #36	; 0x24
   b550c:	f7ff fef4 	bl	b52f8 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5510:	8823      	ldrh	r3, [r4, #0]
   b5512:	b10b      	cbz	r3, b5518 <_Z12statusUpdatev+0x88>
   b5514:	3b01      	subs	r3, #1
   b5516:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5518:	2400      	movs	r4, #0
        delay(100);
   b551a:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b551c:	7034      	strb	r4, [r6, #0]
        delay(100);
   b551e:	f008 f915 	bl	bd74c <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b5522:	4811      	ldr	r0, [pc, #68]	; (b5568 <_Z12statusUpdatev+0xd8>)
   b5524:	9400      	str	r4, [sp, #0]
   b5526:	4623      	mov	r3, r4
   b5528:	2201      	movs	r2, #1
   b552a:	4621      	mov	r1, r4
   b552c:	f7ff fee4 	bl	b52f8 <_Z8sendDataPKchbbb>
}
   b5530:	b010      	add	sp, #64	; 0x40
   b5532:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5534:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5538:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b553a:	2100      	movs	r1, #0
   b553c:	2301      	movs	r3, #1
   b553e:	9100      	str	r1, [sp, #0]
   b5540:	461a      	mov	r2, r3
   b5542:	e7e2      	b.n	b550a <_Z12statusUpdatev+0x7a>
   b5544:	2003e5d0 	.word	0x2003e5d0
   b5548:	2003df08 	.word	0x2003df08
   b554c:	2003ddd8 	.word	0x2003ddd8
   b5550:	2003de2c 	.word	0x2003de2c
   b5554:	2003ddae 	.word	0x2003ddae
   b5558:	2003e5b0 	.word	0x2003e5b0
   b555c:	000c4737 	.word	0x000c4737
   b5560:	2003dd7c 	.word	0x2003dd7c
   b5564:	2003ddbc 	.word	0x2003ddbc
   b5568:	000c4750 	.word	0x000c4750

000b556c <loop>:
void loop(){
   b556c:	b510      	push	{r4, lr}
   b556e:	ed2d 8b02 	vpush	{d8}
   b5572:	b090      	sub	sp, #64	; 0x40
    if(getGPSLatLon()){
   b5574:	f7ff fb7a 	bl	b4c6c <_Z12getGPSLatLonv>
   b5578:	b370      	cbz	r0, b55d8 <loop+0x6c>
        latitude = ((float)latitude_mdeg/10000000.0);
   b557a:	4b32      	ldr	r3, [pc, #200]	; (b5644 <loop+0xd8>)
   b557c:	eddf 6a32 	vldr	s13, [pc, #200]	; b5648 <loop+0xdc>
   b5580:	edd3 7a00 	vldr	s15, [r3]
   b5584:	4b31      	ldr	r3, [pc, #196]	; (b564c <loop+0xe0>)
   b5586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b558a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   b558e:	ed83 7a00 	vstr	s14, [r3]
        longitude = ((float)longitude_mdeg/10000000.0);
   b5592:	4b2f      	ldr	r3, [pc, #188]	; (b5650 <loop+0xe4>)
   b5594:	edd3 7a00 	vldr	s15, [r3]
   b5598:	4b2e      	ldr	r3, [pc, #184]	; (b5654 <loop+0xe8>)
   b559a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b559e:	ee17 0a10 	vmov	r0, s14
        longitude = ((float)longitude_mdeg/10000000.0);
   b55a2:	ee87 8aa6 	vdiv.f32	s16, s15, s13
   b55a6:	ed83 8a00 	vstr	s16, [r3]
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b55aa:	f00c f9eb 	bl	c1984 <__aeabi_f2d>
   b55ae:	4602      	mov	r2, r0
   b55b0:	460b      	mov	r3, r1
   b55b2:	ee18 0a10 	vmov	r0, s16
   b55b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b55ba:	f00c f9e3 	bl	c1984 <__aeabi_f2d>
   b55be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   b55c2:	e9cd 0100 	strd	r0, r1, [sp]
   b55c6:	4924      	ldr	r1, [pc, #144]	; (b5658 <loop+0xec>)
   b55c8:	a808      	add	r0, sp, #32
   b55ca:	f008 f86b 	bl	bd6a4 <sprintf>
        Serial.println(latLonBuf);
   b55ce:	f00b fd9f 	bl	c1110 <_Z16_fetch_usbserialv>
   b55d2:	a908      	add	r1, sp, #32
   b55d4:	f00b f8f3 	bl	c07be <_ZN5Print7printlnEPKc>
    readPowerSys();
   b55d8:	f7ff faca 	bl	b4b70 <_Z12readPowerSysv>
    Serial.printlnf("Battery %: %d Voltage: %0.3fV, Battery Current: %0.4fA, Solar Current: %0.4fA",battPercent, battVoltage, battCurrent, solarCurrent);
   b55dc:	f00b fd98 	bl	c1110 <_Z16_fetch_usbserialv>
   b55e0:	4b1e      	ldr	r3, [pc, #120]	; (b565c <loop+0xf0>)
   b55e2:	781a      	ldrb	r2, [r3, #0]
   b55e4:	4b1e      	ldr	r3, [pc, #120]	; (b5660 <loop+0xf4>)
   b55e6:	9206      	str	r2, [sp, #24]
   b55e8:	4604      	mov	r4, r0
   b55ea:	6818      	ldr	r0, [r3, #0]
   b55ec:	f00c f9ca 	bl	c1984 <__aeabi_f2d>
   b55f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b55f4:	4b1b      	ldr	r3, [pc, #108]	; (b5664 <loop+0xf8>)
   b55f6:	6818      	ldr	r0, [r3, #0]
   b55f8:	f00c f9c4 	bl	c1984 <__aeabi_f2d>
   b55fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5600:	4b19      	ldr	r3, [pc, #100]	; (b5668 <loop+0xfc>)
   b5602:	6818      	ldr	r0, [r3, #0]
   b5604:	f00c f9be 	bl	c1984 <__aeabi_f2d>
   b5608:	9a06      	ldr	r2, [sp, #24]
   b560a:	e9cd 0100 	strd	r0, r1, [sp]
   b560e:	4917      	ldr	r1, [pc, #92]	; (b566c <loop+0x100>)
   b5610:	4620      	mov	r0, r4
   b5612:	f7fe fea1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    sensorHandler();
   b5616:	f7ff fb5f 	bl	b4cd8 <_Z13sensorHandlerv>
    XBeeHandler();
   b561a:	f7ff fce1 	bl	b4fe0 <_Z11XBeeHandlerv>
    statusUpdate();
   b561e:	f7ff ff37 	bl	b5490 <_Z12statusUpdatev>
    updateMotors();
   b5622:	f7ff fb3b 	bl	b4c9c <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5626:	4b12      	ldr	r3, [pc, #72]	; (b5670 <loop+0x104>)
   b5628:	781b      	ldrb	r3, [r3, #0]
   b562a:	b10b      	cbz	r3, b5630 <loop+0xc4>
   b562c:	f7ff fd62 	bl	b50f4 <_Z13dataOffloaderv>
    sendResponseData();
   b5630:	f7ff feca 	bl	b53c8 <_Z16sendResponseDatav>
    delay(100);
   b5634:	2064      	movs	r0, #100	; 0x64
}
   b5636:	b010      	add	sp, #64	; 0x40
   b5638:	ecbd 8b02 	vpop	{d8}
   b563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b5640:	f008 b884 	b.w	bd74c <delay>
   b5644:	2003de30 	.word	0x2003de30
   b5648:	4b189680 	.word	0x4b189680
   b564c:	2003de2c 	.word	0x2003de2c
   b5650:	2003df0c 	.word	0x2003df0c
   b5654:	2003df08 	.word	0x2003df08
   b5658:	000c475e 	.word	0x000c475e
   b565c:	2003ddd8 	.word	0x2003ddd8
   b5660:	2003e58c 	.word	0x2003e58c
   b5664:	2003ddd4 	.word	0x2003ddd4
   b5668:	2003dddc 	.word	0x2003dddc
   b566c:	000c477d 	.word	0x000c477d
   b5670:	2003e0e4 	.word	0x2003e0e4

000b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5674:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5676:	e9d0 5300 	ldrd	r5, r3, [r0]
   b567a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b567c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b567e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5682:	42ae      	cmp	r6, r5
   b5684:	d004      	beq.n	b5690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5686:	4628      	mov	r0, r5
   b5688:	f00b fac6 	bl	c0c18 <_ZN6StringD1Ev>
   b568c:	3514      	adds	r5, #20
   b568e:	e7f8      	b.n	b5682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5690:	6820      	ldr	r0, [r4, #0]
   b5692:	f007 fff7 	bl	bd684 <free>
    AllocatorT::free(data_);
}
   b5696:	4620      	mov	r0, r4
   b5698:	bd70      	pop	{r4, r5, r6, pc}

000b569a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b569a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b569c:	4616      	mov	r6, r2
   b569e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b56a0:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b56a2:	e9c0 2200 	strd	r2, r2, [r0]
   b56a6:	4604      	mov	r4, r0
   b56a8:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b56aa:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b56ac:	4619      	mov	r1, r3
   b56ae:	a804      	add	r0, sp, #16
   b56b0:	f008 fa62 	bl	bdb78 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b56b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b56b6:	4638      	mov	r0, r7
   b56b8:	f008 fa5e 	bl	bdb78 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b56bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b56be:	9302      	str	r3, [sp, #8]
   b56c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b56c2:	4620      	mov	r0, r4
   b56c4:	e9cd 7300 	strd	r7, r3, [sp]
   b56c8:	4632      	mov	r2, r6
   b56ca:	ab04      	add	r3, sp, #16
   b56cc:	4629      	mov	r1, r5
   b56ce:	f008 ffc9 	bl	be664 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b56d2:	4620      	mov	r0, r4
   b56d4:	b00f      	add	sp, #60	; 0x3c
   b56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b56d8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b56da:	4c0b      	ldr	r4, [pc, #44]	; (b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b56dc:	7821      	ldrb	r1, [r4, #0]
   b56de:	f3bf 8f5b 	dmb	ish
   b56e2:	f011 0101 	ands.w	r1, r1, #1
   b56e6:	d10b      	bne.n	b5700 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b56e8:	4620      	mov	r0, r4
   b56ea:	9101      	str	r1, [sp, #4]
   b56ec:	f7fe fce8 	bl	b40c0 <__cxa_guard_acquire>
   b56f0:	9901      	ldr	r1, [sp, #4]
   b56f2:	b128      	cbz	r0, b5700 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b56f4:	4805      	ldr	r0, [pc, #20]	; (b570c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b56f6:	f00b f942 	bl	c097e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56fa:	4620      	mov	r0, r4
   b56fc:	f7fe fce5 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b5700:	4802      	ldr	r0, [pc, #8]	; (b570c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5702:	b002      	add	sp, #8
   b5704:	bd10      	pop	{r4, pc}
   b5706:	bf00      	nop
   b5708:	2003dd70 	.word	0x2003dd70
   b570c:	2003dd74 	.word	0x2003dd74

000b5710 <_Z8setupSPIv>:
void setupSPI(){
   b5710:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b5712:	f7ff ffe1 	bl	b56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5716:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b571a:	2100      	movs	r1, #0
   b571c:	f00b f94d 	bl	c09ba <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5720:	f7ff ffda 	bl	b56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5728:	4901      	ldr	r1, [pc, #4]	; (b5730 <_Z8setupSPIv+0x20>)
   b572a:	2201      	movs	r2, #1
   b572c:	f00b b9e4 	b.w	c0af8 <_ZN8SPIClass13setClockSpeedEjj>
   b5730:	000f4240 	.word	0x000f4240

000b5734 <setup>:
void setup(){
   b5734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5738:	48bc      	ldr	r0, [pc, #752]	; (b5a2c <setup+0x2f8>)
    setLSpeed = 90;
   b573a:	4ebd      	ldr	r6, [pc, #756]	; (b5a30 <setup+0x2fc>)
   b573c:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b573e:	4dbd      	ldr	r5, [pc, #756]	; (b5a34 <setup+0x300>)
   b5740:	f003 0303 	and.w	r3, r3, #3
   b5744:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5748:	b093      	sub	sp, #76	; 0x4c
   b574a:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b574c:	2200      	movs	r2, #0
   b574e:	2101      	movs	r1, #1
   b5750:	3004      	adds	r0, #4
   b5752:	f007 fea9 	bl	bd4a8 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5756:	2101      	movs	r1, #1
   b5758:	2002      	movs	r0, #2
   b575a:	f00b fdd9 	bl	c1310 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b575e:	2101      	movs	r1, #1
   b5760:	201c      	movs	r0, #28
   b5762:	f00b fdd5 	bl	c1310 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b5766:	2100      	movs	r1, #0
   b5768:	201d      	movs	r0, #29
   b576a:	f00b fdd1 	bl	c1310 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b576e:	2100      	movs	r1, #0
   b5770:	2002      	movs	r0, #2
   b5772:	f00b fdde 	bl	c1332 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b5776:	2100      	movs	r1, #0
   b5778:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b577a:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b577c:	f00b fdd9 	bl	c1332 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5780:	27b4      	movs	r7, #180	; 0xb4
   b5782:	f007 fca1 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b5786:	235a      	movs	r3, #90	; 0x5a
   b5788:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b578a:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b578c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5790:	e9cd 4700 	strd	r4, r7, [sp]
   b5794:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5798:	2106      	movs	r1, #6
   b579a:	48a7      	ldr	r0, [pc, #668]	; (b5a38 <setup+0x304>)
   b579c:	f00b f8be 	bl	c091c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b57a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b57a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b57a8:	e9cd 4700 	strd	r4, r7, [sp]
   b57ac:	2105      	movs	r1, #5
   b57ae:	48a3      	ldr	r0, [pc, #652]	; (b5a3c <setup+0x308>)
    logSensors = true;
   b57b0:	4fa3      	ldr	r7, [pc, #652]	; (b5a40 <setup+0x30c>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b57b2:	f00b f8b3 	bl	c091c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b57b6:	7831      	ldrb	r1, [r6, #0]
   b57b8:	489f      	ldr	r0, [pc, #636]	; (b5a38 <setup+0x304>)
    logMessages = true;
   b57ba:	4ea2      	ldr	r6, [pc, #648]	; (b5a44 <setup+0x310>)
    ESCL.write(setLSpeed);
   b57bc:	f00b f871 	bl	c08a2 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b57c0:	7829      	ldrb	r1, [r5, #0]
   b57c2:	489e      	ldr	r0, [pc, #632]	; (b5a3c <setup+0x308>)
   b57c4:	f00b f86d 	bl	c08a2 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b57c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b57cc:	f007 ffbe 	bl	bd74c <delay>
    BLE.on();
   b57d0:	f008 fb20 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57d4:	f008 fb68 	bl	bdea8 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b57d8:	f008 fb1c 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57dc:	2108      	movs	r1, #8
   b57de:	f008 fb6a 	bl	bdeb6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b57e2:	f00b fc95 	bl	c1110 <_Z16_fetch_usbserialv>
   b57e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b57ea:	f00b fc81 	bl	c10f0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b57ee:	f00b fe27 	bl	c1440 <_Z22__fetch_global_Serial1v>
   b57f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b57f6:	f00b fc23 	bl	c1040 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b57fa:	f7ff ff89 	bl	b5710 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b57fe:	f7ff f96d 	bl	b4adc <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b5802:	f7ff f983 	bl	b4b0c <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b5806:	f7ff f955 	bl	b4ab4 <_Z8setupLTEv>
   b580a:	f007 fc5d 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b580e:	4b8e      	ldr	r3, [pc, #568]	; (b5a48 <setup+0x314>)
   b5810:	6018      	str	r0, [r3, #0]
   b5812:	f007 fc59 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b5816:	4b8d      	ldr	r3, [pc, #564]	; (b5a4c <setup+0x318>)
   b5818:	6018      	str	r0, [r3, #0]
   b581a:	f007 fc55 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b581e:	4b8c      	ldr	r3, [pc, #560]	; (b5a50 <setup+0x31c>)
   b5820:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b5822:	4b8c      	ldr	r3, [pc, #560]	; (b5a54 <setup+0x320>)
   b5824:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5826:	4b8c      	ldr	r3, [pc, #560]	; (b5a58 <setup+0x324>)
   b5828:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b582a:	4b8c      	ldr	r3, [pc, #560]	; (b5a5c <setup+0x328>)
   b582c:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b582e:	4b8c      	ldr	r3, [pc, #560]	; (b5a60 <setup+0x32c>)
   b5830:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b5832:	4b8c      	ldr	r3, [pc, #560]	; (b5a64 <setup+0x330>)
   b5834:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5836:	4b8c      	ldr	r3, [pc, #560]	; (b5a68 <setup+0x334>)
   b5838:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b583c:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b583e:	4b8b      	ldr	r3, [pc, #556]	; (b5a6c <setup+0x338>)
    logSensors = true;
   b5840:	2501      	movs	r5, #1
    battPercent = 50;
   b5842:	2232      	movs	r2, #50	; 0x32
   b5844:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b5846:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5848:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b584a:	f008 fae3 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b584e:	4a88      	ldr	r2, [pc, #544]	; (b5a70 <setup+0x33c>)
   b5850:	4601      	mov	r1, r0
   b5852:	a80d      	add	r0, sp, #52	; 0x34
   b5854:	f009 f830 	bl	be8b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5858:	a80d      	add	r0, sp, #52	; 0x34
   b585a:	f008 fbe0 	bl	be01e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b585e:	f008 fad9 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5862:	4a84      	ldr	r2, [pc, #528]	; (b5a74 <setup+0x340>)
   b5864:	4601      	mov	r1, r0
   b5866:	a80d      	add	r0, sp, #52	; 0x34
   b5868:	f009 f826 	bl	be8b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b586c:	a80d      	add	r0, sp, #52	; 0x34
   b586e:	f008 fbd6 	bl	be01e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b5872:	f008 facf 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5876:	4a80      	ldr	r2, [pc, #512]	; (b5a78 <setup+0x344>)
   b5878:	4601      	mov	r1, r0
   b587a:	a80d      	add	r0, sp, #52	; 0x34
   b587c:	f009 f81c 	bl	be8b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5880:	a80d      	add	r0, sp, #52	; 0x34
   b5882:	f008 fbcc 	bl	be01e <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b5886:	4b7d      	ldr	r3, [pc, #500]	; (b5a7c <setup+0x348>)
   b5888:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b588a:	4b7d      	ldr	r3, [pc, #500]	; (b5a80 <setup+0x34c>)
        BleUuid tempUUID(uuid);
   b588c:	a80d      	add	r0, sp, #52	; 0x34
   b588e:	6819      	ldr	r1, [r3, #0]
   b5890:	f008 f972 	bl	bdb78 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5894:	a80d      	add	r0, sp, #52	; 0x34
   b5896:	f008 f8d1 	bl	bda3c <_ZNK8particle7BleUuid4typeEv>
   b589a:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b589c:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b589e:	2d00      	cmp	r5, #0
   b58a0:	f040 80b8 	bne.w	b5a14 <setup+0x2e0>
            uint16_t uuid16 = tempUUID.shorted();
   b58a4:	f008 f8e6 	bl	bda74 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b58a8:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b58aa:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b58ae:	2302      	movs	r3, #2
   b58b0:	aa09      	add	r2, sp, #36	; 0x24
   b58b2:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b58b4:	4873      	ldr	r0, [pc, #460]	; (b5a84 <setup+0x350>)
   b58b6:	f008 fcdd 	bl	be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b58ba:	2300      	movs	r3, #0
   b58bc:	496f      	ldr	r1, [pc, #444]	; (b5a7c <setup+0x348>)
   b58be:	4871      	ldr	r0, [pc, #452]	; (b5a84 <setup+0x350>)
   b58c0:	2208      	movs	r2, #8
   b58c2:	f008 fcf5 	bl	be2b0 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b58c6:	f008 faa5 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58ca:	2200      	movs	r2, #0
   b58cc:	496d      	ldr	r1, [pc, #436]	; (b5a84 <setup+0x350>)
   b58ce:	f008 fb52 	bl	bdf76 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b58d2:	f00b fd75 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b58d6:	f009 fc63 	bl	bf1a0 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b58da:	f00b fd71 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b58de:	496a      	ldr	r1, [pc, #424]	; (b5a88 <setup+0x354>)
   b58e0:	f009 fc5a 	bl	bf198 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b58e4:	f00b fd6c 	bl	c13c0 <_Z19__fetch_global_Wirev>
   b58e8:	211c      	movs	r1, #28
   b58ea:	4602      	mov	r2, r0
   b58ec:	4867      	ldr	r0, [pc, #412]	; (b5a8c <setup+0x358>)
   b58ee:	f002 f876 	bl	b79de <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b58f2:	2800      	cmp	r0, #0
   b58f4:	f040 8095 	bne.w	b5a22 <setup+0x2ee>
        Serial.println("Failed to find LIS3MDL chip");
   b58f8:	f00b fc0a 	bl	c1110 <_Z16_fetch_usbserialv>
   b58fc:	4964      	ldr	r1, [pc, #400]	; (b5a90 <setup+0x35c>)
    else Serial.println("LIS3MDL Found!");
   b58fe:	f00a ff5e 	bl	c07be <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b5902:	4862      	ldr	r0, [pc, #392]	; (b5a8c <setup+0x358>)
   b5904:	2101      	movs	r1, #1
   b5906:	f001 ff63 	bl	b77d0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b590a:	4860      	ldr	r0, [pc, #384]	; (b5a8c <setup+0x358>)
   b590c:	2100      	movs	r1, #0
   b590e:	f001 ffc3 	bl	b7898 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5912:	485e      	ldr	r0, [pc, #376]	; (b5a8c <setup+0x358>)
   b5914:	2101      	movs	r1, #1
   b5916:	f001 ff8d 	bl	b7834 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_4_GAUSS);
   b591a:	485c      	ldr	r0, [pc, #368]	; (b5a8c <setup+0x358>)
   b591c:	2100      	movs	r1, #0
   b591e:	f001 ffd6 	bl	b78ce <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5922:	2401      	movs	r4, #1
   b5924:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b5926:	4859      	ldr	r0, [pc, #356]	; (b5a8c <setup+0x358>)
   b5928:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b592c:	f002 f876 	bl	b7a1c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5930:	4623      	mov	r3, r4
   b5932:	462a      	mov	r2, r5
   b5934:	4629      	mov	r1, r5
   b5936:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b593a:	4854      	ldr	r0, [pc, #336]	; (b5a8c <setup+0x358>)
   b593c:	9400      	str	r4, [sp, #0]
   b593e:	f002 f885 	bl	b7a4c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5942:	f00b fb09 	bl	c0f58 <_ZN9TimeClass5monthEv>
   b5946:	9007      	str	r0, [sp, #28]
   b5948:	f00b fafa 	bl	c0f40 <_ZN9TimeClass3dayEv>
   b594c:	4680      	mov	r8, r0
   b594e:	f00b fb0b 	bl	c0f68 <_ZN9TimeClass4yearEv>
   b5952:	4681      	mov	r9, r0
   b5954:	f00b fad0 	bl	c0ef8 <_ZN9TimeClass4hourEv>
   b5958:	4682      	mov	sl, r0
   b595a:	f00b fad9 	bl	c0f10 <_ZN9TimeClass6minuteEv>
   b595e:	4683      	mov	fp, r0
   b5960:	f00b fae2 	bl	c0f28 <_ZN9TimeClass6secondEv>
   b5964:	9b07      	ldr	r3, [sp, #28]
   b5966:	4a4b      	ldr	r2, [pc, #300]	; (b5a94 <setup+0x360>)
   b5968:	f8cd 8000 	str.w	r8, [sp]
   b596c:	e9cd b003 	strd	fp, r0, [sp, #12]
   b5970:	2110      	movs	r1, #16
   b5972:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b5976:	a809      	add	r0, sp, #36	; 0x24
   b5978:	f007 fe9c 	bl	bd6b4 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b597c:	4946      	ldr	r1, [pc, #280]	; (b5a98 <setup+0x364>)
   b597e:	4847      	ldr	r0, [pc, #284]	; (b5a9c <setup+0x368>)
   b5980:	f00c fc5c 	bl	c223c <strcpy>
    strcat(filename,timestamp);
   b5984:	a909      	add	r1, sp, #36	; 0x24
   b5986:	4845      	ldr	r0, [pc, #276]	; (b5a9c <setup+0x368>)
   b5988:	f00c fc28 	bl	c21dc <strcat>
    strcpy(filenameMessages,filename);
   b598c:	4943      	ldr	r1, [pc, #268]	; (b5a9c <setup+0x368>)
   b598e:	4844      	ldr	r0, [pc, #272]	; (b5aa0 <setup+0x36c>)
   b5990:	f00c fc54 	bl	c223c <strcpy>
    strcat(filename,".csv");
   b5994:	4943      	ldr	r1, [pc, #268]	; (b5aa4 <setup+0x370>)
   b5996:	4841      	ldr	r0, [pc, #260]	; (b5a9c <setup+0x368>)
   b5998:	f00c fc20 	bl	c21dc <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b599c:	4942      	ldr	r1, [pc, #264]	; (b5aa8 <setup+0x374>)
   b599e:	4840      	ldr	r0, [pc, #256]	; (b5aa0 <setup+0x36c>)
   b59a0:	f00c fc1c 	bl	c21dc <strcat>
    Serial.println(filename);
   b59a4:	f00b fbb4 	bl	c1110 <_Z16_fetch_usbserialv>
   b59a8:	493c      	ldr	r1, [pc, #240]	; (b5a9c <setup+0x368>)
   b59aa:	f00a ff08 	bl	c07be <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b59ae:	f00b fbaf 	bl	c1110 <_Z16_fetch_usbserialv>
   b59b2:	493b      	ldr	r1, [pc, #236]	; (b5aa0 <setup+0x36c>)
   b59b4:	f00a ff03 	bl	c07be <_ZN5Print7printlnEPKc>
    watchdog.start();
   b59b8:	483c      	ldr	r0, [pc, #240]	; (b5aac <setup+0x378>)
   b59ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59be:	f7fe fc7b 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    motionTimer.start();
   b59c2:	483b      	ldr	r0, [pc, #236]	; (b5ab0 <setup+0x37c>)
   b59c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59c8:	f7fe fc76 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b59cc:	4839      	ldr	r0, [pc, #228]	; (b5ab4 <setup+0x380>)
   b59ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59d2:	f7fe fc71 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b59d6:	4838      	ldr	r0, [pc, #224]	; (b5ab8 <setup+0x384>)
   b59d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59dc:	f7fe fc6c 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b59e0:	4b36      	ldr	r3, [pc, #216]	; (b5abc <setup+0x388>)
   b59e2:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b59e4:	4836      	ldr	r0, [pc, #216]	; (b5ac0 <setup+0x38c>)
   b59e6:	4b37      	ldr	r3, [pc, #220]	; (b5ac4 <setup+0x390>)
   b59e8:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b59ec:	aa0d      	add	r2, sp, #52	; 0x34
   b59ee:	2108      	movs	r1, #8
   b59f0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b59f4:	930f      	str	r3, [sp, #60]	; 0x3c
   b59f6:	f7fe fe3d 	bl	b4674 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b59fa:	4604      	mov	r4, r0
   b59fc:	2800      	cmp	r0, #0
   b59fe:	d167      	bne.n	b5ad0 <setup+0x39c>
        Serial.println("Error: could not connect to SD card!");
   b5a00:	f00b fb86 	bl	c1110 <_Z16_fetch_usbserialv>
   b5a04:	4930      	ldr	r1, [pc, #192]	; (b5ac8 <setup+0x394>)
   b5a06:	f00a feda 	bl	c07be <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5a0a:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5a0c:	7034      	strb	r4, [r6, #0]
}
   b5a0e:	b013      	add	sp, #76	; 0x4c
   b5a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a14:	f008 f830 	bl	bda78 <_ZNK8particle7BleUuid8rawBytesEv>
   b5a18:	9400      	str	r4, [sp, #0]
   b5a1a:	4602      	mov	r2, r0
   b5a1c:	2310      	movs	r3, #16
   b5a1e:	2107      	movs	r1, #7
   b5a20:	e748      	b.n	b58b4 <setup+0x180>
    else Serial.println("LIS3MDL Found!");
   b5a22:	f00b fb75 	bl	c1110 <_Z16_fetch_usbserialv>
   b5a26:	4929      	ldr	r1, [pc, #164]	; (b5acc <setup+0x398>)
   b5a28:	e769      	b.n	b58fe <setup+0x1ca>
   b5a2a:	bf00      	nop
   b5a2c:	2003e590 	.word	0x2003e590
   b5a30:	2003e588 	.word	0x2003e588
   b5a34:	2003e589 	.word	0x2003e589
   b5a38:	2003dd8c 	.word	0x2003dd8c
   b5a3c:	2003dd9c 	.word	0x2003dd9c
   b5a40:	2003df05 	.word	0x2003df05
   b5a44:	2003df04 	.word	0x2003df04
   b5a48:	2003e584 	.word	0x2003e584
   b5a4c:	2003dde0 	.word	0x2003dde0
   b5a50:	2003de28 	.word	0x2003de28
   b5a54:	2003ddc0 	.word	0x2003ddc0
   b5a58:	2003dd88 	.word	0x2003dd88
   b5a5c:	2003dde4 	.word	0x2003dde4
   b5a60:	2003e0e4 	.word	0x2003e0e4
   b5a64:	2003e0e5 	.word	0x2003e0e5
   b5a68:	2003ddae 	.word	0x2003ddae
   b5a6c:	2003ddd8 	.word	0x2003ddd8
   b5a70:	2003e5d4 	.word	0x2003e5d4
   b5a74:	2003e0e8 	.word	0x2003e0e8
   b5a78:	2003e0dc 	.word	0x2003e0dc
   b5a7c:	2003dd7d 	.word	0x2003dd7d
   b5a80:	2003db7c 	.word	0x2003db7c
   b5a84:	2003ddc8 	.word	0x2003ddc8
   b5a88:	00061a80 	.word	0x00061a80
   b5a8c:	2003de50 	.word	0x2003de50
   b5a90:	000c47cb 	.word	0x000c47cb
   b5a94:	000c459b 	.word	0x000c459b
   b5a98:	000c47f6 	.word	0x000c47f6
   b5a9c:	2003dde6 	.word	0x2003dde6
   b5aa0:	2003de04 	.word	0x2003de04
   b5aa4:	000c46a9 	.word	0x000c46a9
   b5aa8:	000c47ff 	.word	0x000c47ff
   b5aac:	2003e5e0 	.word	0x2003e5e0
   b5ab0:	2003df14 	.word	0x2003df14
   b5ab4:	2003de34 	.word	0x2003de34
   b5ab8:	2003e5b4 	.word	0x2003e5b4
   b5abc:	000c48bc 	.word	0x000c48bc
   b5ac0:	2003e0f0 	.word	0x2003e0f0
   b5ac4:	007a1200 	.word	0x007a1200
   b5ac8:	000c4808 	.word	0x000c4808
   b5acc:	000c47e7 	.word	0x000c47e7
    if(logSensors){
   b5ad0:	783b      	ldrb	r3, [r7, #0]
   b5ad2:	b17b      	cbz	r3, b5af4 <setup+0x3c0>
   b5ad4:	4812      	ldr	r0, [pc, #72]	; (b5b20 <setup+0x3ec>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5ad6:	7c03      	ldrb	r3, [r0, #16]
   b5ad8:	b92b      	cbnz	r3, b5ae6 <setup+0x3b2>
   b5ada:	4912      	ldr	r1, [pc, #72]	; (b5b24 <setup+0x3f0>)
   b5adc:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ae0:	3010      	adds	r0, #16
   b5ae2:	f7fe fd53 	bl	b458c <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5ae6:	4910      	ldr	r1, [pc, #64]	; (b5b28 <setup+0x3f4>)
   b5ae8:	480d      	ldr	r0, [pc, #52]	; (b5b20 <setup+0x3ec>)
   b5aea:	f00a fe68 	bl	c07be <_ZN5Print7printlnEPKc>
        myFile.close();
   b5aee:	480f      	ldr	r0, [pc, #60]	; (b5b2c <setup+0x3f8>)
   b5af0:	f000 fc7a 	bl	b63e8 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5af4:	7833      	ldrb	r3, [r6, #0]
   b5af6:	2b00      	cmp	r3, #0
   b5af8:	d089      	beq.n	b5a0e <setup+0x2da>
   b5afa:	480d      	ldr	r0, [pc, #52]	; (b5b30 <setup+0x3fc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5afc:	7c03      	ldrb	r3, [r0, #16]
   b5afe:	b92b      	cbnz	r3, b5b0c <setup+0x3d8>
   b5b00:	490c      	ldr	r1, [pc, #48]	; (b5b34 <setup+0x400>)
   b5b02:	f244 2202 	movw	r2, #16898	; 0x4202
   b5b06:	3010      	adds	r0, #16
   b5b08:	f7fe fd40 	bl	b458c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5b0c:	490a      	ldr	r1, [pc, #40]	; (b5b38 <setup+0x404>)
   b5b0e:	4808      	ldr	r0, [pc, #32]	; (b5b30 <setup+0x3fc>)
   b5b10:	2201      	movs	r2, #1
   b5b12:	f7fe fc21 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5b16:	4809      	ldr	r0, [pc, #36]	; (b5b3c <setup+0x408>)
   b5b18:	f000 fc66 	bl	b63e8 <_ZN7FatFile5closeEv>
}
   b5b1c:	e777      	b.n	b5a0e <setup+0x2da>
   b5b1e:	bf00      	nop
   b5b20:	2003df30 	.word	0x2003df30
   b5b24:	2003dde6 	.word	0x2003dde6
   b5b28:	000c482d 	.word	0x000c482d
   b5b2c:	2003df40 	.word	0x2003df40
   b5b30:	2003deac 	.word	0x2003deac
   b5b34:	2003de04 	.word	0x2003de04
   b5b38:	000c4883 	.word	0x000c4883
   b5b3c:	2003debc 	.word	0x2003debc

000b5b40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b44:	4604      	mov	r4, r0
   b5b46:	460d      	mov	r5, r1
   b5b48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b4a:	d916      	bls.n	b5b7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5b4c:	4290      	cmp	r0, r2
   b5b4e:	d215      	bcs.n	b5b7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5b50:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5b54:	1a75      	subs	r5, r6, r1
   b5b56:	f1a1 0714 	sub.w	r7, r1, #20
   b5b5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b5c:	42b7      	cmp	r7, r6
   b5b5e:	d01c      	beq.n	b5b9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5b60:	b12c      	cbz	r4, b5b6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5b62:	4631      	mov	r1, r6
   b5b64:	4620      	mov	r0, r4
   b5b66:	f00b f8d3 	bl	c0d10 <_ZN6StringC1EOS_>
   b5b6a:	7c33      	ldrb	r3, [r6, #16]
   b5b6c:	7423      	strb	r3, [r4, #16]
   b5b6e:	4630      	mov	r0, r6
   b5b70:	f00b f852 	bl	c0c18 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5b74:	3e14      	subs	r6, #20
   b5b76:	3c14      	subs	r4, #20
   b5b78:	e7f0      	b.n	b5b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5b7a:	d00e      	beq.n	b5b9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5b7c:	42b5      	cmp	r5, r6
   b5b7e:	d00c      	beq.n	b5b9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5b80:	b12c      	cbz	r4, b5b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5b82:	4629      	mov	r1, r5
   b5b84:	4620      	mov	r0, r4
   b5b86:	f00b f8c3 	bl	c0d10 <_ZN6StringC1EOS_>
   b5b8a:	7c2b      	ldrb	r3, [r5, #16]
   b5b8c:	7423      	strb	r3, [r4, #16]
   b5b8e:	4628      	mov	r0, r5
   b5b90:	f00b f842 	bl	c0c18 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5b94:	3514      	adds	r5, #20
   b5b96:	3414      	adds	r4, #20
   b5b98:	e7f0      	b.n	b5b7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5ba0:	2300      	movs	r3, #0
   b5ba2:	e9c0 3300 	strd	r3, r3, [r0]
   b5ba6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5ba8:	684f      	ldr	r7, [r1, #4]
   b5baa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5bac:	4604      	mov	r4, r0
   b5bae:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5bb0:	dd23      	ble.n	b5bfa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5bb2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5bb6:	fb08 f007 	mul.w	r0, r8, r7
   b5bba:	f007 fd5b 	bl	bd674 <malloc>
            if (!d) {
   b5bbe:	4605      	mov	r5, r0
   b5bc0:	b1d8      	cbz	r0, b5bfa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5bc2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5bc6:	fb08 1202 	mla	r2, r8, r2, r1
   b5bca:	f7ff ffb9 	bl	b5b40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5bce:	6820      	ldr	r0, [r4, #0]
   b5bd0:	f007 fd58 	bl	bd684 <free>
        data_ = d;
   b5bd4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5bd6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5bd8:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5bdc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5be0:	45b8      	cmp	r8, r7
   b5be2:	d008      	beq.n	b5bf6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5be4:	4639      	mov	r1, r7
   b5be6:	4628      	mov	r0, r5
   b5be8:	f00b f8ac 	bl	c0d44 <_ZN6StringC1ERKS_>
   b5bec:	7c3b      	ldrb	r3, [r7, #16]
   b5bee:	742b      	strb	r3, [r5, #16]
   b5bf0:	3714      	adds	r7, #20
   b5bf2:	3514      	adds	r5, #20
   b5bf4:	e7f4      	b.n	b5be0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5bf6:	6873      	ldr	r3, [r6, #4]
   b5bf8:	6063      	str	r3, [r4, #4]
}
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5c00 <_GLOBAL__sub_I_SystemMode>:
   b5c00:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b5c02:	4b79      	ldr	r3, [pc, #484]	; (b5de8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5c04:	4a79      	ldr	r2, [pc, #484]	; (b5dec <_GLOBAL__sub_I_SystemMode+0x1ec>)
  explicit SdFat(SPIClass* spiPort) {
   b5c06:	4c7a      	ldr	r4, [pc, #488]	; (b5df0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5c08:	2601      	movs	r6, #1
   b5c0a:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5c0c:	4b79      	ldr	r3, [pc, #484]	; (b5df4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5c0e:	2500      	movs	r5, #0
   b5c10:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5c14:	609a      	str	r2, [r3, #8]
   b5c16:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5c18:	2003      	movs	r0, #3
   b5c1a:	f007 fc57 	bl	bd4cc <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5c1e:	4876      	ldr	r0, [pc, #472]	; (b5df8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5c20:	f001 ff70 	bl	b7b04 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b5c24:	4875      	ldr	r0, [pc, #468]	; (b5dfc <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5c26:	f001 fd57 	bl	b76d8 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5c2a:	f7ff fd55 	bl	b56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5c2e:	2364      	movs	r3, #100	; 0x64
   b5c30:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5c34:	4b72      	ldr	r3, [pc, #456]	; (b5e00 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5c36:	6065      	str	r5, [r4, #4]
   b5c38:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5c3c:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5c40:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5c44:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5c48:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5c4c:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5c50:	b908      	cbnz	r0, b5c56 <_GLOBAL__sub_I_SystemMode+0x56>
   b5c52:	f7ff fd41 	bl	b56d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5c56:	4b6b      	ldr	r3, [pc, #428]	; (b5e04 <_GLOBAL__sub_I_SystemMode+0x204>)
  File() {}
   b5c58:	4a6b      	ldr	r2, [pc, #428]	; (b5e08 <_GLOBAL__sub_I_SystemMode+0x208>)
   b5c5a:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5c5e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b5c62:	2400      	movs	r4, #0
   b5c64:	601a      	str	r2, [r3, #0]
   b5c66:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5c6a:	611c      	str	r4, [r3, #16]
   b5c6c:	4b67      	ldr	r3, [pc, #412]	; (b5e0c <_GLOBAL__sub_I_SystemMode+0x20c>)
        capacity_(0) {
   b5c6e:	9407      	str	r4, [sp, #28]
   b5c70:	601a      	str	r2, [r3, #0]
   b5c72:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5c76:	611c      	str	r4, [r3, #16]
   b5c78:	4b65      	ldr	r3, [pc, #404]	; (b5e10 <_GLOBAL__sub_I_SystemMode+0x210>)
        filter_(level, filters) {
   b5c7a:	4d66      	ldr	r5, [pc, #408]	; (b5e14 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5c7c:	601a      	str	r2, [r3, #0]
   b5c7e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5c82:	611c      	str	r4, [r3, #16]
   b5c84:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5c88:	f00b fa42 	bl	c1110 <_Z16_fetch_usbserialv>
   b5c8c:	a905      	add	r1, sp, #20
   b5c8e:	4606      	mov	r6, r0
   b5c90:	a808      	add	r0, sp, #32
   b5c92:	f7ff ff83 	bl	b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5c96:	a908      	add	r1, sp, #32
   b5c98:	a80b      	add	r0, sp, #44	; 0x2c
   b5c9a:	f7ff ff7f 	bl	b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5c9e:	4b5e      	ldr	r3, [pc, #376]	; (b5e18 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5ca0:	602b      	str	r3, [r5, #0]
   b5ca2:	a90b      	add	r1, sp, #44	; 0x2c
   b5ca4:	a80e      	add	r0, sp, #56	; 0x38
   b5ca6:	f7ff ff79 	bl	b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5caa:	aa0e      	add	r2, sp, #56	; 0x38
   b5cac:	211e      	movs	r1, #30
   b5cae:	1d28      	adds	r0, r5, #4
   b5cb0:	f00a f9ac 	bl	c000c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5cb4:	a80e      	add	r0, sp, #56	; 0x38
   b5cb6:	f7ff fcdd 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5cba:	a80b      	add	r0, sp, #44	; 0x2c
   b5cbc:	f7ff fcda 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5cc0:	4b56      	ldr	r3, [pc, #344]	; (b5e1c <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5cc2:	602b      	str	r3, [r5, #0]
   b5cc4:	622e      	str	r6, [r5, #32]
   b5cc6:	a808      	add	r0, sp, #32
   b5cc8:	f7ff fcd4 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5ccc:	4b54      	ldr	r3, [pc, #336]	; (b5e20 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5cce:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5cd0:	f00b fa1e 	bl	c1110 <_Z16_fetch_usbserialv>
   b5cd4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5cd8:	f00b fa0a 	bl	c10f0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5cdc:	f009 fe78 	bl	bf9d0 <_ZN5spark10LogManager8instanceEv>
   b5ce0:	4629      	mov	r1, r5
   b5ce2:	f00a f869 	bl	bfdb8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5ce6:	a805      	add	r0, sp, #20
   b5ce8:	f7ff fcc4 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5cec:	484d      	ldr	r0, [pc, #308]	; (b5e24 <_GLOBAL__sub_I_SystemMode+0x224>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5cee:	4d4e      	ldr	r5, [pc, #312]	; (b5e28 <_GLOBAL__sub_I_SystemMode+0x228>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5cf0:	4e4e      	ldr	r6, [pc, #312]	; (b5e2c <_GLOBAL__sub_I_SystemMode+0x22c>)
Servo ESCL; 
   b5cf2:	f00a fdff 	bl	c08f4 <_ZN5ServoC1Ev>
Servo ESCR;
   b5cf6:	484e      	ldr	r0, [pc, #312]	; (b5e30 <_GLOBAL__sub_I_SystemMode+0x230>)
   b5cf8:	f00a fdfc 	bl	c08f4 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5cfc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5d00:	682b      	ldr	r3, [r5, #0]
   b5d02:	9300      	str	r3, [sp, #0]
   b5d04:	4b4b      	ldr	r3, [pc, #300]	; (b5e34 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5d06:	494c      	ldr	r1, [pc, #304]	; (b5e38 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5d08:	681b      	ldr	r3, [r3, #0]
   b5d0a:	484c      	ldr	r0, [pc, #304]	; (b5e3c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5d0c:	f04f 0210 	mov.w	r2, #16
   b5d10:	f7ff fcc3 	bl	b569a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5d14:	4b4a      	ldr	r3, [pc, #296]	; (b5e40 <_GLOBAL__sub_I_SystemMode+0x240>)
   b5d16:	9402      	str	r4, [sp, #8]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	682b      	ldr	r3, [r5, #0]
   b5d1c:	9300      	str	r3, [sp, #0]
   b5d1e:	4b49      	ldr	r3, [pc, #292]	; (b5e44 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5d20:	4949      	ldr	r1, [pc, #292]	; (b5e48 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5d22:	681b      	ldr	r3, [r3, #0]
   b5d24:	4849      	ldr	r0, [pc, #292]	; (b5e4c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5d26:	f04f 0204 	mov.w	r2, #4
   b5d2a:	f7ff fcb6 	bl	b569a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5d2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5d32:	682b      	ldr	r3, [r5, #0]
   b5d34:	9300      	str	r3, [sp, #0]
   b5d36:	4b46      	ldr	r3, [pc, #280]	; (b5e50 <_GLOBAL__sub_I_SystemMode+0x250>)
   b5d38:	4946      	ldr	r1, [pc, #280]	; (b5e54 <_GLOBAL__sub_I_SystemMode+0x254>)
   b5d3a:	681b      	ldr	r3, [r3, #0]
   b5d3c:	4846      	ldr	r0, [pc, #280]	; (b5e58 <_GLOBAL__sub_I_SystemMode+0x258>)
	    _M_manager = &_My_handler::_M_manager;
   b5d3e:	4d47      	ldr	r5, [pc, #284]	; (b5e5c <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5d40:	f04f 0210 	mov.w	r2, #16
   b5d44:	f7ff fca9 	bl	b569a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5d48:	4845      	ldr	r0, [pc, #276]	; (b5e60 <_GLOBAL__sub_I_SystemMode+0x260>)
   b5d4a:	f008 fa9e 	bl	be28a <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5d4e:	4b45      	ldr	r3, [pc, #276]	; (b5e64 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5d50:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5d52:	aa0e      	add	r2, sp, #56	; 0x38
   b5d54:	4623      	mov	r3, r4
   b5d56:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5d5a:	4843      	ldr	r0, [pc, #268]	; (b5e68 <_GLOBAL__sub_I_SystemMode+0x268>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5d5c:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5d5e:	9510      	str	r5, [sp, #64]	; 0x40
   b5d60:	f7fe fb7a 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5d64:	a80e      	add	r0, sp, #56	; 0x38
   b5d66:	f7fe fb39 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5d6a:	4b40      	ldr	r3, [pc, #256]	; (b5e6c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b5d6c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5d6e:	aa0e      	add	r2, sp, #56	; 0x38
   b5d70:	4623      	mov	r3, r4
   b5d72:	4639      	mov	r1, r7
   b5d74:	483e      	ldr	r0, [pc, #248]	; (b5e70 <_GLOBAL__sub_I_SystemMode+0x270>)
	    _M_manager = &_My_handler::_M_manager;
   b5d76:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5d7a:	f7fe fb6d 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5d7e:	a80e      	add	r0, sp, #56	; 0x38
   b5d80:	f7fe fb2c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5d84:	4b3b      	ldr	r3, [pc, #236]	; (b5e74 <_GLOBAL__sub_I_SystemMode+0x274>)
   b5d86:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b5d88:	aa0e      	add	r2, sp, #56	; 0x38
   b5d8a:	4623      	mov	r3, r4
   b5d8c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b5d90:	4839      	ldr	r0, [pc, #228]	; (b5e78 <_GLOBAL__sub_I_SystemMode+0x278>)
	    _M_manager = &_My_handler::_M_manager;
   b5d92:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5d96:	f7fe fb5f 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5d9a:	a80e      	add	r0, sp, #56	; 0x38
   b5d9c:	f7fe fb1e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5da0:	4b36      	ldr	r3, [pc, #216]	; (b5e7c <_GLOBAL__sub_I_SystemMode+0x27c>)
   b5da2:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5da4:	aa0e      	add	r2, sp, #56	; 0x38
   b5da6:	4623      	mov	r3, r4
   b5da8:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5dac:	4834      	ldr	r0, [pc, #208]	; (b5e80 <_GLOBAL__sub_I_SystemMode+0x280>)
	    _M_manager = &_My_handler::_M_manager;
   b5dae:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5db2:	f7fe fb51 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5db6:	a80e      	add	r0, sp, #56	; 0x38
   b5db8:	f7fe fb10 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5dbc:	4622      	mov	r2, r4
   b5dbe:	2114      	movs	r1, #20
   b5dc0:	2001      	movs	r0, #1
   b5dc2:	f007 fbab 	bl	bd51c <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5dc6:	2201      	movs	r2, #1
   b5dc8:	2114      	movs	r1, #20
   b5dca:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5dce:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5dd0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5dd4:	482b      	ldr	r0, [pc, #172]	; (b5e84 <_GLOBAL__sub_I_SystemMode+0x284>)
   b5dd6:	f009 fc7d 	bl	bf6d4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
String xbeeBuf;
   b5dda:	492b      	ldr	r1, [pc, #172]	; (b5e88 <_GLOBAL__sub_I_SystemMode+0x288>)
   b5ddc:	482b      	ldr	r0, [pc, #172]	; (b5e8c <_GLOBAL__sub_I_SystemMode+0x28c>)
   b5dde:	b013      	add	sp, #76	; 0x4c
   b5de0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String xbeeBuf;
   b5de4:	f00a bf63 	b.w	c0cae <_ZN6StringC1EPK19__FlashStringHelper>
   b5de8:	2003ddc4 	.word	0x2003ddc4
   b5dec:	ffff0000 	.word	0xffff0000
   b5df0:	2003e0f0 	.word	0x2003e0f0
   b5df4:	2003ddb0 	.word	0x2003ddb0
   b5df8:	2003df64 	.word	0x2003df64
   b5dfc:	2003de50 	.word	0x2003de50
   b5e00:	000c48bc 	.word	0x000c48bc
   b5e04:	2003df30 	.word	0x2003df30
   b5e08:	000c4928 	.word	0x000c4928
   b5e0c:	2003deac 	.word	0x2003deac
   b5e10:	2003de78 	.word	0x2003de78
   b5e14:	2003dee0 	.word	0x2003dee0
   b5e18:	000c48e4 	.word	0x000c48e4
   b5e1c:	000c5ab8 	.word	0x000c5ab8
   b5e20:	000c4910 	.word	0x000c4910
   b5e24:	2003dd8c 	.word	0x2003dd8c
   b5e28:	2003db7c 	.word	0x2003db7c
   b5e2c:	000b4235 	.word	0x000b4235
   b5e30:	2003dd9c 	.word	0x2003dd9c
   b5e34:	2003db88 	.word	0x2003db88
   b5e38:	000c48a8 	.word	0x000c48a8
   b5e3c:	2003e5d4 	.word	0x2003e5d4
   b5e40:	000b4a0d 	.word	0x000b4a0d
   b5e44:	2003db84 	.word	0x2003db84
   b5e48:	000c48ab 	.word	0x000c48ab
   b5e4c:	2003e0e8 	.word	0x2003e0e8
   b5e50:	2003db80 	.word	0x2003db80
   b5e54:	000c48ae 	.word	0x000c48ae
   b5e58:	2003e0dc 	.word	0x2003e0dc
   b5e5c:	000b4221 	.word	0x000b4221
   b5e60:	2003ddc8 	.word	0x2003ddc8
   b5e64:	000b459d 	.word	0x000b459d
   b5e68:	2003e5e0 	.word	0x2003e5e0
   b5e6c:	000b44d1 	.word	0x000b44d1
   b5e70:	2003de34 	.word	0x2003de34
   b5e74:	000b4375 	.word	0x000b4375
   b5e78:	2003df14 	.word	0x2003df14
   b5e7c:	000b40fd 	.word	0x000b40fd
   b5e80:	2003e5b4 	.word	0x2003e5b4
   b5e84:	2003e590 	.word	0x2003e590
   b5e88:	000c5a83 	.word	0x000c5a83
   b5e8c:	2003e5fc 	.word	0x2003e5fc

000b5e90 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5e90:	b538      	push	{r3, r4, r5, lr}
   b5e92:	4604      	mov	r4, r0
   b5e94:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5e96:	2224      	movs	r2, #36	; 0x24
   b5e98:	2100      	movs	r1, #0
   b5e9a:	f00c f969 	bl	c2170 <memset>

  m_vol = vol;
   b5e9e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b5ea0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5ea2:	2b10      	cmp	r3, #16
   b5ea4:	d003      	beq.n	b5eae <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5ea6:	2b20      	cmp	r3, #32
   b5ea8:	d006      	beq.n	b5eb8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5eaa:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5eac:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5eae:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5eb0:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5eb2:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5eb4:	70a0      	strb	r0, [r4, #2]
  return true;
   b5eb6:	e7f9      	b.n	b5eac <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5eb8:	2340      	movs	r3, #64	; 0x40
   b5eba:	e7f9      	b.n	b5eb0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5ebc <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5ebc:	b510      	push	{r4, lr}
   b5ebe:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5ec0:	3024      	adds	r0, #36	; 0x24
   b5ec2:	f000 ff66 	bl	b6d92 <_ZN8FatCache4syncEv>
   b5ec6:	b128      	cbz	r0, b5ed4 <_ZN9FatVolume9cacheSyncEv+0x18>
   b5ec8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5ed0:	f000 bf5f 	b.w	b6d92 <_ZN8FatCache4syncEv>
  }
   b5ed4:	bd10      	pop	{r4, pc}

000b5ed6 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5ed6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5ed8:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5eda:	f043 0304 	orr.w	r3, r3, #4
   b5ede:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5ee0:	f100 0210 	add.w	r2, r0, #16
   b5ee4:	6880      	ldr	r0, [r0, #8]
   b5ee6:	f001 b80a 	b.w	b6efe <_ZN9FatVolume15allocateClusterEmPm>
	...

000b5eec <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5ef0:	7801      	ldrb	r1, [r0, #0]
   b5ef2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5ef6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5ef8:	d003      	beq.n	b5f02 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5efa:	2600      	movs	r6, #0
}
   b5efc:	4630      	mov	r0, r6
   b5efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5f02:	6942      	ldr	r2, [r0, #20]
   b5f04:	4b17      	ldr	r3, [pc, #92]	; (b5f64 <_ZN7FatFile13addDirClusterEv+0x78>)
   b5f06:	429a      	cmp	r2, r3
   b5f08:	d2f7      	bcs.n	b5efa <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5f0a:	f7ff ffe4 	bl	b5ed6 <_ZN7FatFile10addClusterEv>
   b5f0e:	4606      	mov	r6, r0
   b5f10:	2800      	cmp	r0, #0
   b5f12:	d0f2      	beq.n	b5efa <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5f14:	6921      	ldr	r1, [r4, #16]
   b5f16:	68a0      	ldr	r0, [r4, #8]
   b5f18:	f000 ff86 	bl	b6e28 <_ZNK9FatVolume17clusterFirstBlockEm>
   b5f1c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b5f1e:	68a0      	ldr	r0, [r4, #8]
   b5f20:	2205      	movs	r2, #5
   b5f22:	4639      	mov	r1, r7
   b5f24:	3024      	adds	r0, #36	; 0x24
   b5f26:	f000 ff5c 	bl	b6de2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5f2a:	4680      	mov	r8, r0
   b5f2c:	2800      	cmp	r0, #0
   b5f2e:	d0e4      	beq.n	b5efa <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5f30:	4629      	mov	r1, r5
   b5f32:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5f36:	f00c f91b 	bl	c2170 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5f3a:	2501      	movs	r5, #1
   b5f3c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5f3e:	791a      	ldrb	r2, [r3, #4]
   b5f40:	42aa      	cmp	r2, r5
   b5f42:	d909      	bls.n	b5f58 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5f44:	6818      	ldr	r0, [r3, #0]
   b5f46:	4642      	mov	r2, r8
   b5f48:	19e9      	adds	r1, r5, r7
   b5f4a:	f001 fab6 	bl	b74ba <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5f4e:	2800      	cmp	r0, #0
   b5f50:	d0d3      	beq.n	b5efa <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5f52:	3501      	adds	r5, #1
   b5f54:	b2ed      	uxtb	r5, r5
   b5f56:	e7f1      	b.n	b5f3c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5f58:	6963      	ldr	r3, [r4, #20]
   b5f5a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5f5e:	6163      	str	r3, [r4, #20]
  return true;
   b5f60:	e7cc      	b.n	b5efc <_ZN7FatFile13addDirClusterEv+0x10>
   b5f62:	bf00      	nop
   b5f64:	001ffe00 	.word	0x001ffe00

000b5f68 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5f68:	b510      	push	{r4, lr}
   b5f6a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5f6c:	6880      	ldr	r0, [r0, #8]
   b5f6e:	460a      	mov	r2, r1
   b5f70:	3024      	adds	r0, #36	; 0x24
   b5f72:	69a1      	ldr	r1, [r4, #24]
   b5f74:	f000 ff35 	bl	b6de2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5f78:	b120      	cbz	r0, b5f84 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5f7a:	88a3      	ldrh	r3, [r4, #4]
   b5f7c:	f003 030f 	and.w	r3, r3, #15
   b5f80:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5f84:	bd10      	pop	{r4, pc}

000b5f86 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b5f86:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b5f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f8a:	4604      	mov	r4, r0
   b5f8c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b5f8e:	2608      	movs	r6, #8
  uint8_t j = 0;
   b5f90:	4618      	mov	r0, r3
      name[j++] = '.';
   b5f92:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b5f94:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b5f98:	2a20      	cmp	r2, #32
   b5f9a:	d018      	beq.n	b5fce <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b5f9c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b5f9e:	bf02      	ittt	eq
   b5fa0:	540f      	strbeq	r7, [r1, r0]
   b5fa2:	1c42      	addeq	r2, r0, #1
   b5fa4:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b5fa6:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5fa8:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b5fac:	bf08      	it	eq
   b5fae:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5fb0:	f1bc 0f19 	cmp.w	ip, #25
   b5fb4:	d806      	bhi.n	b5fc4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b5fb6:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b5fba:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b5fbe:	bf1c      	itt	ne
   b5fc0:	3220      	addne	r2, #32
   b5fc2:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b5fc4:	f100 0c01 	add.w	ip, r0, #1
   b5fc8:	540a      	strb	r2, [r1, r0]
   b5fca:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b5fce:	3301      	adds	r3, #1
   b5fd0:	b2db      	uxtb	r3, r3
   b5fd2:	2b0b      	cmp	r3, #11
   b5fd4:	d1de      	bne.n	b5f94 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b5fd6:	2300      	movs	r3, #0
   b5fd8:	540b      	strb	r3, [r1, r0]
}
   b5fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5fdc <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5fdc:	7803      	ldrb	r3, [r0, #0]
   b5fde:	b90b      	cbnz	r3, b5fe4 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5fe0:	f7ff bf56 	b.w	b5e90 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5fe4:	2000      	movs	r0, #0
   b5fe6:	4770      	bx	lr

000b5fe8 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5fec:	7803      	ldrb	r3, [r0, #0]
   b5fee:	4604      	mov	r4, r0
   b5ff0:	4688      	mov	r8, r1
   b5ff2:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5ff4:	2b00      	cmp	r3, #0
   b5ff6:	d05d      	beq.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
   b5ff8:	7882      	ldrb	r2, [r0, #2]
   b5ffa:	07d1      	lsls	r1, r2, #31
   b5ffc:	d55a      	bpl.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5ffe:	071a      	lsls	r2, r3, #28
   b6000:	d52d      	bpl.n	b605e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6002:	69c3      	ldr	r3, [r0, #28]
   b6004:	6942      	ldr	r2, [r0, #20]
   b6006:	1a9b      	subs	r3, r3, r2
   b6008:	429d      	cmp	r5, r3
   b600a:	bf28      	it	cs
   b600c:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b600e:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6010:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6014:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6018:	2e00      	cmp	r6, #0
   b601a:	f000 808f 	beq.w	b613c <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b601e:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6020:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6022:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6024:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6026:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b602a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b602e:	d51f      	bpl.n	b6070 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6030:	6a00      	ldr	r0, [r0, #32]
   b6032:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6034:	68a0      	ldr	r0, [r4, #8]
   b6036:	f1ba 0f00 	cmp.w	sl, #0
   b603a:	d142      	bne.n	b60c2 <_ZN7FatFile4readEPvj+0xda>
   b603c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6040:	d33f      	bcc.n	b60c2 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6042:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6044:	4299      	cmp	r1, r3
   b6046:	d03c      	beq.n	b60c2 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b604c:	d252      	bcs.n	b60f4 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b604e:	6800      	ldr	r0, [r0, #0]
   b6050:	4642      	mov	r2, r8
   b6052:	f001 f9a9 	bl	b73a8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6056:	b368      	cbz	r0, b60b4 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6058:	f44f 7700 	mov.w	r7, #512	; 0x200
   b605c:	e044      	b.n	b60e8 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b605e:	069b      	lsls	r3, r3, #26
   b6060:	d5d5      	bpl.n	b600e <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6062:	6883      	ldr	r3, [r0, #8]
   b6064:	891a      	ldrh	r2, [r3, #8]
   b6066:	6943      	ldr	r3, [r0, #20]
   b6068:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b606c:	b29b      	uxth	r3, r3
   b606e:	e7cb      	b.n	b6008 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6070:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6074:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6078:	f1ba 0f00 	cmp.w	sl, #0
   b607c:	d108      	bne.n	b6090 <_ZN7FatFile4readEPvj+0xa8>
   b607e:	f1b9 0f00 	cmp.w	r9, #0
   b6082:	d105      	bne.n	b6090 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6084:	b95b      	cbnz	r3, b609e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6086:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6088:	bf4c      	ite	mi
   b608a:	6a03      	ldrmi	r3, [r0, #32]
   b608c:	6a23      	ldrpl	r3, [r4, #32]
   b608e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6090:	6921      	ldr	r1, [r4, #16]
   b6092:	68a0      	ldr	r0, [r4, #8]
   b6094:	f000 fec8 	bl	b6e28 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6098:	eb09 0100 	add.w	r1, r9, r0
   b609c:	e7ca      	b.n	b6034 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b609e:	6921      	ldr	r1, [r4, #16]
   b60a0:	465a      	mov	r2, fp
   b60a2:	f000 fec7 	bl	b6e34 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b60a6:	2800      	cmp	r0, #0
   b60a8:	db04      	blt.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b60aa:	d1f1      	bne.n	b6090 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b60ac:	7823      	ldrb	r3, [r4, #0]
   b60ae:	f013 0f70 	tst.w	r3, #112	; 0x70
   b60b2:	d143      	bne.n	b613c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b60b4:	7863      	ldrb	r3, [r4, #1]
   b60b6:	f043 0302 	orr.w	r3, r3, #2
   b60ba:	7063      	strb	r3, [r4, #1]
  return -1;
   b60bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b60c0:	e03d      	b.n	b613e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b60c2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b60c6:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b60c8:	f04f 0200 	mov.w	r2, #0
   b60cc:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b60d0:	bf28      	it	cs
   b60d2:	4637      	movcs	r7, r6
   b60d4:	f000 fe85 	bl	b6de2 <_ZN8FatCache4readEmh>
      if (!pc) {
   b60d8:	2800      	cmp	r0, #0
   b60da:	d0eb      	beq.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b60dc:	eb00 010a 	add.w	r1, r0, sl
   b60e0:	463a      	mov	r2, r7
   b60e2:	4640      	mov	r0, r8
   b60e4:	f00c f81c 	bl	c2120 <memcpy>
    m_curPosition += n;
   b60e8:	6963      	ldr	r3, [r4, #20]
   b60ea:	443b      	add	r3, r7
    dst += n;
   b60ec:	44b8      	add	r8, r7
    m_curPosition += n;
   b60ee:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b60f0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b60f2:	e791      	b.n	b6018 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b60f4:	7822      	ldrb	r2, [r4, #0]
   b60f6:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b60f8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b60fc:	d406      	bmi.n	b610c <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b60fe:	7902      	ldrb	r2, [r0, #4]
   b6100:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6104:	b2d2      	uxtb	r2, r2
   b6106:	4592      	cmp	sl, r2
   b6108:	bf28      	it	cs
   b610a:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b610c:	4299      	cmp	r1, r3
      n = 512*nb;
   b610e:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6112:	d208      	bcs.n	b6126 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6114:	68a0      	ldr	r0, [r4, #8]
   b6116:	4653      	mov	r3, sl
   b6118:	6800      	ldr	r0, [r0, #0]
   b611a:	4642      	mov	r2, r8
   b611c:	f001 f98c 	bl	b7438 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6120:	2800      	cmp	r0, #0
   b6122:	d1e1      	bne.n	b60e8 <_ZN7FatFile4readEPvj+0x100>
   b6124:	e7c6      	b.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6126:	4453      	add	r3, sl
   b6128:	428b      	cmp	r3, r1
   b612a:	d9f3      	bls.n	b6114 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b612c:	3024      	adds	r0, #36	; 0x24
   b612e:	9101      	str	r1, [sp, #4]
   b6130:	f000 fe2f 	bl	b6d92 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6134:	9901      	ldr	r1, [sp, #4]
   b6136:	2800      	cmp	r0, #0
   b6138:	d1ec      	bne.n	b6114 <_ZN7FatFile4readEPvj+0x12c>
   b613a:	e7bb      	b.n	b60b4 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b613c:	1ba8      	subs	r0, r5, r6
}
   b613e:	b003      	add	sp, #12
   b6140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6144 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6144:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6146:	2201      	movs	r2, #1
   b6148:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b614c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6150:	4604      	mov	r4, r0
   b6152:	f7ff ff49 	bl	b5fe8 <_ZN7FatFile4readEPvj>
   b6156:	2801      	cmp	r0, #1
   b6158:	bf0a      	itet	eq
   b615a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b615e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6162:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6166:	b002      	add	sp, #8
   b6168:	bd70      	pop	{r4, r5, r6, pc}

000b616a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b616a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b616c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b616e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6172:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6174:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6178:	d000      	beq.n	b617c <_ZN7FatFile12readDirCacheEb+0x12>
   b617a:	b999      	cbnz	r1, b61a4 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b617c:	2201      	movs	r2, #1
   b617e:	f10d 0107 	add.w	r1, sp, #7
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff ff30 	bl	b5fe8 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6188:	b240      	sxtb	r0, r0
   b618a:	2801      	cmp	r0, #1
   b618c:	d002      	beq.n	b6194 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b618e:	2000      	movs	r0, #0
}
   b6190:	b003      	add	sp, #12
   b6192:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6194:	6963      	ldr	r3, [r4, #20]
   b6196:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6198:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b619a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b619c:	3030      	adds	r0, #48	; 0x30
   b619e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b61a2:	e7f5      	b.n	b6190 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b61a4:	3320      	adds	r3, #32
   b61a6:	e7f7      	b.n	b6198 <_ZN7FatFile12readDirCacheEb+0x2e>

000b61a8 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b61a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b61ac:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b61ae:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b61b0:	4604      	mov	r4, r0
   b61b2:	460d      	mov	r5, r1
  if (!isOpen()) {
   b61b4:	b162      	cbz	r2, b61d0 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b61b6:	6940      	ldr	r0, [r0, #20]
   b61b8:	4288      	cmp	r0, r1
   b61ba:	d002      	beq.n	b61c2 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b61bc:	b919      	cbnz	r1, b61c6 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b61be:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b61c0:	6165      	str	r5, [r4, #20]
    return true;
   b61c2:	2001      	movs	r0, #1
   b61c4:	e006      	b.n	b61d4 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b61c6:	0716      	lsls	r6, r2, #28
   b61c8:	d506      	bpl.n	b61d8 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b61ca:	69e3      	ldr	r3, [r4, #28]
   b61cc:	428b      	cmp	r3, r1
   b61ce:	d20b      	bcs.n	b61e8 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b61d0:	6127      	str	r7, [r4, #16]
  return false;
   b61d2:	2000      	movs	r0, #0
}
   b61d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b61d8:	0691      	lsls	r1, r2, #26
   b61da:	d505      	bpl.n	b61e8 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b61dc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b61de:	891b      	ldrh	r3, [r3, #8]
   b61e0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b61e4:	d9ec      	bls.n	b61c0 <_ZN7FatFile7seekSetEm+0x18>
   b61e6:	e7f3      	b.n	b61d0 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b61e8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b61ec:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b61f0:	1e43      	subs	r3, r0, #1
   b61f2:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b61f6:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b61f8:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b61fa:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b61fc:	42b3      	cmp	r3, r6
   b61fe:	d800      	bhi.n	b6202 <_ZN7FatFile7seekSetEm+0x5a>
   b6200:	b998      	cbnz	r0, b622a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6202:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6204:	bf4c      	ite	mi
   b6206:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b620a:	6a23      	ldrpl	r3, [r4, #32]
   b620c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b620e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6212:	2e00      	cmp	r6, #0
   b6214:	d0d4      	beq.n	b61c0 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6216:	6921      	ldr	r1, [r4, #16]
   b6218:	68a0      	ldr	r0, [r4, #8]
   b621a:	4642      	mov	r2, r8
   b621c:	f000 fe0a 	bl	b6e34 <_ZN9FatVolume6fatGetEmPm>
   b6220:	2800      	cmp	r0, #0
   b6222:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6226:	dcf4      	bgt.n	b6212 <_ZN7FatFile7seekSetEm+0x6a>
   b6228:	e7d2      	b.n	b61d0 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b622a:	1af6      	subs	r6, r6, r3
   b622c:	e7ef      	b.n	b620e <_ZN7FatFile7seekSetEm+0x66>

000b622e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6230:	460f      	mov	r7, r1
   b6232:	4604      	mov	r4, r0
   b6234:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6236:	2100      	movs	r1, #0
   b6238:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b623a:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b623c:	f00b ff98 	bl	c2170 <memset>
  m_vol = dirFile->m_vol;
   b6240:	68b8      	ldr	r0, [r7, #8]
   b6242:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6244:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6246:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b624a:	6a3b      	ldr	r3, [r7, #32]
   b624c:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b624e:	016a      	lsls	r2, r5, #5
   b6250:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6254:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6258:	071f      	lsls	r7, r3, #28
   b625a:	d444      	bmi.n	b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b625c:	f003 0317 	and.w	r3, r3, #23
   b6260:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6262:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6266:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b626a:	bf04      	itt	eq
   b626c:	f043 0308 	orreq.w	r3, r3, #8
   b6270:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6272:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6276:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6278:	f006 0303 	and.w	r3, r6, #3
   b627c:	2b01      	cmp	r3, #1
   b627e:	d02c      	beq.n	b62da <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6280:	2b02      	cmp	r3, #2
   b6282:	d028      	beq.n	b62d6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6284:	bb7b      	cbnz	r3, b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6286:	0571      	lsls	r1, r6, #21
   b6288:	d42d      	bmi.n	b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b628a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b628c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b628e:	78a1      	ldrb	r1, [r4, #2]
   b6290:	078b      	lsls	r3, r1, #30
   b6292:	d504      	bpl.n	b629e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6294:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6296:	06df      	lsls	r7, r3, #27
   b6298:	d425      	bmi.n	b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b629a:	07dd      	lsls	r5, r3, #31
   b629c:	d423      	bmi.n	b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b629e:	11b3      	asrs	r3, r6, #6
   b62a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b62a4:	f006 0508 	and.w	r5, r6, #8
   b62a8:	432b      	orrs	r3, r5
   b62aa:	430b      	orrs	r3, r1
   b62ac:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b62ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b62b0:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b62b2:	1883      	adds	r3, r0, r2
   b62b4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b62b8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b62bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b62c0:	0572      	lsls	r2, r6, #21
   b62c2:	d513      	bpl.n	b62ec <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b62c4:	b959      	cbnz	r1, b62de <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b62c6:	78a3      	ldrb	r3, [r4, #2]
   b62c8:	f043 0304 	orr.w	r3, r3, #4
   b62cc:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b62ce:	0473      	lsls	r3, r6, #17
   b62d0:	d410      	bmi.n	b62f4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b62d2:	2001      	movs	r0, #1
}
   b62d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b62d6:	2303      	movs	r3, #3
   b62d8:	e7d8      	b.n	b628c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b62da:	2302      	movs	r3, #2
   b62dc:	e7d6      	b.n	b628c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b62de:	f000 fe49 	bl	b6f74 <_ZN9FatVolume9freeChainEm>
   b62e2:	2800      	cmp	r0, #0
   b62e4:	d1ef      	bne.n	b62c6 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b62e6:	2000      	movs	r0, #0
   b62e8:	7020      	strb	r0, [r4, #0]
  return false;
   b62ea:	e7f3      	b.n	b62d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b62ec:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b62ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b62f0:	61e3      	str	r3, [r4, #28]
   b62f2:	e7ec      	b.n	b62ce <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b62f4:	69e1      	ldr	r1, [r4, #28]
   b62f6:	4620      	mov	r0, r4
   b62f8:	f7ff ff56 	bl	b61a8 <_ZN7FatFile7seekSetEm>
   b62fc:	2800      	cmp	r0, #0
   b62fe:	d1e8      	bne.n	b62d2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6300:	e7f1      	b.n	b62e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6302 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6302:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b6306:	7803      	ldrb	r3, [r0, #0]
   b6308:	4607      	mov	r7, r0
   b630a:	460d      	mov	r5, r1
   b630c:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b630e:	bb53      	cbnz	r3, b6366 <_ZN7FatFile8openNextEPS_i+0x64>
   b6310:	780b      	ldrb	r3, [r1, #0]
   b6312:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6316:	d026      	beq.n	b6366 <_ZN7FatFile8openNextEPS_i+0x64>
   b6318:	694c      	ldr	r4, [r1, #20]
   b631a:	f014 041f 	ands.w	r4, r4, #31
   b631e:	d122      	bne.n	b6366 <_ZN7FatFile8openNextEPS_i+0x64>
   b6320:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6322:	2100      	movs	r1, #0
   b6324:	4628      	mov	r0, r5
    return m_curPosition;
   b6326:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b632a:	f7ff ff1e 	bl	b616a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b632e:	b1d0      	cbz	r0, b6366 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6330:	7806      	ldrb	r6, [r0, #0]
   b6332:	b1c6      	cbz	r6, b6366 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6334:	2e2e      	cmp	r6, #46	; 0x2e
   b6336:	d010      	beq.n	b635a <_ZN7FatFile8openNextEPS_i+0x58>
   b6338:	2ee5      	cmp	r6, #229	; 0xe5
   b633a:	d00e      	beq.n	b635a <_ZN7FatFile8openNextEPS_i+0x58>
   b633c:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b633e:	071a      	lsls	r2, r3, #28
   b6340:	d413      	bmi.n	b636a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6342:	b964      	cbnz	r4, b635e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6344:	9400      	str	r4, [sp, #0]
   b6346:	4653      	mov	r3, sl
   b6348:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b634c:	4629      	mov	r1, r5
   b634e:	4638      	mov	r0, r7
   b6350:	f7ff ff6d 	bl	b622e <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6354:	b002      	add	sp, #8
   b6356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b635a:	2400      	movs	r4, #0
   b635c:	e7e1      	b.n	b6322 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b635e:	f000 f971 	bl	b6644 <_ZN7FatFile11lfnChecksumEPh>
   b6362:	4540      	cmp	r0, r8
   b6364:	d0ee      	beq.n	b6344 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6366:	2000      	movs	r0, #0
   b6368:	e7f4      	b.n	b6354 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b636a:	2b0f      	cmp	r3, #15
   b636c:	d1f5      	bne.n	b635a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b636e:	0673      	lsls	r3, r6, #25
   b6370:	d5d7      	bpl.n	b6322 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6372:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6376:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b637a:	e7d2      	b.n	b6322 <_ZN7FatFile8openNextEPS_i+0x20>

000b637c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b637c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b637e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6380:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6382:	b90b      	cbnz	r3, b6388 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6384:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6386:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6388:	7883      	ldrb	r3, [r0, #2]
   b638a:	075a      	lsls	r2, r3, #29
   b638c:	d523      	bpl.n	b63d6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b638e:	2101      	movs	r1, #1
   b6390:	f7ff fdea 	bl	b5f68 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6394:	4605      	mov	r5, r0
   b6396:	b928      	cbnz	r0, b63a4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6398:	7863      	ldrb	r3, [r4, #1]
   b639a:	f043 0301 	orr.w	r3, r3, #1
   b639e:	7063      	strb	r3, [r4, #1]
  return false;
   b63a0:	2000      	movs	r0, #0
   b63a2:	e7f0      	b.n	b6386 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b63a4:	7803      	ldrb	r3, [r0, #0]
   b63a6:	2be5      	cmp	r3, #229	; 0xe5
   b63a8:	d0f6      	beq.n	b6398 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b63aa:	7823      	ldrb	r3, [r4, #0]
   b63ac:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b63ae:	bf44      	itt	mi
   b63b0:	69e3      	ldrmi	r3, [r4, #28]
   b63b2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b63b4:	6a23      	ldr	r3, [r4, #32]
   b63b6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b63b8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b63ba:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b63bc:	4b09      	ldr	r3, [pc, #36]	; (b63e4 <_ZN7FatFile4syncEv+0x68>)
   b63be:	681b      	ldr	r3, [r3, #0]
   b63c0:	b12b      	cbz	r3, b63ce <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b63c2:	f100 0116 	add.w	r1, r0, #22
   b63c6:	3018      	adds	r0, #24
   b63c8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b63ca:	8b2b      	ldrh	r3, [r5, #24]
   b63cc:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b63ce:	78a3      	ldrb	r3, [r4, #2]
   b63d0:	f023 0304 	bic.w	r3, r3, #4
   b63d4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b63d6:	68a0      	ldr	r0, [r4, #8]
   b63d8:	f7ff fd70 	bl	b5ebc <_ZN9FatVolume9cacheSyncEv>
   b63dc:	2800      	cmp	r0, #0
   b63de:	d0db      	beq.n	b6398 <_ZN7FatFile4syncEv+0x1c>
   b63e0:	e7d0      	b.n	b6384 <_ZN7FatFile4syncEv+0x8>
   b63e2:	bf00      	nop
   b63e4:	2003e60c 	.word	0x2003e60c

000b63e8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b63e8:	b510      	push	{r4, lr}
   b63ea:	4604      	mov	r4, r0
  bool rtn = sync();
   b63ec:	f7ff ffc6 	bl	b637c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b63f0:	2300      	movs	r3, #0
   b63f2:	7023      	strb	r3, [r4, #0]
}
   b63f4:	bd10      	pop	{r4, pc}

000b63f6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b63f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63f8:	b093      	sub	sp, #76	; 0x4c
   b63fa:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b63fc:	2300      	movs	r3, #0
   b63fe:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6400:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6402:	9201      	str	r2, [sp, #4]
   b6404:	4606      	mov	r6, r0
   b6406:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6408:	b113      	cbz	r3, b6410 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b640a:	2000      	movs	r0, #0
}
   b640c:	b013      	add	sp, #76	; 0x4c
   b640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6410:	780b      	ldrb	r3, [r1, #0]
   b6412:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6416:	d0f8      	beq.n	b640a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6418:	7813      	ldrb	r3, [r2, #0]
   b641a:	2b2f      	cmp	r3, #47	; 0x2f
   b641c:	d112      	bne.n	b6444 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b641e:	9a01      	ldr	r2, [sp, #4]
   b6420:	7813      	ldrb	r3, [r2, #0]
   b6422:	2b2f      	cmp	r3, #47	; 0x2f
   b6424:	d102      	bne.n	b642c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6426:	3201      	adds	r2, #1
   b6428:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b642a:	e7f8      	b.n	b641e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b642c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b642e:	b91b      	cbnz	r3, b6438 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6430:	4630      	mov	r0, r6
   b6432:	f7ff fdd3 	bl	b5fdc <_ZN7FatFile8openRootEP9FatVolume>
   b6436:	e7e9      	b.n	b640c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6438:	a809      	add	r0, sp, #36	; 0x24
   b643a:	f7ff fd29 	bl	b5e90 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b643e:	2800      	cmp	r0, #0
   b6440:	d0e3      	beq.n	b640a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6442:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6444:	9801      	ldr	r0, [sp, #4]
   b6446:	aa01      	add	r2, sp, #4
   b6448:	a903      	add	r1, sp, #12
   b644a:	f000 f98f 	bl	b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b644e:	2800      	cmp	r0, #0
   b6450:	d0db      	beq.n	b640a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6452:	9b01      	ldr	r3, [sp, #4]
   b6454:	781b      	ldrb	r3, [r3, #0]
   b6456:	b19b      	cbz	r3, b6480 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6458:	2300      	movs	r3, #0
   b645a:	aa03      	add	r2, sp, #12
   b645c:	4621      	mov	r1, r4
   b645e:	4630      	mov	r0, r6
   b6460:	f000 fab6 	bl	b69d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b6464:	2800      	cmp	r0, #0
   b6466:	d0d0      	beq.n	b640a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6468:	4635      	mov	r5, r6
   b646a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b646c:	ac09      	add	r4, sp, #36	; 0x24
   b646e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6474:	682b      	ldr	r3, [r5, #0]
   b6476:	6023      	str	r3, [r4, #0]
    close();
   b6478:	4630      	mov	r0, r6
   b647a:	f7ff ffb5 	bl	b63e8 <_ZN7FatFile5closeEv>
  while (1) {
   b647e:	e7e0      	b.n	b6442 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6480:	463b      	mov	r3, r7
   b6482:	aa03      	add	r2, sp, #12
   b6484:	4621      	mov	r1, r4
   b6486:	4630      	mov	r0, r6
   b6488:	f000 faa2 	bl	b69d0 <_ZN7FatFile4openEPS_P7fname_ti>
   b648c:	e7be      	b.n	b640c <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6490 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6494:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6496:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6498:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b649a:	4604      	mov	r4, r0
   b649c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b649e:	d55b      	bpl.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
   b64a0:	7883      	ldrb	r3, [r0, #2]
   b64a2:	079a      	lsls	r2, r3, #30
   b64a4:	d558      	bpl.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b64a6:	071b      	lsls	r3, r3, #28
   b64a8:	d451      	bmi.n	b654e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b64aa:	6963      	ldr	r3, [r4, #20]
   b64ac:	43db      	mvns	r3, r3
   b64ae:	42bb      	cmp	r3, r7
   b64b0:	d352      	bcc.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
   b64b2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b64b4:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b64b8:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b64ba:	f1b8 0f00 	cmp.w	r8, #0
   b64be:	f000 8091 	beq.w	b65e4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b64c2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b64c4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b64c6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b64ca:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b64ce:	d10e      	bne.n	b64ee <_ZN7FatFile5writeEPKvj+0x5e>
   b64d0:	b96d      	cbnz	r5, b64ee <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b64d2:	6921      	ldr	r1, [r4, #16]
   b64d4:	2900      	cmp	r1, #0
   b64d6:	d046      	beq.n	b6566 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b64d8:	4652      	mov	r2, sl
   b64da:	f000 fcab 	bl	b6e34 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b64de:	2800      	cmp	r0, #0
   b64e0:	db3a      	blt.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b64e2:	d104      	bne.n	b64ee <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b64e4:	4620      	mov	r0, r4
   b64e6:	f7ff fcf6 	bl	b5ed6 <_ZN7FatFile10addClusterEv>
   b64ea:	2800      	cmp	r0, #0
   b64ec:	d034      	beq.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b64ee:	6921      	ldr	r1, [r4, #16]
   b64f0:	68a0      	ldr	r0, [r4, #8]
   b64f2:	f000 fc99 	bl	b6e28 <_ZNK9FatVolume17clusterFirstBlockEm>
   b64f6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b64f8:	68a0      	ldr	r0, [r4, #8]
   b64fa:	b915      	cbnz	r5, b6502 <_ZN7FatFile5writeEPKvj+0x72>
   b64fc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6500:	d23f      	bcs.n	b6582 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6502:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6506:	4546      	cmp	r6, r8
   b6508:	bf28      	it	cs
   b650a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b650c:	2d00      	cmp	r5, #0
   b650e:	d136      	bne.n	b657e <_ZN7FatFile5writeEPKvj+0xee>
   b6510:	6962      	ldr	r2, [r4, #20]
   b6512:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6514:	429a      	cmp	r2, r3
   b6516:	bf34      	ite	cc
   b6518:	2201      	movcc	r2, #1
   b651a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b651c:	3024      	adds	r0, #36	; 0x24
   b651e:	f000 fc60 	bl	b6de2 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6522:	b1c8      	cbz	r0, b6558 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6524:	4428      	add	r0, r5
   b6526:	4632      	mov	r2, r6
   b6528:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b652a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b652c:	f00b fdf8 	bl	c2120 <memcpy>
      if (512 == (n + blockOffset)) {
   b6530:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6534:	d104      	bne.n	b6540 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6536:	68a0      	ldr	r0, [r4, #8]
   b6538:	3024      	adds	r0, #36	; 0x24
   b653a:	f000 fc2a 	bl	b6d92 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b653e:	b158      	cbz	r0, b6558 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6540:	6963      	ldr	r3, [r4, #20]
   b6542:	4433      	add	r3, r6
   b6544:	6163      	str	r3, [r4, #20]
    src += n;
   b6546:	44b1      	add	r9, r6
    nToWrite -= n;
   b6548:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b654c:	e7b4      	b.n	b64b8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b654e:	69c1      	ldr	r1, [r0, #28]
   b6550:	f7ff fe2a 	bl	b61a8 <_ZN7FatFile7seekSetEm>
   b6554:	2800      	cmp	r0, #0
   b6556:	d1a8      	bne.n	b64aa <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6558:	7863      	ldrb	r3, [r4, #1]
   b655a:	f043 0301 	orr.w	r3, r3, #1
   b655e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6564:	e050      	b.n	b6608 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6566:	6a23      	ldr	r3, [r4, #32]
   b6568:	b93b      	cbnz	r3, b657a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b656a:	4620      	mov	r0, r4
   b656c:	f7ff fcb3 	bl	b5ed6 <_ZN7FatFile10addClusterEv>
   b6570:	2800      	cmp	r0, #0
   b6572:	d0f1      	beq.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6574:	6923      	ldr	r3, [r4, #16]
   b6576:	6223      	str	r3, [r4, #32]
   b6578:	e7b9      	b.n	b64ee <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b657a:	6123      	str	r3, [r4, #16]
   b657c:	e7b7      	b.n	b64ee <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b657e:	2201      	movs	r2, #1
   b6580:	e7cc      	b.n	b651c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6582:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6586:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6588:	d31b      	bcc.n	b65c2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b658a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b658e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6592:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6594:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6598:	4573      	cmp	r3, lr
   b659a:	bf28      	it	cs
   b659c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b659e:	4291      	cmp	r1, r2
      n = 512*nb;
   b65a0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b65a4:	d307      	bcc.n	b65b6 <_ZN7FatFile5writeEPKvj+0x126>
   b65a6:	441a      	add	r2, r3
   b65a8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b65aa:	bf82      	ittt	hi
   b65ac:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b65b0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b65b4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b65b6:	68a5      	ldr	r5, [r4, #8]
   b65b8:	464a      	mov	r2, r9
   b65ba:	6828      	ldr	r0, [r5, #0]
   b65bc:	f000 fff3 	bl	b75a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b65c0:	e7bd      	b.n	b653e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b65c2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b65c4:	bf02      	ittt	eq
   b65c6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b65ca:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b65ce:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b65d0:	68a3      	ldr	r3, [r4, #8]
   b65d2:	464a      	mov	r2, r9
   b65d4:	6818      	ldr	r0, [r3, #0]
   b65d6:	f000 ff70 	bl	b74ba <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b65da:	2800      	cmp	r0, #0
   b65dc:	d0bc      	beq.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b65de:	f44f 7600 	mov.w	r6, #512	; 0x200
   b65e2:	e7ad      	b.n	b6540 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b65e4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b65e6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b65e8:	42b2      	cmp	r2, r6
   b65ea:	d204      	bcs.n	b65f6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b65ec:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b65ee:	f043 0304 	orr.w	r3, r3, #4
   b65f2:	70a3      	strb	r3, [r4, #2]
   b65f4:	e003      	b.n	b65fe <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b65f6:	4a08      	ldr	r2, [pc, #32]	; (b6618 <_ZN7FatFile5writeEPKvj+0x188>)
   b65f8:	6812      	ldr	r2, [r2, #0]
   b65fa:	2a00      	cmp	r2, #0
   b65fc:	d1f7      	bne.n	b65ee <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b65fe:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6602:	2b00      	cmp	r3, #0
   b6604:	db02      	blt.n	b660c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6606:	4638      	mov	r0, r7
}
   b6608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b660c:	4620      	mov	r0, r4
   b660e:	f7ff feb5 	bl	b637c <_ZN7FatFile4syncEv>
   b6612:	2800      	cmp	r0, #0
   b6614:	d1f7      	bne.n	b6606 <_ZN7FatFile5writeEPKvj+0x176>
   b6616:	e79f      	b.n	b6558 <_ZN7FatFile5writeEPKvj+0xc8>
   b6618:	2003e60c 	.word	0x2003e60c

000b661c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b661c:	2904      	cmp	r1, #4
   b661e:	d804      	bhi.n	b662a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6620:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6624:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6628:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b662a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b662c:	bf9b      	ittet	ls
   b662e:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6632:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6636:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6638:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b663a:	bf84      	itt	hi
   b663c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6640:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6642:	4770      	bx	lr

000b6644 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6644:	1e41      	subs	r1, r0, #1
   b6646:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b664a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b664c:	0842      	lsrs	r2, r0, #1
   b664e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6652:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6656:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b665a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b665c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b665e:	d1f5      	bne.n	b664c <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6660:	4770      	bx	lr

000b6662 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6662:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6664:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6666:	4604      	mov	r4, r0
   b6668:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b666a:	b923      	cbnz	r3, b6676 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b666c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6670:	6889      	ldr	r1, [r1, #8]
   b6672:	f7ff bcb3 	b.w	b5fdc <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6676:	2224      	movs	r2, #36	; 0x24
   b6678:	2100      	movs	r1, #0
   b667a:	f00b fd79 	bl	c2170 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b667e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6680:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6682:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6684:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6686:	68ab      	ldr	r3, [r5, #8]
   b6688:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b668a:	68eb      	ldr	r3, [r5, #12]
   b668c:	6223      	str	r3, [r4, #32]
}
   b668e:	bd38      	pop	{r3, r4, r5, pc}

000b6690 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6694:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6696:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6698:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b669c:	4606      	mov	r6, r0
   b669e:	460f      	mov	r7, r1
   b66a0:	4690      	mov	r8, r2
   b66a2:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b66a6:	2b00      	cmp	r3, #0
   b66a8:	d05d      	beq.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
   b66aa:	2a0c      	cmp	r2, #12
   b66ac:	d95b      	bls.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b66ae:	78c3      	ldrb	r3, [r0, #3]
   b66b0:	b933      	cbnz	r3, b66c0 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b66b2:	f000 fb57 	bl	b6d64 <_ZN7FatFile6getSFNEPc>
   b66b6:	4604      	mov	r4, r0
}
   b66b8:	4620      	mov	r0, r4
   b66ba:	b00d      	add	sp, #52	; 0x34
   b66bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b66c0:	4601      	mov	r1, r0
   b66c2:	a803      	add	r0, sp, #12
   b66c4:	f7ff ffcd 	bl	b6662 <_ZN7FatFile11openClusterEPS_>
   b66c8:	2800      	cmp	r0, #0
   b66ca:	d04c      	beq.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b66cc:	eb07 0308 	add.w	r3, r7, r8
   b66d0:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b66d4:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b66d8:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b66da:	78f3      	ldrb	r3, [r6, #3]
   b66dc:	fa5f f58b 	uxtb.w	r5, fp
   b66e0:	42ab      	cmp	r3, r5
   b66e2:	d340      	bcc.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b66e4:	88b1      	ldrh	r1, [r6, #4]
   b66e6:	eba1 010b 	sub.w	r1, r1, fp
   b66ea:	0149      	lsls	r1, r1, #5
   b66ec:	a803      	add	r0, sp, #12
   b66ee:	f7ff fd5b 	bl	b61a8 <_ZN7FatFile7seekSetEm>
   b66f2:	4604      	mov	r4, r0
   b66f4:	2800      	cmp	r0, #0
   b66f6:	d036      	beq.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b66f8:	2100      	movs	r1, #0
   b66fa:	a803      	add	r0, sp, #12
   b66fc:	f7ff fd35 	bl	b616a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6700:	4603      	mov	r3, r0
   b6702:	b380      	cbz	r0, b6766 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6704:	7ac2      	ldrb	r2, [r0, #11]
   b6706:	2a0f      	cmp	r2, #15
   b6708:	d12d      	bne.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b670a:	7802      	ldrb	r2, [r0, #0]
   b670c:	f002 021f 	and.w	r2, r2, #31
   b6710:	42aa      	cmp	r2, r5
   b6712:	d128      	bne.n	b6766 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6714:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b6718:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b671c:	197a      	adds	r2, r7, r5
   b671e:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6720:	4618      	mov	r0, r3
   b6722:	9101      	str	r1, [sp, #4]
   b6724:	f7ff ff7a 	bl	b661c <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6728:	b168      	cbz	r0, b6746 <_ZN7FatFile7getNameEPcj+0xb6>
   b672a:	45a8      	cmp	r8, r5
   b672c:	d912      	bls.n	b6754 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b672e:	9901      	ldr	r1, [sp, #4]
   b6730:	3101      	adds	r1, #1
   b6732:	287f      	cmp	r0, #127	; 0x7f
   b6734:	b2c9      	uxtb	r1, r1
   b6736:	bf28      	it	cs
   b6738:	203f      	movcs	r0, #63	; 0x3f
   b673a:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b673c:	f802 0b01 	strb.w	r0, [r2], #1
   b6740:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6744:	d1ec      	bne.n	b6720 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6746:	45a8      	cmp	r8, r5
   b6748:	d904      	bls.n	b6754 <_ZN7FatFile7getNameEPcj+0xc4>
   b674a:	781a      	ldrb	r2, [r3, #0]
   b674c:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b674e:	bf48      	it	mi
   b6750:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6754:	9a00      	ldr	r2, [sp, #0]
   b6756:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b675a:	781b      	ldrb	r3, [r3, #0]
   b675c:	065b      	lsls	r3, r3, #25
   b675e:	f10b 0b01 	add.w	fp, fp, #1
   b6762:	d5ba      	bpl.n	b66da <_ZN7FatFile7getNameEPcj+0x4a>
   b6764:	e7a8      	b.n	b66b8 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6766:	2400      	movs	r4, #0
   b6768:	703c      	strb	r4, [r7, #0]
  return false;
   b676a:	e7a5      	b.n	b66b8 <_ZN7FatFile7getNameEPcj+0x28>

000b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6770:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6772:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6776:	2b20      	cmp	r3, #32
   b6778:	d0fa      	beq.n	b6770 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b677a:	4d6a      	ldr	r5, [pc, #424]	; (b6924 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b677c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b677e:	2400      	movs	r4, #0
    c = path[len];
   b6780:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6782:	b1c3      	cbz	r3, b67b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6784:	2b2f      	cmp	r3, #47	; 0x2f
   b6786:	d016      	beq.n	b67b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6788:	2b5c      	cmp	r3, #92	; 0x5c
   b678a:	d102      	bne.n	b6792 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b678c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6792:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6796:	b2c0      	uxtb	r0, r0
   b6798:	281d      	cmp	r0, #29
   b679a:	d803      	bhi.n	b67a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b679c:	fa25 f000 	lsr.w	r0, r5, r0
   b67a0:	07c0      	lsls	r0, r0, #31
   b67a2:	d4f3      	bmi.n	b678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b67a4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b67a8:	283c      	cmp	r0, #60	; 0x3c
   b67aa:	d0ef      	beq.n	b678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b67ac:	3b20      	subs	r3, #32
   b67ae:	2b5e      	cmp	r3, #94	; 0x5e
   b67b0:	d8ec      	bhi.n	b678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b67b2:	3401      	adds	r4, #1
    c = path[len];
   b67b4:	e7e4      	b.n	b6780 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b67b6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b67b8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b67ba:	4607      	mov	r7, r0
   b67bc:	f810 5b01 	ldrb.w	r5, [r0], #1
   b67c0:	2d20      	cmp	r5, #32
   b67c2:	d0fa      	beq.n	b67ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b67c4:	2d2f      	cmp	r5, #47	; 0x2f
   b67c6:	d0f8      	beq.n	b67ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b67c8:	6017      	str	r7, [r2, #0]
  while (len) {
   b67ca:	b14c      	cbz	r4, b67e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b67cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b67d0:	2a2e      	cmp	r2, #46	; 0x2e
   b67d2:	d001      	beq.n	b67d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b67d4:	2a20      	cmp	r2, #32
   b67d6:	d101      	bne.n	b67dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b67d8:	3c01      	subs	r4, #1
  while (len) {
   b67da:	e7f6      	b.n	b67ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b67dc:	2cff      	cmp	r4, #255	; 0xff
   b67de:	dcd5      	bgt.n	b678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b67e0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b67e4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b67e8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b67ea:	f8c1 300d 	str.w	r3, [r1, #13]
   b67ee:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b67f0:	f04f 0800 	mov.w	r8, #0
   b67f4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b67f8:	2b2e      	cmp	r3, #46	; 0x2e
   b67fa:	d001      	beq.n	b6800 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b67fc:	2b20      	cmp	r3, #32
   b67fe:	d102      	bne.n	b6806 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6800:	f108 0801 	add.w	r8, r8, #1
   b6804:	e7f6      	b.n	b67f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6806:	fab8 f088 	clz	r0, r8
   b680a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b680c:	1e65      	subs	r5, r4, #1
   b680e:	1c6b      	adds	r3, r5, #1
   b6810:	d002      	beq.n	b6818 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6812:	5d73      	ldrb	r3, [r6, r5]
   b6814:	2b2e      	cmp	r3, #46	; 0x2e
   b6816:	d114      	bne.n	b6842 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6818:	f04f 0900 	mov.w	r9, #0
   b681c:	2707      	movs	r7, #7
   b681e:	464a      	mov	r2, r9
   b6820:	46ca      	mov	sl, r9
   b6822:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6826:	45a0      	cmp	r8, r4
   b6828:	da68      	bge.n	b68fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b682a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b682e:	2b20      	cmp	r3, #32
   b6830:	d003      	beq.n	b683a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6832:	2b2e      	cmp	r3, #46	; 0x2e
   b6834:	d107      	bne.n	b6846 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6836:	45a8      	cmp	r8, r5
   b6838:	d012      	beq.n	b6860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b683a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b683c:	f108 0801 	add.w	r8, r8, #1
   b6840:	e7f1      	b.n	b6826 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6842:	3d01      	subs	r5, #1
   b6844:	e7e3      	b.n	b680e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6846:	2b22      	cmp	r3, #34	; 0x22
   b6848:	d008      	beq.n	b685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b684a:	2b7c      	cmp	r3, #124	; 0x7c
   b684c:	d006      	beq.n	b685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b684e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6852:	f1bc 0f05 	cmp.w	ip, #5
   b6856:	d80a      	bhi.n	b686e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6858:	2b2d      	cmp	r3, #45	; 0x2d
   b685a:	d012      	beq.n	b6882 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b685c:	45a8      	cmp	r8, r5
   b685e:	d15b      	bne.n	b6918 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6860:	2f0a      	cmp	r7, #10
   b6862:	d04a      	beq.n	b68fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6864:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6866:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6868:	f04f 0e10 	mov.w	lr, #16
   b686c:	e7e6      	b.n	b683c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b686e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6872:	f1bc 0f05 	cmp.w	ip, #5
   b6876:	d9f1      	bls.n	b685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6878:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b687c:	f1bc 0f02 	cmp.w	ip, #2
   b6880:	d9ec      	bls.n	b685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6882:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6886:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b688a:	d8e7      	bhi.n	b685c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b688c:	45a8      	cmp	r8, r5
   b688e:	d0e7      	beq.n	b6860 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6890:	42ba      	cmp	r2, r7
   b6892:	d830      	bhi.n	b68f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6894:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6898:	f1bc 0f19 	cmp.w	ip, #25
   b689c:	d81a      	bhi.n	b68d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b689e:	3b20      	subs	r3, #32
        lc |= bit;
   b68a0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b68a4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b68a6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b68aa:	f102 0c01 	add.w	ip, r2, #1
   b68ae:	fa5f fc8c 	uxtb.w	ip, ip
   b68b2:	440a      	add	r2, r1
      if (i < 7) {
   b68b4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b68b8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b68ba:	d801      	bhi.n	b68c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b68bc:	f881 c00c 	strb.w	ip, [r1, #12]
   b68c0:	4662      	mov	r2, ip
   b68c2:	e7bb      	b.n	b683c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b68c4:	45a8      	cmp	r8, r5
   b68c6:	dc18      	bgt.n	b68fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b68c8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b68ca:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b68cc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b68ce:	f04f 0e10 	mov.w	lr, #16
   b68d2:	e7b2      	b.n	b683a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b68d4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b68d8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b68dc:	bf98      	it	ls
   b68de:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b68e2:	e7e2      	b.n	b68aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b68e4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b68e6:	2001      	movs	r0, #1
   b68e8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b68ea:	4419      	add	r1, r3
   b68ec:	237e      	movs	r3, #126	; 0x7e
   b68ee:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b68f0:	2331      	movs	r3, #49	; 0x31
   b68f2:	738b      	strb	r3, [r1, #14]
   b68f4:	e74b      	b.n	b678e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b68f6:	2f0a      	cmp	r7, #10
   b68f8:	d1e4      	bne.n	b68c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b68fa:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b68fc:	7b4b      	ldrb	r3, [r1, #13]
   b68fe:	2b20      	cmp	r3, #32
   b6900:	f43f af44 	beq.w	b678c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6904:	2800      	cmp	r0, #0
   b6906:	d0ed      	beq.n	b68e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6908:	ea1a 0f09 	tst.w	sl, r9
   b690c:	bf18      	it	ne
   b690e:	f04f 0902 	movne.w	r9, #2
   b6912:	f881 9000 	strb.w	r9, [r1]
   b6916:	e73a      	b.n	b678e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6918:	42ba      	cmp	r2, r7
   b691a:	d8ec      	bhi.n	b68f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b691c:	2000      	movs	r0, #0
      c = '_';
   b691e:	235f      	movs	r3, #95	; 0x5f
   b6920:	e7c3      	b.n	b68aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6922:	bf00      	nop
   b6924:	31000101 	.word	0x31000101

000b6928 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b692c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6930:	4606      	mov	r6, r0
   b6932:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6934:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6936:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6938:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b693c:	6861      	ldr	r1, [r4, #4]
   b693e:	68a2      	ldr	r2, [r4, #8]
   b6940:	186b      	adds	r3, r5, r1
   b6942:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6944:	4411      	add	r1, r2
   b6946:	4291      	cmp	r1, r2
   b6948:	d006      	beq.n	b6958 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b694a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b694e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6952:	4043      	eors	r3, r0
   b6954:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6956:	e7f6      	b.n	b6946 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6958:	f1b9 0f03 	cmp.w	r9, #3
   b695c:	bf28      	it	cs
   b695e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6962:	f109 0204 	add.w	r2, r9, #4
   b6966:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6968:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b696c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b696e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6970:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6972:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6974:	bf94      	ite	ls
   b6976:	3130      	addls	r1, #48	; 0x30
   b6978:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b697a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b697c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b697e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6982:	d1f1      	bne.n	b6968 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6984:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6988:	2100      	movs	r1, #0
   b698a:	735f      	strb	r7, [r3, #13]
   b698c:	4630      	mov	r0, r6
   b698e:	f7ff fc0b 	bl	b61a8 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6992:	2101      	movs	r1, #1
   b6994:	4630      	mov	r0, r6
   b6996:	f7ff fbe8 	bl	b616a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b699a:	4601      	mov	r1, r0
   b699c:	b928      	cbnz	r0, b69aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b699e:	7870      	ldrb	r0, [r6, #1]
   b69a0:	fab0 f080 	clz	r0, r0
   b69a4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b69a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b69aa:	7803      	ldrb	r3, [r0, #0]
   b69ac:	b16b      	cbz	r3, b69ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b69ae:	7ac3      	ldrb	r3, [r0, #11]
   b69b0:	071b      	lsls	r3, r3, #28
   b69b2:	d4ee      	bmi.n	b6992 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b69b4:	220b      	movs	r2, #11
   b69b6:	4640      	mov	r0, r8
   b69b8:	f00b fba2 	bl	c2100 <memcmp>
   b69bc:	2800      	cmp	r0, #0
   b69be:	d1e8      	bne.n	b6992 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b69c0:	3501      	adds	r5, #1
   b69c2:	b2ad      	uxth	r5, r5
   b69c4:	2d64      	cmp	r5, #100	; 0x64
   b69c6:	d1b9      	bne.n	b693c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b69c8:	e7ed      	b.n	b69a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b69ca:	2001      	movs	r0, #1
   b69cc:	e7eb      	b.n	b69a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b69d0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b69d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69d4:	ed2d 8b02 	vpush	{d8}
   b69d8:	b08b      	sub	sp, #44	; 0x2c
   b69da:	460d      	mov	r5, r1
   b69dc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b69de:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b69e0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b69e2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b69e6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b69e8:	d105      	bne.n	b69f6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b69ea:	2000      	movs	r0, #0
}
   b69ec:	b00b      	add	sp, #44	; 0x2c
   b69ee:	ecbd 8b02 	vpop	{d8}
   b69f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b69f6:	9b07      	ldr	r3, [sp, #28]
   b69f8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b69fa:	2b00      	cmp	r3, #0
   b69fc:	d1f5      	bne.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b69fe:	6853      	ldr	r3, [r2, #4]
   b6a00:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6a02:	7813      	ldrb	r3, [r2, #0]
   b6a04:	079c      	lsls	r4, r3, #30
   b6a06:	bf1f      	itttt	ne
   b6a08:	9b05      	ldrne	r3, [sp, #20]
   b6a0a:	330c      	addne	r3, #12
   b6a0c:	220d      	movne	r2, #13
   b6a0e:	fbb3 f3f2 	udivne	r3, r3, r2
   b6a12:	bf1a      	itte	ne
   b6a14:	3301      	addne	r3, #1
   b6a16:	b2db      	uxtbne	r3, r3
   b6a18:	2301      	moveq	r3, #1
    seekSet(0);
   b6a1a:	2100      	movs	r1, #0
   b6a1c:	4628      	mov	r0, r5
   b6a1e:	9303      	str	r3, [sp, #12]
   b6a20:	f7ff fbc2 	bl	b61a8 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6a24:	f107 030d 	add.w	r3, r7, #13
  }
   b6a28:	f04f 0b00 	mov.w	fp, #0
   b6a2c:	ee08 3a10 	vmov	s16, r3
   b6a30:	46da      	mov	sl, fp
   b6a32:	465c      	mov	r4, fp
   b6a34:	465e      	mov	r6, fp
   b6a36:	f8cd b010 	str.w	fp, [sp, #16]
   b6a3a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6a3c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6a3e:	2101      	movs	r1, #1
   b6a40:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6a42:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6a46:	f7ff fb90 	bl	b616a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6a4a:	4603      	mov	r3, r0
   b6a4c:	2800      	cmp	r0, #0
   b6a4e:	d171      	bne.n	b6b34 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6a50:	786b      	ldrb	r3, [r5, #1]
   b6a52:	2b00      	cmp	r3, #0
   b6a54:	d1c9      	bne.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6a56:	9b06      	ldr	r3, [sp, #24]
   b6a58:	059a      	lsls	r2, r3, #22
   b6a5a:	d5c6      	bpl.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6a5c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6a60:	3b01      	subs	r3, #1
   b6a62:	2b01      	cmp	r3, #1
   b6a64:	d8c1      	bhi.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6a66:	9b04      	ldr	r3, [sp, #16]
   b6a68:	2c00      	cmp	r4, #0
   b6a6a:	bf08      	it	eq
   b6a6c:	4643      	moveq	r3, r8
   b6a6e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6a70:	9b03      	ldr	r3, [sp, #12]
   b6a72:	429c      	cmp	r4, r3
   b6a74:	f0c0 80f1 	bcc.w	b6c5a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6a78:	f1b9 0f00 	cmp.w	r9, #0
   b6a7c:	f040 810a 	bne.w	b6c94 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6a80:	9b04      	ldr	r3, [sp, #16]
   b6a82:	4628      	mov	r0, r5
   b6a84:	0159      	lsls	r1, r3, #5
   b6a86:	f7ff fb8f 	bl	b61a8 <_ZN7FatFile7seekSetEm>
   b6a8a:	2800      	cmp	r0, #0
   b6a8c:	d0ad      	beq.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6a8e:	9b03      	ldr	r3, [sp, #12]
   b6a90:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6a94:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6a98:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6a9a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6a9e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6aa2:	2e00      	cmp	r6, #0
   b6aa4:	f000 810d 	beq.w	b6cc2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6aa8:	2100      	movs	r1, #0
   b6aaa:	4628      	mov	r0, r5
   b6aac:	f7ff fb5d 	bl	b616a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6ab0:	4604      	mov	r4, r0
   b6ab2:	2800      	cmp	r0, #0
   b6ab4:	d099      	beq.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6ab6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6ab8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6abc:	454e      	cmp	r6, r9
   b6abe:	f043 0301 	orr.w	r3, r3, #1
   b6ac2:	bf0c      	ite	eq
   b6ac4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6ac8:	46b3      	movne	fp, r6
   b6aca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6ace:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6ad2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6ad6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6ada:	f107 000d 	add.w	r0, r7, #13
   b6ade:	f7ff fdb1 	bl	b6644 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6ae2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6ae6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6ae8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6aec:	f00b 031f 	and.w	r3, fp, #31
   b6af0:	220d      	movs	r2, #13
   b6af2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6af4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6af8:	4353      	muls	r3, r2
   b6afa:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6afc:	9905      	ldr	r1, [sp, #20]
   b6afe:	4299      	cmp	r1, r3
   b6b00:	f240 80d0 	bls.w	b6ca4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6b04:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6b08:	2a04      	cmp	r2, #4
   b6b0a:	fa5f fe82 	uxtb.w	lr, r2
   b6b0e:	f102 0001 	add.w	r0, r2, #1
   b6b12:	f200 80cd 	bhi.w	b6cb0 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6b16:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6b1a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6b1e:	280d      	cmp	r0, #13
   b6b20:	f103 0301 	add.w	r3, r3, #1
   b6b24:	4602      	mov	r2, r0
   b6b26:	d1e9      	bne.n	b6afc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6b28:	3e01      	subs	r6, #1
   b6b2a:	b2f6      	uxtb	r6, r6
   b6b2c:	e7b9      	b.n	b6aa2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6b2e:	f04f 0901 	mov.w	r9, #1
   b6b32:	e783      	b.n	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6b34:	7802      	ldrb	r2, [r0, #0]
   b6b36:	2ae5      	cmp	r2, #229	; 0xe5
   b6b38:	d000      	beq.n	b6b3c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6b3a:	b97a      	cbnz	r2, b6b5c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6b3c:	9904      	ldr	r1, [sp, #16]
   b6b3e:	2c00      	cmp	r4, #0
   b6b40:	bf08      	it	eq
   b6b42:	4641      	moveq	r1, r8
   b6b44:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6b46:	9903      	ldr	r1, [sp, #12]
   b6b48:	428c      	cmp	r4, r1
        freeFound++;
   b6b4a:	bf3c      	itt	cc
   b6b4c:	3401      	addcc	r4, #1
   b6b4e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6b50:	2a00      	cmp	r2, #0
   b6b52:	d080      	beq.n	b6a56 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6b54:	2ae5      	cmp	r2, #229	; 0xe5
   b6b56:	d105      	bne.n	b6b64 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6b58:	2600      	movs	r6, #0
   b6b5a:	e76f      	b.n	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6b5c:	9903      	ldr	r1, [sp, #12]
   b6b5e:	428c      	cmp	r4, r1
   b6b60:	bf38      	it	cc
   b6b62:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6b64:	2a2e      	cmp	r2, #46	; 0x2e
   b6b66:	d0f7      	beq.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6b68:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6b6a:	290f      	cmp	r1, #15
   b6b6c:	d14a      	bne.n	b6c04 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6b6e:	bb16      	cbnz	r6, b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6b70:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6b74:	f43f af62 	beq.w	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6b78:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6b7c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6b80:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6b82:	220d      	movs	r2, #13
   b6b84:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6b88:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6b8c:	9a05      	ldr	r2, [sp, #20]
   b6b8e:	4542      	cmp	r2, r8
   b6b90:	d9e2      	bls.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6b92:	eba2 0208 	sub.w	r2, r2, r8
   b6b96:	9208      	str	r2, [sp, #32]
   b6b98:	2200      	movs	r2, #0
   b6b9a:	eb02 0108 	add.w	r1, r2, r8
   b6b9e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6ba0:	4618      	mov	r0, r3
   b6ba2:	b2d1      	uxtb	r1, r2
   b6ba4:	f7ff fd3a 	bl	b661c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6ba8:	9908      	ldr	r1, [sp, #32]
   b6baa:	428a      	cmp	r2, r1
   b6bac:	d10d      	bne.n	b6bca <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6bae:	2800      	cmp	r0, #0
   b6bb0:	bf18      	it	ne
   b6bb2:	2600      	movne	r6, #0
   b6bb4:	e742      	b.n	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6bb6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6bba:	fa5f fa8a 	uxtb.w	sl, sl
   b6bbe:	4552      	cmp	r2, sl
   b6bc0:	d1ca      	bne.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6bc2:	7b5a      	ldrb	r2, [r3, #13]
   b6bc4:	455a      	cmp	r2, fp
   b6bc6:	d0dc      	beq.n	b6b82 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6bc8:	e7c6      	b.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6bca:	28ff      	cmp	r0, #255	; 0xff
   b6bcc:	d8c4      	bhi.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6bce:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6bd2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6bd6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6bd8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6bda:	bf9c      	itt	ls
   b6bdc:	f10e 0020 	addls.w	r0, lr, #32
   b6be0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6be4:	4608      	mov	r0, r1
   b6be6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6be8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6bea:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6bee:	f1bc 0f19 	cmp.w	ip, #25
   b6bf2:	bf9c      	itt	ls
   b6bf4:	3120      	addls	r1, #32
   b6bf6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6bf8:	4571      	cmp	r1, lr
   b6bfa:	d1ad      	bne.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6bfc:	3201      	adds	r2, #1
   b6bfe:	2a0d      	cmp	r2, #13
   b6c00:	d1cb      	bne.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6c02:	e71b      	b.n	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6c04:	0708      	lsls	r0, r1, #28
   b6c06:	d4a7      	bmi.n	b6b58 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6c08:	b15e      	cbz	r6, b6c22 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6c0a:	f1ba 0f01 	cmp.w	sl, #1
   b6c0e:	f47f aeec 	bne.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6c12:	4618      	mov	r0, r3
   b6c14:	f7ff fd16 	bl	b6644 <_ZN7FatFile11lfnChecksumEPh>
   b6c18:	4558      	cmp	r0, fp
   b6c1a:	f47f aee6 	bne.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6c1e:	46b1      	mov	r9, r6
   b6c20:	e00e      	b.n	b6c40 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6c22:	ee18 1a10 	vmov	r1, s16
   b6c26:	220b      	movs	r2, #11
   b6c28:	4618      	mov	r0, r3
   b6c2a:	f00b fa69 	bl	c2100 <memcmp>
   b6c2e:	2800      	cmp	r0, #0
   b6c30:	f47f af04 	bne.w	b6a3c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6c34:	f897 9000 	ldrb.w	r9, [r7]
   b6c38:	f019 0901 	ands.w	r9, r9, #1
   b6c3c:	f47f af77 	bne.w	b6b2e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6c40:	9b06      	ldr	r3, [sp, #24]
   b6c42:	0519      	lsls	r1, r3, #20
   b6c44:	f53f aed1 	bmi.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6c48:	9b06      	ldr	r3, [sp, #24]
   b6c4a:	9807      	ldr	r0, [sp, #28]
   b6c4c:	f8cd 9000 	str.w	r9, [sp]
   b6c50:	4642      	mov	r2, r8
   b6c52:	4629      	mov	r1, r5
   b6c54:	f7ff faeb 	bl	b622e <_ZN7FatFile15openCachedEntryEPS_tih>
   b6c58:	e6c8      	b.n	b69ec <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6c5a:	2100      	movs	r1, #0
   b6c5c:	4628      	mov	r0, r5
   b6c5e:	f7ff fa84 	bl	b616a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6c62:	b9a0      	cbnz	r0, b6c8e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6c64:	786b      	ldrb	r3, [r5, #1]
   b6c66:	2b00      	cmp	r3, #0
   b6c68:	f47f aebf 	bne.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6c6c:	4628      	mov	r0, r5
   b6c6e:	f7ff f93d 	bl	b5eec <_ZN7FatFile13addDirClusterEv>
   b6c72:	2800      	cmp	r0, #0
   b6c74:	f43f aeb9 	beq.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6c78:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6c7a:	791b      	ldrb	r3, [r3, #4]
   b6c7c:	2b01      	cmp	r3, #1
   b6c7e:	f63f aefb 	bhi.w	b6a78 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6c82:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6c84:	3410      	adds	r4, #16
   b6c86:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6c88:	42a3      	cmp	r3, r4
   b6c8a:	d8ef      	bhi.n	b6c6c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6c8c:	e6f4      	b.n	b6a78 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6c8e:	3401      	adds	r4, #1
   b6c90:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6c92:	e6ed      	b.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6c94:	4639      	mov	r1, r7
   b6c96:	4628      	mov	r0, r5
   b6c98:	f7ff fe46 	bl	b6928 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6c9c:	2800      	cmp	r0, #0
   b6c9e:	f47f aeef 	bne.w	b6a80 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6ca2:	e6a2      	b.n	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6ca4:	bf14      	ite	ne
   b6ca6:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6caa:	2100      	moveq	r1, #0
   b6cac:	b289      	uxth	r1, r1
   b6cae:	e72b      	b.n	b6b08 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6cb0:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6cb4:	bf94      	ite	ls
   b6cb6:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6cba:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6cbe:	8091      	strh	r1, [r2, #4]
   b6cc0:	e72d      	b.n	b6b1e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6cc2:	4631      	mov	r1, r6
   b6cc4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6cc6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6cca:	f7ff fa4e 	bl	b616a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6cce:	4604      	mov	r4, r0
   b6cd0:	2800      	cmp	r0, #0
   b6cd2:	f43f ae8a 	beq.w	b69ea <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6cd6:	2220      	movs	r2, #32
   b6cd8:	4631      	mov	r1, r6
   b6cda:	f00b fa49 	bl	c2170 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6cde:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6ce2:	6023      	str	r3, [r4, #0]
   b6ce4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6ce8:	6063      	str	r3, [r4, #4]
   b6cea:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6cee:	8123      	strh	r3, [r4, #8]
   b6cf0:	7dfb      	ldrb	r3, [r7, #23]
   b6cf2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6cf4:	783b      	ldrb	r3, [r7, #0]
   b6cf6:	f003 0318 	and.w	r3, r3, #24
   b6cfa:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6cfc:	4b0f      	ldr	r3, [pc, #60]	; (b6d3c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6cfe:	681b      	ldr	r3, [r3, #0]
   b6d00:	b19b      	cbz	r3, b6d2a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6d02:	f104 010e 	add.w	r1, r4, #14
   b6d06:	f104 0010 	add.w	r0, r4, #16
   b6d0a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6d0c:	8a23      	ldrh	r3, [r4, #16]
   b6d0e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6d10:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6d12:	89e3      	ldrh	r3, [r4, #14]
   b6d14:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6d16:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6d18:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6d1c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6d20:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6d24:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6d28:	e78e      	b.n	b6c48 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6d2a:	2321      	movs	r3, #33	; 0x21
   b6d2c:	7423      	strb	r3, [r4, #16]
   b6d2e:	2328      	movs	r3, #40	; 0x28
   b6d30:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6d32:	2308      	movs	r3, #8
   b6d34:	73a6      	strb	r6, [r4, #14]
   b6d36:	73e3      	strb	r3, [r4, #15]
   b6d38:	e7e8      	b.n	b6d0c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6d3a:	bf00      	nop
   b6d3c:	2003e60c 	.word	0x2003e60c

000b6d40 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6d40:	b513      	push	{r0, r1, r4, lr}
   b6d42:	4604      	mov	r4, r0
    }
   b6d44:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6d46:	b159      	cbz	r1, b6d60 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6d48:	9101      	str	r1, [sp, #4]
   b6d4a:	f00b fa9c 	bl	c2286 <strlen>
   b6d4e:	6823      	ldr	r3, [r4, #0]
   b6d50:	9901      	ldr	r1, [sp, #4]
   b6d52:	68db      	ldr	r3, [r3, #12]
   b6d54:	4602      	mov	r2, r0
   b6d56:	4620      	mov	r0, r4
    }
   b6d58:	b002      	add	sp, #8
   b6d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6d5e:	4718      	bx	r3
    }
   b6d60:	b002      	add	sp, #8
   b6d62:	bd10      	pop	{r4, pc}

000b6d64 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6d64:	b510      	push	{r4, lr}
   b6d66:	460c      	mov	r4, r1
    return m_attr;
   b6d68:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6d6a:	b909      	cbnz	r1, b6d70 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6d6c:	2000      	movs	r0, #0
}
   b6d6e:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6d70:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6d74:	d005      	beq.n	b6d82 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6d76:	232f      	movs	r3, #47	; 0x2f
   b6d78:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6d7a:	2300      	movs	r3, #0
   b6d7c:	7063      	strb	r3, [r4, #1]
  return true;
   b6d7e:	2001      	movs	r0, #1
   b6d80:	e7f5      	b.n	b6d6e <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6d82:	f7ff f8f1 	bl	b5f68 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6d86:	2800      	cmp	r0, #0
   b6d88:	d0f0      	beq.n	b6d6c <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6d8a:	4621      	mov	r1, r4
   b6d8c:	f7ff f8fb 	bl	b5f86 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6d90:	e7f5      	b.n	b6d7e <_ZN7FatFile6getSFNEPc+0x1a>

000b6d92 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6d94:	7803      	ldrb	r3, [r0, #0]
   b6d96:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6d98:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6d9a:	d520      	bpl.n	b6dde <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b6d9c:	6843      	ldr	r3, [r0, #4]
   b6d9e:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6da0:	f100 020c 	add.w	r2, r0, #12
   b6da4:	6818      	ldr	r0, [r3, #0]
   b6da6:	9201      	str	r2, [sp, #4]
   b6da8:	f000 fb87 	bl	b74ba <_ZN9SdSpiCard10writeBlockEmPKh>
   b6dac:	9a01      	ldr	r2, [sp, #4]
   b6dae:	4605      	mov	r5, r0
   b6db0:	b918      	cbnz	r0, b6dba <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6db2:	2500      	movs	r5, #0
}
   b6db4:	4628      	mov	r0, r5
   b6db6:	b003      	add	sp, #12
   b6db8:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6dba:	7823      	ldrb	r3, [r4, #0]
   b6dbc:	079b      	lsls	r3, r3, #30
   b6dbe:	d404      	bmi.n	b6dca <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6dc0:	7823      	ldrb	r3, [r4, #0]
   b6dc2:	f023 0301 	bic.w	r3, r3, #1
   b6dc6:	7023      	strb	r3, [r4, #0]
   b6dc8:	e7f4      	b.n	b6db4 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6dca:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6dce:	6919      	ldr	r1, [r3, #16]
   b6dd0:	4401      	add	r1, r0
   b6dd2:	6818      	ldr	r0, [r3, #0]
   b6dd4:	f000 fb71 	bl	b74ba <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6dd8:	2800      	cmp	r0, #0
   b6dda:	d1f1      	bne.n	b6dc0 <_ZN8FatCache4syncEv+0x2e>
   b6ddc:	e7e9      	b.n	b6db2 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6dde:	2501      	movs	r5, #1
   b6de0:	e7e8      	b.n	b6db4 <_ZN8FatCache4syncEv+0x22>

000b6de2 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6de2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6de4:	6883      	ldr	r3, [r0, #8]
   b6de6:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6de8:	4604      	mov	r4, r0
   b6dea:	460e      	mov	r6, r1
   b6dec:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6dee:	d009      	beq.n	b6e04 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6df0:	f7ff ffcf 	bl	b6d92 <_ZN8FatCache4syncEv>
   b6df4:	b908      	cbnz	r0, b6dfa <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6df6:	2000      	movs	r0, #0
}
   b6df8:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6dfa:	076b      	lsls	r3, r5, #29
   b6dfc:	d50a      	bpl.n	b6e14 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6dfe:	2300      	movs	r3, #0
   b6e00:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6e02:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6e04:	7822      	ldrb	r2, [r4, #0]
   b6e06:	f005 0503 	and.w	r5, r5, #3
   b6e0a:	4620      	mov	r0, r4
   b6e0c:	4315      	orrs	r5, r2
   b6e0e:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6e12:	e7f1      	b.n	b6df8 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6e14:	6863      	ldr	r3, [r4, #4]
   b6e16:	f104 020c 	add.w	r2, r4, #12
   b6e1a:	6818      	ldr	r0, [r3, #0]
   b6e1c:	4631      	mov	r1, r6
   b6e1e:	f000 fac3 	bl	b73a8 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6e22:	2800      	cmp	r0, #0
   b6e24:	d1eb      	bne.n	b6dfe <_ZN8FatCache4readEmh+0x1c>
   b6e26:	e7e6      	b.n	b6df6 <_ZN8FatCache4readEmh+0x14>

000b6e28 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6e28:	7983      	ldrb	r3, [r0, #6]
   b6e2a:	6940      	ldr	r0, [r0, #20]
   b6e2c:	3902      	subs	r1, #2
   b6e2e:	4099      	lsls	r1, r3
}
   b6e30:	4408      	add	r0, r1
   b6e32:	4770      	bx	lr

000b6e34 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6e34:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6e36:	b570      	push	{r4, r5, r6, lr}
   b6e38:	4605      	mov	r5, r0
   b6e3a:	460c      	mov	r4, r1
   b6e3c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6e3e:	d802      	bhi.n	b6e46 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6e44:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6e46:	69c3      	ldr	r3, [r0, #28]
   b6e48:	428b      	cmp	r3, r1
   b6e4a:	d3f9      	bcc.n	b6e40 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6e4c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6e4e:	2b20      	cmp	r3, #32
   b6e50:	d116      	bne.n	b6e80 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6e52:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6e54:	2202      	movs	r2, #2
   b6e56:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6e5a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6e5e:	f7ff ffc0 	bl	b6de2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6e62:	2800      	cmp	r0, #0
   b6e64:	d0ec      	beq.n	b6e40 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6e66:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6e6a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6e6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6e72:	69ea      	ldr	r2, [r5, #28]
   b6e74:	429a      	cmp	r2, r3
  *value = next;
   b6e76:	bf26      	itte	cs
   b6e78:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6e7a:	2001      	movcs	r0, #1
    return 0;
   b6e7c:	2000      	movcc	r0, #0
   b6e7e:	e7e1      	b.n	b6e44 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6e80:	2b10      	cmp	r3, #16
   b6e82:	d1dd      	bne.n	b6e40 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6e84:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6e88:	6981      	ldr	r1, [r0, #24]
   b6e8a:	2202      	movs	r2, #2
   b6e8c:	4419      	add	r1, r3
   b6e8e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6e92:	f7ff ffa6 	bl	b6de2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6e96:	2800      	cmp	r0, #0
   b6e98:	d0d2      	beq.n	b6e40 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6e9a:	b2e4      	uxtb	r4, r4
   b6e9c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6ea0:	e7e7      	b.n	b6e72 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6ea2 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6ea2:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6ea4:	b538      	push	{r3, r4, r5, lr}
   b6ea6:	460c      	mov	r4, r1
   b6ea8:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6eaa:	d801      	bhi.n	b6eb0 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6eac:	2000      	movs	r0, #0
}
   b6eae:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6eb0:	69c3      	ldr	r3, [r0, #28]
   b6eb2:	428b      	cmp	r3, r1
   b6eb4:	d3fa      	bcc.n	b6eac <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6eb6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6eb8:	2b20      	cmp	r3, #32
   b6eba:	d10f      	bne.n	b6edc <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6ebc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6ebe:	2203      	movs	r2, #3
   b6ec0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6ec4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6ec8:	f7ff ff8b 	bl	b6de2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6ecc:	2800      	cmp	r0, #0
   b6ece:	d0ed      	beq.n	b6eac <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6ed0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6ed4:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6ed8:	2001      	movs	r0, #1
   b6eda:	e7e8      	b.n	b6eae <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6edc:	2b10      	cmp	r3, #16
   b6ede:	d1e5      	bne.n	b6eac <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6ee0:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6ee4:	6981      	ldr	r1, [r0, #24]
   b6ee6:	2203      	movs	r2, #3
   b6ee8:	4419      	add	r1, r3
   b6eea:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6eee:	f7ff ff78 	bl	b6de2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6ef2:	2800      	cmp	r0, #0
   b6ef4:	d0da      	beq.n	b6eac <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6ef6:	b2e4      	uxtb	r4, r4
   b6ef8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6efc:	e7ec      	b.n	b6ed8 <_ZN9FatVolume6fatPutEmm+0x36>

000b6efe <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6efe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6f02:	68c4      	ldr	r4, [r0, #12]
   b6f04:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6f06:	4605      	mov	r5, r0
   b6f08:	460e      	mov	r6, r1
   b6f0a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6f0c:	d301      	bcc.n	b6f12 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6f0e:	2701      	movs	r7, #1
   b6f10:	e001      	b.n	b6f16 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6f12:	460c      	mov	r4, r1
    setStart = false;
   b6f14:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6f16:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6f18:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6f1a:	42a3      	cmp	r3, r4
   b6f1c:	d202      	bcs.n	b6f24 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6f1e:	b9c7      	cbnz	r7, b6f52 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6f20:	68ec      	ldr	r4, [r5, #12]
   b6f22:	e7f4      	b.n	b6f0e <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6f24:	42a6      	cmp	r6, r4
   b6f26:	d014      	beq.n	b6f52 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6f28:	aa01      	add	r2, sp, #4
   b6f2a:	4621      	mov	r1, r4
   b6f2c:	4628      	mov	r0, r5
   b6f2e:	f7ff ff81 	bl	b6e34 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6f32:	2800      	cmp	r0, #0
   b6f34:	db0d      	blt.n	b6f52 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6f36:	d0ee      	beq.n	b6f16 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6f38:	9b01      	ldr	r3, [sp, #4]
   b6f3a:	2b00      	cmp	r3, #0
   b6f3c:	d1eb      	bne.n	b6f16 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6f3e:	b107      	cbz	r7, b6f42 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6f40:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6f42:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6f46:	4621      	mov	r1, r4
   b6f48:	4628      	mov	r0, r5
   b6f4a:	f7ff ffaa 	bl	b6ea2 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6f4e:	4607      	mov	r7, r0
   b6f50:	b920      	cbnz	r0, b6f5c <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6f52:	2700      	movs	r7, #0
}
   b6f54:	4638      	mov	r0, r7
   b6f56:	b002      	add	sp, #8
   b6f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6f5c:	b916      	cbnz	r6, b6f64 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6f5e:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6f62:	e7f7      	b.n	b6f54 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6f64:	4622      	mov	r2, r4
   b6f66:	4631      	mov	r1, r6
   b6f68:	4628      	mov	r0, r5
   b6f6a:	f7ff ff9a 	bl	b6ea2 <_ZN9FatVolume6fatPutEmm>
   b6f6e:	2800      	cmp	r0, #0
   b6f70:	d1f5      	bne.n	b6f5e <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6f72:	e7ee      	b.n	b6f52 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6f74 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f76:	4605      	mov	r5, r0
   b6f78:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6f7a:	aa01      	add	r2, sp, #4
   b6f7c:	4621      	mov	r1, r4
   b6f7e:	4628      	mov	r0, r5
   b6f80:	f7ff ff58 	bl	b6e34 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6f84:	1e06      	subs	r6, r0, #0
   b6f86:	db10      	blt.n	b6faa <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6f88:	2200      	movs	r2, #0
   b6f8a:	4621      	mov	r1, r4
   b6f8c:	4628      	mov	r0, r5
   b6f8e:	f7ff ff88 	bl	b6ea2 <_ZN9FatVolume6fatPutEmm>
   b6f92:	b150      	cbz	r0, b6faa <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6f94:	68eb      	ldr	r3, [r5, #12]
   b6f96:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6f98:	bf24      	itt	cs
   b6f9a:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b6f9e:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6fa0:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6fa2:	2e00      	cmp	r6, #0
   b6fa4:	d1e9      	bne.n	b6f7a <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6fa6:	b002      	add	sp, #8
   b6fa8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6faa:	2000      	movs	r0, #0
   b6fac:	e7fb      	b.n	b6fa6 <_ZN9FatVolume9freeChainEm+0x32>

000b6fae <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6fae:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6fb0:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6fb2:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6fb4:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b6fba:	4604      	mov	r4, r0
  m_fatType = 0;
   b6fbc:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6fbe:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6fc2:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6fc4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6fc8:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6fca:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6fce:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6fd2:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6fd6:	460d      	mov	r5, r1
   b6fd8:	b1b9      	cbz	r1, b700a <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6fda:	2904      	cmp	r1, #4
   b6fdc:	d901      	bls.n	b6fe2 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6fde:	2000      	movs	r0, #0
}
   b6fe0:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6fe2:	4611      	mov	r1, r2
   b6fe4:	4630      	mov	r0, r6
   b6fe6:	f7ff fefc 	bl	b6de2 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6fea:	2800      	cmp	r0, #0
   b6fec:	d0f7      	beq.n	b6fde <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6fee:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6ff2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6ff6:	065b      	lsls	r3, r3, #25
   b6ff8:	d1f1      	bne.n	b6fde <_ZN9FatVolume4initEh+0x30>
   b6ffa:	f105 011b 	add.w	r1, r5, #27
   b6ffe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7002:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7006:	2d00      	cmp	r5, #0
   b7008:	d0e9      	beq.n	b6fde <_ZN9FatVolume4initEh+0x30>
   b700a:	2200      	movs	r2, #0
   b700c:	4629      	mov	r1, r5
   b700e:	4630      	mov	r0, r6
   b7010:	f7ff fee7 	bl	b6de2 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7014:	2800      	cmp	r0, #0
   b7016:	d0e2      	beq.n	b6fde <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7018:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7020:	d1dd      	bne.n	b6fde <_ZN9FatVolume4initEh+0x30>
   b7022:	7c03      	ldrb	r3, [r0, #16]
   b7024:	2b02      	cmp	r3, #2
   b7026:	d1da      	bne.n	b6fde <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7028:	89c3      	ldrh	r3, [r0, #14]
   b702a:	2b00      	cmp	r3, #0
   b702c:	d0d7      	beq.n	b6fde <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b702e:	7b41      	ldrb	r1, [r0, #13]
   b7030:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7032:	1e4b      	subs	r3, r1, #1
   b7034:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7036:	2300      	movs	r3, #0
   b7038:	71a3      	strb	r3, [r4, #6]
   b703a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b703c:	2301      	movs	r3, #1
   b703e:	4299      	cmp	r1, r3
   b7040:	d007      	beq.n	b7052 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7042:	3e01      	subs	r6, #1
   b7044:	d0cb      	beq.n	b6fde <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7046:	79a2      	ldrb	r2, [r4, #6]
   b7048:	005b      	lsls	r3, r3, #1
   b704a:	3201      	adds	r2, #1
   b704c:	b2db      	uxtb	r3, r3
   b704e:	71a2      	strb	r2, [r4, #6]
   b7050:	e7f5      	b.n	b703e <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7052:	8ac1      	ldrh	r1, [r0, #22]
   b7054:	b901      	cbnz	r1, b7058 <_ZN9FatVolume4initEh+0xaa>
   b7056:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7058:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b705a:	89c3      	ldrh	r3, [r0, #14]
   b705c:	442b      	add	r3, r5
   b705e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7060:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7064:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7066:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b706a:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b706c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7070:	0149      	lsls	r1, r1, #5
   b7072:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7076:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b707a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b707c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7080:	b902      	cbnz	r2, b7084 <_ZN9FatVolume4initEh+0xd6>
   b7082:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7084:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7086:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7088:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b708a:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b708c:	1c4b      	adds	r3, r1, #1
   b708e:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7090:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7094:	4299      	cmp	r1, r3
   b7096:	d802      	bhi.n	b709e <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7098:	230c      	movs	r3, #12
   b709a:	71e3      	strb	r3, [r4, #7]
   b709c:	e79f      	b.n	b6fde <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b709e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b70a2:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b70a4:	bf85      	ittet	hi
   b70a6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b70a8:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b70aa:	2310      	movls	r3, #16
    m_fatType = 32;
   b70ac:	2320      	movhi	r3, #32
   b70ae:	71e3      	strb	r3, [r4, #7]
  return true;
   b70b0:	2001      	movs	r0, #1
   b70b2:	e795      	b.n	b6fe0 <_ZN9FatVolume4initEh+0x32>

000b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b70b4:	f000 baca 	b.w	b764c <_ZN14SdSpiAltDriver4sendEh>

000b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b70b8:	f000 baad 	b.w	b7616 <_ZN14SdSpiAltDriver7receiveEv>

000b70bc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b70bc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b70be:	4e0e      	ldr	r6, [pc, #56]	; (b70f8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b70c0:	460d      	mov	r5, r1
   b70c2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b70c4:	f005 fff8 	bl	bd0b8 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b70c8:	6833      	ldr	r3, [r6, #0]
   b70ca:	1ac0      	subs	r0, r0, r3
   b70cc:	4b0b      	ldr	r3, [pc, #44]	; (b70fc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b70ce:	4298      	cmp	r0, r3
   b70d0:	d908      	bls.n	b70e4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b70d2:	f005 fff9 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b70d6:	4b0a      	ldr	r3, [pc, #40]	; (b7100 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b70d8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b70da:	f006 fa3b 	bl	bd554 <spark_process>
   b70de:	f005 ffeb 	bl	bd0b8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b70e2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b70e4:	f005 fff0 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b70e8:	b280      	uxth	r0, r0
   b70ea:	1b40      	subs	r0, r0, r5
}
   b70ec:	42a0      	cmp	r0, r4
   b70ee:	bfd4      	ite	le
   b70f0:	2000      	movle	r0, #0
   b70f2:	2001      	movgt	r0, #1
   b70f4:	bd70      	pop	{r4, r5, r6, pc}
   b70f6:	bf00      	nop
   b70f8:	2003e614 	.word	0x2003e614
   b70fc:	000186a0 	.word	0x000186a0
   b7100:	2003e728 	.word	0x2003e728

000b7104 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7104:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7106:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7108:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b710a:	b94d      	cbnz	r5, b7120 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b710c:	6840      	ldr	r0, [r0, #4]
   b710e:	f000 fa6b 	bl	b75e8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7112:	6863      	ldr	r3, [r4, #4]
   b7114:	4629      	mov	r1, r5
   b7116:	7d18      	ldrb	r0, [r3, #20]
   b7118:	f00a f90b 	bl	c1332 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b711c:	2301      	movs	r3, #1
   b711e:	7223      	strb	r3, [r4, #8]
  }
}
   b7120:	bd38      	pop	{r3, r4, r5, pc}

000b7122 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7122:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7124:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7126:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7128:	b16b      	cbz	r3, b7146 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b712a:	6843      	ldr	r3, [r0, #4]
   b712c:	2101      	movs	r1, #1
   b712e:	7d18      	ldrb	r0, [r3, #20]
   b7130:	f00a f8ff 	bl	c1332 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7134:	6860      	ldr	r0, [r4, #4]
   b7136:	21ff      	movs	r1, #255	; 0xff
   b7138:	f7ff ffbc 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b713c:	6860      	ldr	r0, [r4, #4]
   b713e:	f000 fa67 	bl	b7610 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7142:	2300      	movs	r3, #0
   b7144:	7223      	strb	r3, [r4, #8]
  }
}
   b7146:	bd10      	pop	{r4, pc}

000b7148 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b714a:	4604      	mov	r4, r0
   b714c:	460d      	mov	r5, r1
   b714e:	4616      	mov	r6, r2
   b7150:	f005 ffba 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7154:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7156:	6860      	ldr	r0, [r4, #4]
   b7158:	f7ff ffae 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b715c:	28ff      	cmp	r0, #255	; 0xff
   b715e:	7260      	strb	r0, [r4, #9]
   b7160:	d10e      	bne.n	b7180 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7166:	4639      	mov	r1, r7
   b7168:	4620      	mov	r0, r4
   b716a:	f7ff ffa7 	bl	b70bc <_ZN9SdSpiCard10isTimedOutEtt>
   b716e:	2800      	cmp	r0, #0
   b7170:	d0f1      	beq.n	b7156 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7172:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7174:	4620      	mov	r0, r4
   b7176:	7023      	strb	r3, [r4, #0]
   b7178:	f7ff ffd3 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b717c:	2000      	movs	r0, #0
}
   b717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7180:	28fe      	cmp	r0, #254	; 0xfe
   b7182:	d001      	beq.n	b7188 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7184:	2350      	movs	r3, #80	; 0x50
   b7186:	e7f5      	b.n	b7174 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7188:	6860      	ldr	r0, [r4, #4]
   b718a:	4632      	mov	r2, r6
   b718c:	4629      	mov	r1, r5
   b718e:	f000 fa47 	bl	b7620 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7192:	7260      	strb	r0, [r4, #9]
   b7194:	b108      	cbz	r0, b719a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7196:	2360      	movs	r3, #96	; 0x60
   b7198:	e7ec      	b.n	b7174 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b719a:	6860      	ldr	r0, [r4, #4]
   b719c:	f7ff ff8c 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b71a0:	6860      	ldr	r0, [r4, #4]
   b71a2:	f7ff ff89 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b71a6:	2001      	movs	r0, #1
   b71a8:	e7e9      	b.n	b717e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b71aa <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b71aa:	b570      	push	{r4, r5, r6, lr}
   b71ac:	4604      	mov	r4, r0
   b71ae:	460e      	mov	r6, r1
   b71b0:	f005 ff8a 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   b71b4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b71b6:	4632      	mov	r2, r6
   b71b8:	4629      	mov	r1, r5
   b71ba:	4620      	mov	r0, r4
   b71bc:	f7ff ff7e 	bl	b70bc <_ZN9SdSpiCard10isTimedOutEtt>
   b71c0:	b930      	cbnz	r0, b71d0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b71c2:	6860      	ldr	r0, [r4, #4]
   b71c4:	f7ff ff78 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b71c8:	28ff      	cmp	r0, #255	; 0xff
   b71ca:	d1f4      	bne.n	b71b6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b71cc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b71ce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b71d0:	2000      	movs	r0, #0
   b71d2:	e7fc      	b.n	b71ce <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b71d4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b71d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b71d6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b71d8:	9201      	str	r2, [sp, #4]
   b71da:	4604      	mov	r4, r0
   b71dc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b71de:	b90b      	cbnz	r3, b71e4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b71e0:	f7ff ff90 	bl	b7104 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b71e4:	b125      	cbz	r5, b71f0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b71e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b71ea:	4620      	mov	r0, r4
   b71ec:	f7ff ffdd 	bl	b71aa <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b71f0:	6860      	ldr	r0, [r4, #4]
   b71f2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b71f6:	f7ff ff5d 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b71fa:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b71fc:	af01      	add	r7, sp, #4
   b71fe:	5db9      	ldrb	r1, [r7, r6]
   b7200:	6860      	ldr	r0, [r4, #4]
   b7202:	f7ff ff57 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7206:	3e01      	subs	r6, #1
   b7208:	d2f9      	bcs.n	b71fe <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b720a:	2d00      	cmp	r5, #0
   b720c:	6860      	ldr	r0, [r4, #4]
   b720e:	bf0c      	ite	eq
   b7210:	2195      	moveq	r1, #149	; 0x95
   b7212:	2187      	movne	r1, #135	; 0x87
   b7214:	f7ff ff4e 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7218:	6860      	ldr	r0, [r4, #4]
   b721a:	f7ff ff4d 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b721e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7220:	6860      	ldr	r0, [r4, #4]
   b7222:	f7ff ff49 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7226:	0603      	lsls	r3, r0, #24
   b7228:	7260      	strb	r0, [r4, #9]
   b722a:	d503      	bpl.n	b7234 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b722c:	3d01      	subs	r5, #1
   b722e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7232:	d1f5      	bne.n	b7220 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7234:	b003      	add	sp, #12
   b7236:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7238 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7238:	b570      	push	{r4, r5, r6, lr}
   b723a:	4604      	mov	r4, r0
   b723c:	460d      	mov	r5, r1
   b723e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7240:	2137      	movs	r1, #55	; 0x37
   b7242:	2200      	movs	r2, #0
   b7244:	f7ff ffc6 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7248:	4632      	mov	r2, r6
   b724a:	4629      	mov	r1, r5
   b724c:	4620      	mov	r0, r4
  }
   b724e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7252:	f7ff bfbf 	b.w	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7258 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b725c:	2500      	movs	r5, #0
   b725e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7260:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7262:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7264:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7266:	4604      	mov	r4, r0
   b7268:	4690      	mov	r8, r2
   b726a:	461e      	mov	r6, r3
   b726c:	f005 ff2c 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7270:	4641      	mov	r1, r8
   b7272:	4607      	mov	r7, r0
   b7274:	6860      	ldr	r0, [r4, #4]
   b7276:	f000 f9bb 	bl	b75f0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b727a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b727c:	4a49      	ldr	r2, [pc, #292]	; (b73a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b727e:	721d      	strb	r5, [r3, #8]
   b7280:	2501      	movs	r5, #1
   b7282:	60da      	str	r2, [r3, #12]
   b7284:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7286:	4620      	mov	r0, r4
   b7288:	f7ff ff3c 	bl	b7104 <_ZN9SdSpiCard8spiStartEv>
   b728c:	6863      	ldr	r3, [r4, #4]
   b728e:	4629      	mov	r1, r5
   b7290:	7d18      	ldrb	r0, [r3, #20]
   b7292:	f00a f84e 	bl	c1332 <digitalWrite>
   b7296:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7298:	6860      	ldr	r0, [r4, #4]
   b729a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b729c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b729e:	f7ff ff09 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b72a2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b72a6:	d1f7      	bne.n	b7298 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b72a8:	6863      	ldr	r3, [r4, #4]
   b72aa:	4629      	mov	r1, r5
   b72ac:	7d18      	ldrb	r0, [r3, #20]
   b72ae:	f00a f840 	bl	c1332 <digitalWrite>
  }
   b72b2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b72b4:	2200      	movs	r2, #0
   b72b6:	4611      	mov	r1, r2
   b72b8:	4620      	mov	r0, r4
   b72ba:	f7ff ff8b 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b72be:	2801      	cmp	r0, #1
   b72c0:	4680      	mov	r8, r0
   b72c2:	d018      	beq.n	b72f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b72c4:	3d01      	subs	r5, #1
   b72c6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b72ca:	d107      	bne.n	b72dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b72cc:	2320      	movs	r3, #32
  spiStop();
   b72ce:	4620      	mov	r0, r4
   b72d0:	7023      	strb	r3, [r4, #0]
   b72d2:	f7ff ff26 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b72d6:	2000      	movs	r0, #0
}
   b72d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b72dc:	6860      	ldr	r0, [r4, #4]
   b72de:	21fd      	movs	r1, #253	; 0xfd
   b72e0:	f7ff fee8 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b72e4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b72e8:	6860      	ldr	r0, [r4, #4]
   b72ea:	f7ff fee5 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b72ee:	f1b8 0801 	subs.w	r8, r8, #1
   b72f2:	d1f9      	bne.n	b72e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b72f4:	e7de      	b.n	b72b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b72f6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b72fa:	2108      	movs	r1, #8
   b72fc:	4620      	mov	r0, r4
   b72fe:	f7ff ff69 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b7302:	2805      	cmp	r0, #5
   b7304:	d114      	bne.n	b7330 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7306:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b730a:	2500      	movs	r5, #0
   b730c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b730e:	462a      	mov	r2, r5
   b7310:	2129      	movs	r1, #41	; 0x29
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff ff90 	bl	b7238 <_ZN9SdSpiCard8cardAcmdEhm>
   b7318:	4602      	mov	r2, r0
   b731a:	b1d8      	cbz	r0, b7354 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b731c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7320:	4639      	mov	r1, r7
   b7322:	4620      	mov	r0, r4
   b7324:	f7ff feca 	bl	b70bc <_ZN9SdSpiCard10isTimedOutEtt>
   b7328:	2800      	cmp	r0, #0
   b732a:	d0f0      	beq.n	b730e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b732c:	2343      	movs	r3, #67	; 0x43
   b732e:	e7ce      	b.n	b72ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7330:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7332:	6860      	ldr	r0, [r4, #4]
   b7334:	f7ff fec0 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7338:	3d01      	subs	r5, #1
   b733a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b733e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7340:	d1f7      	bne.n	b7332 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7342:	28aa      	cmp	r0, #170	; 0xaa
   b7344:	d104      	bne.n	b7350 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7346:	2302      	movs	r3, #2
   b7348:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b734a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b734e:	e7dd      	b.n	b730c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7350:	2325      	movs	r3, #37	; 0x25
   b7352:	e7bc      	b.n	b72ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7354:	7aa3      	ldrb	r3, [r4, #10]
   b7356:	2b02      	cmp	r3, #2
   b7358:	d118      	bne.n	b738c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b735a:	213a      	movs	r1, #58	; 0x3a
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff ff39 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b7362:	b108      	cbz	r0, b7368 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7364:	2337      	movs	r3, #55	; 0x37
   b7366:	e7b2      	b.n	b72ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7368:	6860      	ldr	r0, [r4, #4]
   b736a:	f7ff fea5 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b736e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7372:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7374:	bf04      	itt	eq
   b7376:	2303      	moveq	r3, #3
   b7378:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b737a:	6860      	ldr	r0, [r4, #4]
   b737c:	f7ff fe9c 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7380:	6860      	ldr	r0, [r4, #4]
   b7382:	f7ff fe99 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7386:	6860      	ldr	r0, [r4, #4]
   b7388:	f7ff fe96 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b738c:	4620      	mov	r0, r4
   b738e:	f7ff fec8 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7392:	6863      	ldr	r3, [r4, #4]
   b7394:	7930      	ldrb	r0, [r6, #4]
   b7396:	68b1      	ldr	r1, [r6, #8]
   b7398:	89b2      	ldrh	r2, [r6, #12]
   b739a:	821a      	strh	r2, [r3, #16]
   b739c:	7218      	strb	r0, [r3, #8]
   b739e:	60d9      	str	r1, [r3, #12]
  return true;
   b73a0:	2001      	movs	r0, #1
   b73a2:	e799      	b.n	b72d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b73a4:	0003d090 	.word	0x0003d090

000b73a8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b73a8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b73aa:	7a83      	ldrb	r3, [r0, #10]
   b73ac:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b73ae:	bf18      	it	ne
   b73b0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b73b2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b73b4:	460a      	mov	r2, r1
   b73b6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b73b8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b73ba:	f7ff ff0b 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b73be:	b130      	cbz	r0, b73ce <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b73c0:	2330      	movs	r3, #48	; 0x30
   b73c2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b73c4:	4620      	mov	r0, r4
   b73c6:	f7ff feac 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b73ca:	2500      	movs	r5, #0
   b73cc:	e00b      	b.n	b73e6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b73ce:	4629      	mov	r1, r5
   b73d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b73d4:	4620      	mov	r0, r4
   b73d6:	f7ff feb7 	bl	b7148 <_ZN9SdSpiCard8readDataEPhj>
   b73da:	4605      	mov	r5, r0
   b73dc:	2800      	cmp	r0, #0
   b73de:	d0f1      	beq.n	b73c4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b73e0:	4620      	mov	r0, r4
   b73e2:	f7ff fe9e 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
}
   b73e6:	4628      	mov	r0, r5
   b73e8:	bd38      	pop	{r3, r4, r5, pc}

000b73ea <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b73ea:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b73ec:	7a83      	ldrb	r3, [r0, #10]
   b73ee:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b73f0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b73f2:	bf18      	it	ne
   b73f4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b73f6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b73f8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b73fa:	f7ff feeb 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b73fe:	b130      	cbz	r0, b740e <_ZN9SdSpiCard9readStartEm+0x24>
   b7400:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7402:	4620      	mov	r0, r4
   b7404:	7023      	strb	r3, [r4, #0]
   b7406:	f7ff fe8c 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b740a:	2000      	movs	r0, #0
}
   b740c:	bd10      	pop	{r4, pc}
  return true;
   b740e:	2001      	movs	r0, #1
   b7410:	e7fc      	b.n	b740c <_ZN9SdSpiCard9readStartEm+0x22>

000b7412 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7412:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7414:	2200      	movs	r2, #0
   b7416:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7418:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b741a:	f7ff fedb 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b741e:	b130      	cbz	r0, b742e <_ZN9SdSpiCard8readStopEv+0x1c>
   b7420:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7422:	4620      	mov	r0, r4
   b7424:	7023      	strb	r3, [r4, #0]
   b7426:	f7ff fe7c 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b742a:	2000      	movs	r0, #0
}
   b742c:	bd10      	pop	{r4, pc}
  spiStop();
   b742e:	4620      	mov	r0, r4
   b7430:	f7ff fe77 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7434:	2001      	movs	r0, #1
   b7436:	e7f9      	b.n	b742c <_ZN9SdSpiCard8readStopEv+0x1a>

000b7438 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b743a:	4604      	mov	r4, r0
   b743c:	4616      	mov	r6, r2
   b743e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7440:	f7ff ffd3 	bl	b73ea <_ZN9SdSpiCard9readStartEm>
   b7444:	b168      	cbz	r0, b7462 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7446:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7448:	b2ab      	uxth	r3, r5
   b744a:	429f      	cmp	r7, r3
   b744c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7450:	d909      	bls.n	b7466 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7452:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7456:	4620      	mov	r0, r4
   b7458:	f7ff fe76 	bl	b7148 <_ZN9SdSpiCard8readDataEPhj>
   b745c:	3501      	adds	r5, #1
   b745e:	2800      	cmp	r0, #0
   b7460:	d1f2      	bne.n	b7448 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7462:	2000      	movs	r0, #0
   b7464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7466:	4620      	mov	r0, r4
}
   b7468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b746c:	f7ff bfd1 	b.w	b7412 <_ZN9SdSpiCard8readStopEv>

000b7470 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7470:	b538      	push	{r3, r4, r5, lr}
   b7472:	4604      	mov	r4, r0
   b7474:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7476:	6840      	ldr	r0, [r0, #4]
   b7478:	f7ff fe1c 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b747c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7480:	6860      	ldr	r0, [r4, #4]
   b7482:	4629      	mov	r1, r5
   b7484:	f000 f8e6 	bl	b7654 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7488:	6860      	ldr	r0, [r4, #4]
   b748a:	21ff      	movs	r1, #255	; 0xff
   b748c:	f7ff fe12 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7490:	6860      	ldr	r0, [r4, #4]
   b7492:	21ff      	movs	r1, #255	; 0xff
   b7494:	f7ff fe0e 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7498:	6860      	ldr	r0, [r4, #4]
   b749a:	f7ff fe0d 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b749e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b74a0:	f000 001f 	and.w	r0, r0, #31
   b74a4:	2805      	cmp	r0, #5
   b74a6:	d006      	beq.n	b74b6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b74a8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b74aa:	4620      	mov	r0, r4
   b74ac:	7023      	strb	r3, [r4, #0]
   b74ae:	f7ff fe38 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b74b2:	2000      	movs	r0, #0
}
   b74b4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b74b6:	2001      	movs	r0, #1
   b74b8:	e7fc      	b.n	b74b4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b74ba <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b74ba:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b74bc:	7a83      	ldrb	r3, [r0, #10]
   b74be:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b74c0:	bf18      	it	ne
   b74c2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b74c4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b74c6:	460a      	mov	r2, r1
   b74c8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b74ca:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b74cc:	f7ff fe82 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b74d0:	4606      	mov	r6, r0
   b74d2:	b130      	cbz	r0, b74e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b74d4:	2332      	movs	r3, #50	; 0x32
   b74d6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b74d8:	4620      	mov	r0, r4
   b74da:	f7ff fe22 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b74de:	2500      	movs	r5, #0
   b74e0:	e01f      	b.n	b7522 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b74e2:	462a      	mov	r2, r5
   b74e4:	21fe      	movs	r1, #254	; 0xfe
   b74e6:	4620      	mov	r0, r4
   b74e8:	f7ff ffc2 	bl	b7470 <_ZN9SdSpiCard9writeDataEhPKh>
   b74ec:	2800      	cmp	r0, #0
   b74ee:	d0f3      	beq.n	b74d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b74f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b74f4:	4620      	mov	r0, r4
   b74f6:	f7ff fe58 	bl	b71aa <_ZN9SdSpiCard11waitNotBusyEt>
   b74fa:	4605      	mov	r5, r0
   b74fc:	b908      	cbnz	r0, b7502 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b74fe:	235a      	movs	r3, #90	; 0x5a
   b7500:	e7e9      	b.n	b74d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7502:	4632      	mov	r2, r6
   b7504:	210d      	movs	r1, #13
   b7506:	4620      	mov	r0, r4
   b7508:	f7ff fe64 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b750c:	b108      	cbz	r0, b7512 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b750e:	2329      	movs	r3, #41	; 0x29
   b7510:	e7e1      	b.n	b74d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7512:	6860      	ldr	r0, [r4, #4]
   b7514:	f7ff fdd0 	bl	b70b8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7518:	2800      	cmp	r0, #0
   b751a:	d1f8      	bne.n	b750e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff fe00 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
}
   b7522:	4628      	mov	r0, r5
   b7524:	bd70      	pop	{r4, r5, r6, pc}

000b7526 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7526:	b513      	push	{r0, r1, r4, lr}
   b7528:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b752a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b752e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7530:	f7ff fe3b 	bl	b71aa <_ZN9SdSpiCard11waitNotBusyEt>
   b7534:	9a01      	ldr	r2, [sp, #4]
   b7536:	b930      	cbnz	r0, b7546 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7538:	235b      	movs	r3, #91	; 0x5b
   b753a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff fdf0 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7542:	2000      	movs	r0, #0
   b7544:	e005      	b.n	b7552 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7546:	21fc      	movs	r1, #252	; 0xfc
   b7548:	4620      	mov	r0, r4
   b754a:	f7ff ff91 	bl	b7470 <_ZN9SdSpiCard9writeDataEhPKh>
   b754e:	2800      	cmp	r0, #0
   b7550:	d0f4      	beq.n	b753c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7552:	b002      	add	sp, #8
   b7554:	bd10      	pop	{r4, pc}

000b7556 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7556:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7558:	7a83      	ldrb	r3, [r0, #10]
   b755a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b755c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b755e:	bf18      	it	ne
   b7560:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7562:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7564:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7566:	f7ff fe35 	bl	b71d4 <_ZN9SdSpiCard11cardCommandEhm>
   b756a:	b130      	cbz	r0, b757a <_ZN9SdSpiCard10writeStartEm+0x24>
   b756c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b756e:	4620      	mov	r0, r4
   b7570:	7023      	strb	r3, [r4, #0]
   b7572:	f7ff fdd6 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7576:	2000      	movs	r0, #0
}
   b7578:	bd10      	pop	{r4, pc}
  return true;
   b757a:	2001      	movs	r0, #1
   b757c:	e7fc      	b.n	b7578 <_ZN9SdSpiCard10writeStartEm+0x22>

000b757e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b757e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7580:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7584:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7586:	f7ff fe10 	bl	b71aa <_ZN9SdSpiCard11waitNotBusyEt>
   b758a:	4605      	mov	r5, r0
   b758c:	b930      	cbnz	r0, b759c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b758e:	2356      	movs	r3, #86	; 0x56
   b7590:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7592:	4620      	mov	r0, r4
   b7594:	f7ff fdc5 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7598:	4628      	mov	r0, r5
   b759a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b759c:	6860      	ldr	r0, [r4, #4]
   b759e:	21fd      	movs	r1, #253	; 0xfd
   b75a0:	f7ff fd88 	bl	b70b4 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b75a4:	e7f5      	b.n	b7592 <_ZN9SdSpiCard9writeStopEv+0x14>

000b75a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b75a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75a8:	4604      	mov	r4, r0
   b75aa:	4616      	mov	r6, r2
   b75ac:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b75ae:	f7ff ffd2 	bl	b7556 <_ZN9SdSpiCard10writeStartEm>
   b75b2:	b170      	cbz	r0, b75d2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b75b4:	2500      	movs	r5, #0
   b75b6:	42bd      	cmp	r5, r7
   b75b8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b75bc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b75be:	d004      	beq.n	b75ca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b75c0:	f7ff ffb1 	bl	b7526 <_ZN9SdSpiCard9writeDataEPKh>
   b75c4:	b128      	cbz	r0, b75d2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b75c6:	3501      	adds	r5, #1
   b75c8:	e7f5      	b.n	b75b6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b75ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b75ce:	f7ff bfd6 	b.w	b757e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b75d2:	4620      	mov	r0, r4
   b75d4:	f7ff fda5 	bl	b7122 <_ZN9SdSpiCard7spiStopEv>
}
   b75d8:	2000      	movs	r0, #0
   b75da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75dc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b75dc:	4b01      	ldr	r3, [pc, #4]	; (b75e4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b75de:	2201      	movs	r2, #1
   b75e0:	701a      	strb	r2, [r3, #0]
}
   b75e2:	4770      	bx	lr
   b75e4:	2003e618 	.word	0x2003e618

000b75e8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b75e8:	1d01      	adds	r1, r0, #4
   b75ea:	6800      	ldr	r0, [r0, #0]
   b75ec:	f009 ba16 	b.w	c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b75f0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b75f0:	b510      	push	{r4, lr}
   b75f2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b75f4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b75f6:	6800      	ldr	r0, [r0, #0]
   b75f8:	f009 f9cb 	bl	c0992 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b75fc:	7d20      	ldrb	r0, [r4, #20]
   b75fe:	2101      	movs	r1, #1
   b7600:	f009 fe86 	bl	c1310 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7604:	7d20      	ldrb	r0, [r4, #20]
   b7606:	2101      	movs	r1, #1
}
   b7608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b760c:	f009 be91 	b.w	c1332 <digitalWrite>

000b7610 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7610:	6800      	ldr	r0, [r0, #0]
   b7612:	f009 b9e9 	b.w	c09e8 <_ZN8SPIClass14endTransactionEv>

000b7616 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7616:	6800      	ldr	r0, [r0, #0]
   b7618:	21ff      	movs	r1, #255	; 0xff
   b761a:	f009 ba9f 	b.w	c0b5c <_ZN8SPIClass8transferEh>
	...

000b7620 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7620:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7622:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7624:	4a07      	ldr	r2, [pc, #28]	; (b7644 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7626:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7628:	2500      	movs	r5, #0
   b762a:	4c07      	ldr	r4, [pc, #28]	; (b7648 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b762c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b762e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7630:	460a      	mov	r2, r1
   b7632:	4629      	mov	r1, r5
   b7634:	f009 fa98 	bl	c0b68 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7638:	7823      	ldrb	r3, [r4, #0]
   b763a:	2b00      	cmp	r3, #0
   b763c:	d0fc      	beq.n	b7638 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b763e:	2000      	movs	r0, #0
   b7640:	b003      	add	sp, #12
   b7642:	bd30      	pop	{r4, r5, pc}
   b7644:	000b75dd 	.word	0x000b75dd
   b7648:	2003e618 	.word	0x2003e618

000b764c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b764c:	6800      	ldr	r0, [r0, #0]
   b764e:	f009 ba85 	b.w	c0b5c <_ZN8SPIClass8transferEh>
	...

000b7654 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7654:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7656:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7658:	4a06      	ldr	r2, [pc, #24]	; (b7674 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b765a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b765c:	2500      	movs	r5, #0
   b765e:	4c06      	ldr	r4, [pc, #24]	; (b7678 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7660:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7662:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7664:	462a      	mov	r2, r5
   b7666:	f009 fa7f 	bl	c0b68 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b766a:	7823      	ldrb	r3, [r4, #0]
   b766c:	2b00      	cmp	r3, #0
   b766e:	d0fc      	beq.n	b766a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7670:	b003      	add	sp, #12
   b7672:	bd30      	pop	{r4, r5, pc}
   b7674:	000b75dd 	.word	0x000b75dd
   b7678:	2003e618 	.word	0x2003e618

000b767c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b767c:	4770      	bx	lr

000b767e <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b767e:	4770      	bx	lr

000b7680 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b7680:	b538      	push	{r3, r4, r5, lr}
   b7682:	460c      	mov	r4, r1
   b7684:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7686:	2220      	movs	r2, #32
   b7688:	2100      	movs	r1, #0
   b768a:	f104 0008 	add.w	r0, r4, #8
   b768e:	f00a fd6f 	bl	c2170 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b7692:	4909      	ldr	r1, [pc, #36]	; (b76b8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7694:	220b      	movs	r2, #11
   b7696:	4620      	mov	r0, r4
   b7698:	f00a fe24 	bl	c22e4 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b769c:	2301      	movs	r3, #1
   b769e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b76a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b76a2:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b76a4:	2302      	movs	r3, #2
   b76a6:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b76a8:	4b04      	ldr	r3, [pc, #16]	; (b76bc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b76aa:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b76ac:	4b04      	ldr	r3, [pc, #16]	; (b76c0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b76ae:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b76b0:	4b04      	ldr	r3, [pc, #16]	; (b76c4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b76b2:	6223      	str	r3, [r4, #32]
}
   b76b4:	bd38      	pop	{r3, r4, r5, pc}
   b76b6:	bf00      	nop
   b76b8:	000c49f8 	.word	0x000c49f8
   b76bc:	c4c80000 	.word	0xc4c80000
   b76c0:	44c80000 	.word	0x44c80000
   b76c4:	3c75c28f 	.word	0x3c75c28f

000b76c8 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b76c8:	b510      	push	{r4, lr}
   b76ca:	2128      	movs	r1, #40	; 0x28
   b76cc:	4604      	mov	r4, r0
   b76ce:	f7fc fce8 	bl	b40a2 <_ZdlPvj>
   b76d2:	4620      	mov	r0, r4
   b76d4:	bd10      	pop	{r4, pc}
	...

000b76d8 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b76d8:	4a03      	ldr	r2, [pc, #12]	; (b76e8 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b76da:	6002      	str	r2, [r0, #0]
   b76dc:	2200      	movs	r2, #0
   b76de:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b76e2:	7602      	strb	r2, [r0, #24]
   b76e4:	4770      	bx	lr
   b76e6:	bf00      	nop
   b76e8:	000c4a18 	.word	0x000c4a18

000b76ec <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b76ec:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b76ee:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b76f0:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b76f2:	2200      	movs	r2, #0
   b76f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b76f8:	2506      	movs	r5, #6
   b76fa:	2228      	movs	r2, #40	; 0x28
   b76fc:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b7700:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7702:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7706:	a806      	add	r0, sp, #24
   b7708:	f005 f91a 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b770c:	462a      	mov	r2, r5
   b770e:	a904      	add	r1, sp, #16
   b7710:	a806      	add	r0, sp, #24
   b7712:	f005 f993 	bl	bca3c <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b7716:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b7718:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b771c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b7720:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b7724:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b7726:	2d03      	cmp	r5, #3
   b7728:	bf98      	it	ls
   b772a:	4812      	ldrls	r0, [pc, #72]	; (b7774 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b772c:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b772e:	ee07 1a10 	vmov	s14, r1
   b7732:	bf9c      	itt	ls
   b7734:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b7738:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b773c:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b773e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b7742:	bf88      	it	hi
   b7744:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b7748:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b774c:	ee07 2a10 	vmov	s14, r2
   b7750:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7754:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7758:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b775c:	ee07 3a10 	vmov	s14, r3
   b7760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7764:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7768:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b776c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b7770:	b00d      	add	sp, #52	; 0x34
   b7772:	bd30      	pop	{r4, r5, pc}
   b7774:	000c4a00 	.word	0x000c4a00

000b7778 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7778:	b538      	push	{r3, r4, r5, lr}
   b777a:	460c      	mov	r4, r1
   b777c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b777e:	2220      	movs	r2, #32
   b7780:	2100      	movs	r1, #0
   b7782:	1d20      	adds	r0, r4, #4
   b7784:	f00a fcf4 	bl	c2170 <memset>
  event->version = sizeof(sensors_event_t);
   b7788:	2324      	movs	r3, #36	; 0x24
   b778a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b778c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b778e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7790:	2302      	movs	r3, #2
   b7792:	60a3      	str	r3, [r4, #8]
   b7794:	f005 fc98 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b7798:	6120      	str	r0, [r4, #16]
  read();
   b779a:	4628      	mov	r0, r5
   b779c:	f7ff ffa6 	bl	b76ec <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b77a0:	edd5 7a03 	vldr	s15, [r5, #12]
   b77a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; b77cc <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b77a8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b77ac:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b77ae:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b77b2:	edd5 7a04 	vldr	s15, [r5, #16]
   b77b6:	ee67 7a87 	vmul.f32	s15, s15, s14
   b77ba:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b77be:	edd5 7a05 	vldr	s15, [r5, #20]
   b77c2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b77c6:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b77ca:	bd38      	pop	{r3, r4, r5, pc}
   b77cc:	42c80000 	.word	0x42c80000

000b77d0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b77d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b77d2:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b77d4:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b77d6:	2700      	movs	r7, #0
   b77d8:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b77dc:	2320      	movs	r3, #32
   b77de:	9300      	str	r3, [sp, #0]
   b77e0:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b77e2:	460e      	mov	r6, r1
   b77e4:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b77e6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b77ea:	462b      	mov	r3, r5
   b77ec:	a808      	add	r0, sp, #32
   b77ee:	f005 f8a7 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b77f2:	2305      	movs	r3, #5
   b77f4:	2202      	movs	r2, #2
   b77f6:	a908      	add	r1, sp, #32
   b77f8:	a804      	add	r0, sp, #16
   b77fa:	f005 f97d 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b77fe:	4631      	mov	r1, r6
   b7800:	a804      	add	r0, sp, #16
   b7802:	f005 f98b 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b7806:	2323      	movs	r3, #35	; 0x23
   b7808:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b780c:	9300      	str	r3, [sp, #0]
   b780e:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b7812:	462b      	mov	r3, r5
   b7814:	9501      	str	r5, [sp, #4]
   b7816:	a80e      	add	r0, sp, #56	; 0x38
   b7818:	f005 f892 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b781c:	2302      	movs	r3, #2
   b781e:	461a      	mov	r2, r3
   b7820:	a90e      	add	r1, sp, #56	; 0x38
   b7822:	a806      	add	r0, sp, #24
   b7824:	f005 f968 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b7828:	4631      	mov	r1, r6
   b782a:	a806      	add	r0, sp, #24
   b782c:	f005 f976 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7830:	b015      	add	sp, #84	; 0x54
   b7832:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7834 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7834:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7836:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7838:	b08c      	sub	sp, #48	; 0x30
   b783a:	4606      	mov	r6, r0
   b783c:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b783e:	d103      	bne.n	b7848 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7840:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7842:	f7ff ffc5 	bl	b77d0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b7846:	e009      	b.n	b785c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b7848:	2903      	cmp	r1, #3
   b784a:	d003      	beq.n	b7854 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b784c:	2905      	cmp	r1, #5
   b784e:	d103      	bne.n	b7858 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b7850:	2101      	movs	r1, #1
   b7852:	e7f6      	b.n	b7842 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7854:	2102      	movs	r1, #2
   b7856:	e7f4      	b.n	b7842 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7858:	2907      	cmp	r1, #7
   b785a:	d01b      	beq.n	b7894 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b785c:	200a      	movs	r0, #10
   b785e:	f005 ff75 	bl	bd74c <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7862:	2501      	movs	r5, #1
   b7864:	2300      	movs	r3, #0
   b7866:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b786a:	2320      	movs	r3, #32
   b786c:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b7870:	9300      	str	r3, [sp, #0]
   b7872:	9501      	str	r5, [sp, #4]
   b7874:	462b      	mov	r3, r5
   b7876:	a806      	add	r0, sp, #24
   b7878:	f005 f862 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b787c:	462b      	mov	r3, r5
   b787e:	2204      	movs	r2, #4
   b7880:	a906      	add	r1, sp, #24
   b7882:	a804      	add	r0, sp, #16
   b7884:	f005 f938 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7888:	4621      	mov	r1, r4
   b788a:	a804      	add	r0, sp, #16
   b788c:	f005 f946 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7890:	b00c      	add	sp, #48	; 0x30
   b7892:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7894:	2100      	movs	r1, #0
   b7896:	e7d4      	b.n	b7842 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b7898 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7898:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b789a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b789c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b789e:	2500      	movs	r5, #0
   b78a0:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b78a4:	2222      	movs	r2, #34	; 0x22
   b78a6:	9301      	str	r3, [sp, #4]
   b78a8:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b78aa:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b78ac:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78b0:	a806      	add	r0, sp, #24
   b78b2:	f005 f845 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b78b6:	462b      	mov	r3, r5
   b78b8:	2202      	movs	r2, #2
   b78ba:	a906      	add	r1, sp, #24
   b78bc:	a804      	add	r0, sp, #16
   b78be:	f005 f91b 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b78c2:	4621      	mov	r1, r4
   b78c4:	a804      	add	r0, sp, #16
   b78c6:	f005 f929 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b78ca:	b00d      	add	sp, #52	; 0x34
   b78cc:	bd30      	pop	{r4, r5, pc}

000b78ce <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b78ce:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b78d0:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b78d2:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b78d4:	2200      	movs	r2, #0
   b78d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b78da:	2221      	movs	r2, #33	; 0x21
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b78e0:	460d      	mov	r5, r1
   b78e2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b78e4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78e8:	a806      	add	r0, sp, #24
   b78ea:	f005 f829 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b78ee:	2305      	movs	r3, #5
   b78f0:	2202      	movs	r2, #2
   b78f2:	a906      	add	r1, sp, #24
   b78f4:	a804      	add	r0, sp, #16
   b78f6:	f005 f8ff 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b78fa:	4629      	mov	r1, r5
   b78fc:	a804      	add	r0, sp, #16
   b78fe:	f005 f90d 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b7902:	7625      	strb	r5, [r4, #24]
}
   b7904:	b00d      	add	sp, #52	; 0x34
   b7906:	bd30      	pop	{r4, r5, pc}

000b7908 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7908:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b790a:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b790c:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b790e:	2200      	movs	r2, #0
   b7910:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7914:	2221      	movs	r2, #33	; 0x21
   b7916:	9301      	str	r3, [sp, #4]
   b7918:	9200      	str	r2, [sp, #0]
   b791a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b791e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7920:	a806      	add	r0, sp, #24
   b7922:	f005 f80d 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7926:	2305      	movs	r3, #5
   b7928:	2202      	movs	r2, #2
   b792a:	a906      	add	r1, sp, #24
   b792c:	a804      	add	r0, sp, #16
   b792e:	f005 f8e3 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b7932:	a804      	add	r0, sp, #16
   b7934:	f005 f8e5 	bl	bcb02 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7938:	b2c0      	uxtb	r0, r0
   b793a:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b793c:	b00c      	add	sp, #48	; 0x30
   b793e:	bd10      	pop	{r4, pc}

000b7940 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b7940:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7942:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7944:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7946:	2501      	movs	r5, #1
   b7948:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b794c:	2321      	movs	r3, #33	; 0x21
   b794e:	9300      	str	r3, [sp, #0]
   b7950:	9501      	str	r5, [sp, #4]
   b7952:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7956:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7958:	462b      	mov	r3, r5
   b795a:	a806      	add	r0, sp, #24
   b795c:	f004 fff0 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b7960:	2302      	movs	r3, #2
   b7962:	462a      	mov	r2, r5
   b7964:	a906      	add	r1, sp, #24
   b7966:	a804      	add	r0, sp, #16
   b7968:	f005 f8c6 	bl	bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b796c:	4629      	mov	r1, r5
   b796e:	a804      	add	r0, sp, #16
   b7970:	f005 f8d4 	bl	bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7974:	200a      	movs	r0, #10
   b7976:	f005 fee9 	bl	bd74c <delay>
  getRange();
   b797a:	4620      	mov	r0, r4
   b797c:	f7ff ffc4 	bl	b7908 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b7980:	b00d      	add	sp, #52	; 0x34
   b7982:	bd30      	pop	{r4, r5, pc}

000b7984 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7984:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7986:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7988:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b798a:	2500      	movs	r5, #0
   b798c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b7990:	230f      	movs	r3, #15
   b7992:	9300      	str	r3, [sp, #0]
   b7994:	9601      	str	r6, [sp, #4]
   b7996:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b799a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b799c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b799e:	a804      	add	r0, sp, #16
   b79a0:	f004 ffce 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b79a4:	a804      	add	r0, sp, #16
   b79a6:	f005 f88b 	bl	bcac0 <_ZN23Adafruit_BusIO_Register4readEv>
   b79aa:	283d      	cmp	r0, #61	; 0x3d
   b79ac:	d115      	bne.n	b79da <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b79ae:	4620      	mov	r0, r4
   b79b0:	f7ff ffc6 	bl	b7940 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b79b4:	2103      	movs	r1, #3
   b79b6:	4620      	mov	r0, r4
   b79b8:	f7ff ff0a 	bl	b77d0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b79bc:	4631      	mov	r1, r6
   b79be:	4620      	mov	r0, r4
   b79c0:	f7ff ff38 	bl	b7834 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b79c4:	4629      	mov	r1, r5
   b79c6:	4620      	mov	r0, r4
   b79c8:	f7ff ff81 	bl	b78ce <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b79cc:	4620      	mov	r0, r4
   b79ce:	4629      	mov	r1, r5
   b79d0:	f7ff ff62 	bl	b7898 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b79d4:	4630      	mov	r0, r6
}
   b79d6:	b00a      	add	sp, #40	; 0x28
   b79d8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b79da:	4628      	mov	r0, r5
   b79dc:	e7fb      	b.n	b79d6 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b79de <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b79de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b79e0:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b79e2:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b79e4:	b95b      	cbnz	r3, b79fe <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b79e6:	2010      	movs	r0, #16
   b79e8:	e9cd 1200 	strd	r1, r2, [sp]
   b79ec:	f7fc fb53 	bl	b4096 <_Znwj>
   b79f0:	4605      	mov	r5, r0
   b79f2:	b118      	cbz	r0, b79fc <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b79f4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b79f8:	f005 f8a9 	bl	bcb4e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b79fc:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b79fe:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b7a00:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b7a02:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b7a04:	2101      	movs	r1, #1
   b7a06:	f005 f8be 	bl	bcb86 <_ZN18Adafruit_I2CDevice5beginEb>
   b7a0a:	b128      	cbz	r0, b7a18 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b7a0c:	4620      	mov	r0, r4
}
   b7a0e:	b003      	add	sp, #12
   b7a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b7a14:	f7ff bfb6 	b.w	b7984 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b7a18:	b003      	add	sp, #12
   b7a1a:	bd30      	pop	{r4, r5, pc}

000b7a1c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7a1c:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b7a1e:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7a20:	b08b      	sub	sp, #44	; 0x2c
   b7a22:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b7a24:	2500      	movs	r5, #0
   b7a26:	2232      	movs	r2, #50	; 0x32
   b7a28:	2102      	movs	r1, #2
   b7a2a:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7a2e:	e9cd 2100 	strd	r2, r1, [sp]
   b7a32:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a36:	a804      	add	r0, sp, #16
   b7a38:	f004 ff82 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b7a3c:	462a      	mov	r2, r5
   b7a3e:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b7a42:	a804      	add	r0, sp, #16
   b7a44:	f004 ffdc 	bl	bca00 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7a48:	b00b      	add	sp, #44	; 0x2c
   b7a4a:	bd30      	pop	{r4, r5, pc}

000b7a4c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b7a4c:	b530      	push	{r4, r5, lr}
   b7a4e:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7a50:	2500      	movs	r5, #0
  value |= latch << 1;
   b7a52:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b7a56:	0064      	lsls	r4, r4, #1
   b7a58:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b7a5c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b7a60:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b7a64:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b7a68:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b7a6c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7a70:	2301      	movs	r3, #1
  value |= latch << 1;
   b7a72:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7a76:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b7a7a:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b7a7c:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7a7e:	2230      	movs	r2, #48	; 0x30
   b7a80:	9301      	str	r3, [sp, #4]
   b7a82:	9200      	str	r2, [sp, #0]
   b7a84:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a88:	a804      	add	r0, sp, #16
   b7a8a:	f004 ff59 	bl	bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b7a8e:	462a      	mov	r2, r5
   b7a90:	4621      	mov	r1, r4
   b7a92:	a804      	add	r0, sp, #16
   b7a94:	f004 ffb4 	bl	bca00 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7a98:	b00b      	add	sp, #44	; 0x2c
   b7a9a:	bd30      	pop	{r4, r5, pc}

000b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7a9c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7a9e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7aa0:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7aa2:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7aa4:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7aa6:	041b      	lsls	r3, r3, #16
   b7aa8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7aac:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7aae:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7ab0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7ab4:	bd10      	pop	{r4, pc}

000b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7ab6:	1843      	adds	r3, r0, r1
   b7ab8:	5c40      	ldrb	r0, [r0, r1]
   b7aba:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7abc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7ac0:	4770      	bx	lr

000b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7ac2:	b410      	push	{r4}
    if (base == 0) {
   b7ac4:	b92a      	cbnz	r2, b7ad2 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b7ac6:	6802      	ldr	r2, [r0, #0]
    }
}
   b7ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7acc:	6892      	ldr	r2, [r2, #8]
   b7ace:	b2c9      	uxtb	r1, r1
   b7ad0:	4710      	bx	r2
}
   b7ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b7ad6:	b2d2      	uxtb	r2, r2
   b7ad8:	f008 be7d 	b.w	c07d6 <_ZN5Print11printNumberEmh>

000b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7adc:	b912      	cbnz	r2, b7ae4 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7ade:	6803      	ldr	r3, [r0, #0]
   b7ae0:	689b      	ldr	r3, [r3, #8]
   b7ae2:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7ae4:	b2d2      	uxtb	r2, r2
   b7ae6:	f008 be76 	b.w	c07d6 <_ZN5Print11printNumberEmh>

000b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b7aea:	b510      	push	{r4, lr}
   b7aec:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7aee:	f7ff fff5 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7af2:	4620      	mov	r0, r4
    }
   b7af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7af8:	f008 be55 	b.w	c07a6 <_ZN5Print7printlnEv>

000b7afc <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7afc:	6803      	ldr	r3, [r0, #0]
   b7afe:	b2c9      	uxtb	r1, r1
   b7b00:	689b      	ldr	r3, [r3, #8]
   b7b02:	4718      	bx	r3

000b7b04 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7b08:	8002      	strh	r2, [r0, #0]
   b7b0a:	2142      	movs	r1, #66	; 0x42
   b7b0c:	2200      	movs	r2, #0
   b7b0e:	b510      	push	{r4, lr}
   b7b10:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7b14:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7b18:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7b1c:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7b20:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7b24:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7b28:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7b2c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7b30:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7b34:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7b38:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7b3c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7b40:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7b44:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7b48:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7b4c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7b50:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7b54:	2180      	movs	r1, #128	; 0x80
   b7b56:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7b5a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7b5e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7b62:	4925      	ldr	r1, [pc, #148]	; (b7bf8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7b64:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7b68:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7b6c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7b70:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7b74:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7b78:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7b7c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7b80:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7b84:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7b88:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7b8c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7b90:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7b94:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7b98:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7b9c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7ba0:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7ba4:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7ba8:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7bac:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7bb0:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7bb4:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7bb8:	4910      	ldr	r1, [pc, #64]	; (b7bfc <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7bba:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7bbe:	f640 1164 	movw	r1, #2404	; 0x964
   b7bc2:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7bc6:	2158      	movs	r1, #88	; 0x58
   b7bc8:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7bcc:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7bce:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7bd2:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7bd6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7bda:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7bde:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7be2:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7be6:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7bea:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7bee:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7bf2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7bf6:	bd10      	pop	{r4, pc}
   b7bf8:	02020000 	.word	0x02020000
   b7bfc:	64640200 	.word	0x64640200

000b7c00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c02:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7c04:	460d      	mov	r5, r1
   b7c06:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7c0a:	b9a9      	cbnz	r1, b7c38 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7c0c:	b1a8      	cbz	r0, b7c3a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7c0e:	f7fc fa46 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7c12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7c16:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7c1a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7c1e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7c22:	b913      	cbnz	r3, b7c2a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7c24:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7c28:	b123      	cbz	r3, b7c34 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7c2a:	4920      	ldr	r1, [pc, #128]	; (b7cac <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7c2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7c30:	f008 fdcf 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7c34:	2001      	movs	r0, #1
   b7c36:	e011      	b.n	b7c5c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7c38:	b9b8      	cbnz	r0, b7c6a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7c3a:	4628      	mov	r0, r5
   b7c3c:	f7fc fa2d 	bl	b409a <_Znaj>
   b7c40:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7c44:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7c48:	bb60      	cbnz	r0, b7ca4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7c4a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7c4e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7c52:	b923      	cbnz	r3, b7c5e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7c54:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7c58:	b90b      	cbnz	r3, b7c5e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7c5a:	2000      	movs	r0, #0
}
   b7c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7c5e:	4914      	ldr	r1, [pc, #80]	; (b7cb0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7c60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7c64:	f008 fdb5 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7c68:	e7f7      	b.n	b7c5a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7c6a:	4608      	mov	r0, r1
   b7c6c:	f7fc fa15 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7c70:	4606      	mov	r6, r0
   b7c72:	b940      	cbnz	r0, b7c86 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7c74:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7c78:	b91b      	cbnz	r3, b7c82 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7c7a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7c7e:	2b00      	cmp	r3, #0
   b7c80:	d0eb      	beq.n	b7c5a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7c82:	490c      	ldr	r1, [pc, #48]	; (b7cb4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7c84:	e7ec      	b.n	b7c60 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7c86:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7c8a:	42aa      	cmp	r2, r5
   b7c8c:	bf28      	it	cs
   b7c8e:	462a      	movcs	r2, r5
   b7c90:	4639      	mov	r1, r7
   b7c92:	f00a fa45 	bl	c2120 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7c96:	4638      	mov	r0, r7
   b7c98:	f7fc fa01 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7c9c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7ca0:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7ca4:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7ca8:	e7c4      	b.n	b7c34 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7caa:	bf00      	nop
   b7cac:	000c4a2c 	.word	0x000c4a2c
   b7cb0:	000c4a57 	.word	0x000c4a57
   b7cb4:	000c4a82 	.word	0x000c4a82

000b7cb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7cb8:	290d      	cmp	r1, #13
   b7cba:	f000 80cd 	beq.w	b7e58 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7cbe:	d809      	bhi.n	b7cd4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7cc0:	2902      	cmp	r1, #2
   b7cc2:	f000 80a7 	beq.w	b7e14 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7cc6:	2906      	cmp	r1, #6
   b7cc8:	f000 80be 	beq.w	b7e48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7ccc:	2901      	cmp	r1, #1
   b7cce:	d016      	beq.n	b7cfe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7cd0:	2000      	movs	r0, #0
}
   b7cd2:	4770      	bx	lr
  switch (Class)
   b7cd4:	2913      	cmp	r1, #19
   b7cd6:	f000 80d4 	beq.w	b7e82 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7cda:	2928      	cmp	r1, #40	; 0x28
   b7cdc:	f000 80dc 	beq.w	b7e98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7ce0:	2910      	cmp	r1, #16
   b7ce2:	d1f5      	bne.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7ce4:	2a10      	cmp	r2, #16
   b7ce6:	f000 80c9 	beq.w	b7e7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7cea:	f200 80ba 	bhi.w	b7e62 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7cee:	2a02      	cmp	r2, #2
   b7cf0:	f000 80c1 	beq.w	b7e76 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7cf4:	2a03      	cmp	r2, #3
   b7cf6:	d1eb      	bne.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7cf8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7cfc:	e066      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7cfe:	2a26      	cmp	r2, #38	; 0x26
   b7d00:	d854      	bhi.n	b7dac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7d02:	2a00      	cmp	r2, #0
   b7d04:	d0e4      	beq.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7d06:	3a01      	subs	r2, #1
   b7d08:	2a25      	cmp	r2, #37	; 0x25
   b7d0a:	d8e1      	bhi.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7d0c:	a301      	add	r3, pc, #4	; (adr r3, b7d14 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7d0e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7d12:	bf00      	nop
   b7d14:	000b7dcb 	.word	0x000b7dcb
   b7d18:	000b7cd1 	.word	0x000b7cd1
   b7d1c:	000b7dd5 	.word	0x000b7dd5
   b7d20:	000b7dd9 	.word	0x000b7dd9
   b7d24:	000b7ddd 	.word	0x000b7ddd
   b7d28:	000b7cd1 	.word	0x000b7cd1
   b7d2c:	000b7de1 	.word	0x000b7de1
   b7d30:	000b7cd1 	.word	0x000b7cd1
   b7d34:	000b7de5 	.word	0x000b7de5
   b7d38:	000b7cd1 	.word	0x000b7cd1
   b7d3c:	000b7cd1 	.word	0x000b7cd1
   b7d40:	000b7cd1 	.word	0x000b7cd1
   b7d44:	000b7cd1 	.word	0x000b7cd1
   b7d48:	000b7cd1 	.word	0x000b7cd1
   b7d4c:	000b7cd1 	.word	0x000b7cd1
   b7d50:	000b7cd1 	.word	0x000b7cd1
   b7d54:	000b7de9 	.word	0x000b7de9
   b7d58:	000b7ded 	.word	0x000b7ded
   b7d5c:	000b7df1 	.word	0x000b7df1
   b7d60:	000b7df5 	.word	0x000b7df5
   b7d64:	000b7cd1 	.word	0x000b7cd1
   b7d68:	000b7cd1 	.word	0x000b7cd1
   b7d6c:	000b7df9 	.word	0x000b7df9
   b7d70:	000b7cd1 	.word	0x000b7cd1
   b7d74:	000b7cd1 	.word	0x000b7cd1
   b7d78:	000b7cd1 	.word	0x000b7cd1
   b7d7c:	000b7cd1 	.word	0x000b7cd1
   b7d80:	000b7cd1 	.word	0x000b7cd1
   b7d84:	000b7cd1 	.word	0x000b7cd1
   b7d88:	000b7cd1 	.word	0x000b7cd1
   b7d8c:	000b7cd1 	.word	0x000b7cd1
   b7d90:	000b7cd1 	.word	0x000b7cd1
   b7d94:	000b7dfd 	.word	0x000b7dfd
   b7d98:	000b7e01 	.word	0x000b7e01
   b7d9c:	000b7cd1 	.word	0x000b7cd1
   b7da0:	000b7cd1 	.word	0x000b7cd1
   b7da4:	000b7cd1 	.word	0x000b7cd1
   b7da8:	000b7e05 	.word	0x000b7e05
   b7dac:	2a3c      	cmp	r2, #60	; 0x3c
   b7dae:	d02d      	beq.n	b7e0c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7db0:	d805      	bhi.n	b7dbe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7db2:	2a35      	cmp	r2, #53	; 0x35
   b7db4:	d028      	beq.n	b7e08 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7db6:	2a3b      	cmp	r2, #59	; 0x3b
   b7db8:	d18a      	bne.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7dba:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7dbc:	e006      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7dbe:	2a60      	cmp	r2, #96	; 0x60
   b7dc0:	d026      	beq.n	b7e10 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7dc2:	2a61      	cmp	r2, #97	; 0x61
   b7dc4:	d184      	bne.n	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7dc6:	6980      	ldr	r0, [r0, #24]
   b7dc8:	e000      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7dca:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7dcc:	3800      	subs	r0, #0
   b7dce:	bf18      	it	ne
   b7dd0:	2001      	movne	r0, #1
   b7dd2:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7dd4:	6900      	ldr	r0, [r0, #16]
   b7dd6:	e7f9      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7dd8:	6940      	ldr	r0, [r0, #20]
   b7dda:	e7f7      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7ddc:	69c0      	ldr	r0, [r0, #28]
   b7dde:	e7f5      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7de0:	6a00      	ldr	r0, [r0, #32]
   b7de2:	e7f3      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7de6:	e7f1      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7de8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7dea:	e7ef      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7dec:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7dee:	e7ed      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7df0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7df2:	e7eb      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7df4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7df6:	e7e9      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7df8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7dfa:	e7e7      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7dfc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7dfe:	e7e5      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b7e00:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b7e02:	e7e3      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b7e04:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b7e06:	e7e1      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b7e08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b7e0a:	e7df      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b7e0c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7e0e:	e7dd      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b7e10:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b7e12:	e7db      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7e14:	2a34      	cmp	r2, #52	; 0x34
   b7e16:	d015      	beq.n	b7e44 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b7e18:	d806      	bhi.n	b7e28 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b7e1a:	2a13      	cmp	r2, #19
   b7e1c:	d00b      	beq.n	b7e36 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b7e1e:	2a15      	cmp	r2, #21
   b7e20:	f47f af56 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b7e24:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b7e26:	e7d1      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7e28:	2a72      	cmp	r2, #114	; 0x72
   b7e2a:	d006      	beq.n	b7e3a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b7e2c:	2a73      	cmp	r2, #115	; 0x73
   b7e2e:	f47f af4f 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b7e32:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b7e34:	e7ca      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b7e36:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b7e38:	e7c8      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b7e3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b7e3c:	2b00      	cmp	r3, #0
   b7e3e:	d13b      	bne.n	b7eb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b7e40:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b7e42:	e7c3      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b7e44:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b7e46:	e7c1      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7e48:	b122      	cbz	r2, b7e54 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b7e4a:	2a08      	cmp	r2, #8
   b7e4c:	f47f af40 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b7e50:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7e52:	e7bb      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b7e54:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b7e56:	e7b9      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7e58:	2a03      	cmp	r2, #3
   b7e5a:	f47f af39 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b7e5e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b7e60:	e7b4      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7e62:	2a14      	cmp	r2, #20
   b7e64:	d005      	beq.n	b7e72 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b7e66:	2a15      	cmp	r2, #21
   b7e68:	f47f af32 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b7e6c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b7e70:	e7ac      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b7e72:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b7e74:	e7aa      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b7e76:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b7e7a:	e7a7      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b7e7c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b7e80:	e7a4      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7e82:	2a60      	cmp	r2, #96	; 0x60
   b7e84:	d005      	beq.n	b7e92 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b7e86:	2a80      	cmp	r2, #128	; 0x80
   b7e88:	f47f af22 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b7e8c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b7e90:	e79c      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b7e92:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b7e96:	e799      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7e98:	2a01      	cmp	r2, #1
   b7e9a:	d007      	beq.n	b7eac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b7e9c:	2a02      	cmp	r2, #2
   b7e9e:	d008      	beq.n	b7eb2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b7ea0:	2a00      	cmp	r2, #0
   b7ea2:	f47f af15 	bne.w	b7cd0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b7ea6:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b7eaa:	e78f      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b7eac:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b7eb0:	e78c      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b7eb2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b7eb6:	e789      	b.n	b7dcc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b7eb8:	2001      	movs	r0, #1
   b7eba:	4770      	bx	lr

000b7ebc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b7ebc:	290d      	cmp	r1, #13
   b7ebe:	d035      	beq.n	b7f2c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b7ec0:	d807      	bhi.n	b7ed2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b7ec2:	2902      	cmp	r1, #2
   b7ec4:	d019      	beq.n	b7efa <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b7ec6:	2906      	cmp	r1, #6
   b7ec8:	d02a      	beq.n	b7f20 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b7eca:	2901      	cmp	r1, #1
   b7ecc:	d00d      	beq.n	b7eea <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b7ece:	2000      	movs	r0, #0
}
   b7ed0:	4770      	bx	lr
  switch (Class)
   b7ed2:	2913      	cmp	r1, #19
   b7ed4:	d02f      	beq.n	b7f36 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b7ed6:	2928      	cmp	r1, #40	; 0x28
   b7ed8:	d034      	beq.n	b7f44 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b7eda:	2910      	cmp	r1, #16
   b7edc:	d1f7      	bne.n	b7ece <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b7ede:	3a02      	subs	r2, #2
   b7ee0:	b2d2      	uxtb	r2, r2
   b7ee2:	2a13      	cmp	r2, #19
   b7ee4:	d8f3      	bhi.n	b7ece <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7ee6:	4b1f      	ldr	r3, [pc, #124]	; (b7f64 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b7ee8:	e004      	b.n	b7ef4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b7eea:	3a01      	subs	r2, #1
   b7eec:	b2d2      	uxtb	r2, r2
   b7eee:	2a60      	cmp	r2, #96	; 0x60
   b7ef0:	d8ed      	bhi.n	b7ece <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7ef2:	4b1d      	ldr	r3, [pc, #116]	; (b7f68 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b7ef4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b7ef8:	4770      	bx	lr
    switch (ID)
   b7efa:	2a34      	cmp	r2, #52	; 0x34
   b7efc:	d027      	beq.n	b7f4e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b7efe:	d807      	bhi.n	b7f10 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b7f00:	2a13      	cmp	r2, #19
   b7f02:	d026      	beq.n	b7f52 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b7f04:	2a15      	cmp	r2, #21
   b7f06:	bf14      	ite	ne
   b7f08:	2000      	movne	r0, #0
   b7f0a:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b7f0e:	4770      	bx	lr
   b7f10:	2a72      	cmp	r2, #114	; 0x72
   b7f12:	d020      	beq.n	b7f56 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b7f14:	2a73      	cmp	r2, #115	; 0x73
   b7f16:	bf14      	ite	ne
   b7f18:	2000      	movne	r0, #0
   b7f1a:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b7f1e:	4770      	bx	lr
    switch (ID)
   b7f20:	b1e2      	cbz	r2, b7f5c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b7f22:	2a08      	cmp	r2, #8
   b7f24:	bf14      	ite	ne
   b7f26:	2000      	movne	r0, #0
   b7f28:	2006      	moveq	r0, #6
   b7f2a:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b7f2c:	2a03      	cmp	r2, #3
   b7f2e:	bf14      	ite	ne
   b7f30:	2000      	movne	r0, #0
   b7f32:	201c      	moveq	r0, #28
   b7f34:	4770      	bx	lr
    switch (ID)
   b7f36:	2a60      	cmp	r2, #96	; 0x60
   b7f38:	d012      	beq.n	b7f60 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b7f3a:	2a80      	cmp	r2, #128	; 0x80
   b7f3c:	bf14      	ite	ne
   b7f3e:	2000      	movne	r0, #0
   b7f40:	20a4      	moveq	r0, #164	; 0xa4
   b7f42:	4770      	bx	lr
    switch (ID)
   b7f44:	2a02      	cmp	r2, #2
   b7f46:	d8c2      	bhi.n	b7ece <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7f48:	4b08      	ldr	r3, [pc, #32]	; (b7f6c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b7f4a:	5c98      	ldrb	r0, [r3, r2]
   b7f4c:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b7f4e:	200c      	movs	r0, #12
   b7f50:	4770      	bx	lr
   b7f52:	2048      	movs	r0, #72	; 0x48
   b7f54:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b7f56:	f44f 7004 	mov.w	r0, #528	; 0x210
   b7f5a:	4770      	bx	lr
   b7f5c:	2014      	movs	r0, #20
   b7f5e:	4770      	bx	lr
   b7f60:	2008      	movs	r0, #8
   b7f62:	4770      	bx	lr
   b7f64:	000c5742 	.word	0x000c5742
   b7f68:	000c5680 	.word	0x000c5680
   b7f6c:	000c576a 	.word	0x000c576a

000b7f70 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b7f70:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b7f72:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b7f76:	07ca      	lsls	r2, r1, #31
   b7f78:	d415      	bmi.n	b7fa6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b7f7a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b7f7e:	4b59      	ldr	r3, [pc, #356]	; (b80e4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b7f80:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b7f84:	429a      	cmp	r2, r3
   b7f86:	d101      	bne.n	b7f8c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b7f88:	078b      	lsls	r3, r1, #30
   b7f8a:	d40c      	bmi.n	b7fa6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b7f8c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b7f90:	2b47      	cmp	r3, #71	; 0x47
   b7f92:	d174      	bne.n	b807e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b7f94:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b7f98:	f245 1441 	movw	r4, #20801	; 0x5141
   b7f9c:	42a3      	cmp	r3, r4
   b7f9e:	d104      	bne.n	b7faa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b7fa0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b7fa4:	d06b      	beq.n	b807e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b7fa6:	2001      	movs	r0, #1
   b7fa8:	e070      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b7faa:	f245 1442 	movw	r4, #20802	; 0x5142
   b7fae:	42a3      	cmp	r3, r4
   b7fb0:	d102      	bne.n	b7fb8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b7fb2:	f011 0f08 	tst.w	r1, #8
   b7fb6:	e7f5      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b7fb8:	f245 3442 	movw	r4, #21314	; 0x5342
   b7fbc:	42a3      	cmp	r3, r4
   b7fbe:	d102      	bne.n	b7fc6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b7fc0:	f011 0f10 	tst.w	r1, #16
   b7fc4:	e7ee      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b7fc6:	f244 1447 	movw	r4, #16711	; 0x4147
   b7fca:	42a3      	cmp	r3, r4
   b7fcc:	d102      	bne.n	b7fd4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b7fce:	f011 0f20 	tst.w	r1, #32
   b7fd2:	e7e7      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b7fd4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b7fd8:	42a3      	cmp	r3, r4
   b7fda:	d102      	bne.n	b7fe2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b7fdc:	f011 0f40 	tst.w	r1, #64	; 0x40
   b7fe0:	e7e0      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b7fe2:	f245 144c 	movw	r4, #20812	; 0x514c
   b7fe6:	42a3      	cmp	r3, r4
   b7fe8:	d102      	bne.n	b7ff0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b7fea:	f011 0f80 	tst.w	r1, #128	; 0x80
   b7fee:	e7d9      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b7ff0:	f245 114e 	movw	r1, #20814	; 0x514e
   b7ff4:	428b      	cmp	r3, r1
   b7ff6:	d104      	bne.n	b8002 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b7ff8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7ffc:	f013 0f01 	tst.w	r3, #1
   b8000:	e7d0      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8002:	f245 314e 	movw	r1, #21326	; 0x534e
   b8006:	428b      	cmp	r3, r1
   b8008:	d104      	bne.n	b8014 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b800a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b800e:	f013 0f02 	tst.w	r3, #2
   b8012:	e7c7      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8014:	f245 1150 	movw	r1, #20816	; 0x5150
   b8018:	428b      	cmp	r3, r1
   b801a:	d104      	bne.n	b8026 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b801c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8020:	f013 0f04 	tst.w	r3, #4
   b8024:	e7be      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8026:	f245 1151 	movw	r1, #20817	; 0x5151
   b802a:	428b      	cmp	r3, r1
   b802c:	d104      	bne.n	b8038 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b802e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8032:	f013 0f08 	tst.w	r3, #8
   b8036:	e7b5      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8038:	f245 3152 	movw	r1, #21330	; 0x5352
   b803c:	428b      	cmp	r3, r1
   b803e:	d104      	bne.n	b804a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8040:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8044:	f013 0f10 	tst.w	r3, #16
   b8048:	e7ac      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b804a:	f244 1153 	movw	r1, #16723	; 0x4153
   b804e:	428b      	cmp	r3, r1
   b8050:	d104      	bne.n	b805c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8052:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8056:	f013 0f20 	tst.w	r3, #32
   b805a:	e7a3      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b805c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8060:	428b      	cmp	r3, r1
   b8062:	d104      	bne.n	b806e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8064:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8068:	f013 0f40 	tst.w	r3, #64	; 0x40
   b806c:	e79a      	b.n	b7fa4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b806e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8072:	428b      	cmp	r3, r1
   b8074:	d103      	bne.n	b807e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8076:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b807a:	2b00      	cmp	r3, #0
   b807c:	db93      	blt.n	b7fa6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b807e:	4b1a      	ldr	r3, [pc, #104]	; (b80e8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8080:	429a      	cmp	r2, r3
   b8082:	d104      	bne.n	b808e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8084:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8088:	f000 0001 	and.w	r0, r0, #1
}
   b808c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b808e:	4b17      	ldr	r3, [pc, #92]	; (b80ec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8090:	429a      	cmp	r2, r3
   b8092:	d104      	bne.n	b809e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8094:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8098:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b809c:	e7f6      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b809e:	4b14      	ldr	r3, [pc, #80]	; (b80f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b80a0:	429a      	cmp	r2, r3
   b80a2:	d104      	bne.n	b80ae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b80a4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b80a8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b80ac:	e7ee      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b80ae:	4b11      	ldr	r3, [pc, #68]	; (b80f4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b80b0:	429a      	cmp	r2, r3
   b80b2:	d104      	bne.n	b80be <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b80b4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b80b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b80bc:	e7e6      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b80be:	4b0e      	ldr	r3, [pc, #56]	; (b80f8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b80c0:	429a      	cmp	r2, r3
   b80c2:	d104      	bne.n	b80ce <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b80c4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b80c8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b80cc:	e7de      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b80ce:	4b0b      	ldr	r3, [pc, #44]	; (b80fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b80d0:	429a      	cmp	r2, r3
   b80d2:	d104      	bne.n	b80de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b80d4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b80d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b80dc:	e7d6      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b80de:	2000      	movs	r0, #0
   b80e0:	e7d4      	b.n	b808c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b80e2:	bf00      	nop
   b80e4:	4d544400 	.word	0x4d544400
   b80e8:	4d4c5200 	.word	0x4d4c5200
   b80ec:	434d5200 	.word	0x434d5200
   b80f0:	54585400 	.word	0x54585400
   b80f4:	574c5600 	.word	0x574c5600
   b80f8:	47545600 	.word	0x47545600
   b80fc:	41445a00 	.word	0x41445a00

000b8100 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8100:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8104:	2b2a      	cmp	r3, #42	; 0x2a
   b8106:	d157      	bne.n	b81b8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8108:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b810c:	2b47      	cmp	r3, #71	; 0x47
   b810e:	d153      	bne.n	b81b8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8110:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8114:	4a29      	ldr	r2, [pc, #164]	; (b81bc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b811a:	4293      	cmp	r3, r2
   b811c:	d011      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b811e:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8122:	2a47      	cmp	r2, #71	; 0x47
   b8124:	d11a      	bne.n	b815c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8126:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b812a:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b812e:	3941      	subs	r1, #65	; 0x41
   b8130:	b289      	uxth	r1, r1
   b8132:	2910      	cmp	r1, #16
   b8134:	d907      	bls.n	b8146 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8136:	f022 0110 	bic.w	r1, r2, #16
   b813a:	f245 3042 	movw	r0, #21314	; 0x5342
   b813e:	4281      	cmp	r1, r0
   b8140:	d129      	bne.n	b8196 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8142:	2001      	movs	r0, #1
}
   b8144:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8146:	481e      	ldr	r0, [pc, #120]	; (b81c0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8148:	fa20 f101 	lsr.w	r1, r0, r1
   b814c:	07c9      	lsls	r1, r1, #31
   b814e:	d4f8      	bmi.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8150:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8154:	f245 4153 	movw	r1, #21587	; 0x5453
   b8158:	428a      	cmp	r2, r1
   b815a:	d0f2      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b815c:	4a19      	ldr	r2, [pc, #100]	; (b81c4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b815e:	4293      	cmp	r3, r2
   b8160:	d0ef      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8162:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8166:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b816a:	4293      	cmp	r3, r2
   b816c:	d0e9      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b816e:	4a16      	ldr	r2, [pc, #88]	; (b81c8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8170:	4293      	cmp	r3, r2
   b8172:	d0e6      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8174:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8178:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b817c:	4293      	cmp	r3, r2
   b817e:	d0e0      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8180:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8184:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8188:	4293      	cmp	r3, r2
   b818a:	d0da      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b818c:	480f      	ldr	r0, [pc, #60]	; (b81cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b818e:	1a1b      	subs	r3, r3, r0
   b8190:	4258      	negs	r0, r3
   b8192:	4158      	adcs	r0, r3
   b8194:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8196:	f244 1147 	movw	r1, #16711	; 0x4147
   b819a:	428a      	cmp	r2, r1
   b819c:	d0d1      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b819e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b81a2:	428a      	cmp	r2, r1
   b81a4:	d0cd      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b81a6:	f245 314e 	movw	r1, #21326	; 0x534e
   b81aa:	428a      	cmp	r2, r1
   b81ac:	d0c9      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b81ae:	f244 1153 	movw	r1, #16723	; 0x4153
   b81b2:	428a      	cmp	r2, r1
   b81b4:	d0c5      	beq.n	b8142 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b81b6:	e7cb      	b.n	b8150 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b81b8:	2000      	movs	r0, #0
   b81ba:	4770      	bx	lr
   b81bc:	4d544400 	.word	0x4d544400
   b81c0:	0001a803 	.word	0x0001a803
   b81c4:	4d4c5200 	.word	0x4d4c5200
   b81c8:	54585400 	.word	0x54585400
   b81cc:	41445a00 	.word	0x41445a00

000b81d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b81d0:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b81d2:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b81d6:	07ca      	lsls	r2, r1, #31
   b81d8:	d415      	bmi.n	b8206 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b81da:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b81de:	4b59      	ldr	r3, [pc, #356]	; (b8344 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b81e0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b81e4:	429a      	cmp	r2, r3
   b81e6:	d101      	bne.n	b81ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b81e8:	078b      	lsls	r3, r1, #30
   b81ea:	d40c      	bmi.n	b8206 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b81ec:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b81f0:	2b47      	cmp	r3, #71	; 0x47
   b81f2:	d174      	bne.n	b82de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b81f4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b81f8:	f245 1441 	movw	r4, #20801	; 0x5141
   b81fc:	42a3      	cmp	r3, r4
   b81fe:	d104      	bne.n	b820a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8200:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8204:	d06b      	beq.n	b82de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8206:	2001      	movs	r0, #1
   b8208:	e070      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b820a:	f245 1442 	movw	r4, #20802	; 0x5142
   b820e:	42a3      	cmp	r3, r4
   b8210:	d102      	bne.n	b8218 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8212:	f011 0f08 	tst.w	r1, #8
   b8216:	e7f5      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8218:	f245 3442 	movw	r4, #21314	; 0x5342
   b821c:	42a3      	cmp	r3, r4
   b821e:	d102      	bne.n	b8226 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8220:	f011 0f10 	tst.w	r1, #16
   b8224:	e7ee      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8226:	f244 1447 	movw	r4, #16711	; 0x4147
   b822a:	42a3      	cmp	r3, r4
   b822c:	d102      	bne.n	b8234 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b822e:	f011 0f20 	tst.w	r1, #32
   b8232:	e7e7      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8234:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8238:	42a3      	cmp	r3, r4
   b823a:	d102      	bne.n	b8242 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b823c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8240:	e7e0      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8242:	f245 144c 	movw	r4, #20812	; 0x514c
   b8246:	42a3      	cmp	r3, r4
   b8248:	d102      	bne.n	b8250 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b824a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b824e:	e7d9      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8250:	f245 114e 	movw	r1, #20814	; 0x514e
   b8254:	428b      	cmp	r3, r1
   b8256:	d104      	bne.n	b8262 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8258:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b825c:	f013 0f01 	tst.w	r3, #1
   b8260:	e7d0      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8262:	f245 314e 	movw	r1, #21326	; 0x534e
   b8266:	428b      	cmp	r3, r1
   b8268:	d104      	bne.n	b8274 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b826a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b826e:	f013 0f02 	tst.w	r3, #2
   b8272:	e7c7      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8274:	f245 1150 	movw	r1, #20816	; 0x5150
   b8278:	428b      	cmp	r3, r1
   b827a:	d104      	bne.n	b8286 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b827c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8280:	f013 0f04 	tst.w	r3, #4
   b8284:	e7be      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8286:	f245 1151 	movw	r1, #20817	; 0x5151
   b828a:	428b      	cmp	r3, r1
   b828c:	d104      	bne.n	b8298 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b828e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8292:	f013 0f08 	tst.w	r3, #8
   b8296:	e7b5      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8298:	f245 3152 	movw	r1, #21330	; 0x5352
   b829c:	428b      	cmp	r3, r1
   b829e:	d104      	bne.n	b82aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b82a0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b82a4:	f013 0f10 	tst.w	r3, #16
   b82a8:	e7ac      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b82aa:	f244 1153 	movw	r1, #16723	; 0x4153
   b82ae:	428b      	cmp	r3, r1
   b82b0:	d104      	bne.n	b82bc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b82b2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b82b6:	f013 0f20 	tst.w	r3, #32
   b82ba:	e7a3      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b82bc:	f245 4153 	movw	r1, #21587	; 0x5453
   b82c0:	428b      	cmp	r3, r1
   b82c2:	d104      	bne.n	b82ce <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b82c4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b82c8:	f013 0f40 	tst.w	r3, #64	; 0x40
   b82cc:	e79a      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b82ce:	f245 6153 	movw	r1, #22099	; 0x5653
   b82d2:	428b      	cmp	r3, r1
   b82d4:	d103      	bne.n	b82de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b82d6:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b82da:	2b00      	cmp	r3, #0
   b82dc:	db93      	blt.n	b8206 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b82de:	4b1a      	ldr	r3, [pc, #104]	; (b8348 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b82e0:	429a      	cmp	r2, r3
   b82e2:	d104      	bne.n	b82ee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b82e4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b82e8:	f000 0001 	and.w	r0, r0, #1
}
   b82ec:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b82ee:	4b17      	ldr	r3, [pc, #92]	; (b834c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b82f0:	429a      	cmp	r2, r3
   b82f2:	d104      	bne.n	b82fe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b82f4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b82f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b82fc:	e7f6      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b82fe:	4b14      	ldr	r3, [pc, #80]	; (b8350 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8300:	429a      	cmp	r2, r3
   b8302:	d104      	bne.n	b830e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8304:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8308:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b830c:	e7ee      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b830e:	4b11      	ldr	r3, [pc, #68]	; (b8354 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8310:	429a      	cmp	r2, r3
   b8312:	d104      	bne.n	b831e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8314:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8318:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b831c:	e7e6      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b831e:	4b0e      	ldr	r3, [pc, #56]	; (b8358 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8320:	429a      	cmp	r2, r3
   b8322:	d104      	bne.n	b832e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8324:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8328:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b832c:	e7de      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b832e:	4b0b      	ldr	r3, [pc, #44]	; (b835c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8330:	429a      	cmp	r2, r3
   b8332:	d104      	bne.n	b833e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8334:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8338:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b833c:	e7d6      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b833e:	2000      	movs	r0, #0
   b8340:	e7d4      	b.n	b82ec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8342:	bf00      	nop
   b8344:	4d544400 	.word	0x4d544400
   b8348:	4d4c5200 	.word	0x4d4c5200
   b834c:	434d5200 	.word	0x434d5200
   b8350:	54585400 	.word	0x54585400
   b8354:	574c5600 	.word	0x574c5600
   b8358:	47545600 	.word	0x47545600
   b835c:	41445a00 	.word	0x41445a00

000b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8360:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8364:	b110      	cbz	r0, b836c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8366:	6803      	ldr	r3, [r0, #0]
   b8368:	689b      	ldr	r3, [r3, #8]
   b836a:	4718      	bx	r3
}
   b836c:	4770      	bx	lr
	...

000b8370 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8370:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8372:	4b3d      	ldr	r3, [pc, #244]	; (b8468 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8374:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8376:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b837a:	6818      	ldr	r0, [r3, #0]
   b837c:	9000      	str	r0, [sp, #0]
   b837e:	889b      	ldrh	r3, [r3, #4]
   b8380:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8384:	2205      	movs	r2, #5
   b8386:	4629      	mov	r1, r5
   b8388:	4668      	mov	r0, sp
   b838a:	f009 feb9 	bl	c2100 <memcmp>
   b838e:	b928      	cbnz	r0, b839c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8390:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8394:	b113      	cbz	r3, b839c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8396:	2001      	movs	r0, #1
}
   b8398:	b003      	add	sp, #12
   b839a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b839c:	4933      	ldr	r1, [pc, #204]	; (b846c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b839e:	4668      	mov	r0, sp
   b83a0:	f009 ff4c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83a4:	2205      	movs	r2, #5
   b83a6:	4629      	mov	r1, r5
   b83a8:	4668      	mov	r0, sp
   b83aa:	f009 fea9 	bl	c2100 <memcmp>
   b83ae:	b918      	cbnz	r0, b83b8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b83b0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b83b4:	2b00      	cmp	r3, #0
   b83b6:	d1ee      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b83b8:	492d      	ldr	r1, [pc, #180]	; (b8470 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b83ba:	4668      	mov	r0, sp
   b83bc:	f009 ff3e 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83c0:	2205      	movs	r2, #5
   b83c2:	4629      	mov	r1, r5
   b83c4:	4668      	mov	r0, sp
   b83c6:	f009 fe9b 	bl	c2100 <memcmp>
   b83ca:	b918      	cbnz	r0, b83d4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b83cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b83d0:	2b00      	cmp	r3, #0
   b83d2:	d1e0      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b83d4:	4927      	ldr	r1, [pc, #156]	; (b8474 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b83d6:	4668      	mov	r0, sp
   b83d8:	f009 ff30 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83dc:	2205      	movs	r2, #5
   b83de:	4629      	mov	r1, r5
   b83e0:	4668      	mov	r0, sp
   b83e2:	f009 fe8d 	bl	c2100 <memcmp>
   b83e6:	b918      	cbnz	r0, b83f0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b83e8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b83ec:	2b00      	cmp	r3, #0
   b83ee:	d1d2      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b83f0:	4921      	ldr	r1, [pc, #132]	; (b8478 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b83f2:	4668      	mov	r0, sp
   b83f4:	f009 ff22 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83f8:	2205      	movs	r2, #5
   b83fa:	4629      	mov	r1, r5
   b83fc:	4668      	mov	r0, sp
   b83fe:	f009 fe7f 	bl	c2100 <memcmp>
   b8402:	b918      	cbnz	r0, b840c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8404:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8408:	2b00      	cmp	r3, #0
   b840a:	d1c4      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b840c:	491b      	ldr	r1, [pc, #108]	; (b847c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b840e:	4668      	mov	r0, sp
   b8410:	f009 ff14 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8414:	2205      	movs	r2, #5
   b8416:	4629      	mov	r1, r5
   b8418:	4668      	mov	r0, sp
   b841a:	f009 fe71 	bl	c2100 <memcmp>
   b841e:	b918      	cbnz	r0, b8428 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8420:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8424:	2b00      	cmp	r3, #0
   b8426:	d1b6      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8428:	4915      	ldr	r1, [pc, #84]	; (b8480 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b842a:	4668      	mov	r0, sp
   b842c:	f009 ff06 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8430:	2205      	movs	r2, #5
   b8432:	4629      	mov	r1, r5
   b8434:	4668      	mov	r0, sp
   b8436:	f009 fe63 	bl	c2100 <memcmp>
   b843a:	b918      	cbnz	r0, b8444 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b843c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8440:	2b00      	cmp	r3, #0
   b8442:	d1a8      	bne.n	b8396 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8444:	490f      	ldr	r1, [pc, #60]	; (b8484 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8446:	4668      	mov	r0, sp
   b8448:	f009 fef8 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b844c:	2205      	movs	r2, #5
   b844e:	4629      	mov	r1, r5
   b8450:	4668      	mov	r0, sp
   b8452:	f009 fe55 	bl	c2100 <memcmp>
   b8456:	b928      	cbnz	r0, b8464 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8458:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b845c:	3800      	subs	r0, #0
   b845e:	bf18      	it	ne
   b8460:	2001      	movne	r0, #1
   b8462:	e799      	b.n	b8398 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8464:	2000      	movs	r0, #0
   b8466:	e797      	b.n	b8398 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8468:	000c4ad8 	.word	0x000c4ad8
   b846c:	000c4aae 	.word	0x000c4aae
   b8470:	000c4ab4 	.word	0x000c4ab4
   b8474:	000c4aba 	.word	0x000c4aba
   b8478:	000c4ac0 	.word	0x000c4ac0
   b847c:	000c4ac6 	.word	0x000c4ac6
   b8480:	000c4acc 	.word	0x000c4acc
   b8484:	000c4ad2 	.word	0x000c4ad2

000b8488 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8488:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b848a:	4b62      	ldr	r3, [pc, #392]	; (b8614 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b848c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b848e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8492:	6818      	ldr	r0, [r3, #0]
   b8494:	9000      	str	r0, [sp, #0]
   b8496:	889b      	ldrh	r3, [r3, #4]
   b8498:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b849c:	2205      	movs	r2, #5
   b849e:	4629      	mov	r1, r5
   b84a0:	4668      	mov	r0, sp
   b84a2:	f009 fe2d 	bl	c2100 <memcmp>
   b84a6:	b978      	cbnz	r0, b84c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b84a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b84ac:	b163      	cbz	r3, b84c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b84ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b84b2:	b14a      	cbz	r2, b84c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b84b4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b84b8:	2a00      	cmp	r2, #0
   b84ba:	f040 80a3 	bne.w	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b84be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b84c2:	2b00      	cmp	r3, #0
   b84c4:	f040 809e 	bne.w	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b84c8:	4953      	ldr	r1, [pc, #332]	; (b8618 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b84ca:	4668      	mov	r0, sp
   b84cc:	f009 feb6 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84d0:	2205      	movs	r2, #5
   b84d2:	4629      	mov	r1, r5
   b84d4:	4668      	mov	r0, sp
   b84d6:	f009 fe13 	bl	c2100 <memcmp>
   b84da:	b978      	cbnz	r0, b84fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b84dc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b84e0:	b163      	cbz	r3, b84fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b84e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b84e6:	b14a      	cbz	r2, b84fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b84e8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b84ec:	2a00      	cmp	r2, #0
   b84ee:	f040 8089 	bne.w	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b84f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b84f6:	2b00      	cmp	r3, #0
   b84f8:	f040 8084 	bne.w	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b84fc:	4947      	ldr	r1, [pc, #284]	; (b861c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b84fe:	4668      	mov	r0, sp
   b8500:	f009 fe9c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8504:	2205      	movs	r2, #5
   b8506:	4629      	mov	r1, r5
   b8508:	4668      	mov	r0, sp
   b850a:	f009 fdf9 	bl	c2100 <memcmp>
   b850e:	b968      	cbnz	r0, b852c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8510:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8514:	b153      	cbz	r3, b852c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8516:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b851a:	b13a      	cbz	r2, b852c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b851c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8520:	2a00      	cmp	r2, #0
   b8522:	d16f      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8524:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8528:	2b00      	cmp	r3, #0
   b852a:	d16b      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b852c:	493c      	ldr	r1, [pc, #240]	; (b8620 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b852e:	4668      	mov	r0, sp
   b8530:	f009 fe84 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8534:	2205      	movs	r2, #5
   b8536:	4629      	mov	r1, r5
   b8538:	4668      	mov	r0, sp
   b853a:	f009 fde1 	bl	c2100 <memcmp>
   b853e:	b968      	cbnz	r0, b855c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8540:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8544:	b153      	cbz	r3, b855c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8546:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b854a:	b13a      	cbz	r2, b855c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b854c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8550:	2a00      	cmp	r2, #0
   b8552:	d157      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8554:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8558:	2b00      	cmp	r3, #0
   b855a:	d153      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b855c:	4931      	ldr	r1, [pc, #196]	; (b8624 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b855e:	4668      	mov	r0, sp
   b8560:	f009 fe6c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8564:	2205      	movs	r2, #5
   b8566:	4629      	mov	r1, r5
   b8568:	4668      	mov	r0, sp
   b856a:	f009 fdc9 	bl	c2100 <memcmp>
   b856e:	b968      	cbnz	r0, b858c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8570:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8574:	b153      	cbz	r3, b858c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8576:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b857a:	b13a      	cbz	r2, b858c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b857c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8580:	2a00      	cmp	r2, #0
   b8582:	d13f      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8584:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8588:	2b00      	cmp	r3, #0
   b858a:	d13b      	bne.n	b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b858c:	4926      	ldr	r1, [pc, #152]	; (b8628 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b858e:	4668      	mov	r0, sp
   b8590:	f009 fe54 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8594:	2205      	movs	r2, #5
   b8596:	4629      	mov	r1, r5
   b8598:	4668      	mov	r0, sp
   b859a:	f009 fdb1 	bl	c2100 <memcmp>
   b859e:	b958      	cbnz	r0, b85b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b85a0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b85a4:	b143      	cbz	r3, b85b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b85a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b85aa:	b12a      	cbz	r2, b85b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b85ac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b85b0:	bb42      	cbnz	r2, b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b85b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b85b6:	bb2b      	cbnz	r3, b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b85b8:	491c      	ldr	r1, [pc, #112]	; (b862c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b85ba:	4668      	mov	r0, sp
   b85bc:	f009 fe3e 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85c0:	2205      	movs	r2, #5
   b85c2:	4629      	mov	r1, r5
   b85c4:	4668      	mov	r0, sp
   b85c6:	f009 fd9b 	bl	c2100 <memcmp>
   b85ca:	b940      	cbnz	r0, b85de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b85cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b85d0:	b12b      	cbz	r3, b85de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b85d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b85d4:	b11a      	cbz	r2, b85de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b85d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b85d8:	b9a2      	cbnz	r2, b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b85da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b85dc:	b993      	cbnz	r3, b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b85de:	4914      	ldr	r1, [pc, #80]	; (b8630 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b85e0:	4668      	mov	r0, sp
   b85e2:	f009 fe2b 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85e6:	2205      	movs	r2, #5
   b85e8:	4629      	mov	r1, r5
   b85ea:	4668      	mov	r0, sp
   b85ec:	f009 fd88 	bl	c2100 <memcmp>
   b85f0:	b958      	cbnz	r0, b860a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b85f2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b85f6:	b153      	cbz	r3, b860e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b85f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b85fa:	b120      	cbz	r0, b8606 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b85fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b85fe:	b90a      	cbnz	r2, b8604 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8600:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8602:	b100      	cbz	r0, b8606 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8604:	2001      	movs	r0, #1
}
   b8606:	b003      	add	sp, #12
   b8608:	bd30      	pop	{r4, r5, pc}
  return false;
   b860a:	2000      	movs	r0, #0
   b860c:	e7fb      	b.n	b8606 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b860e:	4618      	mov	r0, r3
   b8610:	e7f9      	b.n	b8606 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8612:	bf00      	nop
   b8614:	000c4ad8 	.word	0x000c4ad8
   b8618:	000c4aae 	.word	0x000c4aae
   b861c:	000c4ab4 	.word	0x000c4ab4
   b8620:	000c4aba 	.word	0x000c4aba
   b8624:	000c4ac0 	.word	0x000c4ac0
   b8628:	000c4ac6 	.word	0x000c4ac6
   b862c:	000c4acc 	.word	0x000c4acc
   b8630:	000c4ad2 	.word	0x000c4ad2

000b8634 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8634:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8636:	4b38      	ldr	r3, [pc, #224]	; (b8718 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8638:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b863a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b863e:	6818      	ldr	r0, [r3, #0]
   b8640:	9000      	str	r0, [sp, #0]
   b8642:	889b      	ldrh	r3, [r3, #4]
   b8644:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8648:	2205      	movs	r2, #5
   b864a:	4629      	mov	r1, r5
   b864c:	4668      	mov	r0, sp
   b864e:	f009 fd57 	bl	c2100 <memcmp>
   b8652:	b920      	cbnz	r0, b865e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8654:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8658:	3001      	adds	r0, #1
}
   b865a:	b003      	add	sp, #12
   b865c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b865e:	492f      	ldr	r1, [pc, #188]	; (b871c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8660:	4668      	mov	r0, sp
   b8662:	f009 fdeb 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8666:	2205      	movs	r2, #5
   b8668:	4629      	mov	r1, r5
   b866a:	4668      	mov	r0, sp
   b866c:	f009 fd48 	bl	c2100 <memcmp>
   b8670:	b910      	cbnz	r0, b8678 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8672:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8676:	e7ef      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8678:	4929      	ldr	r1, [pc, #164]	; (b8720 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b867a:	4668      	mov	r0, sp
   b867c:	f009 fdde 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8680:	2205      	movs	r2, #5
   b8682:	4629      	mov	r1, r5
   b8684:	4668      	mov	r0, sp
   b8686:	f009 fd3b 	bl	c2100 <memcmp>
   b868a:	b910      	cbnz	r0, b8692 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b868c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8690:	e7e2      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8692:	4924      	ldr	r1, [pc, #144]	; (b8724 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8694:	4668      	mov	r0, sp
   b8696:	f009 fdd1 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b869a:	2205      	movs	r2, #5
   b869c:	4629      	mov	r1, r5
   b869e:	4668      	mov	r0, sp
   b86a0:	f009 fd2e 	bl	c2100 <memcmp>
   b86a4:	b910      	cbnz	r0, b86ac <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b86a6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b86aa:	e7d5      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b86ac:	491e      	ldr	r1, [pc, #120]	; (b8728 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b86ae:	4668      	mov	r0, sp
   b86b0:	f009 fdc4 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86b4:	2205      	movs	r2, #5
   b86b6:	4629      	mov	r1, r5
   b86b8:	4668      	mov	r0, sp
   b86ba:	f009 fd21 	bl	c2100 <memcmp>
   b86be:	b910      	cbnz	r0, b86c6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b86c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b86c4:	e7c8      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b86c6:	4919      	ldr	r1, [pc, #100]	; (b872c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b86c8:	4668      	mov	r0, sp
   b86ca:	f009 fdb7 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86ce:	2205      	movs	r2, #5
   b86d0:	4629      	mov	r1, r5
   b86d2:	4668      	mov	r0, sp
   b86d4:	f009 fd14 	bl	c2100 <memcmp>
   b86d8:	b910      	cbnz	r0, b86e0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b86da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b86de:	e7bb      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b86e0:	4913      	ldr	r1, [pc, #76]	; (b8730 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b86e2:	4668      	mov	r0, sp
   b86e4:	f009 fdaa 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86e8:	2205      	movs	r2, #5
   b86ea:	4629      	mov	r1, r5
   b86ec:	4668      	mov	r0, sp
   b86ee:	f009 fd07 	bl	c2100 <memcmp>
   b86f2:	b910      	cbnz	r0, b86fa <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b86f4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b86f8:	e7ae      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b86fa:	490e      	ldr	r1, [pc, #56]	; (b8734 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b86fc:	4668      	mov	r0, sp
   b86fe:	f009 fd9d 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8702:	2205      	movs	r2, #5
   b8704:	4629      	mov	r1, r5
   b8706:	4668      	mov	r0, sp
   b8708:	f009 fcfa 	bl	c2100 <memcmp>
   b870c:	b910      	cbnz	r0, b8714 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b870e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8712:	e7a1      	b.n	b8658 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8714:	2000      	movs	r0, #0
   b8716:	e7a0      	b.n	b865a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8718:	000c4ad8 	.word	0x000c4ad8
   b871c:	000c4aae 	.word	0x000c4aae
   b8720:	000c4ab4 	.word	0x000c4ab4
   b8724:	000c4aba 	.word	0x000c4aba
   b8728:	000c4ac0 	.word	0x000c4ac0
   b872c:	000c4ac6 	.word	0x000c4ac6
   b8730:	000c4acc 	.word	0x000c4acc
   b8734:	000c4ad2 	.word	0x000c4ad2

000b8738 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8738:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b873a:	4b38      	ldr	r3, [pc, #224]	; (b881c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b873c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b873e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8742:	6818      	ldr	r0, [r3, #0]
   b8744:	9000      	str	r0, [sp, #0]
   b8746:	889b      	ldrh	r3, [r3, #4]
   b8748:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b874c:	2205      	movs	r2, #5
   b874e:	4629      	mov	r1, r5
   b8750:	4668      	mov	r0, sp
   b8752:	f009 fcd5 	bl	c2100 <memcmp>
   b8756:	b920      	cbnz	r0, b8762 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8758:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b875c:	3002      	adds	r0, #2
}
   b875e:	b003      	add	sp, #12
   b8760:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8762:	492f      	ldr	r1, [pc, #188]	; (b8820 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8764:	4668      	mov	r0, sp
   b8766:	f009 fd69 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b876a:	2205      	movs	r2, #5
   b876c:	4629      	mov	r1, r5
   b876e:	4668      	mov	r0, sp
   b8770:	f009 fcc6 	bl	c2100 <memcmp>
   b8774:	b910      	cbnz	r0, b877c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8776:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b877a:	e7ef      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b877c:	4929      	ldr	r1, [pc, #164]	; (b8824 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b877e:	4668      	mov	r0, sp
   b8780:	f009 fd5c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8784:	2205      	movs	r2, #5
   b8786:	4629      	mov	r1, r5
   b8788:	4668      	mov	r0, sp
   b878a:	f009 fcb9 	bl	c2100 <memcmp>
   b878e:	b910      	cbnz	r0, b8796 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8790:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8794:	e7e2      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8796:	4924      	ldr	r1, [pc, #144]	; (b8828 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8798:	4668      	mov	r0, sp
   b879a:	f009 fd4f 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b879e:	2205      	movs	r2, #5
   b87a0:	4629      	mov	r1, r5
   b87a2:	4668      	mov	r0, sp
   b87a4:	f009 fcac 	bl	c2100 <memcmp>
   b87a8:	b910      	cbnz	r0, b87b0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b87aa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b87ae:	e7d5      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b87b0:	491e      	ldr	r1, [pc, #120]	; (b882c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b87b2:	4668      	mov	r0, sp
   b87b4:	f009 fd42 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87b8:	2205      	movs	r2, #5
   b87ba:	4629      	mov	r1, r5
   b87bc:	4668      	mov	r0, sp
   b87be:	f009 fc9f 	bl	c2100 <memcmp>
   b87c2:	b910      	cbnz	r0, b87ca <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b87c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b87c8:	e7c8      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b87ca:	4919      	ldr	r1, [pc, #100]	; (b8830 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b87cc:	4668      	mov	r0, sp
   b87ce:	f009 fd35 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87d2:	2205      	movs	r2, #5
   b87d4:	4629      	mov	r1, r5
   b87d6:	4668      	mov	r0, sp
   b87d8:	f009 fc92 	bl	c2100 <memcmp>
   b87dc:	b910      	cbnz	r0, b87e4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b87de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b87e2:	e7bb      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b87e4:	4913      	ldr	r1, [pc, #76]	; (b8834 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b87e6:	4668      	mov	r0, sp
   b87e8:	f009 fd28 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87ec:	2205      	movs	r2, #5
   b87ee:	4629      	mov	r1, r5
   b87f0:	4668      	mov	r0, sp
   b87f2:	f009 fc85 	bl	c2100 <memcmp>
   b87f6:	b910      	cbnz	r0, b87fe <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b87f8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b87fc:	e7ae      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b87fe:	490e      	ldr	r1, [pc, #56]	; (b8838 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b8800:	4668      	mov	r0, sp
   b8802:	f009 fd1b 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8806:	2205      	movs	r2, #5
   b8808:	4629      	mov	r1, r5
   b880a:	4668      	mov	r0, sp
   b880c:	f009 fc78 	bl	c2100 <memcmp>
   b8810:	b910      	cbnz	r0, b8818 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8812:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8816:	e7a1      	b.n	b875c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b8818:	2000      	movs	r0, #0
   b881a:	e7a0      	b.n	b875e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b881c:	000c4ad8 	.word	0x000c4ad8
   b8820:	000c4aae 	.word	0x000c4aae
   b8824:	000c4ab4 	.word	0x000c4ab4
   b8828:	000c4aba 	.word	0x000c4aba
   b882c:	000c4ac0 	.word	0x000c4ac0
   b8830:	000c4ac6 	.word	0x000c4ac6
   b8834:	000c4acc 	.word	0x000c4acc
   b8838:	000c4ad2 	.word	0x000c4ad2

000b883c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b883c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b883e:	4b39      	ldr	r3, [pc, #228]	; (b8924 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8840:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8842:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8846:	6818      	ldr	r0, [r3, #0]
   b8848:	9000      	str	r0, [sp, #0]
   b884a:	889b      	ldrh	r3, [r3, #4]
   b884c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8850:	2205      	movs	r2, #5
   b8852:	4629      	mov	r1, r5
   b8854:	4668      	mov	r0, sp
   b8856:	f009 fc53 	bl	c2100 <memcmp>
   b885a:	b920      	cbnz	r0, b8866 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b885c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8860:	3066      	adds	r0, #102	; 0x66
}
   b8862:	b003      	add	sp, #12
   b8864:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8866:	4930      	ldr	r1, [pc, #192]	; (b8928 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8868:	4668      	mov	r0, sp
   b886a:	f009 fce7 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b886e:	2205      	movs	r2, #5
   b8870:	4629      	mov	r1, r5
   b8872:	4668      	mov	r0, sp
   b8874:	f009 fc44 	bl	c2100 <memcmp>
   b8878:	b910      	cbnz	r0, b8880 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b887a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b887e:	e7ef      	b.n	b8860 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8880:	492a      	ldr	r1, [pc, #168]	; (b892c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8882:	4668      	mov	r0, sp
   b8884:	f009 fcda 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8888:	2205      	movs	r2, #5
   b888a:	4629      	mov	r1, r5
   b888c:	4668      	mov	r0, sp
   b888e:	f009 fc37 	bl	c2100 <memcmp>
   b8892:	b910      	cbnz	r0, b889a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8894:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8898:	e7e2      	b.n	b8860 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b889a:	4925      	ldr	r1, [pc, #148]	; (b8930 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b889c:	4668      	mov	r0, sp
   b889e:	f009 fccd 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88a2:	2205      	movs	r2, #5
   b88a4:	4629      	mov	r1, r5
   b88a6:	4668      	mov	r0, sp
   b88a8:	f009 fc2a 	bl	c2100 <memcmp>
   b88ac:	b910      	cbnz	r0, b88b4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b88ae:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b88b2:	e7d5      	b.n	b8860 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b88b4:	491f      	ldr	r1, [pc, #124]	; (b8934 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b88b6:	4668      	mov	r0, sp
   b88b8:	f009 fcc0 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88bc:	2205      	movs	r2, #5
   b88be:	4629      	mov	r1, r5
   b88c0:	4668      	mov	r0, sp
   b88c2:	f009 fc1d 	bl	c2100 <memcmp>
   b88c6:	b910      	cbnz	r0, b88ce <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b88c8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b88cc:	e7c8      	b.n	b8860 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b88ce:	491a      	ldr	r1, [pc, #104]	; (b8938 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b88d0:	4668      	mov	r0, sp
   b88d2:	f009 fcb3 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88d6:	2205      	movs	r2, #5
   b88d8:	4629      	mov	r1, r5
   b88da:	4668      	mov	r0, sp
   b88dc:	f009 fc10 	bl	c2100 <memcmp>
   b88e0:	b910      	cbnz	r0, b88e8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b88e2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b88e6:	e7bb      	b.n	b8860 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b88e8:	4914      	ldr	r1, [pc, #80]	; (b893c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b88ea:	4668      	mov	r0, sp
   b88ec:	f009 fca6 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88f0:	2205      	movs	r2, #5
   b88f2:	4629      	mov	r1, r5
   b88f4:	4668      	mov	r0, sp
   b88f6:	f009 fc03 	bl	c2100 <memcmp>
   b88fa:	b918      	cbnz	r0, b8904 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b88fc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8900:	3034      	adds	r0, #52	; 0x34
   b8902:	e7ae      	b.n	b8862 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8904:	490e      	ldr	r1, [pc, #56]	; (b8940 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8906:	4668      	mov	r0, sp
   b8908:	f009 fc98 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b890c:	2205      	movs	r2, #5
   b890e:	4629      	mov	r1, r5
   b8910:	4668      	mov	r0, sp
   b8912:	f009 fbf5 	bl	c2100 <memcmp>
   b8916:	b910      	cbnz	r0, b891e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8918:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b891c:	e7f0      	b.n	b8900 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b891e:	2000      	movs	r0, #0
   b8920:	e79f      	b.n	b8862 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8922:	bf00      	nop
   b8924:	000c4ad8 	.word	0x000c4ad8
   b8928:	000c4aae 	.word	0x000c4aae
   b892c:	000c4ab4 	.word	0x000c4ab4
   b8930:	000c4aba 	.word	0x000c4aba
   b8934:	000c4ac0 	.word	0x000c4ac0
   b8938:	000c4ac6 	.word	0x000c4ac6
   b893c:	000c4acc 	.word	0x000c4acc
   b8940:	000c4ad2 	.word	0x000c4ad2

000b8944 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8944:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8946:	4b39      	ldr	r3, [pc, #228]	; (b8a2c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8948:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b894a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b894e:	6818      	ldr	r0, [r3, #0]
   b8950:	9000      	str	r0, [sp, #0]
   b8952:	889b      	ldrh	r3, [r3, #4]
   b8954:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8958:	2205      	movs	r2, #5
   b895a:	4629      	mov	r1, r5
   b895c:	4668      	mov	r0, sp
   b895e:	f009 fbcf 	bl	c2100 <memcmp>
   b8962:	b920      	cbnz	r0, b896e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8964:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8968:	3067      	adds	r0, #103	; 0x67
}
   b896a:	b003      	add	sp, #12
   b896c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b896e:	4930      	ldr	r1, [pc, #192]	; (b8a30 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8970:	4668      	mov	r0, sp
   b8972:	f009 fc63 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8976:	2205      	movs	r2, #5
   b8978:	4629      	mov	r1, r5
   b897a:	4668      	mov	r0, sp
   b897c:	f009 fbc0 	bl	c2100 <memcmp>
   b8980:	b910      	cbnz	r0, b8988 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8982:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8986:	e7ef      	b.n	b8968 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8988:	492a      	ldr	r1, [pc, #168]	; (b8a34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b898a:	4668      	mov	r0, sp
   b898c:	f009 fc56 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8990:	2205      	movs	r2, #5
   b8992:	4629      	mov	r1, r5
   b8994:	4668      	mov	r0, sp
   b8996:	f009 fbb3 	bl	c2100 <memcmp>
   b899a:	b910      	cbnz	r0, b89a2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b899c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b89a0:	e7e2      	b.n	b8968 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b89a2:	4925      	ldr	r1, [pc, #148]	; (b8a38 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b89a4:	4668      	mov	r0, sp
   b89a6:	f009 fc49 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89aa:	2205      	movs	r2, #5
   b89ac:	4629      	mov	r1, r5
   b89ae:	4668      	mov	r0, sp
   b89b0:	f009 fba6 	bl	c2100 <memcmp>
   b89b4:	b910      	cbnz	r0, b89bc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b89b6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b89ba:	e7d5      	b.n	b8968 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b89bc:	491f      	ldr	r1, [pc, #124]	; (b8a3c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b89be:	4668      	mov	r0, sp
   b89c0:	f009 fc3c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89c4:	2205      	movs	r2, #5
   b89c6:	4629      	mov	r1, r5
   b89c8:	4668      	mov	r0, sp
   b89ca:	f009 fb99 	bl	c2100 <memcmp>
   b89ce:	b910      	cbnz	r0, b89d6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b89d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b89d4:	e7c8      	b.n	b8968 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b89d6:	491a      	ldr	r1, [pc, #104]	; (b8a40 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b89d8:	4668      	mov	r0, sp
   b89da:	f009 fc2f 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89de:	2205      	movs	r2, #5
   b89e0:	4629      	mov	r1, r5
   b89e2:	4668      	mov	r0, sp
   b89e4:	f009 fb8c 	bl	c2100 <memcmp>
   b89e8:	b910      	cbnz	r0, b89f0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b89ea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b89ee:	e7bb      	b.n	b8968 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b89f0:	4914      	ldr	r1, [pc, #80]	; (b8a44 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b89f2:	4668      	mov	r0, sp
   b89f4:	f009 fc22 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89f8:	2205      	movs	r2, #5
   b89fa:	4629      	mov	r1, r5
   b89fc:	4668      	mov	r0, sp
   b89fe:	f009 fb7f 	bl	c2100 <memcmp>
   b8a02:	b918      	cbnz	r0, b8a0c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8a04:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8a08:	3035      	adds	r0, #53	; 0x35
   b8a0a:	e7ae      	b.n	b896a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8a0c:	490e      	ldr	r1, [pc, #56]	; (b8a48 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b8a0e:	4668      	mov	r0, sp
   b8a10:	f009 fc14 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a14:	2205      	movs	r2, #5
   b8a16:	4629      	mov	r1, r5
   b8a18:	4668      	mov	r0, sp
   b8a1a:	f009 fb71 	bl	c2100 <memcmp>
   b8a1e:	b910      	cbnz	r0, b8a26 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8a20:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8a24:	e7f0      	b.n	b8a08 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8a26:	2000      	movs	r0, #0
   b8a28:	e79f      	b.n	b896a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8a2a:	bf00      	nop
   b8a2c:	000c4ad8 	.word	0x000c4ad8
   b8a30:	000c4aae 	.word	0x000c4aae
   b8a34:	000c4ab4 	.word	0x000c4ab4
   b8a38:	000c4aba 	.word	0x000c4aba
   b8a3c:	000c4ac0 	.word	0x000c4ac0
   b8a40:	000c4ac6 	.word	0x000c4ac6
   b8a44:	000c4acc 	.word	0x000c4acc
   b8a48:	000c4ad2 	.word	0x000c4ad2

000b8a4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a4e:	4b39      	ldr	r3, [pc, #228]	; (b8b34 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b8a50:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a52:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a56:	6818      	ldr	r0, [r3, #0]
   b8a58:	9000      	str	r0, [sp, #0]
   b8a5a:	889b      	ldrh	r3, [r3, #4]
   b8a5c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a60:	2205      	movs	r2, #5
   b8a62:	4629      	mov	r1, r5
   b8a64:	4668      	mov	r0, sp
   b8a66:	f009 fb4b 	bl	c2100 <memcmp>
   b8a6a:	b928      	cbnz	r0, b8a78 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8a6c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8a70:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8a74:	b003      	add	sp, #12
   b8a76:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a78:	492f      	ldr	r1, [pc, #188]	; (b8b38 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8a7a:	4668      	mov	r0, sp
   b8a7c:	f009 fbde 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a80:	2205      	movs	r2, #5
   b8a82:	4629      	mov	r1, r5
   b8a84:	4668      	mov	r0, sp
   b8a86:	f009 fb3b 	bl	c2100 <memcmp>
   b8a8a:	b910      	cbnz	r0, b8a92 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8a8c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8a90:	e7ee      	b.n	b8a70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8a92:	492a      	ldr	r1, [pc, #168]	; (b8b3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8a94:	4668      	mov	r0, sp
   b8a96:	f009 fbd1 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a9a:	2205      	movs	r2, #5
   b8a9c:	4629      	mov	r1, r5
   b8a9e:	4668      	mov	r0, sp
   b8aa0:	f009 fb2e 	bl	c2100 <memcmp>
   b8aa4:	b910      	cbnz	r0, b8aac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b8aa6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8aaa:	e7e1      	b.n	b8a70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8aac:	4924      	ldr	r1, [pc, #144]	; (b8b40 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8aae:	4668      	mov	r0, sp
   b8ab0:	f009 fbc4 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ab4:	2205      	movs	r2, #5
   b8ab6:	4629      	mov	r1, r5
   b8ab8:	4668      	mov	r0, sp
   b8aba:	f009 fb21 	bl	c2100 <memcmp>
   b8abe:	b910      	cbnz	r0, b8ac6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8ac0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8ac4:	e7d4      	b.n	b8a70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8ac6:	491f      	ldr	r1, [pc, #124]	; (b8b44 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b8ac8:	4668      	mov	r0, sp
   b8aca:	f009 fbb7 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ace:	2205      	movs	r2, #5
   b8ad0:	4629      	mov	r1, r5
   b8ad2:	4668      	mov	r0, sp
   b8ad4:	f009 fb14 	bl	c2100 <memcmp>
   b8ad8:	b910      	cbnz	r0, b8ae0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b8ada:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8ade:	e7c7      	b.n	b8a70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8ae0:	4919      	ldr	r1, [pc, #100]	; (b8b48 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8ae2:	4668      	mov	r0, sp
   b8ae4:	f009 fbaa 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ae8:	2205      	movs	r2, #5
   b8aea:	4629      	mov	r1, r5
   b8aec:	4668      	mov	r0, sp
   b8aee:	f009 fb07 	bl	c2100 <memcmp>
   b8af2:	b910      	cbnz	r0, b8afa <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8af4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8af8:	e7ba      	b.n	b8a70 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8afa:	4914      	ldr	r1, [pc, #80]	; (b8b4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8afc:	4668      	mov	r0, sp
   b8afe:	f009 fb9d 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b02:	2205      	movs	r2, #5
   b8b04:	4629      	mov	r1, r5
   b8b06:	4668      	mov	r0, sp
   b8b08:	f009 fafa 	bl	c2100 <memcmp>
   b8b0c:	b918      	cbnz	r0, b8b16 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8b0e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8b12:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8b14:	e7ae      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8b16:	490e      	ldr	r1, [pc, #56]	; (b8b50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8b18:	4668      	mov	r0, sp
   b8b1a:	f009 fb8f 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b1e:	2205      	movs	r2, #5
   b8b20:	4629      	mov	r1, r5
   b8b22:	4668      	mov	r0, sp
   b8b24:	f009 faec 	bl	c2100 <memcmp>
   b8b28:	b910      	cbnz	r0, b8b30 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8b2a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8b2e:	e7f0      	b.n	b8b12 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8b30:	2000      	movs	r0, #0
   b8b32:	e79f      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8b34:	000c4ad8 	.word	0x000c4ad8
   b8b38:	000c4aae 	.word	0x000c4aae
   b8b3c:	000c4ab4 	.word	0x000c4ab4
   b8b40:	000c4aba 	.word	0x000c4aba
   b8b44:	000c4ac0 	.word	0x000c4ac0
   b8b48:	000c4ac6 	.word	0x000c4ac6
   b8b4c:	000c4acc 	.word	0x000c4acc
   b8b50:	000c4ad2 	.word	0x000c4ad2

000b8b54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8b56:	4b3a      	ldr	r3, [pc, #232]	; (b8c40 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8b58:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b5a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b5e:	6818      	ldr	r0, [r3, #0]
   b8b60:	9000      	str	r0, [sp, #0]
   b8b62:	889b      	ldrh	r3, [r3, #4]
   b8b64:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b68:	2205      	movs	r2, #5
   b8b6a:	4629      	mov	r1, r5
   b8b6c:	4668      	mov	r0, sp
   b8b6e:	f009 fac7 	bl	c2100 <memcmp>
   b8b72:	b930      	cbnz	r0, b8b82 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8b74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8b78:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8b7c:	3001      	adds	r0, #1
}
   b8b7e:	b003      	add	sp, #12
   b8b80:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b82:	4930      	ldr	r1, [pc, #192]	; (b8c44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8b84:	4668      	mov	r0, sp
   b8b86:	f009 fb59 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b8a:	2205      	movs	r2, #5
   b8b8c:	4629      	mov	r1, r5
   b8b8e:	4668      	mov	r0, sp
   b8b90:	f009 fab6 	bl	c2100 <memcmp>
   b8b94:	b910      	cbnz	r0, b8b9c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8b96:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8b9a:	e7ed      	b.n	b8b78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8b9c:	492a      	ldr	r1, [pc, #168]	; (b8c48 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8b9e:	4668      	mov	r0, sp
   b8ba0:	f009 fb4c 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ba4:	2205      	movs	r2, #5
   b8ba6:	4629      	mov	r1, r5
   b8ba8:	4668      	mov	r0, sp
   b8baa:	f009 faa9 	bl	c2100 <memcmp>
   b8bae:	b910      	cbnz	r0, b8bb6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8bb0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8bb4:	e7e0      	b.n	b8b78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8bb6:	4925      	ldr	r1, [pc, #148]	; (b8c4c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8bb8:	4668      	mov	r0, sp
   b8bba:	f009 fb3f 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bbe:	2205      	movs	r2, #5
   b8bc0:	4629      	mov	r1, r5
   b8bc2:	4668      	mov	r0, sp
   b8bc4:	f009 fa9c 	bl	c2100 <memcmp>
   b8bc8:	b910      	cbnz	r0, b8bd0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8bca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8bce:	e7d3      	b.n	b8b78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8bd0:	491f      	ldr	r1, [pc, #124]	; (b8c50 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8bd2:	4668      	mov	r0, sp
   b8bd4:	f009 fb32 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bd8:	2205      	movs	r2, #5
   b8bda:	4629      	mov	r1, r5
   b8bdc:	4668      	mov	r0, sp
   b8bde:	f009 fa8f 	bl	c2100 <memcmp>
   b8be2:	b910      	cbnz	r0, b8bea <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8be4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8be8:	e7c6      	b.n	b8b78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8bea:	491a      	ldr	r1, [pc, #104]	; (b8c54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8bec:	4668      	mov	r0, sp
   b8bee:	f009 fb25 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf2:	2205      	movs	r2, #5
   b8bf4:	4629      	mov	r1, r5
   b8bf6:	4668      	mov	r0, sp
   b8bf8:	f009 fa82 	bl	c2100 <memcmp>
   b8bfc:	b910      	cbnz	r0, b8c04 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8bfe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8c02:	e7b9      	b.n	b8b78 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8c04:	4914      	ldr	r1, [pc, #80]	; (b8c58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8c06:	4668      	mov	r0, sp
   b8c08:	f009 fb18 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c0c:	2205      	movs	r2, #5
   b8c0e:	4629      	mov	r1, r5
   b8c10:	4668      	mov	r0, sp
   b8c12:	f009 fa75 	bl	c2100 <memcmp>
   b8c16:	b918      	cbnz	r0, b8c20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8c18:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8c1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8c1e:	e7ad      	b.n	b8b7c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8c20:	490e      	ldr	r1, [pc, #56]	; (b8c5c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8c22:	4668      	mov	r0, sp
   b8c24:	f009 fb0a 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c28:	2205      	movs	r2, #5
   b8c2a:	4629      	mov	r1, r5
   b8c2c:	4668      	mov	r0, sp
   b8c2e:	f009 fa67 	bl	c2100 <memcmp>
   b8c32:	b910      	cbnz	r0, b8c3a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8c34:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8c38:	e7f0      	b.n	b8c1c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8c3a:	2000      	movs	r0, #0
   b8c3c:	e79f      	b.n	b8b7e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8c3e:	bf00      	nop
   b8c40:	000c4ad8 	.word	0x000c4ad8
   b8c44:	000c4aae 	.word	0x000c4aae
   b8c48:	000c4ab4 	.word	0x000c4ab4
   b8c4c:	000c4aba 	.word	0x000c4aba
   b8c50:	000c4ac0 	.word	0x000c4ac0
   b8c54:	000c4ac6 	.word	0x000c4ac6
   b8c58:	000c4acc 	.word	0x000c4acc
   b8c5c:	000c4ad2 	.word	0x000c4ad2

000b8c60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8c60:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8c62:	4b30      	ldr	r3, [pc, #192]	; (b8d24 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8c64:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c66:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c6a:	6818      	ldr	r0, [r3, #0]
   b8c6c:	9000      	str	r0, [sp, #0]
   b8c6e:	889b      	ldrh	r3, [r3, #4]
   b8c70:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c74:	2205      	movs	r2, #5
   b8c76:	4621      	mov	r1, r4
   b8c78:	4668      	mov	r0, sp
   b8c7a:	f009 fa41 	bl	c2100 <memcmp>
   b8c7e:	b910      	cbnz	r0, b8c86 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8c80:	2064      	movs	r0, #100	; 0x64
}
   b8c82:	b002      	add	sp, #8
   b8c84:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c86:	4928      	ldr	r1, [pc, #160]	; (b8d28 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8c88:	4668      	mov	r0, sp
   b8c8a:	f009 fad7 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c8e:	2205      	movs	r2, #5
   b8c90:	4621      	mov	r1, r4
   b8c92:	4668      	mov	r0, sp
   b8c94:	f009 fa34 	bl	c2100 <memcmp>
   b8c98:	2800      	cmp	r0, #0
   b8c9a:	d0f1      	beq.n	b8c80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8c9c:	4923      	ldr	r1, [pc, #140]	; (b8d2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8c9e:	4668      	mov	r0, sp
   b8ca0:	f009 facc 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ca4:	2205      	movs	r2, #5
   b8ca6:	4621      	mov	r1, r4
   b8ca8:	4668      	mov	r0, sp
   b8caa:	f009 fa29 	bl	c2100 <memcmp>
   b8cae:	2800      	cmp	r0, #0
   b8cb0:	d0e6      	beq.n	b8c80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8cb2:	491f      	ldr	r1, [pc, #124]	; (b8d30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8cb4:	4668      	mov	r0, sp
   b8cb6:	f009 fac1 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cba:	2205      	movs	r2, #5
   b8cbc:	4621      	mov	r1, r4
   b8cbe:	4668      	mov	r0, sp
   b8cc0:	f009 fa1e 	bl	c2100 <memcmp>
   b8cc4:	2800      	cmp	r0, #0
   b8cc6:	d0db      	beq.n	b8c80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8cc8:	491a      	ldr	r1, [pc, #104]	; (b8d34 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8cca:	4668      	mov	r0, sp
   b8ccc:	f009 fab6 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cd0:	2205      	movs	r2, #5
   b8cd2:	4621      	mov	r1, r4
   b8cd4:	4668      	mov	r0, sp
   b8cd6:	f009 fa13 	bl	c2100 <memcmp>
   b8cda:	2800      	cmp	r0, #0
   b8cdc:	d0d0      	beq.n	b8c80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8cde:	4916      	ldr	r1, [pc, #88]	; (b8d38 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8ce0:	4668      	mov	r0, sp
   b8ce2:	f009 faab 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ce6:	2205      	movs	r2, #5
   b8ce8:	4621      	mov	r1, r4
   b8cea:	4668      	mov	r0, sp
   b8cec:	f009 fa08 	bl	c2100 <memcmp>
   b8cf0:	2800      	cmp	r0, #0
   b8cf2:	d0c5      	beq.n	b8c80 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8cf4:	4911      	ldr	r1, [pc, #68]	; (b8d3c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8cf6:	4668      	mov	r0, sp
   b8cf8:	f009 faa0 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cfc:	2205      	movs	r2, #5
   b8cfe:	4621      	mov	r1, r4
   b8d00:	4668      	mov	r0, sp
   b8d02:	f009 f9fd 	bl	c2100 <memcmp>
   b8d06:	b148      	cbz	r0, b8d1c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8d08:	490d      	ldr	r1, [pc, #52]	; (b8d40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8d0a:	4668      	mov	r0, sp
   b8d0c:	f009 fa96 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d10:	2205      	movs	r2, #5
   b8d12:	4621      	mov	r1, r4
   b8d14:	4668      	mov	r0, sp
   b8d16:	f009 f9f3 	bl	c2100 <memcmp>
   b8d1a:	b908      	cbnz	r0, b8d20 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8d1c:	2032      	movs	r0, #50	; 0x32
   b8d1e:	e7b0      	b.n	b8c82 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8d20:	2000      	movs	r0, #0
   b8d22:	e7ae      	b.n	b8c82 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8d24:	000c4ad8 	.word	0x000c4ad8
   b8d28:	000c4aae 	.word	0x000c4aae
   b8d2c:	000c4ab4 	.word	0x000c4ab4
   b8d30:	000c4aba 	.word	0x000c4aba
   b8d34:	000c4ac0 	.word	0x000c4ac0
   b8d38:	000c4ac6 	.word	0x000c4ac6
   b8d3c:	000c4acc 	.word	0x000c4acc
   b8d40:	000c4ad2 	.word	0x000c4ad2

000b8d44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d46:	4b38      	ldr	r3, [pc, #224]	; (b8e28 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8d48:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d4a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d4e:	6818      	ldr	r0, [r3, #0]
   b8d50:	9000      	str	r0, [sp, #0]
   b8d52:	889b      	ldrh	r3, [r3, #4]
   b8d54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d58:	2205      	movs	r2, #5
   b8d5a:	4629      	mov	r1, r5
   b8d5c:	4668      	mov	r0, sp
   b8d5e:	f009 f9cf 	bl	c2100 <memcmp>
   b8d62:	b918      	cbnz	r0, b8d6c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8d64:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8d68:	b003      	add	sp, #12
   b8d6a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d6c:	492f      	ldr	r1, [pc, #188]	; (b8e2c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8d6e:	4668      	mov	r0, sp
   b8d70:	f009 fa64 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d74:	2205      	movs	r2, #5
   b8d76:	4629      	mov	r1, r5
   b8d78:	4668      	mov	r0, sp
   b8d7a:	f009 f9c1 	bl	c2100 <memcmp>
   b8d7e:	b910      	cbnz	r0, b8d86 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8d80:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8d84:	e7f0      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d86:	492a      	ldr	r1, [pc, #168]	; (b8e30 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8d88:	4668      	mov	r0, sp
   b8d8a:	f009 fa57 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d8e:	2205      	movs	r2, #5
   b8d90:	4629      	mov	r1, r5
   b8d92:	4668      	mov	r0, sp
   b8d94:	f009 f9b4 	bl	c2100 <memcmp>
   b8d98:	b910      	cbnz	r0, b8da0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8d9a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8d9e:	e7e3      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8da0:	4924      	ldr	r1, [pc, #144]	; (b8e34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8da2:	4668      	mov	r0, sp
   b8da4:	f009 fa4a 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da8:	2205      	movs	r2, #5
   b8daa:	4629      	mov	r1, r5
   b8dac:	4668      	mov	r0, sp
   b8dae:	f009 f9a7 	bl	c2100 <memcmp>
   b8db2:	b910      	cbnz	r0, b8dba <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8db4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8db8:	e7d6      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8dba:	491f      	ldr	r1, [pc, #124]	; (b8e38 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8dbc:	4668      	mov	r0, sp
   b8dbe:	f009 fa3d 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dc2:	2205      	movs	r2, #5
   b8dc4:	4629      	mov	r1, r5
   b8dc6:	4668      	mov	r0, sp
   b8dc8:	f009 f99a 	bl	c2100 <memcmp>
   b8dcc:	b910      	cbnz	r0, b8dd4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8dce:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8dd2:	e7c9      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8dd4:	4919      	ldr	r1, [pc, #100]	; (b8e3c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8dd6:	4668      	mov	r0, sp
   b8dd8:	f009 fa30 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ddc:	2205      	movs	r2, #5
   b8dde:	4629      	mov	r1, r5
   b8de0:	4668      	mov	r0, sp
   b8de2:	f009 f98d 	bl	c2100 <memcmp>
   b8de6:	b910      	cbnz	r0, b8dee <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8de8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8dec:	e7bc      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8dee:	4914      	ldr	r1, [pc, #80]	; (b8e40 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8df0:	4668      	mov	r0, sp
   b8df2:	f009 fa23 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8df6:	2205      	movs	r2, #5
   b8df8:	4629      	mov	r1, r5
   b8dfa:	4668      	mov	r0, sp
   b8dfc:	f009 f980 	bl	c2100 <memcmp>
   b8e00:	b910      	cbnz	r0, b8e08 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b8e02:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8e06:	e7af      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8e08:	490e      	ldr	r1, [pc, #56]	; (b8e44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b8e0a:	4668      	mov	r0, sp
   b8e0c:	f009 fa16 	bl	c223c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e10:	2205      	movs	r2, #5
   b8e12:	4629      	mov	r1, r5
   b8e14:	4668      	mov	r0, sp
   b8e16:	f009 f973 	bl	c2100 <memcmp>
   b8e1a:	b910      	cbnz	r0, b8e22 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b8e1c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8e20:	e7a2      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b8e22:	2000      	movs	r0, #0
   b8e24:	e7a0      	b.n	b8d68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b8e26:	bf00      	nop
   b8e28:	000c4ad8 	.word	0x000c4ad8
   b8e2c:	000c4aae 	.word	0x000c4aae
   b8e30:	000c4ab4 	.word	0x000c4ab4
   b8e34:	000c4aba 	.word	0x000c4aba
   b8e38:	000c4ac0 	.word	0x000c4ac0
   b8e3c:	000c4ac6 	.word	0x000c4ac6
   b8e40:	000c4acc 	.word	0x000c4acc
   b8e44:	000c4ad2 	.word	0x000c4ad2

000b8e48 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b8e48:	4770      	bx	lr
	...

000b8e4c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b8e4c:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b8e4e:	8813      	ldrh	r3, [r2, #0]
   b8e50:	4d0c      	ldr	r5, [pc, #48]	; (b8e84 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b8e52:	2b01      	cmp	r3, #1
{
   b8e54:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b8e56:	d10e      	bne.n	b8e76 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b8e58:	020a      	lsls	r2, r1, #8
   b8e5a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8e5e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b8e60:	3301      	adds	r3, #1
   b8e62:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b8e64:	f7ff fff0 	bl	b8e48 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b8e68:	8820      	ldrh	r0, [r4, #0]
   b8e6a:	882b      	ldrh	r3, [r5, #0]
}
   b8e6c:	4298      	cmp	r0, r3
   b8e6e:	bf14      	ite	ne
   b8e70:	2003      	movne	r0, #3
   b8e72:	2000      	moveq	r0, #0
   b8e74:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b8e76:	2b02      	cmp	r3, #2
   b8e78:	d1f2      	bne.n	b8e60 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b8e7a:	882a      	ldrh	r2, [r5, #0]
   b8e7c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8e7e:	3206      	adds	r2, #6
   b8e80:	e7ed      	b.n	b8e5e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b8e82:	bf00      	nop
   b8e84:	2003e61a 	.word	0x2003e61a

000b8e88 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b8e88:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b8e8a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b8e8c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b8e8e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b8e90:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b8e92:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b8e96:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b8e9a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b8e9e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b8ea2:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b8ea6:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b8ea8:	4413      	add	r3, r2
   b8eaa:	734b      	strb	r3, [r1, #13]
   b8eac:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b8eae:	b293      	uxth	r3, r2
   b8eb0:	429c      	cmp	r4, r3
   b8eb2:	d90a      	bls.n	b8eca <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b8eb4:	688b      	ldr	r3, [r1, #8]
   b8eb6:	7b08      	ldrb	r0, [r1, #12]
   b8eb8:	5c9b      	ldrb	r3, [r3, r2]
   b8eba:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b8ebc:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b8ebe:	b2db      	uxtb	r3, r3
   b8ec0:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b8ec2:	4403      	add	r3, r0
   b8ec4:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b8ec6:	3201      	adds	r2, #1
   b8ec8:	e7f1      	b.n	b8eae <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b8eca:	bd30      	pop	{r4, r5, pc}

000b8ecc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b8ecc:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b8ed0:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b8ed2:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b8ed6:	b2c9      	uxtb	r1, r1
   b8ed8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b8edc:	4419      	add	r1, r3
   b8ede:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b8ee2:	4770      	bx	lr

000b8ee4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b8ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b8ee8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b8eec:	f10b 0b08 	add.w	fp, fp, #8
   b8ef0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b8ef4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8ef8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b8efc:	4604      	mov	r4, r0
   b8efe:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b8f00:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b8f02:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8f04:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b8f06:	f1ba 0f00 	cmp.w	sl, #0
   b8f0a:	f000 80a6 	beq.w	b905a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b8f0e:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b8f10:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b8f14:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f18:	4556      	cmp	r6, sl
   b8f1a:	bf28      	it	cs
   b8f1c:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b8f1e:	ebaa 0a06 	sub.w	sl, sl, r6
   b8f22:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b8f26:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b8f2a:	bf02      	ittt	eq
   b8f2c:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b8f30:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b8f32:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b8f36:	f006 f965 	bl	bf204 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b8f3a:	f1b9 0f00 	cmp.w	r9, #0
   b8f3e:	d15c      	bne.n	b8ffa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8f40:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f44:	6803      	ldr	r3, [r0, #0]
   b8f46:	21b5      	movs	r1, #181	; 0xb5
   b8f48:	689b      	ldr	r3, [r3, #8]
   b8f4a:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b8f4c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f50:	6803      	ldr	r3, [r0, #0]
   b8f52:	2162      	movs	r1, #98	; 0x62
   b8f54:	689b      	ldr	r3, [r3, #8]
   b8f56:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b8f58:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f5c:	7829      	ldrb	r1, [r5, #0]
   b8f5e:	6803      	ldr	r3, [r0, #0]
   b8f60:	689b      	ldr	r3, [r3, #8]
   b8f62:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b8f64:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f68:	7869      	ldrb	r1, [r5, #1]
   b8f6a:	6803      	ldr	r3, [r0, #0]
   b8f6c:	689b      	ldr	r3, [r3, #8]
   b8f6e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b8f70:	78a9      	ldrb	r1, [r5, #2]
   b8f72:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f76:	f7fe fdc1 	bl	b7afc <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b8f7a:	8869      	ldrh	r1, [r5, #2]
   b8f7c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f80:	0a09      	lsrs	r1, r1, #8
   b8f82:	f7fe fdbb 	bl	b7afc <_ZN7TwoWire5writeEi.isra.0>
   b8f86:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8f88:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8f8a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f8e:	fa1f f983 	uxth.w	r9, r3
   b8f92:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8f96:	454a      	cmp	r2, r9
   b8f98:	b2bf      	uxth	r7, r7
   b8f9a:	d90d      	bls.n	b8fb8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b8f9c:	42be      	cmp	r6, r7
   b8f9e:	d90b      	bls.n	b8fb8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8fa0:	68aa      	ldr	r2, [r5, #8]
   b8fa2:	6801      	ldr	r1, [r0, #0]
   b8fa4:	9301      	str	r3, [sp, #4]
   b8fa6:	4442      	add	r2, r8
   b8fa8:	688f      	ldr	r7, [r1, #8]
   b8faa:	5cd1      	ldrb	r1, [r2, r3]
   b8fac:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8fae:	9b01      	ldr	r3, [sp, #4]
   b8fb0:	3301      	adds	r3, #1
   b8fb2:	e7e9      	b.n	b8f88 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b8fb4:	46b9      	mov	r9, r7
   b8fb6:	e7a6      	b.n	b8f06 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b8fb8:	3e02      	subs	r6, #2
      startSpot += x;
   b8fba:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b8fbc:	42b7      	cmp	r7, r6
      startSpot += x;
   b8fbe:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b8fc2:	d10c      	bne.n	b8fde <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b8fc4:	6803      	ldr	r3, [r0, #0]
   b8fc6:	7b29      	ldrb	r1, [r5, #12]
   b8fc8:	689b      	ldr	r3, [r3, #8]
   b8fca:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b8fcc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8fd0:	7b69      	ldrb	r1, [r5, #13]
   b8fd2:	6803      	ldr	r3, [r0, #0]
   b8fd4:	689b      	ldr	r3, [r3, #8]
   b8fd6:	4798      	blx	r3
        bytesSent += 2;
   b8fd8:	f109 0708 	add.w	r7, r9, #8
   b8fdc:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b8fde:	455f      	cmp	r7, fp
   b8fe0:	d2e8      	bcs.n	b8fb4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b8fe2:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b8fe6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8fea:	f006 f912 	bl	bf212 <_ZN7TwoWire15endTransmissionEh>
   b8fee:	2800      	cmp	r0, #0
   b8ff0:	d0e0      	beq.n	b8fb4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b8ff2:	200c      	movs	r0, #12
}
   b8ff4:	b003      	add	sp, #12
   b8ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8ffa:	2200      	movs	r2, #0
   b8ffc:	b291      	uxth	r1, r2
   b8ffe:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9002:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9004:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9008:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b900a:	d910      	bls.n	b902e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b900c:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9010:	eb08 0c02 	add.w	ip, r8, r2
   b9014:	1c53      	adds	r3, r2, #1
   b9016:	45f4      	cmp	ip, lr
   b9018:	9301      	str	r3, [sp, #4]
   b901a:	da08      	bge.n	b902e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b901c:	68a9      	ldr	r1, [r5, #8]
   b901e:	6802      	ldr	r2, [r0, #0]
   b9020:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9024:	6892      	ldr	r2, [r2, #8]
   b9026:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9028:	9b01      	ldr	r3, [sp, #4]
   b902a:	461a      	mov	r2, r3
   b902c:	e7e6      	b.n	b8ffc <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b902e:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9030:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9032:	429f      	cmp	r7, r3
      startSpot += x;
   b9034:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9038:	d1d1      	bne.n	b8fde <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b903a:	3e02      	subs	r6, #2
   b903c:	42b2      	cmp	r2, r6
   b903e:	d1ce      	bne.n	b8fde <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9040:	6803      	ldr	r3, [r0, #0]
   b9042:	7b29      	ldrb	r1, [r5, #12]
   b9044:	689b      	ldr	r3, [r3, #8]
   b9046:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9048:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b904c:	7b69      	ldrb	r1, [r5, #13]
   b904e:	6803      	ldr	r3, [r0, #0]
   b9050:	689b      	ldr	r3, [r3, #8]
   b9052:	4798      	blx	r3
        bytesSent += 2;
   b9054:	fa1f f78b 	uxth.w	r7, fp
   b9058:	e7c1      	b.n	b8fde <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b905a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b905e:	f006 f8dc 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
   b9062:	2800      	cmp	r0, #0
   b9064:	d0c6      	beq.n	b8ff4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9066:	e7c4      	b.n	b8ff2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9068 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9068:	b570      	push	{r4, r5, r6, lr}
   b906a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b906c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9070:	6803      	ldr	r3, [r0, #0]
{
   b9072:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9074:	689b      	ldr	r3, [r3, #8]
   b9076:	21b5      	movs	r1, #181	; 0xb5
   b9078:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b907a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b907e:	6803      	ldr	r3, [r0, #0]
   b9080:	2162      	movs	r1, #98	; 0x62
   b9082:	689b      	ldr	r3, [r3, #8]
   b9084:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9086:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b908a:	7821      	ldrb	r1, [r4, #0]
   b908c:	6803      	ldr	r3, [r0, #0]
   b908e:	689b      	ldr	r3, [r3, #8]
   b9090:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9092:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9096:	7861      	ldrb	r1, [r4, #1]
   b9098:	6803      	ldr	r3, [r0, #0]
   b909a:	689b      	ldr	r3, [r3, #8]
   b909c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b909e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b90a2:	78a1      	ldrb	r1, [r4, #2]
   b90a4:	6803      	ldr	r3, [r0, #0]
   b90a6:	689b      	ldr	r3, [r3, #8]
   b90a8:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b90aa:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b90ae:	8861      	ldrh	r1, [r4, #2]
   b90b0:	6803      	ldr	r3, [r0, #0]
   b90b2:	0a09      	lsrs	r1, r1, #8
   b90b4:	689b      	ldr	r3, [r3, #8]
   b90b6:	4798      	blx	r3
   b90b8:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b90ba:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b90be:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b90c0:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b90c2:	b2b2      	uxth	r2, r6
   b90c4:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b90c6:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b90c8:	d904      	bls.n	b90d4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b90ca:	68a1      	ldr	r1, [r4, #8]
   b90cc:	5c89      	ldrb	r1, [r1, r2]
   b90ce:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b90d0:	3601      	adds	r6, #1
   b90d2:	e7f2      	b.n	b90ba <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b90d4:	7b21      	ldrb	r1, [r4, #12]
   b90d6:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b90d8:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b90dc:	7b61      	ldrb	r1, [r4, #13]
   b90de:	6803      	ldr	r3, [r0, #0]
}
   b90e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b90e4:	689b      	ldr	r3, [r3, #8]
   b90e6:	4718      	bx	r3

000b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b90e8:	b510      	push	{r4, lr}
   b90ea:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b90ec:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b90f0:	f007 fd34 	bl	c0b5c <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b90f4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b90f8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b90fc:	429a      	cmp	r2, r3
   b90fe:	d90b      	bls.n	b9118 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9100:	28ff      	cmp	r0, #255	; 0xff
   b9102:	d101      	bne.n	b9108 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9104:	7822      	ldrb	r2, [r4, #0]
   b9106:	b13a      	cbz	r2, b9118 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9108:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b910c:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b910e:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9112:	3301      	adds	r3, #1
   b9114:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9118:	bd10      	pop	{r4, pc}
	...

000b911c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b911c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9120:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9124:	4604      	mov	r4, r0
   b9126:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9128:	b97b      	cbnz	r3, b914a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b912a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b912e:	b923      	cbnz	r3, b913a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9130:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9134:	2b00      	cmp	r3, #0
   b9136:	f000 80ca 	beq.w	b92ce <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b913a:	4966      	ldr	r1, [pc, #408]	; (b92d4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b913c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9140:	b004      	add	sp, #16
   b9142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9146:	f007 bb2a 	b.w	c079e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b914a:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b914e:	4a62      	ldr	r2, [pc, #392]	; (b92d8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9150:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9152:	2600      	movs	r6, #0
   b9154:	2301      	movs	r3, #1
   b9156:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b915a:	4669      	mov	r1, sp
   b915c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9160:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9164:	9200      	str	r2, [sp, #0]
   b9166:	f88d 6004 	strb.w	r6, [sp, #4]
   b916a:	f007 fc57 	bl	c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b916e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9172:	4631      	mov	r1, r6
   b9174:	f008 f8dd 	bl	c1332 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9178:	21b5      	movs	r1, #181	; 0xb5
   b917a:	4620      	mov	r0, r4
   b917c:	f7ff ffb4 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9180:	2162      	movs	r1, #98	; 0x62
   b9182:	4620      	mov	r0, r4
   b9184:	f7ff ffb0 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9188:	7829      	ldrb	r1, [r5, #0]
   b918a:	4620      	mov	r0, r4
   b918c:	f7ff ffac 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9190:	7869      	ldrb	r1, [r5, #1]
   b9192:	4620      	mov	r0, r4
   b9194:	f7ff ffa8 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9198:	78a9      	ldrb	r1, [r5, #2]
   b919a:	4620      	mov	r0, r4
   b919c:	f7ff ffa4 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b91a0:	8869      	ldrh	r1, [r5, #2]
   b91a2:	4620      	mov	r0, r4
   b91a4:	0a09      	lsrs	r1, r1, #8
   b91a6:	f7ff ff9f 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b91aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b91ae:	2b00      	cmp	r3, #0
   b91b0:	d042      	beq.n	b9238 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b91b2:	494a      	ldr	r1, [pc, #296]	; (b92dc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b91b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91b8:	f007 faf1 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b91bc:	2210      	movs	r2, #16
   b91be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91c2:	21b5      	movs	r1, #181	; 0xb5
   b91c4:	f7fe fc8a 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b91c8:	4945      	ldr	r1, [pc, #276]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b91ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91ce:	f007 fae6 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b91d2:	2210      	movs	r2, #16
   b91d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91d8:	2162      	movs	r1, #98	; 0x62
   b91da:	f7fe fc7f 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b91de:	4940      	ldr	r1, [pc, #256]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b91e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91e4:	f007 fadb 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b91e8:	2210      	movs	r2, #16
   b91ea:	7829      	ldrb	r1, [r5, #0]
   b91ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91f0:	f7fe fc74 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b91f4:	493a      	ldr	r1, [pc, #232]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b91f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91fa:	f007 fad0 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b91fe:	2210      	movs	r2, #16
   b9200:	7869      	ldrb	r1, [r5, #1]
   b9202:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9206:	f7fe fc69 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b920a:	4935      	ldr	r1, [pc, #212]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b920c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9210:	f007 fac5 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9214:	2210      	movs	r2, #16
   b9216:	78a9      	ldrb	r1, [r5, #2]
   b9218:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b921c:	f007 fadb 	bl	c07d6 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9220:	492f      	ldr	r1, [pc, #188]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9222:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9226:	f007 faba 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b922a:	8869      	ldrh	r1, [r5, #2]
   b922c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9230:	2210      	movs	r2, #16
   b9232:	0a09      	lsrs	r1, r1, #8
   b9234:	f007 facf 	bl	c07d6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9238:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b923c:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b923e:	886a      	ldrh	r2, [r5, #2]
   b9240:	b2b3      	uxth	r3, r6
   b9242:	429a      	cmp	r2, r3
   b9244:	d916      	bls.n	b9274 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9246:	461f      	mov	r7, r3
   b9248:	68ab      	ldr	r3, [r5, #8]
   b924a:	4620      	mov	r0, r4
   b924c:	5dd9      	ldrb	r1, [r3, r7]
   b924e:	f7ff ff4b 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9252:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9256:	b15b      	cbz	r3, b9270 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9258:	4641      	mov	r1, r8
   b925a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b925e:	f007 fa9e 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9262:	68ab      	ldr	r3, [r5, #8]
   b9264:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9268:	5dd9      	ldrb	r1, [r3, r7]
   b926a:	2210      	movs	r2, #16
   b926c:	f7fe fc36 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9270:	3601      	adds	r6, #1
   b9272:	e7e4      	b.n	b923e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9274:	7b29      	ldrb	r1, [r5, #12]
   b9276:	4620      	mov	r0, r4
   b9278:	f7ff ff36 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b927c:	7b69      	ldrb	r1, [r5, #13]
   b927e:	4620      	mov	r0, r4
   b9280:	f7ff ff32 	bl	b90e8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9284:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9288:	2101      	movs	r1, #1
   b928a:	f008 f852 	bl	c1332 <digitalWrite>
  _spiPort->endTransaction();
   b928e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9292:	f007 fba9 	bl	c09e8 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9296:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b929a:	b1c3      	cbz	r3, b92ce <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b929c:	4910      	ldr	r1, [pc, #64]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b929e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92a2:	f007 fa7c 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b92a6:	7b29      	ldrb	r1, [r5, #12]
   b92a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92ac:	2210      	movs	r2, #16
   b92ae:	f7fe fc15 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b92b2:	490b      	ldr	r1, [pc, #44]	; (b92e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b92b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92b8:	f007 fa71 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b92bc:	7b69      	ldrb	r1, [r5, #13]
   b92be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92c2:	2210      	movs	r2, #16
}
   b92c4:	b004      	add	sp, #16
   b92c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b92ca:	f7fe bc0e 	b.w	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b92ce:	b004      	add	sp, #16
   b92d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b92d4:	000c4ade 	.word	0x000c4ade
   b92d8:	000c48bc 	.word	0x000c48bc
   b92dc:	000c4b13 	.word	0x000c4b13
   b92e0:	000c5a61 	.word	0x000c5a61

000b92e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b92e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b92e6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b92ea:	4604      	mov	r4, r0
   b92ec:	460d      	mov	r5, r1
   b92ee:	4616      	mov	r6, r2
  if (_printDebug == true)
   b92f0:	2b00      	cmp	r3, #0
   b92f2:	f000 8082 	beq.w	b93fa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b92f6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b92fa:	4940      	ldr	r1, [pc, #256]	; (b93fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b92fc:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9300:	f007 fa4d 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9304:	782b      	ldrb	r3, [r5, #0]
   b9306:	2b01      	cmp	r3, #1
   b9308:	d13c      	bne.n	b9384 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b930a:	493d      	ldr	r1, [pc, #244]	; (b9400 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b930c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9310:	f007 fa45 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9314:	493b      	ldr	r1, [pc, #236]	; (b9404 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9316:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b931a:	f007 fa40 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b931e:	882b      	ldrh	r3, [r5, #0]
   b9320:	f240 7201 	movw	r2, #1793	; 0x701
   b9324:	4293      	cmp	r3, r2
   b9326:	d145      	bne.n	b93b4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9328:	4937      	ldr	r1, [pc, #220]	; (b9408 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b932a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b932e:	f007 fa36 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9332:	4936      	ldr	r1, [pc, #216]	; (b940c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9334:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9338:	f007 fa31 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
   b933c:	8869      	ldrh	r1, [r5, #2]
   b933e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9342:	2210      	movs	r2, #16
   b9344:	f007 fa47 	bl	c07d6 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9348:	2f01      	cmp	r7, #1
   b934a:	d101      	bne.n	b9350 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b934c:	2e00      	cmp	r6, #0
   b934e:	d049      	beq.n	b93e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9350:	492f      	ldr	r1, [pc, #188]	; (b9410 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9352:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9356:	4f2f      	ldr	r7, [pc, #188]	; (b9414 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9358:	f007 fa21 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
   b935c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b935e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9360:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9364:	b2b3      	uxth	r3, r6
   b9366:	429a      	cmp	r2, r3
   b9368:	d941      	bls.n	b93ee <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b936a:	4639      	mov	r1, r7
   b936c:	f007 fa17 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9370:	b2b3      	uxth	r3, r6
   b9372:	68a9      	ldr	r1, [r5, #8]
   b9374:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9378:	5cc9      	ldrb	r1, [r1, r3]
   b937a:	2210      	movs	r2, #16
   b937c:	f7fe fbae 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9380:	3601      	adds	r6, #1
   b9382:	e7ec      	b.n	b935e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9384:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9386:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b938a:	d101      	bne.n	b9390 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b938c:	4922      	ldr	r1, [pc, #136]	; (b9418 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b938e:	e7bf      	b.n	b9310 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9390:	2b06      	cmp	r3, #6
   b9392:	d101      	bne.n	b9398 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9394:	4921      	ldr	r1, [pc, #132]	; (b941c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9396:	e7bb      	b.n	b9310 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9398:	2b0a      	cmp	r3, #10
   b939a:	d101      	bne.n	b93a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b939c:	4920      	ldr	r1, [pc, #128]	; (b9420 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b939e:	e7b7      	b.n	b9310 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b93a0:	4920      	ldr	r1, [pc, #128]	; (b9424 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b93a2:	f007 f9fc 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b93a6:	7829      	ldrb	r1, [r5, #0]
   b93a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93ac:	2210      	movs	r2, #16
   b93ae:	f7fe fb95 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b93b2:	e7af      	b.n	b9314 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b93b4:	f640 0206 	movw	r2, #2054	; 0x806
   b93b8:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b93ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b93be:	d101      	bne.n	b93c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b93c0:	4919      	ldr	r1, [pc, #100]	; (b9428 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b93c2:	e7b4      	b.n	b932e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b93c4:	f640 1206 	movw	r2, #2310	; 0x906
   b93c8:	4293      	cmp	r3, r2
   b93ca:	d101      	bne.n	b93d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b93cc:	4917      	ldr	r1, [pc, #92]	; (b942c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b93ce:	e7ae      	b.n	b932e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b93d0:	4914      	ldr	r1, [pc, #80]	; (b9424 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b93d2:	f007 f9e4 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b93d6:	7869      	ldrb	r1, [r5, #1]
   b93d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93dc:	2210      	movs	r2, #16
   b93de:	f7fe fb7d 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b93e2:	e7a6      	b.n	b9332 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b93e4:	4912      	ldr	r1, [pc, #72]	; (b9430 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b93e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93ea:	f007 f9d8 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b93ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b93f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b93f6:	f007 b9d6 	b.w	c07a6 <_ZN5Print7printlnEv>
}
   b93fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b93fc:	000c4b24 	.word	0x000c4b24
   b9400:	000c4b29 	.word	0x000c4b29
   b9404:	000c4b39 	.word	0x000c4b39
   b9408:	000c4b3e 	.word	0x000c4b3e
   b940c:	000c4b4c 	.word	0x000c4b4c
   b9410:	000c4b55 	.word	0x000c4b55
   b9414:	000c5a61 	.word	0x000c5a61
   b9418:	000c4b2d 	.word	0x000c4b2d
   b941c:	000c4b31 	.word	0x000c4b31
   b9420:	000c4b35 	.word	0x000c4b35
   b9424:	000c4daa 	.word	0x000c4daa
   b9428:	000c4b42 	.word	0x000c4b42
   b942c:	000c4b47 	.word	0x000c4b47
   b9430:	000c4b5f 	.word	0x000c4b5f

000b9434 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9434:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9436:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b943a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b943c:	b955      	cbnz	r5, b9454 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b943e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9442:	b90b      	cbnz	r3, b9448 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9444:	2000      	movs	r0, #0
}
   b9446:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9448:	491a      	ldr	r1, [pc, #104]	; (b94b4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b944a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b944e:	f007 f9c0 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9452:	e7f7      	b.n	b9444 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9454:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9458:	b12b      	cbz	r3, b9466 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b945a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b945e:	2b00      	cmp	r3, #0
   b9460:	d0f0      	beq.n	b9444 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9462:	4915      	ldr	r1, [pc, #84]	; (b94b8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9464:	e7f1      	b.n	b944a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9466:	4628      	mov	r0, r5
   b9468:	f7fa fe17 	bl	b409a <_Znaj>
   b946c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9470:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9474:	b930      	cbnz	r0, b9484 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9476:	b91b      	cbnz	r3, b9480 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9478:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b947c:	2b00      	cmp	r3, #0
   b947e:	d0e1      	beq.n	b9444 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9480:	490e      	ldr	r1, [pc, #56]	; (b94bc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9482:	e7e2      	b.n	b944a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9484:	b17b      	cbz	r3, b94a6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9486:	490e      	ldr	r1, [pc, #56]	; (b94c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9488:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b948c:	f007 f987 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9490:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9494:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9498:	220a      	movs	r2, #10
   b949a:	4628      	mov	r0, r5
   b949c:	f007 f99b 	bl	c07d6 <_ZN5Print11printNumberEmh>
        n += println();
   b94a0:	4628      	mov	r0, r5
   b94a2:	f007 f980 	bl	c07a6 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b94a6:	2300      	movs	r3, #0
   b94a8:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b94ac:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b94b0:	2001      	movs	r0, #1
   b94b2:	e7c8      	b.n	b9446 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b94b4:	000c4b71 	.word	0x000c4b71
   b94b8:	000c4bc2 	.word	0x000c4bc2
   b94bc:	000c4c05 	.word	0x000c4c05
   b94c0:	000c4c29 	.word	0x000c4c29

000b94c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b94c4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b94c8:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b94cc:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b94ce:	bf3b      	ittet	cc
   b94d0:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b94d4:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b94d6:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b94d8:	1a80      	subcc	r0, r0, r2
   b94da:	b280      	uxth	r0, r0
}
   b94dc:	4770      	bx	lr

000b94de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b94de:	b508      	push	{r3, lr}
   b94e0:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b94e2:	f7ff ffef 	bl	b94c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b94e6:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b94ea:	1a18      	subs	r0, r3, r0
}
   b94ec:	b280      	uxth	r0, r0
   b94ee:	bd08      	pop	{r3, pc}

000b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b94f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b94f4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b94f8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b94fc:	1aed      	subs	r5, r5, r3
   b94fe:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9500:	4295      	cmp	r5, r2
   b9502:	bf28      	it	cs
   b9504:	4615      	movcs	r5, r2
{
   b9506:	4616      	mov	r6, r2
   b9508:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b950a:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b950e:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9510:	462a      	mov	r2, r5
   b9512:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9514:	b2bf      	uxth	r7, r7
{
   b9516:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9518:	f008 fe02 	bl	c2120 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b951c:	b19f      	cbz	r7, b9546 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b951e:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9522:	463a      	mov	r2, r7
   b9524:	eb08 0105 	add.w	r1, r8, r5
   b9528:	f008 fdfa 	bl	c2120 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b952c:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9530:	4620      	mov	r0, r4
   b9532:	f7ff ffc7 	bl	b94c4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9536:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b953a:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b953c:	bf38      	it	cc
   b953e:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9546:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b954a:	4416      	add	r6, r2
   b954c:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9550:	e7ee      	b.n	b9530 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9554 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9554:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9556:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b955a:	4604      	mov	r4, r0
   b955c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b955e:	b113      	cbz	r3, b9566 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9560:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9564:	b953      	cbnz	r3, b957c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9566:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b956a:	b128      	cbz	r0, b9578 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b956c:	4924      	ldr	r1, [pc, #144]	; (b9600 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b956e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9572:	f007 f92e 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9576:	2000      	movs	r0, #0
}
   b9578:	b003      	add	sp, #12
   b957a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b957c:	f7ff ffaf 	bl	b94de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9580:	886b      	ldrh	r3, [r5, #2]
   b9582:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9584:	b29b      	uxth	r3, r3
   b9586:	4283      	cmp	r3, r0
   b9588:	d908      	bls.n	b959c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b958a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b958e:	b91b      	cbnz	r3, b9598 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9590:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9594:	2800      	cmp	r0, #0
   b9596:	d0ef      	beq.n	b9578 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9598:	491a      	ldr	r1, [pc, #104]	; (b9604 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b959a:	e7e8      	b.n	b956e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b959c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b95a0:	2202      	movs	r2, #2
   b95a2:	4669      	mov	r1, sp
   b95a4:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b95a6:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b95aa:	f7ff ffa1 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b95ae:	2201      	movs	r2, #1
   b95b0:	4629      	mov	r1, r5
   b95b2:	4620      	mov	r0, r4
   b95b4:	f7ff ff9c 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b95b8:	2201      	movs	r2, #1
   b95ba:	18a9      	adds	r1, r5, r2
   b95bc:	4620      	mov	r0, r4
   b95be:	f7ff ff97 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b95c2:	886b      	ldrh	r3, [r5, #2]
   b95c4:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b95c8:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b95ca:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b95cc:	a901      	add	r1, sp, #4
   b95ce:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b95d0:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b95d4:	f7ff ff8c 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b95d8:	886a      	ldrh	r2, [r5, #2]
   b95da:	68a9      	ldr	r1, [r5, #8]
   b95dc:	4620      	mov	r0, r4
   b95de:	f7ff ff87 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b95e2:	2201      	movs	r2, #1
   b95e4:	f105 010c 	add.w	r1, r5, #12
   b95e8:	4620      	mov	r0, r4
   b95ea:	f7ff ff81 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b95ee:	4620      	mov	r0, r4
   b95f0:	2201      	movs	r2, #1
   b95f2:	f105 010d 	add.w	r1, r5, #13
   b95f6:	f7ff ff7b 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b95fa:	2001      	movs	r0, #1
   b95fc:	e7bc      	b.n	b9578 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b95fe:	bf00      	nop
   b9600:	000c4c4f 	.word	0x000c4c4f
   b9604:	000c4c77 	.word	0x000c4c77

000b9608 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b960c:	780e      	ldrb	r6, [r1, #0]
   b960e:	2e0d      	cmp	r6, #13
{
   b9610:	4604      	mov	r4, r0
   b9612:	460d      	mov	r5, r1
  switch (msg->cls)
   b9614:	f001 8228 	beq.w	baa68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9618:	d809      	bhi.n	b962e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b961a:	2e02      	cmp	r6, #2
   b961c:	f000 879a 	beq.w	ba554 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9620:	2e06      	cmp	r6, #6
   b9622:	f001 81cc 	beq.w	ba9be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9626:	2e01      	cmp	r6, #1
   b9628:	d04f      	beq.n	b96ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b962a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b962e:	2e13      	cmp	r6, #19
   b9630:	f001 83eb 	beq.w	bae0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9634:	2e28      	cmp	r6, #40	; 0x28
   b9636:	f001 84ca 	beq.w	bafce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b963a:	2e10      	cmp	r6, #16
   b963c:	d1f5      	bne.n	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b963e:	680b      	ldr	r3, [r1, #0]
   b9640:	4a8e      	ldr	r2, [pc, #568]	; (b987c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9646:	4293      	cmp	r3, r2
   b9648:	f041 826a 	bne.w	bab20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b964c:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b964e:	2e00      	cmp	r6, #0
   b9650:	d0eb      	beq.n	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9652:	68a8      	ldr	r0, [r5, #8]
   b9654:	2100      	movs	r1, #0
   b9656:	f7fe fa21 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b965a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b965c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b965e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9660:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9662:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9664:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9666:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9668:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b966a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b966c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b966e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9670:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9672:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9674:	68a8      	ldr	r0, [r5, #8]
   b9676:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9678:	2108      	movs	r1, #8
   b967a:	f7fe fa0f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b967e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9680:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9682:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9684:	210c      	movs	r1, #12
   b9686:	f7fe fa16 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b968a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b968c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b968e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9690:	210e      	movs	r1, #14
   b9692:	f7fe fa10 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9696:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9698:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b969a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b969e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b96a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b96a2:	6a1a      	ldr	r2, [r3, #32]
   b96a4:	b17a      	cbz	r2, b96c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b96a6:	7819      	ldrb	r1, [r3, #0]
   b96a8:	0708      	lsls	r0, r1, #28
   b96aa:	d40c      	bmi.n	b96c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b96ac:	1d19      	adds	r1, r3, #4
   b96ae:	3314      	adds	r3, #20
   b96b0:	f851 0b04 	ldr.w	r0, [r1], #4
   b96b4:	f842 0b04 	str.w	r0, [r2], #4
   b96b8:	4299      	cmp	r1, r3
   b96ba:	d1f9      	bne.n	b96b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b96bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b96be:	7813      	ldrb	r3, [r2, #0]
   b96c0:	f043 0308 	orr.w	r3, r3, #8
   b96c4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b96c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b96c8:	e03d      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b96ca:	680b      	ldr	r3, [r1, #0]
   b96cc:	4a6c      	ldr	r2, [pc, #432]	; (b9880 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b96ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b96d2:	4293      	cmp	r3, r2
   b96d4:	d141      	bne.n	b975a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b96d6:	68c6      	ldr	r6, [r0, #12]
   b96d8:	2e00      	cmp	r6, #0
   b96da:	d0a6      	beq.n	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b96dc:	68a8      	ldr	r0, [r5, #8]
   b96de:	2100      	movs	r1, #0
   b96e0:	f7fe f9dc 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b96e4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96e6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b96e8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96ea:	2104      	movs	r1, #4
   b96ec:	f7fe f9d6 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b96f0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b96f4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96f6:	2108      	movs	r1, #8
   b96f8:	f7fe f9d0 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b96fc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9700:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9702:	210c      	movs	r1, #12
   b9704:	f7fe f9ca 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9708:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b970a:	68a8      	ldr	r0, [r5, #8]
   b970c:	68e6      	ldr	r6, [r4, #12]
   b970e:	2110      	movs	r1, #16
   b9710:	f7fe f9c4 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9714:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9716:	68e3      	ldr	r3, [r4, #12]
   b9718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b971c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b971e:	68e3      	ldr	r3, [r4, #12]
   b9720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9722:	b17a      	cbz	r2, b9744 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9724:	7819      	ldrb	r1, [r3, #0]
   b9726:	0709      	lsls	r1, r1, #28
   b9728:	d40c      	bmi.n	b9744 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b972a:	1d19      	adds	r1, r3, #4
   b972c:	3318      	adds	r3, #24
   b972e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9732:	f842 0b04 	str.w	r0, [r2], #4
   b9736:	4299      	cmp	r1, r3
   b9738:	d1f9      	bne.n	b972e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b973a:	68e2      	ldr	r2, [r4, #12]
   b973c:	7813      	ldrb	r3, [r2, #0]
   b973e:	f043 0308 	orr.w	r3, r3, #8
   b9742:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9744:	68e3      	ldr	r3, [r4, #12]
   b9746:	781b      	ldrb	r3, [r3, #0]
   b9748:	075f      	lsls	r7, r3, #29
   b974a:	f57f af6e 	bpl.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b974e:	4629      	mov	r1, r5
   b9750:	4620      	mov	r0, r4
}
   b9752:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9756:	f7ff befd 	b.w	b9554 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b975a:	4a4a      	ldr	r2, [pc, #296]	; (b9884 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b975c:	4293      	cmp	r3, r2
   b975e:	d13d      	bne.n	b97dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9760:	6906      	ldr	r6, [r0, #16]
   b9762:	2e00      	cmp	r6, #0
   b9764:	f43f af61 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9768:	68a8      	ldr	r0, [r5, #8]
   b976a:	2100      	movs	r1, #0
   b976c:	f7fe f996 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9770:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9772:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9774:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9776:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9778:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b977a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b977c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b977e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9780:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9782:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9784:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9786:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9788:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b978a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b978c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b978e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9790:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9792:	68a8      	ldr	r0, [r5, #8]
   b9794:	6926      	ldr	r6, [r4, #16]
   b9796:	2108      	movs	r1, #8
   b9798:	f7fe f980 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b979c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b979e:	68a8      	ldr	r0, [r5, #8]
   b97a0:	6926      	ldr	r6, [r4, #16]
   b97a2:	210c      	movs	r1, #12
   b97a4:	f7fe f97a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97a8:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b97aa:	6923      	ldr	r3, [r4, #16]
   b97ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b97b0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b97b2:	6923      	ldr	r3, [r4, #16]
   b97b4:	6a1a      	ldr	r2, [r3, #32]
   b97b6:	b17a      	cbz	r2, b97d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b97b8:	7819      	ldrb	r1, [r3, #0]
   b97ba:	070e      	lsls	r6, r1, #28
   b97bc:	d40c      	bmi.n	b97d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b97be:	1d19      	adds	r1, r3, #4
   b97c0:	3314      	adds	r3, #20
   b97c2:	f851 0b04 	ldr.w	r0, [r1], #4
   b97c6:	f842 0b04 	str.w	r0, [r2], #4
   b97ca:	4299      	cmp	r1, r3
   b97cc:	d1f9      	bne.n	b97c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b97ce:	6922      	ldr	r2, [r4, #16]
   b97d0:	7813      	ldrb	r3, [r2, #0]
   b97d2:	f043 0308 	orr.w	r3, r3, #8
   b97d6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b97d8:	6923      	ldr	r3, [r4, #16]
   b97da:	e7b4      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b97dc:	4a2a      	ldr	r2, [pc, #168]	; (b9888 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b97de:	4293      	cmp	r3, r2
   b97e0:	d154      	bne.n	b988c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b97e2:	6946      	ldr	r6, [r0, #20]
   b97e4:	2e00      	cmp	r6, #0
   b97e6:	f43f af20 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b97ea:	68a8      	ldr	r0, [r5, #8]
   b97ec:	2100      	movs	r1, #0
   b97ee:	f7fe f955 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97f2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b97f4:	68a8      	ldr	r0, [r5, #8]
   b97f6:	6966      	ldr	r6, [r4, #20]
   b97f8:	2104      	movs	r1, #4
   b97fa:	f7fe f95c 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b97fe:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b9800:	68a8      	ldr	r0, [r5, #8]
   b9802:	6966      	ldr	r6, [r4, #20]
   b9804:	2106      	movs	r1, #6
   b9806:	f7fe f956 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b980a:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b980c:	68a8      	ldr	r0, [r5, #8]
   b980e:	6966      	ldr	r6, [r4, #20]
   b9810:	2108      	movs	r1, #8
   b9812:	f7fe f950 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9816:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b9818:	68a8      	ldr	r0, [r5, #8]
   b981a:	6966      	ldr	r6, [r4, #20]
   b981c:	210a      	movs	r1, #10
   b981e:	f7fe f94a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9822:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9824:	68a8      	ldr	r0, [r5, #8]
   b9826:	6966      	ldr	r6, [r4, #20]
   b9828:	210c      	movs	r1, #12
   b982a:	f7fe f944 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b982e:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b9830:	68a8      	ldr	r0, [r5, #8]
   b9832:	6966      	ldr	r6, [r4, #20]
   b9834:	210e      	movs	r1, #14
   b9836:	f7fe f93e 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b983a:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b983c:	68a8      	ldr	r0, [r5, #8]
   b983e:	6966      	ldr	r6, [r4, #20]
   b9840:	2110      	movs	r1, #16
   b9842:	f7fe f938 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9846:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9848:	6963      	ldr	r3, [r4, #20]
   b984a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b984e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9850:	6963      	ldr	r3, [r4, #20]
   b9852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9854:	b17a      	cbz	r2, b9876 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9856:	7819      	ldrb	r1, [r3, #0]
   b9858:	0708      	lsls	r0, r1, #28
   b985a:	d40c      	bmi.n	b9876 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b985c:	1d19      	adds	r1, r3, #4
   b985e:	3318      	adds	r3, #24
   b9860:	f851 0b04 	ldr.w	r0, [r1], #4
   b9864:	f842 0b04 	str.w	r0, [r2], #4
   b9868:	4299      	cmp	r1, r3
   b986a:	d1f9      	bne.n	b9860 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b986c:	6962      	ldr	r2, [r4, #20]
   b986e:	7813      	ldrb	r3, [r2, #0]
   b9870:	f043 0308 	orr.w	r3, r3, #8
   b9874:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9876:	6963      	ldr	r3, [r4, #20]
   b9878:	e765      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b987a:	bf00      	nop
   b987c:	00101400 	.word	0x00101400
   b9880:	00140100 	.word	0x00140100
   b9884:	00100300 	.word	0x00100300
   b9888:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b988c:	4a8c      	ldr	r2, [pc, #560]	; (b9ac0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b988e:	4293      	cmp	r3, r2
   b9890:	d149      	bne.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9892:	69c6      	ldr	r6, [r0, #28]
   b9894:	2e00      	cmp	r6, #0
   b9896:	f43f aec8 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b989a:	68a8      	ldr	r0, [r5, #8]
   b989c:	2100      	movs	r1, #0
   b989e:	f7fe f8fd 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98a2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b98a4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b98a6:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b98a8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b98aa:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b98ae:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b0:	2108      	movs	r1, #8
   b98b2:	f7fe f8f3 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b98b6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b98ba:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98bc:	210c      	movs	r1, #12
   b98be:	f7fe f8ed 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b98c2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b98c6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c8:	2110      	movs	r1, #16
   b98ca:	f7fe f8e7 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b98ce:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b98d0:	68a8      	ldr	r0, [r5, #8]
   b98d2:	69e6      	ldr	r6, [r4, #28]
   b98d4:	2114      	movs	r1, #20
   b98d6:	f7fe f8e1 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98da:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b98dc:	68a8      	ldr	r0, [r5, #8]
   b98de:	69e6      	ldr	r6, [r4, #28]
   b98e0:	2118      	movs	r1, #24
   b98e2:	f7fe f8db 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98e6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b98e8:	68a8      	ldr	r0, [r5, #8]
   b98ea:	69e6      	ldr	r6, [r4, #28]
   b98ec:	211c      	movs	r1, #28
   b98ee:	f7fe f8d5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98f2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b98f4:	69e3      	ldr	r3, [r4, #28]
   b98f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b98fa:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b98fc:	69e3      	ldr	r3, [r4, #28]
   b98fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9900:	b17a      	cbz	r2, b9922 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9902:	7819      	ldrb	r1, [r3, #0]
   b9904:	0709      	lsls	r1, r1, #28
   b9906:	d40c      	bmi.n	b9922 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9908:	1d19      	adds	r1, r3, #4
   b990a:	3324      	adds	r3, #36	; 0x24
   b990c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9910:	f842 0b04 	str.w	r0, [r2], #4
   b9914:	4299      	cmp	r1, r3
   b9916:	d1f9      	bne.n	b990c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9918:	69e2      	ldr	r2, [r4, #28]
   b991a:	7813      	ldrb	r3, [r2, #0]
   b991c:	f043 0308 	orr.w	r3, r3, #8
   b9920:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9922:	69e3      	ldr	r3, [r4, #28]
   b9924:	e70f      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9926:	4a67      	ldr	r2, [pc, #412]	; (b9ac4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9928:	4293      	cmp	r3, r2
   b992a:	f040 80cd 	bne.w	b9ac8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b992e:	6a06      	ldr	r6, [r0, #32]
   b9930:	2e00      	cmp	r6, #0
   b9932:	f43f ae7a 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9936:	68a8      	ldr	r0, [r5, #8]
   b9938:	2100      	movs	r1, #0
   b993a:	f7fe f8af 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b993e:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9940:	68a8      	ldr	r0, [r5, #8]
   b9942:	6a26      	ldr	r6, [r4, #32]
   b9944:	2104      	movs	r1, #4
   b9946:	f7fe f8b6 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b994a:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b994c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b994e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9950:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9952:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9954:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9956:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9958:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b995a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b995c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b995e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9960:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9962:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9964:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9966:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9968:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b996a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b996c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b996e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9970:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9972:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9974:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9976:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9978:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b997a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b997c:	210c      	movs	r1, #12
   b997e:	68a8      	ldr	r0, [r5, #8]
   b9980:	6a26      	ldr	r6, [r4, #32]
   b9982:	f7fe f88b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9986:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9988:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b998a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b998c:	2110      	movs	r1, #16
   b998e:	f7fe f885 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9992:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9994:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9996:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9998:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b999a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b999c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b999e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b99a0:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b99a2:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b99a4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b99a6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b99a8:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b99aa:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b99ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b99ae:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b99b0:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b99b2:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99b4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b99b6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99b8:	2118      	movs	r1, #24
   b99ba:	f7fe f86f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b99be:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b99c2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99c4:	211c      	movs	r1, #28
   b99c6:	f7fe f869 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b99ca:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b99ce:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99d0:	2120      	movs	r1, #32
   b99d2:	f7fe f863 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b99d6:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b99da:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99dc:	2124      	movs	r1, #36	; 0x24
   b99de:	f7fe f85d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b99e2:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b99e4:	68a8      	ldr	r0, [r5, #8]
   b99e6:	6a26      	ldr	r6, [r4, #32]
   b99e8:	2128      	movs	r1, #40	; 0x28
   b99ea:	f7fe f857 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99ee:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b99f0:	6a26      	ldr	r6, [r4, #32]
   b99f2:	68a8      	ldr	r0, [r5, #8]
   b99f4:	212c      	movs	r1, #44	; 0x2c
   b99f6:	f7fe f851 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99fa:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b99fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b99fe:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a00:	2130      	movs	r1, #48	; 0x30
   b9a02:	f7fe f84b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9a06:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a08:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9a0a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a0c:	2134      	movs	r1, #52	; 0x34
   b9a0e:	f7fe f845 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9a12:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a14:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9a16:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a18:	2138      	movs	r1, #56	; 0x38
   b9a1a:	f7fe f83f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9a1e:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a20:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9a22:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a24:	213c      	movs	r1, #60	; 0x3c
   b9a26:	f7fe f839 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9a2a:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a2c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9a2e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a30:	2140      	movs	r1, #64	; 0x40
   b9a32:	f7fe f833 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9a36:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9a38:	68a8      	ldr	r0, [r5, #8]
   b9a3a:	6a26      	ldr	r6, [r4, #32]
   b9a3c:	2144      	movs	r1, #68	; 0x44
   b9a3e:	f7fe f82d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a42:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9a44:	68a8      	ldr	r0, [r5, #8]
   b9a46:	6a26      	ldr	r6, [r4, #32]
   b9a48:	2148      	movs	r1, #72	; 0x48
   b9a4a:	f7fe f827 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a4e:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b9a50:	68a8      	ldr	r0, [r5, #8]
   b9a52:	6a26      	ldr	r6, [r4, #32]
   b9a54:	214c      	movs	r1, #76	; 0x4c
   b9a56:	f7fe f82e 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a5a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9a5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9a60:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9a62:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9a66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9a6a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a6c:	68a8      	ldr	r0, [r5, #8]
   b9a6e:	2154      	movs	r1, #84	; 0x54
   b9a70:	f7fe f814 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9a74:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9a76:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9a78:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9a7a:	2158      	movs	r1, #88	; 0x58
   b9a7c:	f7fe f81b 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9a80:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9a84:	68a8      	ldr	r0, [r5, #8]
   b9a86:	6a26      	ldr	r6, [r4, #32]
   b9a88:	215a      	movs	r1, #90	; 0x5a
   b9a8a:	f7fe f814 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a8e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9a92:	6a22      	ldr	r2, [r4, #32]
   b9a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9a98:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9a9a:	6a22      	ldr	r2, [r4, #32]
   b9a9c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a9e:	6a21      	ldr	r1, [r4, #32]
   b9aa0:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9aa2:	b158      	cbz	r0, b9abc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9aa4:	780b      	ldrb	r3, [r1, #0]
   b9aa6:	071b      	lsls	r3, r3, #28
   b9aa8:	d408      	bmi.n	b9abc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b9aaa:	225c      	movs	r2, #92	; 0x5c
   b9aac:	3104      	adds	r1, #4
   b9aae:	f008 fb37 	bl	c2120 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ab2:	6a22      	ldr	r2, [r4, #32]
   b9ab4:	7813      	ldrb	r3, [r2, #0]
   b9ab6:	f043 0308 	orr.w	r3, r3, #8
   b9aba:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9abc:	6a23      	ldr	r3, [r4, #32]
   b9abe:	e642      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9ac0:	00200500 	.word	0x00200500
   b9ac4:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b9ac8:	4a8e      	ldr	r2, [pc, #568]	; (b9d04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b9aca:	4293      	cmp	r3, r2
   b9acc:	d137      	bne.n	b9b3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9ace:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9ad0:	2b00      	cmp	r3, #0
   b9ad2:	f43f adaa 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9ad6:	688a      	ldr	r2, [r1, #8]
   b9ad8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b9ada:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9adc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9ade:	68a8      	ldr	r0, [r5, #8]
   b9ae0:	2104      	movs	r1, #4
   b9ae2:	f7fd ffdb 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ae6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b9ae8:	68a8      	ldr	r0, [r5, #8]
   b9aea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9aec:	2108      	movs	r1, #8
   b9aee:	f7fd ffd5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9af2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9af4:	68a8      	ldr	r0, [r5, #8]
   b9af6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9af8:	210c      	movs	r1, #12
   b9afa:	f7fd ffcf 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9afe:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9b00:	68a8      	ldr	r0, [r5, #8]
   b9b02:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9b04:	2110      	movs	r1, #16
   b9b06:	f7fd ffc9 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b0a:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9b12:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9b18:	b17a      	cbz	r2, b9b3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9b1a:	7819      	ldrb	r1, [r3, #0]
   b9b1c:	070f      	lsls	r7, r1, #28
   b9b1e:	d40c      	bmi.n	b9b3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9b20:	1d19      	adds	r1, r3, #4
   b9b22:	3318      	adds	r3, #24
   b9b24:	f851 0b04 	ldr.w	r0, [r1], #4
   b9b28:	f842 0b04 	str.w	r0, [r2], #4
   b9b2c:	4299      	cmp	r1, r3
   b9b2e:	d1f9      	bne.n	b9b24 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9b32:	7813      	ldrb	r3, [r2, #0]
   b9b34:	f043 0308 	orr.w	r3, r3, #8
   b9b38:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9b3c:	e603      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9b3e:	4a72      	ldr	r2, [pc, #456]	; (b9d08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9b40:	4293      	cmp	r3, r2
   b9b42:	d139      	bne.n	b9bb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9b44:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9b46:	2e00      	cmp	r6, #0
   b9b48:	f43f ad6f 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9b4c:	68a8      	ldr	r0, [r5, #8]
   b9b4e:	2100      	movs	r1, #0
   b9b50:	f7fd ffa4 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b54:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b56:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b5a:	2104      	movs	r1, #4
   b9b5c:	f7fd ff9e 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9b60:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b66:	2108      	movs	r1, #8
   b9b68:	f7fd ff98 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9b6c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b72:	210c      	movs	r1, #12
   b9b74:	f7fd ff92 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9b78:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9b7a:	68a8      	ldr	r0, [r5, #8]
   b9b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9b7e:	2110      	movs	r1, #16
   b9b80:	f7fd ff8c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b84:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9b8c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9b92:	b17a      	cbz	r2, b9bb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9b94:	7819      	ldrb	r1, [r3, #0]
   b9b96:	070e      	lsls	r6, r1, #28
   b9b98:	d40c      	bmi.n	b9bb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9b9a:	1d19      	adds	r1, r3, #4
   b9b9c:	3318      	adds	r3, #24
   b9b9e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9ba2:	f842 0b04 	str.w	r0, [r2], #4
   b9ba6:	4299      	cmp	r1, r3
   b9ba8:	d1f9      	bne.n	b9b9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9bac:	7813      	ldrb	r3, [r2, #0]
   b9bae:	f043 0308 	orr.w	r3, r3, #8
   b9bb2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9bb6:	e5c6      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9bb8:	4a54      	ldr	r2, [pc, #336]	; (b9d0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9bba:	4293      	cmp	r3, r2
   b9bbc:	d151      	bne.n	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9bbe:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9bc0:	2e00      	cmp	r6, #0
   b9bc2:	f43f ad32 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9bc6:	68a8      	ldr	r0, [r5, #8]
   b9bc8:	2100      	movs	r1, #0
   b9bca:	f7fd ff67 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bce:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9bd2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd4:	2104      	movs	r1, #4
   b9bd6:	f7fd ff61 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9bda:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bdc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9bde:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be0:	2108      	movs	r1, #8
   b9be2:	f7fd ff5b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9be6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9bea:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bec:	210c      	movs	r1, #12
   b9bee:	f7fd ff55 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9bf2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9bf4:	68a8      	ldr	r0, [r5, #8]
   b9bf6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9bf8:	2110      	movs	r1, #16
   b9bfa:	f7fd ff4f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bfe:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9c00:	68a8      	ldr	r0, [r5, #8]
   b9c02:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9c04:	2114      	movs	r1, #20
   b9c06:	f7fd ff49 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c0a:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c0c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9c0e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c10:	2118      	movs	r1, #24
   b9c12:	f7fd ff43 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9c16:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9c18:	68a8      	ldr	r0, [r5, #8]
   b9c1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9c1c:	211c      	movs	r1, #28
   b9c1e:	f7fd ff3d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c22:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9c24:	68a8      	ldr	r0, [r5, #8]
   b9c26:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9c28:	2120      	movs	r1, #32
   b9c2a:	f7fd ff37 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c2e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9c36:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9c3c:	b17a      	cbz	r2, b9c5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9c3e:	7819      	ldrb	r1, [r3, #0]
   b9c40:	0708      	lsls	r0, r1, #28
   b9c42:	d40c      	bmi.n	b9c5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9c44:	1d19      	adds	r1, r3, #4
   b9c46:	3328      	adds	r3, #40	; 0x28
   b9c48:	f851 0b04 	ldr.w	r0, [r1], #4
   b9c4c:	f842 0b04 	str.w	r0, [r2], #4
   b9c50:	4299      	cmp	r1, r3
   b9c52:	d1f9      	bne.n	b9c48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9c54:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9c56:	7813      	ldrb	r3, [r2, #0]
   b9c58:	f043 0308 	orr.w	r3, r3, #8
   b9c5c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9c5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9c60:	e571      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9c62:	4a2b      	ldr	r2, [pc, #172]	; (b9d10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9c64:	4293      	cmp	r3, r2
   b9c66:	d155      	bne.n	b9d14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9c68:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9c6a:	2b00      	cmp	r3, #0
   b9c6c:	f43f acdd 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9c70:	688a      	ldr	r2, [r1, #8]
   b9c72:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9c74:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9c76:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9c78:	68a8      	ldr	r0, [r5, #8]
   b9c7a:	2104      	movs	r1, #4
   b9c7c:	f7fd ff0e 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c80:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c82:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9c84:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c86:	2108      	movs	r1, #8
   b9c88:	f7fd ff08 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9c8c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9c90:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c92:	210c      	movs	r1, #12
   b9c94:	f7fd ff02 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9c98:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c9a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9c9c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c9e:	2110      	movs	r1, #16
   b9ca0:	f7fd fefc 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9ca4:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9ca6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9caa:	7d12      	ldrb	r2, [r2, #20]
   b9cac:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9cae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9cb2:	7d52      	ldrb	r2, [r2, #21]
   b9cb4:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9cb6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9cba:	7d92      	ldrb	r2, [r2, #22]
   b9cbc:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9cbe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9cc2:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9cc4:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9cc6:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9cc8:	68a8      	ldr	r0, [r5, #8]
   b9cca:	2118      	movs	r1, #24
   b9ccc:	f7fd fee6 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cd0:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cd8:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9cde:	b17a      	cbz	r2, b9d00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ce0:	7819      	ldrb	r1, [r3, #0]
   b9ce2:	0709      	lsls	r1, r1, #28
   b9ce4:	d40c      	bmi.n	b9d00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9ce6:	1d19      	adds	r1, r3, #4
   b9ce8:	3320      	adds	r3, #32
   b9cea:	f851 0b04 	ldr.w	r0, [r1], #4
   b9cee:	f842 0b04 	str.w	r0, [r2], #4
   b9cf2:	4299      	cmp	r1, r3
   b9cf4:	d1f9      	bne.n	b9cea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9cf8:	7813      	ldrb	r3, [r2, #0]
   b9cfa:	f043 0308 	orr.w	r3, r3, #8
   b9cfe:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9d02:	e520      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9d04:	00140900 	.word	0x00140900
   b9d08:	00141100 	.word	0x00141100
   b9d0c:	00241200 	.word	0x00241200
   b9d10:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9d14:	4a30      	ldr	r2, [pc, #192]	; (b9dd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9d16:	4293      	cmp	r3, r2
   b9d18:	d160      	bne.n	b9ddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9d1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9d1c:	2b00      	cmp	r3, #0
   b9d1e:	f43f ac84 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9d22:	688a      	ldr	r2, [r1, #8]
   b9d24:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9d26:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9d28:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9d2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9d2c:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9d2e:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9d30:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9d32:	68a8      	ldr	r0, [r5, #8]
   b9d34:	2104      	movs	r1, #4
   b9d36:	f7fd feb1 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d3a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d3c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9d3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d40:	2108      	movs	r1, #8
   b9d42:	f7fd feab 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9d46:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d48:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9d4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d4c:	210c      	movs	r1, #12
   b9d4e:	f7fd fea5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9d52:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d54:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9d56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d58:	2110      	movs	r1, #16
   b9d5a:	f7fd fe9f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9d5e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d60:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9d62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d64:	2114      	movs	r1, #20
   b9d66:	f7fd fe99 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9d6a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9d6c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9d70:	7e12      	ldrb	r2, [r2, #24]
   b9d72:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9d74:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9d78:	7e52      	ldrb	r2, [r2, #25]
   b9d7a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9d7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9d80:	7e92      	ldrb	r2, [r2, #26]
   b9d82:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9d84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9d86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9d88:	7ed2      	ldrb	r2, [r2, #27]
   b9d8a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9d8c:	68a8      	ldr	r0, [r5, #8]
   b9d8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9d90:	211c      	movs	r1, #28
   b9d92:	f7fd fe83 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d96:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9d98:	68a8      	ldr	r0, [r5, #8]
   b9d9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9d9c:	2120      	movs	r1, #32
   b9d9e:	f7fd fe7d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9da2:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9daa:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9db0:	b17a      	cbz	r2, b9dd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9db2:	7819      	ldrb	r1, [r3, #0]
   b9db4:	070f      	lsls	r7, r1, #28
   b9db6:	d40c      	bmi.n	b9dd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9db8:	1d19      	adds	r1, r3, #4
   b9dba:	3328      	adds	r3, #40	; 0x28
   b9dbc:	f851 0b04 	ldr.w	r0, [r1], #4
   b9dc0:	f842 0b04 	str.w	r0, [r2], #4
   b9dc4:	4299      	cmp	r1, r3
   b9dc6:	d1f9      	bne.n	b9dbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9dc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9dca:	7813      	ldrb	r3, [r2, #0]
   b9dcc:	f043 0308 	orr.w	r3, r3, #8
   b9dd0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9dd4:	e4b7      	b.n	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9dd6:	bf00      	nop
   b9dd8:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9ddc:	4aa1      	ldr	r2, [pc, #644]	; (ba064 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9dde:	4293      	cmp	r3, r2
   b9de0:	f040 80f0 	bne.w	b9fc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9de4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9de6:	2e00      	cmp	r6, #0
   b9de8:	f43f ac1f 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9dec:	68a8      	ldr	r0, [r5, #8]
   b9dee:	2100      	movs	r1, #0
   b9df0:	f7fd fe54 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9df4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9df6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9dfa:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9dfc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9dfe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e02:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9e04:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b9e06:	68a8      	ldr	r0, [r5, #8]
   b9e08:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e0a:	2106      	movs	r1, #6
   b9e0c:	f7fd fe53 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e10:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b9e12:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e16:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9e18:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9e1a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e1e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9e20:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9e22:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e26:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9e28:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9e2a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e2e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9e30:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b9e32:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e36:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9e38:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   b9e3a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e3c:	68a8      	ldr	r0, [r5, #8]
   b9e3e:	2110      	movs	r1, #16
   b9e40:	f7fd fe2c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e44:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e46:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b9e48:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e4a:	2114      	movs	r1, #20
   b9e4c:	f7fd fe26 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b9e50:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9e52:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b9e54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e56:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b9e58:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9e5a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9e5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e5e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9e60:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9e62:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b9e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e66:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b9e68:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9e6a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9e6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9e6e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9e70:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e72:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9e74:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e76:	211c      	movs	r1, #28
   b9e78:	f7fd fe10 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9e7c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e7e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b9e80:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e82:	2120      	movs	r1, #32
   b9e84:	f7fd fe0a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b9e88:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e8a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9e8c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e8e:	2124      	movs	r1, #36	; 0x24
   b9e90:	f7fd fe04 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9e94:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e96:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b9e98:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e9a:	2128      	movs	r1, #40	; 0x28
   b9e9c:	f7fd fdfe 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b9ea0:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   b9ea2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9ea4:	68a8      	ldr	r0, [r5, #8]
   b9ea6:	212c      	movs	r1, #44	; 0x2c
   b9ea8:	f7fd fdf8 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eac:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   b9eae:	68a8      	ldr	r0, [r5, #8]
   b9eb0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9eb2:	2130      	movs	r1, #48	; 0x30
   b9eb4:	f7fd fdf2 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eb8:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9eba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9ebc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ebe:	2134      	movs	r1, #52	; 0x34
   b9ec0:	f7fd fdec 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9ec4:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ec6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b9ec8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9eca:	2138      	movs	r1, #56	; 0x38
   b9ecc:	f7fd fde6 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b9ed0:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ed2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9ed4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ed6:	213c      	movs	r1, #60	; 0x3c
   b9ed8:	f7fd fde0 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9edc:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ede:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b9ee0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ee2:	2140      	movs	r1, #64	; 0x40
   b9ee4:	f7fd fdda 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b9ee8:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   b9eea:	68a8      	ldr	r0, [r5, #8]
   b9eec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9eee:	2144      	movs	r1, #68	; 0x44
   b9ef0:	f7fd fdd4 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ef4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b9ef8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9efa:	2148      	movs	r1, #72	; 0x48
   b9efc:	f7fd fdce 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b9f00:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f02:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b9f04:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f06:	214c      	movs	r1, #76	; 0x4c
   b9f08:	f7fd fdc8 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b9f0c:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b9f10:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f12:	2150      	movs	r1, #80	; 0x50
   b9f14:	f7fd fdc2 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b9f18:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f1a:	2154      	movs	r1, #84	; 0x54
   b9f1c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b9f1e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f20:	f7fd fdbc 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b9f24:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   b9f26:	68a8      	ldr	r0, [r5, #8]
   b9f28:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f2a:	2158      	movs	r1, #88	; 0x58
   b9f2c:	f7fd fdc3 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f30:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   b9f34:	68a8      	ldr	r0, [r5, #8]
   b9f36:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f38:	215a      	movs	r1, #90	; 0x5a
   b9f3a:	f7fd fdbc 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f3e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   b9f42:	68a8      	ldr	r0, [r5, #8]
   b9f44:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f46:	215c      	movs	r1, #92	; 0x5c
   b9f48:	f7fd fdb5 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f4c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f50:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b9f52:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f54:	215e      	movs	r1, #94	; 0x5e
   b9f56:	f7fd fdae 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b9f5a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   b9f5e:	68a8      	ldr	r0, [r5, #8]
   b9f60:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f62:	2160      	movs	r1, #96	; 0x60
   b9f64:	f7fd fda7 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f68:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   b9f6c:	68a8      	ldr	r0, [r5, #8]
   b9f6e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f70:	2162      	movs	r1, #98	; 0x62
   b9f72:	f7fd fda0 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f76:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   b9f7a:	68a8      	ldr	r0, [r5, #8]
   b9f7c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f7e:	2164      	movs	r1, #100	; 0x64
   b9f80:	f7fd fd8c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f84:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   b9f86:	68a8      	ldr	r0, [r5, #8]
   b9f88:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9f8a:	2168      	movs	r1, #104	; 0x68
   b9f8c:	f7fd fd86 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f90:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9f92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9f98:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9f9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9f9c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9fa0:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   b9fa4:	b158      	cbz	r0, b9fbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9fa6:	780b      	ldrb	r3, [r1, #0]
   b9fa8:	071e      	lsls	r6, r3, #28
   b9faa:	d408      	bmi.n	b9fbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   b9fac:	2274      	movs	r2, #116	; 0x74
   b9fae:	3104      	adds	r1, #4
   b9fb0:	f008 f8b6 	bl	c2120 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9fb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9fb6:	7813      	ldrb	r3, [r2, #0]
   b9fb8:	f043 0308 	orr.w	r3, r3, #8
   b9fbc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   b9fbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9fc0:	f7ff bbc1 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   b9fc4:	4a28      	ldr	r2, [pc, #160]	; (ba068 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   b9fc6:	4293      	cmp	r3, r2
   b9fc8:	d150      	bne.n	ba06c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   b9fca:	6a86      	ldr	r6, [r0, #40]	; 0x28
   b9fcc:	2e00      	cmp	r6, #0
   b9fce:	f43f ab2c 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   b9fd2:	68a8      	ldr	r0, [r5, #8]
   b9fd4:	2100      	movs	r1, #0
   b9fd6:	f7fd fd61 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fda:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   b9fdc:	68a8      	ldr	r0, [r5, #8]
   b9fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b9fe0:	2104      	movs	r1, #4
   b9fe2:	f7fd fd5b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fe6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fe8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b9fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fec:	2108      	movs	r1, #8
   b9fee:	f7fd fd55 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b9ff2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   b9ff4:	68a8      	ldr	r0, [r5, #8]
   b9ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b9ff8:	210c      	movs	r1, #12
   b9ffa:	f7fd fd5c 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ffe:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba000:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba004:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba006:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba008:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba00a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba00c:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba00e:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba010:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba014:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba016:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba018:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba01a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba01c:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba01e:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba020:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba024:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba026:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba02a:	68aa      	ldr	r2, [r5, #8]
   ba02c:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba02e:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba030:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba036:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba03a:	6a1a      	ldr	r2, [r3, #32]
   ba03c:	b17a      	cbz	r2, ba05e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba03e:	7819      	ldrb	r1, [r3, #0]
   ba040:	0708      	lsls	r0, r1, #28
   ba042:	d40c      	bmi.n	ba05e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba044:	1d19      	adds	r1, r3, #4
   ba046:	3318      	adds	r3, #24
   ba048:	f851 0b04 	ldr.w	r0, [r1], #4
   ba04c:	f842 0b04 	str.w	r0, [r2], #4
   ba050:	4299      	cmp	r1, r3
   ba052:	d1f9      	bne.n	ba048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba054:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba056:	7813      	ldrb	r3, [r2, #0]
   ba058:	f043 0308 	orr.w	r3, r3, #8
   ba05c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba05e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba060:	f7ff bb71 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba064:	00741700 	.word	0x00741700
   ba068:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba06c:	4a84      	ldr	r2, [pc, #528]	; (ba280 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba06e:	4293      	cmp	r3, r2
   ba070:	d13a      	bne.n	ba0e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba072:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba074:	2e00      	cmp	r6, #0
   ba076:	f43f aad8 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba07a:	68a8      	ldr	r0, [r5, #8]
   ba07c:	2100      	movs	r1, #0
   ba07e:	f7fd fd0d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba082:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba084:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba086:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba088:	2104      	movs	r1, #4
   ba08a:	f7fd fd07 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba08e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba090:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba092:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba094:	2108      	movs	r1, #8
   ba096:	f7fd fd01 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba09a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba09c:	68a8      	ldr	r0, [r5, #8]
   ba09e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba0a0:	210c      	movs	r1, #12
   ba0a2:	f7fd fcfb 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0a6:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba0a8:	68a8      	ldr	r0, [r5, #8]
   ba0aa:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba0ac:	2110      	movs	r1, #16
   ba0ae:	f7fd fcf5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0b2:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba0b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0ba:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba0bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba0be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba0c0:	b17a      	cbz	r2, ba0e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba0c2:	7819      	ldrb	r1, [r3, #0]
   ba0c4:	0709      	lsls	r1, r1, #28
   ba0c6:	d40c      	bmi.n	ba0e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba0c8:	1d19      	adds	r1, r3, #4
   ba0ca:	3318      	adds	r3, #24
   ba0cc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba0d0:	f842 0b04 	str.w	r0, [r2], #4
   ba0d4:	4299      	cmp	r1, r3
   ba0d6:	d1f9      	bne.n	ba0cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba0d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba0da:	7813      	ldrb	r3, [r2, #0]
   ba0dc:	f043 0308 	orr.w	r3, r3, #8
   ba0e0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba0e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba0e4:	f7ff bb2f 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba0e8:	4a66      	ldr	r2, [pc, #408]	; (ba284 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba0ea:	4293      	cmp	r3, r2
   ba0ec:	d138      	bne.n	ba160 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba0ee:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba0f0:	2e00      	cmp	r6, #0
   ba0f2:	f43f aa9a 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba0f6:	68a8      	ldr	r0, [r5, #8]
   ba0f8:	2100      	movs	r1, #0
   ba0fa:	f7fd fccf 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0fe:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba100:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba102:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba104:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba106:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba108:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba10a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba10c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba10e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba110:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba112:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba114:	7a52      	ldrb	r2, [r2, #9]
   ba116:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba118:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba11a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba11c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba11e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba120:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba122:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba124:	7ad2      	ldrb	r2, [r2, #11]
   ba126:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba128:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba12a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba12c:	210c      	movs	r1, #12
   ba12e:	f7fd fcb5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba132:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba134:	68a8      	ldr	r0, [r5, #8]
   ba136:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba138:	2110      	movs	r1, #16
   ba13a:	f7fd fcbc 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba13e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba140:	68a8      	ldr	r0, [r5, #8]
   ba142:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba144:	2112      	movs	r1, #18
   ba146:	f7fd fcb6 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba14a:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba14c:	68ab      	ldr	r3, [r5, #8]
   ba14e:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba150:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba152:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba154:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba15a:	61da      	str	r2, [r3, #28]
   ba15c:	f7ff ba65 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba160:	4a49      	ldr	r2, [pc, #292]	; (ba288 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba162:	4293      	cmp	r3, r2
   ba164:	d162      	bne.n	ba22c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba166:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba168:	2b00      	cmp	r3, #0
   ba16a:	f43f aa5e 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba16e:	688a      	ldr	r2, [r1, #8]
   ba170:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba172:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba174:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba176:	68a8      	ldr	r0, [r5, #8]
   ba178:	2104      	movs	r1, #4
   ba17a:	f7fd fc8f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba17e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba180:	68a8      	ldr	r0, [r5, #8]
   ba182:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba184:	2108      	movs	r1, #8
   ba186:	f7fd fc89 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba18a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba18c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba18e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba190:	210c      	movs	r1, #12
   ba192:	f7fd fc83 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba196:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba198:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba19a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba19c:	2110      	movs	r1, #16
   ba19e:	f7fd fc7d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba1a2:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba1a6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1a8:	2114      	movs	r1, #20
   ba1aa:	f7fd fc77 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba1ae:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba1b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba1b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1b4:	7e12      	ldrb	r2, [r2, #24]
   ba1b6:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba1b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba1ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1bc:	7e52      	ldrb	r2, [r2, #25]
   ba1be:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba1c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba1c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1c4:	7e92      	ldrb	r2, [r2, #26]
   ba1c6:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba1c8:	211c      	movs	r1, #28
   ba1ca:	68a8      	ldr	r0, [r5, #8]
   ba1cc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba1ce:	f7fd fc65 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1d2:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba1d4:	68a8      	ldr	r0, [r5, #8]
   ba1d6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba1d8:	2120      	movs	r1, #32
   ba1da:	f7fd fc5f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1de:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba1e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba1e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1e4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba1e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba1ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1f0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba1f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba1fe:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba200:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba204:	b17a      	cbz	r2, ba226 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba206:	7819      	ldrb	r1, [r3, #0]
   ba208:	070f      	lsls	r7, r1, #28
   ba20a:	d40c      	bmi.n	ba226 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba20c:	1d19      	adds	r1, r3, #4
   ba20e:	332c      	adds	r3, #44	; 0x2c
   ba210:	f851 0b04 	ldr.w	r0, [r1], #4
   ba214:	f842 0b04 	str.w	r0, [r2], #4
   ba218:	4299      	cmp	r1, r3
   ba21a:	d1f9      	bne.n	ba210 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba21c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba21e:	7813      	ldrb	r3, [r2, #0]
   ba220:	f043 0308 	orr.w	r3, r3, #8
   ba224:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba226:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba228:	f7ff ba8d 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba22c:	784a      	ldrb	r2, [r1, #1]
   ba22e:	2a35      	cmp	r2, #53	; 0x35
   ba230:	d17f      	bne.n	ba332 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba232:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba234:	2e00      	cmp	r6, #0
   ba236:	f43f a9f8 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba23a:	68a8      	ldr	r0, [r5, #8]
   ba23c:	2100      	movs	r1, #0
   ba23e:	f7fd fc2d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba242:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba244:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba246:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba248:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba24a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba24c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba24e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba250:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba252:	725a      	strb	r2, [r3, #9]
   ba254:	f04f 0808 	mov.w	r8, #8
   ba258:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba25a:	f04f 0a0c 	mov.w	sl, #12
   ba25e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba260:	7a59      	ldrb	r1, [r3, #9]
   ba262:	b2ba      	uxth	r2, r7
   ba264:	4291      	cmp	r1, r2
   ba266:	d811      	bhi.n	ba28c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba26a:	2201      	movs	r2, #1
   ba26c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba270:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba272:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba276:	2800      	cmp	r0, #0
   ba278:	d14d      	bne.n	ba316 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba27a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba27c:	f7ff ba63 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba280:	00142200 	.word	0x00142200
   ba284:	00182600 	.word	0x00182600
   ba288:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba28c:	886a      	ldrh	r2, [r5, #2]
   ba28e:	fb0a f607 	mul.w	r6, sl, r7
   ba292:	3a08      	subs	r2, #8
   ba294:	42b2      	cmp	r2, r6
   ba296:	dde7      	ble.n	ba268 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba298:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba29a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba29c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba2a0:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba2a2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba2a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba2a6:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba2a8:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba2aa:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba2ac:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba2ae:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba2b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba2b2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba2b4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba2b6:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba2b8:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba2ba:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba2bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba2be:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba2c0:	4433      	add	r3, r6
   ba2c2:	78d2      	ldrb	r2, [r2, #3]
   ba2c4:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba2c6:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2ca:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba2ce:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2d2:	68a8      	ldr	r0, [r5, #8]
   ba2d4:	b289      	uxth	r1, r1
   ba2d6:	f7fd fbee 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba2da:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2dc:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba2e0:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba2e4:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2e8:	68a8      	ldr	r0, [r5, #8]
   ba2ea:	b289      	uxth	r1, r1
   ba2ec:	f7fd fbe3 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba2f0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba2f2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba2f6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba2fa:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba2fe:	68a8      	ldr	r0, [r5, #8]
   ba300:	b289      	uxth	r1, r1
   ba302:	f7fd fbcb 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba306:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba308:	3701      	adds	r7, #1
   ba30a:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba30c:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba30e:	f108 080c 	add.w	r8, r8, #12
   ba312:	d1a4      	bne.n	ba25e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba314:	e7a8      	b.n	ba268 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba316:	780b      	ldrb	r3, [r1, #0]
   ba318:	071e      	lsls	r6, r3, #28
   ba31a:	d4ae      	bmi.n	ba27a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba31c:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba320:	3104      	adds	r1, #4
   ba322:	f007 fefd 	bl	c2120 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba326:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba328:	7813      	ldrb	r3, [r2, #0]
   ba32a:	f043 0308 	orr.w	r3, r3, #8
   ba32e:	7013      	strb	r3, [r2, #0]
   ba330:	e7a3      	b.n	ba27a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba332:	2a3c      	cmp	r2, #60	; 0x3c
   ba334:	f040 80bf 	bne.w	ba4b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba338:	884a      	ldrh	r2, [r1, #2]
   ba33a:	2a28      	cmp	r2, #40	; 0x28
   ba33c:	d002      	beq.n	ba344 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba33e:	2a40      	cmp	r2, #64	; 0x40
   ba340:	f040 80b9 	bne.w	ba4b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba344:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba346:	2b00      	cmp	r3, #0
   ba348:	f43f a96f 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba34c:	68aa      	ldr	r2, [r5, #8]
   ba34e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba350:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba352:	68a8      	ldr	r0, [r5, #8]
   ba354:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba356:	2102      	movs	r1, #2
   ba358:	f7fd fbad 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba35c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba35e:	68a8      	ldr	r0, [r5, #8]
   ba360:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba362:	2104      	movs	r1, #4
   ba364:	f7fd fb9a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba368:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba36a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba36c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba36e:	2108      	movs	r1, #8
   ba370:	f7fd fb94 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba374:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba376:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba378:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba37a:	210c      	movs	r1, #12
   ba37c:	f7fd fb8e 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba380:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba382:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba384:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba386:	2110      	movs	r1, #16
   ba388:	f7fd fb88 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba38c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba38e:	886b      	ldrh	r3, [r5, #2]
   ba390:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba392:	2b28      	cmp	r3, #40	; 0x28
   ba394:	d14b      	bne.n	ba42e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba396:	2600      	movs	r6, #0
   ba398:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba39a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba39c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba39e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba3a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3a2:	7d12      	ldrb	r2, [r2, #20]
   ba3a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba3a8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba3aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3ac:	7d52      	ldrb	r2, [r2, #21]
   ba3ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba3b2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba3b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3b6:	7d92      	ldrb	r2, [r2, #22]
   ba3b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba3bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3be:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba3c2:	68a8      	ldr	r0, [r5, #8]
   ba3c4:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba3c6:	2118      	movs	r1, #24
   ba3c8:	f7fd fb68 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3cc:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba3ce:	68a8      	ldr	r0, [r5, #8]
   ba3d0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba3d2:	211c      	movs	r1, #28
   ba3d4:	f7fd fb62 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3d8:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba3da:	68a8      	ldr	r0, [r5, #8]
   ba3dc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba3de:	2120      	movs	r1, #32
   ba3e0:	f7fd fb5c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3e4:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba3e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3e8:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba3ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3ec:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba3ee:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba3f0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba3f2:	68a8      	ldr	r0, [r5, #8]
   ba3f4:	f7fd fb52 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3f8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba400:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba402:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba406:	b17a      	cbz	r2, ba428 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba408:	7819      	ldrb	r1, [r3, #0]
   ba40a:	0708      	lsls	r0, r1, #28
   ba40c:	d40c      	bmi.n	ba428 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba40e:	1d19      	adds	r1, r3, #4
   ba410:	3344      	adds	r3, #68	; 0x44
   ba412:	f851 0b04 	ldr.w	r0, [r1], #4
   ba416:	f842 0b04 	str.w	r0, [r2], #4
   ba41a:	4299      	cmp	r1, r3
   ba41c:	d1f9      	bne.n	ba412 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba41e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba420:	7813      	ldrb	r3, [r2, #0]
   ba422:	f043 0308 	orr.w	r3, r3, #8
   ba426:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba428:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba42a:	f7ff b98c 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba42e:	68a8      	ldr	r0, [r5, #8]
   ba430:	2114      	movs	r1, #20
   ba432:	f7fd fb33 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba436:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba438:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba43a:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba43c:	2118      	movs	r1, #24
   ba43e:	f7fd fb2d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba442:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba444:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba446:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba448:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba44c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba450:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba452:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba454:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba45c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba45e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba460:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba464:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba468:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba46a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba46c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba470:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba474:	68a8      	ldr	r0, [r5, #8]
   ba476:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba478:	2124      	movs	r1, #36	; 0x24
   ba47a:	f7fd fb0f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba47e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba480:	68a8      	ldr	r0, [r5, #8]
   ba482:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba484:	2128      	movs	r1, #40	; 0x28
   ba486:	f7fd fb09 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba48a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba48c:	68a8      	ldr	r0, [r5, #8]
   ba48e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba490:	212c      	movs	r1, #44	; 0x2c
   ba492:	f7fd fb03 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba496:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba498:	68a8      	ldr	r0, [r5, #8]
   ba49a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba49c:	2130      	movs	r1, #48	; 0x30
   ba49e:	f7fd fafd 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4a2:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba4a4:	2134      	movs	r1, #52	; 0x34
   ba4a6:	68a8      	ldr	r0, [r5, #8]
   ba4a8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba4aa:	f7fd faf7 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4ae:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba4b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba4b2:	213c      	movs	r1, #60	; 0x3c
   ba4b4:	e79d      	b.n	ba3f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba4b6:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba4ba:	d12a      	bne.n	ba512 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba4bc:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba4be:	2e00      	cmp	r6, #0
   ba4c0:	f43f a8b3 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba4c4:	68a8      	ldr	r0, [r5, #8]
   ba4c6:	2100      	movs	r1, #0
   ba4c8:	f7fd fae8 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4cc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba4ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba4d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba4d2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba4d4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba4d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba4d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba4da:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba4dc:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba4de:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba4e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba4e4:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba4e8:	6a1a      	ldr	r2, [r3, #32]
   ba4ea:	b17a      	cbz	r2, ba50c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4ec:	7819      	ldrb	r1, [r3, #0]
   ba4ee:	0709      	lsls	r1, r1, #28
   ba4f0:	d40c      	bmi.n	ba50c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba4f2:	1d19      	adds	r1, r3, #4
   ba4f4:	3314      	adds	r3, #20
   ba4f6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba4fa:	f842 0b04 	str.w	r0, [r2], #4
   ba4fe:	4299      	cmp	r1, r3
   ba500:	d1f9      	bne.n	ba4f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba502:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba504:	7813      	ldrb	r3, [r2, #0]
   ba506:	f043 0308 	orr.w	r3, r3, #8
   ba50a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba50c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba50e:	f7ff b91a 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba512:	4aa1      	ldr	r2, [pc, #644]	; (ba798 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba514:	4293      	cmp	r3, r2
   ba516:	f47f a888 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba51a:	69a6      	ldr	r6, [r4, #24]
   ba51c:	2e00      	cmp	r6, #0
   ba51e:	f43f a884 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba522:	68a8      	ldr	r0, [r5, #8]
   ba524:	2100      	movs	r1, #0
   ba526:	f7fd fab9 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba52a:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba52c:	69a3      	ldr	r3, [r4, #24]
   ba52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba532:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba534:	69a3      	ldr	r3, [r4, #24]
   ba536:	691a      	ldr	r2, [r3, #16]
   ba538:	b14a      	cbz	r2, ba54e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba53a:	7819      	ldrb	r1, [r3, #0]
   ba53c:	070f      	lsls	r7, r1, #28
   ba53e:	d406      	bmi.n	ba54e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba540:	685b      	ldr	r3, [r3, #4]
   ba542:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba544:	69a2      	ldr	r2, [r4, #24]
   ba546:	7813      	ldrb	r3, [r2, #0]
   ba548:	f043 0308 	orr.w	r3, r3, #8
   ba54c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba54e:	69a3      	ldr	r3, [r4, #24]
   ba550:	f7ff b8f9 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba554:	784b      	ldrb	r3, [r1, #1]
   ba556:	2b72      	cmp	r3, #114	; 0x72
   ba558:	f040 80a4 	bne.w	ba6a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba55c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba55e:	2b00      	cmp	r3, #0
   ba560:	d069      	beq.n	ba636 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba562:	689b      	ldr	r3, [r3, #8]
   ba564:	2b00      	cmp	r3, #0
   ba566:	d066      	beq.n	ba636 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba568:	688a      	ldr	r2, [r1, #8]
   ba56a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba56c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba56e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba570:	68a8      	ldr	r0, [r5, #8]
   ba572:	689f      	ldr	r7, [r3, #8]
   ba574:	4631      	mov	r1, r6
   ba576:	f7fd fa9e 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba57a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba57c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba57e:	68a8      	ldr	r0, [r5, #8]
   ba580:	689e      	ldr	r6, [r3, #8]
   ba582:	2104      	movs	r1, #4
   ba584:	f7fd fa8a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba588:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba58a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba58c:	68a8      	ldr	r0, [r5, #8]
   ba58e:	689e      	ldr	r6, [r3, #8]
   ba590:	2108      	movs	r1, #8
   ba592:	f7fd fa83 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba596:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba598:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba59a:	68a8      	ldr	r0, [r5, #8]
   ba59c:	689e      	ldr	r6, [r3, #8]
   ba59e:	210c      	movs	r1, #12
   ba5a0:	f7fd fa7c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5a4:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba5a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba5a8:	68a8      	ldr	r0, [r5, #8]
   ba5aa:	689e      	ldr	r6, [r3, #8]
   ba5ac:	2110      	movs	r1, #16
   ba5ae:	f7fd fa82 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5b2:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba5b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba5b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba5b8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba5ba:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba5bc:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba5be:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba5c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba5c2:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba5c4:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba5c6:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba5c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba5ca:	689e      	ldr	r6, [r3, #8]
   ba5cc:	7833      	ldrb	r3, [r6, #0]
   ba5ce:	bb23      	cbnz	r3, ba61a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba5d0:	68a8      	ldr	r0, [r5, #8]
   ba5d2:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba5d6:	f7fd fa6e 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5da:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba5dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba5de:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba5e0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba5e2:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba5e6:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba5e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba5ea:	689b      	ldr	r3, [r3, #8]
   ba5ec:	781a      	ldrb	r2, [r3, #0]
   ba5ee:	2a00      	cmp	r2, #0
   ba5f0:	f040 865d 	bne.w	bb2ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba5f4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba5f6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba5fa:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba5fc:	b299      	uxth	r1, r3
   ba5fe:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba600:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba602:	d914      	bls.n	ba62e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba604:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba608:	d011      	beq.n	ba62e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba60a:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba60c:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba60e:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba610:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba612:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba614:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba616:	3301      	adds	r3, #1
   ba618:	e7f0      	b.n	ba5fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba61a:	68a8      	ldr	r0, [r5, #8]
   ba61c:	2114      	movs	r1, #20
   ba61e:	f7fd fa4a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba622:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba624:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba626:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba628:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba62a:	7d92      	ldrb	r2, [r2, #22]
   ba62c:	e7db      	b.n	ba5e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba62e:	7813      	ldrb	r3, [r2, #0]
   ba630:	f043 0308 	orr.w	r3, r3, #8
   ba634:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba636:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba638:	2b00      	cmp	r3, #0
   ba63a:	f43e aff6 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba63e:	689b      	ldr	r3, [r3, #8]
   ba640:	2b00      	cmp	r3, #0
   ba642:	f43e aff2 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba646:	22b5      	movs	r2, #181	; 0xb5
   ba648:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba64a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba64c:	689b      	ldr	r3, [r3, #8]
   ba64e:	2262      	movs	r2, #98	; 0x62
   ba650:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba652:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba654:	689b      	ldr	r3, [r3, #8]
   ba656:	2202      	movs	r2, #2
   ba658:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba65a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba65c:	689b      	ldr	r3, [r3, #8]
   ba65e:	2272      	movs	r2, #114	; 0x72
   ba660:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba662:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba664:	886a      	ldrh	r2, [r5, #2]
   ba666:	689b      	ldr	r3, [r3, #8]
   ba668:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba66a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba66c:	689a      	ldr	r2, [r3, #8]
   ba66e:	886b      	ldrh	r3, [r5, #2]
   ba670:	0a1b      	lsrs	r3, r3, #8
   ba672:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba674:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba676:	886a      	ldrh	r2, [r5, #2]
   ba678:	6898      	ldr	r0, [r3, #8]
   ba67a:	68a9      	ldr	r1, [r5, #8]
   ba67c:	3006      	adds	r0, #6
   ba67e:	f007 fd4f 	bl	c2120 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba682:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba684:	7b2a      	ldrb	r2, [r5, #12]
   ba686:	689b      	ldr	r3, [r3, #8]
   ba688:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba68c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba68e:	7b6a      	ldrb	r2, [r5, #13]
   ba690:	689b      	ldr	r3, [r3, #8]
   ba692:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba696:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba698:	7813      	ldrb	r3, [r2, #0]
   ba69a:	f043 0308 	orr.w	r3, r3, #8
   ba69e:	7013      	strb	r3, [r2, #0]
   ba6a0:	f7fe bfc3 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba6a4:	2b73      	cmp	r3, #115	; 0x73
   ba6a6:	d14d      	bne.n	ba744 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba6a8:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba6aa:	780b      	ldrb	r3, [r1, #0]
   ba6ac:	071e      	lsls	r6, r3, #28
   ba6ae:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba6b2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba6b6:	d543      	bpl.n	ba740 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba6b8:	0843      	lsrs	r3, r0, #1
   ba6ba:	f47e afb6 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba6be:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba6c0:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba6c4:	688b      	ldr	r3, [r1, #8]
   ba6c6:	437e      	muls	r6, r7
   ba6c8:	22b5      	movs	r2, #181	; 0xb5
   ba6ca:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba6cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6ce:	689b      	ldr	r3, [r3, #8]
   ba6d0:	4433      	add	r3, r6
   ba6d2:	2262      	movs	r2, #98	; 0x62
   ba6d4:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba6d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6d8:	689b      	ldr	r3, [r3, #8]
   ba6da:	4433      	add	r3, r6
   ba6dc:	2202      	movs	r2, #2
   ba6de:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba6e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6e2:	689b      	ldr	r3, [r3, #8]
   ba6e4:	4433      	add	r3, r6
   ba6e6:	2273      	movs	r2, #115	; 0x73
   ba6e8:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba6ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6ec:	886a      	ldrh	r2, [r5, #2]
   ba6ee:	689b      	ldr	r3, [r3, #8]
   ba6f0:	4433      	add	r3, r6
   ba6f2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba6f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba6f6:	886a      	ldrh	r2, [r5, #2]
   ba6f8:	689b      	ldr	r3, [r3, #8]
   ba6fa:	4433      	add	r3, r6
   ba6fc:	0a12      	lsrs	r2, r2, #8
   ba6fe:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba700:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba702:	886a      	ldrh	r2, [r5, #2]
   ba704:	6898      	ldr	r0, [r3, #8]
   ba706:	68a9      	ldr	r1, [r5, #8]
   ba708:	4430      	add	r0, r6
   ba70a:	3006      	adds	r0, #6
   ba70c:	f007 fd08 	bl	c2120 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba710:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba712:	7b2a      	ldrb	r2, [r5, #12]
   ba714:	689b      	ldr	r3, [r3, #8]
   ba716:	4433      	add	r3, r6
   ba718:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba71c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba71e:	7b6a      	ldrb	r2, [r5, #13]
   ba720:	689b      	ldr	r3, [r3, #8]
   ba722:	441e      	add	r6, r3
   ba724:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba728:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba72a:	780b      	ldrb	r3, [r1, #0]
   ba72c:	2201      	movs	r2, #1
   ba72e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba732:	40ba      	lsls	r2, r7
   ba734:	4302      	orrs	r2, r0
   ba736:	f362 03c4 	bfi	r3, r2, #3, #2
   ba73a:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba73c:	f7fe bf75 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba740:	4617      	mov	r7, r2
   ba742:	e7bd      	b.n	ba6c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba744:	2b34      	cmp	r3, #52	; 0x34
   ba746:	d129      	bne.n	ba79c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba748:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba74a:	2b00      	cmp	r3, #0
   ba74c:	f43e af6d 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba750:	689b      	ldr	r3, [r3, #8]
   ba752:	2b00      	cmp	r3, #0
   ba754:	f43e af69 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba758:	688a      	ldr	r2, [r1, #8]
   ba75a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba75c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba75e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba760:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba762:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba764:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba766:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba768:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba76a:	68a8      	ldr	r0, [r5, #8]
   ba76c:	689e      	ldr	r6, [r3, #8]
   ba76e:	2104      	movs	r1, #4
   ba770:	f7fd f994 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba774:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba776:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba778:	68a8      	ldr	r0, [r5, #8]
   ba77a:	689e      	ldr	r6, [r3, #8]
   ba77c:	2108      	movs	r1, #8
   ba77e:	f7fd f99a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba782:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba784:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba786:	68a8      	ldr	r0, [r5, #8]
   ba788:	689e      	ldr	r6, [r3, #8]
   ba78a:	210a      	movs	r1, #10
   ba78c:	f7fd f993 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba790:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba792:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba794:	e780      	b.n	ba698 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba796:	bf00      	nop
   ba798:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba79c:	2b13      	cmp	r3, #19
   ba79e:	d14a      	bne.n	ba836 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba7a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba7a2:	2b00      	cmp	r3, #0
   ba7a4:	f43e af41 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba7a8:	688a      	ldr	r2, [r1, #8]
   ba7aa:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba7ac:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba7ae:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba7b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba7b2:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba7b4:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba7b6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba7b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba7ba:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba7bc:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba7be:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba7c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba7c2:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba7c4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7c6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba7c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba7ca:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba7cc:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba7ce:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba7d0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba7d2:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba7d4:	729a      	strb	r2, [r3, #10]
   ba7d6:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba7d8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba7da:	7a3a      	ldrb	r2, [r7, #8]
   ba7dc:	b2f3      	uxtb	r3, r6
   ba7de:	429a      	cmp	r2, r3
   ba7e0:	d809      	bhi.n	ba7f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba7e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba7e4:	2201      	movs	r2, #1
   ba7e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba7ea:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba7ec:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba7ee:	b9a8      	cbnz	r0, ba81c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba7f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba7f2:	f7fe bfa8 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba7f6:	886b      	ldrh	r3, [r5, #2]
   ba7f8:	3b08      	subs	r3, #8
   ba7fa:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba7fe:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba802:	ddee      	ble.n	ba7e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba804:	3108      	adds	r1, #8
   ba806:	68a8      	ldr	r0, [r5, #8]
   ba808:	b289      	uxth	r1, r1
   ba80a:	f7fd f947 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba80e:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba812:	3601      	adds	r6, #1
   ba814:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba816:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba818:	d1de      	bne.n	ba7d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba81a:	e7e2      	b.n	ba7e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba81c:	780b      	ldrb	r3, [r1, #0]
   ba81e:	071b      	lsls	r3, r3, #28
   ba820:	d4e6      	bmi.n	ba7f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   ba822:	2248      	movs	r2, #72	; 0x48
   ba824:	3104      	adds	r1, #4
   ba826:	f007 fc7b 	bl	c2120 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba82a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   ba82c:	7813      	ldrb	r3, [r2, #0]
   ba82e:	f043 0308 	orr.w	r3, r3, #8
   ba832:	7013      	strb	r3, [r2, #0]
   ba834:	e7dc      	b.n	ba7f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   ba836:	2b15      	cmp	r3, #21
   ba838:	f47e aef7 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   ba83c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   ba83e:	2b00      	cmp	r3, #0
   ba840:	f43e aef3 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba844:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba846:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba848:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba84a:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   ba84c:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba84e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   ba850:	3101      	adds	r1, #1
   ba852:	2908      	cmp	r1, #8
   ba854:	d1f7      	bne.n	ba846 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   ba856:	68a8      	ldr	r0, [r5, #8]
   ba858:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   ba85a:	f7fd f92c 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba85e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba860:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   ba862:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba864:	7a92      	ldrb	r2, [r2, #10]
   ba866:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba868:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba86a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba86c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba86e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba870:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba872:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba874:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba876:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba878:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba87a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba87c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba87e:	73da      	strb	r2, [r3, #15]
   ba880:	2610      	movs	r6, #16
   ba882:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba884:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba886:	7b51      	ldrb	r1, [r2, #13]
   ba888:	b2da      	uxtb	r2, r3
   ba88a:	4291      	cmp	r1, r2
   ba88c:	d80b      	bhi.n	ba8a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   ba88e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba890:	2201      	movs	r2, #1
   ba892:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba896:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   ba898:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   ba89c:	2800      	cmp	r0, #0
   ba89e:	d17f      	bne.n	ba9a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   ba8a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba8a2:	f7fe bf50 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba8a6:	886a      	ldrh	r2, [r5, #2]
   ba8a8:	3a10      	subs	r2, #16
   ba8aa:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   ba8ae:	ea4f 1843 	mov.w	r8, r3, lsl #5
   ba8b2:	ddec      	ble.n	ba88e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   ba8b4:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba8b6:	46b4      	mov	ip, r6
   ba8b8:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba8ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba8bc:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba8be:	4440      	add	r0, r8
   ba8c0:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba8c2:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba8c6:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   ba8c8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba8ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba8cc:	4437      	add	r7, r6
   ba8ce:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba8d0:	4440      	add	r0, r8
   ba8d2:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba8d4:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba8d6:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   ba8d8:	2a03      	cmp	r2, #3
   ba8da:	d80b      	bhi.n	ba8f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba8dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba8de:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba8e0:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   ba8e4:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba8e8:	4440      	add	r0, r8
   ba8ea:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba8ec:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba8f0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   ba8f4:	3201      	adds	r2, #1
   ba8f6:	2a08      	cmp	r2, #8
   ba8f8:	f10c 0c01 	add.w	ip, ip, #1
   ba8fc:	d1dd      	bne.n	ba8ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   ba8fe:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba900:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba902:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   ba904:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba906:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba90a:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba90c:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   ba90e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba910:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba912:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba914:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba918:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba91a:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba91c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba91e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba920:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba922:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba926:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba928:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba92a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba92c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba92e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba930:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba934:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba936:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba938:	3118      	adds	r1, #24
   ba93a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   ba93e:	68a8      	ldr	r0, [r5, #8]
   ba940:	b289      	uxth	r1, r1
   ba942:	f7fd f8b8 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba946:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba948:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba94a:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   ba94e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba950:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba952:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba954:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba956:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   ba95c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba95e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba960:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba962:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba964:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba966:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   ba96a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba96c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba96e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba970:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba972:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba974:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   ba978:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba97a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba97c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba97e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba980:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba982:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba986:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba988:	68aa      	ldr	r2, [r5, #8]
   ba98a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba98c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba98e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba994:	f106 0620 	add.w	r6, r6, #32
   ba998:	463b      	mov	r3, r7
   ba99a:	f47f af73 	bne.w	ba884 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   ba99e:	e776      	b.n	ba88e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9a0:	780b      	ldrb	r3, [r1, #0]
   ba9a2:	071f      	lsls	r7, r3, #28
   ba9a4:	f53f af7c 	bmi.w	ba8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   ba9a8:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   ba9ac:	3102      	adds	r1, #2
   ba9ae:	f007 fbb7 	bl	c2120 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba9b4:	7813      	ldrb	r3, [r2, #0]
   ba9b6:	f043 0308 	orr.w	r3, r3, #8
   ba9ba:	7013      	strb	r3, [r2, #0]
   ba9bc:	e770      	b.n	ba8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   ba9be:	680b      	ldr	r3, [r1, #0]
   ba9c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba9c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   ba9c8:	d12f      	bne.n	baa2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   ba9ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
   ba9cc:	2b00      	cmp	r3, #0
   ba9ce:	f43e ae2c 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba9d2:	688a      	ldr	r2, [r1, #8]
   ba9d4:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   ba9d6:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   ba9d8:	6f06      	ldr	r6, [r0, #112]	; 0x70
   ba9da:	68a8      	ldr	r0, [r5, #8]
   ba9dc:	2102      	movs	r1, #2
   ba9de:	f7fd f86a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9e2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   ba9e4:	68a8      	ldr	r0, [r5, #8]
   ba9e6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba9e8:	2104      	movs	r1, #4
   ba9ea:	f7fd f857 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9ee:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   ba9f0:	68a8      	ldr	r0, [r5, #8]
   ba9f2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba9f4:	2108      	movs	r1, #8
   ba9f6:	f7fd f851 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9fa:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   ba9fc:	68a8      	ldr	r0, [r5, #8]
   ba9fe:	6f26      	ldr	r6, [r4, #112]	; 0x70
   baa00:	210c      	movs	r1, #12
   baa02:	f7fd f858 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa06:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   baa08:	68a8      	ldr	r0, [r5, #8]
   baa0a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   baa0c:	210e      	movs	r1, #14
   baa0e:	f7fd f852 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa12:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   baa14:	68a8      	ldr	r0, [r5, #8]
   baa16:	6f26      	ldr	r6, [r4, #112]	; 0x70
   baa18:	2110      	movs	r1, #16
   baa1a:	f7fd f84c 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa1e:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   baa20:	6f23      	ldr	r3, [r4, #112]	; 0x70
   baa22:	2201      	movs	r2, #1
   baa24:	751a      	strb	r2, [r3, #20]
   baa26:	f7fe be00 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   baa2a:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   baa2e:	f47e adfc 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   baa32:	6f46      	ldr	r6, [r0, #116]	; 0x74
   baa34:	2e00      	cmp	r6, #0
   baa36:	f43e adf8 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   baa3a:	68a8      	ldr	r0, [r5, #8]
   baa3c:	2100      	movs	r1, #0
   baa3e:	f7fd f83a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa42:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   baa44:	68a8      	ldr	r0, [r5, #8]
   baa46:	6f66      	ldr	r6, [r4, #116]	; 0x74
   baa48:	2102      	movs	r1, #2
   baa4a:	f7fd f834 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa4e:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   baa50:	68a8      	ldr	r0, [r5, #8]
   baa52:	6f66      	ldr	r6, [r4, #116]	; 0x74
   baa54:	2104      	movs	r1, #4
   baa56:	f7fd f82e 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa5a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa5c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   baa5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa62:	609a      	str	r2, [r3, #8]
   baa64:	f7fe bde1 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   baa68:	680b      	ldr	r3, [r1, #0]
   baa6a:	4ab0      	ldr	r2, [pc, #704]	; (bad2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   baa6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   baa70:	4293      	cmp	r3, r2
   baa72:	f47e adda 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   baa76:	6f83      	ldr	r3, [r0, #120]	; 0x78
   baa78:	2b00      	cmp	r3, #0
   baa7a:	f43e add6 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   baa7e:	688a      	ldr	r2, [r1, #8]
   baa80:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   baa82:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   baa84:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   baa86:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   baa88:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   baa8a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   baa8c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   baa8e:	68a8      	ldr	r0, [r5, #8]
   baa90:	2102      	movs	r1, #2
   baa92:	f7fd f810 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa96:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   baa98:	68a8      	ldr	r0, [r5, #8]
   baa9a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baa9c:	2104      	movs	r1, #4
   baa9e:	f7fd f80a 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baaa2:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   baaa4:	68a8      	ldr	r0, [r5, #8]
   baaa6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baaa8:	2106      	movs	r1, #6
   baaaa:	f7fd f804 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baaae:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   baab0:	68a8      	ldr	r0, [r5, #8]
   baab2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baab4:	2108      	movs	r1, #8
   baab6:	f7fc fff1 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaba:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   baabc:	68a8      	ldr	r0, [r5, #8]
   baabe:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baac0:	210c      	movs	r1, #12
   baac2:	f7fc ffeb 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baac6:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   baac8:	68a8      	ldr	r0, [r5, #8]
   baaca:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baacc:	2110      	movs	r1, #16
   baace:	f7fc ffe5 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baad2:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   baad4:	68a8      	ldr	r0, [r5, #8]
   baad6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baad8:	2114      	movs	r1, #20
   baada:	f7fc ffdf 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baade:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   baae0:	68a8      	ldr	r0, [r5, #8]
   baae2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baae4:	2118      	movs	r1, #24
   baae6:	f7fc ffd9 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaea:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baaec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baaee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baaf2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baaf4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   baaf8:	b17a      	cbz	r2, bab1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baafa:	7819      	ldrb	r1, [r3, #0]
   baafc:	070e      	lsls	r6, r1, #28
   baafe:	d40c      	bmi.n	bab1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bab00:	1d19      	adds	r1, r3, #4
   bab02:	3320      	adds	r3, #32
   bab04:	f851 0b04 	ldr.w	r0, [r1], #4
   bab08:	f842 0b04 	str.w	r0, [r2], #4
   bab0c:	4299      	cmp	r1, r3
   bab0e:	d1f9      	bne.n	bab04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bab10:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bab12:	7813      	ldrb	r3, [r2, #0]
   bab14:	f043 0308 	orr.w	r3, r3, #8
   bab18:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bab1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bab1c:	f7fe be13 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bab20:	4a83      	ldr	r2, [pc, #524]	; (bad30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bab22:	4293      	cmp	r3, r2
   bab24:	d158      	bne.n	babd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bab26:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bab2a:	2f00      	cmp	r7, #0
   bab2c:	f43e ad7d 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bab30:	68a8      	ldr	r0, [r5, #8]
   bab32:	2100      	movs	r1, #0
   bab34:	f7fc ffb2 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab38:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bab3a:	68a8      	ldr	r0, [r5, #8]
   bab3c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bab40:	2108      	movs	r1, #8
   bab42:	f7fc ffab 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab46:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab48:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bab4a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab4e:	210c      	movs	r1, #12
   bab50:	f7fc ffa4 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bab54:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab56:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bab58:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab5c:	4631      	mov	r1, r6
   bab5e:	f7fc ff9d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bab62:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab64:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bab66:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab6a:	2114      	movs	r1, #20
   bab6c:	f7fc ff96 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bab70:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab72:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bab74:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab78:	2118      	movs	r1, #24
   bab7a:	f7fc ff8f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bab7e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab80:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bab82:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab86:	211c      	movs	r1, #28
   bab88:	f7fc ff88 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bab8c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bab90:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab94:	2120      	movs	r1, #32
   bab96:	f7fc ff81 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bab9a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baba4:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baba6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   babaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   babac:	b182      	cbz	r2, babd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   babae:	7819      	ldrb	r1, [r3, #0]
   babb0:	0709      	lsls	r1, r1, #28
   babb2:	d40d      	bmi.n	babd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   babb4:	1d19      	adds	r1, r3, #4
   babb6:	3328      	adds	r3, #40	; 0x28
   babb8:	f851 0b04 	ldr.w	r0, [r1], #4
   babbc:	f842 0b04 	str.w	r0, [r2], #4
   babc0:	4299      	cmp	r1, r3
   babc2:	d1f9      	bne.n	babb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   babc4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   babc8:	7813      	ldrb	r3, [r2, #0]
   babca:	f043 0308 	orr.w	r3, r3, #8
   babce:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   babd0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   babd4:	f7fe bdb7 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   babd8:	784b      	ldrb	r3, [r1, #1]
   babda:	2b02      	cmp	r3, #2
   babdc:	d158      	bne.n	bac90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   babde:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   babe2:	2e00      	cmp	r6, #0
   babe4:	f43e ad21 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   babe8:	68a8      	ldr	r0, [r5, #8]
   babea:	2100      	movs	r1, #0
   babec:	f7fc ff56 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babf0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   babf2:	68a8      	ldr	r0, [r5, #8]
   babf4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   babf8:	2104      	movs	r1, #4
   babfa:	f7fc ff5c 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babfe:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bac00:	68a8      	ldr	r0, [r5, #8]
   bac02:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bac06:	2106      	movs	r1, #6
   bac08:	f7fc ff55 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac0c:	8170      	strh	r0, [r6, #10]
   bac0e:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bac10:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bac14:	886b      	ldrh	r3, [r5, #2]
   bac16:	7a7a      	ldrb	r2, [r7, #9]
   bac18:	b2b1      	uxth	r1, r6
   bac1a:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bac1e:	d320      	bcc.n	bac62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bac20:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bac24:	886a      	ldrh	r2, [r5, #2]
   bac26:	7a73      	ldrb	r3, [r6, #9]
   bac28:	08db      	lsrs	r3, r3, #3
   bac2a:	3302      	adds	r3, #2
   bac2c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bac30:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bac34:	d826      	bhi.n	bac84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac36:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bac3a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bac3e:	b160      	cbz	r0, bac5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac40:	780b      	ldrb	r3, [r1, #0]
   bac42:	071a      	lsls	r2, r3, #28
   bac44:	d409      	bmi.n	bac5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bac46:	2288      	movs	r2, #136	; 0x88
   bac48:	3104      	adds	r1, #4
   bac4a:	f007 fa69 	bl	c2120 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bac4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bac52:	7813      	ldrb	r3, [r2, #0]
   bac54:	f043 0308 	orr.w	r3, r3, #8
   bac58:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bac5a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bac5e:	f7fe bd72 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bac62:	3b08      	subs	r3, #8
   bac64:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bac68:	ddda      	ble.n	bac20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bac6a:	0089      	lsls	r1, r1, #2
   bac6c:	3108      	adds	r1, #8
   bac6e:	68a8      	ldr	r0, [r5, #8]
   bac70:	b289      	uxth	r1, r1
   bac72:	f7fc ff13 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac76:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bac7a:	3601      	adds	r6, #1
   bac7c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bac7e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bac80:	d1c6      	bne.n	bac10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bac82:	e7cd      	b.n	bac20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bac84:	68a8      	ldr	r0, [r5, #8]
   bac86:	f7fc ff09 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac8a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bac8e:	e7d2      	b.n	bac36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bac90:	2b03      	cmp	r3, #3
   bac92:	d14f      	bne.n	bad34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bac94:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bac98:	2900      	cmp	r1, #0
   bac9a:	f43e acc6 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bac9e:	886a      	ldrh	r2, [r5, #2]
   baca0:	1f13      	subs	r3, r2, #4
   baca2:	bf48      	it	mi
   baca4:	1cd3      	addmi	r3, r2, #3
   baca6:	10db      	asrs	r3, r3, #3
   baca8:	2700      	movs	r7, #0
   bacaa:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bacae:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bacb0:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bacb2:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bacb6:	3b04      	subs	r3, #4
   bacb8:	42bb      	cmp	r3, r7
   bacba:	dc08      	bgt.n	bacce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacbc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bacc0:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bacc4:	bb10      	cbnz	r0, bad0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bacc6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bacca:	f7fe bd3c 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bacce:	fa1f f887 	uxth.w	r8, r7
   bacd2:	f108 0104 	add.w	r1, r8, #4
   bacd6:	68a8      	ldr	r0, [r5, #8]
   bacd8:	b289      	uxth	r1, r1
   bacda:	f7fc fedf 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacde:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bace2:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bace6:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bacea:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bacee:	68a8      	ldr	r0, [r5, #8]
   bacf0:	b289      	uxth	r1, r1
   bacf2:	f7fc fed3 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bacf6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bacfa:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bacfc:	3601      	adds	r6, #1
   bacfe:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bad00:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bad04:	f107 0708 	add.w	r7, r7, #8
   bad08:	d1d2      	bne.n	bacb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bad0a:	e7d7      	b.n	bacbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad0c:	780b      	ldrb	r3, [r1, #0]
   bad0e:	071b      	lsls	r3, r3, #28
   bad10:	d4d9      	bmi.n	bacc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bad12:	f44f 720e 	mov.w	r2, #568	; 0x238
   bad16:	3108      	adds	r1, #8
   bad18:	3004      	adds	r0, #4
   bad1a:	f007 fa01 	bl	c2120 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bad1e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bad22:	7813      	ldrb	r3, [r2, #0]
   bad24:	f043 0308 	orr.w	r3, r3, #8
   bad28:	7013      	strb	r3, [r2, #0]
   bad2a:	e7cc      	b.n	bacc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bad2c:	001c0300 	.word	0x001c0300
   bad30:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bad34:	2b10      	cmp	r3, #16
   bad36:	f47e ac78 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bad3a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bad3e:	2e00      	cmp	r6, #0
   bad40:	f43e ac73 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bad44:	68a8      	ldr	r0, [r5, #8]
   bad46:	2100      	movs	r1, #0
   bad48:	f7fc fea8 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad4c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bad4e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bad50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bad54:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bad56:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bad58:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bad5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bad5e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bad60:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bad62:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bad64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bad68:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bad6a:	74da      	strb	r2, [r3, #19]
   bad6c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bad6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bad72:	7cc6      	ldrb	r6, [r0, #19]
   bad74:	b28a      	uxth	r2, r1
   bad76:	4296      	cmp	r6, r2
   bad78:	d80c      	bhi.n	bad94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bad7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad82:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bad88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bad8a:	bb62      	cbnz	r2, bade6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bad8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bad90:	f7fe bcd9 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bad94:	886a      	ldrh	r2, [r5, #2]
   bad96:	3a10      	subs	r2, #16
   bad98:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bad9c:	dded      	ble.n	bad7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bad9e:	68aa      	ldr	r2, [r5, #8]
   bada0:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bada2:	1d0a      	adds	r2, r1, #4
   bada4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bada8:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   badaa:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   badac:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   badae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   badb2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   badb4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   badb8:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   badba:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   badbc:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   badbe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   badc2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   badc4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   badc8:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   badca:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   badcc:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   badce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   badd2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   badd4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   badd8:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   badda:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baddc:	2907      	cmp	r1, #7
   badde:	f103 0304 	add.w	r3, r3, #4
   bade2:	d1c4      	bne.n	bad6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bade4:	e7c9      	b.n	bad7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bade6:	7819      	ldrb	r1, [r3, #0]
   bade8:	070f      	lsls	r7, r1, #28
   badea:	d4cf      	bmi.n	bad8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   badec:	1d19      	adds	r1, r3, #4
   badee:	3330      	adds	r3, #48	; 0x30
   badf0:	f851 0b04 	ldr.w	r0, [r1], #4
   badf4:	f842 0b04 	str.w	r0, [r2], #4
   badf8:	4299      	cmp	r1, r3
   badfa:	d1f9      	bne.n	badf0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   badfc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bae00:	7813      	ldrb	r3, [r2, #0]
   bae02:	f043 0308 	orr.w	r3, r3, #8
   bae06:	7013      	strb	r3, [r2, #0]
   bae08:	e7c0      	b.n	bad8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bae0a:	680b      	ldr	r3, [r1, #0]
   bae0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bae10:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bae14:	d16a      	bne.n	baeec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bae16:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bae1a:	2b00      	cmp	r3, #0
   bae1c:	f43e ac05 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bae20:	7818      	ldrb	r0, [r3, #0]
   bae22:	7859      	ldrb	r1, [r3, #1]
   bae24:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bae26:	bf36      	itet	cc
   bae28:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bae2c:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bae2e:	1a52      	subcc	r2, r2, r1
   bae30:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bae32:	2a0e      	cmp	r2, #14
   bae34:	d84b      	bhi.n	baece <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bae36:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bae38:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bae3c:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bae3e:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bae40:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae44:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bae46:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae48:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bae4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae4e:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bae50:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae54:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bae56:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae58:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bae5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae5e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bae60:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae64:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bae66:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae68:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bae6a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae6e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bae70:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae74:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bae76:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae78:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bae7a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae7e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bae80:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae84:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bae86:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae88:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bae8a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae8e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bae90:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bae94:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bae96:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bae98:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bae9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bae9e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   baea0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   baea4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   baea6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   baea8:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   baeaa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   baeae:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   baeb0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   baeb4:	7813      	ldrb	r3, [r2, #0]
   baeb6:	3301      	adds	r3, #1
   baeb8:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   baeba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   baebe:	781a      	ldrb	r2, [r3, #0]
   baec0:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   baec2:	f47e abb2 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   baec6:	2200      	movs	r2, #0
   baec8:	701a      	strb	r2, [r3, #0]
   baeca:	f7fe bbae 	b.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   baece:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   baed2:	b923      	cbnz	r3, baede <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   baed4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   baed8:	2b00      	cmp	r3, #0
   baeda:	f43e aba6 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   baede:	4996      	ldr	r1, [pc, #600]	; (bb138 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   baee0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   baee4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   baee8:	f005 bc73 	b.w	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   baeec:	784b      	ldrb	r3, [r1, #1]
   baeee:	2b80      	cmp	r3, #128	; 0x80
   baef0:	f47e ab9b 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baef4:	884b      	ldrh	r3, [r1, #2]
   baef6:	2ba4      	cmp	r3, #164	; 0xa4
   baef8:	f63e ab97 	bhi.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   baefc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   baf00:	2a00      	cmp	r2, #0
   baf02:	f43e ab92 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   baf06:	7810      	ldrb	r0, [r2, #0]
   baf08:	7851      	ldrb	r1, [r2, #1]
   baf0a:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   baf0c:	bf36      	itet	cc
   baf0e:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   baf10:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   baf12:	1a5b      	subcc	r3, r3, r1
   baf14:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   baf16:	2bf8      	cmp	r3, #248	; 0xf8
   baf18:	d84f      	bhi.n	bafba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   baf1a:	23ac      	movs	r3, #172	; 0xac
   baf1c:	fb03 2200 	mla	r2, r3, r0, r2
   baf20:	21b5      	movs	r1, #181	; 0xb5
   baf22:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   baf24:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf28:	7811      	ldrb	r1, [r2, #0]
   baf2a:	fb03 2201 	mla	r2, r3, r1, r2
   baf2e:	2162      	movs	r1, #98	; 0x62
   baf30:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   baf32:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf36:	7811      	ldrb	r1, [r2, #0]
   baf38:	fb03 2201 	mla	r2, r3, r1, r2
   baf3c:	2113      	movs	r1, #19
   baf3e:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   baf40:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf44:	7811      	ldrb	r1, [r2, #0]
   baf46:	fb03 2201 	mla	r2, r3, r1, r2
   baf4a:	2180      	movs	r1, #128	; 0x80
   baf4c:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   baf4e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf52:	7811      	ldrb	r1, [r2, #0]
   baf54:	fb03 2201 	mla	r2, r3, r1, r2
   baf58:	8869      	ldrh	r1, [r5, #2]
   baf5a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   baf5c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf60:	7811      	ldrb	r1, [r2, #0]
   baf62:	fb03 2201 	mla	r2, r3, r1, r2
   baf66:	8869      	ldrh	r1, [r5, #2]
   baf68:	0a09      	lsrs	r1, r1, #8
   baf6a:	71d1      	strb	r1, [r2, #7]
   baf6c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   baf6e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   baf70:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   baf74:	b28e      	uxth	r6, r1
   baf76:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   baf78:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   baf7a:	d907      	bls.n	baf8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   baf7c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   baf7e:	fb03 2200 	mla	r2, r3, r0, r2
   baf82:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   baf84:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   baf86:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   baf88:	3101      	adds	r1, #1
   baf8a:	e7f0      	b.n	baf6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   baf8c:	fb03 2200 	mla	r2, r3, r0, r2
   baf90:	7b29      	ldrb	r1, [r5, #12]
   baf92:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   baf96:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baf9a:	7b69      	ldrb	r1, [r5, #13]
   baf9c:	7810      	ldrb	r0, [r2, #0]
   baf9e:	fb03 2300 	mla	r3, r3, r0, r2
   bafa2:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bafa6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bafaa:	7813      	ldrb	r3, [r2, #0]
   bafac:	3301      	adds	r3, #1
   bafae:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bafb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bafb4:	781a      	ldrb	r2, [r3, #0]
   bafb6:	2afa      	cmp	r2, #250	; 0xfa
   bafb8:	e783      	b.n	baec2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bafba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bafbe:	b923      	cbnz	r3, bafca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bafc0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bafc4:	2b00      	cmp	r3, #0
   bafc6:	f43e ab30 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bafca:	495c      	ldr	r1, [pc, #368]	; (bb13c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bafcc:	e788      	b.n	baee0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bafce:	680b      	ldr	r3, [r1, #0]
   bafd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bafd4:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bafd8:	f040 80b2 	bne.w	bb140 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bafdc:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bafe0:	2f00      	cmp	r7, #0
   bafe2:	f43e ab22 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bafe6:	68a8      	ldr	r0, [r5, #8]
   bafe8:	2100      	movs	r1, #0
   bafea:	f7fc fd57 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafee:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   baff0:	68a8      	ldr	r0, [r5, #8]
   baff2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   baff6:	2104      	movs	r1, #4
   baff8:	f7fc fd5d 	bl	b7ab6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baffc:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   baffe:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb000:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb004:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb006:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb008:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb00a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb00e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb010:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb012:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb014:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb018:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb01a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb01c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb01e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb022:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb024:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb026:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb028:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb02c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb02e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb030:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb032:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb036:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb038:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb03a:	210c      	movs	r1, #12
   bb03c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb03e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb042:	f7fc fd2b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb046:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb048:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb04a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb04e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb050:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb052:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb054:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb058:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb05a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb05c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb05e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb062:	2114      	movs	r1, #20
   bb064:	f7fc fd1a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb068:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb06a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb06c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb070:	2118      	movs	r1, #24
   bb072:	f7fc fd13 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb076:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb078:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb07a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb07e:	211c      	movs	r1, #28
   bb080:	f7fc fd0c 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb084:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb086:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb088:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb08c:	2120      	movs	r1, #32
   bb08e:	f7fc fd05 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb092:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb094:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb096:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb09a:	2124      	movs	r1, #36	; 0x24
   bb09c:	f7fc fcfe 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb0a0:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb0a4:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0a8:	4631      	mov	r1, r6
   bb0aa:	f7fc fcf7 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb0ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb0b2:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0b6:	212c      	movs	r1, #44	; 0x2c
   bb0b8:	f7fc fcf0 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb0bc:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0be:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb0c0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0c4:	2130      	movs	r1, #48	; 0x30
   bb0c6:	f7fc fce9 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb0ca:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb0cc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb0d0:	68a8      	ldr	r0, [r5, #8]
   bb0d2:	2134      	movs	r1, #52	; 0x34
   bb0d4:	f7fc fce2 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0d8:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb0da:	68a8      	ldr	r0, [r5, #8]
   bb0dc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb0e0:	2138      	movs	r1, #56	; 0x38
   bb0e2:	f7fc fcdb 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0e6:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb0e8:	68a8      	ldr	r0, [r5, #8]
   bb0ea:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb0ee:	213c      	movs	r1, #60	; 0x3c
   bb0f0:	f7fc fcd4 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0f4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb0f6:	68a8      	ldr	r0, [r5, #8]
   bb0f8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb0fc:	2140      	movs	r1, #64	; 0x40
   bb0fe:	f7fc fccd 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb102:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb104:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb10c:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb10e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb112:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb114:	b160      	cbz	r0, bb130 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb116:	780b      	ldrb	r3, [r1, #0]
   bb118:	071e      	lsls	r6, r3, #28
   bb11a:	d409      	bmi.n	bb130 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb11c:	2248      	movs	r2, #72	; 0x48
   bb11e:	3104      	adds	r1, #4
   bb120:	f006 fffe 	bl	c2120 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb124:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb128:	7813      	ldrb	r3, [r2, #0]
   bb12a:	f043 0308 	orr.w	r3, r3, #8
   bb12e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb130:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb134:	f7fe bb07 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb138:	000c4cb5 	.word	0x000c4cb5
   bb13c:	000c4cf2 	.word	0x000c4cf2
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb140:	4a5d      	ldr	r2, [pc, #372]	; (bb2b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb142:	4293      	cmp	r3, r2
   bb144:	d156      	bne.n	bb1f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb146:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb14a:	2e00      	cmp	r6, #0
   bb14c:	f43e aa6d 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb150:	68a8      	ldr	r0, [r5, #8]
   bb152:	2100      	movs	r1, #0
   bb154:	f7fc fca2 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb158:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb15a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb15c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb160:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb162:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb164:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb166:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb16a:	2108      	movs	r1, #8
   bb16c:	f7fc fc96 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb170:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb172:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb174:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb178:	210c      	movs	r1, #12
   bb17a:	f7fc fc8f 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb17e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb180:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb182:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb186:	2110      	movs	r1, #16
   bb188:	f7fc fc88 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb18c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb18e:	68a8      	ldr	r0, [r5, #8]
   bb190:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb194:	2114      	movs	r1, #20
   bb196:	f7fc fc81 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb19a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb19c:	68a8      	ldr	r0, [r5, #8]
   bb19e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb1a2:	2118      	movs	r1, #24
   bb1a4:	f7fc fc7a 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1a8:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb1aa:	68a8      	ldr	r0, [r5, #8]
   bb1ac:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb1b0:	211c      	movs	r1, #28
   bb1b2:	f7fc fc73 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1b6:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb1b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb1c0:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb1c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb1c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb1c8:	b182      	cbz	r2, bb1ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb1ca:	7819      	ldrb	r1, [r3, #0]
   bb1cc:	0708      	lsls	r0, r1, #28
   bb1ce:	d40d      	bmi.n	bb1ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb1d0:	1d19      	adds	r1, r3, #4
   bb1d2:	3324      	adds	r3, #36	; 0x24
   bb1d4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb1d8:	f842 0b04 	str.w	r0, [r2], #4
   bb1dc:	4299      	cmp	r1, r3
   bb1de:	d1f9      	bne.n	bb1d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1e0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb1e4:	7813      	ldrb	r3, [r2, #0]
   bb1e6:	f043 0308 	orr.w	r3, r3, #8
   bb1ea:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb1ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb1f0:	f7fe baa9 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb1f4:	4a31      	ldr	r2, [pc, #196]	; (bb2bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb1f6:	4293      	cmp	r3, r2
   bb1f8:	f47e aa17 	bne.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb1fc:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb200:	2e00      	cmp	r6, #0
   bb202:	f43e aa12 	beq.w	b962a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb206:	68a8      	ldr	r0, [r5, #8]
   bb208:	2100      	movs	r1, #0
   bb20a:	f7fc fc47 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb20e:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb210:	68a8      	ldr	r0, [r5, #8]
   bb212:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb216:	2108      	movs	r1, #8
   bb218:	f7fc fc40 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb21c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb21e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb220:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb224:	210c      	movs	r1, #12
   bb226:	f7fc fc39 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb22a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb22c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb22e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb232:	2110      	movs	r1, #16
   bb234:	f7fc fc32 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb238:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb23c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb240:	2114      	movs	r1, #20
   bb242:	f7fc fc2b 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb246:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb248:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb24a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb24e:	2118      	movs	r1, #24
   bb250:	f7fc fc24 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb254:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb256:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb258:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb25c:	211c      	movs	r1, #28
   bb25e:	f7fc fc1d 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb262:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb264:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb266:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb26a:	2120      	movs	r1, #32
   bb26c:	f7fc fc16 	bl	b7a9c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb270:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb272:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb27a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb27c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb282:	b182      	cbz	r2, bb2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb284:	7819      	ldrb	r1, [r3, #0]
   bb286:	0709      	lsls	r1, r1, #28
   bb288:	d40d      	bmi.n	bb2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb28a:	1d19      	adds	r1, r3, #4
   bb28c:	3328      	adds	r3, #40	; 0x28
   bb28e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb292:	f842 0b04 	str.w	r0, [r2], #4
   bb296:	4299      	cmp	r1, r3
   bb298:	d1f9      	bne.n	bb28e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb29a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb29e:	7813      	ldrb	r3, [r2, #0]
   bb2a0:	f043 0308 	orr.w	r3, r3, #8
   bb2a4:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb2a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb2aa:	f7fe ba4c 	b.w	b9746 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb2ae:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb2b0:	2018      	movs	r0, #24
   bb2b2:	f7ff b9a2 	b.w	ba5fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb2b6:	bf00      	nop
   bb2b8:	00200100 	.word	0x00200100
   bb2bc:	00240200 	.word	0x00240200

000bb2c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb2c4:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb2c6:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb2ca:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb2ce:	4604      	mov	r4, r0
   bb2d0:	460f      	mov	r7, r1
   bb2d2:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb2d4:	b993      	cbnz	r3, bb2fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb2d6:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb2da:	886b      	ldrh	r3, [r5, #2]
   bb2dc:	88aa      	ldrh	r2, [r5, #4]
   bb2de:	3303      	adds	r3, #3
   bb2e0:	4293      	cmp	r3, r2
   bb2e2:	db03      	blt.n	bb2ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb2e4:	4639      	mov	r1, r7
   bb2e6:	4620      	mov	r0, r4
   bb2e8:	f7fd fdf0 	bl	b8ecc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb2ec:	88ae      	ldrh	r6, [r5, #4]
   bb2ee:	bb7e      	cbnz	r6, bb350 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb2f0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb2f2:	88ab      	ldrh	r3, [r5, #4]
   bb2f4:	3301      	adds	r3, #1
   bb2f6:	80ab      	strh	r3, [r5, #4]
}
   bb2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb2fc:	2b03      	cmp	r3, #3
   bb2fe:	d124      	bne.n	bb34a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb300:	7852      	ldrb	r2, [r2, #1]
   bb302:	7829      	ldrb	r1, [r5, #0]
   bb304:	f7fc fdda 	bl	b7ebc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb308:	4680      	mov	r8, r0
   bb30a:	2800      	cmp	r0, #0
   bb30c:	d1e5      	bne.n	bb2da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb30e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb312:	b91b      	cbnz	r3, bb31c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb314:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb318:	2b00      	cmp	r3, #0
   bb31a:	d0de      	beq.n	bb2da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb31c:	49b7      	ldr	r1, [pc, #732]	; (bb5fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb31e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb322:	f005 fa3c 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb326:	7829      	ldrb	r1, [r5, #0]
   bb328:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb32c:	220a      	movs	r2, #10
   bb32e:	f7fc fbd5 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb332:	49b3      	ldr	r1, [pc, #716]	; (bb600 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb334:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb338:	f005 fa31 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb33c:	7869      	ldrb	r1, [r5, #1]
   bb33e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb342:	220a      	movs	r2, #10
   bb344:	f7fc fbd1 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb348:	e7c7      	b.n	bb2da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb34a:	f04f 0802 	mov.w	r8, #2
   bb34e:	e7c4      	b.n	bb2da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb350:	2e01      	cmp	r6, #1
   bb352:	d101      	bne.n	bb358 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb354:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb356:	e7cc      	b.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb358:	2e02      	cmp	r6, #2
   bb35a:	d101      	bne.n	bb360 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb35c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb35e:	e7c8      	b.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb360:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb362:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb364:	d103      	bne.n	bb36e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb366:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb36a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb36c:	e7c1      	b.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb36e:	1d0b      	adds	r3, r1, #4
   bb370:	429e      	cmp	r6, r3
   bb372:	d136      	bne.n	bb3e2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb374:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb376:	88aa      	ldrh	r2, [r5, #4]
   bb378:	f108 0306 	add.w	r3, r8, #6
   bb37c:	429a      	cmp	r2, r3
   bb37e:	d1b8      	bne.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb380:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb384:	2b00      	cmp	r3, #0
   bb386:	d1b4      	bne.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb388:	2200      	movs	r2, #0
   bb38a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb38c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb390:	b91a      	cbnz	r2, bb39a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb392:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb396:	2a00      	cmp	r2, #0
   bb398:	d0ab      	beq.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb39a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb39e:	2b00      	cmp	r3, #0
   bb3a0:	f000 8170 	beq.w	bb684 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb3a4:	4997      	ldr	r1, [pc, #604]	; (bb604 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb3a6:	f005 f9fa 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb3aa:	4997      	ldr	r1, [pc, #604]	; (bb608 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb3ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb3b0:	f005 f9f5 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb3b4:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb3b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb3bc:	220a      	movs	r2, #10
   bb3be:	f005 fa0a 	bl	c07d6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb3c2:	4992      	ldr	r1, [pc, #584]	; (bb60c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb3c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb3c8:	f005 f9e9 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb3cc:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb3d0:	220a      	movs	r2, #10
   bb3d2:	4641      	mov	r1, r8
   bb3d4:	4620      	mov	r0, r4
   bb3d6:	f005 f9fe 	bl	c07d6 <_ZN5Print11printNumberEmh>
        n += println();
   bb3da:	4620      	mov	r0, r4
   bb3dc:	f005 f9e3 	bl	c07a6 <_ZN5Print7printlnEv>
        return n;
   bb3e0:	e787      	b.n	bb2f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb3e2:	3105      	adds	r1, #5
   bb3e4:	428e      	cmp	r6, r1
   bb3e6:	f040 812f 	bne.w	bb648 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb3ea:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb3ec:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb3ee:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb3f0:	89a9      	ldrh	r1, [r5, #12]
   bb3f2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb3f6:	4291      	cmp	r1, r2
   bb3f8:	f040 80ae 	bne.w	bb558 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb3fc:	2301      	movs	r3, #1
   bb3fe:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb400:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb404:	7829      	ldrb	r1, [r5, #0]
   bb406:	4549      	cmp	r1, r9
   bb408:	d155      	bne.n	bb4b6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb40a:	786b      	ldrb	r3, [r5, #1]
   bb40c:	4553      	cmp	r3, sl
   bb40e:	d152      	bne.n	bb4b6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb410:	2301      	movs	r3, #1
   bb412:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb414:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb418:	b3b3      	cbz	r3, bb488 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb41a:	497d      	ldr	r1, [pc, #500]	; (bb610 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb41c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb420:	f005 f9bd 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb424:	220a      	movs	r2, #10
   bb426:	8869      	ldrh	r1, [r5, #2]
   bb428:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb42c:	f005 f9d3 	bl	c07d6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb430:	4978      	ldr	r1, [pc, #480]	; (bb614 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb432:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb436:	f005 f9b2 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb43a:	2200      	movs	r2, #0
   bb43c:	4629      	mov	r1, r5
   bb43e:	4620      	mov	r0, r4
   bb440:	f7fd ff50 	bl	b92e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb444:	7bab      	ldrb	r3, [r5, #14]
   bb446:	2b01      	cmp	r3, #1
   bb448:	d104      	bne.n	bb454 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb44a:	4973      	ldr	r1, [pc, #460]	; (bb618 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb44c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb450:	f005 f9bf 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb454:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb458:	2b01      	cmp	r3, #1
   bb45a:	d104      	bne.n	bb466 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb45c:	496f      	ldr	r1, [pc, #444]	; (bb61c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb45e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb462:	f005 f9b6 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb466:	7beb      	ldrb	r3, [r5, #15]
   bb468:	2b01      	cmp	r3, #1
   bb46a:	d104      	bne.n	bb476 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb46c:	496c      	ldr	r1, [pc, #432]	; (bb620 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb46e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb472:	f005 f9ae 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb476:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb47a:	2b01      	cmp	r3, #1
   bb47c:	d104      	bne.n	bb488 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb47e:	4969      	ldr	r1, [pc, #420]	; (bb624 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb480:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb484:	f005 f9a5 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb488:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb48c:	b91b      	cbnz	r3, bb496 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb48e:	4629      	mov	r1, r5
   bb490:	4620      	mov	r0, r4
   bb492:	f7fe f8b9 	bl	b9608 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb496:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb49a:	2b03      	cmp	r3, #3
   bb49c:	f47f af6b 	bne.w	bb376 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb4a0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb4a4:	b108      	cbz	r0, bb4aa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb4a6:	f7f8 fdfa 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb4aa:	2300      	movs	r3, #0
   bb4ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb4b0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb4b4:	e75f      	b.n	bb376 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb4b6:	882b      	ldrh	r3, [r5, #0]
   bb4b8:	f240 1205 	movw	r2, #261	; 0x105
   bb4bc:	4293      	cmp	r3, r2
   bb4be:	d123      	bne.n	bb508 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb4c0:	68ab      	ldr	r3, [r5, #8]
   bb4c2:	781a      	ldrb	r2, [r3, #0]
   bb4c4:	454a      	cmp	r2, r9
   bb4c6:	d102      	bne.n	bb4ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb4c8:	785b      	ldrb	r3, [r3, #1]
   bb4ca:	4553      	cmp	r3, sl
   bb4cc:	d0a0      	beq.n	bb410 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb4ce:	786a      	ldrb	r2, [r5, #1]
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	f7fc fbf1 	bl	b7cb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb4d6:	2800      	cmp	r0, #0
   bb4d8:	d09c      	beq.n	bb414 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb4da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb4de:	2b00      	cmp	r3, #0
   bb4e0:	d0d2      	beq.n	bb488 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb4e2:	4951      	ldr	r1, [pc, #324]	; (bb628 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb4e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4e8:	f005 f959 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb4ec:	2210      	movs	r2, #16
   bb4ee:	7829      	ldrb	r1, [r5, #0]
   bb4f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4f4:	f7fc faf2 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb4f8:	4941      	ldr	r1, [pc, #260]	; (bb600 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb4fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4fe:	f005 f94e 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb502:	7869      	ldrb	r1, [r5, #1]
   bb504:	2210      	movs	r2, #16
   bb506:	e022      	b.n	bb54e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb508:	2b05      	cmp	r3, #5
   bb50a:	d1e0      	bne.n	bb4ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb50c:	68ab      	ldr	r3, [r5, #8]
   bb50e:	781a      	ldrb	r2, [r3, #0]
   bb510:	454a      	cmp	r2, r9
   bb512:	d1dc      	bne.n	bb4ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb514:	785b      	ldrb	r3, [r3, #1]
   bb516:	4553      	cmp	r3, sl
   bb518:	d1d9      	bne.n	bb4ce <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb51a:	2303      	movs	r3, #3
   bb51c:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb51e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb522:	2b00      	cmp	r3, #0
   bb524:	d0b0      	beq.n	bb488 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb526:	4941      	ldr	r1, [pc, #260]	; (bb62c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb528:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb52c:	f005 f937 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb530:	68ab      	ldr	r3, [r5, #8]
   bb532:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb536:	7819      	ldrb	r1, [r3, #0]
   bb538:	2210      	movs	r2, #16
   bb53a:	f7fc facf 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb53e:	493c      	ldr	r1, [pc, #240]	; (bb630 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb540:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb544:	f005 f92b 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb548:	68ab      	ldr	r3, [r5, #8]
   bb54a:	7859      	ldrb	r1, [r3, #1]
   bb54c:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb54e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb552:	f7fc faca 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb556:	e75d      	b.n	bb414 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb558:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb55a:	782b      	ldrb	r3, [r5, #0]
   bb55c:	454b      	cmp	r3, r9
   bb55e:	d143      	bne.n	bb5e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb560:	786a      	ldrb	r2, [r5, #1]
   bb562:	4552      	cmp	r2, sl
   bb564:	d140      	bne.n	bb5e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb566:	2300      	movs	r3, #0
   bb568:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb56a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb56e:	b91b      	cbnz	r3, bb578 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb570:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb574:	2b00      	cmp	r3, #0
   bb576:	d08e      	beq.n	bb496 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb578:	492e      	ldr	r1, [pc, #184]	; (bb634 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb57a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb57e:	f005 f90e 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb582:	492d      	ldr	r1, [pc, #180]	; (bb638 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb584:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb588:	f005 f909 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb58c:	7b29      	ldrb	r1, [r5, #12]
   bb58e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb592:	220a      	movs	r2, #10
   bb594:	f7fc faa2 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb598:	4928      	ldr	r1, [pc, #160]	; (bb63c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb59a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb59e:	f005 f8fe 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb5a2:	7b69      	ldrb	r1, [r5, #13]
   bb5a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5a8:	220a      	movs	r2, #10
   bb5aa:	f7fc fa97 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb5ae:	4924      	ldr	r1, [pc, #144]	; (bb640 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb5b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5b4:	f005 f8f3 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb5b8:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb5bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5c0:	220a      	movs	r2, #10
   bb5c2:	f7fc fa8b 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb5c6:	491f      	ldr	r1, [pc, #124]	; (bb644 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb5c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5cc:	f005 f8e7 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb5d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5d4:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb5d8:	220a      	movs	r2, #10
   bb5da:	f7fc fa7f 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb5de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5e2:	f005 f8e0 	bl	c07a6 <_ZN5Print7printlnEv>
   bb5e6:	e756      	b.n	bb496 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb5e8:	2b05      	cmp	r3, #5
   bb5ea:	d1be      	bne.n	bb56a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb5ec:	68ab      	ldr	r3, [r5, #8]
   bb5ee:	781a      	ldrb	r2, [r3, #0]
   bb5f0:	454a      	cmp	r2, r9
   bb5f2:	d1ba      	bne.n	bb56a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb5f4:	785b      	ldrb	r3, [r3, #1]
   bb5f6:	4553      	cmp	r3, sl
   bb5f8:	d1b7      	bne.n	bb56a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb5fa:	e7b4      	b.n	bb566 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb5fc:	000c4d34 	.word	0x000c4d34
   bb600:	000c4da5 	.word	0x000c4da5
   bb604:	000c4ead 	.word	0x000c4ead
   bb608:	000c4f04 	.word	0x000c4f04
   bb60c:	000c4f1a 	.word	0x000c4f1a
   bb610:	000c4de1 	.word	0x000c4de1
   bb614:	000c4df2 	.word	0x000c4df2
   bb618:	000c4dfe 	.word	0x000c4dfe
   bb61c:	000c4e12 	.word	0x000c4e12
   bb620:	000c4e26 	.word	0x000c4e26
   bb624:	000c4e40 	.word	0x000c4e40
   bb628:	000c4dad 	.word	0x000c4dad
   bb62c:	000c4d6c 	.word	0x000c4d6c
   bb630:	000c4d9b 	.word	0x000c4d9b
   bb634:	000c4e5a 	.word	0x000c4e5a
   bb638:	000c4e6b 	.word	0x000c4e6b
   bb63c:	000c4e78 	.word	0x000c4e78
   bb640:	000c4e85 	.word	0x000c4e85
   bb644:	000c4e99 	.word	0x000c4e99
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb648:	786a      	ldrb	r2, [r5, #1]
   bb64a:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb64c:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb650:	4620      	mov	r0, r4
   bb652:	f7fc fb31 	bl	b7cb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb656:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb65a:	2800      	cmp	r0, #0
   bb65c:	bf18      	it	ne
   bb65e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb662:	2b00      	cmp	r3, #0
   bb664:	f47f ae87 	bne.w	bb376 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb668:	1ef3      	subs	r3, r6, #3
   bb66a:	454b      	cmp	r3, r9
   bb66c:	f77f ae83 	ble.w	bb376 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb670:	3e04      	subs	r6, #4
   bb672:	eba6 0609 	sub.w	r6, r6, r9
   bb676:	4546      	cmp	r6, r8
   bb678:	da02      	bge.n	bb680 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb67a:	68ab      	ldr	r3, [r5, #8]
   bb67c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb67e:	e67a      	b.n	bb376 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb680:	2301      	movs	r3, #1
   bb682:	e681      	b.n	bb388 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb684:	4900      	ldr	r1, [pc, #0]	; (bb688 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb686:	e68e      	b.n	bb3a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb688:	000c4ed2 	.word	0x000c4ed2

000bb68c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb68e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb692:	4604      	mov	r4, r0
   bb694:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb696:	b113      	cbz	r3, bb69e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb698:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb69c:	b953      	cbnz	r3, bb6b4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb69e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb6a2:	b128      	cbz	r0, bb6b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb6a4:	490e      	ldr	r1, [pc, #56]	; (bb6e0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb6a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6aa:	f005 f892 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb6ae:	2000      	movs	r0, #0
}
   bb6b0:	b003      	add	sp, #12
   bb6b2:	bd30      	pop	{r4, r5, pc}
   bb6b4:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb6b6:	f7fd ff12 	bl	b94de <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb6ba:	4285      	cmp	r5, r0
   bb6bc:	9901      	ldr	r1, [sp, #4]
   bb6be:	d908      	bls.n	bb6d2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb6c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6c4:	b91b      	cbnz	r3, bb6ce <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb6c6:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb6ca:	2800      	cmp	r0, #0
   bb6cc:	d0f0      	beq.n	bb6b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb6ce:	4905      	ldr	r1, [pc, #20]	; (bb6e4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb6d0:	e7e9      	b.n	bb6a6 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb6d2:	4620      	mov	r0, r4
   bb6d4:	462a      	mov	r2, r5
   bb6d6:	f7fd ff0b 	bl	b94f0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb6da:	2001      	movs	r0, #1
   bb6dc:	e7e8      	b.n	bb6b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb6de:	bf00      	nop
   bb6e0:	000c4f32 	.word	0x000c4f32
   bb6e4:	000c4f5d 	.word	0x000c4f5d

000bb6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb6ec:	4604      	mov	r4, r0
   bb6ee:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb6f0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb6f4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb6f8:	f88d 100f 	strb.w	r1, [sp, #15]
   bb6fc:	4615      	mov	r5, r2
   bb6fe:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb700:	b118      	cbz	r0, bb70a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb702:	6803      	ldr	r3, [r0, #0]
   bb704:	b2c9      	uxtb	r1, r1
   bb706:	689b      	ldr	r3, [r3, #8]
   bb708:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb70a:	7823      	ldrb	r3, [r4, #0]
   bb70c:	2b01      	cmp	r3, #1
   bb70e:	d80e      	bhi.n	bb72e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb710:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb714:	2bb5      	cmp	r3, #181	; 0xb5
   bb716:	d12e      	bne.n	bb776 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb718:	2300      	movs	r3, #0
   bb71a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb71e:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb720:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb724:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb728:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb72a:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb72e:	7826      	ldrb	r6, [r4, #0]
   bb730:	2e02      	cmp	r6, #2
   bb732:	f040 81d5 	bne.w	bbae0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb736:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb73a:	bb5b      	cbnz	r3, bb794 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb73c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb740:	2bb5      	cmp	r3, #181	; 0xb5
   bb742:	d001      	beq.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb744:	2300      	movs	r3, #0
   bb746:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb748:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb74c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb750:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb754:	2b01      	cmp	r3, #1
   bb756:	f040 81a3 	bne.w	bbaa0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb75a:	463b      	mov	r3, r7
   bb75c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb760:	4620      	mov	r0, r4
   bb762:	f7ff fdad 	bl	bb2c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb766:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb76a:	3301      	adds	r3, #1
   bb76c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb770:	b005      	add	sp, #20
   bb772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb776:	2b24      	cmp	r3, #36	; 0x24
   bb778:	d105      	bne.n	bb786 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb77a:	2300      	movs	r3, #0
   bb77c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb780:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb782:	7023      	strb	r3, [r4, #0]
   bb784:	e7d3      	b.n	bb72e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb786:	2bd3      	cmp	r3, #211	; 0xd3
   bb788:	d1d1      	bne.n	bb72e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb78a:	2300      	movs	r3, #0
   bb78c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb790:	2303      	movs	r3, #3
   bb792:	e7f6      	b.n	bb782 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb794:	2b01      	cmp	r3, #1
   bb796:	d103      	bne.n	bb7a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb798:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb79c:	2b62      	cmp	r3, #98	; 0x62
   bb79e:	e7d0      	b.n	bb742 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb7a0:	2b02      	cmp	r3, #2
   bb7a2:	d10e      	bne.n	bb7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb7a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb7a8:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb7ac:	2200      	movs	r2, #0
   bb7ae:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb7b2:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb7b6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb7ba:	88eb      	ldrh	r3, [r5, #6]
   bb7bc:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb7c0:	e7c2      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb7c2:	2b03      	cmp	r3, #3
   bb7c4:	f040 80b7 	bne.w	bb936 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb7c8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb7cc:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb7d0:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb7d4:	2905      	cmp	r1, #5
   bb7d6:	d0b7      	beq.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb7d8:	42b9      	cmp	r1, r7
   bb7da:	d10c      	bne.n	bb7f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb7dc:	4546      	cmp	r6, r8
   bb7de:	d10a      	bne.n	bb7f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb7e0:	2300      	movs	r3, #0
   bb7e2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb7e6:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb7e8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb7ec:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb7ee:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb7f2:	80ab      	strh	r3, [r5, #4]
   bb7f4:	e7a8      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb7f6:	4632      	mov	r2, r6
   bb7f8:	4620      	mov	r0, r4
   bb7fa:	f7fc fa5d 	bl	b7cb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb7fe:	2800      	cmp	r0, #0
   bb800:	f000 8095 	beq.w	bb92e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb804:	4632      	mov	r2, r6
   bb806:	4620      	mov	r0, r4
   bb808:	f7fc fb58 	bl	b7ebc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb80c:	4606      	mov	r6, r0
   bb80e:	b9e8      	cbnz	r0, bb84c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb810:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb814:	b913      	cbnz	r3, bb81c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb816:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb81a:	b1bb      	cbz	r3, bb84c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb81c:	49a7      	ldr	r1, [pc, #668]	; (bbabc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb81e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb822:	f004 ffbc 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bb826:	220a      	movs	r2, #10
   bb828:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb82c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb830:	f7fc f954 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb834:	49a2      	ldr	r1, [pc, #648]	; (bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb836:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb83a:	f004 ffb0 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bb83e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb842:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb846:	220a      	movs	r2, #10
   bb848:	f7fc f94f 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bb84c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bb850:	b1a3      	cbz	r3, bb87c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb852:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb856:	b913      	cbnz	r3, bb85e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bb858:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb85c:	b123      	cbz	r3, bb868 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bb85e:	4999      	ldr	r1, [pc, #612]	; (bbac4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bb860:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb864:	f004 ffb5 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bb868:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb86c:	b108      	cbz	r0, bb872 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bb86e:	f7f8 fc16 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bb872:	2300      	movs	r3, #0
   bb874:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bb878:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bb87c:	4630      	mov	r0, r6
   bb87e:	f7f8 fc0c 	bl	b409a <_Znaj>
   bb882:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb886:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bb88a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bb88e:	bb38      	cbnz	r0, bb8e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb890:	b913      	cbnz	r3, bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bb892:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb896:	b1e3      	cbz	r3, bb8d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bb898:	498b      	ldr	r1, [pc, #556]	; (bbac8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bb89a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb89e:	f004 ff7e 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb8a2:	2210      	movs	r2, #16
   bb8a4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb8a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8ac:	f7fc f916 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb8b0:	4983      	ldr	r1, [pc, #524]	; (bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb8b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8b6:	f004 ff72 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb8ba:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb8be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8c2:	2210      	movs	r2, #16
   bb8c4:	f7fc f911 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bb8c8:	4980      	ldr	r1, [pc, #512]	; (bbacc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bb8ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8ce:	f004 ff80 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb8d2:	2300      	movs	r3, #0
   bb8d4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb8d8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bb8dc:	702b      	strb	r3, [r5, #0]
   bb8de:	e783      	b.n	bb7e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bb8e0:	2203      	movs	r2, #3
   bb8e2:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bb8e6:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bb8ea:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bb8ee:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bb8f2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bb8f6:	2b00      	cmp	r3, #0
   bb8f8:	f43f af26 	beq.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bb8fc:	4974      	ldr	r1, [pc, #464]	; (bbad0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bb8fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb902:	f004 ff4c 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb906:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb90a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb90e:	2210      	movs	r2, #16
   bb910:	f7fc f8e4 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb914:	496a      	ldr	r1, [pc, #424]	; (bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb916:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb91a:	f004 ff40 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb91e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb922:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb926:	2210      	movs	r2, #16
   bb928:	f7fc f8df 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb92c:	e70c      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bb92e:	2301      	movs	r3, #1
   bb930:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bb934:	e708      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bb936:	2b04      	cmp	r3, #4
   bb938:	d104      	bne.n	bb944 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bb93a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bb93e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bb942:	e701      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bb944:	2b05      	cmp	r3, #5
   bb946:	d106      	bne.n	bb956 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bb948:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb94c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bb954:	e7f3      	b.n	bb93e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bb956:	2b06      	cmp	r3, #6
   bb958:	d12b      	bne.n	bb9b2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb95a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb95e:	bb13      	cbnz	r3, bb9a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb960:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb964:	b913      	cbnz	r3, bb96c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bb966:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb96a:	b1bb      	cbz	r3, bb99c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bb96c:	4959      	ldr	r1, [pc, #356]	; (bbad4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bb96e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb972:	f004 ff14 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bb976:	2210      	movs	r2, #16
   bb978:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb97c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb980:	f7fc f8ac 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb984:	494e      	ldr	r1, [pc, #312]	; (bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb986:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb98a:	f004 ff08 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bb98e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb992:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb996:	2210      	movs	r2, #16
   bb998:	f7fc f8a7 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bb99c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb9a0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb9a4:	e6d0      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bb9a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb9aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb9ae:	701a      	strb	r2, [r3, #0]
   bb9b0:	e6ca      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb9b2:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb9b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb9b8:	f47f aec6 	bne.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb9bc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb9c0:	bb9b      	cbnz	r3, bba2a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bb9c2:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bb9c6:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb9ca:	2b02      	cmp	r3, #2
   bb9cc:	f47f aebc 	bne.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bb9d0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb9d4:	2905      	cmp	r1, #5
   bb9d6:	f47f aeb7 	bne.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bb9da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb9de:	781a      	ldrb	r2, [r3, #0]
   bb9e0:	42ba      	cmp	r2, r7
   bb9e2:	f47f aeb1 	bne.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bb9e6:	785a      	ldrb	r2, [r3, #1]
   bb9e8:	4542      	cmp	r2, r8
   bb9ea:	f47f aead 	bne.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bb9ee:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bb9f2:	2a02      	cmp	r2, #2
   bb9f4:	d121      	bne.n	bba3a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bb9f6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bb9fa:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bb9fe:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bba02:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bba06:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bba0a:	2001      	movs	r0, #1
   bba0c:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bba10:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bba14:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bba18:	781b      	ldrb	r3, [r3, #0]
   bba1a:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bba1c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bba20:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bba24:	7852      	ldrb	r2, [r2, #1]
   bba26:	705a      	strb	r2, [r3, #1]
   bba28:	e68e      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bba2a:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bba2c:	bf16      	itet	ne
   bba2e:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bba32:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bba36:	705a      	strbne	r2, [r3, #1]
   bba38:	e7c5      	b.n	bb9c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba3e:	b923      	cbnz	r3, bba4a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bba40:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba44:	2b00      	cmp	r3, #0
   bba46:	f43f ae7f 	beq.w	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bba4a:	4923      	ldr	r1, [pc, #140]	; (bbad8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bba4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba50:	f004 fea5 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bba54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bba58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba5c:	7819      	ldrb	r1, [r3, #0]
   bba5e:	2210      	movs	r2, #16
   bba60:	f7fc f83c 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bba64:	4916      	ldr	r1, [pc, #88]	; (bbac0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba6a:	f004 fe98 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bba6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bba72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba76:	7859      	ldrb	r1, [r3, #1]
   bba78:	2210      	movs	r2, #16
   bba7a:	f7fc f82f 	bl	b7adc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bba7e:	4917      	ldr	r1, [pc, #92]	; (bbadc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bba80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba84:	f004 fe8b 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bba88:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bba8c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bba90:	220a      	movs	r2, #10
   bba92:	4630      	mov	r0, r6
   bba94:	f004 fe9f 	bl	c07d6 <_ZN5Print11printNumberEmh>
        n += println();
   bba98:	4630      	mov	r0, r6
   bba9a:	f004 fe84 	bl	c07a6 <_ZN5Print7printlnEv>
        return n;
   bba9e:	e653      	b.n	bb748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbaa0:	b913      	cbnz	r3, bbaa8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bbaa2:	463b      	mov	r3, r7
   bbaa4:	462a      	mov	r2, r5
   bbaa6:	e65b      	b.n	bb760 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bbaa8:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bbaaa:	bf08      	it	eq
   bbaac:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bbab0:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbab2:	bf18      	it	ne
   bbab4:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bbab8:	e652      	b.n	bb760 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bbaba:	bf00      	nop
   bbabc:	000c4f9e 	.word	0x000c4f9e
   bbac0:	000c4da5 	.word	0x000c4da5
   bbac4:	000c4fd3 	.word	0x000c4fd3
   bbac8:	000c5015 	.word	0x000c5015
   bbacc:	000c505a 	.word	0x000c505a
   bbad0:	000c508c 	.word	0x000c508c
   bbad4:	000c50bd 	.word	0x000c50bd
   bbad8:	000c50ed 	.word	0x000c50ed
   bbadc:	000c511d 	.word	0x000c511d
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bbae0:	2e01      	cmp	r6, #1
   bbae2:	f040 8188 	bne.w	bbdf6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bbae6:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bbaea:	2b00      	cmp	r3, #0
   bbaec:	d146      	bne.n	bbb7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bbaee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbaf2:	2a24      	cmp	r2, #36	; 0x24
   bbaf4:	f000 8086 	beq.w	bbc04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bbaf8:	2300      	movs	r3, #0
   bbafa:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bbafc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbb00:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bbb02:	bf04      	itt	eq
   bbb04:	23fb      	moveq	r3, #251	; 0xfb
   bbb06:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bbb0a:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbb0e:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bbb12:	3501      	adds	r5, #1
   bbb14:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbb16:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbb18:	bf08      	it	eq
   bbb1a:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bbb1c:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbb20:	bf08      	it	eq
   bbb22:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bbb24:	2d00      	cmp	r5, #0
   bbb26:	f47f ae23 	bne.w	bb770 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bbb2a:	4620      	mov	r0, r4
   bbb2c:	f7fc fc20 	bl	b8370 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbb30:	2800      	cmp	r0, #0
   bbb32:	f000 8120 	beq.w	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbb36:	4620      	mov	r0, r4
   bbb38:	f7fc fd7c 	bl	b8634 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbb3c:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbb3e:	4620      	mov	r0, r4
   bbb40:	f7fc fdfa 	bl	b8738 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbb44:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbb46:	4620      	mov	r0, r4
   bbb48:	f7fd f88a 	bl	b8c60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bbb4c:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbb4e:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbb50:	1e41      	subs	r1, r0, #1
   bbb52:	428e      	cmp	r6, r1
   bbb54:	f280 80b4 	bge.w	bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbb58:	783a      	ldrb	r2, [r7, #0]
   bbb5a:	3a04      	subs	r2, #4
   bbb5c:	4296      	cmp	r6, r2
   bbb5e:	f280 80af 	bge.w	bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbb62:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbb64:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbb68:	f000 80ad 	beq.w	bbcc6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bbb6c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bbb6e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bbb72:	bf18      	it	ne
   bbb74:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bbb76:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbb78:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbb7a:	e7ea      	b.n	bbb52 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bbb7c:	2b01      	cmp	r3, #1
   bbb7e:	d103      	bne.n	bbb88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bbb80:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb84:	2a47      	cmp	r2, #71	; 0x47
   bbb86:	e7b5      	b.n	bbaf4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bbb88:	b2da      	uxtb	r2, r3
   bbb8a:	2a05      	cmp	r2, #5
   bbb8c:	d93a      	bls.n	bbc04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bbb8e:	4620      	mov	r0, r4
   bbb90:	f7fc fbee 	bl	b8370 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbb94:	b308      	cbz	r0, bbbda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbb96:	4620      	mov	r0, r4
   bbb98:	f7fc fd4c 	bl	b8634 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbb9c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbb9e:	4620      	mov	r0, r4
   bbba0:	f7fc fdca 	bl	b8738 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbba4:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbba6:	4620      	mov	r0, r4
   bbba8:	f7fd f85a 	bl	b8c60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbbac:	782b      	ldrb	r3, [r5, #0]
   bbbae:	4283      	cmp	r3, r0
   bbbb0:	d213      	bcs.n	bbbda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbbb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbbb6:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbbb8:	782b      	ldrb	r3, [r5, #0]
   bbbba:	3301      	adds	r3, #1
   bbbbc:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbbbe:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbbc0:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbbc2:	d10a      	bne.n	bbbda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbc4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbc8:	b913      	cbnz	r3, bbbd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbbca:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbce:	b123      	cbz	r3, bbbda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbbd0:	498f      	ldr	r1, [pc, #572]	; (bbe10 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbbd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbd6:	f004 fdfc 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbbda:	4620      	mov	r0, r4
   bbbdc:	f7fc f9c8 	bl	b7f70 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbbe0:	b128      	cbz	r0, bbbee <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbbe2:	2201      	movs	r2, #1
   bbbe4:	f10d 010f 	add.w	r1, sp, #15
   bbbe8:	4620      	mov	r0, r4
   bbbea:	f7ff fd4f 	bl	bb68c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbbee:	4620      	mov	r0, r4
   bbbf0:	f7fc faee 	bl	b81d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbbf4:	2800      	cmp	r0, #0
   bbbf6:	d081      	beq.n	bbafc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbbf8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbbfc:	4620      	mov	r0, r4
   bbbfe:	f7fc fbaf 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbc02:	e77b      	b.n	bbafc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbc04:	18e2      	adds	r2, r4, r3
   bbc06:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbc0a:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbc0e:	2b05      	cmp	r3, #5
   bbc10:	f47f af74 	bne.w	bbafc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbc14:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbc18:	b923      	cbnz	r3, bbc24 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbc1a:	4620      	mov	r0, r4
   bbc1c:	f7fc fa70 	bl	b8100 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbc20:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbc24:	4620      	mov	r0, r4
   bbc26:	f7fc fba3 	bl	b8370 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbc2a:	b1b8      	cbz	r0, bbc5c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbc2c:	4620      	mov	r0, r4
   bbc2e:	f7fc fd01 	bl	b8634 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbc32:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbc34:	4620      	mov	r0, r4
   bbc36:	f7fc fd7f 	bl	b8738 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbc3a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbc3c:	4620      	mov	r0, r4
   bbc3e:	f7fd f80f 	bl	b8c60 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbc42:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbc44:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbc46:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbc48:	2100      	movs	r1, #0
   bbc4a:	4628      	mov	r0, r5
   bbc4c:	f006 fa90 	bl	c2170 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbc50:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbc54:	602b      	str	r3, [r5, #0]
   bbc56:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbc5a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	f7fc f987 	bl	b7f70 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbc62:	b128      	cbz	r0, bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbc64:	2206      	movs	r2, #6
   bbc66:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbc6a:	4620      	mov	r0, r4
   bbc6c:	f7ff fd0e 	bl	bb68c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbc70:	4620      	mov	r0, r4
   bbc72:	f7fc faad 	bl	b81d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbc76:	b1e8      	cbz	r0, bbcb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbc78:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbc7c:	4620      	mov	r0, r4
   bbc7e:	f7fc fb6f 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbc82:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbc86:	4620      	mov	r0, r4
   bbc88:	f7fc fb6a 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbc8c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbc90:	4620      	mov	r0, r4
   bbc92:	f7fc fb65 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbc96:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbc9a:	4620      	mov	r0, r4
   bbc9c:	f7fc fb60 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbca0:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbca4:	4620      	mov	r0, r4
   bbca6:	f7fc fb5b 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbcaa:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbcae:	4620      	mov	r0, r4
   bbcb0:	f7fc fb56 	bl	b8360 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbcb4:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbcb8:	2b05      	cmp	r3, #5
   bbcba:	f67f af1f 	bls.w	bbafc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbcbe:	e766      	b.n	bbb8e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbcc0:	2d2a      	cmp	r5, #42	; 0x2a
   bbcc2:	f040 808b 	bne.w	bbddc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbcc6:	091a      	lsrs	r2, r3, #4
   bbcc8:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbccc:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbcce:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbcd0:	f003 030f 	and.w	r3, r3, #15
   bbcd4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbcd8:	bf84      	itt	hi
   bbcda:	3237      	addhi	r2, #55	; 0x37
   bbcdc:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbcde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbce2:	bf88      	it	hi
   bbce4:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbce8:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbcec:	42ab      	cmp	r3, r5
   bbcee:	eb08 0b06 	add.w	fp, r8, r6
   bbcf2:	d143      	bne.n	bbd7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbcf4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbcf8:	4553      	cmp	r3, sl
   bbcfa:	d13f      	bne.n	bbd7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbcfc:	4620      	mov	r0, r4
   bbcfe:	f7fc fd9d 	bl	b883c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbd02:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbd04:	4620      	mov	r0, r4
   bbd06:	f7fc fe1d 	bl	b8944 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbd0a:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbd0c:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbd0e:	2100      	movs	r1, #0
   bbd10:	f006 fa2e 	bl	c2170 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbd14:	783a      	ldrb	r2, [r7, #0]
   bbd16:	4641      	mov	r1, r8
   bbd18:	4630      	mov	r0, r6
   bbd1a:	f006 fa01 	bl	c2120 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbd1e:	783b      	ldrb	r3, [r7, #0]
   bbd20:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbd22:	4620      	mov	r0, r4
   bbd24:	f7fd f80e 	bl	b8d44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbd28:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbd2a:	f025 0503 	bic.w	r5, r5, #3
   bbd2e:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbd32:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbd34:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbd38:	4620      	mov	r0, r4
   bbd3a:	f7fc fba5 	bl	b8488 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbd3e:	b1d0      	cbz	r0, bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbd40:	f01a 0104 	ands.w	r1, sl, #4
   bbd44:	d117      	bne.n	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbd46:	4620      	mov	r0, r4
   bbd48:	9102      	str	r1, [sp, #8]
   bbd4a:	f7fc fe7f 	bl	b8a4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbd4e:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbd50:	4620      	mov	r0, r4
   bbd52:	f7fc feff 	bl	b8b54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbd56:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbd58:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbd5a:	464a      	mov	r2, r9
   bbd5c:	f006 fa08 	bl	c2170 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbd60:	783a      	ldrb	r2, [r7, #0]
   bbd62:	4641      	mov	r1, r8
   bbd64:	4650      	mov	r0, sl
   bbd66:	f006 f9db 	bl	c2120 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbd6a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbd6e:	783b      	ldrb	r3, [r7, #0]
   bbd70:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbd74:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbd76:	2300      	movs	r3, #0
   bbd78:	7023      	strb	r3, [r4, #0]
   bbd7a:	e4f9      	b.n	bb770 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd7c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd80:	b91b      	cbnz	r3, bbd8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbd82:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbd86:	2b00      	cmp	r3, #0
   bbd88:	d0f5      	beq.n	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbd8a:	4922      	ldr	r1, [pc, #136]	; (bbe14 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbd8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd90:	f004 fd05 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbd94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd98:	6803      	ldr	r3, [r0, #0]
   bbd9a:	4629      	mov	r1, r5
   bbd9c:	689b      	ldr	r3, [r3, #8]
   bbd9e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbda0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbda4:	6803      	ldr	r3, [r0, #0]
   bbda6:	4651      	mov	r1, sl
   bbda8:	689b      	ldr	r3, [r3, #8]
   bbdaa:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbdac:	491a      	ldr	r1, [pc, #104]	; (bbe18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbdae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdb2:	f004 fcf4 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbdb6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdba:	f89b 1000 	ldrb.w	r1, [fp]
   bbdbe:	6803      	ldr	r3, [r0, #0]
   bbdc0:	689b      	ldr	r3, [r3, #8]
   bbdc2:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbdc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdc8:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbdcc:	6803      	ldr	r3, [r0, #0]
   bbdce:	689b      	ldr	r3, [r3, #8]
   bbdd0:	4798      	blx	r3
              _debugSerial->println();
   bbdd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdd6:	f004 fce6 	bl	c07a6 <_ZN5Print7printlnEv>
   bbdda:	e7cc      	b.n	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbddc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbde0:	b91b      	cbnz	r3, bbdea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbde2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbde6:	2b00      	cmp	r3, #0
   bbde8:	d0c5      	beq.n	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbdea:	490c      	ldr	r1, [pc, #48]	; (bbe1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbdec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdf0:	f004 fcef 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbdf4:	e7bf      	b.n	bbd76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbdf6:	2e03      	cmp	r6, #3
   bbdf8:	f47f acba 	bne.w	bb770 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbdfc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbe00:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bbe04:	4620      	mov	r0, r4
   bbe06:	f7fd f821 	bl	b8e4c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bbe0a:	7020      	strb	r0, [r4, #0]
}
   bbe0c:	e4b0      	b.n	bb770 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bbe0e:	bf00      	nop
   bbe10:	000c5124 	.word	0x000c5124
   bbe14:	000c5142 	.word	0x000c5142
   bbe18:	000c516d 	.word	0x000c516d
   bbe1c:	000c5173 	.word	0x000c5173

000bbe20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bbe20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bbe24:	4604      	mov	r4, r0
   bbe26:	4699      	mov	r9, r3
   bbe28:	460f      	mov	r7, r1
   bbe2a:	4690      	mov	r8, r2
   bbe2c:	f001 f94c 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bbe30:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bbe34:	1ac0      	subs	r0, r0, r3
   bbe36:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bbe3a:	4298      	cmp	r0, r3
   bbe3c:	f0c0 80a8 	bcc.w	bbf90 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bbe40:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbe44:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe48:	f003 f9dc 	bl	bf204 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bbe4c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe50:	21fd      	movs	r1, #253	; 0xfd
   bbe52:	f7fb fe53 	bl	b7afc <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bbe56:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe5a:	2100      	movs	r1, #0
   bbe5c:	f003 f9d9 	bl	bf212 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bbe60:	4605      	mov	r5, r0
   bbe62:	b1a8      	cbz	r0, bbe90 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbe64:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe68:	b933      	cbnz	r3, bbe78 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bbe6a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbe6e:	b91b      	cbnz	r3, bbe78 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bbe70:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bbe72:	b002      	add	sp, #8
   bbe74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bbe78:	4946      	ldr	r1, [pc, #280]	; (bbf94 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bbe7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe7e:	f004 fc8e 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bbe82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe86:	220a      	movs	r2, #10
   bbe88:	4629      	mov	r1, r5
   bbe8a:	f7fb fe2e 	bl	b7aea <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbe8e:	e7ef      	b.n	bbe70 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bbe90:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbe94:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe98:	2202      	movs	r2, #2
   bbe9a:	f003 f9b0 	bl	bf1fe <_ZN7TwoWire11requestFromEhj>
   bbe9e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bbea0:	2d02      	cmp	r5, #2
   bbea2:	d008      	beq.n	bbeb6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbea4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbea8:	b91b      	cbnz	r3, bbeb2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bbeaa:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbeae:	2b00      	cmp	r3, #0
   bbeb0:	d0de      	beq.n	bbe70 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bbeb2:	4939      	ldr	r1, [pc, #228]	; (bbf98 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bbeb4:	e7e1      	b.n	bbe7a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bbeb6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbeba:	6803      	ldr	r3, [r0, #0]
   bbebc:	695b      	ldr	r3, [r3, #20]
   bbebe:	4798      	blx	r3
   bbec0:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bbec2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbec6:	6803      	ldr	r3, [r0, #0]
   bbec8:	695b      	ldr	r3, [r3, #20]
   bbeca:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bbecc:	b2c6      	uxtb	r6, r0
   bbece:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bbed2:	b22a      	sxth	r2, r5
   bbed4:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bbed6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbeda:	b955      	cbnz	r5, bbef2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bbedc:	b123      	cbz	r3, bbee8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bbede:	492f      	ldr	r1, [pc, #188]	; (bbf9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bbee0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbee4:	f004 fc75 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbee8:	f001 f8ee 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bbeec:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bbef0:	e7be      	b.n	bbe70 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bbef2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bbef4:	bfb8      	it	lt
   bbef6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bbefa:	2d64      	cmp	r5, #100	; 0x64
   bbefc:	d936      	bls.n	bbf6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bbefe:	b17b      	cbz	r3, bbf20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bbf00:	4927      	ldr	r1, [pc, #156]	; (bbfa0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bbf02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf06:	f004 fc4a 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbf0a:	4629      	mov	r1, r5
   bbf0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf10:	220a      	movs	r2, #10
   bbf12:	f004 fc60 	bl	c07d6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bbf16:	4923      	ldr	r1, [pc, #140]	; (bbfa4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bbf18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf1c:	f004 fc59 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bbf20:	2d00      	cmp	r5, #0
   bbf22:	d035      	beq.n	bbf90 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bbf24:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bbf26:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbf2a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbf2e:	42ae      	cmp	r6, r5
   bbf30:	bf28      	it	cs
   bbf32:	462e      	movcs	r6, r5
   bbf34:	4632      	mov	r2, r6
   bbf36:	f003 f962 	bl	bf1fe <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bbf3a:	b2c0      	uxtb	r0, r0
   bbf3c:	4286      	cmp	r6, r0
   bbf3e:	d197      	bne.n	bbe70 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bbf40:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bbf44:	fa1f f38a 	uxth.w	r3, sl
   bbf48:	429e      	cmp	r6, r3
   bbf4a:	d91e      	bls.n	bbf8a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bbf4c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbf50:	6803      	ldr	r3, [r0, #0]
   bbf52:	695b      	ldr	r3, [r3, #20]
   bbf54:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bbf56:	f8cd 9000 	str.w	r9, [sp]
   bbf5a:	b2c1      	uxtb	r1, r0
   bbf5c:	4643      	mov	r3, r8
   bbf5e:	463a      	mov	r2, r7
   bbf60:	4620      	mov	r0, r4
   bbf62:	f7ff fbc1 	bl	bb6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bbf66:	f10a 0a01 	add.w	sl, sl, #1
   bbf6a:	e7eb      	b.n	bbf44 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bbf6c:	2b00      	cmp	r3, #0
   bbf6e:	d0d7      	beq.n	bbf20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bbf70:	490d      	ldr	r1, [pc, #52]	; (bbfa8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bbf72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf76:	f004 fc12 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
   bbf7a:	4629      	mov	r1, r5
   bbf7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf80:	220a      	movs	r2, #10
   bbf82:	f004 fc28 	bl	c07d6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bbf86:	4909      	ldr	r1, [pc, #36]	; (bbfac <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bbf88:	e7c6      	b.n	bbf18 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bbf8a:	1bad      	subs	r5, r5, r6
   bbf8c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bbf8e:	e7c7      	b.n	bbf20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bbf90:	2001      	movs	r0, #1
   bbf92:	e76e      	b.n	bbe72 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bbf94:	000c5194 	.word	0x000c5194
   bbf98:	000c51c8 	.word	0x000c51c8
   bbf9c:	000c51fd 	.word	0x000c51fd
   bbfa0:	000c5225 	.word	0x000c5225
   bbfa4:	000c5245 	.word	0x000c5245
   bbfa8:	000c5255 	.word	0x000c5255
   bbfac:	000c526d 	.word	0x000c526d

000bbfb0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bbfb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbfb2:	4604      	mov	r4, r0
   bbfb4:	460d      	mov	r5, r1
   bbfb6:	4616      	mov	r6, r2
   bbfb8:	461f      	mov	r7, r3
  while (_serialPort->available())
   bbfba:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bbfbe:	6803      	ldr	r3, [r0, #0]
   bbfc0:	691b      	ldr	r3, [r3, #16]
   bbfc2:	4798      	blx	r3
   bbfc4:	b160      	cbz	r0, bbfe0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bbfc6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bbfca:	6803      	ldr	r3, [r0, #0]
   bbfcc:	695b      	ldr	r3, [r3, #20]
   bbfce:	4798      	blx	r3
   bbfd0:	9700      	str	r7, [sp, #0]
   bbfd2:	b2c1      	uxtb	r1, r0
   bbfd4:	4633      	mov	r3, r6
   bbfd6:	462a      	mov	r2, r5
   bbfd8:	4620      	mov	r0, r4
   bbfda:	f7ff fb85 	bl	bb6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bbfde:	e7ec      	b.n	bbfba <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bbfe0:	2001      	movs	r0, #1
   bbfe2:	b003      	add	sp, #12
   bbfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbfe8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bbfe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbfec:	4604      	mov	r4, r0
   bbfee:	b087      	sub	sp, #28
   bbff0:	460d      	mov	r5, r1
   bbff2:	4616      	mov	r6, r2
   bbff4:	461f      	mov	r7, r3
   bbff6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bbffa:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bbffe:	fa5f f388 	uxtb.w	r3, r8
   bc002:	429a      	cmp	r2, r3
   bc004:	d90b      	bls.n	bc01e <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc006:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc00a:	4620      	mov	r0, r4
   bc00c:	5cd1      	ldrb	r1, [r2, r3]
   bc00e:	9700      	str	r7, [sp, #0]
   bc010:	4633      	mov	r3, r6
   bc012:	462a      	mov	r2, r5
   bc014:	f7ff fb68 	bl	bb6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc018:	f108 0801 	add.w	r8, r8, #1
   bc01c:	e7ed      	b.n	bbffa <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc01e:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc022:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc026:	4a25      	ldr	r2, [pc, #148]	; (bc0bc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc028:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc02c:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc030:	a902      	add	r1, sp, #8
   bc032:	f04f 0901 	mov.w	r9, #1
   bc036:	9202      	str	r2, [sp, #8]
   bc038:	9304      	str	r3, [sp, #16]
   bc03a:	f88d 800c 	strb.w	r8, [sp, #12]
   bc03e:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc042:	f004 fceb 	bl	c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc046:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc04a:	4641      	mov	r1, r8
   bc04c:	f005 f971 	bl	c1332 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc050:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc054:	21ff      	movs	r1, #255	; 0xff
   bc056:	f004 fd81 	bl	c0b5c <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc05a:	28ff      	cmp	r0, #255	; 0xff
   bc05c:	d116      	bne.n	bc08c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc05e:	7823      	ldrb	r3, [r4, #0]
   bc060:	b983      	cbnz	r3, bc084 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc062:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc066:	4649      	mov	r1, r9
   bc068:	f005 f963 	bl	c1332 <digitalWrite>
    _spiPort->endTransaction();
   bc06c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc070:	f004 fcba 	bl	c09e8 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc074:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc078:	f001 fb68 	bl	bd74c <delay>
} // end checkUbloxSpi()
   bc07c:	2001      	movs	r0, #1
   bc07e:	b007      	add	sp, #28
   bc080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc084:	28ff      	cmp	r0, #255	; 0xff
   bc086:	d101      	bne.n	bc08c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc088:	7823      	ldrb	r3, [r4, #0]
   bc08a:	b163      	cbz	r3, bc0a6 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc08c:	4601      	mov	r1, r0
   bc08e:	9700      	str	r7, [sp, #0]
   bc090:	4620      	mov	r0, r4
   bc092:	4633      	mov	r3, r6
   bc094:	462a      	mov	r2, r5
   bc096:	f7ff fb27 	bl	bb6e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc09a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc09e:	21ff      	movs	r1, #255	; 0xff
   bc0a0:	f004 fd5c 	bl	c0b5c <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc0a4:	e7ee      	b.n	bc084 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc0a6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc0aa:	2101      	movs	r1, #1
   bc0ac:	f005 f941 	bl	c1332 <digitalWrite>
  _spiPort->endTransaction();
   bc0b0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc0b4:	f004 fc98 	bl	c09e8 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc0b8:	e7e0      	b.n	bc07c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc0ba:	bf00      	nop
   bc0bc:	000c48bc 	.word	0x000c48bc

000bc0c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc0c0:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc0c2:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc0c6:	b91c      	cbnz	r4, bc0d0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc0cc:	f7ff bea8 	b.w	bbe20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc0d0:	2c01      	cmp	r4, #1
   bc0d2:	d103      	bne.n	bc0dc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc0d8:	f7ff bf6a 	b.w	bbfb0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc0dc:	2c02      	cmp	r4, #2
   bc0de:	d103      	bne.n	bc0e8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc0e4:	f7ff bf80 	b.w	bbfe8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc0e8:	2000      	movs	r0, #0
   bc0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc0ee:	4770      	bx	lr

000bc0f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc0f4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc0f6:	2102      	movs	r1, #2
   bc0f8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc0fa:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc0fe:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc102:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc106:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc108:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc10c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc110:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc114:	4604      	mov	r4, r0
   bc116:	4617      	mov	r7, r2
   bc118:	4698      	mov	r8, r3
   bc11a:	f000 ffd5 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc11e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc122:	4606      	mov	r6, r0
   bc124:	4481      	add	r9, r0
   bc126:	f000 ffcf 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc12a:	4581      	cmp	r9, r0
   bc12c:	f240 80a8 	bls.w	bc280 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc130:	4643      	mov	r3, r8
   bc132:	463a      	mov	r2, r7
   bc134:	4629      	mov	r1, r5
   bc136:	4620      	mov	r0, r4
   bc138:	f7ff ffc2 	bl	bc0c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc13c:	2800      	cmp	r0, #0
   bc13e:	f000 809b 	beq.w	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc142:	7beb      	ldrb	r3, [r5, #15]
   bc144:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc148:	2b01      	cmp	r3, #1
   bc14a:	d125      	bne.n	bc198 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc14c:	2901      	cmp	r1, #1
   bc14e:	f040 80ec 	bne.w	bc32a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc152:	7bab      	ldrb	r3, [r5, #14]
   bc154:	2b01      	cmp	r3, #1
   bc156:	782b      	ldrb	r3, [r5, #0]
   bc158:	d13b      	bne.n	bc1d2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc15a:	42bb      	cmp	r3, r7
   bc15c:	d13e      	bne.n	bc1dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc15e:	786a      	ldrb	r2, [r5, #1]
   bc160:	4542      	cmp	r2, r8
   bc162:	d136      	bne.n	bc1d2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc164:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc168:	b913      	cbnz	r3, bc170 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc16a:	200b      	movs	r0, #11
}
   bc16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc170:	4978      	ldr	r1, [pc, #480]	; (bc354 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc172:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc176:	f004 fb12 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc17a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc17e:	f000 ffa3 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc182:	220a      	movs	r2, #10
   bc184:	1b81      	subs	r1, r0, r6
   bc186:	4628      	mov	r0, r5
   bc188:	f7fb fc9b 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc18c:	4972      	ldr	r1, [pc, #456]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc18e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc192:	f004 fb1e 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc196:	e7e8      	b.n	bc16a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc198:	2b02      	cmp	r3, #2
   bc19a:	d137      	bne.n	bc20c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc19c:	2901      	cmp	r1, #1
   bc19e:	f040 80aa 	bne.w	bc2f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc1a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1a6:	b193      	cbz	r3, bc1ce <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc1a8:	496c      	ldr	r1, [pc, #432]	; (bc35c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc1aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1ae:	f004 faf6 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc1b2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc1b6:	f000 ff87 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc1ba:	220a      	movs	r2, #10
   bc1bc:	1b81      	subs	r1, r0, r6
   bc1be:	4628      	mov	r0, r5
   bc1c0:	f7fb fc7f 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc1c4:	4964      	ldr	r1, [pc, #400]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc1c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1ca:	f004 fb02 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc1ce:	200a      	movs	r0, #10
   bc1d0:	e7cc      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc1d2:	42bb      	cmp	r3, r7
   bc1d4:	d102      	bne.n	bc1dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc1d6:	786b      	ldrb	r3, [r5, #1]
   bc1d8:	4543      	cmp	r3, r8
   bc1da:	d019      	beq.n	bc210 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc1dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1e0:	b193      	cbz	r3, bc208 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc1e2:	495f      	ldr	r1, [pc, #380]	; (bc360 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc1e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1e8:	f004 fad9 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc1ec:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc1f0:	f000 ff6a 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc1f4:	220a      	movs	r2, #10
   bc1f6:	1b81      	subs	r1, r0, r6
   bc1f8:	4628      	mov	r0, r5
   bc1fa:	f7fb fc62 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc1fe:	4956      	ldr	r1, [pc, #344]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc200:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc204:	f004 fae5 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc208:	200d      	movs	r0, #13
   bc20a:	e7af      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc20c:	2901      	cmp	r1, #1
   bc20e:	d172      	bne.n	bc2f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc210:	89eb      	ldrh	r3, [r5, #14]
   bc212:	bb8b      	cbnz	r3, bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc214:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc218:	b193      	cbz	r3, bc240 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc21a:	4952      	ldr	r1, [pc, #328]	; (bc364 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc21c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc220:	f004 fabd 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc224:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc228:	f000 ff4e 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc22c:	220a      	movs	r2, #10
   bc22e:	1b81      	subs	r1, r0, r6
   bc230:	4628      	mov	r0, r5
   bc232:	f7fb fc46 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc236:	4948      	ldr	r1, [pc, #288]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc238:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc23c:	f004 fac9 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc240:	2002      	movs	r0, #2
   bc242:	e793      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc244:	430b      	orrs	r3, r1
   bc246:	d117      	bne.n	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc248:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc24c:	b193      	cbz	r3, bc274 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc24e:	4946      	ldr	r1, [pc, #280]	; (bc368 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc250:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc254:	f004 faa3 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc258:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc25c:	f000 ff34 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc260:	220a      	movs	r2, #10
   bc262:	1b81      	subs	r1, r0, r6
   bc264:	4628      	mov	r0, r5
   bc266:	f7fb fc2c 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc26a:	493b      	ldr	r1, [pc, #236]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc26c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc270:	f004 faaf 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc274:	2001      	movs	r0, #1
   bc276:	e779      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc278:	2001      	movs	r0, #1
   bc27a:	f001 fa67 	bl	bd74c <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc27e:	e752      	b.n	bc126 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc280:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc282:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc286:	2a01      	cmp	r2, #1
   bc288:	d11f      	bne.n	bc2ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc28a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc28e:	2a02      	cmp	r2, #2
   bc290:	d11b      	bne.n	bc2ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc292:	7baa      	ldrb	r2, [r5, #14]
   bc294:	2a01      	cmp	r2, #1
   bc296:	d118      	bne.n	bc2ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc298:	782a      	ldrb	r2, [r5, #0]
   bc29a:	42ba      	cmp	r2, r7
   bc29c:	d115      	bne.n	bc2ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc29e:	786a      	ldrb	r2, [r5, #1]
   bc2a0:	4542      	cmp	r2, r8
   bc2a2:	d112      	bne.n	bc2ca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc2a4:	2b00      	cmp	r3, #0
   bc2a6:	f43f af60 	beq.w	bc16a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc2aa:	4930      	ldr	r1, [pc, #192]	; (bc36c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc2ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2b0:	f004 fa75 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc2b4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc2b8:	f000 ff06 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc2bc:	220a      	movs	r2, #10
   bc2be:	1b81      	subs	r1, r0, r6
   bc2c0:	4628      	mov	r0, r5
   bc2c2:	f7fb fbfe 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc2c6:	492a      	ldr	r1, [pc, #168]	; (bc370 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc2c8:	e761      	b.n	bc18e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc2ca:	b193      	cbz	r3, bc2f2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc2cc:	4929      	ldr	r1, [pc, #164]	; (bc374 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc2ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2d2:	f004 fa64 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc2d6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc2da:	f000 fef5 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc2de:	220a      	movs	r2, #10
   bc2e0:	1b81      	subs	r1, r0, r6
   bc2e2:	4628      	mov	r0, r5
   bc2e4:	f7fb fbed 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc2e8:	4923      	ldr	r1, [pc, #140]	; (bc378 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc2ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2ee:	f004 fa70 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc2f2:	2003      	movs	r0, #3
   bc2f4:	e73a      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc2f6:	2903      	cmp	r1, #3
   bc2f8:	d1a4      	bne.n	bc244 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc2fa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2fe:	b193      	cbz	r3, bc326 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc300:	491e      	ldr	r1, [pc, #120]	; (bc37c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc302:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc306:	f004 fa4a 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc30a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc30e:	f000 fedb 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc312:	220a      	movs	r2, #10
   bc314:	1b81      	subs	r1, r0, r6
   bc316:	4628      	mov	r0, r5
   bc318:	f7fb fbd3 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc31c:	490e      	ldr	r1, [pc, #56]	; (bc358 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc31e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc322:	f004 fa56 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc326:	2004      	movs	r0, #4
   bc328:	e720      	b.n	bc16c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc32a:	2903      	cmp	r1, #3
   bc32c:	d0e5      	beq.n	bc2fa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc32e:	2900      	cmp	r1, #0
   bc330:	d1a2      	bne.n	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc332:	7bab      	ldrb	r3, [r5, #14]
   bc334:	2b01      	cmp	r3, #1
   bc336:	d19f      	bne.n	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc338:	782b      	ldrb	r3, [r5, #0]
   bc33a:	42bb      	cmp	r3, r7
   bc33c:	d19c      	bne.n	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc33e:	786b      	ldrb	r3, [r5, #1]
   bc340:	4543      	cmp	r3, r8
   bc342:	d199      	bne.n	bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc344:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc348:	2b00      	cmp	r3, #0
   bc34a:	f43f af0e 	beq.w	bc16a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc34e:	490c      	ldr	r1, [pc, #48]	; (bc380 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc350:	e70f      	b.n	bc172 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc352:	bf00      	nop
   bc354:	000c5274 	.word	0x000c5274
   bc358:	000c52b1 	.word	0x000c52b1
   bc35c:	000c52b7 	.word	0x000c52b7
   bc360:	000c52e8 	.word	0x000c52e8
   bc364:	000c531a 	.word	0x000c531a
   bc368:	000c53ba 	.word	0x000c53ba
   bc36c:	000c53fb 	.word	0x000c53fb
   bc370:	000c542e 	.word	0x000c542e
   bc374:	000c5436 	.word	0x000c5436
   bc378:	000c5459 	.word	0x000c5459
   bc37c:	000c5340 	.word	0x000c5340
   bc380:	000c537b 	.word	0x000c537b

000bc384 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc388:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc38a:	2102      	movs	r1, #2
   bc38c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc38e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc392:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc396:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc39a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc39c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc3a0:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc3a4:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc3a8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc3ac:	4604      	mov	r4, r0
   bc3ae:	4617      	mov	r7, r2
   bc3b0:	4698      	mov	r8, r3
   bc3b2:	f000 fe89 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc3b6:	f240 1a01 	movw	sl, #257	; 0x101
   bc3ba:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc3bc:	f240 2b01 	movw	fp, #513	; 0x201
   bc3c0:	f000 fe82 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc3c4:	1b80      	subs	r0, r0, r6
   bc3c6:	4548      	cmp	r0, r9
   bc3c8:	d269      	bcs.n	bc49e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc3ca:	4643      	mov	r3, r8
   bc3cc:	463a      	mov	r2, r7
   bc3ce:	4629      	mov	r1, r5
   bc3d0:	4620      	mov	r0, r4
   bc3d2:	f7ff fe75 	bl	bc0c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc3d6:	2800      	cmp	r0, #0
   bc3d8:	d05d      	beq.n	bc496 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc3da:	89ea      	ldrh	r2, [r5, #14]
   bc3dc:	4552      	cmp	r2, sl
   bc3de:	d11e      	bne.n	bc41e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc3e0:	782b      	ldrb	r3, [r5, #0]
   bc3e2:	42bb      	cmp	r3, r7
   bc3e4:	d11b      	bne.n	bc41e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc3e6:	786b      	ldrb	r3, [r5, #1]
   bc3e8:	4543      	cmp	r3, r8
   bc3ea:	d118      	bne.n	bc41e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc3ec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3f0:	b193      	cbz	r3, bc418 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc3f2:	4937      	ldr	r1, [pc, #220]	; (bc4d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc3f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3f8:	f004 f9d1 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3fc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc400:	f000 fe62 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc404:	220a      	movs	r2, #10
   bc406:	1b81      	subs	r1, r0, r6
   bc408:	4628      	mov	r0, r5
   bc40a:	f7fb fb5a 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc40e:	4931      	ldr	r1, [pc, #196]	; (bc4d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc410:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc414:	f004 f9dd 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc418:	200b      	movs	r0, #11
}
   bc41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc41e:	7beb      	ldrb	r3, [r5, #15]
   bc420:	2b01      	cmp	r3, #1
   bc422:	d11d      	bne.n	bc460 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc424:	782b      	ldrb	r3, [r5, #0]
   bc426:	42bb      	cmp	r3, r7
   bc428:	d102      	bne.n	bc430 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc42a:	786b      	ldrb	r3, [r5, #1]
   bc42c:	4543      	cmp	r3, r8
   bc42e:	d032      	beq.n	bc496 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc430:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc434:	b193      	cbz	r3, bc45c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc436:	4928      	ldr	r1, [pc, #160]	; (bc4d8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc438:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc43c:	f004 f9af 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc440:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc444:	f000 fe40 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc448:	220a      	movs	r2, #10
   bc44a:	1b81      	subs	r1, r0, r6
   bc44c:	4628      	mov	r0, r5
   bc44e:	f7fb fb38 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc452:	4920      	ldr	r1, [pc, #128]	; (bc4d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc454:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc458:	f004 f9bb 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc45c:	200d      	movs	r0, #13
   bc45e:	e7dc      	b.n	bc41a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc460:	455a      	cmp	r2, fp
   bc462:	d018      	beq.n	bc496 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc464:	b9bb      	cbnz	r3, bc496 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc466:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc46a:	b193      	cbz	r3, bc492 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc46c:	491b      	ldr	r1, [pc, #108]	; (bc4dc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc46e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc472:	f004 f994 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc476:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc47a:	f000 fe25 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc47e:	220a      	movs	r2, #10
   bc480:	1b81      	subs	r1, r0, r6
   bc482:	4628      	mov	r0, r5
   bc484:	f7fb fb1d 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc488:	4912      	ldr	r1, [pc, #72]	; (bc4d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc48a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc48e:	f004 f9a0 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc492:	2002      	movs	r0, #2
   bc494:	e7c1      	b.n	bc41a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc496:	2001      	movs	r0, #1
   bc498:	f001 f958 	bl	bd74c <delay>
  while (millis() - startTime < maxTime)
   bc49c:	e790      	b.n	bc3c0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc49e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4a2:	b193      	cbz	r3, bc4ca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc4a4:	490e      	ldr	r1, [pc, #56]	; (bc4e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc4a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4aa:	f004 f978 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc4ae:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4b2:	f000 fe09 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
   bc4b6:	220a      	movs	r2, #10
   bc4b8:	1b81      	subs	r1, r0, r6
   bc4ba:	4628      	mov	r0, r5
   bc4bc:	f7fb fb01 	bl	b7ac2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc4c0:	4908      	ldr	r1, [pc, #32]	; (bc4e4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc4c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4c6:	f004 f984 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc4ca:	2003      	movs	r0, #3
   bc4cc:	e7a5      	b.n	bc41a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc4ce:	bf00      	nop
   bc4d0:	000c5460 	.word	0x000c5460
   bc4d4:	000c52b1 	.word	0x000c52b1
   bc4d8:	000c549a 	.word	0x000c549a
   bc4dc:	000c54ce 	.word	0x000c54ce
   bc4e0:	000c5507 	.word	0x000c5507
   bc4e4:	000c552c 	.word	0x000c552c

000bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc4e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc4ec:	4604      	mov	r4, r0
   bc4ee:	4698      	mov	r8, r3
   bc4f0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc4f2:	f7fc fcc9 	bl	b8e88 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc4f6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc4fa:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc4fc:	b14b      	cbz	r3, bc512 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc4fe:	492a      	ldr	r1, [pc, #168]	; (bc5a8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc500:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc504:	f004 f94b 	bl	c079e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc508:	2201      	movs	r2, #1
   bc50a:	4629      	mov	r1, r5
   bc50c:	4620      	mov	r0, r4
   bc50e:	f7fc fee9 	bl	b92e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc512:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc516:	b993      	cbnz	r3, bc53e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc518:	463a      	mov	r2, r7
   bc51a:	4629      	mov	r1, r5
   bc51c:	4620      	mov	r0, r4
   bc51e:	f7fc fce1 	bl	b8ee4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc522:	4606      	mov	r6, r0
   bc524:	b188      	cbz	r0, bc54a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc526:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc52a:	b123      	cbz	r3, bc536 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc52c:	491f      	ldr	r1, [pc, #124]	; (bc5ac <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc52e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc532:	f004 f94e 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc536:	4630      	mov	r0, r6
   bc538:	b002      	add	sp, #8
   bc53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc53e:	2b01      	cmp	r3, #1
   bc540:	d11b      	bne.n	bc57a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc542:	4629      	mov	r1, r5
   bc544:	4620      	mov	r0, r4
   bc546:	f7fc fd8f 	bl	b9068 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc54a:	b35f      	cbz	r7, bc5a4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc54c:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc54e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc552:	2a06      	cmp	r2, #6
   bc554:	d002      	beq.n	bc55c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc556:	f1b8 0f00 	cmp.w	r8, #0
   bc55a:	d015      	beq.n	bc588 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc55c:	b123      	cbz	r3, bc568 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc55e:	4914      	ldr	r1, [pc, #80]	; (bc5b0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc560:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc564:	f004 f935 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc568:	786b      	ldrb	r3, [r5, #1]
   bc56a:	782a      	ldrb	r2, [r5, #0]
   bc56c:	9700      	str	r7, [sp, #0]
   bc56e:	4629      	mov	r1, r5
   bc570:	4620      	mov	r0, r4
   bc572:	f7ff fdbd 	bl	bc0f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc576:	4606      	mov	r6, r0
   bc578:	e7dd      	b.n	bc536 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc57a:	2b02      	cmp	r3, #2
   bc57c:	d1e5      	bne.n	bc54a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc57e:	4629      	mov	r1, r5
   bc580:	4620      	mov	r0, r4
   bc582:	f7fc fdcb 	bl	b911c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc586:	e7e0      	b.n	bc54a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc588:	b123      	cbz	r3, bc594 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc58a:	490a      	ldr	r1, [pc, #40]	; (bc5b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc58c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc590:	f004 f91f 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc594:	786b      	ldrb	r3, [r5, #1]
   bc596:	782a      	ldrb	r2, [r5, #0]
   bc598:	9700      	str	r7, [sp, #0]
   bc59a:	4629      	mov	r1, r5
   bc59c:	4620      	mov	r0, r4
   bc59e:	f7ff fef1 	bl	bc384 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc5a2:	e7e8      	b.n	bc576 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc5a4:	463e      	mov	r6, r7
   bc5a6:	e7c6      	b.n	bc536 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc5a8:	000c5547 	.word	0x000c5547
   bc5ac:	000c5552 	.word	0x000c5552
   bc5b0:	000c556a 	.word	0x000c556a
   bc5b4:	000c5590 	.word	0x000c5590

000bc5b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc5b8:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc5ba:	4b09      	ldr	r3, [pc, #36]	; (bc5e0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc5bc:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc5c0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc5c4:	2300      	movs	r3, #0
   bc5c6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc5ca:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc5cc:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc5d0:	f7ff ff8a 	bl	bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc5d4:	f1a0 030b 	sub.w	r3, r0, #11
   bc5d8:	4258      	negs	r0, r3
   bc5da:	4158      	adcs	r0, r3
   bc5dc:	bd38      	pop	{r3, r4, r5, pc}
   bc5de:	bf00      	nop
   bc5e0:	00010006 	.word	0x00010006

000bc5e4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc5e6:	4615      	mov	r5, r2
   bc5e8:	461a      	mov	r2, r3
   bc5ea:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc5ec:	9301      	str	r3, [sp, #4]
   bc5ee:	f7ff ffe3 	bl	bc5b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc5f2:	b190      	cbz	r0, bc61a <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc5f4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc5f8:	4b09      	ldr	r3, [pc, #36]	; (bc620 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc5fa:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc5fe:	2300      	movs	r3, #0
   bc600:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc604:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc606:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc608:	4620      	mov	r0, r4
   bc60a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc60e:	f7ff ff6b 	bl	bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc612:	f1a0 030a 	sub.w	r3, r0, #10
   bc616:	4258      	negs	r0, r3
   bc618:	4158      	adcs	r0, r3
}
   bc61a:	b003      	add	sp, #12
   bc61c:	bd30      	pop	{r4, r5, pc}
   bc61e:	bf00      	nop
   bc620:	00140006 	.word	0x00140006

000bc624 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc624:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc626:	4615      	mov	r5, r2
   bc628:	461a      	mov	r2, r3
   bc62a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc62c:	9301      	str	r3, [sp, #4]
   bc62e:	f7ff ffc3 	bl	bc5b8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc632:	b190      	cbz	r0, bc65a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc634:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc638:	4b09      	ldr	r3, [pc, #36]	; (bc660 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc63a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc63e:	2300      	movs	r3, #0
   bc640:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc644:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc646:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc648:	4620      	mov	r0, r4
   bc64a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc64e:	f7ff ff4b 	bl	bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc652:	f1a0 030a 	sub.w	r3, r0, #10
   bc656:	4258      	negs	r0, r3
   bc658:	4158      	adcs	r0, r3
}
   bc65a:	b003      	add	sp, #12
   bc65c:	bd30      	pop	{r4, r5, pc}
   bc65e:	bf00      	nop
   bc660:	00140006 	.word	0x00140006

000bc664 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc664:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc666:	460a      	mov	r2, r1
   bc668:	2100      	movs	r1, #0
   bc66a:	f7ff bfbb 	b.w	bc5e4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc670 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bc670:	b510      	push	{r4, lr}
   bc672:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bc674:	2074      	movs	r0, #116	; 0x74
   bc676:	f7f7 fd0e 	bl	b4096 <_Znwj>
   bc67a:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bc67c:	b960      	cbnz	r0, bc698 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc67e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc682:	b913      	cbnz	r3, bc68a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bc684:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc688:	b128      	cbz	r0, bc696 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bc68a:	4908      	ldr	r1, [pc, #32]	; (bc6ac <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bc68c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc690:	f004 f89f 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc694:	2000      	movs	r0, #0
}
   bc696:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc698:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bc69a:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bc69e:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc6a2:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bc6a4:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bc6a6:	2001      	movs	r0, #1
   bc6a8:	e7f5      	b.n	bc696 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bc6aa:	bf00      	nop
   bc6ac:	000c55b9 	.word	0x000c55b9

000bc6b0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bc6b0:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc6b2:	6a03      	ldr	r3, [r0, #32]
{
   bc6b4:	4604      	mov	r4, r0
   bc6b6:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bc6b8:	b91b      	cbnz	r3, bc6c2 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bc6ba:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc6bc:	f7ff ffd8 	bl	bc670 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc6c0:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc6c2:	6a20      	ldr	r0, [r4, #32]
   bc6c4:	b180      	cbz	r0, bc6e8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc6c6:	7803      	ldrb	r3, [r0, #0]
   bc6c8:	f003 0303 	and.w	r3, r3, #3
   bc6cc:	2b03      	cmp	r3, #3
   bc6ce:	d10d      	bne.n	bc6ec <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bc6d0:	2307      	movs	r3, #7
   bc6d2:	2201      	movs	r2, #1
   bc6d4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc6d8:	4620      	mov	r0, r4
   bc6da:	f7ff fcf1 	bl	bc0c0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bc6de:	6a23      	ldr	r3, [r4, #32]
   bc6e0:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bc6e4:	f000 0001 	and.w	r0, r0, #1
}
   bc6e8:	b002      	add	sp, #8
   bc6ea:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc6ec:	2b01      	cmp	r3, #1
   bc6ee:	f04f 0300 	mov.w	r3, #0
   bc6f2:	d011      	beq.n	bc718 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bc6f4:	f240 7101 	movw	r1, #1793	; 0x701
   bc6f8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bc6fc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bc700:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc704:	4620      	mov	r0, r4
   bc706:	f7ff feef 	bl	bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc70a:	280b      	cmp	r0, #11
   bc70c:	d006      	beq.n	bc71c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc70e:	f1a0 030d 	sub.w	r3, r0, #13
   bc712:	4258      	negs	r0, r3
   bc714:	4158      	adcs	r0, r3
   bc716:	e7e7      	b.n	bc6e8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bc718:	4618      	mov	r0, r3
   bc71a:	e7e5      	b.n	bc6e8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bc71c:	2001      	movs	r0, #1
   bc71e:	e7e3      	b.n	bc6e8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bc720 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc720:	b510      	push	{r4, lr}
   bc722:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc724:	2018      	movs	r0, #24
   bc726:	f7f7 fcb6 	bl	b4096 <_Znwj>
   bc72a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc72c:	b960      	cbnz	r0, bc748 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc72e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc732:	b913      	cbnz	r3, bc73a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc734:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc738:	b128      	cbz	r0, bc746 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc73a:	4905      	ldr	r1, [pc, #20]	; (bc750 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc73c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc740:	f004 f847 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc744:	2000      	movs	r0, #0
}
   bc746:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc748:	2300      	movs	r3, #0
   bc74a:	7503      	strb	r3, [r0, #20]
  return (true);
   bc74c:	2001      	movs	r0, #1
   bc74e:	e7fa      	b.n	bc746 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc750:	000c55e0 	.word	0x000c55e0

000bc754 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc754:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc756:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc758:	4605      	mov	r5, r0
   bc75a:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc75c:	b18b      	cbz	r3, bc782 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc75e:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc762:	4b13      	ldr	r3, [pc, #76]	; (bc7b0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc764:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc768:	2300      	movs	r3, #0
   bc76a:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc76e:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc770:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc772:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc776:	f7ff feb7 	bl	bc4e8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc77a:	280b      	cmp	r0, #11
   bc77c:	d10b      	bne.n	bc796 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc77e:	2401      	movs	r4, #1
   bc780:	e00d      	b.n	bc79e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc782:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc784:	f7ff ffcc 	bl	bc720 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc788:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc78a:	9a01      	ldr	r2, [sp, #4]
   bc78c:	2c00      	cmp	r4, #0
   bc78e:	d1e6      	bne.n	bc75e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc790:	4620      	mov	r0, r4
   bc792:	b002      	add	sp, #8
   bc794:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc796:	f1a0 030d 	sub.w	r3, r0, #13
   bc79a:	425c      	negs	r4, r3
   bc79c:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc79e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc7a0:	b110      	cbz	r0, bc7a8 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc7a2:	2118      	movs	r1, #24
   bc7a4:	f7f7 fc7d 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc7a8:	2300      	movs	r3, #0
   bc7aa:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc7ac:	e7f0      	b.n	bc790 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc7ae:	bf00      	nop
   bc7b0:	00010006 	.word	0x00010006

000bc7b4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc7b6:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc7ba:	4604      	mov	r4, r0
   bc7bc:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc7be:	b145      	cbz	r5, bc7d2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc7c0:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc7c4:	b9b1      	cbnz	r1, bc7f4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc7c6:	4620      	mov	r0, r4
}
   bc7c8:	b003      	add	sp, #12
   bc7ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc7ce:	f7ff bfc1 	b.w	bc754 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc7d2:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc7d4:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc7d8:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc7dc:	f002 fd12 	bl	bf204 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc7e0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc7e4:	f002 fd19 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
   bc7e8:	9a01      	ldr	r2, [sp, #4]
   bc7ea:	2800      	cmp	r0, #0
   bc7ec:	d0e8      	beq.n	bc7c0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc7ee:	4628      	mov	r0, r5
   bc7f0:	b003      	add	sp, #12
   bc7f2:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc7f4:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc7f6:	bf18      	it	ne
   bc7f8:	2104      	movne	r1, #4
   bc7fa:	e7e4      	b.n	bc7c6 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc7fc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc7fc:	b570      	push	{r4, r5, r6, lr}
   bc7fe:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc800:	2300      	movs	r3, #0
   bc802:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc806:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc80a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc80e:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc812:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc816:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc818:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc81c:	b91b      	cbnz	r3, bc826 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc81e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc822:	f7fb f9ed 	bl	b7c00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc826:	4620      	mov	r0, r4
   bc828:	f7fc fe04 	bl	b9434 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc82c:	4631      	mov	r1, r6
   bc82e:	4620      	mov	r0, r4
   bc830:	f7ff ffc0 	bl	bc7b4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc834:	b110      	cbz	r0, bc83c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc836:	2501      	movs	r5, #1
}
   bc838:	4628      	mov	r0, r5
   bc83a:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc83c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc840:	b913      	cbnz	r3, bc848 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc842:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc846:	b123      	cbz	r3, bc852 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc848:	4917      	ldr	r1, [pc, #92]	; (bc8a8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc84a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc84e:	f003 ffc0 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc852:	4631      	mov	r1, r6
   bc854:	4620      	mov	r0, r4
   bc856:	f7ff ffad 	bl	bc7b4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc85a:	2800      	cmp	r0, #0
   bc85c:	d1eb      	bne.n	bc836 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc85e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc862:	b913      	cbnz	r3, bc86a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bc864:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc868:	b123      	cbz	r3, bc874 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bc86a:	4910      	ldr	r1, [pc, #64]	; (bc8ac <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bc86c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc870:	f003 ffaf 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc874:	4631      	mov	r1, r6
   bc876:	4620      	mov	r0, r4
   bc878:	f7ff ff9c 	bl	bc7b4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bc87c:	2800      	cmp	r0, #0
   bc87e:	d1da      	bne.n	bc836 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bc880:	2d00      	cmp	r5, #0
   bc882:	d0d9      	beq.n	bc838 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc884:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bc888:	2d00      	cmp	r5, #0
   bc88a:	d0d5      	beq.n	bc838 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc88c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc890:	b91b      	cbnz	r3, bc89a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bc892:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc896:	2b00      	cmp	r3, #0
   bc898:	d0cd      	beq.n	bc836 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bc89a:	4905      	ldr	r1, [pc, #20]	; (bc8b0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bc89c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8a0:	f003 ff97 	bl	c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc8a4:	e7c8      	b.n	bc838 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc8a6:	bf00      	nop
   bc8a8:	000c5607 	.word	0x000c5607
   bc8ac:	000c562b 	.word	0x000c562b
   bc8b0:	000c564e 	.word	0x000c564e

000bc8b4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bc8b4:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc8b6:	6a03      	ldr	r3, [r0, #32]
{
   bc8b8:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc8ba:	b91b      	cbnz	r3, bc8c4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bc8bc:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc8be:	f7ff fed7 	bl	bc670 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc8c2:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc8c4:	6a20      	ldr	r0, [r4, #32]
   bc8c6:	b1b0      	cbz	r0, bc8f6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bc8c8:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc8cc:	07db      	lsls	r3, r3, #31
   bc8ce:	d402      	bmi.n	bc8d6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bc8d0:	4620      	mov	r0, r4
   bc8d2:	f7ff feed 	bl	bc6b0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bc8d6:	6a23      	ldr	r3, [r4, #32]
   bc8d8:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc8dc:	f36f 0200 	bfc	r2, #0, #1
   bc8e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc8e4:	6a23      	ldr	r3, [r4, #32]
   bc8e6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc8ea:	f36f 0200 	bfc	r2, #0, #1
   bc8ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bc8f2:	6a23      	ldr	r3, [r4, #32]
   bc8f4:	69d8      	ldr	r0, [r3, #28]
}
   bc8f6:	b002      	add	sp, #8
   bc8f8:	bd10      	pop	{r4, pc}

000bc8fa <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bc8fa:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc8fc:	6a03      	ldr	r3, [r0, #32]
{
   bc8fe:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc900:	b91b      	cbnz	r3, bc90a <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bc902:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc904:	f7ff feb4 	bl	bc670 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc908:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc90a:	6a20      	ldr	r0, [r4, #32]
   bc90c:	b1b0      	cbz	r0, bc93c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bc90e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc912:	079b      	lsls	r3, r3, #30
   bc914:	d402      	bmi.n	bc91c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bc916:	4620      	mov	r0, r4
   bc918:	f7ff feca 	bl	bc6b0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bc91c:	6a23      	ldr	r3, [r4, #32]
   bc91e:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc922:	f36f 0241 	bfc	r2, #1, #1
   bc926:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc92a:	6a23      	ldr	r3, [r4, #32]
   bc92c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc930:	f36f 0200 	bfc	r2, #0, #1
   bc934:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bc938:	6a23      	ldr	r3, [r4, #32]
   bc93a:	6a18      	ldr	r0, [r3, #32]
}
   bc93c:	b002      	add	sp, #8
   bc93e:	bd10      	pop	{r4, pc}

000bc940 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bc940:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bc942:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bc944:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bc948:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bc94a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bc94e:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bc950:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bc954:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bc956:	2500      	movs	r5, #0
  _width = width;
   bc958:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bc95c:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bc95e:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bc962:	7303      	strb	r3, [r0, #12]
}
   bc964:	bd30      	pop	{r4, r5, pc}

000bc966 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc966:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bc968:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bc96a:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc96c:	b085      	sub	sp, #20
   bc96e:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bc970:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bc972:	f88d 400c 	strb.w	r4, [sp, #12]
   bc976:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc978:	460e      	mov	r6, r1
   bc97a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bc97c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bc980:	b140      	cbz	r0, bc994 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bc982:	7b5b      	ldrb	r3, [r3, #13]
   bc984:	9301      	str	r3, [sp, #4]
   bc986:	ab03      	add	r3, sp, #12
   bc988:	9300      	str	r3, [sp, #0]
   bc98a:	2301      	movs	r3, #1
   bc98c:	f000 f90a 	bl	bcba4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bc990:	b005      	add	sp, #20
   bc992:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bc994:	6858      	ldr	r0, [r3, #4]
   bc996:	2800      	cmp	r0, #0
   bc998:	d0fa      	beq.n	bc990 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc99a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bc99e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc9a2:	f1be 0f03 	cmp.w	lr, #3
   bc9a6:	d10c      	bne.n	bc9c2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc9a8:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bc9ac:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc9b0:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bc9b2:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bc9b6:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc9ba:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bc9bc:	f000 fa2b 	bl	bce16 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bc9c0:	e7e6      	b.n	bc990 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bc9c2:	f1be 0f00 	cmp.w	lr, #0
   bc9c6:	d109      	bne.n	bc9dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bc9c8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bc9cc:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bc9d0:	f8cd c000 	str.w	ip, [sp]
   bc9d4:	ab03      	add	r3, sp, #12
   bc9d6:	463a      	mov	r2, r7
   bc9d8:	4631      	mov	r1, r6
   bc9da:	e7ef      	b.n	bc9bc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bc9dc:	f1be 0f02 	cmp.w	lr, #2
   bc9e0:	d102      	bne.n	bc9e8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bc9e2:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bc9e6:	e7f1      	b.n	bc9cc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bc9e8:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bc9ec:	bf01      	itttt	eq
   bc9ee:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bc9f2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bc9f6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bc9fa:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bc9fe:	e7e7      	b.n	bc9d0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bca00 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bca00:	b4f0      	push	{r4, r5, r6, r7}
   bca02:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bca04:	b902      	cbnz	r2, bca08 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bca06:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bca08:	2a04      	cmp	r2, #4
   bca0a:	d814      	bhi.n	bca36 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bca0c:	f100 050f 	add.w	r5, r0, #15
   bca10:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bca12:	1884      	adds	r4, r0, r2
   bca14:	4629      	mov	r1, r5
   bca16:	4284      	cmp	r4, r0
   bca18:	d009      	beq.n	bca2e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bca1a:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bca1c:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bca1e:	b927      	cbnz	r7, bca2a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bca20:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bca22:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bca24:	3501      	adds	r5, #1
   bca26:	3c01      	subs	r4, #1
   bca28:	e7f5      	b.n	bca16 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bca2a:	73a6      	strb	r6, [r4, #14]
   bca2c:	e7f9      	b.n	bca22 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bca2e:	4620      	mov	r0, r4
}
   bca30:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bca32:	f7ff bf98 	b.w	bc966 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bca36:	2000      	movs	r0, #0
   bca38:	bcf0      	pop	{r4, r5, r6, r7}
   bca3a:	4770      	bx	lr

000bca3c <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bca3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bca3e:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bca40:	7a85      	ldrb	r5, [r0, #10]
   bca42:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bca46:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bca48:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bca4a:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bca4c:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bca4e:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bca52:	b140      	cbz	r0, bca66 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bca54:	2100      	movs	r1, #0
   bca56:	e9cd 2100 	strd	r2, r1, [sp]
   bca5a:	a903      	add	r1, sp, #12
   bca5c:	7b62      	ldrb	r2, [r4, #13]
   bca5e:	f000 f90f 	bl	bcc80 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bca62:	b004      	add	sp, #16
   bca64:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bca66:	6860      	ldr	r0, [r4, #4]
   bca68:	2800      	cmp	r0, #0
   bca6a:	d0fa      	beq.n	bca62 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bca6c:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bca6e:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bca70:	2903      	cmp	r1, #3
   bca72:	d10d      	bne.n	bca90 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bca74:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bca78:	21ff      	movs	r1, #255	; 0xff
   bca7a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bca7e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bca82:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bca86:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bca88:	a903      	add	r1, sp, #12
   bca8a:	f000 f9f6 	bl	bce7a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bca8e:	e7e8      	b.n	bca62 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bca90:	b941      	cbnz	r1, bcaa4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bca92:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bca96:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bca9a:	21ff      	movs	r1, #255	; 0xff
   bca9c:	e9cd 2100 	strd	r2, r1, [sp]
   bcaa0:	4622      	mov	r2, r4
   bcaa2:	e7f1      	b.n	bca88 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcaa4:	2902      	cmp	r1, #2
   bcaa6:	d102      	bne.n	bcaae <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcaa8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcaac:	e7f3      	b.n	bca96 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcaae:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcab0:	bf02      	ittt	eq
   bcab2:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcab6:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcaba:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcabe:	e7ec      	b.n	bca9a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcac0 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcac0:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcac2:	f100 050f 	add.w	r5, r0, #15
   bcac6:	7b02      	ldrb	r2, [r0, #12]
   bcac8:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bcaca:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bcacc:	f7ff ffb6 	bl	bca3c <_ZN23Adafruit_BusIO_Register4readEPhh>
   bcad0:	b178      	cbz	r0, bcaf2 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bcad2:	7b22      	ldrb	r2, [r4, #12]
   bcad4:	4629      	mov	r1, r5
   bcad6:	4422      	add	r2, r4
  uint32_t value = 0;
   bcad8:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bcada:	42a2      	cmp	r2, r4
   bcadc:	d00b      	beq.n	bcaf6 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bcade:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bcae0:	7ba0      	ldrb	r0, [r4, #14]
   bcae2:	b920      	cbnz	r0, bcaee <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bcae4:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bcae6:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bcae8:	3a01      	subs	r2, #1
   bcaea:	3101      	adds	r1, #1
   bcaec:	e7f5      	b.n	bcada <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bcaee:	7808      	ldrb	r0, [r1, #0]
   bcaf0:	e7f9      	b.n	bcae6 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bcaf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcaf6:	bd38      	pop	{r3, r4, r5, pc}

000bcaf8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bcaf8:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bcafa:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bcafc:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bcafe:	7143      	strb	r3, [r0, #5]
}
   bcb00:	bd10      	pop	{r4, pc}

000bcb02 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bcb02:	b510      	push	{r4, lr}
   bcb04:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcb06:	6800      	ldr	r0, [r0, #0]
   bcb08:	f7ff ffda 	bl	bcac0 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bcb0c:	7922      	ldrb	r2, [r4, #4]
   bcb0e:	2301      	movs	r3, #1
   bcb10:	4093      	lsls	r3, r2
  val >>= _shift;
   bcb12:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bcb14:	3b01      	subs	r3, #1
  val >>= _shift;
   bcb16:	40d0      	lsrs	r0, r2
}
   bcb18:	4018      	ands	r0, r3
   bcb1a:	bd10      	pop	{r4, pc}

000bcb1c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcb1c:	b570      	push	{r4, r5, r6, lr}
   bcb1e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcb20:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcb22:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bcb24:	f7ff ffcc 	bl	bcac0 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bcb28:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bcb2a:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bcb2c:	2201      	movs	r2, #1
   bcb2e:	409a      	lsls	r2, r3
   bcb30:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bcb32:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bcb36:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bcb3a:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bcb3c:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bcb3e:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bcb42:	4329      	orrs	r1, r5
   bcb44:	7b02      	ldrb	r2, [r0, #12]
}
   bcb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bcb4a:	f7ff bf59 	b.w	bca00 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bcb4e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bcb4e:	6042      	str	r2, [r0, #4]
  _begun = false;
   bcb50:	2200      	movs	r2, #0
   bcb52:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bcb54:	2220      	movs	r2, #32
  _addr = addr;
   bcb56:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bcb58:	60c2      	str	r2, [r0, #12]
#endif
}
   bcb5a:	4770      	bx	lr

000bcb5c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bcb5c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bcb5e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bcb60:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bcb62:	b153      	cbz	r3, bcb7a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bcb64:	7821      	ldrb	r1, [r4, #0]
   bcb66:	6860      	ldr	r0, [r4, #4]
   bcb68:	f002 fb4c 	bl	bf204 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bcb6c:	6860      	ldr	r0, [r4, #4]
   bcb6e:	f002 fb54 	bl	bf21a <_ZN7TwoWire15endTransmissionEv>
   bcb72:	fab0 f080 	clz	r0, r0
   bcb76:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bcb78:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bcb7a:	2101      	movs	r1, #1
   bcb7c:	f000 f803 	bl	bcb86 <_ZN18Adafruit_I2CDevice5beginEb>
   bcb80:	2800      	cmp	r0, #0
   bcb82:	d1ef      	bne.n	bcb64 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bcb84:	e7f8      	b.n	bcb78 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bcb86 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcb86:	b538      	push	{r3, r4, r5, lr}
   bcb88:	4604      	mov	r4, r0
  _wire->begin();
   bcb8a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcb8c:	460d      	mov	r5, r1
  _wire->begin();
   bcb8e:	f002 fb07 	bl	bf1a0 <_ZN7TwoWire5beginEv>
  _begun = true;
   bcb92:	2001      	movs	r0, #1
   bcb94:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bcb96:	b125      	cbz	r5, bcba2 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bcb98:	4620      	mov	r0, r4
}
   bcb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bcb9e:	f7ff bfdd 	b.w	bcb5c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bcba2:	bd38      	pop	{r3, r4, r5, pc}

000bcba4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bcba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcba8:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bcbac:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bcbae:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bcbb0:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bcbb2:	4432      	add	r2, r6
   bcbb4:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bcbb6:	4604      	mov	r4, r0
   bcbb8:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bcbba:	d902      	bls.n	bcbc2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bcbbc:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bcbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bcbc2:	7801      	ldrb	r1, [r0, #0]
   bcbc4:	6840      	ldr	r0, [r0, #4]
   bcbc6:	f002 fb1d 	bl	bf204 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcbca:	b97e      	cbnz	r6, bcbec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bcbcc:	6860      	ldr	r0, [r4, #4]
   bcbce:	6803      	ldr	r3, [r0, #0]
   bcbd0:	462a      	mov	r2, r5
   bcbd2:	68db      	ldr	r3, [r3, #12]
   bcbd4:	4641      	mov	r1, r8
   bcbd6:	4798      	blx	r3
   bcbd8:	4285      	cmp	r5, r0
   bcbda:	d1ef      	bne.n	bcbbc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bcbdc:	6860      	ldr	r0, [r4, #4]
   bcbde:	4639      	mov	r1, r7
   bcbe0:	f002 fb17 	bl	bf212 <_ZN7TwoWire15endTransmissionEh>
   bcbe4:	fab0 f080 	clz	r0, r0
   bcbe8:	0940      	lsrs	r0, r0, #5
   bcbea:	e7e8      	b.n	bcbbe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcbec:	f1b9 0f00 	cmp.w	r9, #0
   bcbf0:	d0ec      	beq.n	bcbcc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bcbf2:	6860      	ldr	r0, [r4, #4]
   bcbf4:	6803      	ldr	r3, [r0, #0]
   bcbf6:	4632      	mov	r2, r6
   bcbf8:	68db      	ldr	r3, [r3, #12]
   bcbfa:	4649      	mov	r1, r9
   bcbfc:	4798      	blx	r3
   bcbfe:	4286      	cmp	r6, r0
   bcc00:	d1dc      	bne.n	bcbbc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bcc02:	e7e3      	b.n	bcbcc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bcc04 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bcc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcc08:	4615      	mov	r5, r2
   bcc0a:	4604      	mov	r4, r0
   bcc0c:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bcc0e:	b2d2      	uxtb	r2, r2
   bcc10:	7801      	ldrb	r1, [r0, #0]
   bcc12:	6840      	ldr	r0, [r0, #4]
   bcc14:	f002 fae1 	bl	bf1da <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bcc18:	4285      	cmp	r5, r0
   bcc1a:	d10d      	bne.n	bcc38 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bcc1c:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bcc1e:	fa1f f887 	uxth.w	r8, r7
   bcc22:	45a8      	cmp	r8, r5
   bcc24:	f107 0701 	add.w	r7, r7, #1
   bcc28:	d209      	bcs.n	bcc3e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bcc2a:	6860      	ldr	r0, [r4, #4]
   bcc2c:	6803      	ldr	r3, [r0, #0]
   bcc2e:	695b      	ldr	r3, [r3, #20]
   bcc30:	4798      	blx	r3
   bcc32:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bcc36:	e7f2      	b.n	bcc1e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bcc38:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bcc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc3e:	2001      	movs	r0, #1
   bcc40:	e7fb      	b.n	bcc3a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bcc42 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bcc42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcc46:	4607      	mov	r7, r0
   bcc48:	4688      	mov	r8, r1
   bcc4a:	4616      	mov	r6, r2
   bcc4c:	4699      	mov	r9, r3
  size_t pos = 0;
   bcc4e:	2500      	movs	r5, #0
  while (pos < len) {
   bcc50:	42b5      	cmp	r5, r6
   bcc52:	d212      	bcs.n	bcc7a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bcc54:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bcc56:	1b74      	subs	r4, r6, r5
   bcc58:	4294      	cmp	r4, r2
   bcc5a:	bf28      	it	cs
   bcc5c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bcc5e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bcc60:	42ab      	cmp	r3, r5
   bcc62:	bf94      	ite	ls
   bcc64:	464b      	movls	r3, r9
   bcc66:	2300      	movhi	r3, #0
   bcc68:	4622      	mov	r2, r4
   bcc6a:	eb08 0105 	add.w	r1, r8, r5
   bcc6e:	4638      	mov	r0, r7
   bcc70:	f7ff ffc8 	bl	bcc04 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bcc74:	b110      	cbz	r0, bcc7c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bcc76:	4425      	add	r5, r4
  while (pos < len) {
   bcc78:	e7ea      	b.n	bcc50 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bcc7a:	2001      	movs	r0, #1
}
   bcc7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bcc80 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bcc80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcc82:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bcc84:	2300      	movs	r3, #0
   bcc86:	e9cd 3300 	strd	r3, r3, [sp]
   bcc8a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bcc8e:	9e06      	ldr	r6, [sp, #24]
   bcc90:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bcc92:	f7ff ff87 	bl	bcba4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bcc96:	b140      	cbz	r0, bccaa <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bcc98:	2301      	movs	r3, #1
   bcc9a:	4632      	mov	r2, r6
   bcc9c:	4629      	mov	r1, r5
   bcc9e:	4620      	mov	r0, r4
}
   bcca0:	b002      	add	sp, #8
   bcca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bcca6:	f7ff bfcc 	b.w	bcc42 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bccaa:	b002      	add	sp, #8
   bccac:	bd70      	pop	{r4, r5, r6, pc}
	...

000bccb0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bccb4:	4604      	mov	r4, r0
  if (_spi) {
   bccb6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bccb8:	b085      	sub	sp, #20
   bccba:	460d      	mov	r5, r1
  if (_spi) {
   bccbc:	b140      	cbz	r0, bccd0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bccbe:	2300      	movs	r3, #0
   bccc0:	9300      	str	r3, [sp, #0]
   bccc2:	4613      	mov	r3, r2
   bccc4:	460a      	mov	r2, r1
   bccc6:	f003 ff4f 	bl	c0b68 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bccca:	b005      	add	sp, #20
   bcccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bccd0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bccd2:	68a0      	ldr	r0, [r4, #8]
   bccd4:	4f48      	ldr	r7, [pc, #288]	; (bcdf8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bccd6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bccda:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bccdc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bccde:	bf0c      	ite	eq
   bcce0:	f04f 0b01 	moveq.w	fp, #1
   bcce4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcce8:	ea1b 0f03 	tst.w	fp, r3
   bccec:	eb01 0302 	add.w	r3, r1, r2
   bccf0:	bf0c      	ite	eq
   bccf2:	f04f 0901 	moveq.w	r9, #1
   bccf6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bccfa:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bccfc:	9303      	str	r3, [sp, #12]
   bccfe:	9b03      	ldr	r3, [sp, #12]
   bcd00:	42ab      	cmp	r3, r5
   bcd02:	d0e2      	beq.n	bccca <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bcd04:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bcd08:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bcd0a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bcd0e:	b117      	cbz	r7, bcd16 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bcd10:	4638      	mov	r0, r7
   bcd12:	f000 f9c9 	bl	bd0a8 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bcd16:	7b63      	ldrb	r3, [r4, #13]
   bcd18:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bcd1c:	d141      	bne.n	bcda2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcd1e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcd22:	1c5a      	adds	r2, r3, #1
   bcd24:	d00f      	beq.n	bcd46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bcd26:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcd2a:	bf14      	ite	ne
   bcd2c:	2301      	movne	r3, #1
   bcd2e:	2300      	moveq	r3, #0
   bcd30:	454b      	cmp	r3, r9
   bcd32:	d008      	beq.n	bcd46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bcd34:	6963      	ldr	r3, [r4, #20]
   bcd36:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcd38:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bcd3a:	2900      	cmp	r1, #0
   bcd3c:	d02c      	beq.n	bcd98 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bcd3e:	4302      	orrs	r2, r0
   bcd40:	601a      	str	r2, [r3, #0]
   bcd42:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bcd46:	69a1      	ldr	r1, [r4, #24]
   bcd48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcd4a:	680a      	ldr	r2, [r1, #0]
   bcd4c:	4313      	orrs	r3, r2
   bcd4e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcd50:	b117      	cbz	r7, bcd58 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bcd52:	4638      	mov	r0, r7
   bcd54:	f000 f9a8 	bl	bd0a8 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bcd58:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcd5c:	3301      	adds	r3, #1
   bcd5e:	d006      	beq.n	bcd6e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bcd60:	69e3      	ldr	r3, [r4, #28]
   bcd62:	681a      	ldr	r2, [r3, #0]
   bcd64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcd66:	421a      	tst	r2, r3
            reply |= b;
   bcd68:	bf18      	it	ne
   bcd6a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bcd6e:	69a1      	ldr	r1, [r4, #24]
   bcd70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcd72:	680a      	ldr	r2, [r1, #0]
   bcd74:	ea22 0303 	bic.w	r3, r2, r3
   bcd78:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bcd7a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcd7e:	3301      	adds	r3, #1
        buffer[i] = reply;
   bcd80:	bf18      	it	ne
   bcd82:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bcd86:	7b23      	ldrb	r3, [r4, #12]
   bcd88:	2b00      	cmp	r3, #0
   bcd8a:	d132      	bne.n	bcdf2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bcd8c:	0076      	lsls	r6, r6, #1
   bcd8e:	b2f6      	uxtb	r6, r6
   bcd90:	2e00      	cmp	r6, #0
   bcd92:	d1bc      	bne.n	bcd0e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bcd94:	3501      	adds	r5, #1
   bcd96:	e7b2      	b.n	bccfe <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bcd98:	ea22 0200 	bic.w	r2, r2, r0
   bcd9c:	601a      	str	r2, [r3, #0]
   bcd9e:	4689      	mov	r9, r1
   bcda0:	e7d1      	b.n	bcd46 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bcda2:	69a1      	ldr	r1, [r4, #24]
   bcda4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcda6:	680a      	ldr	r2, [r1, #0]
   bcda8:	4313      	orrs	r3, r2
   bcdaa:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcdac:	b117      	cbz	r7, bcdb4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bcdae:	4638      	mov	r0, r7
   bcdb0:	f000 f97a 	bl	bd0a8 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bcdb4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcdb8:	3301      	adds	r3, #1
   bcdba:	d008      	beq.n	bcdce <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bcdbc:	6963      	ldr	r3, [r4, #20]
   bcdbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bcdc0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bcdc2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bcdc6:	bf14      	ite	ne
   bcdc8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bcdca:	438a      	biceq	r2, r1
   bcdcc:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bcdce:	69a1      	ldr	r1, [r4, #24]
   bcdd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcdd2:	680a      	ldr	r2, [r1, #0]
   bcdd4:	ea22 0303 	bic.w	r3, r2, r3
   bcdd8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bcdda:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcdde:	3301      	adds	r3, #1
   bcde0:	d0cb      	beq.n	bcd7a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bcde2:	69e3      	ldr	r3, [r4, #28]
   bcde4:	681a      	ldr	r2, [r3, #0]
   bcde6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcde8:	421a      	tst	r2, r3
            reply |= b;
   bcdea:	bf18      	it	ne
   bcdec:	ea46 0808 	orrne.w	r8, r6, r8
   bcdf0:	e7c3      	b.n	bcd7a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bcdf2:	0876      	lsrs	r6, r6, #1
   bcdf4:	e7cc      	b.n	bcd90 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bcdf6:	bf00      	nop
   bcdf8:	0007a120 	.word	0x0007a120

000bcdfc <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bcdfc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bcdfe:	2201      	movs	r2, #1
  uint8_t data = send;
   bce00:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bce04:	f10d 0107 	add.w	r1, sp, #7
   bce08:	f7ff ff52 	bl	bccb0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bce0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bce10:	b003      	add	sp, #12
   bce12:	f85d fb04 	ldr.w	pc, [sp], #4

000bce16 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bce16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce1a:	4604      	mov	r4, r0
  if (_spi) {
   bce1c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bce1e:	460e      	mov	r6, r1
   bce20:	4617      	mov	r7, r2
   bce22:	461d      	mov	r5, r3
  if (_spi) {
   bce24:	b110      	cbz	r0, bce2c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bce26:	6861      	ldr	r1, [r4, #4]
   bce28:	f003 fdf8 	bl	c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bce2c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bce30:	2100      	movs	r1, #0
   bce32:	b280      	uxth	r0, r0
   bce34:	f004 fa7d 	bl	c1332 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bce38:	9b06      	ldr	r3, [sp, #24]
   bce3a:	eb05 0803 	add.w	r8, r5, r3
   bce3e:	4545      	cmp	r5, r8
   bce40:	d108      	bne.n	bce54 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bce42:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bce44:	42b7      	cmp	r7, r6
   bce46:	d00b      	beq.n	bce60 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bce48:	f816 1b01 	ldrb.w	r1, [r6], #1
   bce4c:	4620      	mov	r0, r4
   bce4e:	f7ff ffd5 	bl	bcdfc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bce52:	e7f7      	b.n	bce44 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bce54:	f815 1b01 	ldrb.w	r1, [r5], #1
   bce58:	4620      	mov	r0, r4
   bce5a:	f7ff ffcf 	bl	bcdfc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bce5e:	e7ee      	b.n	bce3e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bce60:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bce64:	2101      	movs	r1, #1
   bce66:	b280      	uxth	r0, r0
   bce68:	f004 fa63 	bl	c1332 <digitalWrite>

  if (_spi) {
   bce6c:	6820      	ldr	r0, [r4, #0]
   bce6e:	b108      	cbz	r0, bce74 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bce70:	f003 fdba 	bl	c09e8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bce74:	2001      	movs	r0, #1
   bce76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bce7a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce7e:	4604      	mov	r4, r0
  if (_spi) {
   bce80:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bce82:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bce86:	460e      	mov	r6, r1
   bce88:	4617      	mov	r7, r2
   bce8a:	461d      	mov	r5, r3
  if (_spi) {
   bce8c:	b110      	cbz	r0, bce94 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bce8e:	6861      	ldr	r1, [r4, #4]
   bce90:	f003 fdc4 	bl	c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bce94:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bce98:	2100      	movs	r1, #0
   bce9a:	b280      	uxth	r0, r0
   bce9c:	f004 fa49 	bl	c1332 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bcea0:	4437      	add	r7, r6
   bcea2:	42be      	cmp	r6, r7
   bcea4:	d10a      	bne.n	bcebc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bcea6:	9b06      	ldr	r3, [sp, #24]
   bcea8:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bceaa:	42ae      	cmp	r6, r5
   bceac:	d00c      	beq.n	bcec8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bceae:	4641      	mov	r1, r8
   bceb0:	4620      	mov	r0, r4
   bceb2:	f7ff ffa3 	bl	bcdfc <_ZN18Adafruit_SPIDevice8transferEh>
   bceb6:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bceba:	e7f6      	b.n	bceaa <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bcebc:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcec0:	4620      	mov	r0, r4
   bcec2:	f7ff ff9b 	bl	bcdfc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bcec6:	e7ec      	b.n	bcea2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bcec8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcecc:	2101      	movs	r1, #1
   bcece:	b280      	uxth	r0, r0
   bced0:	f004 fa2f 	bl	c1332 <digitalWrite>

  if (_spi) {
   bced4:	6820      	ldr	r0, [r4, #0]
   bced6:	b108      	cbz	r0, bcedc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bced8:	f003 fd86 	bl	c09e8 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bcedc:	2001      	movs	r0, #1
   bcede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bcee4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bcee4:	b508      	push	{r3, lr}
   bcee6:	4b02      	ldr	r3, [pc, #8]	; (bcef0 <hal_ble_stack_init+0xc>)
   bcee8:	681b      	ldr	r3, [r3, #0]
   bceea:	689b      	ldr	r3, [r3, #8]
   bceec:	9301      	str	r3, [sp, #4]
   bceee:	bd08      	pop	{r3, pc}
   bcef0:	00030278 	.word	0x00030278

000bcef4 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bcef4:	b508      	push	{r3, lr}
   bcef6:	4b02      	ldr	r3, [pc, #8]	; (bcf00 <hal_ble_gap_set_tx_power+0xc>)
   bcef8:	681b      	ldr	r3, [r3, #0]
   bcefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcefc:	9301      	str	r3, [sp, #4]
   bcefe:	bd08      	pop	{r3, pc}
   bcf00:	00030278 	.word	0x00030278

000bcf04 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bcf04:	b508      	push	{r3, lr}
   bcf06:	4b02      	ldr	r3, [pc, #8]	; (bcf10 <hal_ble_gap_set_advertising_data+0xc>)
   bcf08:	681b      	ldr	r3, [r3, #0]
   bcf0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcf0c:	9301      	str	r3, [sp, #4]
   bcf0e:	bd08      	pop	{r3, pc}
   bcf10:	00030278 	.word	0x00030278

000bcf14 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bcf14:	b508      	push	{r3, lr}
   bcf16:	4b02      	ldr	r3, [pc, #8]	; (bcf20 <hal_ble_gap_set_scan_response_data+0xc>)
   bcf18:	681b      	ldr	r3, [r3, #0]
   bcf1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcf1c:	9301      	str	r3, [sp, #4]
   bcf1e:	bd08      	pop	{r3, pc}
   bcf20:	00030278 	.word	0x00030278

000bcf24 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bcf24:	b508      	push	{r3, lr}
   bcf26:	4b02      	ldr	r3, [pc, #8]	; (bcf30 <hal_ble_gap_start_advertising+0xc>)
   bcf28:	681b      	ldr	r3, [r3, #0]
   bcf2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bcf2c:	9301      	str	r3, [sp, #4]
   bcf2e:	bd08      	pop	{r3, pc}
   bcf30:	00030278 	.word	0x00030278

000bcf34 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bcf34:	b508      	push	{r3, lr}
   bcf36:	4b03      	ldr	r3, [pc, #12]	; (bcf44 <hal_ble_gap_disconnect+0x10>)
   bcf38:	681b      	ldr	r3, [r3, #0]
   bcf3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bcf3e:	9301      	str	r3, [sp, #4]
   bcf40:	bd08      	pop	{r3, pc}
   bcf42:	0000      	.short	0x0000
   bcf44:	00030278 	.word	0x00030278

000bcf48 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bcf48:	b508      	push	{r3, lr}
   bcf4a:	4b03      	ldr	r3, [pc, #12]	; (bcf58 <hal_ble_gatt_server_add_service+0x10>)
   bcf4c:	681b      	ldr	r3, [r3, #0]
   bcf4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bcf52:	9301      	str	r3, [sp, #4]
   bcf54:	bd08      	pop	{r3, pc}
   bcf56:	0000      	.short	0x0000
   bcf58:	00030278 	.word	0x00030278

000bcf5c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcf5c:	b508      	push	{r3, lr}
   bcf5e:	4b03      	ldr	r3, [pc, #12]	; (bcf6c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bcf60:	681b      	ldr	r3, [r3, #0]
   bcf62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bcf66:	9301      	str	r3, [sp, #4]
   bcf68:	bd08      	pop	{r3, pc}
   bcf6a:	0000      	.short	0x0000
   bcf6c:	00030278 	.word	0x00030278

000bcf70 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcf70:	b508      	push	{r3, lr}
   bcf72:	4b03      	ldr	r3, [pc, #12]	; (bcf80 <hal_ble_gatt_client_write_with_response+0x10>)
   bcf74:	681b      	ldr	r3, [r3, #0]
   bcf76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bcf7a:	9301      	str	r3, [sp, #4]
   bcf7c:	bd08      	pop	{r3, pc}
   bcf7e:	0000      	.short	0x0000
   bcf80:	00030278 	.word	0x00030278

000bcf84 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcf84:	b508      	push	{r3, lr}
   bcf86:	4b03      	ldr	r3, [pc, #12]	; (bcf94 <hal_ble_gatt_client_write_without_response+0x10>)
   bcf88:	681b      	ldr	r3, [r3, #0]
   bcf8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bcf8e:	9301      	str	r3, [sp, #4]
   bcf90:	bd08      	pop	{r3, pc}
   bcf92:	0000      	.short	0x0000
   bcf94:	00030278 	.word	0x00030278

000bcf98 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bcf98:	b508      	push	{r3, lr}
   bcf9a:	4b03      	ldr	r3, [pc, #12]	; (bcfa8 <hal_ble_gatt_server_add_characteristic+0x10>)
   bcf9c:	681b      	ldr	r3, [r3, #0]
   bcf9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bcfa2:	9301      	str	r3, [sp, #4]
   bcfa4:	bd08      	pop	{r3, pc}
   bcfa6:	0000      	.short	0x0000
   bcfa8:	00030278 	.word	0x00030278

000bcfac <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bcfac:	b508      	push	{r3, lr}
   bcfae:	4b03      	ldr	r3, [pc, #12]	; (bcfbc <hal_ble_set_callback_on_periph_link_events+0x10>)
   bcfb0:	681b      	ldr	r3, [r3, #0]
   bcfb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bcfb6:	9301      	str	r3, [sp, #4]
   bcfb8:	bd08      	pop	{r3, pc}
   bcfba:	0000      	.short	0x0000
   bcfbc:	00030278 	.word	0x00030278

000bcfc0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcfc0:	b508      	push	{r3, lr}
   bcfc2:	4b03      	ldr	r3, [pc, #12]	; (bcfd0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bcfc4:	681b      	ldr	r3, [r3, #0]
   bcfc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bcfca:	9301      	str	r3, [sp, #4]
   bcfcc:	bd08      	pop	{r3, pc}
   bcfce:	0000      	.short	0x0000
   bcfd0:	00030278 	.word	0x00030278

000bcfd4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcfd4:	b508      	push	{r3, lr}
   bcfd6:	4b03      	ldr	r3, [pc, #12]	; (bcfe4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bcfd8:	681b      	ldr	r3, [r3, #0]
   bcfda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bcfde:	9301      	str	r3, [sp, #4]
   bcfe0:	bd08      	pop	{r3, pc}
   bcfe2:	0000      	.short	0x0000
   bcfe4:	00030278 	.word	0x00030278

000bcfe8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bcfe8:	b508      	push	{r3, lr}
   bcfea:	4b02      	ldr	r3, [pc, #8]	; (bcff4 <os_thread_yield+0xc>)
   bcfec:	681b      	ldr	r3, [r3, #0]
   bcfee:	68db      	ldr	r3, [r3, #12]
   bcff0:	9301      	str	r3, [sp, #4]
   bcff2:	bd08      	pop	{r3, pc}
   bcff4:	00030248 	.word	0x00030248

000bcff8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bcff8:	b508      	push	{r3, lr}
   bcffa:	4b02      	ldr	r3, [pc, #8]	; (bd004 <os_thread_scheduling+0xc>)
   bcffc:	681b      	ldr	r3, [r3, #0]
   bcffe:	69db      	ldr	r3, [r3, #28]
   bd000:	9301      	str	r3, [sp, #4]
   bd002:	bd08      	pop	{r3, pc}
   bd004:	00030248 	.word	0x00030248

000bd008 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd008:	b508      	push	{r3, lr}
   bd00a:	4b02      	ldr	r3, [pc, #8]	; (bd014 <os_timer_create+0xc>)
   bd00c:	681b      	ldr	r3, [r3, #0]
   bd00e:	6a1b      	ldr	r3, [r3, #32]
   bd010:	9301      	str	r3, [sp, #4]
   bd012:	bd08      	pop	{r3, pc}
   bd014:	00030248 	.word	0x00030248

000bd018 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd018:	b508      	push	{r3, lr}
   bd01a:	4b02      	ldr	r3, [pc, #8]	; (bd024 <os_timer_destroy+0xc>)
   bd01c:	681b      	ldr	r3, [r3, #0]
   bd01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd020:	9301      	str	r3, [sp, #4]
   bd022:	bd08      	pop	{r3, pc}
   bd024:	00030248 	.word	0x00030248

000bd028 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd028:	b508      	push	{r3, lr}
   bd02a:	4b02      	ldr	r3, [pc, #8]	; (bd034 <os_timer_get_id+0xc>)
   bd02c:	681b      	ldr	r3, [r3, #0]
   bd02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd030:	9301      	str	r3, [sp, #4]
   bd032:	bd08      	pop	{r3, pc}
   bd034:	00030248 	.word	0x00030248

000bd038 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd038:	b508      	push	{r3, lr}
   bd03a:	4b02      	ldr	r3, [pc, #8]	; (bd044 <os_timer_change+0xc>)
   bd03c:	681b      	ldr	r3, [r3, #0]
   bd03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd040:	9301      	str	r3, [sp, #4]
   bd042:	bd08      	pop	{r3, pc}
   bd044:	00030248 	.word	0x00030248

000bd048 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd048:	b508      	push	{r3, lr}
   bd04a:	4b02      	ldr	r3, [pc, #8]	; (bd054 <os_mutex_recursive_create+0xc>)
   bd04c:	681b      	ldr	r3, [r3, #0]
   bd04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd050:	9301      	str	r3, [sp, #4]
   bd052:	bd08      	pop	{r3, pc}
   bd054:	00030248 	.word	0x00030248

000bd058 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd058:	b508      	push	{r3, lr}
   bd05a:	4b02      	ldr	r3, [pc, #8]	; (bd064 <os_mutex_recursive_destroy+0xc>)
   bd05c:	681b      	ldr	r3, [r3, #0]
   bd05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd060:	9301      	str	r3, [sp, #4]
   bd062:	bd08      	pop	{r3, pc}
   bd064:	00030248 	.word	0x00030248

000bd068 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd068:	b508      	push	{r3, lr}
   bd06a:	4b02      	ldr	r3, [pc, #8]	; (bd074 <os_mutex_recursive_lock+0xc>)
   bd06c:	681b      	ldr	r3, [r3, #0]
   bd06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd070:	9301      	str	r3, [sp, #4]
   bd072:	bd08      	pop	{r3, pc}
   bd074:	00030248 	.word	0x00030248

000bd078 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd078:	b508      	push	{r3, lr}
   bd07a:	4b02      	ldr	r3, [pc, #8]	; (bd084 <os_mutex_recursive_unlock+0xc>)
   bd07c:	681b      	ldr	r3, [r3, #0]
   bd07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd080:	9301      	str	r3, [sp, #4]
   bd082:	bd08      	pop	{r3, pc}
   bd084:	00030248 	.word	0x00030248

000bd088 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd088:	b508      	push	{r3, lr}
   bd08a:	4b02      	ldr	r3, [pc, #8]	; (bd094 <os_timer_set_id+0xc>)
   bd08c:	681b      	ldr	r3, [r3, #0]
   bd08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd090:	9301      	str	r3, [sp, #4]
   bd092:	bd08      	pop	{r3, pc}
   bd094:	00030248 	.word	0x00030248

000bd098 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd098:	b508      	push	{r3, lr}
   bd09a:	4b02      	ldr	r3, [pc, #8]	; (bd0a4 <HAL_RNG_GetRandomNumber+0xc>)
   bd09c:	681b      	ldr	r3, [r3, #0]
   bd09e:	685b      	ldr	r3, [r3, #4]
   bd0a0:	9301      	str	r3, [sp, #4]
   bd0a2:	bd08      	pop	{r3, pc}
   bd0a4:	00030218 	.word	0x00030218

000bd0a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd0a8:	b508      	push	{r3, lr}
   bd0aa:	4b02      	ldr	r3, [pc, #8]	; (bd0b4 <HAL_Delay_Microseconds+0xc>)
   bd0ac:	681b      	ldr	r3, [r3, #0]
   bd0ae:	68db      	ldr	r3, [r3, #12]
   bd0b0:	9301      	str	r3, [sp, #4]
   bd0b2:	bd08      	pop	{r3, pc}
   bd0b4:	00030218 	.word	0x00030218

000bd0b8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd0b8:	b508      	push	{r3, lr}
   bd0ba:	4b02      	ldr	r3, [pc, #8]	; (bd0c4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd0bc:	681b      	ldr	r3, [r3, #0]
   bd0be:	691b      	ldr	r3, [r3, #16]
   bd0c0:	9301      	str	r3, [sp, #4]
   bd0c2:	bd08      	pop	{r3, pc}
   bd0c4:	00030218 	.word	0x00030218

000bd0c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd0c8:	b508      	push	{r3, lr}
   bd0ca:	4b02      	ldr	r3, [pc, #8]	; (bd0d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd0cc:	681b      	ldr	r3, [r3, #0]
   bd0ce:	695b      	ldr	r3, [r3, #20]
   bd0d0:	9301      	str	r3, [sp, #4]
   bd0d2:	bd08      	pop	{r3, pc}
   bd0d4:	00030218 	.word	0x00030218

000bd0d8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd0d8:	b508      	push	{r3, lr}
   bd0da:	4b02      	ldr	r3, [pc, #8]	; (bd0e4 <hal_rtc_time_is_valid+0xc>)
   bd0dc:	681b      	ldr	r3, [r3, #0]
   bd0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd0e0:	9301      	str	r3, [sp, #4]
   bd0e2:	bd08      	pop	{r3, pc}
   bd0e4:	00030218 	.word	0x00030218

000bd0e8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd0e8:	b508      	push	{r3, lr}
   bd0ea:	4b02      	ldr	r3, [pc, #8]	; (bd0f4 <hal_rtc_get_time+0xc>)
   bd0ec:	681b      	ldr	r3, [r3, #0]
   bd0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd0f0:	9301      	str	r3, [sp, #4]
   bd0f2:	bd08      	pop	{r3, pc}
   bd0f4:	00030218 	.word	0x00030218

000bd0f8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd0f8:	b508      	push	{r3, lr}
   bd0fa:	4b02      	ldr	r3, [pc, #8]	; (bd104 <HAL_Validate_Pin_Function+0xc>)
   bd0fc:	681b      	ldr	r3, [r3, #0]
   bd0fe:	685b      	ldr	r3, [r3, #4]
   bd100:	9301      	str	r3, [sp, #4]
   bd102:	bd08      	pop	{r3, pc}
   bd104:	0003022c 	.word	0x0003022c

000bd108 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd108:	b508      	push	{r3, lr}
   bd10a:	4b02      	ldr	r3, [pc, #8]	; (bd114 <HAL_Pin_Mode+0xc>)
   bd10c:	681b      	ldr	r3, [r3, #0]
   bd10e:	689b      	ldr	r3, [r3, #8]
   bd110:	9301      	str	r3, [sp, #4]
   bd112:	bd08      	pop	{r3, pc}
   bd114:	0003022c 	.word	0x0003022c

000bd118 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd118:	b508      	push	{r3, lr}
   bd11a:	4b02      	ldr	r3, [pc, #8]	; (bd124 <HAL_Get_Pin_Mode+0xc>)
   bd11c:	681b      	ldr	r3, [r3, #0]
   bd11e:	68db      	ldr	r3, [r3, #12]
   bd120:	9301      	str	r3, [sp, #4]
   bd122:	bd08      	pop	{r3, pc}
   bd124:	0003022c 	.word	0x0003022c

000bd128 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd128:	b508      	push	{r3, lr}
   bd12a:	4b02      	ldr	r3, [pc, #8]	; (bd134 <HAL_GPIO_Write+0xc>)
   bd12c:	681b      	ldr	r3, [r3, #0]
   bd12e:	691b      	ldr	r3, [r3, #16]
   bd130:	9301      	str	r3, [sp, #4]
   bd132:	bd08      	pop	{r3, pc}
   bd134:	0003022c 	.word	0x0003022c

000bd138 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd138:	b508      	push	{r3, lr}
   bd13a:	4b02      	ldr	r3, [pc, #8]	; (bd144 <HAL_Interrupts_Enable_All+0xc>)
   bd13c:	681b      	ldr	r3, [r3, #0]
   bd13e:	6a1b      	ldr	r3, [r3, #32]
   bd140:	9301      	str	r3, [sp, #4]
   bd142:	bd08      	pop	{r3, pc}
   bd144:	0003022c 	.word	0x0003022c

000bd148 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd148:	b508      	push	{r3, lr}
   bd14a:	4b02      	ldr	r3, [pc, #8]	; (bd154 <HAL_Interrupts_Disable_All+0xc>)
   bd14c:	681b      	ldr	r3, [r3, #0]
   bd14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd150:	9301      	str	r3, [sp, #4]
   bd152:	bd08      	pop	{r3, pc}
   bd154:	0003022c 	.word	0x0003022c

000bd158 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd158:	b508      	push	{r3, lr}
   bd15a:	4b02      	ldr	r3, [pc, #8]	; (bd164 <hal_adc_read+0xc>)
   bd15c:	681b      	ldr	r3, [r3, #0]
   bd15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd160:	9301      	str	r3, [sp, #4]
   bd162:	bd08      	pop	{r3, pc}
   bd164:	0003022c 	.word	0x0003022c

000bd168 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd168:	b508      	push	{r3, lr}
   bd16a:	4b02      	ldr	r3, [pc, #8]	; (bd174 <hal_i2c_set_speed+0xc>)
   bd16c:	681b      	ldr	r3, [r3, #0]
   bd16e:	681b      	ldr	r3, [r3, #0]
   bd170:	9301      	str	r3, [sp, #4]
   bd172:	bd08      	pop	{r3, pc}
   bd174:	00030228 	.word	0x00030228

000bd178 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd178:	b508      	push	{r3, lr}
   bd17a:	4b02      	ldr	r3, [pc, #8]	; (bd184 <hal_i2c_begin+0xc>)
   bd17c:	681b      	ldr	r3, [r3, #0]
   bd17e:	68db      	ldr	r3, [r3, #12]
   bd180:	9301      	str	r3, [sp, #4]
   bd182:	bd08      	pop	{r3, pc}
   bd184:	00030228 	.word	0x00030228

000bd188 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd188:	b508      	push	{r3, lr}
   bd18a:	4b02      	ldr	r3, [pc, #8]	; (bd194 <hal_i2c_begin_transmission+0xc>)
   bd18c:	681b      	ldr	r3, [r3, #0]
   bd18e:	699b      	ldr	r3, [r3, #24]
   bd190:	9301      	str	r3, [sp, #4]
   bd192:	bd08      	pop	{r3, pc}
   bd194:	00030228 	.word	0x00030228

000bd198 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd198:	b508      	push	{r3, lr}
   bd19a:	4b02      	ldr	r3, [pc, #8]	; (bd1a4 <hal_i2c_end_transmission+0xc>)
   bd19c:	681b      	ldr	r3, [r3, #0]
   bd19e:	69db      	ldr	r3, [r3, #28]
   bd1a0:	9301      	str	r3, [sp, #4]
   bd1a2:	bd08      	pop	{r3, pc}
   bd1a4:	00030228 	.word	0x00030228

000bd1a8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd1a8:	b508      	push	{r3, lr}
   bd1aa:	4b02      	ldr	r3, [pc, #8]	; (bd1b4 <hal_i2c_write+0xc>)
   bd1ac:	681b      	ldr	r3, [r3, #0]
   bd1ae:	6a1b      	ldr	r3, [r3, #32]
   bd1b0:	9301      	str	r3, [sp, #4]
   bd1b2:	bd08      	pop	{r3, pc}
   bd1b4:	00030228 	.word	0x00030228

000bd1b8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd1b8:	b508      	push	{r3, lr}
   bd1ba:	4b02      	ldr	r3, [pc, #8]	; (bd1c4 <hal_i2c_available+0xc>)
   bd1bc:	681b      	ldr	r3, [r3, #0]
   bd1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd1c0:	9301      	str	r3, [sp, #4]
   bd1c2:	bd08      	pop	{r3, pc}
   bd1c4:	00030228 	.word	0x00030228

000bd1c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd1c8:	b508      	push	{r3, lr}
   bd1ca:	4b02      	ldr	r3, [pc, #8]	; (bd1d4 <hal_i2c_read+0xc>)
   bd1cc:	681b      	ldr	r3, [r3, #0]
   bd1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd1d0:	9301      	str	r3, [sp, #4]
   bd1d2:	bd08      	pop	{r3, pc}
   bd1d4:	00030228 	.word	0x00030228

000bd1d8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd1d8:	b508      	push	{r3, lr}
   bd1da:	4b02      	ldr	r3, [pc, #8]	; (bd1e4 <hal_i2c_peek+0xc>)
   bd1dc:	681b      	ldr	r3, [r3, #0]
   bd1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd1e0:	9301      	str	r3, [sp, #4]
   bd1e2:	bd08      	pop	{r3, pc}
   bd1e4:	00030228 	.word	0x00030228

000bd1e8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd1e8:	b508      	push	{r3, lr}
   bd1ea:	4b02      	ldr	r3, [pc, #8]	; (bd1f4 <hal_i2c_flush+0xc>)
   bd1ec:	681b      	ldr	r3, [r3, #0]
   bd1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd1f0:	9301      	str	r3, [sp, #4]
   bd1f2:	bd08      	pop	{r3, pc}
   bd1f4:	00030228 	.word	0x00030228

000bd1f8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd1f8:	b508      	push	{r3, lr}
   bd1fa:	4b02      	ldr	r3, [pc, #8]	; (bd204 <hal_i2c_is_enabled+0xc>)
   bd1fc:	681b      	ldr	r3, [r3, #0]
   bd1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd200:	9301      	str	r3, [sp, #4]
   bd202:	bd08      	pop	{r3, pc}
   bd204:	00030228 	.word	0x00030228

000bd208 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd208:	b508      	push	{r3, lr}
   bd20a:	4b02      	ldr	r3, [pc, #8]	; (bd214 <hal_i2c_init+0xc>)
   bd20c:	681b      	ldr	r3, [r3, #0]
   bd20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd210:	9301      	str	r3, [sp, #4]
   bd212:	bd08      	pop	{r3, pc}
   bd214:	00030228 	.word	0x00030228

000bd218 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd218:	b508      	push	{r3, lr}
   bd21a:	4b02      	ldr	r3, [pc, #8]	; (bd224 <hal_i2c_request_ex+0xc>)
   bd21c:	681b      	ldr	r3, [r3, #0]
   bd21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd220:	9301      	str	r3, [sp, #4]
   bd222:	bd08      	pop	{r3, pc}
   bd224:	00030228 	.word	0x00030228

000bd228 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd228:	b508      	push	{r3, lr}
   bd22a:	4b02      	ldr	r3, [pc, #8]	; (bd234 <inet_inet_ntop+0xc>)
   bd22c:	681b      	ldr	r3, [r3, #0]
   bd22e:	695b      	ldr	r3, [r3, #20]
   bd230:	9301      	str	r3, [sp, #4]
   bd232:	bd08      	pop	{r3, pc}
   bd234:	00030264 	.word	0x00030264

000bd238 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd238:	b508      	push	{r3, lr}
   bd23a:	4b02      	ldr	r3, [pc, #8]	; (bd244 <netdb_freeaddrinfo+0xc>)
   bd23c:	681b      	ldr	r3, [r3, #0]
   bd23e:	689b      	ldr	r3, [r3, #8]
   bd240:	9301      	str	r3, [sp, #4]
   bd242:	bd08      	pop	{r3, pc}
   bd244:	00030268 	.word	0x00030268

000bd248 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd248:	b508      	push	{r3, lr}
   bd24a:	4b02      	ldr	r3, [pc, #8]	; (bd254 <netdb_getaddrinfo+0xc>)
   bd24c:	681b      	ldr	r3, [r3, #0]
   bd24e:	68db      	ldr	r3, [r3, #12]
   bd250:	9301      	str	r3, [sp, #4]
   bd252:	bd08      	pop	{r3, pc}
   bd254:	00030268 	.word	0x00030268

000bd258 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd258:	b508      	push	{r3, lr}
   bd25a:	4b02      	ldr	r3, [pc, #8]	; (bd264 <HAL_Servo_Attach+0xc>)
   bd25c:	681b      	ldr	r3, [r3, #0]
   bd25e:	691b      	ldr	r3, [r3, #16]
   bd260:	9301      	str	r3, [sp, #4]
   bd262:	bd08      	pop	{r3, pc}
   bd264:	00030224 	.word	0x00030224

000bd268 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd268:	b508      	push	{r3, lr}
   bd26a:	4b02      	ldr	r3, [pc, #8]	; (bd274 <HAL_Servo_Detach+0xc>)
   bd26c:	681b      	ldr	r3, [r3, #0]
   bd26e:	695b      	ldr	r3, [r3, #20]
   bd270:	9301      	str	r3, [sp, #4]
   bd272:	bd08      	pop	{r3, pc}
   bd274:	00030224 	.word	0x00030224

000bd278 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd278:	b508      	push	{r3, lr}
   bd27a:	4b02      	ldr	r3, [pc, #8]	; (bd284 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd27c:	681b      	ldr	r3, [r3, #0]
   bd27e:	699b      	ldr	r3, [r3, #24]
   bd280:	9301      	str	r3, [sp, #4]
   bd282:	bd08      	pop	{r3, pc}
   bd284:	00030224 	.word	0x00030224

000bd288 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd288:	b508      	push	{r3, lr}
   bd28a:	4b02      	ldr	r3, [pc, #8]	; (bd294 <hal_spi_begin+0xc>)
   bd28c:	681b      	ldr	r3, [r3, #0]
   bd28e:	681b      	ldr	r3, [r3, #0]
   bd290:	9301      	str	r3, [sp, #4]
   bd292:	bd08      	pop	{r3, pc}
   bd294:	00030230 	.word	0x00030230

000bd298 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd298:	b508      	push	{r3, lr}
   bd29a:	4b02      	ldr	r3, [pc, #8]	; (bd2a4 <hal_spi_set_clock_divider+0xc>)
   bd29c:	681b      	ldr	r3, [r3, #0]
   bd29e:	691b      	ldr	r3, [r3, #16]
   bd2a0:	9301      	str	r3, [sp, #4]
   bd2a2:	bd08      	pop	{r3, pc}
   bd2a4:	00030230 	.word	0x00030230

000bd2a8 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd2a8:	b508      	push	{r3, lr}
   bd2aa:	4b02      	ldr	r3, [pc, #8]	; (bd2b4 <hal_spi_transfer+0xc>)
   bd2ac:	681b      	ldr	r3, [r3, #0]
   bd2ae:	695b      	ldr	r3, [r3, #20]
   bd2b0:	9301      	str	r3, [sp, #4]
   bd2b2:	bd08      	pop	{r3, pc}
   bd2b4:	00030230 	.word	0x00030230

000bd2b8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd2b8:	b508      	push	{r3, lr}
   bd2ba:	4b02      	ldr	r3, [pc, #8]	; (bd2c4 <hal_spi_init+0xc>)
   bd2bc:	681b      	ldr	r3, [r3, #0]
   bd2be:	69db      	ldr	r3, [r3, #28]
   bd2c0:	9301      	str	r3, [sp, #4]
   bd2c2:	bd08      	pop	{r3, pc}
   bd2c4:	00030230 	.word	0x00030230

000bd2c8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd2c8:	b508      	push	{r3, lr}
   bd2ca:	4b02      	ldr	r3, [pc, #8]	; (bd2d4 <hal_spi_is_enabled+0xc>)
   bd2cc:	681b      	ldr	r3, [r3, #0]
   bd2ce:	6a1b      	ldr	r3, [r3, #32]
   bd2d0:	9301      	str	r3, [sp, #4]
   bd2d2:	bd08      	pop	{r3, pc}
   bd2d4:	00030230 	.word	0x00030230

000bd2d8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd2d8:	b508      	push	{r3, lr}
   bd2da:	4b02      	ldr	r3, [pc, #8]	; (bd2e4 <hal_spi_info+0xc>)
   bd2dc:	681b      	ldr	r3, [r3, #0]
   bd2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd2e0:	9301      	str	r3, [sp, #4]
   bd2e2:	bd08      	pop	{r3, pc}
   bd2e4:	00030230 	.word	0x00030230

000bd2e8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd2e8:	b508      	push	{r3, lr}
   bd2ea:	4b02      	ldr	r3, [pc, #8]	; (bd2f4 <hal_spi_transfer_dma+0xc>)
   bd2ec:	681b      	ldr	r3, [r3, #0]
   bd2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd2f0:	9301      	str	r3, [sp, #4]
   bd2f2:	bd08      	pop	{r3, pc}
   bd2f4:	00030230 	.word	0x00030230

000bd2f8 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd2f8:	b508      	push	{r3, lr}
   bd2fa:	4b02      	ldr	r3, [pc, #8]	; (bd304 <hal_spi_begin_ext+0xc>)
   bd2fc:	681b      	ldr	r3, [r3, #0]
   bd2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd300:	9301      	str	r3, [sp, #4]
   bd302:	bd08      	pop	{r3, pc}
   bd304:	00030230 	.word	0x00030230

000bd308 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd308:	b508      	push	{r3, lr}
   bd30a:	4b02      	ldr	r3, [pc, #8]	; (bd314 <hal_spi_transfer_dma_status+0xc>)
   bd30c:	681b      	ldr	r3, [r3, #0]
   bd30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd310:	9301      	str	r3, [sp, #4]
   bd312:	bd08      	pop	{r3, pc}
   bd314:	00030230 	.word	0x00030230

000bd318 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd318:	b508      	push	{r3, lr}
   bd31a:	4b02      	ldr	r3, [pc, #8]	; (bd324 <hal_spi_set_settings+0xc>)
   bd31c:	681b      	ldr	r3, [r3, #0]
   bd31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd320:	9301      	str	r3, [sp, #4]
   bd322:	bd08      	pop	{r3, pc}
   bd324:	00030230 	.word	0x00030230

000bd328 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd328:	b508      	push	{r3, lr}
   bd32a:	4b02      	ldr	r3, [pc, #8]	; (bd334 <hal_spi_acquire+0xc>)
   bd32c:	681b      	ldr	r3, [r3, #0]
   bd32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd330:	9301      	str	r3, [sp, #4]
   bd332:	bd08      	pop	{r3, pc}
   bd334:	00030230 	.word	0x00030230

000bd338 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd338:	b508      	push	{r3, lr}
   bd33a:	4b02      	ldr	r3, [pc, #8]	; (bd344 <hal_spi_release+0xc>)
   bd33c:	681b      	ldr	r3, [r3, #0]
   bd33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd340:	9301      	str	r3, [sp, #4]
   bd342:	bd08      	pop	{r3, pc}
   bd344:	00030230 	.word	0x00030230

000bd348 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd348:	b508      	push	{r3, lr}
   bd34a:	4b02      	ldr	r3, [pc, #8]	; (bd354 <hal_usart_end+0xc>)
   bd34c:	681b      	ldr	r3, [r3, #0]
   bd34e:	689b      	ldr	r3, [r3, #8]
   bd350:	9301      	str	r3, [sp, #4]
   bd352:	bd08      	pop	{r3, pc}
   bd354:	0003023c 	.word	0x0003023c

000bd358 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd358:	b508      	push	{r3, lr}
   bd35a:	4b02      	ldr	r3, [pc, #8]	; (bd364 <hal_usart_write+0xc>)
   bd35c:	681b      	ldr	r3, [r3, #0]
   bd35e:	68db      	ldr	r3, [r3, #12]
   bd360:	9301      	str	r3, [sp, #4]
   bd362:	bd08      	pop	{r3, pc}
   bd364:	0003023c 	.word	0x0003023c

000bd368 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd368:	b508      	push	{r3, lr}
   bd36a:	4b02      	ldr	r3, [pc, #8]	; (bd374 <hal_usart_available+0xc>)
   bd36c:	681b      	ldr	r3, [r3, #0]
   bd36e:	691b      	ldr	r3, [r3, #16]
   bd370:	9301      	str	r3, [sp, #4]
   bd372:	bd08      	pop	{r3, pc}
   bd374:	0003023c 	.word	0x0003023c

000bd378 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd378:	b508      	push	{r3, lr}
   bd37a:	4b02      	ldr	r3, [pc, #8]	; (bd384 <hal_usart_read+0xc>)
   bd37c:	681b      	ldr	r3, [r3, #0]
   bd37e:	695b      	ldr	r3, [r3, #20]
   bd380:	9301      	str	r3, [sp, #4]
   bd382:	bd08      	pop	{r3, pc}
   bd384:	0003023c 	.word	0x0003023c

000bd388 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd388:	b508      	push	{r3, lr}
   bd38a:	4b02      	ldr	r3, [pc, #8]	; (bd394 <hal_usart_peek+0xc>)
   bd38c:	681b      	ldr	r3, [r3, #0]
   bd38e:	699b      	ldr	r3, [r3, #24]
   bd390:	9301      	str	r3, [sp, #4]
   bd392:	bd08      	pop	{r3, pc}
   bd394:	0003023c 	.word	0x0003023c

000bd398 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd398:	b508      	push	{r3, lr}
   bd39a:	4b02      	ldr	r3, [pc, #8]	; (bd3a4 <hal_usart_flush+0xc>)
   bd39c:	681b      	ldr	r3, [r3, #0]
   bd39e:	69db      	ldr	r3, [r3, #28]
   bd3a0:	9301      	str	r3, [sp, #4]
   bd3a2:	bd08      	pop	{r3, pc}
   bd3a4:	0003023c 	.word	0x0003023c

000bd3a8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd3a8:	b508      	push	{r3, lr}
   bd3aa:	4b02      	ldr	r3, [pc, #8]	; (bd3b4 <hal_usart_is_enabled+0xc>)
   bd3ac:	681b      	ldr	r3, [r3, #0]
   bd3ae:	6a1b      	ldr	r3, [r3, #32]
   bd3b0:	9301      	str	r3, [sp, #4]
   bd3b2:	bd08      	pop	{r3, pc}
   bd3b4:	0003023c 	.word	0x0003023c

000bd3b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd3b8:	b508      	push	{r3, lr}
   bd3ba:	4b02      	ldr	r3, [pc, #8]	; (bd3c4 <hal_usart_available_data_for_write+0xc>)
   bd3bc:	681b      	ldr	r3, [r3, #0]
   bd3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd3c0:	9301      	str	r3, [sp, #4]
   bd3c2:	bd08      	pop	{r3, pc}
   bd3c4:	0003023c 	.word	0x0003023c

000bd3c8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <hal_usart_begin_config+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	0003023c 	.word	0x0003023c

000bd3d8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <hal_usart_init_ex+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	0003023c 	.word	0x0003023c

000bd3e8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <HAL_USB_USART_Init+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	681b      	ldr	r3, [r3, #0]
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	0003024c 	.word	0x0003024c

000bd3f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <HAL_USB_USART_Begin+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	685b      	ldr	r3, [r3, #4]
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	0003024c 	.word	0x0003024c

000bd408 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <HAL_USB_USART_End+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	689b      	ldr	r3, [r3, #8]
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	0003024c 	.word	0x0003024c

000bd418 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <HAL_USB_USART_Available_Data+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	691b      	ldr	r3, [r3, #16]
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	0003024c 	.word	0x0003024c

000bd428 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b02      	ldr	r3, [pc, #8]	; (bd434 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	695b      	ldr	r3, [r3, #20]
   bd430:	9301      	str	r3, [sp, #4]
   bd432:	bd08      	pop	{r3, pc}
   bd434:	0003024c 	.word	0x0003024c

000bd438 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd438:	b508      	push	{r3, lr}
   bd43a:	4b02      	ldr	r3, [pc, #8]	; (bd444 <HAL_USB_USART_Receive_Data+0xc>)
   bd43c:	681b      	ldr	r3, [r3, #0]
   bd43e:	699b      	ldr	r3, [r3, #24]
   bd440:	9301      	str	r3, [sp, #4]
   bd442:	bd08      	pop	{r3, pc}
   bd444:	0003024c 	.word	0x0003024c

000bd448 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd448:	b508      	push	{r3, lr}
   bd44a:	4b02      	ldr	r3, [pc, #8]	; (bd454 <HAL_USB_USART_Send_Data+0xc>)
   bd44c:	681b      	ldr	r3, [r3, #0]
   bd44e:	69db      	ldr	r3, [r3, #28]
   bd450:	9301      	str	r3, [sp, #4]
   bd452:	bd08      	pop	{r3, pc}
   bd454:	0003024c 	.word	0x0003024c

000bd458 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b02      	ldr	r3, [pc, #8]	; (bd464 <HAL_USB_USART_Flush_Data+0xc>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	6a1b      	ldr	r3, [r3, #32]
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	bd08      	pop	{r3, pc}
   bd464:	0003024c 	.word	0x0003024c

000bd468 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd468:	b508      	push	{r3, lr}
   bd46a:	4b02      	ldr	r3, [pc, #8]	; (bd474 <panic_+0xc>)
   bd46c:	681b      	ldr	r3, [r3, #0]
   bd46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd470:	9301      	str	r3, [sp, #4]
   bd472:	bd08      	pop	{r3, pc}
   bd474:	00030260 	.word	0x00030260

000bd478 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd478:	b508      	push	{r3, lr}
   bd47a:	4b02      	ldr	r3, [pc, #8]	; (bd484 <log_message+0xc>)
   bd47c:	681b      	ldr	r3, [r3, #0]
   bd47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd480:	9301      	str	r3, [sp, #4]
   bd482:	bd08      	pop	{r3, pc}
   bd484:	00030260 	.word	0x00030260

000bd488 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd488:	b508      	push	{r3, lr}
   bd48a:	4b02      	ldr	r3, [pc, #8]	; (bd494 <log_level_name+0xc>)
   bd48c:	681b      	ldr	r3, [r3, #0]
   bd48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd490:	9301      	str	r3, [sp, #4]
   bd492:	bd08      	pop	{r3, pc}
   bd494:	00030260 	.word	0x00030260

000bd498 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd498:	b508      	push	{r3, lr}
   bd49a:	4b02      	ldr	r3, [pc, #8]	; (bd4a4 <log_set_callbacks+0xc>)
   bd49c:	681b      	ldr	r3, [r3, #0]
   bd49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd4a0:	9301      	str	r3, [sp, #4]
   bd4a2:	bd08      	pop	{r3, pc}
   bd4a4:	00030260 	.word	0x00030260

000bd4a8 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b03      	ldr	r3, [pc, #12]	; (bd4b8 <led_set_status_active+0x10>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd4b2:	9301      	str	r3, [sp, #4]
   bd4b4:	bd08      	pop	{r3, pc}
   bd4b6:	0000      	.short	0x0000
   bd4b8:	00030260 	.word	0x00030260

000bd4bc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd4bc:	b508      	push	{r3, lr}
   bd4be:	4b02      	ldr	r3, [pc, #8]	; (bd4c8 <system_mode+0xc>)
   bd4c0:	681b      	ldr	r3, [r3, #0]
   bd4c2:	681b      	ldr	r3, [r3, #0]
   bd4c4:	9301      	str	r3, [sp, #4]
   bd4c6:	bd08      	pop	{r3, pc}
   bd4c8:	00030220 	.word	0x00030220

000bd4cc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd4cc:	b508      	push	{r3, lr}
   bd4ce:	4b02      	ldr	r3, [pc, #8]	; (bd4d8 <set_system_mode+0xc>)
   bd4d0:	681b      	ldr	r3, [r3, #0]
   bd4d2:	685b      	ldr	r3, [r3, #4]
   bd4d4:	9301      	str	r3, [sp, #4]
   bd4d6:	bd08      	pop	{r3, pc}
   bd4d8:	00030220 	.word	0x00030220

000bd4dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd4dc:	b508      	push	{r3, lr}
   bd4de:	4b02      	ldr	r3, [pc, #8]	; (bd4e8 <system_delay_ms+0xc>)
   bd4e0:	681b      	ldr	r3, [r3, #0]
   bd4e2:	695b      	ldr	r3, [r3, #20]
   bd4e4:	9301      	str	r3, [sp, #4]
   bd4e6:	bd08      	pop	{r3, pc}
   bd4e8:	00030220 	.word	0x00030220

000bd4ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd4ec:	b508      	push	{r3, lr}
   bd4ee:	4b02      	ldr	r3, [pc, #8]	; (bd4f8 <application_thread_current+0xc>)
   bd4f0:	681b      	ldr	r3, [r3, #0]
   bd4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd4f4:	9301      	str	r3, [sp, #4]
   bd4f6:	bd08      	pop	{r3, pc}
   bd4f8:	00030220 	.word	0x00030220

000bd4fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd4fc:	b508      	push	{r3, lr}
   bd4fe:	4b02      	ldr	r3, [pc, #8]	; (bd508 <application_thread_invoke+0xc>)
   bd500:	681b      	ldr	r3, [r3, #0]
   bd502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd504:	9301      	str	r3, [sp, #4]
   bd506:	bd08      	pop	{r3, pc}
   bd508:	00030220 	.word	0x00030220

000bd50c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd50c:	b508      	push	{r3, lr}
   bd50e:	4b02      	ldr	r3, [pc, #8]	; (bd518 <system_thread_get_state+0xc>)
   bd510:	681b      	ldr	r3, [r3, #0]
   bd512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd514:	9301      	str	r3, [sp, #4]
   bd516:	bd08      	pop	{r3, pc}
   bd518:	00030220 	.word	0x00030220

000bd51c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bd51c:	b508      	push	{r3, lr}
   bd51e:	4b02      	ldr	r3, [pc, #8]	; (bd528 <led_pattern_period+0xc>)
   bd520:	681b      	ldr	r3, [r3, #0]
   bd522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd524:	9301      	str	r3, [sp, #4]
   bd526:	bd08      	pop	{r3, pc}
   bd528:	00030220 	.word	0x00030220

000bd52c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd52c:	b508      	push	{r3, lr}
   bd52e:	4b03      	ldr	r3, [pc, #12]	; (bd53c <system_ctrl_set_app_request_handler+0x10>)
   bd530:	681b      	ldr	r3, [r3, #0]
   bd532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd536:	9301      	str	r3, [sp, #4]
   bd538:	bd08      	pop	{r3, pc}
   bd53a:	0000      	.short	0x0000
   bd53c:	00030220 	.word	0x00030220

000bd540 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd540:	b508      	push	{r3, lr}
   bd542:	4b03      	ldr	r3, [pc, #12]	; (bd550 <system_ctrl_set_result+0x10>)
   bd544:	681b      	ldr	r3, [r3, #0]
   bd546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd54a:	9301      	str	r3, [sp, #4]
   bd54c:	bd08      	pop	{r3, pc}
   bd54e:	0000      	.short	0x0000
   bd550:	00030220 	.word	0x00030220

000bd554 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd554:	b508      	push	{r3, lr}
   bd556:	4b02      	ldr	r3, [pc, #8]	; (bd560 <spark_process+0xc>)
   bd558:	681b      	ldr	r3, [r3, #0]
   bd55a:	689b      	ldr	r3, [r3, #8]
   bd55c:	9301      	str	r3, [sp, #4]
   bd55e:	bd08      	pop	{r3, pc}
   bd560:	00030244 	.word	0x00030244

000bd564 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd564:	b508      	push	{r3, lr}
   bd566:	4b02      	ldr	r3, [pc, #8]	; (bd570 <spark_cloud_flag_connected+0xc>)
   bd568:	681b      	ldr	r3, [r3, #0]
   bd56a:	695b      	ldr	r3, [r3, #20]
   bd56c:	9301      	str	r3, [sp, #4]
   bd56e:	bd08      	pop	{r3, pc}
   bd570:	00030244 	.word	0x00030244

000bd574 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd574:	b508      	push	{r3, lr}
   bd576:	4b02      	ldr	r3, [pc, #8]	; (bd580 <spark_send_event+0xc>)
   bd578:	681b      	ldr	r3, [r3, #0]
   bd57a:	6a1b      	ldr	r3, [r3, #32]
   bd57c:	9301      	str	r3, [sp, #4]
   bd57e:	bd08      	pop	{r3, pc}
   bd580:	00030244 	.word	0x00030244

000bd584 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bd584:	b508      	push	{r3, lr}
   bd586:	4b02      	ldr	r3, [pc, #8]	; (bd590 <spark_subscribe+0xc>)
   bd588:	681b      	ldr	r3, [r3, #0]
   bd58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd58c:	9301      	str	r3, [sp, #4]
   bd58e:	bd08      	pop	{r3, pc}
   bd590:	00030244 	.word	0x00030244

000bd594 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd594:	b508      	push	{r3, lr}
   bd596:	4b02      	ldr	r3, [pc, #8]	; (bd5a0 <spark_sync_time_pending+0xc>)
   bd598:	681b      	ldr	r3, [r3, #0]
   bd59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd59c:	9301      	str	r3, [sp, #4]
   bd59e:	bd08      	pop	{r3, pc}
   bd5a0:	00030244 	.word	0x00030244

000bd5a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd5a4:	b508      	push	{r3, lr}
   bd5a6:	4b02      	ldr	r3, [pc, #8]	; (bd5b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd5a8:	681b      	ldr	r3, [r3, #0]
   bd5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd5ac:	9301      	str	r3, [sp, #4]
   bd5ae:	bd08      	pop	{r3, pc}
   bd5b0:	00030244 	.word	0x00030244

000bd5b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd5b4:	b508      	push	{r3, lr}
   bd5b6:	4b02      	ldr	r3, [pc, #8]	; (bd5c0 <network_connect+0xc>)
   bd5b8:	681b      	ldr	r3, [r3, #0]
   bd5ba:	685b      	ldr	r3, [r3, #4]
   bd5bc:	9301      	str	r3, [sp, #4]
   bd5be:	bd08      	pop	{r3, pc}
   bd5c0:	00030240 	.word	0x00030240

000bd5c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd5c4:	b508      	push	{r3, lr}
   bd5c6:	4b02      	ldr	r3, [pc, #8]	; (bd5d0 <network_connecting+0xc>)
   bd5c8:	681b      	ldr	r3, [r3, #0]
   bd5ca:	689b      	ldr	r3, [r3, #8]
   bd5cc:	9301      	str	r3, [sp, #4]
   bd5ce:	bd08      	pop	{r3, pc}
   bd5d0:	00030240 	.word	0x00030240

000bd5d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd5d4:	b508      	push	{r3, lr}
   bd5d6:	4b02      	ldr	r3, [pc, #8]	; (bd5e0 <network_disconnect+0xc>)
   bd5d8:	681b      	ldr	r3, [r3, #0]
   bd5da:	68db      	ldr	r3, [r3, #12]
   bd5dc:	9301      	str	r3, [sp, #4]
   bd5de:	bd08      	pop	{r3, pc}
   bd5e0:	00030240 	.word	0x00030240

000bd5e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd5e4:	b508      	push	{r3, lr}
   bd5e6:	4b02      	ldr	r3, [pc, #8]	; (bd5f0 <network_ready+0xc>)
   bd5e8:	681b      	ldr	r3, [r3, #0]
   bd5ea:	691b      	ldr	r3, [r3, #16]
   bd5ec:	9301      	str	r3, [sp, #4]
   bd5ee:	bd08      	pop	{r3, pc}
   bd5f0:	00030240 	.word	0x00030240

000bd5f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd5f4:	b508      	push	{r3, lr}
   bd5f6:	4b02      	ldr	r3, [pc, #8]	; (bd600 <network_on+0xc>)
   bd5f8:	681b      	ldr	r3, [r3, #0]
   bd5fa:	695b      	ldr	r3, [r3, #20]
   bd5fc:	9301      	str	r3, [sp, #4]
   bd5fe:	bd08      	pop	{r3, pc}
   bd600:	00030240 	.word	0x00030240

000bd604 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd604:	b508      	push	{r3, lr}
   bd606:	4b02      	ldr	r3, [pc, #8]	; (bd610 <network_off+0xc>)
   bd608:	681b      	ldr	r3, [r3, #0]
   bd60a:	699b      	ldr	r3, [r3, #24]
   bd60c:	9301      	str	r3, [sp, #4]
   bd60e:	bd08      	pop	{r3, pc}
   bd610:	00030240 	.word	0x00030240

000bd614 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd614:	b508      	push	{r3, lr}
   bd616:	4b02      	ldr	r3, [pc, #8]	; (bd620 <network_listen+0xc>)
   bd618:	681b      	ldr	r3, [r3, #0]
   bd61a:	69db      	ldr	r3, [r3, #28]
   bd61c:	9301      	str	r3, [sp, #4]
   bd61e:	bd08      	pop	{r3, pc}
   bd620:	00030240 	.word	0x00030240

000bd624 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd624:	b508      	push	{r3, lr}
   bd626:	4b02      	ldr	r3, [pc, #8]	; (bd630 <network_listening+0xc>)
   bd628:	681b      	ldr	r3, [r3, #0]
   bd62a:	6a1b      	ldr	r3, [r3, #32]
   bd62c:	9301      	str	r3, [sp, #4]
   bd62e:	bd08      	pop	{r3, pc}
   bd630:	00030240 	.word	0x00030240

000bd634 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd634:	b508      	push	{r3, lr}
   bd636:	4b02      	ldr	r3, [pc, #8]	; (bd640 <network_set_listen_timeout+0xc>)
   bd638:	681b      	ldr	r3, [r3, #0]
   bd63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd63c:	9301      	str	r3, [sp, #4]
   bd63e:	bd08      	pop	{r3, pc}
   bd640:	00030240 	.word	0x00030240

000bd644 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd644:	b508      	push	{r3, lr}
   bd646:	4b02      	ldr	r3, [pc, #8]	; (bd650 <network_get_listen_timeout+0xc>)
   bd648:	681b      	ldr	r3, [r3, #0]
   bd64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd64c:	9301      	str	r3, [sp, #4]
   bd64e:	bd08      	pop	{r3, pc}
   bd650:	00030240 	.word	0x00030240

000bd654 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd654:	b508      	push	{r3, lr}
   bd656:	4b02      	ldr	r3, [pc, #8]	; (bd660 <network_is_on+0xc>)
   bd658:	681b      	ldr	r3, [r3, #0]
   bd65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd65c:	9301      	str	r3, [sp, #4]
   bd65e:	bd08      	pop	{r3, pc}
   bd660:	00030240 	.word	0x00030240

000bd664 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd664:	b508      	push	{r3, lr}
   bd666:	4b02      	ldr	r3, [pc, #8]	; (bd670 <network_is_off+0xc>)
   bd668:	681b      	ldr	r3, [r3, #0]
   bd66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd66c:	9301      	str	r3, [sp, #4]
   bd66e:	bd08      	pop	{r3, pc}
   bd670:	00030240 	.word	0x00030240

000bd674 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd674:	b508      	push	{r3, lr}
   bd676:	4b02      	ldr	r3, [pc, #8]	; (bd680 <malloc+0xc>)
   bd678:	681b      	ldr	r3, [r3, #0]
   bd67a:	681b      	ldr	r3, [r3, #0]
   bd67c:	9301      	str	r3, [sp, #4]
   bd67e:	bd08      	pop	{r3, pc}
   bd680:	0003021c 	.word	0x0003021c

000bd684 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd684:	b508      	push	{r3, lr}
   bd686:	4b02      	ldr	r3, [pc, #8]	; (bd690 <free+0xc>)
   bd688:	681b      	ldr	r3, [r3, #0]
   bd68a:	685b      	ldr	r3, [r3, #4]
   bd68c:	9301      	str	r3, [sp, #4]
   bd68e:	bd08      	pop	{r3, pc}
   bd690:	0003021c 	.word	0x0003021c

000bd694 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd694:	b508      	push	{r3, lr}
   bd696:	4b02      	ldr	r3, [pc, #8]	; (bd6a0 <realloc+0xc>)
   bd698:	681b      	ldr	r3, [r3, #0]
   bd69a:	689b      	ldr	r3, [r3, #8]
   bd69c:	9301      	str	r3, [sp, #4]
   bd69e:	bd08      	pop	{r3, pc}
   bd6a0:	0003021c 	.word	0x0003021c

000bd6a4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bd6a4:	b508      	push	{r3, lr}
   bd6a6:	4b02      	ldr	r3, [pc, #8]	; (bd6b0 <sprintf+0xc>)
   bd6a8:	681b      	ldr	r3, [r3, #0]
   bd6aa:	68db      	ldr	r3, [r3, #12]
   bd6ac:	9301      	str	r3, [sp, #4]
   bd6ae:	bd08      	pop	{r3, pc}
   bd6b0:	0003021c 	.word	0x0003021c

000bd6b4 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd6b4:	b508      	push	{r3, lr}
   bd6b6:	4b02      	ldr	r3, [pc, #8]	; (bd6c0 <snprintf+0xc>)
   bd6b8:	681b      	ldr	r3, [r3, #0]
   bd6ba:	69db      	ldr	r3, [r3, #28]
   bd6bc:	9301      	str	r3, [sp, #4]
   bd6be:	bd08      	pop	{r3, pc}
   bd6c0:	0003021c 	.word	0x0003021c

000bd6c4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd6c4:	b508      	push	{r3, lr}
   bd6c6:	4b02      	ldr	r3, [pc, #8]	; (bd6d0 <vsnprintf+0xc>)
   bd6c8:	681b      	ldr	r3, [r3, #0]
   bd6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd6cc:	9301      	str	r3, [sp, #4]
   bd6ce:	bd08      	pop	{r3, pc}
   bd6d0:	0003021c 	.word	0x0003021c

000bd6d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd6d4:	b508      	push	{r3, lr}
   bd6d6:	4b02      	ldr	r3, [pc, #8]	; (bd6e0 <abort+0xc>)
   bd6d8:	681b      	ldr	r3, [r3, #0]
   bd6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd6dc:	9301      	str	r3, [sp, #4]
   bd6de:	bd08      	pop	{r3, pc}
   bd6e0:	0003021c 	.word	0x0003021c

000bd6e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd6e4:	b508      	push	{r3, lr}
   bd6e6:	4b02      	ldr	r3, [pc, #8]	; (bd6f0 <_malloc_r+0xc>)
   bd6e8:	681b      	ldr	r3, [r3, #0]
   bd6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd6ec:	9301      	str	r3, [sp, #4]
   bd6ee:	bd08      	pop	{r3, pc}
   bd6f0:	0003021c 	.word	0x0003021c

000bd6f4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd6f4:	b508      	push	{r3, lr}
   bd6f6:	4b02      	ldr	r3, [pc, #8]	; (bd700 <__errno+0xc>)
   bd6f8:	681b      	ldr	r3, [r3, #0]
   bd6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd6fc:	9301      	str	r3, [sp, #4]
   bd6fe:	bd08      	pop	{r3, pc}
   bd700:	0003021c 	.word	0x0003021c

000bd704 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd704:	b508      	push	{r3, lr}
   bd706:	4b02      	ldr	r3, [pc, #8]	; (bd710 <__assert_func+0xc>)
   bd708:	681b      	ldr	r3, [r3, #0]
   bd70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd70c:	9301      	str	r3, [sp, #4]
   bd70e:	bd08      	pop	{r3, pc}
   bd710:	0003021c 	.word	0x0003021c

000bd714 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd714:	b508      	push	{r3, lr}
   bd716:	4b02      	ldr	r3, [pc, #8]	; (bd720 <newlib_impure_ptr_callback+0xc>)
   bd718:	681b      	ldr	r3, [r3, #0]
   bd71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd71c:	9301      	str	r3, [sp, #4]
   bd71e:	bd08      	pop	{r3, pc}
   bd720:	0003021c 	.word	0x0003021c

000bd724 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd724:	b508      	push	{r3, lr}
   bd726:	4b02      	ldr	r3, [pc, #8]	; (bd730 <localtime_r+0xc>)
   bd728:	681b      	ldr	r3, [r3, #0]
   bd72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd72c:	9301      	str	r3, [sp, #4]
   bd72e:	bd08      	pop	{r3, pc}
   bd730:	0003021c 	.word	0x0003021c

000bd734 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bd734:	428a      	cmp	r2, r1
{
   bd736:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bd738:	d007      	beq.n	bd74a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bd73a:	1a44      	subs	r4, r0, r1
   bd73c:	9802      	ldr	r0, [sp, #8]
   bd73e:	1ac0      	subs	r0, r0, r3
   bd740:	4344      	muls	r4, r0
   bd742:	1a50      	subs	r0, r2, r1
   bd744:	fb94 f0f0 	sdiv	r0, r4, r0
   bd748:	4418      	add	r0, r3
}
   bd74a:	bd10      	pop	{r4, pc}

000bd74c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd74c:	2100      	movs	r1, #0
   bd74e:	f7ff bec5 	b.w	bd4dc <system_delay_ms>

000bd752 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd752:	b510      	push	{r4, lr}
      if (_M_empty())
   bd754:	6883      	ldr	r3, [r0, #8]
   bd756:	4604      	mov	r4, r0
   bd758:	b90b      	cbnz	r3, bd75e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd75a:	f003 fe99 	bl	c1490 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd75e:	68c3      	ldr	r3, [r0, #12]
   bd760:	4798      	blx	r3
      if (_M_manager)
   bd762:	68a3      	ldr	r3, [r4, #8]
   bd764:	b11b      	cbz	r3, bd76e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd766:	2203      	movs	r2, #3
   bd768:	4621      	mov	r1, r4
   bd76a:	4620      	mov	r0, r4
   bd76c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd76e:	4620      	mov	r0, r4
   bd770:	2110      	movs	r1, #16
}
   bd772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd776:	f7f6 bc94 	b.w	b40a2 <_ZdlPvj>

000bd77a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd77a:	4770      	bx	lr

000bd77c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd77c:	4770      	bx	lr

000bd77e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd77e:	4770      	bx	lr

000bd780 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd780:	4770      	bx	lr
	...

000bd784 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd784:	4b06      	ldr	r3, [pc, #24]	; (bd7a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd786:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd788:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd78a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd78e:	d005      	beq.n	bd79c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd790:	4608      	mov	r0, r1
   bd792:	f003 fe81 	bl	c1498 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd796:	2800      	cmp	r0, #0
   bd798:	bf08      	it	eq
   bd79a:	2400      	moveq	r4, #0
      }
   bd79c:	4620      	mov	r0, r4
   bd79e:	bd10      	pop	{r4, pc}
   bd7a0:	000c5910 	.word	0x000c5910

000bd7a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd7a4:	4b06      	ldr	r3, [pc, #24]	; (bd7c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd7a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd7a8:	b510      	push	{r4, lr}
   bd7aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd7ae:	d005      	beq.n	bd7bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd7b0:	4608      	mov	r0, r1
   bd7b2:	f003 fe71 	bl	c1498 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd7b6:	2800      	cmp	r0, #0
   bd7b8:	bf08      	it	eq
   bd7ba:	2400      	moveq	r4, #0
      }
   bd7bc:	4620      	mov	r0, r4
   bd7be:	bd10      	pop	{r4, pc}
   bd7c0:	000c5910 	.word	0x000c5910

000bd7c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd7c4:	4b06      	ldr	r3, [pc, #24]	; (bd7e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd7c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd7c8:	b510      	push	{r4, lr}
   bd7ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd7ce:	d005      	beq.n	bd7dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd7d0:	4608      	mov	r0, r1
   bd7d2:	f003 fe61 	bl	c1498 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd7d6:	2800      	cmp	r0, #0
   bd7d8:	bf08      	it	eq
   bd7da:	2400      	moveq	r4, #0
      }
   bd7dc:	4620      	mov	r0, r4
   bd7de:	bd10      	pop	{r4, pc}
   bd7e0:	000c5910 	.word	0x000c5910

000bd7e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd7e4:	b510      	push	{r4, lr}
   bd7e6:	2168      	movs	r1, #104	; 0x68
   bd7e8:	4604      	mov	r4, r0
   bd7ea:	f7f6 fc5a 	bl	b40a2 <_ZdlPvj>
   bd7ee:	4620      	mov	r0, r4
   bd7f0:	bd10      	pop	{r4, pc}

000bd7f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd7f2:	b510      	push	{r4, lr}
   bd7f4:	2128      	movs	r1, #40	; 0x28
   bd7f6:	4604      	mov	r4, r0
   bd7f8:	f7f6 fc53 	bl	b40a2 <_ZdlPvj>
   bd7fc:	4620      	mov	r0, r4
   bd7fe:	bd10      	pop	{r4, pc}

000bd800 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd800:	b510      	push	{r4, lr}
   bd802:	2130      	movs	r1, #48	; 0x30
   bd804:	4604      	mov	r4, r0
   bd806:	f7f6 fc4c 	bl	b40a2 <_ZdlPvj>
   bd80a:	4620      	mov	r0, r4
   bd80c:	bd10      	pop	{r4, pc}

000bd80e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd80e:	2168      	movs	r1, #104	; 0x68
   bd810:	f7f6 bc47 	b.w	b40a2 <_ZdlPvj>

000bd814 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd814:	2128      	movs	r1, #40	; 0x28
   bd816:	f7f6 bc44 	b.w	b40a2 <_ZdlPvj>

000bd81a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd81a:	2130      	movs	r1, #48	; 0x30
   bd81c:	f7f6 bc41 	b.w	b40a2 <_ZdlPvj>

000bd820 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bd820:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd822:	2500      	movs	r5, #0
   bd824:	1cec      	adds	r4, r5, #3
   bd826:	428c      	cmp	r4, r1
   bd828:	d80d      	bhi.n	bd846 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bd82a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bd82c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bd82e:	5d87      	ldrb	r7, [r0, r6]
   bd830:	4297      	cmp	r7, r2
   bd832:	d105      	bne.n	bd840 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bd834:	4426      	add	r6, r4
   bd836:	42b1      	cmp	r1, r6
   bd838:	d305      	bcc.n	bd846 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bd83a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bd83c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bd83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bd840:	3401      	adds	r4, #1
   bd842:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd844:	e7ee      	b.n	bd824 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bd846:	2000      	movs	r0, #0
   bd848:	e7f9      	b.n	bd83e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bd84c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bd84c:	4a02      	ldr	r2, [pc, #8]	; (bd858 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bd84e:	4903      	ldr	r1, [pc, #12]	; (bd85c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bd850:	200a      	movs	r0, #10
   bd852:	f7ff be09 	b.w	bd468 <panic_>
   bd856:	bf00      	nop
   bd858:	000bd0a9 	.word	0x000bd0a9
   bd85c:	000c576d 	.word	0x000c576d

000bd860 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd860:	b430      	push	{r4, r5}
   bd862:	460d      	mov	r5, r1
   bd864:	4611      	mov	r1, r2
   bd866:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bd868:	6803      	ldr	r3, [r0, #0]
   bd86a:	6809      	ldr	r1, [r1, #0]
   bd86c:	6828      	ldr	r0, [r5, #0]
   bd86e:	e9d3 4300 	ldrd	r4, r3, [r3]
   bd872:	46a4      	mov	ip, r4
      }
   bd874:	bc30      	pop	{r4, r5}
   bd876:	4760      	bx	ip

000bd878 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bd878:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd87a:	b538      	push	{r3, r4, r5, lr}
   bd87c:	4604      	mov	r4, r0
	switch (__op)
   bd87e:	d102      	bne.n	bd886 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bd880:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bd882:	6023      	str	r3, [r4, #0]
	}
   bd884:	e003      	b.n	bd88e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bd886:	2a02      	cmp	r2, #2
   bd888:	d003      	beq.n	bd892 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bd88a:	2a03      	cmp	r2, #3
   bd88c:	d00d      	beq.n	bd8aa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bd88e:	2000      	movs	r0, #0
   bd890:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bd892:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bd894:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd896:	f7f6 fbfe 	bl	b4096 <_Znwj>
   bd89a:	4603      	mov	r3, r0
   bd89c:	2800      	cmp	r0, #0
   bd89e:	d0f0      	beq.n	bd882 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bd8a0:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd8a4:	e883 0003 	stmia.w	r3, {r0, r1}
   bd8a8:	e7eb      	b.n	bd882 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bd8aa:	6800      	ldr	r0, [r0, #0]
   bd8ac:	2800      	cmp	r0, #0
   bd8ae:	d0ee      	beq.n	bd88e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bd8b0:	2108      	movs	r1, #8
   bd8b2:	f7f6 fbf6 	bl	b40a2 <_ZdlPvj>
   bd8b6:	e7ea      	b.n	bd88e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bd8b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd8b8:	b510      	push	{r4, lr}
   bd8ba:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bd8bc:	3058      	adds	r0, #88	; 0x58
   bd8be:	f7f6 fd8d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bd8c2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bd8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd8ca:	f003 b9a5 	b.w	c0c18 <_ZN6StringD1Ev>

000bd8ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd8ce:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd8d0:	6843      	ldr	r3, [r0, #4]
   bd8d2:	3b01      	subs	r3, #1
    {
   bd8d4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd8d6:	6043      	str	r3, [r0, #4]
   bd8d8:	b963      	cbnz	r3, bd8f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd8da:	6803      	ldr	r3, [r0, #0]
   bd8dc:	689b      	ldr	r3, [r3, #8]
   bd8de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd8e0:	68a3      	ldr	r3, [r4, #8]
   bd8e2:	3b01      	subs	r3, #1
   bd8e4:	60a3      	str	r3, [r4, #8]
   bd8e6:	b92b      	cbnz	r3, bd8f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd8e8:	6823      	ldr	r3, [r4, #0]
   bd8ea:	4620      	mov	r0, r4
   bd8ec:	68db      	ldr	r3, [r3, #12]
    }
   bd8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd8f2:	4718      	bx	r3
    }
   bd8f4:	bd10      	pop	{r4, pc}

000bd8f6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bd8f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd8fa:	b2da      	uxtb	r2, r3
   bd8fc:	2a09      	cmp	r2, #9
   bd8fe:	d801      	bhi.n	bd904 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bd900:	4618      	mov	r0, r3
   bd902:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bd904:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd908:	2b05      	cmp	r3, #5
   bd90a:	d801      	bhi.n	bd910 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bd90c:	3857      	subs	r0, #87	; 0x57
   bd90e:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bd910:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd914:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bd916:	bf94      	ite	ls
   bd918:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bd91a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bd91e:	4770      	bx	lr

000bd920 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bd920:	b510      	push	{r4, lr}
            locked_(false) {
   bd922:	2300      	movs	r3, #0
   bd924:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd926:	4b04      	ldr	r3, [pc, #16]	; (bd938 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bd928:	4604      	mov	r4, r0
   bd92a:	6818      	ldr	r0, [r3, #0]
   bd92c:	f7ff fb9c 	bl	bd068 <os_mutex_recursive_lock>
        locked_ = true;
   bd930:	2301      	movs	r3, #1
   bd932:	7023      	strb	r3, [r4, #0]
    }
   bd934:	4620      	mov	r0, r4
   bd936:	bd10      	pop	{r4, pc}
   bd938:	2003e624 	.word	0x2003e624

000bd93c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bd93c:	b510      	push	{r4, lr}
        if (locked_) {
   bd93e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bd940:	4604      	mov	r4, r0
        if (locked_) {
   bd942:	b11b      	cbz	r3, bd94c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd944:	4b02      	ldr	r3, [pc, #8]	; (bd950 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bd946:	6818      	ldr	r0, [r3, #0]
   bd948:	f7ff fb96 	bl	bd078 <os_mutex_recursive_unlock>
    }
   bd94c:	4620      	mov	r0, r4
   bd94e:	bd10      	pop	{r4, pc}
   bd950:	2003e624 	.word	0x2003e624

000bd954 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bd954:	b082      	sub	sp, #8
   bd956:	4603      	mov	r3, r0
    address_ = addr;
   bd958:	6808      	ldr	r0, [r1, #0]
   bd95a:	6849      	ldr	r1, [r1, #4]
   bd95c:	466a      	mov	r2, sp
   bd95e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bd960:	466a      	mov	r2, sp
   bd962:	ca03      	ldmia	r2!, {r0, r1}
   bd964:	6018      	str	r0, [r3, #0]
}
   bd966:	4618      	mov	r0, r3
    address_ = addr.address_;
   bd968:	6059      	str	r1, [r3, #4]
}
   bd96a:	b002      	add	sp, #8
   bd96c:	4770      	bx	lr

000bd96e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bd96e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bd970:	7982      	ldrb	r2, [r0, #6]
   bd972:	798b      	ldrb	r3, [r1, #6]
   bd974:	429a      	cmp	r2, r3
   bd976:	d106      	bne.n	bd986 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bd978:	2206      	movs	r2, #6
   bd97a:	f004 fbc1 	bl	c2100 <memcmp>
   bd97e:	fab0 f080 	clz	r0, r0
   bd982:	0940      	lsrs	r0, r0, #5
}
   bd984:	bd08      	pop	{r3, pc}
    return false;
   bd986:	2000      	movs	r0, #0
   bd988:	e7fc      	b.n	bd984 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bd98a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bd98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bd98e:	6003      	str	r3, [r0, #0]
   bd990:	8083      	strh	r3, [r0, #4]
}
   bd992:	2000      	movs	r0, #0
   bd994:	4770      	bx	lr

000bd996 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bd996:	b508      	push	{r3, lr}
   bd998:	4602      	mov	r2, r0
        : address_{} {
   bd99a:	2100      	movs	r1, #0
   bd99c:	6001      	str	r1, [r0, #0]
   bd99e:	6041      	str	r1, [r0, #4]
    clear();
   bd9a0:	f7ff fff3 	bl	bd98a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bd9a4:	7191      	strb	r1, [r2, #6]
}
   bd9a6:	4610      	mov	r0, r2
   bd9a8:	bd08      	pop	{r3, pc}
	...

000bd9ac <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bd9ac:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bd9ae:	2301      	movs	r3, #1
   bd9b0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd9b2:	4b05      	ldr	r3, [pc, #20]	; (bd9c8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bd9b4:	4602      	mov	r2, r0
   bd9b6:	f103 0110 	add.w	r1, r3, #16
   bd9ba:	f853 4b04 	ldr.w	r4, [r3], #4
   bd9be:	f842 4b04 	str.w	r4, [r2], #4
   bd9c2:	428b      	cmp	r3, r1
   bd9c4:	d1f9      	bne.n	bd9ba <_ZN8particle7BleUuidC1Ev+0xe>
}
   bd9c6:	bd10      	pop	{r4, pc}
   bd9c8:	000c591e 	.word	0x000c591e

000bd9cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd9cc:	b510      	push	{r4, lr}
    if (uuid128) {
   bd9ce:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd9d0:	4604      	mov	r4, r0
    if (uuid128) {
   bd9d2:	b1b1      	cbz	r1, bda02 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bd9d4:	2a01      	cmp	r2, #1
   bd9d6:	f101 0210 	add.w	r2, r1, #16
   bd9da:	d10a      	bne.n	bd9f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bd9dc:	4601      	mov	r1, r0
   bd9de:	f853 0b04 	ldr.w	r0, [r3], #4
   bd9e2:	f841 0b04 	str.w	r0, [r1], #4
   bd9e6:	4293      	cmp	r3, r2
   bd9e8:	d1f9      	bne.n	bd9de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bd9ea:	2301      	movs	r3, #1
   bd9ec:	6123      	str	r3, [r4, #16]
}
   bd9ee:	4620      	mov	r0, r4
   bd9f0:	bd10      	pop	{r4, pc}
   bd9f2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bd9f4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bd9f8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bd9fc:	429a      	cmp	r2, r3
   bd9fe:	d1f9      	bne.n	bd9f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bda00:	e7f3      	b.n	bd9ea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bda02:	2210      	movs	r2, #16
   bda04:	f004 fbb4 	bl	c2170 <memset>
   bda08:	e7f1      	b.n	bd9ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bda0a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bda0a:	b538      	push	{r3, r4, r5, lr}
   bda0c:	4604      	mov	r4, r0
   bda0e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bda10:	461a      	mov	r2, r3
   bda12:	f7ff ffdb 	bl	bd9cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bda16:	81a5      	strh	r5, [r4, #12]
}
   bda18:	4620      	mov	r0, r4
   bda1a:	bd38      	pop	{r3, r4, r5, pc}

000bda1c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bda1c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bda1e:	6902      	ldr	r2, [r0, #16]
   bda20:	b922      	cbnz	r2, bda2c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bda22:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bda24:	3800      	subs	r0, #0
   bda26:	bf18      	it	ne
   bda28:	2001      	movne	r0, #1
}
   bda2a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bda2c:	4902      	ldr	r1, [pc, #8]	; (bda38 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bda2e:	2210      	movs	r2, #16
   bda30:	f004 fb66 	bl	c2100 <memcmp>
   bda34:	e7f6      	b.n	bda24 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bda36:	bf00      	nop
   bda38:	000c593e 	.word	0x000c593e

000bda3c <_ZNK8particle7BleUuid4typeEv>:
}
   bda3c:	6900      	ldr	r0, [r0, #16]
   bda3e:	4770      	bx	lr

000bda40 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bda40:	b538      	push	{r3, r4, r5, lr}
   bda42:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bda44:	2214      	movs	r2, #20
   bda46:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bda48:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bda4a:	f004 fb91 	bl	c2170 <memset>
    if (type_ == BleUuidType::SHORT) {
   bda4e:	6923      	ldr	r3, [r4, #16]
   bda50:	b91b      	cbnz	r3, bda5a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bda52:	89a3      	ldrh	r3, [r4, #12]
   bda54:	802b      	strh	r3, [r5, #0]
}
   bda56:	4628      	mov	r0, r5
   bda58:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bda5a:	2301      	movs	r3, #1
   bda5c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bda5e:	4621      	mov	r1, r4
   bda60:	462b      	mov	r3, r5
   bda62:	f104 0210 	add.w	r2, r4, #16
   bda66:	f851 0b04 	ldr.w	r0, [r1], #4
   bda6a:	f843 0b04 	str.w	r0, [r3], #4
   bda6e:	4291      	cmp	r1, r2
   bda70:	d1f9      	bne.n	bda66 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bda72:	e7f0      	b.n	bda56 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bda74 <_ZNK8particle7BleUuid7shortedEv>:
}
   bda74:	8980      	ldrh	r0, [r0, #12]
   bda76:	4770      	bx	lr

000bda78 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bda78:	4770      	bx	lr

000bda7a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bda7a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bda7c:	6902      	ldr	r2, [r0, #16]
   bda7e:	690b      	ldr	r3, [r1, #16]
   bda80:	429a      	cmp	r2, r3
   bda82:	d106      	bne.n	bda92 <_ZNK8particle7BleUuideqERKS0_+0x18>
   bda84:	2210      	movs	r2, #16
   bda86:	f004 fb3b 	bl	c2100 <memcmp>
   bda8a:	fab0 f080 	clz	r0, r0
   bda8e:	0940      	lsrs	r0, r0, #5
}
   bda90:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bda92:	2000      	movs	r0, #0
   bda94:	e7fc      	b.n	bda90 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bda98 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bda98:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bda9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bda9e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdaa0:	4b34      	ldr	r3, [pc, #208]	; (bdb74 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bdaa2:	460c      	mov	r4, r1
   bdaa4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdaa6:	4602      	mov	r2, r0
   bdaa8:	f103 0110 	add.w	r1, r3, #16
   bdaac:	f853 0b04 	ldr.w	r0, [r3], #4
   bdab0:	f842 0b04 	str.w	r0, [r2], #4
   bdab4:	428b      	cmp	r3, r1
   bdab6:	d1f9      	bne.n	bdaac <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bdab8:	b344      	cbz	r4, bdb0c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bdaba:	2124      	movs	r1, #36	; 0x24
   bdabc:	4620      	mov	r0, r4
   bdabe:	f004 fc24 	bl	c230a <strnlen>
   bdac2:	2804      	cmp	r0, #4
   bdac4:	f04f 0500 	mov.w	r5, #0
   bdac8:	d123      	bne.n	bdb12 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bdaca:	f8ad 5004 	strh.w	r5, [sp, #4]
   bdace:	af01      	add	r7, sp, #4
   bdad0:	1ca5      	adds	r5, r4, #2
   bdad2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bdad4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bdad8:	f7ff ff0d 	bl	bd8f6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bdadc:	f1b0 0800 	subs.w	r8, r0, #0
   bdae0:	db12      	blt.n	bdb08 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bdae2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bdae6:	f7ff ff06 	bl	bd8f6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bdaea:	2800      	cmp	r0, #0
   bdaec:	db0c      	blt.n	bdb08 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bdaee:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdaf0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bdaf4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdaf6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bdafa:	d1eb      	bne.n	bdad4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bdafc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bdb00:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bdb02:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdb06:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bdb08:	2300      	movs	r3, #0
   bdb0a:	6133      	str	r3, [r6, #16]
}
   bdb0c:	b002      	add	sp, #8
   bdb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bdb12:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdb16:	2124      	movs	r1, #36	; 0x24
   bdb18:	4620      	mov	r0, r4
   bdb1a:	f004 fbf6 	bl	c230a <strnlen>
   bdb1e:	42a8      	cmp	r0, r5
   bdb20:	d807      	bhi.n	bdb32 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bdb22:	4642      	mov	r2, r8
   bdb24:	2100      	movs	r1, #0
   bdb26:	4630      	mov	r0, r6
}
   bdb28:	b002      	add	sp, #8
   bdb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bdb2e:	f004 bb1f 	b.w	c2170 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdb32:	f1b8 0f00 	cmp.w	r8, #0
   bdb36:	d0e9      	beq.n	bdb0c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bdb38:	5d60      	ldrb	r0, [r4, r5]
   bdb3a:	f7ff fedc 	bl	bd8f6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bdb3e:	0603      	lsls	r3, r0, #24
   bdb40:	d415      	bmi.n	bdb6e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bdb42:	0100      	lsls	r0, r0, #4
   bdb44:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdb48:	b2c7      	uxtb	r7, r0
   bdb4a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bdb4e:	2124      	movs	r1, #36	; 0x24
   bdb50:	4620      	mov	r0, r4
   bdb52:	f004 fbda 	bl	c230a <strnlen>
   bdb56:	3501      	adds	r5, #1
   bdb58:	42a8      	cmp	r0, r5
   bdb5a:	d908      	bls.n	bdb6e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bdb5c:	5d60      	ldrb	r0, [r4, r5]
   bdb5e:	f7ff feca 	bl	bd8f6 <_ZN8particle11hexToNibbleEc>
   bdb62:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bdb64:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bdb66:	bfa4      	itt	ge
   bdb68:	4338      	orrge	r0, r7
   bdb6a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdb6e:	3501      	adds	r5, #1
   bdb70:	e7d1      	b.n	bdb16 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bdb72:	bf00      	nop
   bdb74:	000c591e 	.word	0x000c591e

000bdb78 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bdb78:	b513      	push	{r0, r1, r4, lr}
   bdb7a:	4604      	mov	r4, r0
   bdb7c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bdb7e:	f7ff ff15 	bl	bd9ac <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bdb82:	4620      	mov	r0, r4
   bdb84:	9901      	ldr	r1, [sp, #4]
   bdb86:	f7ff ff87 	bl	bda98 <_ZN8particle7BleUuid9constructEPKc>
}
   bdb8a:	4620      	mov	r0, r4
   bdb8c:	b002      	add	sp, #8
   bdb8e:	bd10      	pop	{r4, pc}

000bdb90 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bdb90:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bdb92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdb96:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bdb98:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bdb9a:	8043      	strh	r3, [r0, #2]
   bdb9c:	220e      	movs	r2, #14
   bdb9e:	4629      	mov	r1, r5
   bdba0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bdba2:	7105      	strb	r5, [r0, #4]
   bdba4:	3006      	adds	r0, #6
   bdba6:	f004 fae3 	bl	c2170 <memset>
   bdbaa:	f104 0014 	add.w	r0, r4, #20
   bdbae:	f7ff fefd 	bl	bd9ac <_ZN8particle7BleUuidC1Ev>
   bdbb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bdbb6:	f7ff fef9 	bl	bd9ac <_ZN8particle7BleUuidC1Ev>
   bdbba:	4904      	ldr	r1, [pc, #16]	; (bdbcc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bdbbc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bdbc0:	f003 f875 	bl	c0cae <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bdbc4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bdbc6:	4620      	mov	r0, r4
   bdbc8:	bd38      	pop	{r3, r4, r5, pc}
   bdbca:	bf00      	nop
   bdbcc:	000c5a83 	.word	0x000c5a83

000bdbd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bdbd0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bdbd2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bdbd6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bdbda:	4293      	cmp	r3, r2
   bdbdc:	4618      	mov	r0, r3
   bdbde:	d006      	beq.n	bdbee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bdbe0:	6804      	ldr	r4, [r0, #0]
   bdbe2:	8824      	ldrh	r4, [r4, #0]
   bdbe4:	428c      	cmp	r4, r1
   bdbe6:	f103 0308 	add.w	r3, r3, #8
   bdbea:	d1f6      	bne.n	bdbda <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bdbec:	bd10      	pop	{r4, pc}
        return nullptr;
   bdbee:	2000      	movs	r0, #0
   bdbf0:	e7fc      	b.n	bdbec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bdbf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bdbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdbf6:	4606      	mov	r6, r0
   bdbf8:	b085      	sub	sp, #20
   bdbfa:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bdbfc:	460d      	mov	r5, r1
   bdbfe:	2900      	cmp	r1, #0
   bdc00:	d050      	beq.n	bdca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bdc02:	2a00      	cmp	r2, #0
   bdc04:	d04e      	beq.n	bdca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bdc06:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bdc08:	7823      	ldrb	r3, [r4, #0]
   bdc0a:	2af4      	cmp	r2, #244	; 0xf4
   bdc0c:	bf28      	it	cs
   bdc0e:	22f4      	movcs	r2, #244	; 0xf4
   bdc10:	b343      	cbz	r3, bdc64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bdc12:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bdc14:	0798      	lsls	r0, r3, #30
   bdc16:	d509      	bpl.n	bdc2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bdc18:	89a0      	ldrh	r0, [r4, #12]
   bdc1a:	9203      	str	r2, [sp, #12]
   bdc1c:	2300      	movs	r3, #0
   bdc1e:	f7ff f99d 	bl	bcf5c <hal_ble_gatt_server_set_characteristic_value>
   bdc22:	2800      	cmp	r0, #0
   bdc24:	9a03      	ldr	r2, [sp, #12]
   bdc26:	da03      	bge.n	bdc30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bdc28:	b005      	add	sp, #20
   bdc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bdc2c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdc30:	6834      	ldr	r4, [r6, #0]
   bdc32:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bdc34:	06d9      	lsls	r1, r3, #27
   bdc36:	d509      	bpl.n	bdc4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bdc38:	2f01      	cmp	r7, #1
   bdc3a:	d007      	beq.n	bdc4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc3c:	89a0      	ldrh	r0, [r4, #12]
   bdc3e:	2300      	movs	r3, #0
   bdc40:	4629      	mov	r1, r5
}
   bdc42:	b005      	add	sp, #20
   bdc44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc48:	f7ff b9ba 	b.w	bcfc0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bdc4c:	069b      	lsls	r3, r3, #26
   bdc4e:	d5eb      	bpl.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdc50:	2f02      	cmp	r7, #2
   bdc52:	d0e9      	beq.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc54:	89a0      	ldrh	r0, [r4, #12]
   bdc56:	2300      	movs	r3, #0
   bdc58:	4629      	mov	r1, r5
}
   bdc5a:	b005      	add	sp, #20
   bdc5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc60:	f7ff b9b8 	b.w	bcfd4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bdc64:	8860      	ldrh	r0, [r4, #2]
   bdc66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bdc6a:	4288      	cmp	r0, r1
   bdc6c:	d01c      	beq.n	bdca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bdc6e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bdc70:	074e      	lsls	r6, r1, #29
   bdc72:	d501      	bpl.n	bdc78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bdc74:	2f01      	cmp	r7, #1
   bdc76:	d104      	bne.n	bdc82 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdc78:	070b      	lsls	r3, r1, #28
   bdc7a:	d409      	bmi.n	bdc90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bdc7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdc80:	e7d2      	b.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc82:	89a1      	ldrh	r1, [r4, #12]
   bdc84:	9300      	str	r3, [sp, #0]
   bdc86:	4613      	mov	r3, r2
   bdc88:	462a      	mov	r2, r5
   bdc8a:	f7ff f97b 	bl	bcf84 <hal_ble_gatt_client_write_without_response>
   bdc8e:	e7cb      	b.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdc90:	2f02      	cmp	r7, #2
   bdc92:	d0f3      	beq.n	bdc7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdc94:	2300      	movs	r3, #0
   bdc96:	89a1      	ldrh	r1, [r4, #12]
   bdc98:	9300      	str	r3, [sp, #0]
   bdc9a:	4613      	mov	r3, r2
   bdc9c:	462a      	mov	r2, r5
   bdc9e:	f7ff f967 	bl	bcf70 <hal_ble_gatt_client_write_with_response>
   bdca2:	e7c1      	b.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bdca4:	4802      	ldr	r0, [pc, #8]	; (bdcb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bdca6:	e7bf      	b.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bdca8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bdcac:	e7bc      	b.n	bdc28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdcae:	bf00      	nop
   bdcb0:	fffffef2 	.word	0xfffffef2

000bdcb4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bdcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdcb8:	2600      	movs	r6, #0
   bdcba:	6006      	str	r6, [r0, #0]
   bdcbc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bdcbe:	2028      	movs	r0, #40	; 0x28
   bdcc0:	460c      	mov	r4, r1
   bdcc2:	f7f6 f9e8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdcc6:	1e05      	subs	r5, r0, #0
   bdcc8:	f105 080c 	add.w	r8, r5, #12
   bdccc:	d00f      	beq.n	bdcee <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bdcce:	2301      	movs	r3, #1
   bdcd0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bdcd4:	4b08      	ldr	r3, [pc, #32]	; (bdcf8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bdcd6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bdcd8:	4640      	mov	r0, r8
   bdcda:	f7ff fe67 	bl	bd9ac <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bdcde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bdce0:	622e      	str	r6, [r5, #32]
   bdce2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bdce6:	4646      	mov	r6, r8
   bdce8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bdcea:	6823      	ldr	r3, [r4, #0]
   bdcec:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bdcee:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdcf2:	4638      	mov	r0, r7
   bdcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdcf8:	000c58e0 	.word	0x000c58e0

000bdcfc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bdcfc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdcfe:	2500      	movs	r5, #0
   bdd00:	6005      	str	r5, [r0, #0]
   bdd02:	4606      	mov	r6, r0
   bdd04:	2030      	movs	r0, #48	; 0x30
   bdd06:	f7f6 f9c6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdd0a:	4604      	mov	r4, r0
   bdd0c:	b188      	cbz	r0, bdd32 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bdd0e:	2301      	movs	r3, #1
   bdd10:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bdd14:	4b09      	ldr	r3, [pc, #36]	; (bdd3c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bdd16:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bdd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdd1c:	8183      	strh	r3, [r0, #12]
   bdd1e:	300e      	adds	r0, #14
   bdd20:	f7ff fe39 	bl	bd996 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bdd24:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bdd28:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bdd2c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bdd30:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bdd32:	6074      	str	r4, [r6, #4]
   bdd34:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bdd36:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdd38:	4630      	mov	r0, r6
   bdd3a:	bd70      	pop	{r4, r5, r6, pc}
   bdd3c:	000c58fc 	.word	0x000c58fc

000bdd40 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bdd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdd42:	460d      	mov	r5, r1
   bdd44:	4604      	mov	r4, r0
    WiringBleLock lk;
   bdd46:	a801      	add	r0, sp, #4
   bdd48:	f7ff fdea 	bl	bd920 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bdd4c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bdd4e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bdd52:	6023      	str	r3, [r4, #0]
   bdd54:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bdd58:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bdd5a:	a801      	add	r0, sp, #4
   bdd5c:	f7ff fdee 	bl	bd93c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bdd60:	4620      	mov	r0, r4
   bdd62:	b003      	add	sp, #12
   bdd64:	bd30      	pop	{r4, r5, pc}

000bdd66 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bdd66:	b530      	push	{r4, r5, lr}
   bdd68:	4605      	mov	r5, r0
   bdd6a:	b087      	sub	sp, #28
   bdd6c:	460c      	mov	r4, r1
    WiringBleLock lk;
   bdd6e:	a801      	add	r0, sp, #4
   bdd70:	f7ff fdd6 	bl	bd920 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bdd74:	682a      	ldr	r2, [r5, #0]
   bdd76:	6823      	ldr	r3, [r4, #0]
   bdd78:	8812      	ldrh	r2, [r2, #0]
   bdd7a:	881b      	ldrh	r3, [r3, #0]
   bdd7c:	429a      	cmp	r2, r3
   bdd7e:	d10d      	bne.n	bdd9c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bdd80:	4629      	mov	r1, r5
   bdd82:	a802      	add	r0, sp, #8
   bdd84:	f7ff ffdc 	bl	bdd40 <_ZNK8particle13BlePeerDevice7addressEv>
   bdd88:	4621      	mov	r1, r4
   bdd8a:	a804      	add	r0, sp, #16
   bdd8c:	f7ff ffd8 	bl	bdd40 <_ZNK8particle13BlePeerDevice7addressEv>
   bdd90:	a904      	add	r1, sp, #16
   bdd92:	a802      	add	r0, sp, #8
   bdd94:	f7ff fdeb 	bl	bd96e <_ZNK8particle10BleAddresseqERKS0_>
   bdd98:	4604      	mov	r4, r0
   bdd9a:	b900      	cbnz	r0, bdd9e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bdd9c:	2400      	movs	r4, #0
    WiringBleLock lk;
   bdd9e:	a801      	add	r0, sp, #4
   bdda0:	f7ff fdcc 	bl	bd93c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bdda4:	4620      	mov	r0, r4
   bdda6:	b007      	add	sp, #28
   bdda8:	bd30      	pop	{r4, r5, pc}
	...

000bddac <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bddac:	b510      	push	{r4, lr}
   bddae:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bddb0:	2064      	movs	r0, #100	; 0x64
   bddb2:	f7f6 f970 	bl	b4096 <_Znwj>
   bddb6:	b168      	cbz	r0, bddd4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bddb8:	2300      	movs	r3, #0
   bddba:	e9c0 3300 	strd	r3, r3, [r0]
   bddbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bddc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bddc6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bddca:	6203      	str	r3, [r0, #32]
   bddcc:	62c3      	str	r3, [r0, #44]	; 0x2c
   bddce:	63c3      	str	r3, [r0, #60]	; 0x3c
   bddd0:	64c3      	str	r3, [r0, #76]	; 0x4c
   bddd2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bddd4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bddd6:	b920      	cbnz	r0, bdde2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bddd8:	4a0a      	ldr	r2, [pc, #40]	; (bde04 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bddda:	490b      	ldr	r1, [pc, #44]	; (bde08 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bdddc:	200a      	movs	r0, #10
   bddde:	f7ff fb43 	bl	bd468 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bdde2:	2000      	movs	r0, #0
   bdde4:	f7ff f87e 	bl	bcee4 <hal_ble_stack_init>
   bdde8:	b120      	cbz	r0, bddf4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bddea:	4a06      	ldr	r2, [pc, #24]	; (bde04 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bddec:	4907      	ldr	r1, [pc, #28]	; (bde0c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bddee:	200a      	movs	r0, #10
   bddf0:	f7ff fb3a 	bl	bd468 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bddf4:	6821      	ldr	r1, [r4, #0]
   bddf6:	4806      	ldr	r0, [pc, #24]	; (bde10 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bddf8:	2200      	movs	r2, #0
   bddfa:	f7ff f8d7 	bl	bcfac <hal_ble_set_callback_on_periph_link_events>
}
   bddfe:	4620      	mov	r0, r4
   bde00:	bd10      	pop	{r4, pc}
   bde02:	bf00      	nop
   bde04:	000bd0a9 	.word	0x000bd0a9
   bde08:	000c576d 	.word	0x000c576d
   bde0c:	000c57ab 	.word	0x000c57ab
   bde10:	000be3d1 	.word	0x000be3d1

000bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bde14:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bde16:	4c0a      	ldr	r4, [pc, #40]	; (bde40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bde18:	7823      	ldrb	r3, [r4, #0]
   bde1a:	f3bf 8f5b 	dmb	ish
   bde1e:	07db      	lsls	r3, r3, #31
   bde20:	d40c      	bmi.n	bde3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bde22:	4620      	mov	r0, r4
   bde24:	f7f6 f94c 	bl	b40c0 <__cxa_guard_acquire>
   bde28:	b140      	cbz	r0, bde3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bde2a:	4806      	ldr	r0, [pc, #24]	; (bde44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bde2c:	f7ff ffbe 	bl	bddac <_ZN8particle14BleLocalDeviceC1Ev>
   bde30:	4620      	mov	r0, r4
   bde32:	f7f6 f94a 	bl	b40ca <__cxa_guard_release>
   bde36:	4804      	ldr	r0, [pc, #16]	; (bde48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bde38:	f004 f94c 	bl	c20d4 <atexit>
    return instance;
}
   bde3c:	4801      	ldr	r0, [pc, #4]	; (bde44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bde3e:	bd10      	pop	{r4, pc}
   bde40:	2003e61c 	.word	0x2003e61c
   bde44:	2003e628 	.word	0x2003e628
   bde48:	000be089 	.word	0x000be089

000bde4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bde4c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bde4e:	6803      	ldr	r3, [r0, #0]
   bde50:	3b09      	subs	r3, #9
   bde52:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bde54:	b08d      	sub	sp, #52	; 0x34
   bde56:	4604      	mov	r4, r0
   bde58:	460d      	mov	r5, r1
    switch (event->type) {
   bde5a:	d811      	bhi.n	bde80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bde5c:	f7ff ffda 	bl	bde14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bde60:	88a1      	ldrh	r1, [r4, #4]
   bde62:	6800      	ldr	r0, [r0, #0]
   bde64:	f7ff feb4 	bl	bdbd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bde68:	4603      	mov	r3, r0
   bde6a:	b958      	cbnz	r0, bde84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bde6c:	2220      	movs	r2, #32
   bde6e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bde72:	4a0b      	ldr	r2, [pc, #44]	; (bdea0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bde74:	9200      	str	r2, [sp, #0]
   bde76:	490b      	ldr	r1, [pc, #44]	; (bdea4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bde78:	aa04      	add	r2, sp, #16
   bde7a:	2032      	movs	r0, #50	; 0x32
   bde7c:	f7ff fafc 	bl	bd478 <log_message>
}
   bde80:	b00d      	add	sp, #52	; 0x34
   bde82:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bde84:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bde86:	2a00      	cmp	r2, #0
   bde88:	d0fa      	beq.n	bde80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bde8a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bde8e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bde92:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bde96:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bde98:	aa04      	add	r2, sp, #16
   bde9a:	a903      	add	r1, sp, #12
   bde9c:	47a0      	blx	r4
}
   bde9e:	e7ef      	b.n	bde80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bdea0:	000c57ed 	.word	0x000c57ed
   bdea4:	000c5784 	.word	0x000c5784

000bdea8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bdea8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bdeaa:	2000      	movs	r0, #0
   bdeac:	f7ff f81a 	bl	bcee4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bdeb0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdeb4:	bd08      	pop	{r3, pc}

000bdeb6 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bdeb6:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bdeb8:	2100      	movs	r1, #0
   bdeba:	f7ff b81b 	b.w	bcef4 <hal_ble_gap_set_tx_power>

000bdebe <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bdebe:	b919      	cbnz	r1, bdec8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bdec0:	460a      	mov	r2, r1
   bdec2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bdec4:	f7ff b81e 	b.w	bcf04 <hal_ble_gap_set_advertising_data>
   bdec8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdecc:	2200      	movs	r2, #0
   bdece:	e7f9      	b.n	bdec4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bded0 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bded0:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bded2:	69d8      	ldr	r0, [r3, #28]
}
   bded4:	2800      	cmp	r0, #0
   bded6:	bfd4      	ite	le
   bded8:	2000      	movle	r0, #0
   bdeda:	2001      	movgt	r0, #1
   bdedc:	4770      	bx	lr

000bdede <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdede:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdee0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdee4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdee6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bdeea:	42ae      	cmp	r6, r5
   bdeec:	d004      	beq.n	bdef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bdeee:	4628      	mov	r0, r5
   bdef0:	f002 fe92 	bl	c0c18 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bdef4:	3510      	adds	r5, #16
   bdef6:	e7f8      	b.n	bdeea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bdef8:	6820      	ldr	r0, [r4, #0]
   bdefa:	f7ff fbc3 	bl	bd684 <free>
}
   bdefe:	4620      	mov	r0, r4
   bdf00:	bd70      	pop	{r4, r5, r6, pc}

000bdf02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bdf02:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bdf04:	1e14      	subs	r4, r2, #0
   bdf06:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bdf08:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bdf0a:	db02      	blt.n	bdf12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bdf0c:	1862      	adds	r2, r4, r1
   bdf0e:	429a      	cmp	r2, r3
   bdf10:	dd00      	ble.n	bdf14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bdf12:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bdf14:	682a      	ldr	r2, [r5, #0]
   bdf16:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bdf18:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bdf1a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdf1c:	1a52      	subs	r2, r2, r1
   bdf1e:	f004 f90d 	bl	c213c <memmove>
    size_ -= n;
   bdf22:	686a      	ldr	r2, [r5, #4]
   bdf24:	1b12      	subs	r2, r2, r4
   bdf26:	606a      	str	r2, [r5, #4]
}
   bdf28:	bd38      	pop	{r3, r4, r5, pc}

000bdf2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bdf2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bdf2c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bdf2e:	4604      	mov	r4, r0
   bdf30:	460d      	mov	r5, r1
   bdf32:	ab01      	add	r3, sp, #4
   bdf34:	e9d0 0100 	ldrd	r0, r1, [r0]
   bdf38:	f7ff fc72 	bl	bd820 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bdf3c:	4602      	mov	r2, r0
   bdf3e:	b138      	cbz	r0, bdf50 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bdf40:	9901      	ldr	r1, [sp, #4]
   bdf42:	4620      	mov	r0, r4
   bdf44:	f7ff ffdd 	bl	bdf02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bdf48:	4629      	mov	r1, r5
   bdf4a:	4620      	mov	r0, r4
   bdf4c:	f7ff ffed 	bl	bdf2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bdf50:	b003      	add	sp, #12
   bdf52:	bd30      	pop	{r4, r5, pc}

000bdf54 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bdf54:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bdf56:	460c      	mov	r4, r1
   bdf58:	b929      	cbnz	r1, bdf66 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bdf5a:	460a      	mov	r2, r1
   bdf5c:	4608      	mov	r0, r1
}
   bdf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bdf62:	f7fe bfd7 	b.w	bcf14 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bdf66:	2101      	movs	r1, #1
   bdf68:	4620      	mov	r0, r4
   bdf6a:	f7ff ffde 	bl	bdf2a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bdf6e:	e9d4 0100 	ldrd	r0, r1, [r4]
   bdf72:	2200      	movs	r2, #0
   bdf74:	e7f3      	b.n	bdf5e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bdf76 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bdf76:	b538      	push	{r3, r4, r5, lr}
   bdf78:	4604      	mov	r4, r0
   bdf7a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bdf7c:	f7ff ff9f 	bl	bdebe <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bdf80:	2800      	cmp	r0, #0
   bdf82:	db0a      	blt.n	bdf9a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bdf84:	4629      	mov	r1, r5
   bdf86:	4620      	mov	r0, r4
   bdf88:	f7ff ffe4 	bl	bdf54 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bdf8c:	2800      	cmp	r0, #0
   bdf8e:	db04      	blt.n	bdf9a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bdf90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bdf94:	2000      	movs	r0, #0
   bdf96:	f7fe bfc5 	b.w	bcf24 <hal_ble_gap_start_advertising>
}
   bdf9a:	bd38      	pop	{r3, r4, r5, pc}

000bdf9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bdf9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bdf9e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bdfa0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bdfa2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdfa4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bdfa6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdfa8:	f7f6 f875 	bl	b4096 <_Znwj>
   bdfac:	b118      	cbz	r0, bdfb6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bdfae:	682b      	ldr	r3, [r5, #0]
   bdfb0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdfb2:	686b      	ldr	r3, [r5, #4]
   bdfb4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bdfb6:	4b03      	ldr	r3, [pc, #12]	; (bdfc4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bdfb8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdfba:	4b03      	ldr	r3, [pc, #12]	; (bdfc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdfbc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdfbe:	60a3      	str	r3, [r4, #8]
      }
   bdfc0:	4620      	mov	r0, r4
   bdfc2:	bd38      	pop	{r3, r4, r5, pc}
   bdfc4:	000bd861 	.word	0x000bd861
   bdfc8:	000bd879 	.word	0x000bd879

000bdfcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bdfcc:	680b      	ldr	r3, [r1, #0]
   bdfce:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bdfd0:	b113      	cbz	r3, bdfd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bdfd2:	685a      	ldr	r2, [r3, #4]
   bdfd4:	3201      	adds	r2, #1
   bdfd6:	605a      	str	r2, [r3, #4]
      }
   bdfd8:	4770      	bx	lr

000bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bdfda:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bdfdc:	f851 3b04 	ldr.w	r3, [r1], #4
   bdfe0:	4604      	mov	r4, r0
   bdfe2:	f840 3b04 	str.w	r3, [r0], #4
   bdfe6:	f7ff fff1 	bl	bdfcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bdfea:	6823      	ldr	r3, [r4, #0]
   bdfec:	b90b      	cbnz	r3, bdff2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bdfee:	f7ff fc2d 	bl	bd84c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bdff2:	4620      	mov	r0, r4
   bdff4:	bd10      	pop	{r4, pc}

000bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bdff6:	b510      	push	{r4, lr}
   bdff8:	f851 3b04 	ldr.w	r3, [r1], #4
   bdffc:	4604      	mov	r4, r0
   bdffe:	f840 3b04 	str.w	r3, [r0], #4
   be002:	f7ff ffe3 	bl	bdfcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be006:	4620      	mov	r0, r4
   be008:	bd10      	pop	{r4, pc}

000be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be00a:	b510      	push	{r4, lr}
   be00c:	f851 3b04 	ldr.w	r3, [r1], #4
   be010:	4604      	mov	r4, r0
   be012:	f840 3b04 	str.w	r3, [r0], #4
   be016:	f7ff ffd9 	bl	bdfcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be01a:	4620      	mov	r0, r4
   be01c:	bd10      	pop	{r4, pc}

000be01e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be01e:	b510      	push	{r4, lr}
   be020:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be022:	3004      	adds	r0, #4
   be024:	f7f7 f952 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be028:	4620      	mov	r0, r4
   be02a:	bd10      	pop	{r4, pc}

000be02c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be02c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be02e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be032:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be034:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be038:	42ae      	cmp	r6, r5
   be03a:	d004      	beq.n	be046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be03c:	1d28      	adds	r0, r5, #4
   be03e:	f7f7 f945 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be042:	3508      	adds	r5, #8
   be044:	e7f8      	b.n	be038 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be046:	6820      	ldr	r0, [r4, #0]
   be048:	f7ff fb1c 	bl	bd684 <free>
}
   be04c:	4620      	mov	r0, r4
   be04e:	bd70      	pop	{r4, r5, r6, pc}

000be050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be050:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be052:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be056:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be058:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be05c:	42ae      	cmp	r6, r5
   be05e:	d004      	beq.n	be06a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be060:	1d28      	adds	r0, r5, #4
   be062:	f7f7 f933 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be066:	3508      	adds	r5, #8
   be068:	e7f8      	b.n	be05c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be06a:	6820      	ldr	r0, [r4, #0]
   be06c:	f7ff fb0a 	bl	bd684 <free>
}
   be070:	4620      	mov	r0, r4
   be072:	bd70      	pop	{r4, r5, r6, pc}

000be074 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be074:	b510      	push	{r4, lr}
   be076:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be078:	3024      	adds	r0, #36	; 0x24
   be07a:	f7ff ffe9 	bl	be050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be07e:	f104 0018 	add.w	r0, r4, #24
   be082:	f7ff ffd3 	bl	be02c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be086:	bd10      	pop	{r4, pc}

000be088 <__tcf_0>:
    static BleLocalDevice instance;
   be088:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be08a:	4b17      	ldr	r3, [pc, #92]	; (be0e8 <__tcf_0+0x60>)
   be08c:	681c      	ldr	r4, [r3, #0]
   be08e:	b354      	cbz	r4, be0e6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be090:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be094:	f7f6 f9a2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be098:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be09c:	f7f6 f99e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be0a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be0a4:	f7f6 f99a 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be0a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be0ac:	f7f6 f996 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be0b0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be0b4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be0b8:	42ae      	cmp	r6, r5
   be0ba:	d004      	beq.n	be0c6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be0bc:	1d28      	adds	r0, r5, #4
   be0be:	f7f7 f905 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be0c2:	3508      	adds	r5, #8
   be0c4:	e7f8      	b.n	be0b8 <__tcf_0+0x30>
    ::free(ptr);
   be0c6:	69a0      	ldr	r0, [r4, #24]
   be0c8:	f7ff fadc 	bl	bd684 <free>
    ~BleLocalDeviceImpl() = default;
   be0cc:	f104 000c 	add.w	r0, r4, #12
   be0d0:	f7ff ffbe 	bl	be050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be0d4:	4620      	mov	r0, r4
   be0d6:	f7ff ffa9 	bl	be02c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be0da:	4620      	mov	r0, r4
   be0dc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be0de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be0e2:	f7f5 bfde 	b.w	b40a2 <_ZdlPvj>
   be0e6:	bd70      	pop	{r4, r5, r6, pc}
   be0e8:	2003e628 	.word	0x2003e628

000be0ec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be0ec:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be0ee:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be0f0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be0f4:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be0f8:	6803      	ldr	r3, [r0, #0]
   be0fa:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be0fc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be0fe:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be100:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be102:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be104:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be106:	f7f7 f8e1 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be10a:	b002      	add	sp, #8
   be10c:	bd10      	pop	{r4, pc}

000be10e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be10e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be110:	b510      	push	{r4, lr}
      if (_M_empty())
   be112:	b90a      	cbnz	r2, be118 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be114:	f003 f9bc 	bl	c1490 <_ZSt25__throw_bad_function_callv>
    }
   be118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be11c:	68c3      	ldr	r3, [r0, #12]
   be11e:	4718      	bx	r3

000be120 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be120:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be122:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be124:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be126:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be128:	dd03      	ble.n	be132 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be12a:	f7ff fab3 	bl	bd694 <realloc>
            if (!d) {
   be12e:	b918      	cbnz	r0, be138 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be130:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be132:	f7ff faa7 	bl	bd684 <free>
        T* d = nullptr;
   be136:	2000      	movs	r0, #0
        data_ = d;
   be138:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be13a:	60a5      	str	r5, [r4, #8]
        return true;
   be13c:	2001      	movs	r0, #1
   be13e:	e7f7      	b.n	be130 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be140 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be140:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be142:	6883      	ldr	r3, [r0, #8]
   be144:	428b      	cmp	r3, r1
   be146:	da02      	bge.n	be14e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be148:	f7ff ffea 	bl	be120 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be14c:	bd08      	pop	{r3, pc}
    return true;
   be14e:	2001      	movs	r0, #1
   be150:	e7fc      	b.n	be14c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be152 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be156:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be158:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be15a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be15c:	4419      	add	r1, r3
   be15e:	6883      	ldr	r3, [r0, #8]
   be160:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be162:	4604      	mov	r4, r0
   be164:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be166:	dc12      	bgt.n	be18e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be168:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be16a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be16c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be16e:	1bd2      	subs	r2, r2, r7
   be170:	4631      	mov	r1, r6
   be172:	1970      	adds	r0, r6, r5
   be174:	f003 ffe2 	bl	c213c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be178:	462a      	mov	r2, r5
   be17a:	4641      	mov	r1, r8
   be17c:	4630      	mov	r0, r6
   be17e:	f003 ffcf 	bl	c2120 <memcpy>
    size_ += n;
   be182:	6863      	ldr	r3, [r4, #4]
   be184:	442b      	add	r3, r5
   be186:	6063      	str	r3, [r4, #4]
    return true;
   be188:	2001      	movs	r0, #1
}
   be18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be18e:	f7ff ffc7 	bl	be120 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be192:	2800      	cmp	r0, #0
   be194:	d1e8      	bne.n	be168 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be196:	e7f8      	b.n	be18a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be198 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be19a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be19c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be1a0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be1a2:	4604      	mov	r4, r0
   be1a4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be1a6:	da0b      	bge.n	be1c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be1a8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be1aa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be1ac:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be1ae:	1b52      	subs	r2, r2, r5
   be1b0:	1c48      	adds	r0, r1, #1
   be1b2:	f003 ffc3 	bl	c213c <memmove>
    new(p) T(std::move(value));
   be1b6:	557e      	strb	r6, [r7, r5]
    ++size_;
   be1b8:	6863      	ldr	r3, [r4, #4]
   be1ba:	3301      	adds	r3, #1
   be1bc:	6063      	str	r3, [r4, #4]
}
   be1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be1c0:	3101      	adds	r1, #1
   be1c2:	f7ff ffad 	bl	be120 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be1c6:	2800      	cmp	r0, #0
   be1c8:	d1ee      	bne.n	be1a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be1ca:	e7f8      	b.n	be1be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be1cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be1cc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be1ce:	6841      	ldr	r1, [r0, #4]
   be1d0:	f7ff bfe2 	b.w	be198 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be1d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be1d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be1d8:	4604      	mov	r4, r0
   be1da:	461d      	mov	r5, r3
   be1dc:	460f      	mov	r7, r1
   be1de:	ab01      	add	r3, sp, #4
   be1e0:	4690      	mov	r8, r2
   be1e2:	460a      	mov	r2, r1
   be1e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   be1e8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be1ec:	f7ff fb18 	bl	bd820 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be1f0:	1cae      	adds	r6, r5, #2
   be1f2:	6863      	ldr	r3, [r4, #4]
   be1f4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be1f6:	f1b9 0f00 	cmp.w	r9, #0
   be1fa:	d126      	bne.n	be24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be1fc:	b328      	cbz	r0, be24a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be1fe:	4433      	add	r3, r6
   be200:	1a1b      	subs	r3, r3, r0
   be202:	2bff      	cmp	r3, #255	; 0xff
   be204:	d809      	bhi.n	be21a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be206:	9901      	ldr	r1, [sp, #4]
   be208:	4620      	mov	r0, r4
   be20a:	f7ff fe7a 	bl	bdf02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be20e:	6861      	ldr	r1, [r4, #4]
   be210:	4620      	mov	r0, r4
   be212:	4431      	add	r1, r6
   be214:	f7ff ff94 	bl	be140 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be218:	b918      	cbnz	r0, be222 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be21a:	6860      	ldr	r0, [r4, #4]
}
   be21c:	b003      	add	sp, #12
   be21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be222:	1c6a      	adds	r2, r5, #1
   be224:	9901      	ldr	r1, [sp, #4]
   be226:	b2d2      	uxtb	r2, r2
   be228:	4620      	mov	r0, r4
   be22a:	f7ff ffb5 	bl	be198 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be22e:	9901      	ldr	r1, [sp, #4]
   be230:	463a      	mov	r2, r7
   be232:	3101      	adds	r1, #1
   be234:	4620      	mov	r0, r4
   be236:	f7ff ffaf 	bl	be198 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be23a:	9901      	ldr	r1, [sp, #4]
   be23c:	462b      	mov	r3, r5
   be23e:	4642      	mov	r2, r8
   be240:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be242:	4620      	mov	r0, r4
   be244:	f7ff ff85 	bl	be152 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be248:	e7e7      	b.n	be21a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be24a:	18f1      	adds	r1, r6, r3
   be24c:	29ff      	cmp	r1, #255	; 0xff
   be24e:	d8e4      	bhi.n	be21a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be250:	4620      	mov	r0, r4
   be252:	f7ff ff75 	bl	be140 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be256:	2800      	cmp	r0, #0
   be258:	d0df      	beq.n	be21a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be25a:	1c69      	adds	r1, r5, #1
   be25c:	b2c9      	uxtb	r1, r1
   be25e:	4620      	mov	r0, r4
   be260:	f7ff ffb4 	bl	be1cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be264:	4639      	mov	r1, r7
   be266:	4620      	mov	r0, r4
   be268:	f7ff ffb0 	bl	be1cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be26c:	6861      	ldr	r1, [r4, #4]
   be26e:	462b      	mov	r3, r5
   be270:	4642      	mov	r2, r8
   be272:	e7e6      	b.n	be242 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be274:	b430      	push	{r4, r5}
   be276:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be27a:	b11a      	cbz	r2, be284 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be27c:	9502      	str	r5, [sp, #8]
}
   be27e:	bc30      	pop	{r4, r5}
   be280:	f7ff bfa8 	b.w	be1d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be284:	6840      	ldr	r0, [r0, #4]
}
   be286:	bc30      	pop	{r4, r5}
   be288:	4770      	bx	lr

000be28a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be28a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be28c:	2300      	movs	r3, #0
   be28e:	e9c0 3300 	strd	r3, r3, [r0]
   be292:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be294:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be296:	9300      	str	r3, [sp, #0]
   be298:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be29a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be29e:	4619      	mov	r1, r3
   be2a0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be2a4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be2a6:	f7ff ffe5 	bl	be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be2aa:	4620      	mov	r0, r4
   be2ac:	b004      	add	sp, #16
   be2ae:	bd10      	pop	{r4, pc}

000be2b0 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be2b0:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be2b2:	9300      	str	r3, [sp, #0]
   be2b4:	4613      	mov	r3, r2
   be2b6:	460a      	mov	r2, r1
   be2b8:	21ff      	movs	r1, #255	; 0xff
   be2ba:	f7ff ffdb 	bl	be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be2be:	b003      	add	sp, #12
   be2c0:	f85d fb04 	ldr.w	pc, [sp], #4

000be2c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be2c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be2c8:	4604      	mov	r4, r0
   be2ca:	460d      	mov	r5, r1
   be2cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be2ce:	d914      	bls.n	be2fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be2d0:	4290      	cmp	r0, r2
   be2d2:	d213      	bcs.n	be2fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be2d4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be2d8:	1a75      	subs	r5, r6, r1
   be2da:	f1a1 0708 	sub.w	r7, r1, #8
   be2de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be2e0:	42b7      	cmp	r7, r6
   be2e2:	d018      	beq.n	be316 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be2e4:	b11c      	cbz	r4, be2ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be2e6:	4631      	mov	r1, r6
   be2e8:	4620      	mov	r0, r4
   be2ea:	f7ff fe8e 	bl	be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be2ee:	1d30      	adds	r0, r6, #4
   be2f0:	f7f6 ffec 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be2f4:	3e08      	subs	r6, #8
   be2f6:	3c08      	subs	r4, #8
   be2f8:	e7f2      	b.n	be2e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be2fa:	d00c      	beq.n	be316 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be2fc:	42b5      	cmp	r5, r6
   be2fe:	d00a      	beq.n	be316 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be300:	b11c      	cbz	r4, be30a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be302:	4629      	mov	r1, r5
   be304:	4620      	mov	r0, r4
   be306:	f7ff fe80 	bl	be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be30a:	1d28      	adds	r0, r5, #4
   be30c:	f7f6 ffde 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be310:	3508      	adds	r5, #8
   be312:	3408      	adds	r4, #8
   be314:	e7f2      	b.n	be2fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be318 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be31a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be31c:	6846      	ldr	r6, [r0, #4]
   be31e:	4668      	mov	r0, sp
   be320:	f7ff fe73 	bl	be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be324:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be328:	429f      	cmp	r7, r3
   be32a:	db12      	blt.n	be352 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be32c:	3701      	adds	r7, #1
        if (n > 0) {
   be32e:	2f00      	cmp	r7, #0
   be330:	dd29      	ble.n	be386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be332:	00f8      	lsls	r0, r7, #3
   be334:	f7ff f99e 	bl	bd674 <malloc>
            if (!d) {
   be338:	4605      	mov	r5, r0
   be33a:	b1f0      	cbz	r0, be37a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be33c:	e9d4 1200 	ldrd	r1, r2, [r4]
   be340:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be344:	f7ff ffbe 	bl	be2c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be348:	6820      	ldr	r0, [r4, #0]
   be34a:	f7ff f99b 	bl	bd684 <free>
        data_ = d;
   be34e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be350:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be352:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be354:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be356:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be35a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be35e:	4631      	mov	r1, r6
   be360:	f106 0008 	add.w	r0, r6, #8
   be364:	f7ff ffae 	bl	be2c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be368:	b11e      	cbz	r6, be372 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be36a:	4669      	mov	r1, sp
   be36c:	4630      	mov	r0, r6
   be36e:	f7ff fe4c 	bl	be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be372:	6863      	ldr	r3, [r4, #4]
   be374:	3301      	adds	r3, #1
   be376:	6063      	str	r3, [r4, #4]
    return true;
   be378:	2501      	movs	r5, #1
   be37a:	a801      	add	r0, sp, #4
   be37c:	f7f6 ffa6 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be380:	4628      	mov	r0, r5
   be382:	b003      	add	sp, #12
   be384:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be386:	2500      	movs	r5, #0
   be388:	e7de      	b.n	be348 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be38a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be38c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be390:	4605      	mov	r5, r0
   be392:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be394:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be398:	42a6      	cmp	r6, r4
   be39a:	d005      	beq.n	be3a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be39c:	4639      	mov	r1, r7
   be39e:	4620      	mov	r0, r4
   be3a0:	f7ff fce1 	bl	bdd66 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be3a4:	b108      	cbz	r0, be3aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be3a6:	b914      	cbnz	r4, be3ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be3aa:	3408      	adds	r4, #8
   be3ac:	e7f4      	b.n	be398 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be3ae:	1d20      	adds	r0, r4, #4
   be3b0:	f7f6 ff8c 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be3b4:	e9d5 3200 	ldrd	r3, r2, [r5]
   be3b8:	f104 0108 	add.w	r1, r4, #8
   be3bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be3c0:	4620      	mov	r0, r4
   be3c2:	f7ff ff7f 	bl	be2c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be3c6:	686b      	ldr	r3, [r5, #4]
   be3c8:	3b01      	subs	r3, #1
   be3ca:	606b      	str	r3, [r5, #4]
    return true;
   be3cc:	e7ec      	b.n	be3a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be3d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be3d4:	4605      	mov	r5, r0
   be3d6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be3d8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be3da:	460c      	mov	r4, r1
        WiringBleLock lk;
   be3dc:	f7ff faa0 	bl	bd920 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be3e0:	682e      	ldr	r6, [r5, #0]
   be3e2:	1ef3      	subs	r3, r6, #3
   be3e4:	2b0d      	cmp	r3, #13
   be3e6:	d83c      	bhi.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be3e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   be3ec:	0053000e 	.word	0x0053000e
   be3f0:	00d1003b 	.word	0x00d1003b
   be3f4:	003b003b 	.word	0x003b003b
   be3f8:	003b003b 	.word	0x003b003b
   be3fc:	009b003b 	.word	0x009b003b
   be400:	009b009b 	.word	0x009b009b
   be404:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be408:	a804      	add	r0, sp, #16
   be40a:	f7ff fc77 	bl	bdcfc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be40e:	9b04      	ldr	r3, [sp, #16]
   be410:	89aa      	ldrh	r2, [r5, #12]
   be412:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be414:	6869      	ldr	r1, [r5, #4]
   be416:	9804      	ldr	r0, [sp, #16]
   be418:	3108      	adds	r1, #8
   be41a:	3002      	adds	r0, #2
   be41c:	f7ff fa9a 	bl	bd954 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be420:	a904      	add	r1, sp, #16
   be422:	a806      	add	r0, sp, #24
   be424:	f7ff fdf1 	bl	be00a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be428:	a906      	add	r1, sp, #24
   be42a:	f104 0018 	add.w	r0, r4, #24
   be42e:	f7ff ff73 	bl	be318 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be432:	4605      	mov	r5, r0
   be434:	a807      	add	r0, sp, #28
   be436:	f7f6 ff49 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be43a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be43c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be43e:	b9b5      	cbnz	r5, be46e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be440:	4b5d      	ldr	r3, [pc, #372]	; (be5b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be442:	495e      	ldr	r1, [pc, #376]	; (be5bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be444:	9300      	str	r3, [sp, #0]
   be446:	2032      	movs	r0, #50	; 0x32
   be448:	462b      	mov	r3, r5
   be44a:	aa06      	add	r2, sp, #24
   be44c:	9507      	str	r5, [sp, #28]
   be44e:	f7ff f813 	bl	bd478 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be452:	9b04      	ldr	r3, [sp, #16]
   be454:	4629      	mov	r1, r5
   be456:	8818      	ldrh	r0, [r3, #0]
   be458:	f7fe fd6c 	bl	bcf34 <hal_ble_gap_disconnect>
   be45c:	a805      	add	r0, sp, #20
   be45e:	f7f6 ff35 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be462:	a803      	add	r0, sp, #12
   be464:	f7ff fa6a 	bl	bd93c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be468:	b00e      	add	sp, #56	; 0x38
   be46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be46e:	4a54      	ldr	r2, [pc, #336]	; (be5c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be470:	9200      	str	r2, [sp, #0]
   be472:	2300      	movs	r3, #0
   be474:	4951      	ldr	r1, [pc, #324]	; (be5bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be476:	9307      	str	r3, [sp, #28]
   be478:	aa06      	add	r2, sp, #24
   be47a:	2001      	movs	r0, #1
   be47c:	f7fe fffc 	bl	bd478 <log_message>
                if (impl->connectedCallback_) {
   be480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be482:	2b00      	cmp	r3, #0
   be484:	d0ea      	beq.n	be45c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be486:	a904      	add	r1, sp, #16
   be488:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be48c:	f7ff fe3f 	bl	be10e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be490:	e7e4      	b.n	be45c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be492:	89a9      	ldrh	r1, [r5, #12]
   be494:	4620      	mov	r0, r4
   be496:	f7ff fb9b 	bl	bdbd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be49a:	4606      	mov	r6, r0
   be49c:	2800      	cmp	r0, #0
   be49e:	d0e0      	beq.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be4a0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be4a2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be4a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be4aa:	8029      	strh	r1, [r5, #0]
   be4ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be4b0:	429a      	cmp	r2, r3
   be4b2:	d003      	beq.n	be4bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   be4b4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   be4b8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   be4ba:	e7f9      	b.n	be4b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   be4bc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   be4c0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be4c4:	45b8      	cmp	r8, r7
   be4c6:	d004      	beq.n	be4d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   be4c8:	1d38      	adds	r0, r7, #4
   be4ca:	f7f6 feff 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be4ce:	3708      	adds	r7, #8
   be4d0:	e7f8      	b.n	be4c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   be4d2:	2300      	movs	r3, #0
   be4d4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   be4d6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   be4da:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be4de:	45b8      	cmp	r8, r7
   be4e0:	d004      	beq.n	be4ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   be4e2:	1d38      	adds	r0, r7, #4
   be4e4:	f7f6 fef2 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be4e8:	3708      	adds	r7, #8
   be4ea:	e7f8      	b.n	be4de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   be4ec:	2300      	movs	r3, #0
   be4ee:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   be4f0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   be4f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be4f4:	b123      	cbz	r3, be500 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   be4f6:	4631      	mov	r1, r6
   be4f8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be4fc:	f7ff fe07 	bl	be10e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   be500:	2300      	movs	r3, #0
   be502:	2220      	movs	r2, #32
   be504:	e9cd 2306 	strd	r2, r3, [sp, #24]
   be508:	4a2e      	ldr	r2, [pc, #184]	; (be5c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   be50a:	9200      	str	r2, [sp, #0]
   be50c:	492b      	ldr	r1, [pc, #172]	; (be5bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be50e:	aa06      	add	r2, sp, #24
   be510:	2001      	movs	r0, #1
   be512:	f7fe ffb1 	bl	bd478 <log_message>
                    impl->peers_.removeOne(*peer);
   be516:	4631      	mov	r1, r6
   be518:	f104 0018 	add.w	r0, r4, #24
   be51c:	f7ff ff35 	bl	be38a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   be520:	e79f      	b.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be522:	89a9      	ldrh	r1, [r5, #12]
   be524:	4620      	mov	r0, r4
   be526:	f7ff fb53 	bl	bdbd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be52a:	2800      	cmp	r0, #0
   be52c:	d099      	beq.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   be52e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   be530:	2b00      	cmp	r3, #0
   be532:	d096      	beq.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   be534:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be536:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   be538:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be53c:	d001      	beq.n	be542 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   be53e:	2e10      	cmp	r6, #16
   be540:	d117      	bne.n	be572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   be542:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   be544:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   be546:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   be548:	2506      	movs	r5, #6
                        };
   be54a:	f88d 3015 	strb.w	r3, [sp, #21]
   be54e:	9104      	str	r1, [sp, #16]
   be550:	f88d 2014 	strb.w	r2, [sp, #20]
   be554:	9006      	str	r0, [sp, #24]
   be556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   be55a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   be55c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   be560:	9508      	str	r5, [sp, #32]
   be562:	e883 0003 	stmia.w	r3, {r0, r1}
   be566:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be568:	a906      	add	r1, sp, #24
   be56a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be56e:	4798      	blx	r3
   be570:	e777      	b.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   be572:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   be574:	bf01      	itttt	eq
   be576:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   be578:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   be57a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   be57e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   be580:	bf0f      	iteee	eq
   be582:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   be586:	461a      	movne	r2, r3
   be588:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   be58a:	461d      	movne	r5, r3
   be58c:	e7dd      	b.n	be54a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be58e:	89a9      	ldrh	r1, [r5, #12]
   be590:	4620      	mov	r0, r4
   be592:	f7ff fb1d 	bl	bdbd0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   be596:	4601      	mov	r1, r0
   be598:	2800      	cmp	r0, #0
   be59a:	f43f af62 	beq.w	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be59e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   be5a0:	2b00      	cmp	r3, #0
   be5a2:	f43f af5e 	beq.w	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   be5a6:	686b      	ldr	r3, [r5, #4]
   be5a8:	9306      	str	r3, [sp, #24]
   be5aa:	aa06      	add	r2, sp, #24
   be5ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
   be5ae:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be5b2:	4798      	blx	r3
   be5b4:	e755      	b.n	be462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be5b6:	bf00      	nop
   be5b8:	000c5805 	.word	0x000c5805
   be5bc:	000c5784 	.word	0x000c5784
   be5c0:	000c582b 	.word	0x000c582b
   be5c4:	000c5848 	.word	0x000c5848

000be5c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   be5c8:	b513      	push	{r0, r1, r4, lr}
   be5ca:	460b      	mov	r3, r1
   be5cc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be5ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   be5d2:	466c      	mov	r4, sp
   be5d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   be5d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   be5dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   be5e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   be5e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   be5e8:	b002      	add	sp, #8
   be5ea:	bd10      	pop	{r4, pc}

000be5ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   be5ec:	b538      	push	{r3, r4, r5, lr}
   be5ee:	4605      	mov	r5, r0
   be5f0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   be5f2:	f7ff ffe9 	bl	be5c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be5f6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   be5f8:	68a2      	ldr	r2, [r4, #8]
   be5fa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be5fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be5fe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   be600:	68e2      	ldr	r2, [r4, #12]
   be602:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   be604:	60e3      	str	r3, [r4, #12]
      }
   be606:	bd38      	pop	{r3, r4, r5, pc}

000be608 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   be608:	b570      	push	{r4, r5, r6, lr}
   be60a:	4604      	mov	r4, r0
   be60c:	b08c      	sub	sp, #48	; 0x30
   be60e:	460e      	mov	r6, r1
   be610:	9201      	str	r2, [sp, #4]
   be612:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   be614:	f7ff fabc 	bl	bdb90 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   be618:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   be61a:	9901      	ldr	r1, [sp, #4]
   be61c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be620:	f002 fb9b 	bl	c0d5a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   be624:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   be628:	b1cd      	cbz	r5, be65e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   be62a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   be62c:	9502      	str	r5, [sp, #8]
   be62e:	a902      	add	r1, sp, #8
   be630:	a804      	add	r0, sp, #16
   be632:	9303      	str	r3, [sp, #12]
   be634:	f7ff fcb2 	bl	bdf9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   be638:	2300      	movs	r3, #0
	__x.swap(*this);
   be63a:	a908      	add	r1, sp, #32
   be63c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   be63e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   be640:	f7ff ffd4 	bl	be5ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   be644:	4631      	mov	r1, r6
   be646:	a808      	add	r0, sp, #32
   be648:	f7ff ffd0 	bl	be5ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   be64c:	a808      	add	r0, sp, #32
   be64e:	f7f5 fec5 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be652:	a804      	add	r0, sp, #16
   be654:	f7f5 fec2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   be658:	4620      	mov	r0, r4
   be65a:	b00c      	add	sp, #48	; 0x30
   be65c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be65e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be660:	e7ea      	b.n	be638 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be664 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be668:	b087      	sub	sp, #28
   be66a:	461d      	mov	r5, r3
   be66c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be670:	4680      	mov	r8, r0
   be672:	468b      	mov	fp, r1
   be674:	4692      	mov	sl, r2
   be676:	9912      	ldr	r1, [sp, #72]	; 0x48
   be678:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be67a:	2200      	movs	r2, #0
   be67c:	2068      	movs	r0, #104	; 0x68
   be67e:	9102      	str	r1, [sp, #8]
   be680:	9204      	str	r2, [sp, #16]
   be682:	f7f5 fd08 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be686:	1e06      	subs	r6, r0, #0
   be688:	f106 090c 	add.w	r9, r6, #12
   be68c:	d018      	beq.n	be6c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be68e:	2201      	movs	r2, #1
	: _M_impl(__a)
   be690:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be692:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be696:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be698:	4a15      	ldr	r2, [pc, #84]	; (be6f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be69a:	f847 2b20 	str.w	r2, [r7], #32
   be69e:	9b03      	ldr	r3, [sp, #12]
   be6a0:	9100      	str	r1, [sp, #0]
   be6a2:	465a      	mov	r2, fp
   be6a4:	4651      	mov	r1, sl
   be6a6:	4648      	mov	r0, r9
   be6a8:	f7ff ffae 	bl	be608 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be6ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be6b0:	682b      	ldr	r3, [r5, #0]
   be6b2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be6b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be6b6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be6ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be6bc:	6823      	ldr	r3, [r4, #0]
   be6be:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be6c0:	a904      	add	r1, sp, #16
   be6c2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be6c4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be6c8:	f7ff fd10 	bl	be0ec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be6cc:	a805      	add	r0, sp, #20
   be6ce:	f7f6 fdfd 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be6d2:	f8d8 3000 	ldr.w	r3, [r8]
   be6d6:	b93b      	cbnz	r3, be6e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be6d8:	4a06      	ldr	r2, [pc, #24]	; (be6f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be6da:	4907      	ldr	r1, [pc, #28]	; (be6f8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be6dc:	200a      	movs	r0, #10
}
   be6de:	b007      	add	sp, #28
   be6e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be6e4:	f7fe bec0 	b.w	bd468 <panic_>
}
   be6e8:	b007      	add	sp, #28
   be6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be6ee:	bf00      	nop
   be6f0:	000c58c4 	.word	0x000c58c4
   be6f4:	000bd0a9 	.word	0x000bd0a9
   be6f8:	000c576d 	.word	0x000c576d

000be6fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be6fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be700:	4604      	mov	r4, r0
   be702:	460d      	mov	r5, r1
   be704:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be706:	d914      	bls.n	be732 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be708:	4290      	cmp	r0, r2
   be70a:	d213      	bcs.n	be734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be70c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be710:	1a75      	subs	r5, r6, r1
   be712:	f1a1 0708 	sub.w	r7, r1, #8
   be716:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be718:	42b7      	cmp	r7, r6
   be71a:	d018      	beq.n	be74e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be71c:	b11c      	cbz	r4, be726 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be71e:	4631      	mov	r1, r6
   be720:	4620      	mov	r0, r4
   be722:	f7ff fc68 	bl	bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be726:	1d30      	adds	r0, r6, #4
   be728:	f7f6 fdd0 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be72c:	3e08      	subs	r6, #8
   be72e:	3c08      	subs	r4, #8
   be730:	e7f2      	b.n	be718 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be732:	d00c      	beq.n	be74e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be734:	42b5      	cmp	r5, r6
   be736:	d00a      	beq.n	be74e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be738:	b11c      	cbz	r4, be742 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be73a:	4629      	mov	r1, r5
   be73c:	4620      	mov	r0, r4
   be73e:	f7ff fc5a 	bl	bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be742:	1d28      	adds	r0, r5, #4
   be744:	f7f6 fdc2 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be748:	3508      	adds	r5, #8
   be74a:	3408      	adds	r4, #8
   be74c:	e7f2      	b.n	be734 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be750 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be750:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be752:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be754:	4605      	mov	r5, r0
        if (n > 0) {
   be756:	dd11      	ble.n	be77c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be758:	00f0      	lsls	r0, r6, #3
   be75a:	f7fe ff8b 	bl	bd674 <malloc>
            if (!d) {
   be75e:	4604      	mov	r4, r0
   be760:	b158      	cbz	r0, be77a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be762:	e9d5 1200 	ldrd	r1, r2, [r5]
   be766:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be76a:	f7ff ffc7 	bl	be6fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be76e:	6828      	ldr	r0, [r5, #0]
   be770:	f7fe ff88 	bl	bd684 <free>
        data_ = d;
   be774:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be776:	60ae      	str	r6, [r5, #8]
        return true;
   be778:	2001      	movs	r0, #1
    }
   be77a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be77c:	2400      	movs	r4, #0
   be77e:	e7f6      	b.n	be76e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be780:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be782:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be784:	6845      	ldr	r5, [r0, #4]
   be786:	4668      	mov	r0, sp
   be788:	f7ff fc35 	bl	bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be78c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be790:	4299      	cmp	r1, r3
   be792:	da10      	bge.n	be7b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be794:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be796:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be798:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be79c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be7a0:	4629      	mov	r1, r5
   be7a2:	f105 0008 	add.w	r0, r5, #8
   be7a6:	f7ff ffa9 	bl	be6fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be7aa:	b98d      	cbnz	r5, be7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be7ac:	6863      	ldr	r3, [r4, #4]
   be7ae:	3301      	adds	r3, #1
   be7b0:	6063      	str	r3, [r4, #4]
    return true;
   be7b2:	2601      	movs	r6, #1
   be7b4:	e006      	b.n	be7c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be7b6:	3101      	adds	r1, #1
   be7b8:	4620      	mov	r0, r4
   be7ba:	f7ff ffc9 	bl	be750 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be7be:	4606      	mov	r6, r0
   be7c0:	2800      	cmp	r0, #0
   be7c2:	d1e7      	bne.n	be794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be7c4:	a801      	add	r0, sp, #4
   be7c6:	f7f6 fd81 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be7ca:	4630      	mov	r0, r6
   be7cc:	b002      	add	sp, #8
   be7ce:	bd70      	pop	{r4, r5, r6, pc}
   be7d0:	4669      	mov	r1, sp
   be7d2:	4628      	mov	r0, r5
   be7d4:	f7ff fc0f 	bl	bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be7d8:	e7e8      	b.n	be7ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be7da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be7da:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be7de:	4604      	mov	r4, r0
   be7e0:	460d      	mov	r5, r1
   be7e2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be7e4:	d914      	bls.n	be810 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be7e6:	4290      	cmp	r0, r2
   be7e8:	d213      	bcs.n	be812 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be7ea:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be7ee:	1a75      	subs	r5, r6, r1
   be7f0:	f1a1 0708 	sub.w	r7, r1, #8
   be7f4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be7f6:	42b7      	cmp	r7, r6
   be7f8:	d018      	beq.n	be82c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be7fa:	b11c      	cbz	r4, be804 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be7fc:	4631      	mov	r1, r6
   be7fe:	4620      	mov	r0, r4
   be800:	f7ff fbeb 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
   be804:	1d30      	adds	r0, r6, #4
   be806:	f7f6 fd61 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be80a:	3e08      	subs	r6, #8
   be80c:	3c08      	subs	r4, #8
   be80e:	e7f2      	b.n	be7f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be810:	d00c      	beq.n	be82c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be812:	42b5      	cmp	r5, r6
   be814:	d00a      	beq.n	be82c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be816:	b11c      	cbz	r4, be820 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be818:	4629      	mov	r1, r5
   be81a:	4620      	mov	r0, r4
   be81c:	f7ff fbdd 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
   be820:	1d28      	adds	r0, r5, #4
   be822:	f7f6 fd53 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be826:	3508      	adds	r5, #8
   be828:	3408      	adds	r4, #8
   be82a:	e7f2      	b.n	be812 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be82e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be82e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be830:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be832:	4605      	mov	r5, r0
        if (n > 0) {
   be834:	dd11      	ble.n	be85a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be836:	00f0      	lsls	r0, r6, #3
   be838:	f7fe ff1c 	bl	bd674 <malloc>
            if (!d) {
   be83c:	4604      	mov	r4, r0
   be83e:	b158      	cbz	r0, be858 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be840:	e9d5 1200 	ldrd	r1, r2, [r5]
   be844:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be848:	f7ff ffc7 	bl	be7da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be84c:	6828      	ldr	r0, [r5, #0]
   be84e:	f7fe ff19 	bl	bd684 <free>
        data_ = d;
   be852:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be854:	60ae      	str	r6, [r5, #8]
        return true;
   be856:	2001      	movs	r0, #1
    }
   be858:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be85a:	2400      	movs	r4, #0
   be85c:	e7f6      	b.n	be84c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be85e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be860:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be862:	6845      	ldr	r5, [r0, #4]
   be864:	4668      	mov	r0, sp
   be866:	f7ff fbb8 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be86a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be86e:	4299      	cmp	r1, r3
   be870:	da10      	bge.n	be894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be872:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be874:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be876:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be87a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be87e:	4629      	mov	r1, r5
   be880:	f105 0008 	add.w	r0, r5, #8
   be884:	f7ff ffa9 	bl	be7da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be888:	b98d      	cbnz	r5, be8ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be88a:	6863      	ldr	r3, [r4, #4]
   be88c:	3301      	adds	r3, #1
   be88e:	6063      	str	r3, [r4, #4]
    return true;
   be890:	2601      	movs	r6, #1
   be892:	e006      	b.n	be8a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be894:	3101      	adds	r1, #1
   be896:	4620      	mov	r0, r4
   be898:	f7ff ffc9 	bl	be82e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be89c:	4606      	mov	r6, r0
   be89e:	2800      	cmp	r0, #0
   be8a0:	d1e7      	bne.n	be872 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   be8a2:	a801      	add	r0, sp, #4
   be8a4:	f7f6 fd12 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be8a8:	4630      	mov	r0, r6
   be8aa:	b002      	add	sp, #8
   be8ac:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   be8ae:	4669      	mov	r1, sp
   be8b0:	4628      	mov	r0, r5
   be8b2:	f7ff fb92 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
   be8b6:	e7e8      	b.n	be88a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be8b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be8bc:	4617      	mov	r7, r2
   be8be:	b0a1      	sub	sp, #132	; 0x84
   be8c0:	4680      	mov	r8, r0
    WiringBleLock lk;
   be8c2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be8c4:	460e      	mov	r6, r1
    WiringBleLock lk;
   be8c6:	f7ff f82b 	bl	bd920 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be8ca:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   be8cc:	7923      	ldrb	r3, [r4, #4]
   be8ce:	b953      	cbnz	r3, be8e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   be8d0:	4639      	mov	r1, r7
   be8d2:	4640      	mov	r0, r8
   be8d4:	f7ff fb81 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   be8d8:	a80a      	add	r0, sp, #40	; 0x28
   be8da:	f7ff f82f 	bl	bd93c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   be8de:	4640      	mov	r0, r8
   be8e0:	b021      	add	sp, #132	; 0x84
   be8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   be8e6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   be8e8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   be8ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   be8f0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   be8f2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   be8f6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   be8fa:	9b03      	ldr	r3, [sp, #12]
   be8fc:	429d      	cmp	r5, r3
   be8fe:	d021      	beq.n	be944 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   be900:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   be904:	4658      	mov	r0, fp
   be906:	f109 0114 	add.w	r1, r9, #20
   be90a:	f7ff f8b6 	bl	bda7a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   be90e:	b1b8      	cbz	r0, be940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   be910:	f109 0128 	add.w	r1, r9, #40	; 0x28
   be914:	4650      	mov	r0, sl
   be916:	f7ff f8b0 	bl	bda7a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   be91a:	b188      	cbz	r0, be940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   be91c:	6823      	ldr	r3, [r4, #0]
   be91e:	f8d9 2000 	ldr.w	r2, [r9]
   be922:	4053      	eors	r3, r2
   be924:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   be928:	d10a      	bne.n	be940 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   be92a:	2220      	movs	r2, #32
   be92c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   be930:	4a5e      	ldr	r2, [pc, #376]	; (beaac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   be932:	9200      	str	r2, [sp, #0]
   be934:	aa15      	add	r2, sp, #84	; 0x54
   be936:	495e      	ldr	r1, [pc, #376]	; (beab0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   be938:	2032      	movs	r0, #50	; 0x32
   be93a:	f7fe fd9d 	bl	bd478 <log_message>
   be93e:	e7c7      	b.n	be8d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   be940:	3508      	adds	r5, #8
   be942:	e7da      	b.n	be8fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   be944:	4650      	mov	r0, sl
   be946:	f7ff f869 	bl	bda1c <_ZNK8particle7BleUuid7isValidEv>
   be94a:	b960      	cbnz	r0, be966 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   be94c:	4959      	ldr	r1, [pc, #356]	; (beab4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   be94e:	2201      	movs	r2, #1
   be950:	a815      	add	r0, sp, #84	; 0x54
   be952:	ad15      	add	r5, sp, #84	; 0x54
   be954:	f7ff f83a 	bl	bd9cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   be958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be95a:	46d4      	mov	ip, sl
   be95c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be960:	682b      	ldr	r3, [r5, #0]
   be962:	f8cc 3000 	str.w	r3, [ip]
   be966:	6833      	ldr	r3, [r6, #0]
   be968:	e9d3 5300 	ldrd	r5, r3, [r3]
   be96c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   be970:	455d      	cmp	r5, fp
   be972:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   be974:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   be976:	d06e      	beq.n	bea56 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   be978:	f855 0b08 	ldr.w	r0, [r5], #8
   be97c:	f7ff f87d 	bl	bda7a <_ZNK8particle7BleUuideqERKS0_>
   be980:	2800      	cmp	r0, #0
   be982:	d0f5      	beq.n	be970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   be984:	f104 0a14 	add.w	sl, r4, #20
   be988:	4650      	mov	r0, sl
   be98a:	f7ff f847 	bl	bda1c <_ZNK8particle7BleUuid7isValidEv>
   be98e:	b988      	cbnz	r0, be9b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   be990:	4b49      	ldr	r3, [pc, #292]	; (beab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be992:	4948      	ldr	r1, [pc, #288]	; (beab4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   be994:	881a      	ldrh	r2, [r3, #0]
   be996:	3201      	adds	r2, #1
   be998:	b292      	uxth	r2, r2
   be99a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be99c:	a815      	add	r0, sp, #84	; 0x54
   be99e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   be9a0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be9a2:	f7ff f832 	bl	bda0a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   be9a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be9a8:	46d4      	mov	ip, sl
   be9aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be9ae:	682b      	ldr	r3, [r5, #0]
   be9b0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   be9b4:	4b41      	ldr	r3, [pc, #260]	; (beabc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   be9b6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   be9b8:	2228      	movs	r2, #40	; 0x28
   be9ba:	2100      	movs	r1, #0
   be9bc:	a816      	add	r0, sp, #88	; 0x58
   be9be:	f003 fbd7 	bl	c2170 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   be9c2:	4651      	mov	r1, sl
   be9c4:	a804      	add	r0, sp, #16
   be9c6:	f7ff f83b 	bl	bda40 <_ZN8particle7BleUuid7halUUIDEv>
   be9ca:	ab04      	add	r3, sp, #16
   be9cc:	aa18      	add	r2, sp, #96	; 0x60
   be9ce:	f10d 0c20 	add.w	ip, sp, #32
   be9d2:	6818      	ldr	r0, [r3, #0]
   be9d4:	6859      	ldr	r1, [r3, #4]
   be9d6:	4615      	mov	r5, r2
   be9d8:	c503      	stmia	r5!, {r0, r1}
   be9da:	3308      	adds	r3, #8
   be9dc:	4563      	cmp	r3, ip
   be9de:	462a      	mov	r2, r5
   be9e0:	d1f7      	bne.n	be9d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   be9e2:	6818      	ldr	r0, [r3, #0]
   be9e4:	6028      	str	r0, [r5, #0]
    return value_;
   be9e6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   be9e8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   be9ec:	f8d9 3000 	ldr.w	r3, [r9]
   be9f0:	8a9b      	ldrh	r3, [r3, #20]
   be9f2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   be9f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be9f8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   be9fa:	4b31      	ldr	r3, [pc, #196]	; (beac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   be9fc:	2200      	movs	r2, #0
   be9fe:	1da1      	adds	r1, r4, #6
   bea00:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bea02:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bea06:	f7fe fac7 	bl	bcf98 <hal_ble_gatt_server_add_characteristic>
   bea0a:	2800      	cmp	r0, #0
   bea0c:	f47f af60 	bne.w	be8d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bea10:	2301      	movs	r3, #1
   bea12:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bea14:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bea16:	4639      	mov	r1, r7
        return characteristics_;
   bea18:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bea1a:	a80d      	add	r0, sp, #52	; 0x34
   bea1c:	f7ff fadd 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
   bea20:	4620      	mov	r0, r4
   bea22:	a90d      	add	r1, sp, #52	; 0x34
   bea24:	f7ff ff1b 	bl	be85e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bea28:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bea2a:	a80e      	add	r0, sp, #56	; 0x38
   bea2c:	f7f6 fc4e 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bea30:	2c00      	cmp	r4, #0
   bea32:	f47f af4d 	bne.w	be8d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bea36:	2320      	movs	r3, #32
   bea38:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bea3c:	4b21      	ldr	r3, [pc, #132]	; (beac4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bea3e:	9300      	str	r3, [sp, #0]
   bea40:	aa0d      	add	r2, sp, #52	; 0x34
   bea42:	4623      	mov	r3, r4
   bea44:	e777      	b.n	be936 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bea46:	4639      	mov	r1, r7
   bea48:	4640      	mov	r0, r8
   bea4a:	f7ff fac6 	bl	bdfda <_ZN8particle17BleCharacteristicC1ERKS0_>
   bea4e:	a80c      	add	r0, sp, #48	; 0x30
   bea50:	f7f6 fc3c 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bea54:	e740      	b.n	be8d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bea56:	a80b      	add	r0, sp, #44	; 0x2c
   bea58:	f7ff f92c 	bl	bdcb4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bea5c:	4651      	mov	r1, sl
   bea5e:	a815      	add	r0, sp, #84	; 0x54
   bea60:	f7fe ffee 	bl	bda40 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bea64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bea66:	2300      	movs	r3, #0
   bea68:	3214      	adds	r2, #20
   bea6a:	a915      	add	r1, sp, #84	; 0x54
   bea6c:	2001      	movs	r0, #1
   bea6e:	f7fe fa6b 	bl	bcf48 <hal_ble_gatt_server_add_service>
   bea72:	2800      	cmp	r0, #0
   bea74:	d1e7      	bne.n	bea46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bea76:	6835      	ldr	r5, [r6, #0]
   bea78:	a90b      	add	r1, sp, #44	; 0x2c
   bea7a:	a80d      	add	r0, sp, #52	; 0x34
   bea7c:	f7ff fabb 	bl	bdff6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bea80:	4628      	mov	r0, r5
   bea82:	a90d      	add	r1, sp, #52	; 0x34
   bea84:	f7ff fe7c 	bl	be780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bea88:	4605      	mov	r5, r0
   bea8a:	a80e      	add	r0, sp, #56	; 0x38
   bea8c:	f7f6 fc1e 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bea90:	2d00      	cmp	r5, #0
   bea92:	d0d8      	beq.n	bea46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bea94:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bea96:	6853      	ldr	r3, [r2, #4]
   bea98:	6812      	ldr	r2, [r2, #0]
   bea9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bea9e:	3b01      	subs	r3, #1
   beaa0:	a80c      	add	r0, sp, #48	; 0x30
   beaa2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   beaa6:	f7f6 fc11 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beaaa:	e76b      	b.n	be984 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   beaac:	000c5867 	.word	0x000c5867
   beab0:	000c5784 	.word	0x000c5784
   beab4:	000c592e 	.word	0x000c592e
   beab8:	2003e620 	.word	0x2003e620
   beabc:	002c0003 	.word	0x002c0003
   beac0:	000bde4d 	.word	0x000bde4d
   beac4:	000c5892 	.word	0x000c5892

000beac8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   beac8:	4802      	ldr	r0, [pc, #8]	; (bead4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   beaca:	2300      	movs	r3, #0
   beacc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   beace:	f7fe babb 	b.w	bd048 <os_mutex_recursive_create>
   bead2:	bf00      	nop
   bead4:	2003e624 	.word	0x2003e624

000bead8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bead8:	2200      	movs	r2, #0
   beada:	6840      	ldr	r0, [r0, #4]
   beadc:	4611      	mov	r1, r2
   beade:	f7fe bd81 	b.w	bd5e4 <network_ready>

000beae2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   beae2:	2200      	movs	r2, #0
   beae4:	6840      	ldr	r0, [r0, #4]
   beae6:	4611      	mov	r1, r2
   beae8:	f7fe bd9c 	b.w	bd624 <network_listening>

000beaec <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   beaec:	2200      	movs	r2, #0
   beaee:	6840      	ldr	r0, [r0, #4]
   beaf0:	4611      	mov	r1, r2
   beaf2:	f7fe bda7 	b.w	bd644 <network_get_listen_timeout>

000beaf6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   beaf6:	6840      	ldr	r0, [r0, #4]
   beaf8:	2200      	movs	r2, #0
   beafa:	f7fe bd9b 	b.w	bd634 <network_set_listen_timeout>

000beafe <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   beafe:	6840      	ldr	r0, [r0, #4]
   beb00:	2200      	movs	r2, #0
   beb02:	f081 0101 	eor.w	r1, r1, #1
   beb06:	f7fe bd85 	b.w	bd614 <network_listen>

000beb0a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   beb0a:	2300      	movs	r3, #0
   beb0c:	6840      	ldr	r0, [r0, #4]
   beb0e:	461a      	mov	r2, r3
   beb10:	4619      	mov	r1, r3
   beb12:	f7fe bd77 	b.w	bd604 <network_off>

000beb16 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   beb16:	2300      	movs	r3, #0
   beb18:	6840      	ldr	r0, [r0, #4]
   beb1a:	461a      	mov	r2, r3
   beb1c:	4619      	mov	r1, r3
   beb1e:	f7fe bd69 	b.w	bd5f4 <network_on>

000beb22 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   beb22:	2200      	movs	r2, #0
   beb24:	6840      	ldr	r0, [r0, #4]
   beb26:	4611      	mov	r1, r2
   beb28:	f7fe bd4c 	b.w	bd5c4 <network_connecting>

000beb2c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   beb2c:	6840      	ldr	r0, [r0, #4]
   beb2e:	2200      	movs	r2, #0
   beb30:	2102      	movs	r1, #2
   beb32:	f7fe bd4f 	b.w	bd5d4 <network_disconnect>

000beb36 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   beb36:	2300      	movs	r3, #0
   beb38:	6840      	ldr	r0, [r0, #4]
   beb3a:	461a      	mov	r2, r3
   beb3c:	f7fe bd3a 	b.w	bd5b4 <network_connect>

000beb40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   beb40:	4b08      	ldr	r3, [pc, #32]	; (beb64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   beb42:	b510      	push	{r4, lr}
   beb44:	2428      	movs	r4, #40	; 0x28
   beb46:	4622      	mov	r2, r4
   beb48:	4618      	mov	r0, r3
   beb4a:	2100      	movs	r1, #0
   beb4c:	f003 fb10 	bl	c2170 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   beb50:	4b05      	ldr	r3, [pc, #20]	; (beb68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   beb52:	8004      	strh	r4, [r0, #0]
        cid = -1;
   beb54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   beb58:	6042      	str	r2, [r0, #4]
   beb5a:	2204      	movs	r2, #4
   beb5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   beb5e:	4a03      	ldr	r2, [pc, #12]	; (beb6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   beb60:	601a      	str	r2, [r3, #0]
   beb62:	bd10      	pop	{r4, pc}
   beb64:	2003e634 	.word	0x2003e634
   beb68:	2003e62c 	.word	0x2003e62c
   beb6c:	000c5958 	.word	0x000c5958

000beb70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   beb70:	4770      	bx	lr

000beb72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   beb72:	2000      	movs	r0, #0
   beb74:	4770      	bx	lr

000beb76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   beb76:	b510      	push	{r4, lr}
   beb78:	2110      	movs	r1, #16
   beb7a:	4604      	mov	r4, r0
   beb7c:	f7f5 fa91 	bl	b40a2 <_ZdlPvj>
   beb80:	4620      	mov	r0, r4
   beb82:	bd10      	pop	{r4, pc}

000beb84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   beb84:	b508      	push	{r3, lr}
      { delete this; }
   beb86:	f7ff fff6 	bl	beb76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   beb8a:	bd08      	pop	{r3, pc}

000beb8c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   beb8c:	b530      	push	{r4, r5, lr}
        type_(type) {
   beb8e:	2200      	movs	r2, #0
   beb90:	f64f 749c 	movw	r4, #65436	; 0xff9c
   beb94:	6002      	str	r2, [r0, #0]
   beb96:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   beb98:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   beb9a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   beb9c:	680c      	ldr	r4, [r1, #0]
   beb9e:	8085      	strh	r5, [r0, #4]
   beba0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   beba2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   beba4:	bd30      	pop	{r4, r5, pc}

000beba6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   beba6:	b510      	push	{r4, lr}
   beba8:	4604      	mov	r4, r0
    free((void*)msg_);
   bebaa:	6800      	ldr	r0, [r0, #0]
   bebac:	f7fe fd6a 	bl	bd684 <free>
}
   bebb0:	4620      	mov	r0, r4
   bebb2:	bd10      	pop	{r4, pc}

000bebb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bebb4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bebb6:	68c4      	ldr	r4, [r0, #12]
   bebb8:	b1f4      	cbz	r4, bebf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bebba:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bebbc:	2b02      	cmp	r3, #2
   bebbe:	d103      	bne.n	bebc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bebc0:	f104 000c 	add.w	r0, r4, #12
   bebc4:	f7ff ffef 	bl	beba6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bebc8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bebca:	b135      	cbz	r5, bebda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bebcc:	4628      	mov	r0, r5
   bebce:	f7f5 fc05 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bebd2:	2110      	movs	r1, #16
   bebd4:	4628      	mov	r0, r5
   bebd6:	f7f5 fa64 	bl	b40a2 <_ZdlPvj>
   bebda:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bebdc:	b135      	cbz	r5, bebec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bebde:	4628      	mov	r0, r5
   bebe0:	f7f5 fbfc 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bebe4:	2110      	movs	r1, #16
   bebe6:	4628      	mov	r0, r5
   bebe8:	f7f5 fa5b 	bl	b40a2 <_ZdlPvj>
   bebec:	4620      	mov	r0, r4
   bebee:	2114      	movs	r1, #20
   bebf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bebf4:	f7f5 ba55 	b.w	b40a2 <_ZdlPvj>
   bebf8:	bd38      	pop	{r3, r4, r5, pc}

000bebfa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bebfa:	680b      	ldr	r3, [r1, #0]
   bebfc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bebfe:	684b      	ldr	r3, [r1, #4]
   bec00:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bec02:	b113      	cbz	r3, bec0a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bec04:	685a      	ldr	r2, [r3, #4]
   bec06:	3201      	adds	r2, #1
   bec08:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bec0a:	4770      	bx	lr

000bec0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bec0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bec0e:	4604      	mov	r4, r0
   bec10:	4668      	mov	r0, sp
   bec12:	460d      	mov	r5, r1
   bec14:	f7ff fff1 	bl	bebfa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bec18:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bec1a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bec1c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bec1e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bec20:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bec22:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bec24:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bec26:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bec28:	f7f6 fb50 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bec2c:	b135      	cbz	r5, bec3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bec2e:	1d28      	adds	r0, r5, #4
   bec30:	f7f6 fb4c 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec34:	2108      	movs	r1, #8
   bec36:	4628      	mov	r0, r5
   bec38:	f7f5 fa33 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bec3c:	4620      	mov	r0, r4
   bec3e:	b003      	add	sp, #12
   bec40:	bd30      	pop	{r4, r5, pc}

000bec42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bec42:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bec44:	b510      	push	{r4, lr}
      if (_M_empty())
   bec46:	b90a      	cbnz	r2, bec4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bec48:	f002 fc22 	bl	c1490 <_ZSt25__throw_bad_function_callv>
    }
   bec4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bec50:	68c3      	ldr	r3, [r0, #12]
   bec52:	4718      	bx	r3

000bec54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bec54:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bec56:	6800      	ldr	r0, [r0, #0]
   bec58:	f100 0110 	add.w	r1, r0, #16
   bec5c:	f7ff fff1 	bl	bec42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bec60:	bd08      	pop	{r3, pc}

000bec62 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bec62:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bec64:	b510      	push	{r4, lr}
      if (_M_empty())
   bec66:	b90a      	cbnz	r2, bec6c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bec68:	f002 fc12 	bl	c1490 <_ZSt25__throw_bad_function_callv>
    }
   bec6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bec70:	68c3      	ldr	r3, [r0, #12]
   bec72:	4718      	bx	r3

000bec74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bec74:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bec76:	6800      	ldr	r0, [r0, #0]
   bec78:	f100 0110 	add.w	r1, r0, #16
   bec7c:	f7ff fff1 	bl	bec62 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bec80:	bd08      	pop	{r3, pc}
	...

000bec84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bec84:	b538      	push	{r3, r4, r5, lr}
   bec86:	2300      	movs	r3, #0
   bec88:	4604      	mov	r4, r0
   bec8a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bec8c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bec8e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bec90:	f7f5 fa01 	bl	b4096 <_Znwj>
   bec94:	b128      	cbz	r0, beca2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bec96:	2301      	movs	r3, #1
   bec98:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bec9c:	4b02      	ldr	r3, [pc, #8]	; (beca8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bec9e:	6003      	str	r3, [r0, #0]
   beca0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   beca2:	6020      	str	r0, [r4, #0]
	}
   beca4:	4620      	mov	r0, r4
   beca6:	bd38      	pop	{r3, r4, r5, pc}
   beca8:	000c5994 	.word	0x000c5994

000becac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   becac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   becae:	2300      	movs	r3, #0
   becb0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   becb2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   becb4:	4604      	mov	r4, r0
   becb6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   becb8:	b12b      	cbz	r3, becc6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   becba:	2202      	movs	r2, #2
   becbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   becbe:	68eb      	ldr	r3, [r5, #12]
   becc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   becc2:	68ab      	ldr	r3, [r5, #8]
   becc4:	60a3      	str	r3, [r4, #8]
    }
   becc6:	4620      	mov	r0, r4
   becc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000beccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   beccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   becce:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   becd0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   becd2:	4668      	mov	r0, sp
   becd4:	f7ff ff5a 	bl	beb8c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   becd8:	f04f 0302 	mov.w	r3, #2
   becdc:	e8d4 2f4f 	ldrexb	r2, [r4]
   bece0:	2a00      	cmp	r2, #0
   bece2:	d103      	bne.n	becec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bece4:	e8c4 3f41 	strexb	r1, r3, [r4]
   bece8:	2900      	cmp	r1, #0
   becea:	d1f7      	bne.n	becdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   becec:	d125      	bne.n	bed3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   becee:	f104 050c 	add.w	r5, r4, #12
   becf2:	4669      	mov	r1, sp
   becf4:	4628      	mov	r0, r5
   becf6:	f7ff ff49 	bl	beb8c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   becfa:	f3bf 8f5b 	dmb	ish
   becfe:	2301      	movs	r3, #1
   bed00:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bed02:	2000      	movs	r0, #0
   bed04:	f104 0308 	add.w	r3, r4, #8
   bed08:	f3bf 8f5b 	dmb	ish
   bed0c:	e853 6f00 	ldrex	r6, [r3]
   bed10:	e843 0200 	strex	r2, r0, [r3]
   bed14:	2a00      	cmp	r2, #0
   bed16:	d1f9      	bne.n	bed0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bed18:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bed1c:	b16e      	cbz	r6, bed3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bed1e:	f7fe fbe5 	bl	bd4ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bed22:	b178      	cbz	r0, bed44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bed24:	4629      	mov	r1, r5
   bed26:	4630      	mov	r0, r6
   bed28:	f7ff ff8b 	bl	bec42 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bed2c:	4630      	mov	r0, r6
   bed2e:	f7f5 fb55 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bed32:	2110      	movs	r1, #16
   bed34:	4630      	mov	r0, r6
   bed36:	f7f5 f9b4 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bed3a:	4668      	mov	r0, sp
   bed3c:	f7ff ff33 	bl	beba6 <_ZN8particle5ErrorD1Ev>
    }
   bed40:	b009      	add	sp, #36	; 0x24
   bed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bed44:	4631      	mov	r1, r6
   bed46:	a802      	add	r0, sp, #8
   bed48:	f7ff ffb0 	bl	becac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bed4c:	68e0      	ldr	r0, [r4, #12]
   bed4e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bed52:	b108      	cbz	r0, bed58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bed54:	f003 fa7a 	bl	c224c <strdup>
        type_(type) {
   bed58:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bed5a:	2010      	movs	r0, #16
   bed5c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bed60:	f7f5 f999 	bl	b4096 <_Znwj>
   bed64:	4605      	mov	r5, r0
   bed66:	b1e8      	cbz	r0, beda4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bed68:	2700      	movs	r7, #0
   bed6a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bed6c:	2018      	movs	r0, #24
   bed6e:	f7f5 f992 	bl	b4096 <_Znwj>
   bed72:	4604      	mov	r4, r0
   bed74:	b188      	cbz	r0, bed9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bed76:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bed78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bed7a:	a802      	add	r0, sp, #8
   bed7c:	f7ff fc24 	bl	be5c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bed80:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bed82:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bed84:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bed86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bed88:	9204      	str	r2, [sp, #16]
   bed8a:	a906      	add	r1, sp, #24
   bed8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bed8e:	60e3      	str	r3, [r4, #12]
   bed90:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bed94:	9205      	str	r2, [sp, #20]
   bed96:	f7ff fef9 	bl	beb8c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bed9a:	4b08      	ldr	r3, [pc, #32]	; (bedbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bed9c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bed9e:	4b08      	ldr	r3, [pc, #32]	; (bedc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   beda0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   beda2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   beda4:	a806      	add	r0, sp, #24
   beda6:	f7ff fefe 	bl	beba6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bedaa:	a802      	add	r0, sp, #8
   bedac:	f7f5 fb16 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bedb0:	2200      	movs	r2, #0
   bedb2:	4629      	mov	r1, r5
   bedb4:	4803      	ldr	r0, [pc, #12]	; (bedc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bedb6:	f7fe fba1 	bl	bd4fc <application_thread_invoke>
   bedba:	e7b7      	b.n	bed2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bedbc:	000bec55 	.word	0x000bec55
   bedc0:	000beed9 	.word	0x000beed9
   bedc4:	000bd753 	.word	0x000bd753

000bedc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bedc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bedcc:	b08b      	sub	sp, #44	; 0x2c
   bedce:	4605      	mov	r5, r0
   bedd0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bedd4:	460f      	mov	r7, r1
   bedd6:	4690      	mov	r8, r2
   bedd8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bedda:	f7fe fbc3 	bl	bd564 <spark_cloud_flag_connected>
   bedde:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bede0:	4683      	mov	fp, r0
   bede2:	bb38      	cbnz	r0, bee34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bede4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bede8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bedea:	a905      	add	r1, sp, #20
   bedec:	4630      	mov	r0, r6
   bedee:	f8ad 3018 	strh.w	r3, [sp, #24]
   bedf2:	f7ff fecb 	bl	beb8c <_ZN8particle5ErrorC1EOS0_>
   bedf6:	2014      	movs	r0, #20
   bedf8:	f7f5 f94d 	bl	b4096 <_Znwj>
   bedfc:	4604      	mov	r4, r0
   bedfe:	b148      	cbz	r0, bee14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bee00:	2302      	movs	r3, #2
   bee02:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bee04:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bee06:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bee0a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bee0c:	4631      	mov	r1, r6
   bee0e:	300c      	adds	r0, #12
   bee10:	f7ff febc 	bl	beb8c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bee14:	4628      	mov	r0, r5
	: __shared_count(__p)
   bee16:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bee18:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bee1c:	f7ff ff32 	bl	bec84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bee20:	4630      	mov	r0, r6
   bee22:	f7ff fec0 	bl	beba6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bee26:	a805      	add	r0, sp, #20
   bee28:	f7ff febd 	bl	beba6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bee2c:	4628      	mov	r0, r5
   bee2e:	b00b      	add	sp, #44	; 0x2c
   bee30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bee34:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bee36:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bee38:	2014      	movs	r0, #20
   bee3a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bee3e:	9307      	str	r3, [sp, #28]
   bee40:	f7f5 f929 	bl	b4096 <_Znwj>
   bee44:	4601      	mov	r1, r0
   bee46:	b118      	cbz	r0, bee50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bee48:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bee4c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bee4e:	7044      	strb	r4, [r0, #1]
   bee50:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bee52:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bee54:	f7ff ff16 	bl	bec84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bee58:	4b1e      	ldr	r3, [pc, #120]	; (beed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bee5a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bee5c:	2008      	movs	r0, #8
   bee5e:	f7f5 f91a 	bl	b4096 <_Znwj>
   bee62:	4604      	mov	r4, r0
   bee64:	b110      	cbz	r0, bee6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bee66:	a903      	add	r1, sp, #12
   bee68:	f7ff fec7 	bl	bebfa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bee6c:	9600      	str	r6, [sp, #0]
   bee6e:	fa5f f38a 	uxtb.w	r3, sl
   bee72:	464a      	mov	r2, r9
   bee74:	4641      	mov	r1, r8
   bee76:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bee78:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bee7a:	f7fe fb7b 	bl	bd574 <spark_send_event>
   bee7e:	b9b8      	cbnz	r0, beeb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bee80:	9b03      	ldr	r3, [sp, #12]
   bee82:	785b      	ldrb	r3, [r3, #1]
   bee84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bee88:	b993      	cbnz	r3, beeb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bee8a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bee8e:	a905      	add	r1, sp, #20
   bee90:	a803      	add	r0, sp, #12
   bee92:	9205      	str	r2, [sp, #20]
   bee94:	f8ad 3018 	strh.w	r3, [sp, #24]
   bee98:	f7ff ff18 	bl	beccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bee9c:	a805      	add	r0, sp, #20
   bee9e:	f7ff fe82 	bl	beba6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   beea2:	a805      	add	r0, sp, #20
   beea4:	9909      	ldr	r1, [sp, #36]	; 0x24
   beea6:	f7ff feb1 	bl	bec0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   beeaa:	a806      	add	r0, sp, #24
   beeac:	f7f6 fa0e 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beeb0:	a903      	add	r1, sp, #12
   beeb2:	a805      	add	r0, sp, #20
   beeb4:	f7ff fea1 	bl	bebfa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   beeb8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beeba:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   beebc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   beebe:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   beec0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   beec2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   beec4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   beec6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   beec8:	f7f6 fa00 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beecc:	a804      	add	r0, sp, #16
   beece:	f7f6 f9fd 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   beed2:	e7ab      	b.n	bee2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   beed4:	000bef55 	.word	0x000bef55

000beed8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   beed8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   beeda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beedc:	4605      	mov	r5, r0
	switch (__op)
   beede:	d103      	bne.n	beee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   beee0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   beee2:	6003      	str	r3, [r0, #0]
      }
   beee4:	2000      	movs	r0, #0
   beee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   beee8:	2a02      	cmp	r2, #2
   beeea:	d010      	beq.n	bef0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   beeec:	2a03      	cmp	r2, #3
   beeee:	d1f9      	bne.n	beee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   beef0:	6804      	ldr	r4, [r0, #0]
   beef2:	2c00      	cmp	r4, #0
   beef4:	d0f6      	beq.n	beee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   beef6:	f104 0010 	add.w	r0, r4, #16
   beefa:	f7ff fe54 	bl	beba6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   beefe:	4620      	mov	r0, r4
   bef00:	f7f5 fa6c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bef04:	2118      	movs	r1, #24
   bef06:	4620      	mov	r0, r4
   bef08:	f7f5 f8cb 	bl	b40a2 <_ZdlPvj>
   bef0c:	e7ea      	b.n	beee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bef0e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bef10:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bef12:	f7f5 f8c0 	bl	b4096 <_Znwj>
   bef16:	4604      	mov	r4, r0
   bef18:	b150      	cbz	r0, bef30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bef1a:	4631      	mov	r1, r6
   bef1c:	f7ff fec6 	bl	becac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bef20:	6930      	ldr	r0, [r6, #16]
   bef22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bef26:	b108      	cbz	r0, bef2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bef28:	f003 f990 	bl	c224c <strdup>
        type_(type) {
   bef2c:	6120      	str	r0, [r4, #16]
   bef2e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bef30:	602c      	str	r4, [r5, #0]
	}
   bef32:	e7d7      	b.n	beee4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bef34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bef34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bef36:	2300      	movs	r3, #0
   bef38:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bef3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bef3c:	4604      	mov	r4, r0
   bef3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bef40:	b12b      	cbz	r3, bef4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bef42:	2202      	movs	r2, #2
   bef44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bef46:	68eb      	ldr	r3, [r5, #12]
   bef48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bef4a:	68ab      	ldr	r3, [r5, #8]
   bef4c:	60a3      	str	r3, [r4, #8]
    }
   bef4e:	4620      	mov	r0, r4
   bef50:	bd38      	pop	{r3, r4, r5, pc}
	...

000bef54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bef54:	b5f0      	push	{r4, r5, r6, r7, lr}
   bef56:	b089      	sub	sp, #36	; 0x24
   bef58:	4604      	mov	r4, r0
   bef5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bef5c:	a801      	add	r0, sp, #4
   bef5e:	4611      	mov	r1, r2
   bef60:	f7ff fe54 	bl	bec0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bef64:	b1a4      	cbz	r4, bef90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bef66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bef68:	b11d      	cbz	r5, bef72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bef6a:	4628      	mov	r0, r5
   bef6c:	f003 f96e 	bl	c224c <strdup>
   bef70:	4605      	mov	r5, r0
   bef72:	a801      	add	r0, sp, #4
   bef74:	a903      	add	r1, sp, #12
        type_(type) {
   bef76:	9503      	str	r5, [sp, #12]
   bef78:	f8ad 4010 	strh.w	r4, [sp, #16]
   bef7c:	f7ff fea6 	bl	beccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bef80:	a803      	add	r0, sp, #12
   bef82:	f7ff fe10 	bl	beba6 <_ZN8particle5ErrorD1Ev>
   bef86:	a802      	add	r0, sp, #8
   bef88:	f7f6 f9a0 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bef8c:	b009      	add	sp, #36	; 0x24
   bef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bef90:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bef92:	2301      	movs	r3, #1
   bef94:	e8d5 2f4f 	ldrexb	r2, [r5]
   bef98:	2a00      	cmp	r2, #0
   bef9a:	d103      	bne.n	befa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bef9c:	e8c5 3f41 	strexb	r1, r3, [r5]
   befa0:	2900      	cmp	r1, #0
   befa2:	d1f7      	bne.n	bef94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   befa4:	d1ef      	bne.n	bef86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   befa6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   befa8:	f3bf 8f5b 	dmb	ish
   befac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   befae:	1d2b      	adds	r3, r5, #4
   befb0:	f3bf 8f5b 	dmb	ish
   befb4:	e853 6f00 	ldrex	r6, [r3]
   befb8:	e843 4200 	strex	r2, r4, [r3]
   befbc:	2a00      	cmp	r2, #0
   befbe:	d1f9      	bne.n	befb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   befc0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   befc4:	2e00      	cmp	r6, #0
   befc6:	d0de      	beq.n	bef86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   befc8:	4620      	mov	r0, r4
   befca:	f7fe fa8f 	bl	bd4ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   befce:	4607      	mov	r7, r0
   befd0:	b160      	cbz	r0, befec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   befd2:	f105 010c 	add.w	r1, r5, #12
   befd6:	4630      	mov	r0, r6
   befd8:	f7ff fe43 	bl	bec62 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   befdc:	4630      	mov	r0, r6
   befde:	f7f5 f9fd 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   befe2:	2110      	movs	r1, #16
   befe4:	4630      	mov	r0, r6
   befe6:	f7f5 f85c 	bl	b40a2 <_ZdlPvj>
   befea:	e7cc      	b.n	bef86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   befec:	4631      	mov	r1, r6
   befee:	a803      	add	r0, sp, #12
   beff0:	f7ff ffa0 	bl	bef34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   beff4:	7b2b      	ldrb	r3, [r5, #12]
   beff6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   beffa:	2010      	movs	r0, #16
   beffc:	f7f5 f84b 	bl	b4096 <_Znwj>
   bf000:	4605      	mov	r5, r0
   bf002:	b1d0      	cbz	r0, bf03a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf004:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf006:	2014      	movs	r0, #20
   bf008:	f7f5 f845 	bl	b4096 <_Znwj>
   bf00c:	4604      	mov	r4, r0
   bf00e:	b178      	cbz	r0, bf030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf010:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf012:	4601      	mov	r1, r0
   bf014:	a803      	add	r0, sp, #12
   bf016:	f7ff fad7 	bl	be5c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf01a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf01c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf01e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf020:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf022:	9205      	str	r2, [sp, #20]
   bf024:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf026:	60e3      	str	r3, [r4, #12]
   bf028:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf02c:	9206      	str	r2, [sp, #24]
   bf02e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf030:	4b06      	ldr	r3, [pc, #24]	; (bf04c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf032:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf034:	4b06      	ldr	r3, [pc, #24]	; (bf050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf036:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf038:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf03a:	a803      	add	r0, sp, #12
   bf03c:	f7f5 f9ce 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf040:	2200      	movs	r2, #0
   bf042:	4629      	mov	r1, r5
   bf044:	4803      	ldr	r0, [pc, #12]	; (bf054 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf046:	f7fe fa59 	bl	bd4fc <application_thread_invoke>
   bf04a:	e7c7      	b.n	befdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf04c:	000bec75 	.word	0x000bec75
   bf050:	000bf059 	.word	0x000bf059
   bf054:	000bd753 	.word	0x000bd753

000bf058 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf058:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf05a:	b570      	push	{r4, r5, r6, lr}
   bf05c:	4604      	mov	r4, r0
	switch (__op)
   bf05e:	d103      	bne.n	bf068 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf060:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf062:	6003      	str	r3, [r0, #0]
      }
   bf064:	2000      	movs	r0, #0
   bf066:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf068:	2a02      	cmp	r2, #2
   bf06a:	d00c      	beq.n	bf086 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf06c:	2a03      	cmp	r2, #3
   bf06e:	d1f9      	bne.n	bf064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf070:	6804      	ldr	r4, [r0, #0]
   bf072:	2c00      	cmp	r4, #0
   bf074:	d0f6      	beq.n	bf064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf076:	4620      	mov	r0, r4
   bf078:	f7f5 f9b0 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf07c:	2114      	movs	r1, #20
   bf07e:	4620      	mov	r0, r4
   bf080:	f7f5 f80f 	bl	b40a2 <_ZdlPvj>
   bf084:	e7ee      	b.n	bf064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf086:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf088:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf08a:	f7f5 f804 	bl	b4096 <_Znwj>
   bf08e:	4605      	mov	r5, r0
   bf090:	b120      	cbz	r0, bf09c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf092:	4631      	mov	r1, r6
   bf094:	f7ff ff4e 	bl	bef34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf098:	7c33      	ldrb	r3, [r6, #16]
   bf09a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf09c:	6025      	str	r5, [r4, #0]
	}
   bf09e:	e7e1      	b.n	bf064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf0a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf0a0:	2200      	movs	r2, #0
   bf0a2:	6840      	ldr	r0, [r0, #4]
   bf0a4:	4611      	mov	r1, r2
   bf0a6:	f7fe babd 	b.w	bd624 <network_listening>

000bf0aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf0aa:	2200      	movs	r2, #0
   bf0ac:	6840      	ldr	r0, [r0, #4]
   bf0ae:	4611      	mov	r1, r2
   bf0b0:	f7fe bac8 	b.w	bd644 <network_get_listen_timeout>

000bf0b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf0b4:	6840      	ldr	r0, [r0, #4]
   bf0b6:	2200      	movs	r2, #0
   bf0b8:	f7fe babc 	b.w	bd634 <network_set_listen_timeout>

000bf0bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf0bc:	6840      	ldr	r0, [r0, #4]
   bf0be:	2200      	movs	r2, #0
   bf0c0:	f081 0101 	eor.w	r1, r1, #1
   bf0c4:	f7fe baa6 	b.w	bd614 <network_listen>

000bf0c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf0c8:	2300      	movs	r3, #0
   bf0ca:	6840      	ldr	r0, [r0, #4]
   bf0cc:	461a      	mov	r2, r3
   bf0ce:	4619      	mov	r1, r3
   bf0d0:	f7fe ba98 	b.w	bd604 <network_off>

000bf0d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf0d4:	2300      	movs	r3, #0
   bf0d6:	6840      	ldr	r0, [r0, #4]
   bf0d8:	461a      	mov	r2, r3
   bf0da:	4619      	mov	r1, r3
   bf0dc:	f7fe ba8a 	b.w	bd5f4 <network_on>

000bf0e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf0e0:	2200      	movs	r2, #0
   bf0e2:	6840      	ldr	r0, [r0, #4]
   bf0e4:	4611      	mov	r1, r2
   bf0e6:	f7fe ba7d 	b.w	bd5e4 <network_ready>

000bf0ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf0ea:	2200      	movs	r2, #0
   bf0ec:	6840      	ldr	r0, [r0, #4]
   bf0ee:	4611      	mov	r1, r2
   bf0f0:	f7fe ba68 	b.w	bd5c4 <network_connecting>

000bf0f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf0f4:	6840      	ldr	r0, [r0, #4]
   bf0f6:	2200      	movs	r2, #0
   bf0f8:	2102      	movs	r1, #2
   bf0fa:	f7fe ba6b 	b.w	bd5d4 <network_disconnect>

000bf0fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf0fe:	2300      	movs	r3, #0
   bf100:	6840      	ldr	r0, [r0, #4]
   bf102:	461a      	mov	r2, r3
   bf104:	f7fe ba56 	b.w	bd5b4 <network_connect>

000bf108 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf108:	4b02      	ldr	r3, [pc, #8]	; (bf114 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf10a:	2203      	movs	r2, #3
   bf10c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf10e:	4a02      	ldr	r2, [pc, #8]	; (bf118 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf110:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf112:	4770      	bx	lr
   bf114:	2003e65c 	.word	0x2003e65c
   bf118:	000c59b0 	.word	0x000c59b0

000bf11c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf11c:	4770      	bx	lr

000bf11e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf120:	4606      	mov	r6, r0
   bf122:	4615      	mov	r5, r2
   bf124:	460c      	mov	r4, r1
   bf126:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf128:	42bc      	cmp	r4, r7
   bf12a:	d006      	beq.n	bf13a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf12c:	6833      	ldr	r3, [r6, #0]
   bf12e:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf132:	689b      	ldr	r3, [r3, #8]
   bf134:	4630      	mov	r0, r6
   bf136:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf138:	e7f6      	b.n	bf128 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf13a:	4628      	mov	r0, r5
   bf13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf13e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf13e:	7c00      	ldrb	r0, [r0, #16]
   bf140:	2200      	movs	r2, #0
   bf142:	f7fe b831 	b.w	bd1a8 <hal_i2c_write>

000bf146 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf146:	7c00      	ldrb	r0, [r0, #16]
   bf148:	2100      	movs	r1, #0
   bf14a:	f7fe b835 	b.w	bd1b8 <hal_i2c_available>

000bf14e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf14e:	7c00      	ldrb	r0, [r0, #16]
   bf150:	2100      	movs	r1, #0
   bf152:	f7fe b839 	b.w	bd1c8 <hal_i2c_read>

000bf156 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf156:	7c00      	ldrb	r0, [r0, #16]
   bf158:	2100      	movs	r1, #0
   bf15a:	f7fe b83d 	b.w	bd1d8 <hal_i2c_peek>

000bf15e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf15e:	7c00      	ldrb	r0, [r0, #16]
   bf160:	2100      	movs	r1, #0
   bf162:	f7fe b841 	b.w	bd1e8 <hal_i2c_flush>

000bf166 <_ZN7TwoWireD0Ev>:
   bf166:	b510      	push	{r4, lr}
   bf168:	2114      	movs	r1, #20
   bf16a:	4604      	mov	r4, r0
   bf16c:	f7f4 ff99 	bl	b40a2 <_ZdlPvj>
   bf170:	4620      	mov	r0, r4
   bf172:	bd10      	pop	{r4, pc}

000bf174 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf174:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf17a:	4604      	mov	r4, r0
   bf17c:	4608      	mov	r0, r1
   bf17e:	2100      	movs	r1, #0
   bf180:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf184:	4b03      	ldr	r3, [pc, #12]	; (bf194 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf186:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf188:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf18a:	4611      	mov	r1, r2
   bf18c:	f7fe f83c 	bl	bd208 <hal_i2c_init>
}
   bf190:	4620      	mov	r0, r4
   bf192:	bd10      	pop	{r4, pc}
   bf194:	000c59ec 	.word	0x000c59ec

000bf198 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf198:	7c00      	ldrb	r0, [r0, #16]
   bf19a:	2200      	movs	r2, #0
   bf19c:	f7fd bfe4 	b.w	bd168 <hal_i2c_set_speed>

000bf1a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf1a0:	2300      	movs	r3, #0
   bf1a2:	7c00      	ldrb	r0, [r0, #16]
   bf1a4:	461a      	mov	r2, r3
   bf1a6:	4619      	mov	r1, r3
   bf1a8:	f7fd bfe6 	b.w	bd178 <hal_i2c_begin>

000bf1ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf1ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf1ae:	2200      	movs	r2, #0
   bf1b0:	2314      	movs	r3, #20
   bf1b2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf1b6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf1ba:	780b      	ldrb	r3, [r1, #0]
   bf1bc:	f88d 3008 	strb.w	r3, [sp, #8]
   bf1c0:	684b      	ldr	r3, [r1, #4]
   bf1c2:	9303      	str	r3, [sp, #12]
   bf1c4:	68cb      	ldr	r3, [r1, #12]
   bf1c6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf1c8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf1ca:	7a0b      	ldrb	r3, [r1, #8]
   bf1cc:	9305      	str	r3, [sp, #20]
   bf1ce:	a901      	add	r1, sp, #4
   bf1d0:	f7fe f822 	bl	bd218 <hal_i2c_request_ex>
}
   bf1d4:	b007      	add	sp, #28
   bf1d6:	f85d fb04 	ldr.w	pc, [sp], #4

000bf1da <_ZN7TwoWire11requestFromEhjh>:
{
   bf1da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf1dc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf1de:	f88d 1000 	strb.w	r1, [sp]
   bf1e2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf1e6:	9103      	str	r1, [sp, #12]
   bf1e8:	bf18      	it	ne
   bf1ea:	2301      	movne	r3, #1
   bf1ec:	4669      	mov	r1, sp
    size_ = size;
   bf1ee:	9201      	str	r2, [sp, #4]
   bf1f0:	f88d 3008 	strb.w	r3, [sp, #8]
   bf1f4:	f7ff ffda 	bl	bf1ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf1f8:	b005      	add	sp, #20
   bf1fa:	f85d fb04 	ldr.w	pc, [sp], #4

000bf1fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf1fe:	2301      	movs	r3, #1
   bf200:	f7ff bfeb 	b.w	bf1da <_ZN7TwoWire11requestFromEhjh>

000bf204 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf204:	7c00      	ldrb	r0, [r0, #16]
   bf206:	2200      	movs	r2, #0
   bf208:	f7fd bfbe 	b.w	bd188 <hal_i2c_begin_transmission>

000bf20c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf20c:	b2c9      	uxtb	r1, r1
   bf20e:	f7ff bff9 	b.w	bf204 <_ZN7TwoWire17beginTransmissionEh>

000bf212 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf212:	7c00      	ldrb	r0, [r0, #16]
   bf214:	2200      	movs	r2, #0
   bf216:	f7fd bfbf 	b.w	bd198 <hal_i2c_end_transmission>

000bf21a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf21a:	2101      	movs	r1, #1
   bf21c:	f7ff bff9 	b.w	bf212 <_ZN7TwoWire15endTransmissionEh>

000bf220 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf220:	f7fd bf92 	b.w	bd148 <HAL_Interrupts_Disable_All>

000bf224 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf224:	f7fd bf88 	b.w	bd138 <HAL_Interrupts_Enable_All>

000bf228 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf228:	4770      	bx	lr

000bf22a <_ZN9IPAddressD0Ev>:
   bf22a:	b510      	push	{r4, lr}
   bf22c:	2118      	movs	r1, #24
   bf22e:	4604      	mov	r4, r0
   bf230:	f7f4 ff37 	bl	b40a2 <_ZdlPvj>
   bf234:	4620      	mov	r0, r4
   bf236:	bd10      	pop	{r4, pc}

000bf238 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf238:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf23a:	7d03      	ldrb	r3, [r0, #20]
   bf23c:	2b06      	cmp	r3, #6
{
   bf23e:	b08d      	sub	sp, #52	; 0x34
   bf240:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf242:	f100 0704 	add.w	r7, r0, #4
   bf246:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf24a:	d012      	beq.n	bf272 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf24c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf250:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf254:	220a      	movs	r2, #10
   bf256:	4630      	mov	r0, r6
   bf258:	f001 fabd 	bl	c07d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf25c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf25e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf260:	d019      	beq.n	bf296 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf262:	2c00      	cmp	r4, #0
   bf264:	d0f4      	beq.n	bf250 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf266:	212e      	movs	r1, #46	; 0x2e
   bf268:	4630      	mov	r0, r6
   bf26a:	f001 fa95 	bl	c0798 <_ZN5Print5printEc>
   bf26e:	4404      	add	r4, r0
   bf270:	e7ee      	b.n	bf250 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf272:	232f      	movs	r3, #47	; 0x2f
   bf274:	466a      	mov	r2, sp
   bf276:	4639      	mov	r1, r7
   bf278:	200a      	movs	r0, #10
		buf[0] = 0;
   bf27a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf27e:	f7fd ffd3 	bl	bd228 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf282:	4668      	mov	r0, sp
   bf284:	f002 ffff 	bl	c2286 <strlen>
   bf288:	6833      	ldr	r3, [r6, #0]
   bf28a:	4602      	mov	r2, r0
   bf28c:	68db      	ldr	r3, [r3, #12]
   bf28e:	4669      	mov	r1, sp
   bf290:	4630      	mov	r0, r6
   bf292:	4798      	blx	r3
   bf294:	4604      	mov	r4, r0
    }
    return n;
}
   bf296:	4620      	mov	r0, r4
   bf298:	b00d      	add	sp, #52	; 0x34
   bf29a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf29c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf29c:	b510      	push	{r4, lr}
   bf29e:	4b05      	ldr	r3, [pc, #20]	; (bf2b4 <_ZN9IPAddressC1Ev+0x18>)
   bf2a0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf2a2:	2211      	movs	r2, #17
   bf2a4:	f840 3b04 	str.w	r3, [r0], #4
   bf2a8:	2100      	movs	r1, #0
   bf2aa:	f002 ff61 	bl	c2170 <memset>
}
   bf2ae:	4620      	mov	r0, r4
   bf2b0:	bd10      	pop	{r4, pc}
   bf2b2:	bf00      	nop
   bf2b4:	000c5a14 	.word	0x000c5a14

000bf2b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf2b8:	4603      	mov	r3, r0
   bf2ba:	4a07      	ldr	r2, [pc, #28]	; (bf2d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf2bc:	b510      	push	{r4, lr}
   bf2be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf2c2:	f101 0210 	add.w	r2, r1, #16
   bf2c6:	f851 4b04 	ldr.w	r4, [r1], #4
   bf2ca:	f843 4b04 	str.w	r4, [r3], #4
   bf2ce:	4291      	cmp	r1, r2
   bf2d0:	d1f9      	bne.n	bf2c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf2d2:	780a      	ldrb	r2, [r1, #0]
   bf2d4:	701a      	strb	r2, [r3, #0]
}
   bf2d6:	bd10      	pop	{r4, pc}
   bf2d8:	000c5a14 	.word	0x000c5a14

000bf2dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf2dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf2de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf2e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf2e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf2ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf2ee:	2304      	movs	r3, #4
   bf2f0:	6041      	str	r1, [r0, #4]
   bf2f2:	7503      	strb	r3, [r0, #20]
}
   bf2f4:	bd10      	pop	{r4, pc}
	...

000bf2f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf2f8:	b507      	push	{r0, r1, r2, lr}
   bf2fa:	4b06      	ldr	r3, [pc, #24]	; (bf314 <_ZN9IPAddressC1EPKh+0x1c>)
   bf2fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf2fe:	78cb      	ldrb	r3, [r1, #3]
   bf300:	9300      	str	r3, [sp, #0]
   bf302:	788b      	ldrb	r3, [r1, #2]
   bf304:	784a      	ldrb	r2, [r1, #1]
   bf306:	7809      	ldrb	r1, [r1, #0]
   bf308:	f7ff ffe8 	bl	bf2dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf30c:	b003      	add	sp, #12
   bf30e:	f85d fb04 	ldr.w	pc, [sp], #4
   bf312:	bf00      	nop
   bf314:	000c5a14 	.word	0x000c5a14

000bf318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf318:	f100 0310 	add.w	r3, r0, #16
   bf31c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf31e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf322:	2901      	cmp	r1, #1
   bf324:	4618      	mov	r0, r3
   bf326:	d108      	bne.n	bf33a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf328:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf32c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf330:	3a01      	subs	r2, #1
   bf332:	f103 0310 	add.w	r3, r3, #16
   bf336:	d1f2      	bne.n	bf31e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf338:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf33a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf33c:	bf04      	itt	eq
   bf33e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf342:	1852      	addeq	r2, r2, r1
   bf344:	e7f4      	b.n	bf330 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf346 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf346:	b40e      	push	{r1, r2, r3}
   bf348:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf34a:	b088      	sub	sp, #32
   bf34c:	af00      	add	r7, sp, #0
   bf34e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf352:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf354:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf358:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf35a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf35c:	462b      	mov	r3, r5
   bf35e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf360:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf362:	f7fe f9af 	bl	bd6c4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf366:	280f      	cmp	r0, #15
   bf368:	687a      	ldr	r2, [r7, #4]
   bf36a:	d91a      	bls.n	bf3a2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf36c:	f100 0308 	add.w	r3, r0, #8
   bf370:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf374:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf376:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf37a:	1c41      	adds	r1, r0, #1
   bf37c:	462b      	mov	r3, r5
   bf37e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf380:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf382:	f7fe f99f 	bl	bd6c4 <vsnprintf>
        if (n > 0) {
   bf386:	1e02      	subs	r2, r0, #0
   bf388:	dd04      	ble.n	bf394 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf38a:	6823      	ldr	r3, [r4, #0]
   bf38c:	4669      	mov	r1, sp
   bf38e:	689b      	ldr	r3, [r3, #8]
   bf390:	4620      	mov	r0, r4
   bf392:	4798      	blx	r3
   bf394:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf396:	3720      	adds	r7, #32
   bf398:	46bd      	mov	sp, r7
   bf39a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf39e:	b003      	add	sp, #12
   bf3a0:	4770      	bx	lr
    } else if (n > 0) {
   bf3a2:	2800      	cmp	r0, #0
   bf3a4:	d0f7      	beq.n	bf396 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf3a6:	6823      	ldr	r3, [r4, #0]
   bf3a8:	4602      	mov	r2, r0
   bf3aa:	689b      	ldr	r3, [r3, #8]
   bf3ac:	f107 0110 	add.w	r1, r7, #16
   bf3b0:	4620      	mov	r0, r4
   bf3b2:	4798      	blx	r3
}
   bf3b4:	e7ef      	b.n	bf396 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf3b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf3b6:	b538      	push	{r3, r4, r5, lr}
   bf3b8:	680b      	ldr	r3, [r1, #0]
   bf3ba:	6003      	str	r3, [r0, #0]
   bf3bc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf3be:	6843      	ldr	r3, [r0, #4]
   bf3c0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf3c2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf3c4:	d008      	beq.n	bf3d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf3c6:	b115      	cbz	r5, bf3ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf3c8:	686b      	ldr	r3, [r5, #4]
   bf3ca:	3301      	adds	r3, #1
   bf3cc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf3ce:	6860      	ldr	r0, [r4, #4]
   bf3d0:	b108      	cbz	r0, bf3d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf3d2:	f7fe fa7c 	bl	bd8ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf3d6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf3d8:	bd38      	pop	{r3, r4, r5, pc}

000bf3da <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf3da:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf3dc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf3de:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf3e2:	689b      	ldr	r3, [r3, #8]
   bf3e4:	2201      	movs	r2, #1
   bf3e6:	f10d 0107 	add.w	r1, sp, #7
   bf3ea:	4798      	blx	r3
}
   bf3ec:	b003      	add	sp, #12
   bf3ee:	f85d fb04 	ldr.w	pc, [sp], #4

000bf3f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf3f2:	460b      	mov	r3, r1
   bf3f4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf3f6:	2200      	movs	r2, #0
   bf3f8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf3fa:	e9c0 2200 	strd	r2, r2, [r0]
   bf3fe:	4604      	mov	r4, r0
        t_ = t;
   bf400:	6083      	str	r3, [r0, #8]
    if (t) {
   bf402:	b90b      	cbnz	r3, bf408 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf404:	4620      	mov	r0, r4
   bf406:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf408:	f7ff ffd5 	bl	bf3b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf40c:	e7fa      	b.n	bf404 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf40e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf40e:	6883      	ldr	r3, [r0, #8]
   bf410:	b1eb      	cbz	r3, bf44e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf412:	781a      	ldrb	r2, [r3, #0]
   bf414:	2a03      	cmp	r2, #3
   bf416:	d81a      	bhi.n	bf44e <_ZNK5spark9JSONValue4typeEv+0x40>
   bf418:	e8df f002 	tbb	[pc, r2]
   bf41c:	1b021704 	.word	0x1b021704
   bf420:	2005      	movs	r0, #5
   bf422:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf424:	6802      	ldr	r2, [r0, #0]
   bf426:	685b      	ldr	r3, [r3, #4]
   bf428:	6852      	ldr	r2, [r2, #4]
   bf42a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf42c:	282d      	cmp	r0, #45	; 0x2d
   bf42e:	d012      	beq.n	bf456 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf430:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf434:	2b09      	cmp	r3, #9
   bf436:	d90e      	bls.n	bf456 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf438:	2874      	cmp	r0, #116	; 0x74
   bf43a:	d00e      	beq.n	bf45a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf43c:	2866      	cmp	r0, #102	; 0x66
   bf43e:	d00c      	beq.n	bf45a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf440:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf444:	4258      	negs	r0, r3
   bf446:	4158      	adcs	r0, r3
   bf448:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf44a:	2006      	movs	r0, #6
   bf44c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf44e:	2000      	movs	r0, #0
   bf450:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf452:	2004      	movs	r0, #4
   bf454:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf456:	2003      	movs	r0, #3
   bf458:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf45a:	2002      	movs	r0, #2
}
   bf45c:	4770      	bx	lr

000bf45e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf45e:	b510      	push	{r4, lr}
   bf460:	4604      	mov	r4, r0
    switch (type()) {
   bf462:	f7ff ffd4 	bl	bf40e <_ZNK5spark9JSONValue4typeEv>
   bf466:	2802      	cmp	r0, #2
   bf468:	d00e      	beq.n	bf488 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf46a:	1ec3      	subs	r3, r0, #3
   bf46c:	b2db      	uxtb	r3, r3
   bf46e:	2b01      	cmp	r3, #1
   bf470:	d814      	bhi.n	bf49c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf472:	6822      	ldr	r2, [r4, #0]
   bf474:	68a3      	ldr	r3, [r4, #8]
   bf476:	6850      	ldr	r0, [r2, #4]
   bf478:	685b      	ldr	r3, [r3, #4]
}
   bf47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf47e:	220a      	movs	r2, #10
   bf480:	2100      	movs	r1, #0
   bf482:	4418      	add	r0, r3
   bf484:	f003 be28 	b.w	c30d8 <strtol>
        const char* const s = d_->json + t_->start;
   bf488:	6822      	ldr	r2, [r4, #0]
   bf48a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf48c:	6852      	ldr	r2, [r2, #4]
   bf48e:	685b      	ldr	r3, [r3, #4]
   bf490:	5cd0      	ldrb	r0, [r2, r3]
   bf492:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf496:	4258      	negs	r0, r3
   bf498:	4158      	adcs	r0, r3
}
   bf49a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf49c:	2000      	movs	r0, #0
   bf49e:	e7fc      	b.n	bf49a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf4a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf4a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf4a2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf4a4:	e9c0 3300 	strd	r3, r3, [r0]
   bf4a8:	4604      	mov	r4, r0
        n_(0) {
   bf4aa:	480e      	ldr	r0, [pc, #56]	; (bf4e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf4ac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf4b0:	b1a9      	cbz	r1, bf4de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf4b2:	780b      	ldrb	r3, [r1, #0]
   bf4b4:	2b03      	cmp	r3, #3
   bf4b6:	d006      	beq.n	bf4c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf4b8:	b98b      	cbnz	r3, bf4de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf4ba:	6813      	ldr	r3, [r2, #0]
   bf4bc:	6858      	ldr	r0, [r3, #4]
   bf4be:	684b      	ldr	r3, [r1, #4]
   bf4c0:	5cc3      	ldrb	r3, [r0, r3]
   bf4c2:	2b6e      	cmp	r3, #110	; 0x6e
   bf4c4:	d007      	beq.n	bf4d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf4c6:	6813      	ldr	r3, [r2, #0]
   bf4c8:	684d      	ldr	r5, [r1, #4]
   bf4ca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf4cc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf4ce:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf4d0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf4d2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf4d4:	60e3      	str	r3, [r4, #12]
   bf4d6:	4611      	mov	r1, r2
   bf4d8:	4620      	mov	r0, r4
   bf4da:	f7ff ff6c 	bl	bf3b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf4de:	4620      	mov	r0, r4
   bf4e0:	bd38      	pop	{r3, r4, r5, pc}
   bf4e2:	bf00      	nop
   bf4e4:	000c5a83 	.word	0x000c5a83

000bf4e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf4e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf4ea:	2500      	movs	r5, #0
   bf4ec:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf4ee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf4f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf4f6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf4fa:	4604      	mov	r4, r0
   bf4fc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf4fe:	b14b      	cbz	r3, bf514 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf500:	781a      	ldrb	r2, [r3, #0]
   bf502:	2a01      	cmp	r2, #1
   bf504:	d106      	bne.n	bf514 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf506:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf50a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf50c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf50e:	6143      	str	r3, [r0, #20]
   bf510:	f7ff ff51 	bl	bf3b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf514:	4620      	mov	r0, r4
   bf516:	bd38      	pop	{r3, r4, r5, pc}

000bf518 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf518:	b510      	push	{r4, lr}
    if (!n_) {
   bf51a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf51c:	4604      	mov	r4, r0
    if (!n_) {
   bf51e:	b163      	cbz	r3, bf53a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf520:	6880      	ldr	r0, [r0, #8]
   bf522:	60e0      	str	r0, [r4, #12]
    --n_;
   bf524:	3b01      	subs	r3, #1
    ++t_;
   bf526:	3010      	adds	r0, #16
   bf528:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf52a:	6120      	str	r0, [r4, #16]
    --n_;
   bf52c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf52e:	b113      	cbz	r3, bf536 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf530:	f7ff fef2 	bl	bf318 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf534:	60a0      	str	r0, [r4, #8]
    return true;
   bf536:	2001      	movs	r0, #1
   bf538:	e000      	b.n	bf53c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf53a:	4618      	mov	r0, r3
}
   bf53c:	bd10      	pop	{r4, pc}

000bf53e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf53e:	b510      	push	{r4, lr}
    write('}');
   bf540:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf542:	4604      	mov	r4, r0
    write('}');
   bf544:	f7ff ff49 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf548:	2301      	movs	r3, #1
   bf54a:	7123      	strb	r3, [r4, #4]
}
   bf54c:	4620      	mov	r0, r4
   bf54e:	bd10      	pop	{r4, pc}

000bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf550:	b508      	push	{r3, lr}
    switch (state_) {
   bf552:	7903      	ldrb	r3, [r0, #4]
   bf554:	2b01      	cmp	r3, #1
   bf556:	d002      	beq.n	bf55e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf558:	2b02      	cmp	r3, #2
   bf55a:	d004      	beq.n	bf566 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf55c:	bd08      	pop	{r3, pc}
        write(',');
   bf55e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf560:	f7ff ff3b 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
}
   bf564:	e7fa      	b.n	bf55c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf566:	213a      	movs	r1, #58	; 0x3a
   bf568:	e7fa      	b.n	bf560 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf56a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf56a:	b510      	push	{r4, lr}
   bf56c:	4604      	mov	r4, r0
    writeSeparator();
   bf56e:	f7ff ffef 	bl	bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf572:	4620      	mov	r0, r4
   bf574:	217b      	movs	r1, #123	; 0x7b
   bf576:	f7ff ff30 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf57a:	2300      	movs	r3, #0
   bf57c:	7123      	strb	r3, [r4, #4]
}
   bf57e:	4620      	mov	r0, r4
   bf580:	bd10      	pop	{r4, pc}
	...

000bf584 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf584:	b513      	push	{r0, r1, r4, lr}
   bf586:	4604      	mov	r4, r0
   bf588:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf58a:	f7ff ffe1 	bl	bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf58e:	6823      	ldr	r3, [r4, #0]
   bf590:	9a01      	ldr	r2, [sp, #4]
   bf592:	68db      	ldr	r3, [r3, #12]
   bf594:	4903      	ldr	r1, [pc, #12]	; (bf5a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf596:	4620      	mov	r0, r4
   bf598:	4798      	blx	r3
    state_ = NEXT;
   bf59a:	2301      	movs	r3, #1
}
   bf59c:	4620      	mov	r0, r4
    state_ = NEXT;
   bf59e:	7123      	strb	r3, [r4, #4]
}
   bf5a0:	b002      	add	sp, #8
   bf5a2:	bd10      	pop	{r4, pc}
   bf5a4:	000c4466 	.word	0x000c4466

000bf5a8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf5a8:	b513      	push	{r0, r1, r4, lr}
   bf5aa:	4604      	mov	r4, r0
   bf5ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf5ae:	f7ff ffcf 	bl	bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf5b2:	6823      	ldr	r3, [r4, #0]
   bf5b4:	9a01      	ldr	r2, [sp, #4]
   bf5b6:	68db      	ldr	r3, [r3, #12]
   bf5b8:	4903      	ldr	r1, [pc, #12]	; (bf5c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf5ba:	4620      	mov	r0, r4
   bf5bc:	4798      	blx	r3
    state_ = NEXT;
   bf5be:	2301      	movs	r3, #1
}
   bf5c0:	4620      	mov	r0, r4
    state_ = NEXT;
   bf5c2:	7123      	strb	r3, [r4, #4]
}
   bf5c4:	b002      	add	sp, #8
   bf5c6:	bd10      	pop	{r4, pc}
   bf5c8:	000c5a20 	.word	0x000c5a20

000bf5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf5d0:	460d      	mov	r5, r1
    write('"');
   bf5d2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf5d4:	4690      	mov	r8, r2
   bf5d6:	4604      	mov	r4, r0
    write('"');
   bf5d8:	f7ff feff 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf5dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf684 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf5e0:	44a8      	add	r8, r5
    const char *s = str;
   bf5e2:	462f      	mov	r7, r5
    while (s != end) {
   bf5e4:	4547      	cmp	r7, r8
   bf5e6:	46ba      	mov	sl, r7
   bf5e8:	d03d      	beq.n	bf666 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf5ea:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf5ee:	2e22      	cmp	r6, #34	; 0x22
   bf5f0:	d006      	beq.n	bf600 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf5f2:	2e5c      	cmp	r6, #92	; 0x5c
   bf5f4:	d004      	beq.n	bf600 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf5f6:	4630      	mov	r0, r6
   bf5f8:	f002 fd7a 	bl	c20f0 <isprint>
   bf5fc:	2800      	cmp	r0, #0
   bf5fe:	d1f1      	bne.n	bf5e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf600:	6823      	ldr	r3, [r4, #0]
   bf602:	ebaa 0205 	sub.w	r2, sl, r5
   bf606:	689b      	ldr	r3, [r3, #8]
   bf608:	4629      	mov	r1, r5
   bf60a:	4620      	mov	r0, r4
   bf60c:	4798      	blx	r3
            write('\\');
   bf60e:	215c      	movs	r1, #92	; 0x5c
   bf610:	4620      	mov	r0, r4
   bf612:	f7ff fee2 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf616:	2e0d      	cmp	r6, #13
   bf618:	d80a      	bhi.n	bf630 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf61a:	2e07      	cmp	r6, #7
   bf61c:	d91c      	bls.n	bf658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf61e:	f1a6 0308 	sub.w	r3, r6, #8
   bf622:	2b05      	cmp	r3, #5
   bf624:	d818      	bhi.n	bf658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf626:	e8df f003 	tbb	[pc, r3]
   bf62a:	0f0d      	.short	0x0f0d
   bf62c:	15131711 	.word	0x15131711
   bf630:	2e22      	cmp	r6, #34	; 0x22
   bf632:	d001      	beq.n	bf638 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf634:	2e5c      	cmp	r6, #92	; 0x5c
   bf636:	d10f      	bne.n	bf658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf638:	4631      	mov	r1, r6
                write('b');
   bf63a:	4620      	mov	r0, r4
   bf63c:	f7ff fecd 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf640:	463d      	mov	r5, r7
    while (s != end) {
   bf642:	e7cf      	b.n	bf5e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf644:	2162      	movs	r1, #98	; 0x62
   bf646:	e7f8      	b.n	bf63a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf648:	2174      	movs	r1, #116	; 0x74
   bf64a:	e7f6      	b.n	bf63a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf64c:	216e      	movs	r1, #110	; 0x6e
   bf64e:	e7f4      	b.n	bf63a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf650:	2166      	movs	r1, #102	; 0x66
   bf652:	e7f2      	b.n	bf63a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf654:	2172      	movs	r1, #114	; 0x72
   bf656:	e7f0      	b.n	bf63a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf658:	6823      	ldr	r3, [r4, #0]
   bf65a:	4632      	mov	r2, r6
   bf65c:	68db      	ldr	r3, [r3, #12]
   bf65e:	4649      	mov	r1, r9
   bf660:	4620      	mov	r0, r4
   bf662:	4798      	blx	r3
                break;
   bf664:	e7ec      	b.n	bf640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf666:	42bd      	cmp	r5, r7
   bf668:	d005      	beq.n	bf676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf66a:	6823      	ldr	r3, [r4, #0]
   bf66c:	1b7a      	subs	r2, r7, r5
   bf66e:	689b      	ldr	r3, [r3, #8]
   bf670:	4629      	mov	r1, r5
   bf672:	4620      	mov	r0, r4
   bf674:	4798      	blx	r3
    }
    write('"');
   bf676:	2122      	movs	r1, #34	; 0x22
   bf678:	4620      	mov	r0, r4
   bf67a:	f7ff feae 	bl	bf3da <_ZN5spark10JSONWriter5writeEc>
}
   bf67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf682:	bf00      	nop
   bf684:	000c5a23 	.word	0x000c5a23

000bf688 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf688:	b513      	push	{r0, r1, r4, lr}
   bf68a:	4604      	mov	r4, r0
   bf68c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf690:	f7ff ff5e 	bl	bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf694:	4620      	mov	r0, r4
   bf696:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf69a:	f7ff ff97 	bl	bf5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf69e:	2302      	movs	r3, #2
}
   bf6a0:	4620      	mov	r0, r4
    state_ = VALUE;
   bf6a2:	7123      	strb	r3, [r4, #4]
}
   bf6a4:	b002      	add	sp, #8
   bf6a6:	bd10      	pop	{r4, pc}

000bf6a8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf6a8:	b513      	push	{r0, r1, r4, lr}
   bf6aa:	4604      	mov	r4, r0
   bf6ac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf6b0:	f7ff ff4e 	bl	bf550 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf6b4:	4620      	mov	r0, r4
   bf6b6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf6ba:	f7ff ff87 	bl	bf5cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf6be:	2301      	movs	r3, #1
}
   bf6c0:	4620      	mov	r0, r4
    state_ = NEXT;
   bf6c2:	7123      	strb	r3, [r4, #4]
}
   bf6c4:	b002      	add	sp, #8
   bf6c6:	bd10      	pop	{r4, pc}

000bf6c8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bf6c8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bf6ca:	460b      	mov	r3, r1
    s->update(ticks);
   bf6cc:	6892      	ldr	r2, [r2, #8]
   bf6ce:	4601      	mov	r1, r0
   bf6d0:	4618      	mov	r0, r3
   bf6d2:	4710      	bx	r2

000bf6d4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bf6d4:	b570      	push	{r4, r5, r6, lr}
   bf6d6:	4c0e      	ldr	r4, [pc, #56]	; (bf710 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bf6d8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bf6da:	2500      	movs	r5, #0
   bf6dc:	241c      	movs	r4, #28
   bf6de:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf6e2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bf6e6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bf6ea:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf6ec:	f004 0403 	and.w	r4, r4, #3
   bf6f0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bf6f4:	b2e4      	uxtb	r4, r4
   bf6f6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bf6f8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bf6fa:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bf6fc:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bf6fe:	7c42      	ldrb	r2, [r0, #17]
   bf700:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bf702:	bf0a      	itet	eq
   bf704:	4b03      	ldreq	r3, [pc, #12]	; (bf714 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bf706:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bf708:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bf70c:	bd70      	pop	{r4, r5, r6, pc}
   bf70e:	bf00      	nop
   bf710:	000c48fc 	.word	0x000c48fc
   bf714:	000bf6c9 	.word	0x000bf6c9

000bf718 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf718:	6880      	ldr	r0, [r0, #8]
   bf71a:	6803      	ldr	r3, [r0, #0]
   bf71c:	68db      	ldr	r3, [r3, #12]
   bf71e:	4718      	bx	r3

000bf720 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf720:	4770      	bx	lr

000bf722 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf722:	4608      	mov	r0, r1
   bf724:	b111      	cbz	r1, bf72c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf726:	680b      	ldr	r3, [r1, #0]
   bf728:	685b      	ldr	r3, [r3, #4]
   bf72a:	4718      	bx	r3
}
   bf72c:	4770      	bx	lr

000bf72e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf72e:	4770      	bx	lr

000bf730 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf730:	4770      	bx	lr

000bf732 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf732:	4770      	bx	lr

000bf734 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf734:	4770      	bx	lr

000bf736 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf736:	b538      	push	{r3, r4, r5, lr}
   bf738:	4604      	mov	r4, r0
   bf73a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf73c:	6800      	ldr	r0, [r0, #0]
   bf73e:	212e      	movs	r1, #46	; 0x2e
   bf740:	f002 fd68 	bl	c2214 <strchrnul>
    size = s - category;
   bf744:	6823      	ldr	r3, [r4, #0]
   bf746:	1ac3      	subs	r3, r0, r3
   bf748:	602b      	str	r3, [r5, #0]
    if (size) {
   bf74a:	b123      	cbz	r3, bf756 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf74c:	7803      	ldrb	r3, [r0, #0]
   bf74e:	b103      	cbz	r3, bf752 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf750:	3001      	adds	r0, #1
   bf752:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf754:	6020      	str	r0, [r4, #0]
}
   bf756:	4618      	mov	r0, r3
   bf758:	bd38      	pop	{r3, r4, r5, pc}

000bf75a <_ZN5spark16JSONStreamWriterD0Ev>:
   bf75a:	b510      	push	{r4, lr}
   bf75c:	210c      	movs	r1, #12
   bf75e:	4604      	mov	r4, r0
   bf760:	f7f4 fc9f 	bl	b40a2 <_ZdlPvj>
   bf764:	4620      	mov	r0, r4
   bf766:	bd10      	pop	{r4, pc}

000bf768 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf768:	b510      	push	{r4, lr}
   bf76a:	2104      	movs	r1, #4
   bf76c:	4604      	mov	r4, r0
   bf76e:	f7f4 fc98 	bl	b40a2 <_ZdlPvj>
   bf772:	4620      	mov	r0, r4
   bf774:	bd10      	pop	{r4, pc}

000bf776 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf776:	b510      	push	{r4, lr}
   bf778:	2104      	movs	r1, #4
   bf77a:	4604      	mov	r4, r0
   bf77c:	f7f4 fc91 	bl	b40a2 <_ZdlPvj>
   bf780:	4620      	mov	r0, r4
   bf782:	bd10      	pop	{r4, pc}

000bf784 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf784:	f7fd bc70 	b.w	bd068 <os_mutex_recursive_lock>

000bf788 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf788:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf78a:	f002 fd4d 	bl	c2228 <strcmp>
}
   bf78e:	fab0 f080 	clz	r0, r0
   bf792:	0940      	lsrs	r0, r0, #5
   bf794:	bd08      	pop	{r3, pc}

000bf796 <__tcf_1>:
   bf796:	4770      	bx	lr

000bf798 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf798:	b510      	push	{r4, lr}
   bf79a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf79c:	f001 fcb8 	bl	c1110 <_Z16_fetch_usbserialv>
   bf7a0:	4284      	cmp	r4, r0
   bf7a2:	d010      	beq.n	bf7c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf7a4:	f001 fe4c 	bl	c1440 <_Z22__fetch_global_Serial1v>
   bf7a8:	4284      	cmp	r4, r0
   bf7aa:	d105      	bne.n	bf7b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf7ac:	f001 fe48 	bl	c1440 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf7b4:	f001 bc47 	b.w	c1046 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf7b8:	b12c      	cbz	r4, bf7c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf7ba:	6823      	ldr	r3, [r4, #0]
   bf7bc:	4620      	mov	r0, r4
   bf7be:	685b      	ldr	r3, [r3, #4]
}
   bf7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf7c4:	4718      	bx	r3
   bf7c6:	bd10      	pop	{r4, pc}

000bf7c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf7c8:	680b      	ldr	r3, [r1, #0]
   bf7ca:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf7cc:	684b      	ldr	r3, [r1, #4]
   bf7ce:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf7d0:	b113      	cbz	r3, bf7d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf7d2:	685a      	ldr	r2, [r3, #4]
   bf7d4:	3201      	adds	r2, #1
   bf7d6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf7d8:	4770      	bx	lr

000bf7da <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf7da:	b513      	push	{r0, r1, r4, lr}
   bf7dc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf7de:	4608      	mov	r0, r1
   bf7e0:	9101      	str	r1, [sp, #4]
   bf7e2:	f002 fd50 	bl	c2286 <strlen>
   bf7e6:	9901      	ldr	r1, [sp, #4]
   bf7e8:	4602      	mov	r2, r0
   bf7ea:	4620      	mov	r0, r4
}
   bf7ec:	b002      	add	sp, #8
   bf7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf7f2:	f7ff bf59 	b.w	bf6a8 <_ZN5spark10JSONWriter5valueEPKcj>

000bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf7f6:	b513      	push	{r0, r1, r4, lr}
   bf7f8:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf7fa:	4608      	mov	r0, r1
   bf7fc:	9101      	str	r1, [sp, #4]
   bf7fe:	f002 fd42 	bl	c2286 <strlen>
   bf802:	6823      	ldr	r3, [r4, #0]
   bf804:	9901      	ldr	r1, [sp, #4]
   bf806:	68db      	ldr	r3, [r3, #12]
   bf808:	4602      	mov	r2, r0
   bf80a:	4620      	mov	r0, r4
}
   bf80c:	b002      	add	sp, #8
   bf80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf812:	4718      	bx	r3

000bf814 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf814:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf816:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf818:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf81c:	68db      	ldr	r3, [r3, #12]
   bf81e:	2201      	movs	r2, #1
   bf820:	f10d 0107 	add.w	r1, sp, #7
   bf824:	4798      	blx	r3
}
   bf826:	b003      	add	sp, #12
   bf828:	f85d fb04 	ldr.w	pc, [sp], #4

000bf82c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf82c:	b40e      	push	{r1, r2, r3}
   bf82e:	b503      	push	{r0, r1, lr}
   bf830:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bf832:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf834:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bf838:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bf83a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bf83c:	f000 ffe9 	bl	c0812 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bf840:	b002      	add	sp, #8
   bf842:	f85d eb04 	ldr.w	lr, [sp], #4
   bf846:	b003      	add	sp, #12
   bf848:	4770      	bx	lr

000bf84a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bf84a:	680a      	ldr	r2, [r1, #0]
   bf84c:	6002      	str	r2, [r0, #0]
   bf84e:	684a      	ldr	r2, [r1, #4]
   bf850:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bf852:	2200      	movs	r2, #0
   bf854:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bf858:	b510      	push	{r4, lr}
   bf85a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf85c:	688c      	ldr	r4, [r1, #8]
   bf85e:	6084      	str	r4, [r0, #8]
   bf860:	68cc      	ldr	r4, [r1, #12]
   bf862:	60c4      	str	r4, [r0, #12]
   bf864:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf866:	608a      	str	r2, [r1, #8]
   bf868:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf86a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf86c:	610a      	str	r2, [r1, #16]
   bf86e:	bd10      	pop	{r4, pc}

000bf870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bf874:	e9d0 8400 	ldrd	r8, r4, [r0]
   bf878:	f04f 0a14 	mov.w	sl, #20
   bf87c:	9300      	str	r3, [sp, #0]
   bf87e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bf882:	4b18      	ldr	r3, [pc, #96]	; (bf8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf884:	10a4      	asrs	r4, r4, #2
   bf886:	4617      	mov	r7, r2
   bf888:	435c      	muls	r4, r3
   bf88a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bf88c:	2c00      	cmp	r4, #0
   bf88e:	dd21      	ble.n	bf8d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bf890:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bf892:	fb0a f006 	mul.w	r0, sl, r6
   bf896:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bf89a:	463a      	mov	r2, r7
   bf89c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bf8a0:	5828      	ldr	r0, [r5, r0]
   bf8a2:	9101      	str	r1, [sp, #4]
   bf8a4:	455f      	cmp	r7, fp
   bf8a6:	bf28      	it	cs
   bf8a8:	465a      	movcs	r2, fp
   bf8aa:	f002 fd07 	bl	c22bc <strncmp>
                if (cmp == 0) {
   bf8ae:	2800      	cmp	r0, #0
   bf8b0:	9901      	ldr	r1, [sp, #4]
   bf8b2:	f04f 0301 	mov.w	r3, #1
   bf8b6:	d10b      	bne.n	bf8d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bf8b8:	455f      	cmp	r7, fp
   bf8ba:	d103      	bne.n	bf8c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bf8bc:	9a00      	ldr	r2, [sp, #0]
   bf8be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf8c0:	4634      	mov	r4, r6
   bf8c2:	e7e3      	b.n	bf88c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bf8c4:	d9fc      	bls.n	bf8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bf8c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bf8c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bf8cc:	3e01      	subs	r6, #1
   bf8ce:	e7f7      	b.n	bf8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bf8d0:	dbf9      	blt.n	bf8c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bf8d2:	e7f5      	b.n	bf8c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bf8d4:	eba5 0508 	sub.w	r5, r5, r8
}
   bf8d8:	4802      	ldr	r0, [pc, #8]	; (bf8e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf8da:	10ad      	asrs	r5, r5, #2
   bf8dc:	4368      	muls	r0, r5
   bf8de:	b003      	add	sp, #12
   bf8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf8e4:	cccccccd 	.word	0xcccccccd

000bf8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf8e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bf8ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bf8ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf8ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bf8f0:	b303      	cbz	r3, bf934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bf8f2:	b1f9      	cbz	r1, bf934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bf8f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bf8f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bf8fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bf8fc:	a903      	add	r1, sp, #12
   bf8fe:	a801      	add	r0, sp, #4
   bf900:	f7ff ff19 	bl	bf736 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bf904:	4601      	mov	r1, r0
   bf906:	b1a8      	cbz	r0, bf934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bf908:	f10d 030b 	add.w	r3, sp, #11
   bf90c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bf90e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf912:	4620      	mov	r0, r4
   bf914:	f7ff ffac 	bl	bf870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bf918:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bf91c:	b153      	cbz	r3, bf934 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bf91e:	6823      	ldr	r3, [r4, #0]
   bf920:	2414      	movs	r4, #20
   bf922:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bf926:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bf928:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bf92c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bf92e:	bfa8      	it	ge
   bf930:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bf932:	e7e3      	b.n	bf8fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bf934:	4628      	mov	r0, r5
   bf936:	b004      	add	sp, #16
   bf938:	bd70      	pop	{r4, r5, r6, pc}
	...

000bf93c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bf93c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bf93e:	4c09      	ldr	r4, [pc, #36]	; (bf964 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bf940:	7823      	ldrb	r3, [r4, #0]
   bf942:	f3bf 8f5b 	dmb	ish
   bf946:	07db      	lsls	r3, r3, #31
   bf948:	d409      	bmi.n	bf95e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf94a:	4620      	mov	r0, r4
   bf94c:	f7f4 fbb8 	bl	b40c0 <__cxa_guard_acquire>
   bf950:	b128      	cbz	r0, bf95e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf952:	4620      	mov	r0, r4
   bf954:	f7f4 fbb9 	bl	b40ca <__cxa_guard_release>
   bf958:	4803      	ldr	r0, [pc, #12]	; (bf968 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bf95a:	f002 fbbb 	bl	c20d4 <atexit>
}
   bf95e:	4803      	ldr	r0, [pc, #12]	; (bf96c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bf960:	bd10      	pop	{r4, pc}
   bf962:	bf00      	nop
   bf964:	2003e668 	.word	0x2003e668
   bf968:	000bf72f 	.word	0x000bf72f
   bf96c:	2003db8c 	.word	0x2003db8c

000bf970 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bf970:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bf972:	4c09      	ldr	r4, [pc, #36]	; (bf998 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bf974:	7823      	ldrb	r3, [r4, #0]
   bf976:	f3bf 8f5b 	dmb	ish
   bf97a:	07db      	lsls	r3, r3, #31
   bf97c:	d409      	bmi.n	bf992 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf97e:	4620      	mov	r0, r4
   bf980:	f7f4 fb9e 	bl	b40c0 <__cxa_guard_acquire>
   bf984:	b128      	cbz	r0, bf992 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf986:	4620      	mov	r0, r4
   bf988:	f7f4 fb9f 	bl	b40ca <__cxa_guard_release>
   bf98c:	4803      	ldr	r0, [pc, #12]	; (bf99c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bf98e:	f002 fba1 	bl	c20d4 <atexit>
    return &factory;
}
   bf992:	4803      	ldr	r0, [pc, #12]	; (bf9a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bf994:	bd10      	pop	{r4, pc}
   bf996:	bf00      	nop
   bf998:	2003e66c 	.word	0x2003e66c
   bf99c:	000bf797 	.word	0x000bf797
   bf9a0:	2003db90 	.word	0x2003db90

000bf9a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bf9a4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bf9a6:	2500      	movs	r5, #0
   bf9a8:	4604      	mov	r4, r0
   bf9aa:	e9c0 5500 	strd	r5, r5, [r0]
   bf9ae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf9b2:	6085      	str	r5, [r0, #8]
   bf9b4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bf9b6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bf9ba:	f7fd fb45 	bl	bd048 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bf9be:	f7ff ffbd 	bl	bf93c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bf9c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf9c4:	f7ff ffd4 	bl	bf970 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bf9c8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf9ca:	6220      	str	r0, [r4, #32]
}
   bf9cc:	4620      	mov	r0, r4
   bf9ce:	bd38      	pop	{r3, r4, r5, pc}

000bf9d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bf9d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   bf9d2:	4c0a      	ldr	r4, [pc, #40]	; (bf9fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   bf9d4:	7823      	ldrb	r3, [r4, #0]
   bf9d6:	f3bf 8f5b 	dmb	ish
   bf9da:	07db      	lsls	r3, r3, #31
   bf9dc:	d40c      	bmi.n	bf9f8 <_ZN5spark10LogManager8instanceEv+0x28>
   bf9de:	4620      	mov	r0, r4
   bf9e0:	f7f4 fb6e 	bl	b40c0 <__cxa_guard_acquire>
   bf9e4:	b140      	cbz	r0, bf9f8 <_ZN5spark10LogManager8instanceEv+0x28>
   bf9e6:	4806      	ldr	r0, [pc, #24]	; (bfa00 <_ZN5spark10LogManager8instanceEv+0x30>)
   bf9e8:	f7ff ffdc 	bl	bf9a4 <_ZN5spark10LogManagerC1Ev>
   bf9ec:	4620      	mov	r0, r4
   bf9ee:	f7f4 fb6c 	bl	b40ca <__cxa_guard_release>
   bf9f2:	4804      	ldr	r0, [pc, #16]	; (bfa04 <_ZN5spark10LogManager8instanceEv+0x34>)
   bf9f4:	f002 fb6e 	bl	c20d4 <atexit>
    return &mgr;
}
   bf9f8:	4801      	ldr	r0, [pc, #4]	; (bfa00 <_ZN5spark10LogManager8instanceEv+0x30>)
   bf9fa:	bd10      	pop	{r4, pc}
   bf9fc:	2003e664 	.word	0x2003e664
   bfa00:	2003e674 	.word	0x2003e674
   bfa04:	000bff25 	.word	0x000bff25

000bfa08 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfa08:	4a02      	ldr	r2, [pc, #8]	; (bfa14 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfa0a:	4903      	ldr	r1, [pc, #12]	; (bfa18 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfa0c:	4803      	ldr	r0, [pc, #12]	; (bfa1c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfa0e:	2300      	movs	r3, #0
   bfa10:	f7fd bd42 	b.w	bd498 <log_set_callbacks>
   bfa14:	000bfd09 	.word	0x000bfd09
   bfa18:	000bfc95 	.word	0x000bfc95
   bfa1c:	000bfc15 	.word	0x000bfc15

000bfa20 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bfa20:	2300      	movs	r3, #0
   bfa22:	461a      	mov	r2, r3
   bfa24:	4619      	mov	r1, r3
   bfa26:	4618      	mov	r0, r3
   bfa28:	f7fd bd36 	b.w	bd498 <log_set_callbacks>

000bfa2c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bfa2e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfa30:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bfa32:	4668      	mov	r0, sp
   bfa34:	f7ff fec8 	bl	bf7c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfa38:	466a      	mov	r2, sp
   bfa3a:	4629      	mov	r1, r5
   bfa3c:	4620      	mov	r0, r4
   bfa3e:	f7ff fd53 	bl	bf4e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfa42:	a801      	add	r0, sp, #4
   bfa44:	f7f5 fc42 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa48:	4620      	mov	r0, r4
   bfa4a:	b003      	add	sp, #12
   bfa4c:	bd30      	pop	{r4, r5, pc}

000bfa4e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfa4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfa50:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfa52:	4604      	mov	r4, r0
   bfa54:	4668      	mov	r0, sp
   bfa56:	f7ff feb7 	bl	bf7c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfa5a:	466a      	mov	r2, sp
   bfa5c:	4629      	mov	r1, r5
   bfa5e:	4620      	mov	r0, r4
   bfa60:	f7ff fd1e 	bl	bf4a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfa64:	a801      	add	r0, sp, #4
   bfa66:	f7f5 fc31 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa6a:	4620      	mov	r0, r4
   bfa6c:	b003      	add	sp, #12
   bfa6e:	bd30      	pop	{r4, r5, pc}

000bfa70 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfa70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfa72:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfa74:	4604      	mov	r4, r0
   bfa76:	4668      	mov	r0, sp
   bfa78:	f7ff fea6 	bl	bf7c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfa7c:	466a      	mov	r2, sp
   bfa7e:	4629      	mov	r1, r5
   bfa80:	4620      	mov	r0, r4
   bfa82:	f7ff fcb6 	bl	bf3f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfa86:	a801      	add	r0, sp, #4
   bfa88:	f7f5 fc20 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa8c:	4620      	mov	r0, r4
   bfa8e:	b003      	add	sp, #12
   bfa90:	bd30      	pop	{r4, r5, pc}
	...

000bfa94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfa94:	b570      	push	{r4, r5, r6, lr}
   bfa96:	b08a      	sub	sp, #40	; 0x28
   bfa98:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfa9a:	4601      	mov	r1, r0
   bfa9c:	a804      	add	r0, sp, #16
   bfa9e:	f7ff ffc5 	bl	bfa2c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfaa2:	4e14      	ldr	r6, [pc, #80]	; (bfaf4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfaa4:	a804      	add	r0, sp, #16
   bfaa6:	f7ff fd37 	bl	bf518 <_ZN5spark18JSONObjectIterator4nextEv>
   bfaaa:	b1e8      	cbz	r0, bfae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfaac:	a904      	add	r1, sp, #16
   bfaae:	4668      	mov	r0, sp
   bfab0:	f7ff ffcd 	bl	bfa4e <_ZNK5spark18JSONObjectIterator4nameEv>
   bfab4:	9802      	ldr	r0, [sp, #8]
   bfab6:	4631      	mov	r1, r6
   bfab8:	f7ff fe66 	bl	bf788 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfabc:	4604      	mov	r4, r0
   bfabe:	b110      	cbz	r0, bfac6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfac0:	1e2c      	subs	r4, r5, #0
   bfac2:	bf18      	it	ne
   bfac4:	2401      	movne	r4, #1
   bfac6:	a801      	add	r0, sp, #4
   bfac8:	f7f5 fc00 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfacc:	2c00      	cmp	r4, #0
   bface:	d0e9      	beq.n	bfaa4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfad0:	a904      	add	r1, sp, #16
   bfad2:	4668      	mov	r0, sp
   bfad4:	f7ff ffcc 	bl	bfa70 <_ZNK5spark18JSONObjectIterator5valueEv>
   bfad8:	4668      	mov	r0, sp
   bfada:	f7ff fcc0 	bl	bf45e <_ZNK5spark9JSONValue5toIntEv>
   bfade:	6028      	str	r0, [r5, #0]
   bfae0:	a801      	add	r0, sp, #4
   bfae2:	f7f5 fbf3 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfae6:	e7dd      	b.n	bfaa4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfae8:	a805      	add	r0, sp, #20
   bfaea:	f7f5 fbef 	bl	b52cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfaee:	b00a      	add	sp, #40	; 0x28
   bfaf0:	bd70      	pop	{r4, r5, r6, pc}
   bfaf2:	bf00      	nop
   bfaf4:	000c5a29 	.word	0x000c5a29

000bfaf8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfaf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfafa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfafc:	4620      	mov	r0, r4
   bfafe:	4913      	ldr	r1, [pc, #76]	; (bfb4c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfb00:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfb02:	f002 fb91 	bl	c2228 <strcmp>
   bfb06:	b950      	cbnz	r0, bfb1e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfb08:	f001 fb02 	bl	c1110 <_Z16_fetch_usbserialv>
   bfb0c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfb10:	f001 faee 	bl	c10f0 <_ZN9USBSerial5beginEl>
}
   bfb14:	b003      	add	sp, #12
   bfb16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfb1a:	f001 baf9 	b.w	c1110 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfb1e:	490c      	ldr	r1, [pc, #48]	; (bfb50 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfb20:	4620      	mov	r0, r4
   bfb22:	f002 fb81 	bl	c2228 <strcmp>
   bfb26:	b978      	cbnz	r0, bfb48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfb28:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfb2c:	a901      	add	r1, sp, #4
   bfb2e:	4628      	mov	r0, r5
        int baud = 9600;
   bfb30:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfb32:	f7ff ffaf 	bl	bfa94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfb36:	f001 fc83 	bl	c1440 <_Z22__fetch_global_Serial1v>
   bfb3a:	9901      	ldr	r1, [sp, #4]
   bfb3c:	f001 fa80 	bl	c1040 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfb40:	f001 fc7e 	bl	c1440 <_Z22__fetch_global_Serial1v>
}
   bfb44:	b003      	add	sp, #12
   bfb46:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfb48:	2000      	movs	r0, #0
   bfb4a:	e7fb      	b.n	bfb44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfb4c:	000c5a2e 	.word	0x000c5a2e
   bfb50:	000c5a35 	.word	0x000c5a35

000bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfb54:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfb56:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfb5a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfb5c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfb5e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfb62:	42ae      	cmp	r6, r5
   bfb64:	d005      	beq.n	bfb72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfb66:	f105 0008 	add.w	r0, r5, #8
   bfb6a:	f7ff fff3 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfb6e:	3514      	adds	r5, #20
   bfb70:	e7f7      	b.n	bfb62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfb72:	6820      	ldr	r0, [r4, #0]
   bfb74:	f7fd fd86 	bl	bd684 <free>
}
   bfb78:	4620      	mov	r0, r4
   bfb7a:	bd70      	pop	{r4, r5, r6, pc}

000bfb7c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfb7c:	b510      	push	{r4, lr}
   bfb7e:	4604      	mov	r4, r0
   bfb80:	300c      	adds	r0, #12
   bfb82:	f7ff ffe7 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfb86:	4620      	mov	r0, r4
   bfb88:	f7fe f9a9 	bl	bdede <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfb8c:	4620      	mov	r0, r4
   bfb8e:	bd10      	pop	{r4, pc}

000bfb90 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfb90:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfb92:	4b04      	ldr	r3, [pc, #16]	; (bfba4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfb94:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfb96:	f840 3b04 	str.w	r3, [r0], #4
   bfb9a:	f7ff ffef 	bl	bfb7c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfb9e:	4620      	mov	r0, r4
   bfba0:	bd10      	pop	{r4, pc}
   bfba2:	bf00      	nop
   bfba4:	000c48e4 	.word	0x000c48e4

000bfba8 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfba8:	b510      	push	{r4, lr}
   bfbaa:	4604      	mov	r4, r0
   bfbac:	f7ff fff0 	bl	bfb90 <_ZN5spark16StreamLogHandlerD1Ev>
   bfbb0:	4620      	mov	r0, r4
   bfbb2:	2124      	movs	r1, #36	; 0x24
   bfbb4:	f7f4 fa75 	bl	b40a2 <_ZdlPvj>
   bfbb8:	4620      	mov	r0, r4
   bfbba:	bd10      	pop	{r4, pc}

000bfbbc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfbbc:	b510      	push	{r4, lr}
   bfbbe:	4b03      	ldr	r3, [pc, #12]	; (bfbcc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfbc0:	6003      	str	r3, [r0, #0]
   bfbc2:	4604      	mov	r4, r0
   bfbc4:	f7ff ffe4 	bl	bfb90 <_ZN5spark16StreamLogHandlerD1Ev>
   bfbc8:	4620      	mov	r0, r4
   bfbca:	bd10      	pop	{r4, pc}
   bfbcc:	000c5ad0 	.word	0x000c5ad0

000bfbd0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfbd0:	b510      	push	{r4, lr}
   bfbd2:	4604      	mov	r4, r0
   bfbd4:	f7ff fff2 	bl	bfbbc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfbd8:	4620      	mov	r0, r4
   bfbda:	2124      	movs	r1, #36	; 0x24
   bfbdc:	f7f4 fa61 	bl	b40a2 <_ZdlPvj>
   bfbe0:	4620      	mov	r0, r4
   bfbe2:	bd10      	pop	{r4, pc}

000bfbe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfbe4:	2200      	movs	r2, #0
   bfbe6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfbea:	b510      	push	{r4, lr}
        capacity_(0) {
   bfbec:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfbee:	680c      	ldr	r4, [r1, #0]
   bfbf0:	6004      	str	r4, [r0, #0]
   bfbf2:	684c      	ldr	r4, [r1, #4]
   bfbf4:	6044      	str	r4, [r0, #4]
   bfbf6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfbf8:	600a      	str	r2, [r1, #0]
   bfbfa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfbfc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfbfe:	608a      	str	r2, [r1, #8]
}
   bfc00:	bd10      	pop	{r4, pc}

000bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfc02:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfc04:	6803      	ldr	r3, [r0, #0]
   bfc06:	4604      	mov	r4, r0
   bfc08:	6818      	ldr	r0, [r3, #0]
   bfc0a:	f7fd fa35 	bl	bd078 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfc0e:	4620      	mov	r0, r4
   bfc10:	bd10      	pop	{r4, pc}
	...

000bfc14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc18:	b087      	sub	sp, #28
   bfc1a:	4680      	mov	r8, r0
   bfc1c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfc1e:	4b1c      	ldr	r3, [pc, #112]	; (bfc90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfc20:	685b      	ldr	r3, [r3, #4]
   bfc22:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfc26:	4689      	mov	r9, r1
   bfc28:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfc2a:	b96b      	cbnz	r3, bfc48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfc2c:	f7ff fed0 	bl	bf9d0 <_ZN5spark10LogManager8instanceEv>
   bfc30:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfc32:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfc36:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfc38:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfc3a:	f7ff fda3 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfc3e:	7b23      	ldrb	r3, [r4, #12]
   bfc40:	b12b      	cbz	r3, bfc4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfc42:	a805      	add	r0, sp, #20
   bfc44:	f7ff ffdd 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfc48:	b007      	add	sp, #28
   bfc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfc4e:	2301      	movs	r3, #1
   bfc50:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfc52:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfc56:	fa5f f989 	uxtb.w	r9, r9
   bfc5a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfc5e:	45aa      	cmp	sl, r5
   bfc60:	d012      	beq.n	bfc88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfc62:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfc66:	4631      	mov	r1, r6
   bfc68:	1d38      	adds	r0, r7, #4
   bfc6a:	f7ff fe3d 	bl	bf8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfc6e:	4581      	cmp	r9, r0
   bfc70:	d3f5      	bcc.n	bfc5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfc72:	683b      	ldr	r3, [r7, #0]
   bfc74:	9a03      	ldr	r2, [sp, #12]
   bfc76:	9200      	str	r2, [sp, #0]
   bfc78:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfc7c:	464a      	mov	r2, r9
   bfc7e:	4633      	mov	r3, r6
   bfc80:	4641      	mov	r1, r8
   bfc82:	4638      	mov	r0, r7
   bfc84:	47d8      	blx	fp
   bfc86:	e7ea      	b.n	bfc5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfc88:	2300      	movs	r3, #0
   bfc8a:	7323      	strb	r3, [r4, #12]
   bfc8c:	e7d9      	b.n	bfc42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfc8e:	bf00      	nop
   bfc90:	e000ed00 	.word	0xe000ed00

000bfc94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfc94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfc98:	469b      	mov	fp, r3
   bfc9a:	4b1a      	ldr	r3, [pc, #104]	; (bfd04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfc9c:	685b      	ldr	r3, [r3, #4]
   bfc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfca2:	4680      	mov	r8, r0
   bfca4:	4689      	mov	r9, r1
   bfca6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfca8:	b96b      	cbnz	r3, bfcc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfcaa:	f7ff fe91 	bl	bf9d0 <_ZN5spark10LogManager8instanceEv>
   bfcae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfcb0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfcb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfcb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfcb8:	f7ff fd64 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfcbc:	7b23      	ldrb	r3, [r4, #12]
   bfcbe:	b12b      	cbz	r3, bfccc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfcc0:	a801      	add	r0, sp, #4
   bfcc2:	f7ff ff9e 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfcc6:	b003      	add	sp, #12
   bfcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfccc:	2301      	movs	r3, #1
   bfcce:	7323      	strb	r3, [r4, #12]
   bfcd0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfcd4:	b2f6      	uxtb	r6, r6
   bfcd6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfcda:	4555      	cmp	r5, sl
   bfcdc:	d00e      	beq.n	bfcfc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfcde:	f855 7b04 	ldr.w	r7, [r5], #4
   bfce2:	4659      	mov	r1, fp
   bfce4:	1d38      	adds	r0, r7, #4
   bfce6:	f7ff fdff 	bl	bf8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfcea:	4286      	cmp	r6, r0
   bfcec:	d3f5      	bcc.n	bfcda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfcee:	683b      	ldr	r3, [r7, #0]
   bfcf0:	464a      	mov	r2, r9
   bfcf2:	68db      	ldr	r3, [r3, #12]
   bfcf4:	4641      	mov	r1, r8
   bfcf6:	4638      	mov	r0, r7
   bfcf8:	4798      	blx	r3
   bfcfa:	e7ee      	b.n	bfcda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfcfc:	2300      	movs	r3, #0
   bfcfe:	7323      	strb	r3, [r4, #12]
   bfd00:	e7de      	b.n	bfcc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfd02:	bf00      	nop
   bfd04:	e000ed00 	.word	0xe000ed00

000bfd08 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfd08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfd0c:	4b16      	ldr	r3, [pc, #88]	; (bfd68 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfd0e:	685b      	ldr	r3, [r3, #4]
   bfd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfd14:	4605      	mov	r5, r0
   bfd16:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bfd18:	bb1b      	cbnz	r3, bfd62 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfd1a:	f7ff fe59 	bl	bf9d0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfd1e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfd22:	4604      	mov	r4, r0
   bfd24:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfd26:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfd28:	f7ff fd2c 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
   bfd2c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bfd30:	2446      	movs	r4, #70	; 0x46
   bfd32:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfd36:	45b0      	cmp	r8, r6
   bfd38:	d109      	bne.n	bfd4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bfd3a:	a801      	add	r0, sp, #4
   bfd3c:	f7ff ff61 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bfd40:	42a5      	cmp	r5, r4
   bfd42:	bfb4      	ite	lt
   bfd44:	2000      	movlt	r0, #0
   bfd46:	2001      	movge	r0, #1
}
   bfd48:	b002      	add	sp, #8
   bfd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bfd4e:	f856 0b04 	ldr.w	r0, [r6], #4
   bfd52:	4639      	mov	r1, r7
   bfd54:	3004      	adds	r0, #4
   bfd56:	f7ff fdc7 	bl	bf8e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bfd5a:	4284      	cmp	r4, r0
   bfd5c:	bfa8      	it	ge
   bfd5e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bfd60:	e7e9      	b.n	bfd36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bfd62:	2000      	movs	r0, #0
   bfd64:	e7f0      	b.n	bfd48 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bfd66:	bf00      	nop
   bfd68:	e000ed00 	.word	0xe000ed00

000bfd6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfd6e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bfd72:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfd74:	4604      	mov	r4, r0
   bfd76:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfd78:	db0d      	blt.n	bfd96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bfd7a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bfd7c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bfd7e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bfd80:	dd04      	ble.n	bfd8c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bfd82:	00b9      	lsls	r1, r7, #2
   bfd84:	f7fd fc86 	bl	bd694 <realloc>
            if (!d) {
   bfd88:	b918      	cbnz	r0, bfd92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bfd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bfd8c:	f7fd fc7a 	bl	bd684 <free>
        T* d = nullptr;
   bfd90:	2000      	movs	r0, #0
        data_ = d;
   bfd92:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bfd94:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bfd96:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bfd98:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bfd9a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bfd9e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfda0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bfda4:	1d08      	adds	r0, r1, #4
   bfda6:	f002 f9c9 	bl	c213c <memmove>
    new(p) T(std::move(value));
   bfdaa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bfdae:	6863      	ldr	r3, [r4, #4]
   bfdb0:	3301      	adds	r3, #1
   bfdb2:	6063      	str	r3, [r4, #4]
    return true;
   bfdb4:	2001      	movs	r0, #1
   bfdb6:	e7e8      	b.n	bfd8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bfdb8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bfdba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfdbe:	4604      	mov	r4, r0
   bfdc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfdc2:	9301      	str	r3, [sp, #4]
   bfdc4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bfdc6:	f7ff fcdd 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bfdca:	e9d4 3200 	ldrd	r3, r2, [r4]
   bfdce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bfdd2:	4293      	cmp	r3, r2
   bfdd4:	4619      	mov	r1, r3
   bfdd6:	d00b      	beq.n	bfdf0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bfdd8:	6809      	ldr	r1, [r1, #0]
   bfdda:	42a9      	cmp	r1, r5
   bfddc:	f103 0304 	add.w	r3, r3, #4
   bfde0:	d1f7      	bne.n	bfdd2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bfde2:	a801      	add	r0, sp, #4
   bfde4:	f7ff ff0d 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfde8:	2500      	movs	r5, #0
}
   bfdea:	4628      	mov	r0, r5
   bfdec:	b003      	add	sp, #12
   bfdee:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bfdf0:	4629      	mov	r1, r5
   bfdf2:	4620      	mov	r0, r4
   bfdf4:	f7ff ffba 	bl	bfd6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bfdf8:	4605      	mov	r5, r0
   bfdfa:	2800      	cmp	r0, #0
   bfdfc:	d0f1      	beq.n	bfde2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bfdfe:	6863      	ldr	r3, [r4, #4]
   bfe00:	2b01      	cmp	r3, #1
   bfe02:	d101      	bne.n	bfe08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bfe04:	f7ff fe00 	bl	bfa08 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfe08:	a801      	add	r0, sp, #4
   bfe0a:	f7ff fefa 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfe0e:	e7ec      	b.n	bfdea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bfe10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfe10:	b570      	push	{r4, r5, r6, lr}
   bfe12:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bfe14:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfe18:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bfe1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bfe1e:	4282      	cmp	r2, r0
   bfe20:	d00f      	beq.n	bfe42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bfe22:	4601      	mov	r1, r0
            if (*p == value) {
   bfe24:	681d      	ldr	r5, [r3, #0]
   bfe26:	f851 6b04 	ldr.w	r6, [r1], #4
   bfe2a:	42ae      	cmp	r6, r5
   bfe2c:	d107      	bne.n	bfe3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfe2e:	1a52      	subs	r2, r2, r1
   bfe30:	f002 f984 	bl	c213c <memmove>
    --size_;
   bfe34:	6863      	ldr	r3, [r4, #4]
   bfe36:	3b01      	subs	r3, #1
   bfe38:	6063      	str	r3, [r4, #4]
    return true;
   bfe3a:	2001      	movs	r0, #1
}
   bfe3c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bfe3e:	4608      	mov	r0, r1
   bfe40:	e7ed      	b.n	bfe1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bfe42:	2000      	movs	r0, #0
   bfe44:	e7fa      	b.n	bfe3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bfe46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfe46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bfe48:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfe4c:	4604      	mov	r4, r0
   bfe4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bfe50:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe52:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bfe54:	f7ff fc96 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bfe58:	a901      	add	r1, sp, #4
   bfe5a:	4620      	mov	r0, r4
   bfe5c:	f7ff ffd8 	bl	bfe10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bfe60:	b118      	cbz	r0, bfe6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bfe62:	6863      	ldr	r3, [r4, #4]
   bfe64:	b90b      	cbnz	r3, bfe6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bfe66:	f7ff fddb 	bl	bfa20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfe6a:	a803      	add	r0, sp, #12
   bfe6c:	f7ff fec9 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfe70:	b004      	add	sp, #16
   bfe72:	bd10      	pop	{r4, pc}

000bfe74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bfe74:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bfe76:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bfe7a:	2318      	movs	r3, #24
   bfe7c:	4604      	mov	r4, r0
   bfe7e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bfe82:	42ae      	cmp	r6, r5
   bfe84:	d015      	beq.n	bfeb2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bfe86:	f105 0110 	add.w	r1, r5, #16
   bfe8a:	4620      	mov	r0, r4
   bfe8c:	f7ff ffc0 	bl	bfe10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bfe90:	6863      	ldr	r3, [r4, #4]
   bfe92:	b90b      	cbnz	r3, bfe98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bfe94:	f7ff fdc4 	bl	bfa20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bfe98:	69e0      	ldr	r0, [r4, #28]
   bfe9a:	6929      	ldr	r1, [r5, #16]
   bfe9c:	6803      	ldr	r3, [r0, #0]
   bfe9e:	68db      	ldr	r3, [r3, #12]
   bfea0:	4798      	blx	r3
        if (h.stream) {
   bfea2:	6969      	ldr	r1, [r5, #20]
   bfea4:	b119      	cbz	r1, bfeae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bfea6:	6a20      	ldr	r0, [r4, #32]
   bfea8:	6803      	ldr	r3, [r0, #0]
   bfeaa:	68db      	ldr	r3, [r3, #12]
   bfeac:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bfeae:	3518      	adds	r5, #24
   bfeb0:	e7e7      	b.n	bfe82 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bfeb2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfeb6:	2618      	movs	r6, #24
   bfeb8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfebc:	42ae      	cmp	r6, r5
   bfebe:	d004      	beq.n	bfeca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bfec0:	4628      	mov	r0, r5
   bfec2:	f000 fea9 	bl	c0c18 <_ZN6StringD1Ev>
   bfec6:	3518      	adds	r5, #24
   bfec8:	e7f8      	b.n	bfebc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bfeca:	2300      	movs	r3, #0
   bfecc:	6163      	str	r3, [r4, #20]
}
   bfece:	bd70      	pop	{r4, r5, r6, pc}

000bfed0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bfed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bfed2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bfed4:	f7ff fda4 	bl	bfa20 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfed8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bfedc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfede:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfee0:	f7ff fc50 	bl	bf784 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bfee4:	4620      	mov	r0, r4
   bfee6:	f7ff ffc5 	bl	bfe74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bfeea:	a801      	add	r0, sp, #4
   bfeec:	f7ff fe89 	bl	bfc02 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bfef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bfef2:	b108      	cbz	r0, bfef8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bfef4:	f7fd f8b0 	bl	bd058 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bfef8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfefc:	2618      	movs	r6, #24
   bfefe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bff02:	42ae      	cmp	r6, r5
   bff04:	d004      	beq.n	bff10 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bff06:	4628      	mov	r0, r5
   bff08:	f000 fe86 	bl	c0c18 <_ZN6StringD1Ev>
   bff0c:	3518      	adds	r5, #24
   bff0e:	e7f8      	b.n	bff02 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bff10:	6920      	ldr	r0, [r4, #16]
   bff12:	f7fd fbb7 	bl	bd684 <free>
   bff16:	6820      	ldr	r0, [r4, #0]
   bff18:	f7fd fbb4 	bl	bd684 <free>
}
   bff1c:	4620      	mov	r0, r4
   bff1e:	b002      	add	sp, #8
   bff20:	bd70      	pop	{r4, r5, r6, pc}
	...

000bff24 <__tcf_2>:
    static LogManager mgr;
   bff24:	4801      	ldr	r0, [pc, #4]	; (bff2c <__tcf_2+0x8>)
   bff26:	f7ff bfd3 	b.w	bfed0 <_ZN5spark10LogManagerD1Ev>
   bff2a:	bf00      	nop
   bff2c:	2003e674 	.word	0x2003e674

000bff30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bff30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bff32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bff34:	4604      	mov	r4, r0
   bff36:	460d      	mov	r5, r1
   bff38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bff3a:	d915      	bls.n	bff68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bff3c:	4290      	cmp	r0, r2
   bff3e:	d214      	bcs.n	bff6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bff40:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bff44:	1a75      	subs	r5, r6, r1
   bff46:	f1a1 0714 	sub.w	r7, r1, #20
   bff4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bff4c:	42b7      	cmp	r7, r6
   bff4e:	d01a      	beq.n	bff86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bff50:	b11c      	cbz	r4, bff5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bff52:	4631      	mov	r1, r6
   bff54:	4620      	mov	r0, r4
   bff56:	f7ff fc78 	bl	bf84a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bff5a:	f106 0008 	add.w	r0, r6, #8
   bff5e:	f7ff fdf9 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bff62:	3e14      	subs	r6, #20
   bff64:	3c14      	subs	r4, #20
   bff66:	e7f1      	b.n	bff4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bff68:	d00d      	beq.n	bff86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bff6a:	42b5      	cmp	r5, r6
   bff6c:	d00b      	beq.n	bff86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bff6e:	b11c      	cbz	r4, bff78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bff70:	4629      	mov	r1, r5
   bff72:	4620      	mov	r0, r4
   bff74:	f7ff fc69 	bl	bf84a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bff78:	f105 0008 	add.w	r0, r5, #8
   bff7c:	f7ff fdea 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bff80:	3514      	adds	r5, #20
   bff82:	3414      	adds	r4, #20
   bff84:	e7f1      	b.n	bff6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bff86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bff88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bff88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bff8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bff8c:	4604      	mov	r4, r0
   bff8e:	460d      	mov	r5, r1
   bff90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bff92:	d914      	bls.n	bffbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bff94:	4290      	cmp	r0, r2
   bff96:	d213      	bcs.n	bffc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bff98:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bff9c:	1a75      	subs	r5, r6, r1
   bff9e:	f1a1 0710 	sub.w	r7, r1, #16
   bffa2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bffa4:	42b7      	cmp	r7, r6
   bffa6:	d018      	beq.n	bffda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bffa8:	b11c      	cbz	r4, bffb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bffaa:	4631      	mov	r1, r6
   bffac:	4620      	mov	r0, r4
   bffae:	f000 feaf 	bl	c0d10 <_ZN6StringC1EOS_>
                end->~T();
   bffb2:	4630      	mov	r0, r6
   bffb4:	f000 fe30 	bl	c0c18 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bffb8:	3e10      	subs	r6, #16
   bffba:	3c10      	subs	r4, #16
   bffbc:	e7f2      	b.n	bffa4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bffbe:	d00c      	beq.n	bffda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bffc0:	42b5      	cmp	r5, r6
   bffc2:	d00a      	beq.n	bffda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bffc4:	b11c      	cbz	r4, bffce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bffc6:	4629      	mov	r1, r5
   bffc8:	4620      	mov	r0, r4
   bffca:	f000 fea1 	bl	c0d10 <_ZN6StringC1EOS_>
                p->~T();
   bffce:	4628      	mov	r0, r5
   bffd0:	f000 fe22 	bl	c0c18 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bffd4:	3510      	adds	r5, #16
   bffd6:	3410      	adds	r4, #16
   bffd8:	e7f2      	b.n	bffc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bffda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bffdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bffdc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bffde:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bffe0:	4605      	mov	r5, r0
        if (n > 0) {
   bffe2:	dd11      	ble.n	c0008 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bffe4:	0130      	lsls	r0, r6, #4
   bffe6:	f7fd fb45 	bl	bd674 <malloc>
            if (!d) {
   bffea:	4604      	mov	r4, r0
   bffec:	b158      	cbz	r0, c0006 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bffee:	e9d5 1200 	ldrd	r1, r2, [r5]
   bfff2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bfff6:	f7ff ffc7 	bl	bff88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bfffa:	6828      	ldr	r0, [r5, #0]
   bfffc:	f7fd fb42 	bl	bd684 <free>
        data_ = d;
   c0000:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0002:	60ae      	str	r6, [r5, #8]
        return true;
   c0004:	2001      	movs	r0, #1
    }
   c0006:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0008:	2400      	movs	r4, #0
   c000a:	e7f6      	b.n	bfffa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c000c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c000c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0010:	4690      	mov	r8, r2
   c0012:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0014:	2300      	movs	r3, #0
   c0016:	9103      	str	r1, [sp, #12]
    return size_;
   c0018:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c001c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c001e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0020:	4299      	cmp	r1, r3
        capacity_(0) {
   c0022:	e9c0 3300 	strd	r3, r3, [r0]
   c0026:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c002a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c002e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0032:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0034:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0036:	dc23      	bgt.n	c0080 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0038:	e9d8 5700 	ldrd	r5, r7, [r8]
   c003c:	2314      	movs	r3, #20
   c003e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0042:	42af      	cmp	r7, r5
   c0044:	d03b      	beq.n	c00be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0046:	4629      	mov	r1, r5
   c0048:	a80b      	add	r0, sp, #44	; 0x2c
   c004a:	f000 fe61 	bl	c0d10 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c004e:	a90b      	add	r1, sp, #44	; 0x2c
   c0050:	a80f      	add	r0, sp, #60	; 0x3c
   c0052:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0054:	f000 fe5c 	bl	c0d10 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0058:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c005c:	4299      	cmp	r1, r3
   c005e:	da1b      	bge.n	c0098 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0060:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0062:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0064:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0068:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c006c:	4631      	mov	r1, r6
   c006e:	f106 0010 	add.w	r0, r6, #16
   c0072:	f7ff ff89 	bl	bff88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0076:	b9ee      	cbnz	r6, c00b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c007a:	3301      	adds	r3, #1
   c007c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c007e:	e011      	b.n	c00a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0080:	a808      	add	r0, sp, #32
   c0082:	f7ff ffab 	bl	bffdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0086:	2800      	cmp	r0, #0
   c0088:	d1d6      	bne.n	c0038 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c008a:	a808      	add	r0, sp, #32
   c008c:	f7fd ff27 	bl	bdede <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0090:	4620      	mov	r0, r4
   c0092:	b015      	add	sp, #84	; 0x54
   c0094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0098:	3101      	adds	r1, #1
   c009a:	a808      	add	r0, sp, #32
   c009c:	f7ff ff9e 	bl	bffdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c00a0:	2800      	cmp	r0, #0
   c00a2:	d1dd      	bne.n	c0060 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c00a4:	a80f      	add	r0, sp, #60	; 0x3c
   c00a6:	f000 fdb7 	bl	c0c18 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c00aa:	a80b      	add	r0, sp, #44	; 0x2c
   c00ac:	f000 fdb4 	bl	c0c18 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c00b0:	3514      	adds	r5, #20
   c00b2:	e7c6      	b.n	c0042 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c00b4:	a90f      	add	r1, sp, #60	; 0x3c
   c00b6:	4630      	mov	r0, r6
   c00b8:	f000 fe2a 	bl	c0d10 <_ZN6StringC1EOS_>
   c00bc:	e7dc      	b.n	c0078 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c00be:	2600      	movs	r6, #0
   c00c0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c00c4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c00c6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c00ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c00ce:	429e      	cmp	r6, r3
   c00d0:	da7c      	bge.n	c01cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c00d2:	0133      	lsls	r3, r6, #4
   c00d4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c00d6:	9306      	str	r3, [sp, #24]
        if (!category) {
   c00d8:	b90b      	cbnz	r3, c00de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c00da:	3601      	adds	r6, #1
   c00dc:	e7f5      	b.n	c00ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c00de:	2300      	movs	r3, #0
   c00e0:	9307      	str	r3, [sp, #28]
   c00e2:	fb09 f306 	mul.w	r3, r9, r6
   c00e6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c00e8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c00ea:	a907      	add	r1, sp, #28
   c00ec:	a806      	add	r0, sp, #24
   c00ee:	f7ff fb22 	bl	bf736 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c00f2:	4682      	mov	sl, r0
   c00f4:	2800      	cmp	r0, #0
   c00f6:	d0f0      	beq.n	c00da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c00f8:	f04f 0300 	mov.w	r3, #0
   c00fc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0100:	4601      	mov	r1, r0
   c0102:	9a07      	ldr	r2, [sp, #28]
   c0104:	f10d 0317 	add.w	r3, sp, #23
   c0108:	4628      	mov	r0, r5
   c010a:	f7ff fbb1 	bl	bf870 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c010e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0112:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0114:	2f00      	cmp	r7, #0
   c0116:	d14a      	bne.n	c01ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0118:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c011c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0120:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0124:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0128:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c012c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0130:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0132:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0136:	4293      	cmp	r3, r2
   c0138:	db17      	blt.n	c016a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c013a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c013e:	f1ba 0f00 	cmp.w	sl, #0
   c0142:	dd30      	ble.n	c01a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0144:	fb09 f00a 	mul.w	r0, r9, sl
   c0148:	f7fd fa94 	bl	bd674 <malloc>
            if (!d) {
   c014c:	4683      	mov	fp, r0
   c014e:	b360      	cbz	r0, c01aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0150:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0154:	fb09 1202 	mla	r2, r9, r2, r1
   c0158:	f7ff feea 	bl	bff30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c015c:	6828      	ldr	r0, [r5, #0]
   c015e:	f7fd fa91 	bl	bd684 <free>
        data_ = d;
   c0162:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0166:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c016a:	682b      	ldr	r3, [r5, #0]
   c016c:	9a01      	ldr	r2, [sp, #4]
   c016e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0172:	686a      	ldr	r2, [r5, #4]
   c0174:	4651      	mov	r1, sl
   c0176:	fb09 3202 	mla	r2, r9, r2, r3
   c017a:	f10a 0014 	add.w	r0, sl, #20
   c017e:	f7ff fed7 	bl	bff30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0182:	f1ba 0f00 	cmp.w	sl, #0
   c0186:	d003      	beq.n	c0190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0188:	a90f      	add	r1, sp, #60	; 0x3c
   c018a:	4650      	mov	r0, sl
   c018c:	f7ff fb5d 	bl	bf84a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0190:	686b      	ldr	r3, [r5, #4]
   c0192:	3301      	adds	r3, #1
   c0194:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0196:	a811      	add	r0, sp, #68	; 0x44
   c0198:	f7ff fcdc 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c019c:	b13f      	cbz	r7, c01ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c019e:	a80b      	add	r0, sp, #44	; 0x2c
   c01a0:	f7ff fcd8 	bl	bfb54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c01a4:	e771      	b.n	c008a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c01a6:	46bb      	mov	fp, r7
   c01a8:	e7d8      	b.n	c015c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c01aa:	2701      	movs	r7, #1
   c01ac:	e7f3      	b.n	c0196 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c01ae:	9b01      	ldr	r3, [sp, #4]
   c01b0:	682d      	ldr	r5, [r5, #0]
   c01b2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c01b6:	9b06      	ldr	r3, [sp, #24]
   c01b8:	781b      	ldrb	r3, [r3, #0]
   c01ba:	b92b      	cbnz	r3, c01c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c01bc:	f8d8 3000 	ldr.w	r3, [r8]
   c01c0:	9a02      	ldr	r2, [sp, #8]
   c01c2:	4413      	add	r3, r2
   c01c4:	7c1b      	ldrb	r3, [r3, #16]
   c01c6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c01c8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c01ca:	e78e      	b.n	c00ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01cc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c01ce:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01d0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c01d2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01d4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c01d6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c01d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c01da:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01dc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c01de:	60a2      	str	r2, [r4, #8]
   c01e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c01e2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01e4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c01e6:	60e2      	str	r2, [r4, #12]
   c01e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c01ea:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c01ec:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c01ee:	6122      	str	r2, [r4, #16]
   c01f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c01f2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c01f4:	9b03      	ldr	r3, [sp, #12]
   c01f6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c01f8:	6162      	str	r2, [r4, #20]
   c01fa:	7623      	strb	r3, [r4, #24]
   c01fc:	e7cf      	b.n	c019e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0200 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0200:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0202:	4604      	mov	r4, r0
   c0204:	b087      	sub	sp, #28
   c0206:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0208:	4626      	mov	r6, r4
        stream_(&stream) {
   c020a:	4619      	mov	r1, r3
   c020c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c020e:	4617      	mov	r7, r2
        stream_(&stream) {
   c0210:	f7f5 fcc4 	bl	b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0214:	4b0b      	ldr	r3, [pc, #44]	; (c0244 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0216:	f846 3b04 	str.w	r3, [r6], #4
   c021a:	4669      	mov	r1, sp
   c021c:	a803      	add	r0, sp, #12
   c021e:	f7f5 fcbd 	bl	b5b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0222:	aa03      	add	r2, sp, #12
   c0224:	4639      	mov	r1, r7
   c0226:	4630      	mov	r0, r6
   c0228:	f7ff fef0 	bl	c000c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c022c:	a803      	add	r0, sp, #12
   c022e:	f7f5 fa21 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0232:	4668      	mov	r0, sp
   c0234:	f7f5 fa1e 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0238:	4b03      	ldr	r3, [pc, #12]	; (c0248 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c023a:	6023      	str	r3, [r4, #0]
}
   c023c:	4620      	mov	r0, r4
        stream_(&stream) {
   c023e:	6225      	str	r5, [r4, #32]
}
   c0240:	b007      	add	sp, #28
   c0242:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0244:	000c48e4 	.word	0x000c48e4
   c0248:	000c5ab8 	.word	0x000c5ab8

000c024c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c024c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c024e:	460f      	mov	r7, r1
   c0250:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0252:	491d      	ldr	r1, [pc, #116]	; (c02c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0254:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0256:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0258:	4616      	mov	r6, r2
   c025a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c025c:	f001 ffe4 	bl	c2228 <strcmp>
   c0260:	b9c0      	cbnz	r0, c0294 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0262:	b1a4      	cbz	r4, c028e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0264:	4629      	mov	r1, r5
   c0266:	a801      	add	r0, sp, #4
   c0268:	f7ff fcbc 	bl	bfbe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c026c:	4917      	ldr	r1, [pc, #92]	; (c02cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c026e:	2024      	movs	r0, #36	; 0x24
   c0270:	f001 f90a 	bl	c1488 <_ZnwjRKSt9nothrow_t>
   c0274:	4605      	mov	r5, r0
   c0276:	b130      	cbz	r0, c0286 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0278:	ab01      	add	r3, sp, #4
   c027a:	4632      	mov	r2, r6
   c027c:	4621      	mov	r1, r4
   c027e:	f7ff ffbf 	bl	c0200 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0282:	4b13      	ldr	r3, [pc, #76]	; (c02d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0284:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0286:	a801      	add	r0, sp, #4
   c0288:	f7f5 f9f4 	bl	b5674 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c028c:	462c      	mov	r4, r5
}
   c028e:	4620      	mov	r0, r4
   c0290:	b005      	add	sp, #20
   c0292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0294:	490f      	ldr	r1, [pc, #60]	; (c02d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0296:	4638      	mov	r0, r7
   c0298:	f001 ffc6 	bl	c2228 <strcmp>
   c029c:	b990      	cbnz	r0, c02c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c029e:	2c00      	cmp	r4, #0
   c02a0:	d0f5      	beq.n	c028e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c02a2:	4629      	mov	r1, r5
   c02a4:	a801      	add	r0, sp, #4
   c02a6:	f7ff fc9d 	bl	bfbe4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c02aa:	4908      	ldr	r1, [pc, #32]	; (c02cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c02ac:	2024      	movs	r0, #36	; 0x24
   c02ae:	f001 f8eb 	bl	c1488 <_ZnwjRKSt9nothrow_t>
   c02b2:	4605      	mov	r5, r0
   c02b4:	2800      	cmp	r0, #0
   c02b6:	d0e6      	beq.n	c0286 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c02b8:	ab01      	add	r3, sp, #4
   c02ba:	4632      	mov	r2, r6
   c02bc:	4621      	mov	r1, r4
   c02be:	f7ff ff9f 	bl	c0200 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c02c2:	e7e0      	b.n	c0286 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c02c4:	2400      	movs	r4, #0
   c02c6:	e7e2      	b.n	c028e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c02c8:	000c5a3d 	.word	0x000c5a3d
   c02cc:	000c5bd0 	.word	0x000c5bd0
   c02d0:	000c5ad0 	.word	0x000c5ad0
   c02d4:	000c5a41 	.word	0x000c5a41

000c02d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c02d8:	4b01      	ldr	r3, [pc, #4]	; (c02e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c02da:	4a02      	ldr	r2, [pc, #8]	; (c02e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c02dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c02de:	4770      	bx	lr
   c02e0:	2003e670 	.word	0x2003e670
   c02e4:	000c5a52 	.word	0x000c5a52

000c02e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c02e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c02ec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c02ee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c02f2:	4604      	mov	r4, r0
   c02f4:	460e      	mov	r6, r1
   c02f6:	4617      	mov	r7, r2
   c02f8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c02fa:	f000 ff09 	bl	c1110 <_Z16_fetch_usbserialv>
   c02fe:	4581      	cmp	r9, r0
   c0300:	d04c      	beq.n	c039c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0302:	792b      	ldrb	r3, [r5, #4]
   c0304:	0719      	lsls	r1, r3, #28
   c0306:	d504      	bpl.n	c0312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0308:	696a      	ldr	r2, [r5, #20]
   c030a:	4954      	ldr	r1, [pc, #336]	; (c045c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c030c:	4620      	mov	r0, r4
   c030e:	f7ff fa8d 	bl	bf82c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0312:	f1b8 0f00 	cmp.w	r8, #0
   c0316:	d00d      	beq.n	c0334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0318:	215b      	movs	r1, #91	; 0x5b
   c031a:	4620      	mov	r0, r4
   c031c:	f7ff fa7a 	bl	bf814 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0320:	4641      	mov	r1, r8
   c0322:	4620      	mov	r0, r4
   c0324:	f7ff fa67 	bl	bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0328:	6823      	ldr	r3, [r4, #0]
   c032a:	494d      	ldr	r1, [pc, #308]	; (c0460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c032c:	68db      	ldr	r3, [r3, #12]
   c032e:	2202      	movs	r2, #2
   c0330:	4620      	mov	r0, r4
   c0332:	4798      	blx	r3
    if (attr.has_file) {
   c0334:	792b      	ldrb	r3, [r5, #4]
   c0336:	07da      	lsls	r2, r3, #31
   c0338:	d523      	bpl.n	c0382 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c033a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c033e:	212f      	movs	r1, #47	; 0x2f
   c0340:	4640      	mov	r0, r8
   c0342:	f001 ffee 	bl	c2322 <strrchr>
    if (s1) {
   c0346:	b108      	cbz	r0, c034c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0348:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c034c:	4641      	mov	r1, r8
   c034e:	4620      	mov	r0, r4
   c0350:	f7ff fa51 	bl	bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0354:	792b      	ldrb	r3, [r5, #4]
   c0356:	079b      	lsls	r3, r3, #30
   c0358:	d508      	bpl.n	c036c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c035a:	213a      	movs	r1, #58	; 0x3a
   c035c:	4620      	mov	r0, r4
   c035e:	f7ff fa59 	bl	bf814 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0362:	68ea      	ldr	r2, [r5, #12]
   c0364:	493f      	ldr	r1, [pc, #252]	; (c0464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0366:	4620      	mov	r0, r4
   c0368:	f7ff fa60 	bl	bf82c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c036c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c036e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0370:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0374:	68db      	ldr	r3, [r3, #12]
   c0376:	bf14      	ite	ne
   c0378:	493b      	ldrne	r1, [pc, #236]	; (c0468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c037a:	493c      	ldreq	r1, [pc, #240]	; (c046c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c037c:	2202      	movs	r2, #2
            write(": ", 2);
   c037e:	4620      	mov	r0, r4
   c0380:	4798      	blx	r3
    if (attr.has_function) {
   c0382:	792b      	ldrb	r3, [r5, #4]
   c0384:	0758      	lsls	r0, r3, #29
   c0386:	d51d      	bpl.n	c03c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0388:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c038a:	460b      	mov	r3, r1
   c038c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c038e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0392:	b160      	cbz	r0, c03ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0394:	2820      	cmp	r0, #32
   c0396:	d108      	bne.n	c03aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0398:	4619      	mov	r1, r3
   c039a:	e7f7      	b.n	c038c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c039c:	4834      	ldr	r0, [pc, #208]	; (c0470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c039e:	f000 f966 	bl	c066e <_ZN5spark12NetworkClass9listeningEv>
   c03a2:	2800      	cmp	r0, #0
   c03a4:	d0ad      	beq.n	c0302 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c03a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c03aa:	2828      	cmp	r0, #40	; 0x28
   c03ac:	d1ee      	bne.n	c038c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c03ae:	6823      	ldr	r3, [r4, #0]
   c03b0:	1a52      	subs	r2, r2, r1
   c03b2:	68db      	ldr	r3, [r3, #12]
   c03b4:	4620      	mov	r0, r4
   c03b6:	4798      	blx	r3
        write("(): ", 4);
   c03b8:	6823      	ldr	r3, [r4, #0]
   c03ba:	492e      	ldr	r1, [pc, #184]	; (c0474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c03bc:	68db      	ldr	r3, [r3, #12]
   c03be:	2204      	movs	r2, #4
   c03c0:	4620      	mov	r0, r4
   c03c2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c03c4:	2100      	movs	r1, #0
   c03c6:	4638      	mov	r0, r7
   c03c8:	f7fd f85e 	bl	bd488 <log_level_name>
   c03cc:	4601      	mov	r1, r0
    write(s);
   c03ce:	4620      	mov	r0, r4
   c03d0:	f7ff fa11 	bl	bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c03d4:	6823      	ldr	r3, [r4, #0]
   c03d6:	4925      	ldr	r1, [pc, #148]	; (c046c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c03d8:	68db      	ldr	r3, [r3, #12]
   c03da:	2202      	movs	r2, #2
   c03dc:	4620      	mov	r0, r4
   c03de:	4798      	blx	r3
    if (msg) {
   c03e0:	b11e      	cbz	r6, c03ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c03e2:	4631      	mov	r1, r6
   c03e4:	4620      	mov	r0, r4
   c03e6:	f7ff fa06 	bl	bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c03ea:	792b      	ldrb	r3, [r5, #4]
   c03ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   c03f0:	d02c      	beq.n	c044c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c03f2:	6823      	ldr	r3, [r4, #0]
   c03f4:	4920      	ldr	r1, [pc, #128]	; (c0478 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c03f6:	68db      	ldr	r3, [r3, #12]
   c03f8:	2202      	movs	r2, #2
   c03fa:	4620      	mov	r0, r4
   c03fc:	4798      	blx	r3
        if (attr.has_code) {
   c03fe:	792b      	ldrb	r3, [r5, #4]
   c0400:	06d9      	lsls	r1, r3, #27
   c0402:	d50a      	bpl.n	c041a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0404:	6823      	ldr	r3, [r4, #0]
   c0406:	491d      	ldr	r1, [pc, #116]	; (c047c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0408:	68db      	ldr	r3, [r3, #12]
   c040a:	2207      	movs	r2, #7
   c040c:	4620      	mov	r0, r4
   c040e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0410:	69aa      	ldr	r2, [r5, #24]
   c0412:	491b      	ldr	r1, [pc, #108]	; (c0480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0414:	4620      	mov	r0, r4
   c0416:	f7ff fa09 	bl	bf82c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c041a:	792b      	ldrb	r3, [r5, #4]
   c041c:	069a      	lsls	r2, r3, #26
   c041e:	d511      	bpl.n	c0444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0420:	06db      	lsls	r3, r3, #27
   c0422:	d505      	bpl.n	c0430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0424:	6823      	ldr	r3, [r4, #0]
   c0426:	4910      	ldr	r1, [pc, #64]	; (c0468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0428:	68db      	ldr	r3, [r3, #12]
   c042a:	2202      	movs	r2, #2
   c042c:	4620      	mov	r0, r4
   c042e:	4798      	blx	r3
            write("details = ", 10);
   c0430:	6823      	ldr	r3, [r4, #0]
   c0432:	4914      	ldr	r1, [pc, #80]	; (c0484 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0434:	68db      	ldr	r3, [r3, #12]
   c0436:	4620      	mov	r0, r4
   c0438:	220a      	movs	r2, #10
   c043a:	4798      	blx	r3
            write(attr.details);
   c043c:	69e9      	ldr	r1, [r5, #28]
   c043e:	4620      	mov	r0, r4
   c0440:	f7ff f9d9 	bl	bf7f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0444:	215d      	movs	r1, #93	; 0x5d
   c0446:	4620      	mov	r0, r4
   c0448:	f7ff f9e4 	bl	bf814 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c044c:	6823      	ldr	r3, [r4, #0]
   c044e:	490e      	ldr	r1, [pc, #56]	; (c0488 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0450:	68db      	ldr	r3, [r3, #12]
   c0452:	4620      	mov	r0, r4
   c0454:	2202      	movs	r2, #2
}
   c0456:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c045a:	4718      	bx	r3
   c045c:	000c5a56 	.word	0x000c5a56
   c0460:	000c5a5d 	.word	0x000c5a5d
   c0464:	000c4466 	.word	0x000c4466
   c0468:	000c5a60 	.word	0x000c5a60
   c046c:	000c5a65 	.word	0x000c5a65
   c0470:	2003e69c 	.word	0x2003e69c
   c0474:	000c5a63 	.word	0x000c5a63
   c0478:	000c5a68 	.word	0x000c5a68
   c047c:	000c5a6b 	.word	0x000c5a6b
   c0480:	000c5a73 	.word	0x000c5a73
   c0484:	000c5a76 	.word	0x000c5a76
   c0488:	000c5a81 	.word	0x000c5a81

000c048c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c048c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0490:	b085      	sub	sp, #20
    return stream_;
   c0492:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0498:	4605      	mov	r5, r0
   c049a:	460f      	mov	r7, r1
   c049c:	4690      	mov	r8, r2
   c049e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c04a0:	f000 fe36 	bl	c1110 <_Z16_fetch_usbserialv>
   c04a4:	4581      	cmp	r9, r0
   c04a6:	d105      	bne.n	c04b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c04a8:	4849      	ldr	r0, [pc, #292]	; (c05d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c04aa:	f000 f8e0 	bl	c066e <_ZN5spark12NetworkClass9listeningEv>
   c04ae:	2800      	cmp	r0, #0
   c04b0:	f040 808a 	bne.w	c05c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c04b4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c04b6:	4a47      	ldr	r2, [pc, #284]	; (c05d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c04b8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c04ba:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c04be:	a801      	add	r0, sp, #4
        strm_(stream) {
   c04c0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c04c2:	f88d 9008 	strb.w	r9, [sp, #8]
   c04c6:	f7ff f850 	bl	bf56a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c04ca:	4649      	mov	r1, r9
   c04cc:	4640      	mov	r0, r8
   c04ce:	f7fc ffdb 	bl	bd488 <log_level_name>
    json.name("l", 1).value(s);
   c04d2:	4941      	ldr	r1, [pc, #260]	; (c05d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c04d4:	4680      	mov	r8, r0
   c04d6:	2201      	movs	r2, #1
   c04d8:	a801      	add	r0, sp, #4
   c04da:	f7ff f8d5 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c04de:	4641      	mov	r1, r8
   c04e0:	f7ff f97b 	bl	bf7da <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c04e4:	b13f      	cbz	r7, c04f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c04e6:	493d      	ldr	r1, [pc, #244]	; (c05dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c04e8:	2201      	movs	r2, #1
   c04ea:	a801      	add	r0, sp, #4
   c04ec:	f7ff f8cc 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c04f0:	4639      	mov	r1, r7
   c04f2:	f7ff f972 	bl	bf7da <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c04f6:	b13e      	cbz	r6, c0508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c04f8:	4939      	ldr	r1, [pc, #228]	; (c05e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c04fa:	2201      	movs	r2, #1
   c04fc:	a801      	add	r0, sp, #4
   c04fe:	f7ff f8c3 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c0502:	4631      	mov	r1, r6
   c0504:	f7ff f969 	bl	bf7da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0508:	7923      	ldrb	r3, [r4, #4]
   c050a:	07df      	lsls	r7, r3, #31
   c050c:	d50e      	bpl.n	c052c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c050e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0510:	212f      	movs	r1, #47	; 0x2f
   c0512:	4630      	mov	r0, r6
   c0514:	f001 ff05 	bl	c2322 <strrchr>
    if (s1) {
   c0518:	b100      	cbz	r0, c051c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c051a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c051c:	4931      	ldr	r1, [pc, #196]	; (c05e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c051e:	2201      	movs	r2, #1
   c0520:	a801      	add	r0, sp, #4
   c0522:	f7ff f8b1 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c0526:	4631      	mov	r1, r6
   c0528:	f7ff f957 	bl	bf7da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c052c:	7923      	ldrb	r3, [r4, #4]
   c052e:	079e      	lsls	r6, r3, #30
   c0530:	d507      	bpl.n	c0542 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0532:	492d      	ldr	r1, [pc, #180]	; (c05e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0534:	2202      	movs	r2, #2
   c0536:	a801      	add	r0, sp, #4
   c0538:	f7ff f8a6 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c053c:	68e1      	ldr	r1, [r4, #12]
   c053e:	f7ff f821 	bl	bf584 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0542:	7923      	ldrb	r3, [r4, #4]
   c0544:	0758      	lsls	r0, r3, #29
   c0546:	d514      	bpl.n	c0572 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0548:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c054a:	4633      	mov	r3, r6
   c054c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c054e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0552:	b12a      	cbz	r2, c0560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0554:	2a20      	cmp	r2, #32
   c0556:	d101      	bne.n	c055c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0558:	461e      	mov	r6, r3
   c055a:	e7f7      	b.n	c054c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c055c:	2a28      	cmp	r2, #40	; 0x28
   c055e:	d1f5      	bne.n	c054c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0560:	4922      	ldr	r1, [pc, #136]	; (c05ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0562:	2202      	movs	r2, #2
   c0564:	a801      	add	r0, sp, #4
   c0566:	f7ff f88f 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c056a:	1bba      	subs	r2, r7, r6
   c056c:	4631      	mov	r1, r6
   c056e:	f7ff f89b 	bl	bf6a8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0572:	7923      	ldrb	r3, [r4, #4]
   c0574:	0719      	lsls	r1, r3, #28
   c0576:	d507      	bpl.n	c0588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0578:	491d      	ldr	r1, [pc, #116]	; (c05f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c057a:	2201      	movs	r2, #1
   c057c:	a801      	add	r0, sp, #4
   c057e:	f7ff f883 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c0582:	6961      	ldr	r1, [r4, #20]
   c0584:	f7ff f810 	bl	bf5a8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0588:	7923      	ldrb	r3, [r4, #4]
   c058a:	06da      	lsls	r2, r3, #27
   c058c:	d508      	bpl.n	c05a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c058e:	2204      	movs	r2, #4
   c0590:	4918      	ldr	r1, [pc, #96]	; (c05f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0592:	eb0d 0002 	add.w	r0, sp, r2
   c0596:	f7ff f877 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c059a:	69a1      	ldr	r1, [r4, #24]
   c059c:	f7fe fff2 	bl	bf584 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c05a0:	7923      	ldrb	r3, [r4, #4]
   c05a2:	069b      	lsls	r3, r3, #26
   c05a4:	d507      	bpl.n	c05b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c05a6:	4914      	ldr	r1, [pc, #80]	; (c05f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c05a8:	2206      	movs	r2, #6
   c05aa:	a801      	add	r0, sp, #4
   c05ac:	f7ff f86c 	bl	bf688 <_ZN5spark10JSONWriter4nameEPKcj>
   c05b0:	69e1      	ldr	r1, [r4, #28]
   c05b2:	f7ff f912 	bl	bf7da <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c05b6:	a801      	add	r0, sp, #4
   c05b8:	f7fe ffc1 	bl	bf53e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c05bc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c05be:	490f      	ldr	r1, [pc, #60]	; (c05fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c05c0:	6803      	ldr	r3, [r0, #0]
   c05c2:	2202      	movs	r2, #2
   c05c4:	68db      	ldr	r3, [r3, #12]
   c05c6:	4798      	blx	r3
}
   c05c8:	b005      	add	sp, #20
   c05ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c05ce:	bf00      	nop
   c05d0:	2003e69c 	.word	0x2003e69c
   c05d4:	000c5aa0 	.word	0x000c5aa0
   c05d8:	000c5a33 	.word	0x000c5a33
   c05dc:	000c5a84 	.word	0x000c5a84
   c05e0:	000c5f76 	.word	0x000c5f76
   c05e4:	000c45ca 	.word	0x000c45ca
   c05e8:	000c5a86 	.word	0x000c5a86
   c05ec:	000c5a89 	.word	0x000c5a89
   c05f0:	000c4711 	.word	0x000c4711
   c05f4:	000c5a8c 	.word	0x000c5a8c
   c05f8:	000c5a91 	.word	0x000c5a91
   c05fc:	000c5a81 	.word	0x000c5a81

000c0600 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c0600:	2300      	movs	r3, #0
   c0602:	6840      	ldr	r0, [r0, #4]
   c0604:	461a      	mov	r2, r3
   c0606:	f7fc bfd5 	b.w	bd5b4 <network_connect>

000c060a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c060a:	6840      	ldr	r0, [r0, #4]
   c060c:	2200      	movs	r2, #0
   c060e:	2102      	movs	r1, #2
   c0610:	f7fc bfe0 	b.w	bd5d4 <network_disconnect>

000c0614 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0614:	2200      	movs	r2, #0
   c0616:	6840      	ldr	r0, [r0, #4]
   c0618:	4611      	mov	r1, r2
   c061a:	f7fc bfd3 	b.w	bd5c4 <network_connecting>

000c061e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c061e:	2200      	movs	r2, #0
   c0620:	6840      	ldr	r0, [r0, #4]
   c0622:	4611      	mov	r1, r2
   c0624:	f7fc bfde 	b.w	bd5e4 <network_ready>

000c0628 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c0628:	2300      	movs	r3, #0
   c062a:	6840      	ldr	r0, [r0, #4]
   c062c:	461a      	mov	r2, r3
   c062e:	4619      	mov	r1, r3
   c0630:	f7fc bfe0 	b.w	bd5f4 <network_on>

000c0634 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c0634:	2300      	movs	r3, #0
   c0636:	6840      	ldr	r0, [r0, #4]
   c0638:	461a      	mov	r2, r3
   c063a:	4619      	mov	r1, r3
   c063c:	f7fc bfe2 	b.w	bd604 <network_off>

000c0640 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c0640:	6840      	ldr	r0, [r0, #4]
   c0642:	2100      	movs	r1, #0
   c0644:	f7fd b806 	b.w	bd654 <network_is_on>

000c0648 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0648:	6840      	ldr	r0, [r0, #4]
   c064a:	2100      	movs	r1, #0
   c064c:	f7fd b80a 	b.w	bd664 <network_is_off>

000c0650 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0650:	6840      	ldr	r0, [r0, #4]
   c0652:	2200      	movs	r2, #0
   c0654:	f081 0101 	eor.w	r1, r1, #1
   c0658:	f7fc bfdc 	b.w	bd614 <network_listen>

000c065c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c065c:	6840      	ldr	r0, [r0, #4]
   c065e:	2200      	movs	r2, #0
   c0660:	f7fc bfe8 	b.w	bd634 <network_set_listen_timeout>

000c0664 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0664:	2200      	movs	r2, #0
   c0666:	6840      	ldr	r0, [r0, #4]
   c0668:	4611      	mov	r1, r2
   c066a:	f7fc bfeb 	b.w	bd644 <network_get_listen_timeout>

000c066e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c066e:	2200      	movs	r2, #0
   c0670:	6840      	ldr	r0, [r0, #4]
   c0672:	4611      	mov	r1, r2
   c0674:	f7fc bfd6 	b.w	bd624 <network_listening>

000c0678 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c067c:	b095      	sub	sp, #84	; 0x54
   c067e:	4614      	mov	r4, r2
   c0680:	460d      	mov	r5, r1
   c0682:	4607      	mov	r7, r0
    IPAddress addr;
   c0684:	f7fe fe0a 	bl	bf29c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0688:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c068a:	221c      	movs	r2, #28
   c068c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c068e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0690:	f001 fd6e 	bl	c2170 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0694:	2340      	movs	r3, #64	; 0x40
   c0696:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0698:	4620      	mov	r0, r4
   c069a:	466b      	mov	r3, sp
   c069c:	aa0c      	add	r2, sp, #48	; 0x30
   c069e:	2100      	movs	r1, #0
   c06a0:	f7fc fdd2 	bl	bd248 <netdb_getaddrinfo>
    if (!r) {
   c06a4:	4604      	mov	r4, r0
   c06a6:	2800      	cmp	r0, #0
   c06a8:	d14b      	bne.n	c0742 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c06aa:	4602      	mov	r2, r0
   c06ac:	2101      	movs	r1, #1
   c06ae:	6868      	ldr	r0, [r5, #4]
   c06b0:	f7fc ff98 	bl	bd5e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c06b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c06b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c06b8:	4622      	mov	r2, r4
   c06ba:	6868      	ldr	r0, [r5, #4]
   c06bc:	f7fc ff92 	bl	bd5e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c06c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c06c2:	4681      	mov	r9, r0
        bool ok = false;
   c06c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c06c6:	2e00      	cmp	r6, #0
   c06c8:	d03b      	beq.n	c0742 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c06ca:	2900      	cmp	r1, #0
   c06cc:	d139      	bne.n	c0742 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c06ce:	6873      	ldr	r3, [r6, #4]
   c06d0:	2b02      	cmp	r3, #2
   c06d2:	d003      	beq.n	c06dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c06d4:	2b0a      	cmp	r3, #10
   c06d6:	d011      	beq.n	c06fc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c06d8:	69f6      	ldr	r6, [r6, #28]
   c06da:	e7f4      	b.n	c06c6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c06dc:	f1b8 0f00 	cmp.w	r8, #0
   c06e0:	d0fa      	beq.n	c06d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c06e2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c06e4:	a806      	add	r0, sp, #24
   c06e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c06e8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c06ea:	f7fe fe05 	bl	bf2f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c06ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c06f0:	1d3c      	adds	r4, r7, #4
   c06f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c06f4:	682b      	ldr	r3, [r5, #0]
   c06f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c06f8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c06fa:	e7ed      	b.n	c06d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c06fc:	f1b9 0f00 	cmp.w	r9, #0
   c0700:	d0ea      	beq.n	c06d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c0702:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c0704:	2210      	movs	r2, #16
   c0706:	a801      	add	r0, sp, #4
   c0708:	f001 fd32 	bl	c2170 <memset>
                    a.v = 6;
   c070c:	2306      	movs	r3, #6
   c070e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c0712:	ad01      	add	r5, sp, #4
   c0714:	f104 0308 	add.w	r3, r4, #8
   c0718:	3418      	adds	r4, #24
   c071a:	6818      	ldr	r0, [r3, #0]
   c071c:	6859      	ldr	r1, [r3, #4]
   c071e:	462a      	mov	r2, r5
   c0720:	c203      	stmia	r2!, {r0, r1}
   c0722:	3308      	adds	r3, #8
   c0724:	42a3      	cmp	r3, r4
   c0726:	4615      	mov	r5, r2
   c0728:	d1f7      	bne.n	c071a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c072a:	a901      	add	r1, sp, #4
   c072c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c072e:	ad07      	add	r5, sp, #28
   c0730:	f7fe fdc2 	bl	bf2b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c0734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0736:	1d3c      	adds	r4, r7, #4
   c0738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c073a:	682b      	ldr	r3, [r5, #0]
   c073c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c073e:	4649      	mov	r1, r9
   c0740:	e7ca      	b.n	c06d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c0742:	9800      	ldr	r0, [sp, #0]
   c0744:	f7fc fd78 	bl	bd238 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0748:	4638      	mov	r0, r7
   c074a:	b015      	add	sp, #84	; 0x54
   c074c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0750 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0750:	4b02      	ldr	r3, [pc, #8]	; (c075c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c0752:	4a03      	ldr	r2, [pc, #12]	; (c0760 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0754:	601a      	str	r2, [r3, #0]
   c0756:	2200      	movs	r2, #0
   c0758:	605a      	str	r2, [r3, #4]

} // spark
   c075a:	4770      	bx	lr
   c075c:	2003e69c 	.word	0x2003e69c
   c0760:	000c5b18 	.word	0x000c5b18

000c0764 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0766:	4606      	mov	r6, r0
   c0768:	460d      	mov	r5, r1
  size_t n = 0;
   c076a:	188f      	adds	r7, r1, r2
   c076c:	2400      	movs	r4, #0
  while (size--) {
   c076e:	42bd      	cmp	r5, r7
   c0770:	d00c      	beq.n	c078c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0772:	6833      	ldr	r3, [r6, #0]
   c0774:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0778:	689b      	ldr	r3, [r3, #8]
   c077a:	4630      	mov	r0, r6
   c077c:	4798      	blx	r3
     if (chunk>=0)
   c077e:	1e03      	subs	r3, r0, #0
   c0780:	db01      	blt.n	c0786 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0782:	441c      	add	r4, r3
  while (size--) {
   c0784:	e7f3      	b.n	c076e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0786:	2c00      	cmp	r4, #0
   c0788:	bf08      	it	eq
   c078a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c078c:	4620      	mov	r0, r4
   c078e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0790 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0790:	b508      	push	{r3, lr}
  return write(str);
   c0792:	f7f6 fad5 	bl	b6d40 <_ZN5Print5writeEPKc>
}
   c0796:	bd08      	pop	{r3, pc}

000c0798 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0798:	6803      	ldr	r3, [r0, #0]
   c079a:	689b      	ldr	r3, [r3, #8]
   c079c:	4718      	bx	r3

000c079e <_ZN5Print5printEPK19__FlashStringHelper>:
   c079e:	b508      	push	{r3, lr}
   c07a0:	f7f6 face 	bl	b6d40 <_ZN5Print5writeEPKc>
   c07a4:	bd08      	pop	{r3, pc}

000c07a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c07a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c07a8:	210d      	movs	r1, #13
{
   c07aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   c07ac:	f7ff fff4 	bl	c0798 <_ZN5Print5printEc>
  n += print('\n');
   c07b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   c07b2:	4604      	mov	r4, r0
  n += print('\n');
   c07b4:	4628      	mov	r0, r5
   c07b6:	f7ff ffef 	bl	c0798 <_ZN5Print5printEc>
  return n;
}
   c07ba:	4420      	add	r0, r4
   c07bc:	bd38      	pop	{r3, r4, r5, pc}

000c07be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c07be:	b538      	push	{r3, r4, r5, lr}
   c07c0:	4605      	mov	r5, r0
  return write(str);
   c07c2:	f7f6 fabd 	bl	b6d40 <_ZN5Print5writeEPKc>
   c07c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c07c8:	4628      	mov	r0, r5
   c07ca:	f7ff ffec 	bl	c07a6 <_ZN5Print7printlnEv>
  return n;
}
   c07ce:	4420      	add	r0, r4
   c07d0:	bd38      	pop	{r3, r4, r5, pc}

000c07d2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c07d2:	f7ff bff4 	b.w	c07be <_ZN5Print7printlnEPKc>

000c07d6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c07d6:	b530      	push	{r4, r5, lr}
   c07d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c07da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c07dc:	2a01      	cmp	r2, #1
  *str = '\0';
   c07de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c07e2:	bf98      	it	ls
   c07e4:	220a      	movls	r2, #10
   c07e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c07e8:	460d      	mov	r5, r1
   c07ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c07ee:	fb01 5312 	mls	r3, r1, r2, r5
   c07f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c07f6:	2b09      	cmp	r3, #9
   c07f8:	bf94      	ite	ls
   c07fa:	3330      	addls	r3, #48	; 0x30
   c07fc:	3337      	addhi	r3, #55	; 0x37
   c07fe:	b2db      	uxtb	r3, r3
  } while(n);
   c0800:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0802:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c0806:	d9ef      	bls.n	c07e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c0808:	4621      	mov	r1, r4
   c080a:	f7f6 fa99 	bl	b6d40 <_ZN5Print5writeEPKc>
}
   c080e:	b00b      	add	sp, #44	; 0x2c
   c0810:	bd30      	pop	{r4, r5, pc}

000c0812 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c0812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0816:	b086      	sub	sp, #24
   c0818:	af00      	add	r7, sp, #0
   c081a:	4605      	mov	r5, r0
   c081c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c081e:	1d38      	adds	r0, r7, #4
   c0820:	2114      	movs	r1, #20
{
   c0822:	4614      	mov	r4, r2
    va_copy(args2, args);
   c0824:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c0826:	f7fc ff4d 	bl	bd6c4 <vsnprintf>

    if (n<bufsize)
   c082a:	2813      	cmp	r0, #19
   c082c:	d80e      	bhi.n	c084c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c082e:	1d39      	adds	r1, r7, #4
   c0830:	4628      	mov	r0, r5
   c0832:	f7f6 fa85 	bl	b6d40 <_ZN5Print5writeEPKc>
   c0836:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c0838:	b11e      	cbz	r6, c0842 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c083a:	4628      	mov	r0, r5
   c083c:	f7ff ffb3 	bl	c07a6 <_ZN5Print7printlnEv>
   c0840:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0842:	4620      	mov	r0, r4
   c0844:	3718      	adds	r7, #24
   c0846:	46bd      	mov	sp, r7
   c0848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c084c:	f100 0308 	add.w	r3, r0, #8
   c0850:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0854:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0856:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c085a:	4622      	mov	r2, r4
   c085c:	1c41      	adds	r1, r0, #1
   c085e:	683b      	ldr	r3, [r7, #0]
   c0860:	4668      	mov	r0, sp
   c0862:	f7fc ff2f 	bl	bd6c4 <vsnprintf>
  return write(str);
   c0866:	4669      	mov	r1, sp
   c0868:	4628      	mov	r0, r5
   c086a:	f7f6 fa69 	bl	b6d40 <_ZN5Print5writeEPKc>
   c086e:	4604      	mov	r4, r0
   c0870:	46c5      	mov	sp, r8
   c0872:	e7e1      	b.n	c0838 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0874 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0874:	4b01      	ldr	r3, [pc, #4]	; (c087c <_GLOBAL__sub_I_RGB+0x8>)
   c0876:	2200      	movs	r2, #0
   c0878:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c087a:	4770      	bx	lr
   c087c:	2003e6a4 	.word	0x2003e6a4

000c0880 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c0880:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0884:	1c53      	adds	r3, r2, #1
   c0886:	d00b      	beq.n	c08a0 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0888:	8843      	ldrh	r3, [r0, #2]
   c088a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c088c:	428b      	cmp	r3, r1
   c088e:	d803      	bhi.n	c0898 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c0890:	4288      	cmp	r0, r1
   c0892:	4603      	mov	r3, r0
   c0894:	bf28      	it	cs
   c0896:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0898:	4619      	mov	r1, r3
   c089a:	b290      	uxth	r0, r2
   c089c:	f7fc bcec 	b.w	bd278 <HAL_Servo_Write_Pulse_Width>
}
   c08a0:	4770      	bx	lr

000c08a2 <_ZN5Servo5writeEi>:
{
   c08a2:	b513      	push	{r0, r1, r4, lr}
   c08a4:	4604      	mov	r4, r0
   c08a6:	4608      	mov	r0, r1
   c08a8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c08ac:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c08b0:	4288      	cmp	r0, r1
   c08b2:	db10      	blt.n	c08d6 <_ZN5Servo5writeEi+0x34>
   c08b4:	4290      	cmp	r0, r2
   c08b6:	bfa8      	it	ge
   c08b8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c08ba:	88a3      	ldrh	r3, [r4, #4]
   c08bc:	9300      	str	r3, [sp, #0]
   c08be:	8863      	ldrh	r3, [r4, #2]
   c08c0:	f7fc ff38 	bl	bd734 <_Z3mapiiiii>
   c08c4:	68e1      	ldr	r1, [r4, #12]
   c08c6:	4401      	add	r1, r0
   c08c8:	b289      	uxth	r1, r1
   c08ca:	4620      	mov	r0, r4
}
   c08cc:	b002      	add	sp, #8
   c08ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c08d2:	f7ff bfd5 	b.w	c0880 <_ZN5Servo17writeMicrosecondsEt>
   c08d6:	4608      	mov	r0, r1
   c08d8:	e7ef      	b.n	c08ba <_ZN5Servo5writeEi+0x18>
	...

000c08dc <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c08dc:	4a04      	ldr	r2, [pc, #16]	; (c08f0 <_ZN5Servo11resetFieldsEv+0x14>)
   c08de:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c08e2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c08e6:	23b4      	movs	r3, #180	; 0xb4
   c08e8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c08ea:	2300      	movs	r3, #0
   c08ec:	60c3      	str	r3, [r0, #12]
}
   c08ee:	4770      	bx	lr
   c08f0:	0220ffff 	.word	0x0220ffff

000c08f4 <_ZN5ServoC1Ev>:
Servo::Servo()
   c08f4:	b508      	push	{r3, lr}
  this->resetFields();
   c08f6:	f7ff fff1 	bl	c08dc <_ZN5Servo11resetFieldsEv>
}
   c08fa:	bd08      	pop	{r3, pc}

000c08fc <_ZN5Servo6detachEv>:
{
   c08fc:	b510      	push	{r4, lr}
   c08fe:	4604      	mov	r4, r0
   c0900:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c0904:	1c43      	adds	r3, r0, #1
   c0906:	d007      	beq.n	c0918 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c0908:	b280      	uxth	r0, r0
   c090a:	f7fc fcad 	bl	bd268 <HAL_Servo_Detach>
  this->resetFields();
   c090e:	4620      	mov	r0, r4
   c0910:	f7ff ffe4 	bl	c08dc <_ZN5Servo11resetFieldsEv>
  return true;
   c0914:	2001      	movs	r0, #1
}
   c0916:	bd10      	pop	{r4, pc}
    return false;
   c0918:	2000      	movs	r0, #0
   c091a:	e7fc      	b.n	c0916 <_ZN5Servo6detachEv+0x1a>

000c091c <_ZN5Servo6attachEtttss>:
{
   c091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0920:	460d      	mov	r5, r1
   c0922:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0924:	2102      	movs	r1, #2
   c0926:	4628      	mov	r0, r5
{
   c0928:	4690      	mov	r8, r2
   c092a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c092c:	f7fc fbe4 	bl	bd0f8 <HAL_Validate_Pin_Function>
   c0930:	2802      	cmp	r0, #2
   c0932:	d003      	beq.n	c093c <_ZN5Servo6attachEtttss+0x20>
    return false;
   c0934:	2600      	movs	r6, #0
}
   c0936:	4630      	mov	r0, r6
   c0938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c093c:	4628      	mov	r0, r5
   c093e:	f000 fca9 	bl	c1294 <pinAvailable>
   c0942:	4606      	mov	r6, r0
   c0944:	2800      	cmp	r0, #0
   c0946:	d0f5      	beq.n	c0934 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c0948:	f9b4 3000 	ldrsh.w	r3, [r4]
   c094c:	3301      	adds	r3, #1
   c094e:	d002      	beq.n	c0956 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c0950:	4620      	mov	r0, r4
   c0952:	f7ff ffd3 	bl	c08fc <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c0956:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c095a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c095c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0960:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0962:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0966:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0968:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c096a:	4628      	mov	r0, r5
   c096c:	f7fc fc74 	bl	bd258 <HAL_Servo_Attach>
  return true;
   c0970:	e7e1      	b.n	c0936 <_ZN5Servo6attachEtttss+0x1a>

000c0972 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0972:	2100      	movs	r1, #0
   c0974:	f7fc bce0 	b.w	bd338 <hal_spi_release>

000c0978 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0978:	2100      	movs	r1, #0
   c097a:	f7fc bcd5 	b.w	bd328 <hal_spi_acquire>

000c097e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c097e:	b510      	push	{r4, lr}
   c0980:	4604      	mov	r4, r0
   c0982:	4608      	mov	r0, r1
{
    _spi = spi;
   c0984:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0986:	f7fc fc97 	bl	bd2b8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c098a:	2300      	movs	r3, #0
   c098c:	6063      	str	r3, [r4, #4]
}
   c098e:	4620      	mov	r0, r4
   c0990:	bd10      	pop	{r4, pc}

000c0992 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0992:	b513      	push	{r0, r1, r4, lr}
   c0994:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0996:	7800      	ldrb	r0, [r0, #0]
   c0998:	f7ff ffee 	bl	c0978 <_ZN8SPIClass4lockEv.isra.0>
   c099c:	b958      	cbnz	r0, c09b6 <_ZN8SPIClass5beginEv+0x24>
   c099e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c09a0:	9001      	str	r0, [sp, #4]
   c09a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c09a6:	f7fc fc6f 	bl	bd288 <hal_spi_begin>
        unlock();
   c09aa:	9801      	ldr	r0, [sp, #4]
    }
}
   c09ac:	b002      	add	sp, #8
   c09ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c09b2:	f7ff bfde 	b.w	c0972 <_ZN8SPIClass6unlockEv.isra.0>
   c09b6:	b002      	add	sp, #8
   c09b8:	bd10      	pop	{r4, pc}

000c09ba <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c09ba:	b513      	push	{r0, r1, r4, lr}
   c09bc:	4604      	mov	r4, r0
    if (!lock())
   c09be:	7800      	ldrb	r0, [r0, #0]
{
   c09c0:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c09c4:	f7ff ffd8 	bl	c0978 <_ZN8SPIClass4lockEv.isra.0>
   c09c8:	e9dd 2100 	ldrd	r2, r1, [sp]
   c09cc:	4603      	mov	r3, r0
   c09ce:	b948      	cbnz	r0, c09e4 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c09d0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c09d2:	9000      	str	r0, [sp, #0]
   c09d4:	f7fc fc90 	bl	bd2f8 <hal_spi_begin_ext>
        unlock();
   c09d8:	9800      	ldr	r0, [sp, #0]
    }
}
   c09da:	b002      	add	sp, #8
   c09dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c09e0:	f7ff bfc7 	b.w	c0972 <_ZN8SPIClass6unlockEv.isra.0>
   c09e4:	b002      	add	sp, #8
   c09e6:	bd10      	pop	{r4, pc}

000c09e8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c09e8:	7800      	ldrb	r0, [r0, #0]
   c09ea:	f7ff bfc2 	b.w	c0972 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c09f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c09f0:	0840      	lsrs	r0, r0, #1
{
   c09f2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c09f4:	6018      	str	r0, [r3, #0]
   c09f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c09f8:	6818      	ldr	r0, [r3, #0]
   c09fa:	4288      	cmp	r0, r1
   c09fc:	b2e5      	uxtb	r5, r4
   c09fe:	d906      	bls.n	c0a0e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0a00:	3401      	adds	r4, #1
   c0a02:	2c08      	cmp	r4, #8
   c0a04:	d002      	beq.n	c0a0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0a06:	0840      	lsrs	r0, r0, #1
   c0a08:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0a0a:	e7f5      	b.n	c09f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0a0c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0a0e:	4b02      	ldr	r3, [pc, #8]	; (c0a18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0a10:	5d5b      	ldrb	r3, [r3, r5]
   c0a12:	7013      	strb	r3, [r2, #0]
}
   c0a14:	bd30      	pop	{r4, r5, pc}
   c0a16:	bf00      	nop
   c0a18:	000c5b4c 	.word	0x000c5b4c

000c0a1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0a20:	4606      	mov	r6, r0
   c0a22:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0a24:	7800      	ldrb	r0, [r0, #0]
{
   c0a26:	460c      	mov	r4, r1
    CHECK(lock());
   c0a28:	f7ff ffa6 	bl	c0978 <_ZN8SPIClass4lockEv.isra.0>
   c0a2c:	2800      	cmp	r0, #0
   c0a2e:	db1b      	blt.n	c0a68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0a30:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0a32:	2214      	movs	r2, #20
   c0a34:	2100      	movs	r1, #0
   c0a36:	a809      	add	r0, sp, #36	; 0x24
   c0a38:	f001 fb9a 	bl	c2170 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0a3c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0a3e:	2200      	movs	r2, #0
   c0a40:	a909      	add	r1, sp, #36	; 0x24
   c0a42:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0a44:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0a48:	f7fc fc46 	bl	bd2d8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0a4c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0a50:	b113      	cbz	r3, c0a58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0a52:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0a56:	b155      	cbz	r5, c0a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0a58:	2700      	movs	r7, #0
   c0a5a:	46b9      	mov	r9, r7
   c0a5c:	46b8      	mov	r8, r7
   c0a5e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0a60:	7923      	ldrb	r3, [r4, #4]
   c0a62:	b15d      	cbz	r5, c0a7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0a64:	b1c3      	cbz	r3, c0a98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0a66:	2000      	movs	r0, #0
}
   c0a68:	b00f      	add	sp, #60	; 0x3c
   c0a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0a6e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0a72:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0a76:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0a7a:	e7f1      	b.n	c0a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0a7c:	2b00      	cmp	r3, #0
   c0a7e:	d135      	bne.n	c0aec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0a80:	68a3      	ldr	r3, [r4, #8]
   c0a82:	4543      	cmp	r3, r8
   c0a84:	d108      	bne.n	c0a98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0a86:	f88d 9020 	strb.w	r9, [sp, #32]
   c0a8a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0a8e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0a92:	89a3      	ldrh	r3, [r4, #12]
   c0a94:	429a      	cmp	r2, r3
   c0a96:	d0e6      	beq.n	c0a66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0a98:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0a9a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0a9c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0aa0:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0aa2:	ab04      	add	r3, sp, #16
   c0aa4:	f10d 020f 	add.w	r2, sp, #15
   c0aa8:	f7ff ffa2 	bl	c09f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0aac:	7921      	ldrb	r1, [r4, #4]
   c0aae:	b985      	cbnz	r5, c0ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0ab0:	b989      	cbnz	r1, c0ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0ab2:	68a3      	ldr	r3, [r4, #8]
   c0ab4:	4543      	cmp	r3, r8
   c0ab6:	d30e      	bcc.n	c0ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0ab8:	f88d 9020 	strb.w	r9, [sp, #32]
   c0abc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0ac0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0ac4:	89a3      	ldrh	r3, [r4, #12]
   c0ac6:	429a      	cmp	r2, r3
   c0ac8:	d105      	bne.n	c0ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0aca:	9b04      	ldr	r3, [sp, #16]
   c0acc:	4543      	cmp	r3, r8
   c0ace:	d102      	bne.n	c0ad6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0ad0:	e7c9      	b.n	c0a66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0ad2:	2900      	cmp	r1, #0
   c0ad4:	d1f9      	bne.n	c0aca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0ad6:	2300      	movs	r3, #0
   c0ad8:	9301      	str	r3, [sp, #4]
   c0ada:	7b63      	ldrb	r3, [r4, #13]
   c0adc:	9300      	str	r3, [sp, #0]
   c0ade:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0ae2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0ae4:	7830      	ldrb	r0, [r6, #0]
   c0ae6:	f7fc fc17 	bl	bd318 <hal_spi_set_settings>
   c0aea:	e7bc      	b.n	c0a66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0aec:	e9cd 5500 	strd	r5, r5, [sp]
   c0af0:	462b      	mov	r3, r5
   c0af2:	462a      	mov	r2, r5
   c0af4:	2101      	movs	r1, #1
   c0af6:	e7f5      	b.n	c0ae4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0af8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c0af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0afc:	b088      	sub	sp, #32
    unsigned clock = 0;
   c0afe:	2300      	movs	r3, #0
{
   c0b00:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c0b02:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c0b04:	9302      	str	r3, [sp, #8]
{
   c0b06:	460e      	mov	r6, r1
   c0b08:	4617      	mov	r7, r2
    if (!lock())
   c0b0a:	f7ff ff35 	bl	c0978 <_ZN8SPIClass4lockEv.isra.0>
   c0b0e:	4605      	mov	r5, r0
   c0b10:	bb00      	cbnz	r0, c0b54 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c0b12:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0b16:	4601      	mov	r1, r0
   c0b18:	2214      	movs	r2, #20
   c0b1a:	a803      	add	r0, sp, #12
   c0b1c:	f001 fb28 	bl	c2170 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0b20:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0b22:	462a      	mov	r2, r5
   c0b24:	a903      	add	r1, sp, #12
   c0b26:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c0b28:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c0b2c:	f7fc fbd4 	bl	bd2d8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0b30:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c0b32:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0b36:	ab02      	add	r3, sp, #8
   c0b38:	f10d 0207 	add.w	r2, sp, #7
   c0b3c:	fb07 f106 	mul.w	r1, r7, r6
   c0b40:	f7ff ff56 	bl	c09f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c0b44:	7820      	ldrb	r0, [r4, #0]
   c0b46:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c0b4a:	f7fc fba5 	bl	bd298 <hal_spi_set_clock_divider>
        unlock();
   c0b4e:	7820      	ldrb	r0, [r4, #0]
   c0b50:	f7ff ff0f 	bl	c0972 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c0b54:	9802      	ldr	r0, [sp, #8]
   c0b56:	b008      	add	sp, #32
   c0b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0b5c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c0b5c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c0b5e:	7800      	ldrb	r0, [r0, #0]
   c0b60:	f7fc fba2 	bl	bd2a8 <hal_spi_transfer>
}
   c0b64:	b2c0      	uxtb	r0, r0
   c0b66:	bd08      	pop	{r3, pc}

000c0b68 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0b68:	b530      	push	{r4, r5, lr}
   c0b6a:	b087      	sub	sp, #28
   c0b6c:	4604      	mov	r4, r0
   c0b6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0b70:	9500      	str	r5, [sp, #0]
   c0b72:	7800      	ldrb	r0, [r0, #0]
   c0b74:	f7fc fbb8 	bl	bd2e8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0b78:	b93d      	cbnz	r5, c0b8a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0b7a:	7820      	ldrb	r0, [r4, #0]
   c0b7c:	a902      	add	r1, sp, #8
   c0b7e:	f7fc fbc3 	bl	bd308 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0b82:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0b86:	07db      	lsls	r3, r3, #31
   c0b88:	d4f7      	bmi.n	c0b7a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0b8a:	b007      	add	sp, #28
   c0b8c:	bd30      	pop	{r4, r5, pc}

000c0b8e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0b8e:	b510      	push	{r4, lr}
   c0b90:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0b92:	f7fc fa99 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0b96:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0b98:	6823      	ldr	r3, [r4, #0]
   c0b9a:	4620      	mov	r0, r4
   c0b9c:	695b      	ldr	r3, [r3, #20]
   c0b9e:	4798      	blx	r3
    if (c >= 0) return c;
   c0ba0:	2800      	cmp	r0, #0
   c0ba2:	da08      	bge.n	c0bb6 <_ZN6Stream9timedReadEv+0x28>
   c0ba4:	f7fc fa90 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0ba8:	68e3      	ldr	r3, [r4, #12]
   c0baa:	1ac0      	subs	r0, r0, r3
   c0bac:	68a3      	ldr	r3, [r4, #8]
   c0bae:	4298      	cmp	r0, r3
   c0bb0:	d3f2      	bcc.n	c0b98 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0bb6:	bd10      	pop	{r4, pc}

000c0bb8 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c0bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0bbc:	4607      	mov	r7, r0
   c0bbe:	4688      	mov	r8, r1
   c0bc0:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c0bc2:	461d      	mov	r5, r3
   c0bc4:	b173      	cbz	r3, c0be4 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c0bc6:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c0bc8:	4638      	mov	r0, r7
   c0bca:	f7ff ffe0 	bl	c0b8e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c0bce:	1e03      	subs	r3, r0, #0
   c0bd0:	db05      	blt.n	c0bde <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c0bd2:	4543      	cmp	r3, r8
   c0bd4:	d003      	beq.n	c0bde <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c0bd6:	5533      	strb	r3, [r6, r4]
    index++;
   c0bd8:	3401      	adds	r4, #1
  while (index < length) {
   c0bda:	42a5      	cmp	r5, r4
   c0bdc:	d1f4      	bne.n	c0bc8 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c0bde:	4620      	mov	r0, r4
   c0be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c0be4:	461c      	mov	r4, r3
   c0be6:	e7fa      	b.n	c0bde <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c0be8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c0be8:	b570      	push	{r4, r5, r6, lr}
   c0bea:	460d      	mov	r5, r1
  String ret;
   c0bec:	4909      	ldr	r1, [pc, #36]	; (c0c14 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c0bee:	4604      	mov	r4, r0
   c0bf0:	4616      	mov	r6, r2
  String ret;
   c0bf2:	f000 f85c 	bl	c0cae <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c0bf6:	4628      	mov	r0, r5
   c0bf8:	f7ff ffc9 	bl	c0b8e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c0bfc:	2800      	cmp	r0, #0
   c0bfe:	db06      	blt.n	c0c0e <_ZN6Stream15readStringUntilEc+0x26>
   c0c00:	4286      	cmp	r6, r0
   c0c02:	d004      	beq.n	c0c0e <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c0c04:	b2c1      	uxtb	r1, r0
   c0c06:	4620      	mov	r0, r4
   c0c08:	f000 f8d0 	bl	c0dac <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c0c0c:	e7f3      	b.n	c0bf6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c0c0e:	4620      	mov	r0, r4
   c0c10:	bd70      	pop	{r4, r5, r6, pc}
   c0c12:	bf00      	nop
   c0c14:	000c5a83 	.word	0x000c5a83

000c0c18 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c0c18:	b510      	push	{r4, lr}
   c0c1a:	4604      	mov	r4, r0
{
	free(buffer);
   c0c1c:	6800      	ldr	r0, [r0, #0]
   c0c1e:	f7fc fd31 	bl	bd684 <free>
}
   c0c22:	4620      	mov	r0, r4
   c0c24:	bd10      	pop	{r4, pc}

000c0c26 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c0c26:	b510      	push	{r4, lr}
   c0c28:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c0c2a:	6800      	ldr	r0, [r0, #0]
   c0c2c:	b108      	cbz	r0, c0c32 <_ZN6String10invalidateEv+0xc>
   c0c2e:	f7fc fd29 	bl	bd684 <free>
	buffer = NULL;
   c0c32:	2300      	movs	r3, #0
	capacity = len = 0;
   c0c34:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c0c38:	6023      	str	r3, [r4, #0]
}
   c0c3a:	bd10      	pop	{r4, pc}

000c0c3c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0c3c:	b538      	push	{r3, r4, r5, lr}
   c0c3e:	4604      	mov	r4, r0
   c0c40:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0c42:	6800      	ldr	r0, [r0, #0]
   c0c44:	3101      	adds	r1, #1
   c0c46:	f7fc fd25 	bl	bd694 <realloc>
	if (newbuffer) {
   c0c4a:	b110      	cbz	r0, c0c52 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c0c4c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c0c50:	2001      	movs	r0, #1
	}
	return 0;
}
   c0c52:	bd38      	pop	{r3, r4, r5, pc}

000c0c54 <_ZN6String7reserveEj>:
{
   c0c54:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c0c56:	6803      	ldr	r3, [r0, #0]
{
   c0c58:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c0c5a:	b123      	cbz	r3, c0c66 <_ZN6String7reserveEj+0x12>
   c0c5c:	6843      	ldr	r3, [r0, #4]
   c0c5e:	428b      	cmp	r3, r1
   c0c60:	d301      	bcc.n	c0c66 <_ZN6String7reserveEj+0x12>
   c0c62:	2001      	movs	r0, #1
}
   c0c64:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c0c66:	4620      	mov	r0, r4
   c0c68:	f7ff ffe8 	bl	c0c3c <_ZN6String12changeBufferEj>
   c0c6c:	2800      	cmp	r0, #0
   c0c6e:	d0f9      	beq.n	c0c64 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c0c70:	68a3      	ldr	r3, [r4, #8]
   c0c72:	2b00      	cmp	r3, #0
   c0c74:	d1f5      	bne.n	c0c62 <_ZN6String7reserveEj+0xe>
   c0c76:	6822      	ldr	r2, [r4, #0]
   c0c78:	7013      	strb	r3, [r2, #0]
   c0c7a:	e7f2      	b.n	c0c62 <_ZN6String7reserveEj+0xe>

000c0c7c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0c7e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c0c80:	4611      	mov	r1, r2
   c0c82:	9201      	str	r2, [sp, #4]
{
   c0c84:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c0c86:	f7ff ffe5 	bl	c0c54 <_ZN6String7reserveEj>
   c0c8a:	9a01      	ldr	r2, [sp, #4]
   c0c8c:	b928      	cbnz	r0, c0c9a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c0c8e:	4620      	mov	r0, r4
   c0c90:	f7ff ffc9 	bl	c0c26 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c0c94:	4620      	mov	r0, r4
   c0c96:	b003      	add	sp, #12
   c0c98:	bd30      	pop	{r4, r5, pc}
	len = length;
   c0c9a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c0c9c:	4629      	mov	r1, r5
   c0c9e:	6820      	ldr	r0, [r4, #0]
   c0ca0:	f001 fa3e 	bl	c2120 <memcpy>
	buffer[len] = 0;
   c0ca4:	6822      	ldr	r2, [r4, #0]
   c0ca6:	68a3      	ldr	r3, [r4, #8]
   c0ca8:	2100      	movs	r1, #0
   c0caa:	54d1      	strb	r1, [r2, r3]
	return *this;
   c0cac:	e7f2      	b.n	c0c94 <_ZN6String4copyEPKcj+0x18>

000c0cae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c0cae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c0cb0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c0cb2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c0cb6:	4604      	mov	r4, r0
	len = 0;
   c0cb8:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0cba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c0cbc:	b141      	cbz	r1, c0cd0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c0cbe:	4608      	mov	r0, r1
   c0cc0:	9101      	str	r1, [sp, #4]
   c0cc2:	f001 fae0 	bl	c2286 <strlen>
   c0cc6:	9901      	ldr	r1, [sp, #4]
   c0cc8:	4602      	mov	r2, r0
   c0cca:	4620      	mov	r0, r4
   c0ccc:	f7ff ffd6 	bl	c0c7c <_ZN6String4copyEPKcj>
}
   c0cd0:	4620      	mov	r0, r4
   c0cd2:	b002      	add	sp, #8
   c0cd4:	bd10      	pop	{r4, pc}

000c0cd6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0cd6:	b538      	push	{r3, r4, r5, lr}
   c0cd8:	4605      	mov	r5, r0
	if (buffer) {
   c0cda:	6800      	ldr	r0, [r0, #0]
{
   c0cdc:	460c      	mov	r4, r1
	if (buffer) {
   c0cde:	b168      	cbz	r0, c0cfc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c0ce0:	686a      	ldr	r2, [r5, #4]
   c0ce2:	688b      	ldr	r3, [r1, #8]
   c0ce4:	429a      	cmp	r2, r3
   c0ce6:	d307      	bcc.n	c0cf8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c0ce8:	6809      	ldr	r1, [r1, #0]
   c0cea:	f001 faa7 	bl	c223c <strcpy>
			len = rhs.len;
   c0cee:	68a3      	ldr	r3, [r4, #8]
   c0cf0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c0cf2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c0cf4:	60a3      	str	r3, [r4, #8]
}
   c0cf6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c0cf8:	f7fc fcc4 	bl	bd684 <free>
	buffer = rhs.buffer;
   c0cfc:	6823      	ldr	r3, [r4, #0]
   c0cfe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c0d00:	6863      	ldr	r3, [r4, #4]
   c0d02:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c0d04:	68a3      	ldr	r3, [r4, #8]
   c0d06:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c0d08:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c0d0a:	e9c4 3300 	strd	r3, r3, [r4]
   c0d0e:	e7f1      	b.n	c0cf4 <_ZN6String4moveERS_+0x1e>

000c0d10 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0d10:	b510      	push	{r4, lr}
	buffer = NULL;
   c0d12:	2300      	movs	r3, #0
	capacity = 0;
   c0d14:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0d18:	4604      	mov	r4, r0
	len = 0;
   c0d1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0d1c:	7303      	strb	r3, [r0, #12]
	move(rval);
   c0d1e:	f7ff ffda 	bl	c0cd6 <_ZN6String4moveERS_>
}
   c0d22:	4620      	mov	r0, r4
   c0d24:	bd10      	pop	{r4, pc}

000c0d26 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c0d26:	4288      	cmp	r0, r1
{
   c0d28:	b510      	push	{r4, lr}
   c0d2a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c0d2c:	d005      	beq.n	c0d3a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c0d2e:	680b      	ldr	r3, [r1, #0]
   c0d30:	b12b      	cbz	r3, c0d3e <_ZN6StringaSERKS_+0x18>
   c0d32:	688a      	ldr	r2, [r1, #8]
   c0d34:	4619      	mov	r1, r3
   c0d36:	f7ff ffa1 	bl	c0c7c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0d3a:	4620      	mov	r0, r4
   c0d3c:	bd10      	pop	{r4, pc}
	else invalidate();
   c0d3e:	f7ff ff72 	bl	c0c26 <_ZN6String10invalidateEv>
   c0d42:	e7fa      	b.n	c0d3a <_ZN6StringaSERKS_+0x14>

000c0d44 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0d44:	b510      	push	{r4, lr}
	buffer = NULL;
   c0d46:	2300      	movs	r3, #0
String::String(const String &value)
   c0d48:	4604      	mov	r4, r0
	capacity = 0;
   c0d4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c0d4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0d50:	7303      	strb	r3, [r0, #12]
	*this = value;
   c0d52:	f7ff ffe8 	bl	c0d26 <_ZN6StringaSERKS_>
}
   c0d56:	4620      	mov	r0, r4
   c0d58:	bd10      	pop	{r4, pc}

000c0d5a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0d5a:	b513      	push	{r0, r1, r4, lr}
   c0d5c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c0d5e:	b159      	cbz	r1, c0d78 <_ZN6StringaSEPKc+0x1e>
   c0d60:	4608      	mov	r0, r1
   c0d62:	9101      	str	r1, [sp, #4]
   c0d64:	f001 fa8f 	bl	c2286 <strlen>
   c0d68:	9901      	ldr	r1, [sp, #4]
   c0d6a:	4602      	mov	r2, r0
   c0d6c:	4620      	mov	r0, r4
   c0d6e:	f7ff ff85 	bl	c0c7c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0d72:	4620      	mov	r0, r4
   c0d74:	b002      	add	sp, #8
   c0d76:	bd10      	pop	{r4, pc}
	else invalidate();
   c0d78:	f7ff ff55 	bl	c0c26 <_ZN6String10invalidateEv>
   c0d7c:	e7f9      	b.n	c0d72 <_ZN6StringaSEPKc+0x18>

000c0d7e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0d7e:	b570      	push	{r4, r5, r6, lr}
   c0d80:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c0d82:	460e      	mov	r6, r1
   c0d84:	b909      	cbnz	r1, c0d8a <_ZN6String6concatEPKcj+0xc>
   c0d86:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c0d88:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c0d8a:	b16a      	cbz	r2, c0da8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c0d8c:	6884      	ldr	r4, [r0, #8]
   c0d8e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c0d90:	4621      	mov	r1, r4
   c0d92:	f7ff ff5f 	bl	c0c54 <_ZN6String7reserveEj>
   c0d96:	2800      	cmp	r0, #0
   c0d98:	d0f5      	beq.n	c0d86 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c0d9a:	6828      	ldr	r0, [r5, #0]
   c0d9c:	68ab      	ldr	r3, [r5, #8]
   c0d9e:	4631      	mov	r1, r6
   c0da0:	4418      	add	r0, r3
   c0da2:	f001 fa4b 	bl	c223c <strcpy>
	len = newlen;
   c0da6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c0da8:	2001      	movs	r0, #1
   c0daa:	e7ed      	b.n	c0d88 <_ZN6String6concatEPKcj+0xa>

000c0dac <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0dac:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c0dae:	2300      	movs	r3, #0
	buf[0] = c;
   c0db0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c0db4:	2201      	movs	r2, #1
   c0db6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c0db8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c0dbc:	f7ff ffdf 	bl	c0d7e <_ZN6String6concatEPKcj>
}
   c0dc0:	b003      	add	sp, #12
   c0dc2:	f85d fb04 	ldr.w	pc, [sp], #4

000c0dc6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c0dc6:	6883      	ldr	r3, [r0, #8]
   c0dc8:	428b      	cmp	r3, r1
   c0dca:	d903      	bls.n	c0dd4 <_ZNK6StringixEj+0xe>
   c0dcc:	6800      	ldr	r0, [r0, #0]
   c0dce:	b110      	cbz	r0, c0dd6 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c0dd0:	5c40      	ldrb	r0, [r0, r1]
   c0dd2:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c0dd4:	2000      	movs	r0, #0
}
   c0dd6:	4770      	bx	lr

000c0dd8 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c0dd8:	f7ff bff5 	b.w	c0dc6 <_ZNK6StringixEj>

000c0ddc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0ddc:	4b05      	ldr	r3, [pc, #20]	; (c0df4 <_GLOBAL__sub_I_System+0x18>)
   c0dde:	2202      	movs	r2, #2
   c0de0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0de2:	4b05      	ldr	r3, [pc, #20]	; (c0df8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0de4:	4a05      	ldr	r2, [pc, #20]	; (c0dfc <_GLOBAL__sub_I_System+0x20>)
   c0de6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0de8:	2000      	movs	r0, #0
   c0dea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0dee:	f7fc bb6d 	b.w	bd4cc <set_system_mode>
   c0df2:	bf00      	nop
   c0df4:	2003e6c0 	.word	0x2003e6c0
   c0df8:	2003e6b4 	.word	0x2003e6b4
   c0dfc:	ffff0000 	.word	0xffff0000

000c0e00 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0e04:	4a15      	ldr	r2, [pc, #84]	; (c0e5c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0e06:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0e68 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0e0a:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0e0e:	1980      	adds	r0, r0, r6
   c0e10:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0e14:	4b12      	ldr	r3, [pc, #72]	; (c0e60 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0e16:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0e1a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0e1e:	1986      	adds	r6, r0, r6
   c0e20:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0e24:	42bb      	cmp	r3, r7
   c0e26:	bf08      	it	eq
   c0e28:	42b2      	cmpeq	r2, r6
{
   c0e2a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0e2c:	d013      	beq.n	c0e56 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0e2e:	a903      	add	r1, sp, #12
   c0e30:	4668      	mov	r0, sp
   c0e32:	e9cd 6700 	strd	r6, r7, [sp]
   c0e36:	f7fc fc75 	bl	bd724 <localtime_r>
	calendar_time.tm_year += 1900;
   c0e3a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0e3c:	4d09      	ldr	r5, [pc, #36]	; (c0e64 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0e3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0e42:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0e44:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0e4e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0e52:	6823      	ldr	r3, [r4, #0]
   c0e54:	602b      	str	r3, [r5, #0]
    }
}
   c0e56:	b00c      	add	sp, #48	; 0x30
   c0e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0e5c:	2003e6f8 	.word	0x2003e6f8
   c0e60:	2003e6f0 	.word	0x2003e6f0
   c0e64:	2003e6c8 	.word	0x2003e6c8
   c0e68:	2003e700 	.word	0x2003e700

000c0e6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c0e6c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0e6e:	2000      	movs	r0, #0
   c0e70:	f7fc fb90 	bl	bd594 <spark_sync_time_pending>
   c0e74:	b128      	cbz	r0, c0e82 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0e76:	f7fc fb75 	bl	bd564 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0e7a:	f080 0001 	eor.w	r0, r0, #1
   c0e7e:	b2c0      	uxtb	r0, r0
    }
   c0e80:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0e82:	2001      	movs	r0, #1
   c0e84:	e7fc      	b.n	c0e80 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0e88 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0e88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0e8a:	f7ff ffb9 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0e8e:	4b02      	ldr	r3, [pc, #8]	; (c0e98 <_ZN9TimeClass5monthEx+0x10>)
   c0e90:	6918      	ldr	r0, [r3, #16]
}
   c0e92:	3001      	adds	r0, #1
   c0e94:	bd08      	pop	{r3, pc}
   c0e96:	bf00      	nop
   c0e98:	2003e6c8 	.word	0x2003e6c8

000c0e9c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0e9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0e9e:	2000      	movs	r0, #0
   c0ea0:	f7fc f91a 	bl	bd0d8 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0ea4:	4604      	mov	r4, r0
   c0ea6:	b9a0      	cbnz	r0, c0ed2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0ea8:	f7fc fb08 	bl	bd4bc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0eac:	2801      	cmp	r0, #1
   c0eae:	d110      	bne.n	c0ed2 <_ZN9TimeClass7isValidEv+0x36>
   c0eb0:	4620      	mov	r0, r4
   c0eb2:	f7fc fb2b 	bl	bd50c <system_thread_get_state>
   c0eb6:	b960      	cbnz	r0, c0ed2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0eb8:	f7ff ffd8 	bl	c0e6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0ebc:	b910      	cbnz	r0, c0ec4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0ebe:	f7fc fb49 	bl	bd554 <spark_process>
        while (_while() && !_condition()) {
   c0ec2:	e7f9      	b.n	c0eb8 <_ZN9TimeClass7isValidEv+0x1c>
   c0ec4:	f7ff ffd2 	bl	c0e6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0ecc:	2000      	movs	r0, #0
   c0ece:	f7fc b903 	b.w	bd0d8 <hal_rtc_time_is_valid>
}
   c0ed2:	4620      	mov	r0, r4
   c0ed4:	bd10      	pop	{r4, pc}

000c0ed6 <_ZN9TimeClass3nowEv>:
{
   c0ed6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0ed8:	f7ff ffe0 	bl	c0e9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0edc:	2210      	movs	r2, #16
   c0ede:	2100      	movs	r1, #0
   c0ee0:	4668      	mov	r0, sp
   c0ee2:	f001 f945 	bl	c2170 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0ee6:	2100      	movs	r1, #0
   c0ee8:	4668      	mov	r0, sp
   c0eea:	f7fc f8fd 	bl	bd0e8 <hal_rtc_get_time>
}
   c0eee:	9800      	ldr	r0, [sp, #0]
   c0ef0:	b005      	add	sp, #20
   c0ef2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0ef8 <_ZN9TimeClass4hourEv>:
{
   c0ef8:	b508      	push	{r3, lr}
	return hour(now());
   c0efa:	f7ff ffec 	bl	c0ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0efe:	17c1      	asrs	r1, r0, #31
   c0f00:	f7ff ff7e 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0f04:	4b01      	ldr	r3, [pc, #4]	; (c0f0c <_ZN9TimeClass4hourEv+0x14>)
   c0f06:	6898      	ldr	r0, [r3, #8]
   c0f08:	bd08      	pop	{r3, pc}
   c0f0a:	bf00      	nop
   c0f0c:	2003e6c8 	.word	0x2003e6c8

000c0f10 <_ZN9TimeClass6minuteEv>:
{
   c0f10:	b508      	push	{r3, lr}
	return minute(now());
   c0f12:	f7ff ffe0 	bl	c0ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0f16:	17c1      	asrs	r1, r0, #31
   c0f18:	f7ff ff72 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0f1c:	4b01      	ldr	r3, [pc, #4]	; (c0f24 <_ZN9TimeClass6minuteEv+0x14>)
   c0f1e:	6858      	ldr	r0, [r3, #4]
   c0f20:	bd08      	pop	{r3, pc}
   c0f22:	bf00      	nop
   c0f24:	2003e6c8 	.word	0x2003e6c8

000c0f28 <_ZN9TimeClass6secondEv>:
{
   c0f28:	b508      	push	{r3, lr}
	return second(now());
   c0f2a:	f7ff ffd4 	bl	c0ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0f2e:	17c1      	asrs	r1, r0, #31
   c0f30:	f7ff ff66 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0f34:	4b01      	ldr	r3, [pc, #4]	; (c0f3c <_ZN9TimeClass6secondEv+0x14>)
   c0f36:	6818      	ldr	r0, [r3, #0]
   c0f38:	bd08      	pop	{r3, pc}
   c0f3a:	bf00      	nop
   c0f3c:	2003e6c8 	.word	0x2003e6c8

000c0f40 <_ZN9TimeClass3dayEv>:
{
   c0f40:	b508      	push	{r3, lr}
	return day(now());
   c0f42:	f7ff ffc8 	bl	c0ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0f46:	17c1      	asrs	r1, r0, #31
   c0f48:	f7ff ff5a 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0f4c:	4b01      	ldr	r3, [pc, #4]	; (c0f54 <_ZN9TimeClass3dayEv+0x14>)
   c0f4e:	68d8      	ldr	r0, [r3, #12]
   c0f50:	bd08      	pop	{r3, pc}
   c0f52:	bf00      	nop
   c0f54:	2003e6c8 	.word	0x2003e6c8

000c0f58 <_ZN9TimeClass5monthEv>:
{
   c0f58:	b508      	push	{r3, lr}
	return month(now());
   c0f5a:	f7ff ffbc 	bl	c0ed6 <_ZN9TimeClass3nowEv>
}
   c0f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c0f62:	17c1      	asrs	r1, r0, #31
   c0f64:	f7ff bf90 	b.w	c0e88 <_ZN9TimeClass5monthEx>

000c0f68 <_ZN9TimeClass4yearEv>:
{
   c0f68:	b508      	push	{r3, lr}
	return year(now());
   c0f6a:	f7ff ffb4 	bl	c0ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0f6e:	17c1      	asrs	r1, r0, #31
   c0f70:	f7ff ff46 	bl	c0e00 <_ZL22Refresh_UnixTime_Cachex>
}
   c0f74:	4b01      	ldr	r3, [pc, #4]	; (c0f7c <_ZN9TimeClass4yearEv+0x14>)
   c0f76:	6958      	ldr	r0, [r3, #20]
   c0f78:	bd08      	pop	{r3, pc}
   c0f7a:	bf00      	nop
   c0f7c:	2003e6c8 	.word	0x2003e6c8

000c0f80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0f80:	4b02      	ldr	r3, [pc, #8]	; (c0f8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0f82:	681a      	ldr	r2, [r3, #0]
   c0f84:	4b02      	ldr	r3, [pc, #8]	; (c0f90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0f86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0f88:	4770      	bx	lr
   c0f8a:	bf00      	nop
   c0f8c:	2003db94 	.word	0x2003db94
   c0f90:	2003e6c4 	.word	0x2003e6c4

000c0f94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c0f94:	4770      	bx	lr

000c0f96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0f96:	7441      	strb	r1, [r0, #17]
}
   c0f98:	4770      	bx	lr

000c0f9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c0f9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c0f9c:	7c00      	ldrb	r0, [r0, #16]
   c0f9e:	f7fc fa0b 	bl	bd3b8 <hal_usart_available_data_for_write>
}
   c0fa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0fa6:	bd08      	pop	{r3, pc}

000c0fa8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c0fa8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c0faa:	7c00      	ldrb	r0, [r0, #16]
   c0fac:	f7fc f9dc 	bl	bd368 <hal_usart_available>
}
   c0fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0fb4:	bd08      	pop	{r3, pc}

000c0fb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c0fb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c0fb8:	7c00      	ldrb	r0, [r0, #16]
   c0fba:	f7fc f9e5 	bl	bd388 <hal_usart_peek>
}
   c0fbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0fc2:	bd08      	pop	{r3, pc}

000c0fc4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0fc4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c0fc6:	7c00      	ldrb	r0, [r0, #16]
   c0fc8:	f7fc f9d6 	bl	bd378 <hal_usart_read>
}
   c0fcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0fd0:	bd08      	pop	{r3, pc}

000c0fd2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c0fd2:	7c00      	ldrb	r0, [r0, #16]
   c0fd4:	f7fc b9e0 	b.w	bd398 <hal_usart_flush>

000c0fd8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c0fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0fda:	7c45      	ldrb	r5, [r0, #17]
{
   c0fdc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0fde:	b12d      	cbz	r5, c0fec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c0fe0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c0fe2:	b003      	add	sp, #12
   c0fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c0fe8:	f7fc b9b6 	b.w	bd358 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0fec:	7c00      	ldrb	r0, [r0, #16]
   c0fee:	9101      	str	r1, [sp, #4]
   c0ff0:	f7fc f9e2 	bl	bd3b8 <hal_usart_available_data_for_write>
   c0ff4:	2800      	cmp	r0, #0
   c0ff6:	9901      	ldr	r1, [sp, #4]
   c0ff8:	dcf2      	bgt.n	c0fe0 <_ZN11USARTSerial5writeEh+0x8>
}
   c0ffa:	4628      	mov	r0, r5
   c0ffc:	b003      	add	sp, #12
   c0ffe:	bd30      	pop	{r4, r5, pc}

000c1000 <_ZN11USARTSerialD0Ev>:
   c1000:	b510      	push	{r4, lr}
   c1002:	2114      	movs	r1, #20
   c1004:	4604      	mov	r4, r0
   c1006:	f7f3 f84c 	bl	b40a2 <_ZdlPvj>
   c100a:	4620      	mov	r0, r4
   c100c:	bd10      	pop	{r4, pc}
	...

000c1010 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1010:	b510      	push	{r4, lr}
   c1012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1016:	4604      	mov	r4, r0
   c1018:	4608      	mov	r0, r1
   c101a:	4611      	mov	r1, r2
   c101c:	2200      	movs	r2, #0
   c101e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1022:	4b04      	ldr	r3, [pc, #16]	; (c1034 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1024:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1026:	2301      	movs	r3, #1
  _serial = serial;
   c1028:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c102a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c102c:	f7fc f9d4 	bl	bd3d8 <hal_usart_init_ex>
}
   c1030:	4620      	mov	r0, r4
   c1032:	bd10      	pop	{r4, pc}
   c1034:	000c5b78 	.word	0x000c5b78

000c1038 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1038:	7c00      	ldrb	r0, [r0, #16]
   c103a:	2300      	movs	r3, #0
   c103c:	f7fc b9c4 	b.w	bd3c8 <hal_usart_begin_config>

000c1040 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1040:	2200      	movs	r2, #0
   c1042:	f7ff bff9 	b.w	c1038 <_ZN11USARTSerial5beginEmm>

000c1046 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1046:	7c00      	ldrb	r0, [r0, #16]
   c1048:	f7fc b97e 	b.w	bd348 <hal_usart_end>

000c104c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c104c:	7441      	strb	r1, [r0, #17]
}
   c104e:	4770      	bx	lr

000c1050 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1050:	4770      	bx	lr

000c1052 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1052:	4770      	bx	lr

000c1054 <_ZN9USBSerial4readEv>:
{
   c1054:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1056:	2100      	movs	r1, #0
   c1058:	7c00      	ldrb	r0, [r0, #16]
   c105a:	f7fc f9ed 	bl	bd438 <HAL_USB_USART_Receive_Data>
}
   c105e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1062:	bd08      	pop	{r3, pc}

000c1064 <_ZN9USBSerial4peekEv>:
{
   c1064:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1066:	2101      	movs	r1, #1
   c1068:	7c00      	ldrb	r0, [r0, #16]
   c106a:	f7fc f9e5 	bl	bd438 <HAL_USB_USART_Receive_Data>
}
   c106e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1072:	bd08      	pop	{r3, pc}

000c1074 <_ZN9USBSerial17availableForWriteEv>:
{
   c1074:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1076:	7c00      	ldrb	r0, [r0, #16]
   c1078:	f7fc f9d6 	bl	bd428 <HAL_USB_USART_Available_Data_For_Write>
}
   c107c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1080:	bd08      	pop	{r3, pc}

000c1082 <_ZN9USBSerial9availableEv>:
{
   c1082:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1084:	7c00      	ldrb	r0, [r0, #16]
   c1086:	f7fc f9c7 	bl	bd418 <HAL_USB_USART_Available_Data>
}
   c108a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c108e:	bd08      	pop	{r3, pc}

000c1090 <_ZN9USBSerial5writeEh>:
{
   c1090:	b513      	push	{r0, r1, r4, lr}
   c1092:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1094:	7c00      	ldrb	r0, [r0, #16]
{
   c1096:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1098:	f7fc f9c6 	bl	bd428 <HAL_USB_USART_Available_Data_For_Write>
   c109c:	2800      	cmp	r0, #0
   c109e:	9901      	ldr	r1, [sp, #4]
   c10a0:	dc01      	bgt.n	c10a6 <_ZN9USBSerial5writeEh+0x16>
   c10a2:	7c60      	ldrb	r0, [r4, #17]
   c10a4:	b120      	cbz	r0, c10b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c10a6:	7c20      	ldrb	r0, [r4, #16]
   c10a8:	f7fc f9ce 	bl	bd448 <HAL_USB_USART_Send_Data>
   c10ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c10b0:	b002      	add	sp, #8
   c10b2:	bd10      	pop	{r4, pc}

000c10b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c10b4:	7c00      	ldrb	r0, [r0, #16]
   c10b6:	f7fc b9cf 	b.w	bd458 <HAL_USB_USART_Flush_Data>

000c10ba <_ZN9USBSerialD0Ev>:
   c10ba:	b510      	push	{r4, lr}
   c10bc:	2114      	movs	r1, #20
   c10be:	4604      	mov	r4, r0
   c10c0:	f7f2 ffef 	bl	b40a2 <_ZdlPvj>
   c10c4:	4620      	mov	r0, r4
   c10c6:	bd10      	pop	{r4, pc}

000c10c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c10c8:	b510      	push	{r4, lr}
   c10ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c10ce:	4604      	mov	r4, r0
   c10d0:	4608      	mov	r0, r1
   c10d2:	2100      	movs	r1, #0
   c10d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c10d8:	4b04      	ldr	r3, [pc, #16]	; (c10ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c10da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c10dc:	2301      	movs	r3, #1
  _serial = serial;
   c10de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c10e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c10e2:	4611      	mov	r1, r2
   c10e4:	f7fc f980 	bl	bd3e8 <HAL_USB_USART_Init>
}
   c10e8:	4620      	mov	r0, r4
   c10ea:	bd10      	pop	{r4, pc}
   c10ec:	000c5ba8 	.word	0x000c5ba8

000c10f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c10f0:	7c00      	ldrb	r0, [r0, #16]
   c10f2:	2200      	movs	r2, #0
   c10f4:	f7fc b980 	b.w	bd3f8 <HAL_USB_USART_Begin>

000c10f8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c10f8:	7c00      	ldrb	r0, [r0, #16]
   c10fa:	f7fc b985 	b.w	bd408 <HAL_USB_USART_End>

000c10fe <_Z19acquireSerialBufferv>:
{
   c10fe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1100:	2214      	movs	r2, #20
{
   c1102:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1104:	2100      	movs	r1, #0
   c1106:	f001 f833 	bl	c2170 <memset>
}
   c110a:	4620      	mov	r0, r4
   c110c:	bd10      	pop	{r4, pc}
	...

000c1110 <_Z16_fetch_usbserialv>:
{
   c1110:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1112:	4c0f      	ldr	r4, [pc, #60]	; (c1150 <_Z16_fetch_usbserialv+0x40>)
{
   c1114:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1116:	a803      	add	r0, sp, #12
   c1118:	f7ff fff1 	bl	c10fe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c111c:	7821      	ldrb	r1, [r4, #0]
   c111e:	f3bf 8f5b 	dmb	ish
   c1122:	f011 0101 	ands.w	r1, r1, #1
   c1126:	d10f      	bne.n	c1148 <_Z16_fetch_usbserialv+0x38>
   c1128:	4620      	mov	r0, r4
   c112a:	9101      	str	r1, [sp, #4]
   c112c:	f7f2 ffc8 	bl	b40c0 <__cxa_guard_acquire>
   c1130:	9901      	ldr	r1, [sp, #4]
   c1132:	b148      	cbz	r0, c1148 <_Z16_fetch_usbserialv+0x38>
   c1134:	aa03      	add	r2, sp, #12
   c1136:	4807      	ldr	r0, [pc, #28]	; (c1154 <_Z16_fetch_usbserialv+0x44>)
   c1138:	f7ff ffc6 	bl	c10c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c113c:	4620      	mov	r0, r4
   c113e:	f7f2 ffc4 	bl	b40ca <__cxa_guard_release>
   c1142:	4805      	ldr	r0, [pc, #20]	; (c1158 <_Z16_fetch_usbserialv+0x48>)
   c1144:	f000 ffc6 	bl	c20d4 <atexit>
	return _usbserial;
}
   c1148:	4802      	ldr	r0, [pc, #8]	; (c1154 <_Z16_fetch_usbserialv+0x44>)
   c114a:	b008      	add	sp, #32
   c114c:	bd10      	pop	{r4, pc}
   c114e:	bf00      	nop
   c1150:	2003e708 	.word	0x2003e708
   c1154:	2003e70c 	.word	0x2003e70c
   c1158:	000c1051 	.word	0x000c1051

000c115c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c115c:	4b01      	ldr	r3, [pc, #4]	; (c1164 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c115e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1160:	4770      	bx	lr
   c1162:	bf00      	nop
   c1164:	2003db98 	.word	0x2003db98

000c1168 <serialEventRun>:
{
   c1168:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c116a:	4b0b      	ldr	r3, [pc, #44]	; (c1198 <serialEventRun+0x30>)
   c116c:	b143      	cbz	r3, c1180 <serialEventRun+0x18>
   c116e:	f7ff ffcf 	bl	c1110 <_Z16_fetch_usbserialv>
   c1172:	6803      	ldr	r3, [r0, #0]
   c1174:	691b      	ldr	r3, [r3, #16]
   c1176:	4798      	blx	r3
   c1178:	2800      	cmp	r0, #0
   c117a:	dd01      	ble.n	c1180 <serialEventRun+0x18>
        serialEvent();
   c117c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1180:	4b06      	ldr	r3, [pc, #24]	; (c119c <serialEventRun+0x34>)
   c1182:	b143      	cbz	r3, c1196 <serialEventRun+0x2e>
   c1184:	f000 f95c 	bl	c1440 <_Z22__fetch_global_Serial1v>
   c1188:	6803      	ldr	r3, [r0, #0]
   c118a:	691b      	ldr	r3, [r3, #16]
   c118c:	4798      	blx	r3
   c118e:	2800      	cmp	r0, #0
   c1190:	dd01      	ble.n	c1196 <serialEventRun+0x2e>
        serialEvent1();
   c1192:	f3af 8000 	nop.w
}
   c1196:	bd08      	pop	{r3, pc}
	...

000c11a0 <_post_loop>:
{
   c11a0:	b508      	push	{r3, lr}
	serialEventRun();
   c11a2:	f7ff ffe1 	bl	c1168 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c11a6:	f7fb ff8f 	bl	bd0c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c11aa:	4b01      	ldr	r3, [pc, #4]	; (c11b0 <_post_loop+0x10>)
   c11ac:	6018      	str	r0, [r3, #0]
}
   c11ae:	bd08      	pop	{r3, pc}
   c11b0:	2003e728 	.word	0x2003e728

000c11b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c11b4:	4805      	ldr	r0, [pc, #20]	; (c11cc <_Z33system_initialize_user_backup_ramv+0x18>)
   c11b6:	4a06      	ldr	r2, [pc, #24]	; (c11d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c11b8:	4906      	ldr	r1, [pc, #24]	; (c11d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c11ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c11bc:	1a12      	subs	r2, r2, r0
   c11be:	f000 ffaf 	bl	c2120 <memcpy>
    __backup_sram_signature = signature;
   c11c2:	4b05      	ldr	r3, [pc, #20]	; (c11d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   c11c4:	4a05      	ldr	r2, [pc, #20]	; (c11dc <_Z33system_initialize_user_backup_ramv+0x28>)
   c11c6:	601a      	str	r2, [r3, #0]
}
   c11c8:	bd08      	pop	{r3, pc}
   c11ca:	bf00      	nop
   c11cc:	2003f400 	.word	0x2003f400
   c11d0:	2003f404 	.word	0x2003f404
   c11d4:	000c60c4 	.word	0x000c60c4
   c11d8:	2003f400 	.word	0x2003f400
   c11dc:	9a271c1e 	.word	0x9a271c1e

000c11e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c11e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c11e2:	2300      	movs	r3, #0
   c11e4:	9300      	str	r3, [sp, #0]
   c11e6:	461a      	mov	r2, r3
   c11e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c11ec:	f7fc f9a8 	bl	bd540 <system_ctrl_set_result>
}
   c11f0:	b003      	add	sp, #12
   c11f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c11f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c11f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c11fa:	8843      	ldrh	r3, [r0, #2]
   c11fc:	2b0a      	cmp	r3, #10
   c11fe:	d008      	beq.n	c1212 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1200:	2b50      	cmp	r3, #80	; 0x50
   c1202:	d10b      	bne.n	c121c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1204:	4b09      	ldr	r3, [pc, #36]	; (c122c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1206:	681b      	ldr	r3, [r3, #0]
   c1208:	b14b      	cbz	r3, c121e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c120a:	b003      	add	sp, #12
   c120c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1210:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1212:	f7ff ffe5 	bl	c11e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1216:	b003      	add	sp, #12
   c1218:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c121c:	2300      	movs	r3, #0
   c121e:	9300      	str	r3, [sp, #0]
   c1220:	461a      	mov	r2, r3
   c1222:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1226:	f7fc f98b 	bl	bd540 <system_ctrl_set_result>
}
   c122a:	e7f4      	b.n	c1216 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c122c:	2003e724 	.word	0x2003e724

000c1230 <module_user_init_hook>:
{
   c1230:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1232:	4812      	ldr	r0, [pc, #72]	; (c127c <module_user_init_hook+0x4c>)
   c1234:	2100      	movs	r1, #0
   c1236:	f7fc fa6d 	bl	bd714 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c123a:	4b11      	ldr	r3, [pc, #68]	; (c1280 <module_user_init_hook+0x50>)
   c123c:	681a      	ldr	r2, [r3, #0]
   c123e:	4b11      	ldr	r3, [pc, #68]	; (c1284 <module_user_init_hook+0x54>)
   c1240:	429a      	cmp	r2, r3
   c1242:	4b11      	ldr	r3, [pc, #68]	; (c1288 <module_user_init_hook+0x58>)
   c1244:	bf0c      	ite	eq
   c1246:	2201      	moveq	r2, #1
   c1248:	2200      	movne	r2, #0
   c124a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c124c:	d001      	beq.n	c1252 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c124e:	f7ff ffb1 	bl	c11b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1252:	f7fb ff21 	bl	bd098 <HAL_RNG_GetRandomNumber>
   c1256:	4604      	mov	r4, r0
    srand(seed);
   c1258:	f000 ff92 	bl	c2180 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c125c:	4b0b      	ldr	r3, [pc, #44]	; (c128c <module_user_init_hook+0x5c>)
   c125e:	b113      	cbz	r3, c1266 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1260:	4620      	mov	r0, r4
   c1262:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1266:	2100      	movs	r1, #0
   c1268:	4808      	ldr	r0, [pc, #32]	; (c128c <module_user_init_hook+0x5c>)
   c126a:	f7fc f99b 	bl	bd5a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c126e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1272:	4807      	ldr	r0, [pc, #28]	; (c1290 <module_user_init_hook+0x60>)
   c1274:	2100      	movs	r1, #0
   c1276:	f7fc b959 	b.w	bd52c <system_ctrl_set_app_request_handler>
   c127a:	bf00      	nop
   c127c:	000c115d 	.word	0x000c115d
   c1280:	2003f400 	.word	0x2003f400
   c1284:	9a271c1e 	.word	0x9a271c1e
   c1288:	2003e720 	.word	0x2003e720
   c128c:	00000000 	.word	0x00000000
   c1290:	000c11f9 	.word	0x000c11f9

000c1294 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1294:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1296:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1298:	d902      	bls.n	c12a0 <pinAvailable+0xc>
    return false;
   c129a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c129c:	b002      	add	sp, #8
   c129e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c12a0:	f1a0 030b 	sub.w	r3, r0, #11
   c12a4:	2b02      	cmp	r3, #2
   c12a6:	d81a      	bhi.n	c12de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c12a8:	4c17      	ldr	r4, [pc, #92]	; (c1308 <pinAvailable+0x74>)
   c12aa:	7821      	ldrb	r1, [r4, #0]
   c12ac:	f3bf 8f5b 	dmb	ish
   c12b0:	f011 0101 	ands.w	r1, r1, #1
   c12b4:	d10b      	bne.n	c12ce <pinAvailable+0x3a>
   c12b6:	4620      	mov	r0, r4
   c12b8:	9101      	str	r1, [sp, #4]
   c12ba:	f7f2 ff01 	bl	b40c0 <__cxa_guard_acquire>
   c12be:	9901      	ldr	r1, [sp, #4]
   c12c0:	b128      	cbz	r0, c12ce <pinAvailable+0x3a>
   c12c2:	4812      	ldr	r0, [pc, #72]	; (c130c <pinAvailable+0x78>)
   c12c4:	f7ff fb5b 	bl	c097e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c12c8:	4620      	mov	r0, r4
   c12ca:	f7f2 fefe 	bl	b40ca <__cxa_guard_release>
   c12ce:	4b0f      	ldr	r3, [pc, #60]	; (c130c <pinAvailable+0x78>)
   c12d0:	7818      	ldrb	r0, [r3, #0]
   c12d2:	f7fb fff9 	bl	bd2c8 <hal_spi_is_enabled>
   c12d6:	2800      	cmp	r0, #0
   c12d8:	d1df      	bne.n	c129a <pinAvailable+0x6>
  return true; // 'pin' is available
   c12da:	2001      	movs	r0, #1
   c12dc:	e7de      	b.n	c129c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c12de:	2801      	cmp	r0, #1
   c12e0:	d809      	bhi.n	c12f6 <pinAvailable+0x62>
   c12e2:	f000 f86d 	bl	c13c0 <_Z19__fetch_global_Wirev>
   c12e6:	2100      	movs	r1, #0
   c12e8:	7c00      	ldrb	r0, [r0, #16]
   c12ea:	f7fb ff85 	bl	bd1f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c12ee:	f080 0001 	eor.w	r0, r0, #1
   c12f2:	b2c0      	uxtb	r0, r0
   c12f4:	e7d2      	b.n	c129c <pinAvailable+0x8>
   c12f6:	3809      	subs	r0, #9
   c12f8:	2801      	cmp	r0, #1
   c12fa:	d8ee      	bhi.n	c12da <pinAvailable+0x46>
   c12fc:	f000 f8a0 	bl	c1440 <_Z22__fetch_global_Serial1v>
   c1300:	7c00      	ldrb	r0, [r0, #16]
   c1302:	f7fc f851 	bl	bd3a8 <hal_usart_is_enabled>
   c1306:	e7f2      	b.n	c12ee <pinAvailable+0x5a>
   c1308:	2003dd70 	.word	0x2003dd70
   c130c:	2003dd74 	.word	0x2003dd74

000c1310 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1310:	2825      	cmp	r0, #37	; 0x25
{
   c1312:	b538      	push	{r3, r4, r5, lr}
   c1314:	4604      	mov	r4, r0
   c1316:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1318:	d80a      	bhi.n	c1330 <pinMode+0x20>
   c131a:	29ff      	cmp	r1, #255	; 0xff
   c131c:	d008      	beq.n	c1330 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c131e:	f7ff ffb9 	bl	c1294 <pinAvailable>
   c1322:	b128      	cbz	r0, c1330 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1324:	4629      	mov	r1, r5
   c1326:	4620      	mov	r0, r4
}
   c1328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c132c:	f7fb beec 	b.w	bd108 <HAL_Pin_Mode>
}
   c1330:	bd38      	pop	{r3, r4, r5, pc}

000c1332 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1332:	b538      	push	{r3, r4, r5, lr}
   c1334:	4604      	mov	r4, r0
   c1336:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1338:	f7fb feee 	bl	bd118 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c133c:	28ff      	cmp	r0, #255	; 0xff
   c133e:	d010      	beq.n	c1362 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1340:	2806      	cmp	r0, #6
   c1342:	d804      	bhi.n	c134e <digitalWrite+0x1c>
   c1344:	234d      	movs	r3, #77	; 0x4d
   c1346:	fa23 f000 	lsr.w	r0, r3, r0
   c134a:	07c3      	lsls	r3, r0, #31
   c134c:	d409      	bmi.n	c1362 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c134e:	4620      	mov	r0, r4
   c1350:	f7ff ffa0 	bl	c1294 <pinAvailable>
   c1354:	b128      	cbz	r0, c1362 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1356:	4629      	mov	r1, r5
   c1358:	4620      	mov	r0, r4
}
   c135a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c135e:	f7fb bee3 	b.w	bd128 <HAL_GPIO_Write>
}
   c1362:	bd38      	pop	{r3, r4, r5, pc}

000c1364 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1364:	280d      	cmp	r0, #13
{
   c1366:	b510      	push	{r4, lr}
   c1368:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c136a:	bf9c      	itt	ls
   c136c:	340e      	addls	r4, #14
   c136e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1370:	4620      	mov	r0, r4
   c1372:	f7ff ff8f 	bl	c1294 <pinAvailable>
   c1376:	b150      	cbz	r0, c138e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1378:	2103      	movs	r1, #3
   c137a:	4620      	mov	r0, r4
   c137c:	f7fb febc 	bl	bd0f8 <HAL_Validate_Pin_Function>
   c1380:	2803      	cmp	r0, #3
   c1382:	d104      	bne.n	c138e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1384:	4620      	mov	r0, r4
}
   c1386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c138a:	f7fb bee5 	b.w	bd158 <hal_adc_read>
}
   c138e:	2000      	movs	r0, #0
   c1390:	bd10      	pop	{r4, pc}

000c1392 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1392:	4770      	bx	lr

000c1394 <_Z17acquireWireBufferv>:
{
   c1394:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1396:	2520      	movs	r5, #32
   c1398:	2314      	movs	r3, #20
{
   c139a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c139c:	6003      	str	r3, [r0, #0]
   c139e:	6085      	str	r5, [r0, #8]
   c13a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c13a2:	4906      	ldr	r1, [pc, #24]	; (c13bc <_Z17acquireWireBufferv+0x28>)
   c13a4:	4628      	mov	r0, r5
   c13a6:	f000 f871 	bl	c148c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c13aa:	4904      	ldr	r1, [pc, #16]	; (c13bc <_Z17acquireWireBufferv+0x28>)
	};
   c13ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c13ae:	4628      	mov	r0, r5
   c13b0:	f000 f86c 	bl	c148c <_ZnajRKSt9nothrow_t>
	};
   c13b4:	60e0      	str	r0, [r4, #12]
}
   c13b6:	4620      	mov	r0, r4
   c13b8:	bd38      	pop	{r3, r4, r5, pc}
   c13ba:	bf00      	nop
   c13bc:	000c5bd0 	.word	0x000c5bd0

000c13c0 <_Z19__fetch_global_Wirev>:
{
   c13c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c13c2:	4d0e      	ldr	r5, [pc, #56]	; (c13fc <_Z19__fetch_global_Wirev+0x3c>)
   c13c4:	7829      	ldrb	r1, [r5, #0]
   c13c6:	f3bf 8f5b 	dmb	ish
   c13ca:	f011 0401 	ands.w	r4, r1, #1
{
   c13ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c13d0:	d111      	bne.n	c13f6 <_Z19__fetch_global_Wirev+0x36>
   c13d2:	4628      	mov	r0, r5
   c13d4:	f7f2 fe74 	bl	b40c0 <__cxa_guard_acquire>
   c13d8:	b168      	cbz	r0, c13f6 <_Z19__fetch_global_Wirev+0x36>
   c13da:	a801      	add	r0, sp, #4
   c13dc:	f7ff ffda 	bl	c1394 <_Z17acquireWireBufferv>
   c13e0:	aa01      	add	r2, sp, #4
   c13e2:	4621      	mov	r1, r4
   c13e4:	4806      	ldr	r0, [pc, #24]	; (c1400 <_Z19__fetch_global_Wirev+0x40>)
   c13e6:	f7fd fec5 	bl	bf174 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c13ea:	4628      	mov	r0, r5
   c13ec:	f7f2 fe6d 	bl	b40ca <__cxa_guard_release>
   c13f0:	4804      	ldr	r0, [pc, #16]	; (c1404 <_Z19__fetch_global_Wirev+0x44>)
   c13f2:	f000 fe6f 	bl	c20d4 <atexit>
	return wire;
}
   c13f6:	4802      	ldr	r0, [pc, #8]	; (c1400 <_Z19__fetch_global_Wirev+0x40>)
   c13f8:	b007      	add	sp, #28
   c13fa:	bd30      	pop	{r4, r5, pc}
   c13fc:	2003e72c 	.word	0x2003e72c
   c1400:	2003e730 	.word	0x2003e730
   c1404:	000c1393 	.word	0x000c1393

000c1408 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1408:	4770      	bx	lr
	...

000c140c <_Z20acquireSerial1Bufferv>:
{
   c140c:	b538      	push	{r3, r4, r5, lr}
   c140e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1410:	2514      	movs	r5, #20
   c1412:	462a      	mov	r2, r5
   c1414:	2100      	movs	r1, #0
   c1416:	f000 feab 	bl	c2170 <memset>
   c141a:	8025      	strh	r5, [r4, #0]
   c141c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c141e:	4907      	ldr	r1, [pc, #28]	; (c143c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1420:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1422:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1424:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1426:	f000 f831 	bl	c148c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c142a:	4904      	ldr	r1, [pc, #16]	; (c143c <_Z20acquireSerial1Bufferv+0x30>)
    };
   c142c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c142e:	4628      	mov	r0, r5
   c1430:	f000 f82c 	bl	c148c <_ZnajRKSt9nothrow_t>
    };
   c1434:	60e0      	str	r0, [r4, #12]
}
   c1436:	4620      	mov	r0, r4
   c1438:	bd38      	pop	{r3, r4, r5, pc}
   c143a:	bf00      	nop
   c143c:	000c5bd0 	.word	0x000c5bd0

000c1440 <_Z22__fetch_global_Serial1v>:
{
   c1440:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1442:	4d0e      	ldr	r5, [pc, #56]	; (c147c <_Z22__fetch_global_Serial1v+0x3c>)
   c1444:	7829      	ldrb	r1, [r5, #0]
   c1446:	f3bf 8f5b 	dmb	ish
   c144a:	f011 0401 	ands.w	r4, r1, #1
{
   c144e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1450:	d111      	bne.n	c1476 <_Z22__fetch_global_Serial1v+0x36>
   c1452:	4628      	mov	r0, r5
   c1454:	f7f2 fe34 	bl	b40c0 <__cxa_guard_acquire>
   c1458:	b168      	cbz	r0, c1476 <_Z22__fetch_global_Serial1v+0x36>
   c145a:	a801      	add	r0, sp, #4
   c145c:	f7ff ffd6 	bl	c140c <_Z20acquireSerial1Bufferv>
   c1460:	aa01      	add	r2, sp, #4
   c1462:	4621      	mov	r1, r4
   c1464:	4806      	ldr	r0, [pc, #24]	; (c1480 <_Z22__fetch_global_Serial1v+0x40>)
   c1466:	f7ff fdd3 	bl	c1010 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c146a:	4628      	mov	r0, r5
   c146c:	f7f2 fe2d 	bl	b40ca <__cxa_guard_release>
   c1470:	4804      	ldr	r0, [pc, #16]	; (c1484 <_Z22__fetch_global_Serial1v+0x44>)
   c1472:	f000 fe2f 	bl	c20d4 <atexit>
    return serial1;
}
   c1476:	4802      	ldr	r0, [pc, #8]	; (c1480 <_Z22__fetch_global_Serial1v+0x40>)
   c1478:	b007      	add	sp, #28
   c147a:	bd30      	pop	{r4, r5, pc}
   c147c:	2003e744 	.word	0x2003e744
   c1480:	2003e748 	.word	0x2003e748
   c1484:	000c1409 	.word	0x000c1409

000c1488 <_ZnwjRKSt9nothrow_t>:
   c1488:	f7f2 be05 	b.w	b4096 <_Znwj>

000c148c <_ZnajRKSt9nothrow_t>:
   c148c:	f7f2 be05 	b.w	b409a <_Znaj>

000c1490 <_ZSt25__throw_bad_function_callv>:
   c1490:	b508      	push	{r3, lr}
   c1492:	f7fc f91f 	bl	bd6d4 <abort>
	...

000c1498 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1498:	4901      	ldr	r1, [pc, #4]	; (c14a0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c149a:	f000 b8f9 	b.w	c1690 <_ZNKSt9type_infoeqERKS_>
   c149e:	bf00      	nop
   c14a0:	000c5bec 	.word	0x000c5bec

000c14a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c14a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c14a6:	2400      	movs	r4, #0
   c14a8:	2310      	movs	r3, #16
   c14aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c14ae:	6803      	ldr	r3, [r0, #0]
   c14b0:	4615      	mov	r5, r2
   c14b2:	699e      	ldr	r6, [r3, #24]
   c14b4:	6812      	ldr	r2, [r2, #0]
   c14b6:	466b      	mov	r3, sp
   c14b8:	e9cd 4400 	strd	r4, r4, [sp]
   c14bc:	47b0      	blx	r6
   c14be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c14c2:	f003 0306 	and.w	r3, r3, #6
   c14c6:	2b06      	cmp	r3, #6
   c14c8:	bf03      	ittte	eq
   c14ca:	9b00      	ldreq	r3, [sp, #0]
   c14cc:	602b      	streq	r3, [r5, #0]
   c14ce:	2001      	moveq	r0, #1
   c14d0:	4620      	movne	r0, r4
   c14d2:	b004      	add	sp, #16
   c14d4:	bd70      	pop	{r4, r5, r6, pc}

000c14d6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c14d6:	9800      	ldr	r0, [sp, #0]
   c14d8:	4290      	cmp	r0, r2
   c14da:	bf14      	ite	ne
   c14dc:	2001      	movne	r0, #1
   c14de:	2006      	moveq	r0, #6
   c14e0:	4770      	bx	lr
	...

000c14e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c14e4:	b510      	push	{r4, lr}
   c14e6:	4b03      	ldr	r3, [pc, #12]	; (c14f4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c14e8:	6003      	str	r3, [r0, #0]
   c14ea:	4604      	mov	r4, r0
   c14ec:	f000 f8cd 	bl	c168a <_ZNSt9type_infoD1Ev>
   c14f0:	4620      	mov	r0, r4
   c14f2:	bd10      	pop	{r4, pc}
   c14f4:	000c5c2c 	.word	0x000c5c2c

000c14f8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c14f8:	b510      	push	{r4, lr}
   c14fa:	4604      	mov	r4, r0
   c14fc:	f7ff fff2 	bl	c14e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1500:	4620      	mov	r0, r4
   c1502:	2108      	movs	r1, #8
   c1504:	f7f2 fdcd 	bl	b40a2 <_ZdlPvj>
   c1508:	4620      	mov	r0, r4
   c150a:	bd10      	pop	{r4, pc}

000c150c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1510:	461f      	mov	r7, r3
   c1512:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1516:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c151a:	4598      	cmp	r8, r3
   c151c:	4606      	mov	r6, r0
   c151e:	4615      	mov	r5, r2
   c1520:	d107      	bne.n	c1532 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1522:	9907      	ldr	r1, [sp, #28]
   c1524:	f000 f8b4 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c1528:	b118      	cbz	r0, c1532 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c152a:	7165      	strb	r5, [r4, #5]
   c152c:	2000      	movs	r0, #0
   c152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1532:	4639      	mov	r1, r7
   c1534:	4630      	mov	r0, r6
   c1536:	f000 f8ab 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c153a:	2800      	cmp	r0, #0
   c153c:	d0f6      	beq.n	c152c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c153e:	2301      	movs	r3, #1
   c1540:	f8c4 8000 	str.w	r8, [r4]
   c1544:	7125      	strb	r5, [r4, #4]
   c1546:	71a3      	strb	r3, [r4, #6]
   c1548:	e7f0      	b.n	c152c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c154a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c154a:	b538      	push	{r3, r4, r5, lr}
   c154c:	4615      	mov	r5, r2
   c154e:	461c      	mov	r4, r3
   c1550:	f000 f89e 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c1554:	b120      	cbz	r0, c1560 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1556:	2308      	movs	r3, #8
   c1558:	60e3      	str	r3, [r4, #12]
   c155a:	2306      	movs	r3, #6
   c155c:	6025      	str	r5, [r4, #0]
   c155e:	7123      	strb	r3, [r4, #4]
   c1560:	bd38      	pop	{r3, r4, r5, pc}

000c1562 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1562:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1564:	4605      	mov	r5, r0
   c1566:	460c      	mov	r4, r1
   c1568:	9201      	str	r2, [sp, #4]
   c156a:	461e      	mov	r6, r3
   c156c:	f000 f890 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c1570:	b950      	cbnz	r0, c1588 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1572:	2e03      	cmp	r6, #3
   c1574:	d808      	bhi.n	c1588 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1576:	6823      	ldr	r3, [r4, #0]
   c1578:	9a01      	ldr	r2, [sp, #4]
   c157a:	695b      	ldr	r3, [r3, #20]
   c157c:	4629      	mov	r1, r5
   c157e:	4620      	mov	r0, r4
   c1580:	b002      	add	sp, #8
   c1582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1586:	4718      	bx	r3
   c1588:	b002      	add	sp, #8
   c158a:	bd70      	pop	{r4, r5, r6, pc}

000c158c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c158c:	b510      	push	{r4, lr}
   c158e:	4b03      	ldr	r3, [pc, #12]	; (c159c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1590:	6003      	str	r3, [r0, #0]
   c1592:	4604      	mov	r4, r0
   c1594:	f7ff ffa6 	bl	c14e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1598:	4620      	mov	r0, r4
   c159a:	bd10      	pop	{r4, pc}
   c159c:	000c5c8c 	.word	0x000c5c8c

000c15a0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c15a0:	b510      	push	{r4, lr}
   c15a2:	4604      	mov	r4, r0
   c15a4:	f7ff fff2 	bl	c158c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c15a8:	4620      	mov	r0, r4
   c15aa:	210c      	movs	r1, #12
   c15ac:	f7f2 fd79 	bl	b40a2 <_ZdlPvj>
   c15b0:	4620      	mov	r0, r4
   c15b2:	bd10      	pop	{r4, pc}

000c15b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c15b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c15b6:	9f08      	ldr	r7, [sp, #32]
   c15b8:	4297      	cmp	r7, r2
   c15ba:	4605      	mov	r5, r0
   c15bc:	460e      	mov	r6, r1
   c15be:	4614      	mov	r4, r2
   c15c0:	d00a      	beq.n	c15d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c15c2:	68a8      	ldr	r0, [r5, #8]
   c15c4:	6802      	ldr	r2, [r0, #0]
   c15c6:	9708      	str	r7, [sp, #32]
   c15c8:	6a15      	ldr	r5, [r2, #32]
   c15ca:	4631      	mov	r1, r6
   c15cc:	4622      	mov	r2, r4
   c15ce:	46ac      	mov	ip, r5
   c15d0:	b003      	add	sp, #12
   c15d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c15d6:	4760      	bx	ip
   c15d8:	4619      	mov	r1, r3
   c15da:	9301      	str	r3, [sp, #4]
   c15dc:	f000 f858 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c15e0:	9b01      	ldr	r3, [sp, #4]
   c15e2:	2800      	cmp	r0, #0
   c15e4:	d0ed      	beq.n	c15c2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c15e6:	2006      	movs	r0, #6
   c15e8:	b003      	add	sp, #12
   c15ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c15ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c15ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c15f0:	460d      	mov	r5, r1
   c15f2:	4619      	mov	r1, r3
   c15f4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c15f8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c15fc:	4681      	mov	r9, r0
   c15fe:	4617      	mov	r7, r2
   c1600:	4698      	mov	r8, r3
   c1602:	f000 f845 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c1606:	b190      	cbz	r0, c162e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c1608:	2d00      	cmp	r5, #0
   c160a:	6034      	str	r4, [r6, #0]
   c160c:	7137      	strb	r7, [r6, #4]
   c160e:	db09      	blt.n	c1624 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1610:	1961      	adds	r1, r4, r5
   c1612:	458a      	cmp	sl, r1
   c1614:	bf0c      	ite	eq
   c1616:	2106      	moveq	r1, #6
   c1618:	2101      	movne	r1, #1
   c161a:	71b1      	strb	r1, [r6, #6]
   c161c:	2000      	movs	r0, #0
   c161e:	b001      	add	sp, #4
   c1620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1624:	3502      	adds	r5, #2
   c1626:	d1f9      	bne.n	c161c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1628:	2301      	movs	r3, #1
   c162a:	71b3      	strb	r3, [r6, #6]
   c162c:	e7f6      	b.n	c161c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c162e:	4554      	cmp	r4, sl
   c1630:	d106      	bne.n	c1640 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1632:	4659      	mov	r1, fp
   c1634:	4648      	mov	r0, r9
   c1636:	f000 f82b 	bl	c1690 <_ZNKSt9type_infoeqERKS_>
   c163a:	b108      	cbz	r0, c1640 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c163c:	7177      	strb	r7, [r6, #5]
   c163e:	e7ed      	b.n	c161c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1640:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1644:	6803      	ldr	r3, [r0, #0]
   c1646:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c164a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c164e:	69dc      	ldr	r4, [r3, #28]
   c1650:	463a      	mov	r2, r7
   c1652:	4643      	mov	r3, r8
   c1654:	4629      	mov	r1, r5
   c1656:	46a4      	mov	ip, r4
   c1658:	b001      	add	sp, #4
   c165a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c165e:	4760      	bx	ip

000c1660 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1664:	4607      	mov	r7, r0
   c1666:	460c      	mov	r4, r1
   c1668:	4615      	mov	r5, r2
   c166a:	461e      	mov	r6, r3
   c166c:	f7ff ff6d 	bl	c154a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1670:	b948      	cbnz	r0, c1686 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1672:	68b8      	ldr	r0, [r7, #8]
   c1674:	6803      	ldr	r3, [r0, #0]
   c1676:	699f      	ldr	r7, [r3, #24]
   c1678:	462a      	mov	r2, r5
   c167a:	4633      	mov	r3, r6
   c167c:	4621      	mov	r1, r4
   c167e:	46bc      	mov	ip, r7
   c1680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1684:	4760      	bx	ip
   c1686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c168a <_ZNSt9type_infoD1Ev>:
   c168a:	4770      	bx	lr

000c168c <_ZNKSt9type_info14__is_pointer_pEv>:
   c168c:	2000      	movs	r0, #0
   c168e:	4770      	bx	lr

000c1690 <_ZNKSt9type_infoeqERKS_>:
   c1690:	4281      	cmp	r1, r0
   c1692:	b508      	push	{r3, lr}
   c1694:	d00e      	beq.n	c16b4 <_ZNKSt9type_infoeqERKS_+0x24>
   c1696:	6840      	ldr	r0, [r0, #4]
   c1698:	7803      	ldrb	r3, [r0, #0]
   c169a:	2b2a      	cmp	r3, #42	; 0x2a
   c169c:	d00c      	beq.n	c16b8 <_ZNKSt9type_infoeqERKS_+0x28>
   c169e:	6849      	ldr	r1, [r1, #4]
   c16a0:	780b      	ldrb	r3, [r1, #0]
   c16a2:	2b2a      	cmp	r3, #42	; 0x2a
   c16a4:	bf08      	it	eq
   c16a6:	3101      	addeq	r1, #1
   c16a8:	f000 fdbe 	bl	c2228 <strcmp>
   c16ac:	fab0 f080 	clz	r0, r0
   c16b0:	0940      	lsrs	r0, r0, #5
   c16b2:	bd08      	pop	{r3, pc}
   c16b4:	2001      	movs	r0, #1
   c16b6:	e7fc      	b.n	c16b2 <_ZNKSt9type_infoeqERKS_+0x22>
   c16b8:	2000      	movs	r0, #0
   c16ba:	e7fa      	b.n	c16b2 <_ZNKSt9type_infoeqERKS_+0x22>

000c16bc <__aeabi_drsub>:
   c16bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c16c0:	e002      	b.n	c16c8 <__adddf3>
   c16c2:	bf00      	nop

000c16c4 <__aeabi_dsub>:
   c16c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c16c8 <__adddf3>:
   c16c8:	b530      	push	{r4, r5, lr}
   c16ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c16ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c16d2:	ea94 0f05 	teq	r4, r5
   c16d6:	bf08      	it	eq
   c16d8:	ea90 0f02 	teqeq	r0, r2
   c16dc:	bf1f      	itttt	ne
   c16de:	ea54 0c00 	orrsne.w	ip, r4, r0
   c16e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   c16e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c16ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c16ee:	f000 80e2 	beq.w	c18b6 <__adddf3+0x1ee>
   c16f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c16f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c16fa:	bfb8      	it	lt
   c16fc:	426d      	neglt	r5, r5
   c16fe:	dd0c      	ble.n	c171a <__adddf3+0x52>
   c1700:	442c      	add	r4, r5
   c1702:	ea80 0202 	eor.w	r2, r0, r2
   c1706:	ea81 0303 	eor.w	r3, r1, r3
   c170a:	ea82 0000 	eor.w	r0, r2, r0
   c170e:	ea83 0101 	eor.w	r1, r3, r1
   c1712:	ea80 0202 	eor.w	r2, r0, r2
   c1716:	ea81 0303 	eor.w	r3, r1, r3
   c171a:	2d36      	cmp	r5, #54	; 0x36
   c171c:	bf88      	it	hi
   c171e:	bd30      	pophi	{r4, r5, pc}
   c1720:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c1724:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c1728:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c172c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c1730:	d002      	beq.n	c1738 <__adddf3+0x70>
   c1732:	4240      	negs	r0, r0
   c1734:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1738:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c173c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c1740:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c1744:	d002      	beq.n	c174c <__adddf3+0x84>
   c1746:	4252      	negs	r2, r2
   c1748:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c174c:	ea94 0f05 	teq	r4, r5
   c1750:	f000 80a7 	beq.w	c18a2 <__adddf3+0x1da>
   c1754:	f1a4 0401 	sub.w	r4, r4, #1
   c1758:	f1d5 0e20 	rsbs	lr, r5, #32
   c175c:	db0d      	blt.n	c177a <__adddf3+0xb2>
   c175e:	fa02 fc0e 	lsl.w	ip, r2, lr
   c1762:	fa22 f205 	lsr.w	r2, r2, r5
   c1766:	1880      	adds	r0, r0, r2
   c1768:	f141 0100 	adc.w	r1, r1, #0
   c176c:	fa03 f20e 	lsl.w	r2, r3, lr
   c1770:	1880      	adds	r0, r0, r2
   c1772:	fa43 f305 	asr.w	r3, r3, r5
   c1776:	4159      	adcs	r1, r3
   c1778:	e00e      	b.n	c1798 <__adddf3+0xd0>
   c177a:	f1a5 0520 	sub.w	r5, r5, #32
   c177e:	f10e 0e20 	add.w	lr, lr, #32
   c1782:	2a01      	cmp	r2, #1
   c1784:	fa03 fc0e 	lsl.w	ip, r3, lr
   c1788:	bf28      	it	cs
   c178a:	f04c 0c02 	orrcs.w	ip, ip, #2
   c178e:	fa43 f305 	asr.w	r3, r3, r5
   c1792:	18c0      	adds	r0, r0, r3
   c1794:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c1798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c179c:	d507      	bpl.n	c17ae <__adddf3+0xe6>
   c179e:	f04f 0e00 	mov.w	lr, #0
   c17a2:	f1dc 0c00 	rsbs	ip, ip, #0
   c17a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   c17aa:	eb6e 0101 	sbc.w	r1, lr, r1
   c17ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c17b2:	d31b      	bcc.n	c17ec <__adddf3+0x124>
   c17b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c17b8:	d30c      	bcc.n	c17d4 <__adddf3+0x10c>
   c17ba:	0849      	lsrs	r1, r1, #1
   c17bc:	ea5f 0030 	movs.w	r0, r0, rrx
   c17c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c17c4:	f104 0401 	add.w	r4, r4, #1
   c17c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c17cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c17d0:	f080 809a 	bcs.w	c1908 <__adddf3+0x240>
   c17d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c17d8:	bf08      	it	eq
   c17da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c17de:	f150 0000 	adcs.w	r0, r0, #0
   c17e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c17e6:	ea41 0105 	orr.w	r1, r1, r5
   c17ea:	bd30      	pop	{r4, r5, pc}
   c17ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c17f0:	4140      	adcs	r0, r0
   c17f2:	eb41 0101 	adc.w	r1, r1, r1
   c17f6:	3c01      	subs	r4, #1
   c17f8:	bf28      	it	cs
   c17fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c17fe:	d2e9      	bcs.n	c17d4 <__adddf3+0x10c>
   c1800:	f091 0f00 	teq	r1, #0
   c1804:	bf04      	itt	eq
   c1806:	4601      	moveq	r1, r0
   c1808:	2000      	moveq	r0, #0
   c180a:	fab1 f381 	clz	r3, r1
   c180e:	bf08      	it	eq
   c1810:	3320      	addeq	r3, #32
   c1812:	f1a3 030b 	sub.w	r3, r3, #11
   c1816:	f1b3 0220 	subs.w	r2, r3, #32
   c181a:	da0c      	bge.n	c1836 <__adddf3+0x16e>
   c181c:	320c      	adds	r2, #12
   c181e:	dd08      	ble.n	c1832 <__adddf3+0x16a>
   c1820:	f102 0c14 	add.w	ip, r2, #20
   c1824:	f1c2 020c 	rsb	r2, r2, #12
   c1828:	fa01 f00c 	lsl.w	r0, r1, ip
   c182c:	fa21 f102 	lsr.w	r1, r1, r2
   c1830:	e00c      	b.n	c184c <__adddf3+0x184>
   c1832:	f102 0214 	add.w	r2, r2, #20
   c1836:	bfd8      	it	le
   c1838:	f1c2 0c20 	rsble	ip, r2, #32
   c183c:	fa01 f102 	lsl.w	r1, r1, r2
   c1840:	fa20 fc0c 	lsr.w	ip, r0, ip
   c1844:	bfdc      	itt	le
   c1846:	ea41 010c 	orrle.w	r1, r1, ip
   c184a:	4090      	lslle	r0, r2
   c184c:	1ae4      	subs	r4, r4, r3
   c184e:	bfa2      	ittt	ge
   c1850:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c1854:	4329      	orrge	r1, r5
   c1856:	bd30      	popge	{r4, r5, pc}
   c1858:	ea6f 0404 	mvn.w	r4, r4
   c185c:	3c1f      	subs	r4, #31
   c185e:	da1c      	bge.n	c189a <__adddf3+0x1d2>
   c1860:	340c      	adds	r4, #12
   c1862:	dc0e      	bgt.n	c1882 <__adddf3+0x1ba>
   c1864:	f104 0414 	add.w	r4, r4, #20
   c1868:	f1c4 0220 	rsb	r2, r4, #32
   c186c:	fa20 f004 	lsr.w	r0, r0, r4
   c1870:	fa01 f302 	lsl.w	r3, r1, r2
   c1874:	ea40 0003 	orr.w	r0, r0, r3
   c1878:	fa21 f304 	lsr.w	r3, r1, r4
   c187c:	ea45 0103 	orr.w	r1, r5, r3
   c1880:	bd30      	pop	{r4, r5, pc}
   c1882:	f1c4 040c 	rsb	r4, r4, #12
   c1886:	f1c4 0220 	rsb	r2, r4, #32
   c188a:	fa20 f002 	lsr.w	r0, r0, r2
   c188e:	fa01 f304 	lsl.w	r3, r1, r4
   c1892:	ea40 0003 	orr.w	r0, r0, r3
   c1896:	4629      	mov	r1, r5
   c1898:	bd30      	pop	{r4, r5, pc}
   c189a:	fa21 f004 	lsr.w	r0, r1, r4
   c189e:	4629      	mov	r1, r5
   c18a0:	bd30      	pop	{r4, r5, pc}
   c18a2:	f094 0f00 	teq	r4, #0
   c18a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c18aa:	bf06      	itte	eq
   c18ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c18b0:	3401      	addeq	r4, #1
   c18b2:	3d01      	subne	r5, #1
   c18b4:	e74e      	b.n	c1754 <__adddf3+0x8c>
   c18b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c18ba:	bf18      	it	ne
   c18bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c18c0:	d029      	beq.n	c1916 <__adddf3+0x24e>
   c18c2:	ea94 0f05 	teq	r4, r5
   c18c6:	bf08      	it	eq
   c18c8:	ea90 0f02 	teqeq	r0, r2
   c18cc:	d005      	beq.n	c18da <__adddf3+0x212>
   c18ce:	ea54 0c00 	orrs.w	ip, r4, r0
   c18d2:	bf04      	itt	eq
   c18d4:	4619      	moveq	r1, r3
   c18d6:	4610      	moveq	r0, r2
   c18d8:	bd30      	pop	{r4, r5, pc}
   c18da:	ea91 0f03 	teq	r1, r3
   c18de:	bf1e      	ittt	ne
   c18e0:	2100      	movne	r1, #0
   c18e2:	2000      	movne	r0, #0
   c18e4:	bd30      	popne	{r4, r5, pc}
   c18e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c18ea:	d105      	bne.n	c18f8 <__adddf3+0x230>
   c18ec:	0040      	lsls	r0, r0, #1
   c18ee:	4149      	adcs	r1, r1
   c18f0:	bf28      	it	cs
   c18f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c18f6:	bd30      	pop	{r4, r5, pc}
   c18f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c18fc:	bf3c      	itt	cc
   c18fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c1902:	bd30      	popcc	{r4, r5, pc}
   c1904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1908:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c190c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1910:	f04f 0000 	mov.w	r0, #0
   c1914:	bd30      	pop	{r4, r5, pc}
   c1916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c191a:	bf1a      	itte	ne
   c191c:	4619      	movne	r1, r3
   c191e:	4610      	movne	r0, r2
   c1920:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c1924:	bf1c      	itt	ne
   c1926:	460b      	movne	r3, r1
   c1928:	4602      	movne	r2, r0
   c192a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c192e:	bf06      	itte	eq
   c1930:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c1934:	ea91 0f03 	teqeq	r1, r3
   c1938:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c193c:	bd30      	pop	{r4, r5, pc}
   c193e:	bf00      	nop

000c1940 <__aeabi_ui2d>:
   c1940:	f090 0f00 	teq	r0, #0
   c1944:	bf04      	itt	eq
   c1946:	2100      	moveq	r1, #0
   c1948:	4770      	bxeq	lr
   c194a:	b530      	push	{r4, r5, lr}
   c194c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1950:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1954:	f04f 0500 	mov.w	r5, #0
   c1958:	f04f 0100 	mov.w	r1, #0
   c195c:	e750      	b.n	c1800 <__adddf3+0x138>
   c195e:	bf00      	nop

000c1960 <__aeabi_i2d>:
   c1960:	f090 0f00 	teq	r0, #0
   c1964:	bf04      	itt	eq
   c1966:	2100      	moveq	r1, #0
   c1968:	4770      	bxeq	lr
   c196a:	b530      	push	{r4, r5, lr}
   c196c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1970:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1974:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c1978:	bf48      	it	mi
   c197a:	4240      	negmi	r0, r0
   c197c:	f04f 0100 	mov.w	r1, #0
   c1980:	e73e      	b.n	c1800 <__adddf3+0x138>
   c1982:	bf00      	nop

000c1984 <__aeabi_f2d>:
   c1984:	0042      	lsls	r2, r0, #1
   c1986:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c198a:	ea4f 0131 	mov.w	r1, r1, rrx
   c198e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c1992:	bf1f      	itttt	ne
   c1994:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c1998:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c199c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c19a0:	4770      	bxne	lr
   c19a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c19a6:	bf08      	it	eq
   c19a8:	4770      	bxeq	lr
   c19aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c19ae:	bf04      	itt	eq
   c19b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c19b4:	4770      	bxeq	lr
   c19b6:	b530      	push	{r4, r5, lr}
   c19b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   c19bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c19c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c19c4:	e71c      	b.n	c1800 <__adddf3+0x138>
   c19c6:	bf00      	nop

000c19c8 <__aeabi_ul2d>:
   c19c8:	ea50 0201 	orrs.w	r2, r0, r1
   c19cc:	bf08      	it	eq
   c19ce:	4770      	bxeq	lr
   c19d0:	b530      	push	{r4, r5, lr}
   c19d2:	f04f 0500 	mov.w	r5, #0
   c19d6:	e00a      	b.n	c19ee <__aeabi_l2d+0x16>

000c19d8 <__aeabi_l2d>:
   c19d8:	ea50 0201 	orrs.w	r2, r0, r1
   c19dc:	bf08      	it	eq
   c19de:	4770      	bxeq	lr
   c19e0:	b530      	push	{r4, r5, lr}
   c19e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c19e6:	d502      	bpl.n	c19ee <__aeabi_l2d+0x16>
   c19e8:	4240      	negs	r0, r0
   c19ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c19ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c19f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c19f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c19fa:	f43f aed8 	beq.w	c17ae <__adddf3+0xe6>
   c19fe:	f04f 0203 	mov.w	r2, #3
   c1a02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1a06:	bf18      	it	ne
   c1a08:	3203      	addne	r2, #3
   c1a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1a0e:	bf18      	it	ne
   c1a10:	3203      	addne	r2, #3
   c1a12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c1a16:	f1c2 0320 	rsb	r3, r2, #32
   c1a1a:	fa00 fc03 	lsl.w	ip, r0, r3
   c1a1e:	fa20 f002 	lsr.w	r0, r0, r2
   c1a22:	fa01 fe03 	lsl.w	lr, r1, r3
   c1a26:	ea40 000e 	orr.w	r0, r0, lr
   c1a2a:	fa21 f102 	lsr.w	r1, r1, r2
   c1a2e:	4414      	add	r4, r2
   c1a30:	e6bd      	b.n	c17ae <__adddf3+0xe6>
   c1a32:	bf00      	nop

000c1a34 <__aeabi_dmul>:
   c1a34:	b570      	push	{r4, r5, r6, lr}
   c1a36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1a3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1a3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1a42:	bf1d      	ittte	ne
   c1a44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1a48:	ea94 0f0c 	teqne	r4, ip
   c1a4c:	ea95 0f0c 	teqne	r5, ip
   c1a50:	f000 f8de 	bleq	c1c10 <__aeabi_dmul+0x1dc>
   c1a54:	442c      	add	r4, r5
   c1a56:	ea81 0603 	eor.w	r6, r1, r3
   c1a5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c1a5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c1a62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c1a66:	bf18      	it	ne
   c1a68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c1a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1a74:	d038      	beq.n	c1ae8 <__aeabi_dmul+0xb4>
   c1a76:	fba0 ce02 	umull	ip, lr, r0, r2
   c1a7a:	f04f 0500 	mov.w	r5, #0
   c1a7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   c1a82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c1a86:	fbe0 e503 	umlal	lr, r5, r0, r3
   c1a8a:	f04f 0600 	mov.w	r6, #0
   c1a8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   c1a92:	f09c 0f00 	teq	ip, #0
   c1a96:	bf18      	it	ne
   c1a98:	f04e 0e01 	orrne.w	lr, lr, #1
   c1a9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c1aa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c1aa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c1aa8:	d204      	bcs.n	c1ab4 <__aeabi_dmul+0x80>
   c1aaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c1aae:	416d      	adcs	r5, r5
   c1ab0:	eb46 0606 	adc.w	r6, r6, r6
   c1ab4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c1ab8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c1abc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c1ac0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c1ac4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c1ac8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c1acc:	bf88      	it	hi
   c1ace:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c1ad2:	d81e      	bhi.n	c1b12 <__aeabi_dmul+0xde>
   c1ad4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c1ad8:	bf08      	it	eq
   c1ada:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c1ade:	f150 0000 	adcs.w	r0, r0, #0
   c1ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1ae6:	bd70      	pop	{r4, r5, r6, pc}
   c1ae8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c1aec:	ea46 0101 	orr.w	r1, r6, r1
   c1af0:	ea40 0002 	orr.w	r0, r0, r2
   c1af4:	ea81 0103 	eor.w	r1, r1, r3
   c1af8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c1afc:	bfc2      	ittt	gt
   c1afe:	ebd4 050c 	rsbsgt	r5, r4, ip
   c1b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c1b06:	bd70      	popgt	{r4, r5, r6, pc}
   c1b08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1b0c:	f04f 0e00 	mov.w	lr, #0
   c1b10:	3c01      	subs	r4, #1
   c1b12:	f300 80ab 	bgt.w	c1c6c <__aeabi_dmul+0x238>
   c1b16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c1b1a:	bfde      	ittt	le
   c1b1c:	2000      	movle	r0, #0
   c1b1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c1b22:	bd70      	pople	{r4, r5, r6, pc}
   c1b24:	f1c4 0400 	rsb	r4, r4, #0
   c1b28:	3c20      	subs	r4, #32
   c1b2a:	da35      	bge.n	c1b98 <__aeabi_dmul+0x164>
   c1b2c:	340c      	adds	r4, #12
   c1b2e:	dc1b      	bgt.n	c1b68 <__aeabi_dmul+0x134>
   c1b30:	f104 0414 	add.w	r4, r4, #20
   c1b34:	f1c4 0520 	rsb	r5, r4, #32
   c1b38:	fa00 f305 	lsl.w	r3, r0, r5
   c1b3c:	fa20 f004 	lsr.w	r0, r0, r4
   c1b40:	fa01 f205 	lsl.w	r2, r1, r5
   c1b44:	ea40 0002 	orr.w	r0, r0, r2
   c1b48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c1b4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1b50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1b54:	fa21 f604 	lsr.w	r6, r1, r4
   c1b58:	eb42 0106 	adc.w	r1, r2, r6
   c1b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1b60:	bf08      	it	eq
   c1b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1b66:	bd70      	pop	{r4, r5, r6, pc}
   c1b68:	f1c4 040c 	rsb	r4, r4, #12
   c1b6c:	f1c4 0520 	rsb	r5, r4, #32
   c1b70:	fa00 f304 	lsl.w	r3, r0, r4
   c1b74:	fa20 f005 	lsr.w	r0, r0, r5
   c1b78:	fa01 f204 	lsl.w	r2, r1, r4
   c1b7c:	ea40 0002 	orr.w	r0, r0, r2
   c1b80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1b84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1b88:	f141 0100 	adc.w	r1, r1, #0
   c1b8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1b90:	bf08      	it	eq
   c1b92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1b96:	bd70      	pop	{r4, r5, r6, pc}
   c1b98:	f1c4 0520 	rsb	r5, r4, #32
   c1b9c:	fa00 f205 	lsl.w	r2, r0, r5
   c1ba0:	ea4e 0e02 	orr.w	lr, lr, r2
   c1ba4:	fa20 f304 	lsr.w	r3, r0, r4
   c1ba8:	fa01 f205 	lsl.w	r2, r1, r5
   c1bac:	ea43 0302 	orr.w	r3, r3, r2
   c1bb0:	fa21 f004 	lsr.w	r0, r1, r4
   c1bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1bb8:	fa21 f204 	lsr.w	r2, r1, r4
   c1bbc:	ea20 0002 	bic.w	r0, r0, r2
   c1bc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c1bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1bc8:	bf08      	it	eq
   c1bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1bce:	bd70      	pop	{r4, r5, r6, pc}
   c1bd0:	f094 0f00 	teq	r4, #0
   c1bd4:	d10f      	bne.n	c1bf6 <__aeabi_dmul+0x1c2>
   c1bd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c1bda:	0040      	lsls	r0, r0, #1
   c1bdc:	eb41 0101 	adc.w	r1, r1, r1
   c1be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1be4:	bf08      	it	eq
   c1be6:	3c01      	subeq	r4, #1
   c1be8:	d0f7      	beq.n	c1bda <__aeabi_dmul+0x1a6>
   c1bea:	ea41 0106 	orr.w	r1, r1, r6
   c1bee:	f095 0f00 	teq	r5, #0
   c1bf2:	bf18      	it	ne
   c1bf4:	4770      	bxne	lr
   c1bf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c1bfa:	0052      	lsls	r2, r2, #1
   c1bfc:	eb43 0303 	adc.w	r3, r3, r3
   c1c00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c1c04:	bf08      	it	eq
   c1c06:	3d01      	subeq	r5, #1
   c1c08:	d0f7      	beq.n	c1bfa <__aeabi_dmul+0x1c6>
   c1c0a:	ea43 0306 	orr.w	r3, r3, r6
   c1c0e:	4770      	bx	lr
   c1c10:	ea94 0f0c 	teq	r4, ip
   c1c14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1c18:	bf18      	it	ne
   c1c1a:	ea95 0f0c 	teqne	r5, ip
   c1c1e:	d00c      	beq.n	c1c3a <__aeabi_dmul+0x206>
   c1c20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1c24:	bf18      	it	ne
   c1c26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1c2a:	d1d1      	bne.n	c1bd0 <__aeabi_dmul+0x19c>
   c1c2c:	ea81 0103 	eor.w	r1, r1, r3
   c1c30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1c34:	f04f 0000 	mov.w	r0, #0
   c1c38:	bd70      	pop	{r4, r5, r6, pc}
   c1c3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1c3e:	bf06      	itte	eq
   c1c40:	4610      	moveq	r0, r2
   c1c42:	4619      	moveq	r1, r3
   c1c44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1c48:	d019      	beq.n	c1c7e <__aeabi_dmul+0x24a>
   c1c4a:	ea94 0f0c 	teq	r4, ip
   c1c4e:	d102      	bne.n	c1c56 <__aeabi_dmul+0x222>
   c1c50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c1c54:	d113      	bne.n	c1c7e <__aeabi_dmul+0x24a>
   c1c56:	ea95 0f0c 	teq	r5, ip
   c1c5a:	d105      	bne.n	c1c68 <__aeabi_dmul+0x234>
   c1c5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c1c60:	bf1c      	itt	ne
   c1c62:	4610      	movne	r0, r2
   c1c64:	4619      	movne	r1, r3
   c1c66:	d10a      	bne.n	c1c7e <__aeabi_dmul+0x24a>
   c1c68:	ea81 0103 	eor.w	r1, r1, r3
   c1c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1c70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1c78:	f04f 0000 	mov.w	r0, #0
   c1c7c:	bd70      	pop	{r4, r5, r6, pc}
   c1c7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1c82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c1c86:	bd70      	pop	{r4, r5, r6, pc}

000c1c88 <__aeabi_ddiv>:
   c1c88:	b570      	push	{r4, r5, r6, lr}
   c1c8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1c8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1c92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1c96:	bf1d      	ittte	ne
   c1c98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1c9c:	ea94 0f0c 	teqne	r4, ip
   c1ca0:	ea95 0f0c 	teqne	r5, ip
   c1ca4:	f000 f8a7 	bleq	c1df6 <__aeabi_ddiv+0x16e>
   c1ca8:	eba4 0405 	sub.w	r4, r4, r5
   c1cac:	ea81 0e03 	eor.w	lr, r1, r3
   c1cb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c1cb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c1cb8:	f000 8088 	beq.w	c1dcc <__aeabi_ddiv+0x144>
   c1cbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c1cc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c1cc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c1cc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c1ccc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c1cd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c1cd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c1cd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c1cdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c1ce0:	429d      	cmp	r5, r3
   c1ce2:	bf08      	it	eq
   c1ce4:	4296      	cmpeq	r6, r2
   c1ce6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c1cea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c1cee:	d202      	bcs.n	c1cf6 <__aeabi_ddiv+0x6e>
   c1cf0:	085b      	lsrs	r3, r3, #1
   c1cf2:	ea4f 0232 	mov.w	r2, r2, rrx
   c1cf6:	1ab6      	subs	r6, r6, r2
   c1cf8:	eb65 0503 	sbc.w	r5, r5, r3
   c1cfc:	085b      	lsrs	r3, r3, #1
   c1cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c1d06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c1d0a:	ebb6 0e02 	subs.w	lr, r6, r2
   c1d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1d12:	bf22      	ittt	cs
   c1d14:	1ab6      	subcs	r6, r6, r2
   c1d16:	4675      	movcs	r5, lr
   c1d18:	ea40 000c 	orrcs.w	r0, r0, ip
   c1d1c:	085b      	lsrs	r3, r3, #1
   c1d1e:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d22:	ebb6 0e02 	subs.w	lr, r6, r2
   c1d26:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1d2a:	bf22      	ittt	cs
   c1d2c:	1ab6      	subcs	r6, r6, r2
   c1d2e:	4675      	movcs	r5, lr
   c1d30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c1d34:	085b      	lsrs	r3, r3, #1
   c1d36:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d3a:	ebb6 0e02 	subs.w	lr, r6, r2
   c1d3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1d42:	bf22      	ittt	cs
   c1d44:	1ab6      	subcs	r6, r6, r2
   c1d46:	4675      	movcs	r5, lr
   c1d48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c1d4c:	085b      	lsrs	r3, r3, #1
   c1d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d52:	ebb6 0e02 	subs.w	lr, r6, r2
   c1d56:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1d5a:	bf22      	ittt	cs
   c1d5c:	1ab6      	subcs	r6, r6, r2
   c1d5e:	4675      	movcs	r5, lr
   c1d60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c1d64:	ea55 0e06 	orrs.w	lr, r5, r6
   c1d68:	d018      	beq.n	c1d9c <__aeabi_ddiv+0x114>
   c1d6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c1d6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c1d72:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c1d76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c1d7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c1d7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c1d82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c1d86:	d1c0      	bne.n	c1d0a <__aeabi_ddiv+0x82>
   c1d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1d8c:	d10b      	bne.n	c1da6 <__aeabi_ddiv+0x11e>
   c1d8e:	ea41 0100 	orr.w	r1, r1, r0
   c1d92:	f04f 0000 	mov.w	r0, #0
   c1d96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c1d9a:	e7b6      	b.n	c1d0a <__aeabi_ddiv+0x82>
   c1d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1da0:	bf04      	itt	eq
   c1da2:	4301      	orreq	r1, r0
   c1da4:	2000      	moveq	r0, #0
   c1da6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c1daa:	bf88      	it	hi
   c1dac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c1db0:	f63f aeaf 	bhi.w	c1b12 <__aeabi_dmul+0xde>
   c1db4:	ebb5 0c03 	subs.w	ip, r5, r3
   c1db8:	bf04      	itt	eq
   c1dba:	ebb6 0c02 	subseq.w	ip, r6, r2
   c1dbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c1dc2:	f150 0000 	adcs.w	r0, r0, #0
   c1dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1dca:	bd70      	pop	{r4, r5, r6, pc}
   c1dcc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c1dd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c1dd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c1dd8:	bfc2      	ittt	gt
   c1dda:	ebd4 050c 	rsbsgt	r5, r4, ip
   c1dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c1de2:	bd70      	popgt	{r4, r5, r6, pc}
   c1de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1de8:	f04f 0e00 	mov.w	lr, #0
   c1dec:	3c01      	subs	r4, #1
   c1dee:	e690      	b.n	c1b12 <__aeabi_dmul+0xde>
   c1df0:	ea45 0e06 	orr.w	lr, r5, r6
   c1df4:	e68d      	b.n	c1b12 <__aeabi_dmul+0xde>
   c1df6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1dfa:	ea94 0f0c 	teq	r4, ip
   c1dfe:	bf08      	it	eq
   c1e00:	ea95 0f0c 	teqeq	r5, ip
   c1e04:	f43f af3b 	beq.w	c1c7e <__aeabi_dmul+0x24a>
   c1e08:	ea94 0f0c 	teq	r4, ip
   c1e0c:	d10a      	bne.n	c1e24 <__aeabi_ddiv+0x19c>
   c1e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c1e12:	f47f af34 	bne.w	c1c7e <__aeabi_dmul+0x24a>
   c1e16:	ea95 0f0c 	teq	r5, ip
   c1e1a:	f47f af25 	bne.w	c1c68 <__aeabi_dmul+0x234>
   c1e1e:	4610      	mov	r0, r2
   c1e20:	4619      	mov	r1, r3
   c1e22:	e72c      	b.n	c1c7e <__aeabi_dmul+0x24a>
   c1e24:	ea95 0f0c 	teq	r5, ip
   c1e28:	d106      	bne.n	c1e38 <__aeabi_ddiv+0x1b0>
   c1e2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c1e2e:	f43f aefd 	beq.w	c1c2c <__aeabi_dmul+0x1f8>
   c1e32:	4610      	mov	r0, r2
   c1e34:	4619      	mov	r1, r3
   c1e36:	e722      	b.n	c1c7e <__aeabi_dmul+0x24a>
   c1e38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1e3c:	bf18      	it	ne
   c1e3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1e42:	f47f aec5 	bne.w	c1bd0 <__aeabi_dmul+0x19c>
   c1e46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c1e4a:	f47f af0d 	bne.w	c1c68 <__aeabi_dmul+0x234>
   c1e4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c1e52:	f47f aeeb 	bne.w	c1c2c <__aeabi_dmul+0x1f8>
   c1e56:	e712      	b.n	c1c7e <__aeabi_dmul+0x24a>

000c1e58 <__gedf2>:
   c1e58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c1e5c:	e006      	b.n	c1e6c <__cmpdf2+0x4>
   c1e5e:	bf00      	nop

000c1e60 <__ledf2>:
   c1e60:	f04f 0c01 	mov.w	ip, #1
   c1e64:	e002      	b.n	c1e6c <__cmpdf2+0x4>
   c1e66:	bf00      	nop

000c1e68 <__cmpdf2>:
   c1e68:	f04f 0c01 	mov.w	ip, #1
   c1e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   c1e70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1e7c:	bf18      	it	ne
   c1e7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c1e82:	d01b      	beq.n	c1ebc <__cmpdf2+0x54>
   c1e84:	b001      	add	sp, #4
   c1e86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c1e8a:	bf0c      	ite	eq
   c1e8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c1e90:	ea91 0f03 	teqne	r1, r3
   c1e94:	bf02      	ittt	eq
   c1e96:	ea90 0f02 	teqeq	r0, r2
   c1e9a:	2000      	moveq	r0, #0
   c1e9c:	4770      	bxeq	lr
   c1e9e:	f110 0f00 	cmn.w	r0, #0
   c1ea2:	ea91 0f03 	teq	r1, r3
   c1ea6:	bf58      	it	pl
   c1ea8:	4299      	cmppl	r1, r3
   c1eaa:	bf08      	it	eq
   c1eac:	4290      	cmpeq	r0, r2
   c1eae:	bf2c      	ite	cs
   c1eb0:	17d8      	asrcs	r0, r3, #31
   c1eb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c1eb6:	f040 0001 	orr.w	r0, r0, #1
   c1eba:	4770      	bx	lr
   c1ebc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1ec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1ec4:	d102      	bne.n	c1ecc <__cmpdf2+0x64>
   c1ec6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c1eca:	d107      	bne.n	c1edc <__cmpdf2+0x74>
   c1ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1ed0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1ed4:	d1d6      	bne.n	c1e84 <__cmpdf2+0x1c>
   c1ed6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c1eda:	d0d3      	beq.n	c1e84 <__cmpdf2+0x1c>
   c1edc:	f85d 0b04 	ldr.w	r0, [sp], #4
   c1ee0:	4770      	bx	lr
   c1ee2:	bf00      	nop

000c1ee4 <__aeabi_cdrcmple>:
   c1ee4:	4684      	mov	ip, r0
   c1ee6:	4610      	mov	r0, r2
   c1ee8:	4662      	mov	r2, ip
   c1eea:	468c      	mov	ip, r1
   c1eec:	4619      	mov	r1, r3
   c1eee:	4663      	mov	r3, ip
   c1ef0:	e000      	b.n	c1ef4 <__aeabi_cdcmpeq>
   c1ef2:	bf00      	nop

000c1ef4 <__aeabi_cdcmpeq>:
   c1ef4:	b501      	push	{r0, lr}
   c1ef6:	f7ff ffb7 	bl	c1e68 <__cmpdf2>
   c1efa:	2800      	cmp	r0, #0
   c1efc:	bf48      	it	mi
   c1efe:	f110 0f00 	cmnmi.w	r0, #0
   c1f02:	bd01      	pop	{r0, pc}

000c1f04 <__aeabi_dcmpeq>:
   c1f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f08:	f7ff fff4 	bl	c1ef4 <__aeabi_cdcmpeq>
   c1f0c:	bf0c      	ite	eq
   c1f0e:	2001      	moveq	r0, #1
   c1f10:	2000      	movne	r0, #0
   c1f12:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f16:	bf00      	nop

000c1f18 <__aeabi_dcmplt>:
   c1f18:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f1c:	f7ff ffea 	bl	c1ef4 <__aeabi_cdcmpeq>
   c1f20:	bf34      	ite	cc
   c1f22:	2001      	movcc	r0, #1
   c1f24:	2000      	movcs	r0, #0
   c1f26:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f2a:	bf00      	nop

000c1f2c <__aeabi_dcmple>:
   c1f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f30:	f7ff ffe0 	bl	c1ef4 <__aeabi_cdcmpeq>
   c1f34:	bf94      	ite	ls
   c1f36:	2001      	movls	r0, #1
   c1f38:	2000      	movhi	r0, #0
   c1f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f3e:	bf00      	nop

000c1f40 <__aeabi_dcmpge>:
   c1f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f44:	f7ff ffce 	bl	c1ee4 <__aeabi_cdrcmple>
   c1f48:	bf94      	ite	ls
   c1f4a:	2001      	movls	r0, #1
   c1f4c:	2000      	movhi	r0, #0
   c1f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f52:	bf00      	nop

000c1f54 <__aeabi_dcmpgt>:
   c1f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f58:	f7ff ffc4 	bl	c1ee4 <__aeabi_cdrcmple>
   c1f5c:	bf34      	ite	cc
   c1f5e:	2001      	movcc	r0, #1
   c1f60:	2000      	movcs	r0, #0
   c1f62:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f66:	bf00      	nop

000c1f68 <__aeabi_d2iz>:
   c1f68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c1f6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1f70:	d215      	bcs.n	c1f9e <__aeabi_d2iz+0x36>
   c1f72:	d511      	bpl.n	c1f98 <__aeabi_d2iz+0x30>
   c1f74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1f78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1f7c:	d912      	bls.n	c1fa4 <__aeabi_d2iz+0x3c>
   c1f7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c1f86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c1f8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c1f8e:	fa23 f002 	lsr.w	r0, r3, r2
   c1f92:	bf18      	it	ne
   c1f94:	4240      	negne	r0, r0
   c1f96:	4770      	bx	lr
   c1f98:	f04f 0000 	mov.w	r0, #0
   c1f9c:	4770      	bx	lr
   c1f9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c1fa2:	d105      	bne.n	c1fb0 <__aeabi_d2iz+0x48>
   c1fa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c1fa8:	bf08      	it	eq
   c1faa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c1fae:	4770      	bx	lr
   c1fb0:	f04f 0000 	mov.w	r0, #0
   c1fb4:	4770      	bx	lr
   c1fb6:	bf00      	nop

000c1fb8 <__aeabi_d2uiz>:
   c1fb8:	004a      	lsls	r2, r1, #1
   c1fba:	d211      	bcs.n	c1fe0 <__aeabi_d2uiz+0x28>
   c1fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1fc0:	d211      	bcs.n	c1fe6 <__aeabi_d2uiz+0x2e>
   c1fc2:	d50d      	bpl.n	c1fe0 <__aeabi_d2uiz+0x28>
   c1fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1fcc:	d40e      	bmi.n	c1fec <__aeabi_d2uiz+0x34>
   c1fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c1fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c1fda:	fa23 f002 	lsr.w	r0, r3, r2
   c1fde:	4770      	bx	lr
   c1fe0:	f04f 0000 	mov.w	r0, #0
   c1fe4:	4770      	bx	lr
   c1fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c1fea:	d102      	bne.n	c1ff2 <__aeabi_d2uiz+0x3a>
   c1fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c1ff0:	4770      	bx	lr
   c1ff2:	f04f 0000 	mov.w	r0, #0
   c1ff6:	4770      	bx	lr

000c1ff8 <__aeabi_d2f>:
   c1ff8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c1ffc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c2000:	bf24      	itt	cs
   c2002:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c2006:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c200a:	d90d      	bls.n	c2028 <__aeabi_d2f+0x30>
   c200c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c2010:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c2014:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c2018:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c201c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c2020:	bf08      	it	eq
   c2022:	f020 0001 	biceq.w	r0, r0, #1
   c2026:	4770      	bx	lr
   c2028:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c202c:	d121      	bne.n	c2072 <__aeabi_d2f+0x7a>
   c202e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c2032:	bfbc      	itt	lt
   c2034:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c2038:	4770      	bxlt	lr
   c203a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c203e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c2042:	f1c2 0218 	rsb	r2, r2, #24
   c2046:	f1c2 0c20 	rsb	ip, r2, #32
   c204a:	fa10 f30c 	lsls.w	r3, r0, ip
   c204e:	fa20 f002 	lsr.w	r0, r0, r2
   c2052:	bf18      	it	ne
   c2054:	f040 0001 	orrne.w	r0, r0, #1
   c2058:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c205c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c2060:	fa03 fc0c 	lsl.w	ip, r3, ip
   c2064:	ea40 000c 	orr.w	r0, r0, ip
   c2068:	fa23 f302 	lsr.w	r3, r3, r2
   c206c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c2070:	e7cc      	b.n	c200c <__aeabi_d2f+0x14>
   c2072:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c2076:	d107      	bne.n	c2088 <__aeabi_d2f+0x90>
   c2078:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c207c:	bf1e      	ittt	ne
   c207e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c2082:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c2086:	4770      	bxne	lr
   c2088:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c208c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c2090:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c2094:	4770      	bx	lr
   c2096:	bf00      	nop

000c2098 <__aeabi_d2ulz>:
   c2098:	b5d0      	push	{r4, r6, r7, lr}
   c209a:	4b0c      	ldr	r3, [pc, #48]	; (c20cc <__aeabi_d2ulz+0x34>)
   c209c:	2200      	movs	r2, #0
   c209e:	4606      	mov	r6, r0
   c20a0:	460f      	mov	r7, r1
   c20a2:	f7ff fcc7 	bl	c1a34 <__aeabi_dmul>
   c20a6:	f7ff ff87 	bl	c1fb8 <__aeabi_d2uiz>
   c20aa:	4604      	mov	r4, r0
   c20ac:	f7ff fc48 	bl	c1940 <__aeabi_ui2d>
   c20b0:	4b07      	ldr	r3, [pc, #28]	; (c20d0 <__aeabi_d2ulz+0x38>)
   c20b2:	2200      	movs	r2, #0
   c20b4:	f7ff fcbe 	bl	c1a34 <__aeabi_dmul>
   c20b8:	4602      	mov	r2, r0
   c20ba:	460b      	mov	r3, r1
   c20bc:	4630      	mov	r0, r6
   c20be:	4639      	mov	r1, r7
   c20c0:	f7ff fb00 	bl	c16c4 <__aeabi_dsub>
   c20c4:	f7ff ff78 	bl	c1fb8 <__aeabi_d2uiz>
   c20c8:	4621      	mov	r1, r4
   c20ca:	bdd0      	pop	{r4, r6, r7, pc}
   c20cc:	3df00000 	.word	0x3df00000
   c20d0:	41f00000 	.word	0x41f00000

000c20d4 <atexit>:
   c20d4:	2300      	movs	r3, #0
   c20d6:	4601      	mov	r1, r0
   c20d8:	461a      	mov	r2, r3
   c20da:	4618      	mov	r0, r3
   c20dc:	f001 b806 	b.w	c30ec <__register_exitproc>

000c20e0 <atof>:
   c20e0:	2100      	movs	r1, #0
   c20e2:	f000 bf6b 	b.w	c2fbc <strtod>

000c20e6 <atoi>:
   c20e6:	220a      	movs	r2, #10
   c20e8:	2100      	movs	r1, #0
   c20ea:	f000 bff5 	b.w	c30d8 <strtol>
	...

000c20f0 <isprint>:
   c20f0:	4b02      	ldr	r3, [pc, #8]	; (c20fc <isprint+0xc>)
   c20f2:	4418      	add	r0, r3
   c20f4:	7840      	ldrb	r0, [r0, #1]
   c20f6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c20fa:	4770      	bx	lr
   c20fc:	000c5d98 	.word	0x000c5d98

000c2100 <memcmp>:
   c2100:	b510      	push	{r4, lr}
   c2102:	3901      	subs	r1, #1
   c2104:	4402      	add	r2, r0
   c2106:	4290      	cmp	r0, r2
   c2108:	d101      	bne.n	c210e <memcmp+0xe>
   c210a:	2000      	movs	r0, #0
   c210c:	e005      	b.n	c211a <memcmp+0x1a>
   c210e:	7803      	ldrb	r3, [r0, #0]
   c2110:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c2114:	42a3      	cmp	r3, r4
   c2116:	d001      	beq.n	c211c <memcmp+0x1c>
   c2118:	1b18      	subs	r0, r3, r4
   c211a:	bd10      	pop	{r4, pc}
   c211c:	3001      	adds	r0, #1
   c211e:	e7f2      	b.n	c2106 <memcmp+0x6>

000c2120 <memcpy>:
   c2120:	440a      	add	r2, r1
   c2122:	4291      	cmp	r1, r2
   c2124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c2128:	d100      	bne.n	c212c <memcpy+0xc>
   c212a:	4770      	bx	lr
   c212c:	b510      	push	{r4, lr}
   c212e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2132:	f803 4f01 	strb.w	r4, [r3, #1]!
   c2136:	4291      	cmp	r1, r2
   c2138:	d1f9      	bne.n	c212e <memcpy+0xe>
   c213a:	bd10      	pop	{r4, pc}

000c213c <memmove>:
   c213c:	4288      	cmp	r0, r1
   c213e:	b510      	push	{r4, lr}
   c2140:	eb01 0402 	add.w	r4, r1, r2
   c2144:	d902      	bls.n	c214c <memmove+0x10>
   c2146:	4284      	cmp	r4, r0
   c2148:	4623      	mov	r3, r4
   c214a:	d807      	bhi.n	c215c <memmove+0x20>
   c214c:	1e43      	subs	r3, r0, #1
   c214e:	42a1      	cmp	r1, r4
   c2150:	d008      	beq.n	c2164 <memmove+0x28>
   c2152:	f811 2b01 	ldrb.w	r2, [r1], #1
   c2156:	f803 2f01 	strb.w	r2, [r3, #1]!
   c215a:	e7f8      	b.n	c214e <memmove+0x12>
   c215c:	4402      	add	r2, r0
   c215e:	4601      	mov	r1, r0
   c2160:	428a      	cmp	r2, r1
   c2162:	d100      	bne.n	c2166 <memmove+0x2a>
   c2164:	bd10      	pop	{r4, pc}
   c2166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c216a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c216e:	e7f7      	b.n	c2160 <memmove+0x24>

000c2170 <memset>:
   c2170:	4402      	add	r2, r0
   c2172:	4603      	mov	r3, r0
   c2174:	4293      	cmp	r3, r2
   c2176:	d100      	bne.n	c217a <memset+0xa>
   c2178:	4770      	bx	lr
   c217a:	f803 1b01 	strb.w	r1, [r3], #1
   c217e:	e7f9      	b.n	c2174 <memset+0x4>

000c2180 <srand>:
   c2180:	b538      	push	{r3, r4, r5, lr}
   c2182:	4b10      	ldr	r3, [pc, #64]	; (c21c4 <srand+0x44>)
   c2184:	681d      	ldr	r5, [r3, #0]
   c2186:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c2188:	4604      	mov	r4, r0
   c218a:	b9b3      	cbnz	r3, c21ba <srand+0x3a>
   c218c:	2018      	movs	r0, #24
   c218e:	f7fb fa71 	bl	bd674 <malloc>
   c2192:	4602      	mov	r2, r0
   c2194:	63a8      	str	r0, [r5, #56]	; 0x38
   c2196:	b920      	cbnz	r0, c21a2 <srand+0x22>
   c2198:	4b0b      	ldr	r3, [pc, #44]	; (c21c8 <srand+0x48>)
   c219a:	480c      	ldr	r0, [pc, #48]	; (c21cc <srand+0x4c>)
   c219c:	2142      	movs	r1, #66	; 0x42
   c219e:	f7fb fab1 	bl	bd704 <__assert_func>
   c21a2:	490b      	ldr	r1, [pc, #44]	; (c21d0 <srand+0x50>)
   c21a4:	4b0b      	ldr	r3, [pc, #44]	; (c21d4 <srand+0x54>)
   c21a6:	e9c0 1300 	strd	r1, r3, [r0]
   c21aa:	4b0b      	ldr	r3, [pc, #44]	; (c21d8 <srand+0x58>)
   c21ac:	6083      	str	r3, [r0, #8]
   c21ae:	230b      	movs	r3, #11
   c21b0:	8183      	strh	r3, [r0, #12]
   c21b2:	2100      	movs	r1, #0
   c21b4:	2001      	movs	r0, #1
   c21b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c21ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c21bc:	2200      	movs	r2, #0
   c21be:	611c      	str	r4, [r3, #16]
   c21c0:	615a      	str	r2, [r3, #20]
   c21c2:	bd38      	pop	{r3, r4, r5, pc}
   c21c4:	2003db98 	.word	0x2003db98
   c21c8:	000c5cc5 	.word	0x000c5cc5
   c21cc:	000c5cdc 	.word	0x000c5cdc
   c21d0:	abcd330e 	.word	0xabcd330e
   c21d4:	e66d1234 	.word	0xe66d1234
   c21d8:	0005deec 	.word	0x0005deec

000c21dc <strcat>:
   c21dc:	b510      	push	{r4, lr}
   c21de:	4602      	mov	r2, r0
   c21e0:	7814      	ldrb	r4, [r2, #0]
   c21e2:	4613      	mov	r3, r2
   c21e4:	3201      	adds	r2, #1
   c21e6:	2c00      	cmp	r4, #0
   c21e8:	d1fa      	bne.n	c21e0 <strcat+0x4>
   c21ea:	3b01      	subs	r3, #1
   c21ec:	f811 2b01 	ldrb.w	r2, [r1], #1
   c21f0:	f803 2f01 	strb.w	r2, [r3, #1]!
   c21f4:	2a00      	cmp	r2, #0
   c21f6:	d1f9      	bne.n	c21ec <strcat+0x10>
   c21f8:	bd10      	pop	{r4, pc}

000c21fa <strchr>:
   c21fa:	b2c9      	uxtb	r1, r1
   c21fc:	4603      	mov	r3, r0
   c21fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   c2202:	b11a      	cbz	r2, c220c <strchr+0x12>
   c2204:	428a      	cmp	r2, r1
   c2206:	d1f9      	bne.n	c21fc <strchr+0x2>
   c2208:	4618      	mov	r0, r3
   c220a:	4770      	bx	lr
   c220c:	2900      	cmp	r1, #0
   c220e:	bf18      	it	ne
   c2210:	2300      	movne	r3, #0
   c2212:	e7f9      	b.n	c2208 <strchr+0xe>

000c2214 <strchrnul>:
   c2214:	b510      	push	{r4, lr}
   c2216:	4604      	mov	r4, r0
   c2218:	f7ff ffef 	bl	c21fa <strchr>
   c221c:	b918      	cbnz	r0, c2226 <strchrnul+0x12>
   c221e:	4620      	mov	r0, r4
   c2220:	f000 f831 	bl	c2286 <strlen>
   c2224:	4420      	add	r0, r4
   c2226:	bd10      	pop	{r4, pc}

000c2228 <strcmp>:
   c2228:	f810 2b01 	ldrb.w	r2, [r0], #1
   c222c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c2230:	2a01      	cmp	r2, #1
   c2232:	bf28      	it	cs
   c2234:	429a      	cmpcs	r2, r3
   c2236:	d0f7      	beq.n	c2228 <strcmp>
   c2238:	1ad0      	subs	r0, r2, r3
   c223a:	4770      	bx	lr

000c223c <strcpy>:
   c223c:	4603      	mov	r3, r0
   c223e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c2242:	f803 2b01 	strb.w	r2, [r3], #1
   c2246:	2a00      	cmp	r2, #0
   c2248:	d1f9      	bne.n	c223e <strcpy+0x2>
   c224a:	4770      	bx	lr

000c224c <strdup>:
   c224c:	4b02      	ldr	r3, [pc, #8]	; (c2258 <strdup+0xc>)
   c224e:	4601      	mov	r1, r0
   c2250:	6818      	ldr	r0, [r3, #0]
   c2252:	f000 b803 	b.w	c225c <_strdup_r>
   c2256:	bf00      	nop
   c2258:	2003db98 	.word	0x2003db98

000c225c <_strdup_r>:
   c225c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c225e:	4604      	mov	r4, r0
   c2260:	4608      	mov	r0, r1
   c2262:	460d      	mov	r5, r1
   c2264:	f000 f80f 	bl	c2286 <strlen>
   c2268:	1c42      	adds	r2, r0, #1
   c226a:	4611      	mov	r1, r2
   c226c:	4620      	mov	r0, r4
   c226e:	9201      	str	r2, [sp, #4]
   c2270:	f7fb fa38 	bl	bd6e4 <_malloc_r>
   c2274:	4604      	mov	r4, r0
   c2276:	b118      	cbz	r0, c2280 <_strdup_r+0x24>
   c2278:	9a01      	ldr	r2, [sp, #4]
   c227a:	4629      	mov	r1, r5
   c227c:	f7ff ff50 	bl	c2120 <memcpy>
   c2280:	4620      	mov	r0, r4
   c2282:	b003      	add	sp, #12
   c2284:	bd30      	pop	{r4, r5, pc}

000c2286 <strlen>:
   c2286:	4603      	mov	r3, r0
   c2288:	f813 2b01 	ldrb.w	r2, [r3], #1
   c228c:	2a00      	cmp	r2, #0
   c228e:	d1fb      	bne.n	c2288 <strlen+0x2>
   c2290:	1a18      	subs	r0, r3, r0
   c2292:	3801      	subs	r0, #1
   c2294:	4770      	bx	lr
	...

000c2298 <strlwr>:
   c2298:	b510      	push	{r4, lr}
   c229a:	4c07      	ldr	r4, [pc, #28]	; (c22b8 <strlwr+0x20>)
   c229c:	1e42      	subs	r2, r0, #1
   c229e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c22a2:	b903      	cbnz	r3, c22a6 <strlwr+0xe>
   c22a4:	bd10      	pop	{r4, pc}
   c22a6:	5ce1      	ldrb	r1, [r4, r3]
   c22a8:	f001 0103 	and.w	r1, r1, #3
   c22ac:	2901      	cmp	r1, #1
   c22ae:	bf08      	it	eq
   c22b0:	3320      	addeq	r3, #32
   c22b2:	7013      	strb	r3, [r2, #0]
   c22b4:	e7f3      	b.n	c229e <strlwr+0x6>
   c22b6:	bf00      	nop
   c22b8:	000c5d99 	.word	0x000c5d99

000c22bc <strncmp>:
   c22bc:	b510      	push	{r4, lr}
   c22be:	b17a      	cbz	r2, c22e0 <strncmp+0x24>
   c22c0:	4603      	mov	r3, r0
   c22c2:	3901      	subs	r1, #1
   c22c4:	1884      	adds	r4, r0, r2
   c22c6:	f813 0b01 	ldrb.w	r0, [r3], #1
   c22ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c22ce:	4290      	cmp	r0, r2
   c22d0:	d101      	bne.n	c22d6 <strncmp+0x1a>
   c22d2:	42a3      	cmp	r3, r4
   c22d4:	d101      	bne.n	c22da <strncmp+0x1e>
   c22d6:	1a80      	subs	r0, r0, r2
   c22d8:	bd10      	pop	{r4, pc}
   c22da:	2800      	cmp	r0, #0
   c22dc:	d1f3      	bne.n	c22c6 <strncmp+0xa>
   c22de:	e7fa      	b.n	c22d6 <strncmp+0x1a>
   c22e0:	4610      	mov	r0, r2
   c22e2:	e7f9      	b.n	c22d8 <strncmp+0x1c>

000c22e4 <strncpy>:
   c22e4:	b510      	push	{r4, lr}
   c22e6:	3901      	subs	r1, #1
   c22e8:	4603      	mov	r3, r0
   c22ea:	b132      	cbz	r2, c22fa <strncpy+0x16>
   c22ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c22f0:	f803 4b01 	strb.w	r4, [r3], #1
   c22f4:	3a01      	subs	r2, #1
   c22f6:	2c00      	cmp	r4, #0
   c22f8:	d1f7      	bne.n	c22ea <strncpy+0x6>
   c22fa:	441a      	add	r2, r3
   c22fc:	2100      	movs	r1, #0
   c22fe:	4293      	cmp	r3, r2
   c2300:	d100      	bne.n	c2304 <strncpy+0x20>
   c2302:	bd10      	pop	{r4, pc}
   c2304:	f803 1b01 	strb.w	r1, [r3], #1
   c2308:	e7f9      	b.n	c22fe <strncpy+0x1a>

000c230a <strnlen>:
   c230a:	b510      	push	{r4, lr}
   c230c:	4602      	mov	r2, r0
   c230e:	4401      	add	r1, r0
   c2310:	428a      	cmp	r2, r1
   c2312:	4613      	mov	r3, r2
   c2314:	d003      	beq.n	c231e <strnlen+0x14>
   c2316:	781c      	ldrb	r4, [r3, #0]
   c2318:	3201      	adds	r2, #1
   c231a:	2c00      	cmp	r4, #0
   c231c:	d1f8      	bne.n	c2310 <strnlen+0x6>
   c231e:	1a18      	subs	r0, r3, r0
   c2320:	bd10      	pop	{r4, pc}

000c2322 <strrchr>:
   c2322:	b538      	push	{r3, r4, r5, lr}
   c2324:	4603      	mov	r3, r0
   c2326:	460c      	mov	r4, r1
   c2328:	b969      	cbnz	r1, c2346 <strrchr+0x24>
   c232a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c232e:	f7ff bf64 	b.w	c21fa <strchr>
   c2332:	1c43      	adds	r3, r0, #1
   c2334:	4605      	mov	r5, r0
   c2336:	4621      	mov	r1, r4
   c2338:	4618      	mov	r0, r3
   c233a:	f7ff ff5e 	bl	c21fa <strchr>
   c233e:	2800      	cmp	r0, #0
   c2340:	d1f7      	bne.n	c2332 <strrchr+0x10>
   c2342:	4628      	mov	r0, r5
   c2344:	bd38      	pop	{r3, r4, r5, pc}
   c2346:	2500      	movs	r5, #0
   c2348:	e7f5      	b.n	c2336 <strrchr+0x14>

000c234a <strstr>:
   c234a:	780a      	ldrb	r2, [r1, #0]
   c234c:	b570      	push	{r4, r5, r6, lr}
   c234e:	b96a      	cbnz	r2, c236c <strstr+0x22>
   c2350:	bd70      	pop	{r4, r5, r6, pc}
   c2352:	429a      	cmp	r2, r3
   c2354:	d109      	bne.n	c236a <strstr+0x20>
   c2356:	460c      	mov	r4, r1
   c2358:	4605      	mov	r5, r0
   c235a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c235e:	2b00      	cmp	r3, #0
   c2360:	d0f6      	beq.n	c2350 <strstr+0x6>
   c2362:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c2366:	429e      	cmp	r6, r3
   c2368:	d0f7      	beq.n	c235a <strstr+0x10>
   c236a:	3001      	adds	r0, #1
   c236c:	7803      	ldrb	r3, [r0, #0]
   c236e:	2b00      	cmp	r3, #0
   c2370:	d1ef      	bne.n	c2352 <strstr+0x8>
   c2372:	4618      	mov	r0, r3
   c2374:	e7ec      	b.n	c2350 <strstr+0x6>

000c2376 <sulp>:
   c2376:	b570      	push	{r4, r5, r6, lr}
   c2378:	4604      	mov	r4, r0
   c237a:	460d      	mov	r5, r1
   c237c:	ec45 4b10 	vmov	d0, r4, r5
   c2380:	4616      	mov	r6, r2
   c2382:	f001 fe0d 	bl	c3fa0 <__ulp>
   c2386:	ec51 0b10 	vmov	r0, r1, d0
   c238a:	b17e      	cbz	r6, c23ac <sulp+0x36>
   c238c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c2390:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2394:	2b00      	cmp	r3, #0
   c2396:	dd09      	ble.n	c23ac <sulp+0x36>
   c2398:	051b      	lsls	r3, r3, #20
   c239a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c239e:	2400      	movs	r4, #0
   c23a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c23a4:	4622      	mov	r2, r4
   c23a6:	462b      	mov	r3, r5
   c23a8:	f7ff fb44 	bl	c1a34 <__aeabi_dmul>
   c23ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000c23b0 <_strtod_l>:
   c23b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c23b4:	ed2d 8b02 	vpush	{d8}
   c23b8:	b09d      	sub	sp, #116	; 0x74
   c23ba:	461f      	mov	r7, r3
   c23bc:	2300      	movs	r3, #0
   c23be:	9318      	str	r3, [sp, #96]	; 0x60
   c23c0:	4ba2      	ldr	r3, [pc, #648]	; (c264c <_strtod_l+0x29c>)
   c23c2:	9213      	str	r2, [sp, #76]	; 0x4c
   c23c4:	681b      	ldr	r3, [r3, #0]
   c23c6:	9305      	str	r3, [sp, #20]
   c23c8:	4604      	mov	r4, r0
   c23ca:	4618      	mov	r0, r3
   c23cc:	4688      	mov	r8, r1
   c23ce:	f7ff ff5a 	bl	c2286 <strlen>
   c23d2:	f04f 0a00 	mov.w	sl, #0
   c23d6:	4605      	mov	r5, r0
   c23d8:	f04f 0b00 	mov.w	fp, #0
   c23dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c23e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c23e2:	781a      	ldrb	r2, [r3, #0]
   c23e4:	2a2b      	cmp	r2, #43	; 0x2b
   c23e6:	d04e      	beq.n	c2486 <_strtod_l+0xd6>
   c23e8:	d83b      	bhi.n	c2462 <_strtod_l+0xb2>
   c23ea:	2a0d      	cmp	r2, #13
   c23ec:	d834      	bhi.n	c2458 <_strtod_l+0xa8>
   c23ee:	2a08      	cmp	r2, #8
   c23f0:	d834      	bhi.n	c245c <_strtod_l+0xac>
   c23f2:	2a00      	cmp	r2, #0
   c23f4:	d03e      	beq.n	c2474 <_strtod_l+0xc4>
   c23f6:	2300      	movs	r3, #0
   c23f8:	930a      	str	r3, [sp, #40]	; 0x28
   c23fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c23fc:	7833      	ldrb	r3, [r6, #0]
   c23fe:	2b30      	cmp	r3, #48	; 0x30
   c2400:	f040 80b0 	bne.w	c2564 <_strtod_l+0x1b4>
   c2404:	7873      	ldrb	r3, [r6, #1]
   c2406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c240a:	2b58      	cmp	r3, #88	; 0x58
   c240c:	d168      	bne.n	c24e0 <_strtod_l+0x130>
   c240e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2410:	9301      	str	r3, [sp, #4]
   c2412:	ab18      	add	r3, sp, #96	; 0x60
   c2414:	9702      	str	r7, [sp, #8]
   c2416:	9300      	str	r3, [sp, #0]
   c2418:	4a8d      	ldr	r2, [pc, #564]	; (c2650 <_strtod_l+0x2a0>)
   c241a:	ab19      	add	r3, sp, #100	; 0x64
   c241c:	a917      	add	r1, sp, #92	; 0x5c
   c241e:	4620      	mov	r0, r4
   c2420:	f000 ff2e 	bl	c3280 <__gethex>
   c2424:	f010 0707 	ands.w	r7, r0, #7
   c2428:	4605      	mov	r5, r0
   c242a:	d005      	beq.n	c2438 <_strtod_l+0x88>
   c242c:	2f06      	cmp	r7, #6
   c242e:	d12c      	bne.n	c248a <_strtod_l+0xda>
   c2430:	3601      	adds	r6, #1
   c2432:	2300      	movs	r3, #0
   c2434:	9617      	str	r6, [sp, #92]	; 0x5c
   c2436:	930a      	str	r3, [sp, #40]	; 0x28
   c2438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c243a:	2b00      	cmp	r3, #0
   c243c:	f040 8590 	bne.w	c2f60 <_strtod_l+0xbb0>
   c2440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c2442:	b1eb      	cbz	r3, c2480 <_strtod_l+0xd0>
   c2444:	4652      	mov	r2, sl
   c2446:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c244a:	ec43 2b10 	vmov	d0, r2, r3
   c244e:	b01d      	add	sp, #116	; 0x74
   c2450:	ecbd 8b02 	vpop	{d8}
   c2454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2458:	2a20      	cmp	r2, #32
   c245a:	d1cc      	bne.n	c23f6 <_strtod_l+0x46>
   c245c:	3301      	adds	r3, #1
   c245e:	9317      	str	r3, [sp, #92]	; 0x5c
   c2460:	e7be      	b.n	c23e0 <_strtod_l+0x30>
   c2462:	2a2d      	cmp	r2, #45	; 0x2d
   c2464:	d1c7      	bne.n	c23f6 <_strtod_l+0x46>
   c2466:	2201      	movs	r2, #1
   c2468:	920a      	str	r2, [sp, #40]	; 0x28
   c246a:	1c5a      	adds	r2, r3, #1
   c246c:	9217      	str	r2, [sp, #92]	; 0x5c
   c246e:	785b      	ldrb	r3, [r3, #1]
   c2470:	2b00      	cmp	r3, #0
   c2472:	d1c2      	bne.n	c23fa <_strtod_l+0x4a>
   c2474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c2476:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c247a:	2b00      	cmp	r3, #0
   c247c:	f040 856e 	bne.w	c2f5c <_strtod_l+0xbac>
   c2480:	4652      	mov	r2, sl
   c2482:	465b      	mov	r3, fp
   c2484:	e7e1      	b.n	c244a <_strtod_l+0x9a>
   c2486:	2200      	movs	r2, #0
   c2488:	e7ee      	b.n	c2468 <_strtod_l+0xb8>
   c248a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c248c:	b13a      	cbz	r2, c249e <_strtod_l+0xee>
   c248e:	2135      	movs	r1, #53	; 0x35
   c2490:	a81a      	add	r0, sp, #104	; 0x68
   c2492:	f001 fe90 	bl	c41b6 <__copybits>
   c2496:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2498:	4620      	mov	r0, r4
   c249a:	f001 fa4f 	bl	c393c <_Bfree>
   c249e:	3f01      	subs	r7, #1
   c24a0:	2f04      	cmp	r7, #4
   c24a2:	d806      	bhi.n	c24b2 <_strtod_l+0x102>
   c24a4:	e8df f007 	tbb	[pc, r7]
   c24a8:	1714030a 	.word	0x1714030a
   c24ac:	0a          	.byte	0x0a
   c24ad:	00          	.byte	0x00
   c24ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c24b2:	0728      	lsls	r0, r5, #28
   c24b4:	d5c0      	bpl.n	c2438 <_strtod_l+0x88>
   c24b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c24ba:	e7bd      	b.n	c2438 <_strtod_l+0x88>
   c24bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c24c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c24c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c24c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c24ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c24ce:	e7f0      	b.n	c24b2 <_strtod_l+0x102>
   c24d0:	f8df b180 	ldr.w	fp, [pc, #384]	; c2654 <_strtod_l+0x2a4>
   c24d4:	e7ed      	b.n	c24b2 <_strtod_l+0x102>
   c24d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c24da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c24de:	e7e8      	b.n	c24b2 <_strtod_l+0x102>
   c24e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c24e2:	1c5a      	adds	r2, r3, #1
   c24e4:	9217      	str	r2, [sp, #92]	; 0x5c
   c24e6:	785b      	ldrb	r3, [r3, #1]
   c24e8:	2b30      	cmp	r3, #48	; 0x30
   c24ea:	d0f9      	beq.n	c24e0 <_strtod_l+0x130>
   c24ec:	2b00      	cmp	r3, #0
   c24ee:	d0a3      	beq.n	c2438 <_strtod_l+0x88>
   c24f0:	2301      	movs	r3, #1
   c24f2:	f04f 0900 	mov.w	r9, #0
   c24f6:	9304      	str	r3, [sp, #16]
   c24f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c24fa:	9308      	str	r3, [sp, #32]
   c24fc:	f8cd 901c 	str.w	r9, [sp, #28]
   c2500:	464f      	mov	r7, r9
   c2502:	220a      	movs	r2, #10
   c2504:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c2506:	7806      	ldrb	r6, [r0, #0]
   c2508:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c250c:	b2d9      	uxtb	r1, r3
   c250e:	2909      	cmp	r1, #9
   c2510:	d92a      	bls.n	c2568 <_strtod_l+0x1b8>
   c2512:	9905      	ldr	r1, [sp, #20]
   c2514:	462a      	mov	r2, r5
   c2516:	f7ff fed1 	bl	c22bc <strncmp>
   c251a:	b398      	cbz	r0, c2584 <_strtod_l+0x1d4>
   c251c:	2000      	movs	r0, #0
   c251e:	4632      	mov	r2, r6
   c2520:	463d      	mov	r5, r7
   c2522:	9005      	str	r0, [sp, #20]
   c2524:	4603      	mov	r3, r0
   c2526:	2a65      	cmp	r2, #101	; 0x65
   c2528:	d001      	beq.n	c252e <_strtod_l+0x17e>
   c252a:	2a45      	cmp	r2, #69	; 0x45
   c252c:	d118      	bne.n	c2560 <_strtod_l+0x1b0>
   c252e:	b91d      	cbnz	r5, c2538 <_strtod_l+0x188>
   c2530:	9a04      	ldr	r2, [sp, #16]
   c2532:	4302      	orrs	r2, r0
   c2534:	d09e      	beq.n	c2474 <_strtod_l+0xc4>
   c2536:	2500      	movs	r5, #0
   c2538:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c253c:	f108 0201 	add.w	r2, r8, #1
   c2540:	9217      	str	r2, [sp, #92]	; 0x5c
   c2542:	f898 2001 	ldrb.w	r2, [r8, #1]
   c2546:	2a2b      	cmp	r2, #43	; 0x2b
   c2548:	d075      	beq.n	c2636 <_strtod_l+0x286>
   c254a:	2a2d      	cmp	r2, #45	; 0x2d
   c254c:	d07b      	beq.n	c2646 <_strtod_l+0x296>
   c254e:	f04f 0c00 	mov.w	ip, #0
   c2552:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c2556:	2909      	cmp	r1, #9
   c2558:	f240 8082 	bls.w	c2660 <_strtod_l+0x2b0>
   c255c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2560:	2600      	movs	r6, #0
   c2562:	e09d      	b.n	c26a0 <_strtod_l+0x2f0>
   c2564:	2300      	movs	r3, #0
   c2566:	e7c4      	b.n	c24f2 <_strtod_l+0x142>
   c2568:	2f08      	cmp	r7, #8
   c256a:	bfd8      	it	le
   c256c:	9907      	ldrle	r1, [sp, #28]
   c256e:	f100 0001 	add.w	r0, r0, #1
   c2572:	bfda      	itte	le
   c2574:	fb02 3301 	mlale	r3, r2, r1, r3
   c2578:	9307      	strle	r3, [sp, #28]
   c257a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c257e:	3701      	adds	r7, #1
   c2580:	9017      	str	r0, [sp, #92]	; 0x5c
   c2582:	e7bf      	b.n	c2504 <_strtod_l+0x154>
   c2584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2586:	195a      	adds	r2, r3, r5
   c2588:	9217      	str	r2, [sp, #92]	; 0x5c
   c258a:	5d5a      	ldrb	r2, [r3, r5]
   c258c:	2f00      	cmp	r7, #0
   c258e:	d037      	beq.n	c2600 <_strtod_l+0x250>
   c2590:	9005      	str	r0, [sp, #20]
   c2592:	463d      	mov	r5, r7
   c2594:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c2598:	2b09      	cmp	r3, #9
   c259a:	d912      	bls.n	c25c2 <_strtod_l+0x212>
   c259c:	2301      	movs	r3, #1
   c259e:	e7c2      	b.n	c2526 <_strtod_l+0x176>
   c25a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c25a2:	1c5a      	adds	r2, r3, #1
   c25a4:	9217      	str	r2, [sp, #92]	; 0x5c
   c25a6:	785a      	ldrb	r2, [r3, #1]
   c25a8:	3001      	adds	r0, #1
   c25aa:	2a30      	cmp	r2, #48	; 0x30
   c25ac:	d0f8      	beq.n	c25a0 <_strtod_l+0x1f0>
   c25ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c25b2:	2b08      	cmp	r3, #8
   c25b4:	f200 84d9 	bhi.w	c2f6a <_strtod_l+0xbba>
   c25b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c25ba:	9005      	str	r0, [sp, #20]
   c25bc:	2000      	movs	r0, #0
   c25be:	9308      	str	r3, [sp, #32]
   c25c0:	4605      	mov	r5, r0
   c25c2:	3a30      	subs	r2, #48	; 0x30
   c25c4:	f100 0301 	add.w	r3, r0, #1
   c25c8:	d014      	beq.n	c25f4 <_strtod_l+0x244>
   c25ca:	9905      	ldr	r1, [sp, #20]
   c25cc:	4419      	add	r1, r3
   c25ce:	9105      	str	r1, [sp, #20]
   c25d0:	462b      	mov	r3, r5
   c25d2:	eb00 0e05 	add.w	lr, r0, r5
   c25d6:	210a      	movs	r1, #10
   c25d8:	4573      	cmp	r3, lr
   c25da:	d113      	bne.n	c2604 <_strtod_l+0x254>
   c25dc:	182b      	adds	r3, r5, r0
   c25de:	2b08      	cmp	r3, #8
   c25e0:	f105 0501 	add.w	r5, r5, #1
   c25e4:	4405      	add	r5, r0
   c25e6:	dc1c      	bgt.n	c2622 <_strtod_l+0x272>
   c25e8:	9907      	ldr	r1, [sp, #28]
   c25ea:	230a      	movs	r3, #10
   c25ec:	fb03 2301 	mla	r3, r3, r1, r2
   c25f0:	9307      	str	r3, [sp, #28]
   c25f2:	2300      	movs	r3, #0
   c25f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c25f6:	1c51      	adds	r1, r2, #1
   c25f8:	9117      	str	r1, [sp, #92]	; 0x5c
   c25fa:	7852      	ldrb	r2, [r2, #1]
   c25fc:	4618      	mov	r0, r3
   c25fe:	e7c9      	b.n	c2594 <_strtod_l+0x1e4>
   c2600:	4638      	mov	r0, r7
   c2602:	e7d2      	b.n	c25aa <_strtod_l+0x1fa>
   c2604:	2b08      	cmp	r3, #8
   c2606:	dc04      	bgt.n	c2612 <_strtod_l+0x262>
   c2608:	9e07      	ldr	r6, [sp, #28]
   c260a:	434e      	muls	r6, r1
   c260c:	9607      	str	r6, [sp, #28]
   c260e:	3301      	adds	r3, #1
   c2610:	e7e2      	b.n	c25d8 <_strtod_l+0x228>
   c2612:	f103 0c01 	add.w	ip, r3, #1
   c2616:	f1bc 0f10 	cmp.w	ip, #16
   c261a:	bfd8      	it	le
   c261c:	fb01 f909 	mulle.w	r9, r1, r9
   c2620:	e7f5      	b.n	c260e <_strtod_l+0x25e>
   c2622:	2d10      	cmp	r5, #16
   c2624:	bfdc      	itt	le
   c2626:	230a      	movle	r3, #10
   c2628:	fb03 2909 	mlale	r9, r3, r9, r2
   c262c:	e7e1      	b.n	c25f2 <_strtod_l+0x242>
   c262e:	2300      	movs	r3, #0
   c2630:	9305      	str	r3, [sp, #20]
   c2632:	2301      	movs	r3, #1
   c2634:	e77c      	b.n	c2530 <_strtod_l+0x180>
   c2636:	f04f 0c00 	mov.w	ip, #0
   c263a:	f108 0202 	add.w	r2, r8, #2
   c263e:	9217      	str	r2, [sp, #92]	; 0x5c
   c2640:	f898 2002 	ldrb.w	r2, [r8, #2]
   c2644:	e785      	b.n	c2552 <_strtod_l+0x1a2>
   c2646:	f04f 0c01 	mov.w	ip, #1
   c264a:	e7f6      	b.n	c263a <_strtod_l+0x28a>
   c264c:	000c5f0c 	.word	0x000c5f0c
   c2650:	000c5d44 	.word	0x000c5d44
   c2654:	7ff00000 	.word	0x7ff00000
   c2658:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c265a:	1c51      	adds	r1, r2, #1
   c265c:	9117      	str	r1, [sp, #92]	; 0x5c
   c265e:	7852      	ldrb	r2, [r2, #1]
   c2660:	2a30      	cmp	r2, #48	; 0x30
   c2662:	d0f9      	beq.n	c2658 <_strtod_l+0x2a8>
   c2664:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c2668:	2908      	cmp	r1, #8
   c266a:	f63f af79 	bhi.w	c2560 <_strtod_l+0x1b0>
   c266e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c2672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2674:	9206      	str	r2, [sp, #24]
   c2676:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2678:	1c51      	adds	r1, r2, #1
   c267a:	9117      	str	r1, [sp, #92]	; 0x5c
   c267c:	7852      	ldrb	r2, [r2, #1]
   c267e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c2682:	2e09      	cmp	r6, #9
   c2684:	d937      	bls.n	c26f6 <_strtod_l+0x346>
   c2686:	9e06      	ldr	r6, [sp, #24]
   c2688:	1b89      	subs	r1, r1, r6
   c268a:	2908      	cmp	r1, #8
   c268c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c2690:	dc02      	bgt.n	c2698 <_strtod_l+0x2e8>
   c2692:	4576      	cmp	r6, lr
   c2694:	bfa8      	it	ge
   c2696:	4676      	movge	r6, lr
   c2698:	f1bc 0f00 	cmp.w	ip, #0
   c269c:	d000      	beq.n	c26a0 <_strtod_l+0x2f0>
   c269e:	4276      	negs	r6, r6
   c26a0:	2d00      	cmp	r5, #0
   c26a2:	d14d      	bne.n	c2740 <_strtod_l+0x390>
   c26a4:	9904      	ldr	r1, [sp, #16]
   c26a6:	4301      	orrs	r1, r0
   c26a8:	f47f aec6 	bne.w	c2438 <_strtod_l+0x88>
   c26ac:	2b00      	cmp	r3, #0
   c26ae:	f47f aee1 	bne.w	c2474 <_strtod_l+0xc4>
   c26b2:	2a69      	cmp	r2, #105	; 0x69
   c26b4:	d027      	beq.n	c2706 <_strtod_l+0x356>
   c26b6:	dc24      	bgt.n	c2702 <_strtod_l+0x352>
   c26b8:	2a49      	cmp	r2, #73	; 0x49
   c26ba:	d024      	beq.n	c2706 <_strtod_l+0x356>
   c26bc:	2a4e      	cmp	r2, #78	; 0x4e
   c26be:	f47f aed9 	bne.w	c2474 <_strtod_l+0xc4>
   c26c2:	499f      	ldr	r1, [pc, #636]	; (c2940 <_strtod_l+0x590>)
   c26c4:	a817      	add	r0, sp, #92	; 0x5c
   c26c6:	f001 f833 	bl	c3730 <__match>
   c26ca:	2800      	cmp	r0, #0
   c26cc:	f43f aed2 	beq.w	c2474 <_strtod_l+0xc4>
   c26d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c26d2:	781b      	ldrb	r3, [r3, #0]
   c26d4:	2b28      	cmp	r3, #40	; 0x28
   c26d6:	d12d      	bne.n	c2734 <_strtod_l+0x384>
   c26d8:	499a      	ldr	r1, [pc, #616]	; (c2944 <_strtod_l+0x594>)
   c26da:	aa1a      	add	r2, sp, #104	; 0x68
   c26dc:	a817      	add	r0, sp, #92	; 0x5c
   c26de:	f001 f83b 	bl	c3758 <__hexnan>
   c26e2:	2805      	cmp	r0, #5
   c26e4:	d126      	bne.n	c2734 <_strtod_l+0x384>
   c26e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c26e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c26ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c26f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c26f4:	e6a0      	b.n	c2438 <_strtod_l+0x88>
   c26f6:	210a      	movs	r1, #10
   c26f8:	fb01 2e0e 	mla	lr, r1, lr, r2
   c26fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c2700:	e7b9      	b.n	c2676 <_strtod_l+0x2c6>
   c2702:	2a6e      	cmp	r2, #110	; 0x6e
   c2704:	e7db      	b.n	c26be <_strtod_l+0x30e>
   c2706:	4990      	ldr	r1, [pc, #576]	; (c2948 <_strtod_l+0x598>)
   c2708:	a817      	add	r0, sp, #92	; 0x5c
   c270a:	f001 f811 	bl	c3730 <__match>
   c270e:	2800      	cmp	r0, #0
   c2710:	f43f aeb0 	beq.w	c2474 <_strtod_l+0xc4>
   c2714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2716:	498d      	ldr	r1, [pc, #564]	; (c294c <_strtod_l+0x59c>)
   c2718:	3b01      	subs	r3, #1
   c271a:	a817      	add	r0, sp, #92	; 0x5c
   c271c:	9317      	str	r3, [sp, #92]	; 0x5c
   c271e:	f001 f807 	bl	c3730 <__match>
   c2722:	b910      	cbnz	r0, c272a <_strtod_l+0x37a>
   c2724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2726:	3301      	adds	r3, #1
   c2728:	9317      	str	r3, [sp, #92]	; 0x5c
   c272a:	f8df b230 	ldr.w	fp, [pc, #560]	; c295c <_strtod_l+0x5ac>
   c272e:	f04f 0a00 	mov.w	sl, #0
   c2732:	e681      	b.n	c2438 <_strtod_l+0x88>
   c2734:	4886      	ldr	r0, [pc, #536]	; (c2950 <_strtod_l+0x5a0>)
   c2736:	f001 fd93 	bl	c4260 <nan>
   c273a:	ec5b ab10 	vmov	sl, fp, d0
   c273e:	e67b      	b.n	c2438 <_strtod_l+0x88>
   c2740:	9b05      	ldr	r3, [sp, #20]
   c2742:	9807      	ldr	r0, [sp, #28]
   c2744:	1af3      	subs	r3, r6, r3
   c2746:	2f00      	cmp	r7, #0
   c2748:	bf08      	it	eq
   c274a:	462f      	moveq	r7, r5
   c274c:	2d10      	cmp	r5, #16
   c274e:	9306      	str	r3, [sp, #24]
   c2750:	46a8      	mov	r8, r5
   c2752:	bfa8      	it	ge
   c2754:	f04f 0810 	movge.w	r8, #16
   c2758:	f7ff f8f2 	bl	c1940 <__aeabi_ui2d>
   c275c:	2d09      	cmp	r5, #9
   c275e:	4682      	mov	sl, r0
   c2760:	468b      	mov	fp, r1
   c2762:	dd13      	ble.n	c278c <_strtod_l+0x3dc>
   c2764:	4b7b      	ldr	r3, [pc, #492]	; (c2954 <_strtod_l+0x5a4>)
   c2766:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c276a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c276e:	f7ff f961 	bl	c1a34 <__aeabi_dmul>
   c2772:	4682      	mov	sl, r0
   c2774:	4648      	mov	r0, r9
   c2776:	468b      	mov	fp, r1
   c2778:	f7ff f8e2 	bl	c1940 <__aeabi_ui2d>
   c277c:	4602      	mov	r2, r0
   c277e:	460b      	mov	r3, r1
   c2780:	4650      	mov	r0, sl
   c2782:	4659      	mov	r1, fp
   c2784:	f7fe ffa0 	bl	c16c8 <__adddf3>
   c2788:	4682      	mov	sl, r0
   c278a:	468b      	mov	fp, r1
   c278c:	2d0f      	cmp	r5, #15
   c278e:	dc38      	bgt.n	c2802 <_strtod_l+0x452>
   c2790:	9b06      	ldr	r3, [sp, #24]
   c2792:	2b00      	cmp	r3, #0
   c2794:	f43f ae50 	beq.w	c2438 <_strtod_l+0x88>
   c2798:	dd24      	ble.n	c27e4 <_strtod_l+0x434>
   c279a:	2b16      	cmp	r3, #22
   c279c:	dc0b      	bgt.n	c27b6 <_strtod_l+0x406>
   c279e:	496d      	ldr	r1, [pc, #436]	; (c2954 <_strtod_l+0x5a4>)
   c27a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c27a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c27a8:	4652      	mov	r2, sl
   c27aa:	465b      	mov	r3, fp
   c27ac:	f7ff f942 	bl	c1a34 <__aeabi_dmul>
   c27b0:	4682      	mov	sl, r0
   c27b2:	468b      	mov	fp, r1
   c27b4:	e640      	b.n	c2438 <_strtod_l+0x88>
   c27b6:	9a06      	ldr	r2, [sp, #24]
   c27b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c27bc:	4293      	cmp	r3, r2
   c27be:	db20      	blt.n	c2802 <_strtod_l+0x452>
   c27c0:	4c64      	ldr	r4, [pc, #400]	; (c2954 <_strtod_l+0x5a4>)
   c27c2:	f1c5 050f 	rsb	r5, r5, #15
   c27c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c27ca:	4652      	mov	r2, sl
   c27cc:	465b      	mov	r3, fp
   c27ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   c27d2:	f7ff f92f 	bl	c1a34 <__aeabi_dmul>
   c27d6:	9b06      	ldr	r3, [sp, #24]
   c27d8:	1b5d      	subs	r5, r3, r5
   c27da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c27de:	e9d4 2300 	ldrd	r2, r3, [r4]
   c27e2:	e7e3      	b.n	c27ac <_strtod_l+0x3fc>
   c27e4:	9b06      	ldr	r3, [sp, #24]
   c27e6:	3316      	adds	r3, #22
   c27e8:	db0b      	blt.n	c2802 <_strtod_l+0x452>
   c27ea:	9b05      	ldr	r3, [sp, #20]
   c27ec:	1b9e      	subs	r6, r3, r6
   c27ee:	4b59      	ldr	r3, [pc, #356]	; (c2954 <_strtod_l+0x5a4>)
   c27f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c27f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   c27f8:	4650      	mov	r0, sl
   c27fa:	4659      	mov	r1, fp
   c27fc:	f7ff fa44 	bl	c1c88 <__aeabi_ddiv>
   c2800:	e7d6      	b.n	c27b0 <_strtod_l+0x400>
   c2802:	9b06      	ldr	r3, [sp, #24]
   c2804:	eba5 0808 	sub.w	r8, r5, r8
   c2808:	4498      	add	r8, r3
   c280a:	f1b8 0f00 	cmp.w	r8, #0
   c280e:	dd74      	ble.n	c28fa <_strtod_l+0x54a>
   c2810:	f018 030f 	ands.w	r3, r8, #15
   c2814:	d00a      	beq.n	c282c <_strtod_l+0x47c>
   c2816:	494f      	ldr	r1, [pc, #316]	; (c2954 <_strtod_l+0x5a4>)
   c2818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c281c:	4652      	mov	r2, sl
   c281e:	465b      	mov	r3, fp
   c2820:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2824:	f7ff f906 	bl	c1a34 <__aeabi_dmul>
   c2828:	4682      	mov	sl, r0
   c282a:	468b      	mov	fp, r1
   c282c:	f038 080f 	bics.w	r8, r8, #15
   c2830:	d04f      	beq.n	c28d2 <_strtod_l+0x522>
   c2832:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c2836:	dd22      	ble.n	c287e <_strtod_l+0x4ce>
   c2838:	2500      	movs	r5, #0
   c283a:	462e      	mov	r6, r5
   c283c:	9507      	str	r5, [sp, #28]
   c283e:	9505      	str	r5, [sp, #20]
   c2840:	2322      	movs	r3, #34	; 0x22
   c2842:	f8df b118 	ldr.w	fp, [pc, #280]	; c295c <_strtod_l+0x5ac>
   c2846:	6023      	str	r3, [r4, #0]
   c2848:	f04f 0a00 	mov.w	sl, #0
   c284c:	9b07      	ldr	r3, [sp, #28]
   c284e:	2b00      	cmp	r3, #0
   c2850:	f43f adf2 	beq.w	c2438 <_strtod_l+0x88>
   c2854:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2856:	4620      	mov	r0, r4
   c2858:	f001 f870 	bl	c393c <_Bfree>
   c285c:	9905      	ldr	r1, [sp, #20]
   c285e:	4620      	mov	r0, r4
   c2860:	f001 f86c 	bl	c393c <_Bfree>
   c2864:	4631      	mov	r1, r6
   c2866:	4620      	mov	r0, r4
   c2868:	f001 f868 	bl	c393c <_Bfree>
   c286c:	9907      	ldr	r1, [sp, #28]
   c286e:	4620      	mov	r0, r4
   c2870:	f001 f864 	bl	c393c <_Bfree>
   c2874:	4629      	mov	r1, r5
   c2876:	4620      	mov	r0, r4
   c2878:	f001 f860 	bl	c393c <_Bfree>
   c287c:	e5dc      	b.n	c2438 <_strtod_l+0x88>
   c287e:	4b36      	ldr	r3, [pc, #216]	; (c2958 <_strtod_l+0x5a8>)
   c2880:	9304      	str	r3, [sp, #16]
   c2882:	2300      	movs	r3, #0
   c2884:	ea4f 1828 	mov.w	r8, r8, asr #4
   c2888:	4650      	mov	r0, sl
   c288a:	4659      	mov	r1, fp
   c288c:	4699      	mov	r9, r3
   c288e:	f1b8 0f01 	cmp.w	r8, #1
   c2892:	dc21      	bgt.n	c28d8 <_strtod_l+0x528>
   c2894:	b10b      	cbz	r3, c289a <_strtod_l+0x4ea>
   c2896:	4682      	mov	sl, r0
   c2898:	468b      	mov	fp, r1
   c289a:	4b2f      	ldr	r3, [pc, #188]	; (c2958 <_strtod_l+0x5a8>)
   c289c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c28a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c28a4:	4652      	mov	r2, sl
   c28a6:	465b      	mov	r3, fp
   c28a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c28ac:	f7ff f8c2 	bl	c1a34 <__aeabi_dmul>
   c28b0:	4b2a      	ldr	r3, [pc, #168]	; (c295c <_strtod_l+0x5ac>)
   c28b2:	460a      	mov	r2, r1
   c28b4:	400b      	ands	r3, r1
   c28b6:	492a      	ldr	r1, [pc, #168]	; (c2960 <_strtod_l+0x5b0>)
   c28b8:	428b      	cmp	r3, r1
   c28ba:	4682      	mov	sl, r0
   c28bc:	d8bc      	bhi.n	c2838 <_strtod_l+0x488>
   c28be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c28c2:	428b      	cmp	r3, r1
   c28c4:	bf86      	itte	hi
   c28c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c2964 <_strtod_l+0x5b4>
   c28ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c28ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c28d2:	2300      	movs	r3, #0
   c28d4:	9304      	str	r3, [sp, #16]
   c28d6:	e084      	b.n	c29e2 <_strtod_l+0x632>
   c28d8:	f018 0f01 	tst.w	r8, #1
   c28dc:	d005      	beq.n	c28ea <_strtod_l+0x53a>
   c28de:	9b04      	ldr	r3, [sp, #16]
   c28e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28e4:	f7ff f8a6 	bl	c1a34 <__aeabi_dmul>
   c28e8:	2301      	movs	r3, #1
   c28ea:	9a04      	ldr	r2, [sp, #16]
   c28ec:	3208      	adds	r2, #8
   c28ee:	f109 0901 	add.w	r9, r9, #1
   c28f2:	ea4f 0868 	mov.w	r8, r8, asr #1
   c28f6:	9204      	str	r2, [sp, #16]
   c28f8:	e7c9      	b.n	c288e <_strtod_l+0x4de>
   c28fa:	d0ea      	beq.n	c28d2 <_strtod_l+0x522>
   c28fc:	f1c8 0800 	rsb	r8, r8, #0
   c2900:	f018 020f 	ands.w	r2, r8, #15
   c2904:	d00a      	beq.n	c291c <_strtod_l+0x56c>
   c2906:	4b13      	ldr	r3, [pc, #76]	; (c2954 <_strtod_l+0x5a4>)
   c2908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c290c:	4650      	mov	r0, sl
   c290e:	4659      	mov	r1, fp
   c2910:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2914:	f7ff f9b8 	bl	c1c88 <__aeabi_ddiv>
   c2918:	4682      	mov	sl, r0
   c291a:	468b      	mov	fp, r1
   c291c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c2920:	d0d7      	beq.n	c28d2 <_strtod_l+0x522>
   c2922:	f1b8 0f1f 	cmp.w	r8, #31
   c2926:	dd1f      	ble.n	c2968 <_strtod_l+0x5b8>
   c2928:	2500      	movs	r5, #0
   c292a:	462e      	mov	r6, r5
   c292c:	9507      	str	r5, [sp, #28]
   c292e:	9505      	str	r5, [sp, #20]
   c2930:	2322      	movs	r3, #34	; 0x22
   c2932:	f04f 0a00 	mov.w	sl, #0
   c2936:	f04f 0b00 	mov.w	fp, #0
   c293a:	6023      	str	r3, [r4, #0]
   c293c:	e786      	b.n	c284c <_strtod_l+0x49c>
   c293e:	bf00      	nop
   c2940:	000c5d3e 	.word	0x000c5d3e
   c2944:	000c5d58 	.word	0x000c5d58
   c2948:	000c5d35 	.word	0x000c5d35
   c294c:	000c5d38 	.word	0x000c5d38
   c2950:	000c5a83 	.word	0x000c5a83
   c2954:	000c5fa0 	.word	0x000c5fa0
   c2958:	000c5f78 	.word	0x000c5f78
   c295c:	7ff00000 	.word	0x7ff00000
   c2960:	7ca00000 	.word	0x7ca00000
   c2964:	7fefffff 	.word	0x7fefffff
   c2968:	f018 0310 	ands.w	r3, r8, #16
   c296c:	bf18      	it	ne
   c296e:	236a      	movne	r3, #106	; 0x6a
   c2970:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c2d20 <_strtod_l+0x970>
   c2974:	9304      	str	r3, [sp, #16]
   c2976:	4650      	mov	r0, sl
   c2978:	4659      	mov	r1, fp
   c297a:	2300      	movs	r3, #0
   c297c:	f018 0f01 	tst.w	r8, #1
   c2980:	d004      	beq.n	c298c <_strtod_l+0x5dc>
   c2982:	e9d9 2300 	ldrd	r2, r3, [r9]
   c2986:	f7ff f855 	bl	c1a34 <__aeabi_dmul>
   c298a:	2301      	movs	r3, #1
   c298c:	ea5f 0868 	movs.w	r8, r8, asr #1
   c2990:	f109 0908 	add.w	r9, r9, #8
   c2994:	d1f2      	bne.n	c297c <_strtod_l+0x5cc>
   c2996:	b10b      	cbz	r3, c299c <_strtod_l+0x5ec>
   c2998:	4682      	mov	sl, r0
   c299a:	468b      	mov	fp, r1
   c299c:	9b04      	ldr	r3, [sp, #16]
   c299e:	b1c3      	cbz	r3, c29d2 <_strtod_l+0x622>
   c29a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c29a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c29a8:	2b00      	cmp	r3, #0
   c29aa:	4659      	mov	r1, fp
   c29ac:	dd11      	ble.n	c29d2 <_strtod_l+0x622>
   c29ae:	2b1f      	cmp	r3, #31
   c29b0:	f340 8124 	ble.w	c2bfc <_strtod_l+0x84c>
   c29b4:	2b34      	cmp	r3, #52	; 0x34
   c29b6:	bfde      	ittt	le
   c29b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c29bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c29c0:	fa03 f202 	lslle.w	r2, r3, r2
   c29c4:	f04f 0a00 	mov.w	sl, #0
   c29c8:	bfcc      	ite	gt
   c29ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c29ce:	ea02 0b01 	andle.w	fp, r2, r1
   c29d2:	2200      	movs	r2, #0
   c29d4:	2300      	movs	r3, #0
   c29d6:	4650      	mov	r0, sl
   c29d8:	4659      	mov	r1, fp
   c29da:	f7ff fa93 	bl	c1f04 <__aeabi_dcmpeq>
   c29de:	2800      	cmp	r0, #0
   c29e0:	d1a2      	bne.n	c2928 <_strtod_l+0x578>
   c29e2:	9b07      	ldr	r3, [sp, #28]
   c29e4:	9300      	str	r3, [sp, #0]
   c29e6:	9908      	ldr	r1, [sp, #32]
   c29e8:	462b      	mov	r3, r5
   c29ea:	463a      	mov	r2, r7
   c29ec:	4620      	mov	r0, r4
   c29ee:	f001 f80d 	bl	c3a0c <__s2b>
   c29f2:	9007      	str	r0, [sp, #28]
   c29f4:	2800      	cmp	r0, #0
   c29f6:	f43f af1f 	beq.w	c2838 <_strtod_l+0x488>
   c29fa:	9b05      	ldr	r3, [sp, #20]
   c29fc:	1b9e      	subs	r6, r3, r6
   c29fe:	9b06      	ldr	r3, [sp, #24]
   c2a00:	2b00      	cmp	r3, #0
   c2a02:	bfb4      	ite	lt
   c2a04:	4633      	movlt	r3, r6
   c2a06:	2300      	movge	r3, #0
   c2a08:	930c      	str	r3, [sp, #48]	; 0x30
   c2a0a:	9b06      	ldr	r3, [sp, #24]
   c2a0c:	2500      	movs	r5, #0
   c2a0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2a12:	9312      	str	r3, [sp, #72]	; 0x48
   c2a14:	462e      	mov	r6, r5
   c2a16:	9b07      	ldr	r3, [sp, #28]
   c2a18:	4620      	mov	r0, r4
   c2a1a:	6859      	ldr	r1, [r3, #4]
   c2a1c:	f000 ff4e 	bl	c38bc <_Balloc>
   c2a20:	9005      	str	r0, [sp, #20]
   c2a22:	2800      	cmp	r0, #0
   c2a24:	f43f af0c 	beq.w	c2840 <_strtod_l+0x490>
   c2a28:	9b07      	ldr	r3, [sp, #28]
   c2a2a:	691a      	ldr	r2, [r3, #16]
   c2a2c:	3202      	adds	r2, #2
   c2a2e:	f103 010c 	add.w	r1, r3, #12
   c2a32:	0092      	lsls	r2, r2, #2
   c2a34:	300c      	adds	r0, #12
   c2a36:	f7ff fb73 	bl	c2120 <memcpy>
   c2a3a:	ec4b ab10 	vmov	d0, sl, fp
   c2a3e:	aa1a      	add	r2, sp, #104	; 0x68
   c2a40:	a919      	add	r1, sp, #100	; 0x64
   c2a42:	4620      	mov	r0, r4
   c2a44:	f001 fb28 	bl	c4098 <__d2b>
   c2a48:	ec4b ab18 	vmov	d8, sl, fp
   c2a4c:	9018      	str	r0, [sp, #96]	; 0x60
   c2a4e:	2800      	cmp	r0, #0
   c2a50:	f43f aef6 	beq.w	c2840 <_strtod_l+0x490>
   c2a54:	2101      	movs	r1, #1
   c2a56:	4620      	mov	r0, r4
   c2a58:	f001 f872 	bl	c3b40 <__i2b>
   c2a5c:	4606      	mov	r6, r0
   c2a5e:	2800      	cmp	r0, #0
   c2a60:	f43f aeee 	beq.w	c2840 <_strtod_l+0x490>
   c2a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2a66:	9904      	ldr	r1, [sp, #16]
   c2a68:	2b00      	cmp	r3, #0
   c2a6a:	bfab      	itete	ge
   c2a6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c2a6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c2a70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c2a72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c2a76:	bfac      	ite	ge
   c2a78:	eb03 0902 	addge.w	r9, r3, r2
   c2a7c:	1ad7      	sublt	r7, r2, r3
   c2a7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c2a80:	eba3 0801 	sub.w	r8, r3, r1
   c2a84:	4490      	add	r8, r2
   c2a86:	4ba1      	ldr	r3, [pc, #644]	; (c2d0c <_strtod_l+0x95c>)
   c2a88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c2a8c:	4598      	cmp	r8, r3
   c2a8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c2a92:	f280 80c7 	bge.w	c2c24 <_strtod_l+0x874>
   c2a96:	eba3 0308 	sub.w	r3, r3, r8
   c2a9a:	2b1f      	cmp	r3, #31
   c2a9c:	eba2 0203 	sub.w	r2, r2, r3
   c2aa0:	f04f 0101 	mov.w	r1, #1
   c2aa4:	f300 80b1 	bgt.w	c2c0a <_strtod_l+0x85a>
   c2aa8:	fa01 f303 	lsl.w	r3, r1, r3
   c2aac:	930d      	str	r3, [sp, #52]	; 0x34
   c2aae:	2300      	movs	r3, #0
   c2ab0:	9308      	str	r3, [sp, #32]
   c2ab2:	eb09 0802 	add.w	r8, r9, r2
   c2ab6:	9b04      	ldr	r3, [sp, #16]
   c2ab8:	45c1      	cmp	r9, r8
   c2aba:	4417      	add	r7, r2
   c2abc:	441f      	add	r7, r3
   c2abe:	464b      	mov	r3, r9
   c2ac0:	bfa8      	it	ge
   c2ac2:	4643      	movge	r3, r8
   c2ac4:	42bb      	cmp	r3, r7
   c2ac6:	bfa8      	it	ge
   c2ac8:	463b      	movge	r3, r7
   c2aca:	2b00      	cmp	r3, #0
   c2acc:	bfc2      	ittt	gt
   c2ace:	eba8 0803 	subgt.w	r8, r8, r3
   c2ad2:	1aff      	subgt	r7, r7, r3
   c2ad4:	eba9 0903 	subgt.w	r9, r9, r3
   c2ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2ada:	2b00      	cmp	r3, #0
   c2adc:	dd17      	ble.n	c2b0e <_strtod_l+0x75e>
   c2ade:	4631      	mov	r1, r6
   c2ae0:	461a      	mov	r2, r3
   c2ae2:	4620      	mov	r0, r4
   c2ae4:	f001 f8ec 	bl	c3cc0 <__pow5mult>
   c2ae8:	4606      	mov	r6, r0
   c2aea:	2800      	cmp	r0, #0
   c2aec:	f43f aea8 	beq.w	c2840 <_strtod_l+0x490>
   c2af0:	4601      	mov	r1, r0
   c2af2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c2af4:	4620      	mov	r0, r4
   c2af6:	f001 f839 	bl	c3b6c <__multiply>
   c2afa:	900b      	str	r0, [sp, #44]	; 0x2c
   c2afc:	2800      	cmp	r0, #0
   c2afe:	f43f ae9f 	beq.w	c2840 <_strtod_l+0x490>
   c2b02:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2b04:	4620      	mov	r0, r4
   c2b06:	f000 ff19 	bl	c393c <_Bfree>
   c2b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2b0c:	9318      	str	r3, [sp, #96]	; 0x60
   c2b0e:	f1b8 0f00 	cmp.w	r8, #0
   c2b12:	f300 808c 	bgt.w	c2c2e <_strtod_l+0x87e>
   c2b16:	9b06      	ldr	r3, [sp, #24]
   c2b18:	2b00      	cmp	r3, #0
   c2b1a:	dd08      	ble.n	c2b2e <_strtod_l+0x77e>
   c2b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c2b1e:	9905      	ldr	r1, [sp, #20]
   c2b20:	4620      	mov	r0, r4
   c2b22:	f001 f8cd 	bl	c3cc0 <__pow5mult>
   c2b26:	9005      	str	r0, [sp, #20]
   c2b28:	2800      	cmp	r0, #0
   c2b2a:	f43f ae89 	beq.w	c2840 <_strtod_l+0x490>
   c2b2e:	2f00      	cmp	r7, #0
   c2b30:	dd08      	ble.n	c2b44 <_strtod_l+0x794>
   c2b32:	9905      	ldr	r1, [sp, #20]
   c2b34:	463a      	mov	r2, r7
   c2b36:	4620      	mov	r0, r4
   c2b38:	f001 f91c 	bl	c3d74 <__lshift>
   c2b3c:	9005      	str	r0, [sp, #20]
   c2b3e:	2800      	cmp	r0, #0
   c2b40:	f43f ae7e 	beq.w	c2840 <_strtod_l+0x490>
   c2b44:	f1b9 0f00 	cmp.w	r9, #0
   c2b48:	dd08      	ble.n	c2b5c <_strtod_l+0x7ac>
   c2b4a:	4631      	mov	r1, r6
   c2b4c:	464a      	mov	r2, r9
   c2b4e:	4620      	mov	r0, r4
   c2b50:	f001 f910 	bl	c3d74 <__lshift>
   c2b54:	4606      	mov	r6, r0
   c2b56:	2800      	cmp	r0, #0
   c2b58:	f43f ae72 	beq.w	c2840 <_strtod_l+0x490>
   c2b5c:	9a05      	ldr	r2, [sp, #20]
   c2b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2b60:	4620      	mov	r0, r4
   c2b62:	f001 f993 	bl	c3e8c <__mdiff>
   c2b66:	4605      	mov	r5, r0
   c2b68:	2800      	cmp	r0, #0
   c2b6a:	f43f ae69 	beq.w	c2840 <_strtod_l+0x490>
   c2b6e:	68c3      	ldr	r3, [r0, #12]
   c2b70:	930b      	str	r3, [sp, #44]	; 0x2c
   c2b72:	2300      	movs	r3, #0
   c2b74:	60c3      	str	r3, [r0, #12]
   c2b76:	4631      	mov	r1, r6
   c2b78:	f001 f96c 	bl	c3e54 <__mcmp>
   c2b7c:	2800      	cmp	r0, #0
   c2b7e:	da60      	bge.n	c2c42 <_strtod_l+0x892>
   c2b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2b82:	ea53 030a 	orrs.w	r3, r3, sl
   c2b86:	f040 8082 	bne.w	c2c8e <_strtod_l+0x8de>
   c2b8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2b8e:	2b00      	cmp	r3, #0
   c2b90:	d17d      	bne.n	c2c8e <_strtod_l+0x8de>
   c2b92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2b96:	0d1b      	lsrs	r3, r3, #20
   c2b98:	051b      	lsls	r3, r3, #20
   c2b9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c2b9e:	d976      	bls.n	c2c8e <_strtod_l+0x8de>
   c2ba0:	696b      	ldr	r3, [r5, #20]
   c2ba2:	b913      	cbnz	r3, c2baa <_strtod_l+0x7fa>
   c2ba4:	692b      	ldr	r3, [r5, #16]
   c2ba6:	2b01      	cmp	r3, #1
   c2ba8:	dd71      	ble.n	c2c8e <_strtod_l+0x8de>
   c2baa:	4629      	mov	r1, r5
   c2bac:	2201      	movs	r2, #1
   c2bae:	4620      	mov	r0, r4
   c2bb0:	f001 f8e0 	bl	c3d74 <__lshift>
   c2bb4:	4631      	mov	r1, r6
   c2bb6:	4605      	mov	r5, r0
   c2bb8:	f001 f94c 	bl	c3e54 <__mcmp>
   c2bbc:	2800      	cmp	r0, #0
   c2bbe:	dd66      	ble.n	c2c8e <_strtod_l+0x8de>
   c2bc0:	9904      	ldr	r1, [sp, #16]
   c2bc2:	4a53      	ldr	r2, [pc, #332]	; (c2d10 <_strtod_l+0x960>)
   c2bc4:	465b      	mov	r3, fp
   c2bc6:	2900      	cmp	r1, #0
   c2bc8:	f000 8081 	beq.w	c2cce <_strtod_l+0x91e>
   c2bcc:	ea02 010b 	and.w	r1, r2, fp
   c2bd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c2bd4:	dc7b      	bgt.n	c2cce <_strtod_l+0x91e>
   c2bd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c2bda:	f77f aea9 	ble.w	c2930 <_strtod_l+0x580>
   c2bde:	4b4d      	ldr	r3, [pc, #308]	; (c2d14 <_strtod_l+0x964>)
   c2be0:	4650      	mov	r0, sl
   c2be2:	4659      	mov	r1, fp
   c2be4:	2200      	movs	r2, #0
   c2be6:	f7fe ff25 	bl	c1a34 <__aeabi_dmul>
   c2bea:	460b      	mov	r3, r1
   c2bec:	4303      	orrs	r3, r0
   c2bee:	bf08      	it	eq
   c2bf0:	2322      	moveq	r3, #34	; 0x22
   c2bf2:	4682      	mov	sl, r0
   c2bf4:	468b      	mov	fp, r1
   c2bf6:	bf08      	it	eq
   c2bf8:	6023      	streq	r3, [r4, #0]
   c2bfa:	e62b      	b.n	c2854 <_strtod_l+0x4a4>
   c2bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2c00:	fa02 f303 	lsl.w	r3, r2, r3
   c2c04:	ea03 0a0a 	and.w	sl, r3, sl
   c2c08:	e6e3      	b.n	c29d2 <_strtod_l+0x622>
   c2c0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c2c0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c2c12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c2c16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c2c1a:	fa01 f308 	lsl.w	r3, r1, r8
   c2c1e:	9308      	str	r3, [sp, #32]
   c2c20:	910d      	str	r1, [sp, #52]	; 0x34
   c2c22:	e746      	b.n	c2ab2 <_strtod_l+0x702>
   c2c24:	2300      	movs	r3, #0
   c2c26:	9308      	str	r3, [sp, #32]
   c2c28:	2301      	movs	r3, #1
   c2c2a:	930d      	str	r3, [sp, #52]	; 0x34
   c2c2c:	e741      	b.n	c2ab2 <_strtod_l+0x702>
   c2c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2c30:	4642      	mov	r2, r8
   c2c32:	4620      	mov	r0, r4
   c2c34:	f001 f89e 	bl	c3d74 <__lshift>
   c2c38:	9018      	str	r0, [sp, #96]	; 0x60
   c2c3a:	2800      	cmp	r0, #0
   c2c3c:	f47f af6b 	bne.w	c2b16 <_strtod_l+0x766>
   c2c40:	e5fe      	b.n	c2840 <_strtod_l+0x490>
   c2c42:	465f      	mov	r7, fp
   c2c44:	d16e      	bne.n	c2d24 <_strtod_l+0x974>
   c2c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2c48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2c4c:	b342      	cbz	r2, c2ca0 <_strtod_l+0x8f0>
   c2c4e:	4a32      	ldr	r2, [pc, #200]	; (c2d18 <_strtod_l+0x968>)
   c2c50:	4293      	cmp	r3, r2
   c2c52:	d128      	bne.n	c2ca6 <_strtod_l+0x8f6>
   c2c54:	9b04      	ldr	r3, [sp, #16]
   c2c56:	4651      	mov	r1, sl
   c2c58:	b1eb      	cbz	r3, c2c96 <_strtod_l+0x8e6>
   c2c5a:	4b2d      	ldr	r3, [pc, #180]	; (c2d10 <_strtod_l+0x960>)
   c2c5c:	403b      	ands	r3, r7
   c2c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c2c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2c66:	d819      	bhi.n	c2c9c <_strtod_l+0x8ec>
   c2c68:	0d1b      	lsrs	r3, r3, #20
   c2c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2c6e:	fa02 f303 	lsl.w	r3, r2, r3
   c2c72:	4299      	cmp	r1, r3
   c2c74:	d117      	bne.n	c2ca6 <_strtod_l+0x8f6>
   c2c76:	4b29      	ldr	r3, [pc, #164]	; (c2d1c <_strtod_l+0x96c>)
   c2c78:	429f      	cmp	r7, r3
   c2c7a:	d102      	bne.n	c2c82 <_strtod_l+0x8d2>
   c2c7c:	3101      	adds	r1, #1
   c2c7e:	f43f addf 	beq.w	c2840 <_strtod_l+0x490>
   c2c82:	4b23      	ldr	r3, [pc, #140]	; (c2d10 <_strtod_l+0x960>)
   c2c84:	403b      	ands	r3, r7
   c2c86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c2c8a:	f04f 0a00 	mov.w	sl, #0
   c2c8e:	9b04      	ldr	r3, [sp, #16]
   c2c90:	2b00      	cmp	r3, #0
   c2c92:	d1a4      	bne.n	c2bde <_strtod_l+0x82e>
   c2c94:	e5de      	b.n	c2854 <_strtod_l+0x4a4>
   c2c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2c9a:	e7ea      	b.n	c2c72 <_strtod_l+0x8c2>
   c2c9c:	4613      	mov	r3, r2
   c2c9e:	e7e8      	b.n	c2c72 <_strtod_l+0x8c2>
   c2ca0:	ea53 030a 	orrs.w	r3, r3, sl
   c2ca4:	d08c      	beq.n	c2bc0 <_strtod_l+0x810>
   c2ca6:	9b08      	ldr	r3, [sp, #32]
   c2ca8:	b1db      	cbz	r3, c2ce2 <_strtod_l+0x932>
   c2caa:	423b      	tst	r3, r7
   c2cac:	d0ef      	beq.n	c2c8e <_strtod_l+0x8de>
   c2cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2cb0:	9a04      	ldr	r2, [sp, #16]
   c2cb2:	4650      	mov	r0, sl
   c2cb4:	4659      	mov	r1, fp
   c2cb6:	b1c3      	cbz	r3, c2cea <_strtod_l+0x93a>
   c2cb8:	f7ff fb5d 	bl	c2376 <sulp>
   c2cbc:	4602      	mov	r2, r0
   c2cbe:	460b      	mov	r3, r1
   c2cc0:	ec51 0b18 	vmov	r0, r1, d8
   c2cc4:	f7fe fd00 	bl	c16c8 <__adddf3>
   c2cc8:	4682      	mov	sl, r0
   c2cca:	468b      	mov	fp, r1
   c2ccc:	e7df      	b.n	c2c8e <_strtod_l+0x8de>
   c2cce:	4013      	ands	r3, r2
   c2cd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c2cd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c2cd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c2cdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2ce0:	e7d5      	b.n	c2c8e <_strtod_l+0x8de>
   c2ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2ce4:	ea13 0f0a 	tst.w	r3, sl
   c2ce8:	e7e0      	b.n	c2cac <_strtod_l+0x8fc>
   c2cea:	f7ff fb44 	bl	c2376 <sulp>
   c2cee:	4602      	mov	r2, r0
   c2cf0:	460b      	mov	r3, r1
   c2cf2:	ec51 0b18 	vmov	r0, r1, d8
   c2cf6:	f7fe fce5 	bl	c16c4 <__aeabi_dsub>
   c2cfa:	2200      	movs	r2, #0
   c2cfc:	2300      	movs	r3, #0
   c2cfe:	4682      	mov	sl, r0
   c2d00:	468b      	mov	fp, r1
   c2d02:	f7ff f8ff 	bl	c1f04 <__aeabi_dcmpeq>
   c2d06:	2800      	cmp	r0, #0
   c2d08:	d0c1      	beq.n	c2c8e <_strtod_l+0x8de>
   c2d0a:	e611      	b.n	c2930 <_strtod_l+0x580>
   c2d0c:	fffffc02 	.word	0xfffffc02
   c2d10:	7ff00000 	.word	0x7ff00000
   c2d14:	39500000 	.word	0x39500000
   c2d18:	000fffff 	.word	0x000fffff
   c2d1c:	7fefffff 	.word	0x7fefffff
   c2d20:	000c5d70 	.word	0x000c5d70
   c2d24:	4631      	mov	r1, r6
   c2d26:	4628      	mov	r0, r5
   c2d28:	f001 fa12 	bl	c4150 <__ratio>
   c2d2c:	ec59 8b10 	vmov	r8, r9, d0
   c2d30:	ee10 0a10 	vmov	r0, s0
   c2d34:	2200      	movs	r2, #0
   c2d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2d3a:	4649      	mov	r1, r9
   c2d3c:	f7ff f8f6 	bl	c1f2c <__aeabi_dcmple>
   c2d40:	2800      	cmp	r0, #0
   c2d42:	d07a      	beq.n	c2e3a <_strtod_l+0xa8a>
   c2d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2d46:	2b00      	cmp	r3, #0
   c2d48:	d04a      	beq.n	c2de0 <_strtod_l+0xa30>
   c2d4a:	4b95      	ldr	r3, [pc, #596]	; (c2fa0 <_strtod_l+0xbf0>)
   c2d4c:	2200      	movs	r2, #0
   c2d4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2d52:	f8df 924c 	ldr.w	r9, [pc, #588]	; c2fa0 <_strtod_l+0xbf0>
   c2d56:	f04f 0800 	mov.w	r8, #0
   c2d5a:	4b92      	ldr	r3, [pc, #584]	; (c2fa4 <_strtod_l+0xbf4>)
   c2d5c:	403b      	ands	r3, r7
   c2d5e:	930d      	str	r3, [sp, #52]	; 0x34
   c2d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2d62:	4b91      	ldr	r3, [pc, #580]	; (c2fa8 <_strtod_l+0xbf8>)
   c2d64:	429a      	cmp	r2, r3
   c2d66:	f040 80b0 	bne.w	c2eca <_strtod_l+0xb1a>
   c2d6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2d6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c2d72:	ec4b ab10 	vmov	d0, sl, fp
   c2d76:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2d7a:	f001 f911 	bl	c3fa0 <__ulp>
   c2d7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2d82:	ec53 2b10 	vmov	r2, r3, d0
   c2d86:	f7fe fe55 	bl	c1a34 <__aeabi_dmul>
   c2d8a:	4652      	mov	r2, sl
   c2d8c:	465b      	mov	r3, fp
   c2d8e:	f7fe fc9b 	bl	c16c8 <__adddf3>
   c2d92:	460b      	mov	r3, r1
   c2d94:	4983      	ldr	r1, [pc, #524]	; (c2fa4 <_strtod_l+0xbf4>)
   c2d96:	4a85      	ldr	r2, [pc, #532]	; (c2fac <_strtod_l+0xbfc>)
   c2d98:	4019      	ands	r1, r3
   c2d9a:	4291      	cmp	r1, r2
   c2d9c:	4682      	mov	sl, r0
   c2d9e:	d960      	bls.n	c2e62 <_strtod_l+0xab2>
   c2da0:	ee18 3a90 	vmov	r3, s17
   c2da4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c2da8:	4293      	cmp	r3, r2
   c2daa:	d104      	bne.n	c2db6 <_strtod_l+0xa06>
   c2dac:	ee18 3a10 	vmov	r3, s16
   c2db0:	3301      	adds	r3, #1
   c2db2:	f43f ad45 	beq.w	c2840 <_strtod_l+0x490>
   c2db6:	f8df b200 	ldr.w	fp, [pc, #512]	; c2fb8 <_strtod_l+0xc08>
   c2dba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2dc0:	4620      	mov	r0, r4
   c2dc2:	f000 fdbb 	bl	c393c <_Bfree>
   c2dc6:	9905      	ldr	r1, [sp, #20]
   c2dc8:	4620      	mov	r0, r4
   c2dca:	f000 fdb7 	bl	c393c <_Bfree>
   c2dce:	4631      	mov	r1, r6
   c2dd0:	4620      	mov	r0, r4
   c2dd2:	f000 fdb3 	bl	c393c <_Bfree>
   c2dd6:	4629      	mov	r1, r5
   c2dd8:	4620      	mov	r0, r4
   c2dda:	f000 fdaf 	bl	c393c <_Bfree>
   c2dde:	e61a      	b.n	c2a16 <_strtod_l+0x666>
   c2de0:	f1ba 0f00 	cmp.w	sl, #0
   c2de4:	d11b      	bne.n	c2e1e <_strtod_l+0xa6e>
   c2de6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2dea:	b9f3      	cbnz	r3, c2e2a <_strtod_l+0xa7a>
   c2dec:	4b6c      	ldr	r3, [pc, #432]	; (c2fa0 <_strtod_l+0xbf0>)
   c2dee:	2200      	movs	r2, #0
   c2df0:	4640      	mov	r0, r8
   c2df2:	4649      	mov	r1, r9
   c2df4:	f7ff f890 	bl	c1f18 <__aeabi_dcmplt>
   c2df8:	b9d0      	cbnz	r0, c2e30 <_strtod_l+0xa80>
   c2dfa:	4640      	mov	r0, r8
   c2dfc:	4649      	mov	r1, r9
   c2dfe:	4b6c      	ldr	r3, [pc, #432]	; (c2fb0 <_strtod_l+0xc00>)
   c2e00:	2200      	movs	r2, #0
   c2e02:	f7fe fe17 	bl	c1a34 <__aeabi_dmul>
   c2e06:	4680      	mov	r8, r0
   c2e08:	4689      	mov	r9, r1
   c2e0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c2e0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c2e12:	9315      	str	r3, [sp, #84]	; 0x54
   c2e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c2e18:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2e1c:	e79d      	b.n	c2d5a <_strtod_l+0x9aa>
   c2e1e:	f1ba 0f01 	cmp.w	sl, #1
   c2e22:	d102      	bne.n	c2e2a <_strtod_l+0xa7a>
   c2e24:	2f00      	cmp	r7, #0
   c2e26:	f43f ad83 	beq.w	c2930 <_strtod_l+0x580>
   c2e2a:	4b62      	ldr	r3, [pc, #392]	; (c2fb4 <_strtod_l+0xc04>)
   c2e2c:	2200      	movs	r2, #0
   c2e2e:	e78e      	b.n	c2d4e <_strtod_l+0x99e>
   c2e30:	f8df 917c 	ldr.w	r9, [pc, #380]	; c2fb0 <_strtod_l+0xc00>
   c2e34:	f04f 0800 	mov.w	r8, #0
   c2e38:	e7e7      	b.n	c2e0a <_strtod_l+0xa5a>
   c2e3a:	4b5d      	ldr	r3, [pc, #372]	; (c2fb0 <_strtod_l+0xc00>)
   c2e3c:	4640      	mov	r0, r8
   c2e3e:	4649      	mov	r1, r9
   c2e40:	2200      	movs	r2, #0
   c2e42:	f7fe fdf7 	bl	c1a34 <__aeabi_dmul>
   c2e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2e48:	4680      	mov	r8, r0
   c2e4a:	4689      	mov	r9, r1
   c2e4c:	b933      	cbnz	r3, c2e5c <_strtod_l+0xaac>
   c2e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2e52:	900e      	str	r0, [sp, #56]	; 0x38
   c2e54:	930f      	str	r3, [sp, #60]	; 0x3c
   c2e56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c2e5a:	e7dd      	b.n	c2e18 <_strtod_l+0xa68>
   c2e5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c2e60:	e7f9      	b.n	c2e56 <_strtod_l+0xaa6>
   c2e62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c2e66:	9b04      	ldr	r3, [sp, #16]
   c2e68:	2b00      	cmp	r3, #0
   c2e6a:	d1a8      	bne.n	c2dbe <_strtod_l+0xa0e>
   c2e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2e72:	0d1b      	lsrs	r3, r3, #20
   c2e74:	051b      	lsls	r3, r3, #20
   c2e76:	429a      	cmp	r2, r3
   c2e78:	d1a1      	bne.n	c2dbe <_strtod_l+0xa0e>
   c2e7a:	4640      	mov	r0, r8
   c2e7c:	4649      	mov	r1, r9
   c2e7e:	f001 fa05 	bl	c428c <__aeabi_d2lz>
   c2e82:	f7fe fda9 	bl	c19d8 <__aeabi_l2d>
   c2e86:	4602      	mov	r2, r0
   c2e88:	460b      	mov	r3, r1
   c2e8a:	4640      	mov	r0, r8
   c2e8c:	4649      	mov	r1, r9
   c2e8e:	f7fe fc19 	bl	c16c4 <__aeabi_dsub>
   c2e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2e98:	ea43 030a 	orr.w	r3, r3, sl
   c2e9c:	4313      	orrs	r3, r2
   c2e9e:	4680      	mov	r8, r0
   c2ea0:	4689      	mov	r9, r1
   c2ea2:	d055      	beq.n	c2f50 <_strtod_l+0xba0>
   c2ea4:	a336      	add	r3, pc, #216	; (adr r3, c2f80 <_strtod_l+0xbd0>)
   c2ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2eaa:	f7ff f835 	bl	c1f18 <__aeabi_dcmplt>
   c2eae:	2800      	cmp	r0, #0
   c2eb0:	f47f acd0 	bne.w	c2854 <_strtod_l+0x4a4>
   c2eb4:	a334      	add	r3, pc, #208	; (adr r3, c2f88 <_strtod_l+0xbd8>)
   c2eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2eba:	4640      	mov	r0, r8
   c2ebc:	4649      	mov	r1, r9
   c2ebe:	f7ff f849 	bl	c1f54 <__aeabi_dcmpgt>
   c2ec2:	2800      	cmp	r0, #0
   c2ec4:	f43f af7b 	beq.w	c2dbe <_strtod_l+0xa0e>
   c2ec8:	e4c4      	b.n	c2854 <_strtod_l+0x4a4>
   c2eca:	9b04      	ldr	r3, [sp, #16]
   c2ecc:	b333      	cbz	r3, c2f1c <_strtod_l+0xb6c>
   c2ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2ed0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c2ed4:	d822      	bhi.n	c2f1c <_strtod_l+0xb6c>
   c2ed6:	a32e      	add	r3, pc, #184	; (adr r3, c2f90 <_strtod_l+0xbe0>)
   c2ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2edc:	4640      	mov	r0, r8
   c2ede:	4649      	mov	r1, r9
   c2ee0:	f7ff f824 	bl	c1f2c <__aeabi_dcmple>
   c2ee4:	b1a0      	cbz	r0, c2f10 <_strtod_l+0xb60>
   c2ee6:	4649      	mov	r1, r9
   c2ee8:	4640      	mov	r0, r8
   c2eea:	f7ff f865 	bl	c1fb8 <__aeabi_d2uiz>
   c2eee:	2801      	cmp	r0, #1
   c2ef0:	bf38      	it	cc
   c2ef2:	2001      	movcc	r0, #1
   c2ef4:	f7fe fd24 	bl	c1940 <__aeabi_ui2d>
   c2ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2efa:	4680      	mov	r8, r0
   c2efc:	4689      	mov	r9, r1
   c2efe:	bb23      	cbnz	r3, c2f4a <_strtod_l+0xb9a>
   c2f00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2f04:	9010      	str	r0, [sp, #64]	; 0x40
   c2f06:	9311      	str	r3, [sp, #68]	; 0x44
   c2f08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c2f0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2f12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2f14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c2f18:	1a9b      	subs	r3, r3, r2
   c2f1a:	9309      	str	r3, [sp, #36]	; 0x24
   c2f1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2f20:	eeb0 0a48 	vmov.f32	s0, s16
   c2f24:	eef0 0a68 	vmov.f32	s1, s17
   c2f28:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2f2c:	f001 f838 	bl	c3fa0 <__ulp>
   c2f30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2f34:	ec53 2b10 	vmov	r2, r3, d0
   c2f38:	f7fe fd7c 	bl	c1a34 <__aeabi_dmul>
   c2f3c:	ec53 2b18 	vmov	r2, r3, d8
   c2f40:	f7fe fbc2 	bl	c16c8 <__adddf3>
   c2f44:	4682      	mov	sl, r0
   c2f46:	468b      	mov	fp, r1
   c2f48:	e78d      	b.n	c2e66 <_strtod_l+0xab6>
   c2f4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c2f4e:	e7db      	b.n	c2f08 <_strtod_l+0xb58>
   c2f50:	a311      	add	r3, pc, #68	; (adr r3, c2f98 <_strtod_l+0xbe8>)
   c2f52:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f56:	f7fe ffdf 	bl	c1f18 <__aeabi_dcmplt>
   c2f5a:	e7b2      	b.n	c2ec2 <_strtod_l+0xb12>
   c2f5c:	2300      	movs	r3, #0
   c2f5e:	930a      	str	r3, [sp, #40]	; 0x28
   c2f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c2f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2f64:	6013      	str	r3, [r2, #0]
   c2f66:	f7ff ba6b 	b.w	c2440 <_strtod_l+0x90>
   c2f6a:	2a65      	cmp	r2, #101	; 0x65
   c2f6c:	f43f ab5f 	beq.w	c262e <_strtod_l+0x27e>
   c2f70:	2a45      	cmp	r2, #69	; 0x45
   c2f72:	f43f ab5c 	beq.w	c262e <_strtod_l+0x27e>
   c2f76:	2301      	movs	r3, #1
   c2f78:	f7ff bb94 	b.w	c26a4 <_strtod_l+0x2f4>
   c2f7c:	f3af 8000 	nop.w
   c2f80:	94a03595 	.word	0x94a03595
   c2f84:	3fdfffff 	.word	0x3fdfffff
   c2f88:	35afe535 	.word	0x35afe535
   c2f8c:	3fe00000 	.word	0x3fe00000
   c2f90:	ffc00000 	.word	0xffc00000
   c2f94:	41dfffff 	.word	0x41dfffff
   c2f98:	94a03595 	.word	0x94a03595
   c2f9c:	3fcfffff 	.word	0x3fcfffff
   c2fa0:	3ff00000 	.word	0x3ff00000
   c2fa4:	7ff00000 	.word	0x7ff00000
   c2fa8:	7fe00000 	.word	0x7fe00000
   c2fac:	7c9fffff 	.word	0x7c9fffff
   c2fb0:	3fe00000 	.word	0x3fe00000
   c2fb4:	bff00000 	.word	0xbff00000
   c2fb8:	7fefffff 	.word	0x7fefffff

000c2fbc <strtod>:
   c2fbc:	460a      	mov	r2, r1
   c2fbe:	4601      	mov	r1, r0
   c2fc0:	4802      	ldr	r0, [pc, #8]	; (c2fcc <strtod+0x10>)
   c2fc2:	4b03      	ldr	r3, [pc, #12]	; (c2fd0 <strtod+0x14>)
   c2fc4:	6800      	ldr	r0, [r0, #0]
   c2fc6:	f7ff b9f3 	b.w	c23b0 <_strtod_l>
   c2fca:	bf00      	nop
   c2fcc:	2003db98 	.word	0x2003db98
   c2fd0:	2003dc04 	.word	0x2003dc04

000c2fd4 <_strtol_l.constprop.0>:
   c2fd4:	2b01      	cmp	r3, #1
   c2fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2fda:	d001      	beq.n	c2fe0 <_strtol_l.constprop.0+0xc>
   c2fdc:	2b24      	cmp	r3, #36	; 0x24
   c2fde:	d906      	bls.n	c2fee <_strtol_l.constprop.0+0x1a>
   c2fe0:	f7fa fb88 	bl	bd6f4 <__errno>
   c2fe4:	2316      	movs	r3, #22
   c2fe6:	6003      	str	r3, [r0, #0]
   c2fe8:	2000      	movs	r0, #0
   c2fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2fee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c30d4 <_strtol_l.constprop.0+0x100>
   c2ff2:	460d      	mov	r5, r1
   c2ff4:	462e      	mov	r6, r5
   c2ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
   c2ffa:	f814 700c 	ldrb.w	r7, [r4, ip]
   c2ffe:	f017 0708 	ands.w	r7, r7, #8
   c3002:	d1f7      	bne.n	c2ff4 <_strtol_l.constprop.0+0x20>
   c3004:	2c2d      	cmp	r4, #45	; 0x2d
   c3006:	d132      	bne.n	c306e <_strtol_l.constprop.0+0x9a>
   c3008:	782c      	ldrb	r4, [r5, #0]
   c300a:	2701      	movs	r7, #1
   c300c:	1cb5      	adds	r5, r6, #2
   c300e:	2b00      	cmp	r3, #0
   c3010:	d05b      	beq.n	c30ca <_strtol_l.constprop.0+0xf6>
   c3012:	2b10      	cmp	r3, #16
   c3014:	d109      	bne.n	c302a <_strtol_l.constprop.0+0x56>
   c3016:	2c30      	cmp	r4, #48	; 0x30
   c3018:	d107      	bne.n	c302a <_strtol_l.constprop.0+0x56>
   c301a:	782c      	ldrb	r4, [r5, #0]
   c301c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c3020:	2c58      	cmp	r4, #88	; 0x58
   c3022:	d14d      	bne.n	c30c0 <_strtol_l.constprop.0+0xec>
   c3024:	786c      	ldrb	r4, [r5, #1]
   c3026:	2310      	movs	r3, #16
   c3028:	3502      	adds	r5, #2
   c302a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c302e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c3032:	f04f 0c00 	mov.w	ip, #0
   c3036:	fbb8 f9f3 	udiv	r9, r8, r3
   c303a:	4666      	mov	r6, ip
   c303c:	fb03 8a19 	mls	sl, r3, r9, r8
   c3040:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c3044:	f1be 0f09 	cmp.w	lr, #9
   c3048:	d816      	bhi.n	c3078 <_strtol_l.constprop.0+0xa4>
   c304a:	4674      	mov	r4, lr
   c304c:	42a3      	cmp	r3, r4
   c304e:	dd24      	ble.n	c309a <_strtol_l.constprop.0+0xc6>
   c3050:	f1bc 0f00 	cmp.w	ip, #0
   c3054:	db1e      	blt.n	c3094 <_strtol_l.constprop.0+0xc0>
   c3056:	45b1      	cmp	r9, r6
   c3058:	d31c      	bcc.n	c3094 <_strtol_l.constprop.0+0xc0>
   c305a:	d101      	bne.n	c3060 <_strtol_l.constprop.0+0x8c>
   c305c:	45a2      	cmp	sl, r4
   c305e:	db19      	blt.n	c3094 <_strtol_l.constprop.0+0xc0>
   c3060:	fb06 4603 	mla	r6, r6, r3, r4
   c3064:	f04f 0c01 	mov.w	ip, #1
   c3068:	f815 4b01 	ldrb.w	r4, [r5], #1
   c306c:	e7e8      	b.n	c3040 <_strtol_l.constprop.0+0x6c>
   c306e:	2c2b      	cmp	r4, #43	; 0x2b
   c3070:	bf04      	itt	eq
   c3072:	782c      	ldrbeq	r4, [r5, #0]
   c3074:	1cb5      	addeq	r5, r6, #2
   c3076:	e7ca      	b.n	c300e <_strtol_l.constprop.0+0x3a>
   c3078:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c307c:	f1be 0f19 	cmp.w	lr, #25
   c3080:	d801      	bhi.n	c3086 <_strtol_l.constprop.0+0xb2>
   c3082:	3c37      	subs	r4, #55	; 0x37
   c3084:	e7e2      	b.n	c304c <_strtol_l.constprop.0+0x78>
   c3086:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c308a:	f1be 0f19 	cmp.w	lr, #25
   c308e:	d804      	bhi.n	c309a <_strtol_l.constprop.0+0xc6>
   c3090:	3c57      	subs	r4, #87	; 0x57
   c3092:	e7db      	b.n	c304c <_strtol_l.constprop.0+0x78>
   c3094:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3098:	e7e6      	b.n	c3068 <_strtol_l.constprop.0+0x94>
   c309a:	f1bc 0f00 	cmp.w	ip, #0
   c309e:	da05      	bge.n	c30ac <_strtol_l.constprop.0+0xd8>
   c30a0:	2322      	movs	r3, #34	; 0x22
   c30a2:	6003      	str	r3, [r0, #0]
   c30a4:	4646      	mov	r6, r8
   c30a6:	b942      	cbnz	r2, c30ba <_strtol_l.constprop.0+0xe6>
   c30a8:	4630      	mov	r0, r6
   c30aa:	e79e      	b.n	c2fea <_strtol_l.constprop.0+0x16>
   c30ac:	b107      	cbz	r7, c30b0 <_strtol_l.constprop.0+0xdc>
   c30ae:	4276      	negs	r6, r6
   c30b0:	2a00      	cmp	r2, #0
   c30b2:	d0f9      	beq.n	c30a8 <_strtol_l.constprop.0+0xd4>
   c30b4:	f1bc 0f00 	cmp.w	ip, #0
   c30b8:	d000      	beq.n	c30bc <_strtol_l.constprop.0+0xe8>
   c30ba:	1e69      	subs	r1, r5, #1
   c30bc:	6011      	str	r1, [r2, #0]
   c30be:	e7f3      	b.n	c30a8 <_strtol_l.constprop.0+0xd4>
   c30c0:	2430      	movs	r4, #48	; 0x30
   c30c2:	2b00      	cmp	r3, #0
   c30c4:	d1b1      	bne.n	c302a <_strtol_l.constprop.0+0x56>
   c30c6:	2308      	movs	r3, #8
   c30c8:	e7af      	b.n	c302a <_strtol_l.constprop.0+0x56>
   c30ca:	2c30      	cmp	r4, #48	; 0x30
   c30cc:	d0a5      	beq.n	c301a <_strtol_l.constprop.0+0x46>
   c30ce:	230a      	movs	r3, #10
   c30d0:	e7ab      	b.n	c302a <_strtol_l.constprop.0+0x56>
   c30d2:	bf00      	nop
   c30d4:	000c5d99 	.word	0x000c5d99

000c30d8 <strtol>:
   c30d8:	4613      	mov	r3, r2
   c30da:	460a      	mov	r2, r1
   c30dc:	4601      	mov	r1, r0
   c30de:	4802      	ldr	r0, [pc, #8]	; (c30e8 <strtol+0x10>)
   c30e0:	6800      	ldr	r0, [r0, #0]
   c30e2:	f7ff bf77 	b.w	c2fd4 <_strtol_l.constprop.0>
   c30e6:	bf00      	nop
   c30e8:	2003db98 	.word	0x2003db98

000c30ec <__register_exitproc>:
   c30ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c30f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c31ac <__register_exitproc+0xc0>
   c30f4:	4606      	mov	r6, r0
   c30f6:	f8d8 0000 	ldr.w	r0, [r8]
   c30fa:	461f      	mov	r7, r3
   c30fc:	460d      	mov	r5, r1
   c30fe:	4691      	mov	r9, r2
   c3100:	f000 fbc6 	bl	c3890 <__retarget_lock_acquire_recursive>
   c3104:	4b25      	ldr	r3, [pc, #148]	; (c319c <__register_exitproc+0xb0>)
   c3106:	681c      	ldr	r4, [r3, #0]
   c3108:	b934      	cbnz	r4, c3118 <__register_exitproc+0x2c>
   c310a:	4c25      	ldr	r4, [pc, #148]	; (c31a0 <__register_exitproc+0xb4>)
   c310c:	601c      	str	r4, [r3, #0]
   c310e:	4b25      	ldr	r3, [pc, #148]	; (c31a4 <__register_exitproc+0xb8>)
   c3110:	b113      	cbz	r3, c3118 <__register_exitproc+0x2c>
   c3112:	681b      	ldr	r3, [r3, #0]
   c3114:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c3118:	6863      	ldr	r3, [r4, #4]
   c311a:	2b1f      	cmp	r3, #31
   c311c:	dd07      	ble.n	c312e <__register_exitproc+0x42>
   c311e:	f8d8 0000 	ldr.w	r0, [r8]
   c3122:	f000 fbb7 	bl	c3894 <__retarget_lock_release_recursive>
   c3126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c312a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c312e:	b34e      	cbz	r6, c3184 <__register_exitproc+0x98>
   c3130:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c3134:	b988      	cbnz	r0, c315a <__register_exitproc+0x6e>
   c3136:	4b1c      	ldr	r3, [pc, #112]	; (c31a8 <__register_exitproc+0xbc>)
   c3138:	b923      	cbnz	r3, c3144 <__register_exitproc+0x58>
   c313a:	f8d8 0000 	ldr.w	r0, [r8]
   c313e:	f000 fba8 	bl	c3892 <__retarget_lock_release>
   c3142:	e7f0      	b.n	c3126 <__register_exitproc+0x3a>
   c3144:	f44f 7084 	mov.w	r0, #264	; 0x108
   c3148:	f7fa fa94 	bl	bd674 <malloc>
   c314c:	2800      	cmp	r0, #0
   c314e:	d0f4      	beq.n	c313a <__register_exitproc+0x4e>
   c3150:	2300      	movs	r3, #0
   c3152:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c3156:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c315a:	6863      	ldr	r3, [r4, #4]
   c315c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c3160:	2201      	movs	r2, #1
   c3162:	409a      	lsls	r2, r3
   c3164:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c3168:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c316c:	4313      	orrs	r3, r2
   c316e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c3172:	2e02      	cmp	r6, #2
   c3174:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c3178:	bf02      	ittt	eq
   c317a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c317e:	4313      	orreq	r3, r2
   c3180:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c3184:	6863      	ldr	r3, [r4, #4]
   c3186:	f8d8 0000 	ldr.w	r0, [r8]
   c318a:	1c5a      	adds	r2, r3, #1
   c318c:	3302      	adds	r3, #2
   c318e:	6062      	str	r2, [r4, #4]
   c3190:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c3194:	f000 fb7e 	bl	c3894 <__retarget_lock_release_recursive>
   c3198:	2000      	movs	r0, #0
   c319a:	e7c6      	b.n	c312a <__register_exitproc+0x3e>
   c319c:	2003e7e8 	.word	0x2003e7e8
   c31a0:	2003e75c 	.word	0x2003e75c
   c31a4:	00000000 	.word	0x00000000
   c31a8:	000bd675 	.word	0x000bd675
   c31ac:	2003dbfc 	.word	0x2003dbfc

000c31b0 <rshift>:
   c31b0:	6903      	ldr	r3, [r0, #16]
   c31b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c31b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c31ba:	ea4f 1261 	mov.w	r2, r1, asr #5
   c31be:	f100 0414 	add.w	r4, r0, #20
   c31c2:	dd45      	ble.n	c3250 <rshift+0xa0>
   c31c4:	f011 011f 	ands.w	r1, r1, #31
   c31c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c31cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c31d0:	d10c      	bne.n	c31ec <rshift+0x3c>
   c31d2:	f100 0710 	add.w	r7, r0, #16
   c31d6:	4629      	mov	r1, r5
   c31d8:	42b1      	cmp	r1, r6
   c31da:	d334      	bcc.n	c3246 <rshift+0x96>
   c31dc:	1a9b      	subs	r3, r3, r2
   c31de:	009b      	lsls	r3, r3, #2
   c31e0:	1eea      	subs	r2, r5, #3
   c31e2:	4296      	cmp	r6, r2
   c31e4:	bf38      	it	cc
   c31e6:	2300      	movcc	r3, #0
   c31e8:	4423      	add	r3, r4
   c31ea:	e015      	b.n	c3218 <rshift+0x68>
   c31ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c31f0:	f1c1 0820 	rsb	r8, r1, #32
   c31f4:	40cf      	lsrs	r7, r1
   c31f6:	f105 0e04 	add.w	lr, r5, #4
   c31fa:	46a1      	mov	r9, r4
   c31fc:	4576      	cmp	r6, lr
   c31fe:	46f4      	mov	ip, lr
   c3200:	d815      	bhi.n	c322e <rshift+0x7e>
   c3202:	1a9a      	subs	r2, r3, r2
   c3204:	0092      	lsls	r2, r2, #2
   c3206:	3a04      	subs	r2, #4
   c3208:	3501      	adds	r5, #1
   c320a:	42ae      	cmp	r6, r5
   c320c:	bf38      	it	cc
   c320e:	2200      	movcc	r2, #0
   c3210:	18a3      	adds	r3, r4, r2
   c3212:	50a7      	str	r7, [r4, r2]
   c3214:	b107      	cbz	r7, c3218 <rshift+0x68>
   c3216:	3304      	adds	r3, #4
   c3218:	1b1a      	subs	r2, r3, r4
   c321a:	42a3      	cmp	r3, r4
   c321c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c3220:	bf08      	it	eq
   c3222:	2300      	moveq	r3, #0
   c3224:	6102      	str	r2, [r0, #16]
   c3226:	bf08      	it	eq
   c3228:	6143      	streq	r3, [r0, #20]
   c322a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c322e:	f8dc c000 	ldr.w	ip, [ip]
   c3232:	fa0c fc08 	lsl.w	ip, ip, r8
   c3236:	ea4c 0707 	orr.w	r7, ip, r7
   c323a:	f849 7b04 	str.w	r7, [r9], #4
   c323e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c3242:	40cf      	lsrs	r7, r1
   c3244:	e7da      	b.n	c31fc <rshift+0x4c>
   c3246:	f851 cb04 	ldr.w	ip, [r1], #4
   c324a:	f847 cf04 	str.w	ip, [r7, #4]!
   c324e:	e7c3      	b.n	c31d8 <rshift+0x28>
   c3250:	4623      	mov	r3, r4
   c3252:	e7e1      	b.n	c3218 <rshift+0x68>

000c3254 <__hexdig_fun>:
   c3254:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c3258:	2b09      	cmp	r3, #9
   c325a:	d802      	bhi.n	c3262 <__hexdig_fun+0xe>
   c325c:	3820      	subs	r0, #32
   c325e:	b2c0      	uxtb	r0, r0
   c3260:	4770      	bx	lr
   c3262:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c3266:	2b05      	cmp	r3, #5
   c3268:	d801      	bhi.n	c326e <__hexdig_fun+0x1a>
   c326a:	3847      	subs	r0, #71	; 0x47
   c326c:	e7f7      	b.n	c325e <__hexdig_fun+0xa>
   c326e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c3272:	2b05      	cmp	r3, #5
   c3274:	d801      	bhi.n	c327a <__hexdig_fun+0x26>
   c3276:	3827      	subs	r0, #39	; 0x27
   c3278:	e7f1      	b.n	c325e <__hexdig_fun+0xa>
   c327a:	2000      	movs	r0, #0
   c327c:	4770      	bx	lr
	...

000c3280 <__gethex>:
   c3280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3284:	ed2d 8b02 	vpush	{d8}
   c3288:	b089      	sub	sp, #36	; 0x24
   c328a:	ee08 0a10 	vmov	s16, r0
   c328e:	9304      	str	r3, [sp, #16]
   c3290:	4bb4      	ldr	r3, [pc, #720]	; (c3564 <__gethex+0x2e4>)
   c3292:	681b      	ldr	r3, [r3, #0]
   c3294:	9301      	str	r3, [sp, #4]
   c3296:	4618      	mov	r0, r3
   c3298:	468b      	mov	fp, r1
   c329a:	4690      	mov	r8, r2
   c329c:	f7fe fff3 	bl	c2286 <strlen>
   c32a0:	9b01      	ldr	r3, [sp, #4]
   c32a2:	f8db 2000 	ldr.w	r2, [fp]
   c32a6:	4403      	add	r3, r0
   c32a8:	4682      	mov	sl, r0
   c32aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c32ae:	9305      	str	r3, [sp, #20]
   c32b0:	1c93      	adds	r3, r2, #2
   c32b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c32b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c32ba:	32fe      	adds	r2, #254	; 0xfe
   c32bc:	18d1      	adds	r1, r2, r3
   c32be:	461f      	mov	r7, r3
   c32c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c32c4:	9100      	str	r1, [sp, #0]
   c32c6:	2830      	cmp	r0, #48	; 0x30
   c32c8:	d0f8      	beq.n	c32bc <__gethex+0x3c>
   c32ca:	f7ff ffc3 	bl	c3254 <__hexdig_fun>
   c32ce:	4604      	mov	r4, r0
   c32d0:	2800      	cmp	r0, #0
   c32d2:	d13a      	bne.n	c334a <__gethex+0xca>
   c32d4:	9901      	ldr	r1, [sp, #4]
   c32d6:	4652      	mov	r2, sl
   c32d8:	4638      	mov	r0, r7
   c32da:	f7fe ffef 	bl	c22bc <strncmp>
   c32de:	4605      	mov	r5, r0
   c32e0:	2800      	cmp	r0, #0
   c32e2:	d168      	bne.n	c33b6 <__gethex+0x136>
   c32e4:	f817 000a 	ldrb.w	r0, [r7, sl]
   c32e8:	eb07 060a 	add.w	r6, r7, sl
   c32ec:	f7ff ffb2 	bl	c3254 <__hexdig_fun>
   c32f0:	2800      	cmp	r0, #0
   c32f2:	d062      	beq.n	c33ba <__gethex+0x13a>
   c32f4:	4633      	mov	r3, r6
   c32f6:	7818      	ldrb	r0, [r3, #0]
   c32f8:	2830      	cmp	r0, #48	; 0x30
   c32fa:	461f      	mov	r7, r3
   c32fc:	f103 0301 	add.w	r3, r3, #1
   c3300:	d0f9      	beq.n	c32f6 <__gethex+0x76>
   c3302:	f7ff ffa7 	bl	c3254 <__hexdig_fun>
   c3306:	2301      	movs	r3, #1
   c3308:	fab0 f480 	clz	r4, r0
   c330c:	0964      	lsrs	r4, r4, #5
   c330e:	4635      	mov	r5, r6
   c3310:	9300      	str	r3, [sp, #0]
   c3312:	463a      	mov	r2, r7
   c3314:	4616      	mov	r6, r2
   c3316:	3201      	adds	r2, #1
   c3318:	7830      	ldrb	r0, [r6, #0]
   c331a:	f7ff ff9b 	bl	c3254 <__hexdig_fun>
   c331e:	2800      	cmp	r0, #0
   c3320:	d1f8      	bne.n	c3314 <__gethex+0x94>
   c3322:	9901      	ldr	r1, [sp, #4]
   c3324:	4652      	mov	r2, sl
   c3326:	4630      	mov	r0, r6
   c3328:	f7fe ffc8 	bl	c22bc <strncmp>
   c332c:	b980      	cbnz	r0, c3350 <__gethex+0xd0>
   c332e:	b94d      	cbnz	r5, c3344 <__gethex+0xc4>
   c3330:	eb06 050a 	add.w	r5, r6, sl
   c3334:	462a      	mov	r2, r5
   c3336:	4616      	mov	r6, r2
   c3338:	3201      	adds	r2, #1
   c333a:	7830      	ldrb	r0, [r6, #0]
   c333c:	f7ff ff8a 	bl	c3254 <__hexdig_fun>
   c3340:	2800      	cmp	r0, #0
   c3342:	d1f8      	bne.n	c3336 <__gethex+0xb6>
   c3344:	1bad      	subs	r5, r5, r6
   c3346:	00ad      	lsls	r5, r5, #2
   c3348:	e004      	b.n	c3354 <__gethex+0xd4>
   c334a:	2400      	movs	r4, #0
   c334c:	4625      	mov	r5, r4
   c334e:	e7e0      	b.n	c3312 <__gethex+0x92>
   c3350:	2d00      	cmp	r5, #0
   c3352:	d1f7      	bne.n	c3344 <__gethex+0xc4>
   c3354:	7833      	ldrb	r3, [r6, #0]
   c3356:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c335a:	2b50      	cmp	r3, #80	; 0x50
   c335c:	d13b      	bne.n	c33d6 <__gethex+0x156>
   c335e:	7873      	ldrb	r3, [r6, #1]
   c3360:	2b2b      	cmp	r3, #43	; 0x2b
   c3362:	d02c      	beq.n	c33be <__gethex+0x13e>
   c3364:	2b2d      	cmp	r3, #45	; 0x2d
   c3366:	d02e      	beq.n	c33c6 <__gethex+0x146>
   c3368:	1c71      	adds	r1, r6, #1
   c336a:	f04f 0900 	mov.w	r9, #0
   c336e:	7808      	ldrb	r0, [r1, #0]
   c3370:	f7ff ff70 	bl	c3254 <__hexdig_fun>
   c3374:	1e43      	subs	r3, r0, #1
   c3376:	b2db      	uxtb	r3, r3
   c3378:	2b18      	cmp	r3, #24
   c337a:	d82c      	bhi.n	c33d6 <__gethex+0x156>
   c337c:	f1a0 0210 	sub.w	r2, r0, #16
   c3380:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c3384:	f7ff ff66 	bl	c3254 <__hexdig_fun>
   c3388:	1e43      	subs	r3, r0, #1
   c338a:	b2db      	uxtb	r3, r3
   c338c:	2b18      	cmp	r3, #24
   c338e:	d91d      	bls.n	c33cc <__gethex+0x14c>
   c3390:	f1b9 0f00 	cmp.w	r9, #0
   c3394:	d000      	beq.n	c3398 <__gethex+0x118>
   c3396:	4252      	negs	r2, r2
   c3398:	4415      	add	r5, r2
   c339a:	f8cb 1000 	str.w	r1, [fp]
   c339e:	b1e4      	cbz	r4, c33da <__gethex+0x15a>
   c33a0:	9b00      	ldr	r3, [sp, #0]
   c33a2:	2b00      	cmp	r3, #0
   c33a4:	bf14      	ite	ne
   c33a6:	2700      	movne	r7, #0
   c33a8:	2706      	moveq	r7, #6
   c33aa:	4638      	mov	r0, r7
   c33ac:	b009      	add	sp, #36	; 0x24
   c33ae:	ecbd 8b02 	vpop	{d8}
   c33b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c33b6:	463e      	mov	r6, r7
   c33b8:	4625      	mov	r5, r4
   c33ba:	2401      	movs	r4, #1
   c33bc:	e7ca      	b.n	c3354 <__gethex+0xd4>
   c33be:	f04f 0900 	mov.w	r9, #0
   c33c2:	1cb1      	adds	r1, r6, #2
   c33c4:	e7d3      	b.n	c336e <__gethex+0xee>
   c33c6:	f04f 0901 	mov.w	r9, #1
   c33ca:	e7fa      	b.n	c33c2 <__gethex+0x142>
   c33cc:	230a      	movs	r3, #10
   c33ce:	fb03 0202 	mla	r2, r3, r2, r0
   c33d2:	3a10      	subs	r2, #16
   c33d4:	e7d4      	b.n	c3380 <__gethex+0x100>
   c33d6:	4631      	mov	r1, r6
   c33d8:	e7df      	b.n	c339a <__gethex+0x11a>
   c33da:	1bf3      	subs	r3, r6, r7
   c33dc:	3b01      	subs	r3, #1
   c33de:	4621      	mov	r1, r4
   c33e0:	2b07      	cmp	r3, #7
   c33e2:	dc0b      	bgt.n	c33fc <__gethex+0x17c>
   c33e4:	ee18 0a10 	vmov	r0, s16
   c33e8:	f000 fa68 	bl	c38bc <_Balloc>
   c33ec:	4604      	mov	r4, r0
   c33ee:	b940      	cbnz	r0, c3402 <__gethex+0x182>
   c33f0:	4b5d      	ldr	r3, [pc, #372]	; (c3568 <__gethex+0x2e8>)
   c33f2:	4602      	mov	r2, r0
   c33f4:	21de      	movs	r1, #222	; 0xde
   c33f6:	485d      	ldr	r0, [pc, #372]	; (c356c <__gethex+0x2ec>)
   c33f8:	f7fa f984 	bl	bd704 <__assert_func>
   c33fc:	3101      	adds	r1, #1
   c33fe:	105b      	asrs	r3, r3, #1
   c3400:	e7ee      	b.n	c33e0 <__gethex+0x160>
   c3402:	f100 0914 	add.w	r9, r0, #20
   c3406:	f04f 0b00 	mov.w	fp, #0
   c340a:	f1ca 0301 	rsb	r3, sl, #1
   c340e:	f8cd 9008 	str.w	r9, [sp, #8]
   c3412:	f8cd b000 	str.w	fp, [sp]
   c3416:	9306      	str	r3, [sp, #24]
   c3418:	42b7      	cmp	r7, r6
   c341a:	d340      	bcc.n	c349e <__gethex+0x21e>
   c341c:	9802      	ldr	r0, [sp, #8]
   c341e:	9b00      	ldr	r3, [sp, #0]
   c3420:	f840 3b04 	str.w	r3, [r0], #4
   c3424:	eba0 0009 	sub.w	r0, r0, r9
   c3428:	1080      	asrs	r0, r0, #2
   c342a:	0146      	lsls	r6, r0, #5
   c342c:	6120      	str	r0, [r4, #16]
   c342e:	4618      	mov	r0, r3
   c3430:	f000 fb36 	bl	c3aa0 <__hi0bits>
   c3434:	1a30      	subs	r0, r6, r0
   c3436:	f8d8 6000 	ldr.w	r6, [r8]
   c343a:	42b0      	cmp	r0, r6
   c343c:	dd63      	ble.n	c3506 <__gethex+0x286>
   c343e:	1b87      	subs	r7, r0, r6
   c3440:	4639      	mov	r1, r7
   c3442:	4620      	mov	r0, r4
   c3444:	f000 feda 	bl	c41fc <__any_on>
   c3448:	4682      	mov	sl, r0
   c344a:	b1a8      	cbz	r0, c3478 <__gethex+0x1f8>
   c344c:	1e7b      	subs	r3, r7, #1
   c344e:	1159      	asrs	r1, r3, #5
   c3450:	f003 021f 	and.w	r2, r3, #31
   c3454:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c3458:	f04f 0a01 	mov.w	sl, #1
   c345c:	fa0a f202 	lsl.w	r2, sl, r2
   c3460:	420a      	tst	r2, r1
   c3462:	d009      	beq.n	c3478 <__gethex+0x1f8>
   c3464:	4553      	cmp	r3, sl
   c3466:	dd05      	ble.n	c3474 <__gethex+0x1f4>
   c3468:	1eb9      	subs	r1, r7, #2
   c346a:	4620      	mov	r0, r4
   c346c:	f000 fec6 	bl	c41fc <__any_on>
   c3470:	2800      	cmp	r0, #0
   c3472:	d145      	bne.n	c3500 <__gethex+0x280>
   c3474:	f04f 0a02 	mov.w	sl, #2
   c3478:	4639      	mov	r1, r7
   c347a:	4620      	mov	r0, r4
   c347c:	f7ff fe98 	bl	c31b0 <rshift>
   c3480:	443d      	add	r5, r7
   c3482:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3486:	42ab      	cmp	r3, r5
   c3488:	da4c      	bge.n	c3524 <__gethex+0x2a4>
   c348a:	ee18 0a10 	vmov	r0, s16
   c348e:	4621      	mov	r1, r4
   c3490:	f000 fa54 	bl	c393c <_Bfree>
   c3494:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3496:	2300      	movs	r3, #0
   c3498:	6013      	str	r3, [r2, #0]
   c349a:	27a3      	movs	r7, #163	; 0xa3
   c349c:	e785      	b.n	c33aa <__gethex+0x12a>
   c349e:	1e73      	subs	r3, r6, #1
   c34a0:	9a05      	ldr	r2, [sp, #20]
   c34a2:	9303      	str	r3, [sp, #12]
   c34a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c34a8:	4293      	cmp	r3, r2
   c34aa:	d019      	beq.n	c34e0 <__gethex+0x260>
   c34ac:	f1bb 0f20 	cmp.w	fp, #32
   c34b0:	d107      	bne.n	c34c2 <__gethex+0x242>
   c34b2:	9b02      	ldr	r3, [sp, #8]
   c34b4:	9a00      	ldr	r2, [sp, #0]
   c34b6:	f843 2b04 	str.w	r2, [r3], #4
   c34ba:	9302      	str	r3, [sp, #8]
   c34bc:	2300      	movs	r3, #0
   c34be:	9300      	str	r3, [sp, #0]
   c34c0:	469b      	mov	fp, r3
   c34c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c34c6:	f7ff fec5 	bl	c3254 <__hexdig_fun>
   c34ca:	9b00      	ldr	r3, [sp, #0]
   c34cc:	f000 000f 	and.w	r0, r0, #15
   c34d0:	fa00 f00b 	lsl.w	r0, r0, fp
   c34d4:	4303      	orrs	r3, r0
   c34d6:	9300      	str	r3, [sp, #0]
   c34d8:	f10b 0b04 	add.w	fp, fp, #4
   c34dc:	9b03      	ldr	r3, [sp, #12]
   c34de:	e00d      	b.n	c34fc <__gethex+0x27c>
   c34e0:	9b03      	ldr	r3, [sp, #12]
   c34e2:	9a06      	ldr	r2, [sp, #24]
   c34e4:	4413      	add	r3, r2
   c34e6:	42bb      	cmp	r3, r7
   c34e8:	d3e0      	bcc.n	c34ac <__gethex+0x22c>
   c34ea:	4618      	mov	r0, r3
   c34ec:	9901      	ldr	r1, [sp, #4]
   c34ee:	9307      	str	r3, [sp, #28]
   c34f0:	4652      	mov	r2, sl
   c34f2:	f7fe fee3 	bl	c22bc <strncmp>
   c34f6:	9b07      	ldr	r3, [sp, #28]
   c34f8:	2800      	cmp	r0, #0
   c34fa:	d1d7      	bne.n	c34ac <__gethex+0x22c>
   c34fc:	461e      	mov	r6, r3
   c34fe:	e78b      	b.n	c3418 <__gethex+0x198>
   c3500:	f04f 0a03 	mov.w	sl, #3
   c3504:	e7b8      	b.n	c3478 <__gethex+0x1f8>
   c3506:	da0a      	bge.n	c351e <__gethex+0x29e>
   c3508:	1a37      	subs	r7, r6, r0
   c350a:	4621      	mov	r1, r4
   c350c:	ee18 0a10 	vmov	r0, s16
   c3510:	463a      	mov	r2, r7
   c3512:	f000 fc2f 	bl	c3d74 <__lshift>
   c3516:	1bed      	subs	r5, r5, r7
   c3518:	4604      	mov	r4, r0
   c351a:	f100 0914 	add.w	r9, r0, #20
   c351e:	f04f 0a00 	mov.w	sl, #0
   c3522:	e7ae      	b.n	c3482 <__gethex+0x202>
   c3524:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c3528:	42a8      	cmp	r0, r5
   c352a:	dd72      	ble.n	c3612 <__gethex+0x392>
   c352c:	1b45      	subs	r5, r0, r5
   c352e:	42ae      	cmp	r6, r5
   c3530:	dc36      	bgt.n	c35a0 <__gethex+0x320>
   c3532:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3536:	2b02      	cmp	r3, #2
   c3538:	d02a      	beq.n	c3590 <__gethex+0x310>
   c353a:	2b03      	cmp	r3, #3
   c353c:	d02c      	beq.n	c3598 <__gethex+0x318>
   c353e:	2b01      	cmp	r3, #1
   c3540:	d11c      	bne.n	c357c <__gethex+0x2fc>
   c3542:	42ae      	cmp	r6, r5
   c3544:	d11a      	bne.n	c357c <__gethex+0x2fc>
   c3546:	2e01      	cmp	r6, #1
   c3548:	d112      	bne.n	c3570 <__gethex+0x2f0>
   c354a:	9a04      	ldr	r2, [sp, #16]
   c354c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c3550:	6013      	str	r3, [r2, #0]
   c3552:	2301      	movs	r3, #1
   c3554:	6123      	str	r3, [r4, #16]
   c3556:	f8c9 3000 	str.w	r3, [r9]
   c355a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c355c:	2762      	movs	r7, #98	; 0x62
   c355e:	601c      	str	r4, [r3, #0]
   c3560:	e723      	b.n	c33aa <__gethex+0x12a>
   c3562:	bf00      	nop
   c3564:	000c5f0c 	.word	0x000c5f0c
   c3568:	000c5e99 	.word	0x000c5e99
   c356c:	000c5eaa 	.word	0x000c5eaa
   c3570:	1e71      	subs	r1, r6, #1
   c3572:	4620      	mov	r0, r4
   c3574:	f000 fe42 	bl	c41fc <__any_on>
   c3578:	2800      	cmp	r0, #0
   c357a:	d1e6      	bne.n	c354a <__gethex+0x2ca>
   c357c:	ee18 0a10 	vmov	r0, s16
   c3580:	4621      	mov	r1, r4
   c3582:	f000 f9db 	bl	c393c <_Bfree>
   c3586:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3588:	2300      	movs	r3, #0
   c358a:	6013      	str	r3, [r2, #0]
   c358c:	2750      	movs	r7, #80	; 0x50
   c358e:	e70c      	b.n	c33aa <__gethex+0x12a>
   c3590:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3592:	2b00      	cmp	r3, #0
   c3594:	d1f2      	bne.n	c357c <__gethex+0x2fc>
   c3596:	e7d8      	b.n	c354a <__gethex+0x2ca>
   c3598:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c359a:	2b00      	cmp	r3, #0
   c359c:	d1d5      	bne.n	c354a <__gethex+0x2ca>
   c359e:	e7ed      	b.n	c357c <__gethex+0x2fc>
   c35a0:	1e6f      	subs	r7, r5, #1
   c35a2:	f1ba 0f00 	cmp.w	sl, #0
   c35a6:	d131      	bne.n	c360c <__gethex+0x38c>
   c35a8:	b127      	cbz	r7, c35b4 <__gethex+0x334>
   c35aa:	4639      	mov	r1, r7
   c35ac:	4620      	mov	r0, r4
   c35ae:	f000 fe25 	bl	c41fc <__any_on>
   c35b2:	4682      	mov	sl, r0
   c35b4:	117b      	asrs	r3, r7, #5
   c35b6:	2101      	movs	r1, #1
   c35b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c35bc:	f007 071f 	and.w	r7, r7, #31
   c35c0:	fa01 f707 	lsl.w	r7, r1, r7
   c35c4:	421f      	tst	r7, r3
   c35c6:	4629      	mov	r1, r5
   c35c8:	4620      	mov	r0, r4
   c35ca:	bf18      	it	ne
   c35cc:	f04a 0a02 	orrne.w	sl, sl, #2
   c35d0:	1b76      	subs	r6, r6, r5
   c35d2:	f7ff fded 	bl	c31b0 <rshift>
   c35d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c35da:	2702      	movs	r7, #2
   c35dc:	f1ba 0f00 	cmp.w	sl, #0
   c35e0:	d048      	beq.n	c3674 <__gethex+0x3f4>
   c35e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c35e6:	2b02      	cmp	r3, #2
   c35e8:	d015      	beq.n	c3616 <__gethex+0x396>
   c35ea:	2b03      	cmp	r3, #3
   c35ec:	d017      	beq.n	c361e <__gethex+0x39e>
   c35ee:	2b01      	cmp	r3, #1
   c35f0:	d109      	bne.n	c3606 <__gethex+0x386>
   c35f2:	f01a 0f02 	tst.w	sl, #2
   c35f6:	d006      	beq.n	c3606 <__gethex+0x386>
   c35f8:	f8d9 0000 	ldr.w	r0, [r9]
   c35fc:	ea4a 0a00 	orr.w	sl, sl, r0
   c3600:	f01a 0f01 	tst.w	sl, #1
   c3604:	d10e      	bne.n	c3624 <__gethex+0x3a4>
   c3606:	f047 0710 	orr.w	r7, r7, #16
   c360a:	e033      	b.n	c3674 <__gethex+0x3f4>
   c360c:	f04f 0a01 	mov.w	sl, #1
   c3610:	e7d0      	b.n	c35b4 <__gethex+0x334>
   c3612:	2701      	movs	r7, #1
   c3614:	e7e2      	b.n	c35dc <__gethex+0x35c>
   c3616:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3618:	f1c3 0301 	rsb	r3, r3, #1
   c361c:	9315      	str	r3, [sp, #84]	; 0x54
   c361e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3620:	2b00      	cmp	r3, #0
   c3622:	d0f0      	beq.n	c3606 <__gethex+0x386>
   c3624:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c3628:	f104 0314 	add.w	r3, r4, #20
   c362c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c3630:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c3634:	f04f 0c00 	mov.w	ip, #0
   c3638:	4618      	mov	r0, r3
   c363a:	f853 2b04 	ldr.w	r2, [r3], #4
   c363e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c3642:	d01c      	beq.n	c367e <__gethex+0x3fe>
   c3644:	3201      	adds	r2, #1
   c3646:	6002      	str	r2, [r0, #0]
   c3648:	2f02      	cmp	r7, #2
   c364a:	f104 0314 	add.w	r3, r4, #20
   c364e:	d13f      	bne.n	c36d0 <__gethex+0x450>
   c3650:	f8d8 2000 	ldr.w	r2, [r8]
   c3654:	3a01      	subs	r2, #1
   c3656:	42b2      	cmp	r2, r6
   c3658:	d10a      	bne.n	c3670 <__gethex+0x3f0>
   c365a:	1171      	asrs	r1, r6, #5
   c365c:	2201      	movs	r2, #1
   c365e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c3662:	f006 061f 	and.w	r6, r6, #31
   c3666:	fa02 f606 	lsl.w	r6, r2, r6
   c366a:	421e      	tst	r6, r3
   c366c:	bf18      	it	ne
   c366e:	4617      	movne	r7, r2
   c3670:	f047 0720 	orr.w	r7, r7, #32
   c3674:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3676:	601c      	str	r4, [r3, #0]
   c3678:	9b04      	ldr	r3, [sp, #16]
   c367a:	601d      	str	r5, [r3, #0]
   c367c:	e695      	b.n	c33aa <__gethex+0x12a>
   c367e:	4299      	cmp	r1, r3
   c3680:	f843 cc04 	str.w	ip, [r3, #-4]
   c3684:	d8d8      	bhi.n	c3638 <__gethex+0x3b8>
   c3686:	68a3      	ldr	r3, [r4, #8]
   c3688:	459b      	cmp	fp, r3
   c368a:	db19      	blt.n	c36c0 <__gethex+0x440>
   c368c:	6861      	ldr	r1, [r4, #4]
   c368e:	ee18 0a10 	vmov	r0, s16
   c3692:	3101      	adds	r1, #1
   c3694:	f000 f912 	bl	c38bc <_Balloc>
   c3698:	4681      	mov	r9, r0
   c369a:	b918      	cbnz	r0, c36a4 <__gethex+0x424>
   c369c:	4b1a      	ldr	r3, [pc, #104]	; (c3708 <__gethex+0x488>)
   c369e:	4602      	mov	r2, r0
   c36a0:	2184      	movs	r1, #132	; 0x84
   c36a2:	e6a8      	b.n	c33f6 <__gethex+0x176>
   c36a4:	6922      	ldr	r2, [r4, #16]
   c36a6:	3202      	adds	r2, #2
   c36a8:	f104 010c 	add.w	r1, r4, #12
   c36ac:	0092      	lsls	r2, r2, #2
   c36ae:	300c      	adds	r0, #12
   c36b0:	f7fe fd36 	bl	c2120 <memcpy>
   c36b4:	4621      	mov	r1, r4
   c36b6:	ee18 0a10 	vmov	r0, s16
   c36ba:	f000 f93f 	bl	c393c <_Bfree>
   c36be:	464c      	mov	r4, r9
   c36c0:	6923      	ldr	r3, [r4, #16]
   c36c2:	1c5a      	adds	r2, r3, #1
   c36c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c36c8:	6122      	str	r2, [r4, #16]
   c36ca:	2201      	movs	r2, #1
   c36cc:	615a      	str	r2, [r3, #20]
   c36ce:	e7bb      	b.n	c3648 <__gethex+0x3c8>
   c36d0:	6922      	ldr	r2, [r4, #16]
   c36d2:	455a      	cmp	r2, fp
   c36d4:	dd0b      	ble.n	c36ee <__gethex+0x46e>
   c36d6:	2101      	movs	r1, #1
   c36d8:	4620      	mov	r0, r4
   c36da:	f7ff fd69 	bl	c31b0 <rshift>
   c36de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c36e2:	3501      	adds	r5, #1
   c36e4:	42ab      	cmp	r3, r5
   c36e6:	f6ff aed0 	blt.w	c348a <__gethex+0x20a>
   c36ea:	2701      	movs	r7, #1
   c36ec:	e7c0      	b.n	c3670 <__gethex+0x3f0>
   c36ee:	f016 061f 	ands.w	r6, r6, #31
   c36f2:	d0fa      	beq.n	c36ea <__gethex+0x46a>
   c36f4:	4453      	add	r3, sl
   c36f6:	f1c6 0620 	rsb	r6, r6, #32
   c36fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c36fe:	f000 f9cf 	bl	c3aa0 <__hi0bits>
   c3702:	42b0      	cmp	r0, r6
   c3704:	dbe7      	blt.n	c36d6 <__gethex+0x456>
   c3706:	e7f0      	b.n	c36ea <__gethex+0x46a>
   c3708:	000c5e99 	.word	0x000c5e99

000c370c <L_shift>:
   c370c:	f1c2 0208 	rsb	r2, r2, #8
   c3710:	0092      	lsls	r2, r2, #2
   c3712:	b570      	push	{r4, r5, r6, lr}
   c3714:	f1c2 0620 	rsb	r6, r2, #32
   c3718:	6843      	ldr	r3, [r0, #4]
   c371a:	6804      	ldr	r4, [r0, #0]
   c371c:	fa03 f506 	lsl.w	r5, r3, r6
   c3720:	432c      	orrs	r4, r5
   c3722:	40d3      	lsrs	r3, r2
   c3724:	6004      	str	r4, [r0, #0]
   c3726:	f840 3f04 	str.w	r3, [r0, #4]!
   c372a:	4288      	cmp	r0, r1
   c372c:	d3f4      	bcc.n	c3718 <L_shift+0xc>
   c372e:	bd70      	pop	{r4, r5, r6, pc}

000c3730 <__match>:
   c3730:	b530      	push	{r4, r5, lr}
   c3732:	6803      	ldr	r3, [r0, #0]
   c3734:	3301      	adds	r3, #1
   c3736:	f811 4b01 	ldrb.w	r4, [r1], #1
   c373a:	b914      	cbnz	r4, c3742 <__match+0x12>
   c373c:	6003      	str	r3, [r0, #0]
   c373e:	2001      	movs	r0, #1
   c3740:	bd30      	pop	{r4, r5, pc}
   c3742:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3746:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c374a:	2d19      	cmp	r5, #25
   c374c:	bf98      	it	ls
   c374e:	3220      	addls	r2, #32
   c3750:	42a2      	cmp	r2, r4
   c3752:	d0f0      	beq.n	c3736 <__match+0x6>
   c3754:	2000      	movs	r0, #0
   c3756:	e7f3      	b.n	c3740 <__match+0x10>

000c3758 <__hexnan>:
   c3758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c375c:	680b      	ldr	r3, [r1, #0]
   c375e:	115e      	asrs	r6, r3, #5
   c3760:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c3764:	f013 031f 	ands.w	r3, r3, #31
   c3768:	b087      	sub	sp, #28
   c376a:	bf18      	it	ne
   c376c:	3604      	addne	r6, #4
   c376e:	2500      	movs	r5, #0
   c3770:	1f37      	subs	r7, r6, #4
   c3772:	4690      	mov	r8, r2
   c3774:	6802      	ldr	r2, [r0, #0]
   c3776:	9301      	str	r3, [sp, #4]
   c3778:	4682      	mov	sl, r0
   c377a:	f846 5c04 	str.w	r5, [r6, #-4]
   c377e:	46b9      	mov	r9, r7
   c3780:	463c      	mov	r4, r7
   c3782:	9502      	str	r5, [sp, #8]
   c3784:	46ab      	mov	fp, r5
   c3786:	7851      	ldrb	r1, [r2, #1]
   c3788:	1c53      	adds	r3, r2, #1
   c378a:	9303      	str	r3, [sp, #12]
   c378c:	b341      	cbz	r1, c37e0 <__hexnan+0x88>
   c378e:	4608      	mov	r0, r1
   c3790:	9205      	str	r2, [sp, #20]
   c3792:	9104      	str	r1, [sp, #16]
   c3794:	f7ff fd5e 	bl	c3254 <__hexdig_fun>
   c3798:	2800      	cmp	r0, #0
   c379a:	d14f      	bne.n	c383c <__hexnan+0xe4>
   c379c:	9904      	ldr	r1, [sp, #16]
   c379e:	9a05      	ldr	r2, [sp, #20]
   c37a0:	2920      	cmp	r1, #32
   c37a2:	d818      	bhi.n	c37d6 <__hexnan+0x7e>
   c37a4:	9b02      	ldr	r3, [sp, #8]
   c37a6:	459b      	cmp	fp, r3
   c37a8:	dd13      	ble.n	c37d2 <__hexnan+0x7a>
   c37aa:	454c      	cmp	r4, r9
   c37ac:	d206      	bcs.n	c37bc <__hexnan+0x64>
   c37ae:	2d07      	cmp	r5, #7
   c37b0:	dc04      	bgt.n	c37bc <__hexnan+0x64>
   c37b2:	462a      	mov	r2, r5
   c37b4:	4649      	mov	r1, r9
   c37b6:	4620      	mov	r0, r4
   c37b8:	f7ff ffa8 	bl	c370c <L_shift>
   c37bc:	4544      	cmp	r4, r8
   c37be:	d950      	bls.n	c3862 <__hexnan+0x10a>
   c37c0:	2300      	movs	r3, #0
   c37c2:	f1a4 0904 	sub.w	r9, r4, #4
   c37c6:	f844 3c04 	str.w	r3, [r4, #-4]
   c37ca:	f8cd b008 	str.w	fp, [sp, #8]
   c37ce:	464c      	mov	r4, r9
   c37d0:	461d      	mov	r5, r3
   c37d2:	9a03      	ldr	r2, [sp, #12]
   c37d4:	e7d7      	b.n	c3786 <__hexnan+0x2e>
   c37d6:	2929      	cmp	r1, #41	; 0x29
   c37d8:	d156      	bne.n	c3888 <__hexnan+0x130>
   c37da:	3202      	adds	r2, #2
   c37dc:	f8ca 2000 	str.w	r2, [sl]
   c37e0:	f1bb 0f00 	cmp.w	fp, #0
   c37e4:	d050      	beq.n	c3888 <__hexnan+0x130>
   c37e6:	454c      	cmp	r4, r9
   c37e8:	d206      	bcs.n	c37f8 <__hexnan+0xa0>
   c37ea:	2d07      	cmp	r5, #7
   c37ec:	dc04      	bgt.n	c37f8 <__hexnan+0xa0>
   c37ee:	462a      	mov	r2, r5
   c37f0:	4649      	mov	r1, r9
   c37f2:	4620      	mov	r0, r4
   c37f4:	f7ff ff8a 	bl	c370c <L_shift>
   c37f8:	4544      	cmp	r4, r8
   c37fa:	d934      	bls.n	c3866 <__hexnan+0x10e>
   c37fc:	f1a8 0204 	sub.w	r2, r8, #4
   c3800:	4623      	mov	r3, r4
   c3802:	f853 1b04 	ldr.w	r1, [r3], #4
   c3806:	f842 1f04 	str.w	r1, [r2, #4]!
   c380a:	429f      	cmp	r7, r3
   c380c:	d2f9      	bcs.n	c3802 <__hexnan+0xaa>
   c380e:	1b3b      	subs	r3, r7, r4
   c3810:	f023 0303 	bic.w	r3, r3, #3
   c3814:	3304      	adds	r3, #4
   c3816:	3401      	adds	r4, #1
   c3818:	3e03      	subs	r6, #3
   c381a:	42b4      	cmp	r4, r6
   c381c:	bf88      	it	hi
   c381e:	2304      	movhi	r3, #4
   c3820:	4443      	add	r3, r8
   c3822:	2200      	movs	r2, #0
   c3824:	f843 2b04 	str.w	r2, [r3], #4
   c3828:	429f      	cmp	r7, r3
   c382a:	d2fb      	bcs.n	c3824 <__hexnan+0xcc>
   c382c:	683b      	ldr	r3, [r7, #0]
   c382e:	b91b      	cbnz	r3, c3838 <__hexnan+0xe0>
   c3830:	4547      	cmp	r7, r8
   c3832:	d127      	bne.n	c3884 <__hexnan+0x12c>
   c3834:	2301      	movs	r3, #1
   c3836:	603b      	str	r3, [r7, #0]
   c3838:	2005      	movs	r0, #5
   c383a:	e026      	b.n	c388a <__hexnan+0x132>
   c383c:	3501      	adds	r5, #1
   c383e:	2d08      	cmp	r5, #8
   c3840:	f10b 0b01 	add.w	fp, fp, #1
   c3844:	dd06      	ble.n	c3854 <__hexnan+0xfc>
   c3846:	4544      	cmp	r4, r8
   c3848:	d9c3      	bls.n	c37d2 <__hexnan+0x7a>
   c384a:	2300      	movs	r3, #0
   c384c:	f844 3c04 	str.w	r3, [r4, #-4]
   c3850:	2501      	movs	r5, #1
   c3852:	3c04      	subs	r4, #4
   c3854:	6822      	ldr	r2, [r4, #0]
   c3856:	f000 000f 	and.w	r0, r0, #15
   c385a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c385e:	6022      	str	r2, [r4, #0]
   c3860:	e7b7      	b.n	c37d2 <__hexnan+0x7a>
   c3862:	2508      	movs	r5, #8
   c3864:	e7b5      	b.n	c37d2 <__hexnan+0x7a>
   c3866:	9b01      	ldr	r3, [sp, #4]
   c3868:	2b00      	cmp	r3, #0
   c386a:	d0df      	beq.n	c382c <__hexnan+0xd4>
   c386c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3870:	f1c3 0320 	rsb	r3, r3, #32
   c3874:	fa22 f303 	lsr.w	r3, r2, r3
   c3878:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c387c:	401a      	ands	r2, r3
   c387e:	f846 2c04 	str.w	r2, [r6, #-4]
   c3882:	e7d3      	b.n	c382c <__hexnan+0xd4>
   c3884:	3f04      	subs	r7, #4
   c3886:	e7d1      	b.n	c382c <__hexnan+0xd4>
   c3888:	2004      	movs	r0, #4
   c388a:	b007      	add	sp, #28
   c388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3890 <__retarget_lock_acquire_recursive>:
   c3890:	4770      	bx	lr

000c3892 <__retarget_lock_release>:
   c3892:	4770      	bx	lr

000c3894 <__retarget_lock_release_recursive>:
   c3894:	4770      	bx	lr

000c3896 <__ascii_mbtowc>:
   c3896:	b082      	sub	sp, #8
   c3898:	b901      	cbnz	r1, c389c <__ascii_mbtowc+0x6>
   c389a:	a901      	add	r1, sp, #4
   c389c:	b142      	cbz	r2, c38b0 <__ascii_mbtowc+0x1a>
   c389e:	b14b      	cbz	r3, c38b4 <__ascii_mbtowc+0x1e>
   c38a0:	7813      	ldrb	r3, [r2, #0]
   c38a2:	600b      	str	r3, [r1, #0]
   c38a4:	7812      	ldrb	r2, [r2, #0]
   c38a6:	1e10      	subs	r0, r2, #0
   c38a8:	bf18      	it	ne
   c38aa:	2001      	movne	r0, #1
   c38ac:	b002      	add	sp, #8
   c38ae:	4770      	bx	lr
   c38b0:	4610      	mov	r0, r2
   c38b2:	e7fb      	b.n	c38ac <__ascii_mbtowc+0x16>
   c38b4:	f06f 0001 	mvn.w	r0, #1
   c38b8:	e7f8      	b.n	c38ac <__ascii_mbtowc+0x16>
	...

000c38bc <_Balloc>:
   c38bc:	b570      	push	{r4, r5, r6, lr}
   c38be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c38c0:	4604      	mov	r4, r0
   c38c2:	460d      	mov	r5, r1
   c38c4:	b976      	cbnz	r6, c38e4 <_Balloc+0x28>
   c38c6:	2010      	movs	r0, #16
   c38c8:	f7f9 fed4 	bl	bd674 <malloc>
   c38cc:	4602      	mov	r2, r0
   c38ce:	6260      	str	r0, [r4, #36]	; 0x24
   c38d0:	b920      	cbnz	r0, c38dc <_Balloc+0x20>
   c38d2:	4b18      	ldr	r3, [pc, #96]	; (c3934 <_Balloc+0x78>)
   c38d4:	4818      	ldr	r0, [pc, #96]	; (c3938 <_Balloc+0x7c>)
   c38d6:	2166      	movs	r1, #102	; 0x66
   c38d8:	f7f9 ff14 	bl	bd704 <__assert_func>
   c38dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c38e0:	6006      	str	r6, [r0, #0]
   c38e2:	60c6      	str	r6, [r0, #12]
   c38e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c38e6:	68f3      	ldr	r3, [r6, #12]
   c38e8:	b183      	cbz	r3, c390c <_Balloc+0x50>
   c38ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c38ec:	68db      	ldr	r3, [r3, #12]
   c38ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c38f2:	b9b8      	cbnz	r0, c3924 <_Balloc+0x68>
   c38f4:	2101      	movs	r1, #1
   c38f6:	fa01 f605 	lsl.w	r6, r1, r5
   c38fa:	1d72      	adds	r2, r6, #5
   c38fc:	0092      	lsls	r2, r2, #2
   c38fe:	4620      	mov	r0, r4
   c3900:	f000 fc9d 	bl	c423e <_calloc_r>
   c3904:	b160      	cbz	r0, c3920 <_Balloc+0x64>
   c3906:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c390a:	e00e      	b.n	c392a <_Balloc+0x6e>
   c390c:	2221      	movs	r2, #33	; 0x21
   c390e:	2104      	movs	r1, #4
   c3910:	4620      	mov	r0, r4
   c3912:	f000 fc94 	bl	c423e <_calloc_r>
   c3916:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c3918:	60f0      	str	r0, [r6, #12]
   c391a:	68db      	ldr	r3, [r3, #12]
   c391c:	2b00      	cmp	r3, #0
   c391e:	d1e4      	bne.n	c38ea <_Balloc+0x2e>
   c3920:	2000      	movs	r0, #0
   c3922:	bd70      	pop	{r4, r5, r6, pc}
   c3924:	6802      	ldr	r2, [r0, #0]
   c3926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c392a:	2300      	movs	r3, #0
   c392c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c3930:	e7f7      	b.n	c3922 <_Balloc+0x66>
   c3932:	bf00      	nop
   c3934:	000c5cc5 	.word	0x000c5cc5
   c3938:	000c5f1e 	.word	0x000c5f1e

000c393c <_Bfree>:
   c393c:	b570      	push	{r4, r5, r6, lr}
   c393e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3940:	4605      	mov	r5, r0
   c3942:	460c      	mov	r4, r1
   c3944:	b976      	cbnz	r6, c3964 <_Bfree+0x28>
   c3946:	2010      	movs	r0, #16
   c3948:	f7f9 fe94 	bl	bd674 <malloc>
   c394c:	4602      	mov	r2, r0
   c394e:	6268      	str	r0, [r5, #36]	; 0x24
   c3950:	b920      	cbnz	r0, c395c <_Bfree+0x20>
   c3952:	4b09      	ldr	r3, [pc, #36]	; (c3978 <_Bfree+0x3c>)
   c3954:	4809      	ldr	r0, [pc, #36]	; (c397c <_Bfree+0x40>)
   c3956:	218a      	movs	r1, #138	; 0x8a
   c3958:	f7f9 fed4 	bl	bd704 <__assert_func>
   c395c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3960:	6006      	str	r6, [r0, #0]
   c3962:	60c6      	str	r6, [r0, #12]
   c3964:	b13c      	cbz	r4, c3976 <_Bfree+0x3a>
   c3966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c3968:	6862      	ldr	r2, [r4, #4]
   c396a:	68db      	ldr	r3, [r3, #12]
   c396c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c3970:	6021      	str	r1, [r4, #0]
   c3972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c3976:	bd70      	pop	{r4, r5, r6, pc}
   c3978:	000c5cc5 	.word	0x000c5cc5
   c397c:	000c5f1e 	.word	0x000c5f1e

000c3980 <__multadd>:
   c3980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c3984:	690d      	ldr	r5, [r1, #16]
   c3986:	4607      	mov	r7, r0
   c3988:	460c      	mov	r4, r1
   c398a:	461e      	mov	r6, r3
   c398c:	f101 0c14 	add.w	ip, r1, #20
   c3990:	2000      	movs	r0, #0
   c3992:	f8dc 3000 	ldr.w	r3, [ip]
   c3996:	b299      	uxth	r1, r3
   c3998:	fb02 6101 	mla	r1, r2, r1, r6
   c399c:	0c1e      	lsrs	r6, r3, #16
   c399e:	0c0b      	lsrs	r3, r1, #16
   c39a0:	fb02 3306 	mla	r3, r2, r6, r3
   c39a4:	b289      	uxth	r1, r1
   c39a6:	3001      	adds	r0, #1
   c39a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c39ac:	4285      	cmp	r5, r0
   c39ae:	f84c 1b04 	str.w	r1, [ip], #4
   c39b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c39b6:	dcec      	bgt.n	c3992 <__multadd+0x12>
   c39b8:	b30e      	cbz	r6, c39fe <__multadd+0x7e>
   c39ba:	68a3      	ldr	r3, [r4, #8]
   c39bc:	42ab      	cmp	r3, r5
   c39be:	dc19      	bgt.n	c39f4 <__multadd+0x74>
   c39c0:	6861      	ldr	r1, [r4, #4]
   c39c2:	4638      	mov	r0, r7
   c39c4:	3101      	adds	r1, #1
   c39c6:	f7ff ff79 	bl	c38bc <_Balloc>
   c39ca:	4680      	mov	r8, r0
   c39cc:	b928      	cbnz	r0, c39da <__multadd+0x5a>
   c39ce:	4602      	mov	r2, r0
   c39d0:	4b0c      	ldr	r3, [pc, #48]	; (c3a04 <__multadd+0x84>)
   c39d2:	480d      	ldr	r0, [pc, #52]	; (c3a08 <__multadd+0x88>)
   c39d4:	21b5      	movs	r1, #181	; 0xb5
   c39d6:	f7f9 fe95 	bl	bd704 <__assert_func>
   c39da:	6922      	ldr	r2, [r4, #16]
   c39dc:	3202      	adds	r2, #2
   c39de:	f104 010c 	add.w	r1, r4, #12
   c39e2:	0092      	lsls	r2, r2, #2
   c39e4:	300c      	adds	r0, #12
   c39e6:	f7fe fb9b 	bl	c2120 <memcpy>
   c39ea:	4621      	mov	r1, r4
   c39ec:	4638      	mov	r0, r7
   c39ee:	f7ff ffa5 	bl	c393c <_Bfree>
   c39f2:	4644      	mov	r4, r8
   c39f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c39f8:	3501      	adds	r5, #1
   c39fa:	615e      	str	r6, [r3, #20]
   c39fc:	6125      	str	r5, [r4, #16]
   c39fe:	4620      	mov	r0, r4
   c3a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c3a04:	000c5e99 	.word	0x000c5e99
   c3a08:	000c5f1e 	.word	0x000c5f1e

000c3a0c <__s2b>:
   c3a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3a10:	460c      	mov	r4, r1
   c3a12:	4615      	mov	r5, r2
   c3a14:	461f      	mov	r7, r3
   c3a16:	2209      	movs	r2, #9
   c3a18:	3308      	adds	r3, #8
   c3a1a:	4606      	mov	r6, r0
   c3a1c:	fb93 f3f2 	sdiv	r3, r3, r2
   c3a20:	2100      	movs	r1, #0
   c3a22:	2201      	movs	r2, #1
   c3a24:	429a      	cmp	r2, r3
   c3a26:	db09      	blt.n	c3a3c <__s2b+0x30>
   c3a28:	4630      	mov	r0, r6
   c3a2a:	f7ff ff47 	bl	c38bc <_Balloc>
   c3a2e:	b940      	cbnz	r0, c3a42 <__s2b+0x36>
   c3a30:	4602      	mov	r2, r0
   c3a32:	4b19      	ldr	r3, [pc, #100]	; (c3a98 <__s2b+0x8c>)
   c3a34:	4819      	ldr	r0, [pc, #100]	; (c3a9c <__s2b+0x90>)
   c3a36:	21ce      	movs	r1, #206	; 0xce
   c3a38:	f7f9 fe64 	bl	bd704 <__assert_func>
   c3a3c:	0052      	lsls	r2, r2, #1
   c3a3e:	3101      	adds	r1, #1
   c3a40:	e7f0      	b.n	c3a24 <__s2b+0x18>
   c3a42:	9b08      	ldr	r3, [sp, #32]
   c3a44:	6143      	str	r3, [r0, #20]
   c3a46:	2d09      	cmp	r5, #9
   c3a48:	f04f 0301 	mov.w	r3, #1
   c3a4c:	6103      	str	r3, [r0, #16]
   c3a4e:	dd16      	ble.n	c3a7e <__s2b+0x72>
   c3a50:	f104 0909 	add.w	r9, r4, #9
   c3a54:	46c8      	mov	r8, r9
   c3a56:	442c      	add	r4, r5
   c3a58:	f818 3b01 	ldrb.w	r3, [r8], #1
   c3a5c:	4601      	mov	r1, r0
   c3a5e:	3b30      	subs	r3, #48	; 0x30
   c3a60:	220a      	movs	r2, #10
   c3a62:	4630      	mov	r0, r6
   c3a64:	f7ff ff8c 	bl	c3980 <__multadd>
   c3a68:	45a0      	cmp	r8, r4
   c3a6a:	d1f5      	bne.n	c3a58 <__s2b+0x4c>
   c3a6c:	f1a5 0408 	sub.w	r4, r5, #8
   c3a70:	444c      	add	r4, r9
   c3a72:	1b2d      	subs	r5, r5, r4
   c3a74:	1963      	adds	r3, r4, r5
   c3a76:	42bb      	cmp	r3, r7
   c3a78:	db04      	blt.n	c3a84 <__s2b+0x78>
   c3a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3a7e:	340a      	adds	r4, #10
   c3a80:	2509      	movs	r5, #9
   c3a82:	e7f6      	b.n	c3a72 <__s2b+0x66>
   c3a84:	f814 3b01 	ldrb.w	r3, [r4], #1
   c3a88:	4601      	mov	r1, r0
   c3a8a:	3b30      	subs	r3, #48	; 0x30
   c3a8c:	220a      	movs	r2, #10
   c3a8e:	4630      	mov	r0, r6
   c3a90:	f7ff ff76 	bl	c3980 <__multadd>
   c3a94:	e7ee      	b.n	c3a74 <__s2b+0x68>
   c3a96:	bf00      	nop
   c3a98:	000c5e99 	.word	0x000c5e99
   c3a9c:	000c5f1e 	.word	0x000c5f1e

000c3aa0 <__hi0bits>:
   c3aa0:	0c03      	lsrs	r3, r0, #16
   c3aa2:	041b      	lsls	r3, r3, #16
   c3aa4:	b9d3      	cbnz	r3, c3adc <__hi0bits+0x3c>
   c3aa6:	0400      	lsls	r0, r0, #16
   c3aa8:	2310      	movs	r3, #16
   c3aaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c3aae:	bf04      	itt	eq
   c3ab0:	0200      	lsleq	r0, r0, #8
   c3ab2:	3308      	addeq	r3, #8
   c3ab4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c3ab8:	bf04      	itt	eq
   c3aba:	0100      	lsleq	r0, r0, #4
   c3abc:	3304      	addeq	r3, #4
   c3abe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c3ac2:	bf04      	itt	eq
   c3ac4:	0080      	lsleq	r0, r0, #2
   c3ac6:	3302      	addeq	r3, #2
   c3ac8:	2800      	cmp	r0, #0
   c3aca:	db05      	blt.n	c3ad8 <__hi0bits+0x38>
   c3acc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c3ad0:	f103 0301 	add.w	r3, r3, #1
   c3ad4:	bf08      	it	eq
   c3ad6:	2320      	moveq	r3, #32
   c3ad8:	4618      	mov	r0, r3
   c3ada:	4770      	bx	lr
   c3adc:	2300      	movs	r3, #0
   c3ade:	e7e4      	b.n	c3aaa <__hi0bits+0xa>

000c3ae0 <__lo0bits>:
   c3ae0:	6803      	ldr	r3, [r0, #0]
   c3ae2:	f013 0207 	ands.w	r2, r3, #7
   c3ae6:	4601      	mov	r1, r0
   c3ae8:	d00b      	beq.n	c3b02 <__lo0bits+0x22>
   c3aea:	07da      	lsls	r2, r3, #31
   c3aec:	d423      	bmi.n	c3b36 <__lo0bits+0x56>
   c3aee:	0798      	lsls	r0, r3, #30
   c3af0:	bf49      	itett	mi
   c3af2:	085b      	lsrmi	r3, r3, #1
   c3af4:	089b      	lsrpl	r3, r3, #2
   c3af6:	2001      	movmi	r0, #1
   c3af8:	600b      	strmi	r3, [r1, #0]
   c3afa:	bf5c      	itt	pl
   c3afc:	600b      	strpl	r3, [r1, #0]
   c3afe:	2002      	movpl	r0, #2
   c3b00:	4770      	bx	lr
   c3b02:	b298      	uxth	r0, r3
   c3b04:	b9a8      	cbnz	r0, c3b32 <__lo0bits+0x52>
   c3b06:	0c1b      	lsrs	r3, r3, #16
   c3b08:	2010      	movs	r0, #16
   c3b0a:	b2da      	uxtb	r2, r3
   c3b0c:	b90a      	cbnz	r2, c3b12 <__lo0bits+0x32>
   c3b0e:	3008      	adds	r0, #8
   c3b10:	0a1b      	lsrs	r3, r3, #8
   c3b12:	071a      	lsls	r2, r3, #28
   c3b14:	bf04      	itt	eq
   c3b16:	091b      	lsreq	r3, r3, #4
   c3b18:	3004      	addeq	r0, #4
   c3b1a:	079a      	lsls	r2, r3, #30
   c3b1c:	bf04      	itt	eq
   c3b1e:	089b      	lsreq	r3, r3, #2
   c3b20:	3002      	addeq	r0, #2
   c3b22:	07da      	lsls	r2, r3, #31
   c3b24:	d403      	bmi.n	c3b2e <__lo0bits+0x4e>
   c3b26:	085b      	lsrs	r3, r3, #1
   c3b28:	f100 0001 	add.w	r0, r0, #1
   c3b2c:	d005      	beq.n	c3b3a <__lo0bits+0x5a>
   c3b2e:	600b      	str	r3, [r1, #0]
   c3b30:	4770      	bx	lr
   c3b32:	4610      	mov	r0, r2
   c3b34:	e7e9      	b.n	c3b0a <__lo0bits+0x2a>
   c3b36:	2000      	movs	r0, #0
   c3b38:	4770      	bx	lr
   c3b3a:	2020      	movs	r0, #32
   c3b3c:	4770      	bx	lr
	...

000c3b40 <__i2b>:
   c3b40:	b510      	push	{r4, lr}
   c3b42:	460c      	mov	r4, r1
   c3b44:	2101      	movs	r1, #1
   c3b46:	f7ff feb9 	bl	c38bc <_Balloc>
   c3b4a:	4602      	mov	r2, r0
   c3b4c:	b928      	cbnz	r0, c3b5a <__i2b+0x1a>
   c3b4e:	4b05      	ldr	r3, [pc, #20]	; (c3b64 <__i2b+0x24>)
   c3b50:	4805      	ldr	r0, [pc, #20]	; (c3b68 <__i2b+0x28>)
   c3b52:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c3b56:	f7f9 fdd5 	bl	bd704 <__assert_func>
   c3b5a:	2301      	movs	r3, #1
   c3b5c:	6144      	str	r4, [r0, #20]
   c3b5e:	6103      	str	r3, [r0, #16]
   c3b60:	bd10      	pop	{r4, pc}
   c3b62:	bf00      	nop
   c3b64:	000c5e99 	.word	0x000c5e99
   c3b68:	000c5f1e 	.word	0x000c5f1e

000c3b6c <__multiply>:
   c3b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3b70:	4691      	mov	r9, r2
   c3b72:	690a      	ldr	r2, [r1, #16]
   c3b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c3b78:	429a      	cmp	r2, r3
   c3b7a:	bfb8      	it	lt
   c3b7c:	460b      	movlt	r3, r1
   c3b7e:	460c      	mov	r4, r1
   c3b80:	bfbc      	itt	lt
   c3b82:	464c      	movlt	r4, r9
   c3b84:	4699      	movlt	r9, r3
   c3b86:	6927      	ldr	r7, [r4, #16]
   c3b88:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c3b8c:	68a3      	ldr	r3, [r4, #8]
   c3b8e:	6861      	ldr	r1, [r4, #4]
   c3b90:	eb07 060a 	add.w	r6, r7, sl
   c3b94:	42b3      	cmp	r3, r6
   c3b96:	b085      	sub	sp, #20
   c3b98:	bfb8      	it	lt
   c3b9a:	3101      	addlt	r1, #1
   c3b9c:	f7ff fe8e 	bl	c38bc <_Balloc>
   c3ba0:	b930      	cbnz	r0, c3bb0 <__multiply+0x44>
   c3ba2:	4602      	mov	r2, r0
   c3ba4:	4b44      	ldr	r3, [pc, #272]	; (c3cb8 <__multiply+0x14c>)
   c3ba6:	4845      	ldr	r0, [pc, #276]	; (c3cbc <__multiply+0x150>)
   c3ba8:	f240 115d 	movw	r1, #349	; 0x15d
   c3bac:	f7f9 fdaa 	bl	bd704 <__assert_func>
   c3bb0:	f100 0514 	add.w	r5, r0, #20
   c3bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c3bb8:	462b      	mov	r3, r5
   c3bba:	2200      	movs	r2, #0
   c3bbc:	4543      	cmp	r3, r8
   c3bbe:	d321      	bcc.n	c3c04 <__multiply+0x98>
   c3bc0:	f104 0314 	add.w	r3, r4, #20
   c3bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c3bc8:	f109 0314 	add.w	r3, r9, #20
   c3bcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c3bd0:	9202      	str	r2, [sp, #8]
   c3bd2:	1b3a      	subs	r2, r7, r4
   c3bd4:	3a15      	subs	r2, #21
   c3bd6:	f022 0203 	bic.w	r2, r2, #3
   c3bda:	3204      	adds	r2, #4
   c3bdc:	f104 0115 	add.w	r1, r4, #21
   c3be0:	428f      	cmp	r7, r1
   c3be2:	bf38      	it	cc
   c3be4:	2204      	movcc	r2, #4
   c3be6:	9201      	str	r2, [sp, #4]
   c3be8:	9a02      	ldr	r2, [sp, #8]
   c3bea:	9303      	str	r3, [sp, #12]
   c3bec:	429a      	cmp	r2, r3
   c3bee:	d80c      	bhi.n	c3c0a <__multiply+0x9e>
   c3bf0:	2e00      	cmp	r6, #0
   c3bf2:	dd03      	ble.n	c3bfc <__multiply+0x90>
   c3bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c3bf8:	2b00      	cmp	r3, #0
   c3bfa:	d05a      	beq.n	c3cb2 <__multiply+0x146>
   c3bfc:	6106      	str	r6, [r0, #16]
   c3bfe:	b005      	add	sp, #20
   c3c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3c04:	f843 2b04 	str.w	r2, [r3], #4
   c3c08:	e7d8      	b.n	c3bbc <__multiply+0x50>
   c3c0a:	f8b3 a000 	ldrh.w	sl, [r3]
   c3c0e:	f1ba 0f00 	cmp.w	sl, #0
   c3c12:	d024      	beq.n	c3c5e <__multiply+0xf2>
   c3c14:	f104 0e14 	add.w	lr, r4, #20
   c3c18:	46a9      	mov	r9, r5
   c3c1a:	f04f 0c00 	mov.w	ip, #0
   c3c1e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c3c22:	f8d9 1000 	ldr.w	r1, [r9]
   c3c26:	fa1f fb82 	uxth.w	fp, r2
   c3c2a:	b289      	uxth	r1, r1
   c3c2c:	fb0a 110b 	mla	r1, sl, fp, r1
   c3c30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c3c34:	f8d9 2000 	ldr.w	r2, [r9]
   c3c38:	4461      	add	r1, ip
   c3c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c3c3e:	fb0a c20b 	mla	r2, sl, fp, ip
   c3c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c3c46:	b289      	uxth	r1, r1
   c3c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c3c4c:	4577      	cmp	r7, lr
   c3c4e:	f849 1b04 	str.w	r1, [r9], #4
   c3c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c3c56:	d8e2      	bhi.n	c3c1e <__multiply+0xb2>
   c3c58:	9a01      	ldr	r2, [sp, #4]
   c3c5a:	f845 c002 	str.w	ip, [r5, r2]
   c3c5e:	9a03      	ldr	r2, [sp, #12]
   c3c60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c3c64:	3304      	adds	r3, #4
   c3c66:	f1b9 0f00 	cmp.w	r9, #0
   c3c6a:	d020      	beq.n	c3cae <__multiply+0x142>
   c3c6c:	6829      	ldr	r1, [r5, #0]
   c3c6e:	f104 0c14 	add.w	ip, r4, #20
   c3c72:	46ae      	mov	lr, r5
   c3c74:	f04f 0a00 	mov.w	sl, #0
   c3c78:	f8bc b000 	ldrh.w	fp, [ip]
   c3c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c3c80:	fb09 220b 	mla	r2, r9, fp, r2
   c3c84:	4492      	add	sl, r2
   c3c86:	b289      	uxth	r1, r1
   c3c88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c3c8c:	f84e 1b04 	str.w	r1, [lr], #4
   c3c90:	f85c 2b04 	ldr.w	r2, [ip], #4
   c3c94:	f8be 1000 	ldrh.w	r1, [lr]
   c3c98:	0c12      	lsrs	r2, r2, #16
   c3c9a:	fb09 1102 	mla	r1, r9, r2, r1
   c3c9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c3ca2:	4567      	cmp	r7, ip
   c3ca4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c3ca8:	d8e6      	bhi.n	c3c78 <__multiply+0x10c>
   c3caa:	9a01      	ldr	r2, [sp, #4]
   c3cac:	50a9      	str	r1, [r5, r2]
   c3cae:	3504      	adds	r5, #4
   c3cb0:	e79a      	b.n	c3be8 <__multiply+0x7c>
   c3cb2:	3e01      	subs	r6, #1
   c3cb4:	e79c      	b.n	c3bf0 <__multiply+0x84>
   c3cb6:	bf00      	nop
   c3cb8:	000c5e99 	.word	0x000c5e99
   c3cbc:	000c5f1e 	.word	0x000c5f1e

000c3cc0 <__pow5mult>:
   c3cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3cc4:	4615      	mov	r5, r2
   c3cc6:	f012 0203 	ands.w	r2, r2, #3
   c3cca:	4606      	mov	r6, r0
   c3ccc:	460f      	mov	r7, r1
   c3cce:	d007      	beq.n	c3ce0 <__pow5mult+0x20>
   c3cd0:	4c25      	ldr	r4, [pc, #148]	; (c3d68 <__pow5mult+0xa8>)
   c3cd2:	3a01      	subs	r2, #1
   c3cd4:	2300      	movs	r3, #0
   c3cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c3cda:	f7ff fe51 	bl	c3980 <__multadd>
   c3cde:	4607      	mov	r7, r0
   c3ce0:	10ad      	asrs	r5, r5, #2
   c3ce2:	d03d      	beq.n	c3d60 <__pow5mult+0xa0>
   c3ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c3ce6:	b97c      	cbnz	r4, c3d08 <__pow5mult+0x48>
   c3ce8:	2010      	movs	r0, #16
   c3cea:	f7f9 fcc3 	bl	bd674 <malloc>
   c3cee:	4602      	mov	r2, r0
   c3cf0:	6270      	str	r0, [r6, #36]	; 0x24
   c3cf2:	b928      	cbnz	r0, c3d00 <__pow5mult+0x40>
   c3cf4:	4b1d      	ldr	r3, [pc, #116]	; (c3d6c <__pow5mult+0xac>)
   c3cf6:	481e      	ldr	r0, [pc, #120]	; (c3d70 <__pow5mult+0xb0>)
   c3cf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c3cfc:	f7f9 fd02 	bl	bd704 <__assert_func>
   c3d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c3d04:	6004      	str	r4, [r0, #0]
   c3d06:	60c4      	str	r4, [r0, #12]
   c3d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c3d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c3d10:	b94c      	cbnz	r4, c3d26 <__pow5mult+0x66>
   c3d12:	f240 2171 	movw	r1, #625	; 0x271
   c3d16:	4630      	mov	r0, r6
   c3d18:	f7ff ff12 	bl	c3b40 <__i2b>
   c3d1c:	2300      	movs	r3, #0
   c3d1e:	f8c8 0008 	str.w	r0, [r8, #8]
   c3d22:	4604      	mov	r4, r0
   c3d24:	6003      	str	r3, [r0, #0]
   c3d26:	f04f 0900 	mov.w	r9, #0
   c3d2a:	07eb      	lsls	r3, r5, #31
   c3d2c:	d50a      	bpl.n	c3d44 <__pow5mult+0x84>
   c3d2e:	4639      	mov	r1, r7
   c3d30:	4622      	mov	r2, r4
   c3d32:	4630      	mov	r0, r6
   c3d34:	f7ff ff1a 	bl	c3b6c <__multiply>
   c3d38:	4639      	mov	r1, r7
   c3d3a:	4680      	mov	r8, r0
   c3d3c:	4630      	mov	r0, r6
   c3d3e:	f7ff fdfd 	bl	c393c <_Bfree>
   c3d42:	4647      	mov	r7, r8
   c3d44:	106d      	asrs	r5, r5, #1
   c3d46:	d00b      	beq.n	c3d60 <__pow5mult+0xa0>
   c3d48:	6820      	ldr	r0, [r4, #0]
   c3d4a:	b938      	cbnz	r0, c3d5c <__pow5mult+0x9c>
   c3d4c:	4622      	mov	r2, r4
   c3d4e:	4621      	mov	r1, r4
   c3d50:	4630      	mov	r0, r6
   c3d52:	f7ff ff0b 	bl	c3b6c <__multiply>
   c3d56:	6020      	str	r0, [r4, #0]
   c3d58:	f8c0 9000 	str.w	r9, [r0]
   c3d5c:	4604      	mov	r4, r0
   c3d5e:	e7e4      	b.n	c3d2a <__pow5mult+0x6a>
   c3d60:	4638      	mov	r0, r7
   c3d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3d66:	bf00      	nop
   c3d68:	000c6068 	.word	0x000c6068
   c3d6c:	000c5cc5 	.word	0x000c5cc5
   c3d70:	000c5f1e 	.word	0x000c5f1e

000c3d74 <__lshift>:
   c3d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3d78:	460c      	mov	r4, r1
   c3d7a:	6849      	ldr	r1, [r1, #4]
   c3d7c:	6923      	ldr	r3, [r4, #16]
   c3d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c3d82:	68a3      	ldr	r3, [r4, #8]
   c3d84:	4607      	mov	r7, r0
   c3d86:	4691      	mov	r9, r2
   c3d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c3d8c:	f108 0601 	add.w	r6, r8, #1
   c3d90:	42b3      	cmp	r3, r6
   c3d92:	db0b      	blt.n	c3dac <__lshift+0x38>
   c3d94:	4638      	mov	r0, r7
   c3d96:	f7ff fd91 	bl	c38bc <_Balloc>
   c3d9a:	4605      	mov	r5, r0
   c3d9c:	b948      	cbnz	r0, c3db2 <__lshift+0x3e>
   c3d9e:	4602      	mov	r2, r0
   c3da0:	4b2a      	ldr	r3, [pc, #168]	; (c3e4c <__lshift+0xd8>)
   c3da2:	482b      	ldr	r0, [pc, #172]	; (c3e50 <__lshift+0xdc>)
   c3da4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c3da8:	f7f9 fcac 	bl	bd704 <__assert_func>
   c3dac:	3101      	adds	r1, #1
   c3dae:	005b      	lsls	r3, r3, #1
   c3db0:	e7ee      	b.n	c3d90 <__lshift+0x1c>
   c3db2:	2300      	movs	r3, #0
   c3db4:	f100 0114 	add.w	r1, r0, #20
   c3db8:	f100 0210 	add.w	r2, r0, #16
   c3dbc:	4618      	mov	r0, r3
   c3dbe:	4553      	cmp	r3, sl
   c3dc0:	db37      	blt.n	c3e32 <__lshift+0xbe>
   c3dc2:	6920      	ldr	r0, [r4, #16]
   c3dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c3dc8:	f104 0314 	add.w	r3, r4, #20
   c3dcc:	f019 091f 	ands.w	r9, r9, #31
   c3dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c3dd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3dd8:	d02f      	beq.n	c3e3a <__lshift+0xc6>
   c3dda:	f1c9 0e20 	rsb	lr, r9, #32
   c3dde:	468a      	mov	sl, r1
   c3de0:	f04f 0c00 	mov.w	ip, #0
   c3de4:	681a      	ldr	r2, [r3, #0]
   c3de6:	fa02 f209 	lsl.w	r2, r2, r9
   c3dea:	ea42 020c 	orr.w	r2, r2, ip
   c3dee:	f84a 2b04 	str.w	r2, [sl], #4
   c3df2:	f853 2b04 	ldr.w	r2, [r3], #4
   c3df6:	4298      	cmp	r0, r3
   c3df8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c3dfc:	d8f2      	bhi.n	c3de4 <__lshift+0x70>
   c3dfe:	1b03      	subs	r3, r0, r4
   c3e00:	3b15      	subs	r3, #21
   c3e02:	f023 0303 	bic.w	r3, r3, #3
   c3e06:	3304      	adds	r3, #4
   c3e08:	f104 0215 	add.w	r2, r4, #21
   c3e0c:	4290      	cmp	r0, r2
   c3e0e:	bf38      	it	cc
   c3e10:	2304      	movcc	r3, #4
   c3e12:	f841 c003 	str.w	ip, [r1, r3]
   c3e16:	f1bc 0f00 	cmp.w	ip, #0
   c3e1a:	d001      	beq.n	c3e20 <__lshift+0xac>
   c3e1c:	f108 0602 	add.w	r6, r8, #2
   c3e20:	3e01      	subs	r6, #1
   c3e22:	4638      	mov	r0, r7
   c3e24:	612e      	str	r6, [r5, #16]
   c3e26:	4621      	mov	r1, r4
   c3e28:	f7ff fd88 	bl	c393c <_Bfree>
   c3e2c:	4628      	mov	r0, r5
   c3e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3e32:	f842 0f04 	str.w	r0, [r2, #4]!
   c3e36:	3301      	adds	r3, #1
   c3e38:	e7c1      	b.n	c3dbe <__lshift+0x4a>
   c3e3a:	3904      	subs	r1, #4
   c3e3c:	f853 2b04 	ldr.w	r2, [r3], #4
   c3e40:	f841 2f04 	str.w	r2, [r1, #4]!
   c3e44:	4298      	cmp	r0, r3
   c3e46:	d8f9      	bhi.n	c3e3c <__lshift+0xc8>
   c3e48:	e7ea      	b.n	c3e20 <__lshift+0xac>
   c3e4a:	bf00      	nop
   c3e4c:	000c5e99 	.word	0x000c5e99
   c3e50:	000c5f1e 	.word	0x000c5f1e

000c3e54 <__mcmp>:
   c3e54:	b530      	push	{r4, r5, lr}
   c3e56:	6902      	ldr	r2, [r0, #16]
   c3e58:	690c      	ldr	r4, [r1, #16]
   c3e5a:	1b12      	subs	r2, r2, r4
   c3e5c:	d10e      	bne.n	c3e7c <__mcmp+0x28>
   c3e5e:	f100 0314 	add.w	r3, r0, #20
   c3e62:	3114      	adds	r1, #20
   c3e64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c3e68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c3e6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c3e70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c3e74:	42a5      	cmp	r5, r4
   c3e76:	d003      	beq.n	c3e80 <__mcmp+0x2c>
   c3e78:	d305      	bcc.n	c3e86 <__mcmp+0x32>
   c3e7a:	2201      	movs	r2, #1
   c3e7c:	4610      	mov	r0, r2
   c3e7e:	bd30      	pop	{r4, r5, pc}
   c3e80:	4283      	cmp	r3, r0
   c3e82:	d3f3      	bcc.n	c3e6c <__mcmp+0x18>
   c3e84:	e7fa      	b.n	c3e7c <__mcmp+0x28>
   c3e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3e8a:	e7f7      	b.n	c3e7c <__mcmp+0x28>

000c3e8c <__mdiff>:
   c3e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3e90:	460c      	mov	r4, r1
   c3e92:	4606      	mov	r6, r0
   c3e94:	4611      	mov	r1, r2
   c3e96:	4620      	mov	r0, r4
   c3e98:	4690      	mov	r8, r2
   c3e9a:	f7ff ffdb 	bl	c3e54 <__mcmp>
   c3e9e:	1e05      	subs	r5, r0, #0
   c3ea0:	d110      	bne.n	c3ec4 <__mdiff+0x38>
   c3ea2:	4629      	mov	r1, r5
   c3ea4:	4630      	mov	r0, r6
   c3ea6:	f7ff fd09 	bl	c38bc <_Balloc>
   c3eaa:	b930      	cbnz	r0, c3eba <__mdiff+0x2e>
   c3eac:	4b3a      	ldr	r3, [pc, #232]	; (c3f98 <__mdiff+0x10c>)
   c3eae:	4602      	mov	r2, r0
   c3eb0:	f240 2132 	movw	r1, #562	; 0x232
   c3eb4:	4839      	ldr	r0, [pc, #228]	; (c3f9c <__mdiff+0x110>)
   c3eb6:	f7f9 fc25 	bl	bd704 <__assert_func>
   c3eba:	2301      	movs	r3, #1
   c3ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c3ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3ec4:	bfa4      	itt	ge
   c3ec6:	4643      	movge	r3, r8
   c3ec8:	46a0      	movge	r8, r4
   c3eca:	4630      	mov	r0, r6
   c3ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3ed0:	bfa6      	itte	ge
   c3ed2:	461c      	movge	r4, r3
   c3ed4:	2500      	movge	r5, #0
   c3ed6:	2501      	movlt	r5, #1
   c3ed8:	f7ff fcf0 	bl	c38bc <_Balloc>
   c3edc:	b920      	cbnz	r0, c3ee8 <__mdiff+0x5c>
   c3ede:	4b2e      	ldr	r3, [pc, #184]	; (c3f98 <__mdiff+0x10c>)
   c3ee0:	4602      	mov	r2, r0
   c3ee2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c3ee6:	e7e5      	b.n	c3eb4 <__mdiff+0x28>
   c3ee8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c3eec:	6926      	ldr	r6, [r4, #16]
   c3eee:	60c5      	str	r5, [r0, #12]
   c3ef0:	f104 0914 	add.w	r9, r4, #20
   c3ef4:	f108 0514 	add.w	r5, r8, #20
   c3ef8:	f100 0e14 	add.w	lr, r0, #20
   c3efc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c3f04:	f108 0210 	add.w	r2, r8, #16
   c3f08:	46f2      	mov	sl, lr
   c3f0a:	2100      	movs	r1, #0
   c3f0c:	f859 3b04 	ldr.w	r3, [r9], #4
   c3f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c3f14:	fa1f f883 	uxth.w	r8, r3
   c3f18:	fa11 f18b 	uxtah	r1, r1, fp
   c3f1c:	0c1b      	lsrs	r3, r3, #16
   c3f1e:	eba1 0808 	sub.w	r8, r1, r8
   c3f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c3f26:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c3f2a:	fa1f f888 	uxth.w	r8, r8
   c3f2e:	1419      	asrs	r1, r3, #16
   c3f30:	454e      	cmp	r6, r9
   c3f32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c3f36:	f84a 3b04 	str.w	r3, [sl], #4
   c3f3a:	d8e7      	bhi.n	c3f0c <__mdiff+0x80>
   c3f3c:	1b33      	subs	r3, r6, r4
   c3f3e:	3b15      	subs	r3, #21
   c3f40:	f023 0303 	bic.w	r3, r3, #3
   c3f44:	3304      	adds	r3, #4
   c3f46:	3415      	adds	r4, #21
   c3f48:	42a6      	cmp	r6, r4
   c3f4a:	bf38      	it	cc
   c3f4c:	2304      	movcc	r3, #4
   c3f4e:	441d      	add	r5, r3
   c3f50:	4473      	add	r3, lr
   c3f52:	469e      	mov	lr, r3
   c3f54:	462e      	mov	r6, r5
   c3f56:	4566      	cmp	r6, ip
   c3f58:	d30e      	bcc.n	c3f78 <__mdiff+0xec>
   c3f5a:	f10c 0203 	add.w	r2, ip, #3
   c3f5e:	1b52      	subs	r2, r2, r5
   c3f60:	f022 0203 	bic.w	r2, r2, #3
   c3f64:	3d03      	subs	r5, #3
   c3f66:	45ac      	cmp	ip, r5
   c3f68:	bf38      	it	cc
   c3f6a:	2200      	movcc	r2, #0
   c3f6c:	441a      	add	r2, r3
   c3f6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c3f72:	b17b      	cbz	r3, c3f94 <__mdiff+0x108>
   c3f74:	6107      	str	r7, [r0, #16]
   c3f76:	e7a3      	b.n	c3ec0 <__mdiff+0x34>
   c3f78:	f856 8b04 	ldr.w	r8, [r6], #4
   c3f7c:	fa11 f288 	uxtah	r2, r1, r8
   c3f80:	1414      	asrs	r4, r2, #16
   c3f82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c3f86:	b292      	uxth	r2, r2
   c3f88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c3f8c:	f84e 2b04 	str.w	r2, [lr], #4
   c3f90:	1421      	asrs	r1, r4, #16
   c3f92:	e7e0      	b.n	c3f56 <__mdiff+0xca>
   c3f94:	3f01      	subs	r7, #1
   c3f96:	e7ea      	b.n	c3f6e <__mdiff+0xe2>
   c3f98:	000c5e99 	.word	0x000c5e99
   c3f9c:	000c5f1e 	.word	0x000c5f1e

000c3fa0 <__ulp>:
   c3fa0:	b082      	sub	sp, #8
   c3fa2:	ed8d 0b00 	vstr	d0, [sp]
   c3fa6:	9b01      	ldr	r3, [sp, #4]
   c3fa8:	4912      	ldr	r1, [pc, #72]	; (c3ff4 <__ulp+0x54>)
   c3faa:	4019      	ands	r1, r3
   c3fac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c3fb0:	2900      	cmp	r1, #0
   c3fb2:	dd05      	ble.n	c3fc0 <__ulp+0x20>
   c3fb4:	2200      	movs	r2, #0
   c3fb6:	460b      	mov	r3, r1
   c3fb8:	ec43 2b10 	vmov	d0, r2, r3
   c3fbc:	b002      	add	sp, #8
   c3fbe:	4770      	bx	lr
   c3fc0:	4249      	negs	r1, r1
   c3fc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c3fc6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c3fca:	f04f 0200 	mov.w	r2, #0
   c3fce:	f04f 0300 	mov.w	r3, #0
   c3fd2:	da04      	bge.n	c3fde <__ulp+0x3e>
   c3fd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c3fd8:	fa41 f300 	asr.w	r3, r1, r0
   c3fdc:	e7ec      	b.n	c3fb8 <__ulp+0x18>
   c3fde:	f1a0 0114 	sub.w	r1, r0, #20
   c3fe2:	291e      	cmp	r1, #30
   c3fe4:	bfda      	itte	le
   c3fe6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c3fea:	fa20 f101 	lsrle.w	r1, r0, r1
   c3fee:	2101      	movgt	r1, #1
   c3ff0:	460a      	mov	r2, r1
   c3ff2:	e7e1      	b.n	c3fb8 <__ulp+0x18>
   c3ff4:	7ff00000 	.word	0x7ff00000

000c3ff8 <__b2d>:
   c3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3ffa:	6905      	ldr	r5, [r0, #16]
   c3ffc:	f100 0714 	add.w	r7, r0, #20
   c4000:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c4004:	1f2e      	subs	r6, r5, #4
   c4006:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c400a:	4620      	mov	r0, r4
   c400c:	f7ff fd48 	bl	c3aa0 <__hi0bits>
   c4010:	f1c0 0320 	rsb	r3, r0, #32
   c4014:	280a      	cmp	r0, #10
   c4016:	f8df c07c 	ldr.w	ip, [pc, #124]	; c4094 <__b2d+0x9c>
   c401a:	600b      	str	r3, [r1, #0]
   c401c:	dc14      	bgt.n	c4048 <__b2d+0x50>
   c401e:	f1c0 0e0b 	rsb	lr, r0, #11
   c4022:	fa24 f10e 	lsr.w	r1, r4, lr
   c4026:	42b7      	cmp	r7, r6
   c4028:	ea41 030c 	orr.w	r3, r1, ip
   c402c:	bf34      	ite	cc
   c402e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4032:	2100      	movcs	r1, #0
   c4034:	3015      	adds	r0, #21
   c4036:	fa04 f000 	lsl.w	r0, r4, r0
   c403a:	fa21 f10e 	lsr.w	r1, r1, lr
   c403e:	ea40 0201 	orr.w	r2, r0, r1
   c4042:	ec43 2b10 	vmov	d0, r2, r3
   c4046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c4048:	42b7      	cmp	r7, r6
   c404a:	bf3a      	itte	cc
   c404c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4050:	f1a5 0608 	subcc.w	r6, r5, #8
   c4054:	2100      	movcs	r1, #0
   c4056:	380b      	subs	r0, #11
   c4058:	d017      	beq.n	c408a <__b2d+0x92>
   c405a:	f1c0 0c20 	rsb	ip, r0, #32
   c405e:	fa04 f500 	lsl.w	r5, r4, r0
   c4062:	42be      	cmp	r6, r7
   c4064:	fa21 f40c 	lsr.w	r4, r1, ip
   c4068:	ea45 0504 	orr.w	r5, r5, r4
   c406c:	bf8c      	ite	hi
   c406e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c4072:	2400      	movls	r4, #0
   c4074:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c4078:	fa01 f000 	lsl.w	r0, r1, r0
   c407c:	fa24 f40c 	lsr.w	r4, r4, ip
   c4080:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c4084:	ea40 0204 	orr.w	r2, r0, r4
   c4088:	e7db      	b.n	c4042 <__b2d+0x4a>
   c408a:	ea44 030c 	orr.w	r3, r4, ip
   c408e:	460a      	mov	r2, r1
   c4090:	e7d7      	b.n	c4042 <__b2d+0x4a>
   c4092:	bf00      	nop
   c4094:	3ff00000 	.word	0x3ff00000

000c4098 <__d2b>:
   c4098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c409c:	4689      	mov	r9, r1
   c409e:	2101      	movs	r1, #1
   c40a0:	ec57 6b10 	vmov	r6, r7, d0
   c40a4:	4690      	mov	r8, r2
   c40a6:	f7ff fc09 	bl	c38bc <_Balloc>
   c40aa:	4604      	mov	r4, r0
   c40ac:	b930      	cbnz	r0, c40bc <__d2b+0x24>
   c40ae:	4602      	mov	r2, r0
   c40b0:	4b25      	ldr	r3, [pc, #148]	; (c4148 <__d2b+0xb0>)
   c40b2:	4826      	ldr	r0, [pc, #152]	; (c414c <__d2b+0xb4>)
   c40b4:	f240 310a 	movw	r1, #778	; 0x30a
   c40b8:	f7f9 fb24 	bl	bd704 <__assert_func>
   c40bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c40c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c40c4:	bb35      	cbnz	r5, c4114 <__d2b+0x7c>
   c40c6:	2e00      	cmp	r6, #0
   c40c8:	9301      	str	r3, [sp, #4]
   c40ca:	d028      	beq.n	c411e <__d2b+0x86>
   c40cc:	4668      	mov	r0, sp
   c40ce:	9600      	str	r6, [sp, #0]
   c40d0:	f7ff fd06 	bl	c3ae0 <__lo0bits>
   c40d4:	9900      	ldr	r1, [sp, #0]
   c40d6:	b300      	cbz	r0, c411a <__d2b+0x82>
   c40d8:	9a01      	ldr	r2, [sp, #4]
   c40da:	f1c0 0320 	rsb	r3, r0, #32
   c40de:	fa02 f303 	lsl.w	r3, r2, r3
   c40e2:	430b      	orrs	r3, r1
   c40e4:	40c2      	lsrs	r2, r0
   c40e6:	6163      	str	r3, [r4, #20]
   c40e8:	9201      	str	r2, [sp, #4]
   c40ea:	9b01      	ldr	r3, [sp, #4]
   c40ec:	61a3      	str	r3, [r4, #24]
   c40ee:	2b00      	cmp	r3, #0
   c40f0:	bf14      	ite	ne
   c40f2:	2202      	movne	r2, #2
   c40f4:	2201      	moveq	r2, #1
   c40f6:	6122      	str	r2, [r4, #16]
   c40f8:	b1d5      	cbz	r5, c4130 <__d2b+0x98>
   c40fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c40fe:	4405      	add	r5, r0
   c4100:	f8c9 5000 	str.w	r5, [r9]
   c4104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c4108:	f8c8 0000 	str.w	r0, [r8]
   c410c:	4620      	mov	r0, r4
   c410e:	b003      	add	sp, #12
   c4110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c4118:	e7d5      	b.n	c40c6 <__d2b+0x2e>
   c411a:	6161      	str	r1, [r4, #20]
   c411c:	e7e5      	b.n	c40ea <__d2b+0x52>
   c411e:	a801      	add	r0, sp, #4
   c4120:	f7ff fcde 	bl	c3ae0 <__lo0bits>
   c4124:	9b01      	ldr	r3, [sp, #4]
   c4126:	6163      	str	r3, [r4, #20]
   c4128:	2201      	movs	r2, #1
   c412a:	6122      	str	r2, [r4, #16]
   c412c:	3020      	adds	r0, #32
   c412e:	e7e3      	b.n	c40f8 <__d2b+0x60>
   c4130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c4134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c4138:	f8c9 0000 	str.w	r0, [r9]
   c413c:	6918      	ldr	r0, [r3, #16]
   c413e:	f7ff fcaf 	bl	c3aa0 <__hi0bits>
   c4142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c4146:	e7df      	b.n	c4108 <__d2b+0x70>
   c4148:	000c5e99 	.word	0x000c5e99
   c414c:	000c5f1e 	.word	0x000c5f1e

000c4150 <__ratio>:
   c4150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4154:	4688      	mov	r8, r1
   c4156:	4669      	mov	r1, sp
   c4158:	4681      	mov	r9, r0
   c415a:	f7ff ff4d 	bl	c3ff8 <__b2d>
   c415e:	a901      	add	r1, sp, #4
   c4160:	4640      	mov	r0, r8
   c4162:	ec55 4b10 	vmov	r4, r5, d0
   c4166:	f7ff ff47 	bl	c3ff8 <__b2d>
   c416a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c416e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c4172:	eba3 0c02 	sub.w	ip, r3, r2
   c4176:	e9dd 3200 	ldrd	r3, r2, [sp]
   c417a:	1a9b      	subs	r3, r3, r2
   c417c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c4180:	ec51 0b10 	vmov	r0, r1, d0
   c4184:	2b00      	cmp	r3, #0
   c4186:	bfd6      	itet	le
   c4188:	460a      	movle	r2, r1
   c418a:	462a      	movgt	r2, r5
   c418c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c4190:	468b      	mov	fp, r1
   c4192:	462f      	mov	r7, r5
   c4194:	bfd4      	ite	le
   c4196:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c419a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c419e:	4620      	mov	r0, r4
   c41a0:	ee10 2a10 	vmov	r2, s0
   c41a4:	465b      	mov	r3, fp
   c41a6:	4639      	mov	r1, r7
   c41a8:	f7fd fd6e 	bl	c1c88 <__aeabi_ddiv>
   c41ac:	ec41 0b10 	vmov	d0, r0, r1
   c41b0:	b003      	add	sp, #12
   c41b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c41b6 <__copybits>:
   c41b6:	3901      	subs	r1, #1
   c41b8:	b570      	push	{r4, r5, r6, lr}
   c41ba:	1149      	asrs	r1, r1, #5
   c41bc:	6914      	ldr	r4, [r2, #16]
   c41be:	3101      	adds	r1, #1
   c41c0:	f102 0314 	add.w	r3, r2, #20
   c41c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c41c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c41cc:	1f05      	subs	r5, r0, #4
   c41ce:	42a3      	cmp	r3, r4
   c41d0:	d30c      	bcc.n	c41ec <__copybits+0x36>
   c41d2:	1aa3      	subs	r3, r4, r2
   c41d4:	3b11      	subs	r3, #17
   c41d6:	f023 0303 	bic.w	r3, r3, #3
   c41da:	3211      	adds	r2, #17
   c41dc:	42a2      	cmp	r2, r4
   c41de:	bf88      	it	hi
   c41e0:	2300      	movhi	r3, #0
   c41e2:	4418      	add	r0, r3
   c41e4:	2300      	movs	r3, #0
   c41e6:	4288      	cmp	r0, r1
   c41e8:	d305      	bcc.n	c41f6 <__copybits+0x40>
   c41ea:	bd70      	pop	{r4, r5, r6, pc}
   c41ec:	f853 6b04 	ldr.w	r6, [r3], #4
   c41f0:	f845 6f04 	str.w	r6, [r5, #4]!
   c41f4:	e7eb      	b.n	c41ce <__copybits+0x18>
   c41f6:	f840 3b04 	str.w	r3, [r0], #4
   c41fa:	e7f4      	b.n	c41e6 <__copybits+0x30>

000c41fc <__any_on>:
   c41fc:	f100 0214 	add.w	r2, r0, #20
   c4200:	6900      	ldr	r0, [r0, #16]
   c4202:	114b      	asrs	r3, r1, #5
   c4204:	4298      	cmp	r0, r3
   c4206:	b510      	push	{r4, lr}
   c4208:	db11      	blt.n	c422e <__any_on+0x32>
   c420a:	dd0a      	ble.n	c4222 <__any_on+0x26>
   c420c:	f011 011f 	ands.w	r1, r1, #31
   c4210:	d007      	beq.n	c4222 <__any_on+0x26>
   c4212:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c4216:	fa24 f001 	lsr.w	r0, r4, r1
   c421a:	fa00 f101 	lsl.w	r1, r0, r1
   c421e:	428c      	cmp	r4, r1
   c4220:	d10b      	bne.n	c423a <__any_on+0x3e>
   c4222:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c4226:	4293      	cmp	r3, r2
   c4228:	d803      	bhi.n	c4232 <__any_on+0x36>
   c422a:	2000      	movs	r0, #0
   c422c:	bd10      	pop	{r4, pc}
   c422e:	4603      	mov	r3, r0
   c4230:	e7f7      	b.n	c4222 <__any_on+0x26>
   c4232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c4236:	2900      	cmp	r1, #0
   c4238:	d0f5      	beq.n	c4226 <__any_on+0x2a>
   c423a:	2001      	movs	r0, #1
   c423c:	e7f6      	b.n	c422c <__any_on+0x30>

000c423e <_calloc_r>:
   c423e:	b513      	push	{r0, r1, r4, lr}
   c4240:	434a      	muls	r2, r1
   c4242:	4611      	mov	r1, r2
   c4244:	9201      	str	r2, [sp, #4]
   c4246:	f7f9 fa4d 	bl	bd6e4 <_malloc_r>
   c424a:	4604      	mov	r4, r0
   c424c:	b118      	cbz	r0, c4256 <_calloc_r+0x18>
   c424e:	9a01      	ldr	r2, [sp, #4]
   c4250:	2100      	movs	r1, #0
   c4252:	f7fd ff8d 	bl	c2170 <memset>
   c4256:	4620      	mov	r0, r4
   c4258:	b002      	add	sp, #8
   c425a:	bd10      	pop	{r4, pc}
   c425c:	0000      	movs	r0, r0
	...

000c4260 <nan>:
   c4260:	ed9f 0b01 	vldr	d0, [pc, #4]	; c4268 <nan+0x8>
   c4264:	4770      	bx	lr
   c4266:	bf00      	nop
   c4268:	00000000 	.word	0x00000000
   c426c:	7ff80000 	.word	0x7ff80000

000c4270 <__ascii_wctomb>:
   c4270:	b149      	cbz	r1, c4286 <__ascii_wctomb+0x16>
   c4272:	2aff      	cmp	r2, #255	; 0xff
   c4274:	bf85      	ittet	hi
   c4276:	238a      	movhi	r3, #138	; 0x8a
   c4278:	6003      	strhi	r3, [r0, #0]
   c427a:	700a      	strbls	r2, [r1, #0]
   c427c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c4280:	bf98      	it	ls
   c4282:	2001      	movls	r0, #1
   c4284:	4770      	bx	lr
   c4286:	4608      	mov	r0, r1
   c4288:	4770      	bx	lr
	...

000c428c <__aeabi_d2lz>:
   c428c:	b538      	push	{r3, r4, r5, lr}
   c428e:	2200      	movs	r2, #0
   c4290:	2300      	movs	r3, #0
   c4292:	4604      	mov	r4, r0
   c4294:	460d      	mov	r5, r1
   c4296:	f7fd fe3f 	bl	c1f18 <__aeabi_dcmplt>
   c429a:	b928      	cbnz	r0, c42a8 <__aeabi_d2lz+0x1c>
   c429c:	4620      	mov	r0, r4
   c429e:	4629      	mov	r1, r5
   c42a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c42a4:	f7fd bef8 	b.w	c2098 <__aeabi_d2ulz>
   c42a8:	4620      	mov	r0, r4
   c42aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c42ae:	f7fd fef3 	bl	c2098 <__aeabi_d2ulz>
   c42b2:	4240      	negs	r0, r0
   c42b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c42b8:	bd38      	pop	{r3, r4, r5, pc}
   c42ba:	bf00      	nop

000c42bc <dynalib_user>:
   c42bc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c42cc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c42dc:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c42ec:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c42fc:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c430c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c431c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c432c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c433c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c434c:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c435c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c436c:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c437c:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c438c:	7453 7461 7375 203a 6425 5b00 4157 4e52     Status: %d.[WARN
   c439c:	205d 4258 6565 4d20 7365 6173 6567 2073     ] XBee Messages 
   c43ac:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c43bc:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c43cc:	7373 6d75 6e69 2067 4258 6565 6920 2073     ssuming XBee is 
   c43dc:	6e75 7661 6961 616c 6c62 0065 575b 5241     unavailable.[WAR
   c43ec:	5d4e 4220 454c 4d20 7365 6173 6567 2073     N] BLE Messages 
   c43fc:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c440c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c441c:	7373 6d75 6e69 2067 4c42 2045 7369 7520     ssuming BLE is u
   c442c:	616e 6176 6c69 6261 656c 4300 6568 6b63     navailable.Check
   c443c:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c444c:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c445c:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c446c:	4e52 205d 654d 7373 6761 2065 6843 6365     RN] Message Chec
   c447c:	736b 6d75 4420 656f 2073 6f4e 2074 614d     ksum Does Not Ma
   c448c:	6374 2168 203a 7325 5700 7261 696e 676e     tch!: %s.Warning
   c449c:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c44ac:	6f6e 2074 616d 6374 0068 6361 006b 746d     not match.ack.mt
   c44bc:	0072 6552 6563 7669 6465 4d20 746f 726f     r.Received Motor
   c44cc:	4320 6d6f 616d 646e 203a 534c 6570 6465      Command: LSpeed
   c44dc:	253d 2c64 5352 6570 6465 253d 0064 6572     =%d,RSpeed=%d.re
   c44ec:	0071 7470 0073 505b 5455 5d53 5220 6365     q.pts.[PUTS] Rec
   c44fc:	6965 6576 2064 7453 6972 676e 4320 6d6f     eived String Com
   c450c:	616d 646e 203a 7325 7300 6370 6800 6177     mand: %s.spc.hwa
   c451c:	6100 7475 6400 706d 5b00 4e49 4f46 205d     .aut.dmp.[INFO] 
   c452c:	6552 6563 7669 6465 4c20 4554 4d20 7365     Received LTE Mes
   c453c:	6173 6567 203a 7325 4e00 7765 4220 2054     sage: %s.New BT 
   c454c:	6f43 6d6d 6e61 3a64 5b00 4e49 4f46 205d     Command:.[INFO] 
   c455c:	6552 6563 7669 6465 4220 454c 4d20 7365     Received BLE Mes
   c456c:	6173 6567 203a 7325 4300 4843 6275 4500     sage: %s.CCHub.E
   c457c:	7272 726f 202c 6f43 6c75 2064 6f6e 2074     rror, Could not 
   c458c:	6e69 7469 6169 696c 657a 4720 5350 2500     initialize GPS.%
   c459c:	3230 2564 3230 2564 3430 2564 3230 2564     02d%02d%04d%02d%
   c45ac:	3230 2564 3230 0064 7325 252c 2c66 6625     02d%02d.%s,%f,%f
   c45bc:	252c 2c66 6625 252c 2c66 6625 252c 0066     ,%f,%f,%f,%f,%f.
   c45cc:	654e 2077 4258 6565 4320 6d6f 616d 646e     New XBee Command
   c45dc:	003a 495b 464e 5d4f 5220 6365 6965 6576     :.[INFO] Receive
   c45ec:	2064 4258 6565 4d20 7365 6173 6567 203a     d XBee Message: 
   c45fc:	7325 4500 746e 7265 6e69 2067 6144 6174     %s.Entering Data
   c460c:	4f20 6666 6f6c 6461 7265 4d20 646f 0065      Offloader Mode.
   c461c:	002f 7245 6f72 2c72 6320 756f 646c 6e20     /.Error, could n
   c462c:	746f 6f20 6570 206e 6f72 746f 5320 2044     ot open root SD 
   c463c:	6163 6472 6420 7269 6365 6f74 7972 5700     card directory.W
   c464c:	6961 6974 676e 6620 726f 4320 4843 6275     aiting for CCHub
   c465c:	6320 6e6f 656e 7463 6f69 2e6e 2e2e 5300      connection....S
   c466c:	6174 7472 6e69 2067 7274 6e61 6673 7265     tarting transfer
   c467c:	2e2e 002e 6843 6365 696b 676e 6920 2066     ....Checking if 
   c468c:	6966 656c 2520 2073 7369 6120 2e20 7363     file %s is a .cs
   c469c:	2076 726f 2e20 7874 2e74 2e2e 2e00 7363     v or .txt.....cs
   c46ac:	0076 6966 656c 6f64 656e 6600 6c69 6e65     v.filedone.filen
   c46bc:	6d61 0065 6553 646e 6e69 2067 6f63 6d6d     ame.Sending comm
   c46cc:	6e61 2064 7325 4600 6c69 2065 7325 6920     and %s.File %s i
   c46dc:	2073 2061 632e 7673 6f20 2072 742e 7478     s a .csv or .txt
   c46ec:	7020 6972 746e 6e69 2067 6164 6174 6600      printing data.f
   c46fc:	6c69 6365 6d6f 0070 7325 3025 7832 4200     ilecomp.%s%02x.B
   c470c:	746f 6431 7461 4200 6425 4343 6e73 2573     ot1dat.B%dCCsns%
   c471c:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c472c:	2520 2064 6425 2520 2064 4200 6425 4241      %d %d %d .B%dAB
   c473c:	7573 2570 2064 6425 2520 362e 2066 2e25     sup%d %d %.6f %.
   c474c:	6636 0020 3142 4343 7470 6273 6769 6f62     6f .B1CCptsbigbo
   c475c:	0074 5047 2053 6144 6174 203a 614c 3a74     t.GPS Data: Lat:
   c476c:	3025 362e 2066 6f4c 3a6e 3025 362e 0a66     %0.6f Lon:%0.6f.
   c477c:	4200 7461 6574 7972 2520 203a 6425 5620     .Battery %: %d V
   c478c:	6c6f 6174 6567 203a 3025 332e 5666 202c     oltage: %0.3fV, 
   c479c:	6142 7474 7265 2079 7543 7272 6e65 3a74     Battery Current:
   c47ac:	2520 2e30 6634 2c41 5320 6c6f 7261 4320      %0.4fA, Solar C
   c47bc:	7275 6572 746e 203a 3025 342e 4166 4600     urrent: %0.4fA.F
   c47cc:	6961 656c 2064 6f74 6620 6e69 2064 494c     ailed to find LI
   c47dc:	3353 444d 204c 6863 7069 4c00 5349 4d33     S3MDL chip.LIS3M
   c47ec:	4c44 4620 756f 646e 0021 6157 6574 4272     DL Found!.WaterB
   c47fc:	746f 5f00 4f4c 2e47 7874 0074 7245 6f72     ot._LOG.txt.Erro
   c480c:	3a72 6320 756f 646c 6e20 746f 6320 6e6f     r: could not con
   c481c:	656e 7463 7420 206f 4453 6320 7261 2164     nect to SD card!
   c482c:	5400 6d69 2c65 614c 6974 7574 6564 4c2c     .Time,Latitude,L
   c483c:	6e6f 6967 7574 6564 542c 6d65 6570 6172     ongitude,Tempera
   c484c:	7574 6572 702c 2c48 6944 7373 6c6f 6576     ture,pH,Dissolve
   c485c:	2064 324f 432c 6e6f 7564 7463 7669 7469     d O2,Conductivit
   c486c:	2079 2e30 4b31 432c 6e6f 7564 7463 7669     y 0.1K,Conductiv
   c487c:	7469 2079 4b31 5b00 4e49 4f46 205d 6157     ity 1K.[INFO] Wa
   c488c:	6574 4272 746f 2520 3a64 5320 6174 7472     terBot %d: Start
   c489c:	6465 4c20 676f 6967 676e 0021 7874 7200     ed Logging!.tx.r
   c48ac:	0078 666f 0066 0000                         x.off...

000c48b4 <_ZTVN8particle11SPISettingsE>:
	...
   c48bc:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c48c8 <_ZTV5Timer>:
	...
   c48d0:	43f1 000b 4445 000b 41db 000b               .C..ED...A..

000c48dc <_ZTVN5spark10LogHandlerE>:
	...
   c48ec:	40a9 000b 40d3 000b                         .@...@..

000c48f4 <_ZTVN8particle9LEDStatusE>:
	...
   c48fc:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c4908 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4910:	4271 000b 42a5 000b 02e9 000c 40d5 000b     qB...B.......@..

000c4920 <_ZTV4File>:
	...
   c4928:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c4938:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c4948:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c4958:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c4968:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c4978:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c4988:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c4998:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c49a8:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c49b8:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c49c8:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c49d8:	6232 0030                                   2b0.

000c49dc <CSWTCH.279>:
   c49dc:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c49ec:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c49fc:	444d 004c                                   MDL.

000c4a00 <CSWTCH.26>:
   c4a00:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c4a10 <_ZTV16Adafruit_LIS3MDL>:
	...
   c4a18:	767f 000b 76c9 000b 767d 000b 7779 000b     .v...v..}v..yw..
   c4a28:	7681 000b 6573 5074 6361 656b 4374 6766     .v..setPacketCfg
   c4a38:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c4a48:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c4a58:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c4a68:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c4a78:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c4a88:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c4a98:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c4aa8:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c4ab8:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c4ac8:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c4ad8:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c4ae8:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c4af8:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c4b08:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c4b18:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c4b28:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c4b38:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c4b48:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c4b58:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c4b68:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c4b78:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c4b88:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c4b98:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c4ba8:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c4bb8:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c4bc8:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c4bd8:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c4be8:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c4bf8:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c4c08:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c4c18:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c4c28:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c4c38:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c4c48:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c4c58:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c4c68:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c4c78:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c4c88:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c4c98:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c4ca8:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c4cb8:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c4cc8:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c4cd8:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c4ce8:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c4cf8:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c4d08:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c4d18:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c4d28:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c4d38:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c4d48:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c4d58:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c4d68:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c4d78:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c4d88:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c4d98:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c4da8:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c4db8:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c4dc8:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c4dd8:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c4de8:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c4df8:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c4e08:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c4e18:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c4e28:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c4e38:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c4e48:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c4e58:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c4e68:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c4e78:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c4e88:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c4e98:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c4ea8:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c4eb8:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c4ec8:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c4ed8:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c4ee8:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c4ef8:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c4f08:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c4f18:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c4f28:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c4f38:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c4f48:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c4f58:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c4f68:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c4f78:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c4f88:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c4f98:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c4fa8:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c4fb8:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c4fc8:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c4fd8:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c4fe8:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c4ff8:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c5008:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c5018:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c5028:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c5038:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c5048:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c5058:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c5068:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c5078:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c5088:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c5098:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c50a8:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c50b8:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c50c8:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c50d8:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c50e8:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c50f8:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c5108:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c5118:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c5128:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c5138:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c5148:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c5158:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c5168:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c5178:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c5188:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c5198:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c51a8:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c51b8:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c51c8:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c51d8:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c51e8:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c51f8:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c5208:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c5218:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c5228:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c5238:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c5248:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c5258:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c5268:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c5278:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c5288:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c5298:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c52a8:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c52b8:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c52c8:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c52d8:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c52e8:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c52f8:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c5308:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c5318:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c5328:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c5338:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c5348:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c5358:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c5368:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c5378:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c5388:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c5398:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c53a8:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c53b8:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c53c8:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c53d8:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c53e8:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c53f8:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c5408:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c5418:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c5428:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c5438:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c5448:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c5458:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c5468:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c5478:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c5488:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c5498:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c54a8:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c54b8:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c54c8:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c54d8:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c54e8:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c54f8:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c5508:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c5518:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c5528:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c5538:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c5548:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c5558:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c5568:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c5578:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c5588:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c5598:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c55a8:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c55b8:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c55c8:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c55d8:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c55e8:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c55f8:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c5608:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c5618:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c5628:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c5638:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c5648:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c5658:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c5668:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c5678:	7365 2e73 2e2e 0000                         ess.....

000c5680 <CSWTCH.334>:
   c5680:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c5690:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c56a0:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c56c0:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c56e8:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c573c:	0000 0010 0004                              ......

000c5742 <CSWTCH.335>:
   c5742:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c575e:	002c 0000 0000 0000 0010 0024               ,.........$.

000c576a <CSWTCH.336>:
   c576a:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c577a:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c578a:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c579a:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c57aa:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c57ba:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c57ca:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c57da:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c57ea:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c57fa:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c580a:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c581a:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c582a:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c583a:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c584a:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c585a:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c586a:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c587a:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c588a:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c589a:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c58aa:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c58bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c58c4:	d781 000b d7e5 000b d8b9 000b d80f 000b     ................
   c58d4:	d785 000b                                   ....

000c58d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c58e0:	d77d 000b d7f3 000b d77f 000b d815 000b     }...............
   c58f0:	d7a5 000b                                   ....

000c58f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c58fc:	d77b 000b d801 000b e075 000b d81b 000b     {.......u.......
   c590c:	d7c5 000b                                   ....

000c5910 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c591c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c592e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c592e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c593e <_ZN8particle7BleUuid9BASE_UUIDE>:
   c593e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c5950 <_ZTVN5spark13CellularClassE>:
	...
   c5958:	eb37 000b eb2d 000b eb23 000b ead9 000b     7...-...#.......
   c5968:	eb17 000b eb0b 000b 0641 000c 0649 000c     ........A...I...
   c5978:	eaff 000b eaf7 000b eaed 000b eae3 000b     ................
   c5988:	0679 000c                                   y...

000c598c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5994:	eb71 000b eb77 000b ebb5 000b eb85 000b     q...w...........
   c59a4:	eb73 000b                                   s...

000c59a8 <_ZTVN5spark13EthernetClassE>:
	...
   c59b0:	f0ff 000b f0f5 000b f0eb 000b f0e1 000b     ................
   c59c0:	f0d5 000b f0c9 000b 0641 000c 0649 000c     ........A...I...
   c59d0:	f0bd 000b f0b5 000b f0ab 000b f0a1 000b     ................
   c59e0:	0679 000c                                   y...

000c59e4 <_ZTV7TwoWire>:
	...
   c59ec:	f11d 000b f167 000b f13f 000b f11f 000b     ....g...?.......
   c59fc:	f147 000b f14f 000b f157 000b f15f 000b     G...O...W..._...

000c5a0c <_ZTV9IPAddress>:
	...
   c5a14:	f239 000b f229 000b f22b 000b 7525 7500     9...)...+...%u.u
   c5a24:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c5a34:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c5a44:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c5a54:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c5a64:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c5a74:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c5a84:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c5a94:	6961 006c                                   ail.

000c5a98 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c5aa0:	f735 000b f75b 000b f719 000b f347 000b     5...[.......G...

000c5ab0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5ab8:	fb91 000b fba9 000b 02e9 000c 40d5 000b     .............@..

000c5ac8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c5ad0:	fbbd 000b fbd1 000b 048d 000c f721 000b     ............!...

000c5ae0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c5ae8:	f733 000b f769 000b 024d 000c f723 000b     3...i...M...#...

000c5af8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c5b00:	f731 000b f777 000b faf9 000b f799 000b     1...w...........

000c5b10 <_ZTVN5spark12NetworkClassE>:
	...
   c5b18:	0601 000c 060b 000c 0615 000c 061f 000c     ................
   c5b28:	0629 000c 0635 000c 0641 000c 0649 000c     )...5...A...I...
   c5b38:	0651 000c 065d 000c 0665 000c 066f 000c     Q...]...e...o...
   c5b48:	0679 000c                                   y...

000c5b4c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c5b4c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c5b5c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c5b6c:	6d69 0065                                   ime.

000c5b70 <_ZTV11USARTSerial>:
	...
   c5b78:	0f95 000c 1001 000c 0fd9 000c 0765 000c     ............e...
   c5b88:	0fa9 000c 0fc5 000c 0fb7 000c 0fd3 000c     ................
   c5b98:	0f97 000c 0f9b 000c                         ........

000c5ba0 <_ZTV9USBSerial>:
	...
   c5ba8:	1053 000c 10bb 000c 1091 000c 0765 000c     S...........e...
   c5bb8:	1083 000c 1055 000c 1065 000c 10b5 000c     ....U...e.......
   c5bc8:	1075 000c 104d 000c                         u...M...

000c5bd0 <_ZSt7nothrow>:
	...

000c5bd1 <_ZTSSt19_Sp_make_shared_tag>:
   c5bd1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c5be1:	6572 5f64 6174 0067 0000                     red_tag....

000c5bec <_ZTISt19_Sp_make_shared_tag>:
   c5bec:	5c2c 000c 5bd1 000c                         ,\...[..

000c5bf4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c5bf4:	5c8c 000c 5c00 000c 5cb0 000c               .\...\...\..

000c5c00 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c5c00:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c5c10:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c5c20:	0045 0000                                   E...

000c5c24 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c5c24:	0000 0000 5bf4 000c 14e5 000c 14f9 000c     .....[..........
   c5c34:	168d 000c 168d 000c 1563 000c 14a5 000c     ........c.......
   c5c44:	154b 000c 150d 000c 14d7 000c               K...........

000c5c50 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c5c50:	5c8c 000c 5c5c 000c 5bf4 000c               .\..\\...[..

000c5c5c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c5c5c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c5c6c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c5c7c:	666e 456f 0000 0000                         nfoE....

000c5c84 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c5c84:	0000 0000 5c50 000c 158d 000c 15a1 000c     ....P\..........
   c5c94:	168d 000c 168d 000c 1563 000c 14a5 000c     ........c.......
   c5ca4:	1661 000c 15ed 000c 15b5 000c               a...........

000c5cb0 <_ZTISt9type_info>:
   c5cb0:	5c2c 000c 5cb8 000c                         ,\...\..

000c5cb8 <_ZTSSt9type_info>:
   c5cb8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c5cc8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c5cd8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c5ce8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5cf8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5d08:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c5d18:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c5d28:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c5d38:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c5d44 <fpi.1>:
   c5d44:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5d54:	0000 0000                                   ....

000c5d58 <fpinan.0>:
   c5d58:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c5d70 <tinytens>:
   c5d70:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5d80:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5d90:	6f43 64ac 0628 1168                         Co.d(.h.

000c5d98 <_ctype_>:
   c5d98:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5da8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5db8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5dc8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5dd8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c5de8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c5df8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c5e08:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c5e18:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5e98:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5ea8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5eb8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5ec8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5ed8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5ee8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5ef8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c5f08:	632e 0000                                   .c..

000c5f0c <_C_numeric_locale>:
   c5f0c:	4c03 000c 5a83 000c dc00 2003 4f50 4953     .L...Z..... POSI
   c5f1c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c5f2c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5f3c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5f4c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5f5c:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5f6c:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c5f78 <__mprec_bigtens>:
   c5f78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5f88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5f98:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5fa0 <__mprec_tens>:
   c5fa0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5fb0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c5fc0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c5fd0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c5fe0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c5ff0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c6000:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c6010:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c6020:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c6030:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c6040:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c6050:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c6060:	9db4 79d9 7843 44ea                         ...yCx.D

000c6068 <p05.0>:
   c6068:	0005 0000 0019 0000 007d 0000               ........}...

000c6074 <link_const_variable_data_end>:
   c6074:	000b5c01 	.word	0x000b5c01
   c6078:	000beac9 	.word	0x000beac9
   c607c:	000beb41 	.word	0x000beb41
   c6080:	000bf109 	.word	0x000bf109
   c6084:	000c02d9 	.word	0x000c02d9
   c6088:	000c0751 	.word	0x000c0751
   c608c:	000c0875 	.word	0x000c0875
   c6090:	000c0ddd 	.word	0x000c0ddd
   c6094:	000c0f81 	.word	0x000c0f81

000c6098 <link_constructors_end>:
	...
