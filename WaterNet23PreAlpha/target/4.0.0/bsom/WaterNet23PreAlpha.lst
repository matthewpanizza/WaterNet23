
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000147e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8800  000c8800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8824  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000204  2003db3c  000c8828  0002db3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ab0  2003dd40  2003dd40  0003dd40  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8a2c  000c8a2c  00038a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8a54  000c8a54  00038a54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e4ad  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f5f  00000000  00000000  00266f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000711c0  00000000  00000000  00287e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f80  00000000  00000000  002f9024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011540  00000000  00000000  002fdfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff92  00000000  00000000  0030f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087a7e  00000000  00000000  0035f476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c8ea  00000000  00000000  003e6ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd7c  00000000  00000000  005437e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 f9a1 	bl	c4378 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 f9c3 	bl	c43c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db3c 	.word	0x2003db3c
   b404c:	000c8828 	.word	0x000c8828
   b4050:	2003dd40 	.word	0x2003dd40
   b4054:	2003dd40 	.word	0x2003dd40
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d fe59 	bl	c1d18 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c87dc 	.word	0x000c87dc
   b4080:	000c8800 	.word	0x000c8800

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 b818 	b.w	b60b8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ff9d 	bl	b5fc8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d bdf9 	b.w	c1c88 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f00a b81b 	b.w	be0d0 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b819 	b.w	be0d0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b81f 	b.w	be0e0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f00a b81d 	b.w	be0e0 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 ff00 	bl	bdeb4 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdaf5 	.word	0x000bdaf5
   b40bc:	000c6528 	.word	0x000c6528

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
        memcpy(txBuf_tmp,dataOut,strlen(dataOut));
        bledbgCharacteristic.setValue(txBuf_tmp, strlen(dataOut));
    #endif
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b17      	ldr	r3, [pc, #92]	; (b415c <_Z13StatusHandlerv+0x60>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b17      	ldr	r3, [pc, #92]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4b15      	ldr	r3, [pc, #84]	; (b4164 <_Z13StatusHandlerv+0x68>)
    statusFlags |= XBeeAvail << 1;
   b410e:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a15      	ldr	r2, [pc, #84]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a14      	ldr	r2, [pc, #80]	; (b416c <_Z13StatusHandlerv+0x70>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a13      	ldr	r2, [pc, #76]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a12      	ldr	r2, [pc, #72]	; (b4174 <_Z13StatusHandlerv+0x78>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;
   b4132:	4a11      	ldr	r2, [pc, #68]	; (b4178 <_Z13StatusHandlerv+0x7c>)
   b4134:	7812      	ldrb	r2, [r2, #0]
   b4136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;
   b413a:	4a10      	ldr	r2, [pc, #64]	; (b417c <_Z13StatusHandlerv+0x80>)
   b413c:	7812      	ldrb	r2, [r2, #0]
   b413e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   b4142:	4a0f      	ldr	r2, [pc, #60]	; (b4180 <_Z13StatusHandlerv+0x84>)
   b4144:	8013      	strh	r3, [r2, #0]
    statusReady = true;
   b4146:	4b0f      	ldr	r3, [pc, #60]	; (b4184 <_Z13StatusHandlerv+0x88>)
   b4148:	2201      	movs	r2, #1
   b414a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b414c:	f00d fd54 	bl	c1bf8 <_Z16_fetch_usbserialv>
}
   b4150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4154:	490c      	ldr	r1, [pc, #48]	; (b4188 <_Z13StatusHandlerv+0x8c>)
   b4156:	f00d b88e 	b.w	c1276 <_ZN5Print7printlnEPKc>
   b415a:	bf00      	nop
   b415c:	2003dd9c 	.word	0x2003dd9c
   b4160:	2003dd58 	.word	0x2003dd58
   b4164:	2003dd8d 	.word	0x2003dd8d
   b4168:	2003e0d0 	.word	0x2003e0d0
   b416c:	2003db48 	.word	0x2003db48
   b4170:	2003defc 	.word	0x2003defc
   b4174:	2003def5 	.word	0x2003def5
   b4178:	2003dd8c 	.word	0x2003dd8c
   b417c:	2003dd68 	.word	0x2003dd68
   b4180:	2003e5a8 	.word	0x2003e5a8
   b4184:	2003e5c8 	.word	0x2003e5c8
   b4188:	000c653d 	.word	0x000c653d

000b418c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b418c:	b510      	push	{r4, lr}
  }
   b418e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4190:	4604      	mov	r4, r0
  }
   b4192:	f7ff ff86 	bl	b40a2 <_ZdlPvj>
   b4196:	4620      	mov	r0, r4
   b4198:	bd10      	pop	{r4, pc}

000b419a <_ZN4FileD0Ev>:
   b419a:	b510      	push	{r4, lr}
   b419c:	2134      	movs	r1, #52	; 0x34
   b419e:	4604      	mov	r4, r0
   b41a0:	f7ff ff7f 	bl	b40a2 <_ZdlPvj>
   b41a4:	4620      	mov	r0, r4
   b41a6:	bd10      	pop	{r4, pc}

000b41a8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b41a8:	3010      	adds	r0, #16
   b41aa:	f002 be97 	b.w	b6edc <_ZN7FatFile5writeEPKvj>

000b41ae <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b41ae:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b41b0:	2201      	movs	r2, #1
   b41b2:	f88d 1007 	strb.w	r1, [sp, #7]
   b41b6:	3010      	adds	r0, #16
   b41b8:	f10d 0107 	add.w	r1, sp, #7
   b41bc:	f002 fe8e 	bl	b6edc <_ZN7FatFile5writeEPKvj>
  }
   b41c0:	b003      	add	sp, #12
   b41c2:	f85d fb04 	ldr.w	pc, [sp], #4

000b41c6 <_ZN4File5flushEv>:
    FatFile::sync();
   b41c6:	3010      	adds	r0, #16
   b41c8:	f002 bdfe 	b.w	b6dc8 <_ZN7FatFile4syncEv>

000b41cc <_ZN4File4peekEv>:
    return FatFile::peek();
   b41cc:	3010      	adds	r0, #16
   b41ce:	f002 bcdf 	b.w	b6b90 <_ZN7FatFile4peekEv>

000b41d2 <_ZN4File4readEv>:
  int read() {
   b41d2:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41d4:	2201      	movs	r2, #1
   b41d6:	f10d 0107 	add.w	r1, sp, #7
   b41da:	3010      	adds	r0, #16
   b41dc:	f002 fc2a 	bl	b6a34 <_ZN7FatFile4readEPvj>
   b41e0:	2801      	cmp	r0, #1
   b41e2:	bf0c      	ite	eq
   b41e4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41ec:	b003      	add	sp, #12
   b41ee:	f85d fb04 	ldr.w	pc, [sp], #4

000b41f2 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41f2:	6943      	ldr	r3, [r0, #20]
   b41f4:	b113      	cbz	r3, b41fc <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41f6:	6983      	ldr	r3, [r0, #24]
   b41f8:	300c      	adds	r0, #12
   b41fa:	4718      	bx	r3
            callback();
        }
    }
   b41fc:	4770      	bx	lr

000b41fe <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41fe:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4200:	2100      	movs	r1, #0
   b4202:	4604      	mov	r4, r0
   b4204:	4608      	mov	r0, r1
   b4206:	f009 fc1d 	bl	bda44 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b420a:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b420c:	4620      	mov	r0, r4
   b420e:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4210:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4212:	f009 fc2f 	bl	bda74 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4216:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4218:	b10c      	cbz	r4, b421e <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b421a:	2301      	movs	r3, #1
   b421c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b421e:	2100      	movs	r1, #0
   b4220:	2001      	movs	r0, #1
   b4222:	f009 fc0f 	bl	bda44 <os_thread_scheduling>
            }
        }
        if (t) {
   b4226:	b12c      	cbz	r4, b4234 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4228:	6823      	ldr	r3, [r4, #0]
   b422a:	4620      	mov	r0, r4
   b422c:	689b      	ldr	r3, [r3, #8]
   b422e:	4798      	blx	r3
            t->running = false;
   b4230:	2300      	movs	r3, #0
   b4232:	7123      	strb	r3, [r4, #4]
        }
    }
   b4234:	b002      	add	sp, #8
   b4236:	bd10      	pop	{r4, pc}

000b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4238:	2a01      	cmp	r2, #1
   b423a:	d102      	bne.n	b4242 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b423c:	6001      	str	r1, [r0, #0]
      }
   b423e:	2000      	movs	r0, #0
   b4240:	4770      	bx	lr
	  switch (__op)
   b4242:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4244:	bf04      	itt	eq
   b4246:	680b      	ldreq	r3, [r1, #0]
   b4248:	6003      	streq	r3, [r0, #0]
	      break;
   b424a:	e7f8      	b.n	b423e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b424c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b424c:	6803      	ldr	r3, [r0, #0]
   b424e:	4718      	bx	r3

000b4250 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4250:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4252:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4254:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4256:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4258:	b130      	cbz	r0, b4268 <_ZN5Timer5startEj.isra.0+0x18>
   b425a:	2300      	movs	r3, #0
   b425c:	e9cd 3300 	strd	r3, r3, [sp]
   b4260:	461a      	mov	r2, r3
   b4262:	2102      	movs	r1, #2
   b4264:	f009 fc0e 	bl	bda84 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4268:	68a0      	ldr	r0, [r4, #8]
   b426a:	b130      	cbz	r0, b427a <_ZN5Timer5startEj.isra.0+0x2a>
   b426c:	2300      	movs	r3, #0
   b426e:	e9cd 5300 	strd	r5, r3, [sp]
   b4272:	461a      	mov	r2, r3
   b4274:	4619      	mov	r1, r3
   b4276:	f009 fc05 	bl	bda84 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b427a:	b003      	add	sp, #12
   b427c:	bd30      	pop	{r4, r5, pc}

000b427e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b427e:	6803      	ldr	r3, [r0, #0]
   b4280:	b2c9      	uxtb	r1, r1
   b4282:	689b      	ldr	r3, [r3, #8]
   b4284:	4718      	bx	r3
	...

000b4288 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4288:	b510      	push	{r4, lr}
   b428a:	4b05      	ldr	r3, [pc, #20]	; (b42a0 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b428c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b428e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4290:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4292:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4296:	f009 fe2d 	bl	bdef4 <led_set_status_active>
}
   b429a:	4620      	mov	r0, r4
   b429c:	bd10      	pop	{r4, pc}
   b429e:	bf00      	nop
   b42a0:	000c6bc4 	.word	0x000c6bc4

000b42a4 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
}
   b42a8:	f7ff ffee 	bl	b4288 <_ZN8particle9LEDStatusD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2120      	movs	r1, #32
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b42b8:	4b0a      	ldr	r3, [pc, #40]	; (b42e4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b42ba:	b510      	push	{r4, lr}
   b42bc:	4604      	mov	r4, r0
   b42be:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42c0:	f00c f8e2 	bl	c0488 <_ZN5spark10LogManager8instanceEv>
   b42c4:	4621      	mov	r1, r4
   b42c6:	f00c fb1a 	bl	c08fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42ca:	f00d fc95 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b42ce:	f00d fc87 	bl	c1be0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42d2:	4620      	mov	r0, r4
   b42d4:	4b04      	ldr	r3, [pc, #16]	; (b42e8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42d6:	f840 3b04 	str.w	r3, [r0], #4
   b42da:	f00c f9ab 	bl	c0634 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42de:	4620      	mov	r0, r4
   b42e0:	bd10      	pop	{r4, pc}
   b42e2:	bf00      	nop
   b42e4:	000c6bd8 	.word	0x000c6bd8
   b42e8:	000c6bac 	.word	0x000c6bac

000b42ec <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42ec:	b510      	push	{r4, lr}
   b42ee:	4604      	mov	r4, r0
    }
   b42f0:	f7ff ffe2 	bl	b42b8 <_ZN5spark16SerialLogHandlerD1Ev>
   b42f4:	4620      	mov	r0, r4
   b42f6:	2124      	movs	r1, #36	; 0x24
   b42f8:	f7ff fed3 	bl	b40a2 <_ZdlPvj>
   b42fc:	4620      	mov	r0, r4
   b42fe:	bd10      	pop	{r4, pc}

000b4300 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4300:	b40e      	push	{r1, r2, r3}
   b4302:	b503      	push	{r0, r1, lr}
   b4304:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4306:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4308:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b430c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b430e:	f00c ffdc 	bl	c12ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4312:	b002      	add	sp, #8
   b4314:	f85d eb04 	ldr.w	lr, [sp], #4
   b4318:	b003      	add	sp, #12
   b431a:	4770      	bx	lr

000b431c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b431c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b431e:	4604      	mov	r4, r0
   b4320:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4322:	7922      	ldrb	r2, [r4, #4]
   b4324:	68a3      	ldr	r3, [r4, #8]
   b4326:	b132      	cbz	r2, b4336 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4328:	b9a3      	cbnz	r3, b4354 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b432a:	490b      	ldr	r1, [pc, #44]	; (b4358 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b432c:	b002      	add	sp, #8
   b432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4332:	f00c bf89 	b.w	c1248 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4336:	4a09      	ldr	r2, [pc, #36]	; (b435c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4338:	7b26      	ldrb	r6, [r4, #12]
   b433a:	4d09      	ldr	r5, [pc, #36]	; (b4360 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b433c:	4909      	ldr	r1, [pc, #36]	; (b4364 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b433e:	7b64      	ldrb	r4, [r4, #13]
   b4340:	2e01      	cmp	r6, #1
   b4342:	bf18      	it	ne
   b4344:	4629      	movne	r1, r5
   b4346:	e9cd 1400 	strd	r1, r4, [sp]
   b434a:	4907      	ldr	r1, [pc, #28]	; (b4368 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b434c:	f7ff ffd8 	bl	b4300 <_ZN5Print6printfEPKcz>
  }
   b4350:	b002      	add	sp, #8
   b4352:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4354:	4a05      	ldr	r2, [pc, #20]	; (b436c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4356:	e7ef      	b.n	b4338 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4358:	000c6567 	.word	0x000c6567
   b435c:	000c7d73 	.word	0x000c7d73
   b4360:	000c6563 	.word	0x000c6563
   b4364:	000c655f 	.word	0x000c655f
   b4368:	000c657d 	.word	0x000c657d
   b436c:	000c6556 	.word	0x000c6556

000b4370 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4370:	b40e      	push	{r1, r2, r3}
   b4372:	b503      	push	{r0, r1, lr}
   b4374:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4376:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4378:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b437c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b437e:	f00c ffa4 	bl	c12ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4382:	b002      	add	sp, #8
   b4384:	f85d eb04 	ldr.w	lr, [sp], #4
   b4388:	b003      	add	sp, #12
   b438a:	4770      	bx	lr

000b438c <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b438c:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b438e:	4d2b      	ldr	r5, [pc, #172]	; (b443c <_Z13motionHandlerv+0xb0>)
   b4390:	782b      	ldrb	r3, [r5, #0]
   b4392:	bb3b      	cbnz	r3, b43e4 <_Z13motionHandlerv+0x58>
   b4394:	4e2a      	ldr	r6, [pc, #168]	; (b4440 <_Z13motionHandlerv+0xb4>)
   b4396:	7833      	ldrb	r3, [r6, #0]
   b4398:	2b5a      	cmp	r3, #90	; 0x5a
   b439a:	d023      	beq.n	b43e4 <_Z13motionHandlerv+0x58>
   b439c:	4c29      	ldr	r4, [pc, #164]	; (b4444 <_Z13motionHandlerv+0xb8>)
   b439e:	7823      	ldrb	r3, [r4, #0]
   b43a0:	2b5a      	cmp	r3, #90	; 0x5a
   b43a2:	d01f      	beq.n	b43e4 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43a4:	f009 fbb6 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b43a8:	4b27      	ldr	r3, [pc, #156]	; (b4448 <_Z13motionHandlerv+0xbc>)
   b43aa:	681b      	ldr	r3, [r3, #0]
   b43ac:	1ac0      	subs	r0, r0, r3
   b43ae:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43b2:	d917      	bls.n	b43e4 <_Z13motionHandlerv+0x58>
        setLSpeed = 90;
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b43b4:	4b25      	ldr	r3, [pc, #148]	; (b444c <_Z13motionHandlerv+0xc0>)
        rightMotorSpeed = 90;
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b43b6:	4826      	ldr	r0, [pc, #152]	; (b4450 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b43b8:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b43ba:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b43bc:	4b25      	ldr	r3, [pc, #148]	; (b4454 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b43be:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b43c0:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b43c2:	4b25      	ldr	r3, [pc, #148]	; (b4458 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b43c4:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b43c6:	2201      	movs	r2, #1
   b43c8:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b43ca:	f00c ffc6 	bl	c135a <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43ce:	7821      	ldrb	r1, [r4, #0]
   b43d0:	4822      	ldr	r0, [pc, #136]	; (b445c <_Z13motionHandlerv+0xd0>)
   b43d2:	f00c ffc2 	bl	c135a <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43d6:	f00d fc0f 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b43da:	4921      	ldr	r1, [pc, #132]	; (b4460 <_Z13motionHandlerv+0xd4>)
   b43dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43e0:	f7ff ffc6 	bl	b4370 <_ZN5Print8printlnfEPKcz>
    }
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b43e4:	4e1f      	ldr	r6, [pc, #124]	; (b4464 <_Z13motionHandlerv+0xd8>)
   b43e6:	7834      	ldrb	r4, [r6, #0]
   b43e8:	bb3c      	cbnz	r4, b443a <_Z13motionHandlerv+0xae>
   b43ea:	782b      	ldrb	r3, [r5, #0]
   b43ec:	b32b      	cbz	r3, b443a <_Z13motionHandlerv+0xae>
   b43ee:	f009 fb91 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b43f2:	4b1d      	ldr	r3, [pc, #116]	; (b4468 <_Z13motionHandlerv+0xdc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	1ac0      	subs	r0, r0, r3
   b43f8:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43fc:	d91d      	bls.n	b443a <_Z13motionHandlerv+0xae>
        driveMode = 0;
        telemetryAvail = false;
        pointArrived = false;
   b43fe:	4b1b      	ldr	r3, [pc, #108]	; (b446c <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b4400:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b4402:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4404:	4b0e      	ldr	r3, [pc, #56]	; (b4440 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4406:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4408:	215a      	movs	r1, #90	; 0x5a
   b440a:	7019      	strb	r1, [r3, #0]
        setRSpeed = 90;
        leftMotorSpeed = 90;
   b440c:	4b0f      	ldr	r3, [pc, #60]	; (b444c <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b440e:	4c0d      	ldr	r4, [pc, #52]	; (b4444 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b4410:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4412:	4b10      	ldr	r3, [pc, #64]	; (b4454 <_Z13motionHandlerv+0xc8>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4414:	480e      	ldr	r0, [pc, #56]	; (b4450 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4416:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4418:	4b0f      	ldr	r3, [pc, #60]	; (b4458 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b441a:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b441c:	2201      	movs	r2, #1
   b441e:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4420:	f00c ff9b 	bl	c135a <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4424:	7821      	ldrb	r1, [r4, #0]
   b4426:	480d      	ldr	r0, [pc, #52]	; (b445c <_Z13motionHandlerv+0xd0>)
   b4428:	f00c ff97 	bl	c135a <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b442c:	f00d fbe4 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b4430:	490f      	ldr	r1, [pc, #60]	; (b4470 <_Z13motionHandlerv+0xe4>)
   b4432:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4436:	f7ff ff9b 	bl	b4370 <_ZN5Print8printlnfEPKcz>
    }
}
   b443a:	bd70      	pop	{r4, r5, r6, pc}
   b443c:	2003db48 	.word	0x2003db48
   b4440:	2003e580 	.word	0x2003e580
   b4444:	2003e581 	.word	0x2003e581
   b4448:	2003de10 	.word	0x2003de10
   b444c:	2003de3c 	.word	0x2003de3c
   b4450:	2003dd6c 	.word	0x2003dd6c
   b4454:	2003e0d9 	.word	0x2003e0d9
   b4458:	2003e5ec 	.word	0x2003e5ec
   b445c:	2003dd7c 	.word	0x2003dd7c
   b4460:	000c659a 	.word	0x000c659a
   b4464:	2003e5d8 	.word	0x2003e5d8
   b4468:	2003de18 	.word	0x2003de18
   b446c:	2003e0d1 	.word	0x2003e0d1
   b4470:	000c65e4 	.word	0x000c65e4

000b4474 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4474:	b510      	push	{r4, lr}
      if (_M_manager)
   b4476:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4478:	4604      	mov	r4, r0
      if (_M_manager)
   b447a:	b113      	cbz	r3, b4482 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b447c:	2203      	movs	r2, #3
   b447e:	4601      	mov	r1, r0
   b4480:	4798      	blx	r3
    }
   b4482:	4620      	mov	r0, r4
   b4484:	bd10      	pop	{r4, pc}
	...

000b4488 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4488:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b448a:	4b13      	ldr	r3, [pc, #76]	; (b44d8 <_ZN5TimerD1Ev+0x50>)
   b448c:	6003      	str	r3, [r0, #0]
   b448e:	4604      	mov	r4, r0
        if (handle) {
   b4490:	6880      	ldr	r0, [r0, #8]
   b4492:	b1c8      	cbz	r0, b44c8 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4494:	2500      	movs	r5, #0
   b4496:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b449a:	e9cd 3500 	strd	r3, r5, [sp]
   b449e:	2102      	movs	r1, #2
   b44a0:	462b      	mov	r3, r5
   b44a2:	462a      	mov	r2, r5
   b44a4:	f009 faee 	bl	bda84 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b44a8:	68a0      	ldr	r0, [r4, #8]
   b44aa:	4629      	mov	r1, r5
   b44ac:	f009 fb12 	bl	bdad4 <os_timer_set_id>
            while (running) {
   b44b0:	7923      	ldrb	r3, [r4, #4]
   b44b2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b44b6:	b113      	cbz	r3, b44be <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b44b8:	f009 fabc 	bl	bda34 <os_thread_yield>
            while (running) {
   b44bc:	e7f8      	b.n	b44b0 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b44be:	68a0      	ldr	r0, [r4, #8]
   b44c0:	4629      	mov	r1, r5
   b44c2:	f009 facf 	bl	bda64 <os_timer_destroy>
            handle = nullptr;
   b44c6:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b44c8:	f104 000c 	add.w	r0, r4, #12
   b44cc:	f7ff ffd2 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
    }
   b44d0:	4620      	mov	r0, r4
   b44d2:	b003      	add	sp, #12
   b44d4:	bd30      	pop	{r4, r5, pc}
   b44d6:	bf00      	nop
   b44d8:	000c6b98 	.word	0x000c6b98

000b44dc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b44dc:	b510      	push	{r4, lr}
   b44de:	4604      	mov	r4, r0
    }
   b44e0:	f7ff ffd2 	bl	b4488 <_ZN5TimerD1Ev>
   b44e4:	4620      	mov	r0, r4
   b44e6:	211c      	movs	r1, #28
   b44e8:	f7ff fddb 	bl	b40a2 <_ZdlPvj>
   b44ec:	4620      	mov	r0, r4
   b44ee:	bd10      	pop	{r4, pc}

000b44f0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b44f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44f2:	468c      	mov	ip, r1
   b44f4:	2500      	movs	r5, #0
   b44f6:	4914      	ldr	r1, [pc, #80]	; (b4548 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b44f8:	7105      	strb	r5, [r0, #4]
   b44fa:	4604      	mov	r4, r0
   b44fc:	6085      	str	r5, [r0, #8]
   b44fe:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4500:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4504:	b085      	sub	sp, #20
   b4506:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4508:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b450c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4510:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4514:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4518:	e897 0003 	ldmia.w	r7, {r0, r1}
   b451c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4520:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4522:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4524:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4526:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4528:	6095      	str	r5, [r2, #8]
   b452a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b452c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b452e:	e9cd 3500 	strd	r3, r5, [sp]
   b4532:	4a06      	ldr	r2, [pc, #24]	; (b454c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4534:	4623      	mov	r3, r4
   b4536:	4661      	mov	r1, ip
   b4538:	f104 0008 	add.w	r0, r4, #8
   b453c:	f009 fa8a 	bl	bda54 <os_timer_create>
    }
   b4540:	4620      	mov	r0, r4
   b4542:	b005      	add	sp, #20
   b4544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4546:	bf00      	nop
   b4548:	000c6b98 	.word	0x000c6b98
   b454c:	000b41ff 	.word	0x000b41ff

000b4550 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4550:	b510      	push	{r4, lr}
   b4552:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b4554:	2200      	movs	r2, #0
   b4556:	7c40      	ldrb	r0, [r0, #17]
   b4558:	f009 fd06 	bl	bdf68 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b455c:	7c63      	ldrb	r3, [r4, #17]
   b455e:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4560:	bf18      	it	ne
   b4562:	8320      	strhne	r0, [r4, #24]
}
   b4564:	bd10      	pop	{r4, pc}
	...

000b4568 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4568:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b456a:	4b24      	ldr	r3, [pc, #144]	; (b45fc <_Z10LEDHandlerv+0x94>)
   b456c:	4a24      	ldr	r2, [pc, #144]	; (b4600 <_Z10LEDHandlerv+0x98>)
   b456e:	781b      	ldrb	r3, [r3, #0]
   b4570:	b15b      	cbz	r3, b458a <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4572:	7c53      	ldrb	r3, [r2, #17]
   b4574:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4576:	bf1c      	itt	ne
   b4578:	2302      	movne	r3, #2
   b457a:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b457c:	23ff      	movs	r3, #255	; 0xff
   b457e:	6153      	str	r3, [r2, #20]
        return;                
    }
    if(signalLED){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b4580:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b4582:	481f      	ldr	r0, [pc, #124]	; (b4600 <_Z10LEDHandlerv+0x98>)
   b4584:	f7ff ffe4 	bl	b4550 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b4588:	bd10      	pop	{r4, pc}
    if(signalLED){
   b458a:	4b1e      	ldr	r3, [pc, #120]	; (b4604 <_Z10LEDHandlerv+0x9c>)
   b458c:	781b      	ldrb	r3, [r3, #0]
   b458e:	b133      	cbz	r3, b459e <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4590:	7c53      	ldrb	r3, [r2, #17]
   b4592:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4594:	bf1c      	itt	ne
   b4596:	2302      	movne	r3, #2
   b4598:	7453      	strbne	r3, [r2, #17]
    d_.color = color;
   b459a:	4b1b      	ldr	r3, [pc, #108]	; (b4608 <_Z10LEDHandlerv+0xa0>)
   b459c:	e7ef      	b.n	b457e <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b459e:	4b1b      	ldr	r3, [pc, #108]	; (b460c <_Z10LEDHandlerv+0xa4>)
   b45a0:	781b      	ldrb	r3, [r3, #0]
   b45a2:	bb23      	cbnz	r3, b45ee <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b45a4:	4b1a      	ldr	r3, [pc, #104]	; (b4610 <_Z10LEDHandlerv+0xa8>)
   b45a6:	781b      	ldrb	r3, [r3, #0]
   b45a8:	bb23      	cbnz	r3, b45f4 <_Z10LEDHandlerv+0x8c>
    else if(driveMode == 0){
   b45aa:	4b1a      	ldr	r3, [pc, #104]	; (b4614 <_Z10LEDHandlerv+0xac>)
   b45ac:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b45ae:	2b00      	cmp	r3, #0
   b45b0:	bf0b      	itete	eq
   b45b2:	210a      	moveq	r1, #10
   b45b4:	2114      	movne	r1, #20
   b45b6:	2002      	moveq	r0, #2
   b45b8:	2003      	movne	r0, #3
    statusMode |= XBeeAvail << 1;
   b45ba:	4b17      	ldr	r3, [pc, #92]	; (b4618 <_Z10LEDHandlerv+0xb0>)
   b45bc:	781c      	ldrb	r4, [r3, #0]
    statusMode |= BLEAvail << 2;
   b45be:	4b17      	ldr	r3, [pc, #92]	; (b461c <_Z10LEDHandlerv+0xb4>)
   b45c0:	781b      	ldrb	r3, [r3, #0]
   b45c2:	009b      	lsls	r3, r3, #2
   b45c4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    statusMode = LTEAvail;
   b45c8:	4c15      	ldr	r4, [pc, #84]	; (b4620 <_Z10LEDHandlerv+0xb8>)
    statusMode |= BLEAvail << 2;
   b45ca:	7824      	ldrb	r4, [r4, #0]
   b45cc:	4323      	orrs	r3, r4
   b45ce:	3b01      	subs	r3, #1
   b45d0:	b2db      	uxtb	r3, r3
   b45d2:	2b06      	cmp	r3, #6
   b45d4:	bf9c      	itt	ls
   b45d6:	4c13      	ldrls	r4, [pc, #76]	; (b4624 <_Z10LEDHandlerv+0xbc>)
   b45d8:	f854 3023 	ldrls.w	r3, [r4, r3, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45dc:	7c54      	ldrb	r4, [r2, #17]
    switch (statusMode){
   b45de:	bf88      	it	hi
   b45e0:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b45e4:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b45e6:	bf18      	it	ne
   b45e8:	7450      	strbne	r0, [r2, #17]
    d_.color = color;
   b45ea:	6153      	str	r3, [r2, #20]
   b45ec:	e7c9      	b.n	b4582 <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b45ee:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b45f0:	2002      	movs	r0, #2
   b45f2:	e7e2      	b.n	b45ba <_Z10LEDHandlerv+0x52>
        SetSpeed = LED_SPEED_NORMAL;
   b45f4:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_SOLID;
   b45f6:	2001      	movs	r0, #1
   b45f8:	e7df      	b.n	b45ba <_Z10LEDHandlerv+0x52>
   b45fa:	bf00      	nop
   b45fc:	2003e0d0 	.word	0x2003e0d0
   b4600:	2003e588 	.word	0x2003e588
   b4604:	2003e582 	.word	0x2003e582
   b4608:	00ff6000 	.word	0x00ff6000
   b460c:	2003defc 	.word	0x2003defc
   b4610:	2003def5 	.word	0x2003def5
   b4614:	2003db48 	.word	0x2003db48
   b4618:	2003dd9c 	.word	0x2003dd9c
   b461c:	2003dd58 	.word	0x2003dd58
   b4620:	2003dd8d 	.word	0x2003dd8d
   b4624:	000c6ccc 	.word	0x000c6ccc

000b4628 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4628:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b462a:	460a      	mov	r2, r1
   b462c:	4901      	ldr	r1, [pc, #4]	; (b4634 <_ZN7FatFile4openEPKci+0xc>)
   b462e:	6809      	ldr	r1, [r1, #0]
   b4630:	f002 bc07 	b.w	b6e42 <_ZN7FatFile4openEPS_PKci>
   b4634:	2003e610 	.word	0x2003e610

000b4638 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4638:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b463a:	f009 fcc1 	bl	bdfc0 <spark_cloud_flag_connected>
   b463e:	4c2b      	ldr	r4, [pc, #172]	; (b46ec <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4640:	b1e0      	cbz	r0, b467c <_Z11wdogHandlerv+0x44>
   b4642:	2301      	movs	r3, #1
        LTEAvail = false;
   b4644:	7023      	strb	r3, [r4, #0]
   b4646:	f009 fa65 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b464a:	4b29      	ldr	r3, [pc, #164]	; (b46f0 <_Z11wdogHandlerv+0xb8>)
   b464c:	4c29      	ldr	r4, [pc, #164]	; (b46f4 <_Z11wdogHandlerv+0xbc>)
   b464e:	681b      	ldr	r3, [r3, #0]
   b4650:	f247 5230 	movw	r2, #30000	; 0x7530
   b4654:	1ac0      	subs	r0, r0, r3
   b4656:	4290      	cmp	r0, r2
   b4658:	d823      	bhi.n	b46a2 <_Z11wdogHandlerv+0x6a>
   b465a:	b313      	cbz	r3, b46a2 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b465c:	2301      	movs	r3, #1
        XBeeAvail = false;
   b465e:	7023      	strb	r3, [r4, #0]
   b4660:	f009 fa58 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b4664:	4b24      	ldr	r3, [pc, #144]	; (b46f8 <_Z11wdogHandlerv+0xc0>)
   b4666:	4c25      	ldr	r4, [pc, #148]	; (b46fc <_Z11wdogHandlerv+0xc4>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	f247 5230 	movw	r2, #30000	; 0x7530
   b466e:	1ac0      	subs	r0, r0, r3
   b4670:	4290      	cmp	r0, r2
   b4672:	d828      	bhi.n	b46c6 <_Z11wdogHandlerv+0x8e>
   b4674:	b33b      	cbz	r3, b46c6 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b4676:	2301      	movs	r3, #1
        BLEAvail = false;
   b4678:	7023      	strb	r3, [r4, #0]
}
   b467a:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b467c:	7823      	ldrb	r3, [r4, #0]
   b467e:	2b00      	cmp	r3, #0
   b4680:	d0e1      	beq.n	b4646 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4682:	481f      	ldr	r0, [pc, #124]	; (b4700 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4684:	7c03      	ldrb	r3, [r0, #16]
   b4686:	b92b      	cbnz	r3, b4694 <_Z11wdogHandlerv+0x5c>
   b4688:	491e      	ldr	r1, [pc, #120]	; (b4704 <_Z11wdogHandlerv+0xcc>)
   b468a:	f244 2202 	movw	r2, #16898	; 0x4202
   b468e:	3010      	adds	r0, #16
   b4690:	f7ff ffca 	bl	b4628 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4694:	491c      	ldr	r1, [pc, #112]	; (b4708 <_Z11wdogHandlerv+0xd0>)
   b4696:	481a      	ldr	r0, [pc, #104]	; (b4700 <_Z11wdogHandlerv+0xc8>)
   b4698:	221e      	movs	r2, #30
   b469a:	f7ff fe69 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b469e:	2300      	movs	r3, #0
   b46a0:	e7d0      	b.n	b4644 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b46a2:	7823      	ldrb	r3, [r4, #0]
   b46a4:	b16b      	cbz	r3, b46c2 <_Z11wdogHandlerv+0x8a>
   b46a6:	4816      	ldr	r0, [pc, #88]	; (b4700 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46a8:	7c03      	ldrb	r3, [r0, #16]
   b46aa:	b92b      	cbnz	r3, b46b8 <_Z11wdogHandlerv+0x80>
   b46ac:	4915      	ldr	r1, [pc, #84]	; (b4704 <_Z11wdogHandlerv+0xcc>)
   b46ae:	f244 2202 	movw	r2, #16898	; 0x4202
   b46b2:	3010      	adds	r0, #16
   b46b4:	f7ff ffb8 	bl	b4628 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b46b8:	4913      	ldr	r1, [pc, #76]	; (b4708 <_Z11wdogHandlerv+0xd0>)
   b46ba:	4811      	ldr	r0, [pc, #68]	; (b4700 <_Z11wdogHandlerv+0xc8>)
   b46bc:	221e      	movs	r2, #30
   b46be:	f7ff fe57 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b46c2:	2300      	movs	r3, #0
   b46c4:	e7cb      	b.n	b465e <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b46c6:	7822      	ldrb	r2, [r4, #0]
   b46c8:	b172      	cbz	r2, b46e8 <_Z11wdogHandlerv+0xb0>
   b46ca:	b16b      	cbz	r3, b46e8 <_Z11wdogHandlerv+0xb0>
   b46cc:	480c      	ldr	r0, [pc, #48]	; (b4700 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46ce:	7c03      	ldrb	r3, [r0, #16]
   b46d0:	b92b      	cbnz	r3, b46de <_Z11wdogHandlerv+0xa6>
   b46d2:	490c      	ldr	r1, [pc, #48]	; (b4704 <_Z11wdogHandlerv+0xcc>)
   b46d4:	f244 2202 	movw	r2, #16898	; 0x4202
   b46d8:	3010      	adds	r0, #16
   b46da:	f7ff ffa5 	bl	b4628 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b46de:	490b      	ldr	r1, [pc, #44]	; (b470c <_Z11wdogHandlerv+0xd4>)
   b46e0:	4807      	ldr	r0, [pc, #28]	; (b4700 <_Z11wdogHandlerv+0xc8>)
   b46e2:	221e      	movs	r2, #30
   b46e4:	f7ff fe44 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b46e8:	2300      	movs	r3, #0
   b46ea:	e7c5      	b.n	b4678 <_Z11wdogHandlerv+0x40>
   b46ec:	2003dd8d 	.word	0x2003dd8d
   b46f0:	2003dda0 	.word	0x2003dda0
   b46f4:	2003dd9c 	.word	0x2003dd9c
   b46f8:	2003dd64 	.word	0x2003dd64
   b46fc:	2003dd58 	.word	0x2003dd58
   b4700:	2003de9c 	.word	0x2003de9c
   b4704:	2003ddef 	.word	0x2003ddef
   b4708:	000c663e 	.word	0x000c663e
   b470c:	000c668f 	.word	0x000c668f

000b4710 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4710:	b530      	push	{r4, r5, lr}
   b4712:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4714:	4b1b      	ldr	r3, [pc, #108]	; (b4784 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4716:	9300      	str	r3, [sp, #0]
   b4718:	7913      	ldrb	r3, [r2, #4]
   b471a:	f88d 3004 	strb.w	r3, [sp, #4]
   b471e:	6893      	ldr	r3, [r2, #8]
   b4720:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4722:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4726:	8993      	ldrh	r3, [r2, #12]
   b4728:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b472c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b472e:	460a      	mov	r2, r1
   b4730:	466b      	mov	r3, sp
   b4732:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4736:	4628      	mov	r0, r5
   b4738:	f003 fab4 	bl	b7ca4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b473c:	b910      	cbnz	r0, b4744 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b473e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4740:	b005      	add	sp, #20
   b4742:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4744:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4746:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b474a:	4628      	mov	r0, r5
   b474c:	f002 fb72 	bl	b6e34 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4750:	2101      	movs	r1, #1
   b4752:	4620      	mov	r0, r4
   b4754:	f003 f951 	bl	b79fa <_ZN9FatVolume4initEh>
   b4758:	4601      	mov	r1, r0
   b475a:	b168      	cbz	r0, b4778 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b475c:	4621      	mov	r1, r4
   b475e:	4628      	mov	r0, r5
   b4760:	f002 f962 	bl	b6a28 <_ZN7FatFile8openRootEP9FatVolume>
   b4764:	2800      	cmp	r0, #0
   b4766:	d0ea      	beq.n	b473e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4768:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b476c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4770:	d0e5      	beq.n	b473e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4772:	4b05      	ldr	r3, [pc, #20]	; (b4788 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4774:	601d      	str	r5, [r3, #0]
    return true;
   b4776:	e7e3      	b.n	b4740 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4778:	4620      	mov	r0, r4
   b477a:	f003 f93e 	bl	b79fa <_ZN9FatVolume4initEh>
   b477e:	2800      	cmp	r0, #0
   b4780:	d1ec      	bne.n	b475c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4782:	e7dc      	b.n	b473e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4784:	000c6b84 	.word	0x000c6b84
   b4788:	2003e610 	.word	0x2003e610

000b478c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4790:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4792:	7883      	ldrb	r3, [r0, #2]
   b4794:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4796:	af04      	add	r7, sp, #16
   b4798:	4604      	mov	r4, r0
   b479a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b479c:	d14d      	bne.n	b483a <_Z14processCommandPKchb+0xae>
   b479e:	78c3      	ldrb	r3, [r0, #3]
   b47a0:	2b42      	cmp	r3, #66	; 0x42
   b47a2:	d176      	bne.n	b4892 <_Z14processCommandPKchb+0x106>
        char dataStr[strlen(command)-8];
   b47a4:	4620      	mov	r0, r4
   b47a6:	f00f fe9a 	bl	c44de <strlen>
   b47aa:	3801      	subs	r0, #1
   b47ac:	f020 0007 	bic.w	r0, r0, #7
        }
   b47b0:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b47b2:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b47b6:	4620      	mov	r0, r4
   b47b8:	f00f fe91 	bl	c44de <strlen>
        char dataStr[strlen(command)-8];
   b47bc:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b47be:	4428      	add	r0, r5
   b47c0:	2600      	movs	r6, #0
   b47c2:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47c6:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b47c8:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47ca:	813e      	strh	r6, [r7, #8]
   b47cc:	72be      	strb	r6, [r7, #10]
   b47ce:	f00f fe86 	bl	c44de <strlen>
   b47d2:	4420      	add	r0, r4
   b47d4:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b47d8:	723b      	strb	r3, [r7, #8]
   b47da:	4620      	mov	r0, r4
   b47dc:	f00f fe7f 	bl	c44de <strlen>
   b47e0:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47e2:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b47e4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b47e8:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b47ea:	2210      	movs	r2, #16
   b47ec:	f107 0008 	add.w	r0, r7, #8
   b47f0:	f010 fd9e 	bl	c5330 <strtol>
   b47f4:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b47f6:	fa5f f888 	uxtb.w	r8, r8
   b47fa:	f00d f9fd 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b47fe:	49ac      	ldr	r1, [pc, #688]	; (b4ab0 <_Z14processCommandPKchb+0x324>)
   b4800:	4643      	mov	r3, r8
   b4802:	4642      	mov	r2, r8
   b4804:	f7ff fdb4 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4808:	2604      	movs	r6, #4
   b480a:	4620      	mov	r0, r4
   b480c:	f00f fe67 	bl	c44de <strlen>
   b4810:	3802      	subs	r0, #2
   b4812:	4286      	cmp	r6, r0
   b4814:	d216      	bcs.n	b4844 <_Z14processCommandPKchb+0xb8>
            if(i < 7) cmdStr[i-4] = command[i];
   b4816:	2e06      	cmp	r6, #6
   b4818:	bf9b      	ittet	ls
   b481a:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b481e:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4820:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4822:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b4824:	bf8c      	ite	hi
   b4826:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b4828:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b482c:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4830:	bf88      	it	hi
   b4832:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4836:	b2f6      	uxtb	r6, r6
   b4838:	e7e7      	b.n	b480a <_Z14processCommandPKchb+0x7e>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b483a:	2b42      	cmp	r3, #66	; 0x42
   b483c:	d129      	bne.n	b4892 <_Z14processCommandPKchb+0x106>
   b483e:	78c3      	ldrb	r3, [r0, #3]
   b4840:	2b31      	cmp	r3, #49	; 0x31
   b4842:	e7ae      	b.n	b47a2 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b4844:	4540      	cmp	r0, r8
   b4846:	d02e      	beq.n	b48a6 <_Z14processCommandPKchb+0x11a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4848:	f00d f9d6 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b484c:	4605      	mov	r5, r0
   b484e:	4620      	mov	r0, r4
   b4850:	f00f fe45 	bl	c44de <strlen>
   b4854:	1e82      	subs	r2, r0, #2
   b4856:	4628      	mov	r0, r5
    return m_attr;
   b4858:	4d96      	ldr	r5, [pc, #600]	; (b4ab4 <_Z14processCommandPKchb+0x328>)
   b485a:	4997      	ldr	r1, [pc, #604]	; (b4ab8 <_Z14processCommandPKchb+0x32c>)
   b485c:	4643      	mov	r3, r8
   b485e:	f7ff fd87 	bl	b4370 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4862:	7c2b      	ldrb	r3, [r5, #16]
   b4864:	b9cb      	cbnz	r3, b489a <_Z14processCommandPKchb+0x10e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4866:	4995      	ldr	r1, [pc, #596]	; (b4abc <_Z14processCommandPKchb+0x330>)
   b4868:	f244 2202 	movw	r2, #16898	; 0x4202
   b486c:	f105 0010 	add.w	r0, r5, #16
   b4870:	f7ff feda 	bl	b4628 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4874:	4992      	ldr	r1, [pc, #584]	; (b4ac0 <_Z14processCommandPKchb+0x334>)
   b4876:	4622      	mov	r2, r4
   b4878:	4628      	mov	r0, r5
   b487a:	f7ff fd79 	bl	b4370 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b487e:	f105 0010 	add.w	r0, r5, #16
   b4882:	f002 fad7 	bl	b6e34 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4886:	f00d f9b7 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b488a:	498e      	ldr	r1, [pc, #568]	; (b4ac4 <_Z14processCommandPKchb+0x338>)
   b488c:	f00c fcf3 	bl	c1276 <_ZN5Print7printlnEPKc>
            return;
   b4890:	46cd      	mov	sp, r9
}
   b4892:	3728      	adds	r7, #40	; 0x28
   b4894:	46bd      	mov	sp, r7
   b4896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b489a:	4989      	ldr	r1, [pc, #548]	; (b4ac0 <_Z14processCommandPKchb+0x334>)
   b489c:	4622      	mov	r2, r4
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff fd66 	bl	b4370 <_ZN5Print8printlnfEPKcz>
   b48a4:	e7ef      	b.n	b4886 <_Z14processCommandPKchb+0xfa>
        if(!strcmp(cmdStr,"ctl")){
   b48a6:	4988      	ldr	r1, [pc, #544]	; (b4ac8 <_Z14processCommandPKchb+0x33c>)
   b48a8:	f107 000c 	add.w	r0, r7, #12
   b48ac:	f00f fde8 	bl	c4480 <strcmp>
   b48b0:	2800      	cmp	r0, #0
   b48b2:	d139      	bne.n	b4928 <_Z14processCommandPKchb+0x19c>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b48b4:	4b85      	ldr	r3, [pc, #532]	; (b4acc <_Z14processCommandPKchb+0x340>)
   b48b6:	9302      	str	r3, [sp, #8]
   b48b8:	4b85      	ldr	r3, [pc, #532]	; (b4ad0 <_Z14processCommandPKchb+0x344>)
   b48ba:	9301      	str	r3, [sp, #4]
   b48bc:	4b85      	ldr	r3, [pc, #532]	; (b4ad4 <_Z14processCommandPKchb+0x348>)
   b48be:	4986      	ldr	r1, [pc, #536]	; (b4ad8 <_Z14processCommandPKchb+0x34c>)
   b48c0:	9300      	str	r3, [sp, #0]
   b48c2:	f107 0210 	add.w	r2, r7, #16
   b48c6:	f107 031c 	add.w	r3, r7, #28
   b48ca:	4628      	mov	r0, r5
   b48cc:	f009 fc20 	bl	be110 <sscanf>
            targetLat = atof(tLat);
   b48d0:	f107 0010 	add.w	r0, r7, #16
   b48d4:	f00f fd30 	bl	c4338 <atof>
   b48d8:	ec51 0b10 	vmov	r0, r1, d0
   b48dc:	f00f fcb8 	bl	c4250 <__aeabi_d2f>
   b48e0:	f8df 825c 	ldr.w	r8, [pc, #604]	; b4b40 <_Z14processCommandPKchb+0x3b4>
            targetLon = atof(tLon);
   b48e4:	4e7d      	ldr	r6, [pc, #500]	; (b4adc <_Z14processCommandPKchb+0x350>)
            targetLat = atof(tLat);
   b48e6:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);
   b48ea:	f107 001c 	add.w	r0, r7, #28
   b48ee:	f00f fd23 	bl	c4338 <atof>
   b48f2:	ec51 0b10 	vmov	r0, r1, d0
   b48f6:	f00f fcab 	bl	c4250 <__aeabi_d2f>
   b48fa:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b48fc:	f00d f97c 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b4900:	4604      	mov	r4, r0
   b4902:	f8d8 0000 	ldr.w	r0, [r8]
   b4906:	f00f f953 	bl	c3bb0 <__aeabi_f2d>
   b490a:	4602      	mov	r2, r0
   b490c:	460b      	mov	r3, r1
   b490e:	6830      	ldr	r0, [r6, #0]
   b4910:	e9c7 2300 	strd	r2, r3, [r7]
   b4914:	f00f f94c 	bl	c3bb0 <__aeabi_f2d>
   b4918:	e9cd 0100 	strd	r0, r1, [sp]
   b491c:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4920:	496f      	ldr	r1, [pc, #444]	; (b4ae0 <_Z14processCommandPKchb+0x354>)
   b4922:	4620      	mov	r0, r4
   b4924:	f7ff fd24 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4928:	496e      	ldr	r1, [pc, #440]	; (b4ae4 <_Z14processCommandPKchb+0x358>)
   b492a:	f107 000c 	add.w	r0, r7, #12
   b492e:	f00f fda7 	bl	c4480 <strcmp>
   b4932:	2800      	cmp	r0, #0
   b4934:	d13d      	bne.n	b49b2 <_Z14processCommandPKchb+0x226>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4936:	782b      	ldrb	r3, [r5, #0]
   b4938:	743b      	strb	r3, [r7, #16]
   b493a:	786b      	ldrb	r3, [r5, #1]
   b493c:	747b      	strb	r3, [r7, #17]
   b493e:	78ab      	ldrb	r3, [r5, #2]
   b4940:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b4942:	78eb      	ldrb	r3, [r5, #3]
   b4944:	773b      	strb	r3, [r7, #28]
   b4946:	792b      	ldrb	r3, [r5, #4]
   b4948:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);
   b494a:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b494e:	796b      	ldrb	r3, [r5, #5]
   b4950:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);
   b4952:	f00f fcf4 	bl	c433e <atoi>
   b4956:	4d64      	ldr	r5, [pc, #400]	; (b4ae8 <_Z14processCommandPKchb+0x35c>)
            setRSpeed = atoi(rSpd);
   b4958:	4c64      	ldr	r4, [pc, #400]	; (b4aec <_Z14processCommandPKchb+0x360>)
            setLSpeed = atoi(lSpd);
   b495a:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b495c:	f107 001c 	add.w	r0, r7, #28
   b4960:	f00f fced 	bl	c433e <atoi>
   b4964:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4966:	f00d f947 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b496a:	782a      	ldrb	r2, [r5, #0]
   b496c:	7823      	ldrb	r3, [r4, #0]
   b496e:	4960      	ldr	r1, [pc, #384]	; (b4af0 <_Z14processCommandPKchb+0x364>)
   b4970:	f7ff fcfe 	bl	b4370 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4974:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b4976:	485f      	ldr	r0, [pc, #380]	; (b4af4 <_Z14processCommandPKchb+0x368>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4978:	3b5b      	subs	r3, #91	; 0x5b
   b497a:	2b20      	cmp	r3, #32
   b497c:	bf9c      	itt	ls
   b497e:	237b      	movls	r3, #123	; 0x7b
   b4980:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4982:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b4984:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4986:	3b5b      	subs	r3, #91	; 0x5b
   b4988:	2b20      	cmp	r3, #32
   b498a:	bf9c      	itt	ls
   b498c:	237b      	movls	r3, #123	; 0x7b
   b498e:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b4990:	f00c fce3 	bl	c135a <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b4994:	7821      	ldrb	r1, [r4, #0]
   b4996:	4858      	ldr	r0, [pc, #352]	; (b4af8 <_Z14processCommandPKchb+0x36c>)
   b4998:	f00c fcdf 	bl	c135a <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b499c:	4b57      	ldr	r3, [pc, #348]	; (b4afc <_Z14processCommandPKchb+0x370>)
   b499e:	2201      	movs	r2, #1
   b49a0:	701a      	strb	r2, [r3, #0]
   b49a2:	f009 f8b7 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b49a6:	4b56      	ldr	r3, [pc, #344]	; (b4b00 <_Z14processCommandPKchb+0x374>)
   b49a8:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b49aa:	4b4a      	ldr	r3, [pc, #296]	; (b4ad4 <_Z14processCommandPKchb+0x348>)
   b49ac:	2200      	movs	r2, #0
   b49ae:	701a      	strb	r2, [r3, #0]
   b49b0:	e76e      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b49b2:	4954      	ldr	r1, [pc, #336]	; (b4b04 <_Z14processCommandPKchb+0x378>)
   b49b4:	f107 000c 	add.w	r0, r7, #12
   b49b8:	f00f fd62 	bl	c4480 <strcmp>
   b49bc:	b918      	cbnz	r0, b49c6 <_Z14processCommandPKchb+0x23a>
            requestActive = mode;
   b49be:	4b52      	ldr	r3, [pc, #328]	; (b4b08 <_Z14processCommandPKchb+0x37c>)
   b49c0:	f883 a000 	strb.w	sl, [r3]
   b49c4:	e764      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"pts")){
   b49c6:	4951      	ldr	r1, [pc, #324]	; (b4b0c <_Z14processCommandPKchb+0x380>)
   b49c8:	f107 000c 	add.w	r0, r7, #12
   b49cc:	f00f fd58 	bl	c4480 <strcmp>
   b49d0:	b9f0      	cbnz	r0, b4a10 <_Z14processCommandPKchb+0x284>
   b49d2:	4c38      	ldr	r4, [pc, #224]	; (b4ab4 <_Z14processCommandPKchb+0x328>)
            Serial.println(dataStr);
   b49d4:	f00d f910 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b49d8:	4629      	mov	r1, r5
   b49da:	f00c fc4c 	bl	c1276 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b49de:	7c23      	ldrb	r3, [r4, #16]
   b49e0:	b983      	cbnz	r3, b4a04 <_Z14processCommandPKchb+0x278>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49e2:	4936      	ldr	r1, [pc, #216]	; (b4abc <_Z14processCommandPKchb+0x330>)
   b49e4:	f244 2202 	movw	r2, #16898	; 0x4202
   b49e8:	f104 0010 	add.w	r0, r4, #16
   b49ec:	f7ff fe1c 	bl	b4628 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b49f0:	4947      	ldr	r1, [pc, #284]	; (b4b10 <_Z14processCommandPKchb+0x384>)
   b49f2:	462a      	mov	r2, r5
   b49f4:	4620      	mov	r0, r4
   b49f6:	f7ff fcbb 	bl	b4370 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b49fa:	f104 0010 	add.w	r0, r4, #16
   b49fe:	f002 fa19 	bl	b6e34 <_ZN7FatFile5closeEv>
   b4a02:	e745      	b.n	b4890 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a04:	4942      	ldr	r1, [pc, #264]	; (b4b10 <_Z14processCommandPKchb+0x384>)
   b4a06:	462a      	mov	r2, r5
   b4a08:	4620      	mov	r0, r4
   b4a0a:	f7ff fcb1 	bl	b4370 <_ZN5Print8printlnfEPKcz>
   b4a0e:	e73f      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4a10:	4940      	ldr	r1, [pc, #256]	; (b4b14 <_Z14processCommandPKchb+0x388>)
   b4a12:	f107 000c 	add.w	r0, r7, #12
   b4a16:	f00f fd33 	bl	c4480 <strcmp>
   b4a1a:	b920      	cbnz	r0, b4a26 <_Z14processCommandPKchb+0x29a>
   b4a1c:	f009 f87a 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4a20:	4b3d      	ldr	r3, [pc, #244]	; (b4b18 <_Z14processCommandPKchb+0x38c>)
   b4a22:	6018      	str	r0, [r3, #0]
   b4a24:	e734      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"hwa")){
   b4a26:	493d      	ldr	r1, [pc, #244]	; (b4b1c <_Z14processCommandPKchb+0x390>)
   b4a28:	f107 000c 	add.w	r0, r7, #12
   b4a2c:	f00f fd28 	bl	c4480 <strcmp>
   b4a30:	b910      	cbnz	r0, b4a38 <_Z14processCommandPKchb+0x2ac>
            waitForConnection = false;
   b4a32:	4b3b      	ldr	r3, [pc, #236]	; (b4b20 <_Z14processCommandPKchb+0x394>)
   b4a34:	7018      	strb	r0, [r3, #0]
   b4a36:	e72b      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b4a38:	493a      	ldr	r1, [pc, #232]	; (b4b24 <_Z14processCommandPKchb+0x398>)
   b4a3a:	f107 000c 	add.w	r0, r7, #12
   b4a3e:	f00f fd1f 	bl	c4480 <strcmp>
   b4a42:	b978      	cbnz	r0, b4a64 <_Z14processCommandPKchb+0x2d8>
            offloadMode = true;
   b4a44:	4b38      	ldr	r3, [pc, #224]	; (b4b28 <_Z14processCommandPKchb+0x39c>)
            status.setSpeed(LED_SPEED_FAST);
   b4a46:	4839      	ldr	r0, [pc, #228]	; (b4b2c <_Z14processCommandPKchb+0x3a0>)
            offloadMode = true;
   b4a48:	2201      	movs	r2, #1
   b4a4a:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4a4c:	4b37      	ldr	r3, [pc, #220]	; (b4b2c <_Z14processCommandPKchb+0x3a0>)
   b4a4e:	7c5a      	ldrb	r2, [r3, #17]
   b4a50:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4a52:	bf1c      	itt	ne
   b4a54:	2202      	movne	r2, #2
   b4a56:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4a58:	211e      	movs	r1, #30
    d_.color = color;
   b4a5a:	22ff      	movs	r2, #255	; 0xff
   b4a5c:	615a      	str	r2, [r3, #20]
   b4a5e:	f7ff fd77 	bl	b4550 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4a62:	e715      	b.n	b4890 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"egp")){ //Emulated GPS point
   b4a64:	4932      	ldr	r1, [pc, #200]	; (b4b30 <_Z14processCommandPKchb+0x3a4>)
   b4a66:	f107 000c 	add.w	r0, r7, #12
   b4a6a:	f00f fd09 	bl	c4480 <strcmp>
   b4a6e:	2800      	cmp	r0, #0
   b4a70:	f47f af0e 	bne.w	b4890 <_Z14processCommandPKchb+0x104>
            sscanf(dataStr,"%s %s",tLat,tLon);
   b4a74:	f107 0210 	add.w	r2, r7, #16
   b4a78:	f107 031c 	add.w	r3, r7, #28
   b4a7c:	492d      	ldr	r1, [pc, #180]	; (b4b34 <_Z14processCommandPKchb+0x3a8>)
   b4a7e:	4628      	mov	r0, r5
   b4a80:	f009 fb46 	bl	be110 <sscanf>
            latitude = atof(tLat);
   b4a84:	f107 0010 	add.w	r0, r7, #16
   b4a88:	f00f fc56 	bl	c4338 <atof>
   b4a8c:	ec51 0b10 	vmov	r0, r1, d0
   b4a90:	f00f fbde 	bl	c4250 <__aeabi_d2f>
   b4a94:	4b28      	ldr	r3, [pc, #160]	; (b4b38 <_Z14processCommandPKchb+0x3ac>)
   b4a96:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4a98:	f107 001c 	add.w	r0, r7, #28
   b4a9c:	f00f fc4c 	bl	c4338 <atof>
   b4aa0:	ec51 0b10 	vmov	r0, r1, d0
   b4aa4:	f00f fbd4 	bl	c4250 <__aeabi_d2f>
   b4aa8:	4b24      	ldr	r3, [pc, #144]	; (b4b3c <_Z14processCommandPKchb+0x3b0>)
   b4aaa:	6018      	str	r0, [r3, #0]
   b4aac:	e6f0      	b.n	b4890 <_Z14processCommandPKchb+0x104>
   b4aae:	bf00      	nop
   b4ab0:	000c66de 	.word	0x000c66de
   b4ab4:	2003de9c 	.word	0x2003de9c
   b4ab8:	000c66f3 	.word	0x000c66f3
   b4abc:	2003ddef 	.word	0x2003ddef
   b4ac0:	000c6710 	.word	0x000c6710
   b4ac4:	000c673c 	.word	0x000c673c
   b4ac8:	000c675d 	.word	0x000c675d
   b4acc:	2003e582 	.word	0x2003e582
   b4ad0:	2003def5 	.word	0x2003def5
   b4ad4:	2003db48 	.word	0x2003db48
   b4ad8:	000c6761 	.word	0x000c6761
   b4adc:	2003e5d4 	.word	0x2003e5d4
   b4ae0:	000c6770 	.word	0x000c6770
   b4ae4:	000c6790 	.word	0x000c6790
   b4ae8:	2003e580 	.word	0x2003e580
   b4aec:	2003e581 	.word	0x2003e581
   b4af0:	000c6794 	.word	0x000c6794
   b4af4:	2003dd6c 	.word	0x2003dd6c
   b4af8:	2003dd7c 	.word	0x2003dd7c
   b4afc:	2003e5ec 	.word	0x2003e5ec
   b4b00:	2003de10 	.word	0x2003de10
   b4b04:	000c67c0 	.word	0x000c67c0
   b4b08:	2003e0d8 	.word	0x2003e0d8
   b4b0c:	000c67c4 	.word	0x000c67c4
   b4b10:	000c67c8 	.word	0x000c67c8
   b4b14:	000c67eb 	.word	0x000c67eb
   b4b18:	2003de14 	.word	0x2003de14
   b4b1c:	000c67ef 	.word	0x000c67ef
   b4b20:	2003e5ed 	.word	0x2003e5ed
   b4b24:	000c67f3 	.word	0x000c67f3
   b4b28:	2003e0d0 	.word	0x2003e0d0
   b4b2c:	2003e588 	.word	0x2003e588
   b4b30:	000c67f7 	.word	0x000c67f7
   b4b34:	000c67fb 	.word	0x000c67fb
   b4b38:	2003de1c 	.word	0x2003de1c
   b4b3c:	2003def8 	.word	0x2003def8
   b4b40:	2003e5d0 	.word	0x2003e5d0

000b4b44 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4b44:	b510      	push	{r4, lr}
   b4b46:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4b48:	2200      	movs	r2, #0
   b4b4a:	2104      	movs	r1, #4
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	f7ff fe1d 	bl	b478c <_Z14processCommandPKchb>
    if(logMessages){
   b4b52:	4b0b      	ldr	r3, [pc, #44]	; (b4b80 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4b54:	781b      	ldrb	r3, [r3, #0]
   b4b56:	b193      	cbz	r3, b4b7e <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4b58:	480a      	ldr	r0, [pc, #40]	; (b4b84 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4b5a:	7c03      	ldrb	r3, [r0, #16]
   b4b5c:	b92b      	cbnz	r3, b4b6a <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4b5e:	490a      	ldr	r1, [pc, #40]	; (b4b88 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4b60:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b64:	3010      	adds	r0, #16
   b4b66:	f7ff fd5f 	bl	b4628 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4b6a:	4622      	mov	r2, r4
   b4b6c:	4907      	ldr	r1, [pc, #28]	; (b4b8c <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4b6e:	4805      	ldr	r0, [pc, #20]	; (b4b84 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4b70:	f7ff fbfe 	bl	b4370 <_ZN5Print8printlnfEPKcz>
}
   b4b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4b78:	4805      	ldr	r0, [pc, #20]	; (b4b90 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4b7a:	f002 b95b 	b.w	b6e34 <_ZN7FatFile5closeEv>
}
   b4b7e:	bd10      	pop	{r4, pc}
   b4b80:	2003def4 	.word	0x2003def4
   b4b84:	2003de9c 	.word	0x2003de9c
   b4b88:	2003ddef 	.word	0x2003ddef
   b4b8c:	000c6801 	.word	0x000c6801
   b4b90:	2003deac 	.word	0x2003deac

000b4b94 <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b4b94:	b500      	push	{lr}
   b4b96:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4b98:	2300      	movs	r3, #0
   b4b9a:	2264      	movs	r2, #100	; 0x64
   b4b9c:	a901      	add	r1, sp, #4
   b4b9e:	f00c fe79 	bl	c1894 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4ba2:	2104      	movs	r1, #4
   b4ba4:	2200      	movs	r2, #0
   b4ba6:	eb0d 0001 	add.w	r0, sp, r1
   b4baa:	f7ff fdef 	bl	b478c <_Z14processCommandPKchb>
    if(logMessages){
   b4bae:	4b0c      	ldr	r3, [pc, #48]	; (b4be0 <_Z15LTEInputCommand6String+0x4c>)
   b4bb0:	781b      	ldrb	r3, [r3, #0]
   b4bb2:	b183      	cbz	r3, b4bd6 <_Z15LTEInputCommand6String+0x42>
   b4bb4:	480b      	ldr	r0, [pc, #44]	; (b4be4 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bb6:	7c03      	ldrb	r3, [r0, #16]
   b4bb8:	b92b      	cbnz	r3, b4bc6 <_Z15LTEInputCommand6String+0x32>
   b4bba:	490b      	ldr	r1, [pc, #44]	; (b4be8 <_Z15LTEInputCommand6String+0x54>)
   b4bbc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4bc0:	3010      	adds	r0, #16
   b4bc2:	f7ff fd31 	bl	b4628 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4bc6:	4909      	ldr	r1, [pc, #36]	; (b4bec <_Z15LTEInputCommand6String+0x58>)
   b4bc8:	4806      	ldr	r0, [pc, #24]	; (b4be4 <_Z15LTEInputCommand6String+0x50>)
   b4bca:	aa01      	add	r2, sp, #4
   b4bcc:	f7ff fbd0 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4bd0:	4807      	ldr	r0, [pc, #28]	; (b4bf0 <_Z15LTEInputCommand6String+0x5c>)
   b4bd2:	f002 f92f 	bl	b6e34 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4bd6:	2001      	movs	r0, #1
   b4bd8:	b01b      	add	sp, #108	; 0x6c
   b4bda:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bde:	bf00      	nop
   b4be0:	2003def4 	.word	0x2003def4
   b4be4:	2003de9c 	.word	0x2003de9c
   b4be8:	2003ddef 	.word	0x2003ddef
   b4bec:	000c6801 	.word	0x000c6801
   b4bf0:	2003deac 	.word	0x2003deac

000b4bf4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4bf4:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4bf6:	f101 0308 	add.w	r3, r1, #8
   b4bfa:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4bfe:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4c00:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c04:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4c06:	460a      	mov	r2, r1
   b4c08:	4601      	mov	r1, r0
   b4c0a:	4668      	mov	r0, sp
   b4c0c:	f00f fbb4 	bl	c4378 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c10:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4c14:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4c1a:	b113      	cbz	r3, b4c22 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4c1c:	2300      	movs	r3, #0
   b4c1e:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4c22:	f00c ffe9 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b4c26:	4916      	ldr	r1, [pc, #88]	; (b4c80 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4c28:	f00c fb25 	bl	c1276 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4c2c:	f00c ffe4 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b4c30:	4629      	mov	r1, r5
   b4c32:	f00c fb20 	bl	c1276 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4c36:	2201      	movs	r2, #1
   b4c38:	4611      	mov	r1, r2
   b4c3a:	4628      	mov	r0, r5
   b4c3c:	f7ff fda6 	bl	b478c <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4c40:	782b      	ldrb	r3, [r5, #0]
   b4c42:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4c46:	2b41      	cmp	r3, #65	; 0x41
   b4c48:	d103      	bne.n	b4c52 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4c4a:	f008 ff63 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b4c4e:	4b0d      	ldr	r3, [pc, #52]	; (b4c84 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4c50:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4c52:	4b0d      	ldr	r3, [pc, #52]	; (b4c88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4c54:	781b      	ldrb	r3, [r3, #0]
   b4c56:	b183      	cbz	r3, b4c7a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4c58:	480c      	ldr	r0, [pc, #48]	; (b4c8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c5a:	7c03      	ldrb	r3, [r0, #16]
   b4c5c:	b92b      	cbnz	r3, b4c6a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4c5e:	490c      	ldr	r1, [pc, #48]	; (b4c90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4c60:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c64:	3010      	adds	r0, #16
   b4c66:	f7ff fcdf 	bl	b4628 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4c6a:	490a      	ldr	r1, [pc, #40]	; (b4c94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4c6c:	4807      	ldr	r0, [pc, #28]	; (b4c8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4c6e:	462a      	mov	r2, r5
   b4c70:	f7ff fb7e 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c74:	4808      	ldr	r0, [pc, #32]	; (b4c98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4c76:	f002 f8dd 	bl	b6e34 <_ZN7FatFile5closeEv>
}
   b4c7a:	46bd      	mov	sp, r7
   b4c7c:	bdb0      	pop	{r4, r5, r7, pc}
   b4c7e:	bf00      	nop
   b4c80:	000c6821 	.word	0x000c6821
   b4c84:	2003dd64 	.word	0x2003dd64
   b4c88:	2003def4 	.word	0x2003def4
   b4c8c:	2003de9c 	.word	0x2003de9c
   b4c90:	2003ddef 	.word	0x2003ddef
   b4c94:	000c6831 	.word	0x000c6831
   b4c98:	2003deac 	.word	0x2003deac

000b4c9c <_Z9setupXBeev>:
void setupXBee(){
   b4c9c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4c9e:	f00d f943 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b4ca2:	4908      	ldr	r1, [pc, #32]	; (b4cc4 <_Z9setupXBeev+0x28>)
   b4ca4:	f7ff fb2c 	bl	b4300 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4ca8:	2014      	movs	r0, #20
   b4caa:	f009 fa85 	bl	be1b8 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4cae:	f00d f93b 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b4cb2:	4905      	ldr	r1, [pc, #20]	; (b4cc8 <_Z9setupXBeev+0x2c>)
   b4cb4:	f7ff fb24 	bl	b4300 <_ZN5Print6printfEPKcz>
}
   b4cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4cbc:	2014      	movs	r0, #20
   b4cbe:	f009 ba7b 	b.w	be1b8 <delay>
   b4cc2:	bf00      	nop
   b4cc4:	000c7d72 	.word	0x000c7d72
   b4cc8:	000c6565 	.word	0x000c6565

000b4ccc <_Z8setupGPSv>:
void setupGPS(){
   b4ccc:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4cce:	f00d f8eb 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b4cd2:	2300      	movs	r3, #0
   b4cd4:	4601      	mov	r1, r0
   b4cd6:	9300      	str	r3, [sp, #0]
   b4cd8:	4812      	ldr	r0, [pc, #72]	; (b4d24 <_Z8setupGPSv+0x58>)
   b4cda:	f240 434c 	movw	r3, #1100	; 0x44c
   b4cde:	2242      	movs	r2, #66	; 0x42
   b4ce0:	f008 fab2 	bl	bd248 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4ce4:	b940      	cbnz	r0, b4cf8 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4cea:	f009 fa65 	bl	be1b8 <delay>
        Serial.println("Error, Could not initialize GPS");
   b4cee:	f00c ff83 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b4cf2:	490d      	ldr	r1, [pc, #52]	; (b4d28 <_Z8setupGPSv+0x5c>)
   b4cf4:	f00c fabf 	bl	c1276 <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4cf8:	f240 424c 	movw	r2, #1100	; 0x44c
   b4cfc:	2101      	movs	r1, #1
   b4cfe:	4809      	ldr	r0, [pc, #36]	; (b4d24 <_Z8setupGPSv+0x58>)
   b4d00:	f008 f9d6 	bl	bd0b0 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4d04:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d08:	2201      	movs	r2, #1
   b4d0a:	2100      	movs	r1, #0
   b4d0c:	4805      	ldr	r0, [pc, #20]	; (b4d24 <_Z8setupGPSv+0x58>)
   b4d0e:	f008 f9af 	bl	bd070 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4d12:	f00d f8c9 	bl	c1ea8 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4d16:	4905      	ldr	r1, [pc, #20]	; (b4d2c <_Z8setupGPSv+0x60>)
}
   b4d18:	b003      	add	sp, #12
   b4d1a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4d1e:	f00a bf97 	b.w	bfc50 <_ZN7TwoWire8setSpeedEm>
   b4d22:	bf00      	nop
   b4d24:	2003df50 	.word	0x2003df50
   b4d28:	000c6851 	.word	0x000c6851
   b4d2c:	00061a80 	.word	0x00061a80

000b4d30 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4d30:	b510      	push	{r4, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4d32:	2015      	movs	r0, #21
   b4d34:	f00d f88a 	bl	c1e4c <analogRead>
   b4d38:	ee07 0a90 	vmov	s15, r0
   b4d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4d40:	4c37      	ldr	r4, [pc, #220]	; (b4e20 <_Z12readPowerSysv+0xf0>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4d42:	ee17 0a90 	vmov	r0, s15
   b4d46:	f00e ff33 	bl	c3bb0 <__aeabi_f2d>
   b4d4a:	a32d      	add	r3, pc, #180	; (adr r3, b4e00 <_Z12readPowerSysv+0xd0>)
   b4d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d50:	f00e ff86 	bl	c3c60 <__aeabi_dmul>
   b4d54:	f00f fa7c 	bl	c4250 <__aeabi_d2f>
   b4d58:	4b32      	ldr	r3, [pc, #200]	; (b4e24 <_Z12readPowerSysv+0xf4>)
   b4d5a:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4d5c:	f00e ff28 	bl	c3bb0 <__aeabi_f2d>
   b4d60:	a329      	add	r3, pc, #164	; (adr r3, b4e08 <_Z12readPowerSysv+0xd8>)
   b4d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d66:	f00e fdc3 	bl	c38f0 <__aeabi_dsub>
   b4d6a:	4b2f      	ldr	r3, [pc, #188]	; (b4e28 <_Z12readPowerSysv+0xf8>)
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	f00e ff77 	bl	c3c60 <__aeabi_dmul>
   b4d72:	a327      	add	r3, pc, #156	; (adr r3, b4e10 <_Z12readPowerSysv+0xe0>)
   b4d74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d78:	f00f f89c 	bl	c3eb4 <__aeabi_ddiv>
   b4d7c:	f00f fa20 	bl	c41c0 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4d80:	2864      	cmp	r0, #100	; 0x64
   b4d82:	4603      	mov	r3, r0
   b4d84:	bfa8      	it	ge
   b4d86:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4d8c:	2814      	cmp	r0, #20
   b4d8e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4d90:	4b26      	ldr	r3, [pc, #152]	; (b4e2c <_Z12readPowerSysv+0xfc>)
   b4d92:	bfcc      	ite	gt
   b4d94:	2000      	movgt	r0, #0
   b4d96:	2001      	movle	r0, #1
   b4d98:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4d9a:	2010      	movs	r0, #16
   b4d9c:	f00d f856 	bl	c1e4c <analogRead>
   b4da0:	ee07 0a90 	vmov	s15, r0
   b4da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4da8:	ee17 0a90 	vmov	r0, s15
   b4dac:	f00e ff00 	bl	c3bb0 <__aeabi_f2d>
   b4db0:	4b1f      	ldr	r3, [pc, #124]	; (b4e30 <_Z12readPowerSysv+0x100>)
   b4db2:	2200      	movs	r2, #0
   b4db4:	f00e ff54 	bl	c3c60 <__aeabi_dmul>
   b4db8:	a317      	add	r3, pc, #92	; (adr r3, b4e18 <_Z12readPowerSysv+0xe8>)
   b4dba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dbe:	f00f f879 	bl	c3eb4 <__aeabi_ddiv>
   b4dc2:	f00f fa45 	bl	c4250 <__aeabi_d2f>
   b4dc6:	4b1b      	ldr	r3, [pc, #108]	; (b4e34 <_Z12readPowerSysv+0x104>)
   b4dc8:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4dca:	2011      	movs	r0, #17
   b4dcc:	f00d f83e 	bl	c1e4c <analogRead>
   b4dd0:	ee07 0a90 	vmov	s15, r0
   b4dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4dd8:	ee17 0a90 	vmov	r0, s15
   b4ddc:	f00e fee8 	bl	c3bb0 <__aeabi_f2d>
   b4de0:	4b15      	ldr	r3, [pc, #84]	; (b4e38 <_Z12readPowerSysv+0x108>)
   b4de2:	2200      	movs	r2, #0
   b4de4:	f00e ff3c 	bl	c3c60 <__aeabi_dmul>
   b4de8:	a30b      	add	r3, pc, #44	; (adr r3, b4e18 <_Z12readPowerSysv+0xe8>)
   b4dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dee:	f00f f861 	bl	c3eb4 <__aeabi_ddiv>
   b4df2:	f00f fa2d 	bl	c4250 <__aeabi_d2f>
   b4df6:	4b11      	ldr	r3, [pc, #68]	; (b4e3c <_Z12readPowerSysv+0x10c>)
   b4df8:	6018      	str	r0, [r3, #0]
}
   b4dfa:	7820      	ldrb	r0, [r4, #0]
   b4dfc:	bd10      	pop	{r4, pc}
   b4dfe:	bf00      	nop
   b4e00:	6e04c059 	.word	0x6e04c059
   b4e04:	3f73cddd 	.word	0x3f73cddd
   b4e08:	66666666 	.word	0x66666666
   b4e0c:	402a6666 	.word	0x402a6666
   b4e10:	99999998 	.word	0x99999998
   b4e14:	40099999 	.word	0x40099999
   b4e18:	00000000 	.word	0x00000000
   b4e1c:	40affe00 	.word	0x40affe00
   b4e20:	2003ddb8 	.word	0x2003ddb8
   b4e24:	2003ddbc 	.word	0x2003ddbc
   b4e28:	40590000 	.word	0x40590000
   b4e2c:	2003defc 	.word	0x2003defc
   b4e30:	40408000 	.word	0x40408000
   b4e34:	2003ddb4 	.word	0x2003ddb4
   b4e38:	40308000 	.word	0x40308000
   b4e3c:	2003e584 	.word	0x2003e584

000b4e40 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b4e40:	b538      	push	{r3, r4, r5, lr}
   b4e42:	eef0 7a60 	vmov.f32	s15, s1
   b4e46:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4e4a:	eef0 0a40 	vmov.f32	s1, s0
   b4e4e:	eeb0 0a67 	vmov.f32	s0, s15
   b4e52:	f00d fa55 	bl	c2300 <atan2f>
   b4e56:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;
   b4e5a:	f00e fea9 	bl	c3bb0 <__aeabi_f2d>
   b4e5e:	4b8e      	ldr	r3, [pc, #568]	; (b5098 <_Z18readCompassHeadingff+0x258>)
   b4e60:	2200      	movs	r2, #0
   b4e62:	f00e fefd 	bl	c3c60 <__aeabi_dmul>
   b4e66:	a384      	add	r3, pc, #528	; (adr r3, b5078 <_Z18readCompassHeadingff+0x238>)
   b4e68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e6c:	f00f f822 	bl	c3eb4 <__aeabi_ddiv>
   b4e70:	f00f f9ee 	bl	c4250 <__aeabi_d2f>
   b4e74:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b4e78:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b4e7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e84:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b4e88:	db13      	blt.n	b4eb2 <_Z18readCompassHeadingff+0x72>
   b4e8a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e92:	d50e      	bpl.n	b4eb2 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4e94:	f00e fe8c 	bl	c3bb0 <__aeabi_f2d>
   b4e98:	4b80      	ldr	r3, [pc, #512]	; (b509c <_Z18readCompassHeadingff+0x25c>)
   b4e9a:	2200      	movs	r2, #0
   b4e9c:	f00e fd28 	bl	c38f0 <__aeabi_dsub>
   b4ea0:	4b7f      	ldr	r3, [pc, #508]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ea2:	2200      	movs	r2, #0
   b4ea4:	f00e fedc 	bl	c3c60 <__aeabi_dmul>
   b4ea8:	4b7e      	ldr	r3, [pc, #504]	; (b50a4 <_Z18readCompassHeadingff+0x264>)
   b4eaa:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4eac:	f00f f802 	bl	c3eb4 <__aeabi_ddiv>
   b4eb0:	e021      	b.n	b4ef6 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4eb2:	ee18 0a10 	vmov	r0, s16
   b4eb6:	f00e fe7b 	bl	c3bb0 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4eba:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ec2:	eddf 7a79 	vldr	s15, [pc, #484]	; b50a8 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4ec6:	4604      	mov	r4, r0
   b4ec8:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4eca:	db1b      	blt.n	b4f04 <_Z18readCompassHeadingff+0xc4>
   b4ecc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ed4:	d516      	bpl.n	b4f04 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b4ed6:	4b75      	ldr	r3, [pc, #468]	; (b50ac <_Z18readCompassHeadingff+0x26c>)
   b4ed8:	2200      	movs	r2, #0
   b4eda:	f00e fd09 	bl	c38f0 <__aeabi_dsub>
   b4ede:	4b70      	ldr	r3, [pc, #448]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ee0:	2200      	movs	r2, #0
   b4ee2:	f00e febd 	bl	c3c60 <__aeabi_dmul>
   b4ee6:	4b72      	ldr	r3, [pc, #456]	; (b50b0 <_Z18readCompassHeadingff+0x270>)
   b4ee8:	2200      	movs	r2, #0
   b4eea:	f00e ffe3 	bl	c3eb4 <__aeabi_ddiv>
   b4eee:	4b6c      	ldr	r3, [pc, #432]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4ef0:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4ef2:	f00e fcff 	bl	c38f4 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4ef6:	f00f f9ab 	bl	c4250 <__aeabi_d2f>
}
   b4efa:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4efe:	ee00 0a10 	vmov	s0, r0
}
   b4f02:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b4f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f0c:	eddf 7a69 	vldr	s15, [pc, #420]	; b50b4 <_Z18readCompassHeadingff+0x274>
   b4f10:	db15      	blt.n	b4f3e <_Z18readCompassHeadingff+0xfe>
   b4f12:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f1a:	d510      	bpl.n	b4f3e <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b4f1c:	4b66      	ldr	r3, [pc, #408]	; (b50b8 <_Z18readCompassHeadingff+0x278>)
   b4f1e:	2200      	movs	r2, #0
   b4f20:	4620      	mov	r0, r4
   b4f22:	4629      	mov	r1, r5
   b4f24:	f00e fce4 	bl	c38f0 <__aeabi_dsub>
   b4f28:	4b5d      	ldr	r3, [pc, #372]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	f00e fe98 	bl	c3c60 <__aeabi_dmul>
   b4f30:	4b62      	ldr	r3, [pc, #392]	; (b50bc <_Z18readCompassHeadingff+0x27c>)
   b4f32:	2200      	movs	r2, #0
   b4f34:	f00e ffbe 	bl	c3eb4 <__aeabi_ddiv>
   b4f38:	4b61      	ldr	r3, [pc, #388]	; (b50c0 <_Z18readCompassHeadingff+0x280>)
   b4f3a:	2200      	movs	r2, #0
   b4f3c:	e7d9      	b.n	b4ef2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b4f3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f46:	db18      	blt.n	b4f7a <_Z18readCompassHeadingff+0x13a>
   b4f48:	eddf 7a5e 	vldr	s15, [pc, #376]	; b50c4 <_Z18readCompassHeadingff+0x284>
   b4f4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f54:	d511      	bpl.n	b4f7a <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4f56:	4b5c      	ldr	r3, [pc, #368]	; (b50c8 <_Z18readCompassHeadingff+0x288>)
   b4f58:	2200      	movs	r2, #0
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	4629      	mov	r1, r5
   b4f5e:	f00e fcc7 	bl	c38f0 <__aeabi_dsub>
   b4f62:	4b4f      	ldr	r3, [pc, #316]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4f64:	2200      	movs	r2, #0
   b4f66:	f00e fe7b 	bl	c3c60 <__aeabi_dmul>
   b4f6a:	4b58      	ldr	r3, [pc, #352]	; (b50cc <_Z18readCompassHeadingff+0x28c>)
   b4f6c:	2200      	movs	r2, #0
   b4f6e:	f00e ffa1 	bl	c3eb4 <__aeabi_ddiv>
   b4f72:	a343      	add	r3, pc, #268	; (adr r3, b5080 <_Z18readCompassHeadingff+0x240>)
   b4f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f78:	e7bb      	b.n	b4ef2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b4f7a:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b4f7e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f86:	db11      	blt.n	b4fac <_Z18readCompassHeadingff+0x16c>
   b4f88:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f90:	d50c      	bpl.n	b4fac <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4f92:	4b42      	ldr	r3, [pc, #264]	; (b509c <_Z18readCompassHeadingff+0x25c>)
   b4f94:	2200      	movs	r2, #0
   b4f96:	4620      	mov	r0, r4
   b4f98:	4629      	mov	r1, r5
   b4f9a:	f00e fca9 	bl	c38f0 <__aeabi_dsub>
   b4f9e:	4b4c      	ldr	r3, [pc, #304]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b4fa0:	2200      	movs	r2, #0
   b4fa2:	f00e fe5d 	bl	c3c60 <__aeabi_dmul>
   b4fa6:	4b4b      	ldr	r3, [pc, #300]	; (b50d4 <_Z18readCompassHeadingff+0x294>)
   b4fa8:	2200      	movs	r2, #0
   b4faa:	e77f      	b.n	b4eac <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b4fac:	eddf 7a4a 	vldr	s15, [pc, #296]	; b50d8 <_Z18readCompassHeadingff+0x298>
   b4fb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fb8:	db17      	blt.n	b4fea <_Z18readCompassHeadingff+0x1aa>
   b4fba:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fc2:	d512      	bpl.n	b4fea <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b4fc4:	4b45      	ldr	r3, [pc, #276]	; (b50dc <_Z18readCompassHeadingff+0x29c>)
   b4fc6:	2200      	movs	r2, #0
   b4fc8:	4620      	mov	r0, r4
   b4fca:	4629      	mov	r1, r5
   b4fcc:	f00e fc92 	bl	c38f4 <__adddf3>
   b4fd0:	4b3f      	ldr	r3, [pc, #252]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b4fd2:	2200      	movs	r2, #0
   b4fd4:	f00e fe44 	bl	c3c60 <__aeabi_dmul>
   b4fd8:	4b41      	ldr	r3, [pc, #260]	; (b50e0 <_Z18readCompassHeadingff+0x2a0>)
   b4fda:	2200      	movs	r2, #0
   b4fdc:	f00e ff6a 	bl	c3eb4 <__aeabi_ddiv>
   b4fe0:	4b2f      	ldr	r3, [pc, #188]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b4fe2:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4fe4:	f00e fc84 	bl	c38f0 <__aeabi_dsub>
   b4fe8:	e785      	b.n	b4ef6 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b4fea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b50e4 <_Z18readCompassHeadingff+0x2a4>
   b4fee:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b4ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ff6:	db15      	blt.n	b5024 <_Z18readCompassHeadingff+0x1e4>
   b4ff8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5000:	d510      	bpl.n	b5024 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b5002:	4b39      	ldr	r3, [pc, #228]	; (b50e8 <_Z18readCompassHeadingff+0x2a8>)
   b5004:	2200      	movs	r2, #0
   b5006:	4620      	mov	r0, r4
   b5008:	4629      	mov	r1, r5
   b500a:	f00e fc73 	bl	c38f4 <__adddf3>
   b500e:	4b30      	ldr	r3, [pc, #192]	; (b50d0 <_Z18readCompassHeadingff+0x290>)
   b5010:	2200      	movs	r2, #0
   b5012:	f00e fe25 	bl	c3c60 <__aeabi_dmul>
   b5016:	4b35      	ldr	r3, [pc, #212]	; (b50ec <_Z18readCompassHeadingff+0x2ac>)
   b5018:	2200      	movs	r2, #0
   b501a:	f00e ff4b 	bl	c3eb4 <__aeabi_ddiv>
   b501e:	4b28      	ldr	r3, [pc, #160]	; (b50c0 <_Z18readCompassHeadingff+0x280>)
   b5020:	2200      	movs	r2, #0
   b5022:	e7df      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b5024:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b502c:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b5030:	dd10      	ble.n	b5054 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b5032:	4b2f      	ldr	r3, [pc, #188]	; (b50f0 <_Z18readCompassHeadingff+0x2b0>)
   b5034:	4620      	mov	r0, r4
   b5036:	4629      	mov	r1, r5
   b5038:	f00e fc5a 	bl	c38f0 <__aeabi_dsub>
   b503c:	4b18      	ldr	r3, [pc, #96]	; (b50a0 <_Z18readCompassHeadingff+0x260>)
   b503e:	2200      	movs	r2, #0
   b5040:	f00e fe0e 	bl	c3c60 <__aeabi_dmul>
   b5044:	a310      	add	r3, pc, #64	; (adr r3, b5088 <_Z18readCompassHeadingff+0x248>)
   b5046:	e9d3 2300 	ldrd	r2, r3, [r3]
   b504a:	f00e ff33 	bl	c3eb4 <__aeabi_ddiv>
   b504e:	4b12      	ldr	r3, [pc, #72]	; (b5098 <_Z18readCompassHeadingff+0x258>)
   b5050:	2200      	movs	r2, #0
   b5052:	e7c7      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b5054:	4b27      	ldr	r3, [pc, #156]	; (b50f4 <_Z18readCompassHeadingff+0x2b4>)
   b5056:	4620      	mov	r0, r4
   b5058:	4629      	mov	r1, r5
   b505a:	f00e fc4b 	bl	c38f4 <__adddf3>
   b505e:	a30c      	add	r3, pc, #48	; (adr r3, b5090 <_Z18readCompassHeadingff+0x250>)
   b5060:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5064:	f00e fdfc 	bl	c3c60 <__aeabi_dmul>
   b5068:	4b23      	ldr	r3, [pc, #140]	; (b50f8 <_Z18readCompassHeadingff+0x2b8>)
   b506a:	2200      	movs	r2, #0
   b506c:	f00e ff22 	bl	c3eb4 <__aeabi_ddiv>
   b5070:	a303      	add	r3, pc, #12	; (adr r3, b5080 <_Z18readCompassHeadingff+0x240>)
   b5072:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5076:	e7b5      	b.n	b4fe4 <_Z18readCompassHeadingff+0x1a4>
   b5078:	54442d18 	.word	0x54442d18
   b507c:	400921fb 	.word	0x400921fb
   b5080:	00000000 	.word	0x00000000
   b5084:	4060e000 	.word	0x4060e000
   b5088:	00000000 	.word	0x00000000
   b508c:	4063a000 	.word	0x4063a000
   b5090:	bb000000 	.word	0xbb000000
   b5094:	403d3c54 	.word	0x403d3c54
   b5098:	40668000 	.word	0x40668000
   b509c:	40180000 	.word	0x40180000
   b50a0:	40468000 	.word	0x40468000
   b50a4:	40390000 	.word	0x40390000
   b50a8:	42680000 	.word	0x42680000
   b50ac:	403f0000 	.word	0x403f0000
   b50b0:	403b0000 	.word	0x403b0000
   b50b4:	42ac0000 	.word	0x42ac0000
   b50b8:	404d0000 	.word	0x404d0000
   b50bc:	403c0000 	.word	0x403c0000
   b50c0:	40568000 	.word	0x40568000
   b50c4:	42fa0000 	.word	0x42fa0000
   b50c8:	40558000 	.word	0x40558000
   b50cc:	40438000 	.word	0x40438000
   b50d0:	c0468000 	.word	0xc0468000
   b50d4:	c0380000 	.word	0xc0380000
   b50d8:	c2200000 	.word	0xc2200000
   b50dc:	40320000 	.word	0x40320000
   b50e0:	c0360000 	.word	0xc0360000
   b50e4:	c29c0000 	.word	0xc29c0000
   b50e8:	40440000 	.word	0x40440000
   b50ec:	c0430000 	.word	0xc0430000
   b50f0:	405f4000 	.word	0x405f4000
   b50f4:	40538000 	.word	0x40538000
   b50f8:	40598000 	.word	0x40598000
   b50fc:	00000000 	.word	0x00000000

000b5100 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5100:	b510      	push	{r4, lr}
   b5102:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);
   b5106:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b510a:	b082      	sub	sp, #8
  return deg * (3.14159/180);
   b510c:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5110:	eef0 aa41 	vmov.f32	s21, s2
   b5114:	eeb0 aa61 	vmov.f32	s20, s3
   b5118:	eef0 8a60 	vmov.f32	s17, s1
   b511c:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);
   b5120:	f00e fd46 	bl	c3bb0 <__aeabi_f2d>
   b5124:	a342      	add	r3, pc, #264	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5126:	e9d3 2300 	ldrd	r2, r3, [r3]
   b512a:	f00e fd99 	bl	c3c60 <__aeabi_dmul>
   b512e:	f00f f88f 	bl	c4250 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5132:	ee07 0a90 	vmov	s15, r0
   b5136:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b513a:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b513e:	f00d f869 	bl	c2214 <sinf>
  return deg * (3.14159/180);
   b5142:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5146:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b514a:	f00e fd31 	bl	c3bb0 <__aeabi_f2d>
   b514e:	a338      	add	r3, pc, #224	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5150:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5154:	f00e fd84 	bl	c3c60 <__aeabi_dmul>
   b5158:	f00f f87a 	bl	c4250 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b515c:	ee00 0a10 	vmov	s0, r0
   b5160:	f00d f820 	bl	c21a4 <cosf>
  return deg * (3.14159/180);
   b5164:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5168:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b516c:	f00e fd20 	bl	c3bb0 <__aeabi_f2d>
   b5170:	a32f      	add	r3, pc, #188	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5172:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5176:	f00e fd73 	bl	c3c60 <__aeabi_dmul>
   b517a:	f00f f869 	bl	c4250 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b517e:	ee00 0a10 	vmov	s0, r0
   b5182:	f00d f80f 	bl	c21a4 <cosf>
  return deg * (3.14159/180);
   b5186:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b518a:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b518e:	ee17 0a90 	vmov	r0, s15
   b5192:	f00e fd0d 	bl	c3bb0 <__aeabi_f2d>
   b5196:	a326      	add	r3, pc, #152	; (adr r3, b5230 <_Z12calcDistanceffff+0x130>)
   b5198:	e9d3 2300 	ldrd	r2, r3, [r3]
   b519c:	f00e fd60 	bl	c3c60 <__aeabi_dmul>
   b51a0:	f00f f856 	bl	c4250 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b51a4:	ee07 0a90 	vmov	s15, r0
   b51a8:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b51ac:	f00d f832 	bl	c2214 <sinf>
   b51b0:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b51b4:	ee68 8a80 	vmul.f32	s17, s17, s0
   b51b8:	ee28 8a80 	vmul.f32	s16, s17, s0
   b51bc:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b51c0:	eeb0 0a48 	vmov.f32	s0, s16
   b51c4:	f00d f89e 	bl	c2304 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b51c8:	ee18 0a10 	vmov	r0, s16
   b51cc:	ee10 4a10 	vmov	r4, s0
   b51d0:	f00e fcee 	bl	c3bb0 <__aeabi_f2d>
   b51d4:	4602      	mov	r2, r0
   b51d6:	460b      	mov	r3, r1
   b51d8:	2000      	movs	r0, #0
   b51da:	4913      	ldr	r1, [pc, #76]	; (b5228 <_Z12calcDistanceffff+0x128>)
   b51dc:	f00e fb88 	bl	c38f0 <__aeabi_dsub>
   b51e0:	ec41 0b10 	vmov	d0, r0, r1
   b51e4:	f00d f852 	bl	c228c <sqrt>
      return atan2(__type(__y), __type(__x));
   b51e8:	4620      	mov	r0, r4
   b51ea:	ed8d 0b00 	vstr	d0, [sp]
   b51ee:	f00e fcdf 	bl	c3bb0 <__aeabi_f2d>
   b51f2:	ed9d 1b00 	vldr	d1, [sp]
   b51f6:	ec41 0b10 	vmov	d0, r0, r1
   b51fa:	f00d f845 	bl	c2288 <atan2>
   b51fe:	ec53 2b10 	vmov	r2, r3, d0
   b5202:	ee10 0a10 	vmov	r0, s0
   b5206:	4619      	mov	r1, r3
   b5208:	f00e fb74 	bl	c38f4 <__adddf3>
   b520c:	f00f f820 	bl	c4250 <__aeabi_d2f>
}
   b5210:	ed9f 0a06 	vldr	s0, [pc, #24]	; b522c <_Z12calcDistanceffff+0x12c>
   b5214:	ee07 0a90 	vmov	s15, r0
   b5218:	ee27 0a80 	vmul.f32	s0, s15, s0
   b521c:	b002      	add	sp, #8
   b521e:	ecbd 8b08 	vpop	{d8-d11}
   b5222:	bd10      	pop	{r4, pc}
   b5224:	f3af 8000 	nop.w
   b5228:	3ff00000 	.word	0x3ff00000
   b522c:	4ac26d70 	.word	0x4ac26d70
   b5230:	a50de270 	.word	0xa50de270
   b5234:	3f91df45 	.word	0x3f91df45

000b5238 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b5238:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){
   b523a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b5242:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b5246:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b524a:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){
   b524e:	dd37      	ble.n	b52c0 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5254:	dd04      	ble.n	b5260 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b5256:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b525a:	ecbd 8b02 	vpop	{d8}
   b525e:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5260:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5310 <_Z9calcDeltaff+0xd8>
   b5264:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5268:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b526c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5274:	dcef      	bgt.n	b5256 <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b5276:	ee10 0a10 	vmov	r0, s0
   b527a:	f00e fc99 	bl	c3bb0 <__aeabi_f2d>
   b527e:	4b25      	ldr	r3, [pc, #148]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b5280:	2200      	movs	r2, #0
   b5282:	f00e fb37 	bl	c38f4 <__adddf3>
   b5286:	4602      	mov	r2, r0
   b5288:	460b      	mov	r3, r1
   b528a:	2000      	movs	r0, #0
   b528c:	2100      	movs	r1, #0
   b528e:	f00e fb2f 	bl	c38f0 <__aeabi_dsub>
   b5292:	4604      	mov	r4, r0
   b5294:	ee18 0a10 	vmov	r0, s16
   b5298:	460d      	mov	r5, r1
   b529a:	f00e fc89 	bl	c3bb0 <__aeabi_f2d>
   b529e:	4602      	mov	r2, r0
   b52a0:	460b      	mov	r3, r1
   b52a2:	2000      	movs	r0, #0
   b52a4:	491b      	ldr	r1, [pc, #108]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52a6:	f00e fb23 	bl	c38f0 <__aeabi_dsub>
   b52aa:	4602      	mov	r2, r0
   b52ac:	460b      	mov	r3, r1
   b52ae:	4620      	mov	r0, r4
   b52b0:	4629      	mov	r1, r5
   b52b2:	f00e fb1d 	bl	c38f0 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b52b6:	f00e ffcb 	bl	c4250 <__aeabi_d2f>
   b52ba:	ee00 0a10 	vmov	s0, r0
   b52be:	e7cc      	b.n	b525a <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b52c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b52c4:	ddc7      	ble.n	b5256 <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b52c6:	eddf 7a12 	vldr	s15, [pc, #72]	; b5310 <_Z9calcDeltaff+0xd8>
   b52ca:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b52ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b52d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b52d6:	d4be      	bmi.n	b5256 <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b52d8:	ee10 0a10 	vmov	r0, s0
   b52dc:	f00e fc68 	bl	c3bb0 <__aeabi_f2d>
   b52e0:	4602      	mov	r2, r0
   b52e2:	460b      	mov	r3, r1
   b52e4:	2000      	movs	r0, #0
   b52e6:	490b      	ldr	r1, [pc, #44]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52e8:	f00e fb02 	bl	c38f0 <__aeabi_dsub>
   b52ec:	4604      	mov	r4, r0
   b52ee:	ee18 0a10 	vmov	r0, s16
   b52f2:	460d      	mov	r5, r1
   b52f4:	f00e fc5c 	bl	c3bb0 <__aeabi_f2d>
   b52f8:	4b06      	ldr	r3, [pc, #24]	; (b5314 <_Z9calcDeltaff+0xdc>)
   b52fa:	2200      	movs	r2, #0
   b52fc:	f00e fafa 	bl	c38f4 <__adddf3>
   b5300:	4602      	mov	r2, r0
   b5302:	460b      	mov	r3, r1
   b5304:	4620      	mov	r0, r4
   b5306:	4629      	mov	r1, r5
   b5308:	f00e faf4 	bl	c38f4 <__adddf3>
   b530c:	e7d3      	b.n	b52b6 <_Z9calcDeltaff+0x7e>
   b530e:	bf00      	nop
   b5310:	43340000 	.word	0x43340000
   b5314:	40668000 	.word	0x40668000

000b5318 <_Z15getPositionDatav>:
void getPositionData(){
   b5318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b531c:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){
   b5320:	4c77      	ldr	r4, [pc, #476]	; (b5500 <_Z15getPositionDatav+0x1e8>)
void getPositionData(){
   b5322:	b0cd      	sub	sp, #308	; 0x134
   b5324:	f008 fbf6 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){
   b5328:	6823      	ldr	r3, [r4, #0]
   b532a:	1ac0      	subs	r0, r0, r3
   b532c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b5330:	f240 80db 	bls.w	b54ea <_Z15getPositionDatav+0x1d2>
   b5334:	f008 fbee 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;
   b5338:	4b72      	ldr	r3, [pc, #456]	; (b5504 <_Z15getPositionDatav+0x1ec>)
        positionTimer = millis();
   b533a:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;
   b533c:	2501      	movs	r5, #1
        if(myGPS.isConnected()){
   b533e:	4872      	ldr	r0, [pc, #456]	; (b5508 <_Z15getPositionDatav+0x1f0>)
        updateMotorControl = true;
   b5340:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){
   b5342:	f240 414c 	movw	r1, #1100	; 0x44c
   b5346:	f007 ff5b 	bl	bd200 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b534a:	4c70      	ldr	r4, [pc, #448]	; (b550c <_Z15getPositionDatav+0x1f4>)
   b534c:	2800      	cmp	r0, #0
   b534e:	f000 80d1 	beq.w	b54f4 <_Z15getPositionDatav+0x1dc>
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5352:	f240 414c 	movw	r1, #1100	; 0x44c
   b5356:	486c      	ldr	r0, [pc, #432]	; (b5508 <_Z15getPositionDatav+0x1f0>)
   b5358:	ed9f 8a6d 	vldr	s16, [pc, #436]	; b5510 <_Z15getPositionDatav+0x1f8>
   b535c:	f007 fff3 	bl	bd346 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b5360:	ee07 0a90 	vmov	s15, r0
   b5364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5368:	4b6a      	ldr	r3, [pc, #424]	; (b5514 <_Z15getPositionDatav+0x1fc>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b536a:	4867      	ldr	r0, [pc, #412]	; (b5508 <_Z15getPositionDatav+0x1f0>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b536c:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5370:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5374:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5378:	f007 ffc2 	bl	bd300 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b537c:	ee07 0a90 	vmov	s15, r0
   b5380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5384:	4b64      	ldr	r3, [pc, #400]	; (b5518 <_Z15getPositionDatav+0x200>)
            GPSAvail = true;
   b5386:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5388:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b538c:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();      // get X Y and Z data at once
   b5390:	4862      	ldr	r0, [pc, #392]	; (b551c <_Z15getPositionDatav+0x204>)
   b5392:	f002 fed1 	bl	b8138 <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);
   b5396:	4861      	ldr	r0, [pc, #388]	; (b551c <_Z15getPositionDatav+0x204>)
   b5398:	a911      	add	r1, sp, #68	; 0x44
   b539a:	f002 ff13 	bl	b81c4 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b539e:	4604      	mov	r4, r0
   b53a0:	b140      	cbz	r0, b53b4 <_Z15getPositionDatav+0x9c>
   b53a2:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
   b53a6:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b53aa:	f7ff fd49 	bl	b4e40 <_Z18readCompassHeadingff>
   b53ae:	4b5c      	ldr	r3, [pc, #368]	; (b5520 <_Z15getPositionDatav+0x208>)
   b53b0:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b53b4:	4e5b      	ldr	r6, [pc, #364]	; (b5524 <_Z15getPositionDatav+0x20c>)
   b53b6:	ed9f 6a5c 	vldr	s12, [pc, #368]	; b5528 <_Z15getPositionDatav+0x210>
   b53ba:	ed96 7a00 	vldr	s14, [r6]
   b53be:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b53c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53c6:	f2c0 8090 	blt.w	b54ea <_Z15getPositionDatav+0x1d2>
   b53ca:	eddf 6a58 	vldr	s13, [pc, #352]	; b552c <_Z15getPositionDatav+0x214>
   b53ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b53d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53d6:	f200 8088 	bhi.w	b54ea <_Z15getPositionDatav+0x1d2>
   b53da:	4f55      	ldr	r7, [pc, #340]	; (b5530 <_Z15getPositionDatav+0x218>)
   b53dc:	edd7 7a00 	vldr	s15, [r7]
   b53e0:	eef4 7ac6 	vcmpe.f32	s15, s12
   b53e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53e8:	db7f      	blt.n	b54ea <_Z15getPositionDatav+0x1d2>
   b53ea:	eef4 7ae6 	vcmpe.f32	s15, s13
   b53ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53f2:	d87a      	bhi.n	b54ea <_Z15getPositionDatav+0x1d2>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b53f4:	f8df 911c 	ldr.w	r9, [pc, #284]	; b5514 <_Z15getPositionDatav+0x1fc>
   b53f8:	4d47      	ldr	r5, [pc, #284]	; (b5518 <_Z15getPositionDatav+0x200>)
   b53fa:	edd9 0a00 	vldr	s1, [r9]
   b53fe:	ed95 0a00 	vldr	s0, [r5]
   b5402:	f8df 8140 	ldr.w	r8, [pc, #320]	; b5544 <_Z15getPositionDatav+0x22c>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5406:	f8df b140 	ldr.w	fp, [pc, #320]	; b5548 <_Z15getPositionDatav+0x230>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b540a:	f8df a140 	ldr.w	sl, [pc, #320]	; b554c <_Z15getPositionDatav+0x234>
  { return __builtin_atan2f(__y, __x); }
   b540e:	ee77 0a60 	vsub.f32	s1, s14, s1
   b5412:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b5416:	f00c ff73 	bl	c2300 <atan2f>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b541a:	eddf 7a46 	vldr	s15, [pc, #280]	; b5534 <_Z15getPositionDatav+0x21c>
   b541e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5422:	ee17 0a90 	vmov	r0, s15
   b5426:	f00e fbc3 	bl	c3bb0 <__aeabi_f2d>
   b542a:	a333      	add	r3, pc, #204	; (adr r3, b54f8 <_Z15getPositionDatav+0x1e0>)
   b542c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5430:	f00e fd40 	bl	c3eb4 <__aeabi_ddiv>
   b5434:	f00e ff0c 	bl	c4250 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5438:	edd5 1a00 	vldr	s3, [r5]
   b543c:	ed97 1a00 	vldr	s2, [r7]
   b5440:	edd9 0a00 	vldr	s1, [r9]
   b5444:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b5448:	f8c8 0000 	str.w	r0, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b544c:	f7ff fe58 	bl	b5100 <_Z12calcDistanceffff>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5450:	4b33      	ldr	r3, [pc, #204]	; (b5520 <_Z15getPositionDatav+0x208>)
   b5452:	edd8 0a00 	vldr	s1, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5456:	ed8b 0a00 	vstr	s0, [fp]
            targetDelta = calcDelta(compassHeading, travelHeading);
   b545a:	ed93 0a00 	vldr	s0, [r3]
   b545e:	f7ff feeb 	bl	b5238 <_Z9calcDeltaff>
   b5462:	ed8a 0a00 	vstr	s0, [sl]
   b5466:	f008 fb55 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();
   b546a:	4b33      	ldr	r3, [pc, #204]	; (b5538 <_Z15getPositionDatav+0x220>)
   b546c:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;
   b546e:	b114      	cbz	r4, b5476 <_Z15getPositionDatav+0x15e>
   b5470:	4b32      	ldr	r3, [pc, #200]	; (b553c <_Z15getPositionDatav+0x224>)
   b5472:	2201      	movs	r2, #1
   b5474:	701a      	strb	r2, [r3, #0]
            sprintf(tempbuf,"Lat: %f Lon %f TLat: %f TLon: %f, Compass: %f, Travel hd: %f, T Delta: %f, Dist: %f", latitude, longitude, targetLat, targetLon, compassHeading, travelHeading, targetDelta, travelDistance);
   b5476:	f8d9 0000 	ldr.w	r0, [r9]
   b547a:	f00e fb99 	bl	c3bb0 <__aeabi_f2d>
   b547e:	4602      	mov	r2, r0
   b5480:	460b      	mov	r3, r1
   b5482:	f8db 0000 	ldr.w	r0, [fp]
   b5486:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   b548a:	f00e fb91 	bl	c3bb0 <__aeabi_f2d>
   b548e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5492:	f8da 0000 	ldr.w	r0, [sl]
   b5496:	f00e fb8b 	bl	c3bb0 <__aeabi_f2d>
   b549a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b549e:	f8d8 0000 	ldr.w	r0, [r8]
   b54a2:	f00e fb85 	bl	c3bb0 <__aeabi_f2d>
   b54a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b54aa:	4b1d      	ldr	r3, [pc, #116]	; (b5520 <_Z15getPositionDatav+0x208>)
   b54ac:	6818      	ldr	r0, [r3, #0]
   b54ae:	f00e fb7f 	bl	c3bb0 <__aeabi_f2d>
   b54b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b54b6:	6838      	ldr	r0, [r7, #0]
   b54b8:	f00e fb7a 	bl	c3bb0 <__aeabi_f2d>
   b54bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b54c0:	6830      	ldr	r0, [r6, #0]
   b54c2:	f00e fb75 	bl	c3bb0 <__aeabi_f2d>
   b54c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b54ca:	6828      	ldr	r0, [r5, #0]
   b54cc:	f00e fb70 	bl	c3bb0 <__aeabi_f2d>
   b54d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b54d4:	e9cd 0100 	strd	r0, r1, [sp]
   b54d8:	4919      	ldr	r1, [pc, #100]	; (b5540 <_Z15getPositionDatav+0x228>)
   b54da:	a81a      	add	r0, sp, #104	; 0x68
   b54dc:	f008 fe10 	bl	be100 <sprintf>
            Serial.println(tempbuf);
   b54e0:	f00c fb8a 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b54e4:	a91a      	add	r1, sp, #104	; 0x68
   b54e6:	f00b fec6 	bl	c1276 <_ZN5Print7printlnEPKc>
}
   b54ea:	b04d      	add	sp, #308	; 0x134
   b54ec:	ecbd 8b02 	vpop	{d8}
   b54f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else GPSAvail = false;
   b54f4:	7020      	strb	r0, [r4, #0]
   b54f6:	e74b      	b.n	b5390 <_Z15getPositionDatav+0x78>
   b54f8:	54442d18 	.word	0x54442d18
   b54fc:	400921fb 	.word	0x400921fb
   b5500:	2003e0d4 	.word	0x2003e0d4
   b5504:	2003e5ec 	.word	0x2003e5ec
   b5508:	2003df50 	.word	0x2003df50
   b550c:	2003dd8c 	.word	0x2003dd8c
   b5510:	49742400 	.word	0x49742400
   b5514:	2003de1c 	.word	0x2003de1c
   b5518:	2003def8 	.word	0x2003def8
   b551c:	2003de40 	.word	0x2003de40
   b5520:	2003ddc8 	.word	0x2003ddc8
   b5524:	2003e5d0 	.word	0x2003e5d0
   b5528:	c2b40000 	.word	0xc2b40000
   b552c:	42b40000 	.word	0x42b40000
   b5530:	2003e5d4 	.word	0x2003e5d4
   b5534:	43340000 	.word	0x43340000
   b5538:	2003de18 	.word	0x2003de18
   b553c:	2003e5d8 	.word	0x2003e5d8
   b5540:	000c6871 	.word	0x000c6871
   b5544:	2003e5e0 	.word	0x2003e5e0
   b5548:	2003e5dc 	.word	0x2003e5dc
   b554c:	2003e5cc 	.word	0x2003e5cc

000b5550 <_Z12updateMotorsv>:
void updateMotors(){
   b5550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5554:	ed2d 8b02 	vpush	{d8}
    if(updateMotorControl){
   b5558:	4b77      	ldr	r3, [pc, #476]	; (b5738 <_Z12updateMotorsv+0x1e8>)
   b555a:	781b      	ldrb	r3, [r3, #0]
   b555c:	2b00      	cmp	r3, #0
   b555e:	d048      	beq.n	b55f2 <_Z12updateMotorsv+0xa2>
        if(driveMode == 1 || driveMode == 2){       //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5560:	4b76      	ldr	r3, [pc, #472]	; (b573c <_Z12updateMotorsv+0x1ec>)
   b5562:	4c77      	ldr	r4, [pc, #476]	; (b5740 <_Z12updateMotorsv+0x1f0>)
   b5564:	781b      	ldrb	r3, [r3, #0]
   b5566:	4d77      	ldr	r5, [pc, #476]	; (b5744 <_Z12updateMotorsv+0x1f4>)
   b5568:	3b01      	subs	r3, #1
   b556a:	2b01      	cmp	r3, #1
   b556c:	f200 8093 	bhi.w	b5696 <_Z12updateMotorsv+0x146>
            if(travelDistance < MTR_CUTOFF_RAD){
   b5570:	4b75      	ldr	r3, [pc, #468]	; (b5748 <_Z12updateMotorsv+0x1f8>)
   b5572:	edd3 7a00 	vldr	s15, [r3]
   b5576:	4b75      	ldr	r3, [pc, #468]	; (b574c <_Z12updateMotorsv+0x1fc>)
   b5578:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b557c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5584:	d539      	bpl.n	b55fa <_Z12updateMotorsv+0xaa>
                pointArrived = true;
   b5586:	2201      	movs	r2, #1
   b5588:	701a      	strb	r2, [r3, #0]
                    setLSpeed = 90;
   b558a:	235a      	movs	r3, #90	; 0x5a
   b558c:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b558e:	702b      	strb	r3, [r5, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5590:	7823      	ldrb	r3, [r4, #0]
        if(leftMotorSpeed < setLSpeed){
   b5592:	4a6f      	ldr	r2, [pc, #444]	; (b5750 <_Z12updateMotorsv+0x200>)
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5594:	3b43      	subs	r3, #67	; 0x43
   b5596:	2b16      	cmp	r3, #22
   b5598:	bf9c      	itt	ls
   b559a:	2343      	movls	r3, #67	; 0x43
   b559c:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b559e:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b55a0:	7821      	ldrb	r1, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b55a2:	3b43      	subs	r3, #67	; 0x43
   b55a4:	2b16      	cmp	r3, #22
   b55a6:	bf9c      	itt	ls
   b55a8:	2343      	movls	r3, #67	; 0x43
   b55aa:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b55ac:	7813      	ldrb	r3, [r2, #0]
   b55ae:	428b      	cmp	r3, r1
   b55b0:	f080 80af 	bcs.w	b5712 <_Z12updateMotorsv+0x1c2>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;
   b55b4:	1ac8      	subs	r0, r1, r3
   b55b6:	2803      	cmp	r0, #3
   b55b8:	f340 80b2 	ble.w	b5720 <_Z12updateMotorsv+0x1d0>
   b55bc:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b55be:	7013      	strb	r3, [r2, #0]
        if(rightMotorSpeed < setRSpeed){
   b55c0:	4c64      	ldr	r4, [pc, #400]	; (b5754 <_Z12updateMotorsv+0x204>)
   b55c2:	7829      	ldrb	r1, [r5, #0]
   b55c4:	7823      	ldrb	r3, [r4, #0]
   b55c6:	428b      	cmp	r3, r1
   b55c8:	f080 80ac 	bcs.w	b5724 <_Z12updateMotorsv+0x1d4>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD;
   b55cc:	1ac8      	subs	r0, r1, r3
   b55ce:	2803      	cmp	r0, #3
   b55d0:	f340 80af 	ble.w	b5732 <_Z12updateMotorsv+0x1e2>
   b55d4:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b55d6:	7023      	strb	r3, [r4, #0]
        ESCL.write(leftMotorSpeed);
   b55d8:	7811      	ldrb	r1, [r2, #0]
   b55da:	485f      	ldr	r0, [pc, #380]	; (b5758 <_Z12updateMotorsv+0x208>)
   b55dc:	f00b febd 	bl	c135a <_ZN5Servo5writeEi>
        ESCR.write(180-rightMotorSpeed);
   b55e0:	7821      	ldrb	r1, [r4, #0]
   b55e2:	485e      	ldr	r0, [pc, #376]	; (b575c <_Z12updateMotorsv+0x20c>)
   b55e4:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b55e8:	f00b feb7 	bl	c135a <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b55ec:	4a52      	ldr	r2, [pc, #328]	; (b5738 <_Z12updateMotorsv+0x1e8>)
   b55ee:	2300      	movs	r3, #0
   b55f0:	7013      	strb	r3, [r2, #0]
}
   b55f2:	ecbd 8b02 	vpop	{d8}
   b55f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){
   b55fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b55fe:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5606:	d55d      	bpl.n	b56c4 <_Z12updateMotorsv+0x174>
                if(pointArrived){
   b5608:	f893 b000 	ldrb.w	fp, [r3]
   b560c:	f1bb 0f00 	cmp.w	fp, #0
   b5610:	d1bb      	bne.n	b558a <_Z12updateMotorsv+0x3a>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);
   b5612:	4b53      	ldr	r3, [pc, #332]	; (b5760 <_Z12updateMotorsv+0x210>)
   b5614:	eddf 8a53 	vldr	s17, [pc, #332]	; b5764 <_Z12updateMotorsv+0x214>
   b5618:	ed93 8a00 	vldr	s16, [r3]
   b561c:	4b52      	ldr	r3, [pc, #328]	; (b5768 <_Z12updateMotorsv+0x218>)
   b561e:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5622:	ed93 7a00 	vldr	s14, [r3]
   b5626:	ee17 0a90 	vmov	r0, s15
   b562a:	ee28 8a07 	vmul.f32	s16, s16, s14
   b562e:	f00e fabf 	bl	c3bb0 <__aeabi_f2d>
   b5632:	4b4e      	ldr	r3, [pc, #312]	; (b576c <_Z12updateMotorsv+0x21c>)
   b5634:	2200      	movs	r2, #0
   b5636:	f00e fb13 	bl	c3c60 <__aeabi_dmul>
   b563a:	ee78 7a88 	vadd.f32	s15, s17, s16
   b563e:	4606      	mov	r6, r0
   b5640:	460f      	mov	r7, r1
   b5642:	ee17 0a90 	vmov	r0, s15
   b5646:	f00e fab3 	bl	c3bb0 <__aeabi_f2d>
   b564a:	4632      	mov	r2, r6
   b564c:	463b      	mov	r3, r7
   b564e:	f00e fb07 	bl	c3c60 <__aeabi_dmul>
   b5652:	f00e fdb5 	bl	c41c0 <__aeabi_d2iz>
   b5656:	4682      	mov	sl, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5658:	ee18 0a90 	vmov	r0, s17
   b565c:	f00e faa8 	bl	c3bb0 <__aeabi_f2d>
   b5660:	4680      	mov	r8, r0
   b5662:	ee18 0a10 	vmov	r0, s16
   b5666:	4689      	mov	r9, r1
   b5668:	f00e faa2 	bl	c3bb0 <__aeabi_f2d>
   b566c:	4632      	mov	r2, r6
   b566e:	463b      	mov	r3, r7
   b5670:	f00e faf6 	bl	c3c60 <__aeabi_dmul>
   b5674:	4602      	mov	r2, r0
   b5676:	460b      	mov	r3, r1
   b5678:	4640      	mov	r0, r8
   b567a:	4649      	mov	r1, r9
   b567c:	f00e f938 	bl	c38f0 <__aeabi_dsub>
   b5680:	f00e fd9e 	bl	c41c0 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;
   b5684:	f1ba 0f00 	cmp.w	sl, #0
   b5688:	da12      	bge.n	b56b0 <_Z12updateMotorsv+0x160>
   b568a:	f884 b000 	strb.w	fp, [r4]
                    if(Rset < 0) setRSpeed = 0;
   b568e:	2800      	cmp	r0, #0
   b5690:	da14      	bge.n	b56bc <_Z12updateMotorsv+0x16c>
   b5692:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b5694:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b5696:	7823      	ldrb	r3, [r4, #0]
   b5698:	3b5b      	subs	r3, #91	; 0x5b
   b569a:	2b20      	cmp	r3, #32
   b569c:	bf9c      	itt	ls
   b569e:	237b      	movls	r3, #123	; 0x7b
   b56a0:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b56a2:	782b      	ldrb	r3, [r5, #0]
   b56a4:	3b5b      	subs	r3, #91	; 0x5b
   b56a6:	2b20      	cmp	r3, #32
   b56a8:	f63f af72 	bhi.w	b5590 <_Z12updateMotorsv+0x40>
   b56ac:	237b      	movs	r3, #123	; 0x7b
   b56ae:	e76e      	b.n	b558e <_Z12updateMotorsv+0x3e>
                    else if(Lset > 180) setLSpeed = 180;
   b56b0:	f1ba 0fb4 	cmp.w	sl, #180	; 0xb4
   b56b4:	bfc4      	itt	gt
   b56b6:	23b4      	movgt	r3, #180	; 0xb4
   b56b8:	7023      	strbgt	r3, [r4, #0]
   b56ba:	e7e8      	b.n	b568e <_Z12updateMotorsv+0x13e>
                    else if(Rset > 180) setRSpeed = 180;
   b56bc:	28b4      	cmp	r0, #180	; 0xb4
   b56be:	ddea      	ble.n	b5696 <_Z12updateMotorsv+0x146>
   b56c0:	23b4      	movs	r3, #180	; 0xb4
   b56c2:	e7e7      	b.n	b5694 <_Z12updateMotorsv+0x144>
                pointArrived = false;
   b56c4:	2100      	movs	r1, #0
   b56c6:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56c8:	4b25      	ldr	r3, [pc, #148]	; (b5760 <_Z12updateMotorsv+0x210>)
   b56ca:	eddf 7a26 	vldr	s15, [pc, #152]	; b5764 <_Z12updateMotorsv+0x214>
   b56ce:	edd3 6a00 	vldr	s13, [r3]
   b56d2:	4b25      	ldr	r3, [pc, #148]	; (b5768 <_Z12updateMotorsv+0x218>)
   b56d4:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b56d8:	ed93 6a00 	vldr	s12, [r3]
   b56dc:	eeb0 7a67 	vmov.f32	s14, s15
   b56e0:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56e4:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b56f0:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;
   b56f4:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b56f6:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;
   b56fa:	da05      	bge.n	b5708 <_Z12updateMotorsv+0x1b8>
   b56fc:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b56fe:	2b00      	cmp	r3, #0
   b5700:	dbc7      	blt.n	b5692 <_Z12updateMotorsv+0x142>
                else if(Rset > 180) setRSpeed = 180;
   b5702:	2bb4      	cmp	r3, #180	; 0xb4
   b5704:	dcdc      	bgt.n	b56c0 <_Z12updateMotorsv+0x170>
   b5706:	e7c5      	b.n	b5694 <_Z12updateMotorsv+0x144>
                else if(Lset > 180) setLSpeed = 180;
   b5708:	2ab4      	cmp	r2, #180	; 0xb4
   b570a:	bfc8      	it	gt
   b570c:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b570e:	7022      	strb	r2, [r4, #0]
   b5710:	e7f5      	b.n	b56fe <_Z12updateMotorsv+0x1ae>
        else if(leftMotorSpeed > setLSpeed){
   b5712:	f67f af55 	bls.w	b55c0 <_Z12updateMotorsv+0x70>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b5716:	1a58      	subs	r0, r3, r1
   b5718:	2803      	cmp	r0, #3
   b571a:	dd01      	ble.n	b5720 <_Z12updateMotorsv+0x1d0>
   b571c:	3b03      	subs	r3, #3
   b571e:	e74e      	b.n	b55be <_Z12updateMotorsv+0x6e>
            else leftMotorSpeed = setLSpeed;
   b5720:	7011      	strb	r1, [r2, #0]
   b5722:	e74d      	b.n	b55c0 <_Z12updateMotorsv+0x70>
        else if(rightMotorSpeed > setRSpeed){
   b5724:	f67f af58 	bls.w	b55d8 <_Z12updateMotorsv+0x88>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b5728:	1a58      	subs	r0, r3, r1
   b572a:	2803      	cmp	r0, #3
   b572c:	dd01      	ble.n	b5732 <_Z12updateMotorsv+0x1e2>
   b572e:	3b03      	subs	r3, #3
   b5730:	e751      	b.n	b55d6 <_Z12updateMotorsv+0x86>
            else rightMotorSpeed = setRSpeed;
   b5732:	7021      	strb	r1, [r4, #0]
   b5734:	e750      	b.n	b55d8 <_Z12updateMotorsv+0x88>
   b5736:	bf00      	nop
   b5738:	2003e5ec 	.word	0x2003e5ec
   b573c:	2003db48 	.word	0x2003db48
   b5740:	2003e580 	.word	0x2003e580
   b5744:	2003e581 	.word	0x2003e581
   b5748:	2003e5dc 	.word	0x2003e5dc
   b574c:	2003e0d1 	.word	0x2003e0d1
   b5750:	2003de3c 	.word	0x2003de3c
   b5754:	2003e0d9 	.word	0x2003e0d9
   b5758:	2003dd6c 	.word	0x2003dd6c
   b575c:	2003dd7c 	.word	0x2003dd7c
   b5760:	2003db40 	.word	0x2003db40
   b5764:	42b40000 	.word	0x42b40000
   b5768:	2003e5cc 	.word	0x2003e5cc
   b576c:	3fd00000 	.word	0x3fd00000

000b5770 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b5774:	4da4      	ldr	r5, [pc, #656]	; (b5a08 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b5776:	b0ab      	sub	sp, #172	; 0xac
   b5778:	f008 f9cc 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b577c:	682b      	ldr	r3, [r5, #0]
   b577e:	4283      	cmp	r3, r0
   b5780:	f080 80f3 	bcs.w	b596a <_Z13sensorHandlerv+0x1fa>
   b5784:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5a38 <_Z13sensorHandlerv+0x2c8>
   b5788:	f89b 3000 	ldrb.w	r3, [fp]
   b578c:	2b00      	cmp	r3, #0
   b578e:	f000 80ec 	beq.w	b596a <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b5792:	f00c fb89 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5796:	2301      	movs	r3, #1
   b5798:	2214      	movs	r2, #20
   b579a:	2163      	movs	r1, #99	; 0x63
   b579c:	f00a fa79 	bl	bfc92 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b57a0:	f00c fb82 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b57a4:	6803      	ldr	r3, [r0, #0]
   b57a6:	695b      	ldr	r3, [r3, #20]
   b57a8:	4798      	blx	r3
        int c = 0;
   b57aa:	ac16      	add	r4, sp, #88	; 0x58
   b57ac:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b57ae:	f00c fb7b 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b57b2:	6803      	ldr	r3, [r0, #0]
   b57b4:	691b      	ldr	r3, [r3, #16]
   b57b6:	4798      	blx	r3
   b57b8:	b138      	cbz	r0, b57ca <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b57ba:	f00c fb75 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b57be:	6803      	ldr	r3, [r0, #0]
   b57c0:	695b      	ldr	r3, [r3, #20]
   b57c2:	4798      	blx	r3
   b57c4:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b57c8:	e7f1      	b.n	b57ae <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b57ca:	4630      	mov	r0, r6
   b57cc:	f00e fdb4 	bl	c4338 <atof>
   b57d0:	ec51 0b10 	vmov	r0, r1, d0
   b57d4:	f00e fd3c 	bl	c4250 <__aeabi_d2f>
   b57d8:	f8df a260 	ldr.w	sl, [pc, #608]	; b5a3c <_Z13sensorHandlerv+0x2cc>
   b57dc:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b57e0:	f00c fb62 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b57e4:	2301      	movs	r3, #1
   b57e6:	2214      	movs	r2, #20
   b57e8:	2164      	movs	r1, #100	; 0x64
   b57ea:	f00a fa52 	bl	bfc92 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b57ee:	f00c fb5b 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b57f2:	6803      	ldr	r3, [r0, #0]
   b57f4:	695b      	ldr	r3, [r3, #20]
   b57f6:	4798      	blx	r3
        c = 0;
   b57f8:	ac1b      	add	r4, sp, #108	; 0x6c
   b57fa:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b57fc:	f00c fb54 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5800:	6803      	ldr	r3, [r0, #0]
   b5802:	691b      	ldr	r3, [r3, #16]
   b5804:	4798      	blx	r3
   b5806:	b138      	cbz	r0, b5818 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5808:	f00c fb4e 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b580c:	6803      	ldr	r3, [r0, #0]
   b580e:	695b      	ldr	r3, [r3, #20]
   b5810:	4798      	blx	r3
   b5812:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5816:	e7f1      	b.n	b57fc <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5818:	4630      	mov	r0, r6
   b581a:	f00e fd8d 	bl	c4338 <atof>
        Wire.requestFrom(COND, 20, 1);
   b581e:	f00c fb43 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5822:	2301      	movs	r3, #1
   b5824:	2214      	movs	r2, #20
   b5826:	2165      	movs	r1, #101	; 0x65
   b5828:	f00a fa33 	bl	bfc92 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b582c:	f00c fb3c 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5830:	6803      	ldr	r3, [r0, #0]
   b5832:	695b      	ldr	r3, [r3, #20]
   b5834:	4798      	blx	r3
        c = 0;
   b5836:	ac20      	add	r4, sp, #128	; 0x80
   b5838:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b583a:	f00c fb35 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b583e:	6803      	ldr	r3, [r0, #0]
   b5840:	691b      	ldr	r3, [r3, #16]
   b5842:	4798      	blx	r3
   b5844:	b138      	cbz	r0, b5856 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b5846:	f00c fb2f 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b584a:	6803      	ldr	r3, [r0, #0]
   b584c:	695b      	ldr	r3, [r3, #20]
   b584e:	4798      	blx	r3
   b5850:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5854:	e7f1      	b.n	b583a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b5856:	4630      	mov	r0, r6
   b5858:	f00e fd6e 	bl	c4338 <atof>
   b585c:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b5860:	f00c fb22 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5864:	2301      	movs	r3, #1
   b5866:	2214      	movs	r2, #20
   b5868:	2166      	movs	r1, #102	; 0x66
   b586a:	f00a fa12 	bl	bfc92 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b586e:	f00c fb1b 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5872:	6803      	ldr	r3, [r0, #0]
   b5874:	695b      	ldr	r3, [r3, #20]
   b5876:	4798      	blx	r3
        c = 0;
   b5878:	af25      	add	r7, sp, #148	; 0x94
   b587a:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b587c:	f00c fb14 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5880:	6803      	ldr	r3, [r0, #0]
   b5882:	691b      	ldr	r3, [r3, #16]
   b5884:	4798      	blx	r3
   b5886:	4604      	mov	r4, r0
   b5888:	b138      	cbz	r0, b589a <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b588a:	f00c fb0d 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b588e:	6803      	ldr	r3, [r0, #0]
   b5890:	695b      	ldr	r3, [r3, #20]
   b5892:	4798      	blx	r3
   b5894:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b5898:	e7f0      	b.n	b587c <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b589a:	4630      	mov	r0, r6
   b589c:	f00e fd4c 	bl	c4338 <atof>
        if(logSensors){
   b58a0:	4b5a      	ldr	r3, [pc, #360]	; (b5a0c <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b58a2:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b58a6:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b58a8:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b58ac:	2b00      	cmp	r3, #0
   b58ae:	d05c      	beq.n	b596a <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b58b0:	f00c f8c6 	bl	c1a40 <_ZN9TimeClass5monthEv>
   b58b4:	9011      	str	r0, [sp, #68]	; 0x44
   b58b6:	f00c f8b7 	bl	c1a28 <_ZN9TimeClass3dayEv>
   b58ba:	4604      	mov	r4, r0
   b58bc:	f00c f8c8 	bl	c1a50 <_ZN9TimeClass4yearEv>
   b58c0:	4683      	mov	fp, r0
   b58c2:	f00c f88d 	bl	c19e0 <_ZN9TimeClass4hourEv>
   b58c6:	9010      	str	r0, [sp, #64]	; 0x40
   b58c8:	f00c f896 	bl	c19f8 <_ZN9TimeClass6minuteEv>
   b58cc:	900f      	str	r0, [sp, #60]	; 0x3c
   b58ce:	f00c f89f 	bl	c1a10 <_ZN9TimeClass6secondEv>
   b58d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b58d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b58d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b58d8:	9004      	str	r0, [sp, #16]
   b58da:	e9cd b201 	strd	fp, r2, [sp, #4]
   b58de:	9103      	str	r1, [sp, #12]
   b58e0:	4a4b      	ldr	r2, [pc, #300]	; (b5a10 <_Z13sensorHandlerv+0x2a0>)
   b58e2:	9400      	str	r4, [sp, #0]
   b58e4:	2110      	movs	r1, #16
   b58e6:	a812      	add	r0, sp, #72	; 0x48
   b58e8:	f008 fc1a 	bl	be120 <snprintf>
   b58ec:	4849      	ldr	r0, [pc, #292]	; (b5a14 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b58ee:	7c03      	ldrb	r3, [r0, #16]
   b58f0:	b92b      	cbnz	r3, b58fe <_Z13sensorHandlerv+0x18e>
   b58f2:	4949      	ldr	r1, [pc, #292]	; (b5a18 <_Z13sensorHandlerv+0x2a8>)
   b58f4:	f244 2202 	movw	r2, #16898	; 0x4202
   b58f8:	3010      	adds	r0, #16
   b58fa:	f7fe fe95 	bl	b4628 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b58fe:	4649      	mov	r1, r9
   b5900:	4640      	mov	r0, r8
   b5902:	f00e fca5 	bl	c4250 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5906:	f00e f953 	bl	c3bb0 <__aeabi_f2d>
   b590a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b590e:	4b43      	ldr	r3, [pc, #268]	; (b5a1c <_Z13sensorHandlerv+0x2ac>)
   b5910:	6818      	ldr	r0, [r3, #0]
   b5912:	f00e f94d 	bl	c3bb0 <__aeabi_f2d>
   b5916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b591a:	4b41      	ldr	r3, [pc, #260]	; (b5a20 <_Z13sensorHandlerv+0x2b0>)
   b591c:	6818      	ldr	r0, [r3, #0]
   b591e:	f00e f947 	bl	c3bb0 <__aeabi_f2d>
   b5922:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5926:	f8da 0000 	ldr.w	r0, [sl]
   b592a:	f00e f941 	bl	c3bb0 <__aeabi_f2d>
   b592e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b5932:	4639      	mov	r1, r7
   b5934:	4630      	mov	r0, r6
   b5936:	f00e fc8b 	bl	c4250 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b593a:	f00e f939 	bl	c3bb0 <__aeabi_f2d>
   b593e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5942:	4b38      	ldr	r3, [pc, #224]	; (b5a24 <_Z13sensorHandlerv+0x2b4>)
   b5944:	6818      	ldr	r0, [r3, #0]
   b5946:	f00e f933 	bl	c3bb0 <__aeabi_f2d>
   b594a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b594e:	4b36      	ldr	r3, [pc, #216]	; (b5a28 <_Z13sensorHandlerv+0x2b8>)
   b5950:	6818      	ldr	r0, [r3, #0]
   b5952:	f00e f92d 	bl	c3bb0 <__aeabi_f2d>
   b5956:	aa12      	add	r2, sp, #72	; 0x48
   b5958:	e9cd 0100 	strd	r0, r1, [sp]
   b595c:	4933      	ldr	r1, [pc, #204]	; (b5a2c <_Z13sensorHandlerv+0x2bc>)
   b595e:	482d      	ldr	r0, [pc, #180]	; (b5a14 <_Z13sensorHandlerv+0x2a4>)
   b5960:	f7fe fd06 	bl	b4370 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b5964:	4832      	ldr	r0, [pc, #200]	; (b5a30 <_Z13sensorHandlerv+0x2c0>)
   b5966:	f001 fa65 	bl	b6e34 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b596a:	4c32      	ldr	r4, [pc, #200]	; (b5a34 <_Z13sensorHandlerv+0x2c4>)
   b596c:	f008 f8d2 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b5970:	6823      	ldr	r3, [r4, #0]
   b5972:	4283      	cmp	r3, r0
   b5974:	d244      	bcs.n	b5a00 <_Z13sensorHandlerv+0x290>
   b5976:	f008 f8cd 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b597a:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b597e:	6020      	str	r0, [r4, #0]
   b5980:	f008 f8c8 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b5984:	f200 3039 	addw	r0, r0, #825	; 0x339
   b5988:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b598a:	f00c fa8d 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b598e:	2163      	movs	r1, #99	; 0x63
   b5990:	f00a f998 	bl	bfcc4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5994:	f00c fa88 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b5998:	2172      	movs	r1, #114	; 0x72
   b599a:	f7fe fc70 	bl	b427e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b599e:	f00c fa83 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59a2:	f00a f996 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b59a6:	f00c fa7f 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59aa:	2164      	movs	r1, #100	; 0x64
   b59ac:	f00a f98a 	bl	bfcc4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59b0:	f00c fa7a 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59b4:	2172      	movs	r1, #114	; 0x72
   b59b6:	f7fe fc62 	bl	b427e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59ba:	f00c fa75 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59be:	f00a f988 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b59c2:	f00c fa71 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59c6:	2165      	movs	r1, #101	; 0x65
   b59c8:	f00a f97c 	bl	bfcc4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59cc:	f00c fa6c 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59d0:	2172      	movs	r1, #114	; 0x72
   b59d2:	f7fe fc54 	bl	b427e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59d6:	f00c fa67 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59da:	f00a f97a 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b59de:	f00c fa63 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59e2:	2166      	movs	r1, #102	; 0x66
   b59e4:	f00a f96e 	bl	bfcc4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b59e8:	f00c fa5e 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59ec:	2172      	movs	r1, #114	; 0x72
   b59ee:	f7fe fc46 	bl	b427e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b59f2:	f00c fa59 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b59f6:	f00a f96c 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b59fa:	4b0f      	ldr	r3, [pc, #60]	; (b5a38 <_Z13sensorHandlerv+0x2c8>)
   b59fc:	2201      	movs	r2, #1
   b59fe:	701a      	strb	r2, [r3, #0]
}
   b5a00:	b02b      	add	sp, #172	; 0xac
   b5a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5a06:	bf00      	nop
   b5a08:	2003ddcc 	.word	0x2003ddcc
   b5a0c:	2003def5 	.word	0x2003def5
   b5a10:	000c68c5 	.word	0x000c68c5
   b5a14:	2003df1c 	.word	0x2003df1c
   b5a18:	2003ddd1 	.word	0x2003ddd1
   b5a1c:	2003e570 	.word	0x2003e570
   b5a20:	2003e56c 	.word	0x2003e56c
   b5a24:	2003def8 	.word	0x2003def8
   b5a28:	2003de1c 	.word	0x2003de1c
   b5a2c:	000c68de 	.word	0x000c68de
   b5a30:	2003df2c 	.word	0x2003df2c
   b5a34:	2003e57c 	.word	0x2003e57c
   b5a38:	2003ddd0 	.word	0x2003ddd0
   b5a3c:	2003e574 	.word	0x2003e574

000b5a40 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5a44:	4e3c      	ldr	r6, [pc, #240]	; (b5b38 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5a46:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5b4c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b5a4a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5b50 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b5a4e:	b089      	sub	sp, #36	; 0x24
   b5a50:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5a52:	f00c fa69 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b5a56:	6803      	ldr	r3, [r0, #0]
   b5a58:	691b      	ldr	r3, [r3, #16]
   b5a5a:	4798      	blx	r3
   b5a5c:	2800      	cmp	r0, #0
   b5a5e:	d066      	beq.n	b5b2e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5a60:	f00c fa62 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b5a64:	220a      	movs	r2, #10
   b5a66:	4601      	mov	r1, r0
   b5a68:	4638      	mov	r0, r7
   b5a6a:	f00b fe19 	bl	c16a0 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5a6e:	68bb      	ldr	r3, [r7, #8]
   b5a70:	3307      	adds	r3, #7
   b5a72:	f023 0307 	bic.w	r3, r3, #7
    }
   b5a76:	466d      	mov	r5, sp
        char buffer[data.length()];
   b5a78:	ebad 0d03 	sub.w	sp, sp, r3
   b5a7c:	46ea      	mov	sl, sp
   b5a7e:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5a80:	68b9      	ldr	r1, [r7, #8]
   b5a82:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5a86:	458b      	cmp	fp, r1
   b5a88:	f103 0401 	add.w	r4, r3, #1
   b5a8c:	d207      	bcs.n	b5a9e <_Z11XBeeHandlerv+0x5e>
   b5a8e:	4659      	mov	r1, fp
   b5a90:	4638      	mov	r0, r7
   b5a92:	f00b fefd 	bl	c1890 <_ZNK6String6charAtEj>
   b5a96:	4623      	mov	r3, r4
   b5a98:	f80a 000b 	strb.w	r0, [sl, fp]
   b5a9c:	e7f0      	b.n	b5a80 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5a9e:	2901      	cmp	r1, #1
   b5aa0:	d90a      	bls.n	b5ab8 <_Z11XBeeHandlerv+0x78>
   b5aa2:	3901      	subs	r1, #1
   b5aa4:	4638      	mov	r0, r7
   b5aa6:	f00b fef3 	bl	c1890 <_ZNK6String6charAtEj>
   b5aaa:	280d      	cmp	r0, #13
   b5aac:	bf01      	itttt	eq
   b5aae:	68bb      	ldreq	r3, [r7, #8]
   b5ab0:	4453      	addeq	r3, sl
   b5ab2:	2200      	moveq	r2, #0
   b5ab4:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5ab8:	2201      	movs	r2, #1
   b5aba:	2102      	movs	r1, #2
   b5abc:	4650      	mov	r0, sl
   b5abe:	f7fe fe65 	bl	b478c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b5ac2:	f00c f899 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5ac6:	4631      	mov	r1, r6
   b5ac8:	f00b fbd5 	bl	c1276 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5acc:	f00c f894 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5ad0:	6839      	ldr	r1, [r7, #0]
   b5ad2:	f00b fbd0 	bl	c1276 <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5ad6:	f89a 3000 	ldrb.w	r3, [sl]
   b5ada:	3b42      	subs	r3, #66	; 0x42
   b5adc:	2b01      	cmp	r3, #1
   b5ade:	d803      	bhi.n	b5ae8 <_Z11XBeeHandlerv+0xa8>
   b5ae0:	f008 f818 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b5ae4:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5ae8:	f899 3000 	ldrb.w	r3, [r9]
   b5aec:	b1d3      	cbz	r3, b5b24 <_Z11XBeeHandlerv+0xe4>
   b5aee:	4813      	ldr	r0, [pc, #76]	; (b5b3c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5af0:	7c03      	ldrb	r3, [r0, #16]
   b5af2:	b92b      	cbnz	r3, b5b00 <_Z11XBeeHandlerv+0xc0>
   b5af4:	4912      	ldr	r1, [pc, #72]	; (b5b40 <_Z11XBeeHandlerv+0x100>)
   b5af6:	f244 2202 	movw	r2, #16898	; 0x4202
   b5afa:	3010      	adds	r0, #16
   b5afc:	f7fe fd94 	bl	b4628 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5b00:	4639      	mov	r1, r7
   b5b02:	f107 0010 	add.w	r0, r7, #16
   b5b06:	f00b fe79 	bl	c17fc <_ZN6StringC1ERKS_>
   b5b0a:	490e      	ldr	r1, [pc, #56]	; (b5b44 <_Z11XBeeHandlerv+0x104>)
   b5b0c:	480b      	ldr	r0, [pc, #44]	; (b5b3c <_Z11XBeeHandlerv+0xfc>)
   b5b0e:	f107 0210 	add.w	r2, r7, #16
   b5b12:	f7fe fc2d 	bl	b4370 <_ZN5Print8printlnfEPKcz>
   b5b16:	f107 0010 	add.w	r0, r7, #16
   b5b1a:	f00b fdd9 	bl	c16d0 <_ZN6StringD1Ev>
            logFile.close();
   b5b1e:	480a      	ldr	r0, [pc, #40]	; (b5b48 <_Z11XBeeHandlerv+0x108>)
   b5b20:	f001 f988 	bl	b6e34 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5b24:	4638      	mov	r0, r7
   b5b26:	f00b fdd3 	bl	c16d0 <_ZN6StringD1Ev>
   b5b2a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b5b2c:	e791      	b.n	b5a52 <_Z11XBeeHandlerv+0x12>
}
   b5b2e:	3724      	adds	r7, #36	; 0x24
   b5b30:	46bd      	mov	sp, r7
   b5b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b36:	bf00      	nop
   b5b38:	000c68f6 	.word	0x000c68f6
   b5b3c:	2003de9c 	.word	0x2003de9c
   b5b40:	2003ddef 	.word	0x2003ddef
   b5b44:	000c6908 	.word	0x000c6908
   b5b48:	2003deac 	.word	0x2003deac
   b5b4c:	2003dda0 	.word	0x2003dda0
   b5b50:	2003def4 	.word	0x2003def4

000b5b54 <_Z13dataOffloaderv>:
void dataOffloader(){
   b5b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b58:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b5b5a:	f00c f84d 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5b5e:	4963      	ldr	r1, [pc, #396]	; (b5cec <_Z13dataOffloaderv+0x198>)
   b5b60:	f00b fb89 	bl	c1276 <_ZN5Print7printlnEPKc>
    myFile.close();
   b5b64:	4862      	ldr	r0, [pc, #392]	; (b5cf0 <_Z13dataOffloaderv+0x19c>)
   b5b66:	f001 f965 	bl	b6e34 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b5b6a:	4962      	ldr	r1, [pc, #392]	; (b5cf4 <_Z13dataOffloaderv+0x1a0>)
   b5b6c:	4862      	ldr	r0, [pc, #392]	; (b5cf8 <_Z13dataOffloaderv+0x1a4>)
   b5b6e:	2200      	movs	r2, #0
   b5b70:	f7fe fd5a 	bl	b4628 <_ZN7FatFile4openEPKci>
   b5b74:	b948      	cbnz	r0, b5b8a <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b5b76:	4b61      	ldr	r3, [pc, #388]	; (b5cfc <_Z13dataOffloaderv+0x1a8>)
   b5b78:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5b7a:	f00c f83d 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5b7e:	4960      	ldr	r1, [pc, #384]	; (b5d00 <_Z13dataOffloaderv+0x1ac>)
}
   b5b80:	b02d      	add	sp, #180	; 0xb4
   b5b82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5b86:	f00b bb76 	b.w	c1276 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5b8a:	f00c f835 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5b8e:	495d      	ldr	r1, [pc, #372]	; (b5d04 <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b5b90:	4d5d      	ldr	r5, [pc, #372]	; (b5d08 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b5b92:	f00b fb70 	bl	c1276 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5b96:	f008 fe73 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b9a:	f008 fecf 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5b9e:	4604      	mov	r4, r0
   b5ba0:	b948      	cbnz	r0, b5bb6 <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b5ba2:	f008 fe6d 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ba6:	4622      	mov	r2, r4
   b5ba8:	4629      	mov	r1, r5
   b5baa:	f008 ff1a 	bl	be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5bae:	200a      	movs	r0, #10
   b5bb0:	f008 fb02 	bl	be1b8 <delay>
    while(!BLE.connected()){
   b5bb4:	e7ef      	b.n	b5b96 <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b5bb6:	f00c f81f 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5bba:	4954      	ldr	r1, [pc, #336]	; (b5d0c <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5bbc:	4f4e      	ldr	r7, [pc, #312]	; (b5cf8 <_Z13dataOffloaderv+0x1a4>)
   b5bbe:	4d4c      	ldr	r5, [pc, #304]	; (b5cf0 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5bc0:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5d30 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b5bc4:	f00b fb57 	bl	c1276 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5bc8:	2200      	movs	r2, #0
   b5bca:	4639      	mov	r1, r7
   b5bcc:	4628      	mov	r0, r5
   b5bce:	f001 f8be 	bl	b6d4e <_ZN7FatFile8openNextEPS_i>
   b5bd2:	b1f8      	cbz	r0, b5c14 <_Z13dataOffloaderv+0xc0>
   b5bd4:	f008 fe54 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5bd8:	f008 feb0 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5bdc:	b1d0      	cbz	r0, b5c14 <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5bde:	221e      	movs	r2, #30
   b5be0:	a901      	add	r1, sp, #4
   b5be2:	4628      	mov	r0, r5
   b5be4:	f001 fa7a 	bl	b70dc <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5be8:	f00c f806 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5bec:	4641      	mov	r1, r8
   b5bee:	aa01      	add	r2, sp, #4
   b5bf0:	f7fe fbbe 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5bf4:	a801      	add	r0, sp, #4
   b5bf6:	f00e fc72 	bl	c44de <strlen>
   b5bfa:	ab01      	add	r3, sp, #4
   b5bfc:	3804      	subs	r0, #4
   b5bfe:	4418      	add	r0, r3
   b5c00:	f00e fc76 	bl	c44f0 <strlwr>
   b5c04:	4942      	ldr	r1, [pc, #264]	; (b5d10 <_Z13dataOffloaderv+0x1bc>)
   b5c06:	f00e fccc 	bl	c45a2 <strstr>
   b5c0a:	b9d8      	cbnz	r0, b5c44 <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b5c0c:	4628      	mov	r0, r5
   b5c0e:	f001 f911 	bl	b6e34 <_ZN7FatFile5closeEv>
   b5c12:	e7d9      	b.n	b5bc8 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b5c14:	4838      	ldr	r0, [pc, #224]	; (b5cf8 <_Z13dataOffloaderv+0x1a4>)
   b5c16:	f001 f90d 	bl	b6e34 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5c1a:	2226      	movs	r2, #38	; 0x26
   b5c1c:	2100      	movs	r1, #0
   b5c1e:	a809      	add	r0, sp, #36	; 0x24
   b5c20:	f00e fbd2 	bl	c43c8 <memset>
    strcpy(fileCode,"filedone");
   b5c24:	493b      	ldr	r1, [pc, #236]	; (b5d14 <_Z13dataOffloaderv+0x1c0>)
   b5c26:	a809      	add	r0, sp, #36	; 0x24
   b5c28:	f00e fc34 	bl	c4494 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5c2c:	2300      	movs	r3, #0
   b5c2e:	2226      	movs	r2, #38	; 0x26
   b5c30:	a909      	add	r1, sp, #36	; 0x24
   b5c32:	4839      	ldr	r0, [pc, #228]	; (b5d18 <_Z13dataOffloaderv+0x1c4>)
   b5c34:	f008 fd14 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5c38:	4b30      	ldr	r3, [pc, #192]	; (b5cfc <_Z13dataOffloaderv+0x1a8>)
   b5c3a:	2200      	movs	r2, #0
   b5c3c:	701a      	strb	r2, [r3, #0]
}
   b5c3e:	b02d      	add	sp, #180	; 0xb4
   b5c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5c44:	2226      	movs	r2, #38	; 0x26
   b5c46:	2100      	movs	r1, #0
   b5c48:	a809      	add	r0, sp, #36	; 0x24
   b5c4a:	f00e fbbd 	bl	c43c8 <memset>
            strcpy(fileCode,"filename");
   b5c4e:	4933      	ldr	r1, [pc, #204]	; (b5d1c <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b5c50:	4e33      	ldr	r6, [pc, #204]	; (b5d20 <_Z13dataOffloaderv+0x1cc>)
   b5c52:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b5d18 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b5c56:	a809      	add	r0, sp, #36	; 0x24
   b5c58:	f00e fc1c 	bl	c4494 <strcpy>
            strcat(fileCode,namebuf);
   b5c5c:	a901      	add	r1, sp, #4
   b5c5e:	a809      	add	r0, sp, #36	; 0x24
   b5c60:	f00e fbe8 	bl	c4434 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5c64:	f00b ffc8 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5c68:	492e      	ldr	r1, [pc, #184]	; (b5d24 <_Z13dataOffloaderv+0x1d0>)
   b5c6a:	aa09      	add	r2, sp, #36	; 0x24
   b5c6c:	f7fe fb80 	bl	b4370 <_ZN5Print8printlnfEPKcz>
   b5c70:	2300      	movs	r3, #0
   b5c72:	2226      	movs	r2, #38	; 0x26
   b5c74:	a909      	add	r1, sp, #36	; 0x24
   b5c76:	4828      	ldr	r0, [pc, #160]	; (b5d18 <_Z13dataOffloaderv+0x1c4>)
   b5c78:	f008 fcf2 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5c7c:	f00b ffbc 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5c80:	4929      	ldr	r1, [pc, #164]	; (b5d28 <_Z13dataOffloaderv+0x1d4>)
   b5c82:	aa01      	add	r2, sp, #4
   b5c84:	f7fe fb74 	bl	b4370 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5c88:	2096      	movs	r0, #150	; 0x96
   b5c8a:	f008 fa95 	bl	be1b8 <delay>
            noInterrupts();
   b5c8e:	f00a f823 	bl	bfcd8 <_Z12noInterruptsv>
            while(myFile.available()){
   b5c92:	4630      	mov	r0, r6
   b5c94:	f7fe fa23 	bl	b40de <_ZN4File9availableEv>
   b5c98:	4604      	mov	r4, r0
   b5c9a:	b188      	cbz	r0, b5cc0 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5c9c:	2264      	movs	r2, #100	; 0x64
   b5c9e:	2100      	movs	r1, #0
   b5ca0:	a813      	add	r0, sp, #76	; 0x4c
   b5ca2:	f00e fb91 	bl	c43c8 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5ca6:	aa13      	add	r2, sp, #76	; 0x4c
   b5ca8:	2364      	movs	r3, #100	; 0x64
   b5caa:	210d      	movs	r1, #13
   b5cac:	4630      	mov	r0, r6
   b5cae:	f00b fcdf 	bl	c1670 <_ZN6Stream14readBytesUntilEcPcj>
   b5cb2:	2300      	movs	r3, #0
   b5cb4:	2264      	movs	r2, #100	; 0x64
   b5cb6:	a913      	add	r1, sp, #76	; 0x4c
   b5cb8:	4648      	mov	r0, r9
   b5cba:	f008 fcd1 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5cbe:	e7e8      	b.n	b5c92 <_Z13dataOffloaderv+0x13e>
            interrupts();
   b5cc0:	f00a f80c 	bl	bfcdc <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5cc4:	2226      	movs	r2, #38	; 0x26
   b5cc6:	4621      	mov	r1, r4
   b5cc8:	a809      	add	r0, sp, #36	; 0x24
   b5cca:	f00e fb7d 	bl	c43c8 <memset>
            strcpy(fileCode,"filecomp");
   b5cce:	4917      	ldr	r1, [pc, #92]	; (b5d2c <_Z13dataOffloaderv+0x1d8>)
   b5cd0:	a809      	add	r0, sp, #36	; 0x24
   b5cd2:	f00e fbdf 	bl	c4494 <strcpy>
   b5cd6:	4623      	mov	r3, r4
   b5cd8:	2226      	movs	r2, #38	; 0x26
   b5cda:	a909      	add	r1, sp, #36	; 0x24
   b5cdc:	480e      	ldr	r0, [pc, #56]	; (b5d18 <_Z13dataOffloaderv+0x1c4>)
   b5cde:	f008 fcbf 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5ce2:	2096      	movs	r0, #150	; 0x96
   b5ce4:	f008 fa68 	bl	be1b8 <delay>
   b5ce8:	e790      	b.n	b5c0c <_Z13dataOffloaderv+0xb8>
   b5cea:	bf00      	nop
   b5cec:	000c6929 	.word	0x000c6929
   b5cf0:	2003df2c 	.word	0x2003df2c
   b5cf4:	000c6946 	.word	0x000c6946
   b5cf8:	2003de78 	.word	0x2003de78
   b5cfc:	2003e0d0 	.word	0x2003e0d0
   b5d00:	000c6948 	.word	0x000c6948
   b5d04:	000c6975 	.word	0x000c6975
   b5d08:	2003dda8 	.word	0x2003dda8
   b5d0c:	000c6995 	.word	0x000c6995
   b5d10:	000c69d3 	.word	0x000c69d3
   b5d14:	000c69d8 	.word	0x000c69d8
   b5d18:	2003e0c8 	.word	0x2003e0c8
   b5d1c:	000c69e1 	.word	0x000c69e1
   b5d20:	2003df1c 	.word	0x2003df1c
   b5d24:	000c69ea 	.word	0x000c69ea
   b5d28:	000c69fd 	.word	0x000c69fd
   b5d2c:	000c6a25 	.word	0x000c6a25
   b5d30:	000c69aa 	.word	0x000c69aa

000b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5d34:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5d36:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5d38:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5d3a:	b17c      	cbz	r4, b5d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5d3c:	6863      	ldr	r3, [r4, #4]
   b5d3e:	3b01      	subs	r3, #1
   b5d40:	6063      	str	r3, [r4, #4]
   b5d42:	b95b      	cbnz	r3, b5d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5d44:	6823      	ldr	r3, [r4, #0]
   b5d46:	4620      	mov	r0, r4
   b5d48:	689b      	ldr	r3, [r3, #8]
   b5d4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d4c:	68a3      	ldr	r3, [r4, #8]
   b5d4e:	3b01      	subs	r3, #1
   b5d50:	60a3      	str	r3, [r4, #8]
   b5d52:	b91b      	cbnz	r3, b5d5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5d54:	6823      	ldr	r3, [r4, #0]
   b5d56:	4620      	mov	r0, r4
   b5d58:	68db      	ldr	r3, [r3, #12]
   b5d5a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	bd38      	pop	{r3, r4, r5, pc}

000b5d60 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d64:	b084      	sub	sp, #16
   b5d66:	af02      	add	r7, sp, #8
   b5d68:	4680      	mov	r8, r0
   b5d6a:	4691      	mov	r9, r2
   b5d6c:	461e      	mov	r6, r3
   b5d6e:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5d70:	f00e fbb5 	bl	c44de <strlen>
   b5d74:	3009      	adds	r0, #9
   b5d76:	f020 0107 	bic.w	r1, r0, #7
   b5d7a:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5d7e:	4640      	mov	r0, r8
   b5d80:	f00e fbad 	bl	c44de <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5d84:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5d88:	4925      	ldr	r1, [pc, #148]	; (b5e20 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5d8a:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5d8c:	4603      	mov	r3, r0
   b5d8e:	4642      	mov	r2, r8
   b5d90:	4620      	mov	r0, r4
   b5d92:	f008 f9b5 	bl	be100 <sprintf>
    if(sendLTE || sendMode == 4){
   b5d96:	f1ba 0f00 	cmp.w	sl, #0
   b5d9a:	d101      	bne.n	b5da0 <_Z8sendDataPKchbbb+0x40>
   b5d9c:	2d04      	cmp	r5, #4
   b5d9e:	d10c      	bne.n	b5dba <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5da0:	4b20      	ldr	r3, [pc, #128]	; (b5e24 <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5da2:	4921      	ldr	r1, [pc, #132]	; (b5e28 <_Z8sendDataPKchbbb+0xc8>)
   b5da4:	781b      	ldrb	r3, [r3, #0]
   b5da6:	f88d 3000 	strb.w	r3, [sp]
   b5daa:	4638      	mov	r0, r7
   b5dac:	233c      	movs	r3, #60	; 0x3c
   b5dae:	4622      	mov	r2, r4
   b5db0:	f009 fd66 	bl	bf880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5db4:	1d38      	adds	r0, r7, #4
   b5db6:	f7ff ffbd 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5dba:	f1b9 0f00 	cmp.w	r9, #0
   b5dbe:	d101      	bne.n	b5dc4 <_Z8sendDataPKchbbb+0x64>
   b5dc0:	2d01      	cmp	r5, #1
   b5dc2:	d121      	bne.n	b5e08 <_Z8sendDataPKchbbb+0xa8>
   b5dc4:	f008 fd5c 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dc8:	f008 fdb8 	bl	be93c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5dcc:	b1e0      	cbz	r0, b5e08 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5dce:	4620      	mov	r0, r4
   b5dd0:	f00e fb85 	bl	c44de <strlen>
   b5dd4:	3007      	adds	r0, #7
   b5dd6:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5dda:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5ddc:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5de0:	4620      	mov	r0, r4
   b5de2:	f00e fb7c 	bl	c44de <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5de6:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5dea:	4602      	mov	r2, r0
   b5dec:	4621      	mov	r1, r4
   b5dee:	4648      	mov	r0, r9
   b5df0:	f00e fac2 	bl	c4378 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5df4:	4620      	mov	r0, r4
   b5df6:	f00e fb72 	bl	c44de <strlen>
   b5dfa:	2300      	movs	r3, #0
   b5dfc:	4602      	mov	r2, r0
   b5dfe:	4649      	mov	r1, r9
   b5e00:	480a      	ldr	r0, [pc, #40]	; (b5e2c <_Z8sendDataPKchbbb+0xcc>)
   b5e02:	f008 fc2d 	bl	be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5e06:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5e08:	b90e      	cbnz	r6, b5e0e <_Z8sendDataPKchbbb+0xae>
   b5e0a:	2d02      	cmp	r5, #2
   b5e0c:	d104      	bne.n	b5e18 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5e0e:	f00c f88b 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b5e12:	4621      	mov	r1, r4
   b5e14:	f00b fa2f 	bl	c1276 <_ZN5Print7printlnEPKc>
}
   b5e18:	3708      	adds	r7, #8
   b5e1a:	46bd      	mov	sp, r7
   b5e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5e20:	000c6a2e 	.word	0x000c6a2e
   b5e24:	2003dda4 	.word	0x2003dda4
   b5e28:	000c6a35 	.word	0x000c6a35
   b5e2c:	2003e5e4 	.word	0x2003e5e4

000b5e30 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5e30:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5e32:	4d2a      	ldr	r5, [pc, #168]	; (b5edc <_Z16sendResponseDatav+0xac>)
   b5e34:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5e36:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5e38:	2b00      	cmp	r3, #0
   b5e3a:	d04d      	beq.n	b5ed8 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);
   b5e3c:	2241      	movs	r2, #65	; 0x41
   b5e3e:	2100      	movs	r1, #0
   b5e40:	a80b      	add	r0, sp, #44	; 0x2c
   b5e42:	f00e fac1 	bl	c43c8 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),(int)(senseTemp*1000));
   b5e46:	4b26      	ldr	r3, [pc, #152]	; (b5ee0 <_Z16sendResponseDatav+0xb0>)
   b5e48:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5ee4 <_Z16sendResponseDatav+0xb4>
   b5e4c:	edd3 7a00 	vldr	s15, [r3]
   b5e50:	4b25      	ldr	r3, [pc, #148]	; (b5ee8 <_Z16sendResponseDatav+0xb8>)
   b5e52:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);
   b5e56:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),(int)(senseTemp*1000));
   b5e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e5c:	edcd 7a08 	vstr	s15, [sp, #32]
   b5e60:	edd3 7a00 	vldr	s15, [r3]
   b5e64:	4b21      	ldr	r3, [pc, #132]	; (b5eec <_Z16sendResponseDatav+0xbc>)
   b5e66:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e6e:	edcd 7a07 	vstr	s15, [sp, #28]
   b5e72:	edd3 7a00 	vldr	s15, [r3]
   b5e76:	4b1e      	ldr	r3, [pc, #120]	; (b5ef0 <_Z16sendResponseDatav+0xc0>)
   b5e78:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e80:	edcd 7a06 	vstr	s15, [sp, #24]
   b5e84:	edd3 7a00 	vldr	s15, [r3]
   b5e88:	4b1a      	ldr	r3, [pc, #104]	; (b5ef4 <_Z16sendResponseDatav+0xc4>)
   b5e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e92:	edcd 7a05 	vstr	s15, [sp, #20]
   b5e96:	edd3 7a00 	vldr	s15, [r3]
   b5e9a:	4b17      	ldr	r3, [pc, #92]	; (b5ef8 <_Z16sendResponseDatav+0xc8>)
   b5e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ea4:	edcd 7a04 	vstr	s15, [sp, #16]
   b5ea8:	6818      	ldr	r0, [r3, #0]
   b5eaa:	f00d fe81 	bl	c3bb0 <__aeabi_f2d>
   b5eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5eb2:	4b12      	ldr	r3, [pc, #72]	; (b5efc <_Z16sendResponseDatav+0xcc>)
   b5eb4:	6818      	ldr	r0, [r3, #0]
   b5eb6:	f00d fe7b 	bl	c3bb0 <__aeabi_f2d>
   b5eba:	2201      	movs	r2, #1
   b5ebc:	e9cd 0100 	strd	r0, r1, [sp]
   b5ec0:	490f      	ldr	r1, [pc, #60]	; (b5f00 <_Z16sendResponseDatav+0xd0>)
   b5ec2:	a80b      	add	r0, sp, #44	; 0x2c
   b5ec4:	f008 f91c 	bl	be100 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5ec8:	7829      	ldrb	r1, [r5, #0]
   b5eca:	9400      	str	r4, [sp, #0]
   b5ecc:	4623      	mov	r3, r4
   b5ece:	4622      	mov	r2, r4
   b5ed0:	a80b      	add	r0, sp, #44	; 0x2c
   b5ed2:	f7ff ff45 	bl	b5d60 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5ed6:	702c      	strb	r4, [r5, #0]
}
   b5ed8:	b01d      	add	sp, #116	; 0x74
   b5eda:	bd30      	pop	{r4, r5, pc}
   b5edc:	2003e0d8 	.word	0x2003e0d8
   b5ee0:	2003e578 	.word	0x2003e578
   b5ee4:	447a0000 	.word	0x447a0000
   b5ee8:	2003e570 	.word	0x2003e570
   b5eec:	2003e568 	.word	0x2003e568
   b5ef0:	2003e574 	.word	0x2003e574
   b5ef4:	2003e56c 	.word	0x2003e56c
   b5ef8:	2003def8 	.word	0x2003def8
   b5efc:	2003de1c 	.word	0x2003de1c
   b5f00:	000c6a3d 	.word	0x000c6a3d

000b5f04 <_Z12statusUpdatev>:
void statusUpdate(){
   b5f04:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5f06:	4e27      	ldr	r6, [pc, #156]	; (b5fa4 <_Z12statusUpdatev+0xa0>)
   b5f08:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5f0a:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5f0c:	2b00      	cmp	r3, #0
   b5f0e:	d03f      	beq.n	b5f90 <_Z12statusUpdatev+0x8c>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5f10:	4a25      	ldr	r2, [pc, #148]	; (b5fa8 <_Z12statusUpdatev+0xa4>)
   b5f12:	4b26      	ldr	r3, [pc, #152]	; (b5fac <_Z12statusUpdatev+0xa8>)
   b5f14:	6810      	ldr	r0, [r2, #0]
   b5f16:	781b      	ldrb	r3, [r3, #0]
   b5f18:	9307      	str	r3, [sp, #28]
   b5f1a:	f00d fe49 	bl	c3bb0 <__aeabi_f2d>
   b5f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5f22:	4a23      	ldr	r2, [pc, #140]	; (b5fb0 <_Z12statusUpdatev+0xac>)
        Serial.println(LTEStatusCount);
   b5f24:	4c23      	ldr	r4, [pc, #140]	; (b5fb4 <_Z12statusUpdatev+0xb0>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5f26:	6810      	ldr	r0, [r2, #0]
   b5f28:	f00d fe42 	bl	c3bb0 <__aeabi_f2d>
   b5f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5f30:	4a21      	ldr	r2, [pc, #132]	; (b5fb8 <_Z12statusUpdatev+0xb4>)
   b5f32:	9b07      	ldr	r3, [sp, #28]
   b5f34:	8812      	ldrh	r2, [r2, #0]
   b5f36:	4921      	ldr	r1, [pc, #132]	; (b5fbc <_Z12statusUpdatev+0xb8>)
   b5f38:	9200      	str	r2, [sp, #0]
   b5f3a:	a809      	add	r0, sp, #36	; 0x24
   b5f3c:	2201      	movs	r2, #1
   b5f3e:	f008 f8df 	bl	be100 <sprintf>
        Serial.println(updateStr);
   b5f42:	f00b fe59 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b5f46:	a909      	add	r1, sp, #36	; 0x24
   b5f48:	f00b f995 	bl	c1276 <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5f4c:	f00b fe54 	bl	c1bf8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5f50:	8821      	ldrh	r1, [r4, #0]
   b5f52:	4605      	mov	r5, r0
   b5f54:	220a      	movs	r2, #10
   b5f56:	f00b f99a 	bl	c128e <_ZN5Print11printNumberEmh>
        n += println();
   b5f5a:	4628      	mov	r0, r5
   b5f5c:	f00b f97f 	bl	c125e <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5f60:	4b17      	ldr	r3, [pc, #92]	; (b5fc0 <_Z12statusUpdatev+0xbc>)
   b5f62:	781b      	ldrb	r3, [r3, #0]
   b5f64:	b9b3      	cbnz	r3, b5f94 <_Z12statusUpdatev+0x90>
   b5f66:	4b17      	ldr	r3, [pc, #92]	; (b5fc4 <_Z12statusUpdatev+0xc0>)
   b5f68:	781b      	ldrb	r3, [r3, #0]
   b5f6a:	b99b      	cbnz	r3, b5f94 <_Z12statusUpdatev+0x90>
   b5f6c:	8823      	ldrh	r3, [r4, #0]
   b5f6e:	b1a3      	cbz	r3, b5f9a <_Z12statusUpdatev+0x96>
   b5f70:	f013 0303 	ands.w	r3, r3, #3
   b5f74:	d111      	bne.n	b5f9a <_Z12statusUpdatev+0x96>
            sendData(updateStr,0,false,false,true);
   b5f76:	2201      	movs	r2, #1
   b5f78:	9200      	str	r2, [sp, #0]
   b5f7a:	4619      	mov	r1, r3
   b5f7c:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5f7e:	a809      	add	r0, sp, #36	; 0x24
   b5f80:	f7ff feee 	bl	b5d60 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5f84:	8823      	ldrh	r3, [r4, #0]
   b5f86:	b10b      	cbz	r3, b5f8c <_Z12statusUpdatev+0x88>
   b5f88:	3b01      	subs	r3, #1
   b5f8a:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5f8c:	2300      	movs	r3, #0
   b5f8e:	7033      	strb	r3, [r6, #0]
}
   b5f90:	b010      	add	sp, #64	; 0x40
   b5f92:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5f94:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5f98:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5f9a:	2100      	movs	r1, #0
   b5f9c:	2301      	movs	r3, #1
   b5f9e:	9100      	str	r1, [sp, #0]
   b5fa0:	461a      	mov	r2, r3
   b5fa2:	e7ec      	b.n	b5f7e <_Z12statusUpdatev+0x7a>
   b5fa4:	2003e5c8 	.word	0x2003e5c8
   b5fa8:	2003def8 	.word	0x2003def8
   b5fac:	2003ddb8 	.word	0x2003ddb8
   b5fb0:	2003de1c 	.word	0x2003de1c
   b5fb4:	2003dd8e 	.word	0x2003dd8e
   b5fb8:	2003e5a8 	.word	0x2003e5a8
   b5fbc:	000c6a61 	.word	0x000c6a61
   b5fc0:	2003dd58 	.word	0x2003dd58
   b5fc4:	2003dd9c 	.word	0x2003dd9c

000b5fc8 <loop>:
void loop(){
   b5fc8:	b508      	push	{r3, lr}
    getPositionData();
   b5fca:	f7ff f9a5 	bl	b5318 <_Z15getPositionDatav>
    readPowerSys();
   b5fce:	f7fe feaf 	bl	b4d30 <_Z12readPowerSysv>
    sensorHandler();
   b5fd2:	f7ff fbcd 	bl	b5770 <_Z13sensorHandlerv>
    XBeeHandler();
   b5fd6:	f7ff fd33 	bl	b5a40 <_Z11XBeeHandlerv>
    statusUpdate();
   b5fda:	f7ff ff93 	bl	b5f04 <_Z12statusUpdatev>
    updateMotors();
   b5fde:	f7ff fab7 	bl	b5550 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5fe2:	4b04      	ldr	r3, [pc, #16]	; (b5ff4 <loop+0x2c>)
   b5fe4:	781b      	ldrb	r3, [r3, #0]
   b5fe6:	b10b      	cbz	r3, b5fec <loop+0x24>
   b5fe8:	f7ff fdb4 	bl	b5b54 <_Z13dataOffloaderv>
}
   b5fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendResponseData();
   b5ff0:	f7ff bf1e 	b.w	b5e30 <_Z16sendResponseDatav>
   b5ff4:	2003e0d0 	.word	0x2003e0d0

000b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ff8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ffa:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5ffe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6000:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6002:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6006:	42ae      	cmp	r6, r5
   b6008:	d004      	beq.n	b6014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b600a:	4628      	mov	r0, r5
   b600c:	f00b fb60 	bl	c16d0 <_ZN6StringD1Ev>
   b6010:	3514      	adds	r5, #20
   b6012:	e7f8      	b.n	b6006 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6014:	6820      	ldr	r0, [r4, #0]
   b6016:	f008 f863 	bl	be0e0 <free>
    AllocatorT::free(data_);
}
   b601a:	4620      	mov	r0, r4
   b601c:	bd70      	pop	{r4, r5, r6, pc}

000b601e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b601e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6020:	4616      	mov	r6, r2
   b6022:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b6024:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6026:	e9c0 2200 	strd	r2, r2, [r0]
   b602a:	4604      	mov	r4, r0
   b602c:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b602e:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b6030:	4619      	mov	r1, r3
   b6032:	a804      	add	r0, sp, #16
   b6034:	f008 fad6 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b6038:	9914      	ldr	r1, [sp, #80]	; 0x50
   b603a:	4638      	mov	r0, r7
   b603c:	f008 fad2 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6040:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b6042:	9302      	str	r3, [sp, #8]
   b6044:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6046:	4620      	mov	r0, r4
   b6048:	e9cd 7300 	strd	r7, r3, [sp]
   b604c:	4632      	mov	r2, r6
   b604e:	ab04      	add	r3, sp, #16
   b6050:	4629      	mov	r1, r5
   b6052:	f009 f83d 	bl	bf0d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b6056:	4620      	mov	r0, r4
   b6058:	b00f      	add	sp, #60	; 0x3c
   b605a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b605c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b605c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b605e:	4c0b      	ldr	r4, [pc, #44]	; (b608c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6060:	7821      	ldrb	r1, [r4, #0]
   b6062:	f3bf 8f5b 	dmb	ish
   b6066:	f011 0101 	ands.w	r1, r1, #1
   b606a:	d10b      	bne.n	b6084 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b606c:	4620      	mov	r0, r4
   b606e:	9101      	str	r1, [sp, #4]
   b6070:	f7fe f826 	bl	b40c0 <__cxa_guard_acquire>
   b6074:	9901      	ldr	r1, [sp, #4]
   b6076:	b128      	cbz	r0, b6084 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6078:	4805      	ldr	r0, [pc, #20]	; (b6090 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b607a:	f00b f9dc 	bl	c1436 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b607e:	4620      	mov	r0, r4
   b6080:	f7fe f823 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b6084:	4802      	ldr	r0, [pc, #8]	; (b6090 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6086:	b002      	add	sp, #8
   b6088:	bd10      	pop	{r4, pc}
   b608a:	bf00      	nop
   b608c:	2003dd4c 	.word	0x2003dd4c
   b6090:	2003dd50 	.word	0x2003dd50

000b6094 <_Z8setupSPIv>:
void setupSPI(){
   b6094:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b6096:	f7ff ffe1 	bl	b605c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b609a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b609e:	2100      	movs	r1, #0
   b60a0:	f00b f9e7 	bl	c1472 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b60a4:	f7ff ffda 	bl	b605c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b60a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b60ac:	4901      	ldr	r1, [pc, #4]	; (b60b4 <_Z8setupSPIv+0x20>)
   b60ae:	2201      	movs	r2, #1
   b60b0:	f00b ba7e 	b.w	c15b0 <_ZN8SPIClass13setClockSpeedEjj>
   b60b4:	000f4240 	.word	0x000f4240

000b60b8 <setup>:
void setup(){
   b60b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b60bc:	48c6      	ldr	r0, [pc, #792]	; (b63d8 <setup+0x320>)
    leftMotorSpeed = setLSpeed = 90;
   b60be:	4fc7      	ldr	r7, [pc, #796]	; (b63dc <setup+0x324>)
   b60c0:	7c03      	ldrb	r3, [r0, #16]
    rightMotorSpeed = setRSpeed = 90;
   b60c2:	4dc7      	ldr	r5, [pc, #796]	; (b63e0 <setup+0x328>)
   b60c4:	f003 0303 	and.w	r3, r3, #3
   b60c8:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b60cc:	b093      	sub	sp, #76	; 0x4c
   b60ce:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b60d0:	2200      	movs	r2, #0
   b60d2:	2101      	movs	r1, #1
   b60d4:	3004      	adds	r0, #4
   b60d6:	f007 ff0d 	bl	bdef4 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b60da:	2101      	movs	r1, #1
   b60dc:	2002      	movs	r0, #2
   b60de:	f00b fe8b 	bl	c1df8 <pinMode>
        pinMode(PWR_EN, OUTPUT);
   b60e2:	2101      	movs	r1, #1
   b60e4:	201c      	movs	r0, #28
   b60e6:	f00b fe87 	bl	c1df8 <pinMode>
        digitalWrite(PWR_EN,LOW);
   b60ea:	2100      	movs	r1, #0
   b60ec:	201c      	movs	r0, #28
   b60ee:	f00b fe94 	bl	c1e1a <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b60f2:	2100      	movs	r1, #0
   b60f4:	201d      	movs	r0, #29
   b60f6:	f00b fe7f 	bl	c1df8 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b60fa:	2100      	movs	r1, #0
   b60fc:	2002      	movs	r0, #2
   b60fe:	f00b fe8c 	bl	c1e1a <digitalWrite>
   b6102:	f007 fd07 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;
   b6106:	4ab7      	ldr	r2, [pc, #732]	; (b63e4 <setup+0x32c>)
   b6108:	235a      	movs	r3, #90	; 0x5a
   b610a:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;
   b610c:	4ab6      	ldr	r2, [pc, #728]	; (b63e8 <setup+0x330>)
    leftMotorSpeed = setLSpeed = 90;
   b610e:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b6110:	2400      	movs	r4, #0
   b6112:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;
   b6116:	702b      	strb	r3, [r5, #0]
   b6118:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b611a:	2106      	movs	r1, #6
   b611c:	e9cd 4800 	strd	r4, r8, [sp]
   b6120:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6128:	4606      	mov	r6, r0
   b612a:	48b0      	ldr	r0, [pc, #704]	; (b63ec <setup+0x334>)
   b612c:	f00b f952 	bl	c13d4 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6130:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6138:	e9cd 4800 	strd	r4, r8, [sp]
   b613c:	2105      	movs	r1, #5
   b613e:	48ac      	ldr	r0, [pc, #688]	; (b63f0 <setup+0x338>)
    logSensors = true;
   b6140:	f8df 8364 	ldr.w	r8, [pc, #868]	; b64a8 <setup+0x3f0>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6144:	f00b f946 	bl	c13d4 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b6148:	7839      	ldrb	r1, [r7, #0]
   b614a:	48a8      	ldr	r0, [pc, #672]	; (b63ec <setup+0x334>)
    logMessages = true;
   b614c:	4fa9      	ldr	r7, [pc, #676]	; (b63f4 <setup+0x33c>)
    ESCL.write(setLSpeed);
   b614e:	f00b f904 	bl	c135a <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b6152:	7829      	ldrb	r1, [r5, #0]
   b6154:	48a6      	ldr	r0, [pc, #664]	; (b63f0 <setup+0x338>)
   b6156:	f00b f900 	bl	c135a <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b615a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b615e:	f008 f82b 	bl	be1b8 <delay>
    BLE.on();
   b6162:	f008 fb8d 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6166:	f008 fbd5 	bl	be914 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b616a:	f008 fb89 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b616e:	2108      	movs	r1, #8
   b6170:	f008 fbd7 	bl	be922 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b6174:	f00b fd40 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b6178:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b617c:	f00b fd2c 	bl	c1bd8 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6180:	f00b fed2 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   b6184:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6188:	f00b fcce 	bl	c1b28 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b618c:	f7ff ff82 	bl	b6094 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b6190:	f7fe fd84 	bl	b4c9c <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b6194:	f7fe fd9a 	bl	b4ccc <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b6198:	2301      	movs	r3, #1
   b619a:	4997      	ldr	r1, [pc, #604]	; (b63f8 <setup+0x340>)
   b619c:	4897      	ldr	r0, [pc, #604]	; (b63fc <setup+0x344>)
   b619e:	4622      	mov	r2, r4
   b61a0:	e9cd 4400 	strd	r4, r4, [sp]
   b61a4:	f007 ff1c 	bl	bdfe0 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b61a8:	4995      	ldr	r1, [pc, #596]	; (b6400 <setup+0x348>)
   b61aa:	4a96      	ldr	r2, [pc, #600]	; (b6404 <setup+0x34c>)
   b61ac:	4896      	ldr	r0, [pc, #600]	; (b6408 <setup+0x350>)
   b61ae:	f009 fa70 	bl	bf692 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;
   b61b2:	4b96      	ldr	r3, [pc, #600]	; (b640c <setup+0x354>)
   b61b4:	701c      	strb	r4, [r3, #0]
    GPSAvail = false;
   b61b6:	4b96      	ldr	r3, [pc, #600]	; (b6410 <setup+0x358>)
   b61b8:	701c      	strb	r4, [r3, #0]
    CompassAvail = false;
   b61ba:	4b96      	ldr	r3, [pc, #600]	; (b6414 <setup+0x35c>)
   b61bc:	701c      	strb	r4, [r3, #0]
   b61be:	f007 fca9 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b61c2:	4b95      	ldr	r3, [pc, #596]	; (b6418 <setup+0x360>)
   b61c4:	6018      	str	r0, [r3, #0]
   b61c6:	4b95      	ldr	r3, [pc, #596]	; (b641c <setup+0x364>)
   b61c8:	6018      	str	r0, [r3, #0]
   b61ca:	4b95      	ldr	r3, [pc, #596]	; (b6420 <setup+0x368>)
   b61cc:	6018      	str	r0, [r3, #0]
   b61ce:	4b95      	ldr	r3, [pc, #596]	; (b6424 <setup+0x36c>)
   b61d0:	6018      	str	r0, [r3, #0]
   b61d2:	4b95      	ldr	r3, [pc, #596]	; (b6428 <setup+0x370>)
   b61d4:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b61d6:	4b95      	ldr	r3, [pc, #596]	; (b642c <setup+0x374>)
   b61d8:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b61da:	4b95      	ldr	r3, [pc, #596]	; (b6430 <setup+0x378>)
   b61dc:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b61de:	4b95      	ldr	r3, [pc, #596]	; (b6434 <setup+0x37c>)
   b61e0:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b61e2:	4b95      	ldr	r3, [pc, #596]	; (b6438 <setup+0x380>)
   b61e4:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b61e6:	4b95      	ldr	r3, [pc, #596]	; (b643c <setup+0x384>)
   b61e8:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b61ea:	4b95      	ldr	r3, [pc, #596]	; (b6440 <setup+0x388>)
   b61ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b61f0:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;
   b61f2:	4b94      	ldr	r3, [pc, #592]	; (b6444 <setup+0x38c>)
   b61f4:	701c      	strb	r4, [r3, #0]
    battPercent = 50;
   b61f6:	4b94      	ldr	r3, [pc, #592]	; (b6448 <setup+0x390>)
    logSensors = true;
   b61f8:	2501      	movs	r5, #1
    battPercent = 50;
   b61fa:	2232      	movs	r2, #50	; 0x32
   b61fc:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b61fe:	f888 5000 	strb.w	r5, [r8]
    logMessages = true;
   b6202:	703d      	strb	r5, [r7, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b6204:	f008 fb3c 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6208:	4a90      	ldr	r2, [pc, #576]	; (b644c <setup+0x394>)
   b620a:	4601      	mov	r1, r0
   b620c:	a80d      	add	r0, sp, #52	; 0x34
   b620e:	f009 f889 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6212:	a80d      	add	r0, sp, #52	; 0x34
   b6214:	f008 fc39 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b6218:	f008 fb32 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b621c:	4a8c      	ldr	r2, [pc, #560]	; (b6450 <setup+0x398>)
   b621e:	4601      	mov	r1, r0
   b6220:	a80d      	add	r0, sp, #52	; 0x34
   b6222:	f009 f87f 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6226:	a80d      	add	r0, sp, #52	; 0x34
   b6228:	f008 fc2f 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b622c:	f008 fb28 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6230:	4a88      	ldr	r2, [pc, #544]	; (b6454 <setup+0x39c>)
   b6232:	4601      	mov	r1, r0
   b6234:	a80d      	add	r0, sp, #52	; 0x34
   b6236:	f009 f875 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b623a:	a80d      	add	r0, sp, #52	; 0x34
   b623c:	f008 fc25 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);
   b6240:	f008 fb1e 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6244:	4a84      	ldr	r2, [pc, #528]	; (b6458 <setup+0x3a0>)
   b6246:	4601      	mov	r1, r0
   b6248:	a80d      	add	r0, sp, #52	; 0x34
   b624a:	f009 f86b 	bl	bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b624e:	a80d      	add	r0, sp, #52	; 0x34
   b6250:	f008 fc1b 	bl	bea8a <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b6254:	4b81      	ldr	r3, [pc, #516]	; (b645c <setup+0x3a4>)
   b6256:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b6258:	4b81      	ldr	r3, [pc, #516]	; (b6460 <setup+0x3a8>)
        BleUuid tempUUID(uuid);
   b625a:	a80d      	add	r0, sp, #52	; 0x34
   b625c:	6819      	ldr	r1, [r3, #0]
   b625e:	f008 f9c1 	bl	be5e4 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6262:	a80d      	add	r0, sp, #52	; 0x34
   b6264:	f008 f920 	bl	be4a8 <_ZNK8particle7BleUuid4typeEv>
   b6268:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b626a:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b626c:	2d00      	cmp	r5, #0
   b626e:	f040 8127 	bne.w	b64c0 <setup+0x408>
            uint16_t uuid16 = tempUUID.shorted();
   b6272:	f008 f935 	bl	be4e0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6276:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6278:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b627c:	2302      	movs	r3, #2
   b627e:	aa09      	add	r2, sp, #36	; 0x24
   b6280:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6282:	4878      	ldr	r0, [pc, #480]	; (b6464 <setup+0x3ac>)
   b6284:	f008 fd2c 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b6288:	2300      	movs	r3, #0
   b628a:	4974      	ldr	r1, [pc, #464]	; (b645c <setup+0x3a4>)
   b628c:	4875      	ldr	r0, [pc, #468]	; (b6464 <setup+0x3ac>)
   b628e:	2208      	movs	r2, #8
   b6290:	f008 fd44 	bl	bed1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b6294:	f008 faf4 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6298:	2200      	movs	r2, #0
   b629a:	4972      	ldr	r1, [pc, #456]	; (b6464 <setup+0x3ac>)
   b629c:	f008 fba1 	bl	be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b62a0:	f00b fe02 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b62a4:	f009 fcd8 	bl	bfc58 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b62a8:	f00b fdfe 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b62ac:	496e      	ldr	r1, [pc, #440]	; (b6468 <setup+0x3b0>)
   b62ae:	f009 fccf 	bl	bfc50 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b62b2:	f00b fdf9 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   b62b6:	211c      	movs	r1, #28
   b62b8:	4602      	mov	r2, r0
   b62ba:	486c      	ldr	r0, [pc, #432]	; (b646c <setup+0x3b4>)
   b62bc:	f002 f8b5 	bl	b842a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b62c0:	2800      	cmp	r0, #0
   b62c2:	f040 8104 	bne.w	b64ce <setup+0x416>
        Serial.println("Failed to find LIS3MDL chip");
   b62c6:	f00b fc97 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b62ca:	4969      	ldr	r1, [pc, #420]	; (b6470 <setup+0x3b8>)
    else Serial.println("LIS3MDL Found!");
   b62cc:	f00a ffd3 	bl	c1276 <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b62d0:	4866      	ldr	r0, [pc, #408]	; (b646c <setup+0x3b4>)
   b62d2:	2102      	movs	r1, #2
   b62d4:	f001 ffa2 	bl	b821c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b62d8:	4864      	ldr	r0, [pc, #400]	; (b646c <setup+0x3b4>)
   b62da:	2100      	movs	r1, #0
   b62dc:	f002 f802 	bl	b82e4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b62e0:	4862      	ldr	r0, [pc, #392]	; (b646c <setup+0x3b4>)
   b62e2:	2101      	movs	r1, #1
   b62e4:	f001 ffcc 	bl	b8280 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b62e8:	4860      	ldr	r0, [pc, #384]	; (b646c <setup+0x3b4>)
   b62ea:	2101      	movs	r1, #1
   b62ec:	f002 f815 	bl	b831a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b62f0:	2401      	movs	r4, #1
   b62f2:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b62f4:	485d      	ldr	r0, [pc, #372]	; (b646c <setup+0x3b4>)
   b62f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b62fa:	f002 f8b5 	bl	b8468 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b62fe:	4623      	mov	r3, r4
   b6300:	462a      	mov	r2, r5
   b6302:	4629      	mov	r1, r5
   b6304:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b6308:	4858      	ldr	r0, [pc, #352]	; (b646c <setup+0x3b4>)
   b630a:	9400      	str	r4, [sp, #0]
   b630c:	f002 f8c4 	bl	b8498 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6310:	f00b fb96 	bl	c1a40 <_ZN9TimeClass5monthEv>
   b6314:	9007      	str	r0, [sp, #28]
   b6316:	f00b fb87 	bl	c1a28 <_ZN9TimeClass3dayEv>
   b631a:	4681      	mov	r9, r0
   b631c:	f00b fb98 	bl	c1a50 <_ZN9TimeClass4yearEv>
   b6320:	4682      	mov	sl, r0
   b6322:	f00b fb5d 	bl	c19e0 <_ZN9TimeClass4hourEv>
   b6326:	4683      	mov	fp, r0
   b6328:	f00b fb66 	bl	c19f8 <_ZN9TimeClass6minuteEv>
   b632c:	9006      	str	r0, [sp, #24]
   b632e:	f00b fb6f 	bl	c1a10 <_ZN9TimeClass6secondEv>
   b6332:	9a06      	ldr	r2, [sp, #24]
   b6334:	9b07      	ldr	r3, [sp, #28]
   b6336:	9004      	str	r0, [sp, #16]
   b6338:	e9cd b202 	strd	fp, r2, [sp, #8]
   b633c:	2110      	movs	r1, #16
   b633e:	4a4d      	ldr	r2, [pc, #308]	; (b6474 <setup+0x3bc>)
   b6340:	e9cd 9a00 	strd	r9, sl, [sp]
   b6344:	a809      	add	r0, sp, #36	; 0x24
   b6346:	f007 feeb 	bl	be120 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b634a:	494b      	ldr	r1, [pc, #300]	; (b6478 <setup+0x3c0>)
   b634c:	484b      	ldr	r0, [pc, #300]	; (b647c <setup+0x3c4>)
   b634e:	f00e f8a1 	bl	c4494 <strcpy>
    strcat(filename,timestamp);
   b6352:	a909      	add	r1, sp, #36	; 0x24
   b6354:	4849      	ldr	r0, [pc, #292]	; (b647c <setup+0x3c4>)
   b6356:	f00e f86d 	bl	c4434 <strcat>
    strcpy(filenameMessages,filename);
   b635a:	4948      	ldr	r1, [pc, #288]	; (b647c <setup+0x3c4>)
   b635c:	4848      	ldr	r0, [pc, #288]	; (b6480 <setup+0x3c8>)
   b635e:	f00e f899 	bl	c4494 <strcpy>
    strcat(filename,".csv");
   b6362:	4948      	ldr	r1, [pc, #288]	; (b6484 <setup+0x3cc>)
   b6364:	4845      	ldr	r0, [pc, #276]	; (b647c <setup+0x3c4>)
   b6366:	f00e f865 	bl	c4434 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b636a:	4947      	ldr	r1, [pc, #284]	; (b6488 <setup+0x3d0>)
   b636c:	4844      	ldr	r0, [pc, #272]	; (b6480 <setup+0x3c8>)
   b636e:	f00e f861 	bl	c4434 <strcat>
    Serial.println(filename);
   b6372:	f00b fc41 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b6376:	4941      	ldr	r1, [pc, #260]	; (b647c <setup+0x3c4>)
   b6378:	f00a ff7d 	bl	c1276 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b637c:	f00b fc3c 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b6380:	493f      	ldr	r1, [pc, #252]	; (b6480 <setup+0x3c8>)
   b6382:	f00a ff78 	bl	c1276 <_ZN5Print7printlnEPKc>
    watchdog.start();
   b6386:	4841      	ldr	r0, [pc, #260]	; (b648c <setup+0x3d4>)
   b6388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b638c:	f7fd ff60 	bl	b4250 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b6390:	483f      	ldr	r0, [pc, #252]	; (b6490 <setup+0x3d8>)
   b6392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b6396:	f7fd ff5b 	bl	b4250 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b639a:	483e      	ldr	r0, [pc, #248]	; (b6494 <setup+0x3dc>)
   b639c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b63a0:	f7fd ff56 	bl	b4250 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b63a4:	4b3c      	ldr	r3, [pc, #240]	; (b6498 <setup+0x3e0>)
   b63a6:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b63a8:	483c      	ldr	r0, [pc, #240]	; (b649c <setup+0x3e4>)
   b63aa:	4b3d      	ldr	r3, [pc, #244]	; (b64a0 <setup+0x3e8>)
   b63ac:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b63b0:	aa0d      	add	r2, sp, #52	; 0x34
   b63b2:	2108      	movs	r1, #8
   b63b4:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b63b8:	930f      	str	r3, [sp, #60]	; 0x3c
   b63ba:	f7fe f9a9 	bl	b4710 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b63be:	4604      	mov	r4, r0
   b63c0:	2800      	cmp	r0, #0
   b63c2:	f040 8088 	bne.w	b64d6 <setup+0x41e>
        Serial.println("Error: could not connect to SD card!");
   b63c6:	f00b fc17 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b63ca:	4936      	ldr	r1, [pc, #216]	; (b64a4 <setup+0x3ec>)
   b63cc:	f00a ff53 	bl	c1276 <_ZN5Print7printlnEPKc>
        logSensors = false;
   b63d0:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b63d4:	703c      	strb	r4, [r7, #0]
   b63d6:	e069      	b.n	b64ac <setup+0x3f4>
   b63d8:	2003e588 	.word	0x2003e588
   b63dc:	2003e580 	.word	0x2003e580
   b63e0:	2003e581 	.word	0x2003e581
   b63e4:	2003de3c 	.word	0x2003de3c
   b63e8:	2003e0d9 	.word	0x2003e0d9
   b63ec:	2003dd6c 	.word	0x2003dd6c
   b63f0:	2003dd7c 	.word	0x2003dd7c
   b63f4:	2003def4 	.word	0x2003def4
   b63f8:	000b4b45 	.word	0x000b4b45
   b63fc:	000c6a7a 	.word	0x000c6a7a
   b6400:	000b4b95 	.word	0x000b4b95
   b6404:	000c6a80 	.word	0x000c6a80
   b6408:	000bf667 	.word	0x000bf667
   b640c:	2003dd8d 	.word	0x2003dd8d
   b6410:	2003dd8c 	.word	0x2003dd8c
   b6414:	2003dd68 	.word	0x2003dd68
   b6418:	2003e57c 	.word	0x2003e57c
   b641c:	2003ddcc 	.word	0x2003ddcc
   b6420:	2003de14 	.word	0x2003de14
   b6424:	2003de18 	.word	0x2003de18
   b6428:	2003e0d4 	.word	0x2003e0d4
   b642c:	2003dda0 	.word	0x2003dda0
   b6430:	2003dd64 	.word	0x2003dd64
   b6434:	2003ddd0 	.word	0x2003ddd0
   b6438:	2003e0d0 	.word	0x2003e0d0
   b643c:	2003e0d8 	.word	0x2003e0d8
   b6440:	2003dd8e 	.word	0x2003dd8e
   b6444:	2003e5d8 	.word	0x2003e5d8
   b6448:	2003ddb8 	.word	0x2003ddb8
   b644c:	2003e5e4 	.word	0x2003e5e4
   b6450:	2003e0dc 	.word	0x2003e0dc
   b6454:	2003e0c8 	.word	0x2003e0c8
   b6458:	2003ddc0 	.word	0x2003ddc0
   b645c:	2003dd59 	.word	0x2003dd59
   b6460:	2003db3c 	.word	0x2003db3c
   b6464:	2003dda8 	.word	0x2003dda8
   b6468:	00061a80 	.word	0x00061a80
   b646c:	2003de40 	.word	0x2003de40
   b6470:	000c6a8e 	.word	0x000c6a8e
   b6474:	000c68c5 	.word	0x000c68c5
   b6478:	000c6ab9 	.word	0x000c6ab9
   b647c:	2003ddd1 	.word	0x2003ddd1
   b6480:	2003ddef 	.word	0x2003ddef
   b6484:	000c69d3 	.word	0x000c69d3
   b6488:	000c6ac2 	.word	0x000c6ac2
   b648c:	2003e5f0 	.word	0x2003e5f0
   b6490:	2003de20 	.word	0x2003de20
   b6494:	2003e5ac 	.word	0x2003e5ac
   b6498:	000c6b84 	.word	0x000c6b84
   b649c:	2003e0e4 	.word	0x2003e0e4
   b64a0:	007a1200 	.word	0x007a1200
   b64a4:	000c6acb 	.word	0x000c6acb
   b64a8:	2003def5 	.word	0x2003def5
   b64ac:	f007 fb32 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);
   b64b0:	1b80      	subs	r0, r0, r6
   b64b2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b64b6:	d236      	bcs.n	b6526 <setup+0x46e>
   b64b8:	2005      	movs	r0, #5
   b64ba:	f007 fe7d 	bl	be1b8 <delay>
   b64be:	e7f5      	b.n	b64ac <setup+0x3f4>
   b64c0:	f008 f810 	bl	be4e4 <_ZNK8particle7BleUuid8rawBytesEv>
   b64c4:	9400      	str	r4, [sp, #0]
   b64c6:	4602      	mov	r2, r0
   b64c8:	2310      	movs	r3, #16
   b64ca:	2107      	movs	r1, #7
   b64cc:	e6d9      	b.n	b6282 <setup+0x1ca>
    else Serial.println("LIS3MDL Found!");
   b64ce:	f00b fb93 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b64d2:	4916      	ldr	r1, [pc, #88]	; (b652c <setup+0x474>)
   b64d4:	e6fa      	b.n	b62cc <setup+0x214>
    if(logSensors){
   b64d6:	f898 3000 	ldrb.w	r3, [r8]
   b64da:	b17b      	cbz	r3, b64fc <setup+0x444>
   b64dc:	4814      	ldr	r0, [pc, #80]	; (b6530 <setup+0x478>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b64de:	7c03      	ldrb	r3, [r0, #16]
   b64e0:	b92b      	cbnz	r3, b64ee <setup+0x436>
   b64e2:	4914      	ldr	r1, [pc, #80]	; (b6534 <setup+0x47c>)
   b64e4:	f244 2202 	movw	r2, #16898	; 0x4202
   b64e8:	3010      	adds	r0, #16
   b64ea:	f7fe f89d 	bl	b4628 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b64ee:	4912      	ldr	r1, [pc, #72]	; (b6538 <setup+0x480>)
   b64f0:	480f      	ldr	r0, [pc, #60]	; (b6530 <setup+0x478>)
   b64f2:	f00a fec0 	bl	c1276 <_ZN5Print7printlnEPKc>
        myFile.close();
   b64f6:	4811      	ldr	r0, [pc, #68]	; (b653c <setup+0x484>)
   b64f8:	f000 fc9c 	bl	b6e34 <_ZN7FatFile5closeEv>
    if(logMessages){
   b64fc:	783b      	ldrb	r3, [r7, #0]
   b64fe:	2b00      	cmp	r3, #0
   b6500:	d0d4      	beq.n	b64ac <setup+0x3f4>
   b6502:	480f      	ldr	r0, [pc, #60]	; (b6540 <setup+0x488>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b6504:	7c03      	ldrb	r3, [r0, #16]
   b6506:	b92b      	cbnz	r3, b6514 <setup+0x45c>
   b6508:	490e      	ldr	r1, [pc, #56]	; (b6544 <setup+0x48c>)
   b650a:	f244 2202 	movw	r2, #16898	; 0x4202
   b650e:	3010      	adds	r0, #16
   b6510:	f7fe f88a 	bl	b4628 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b6514:	490c      	ldr	r1, [pc, #48]	; (b6548 <setup+0x490>)
   b6516:	480a      	ldr	r0, [pc, #40]	; (b6540 <setup+0x488>)
   b6518:	2201      	movs	r2, #1
   b651a:	f7fd ff29 	bl	b4370 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b651e:	480b      	ldr	r0, [pc, #44]	; (b654c <setup+0x494>)
   b6520:	f000 fc88 	bl	b6e34 <_ZN7FatFile5closeEv>
   b6524:	e7c2      	b.n	b64ac <setup+0x3f4>
}
   b6526:	b013      	add	sp, #76	; 0x4c
   b6528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b652c:	000c6aaa 	.word	0x000c6aaa
   b6530:	2003df1c 	.word	0x2003df1c
   b6534:	2003ddd1 	.word	0x2003ddd1
   b6538:	000c6af0 	.word	0x000c6af0
   b653c:	2003df2c 	.word	0x2003df2c
   b6540:	2003de9c 	.word	0x2003de9c
   b6544:	2003ddef 	.word	0x2003ddef
   b6548:	000c6b46 	.word	0x000c6b46
   b654c:	2003deac 	.word	0x2003deac

000b6550 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6550:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6554:	4604      	mov	r4, r0
   b6556:	460d      	mov	r5, r1
   b6558:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b655a:	d916      	bls.n	b658a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b655c:	4290      	cmp	r0, r2
   b655e:	d215      	bcs.n	b658c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6560:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6564:	1a75      	subs	r5, r6, r1
   b6566:	f1a1 0714 	sub.w	r7, r1, #20
   b656a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b656c:	42b7      	cmp	r7, r6
   b656e:	d01c      	beq.n	b65aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6570:	b12c      	cbz	r4, b657e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6572:	4631      	mov	r1, r6
   b6574:	4620      	mov	r0, r4
   b6576:	f00b f927 	bl	c17c8 <_ZN6StringC1EOS_>
   b657a:	7c33      	ldrb	r3, [r6, #16]
   b657c:	7423      	strb	r3, [r4, #16]
   b657e:	4630      	mov	r0, r6
   b6580:	f00b f8a6 	bl	c16d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6584:	3e14      	subs	r6, #20
   b6586:	3c14      	subs	r4, #20
   b6588:	e7f0      	b.n	b656c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b658a:	d00e      	beq.n	b65aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b658c:	42b5      	cmp	r5, r6
   b658e:	d00c      	beq.n	b65aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6590:	b12c      	cbz	r4, b659e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6592:	4629      	mov	r1, r5
   b6594:	4620      	mov	r0, r4
   b6596:	f00b f917 	bl	c17c8 <_ZN6StringC1EOS_>
   b659a:	7c2b      	ldrb	r3, [r5, #16]
   b659c:	7423      	strb	r3, [r4, #16]
   b659e:	4628      	mov	r0, r5
   b65a0:	f00b f896 	bl	c16d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b65a4:	3514      	adds	r5, #20
   b65a6:	3414      	adds	r4, #20
   b65a8:	e7f0      	b.n	b658c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b65aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b65b0:	2300      	movs	r3, #0
   b65b2:	e9c0 3300 	strd	r3, r3, [r0]
   b65b6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65b8:	684f      	ldr	r7, [r1, #4]
   b65ba:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b65bc:	4604      	mov	r4, r0
   b65be:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b65c0:	dd23      	ble.n	b660a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b65c2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b65c6:	fb08 f007 	mul.w	r0, r8, r7
   b65ca:	f007 fd81 	bl	be0d0 <malloc>
            if (!d) {
   b65ce:	4605      	mov	r5, r0
   b65d0:	b1d8      	cbz	r0, b660a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b65d2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b65d6:	fb08 1202 	mla	r2, r8, r2, r1
   b65da:	f7ff ffb9 	bl	b6550 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b65de:	6820      	ldr	r0, [r4, #0]
   b65e0:	f007 fd7e 	bl	be0e0 <free>
        data_ = d;
   b65e4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b65e6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b65e8:	e9d6 7300 	ldrd	r7, r3, [r6]
   b65ec:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b65f0:	45b8      	cmp	r8, r7
   b65f2:	d008      	beq.n	b6606 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b65f4:	4639      	mov	r1, r7
   b65f6:	4628      	mov	r0, r5
   b65f8:	f00b f900 	bl	c17fc <_ZN6StringC1ERKS_>
   b65fc:	7c3b      	ldrb	r3, [r7, #16]
   b65fe:	742b      	strb	r3, [r5, #16]
   b6600:	3714      	adds	r7, #20
   b6602:	3514      	adds	r5, #20
   b6604:	e7f4      	b.n	b65f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6606:	6873      	ldr	r3, [r6, #4]
   b6608:	6063      	str	r3, [r4, #4]
}
   b660a:	4620      	mov	r0, r4
   b660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6610 <_GLOBAL__sub_I_SystemMode>:
   b6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   b6614:	4b85      	ldr	r3, [pc, #532]	; (b682c <_GLOBAL__sub_I_SystemMode+0x21c>)
        static SPIClass instance(Interface);
   b6616:	4c86      	ldr	r4, [pc, #536]	; (b6830 <_GLOBAL__sub_I_SystemMode+0x220>)
   b6618:	2501      	movs	r5, #1
   b661a:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b661c:	4b85      	ldr	r3, [pc, #532]	; (b6834 <_GLOBAL__sub_I_SystemMode+0x224>)
   b661e:	2200      	movs	r2, #0
   b6620:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6624:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6628:	609a      	str	r2, [r3, #8]
   b662a:	b092      	sub	sp, #72	; 0x48

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b662c:	2003      	movs	r0, #3
   b662e:	f007 fc73 	bl	bdf18 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b6632:	4881      	ldr	r0, [pc, #516]	; (b6838 <_GLOBAL__sub_I_SystemMode+0x228>)
   b6634:	f001 ff8c 	bl	b8550 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b6638:	4880      	ldr	r0, [pc, #512]	; (b683c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b663a:	f001 fd73 	bl	b8124 <_ZN16Adafruit_LIS3MDLC1Ev>
   b663e:	7823      	ldrb	r3, [r4, #0]
   b6640:	f3bf 8f5b 	dmb	ish
   b6644:	07db      	lsls	r3, r3, #31
   b6646:	d40a      	bmi.n	b665e <_GLOBAL__sub_I_SystemMode+0x4e>
   b6648:	4620      	mov	r0, r4
   b664a:	f7fd fd39 	bl	b40c0 <__cxa_guard_acquire>
   b664e:	b130      	cbz	r0, b665e <_GLOBAL__sub_I_SystemMode+0x4e>
   b6650:	487b      	ldr	r0, [pc, #492]	; (b6840 <_GLOBAL__sub_I_SystemMode+0x230>)
   b6652:	4629      	mov	r1, r5
   b6654:	f00a feef 	bl	c1436 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6658:	4620      	mov	r0, r4
   b665a:	f7fd fd36 	bl	b40ca <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b665e:	4b79      	ldr	r3, [pc, #484]	; (b6844 <_GLOBAL__sub_I_SystemMode+0x234>)
        filter_(level, filters) {
   b6660:	4d79      	ldr	r5, [pc, #484]	; (b6848 <_GLOBAL__sub_I_SystemMode+0x238>)
   b6662:	2264      	movs	r2, #100	; 0x64
   b6664:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b6668:	4a78      	ldr	r2, [pc, #480]	; (b684c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b666a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b666e:	2400      	movs	r4, #0
   b6670:	2601      	movs	r6, #1
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6672:	4a73      	ldr	r2, [pc, #460]	; (b6840 <_GLOBAL__sub_I_SystemMode+0x230>)
   b6674:	605c      	str	r4, [r3, #4]
   b6676:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b667a:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b667e:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
   b6682:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b6686:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b668a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b668e:	4b70      	ldr	r3, [pc, #448]	; (b6850 <_GLOBAL__sub_I_SystemMode+0x240>)
  File() {}
   b6690:	4a70      	ldr	r2, [pc, #448]	; (b6854 <_GLOBAL__sub_I_SystemMode+0x244>)
   b6692:	601a      	str	r2, [r3, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6694:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b6698:	605c      	str	r4, [r3, #4]
   b669a:	f8c3 8008 	str.w	r8, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b669e:	611c      	str	r4, [r3, #16]
   b66a0:	4b6d      	ldr	r3, [pc, #436]	; (b6858 <_GLOBAL__sub_I_SystemMode+0x248>)
        capacity_(0) {
   b66a2:	9407      	str	r4, [sp, #28]
   b66a4:	601a      	str	r2, [r3, #0]
   b66a6:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b66aa:	611c      	str	r4, [r3, #16]
   b66ac:	4b6b      	ldr	r3, [pc, #428]	; (b685c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b66ae:	601a      	str	r2, [r3, #0]
   b66b0:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b66b4:	611c      	str	r4, [r3, #16]
   b66b6:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b66ba:	f00b fa9d 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b66be:	a905      	add	r1, sp, #20
   b66c0:	4607      	mov	r7, r0
   b66c2:	a808      	add	r0, sp, #32
   b66c4:	f7ff ff72 	bl	b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b66c8:	a908      	add	r1, sp, #32
   b66ca:	a80b      	add	r0, sp, #44	; 0x2c
   b66cc:	f7ff ff6e 	bl	b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b66d0:	4b63      	ldr	r3, [pc, #396]	; (b6860 <_GLOBAL__sub_I_SystemMode+0x250>)
   b66d2:	602b      	str	r3, [r5, #0]
   b66d4:	a90b      	add	r1, sp, #44	; 0x2c
   b66d6:	a80e      	add	r0, sp, #56	; 0x38
   b66d8:	f7ff ff68 	bl	b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b66dc:	aa0e      	add	r2, sp, #56	; 0x38
   b66de:	211e      	movs	r1, #30
   b66e0:	1d28      	adds	r0, r5, #4
   b66e2:	f00a f9ef 	bl	c0ac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b66e6:	a80e      	add	r0, sp, #56	; 0x38
   b66e8:	f7ff fc86 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b66ec:	a80b      	add	r0, sp, #44	; 0x2c
   b66ee:	f7ff fc83 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b66f2:	4b5c      	ldr	r3, [pc, #368]	; (b6864 <_GLOBAL__sub_I_SystemMode+0x254>)
   b66f4:	602b      	str	r3, [r5, #0]
   b66f6:	622f      	str	r7, [r5, #32]
   b66f8:	a808      	add	r0, sp, #32
   b66fa:	f7ff fc7d 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b66fe:	4b5a      	ldr	r3, [pc, #360]	; (b6868 <_GLOBAL__sub_I_SystemMode+0x258>)
   b6700:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b6702:	f00b fa79 	bl	c1bf8 <_Z16_fetch_usbserialv>
   b6706:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b670a:	f00b fa65 	bl	c1bd8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b670e:	f009 febb 	bl	c0488 <_ZN5spark10LogManager8instanceEv>
   b6712:	4629      	mov	r1, r5
   b6714:	f00a f8ac 	bl	c0870 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b6718:	a805      	add	r0, sp, #20
   b671a:	f7ff fc6d 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b671e:	4853      	ldr	r0, [pc, #332]	; (b686c <_GLOBAL__sub_I_SystemMode+0x25c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6720:	4d53      	ldr	r5, [pc, #332]	; (b6870 <_GLOBAL__sub_I_SystemMode+0x260>)
	    _M_invoker = &_My_handler::_M_invoke;
   b6722:	4f54      	ldr	r7, [pc, #336]	; (b6874 <_GLOBAL__sub_I_SystemMode+0x264>)
Servo ESCL; 
   b6724:	f00a fe42 	bl	c13ac <_ZN5ServoC1Ev>
Servo ESCR;
   b6728:	4853      	ldr	r0, [pc, #332]	; (b6878 <_GLOBAL__sub_I_SystemMode+0x268>)
   b672a:	f00a fe3f 	bl	c13ac <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b672e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6732:	682b      	ldr	r3, [r5, #0]
   b6734:	9300      	str	r3, [sp, #0]
   b6736:	4b51      	ldr	r3, [pc, #324]	; (b687c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b6738:	4951      	ldr	r1, [pc, #324]	; (b6880 <_GLOBAL__sub_I_SystemMode+0x270>)
   b673a:	681b      	ldr	r3, [r3, #0]
   b673c:	4851      	ldr	r0, [pc, #324]	; (b6884 <_GLOBAL__sub_I_SystemMode+0x274>)
   b673e:	f04f 0210 	mov.w	r2, #16
   b6742:	f7ff fc6c 	bl	b601e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b6746:	4b50      	ldr	r3, [pc, #320]	; (b6888 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6748:	9402      	str	r4, [sp, #8]
   b674a:	9301      	str	r3, [sp, #4]
   b674c:	682b      	ldr	r3, [r5, #0]
   b674e:	9300      	str	r3, [sp, #0]
   b6750:	4b4e      	ldr	r3, [pc, #312]	; (b688c <_GLOBAL__sub_I_SystemMode+0x27c>)
   b6752:	494f      	ldr	r1, [pc, #316]	; (b6890 <_GLOBAL__sub_I_SystemMode+0x280>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	484f      	ldr	r0, [pc, #316]	; (b6894 <_GLOBAL__sub_I_SystemMode+0x284>)
   b6758:	f04f 0204 	mov.w	r2, #4
   b675c:	f7ff fc5f 	bl	b601e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b6760:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6764:	682b      	ldr	r3, [r5, #0]
   b6766:	9300      	str	r3, [sp, #0]
   b6768:	4b4b      	ldr	r3, [pc, #300]	; (b6898 <_GLOBAL__sub_I_SystemMode+0x288>)
   b676a:	494c      	ldr	r1, [pc, #304]	; (b689c <_GLOBAL__sub_I_SystemMode+0x28c>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	484c      	ldr	r0, [pc, #304]	; (b68a0 <_GLOBAL__sub_I_SystemMode+0x290>)
   b6770:	f04f 0210 	mov.w	r2, #16
   b6774:	f7ff fc53 	bl	b601e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b6778:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b677c:	682b      	ldr	r3, [r5, #0]
   b677e:	9300      	str	r3, [sp, #0]
   b6780:	4b48      	ldr	r3, [pc, #288]	; (b68a4 <_GLOBAL__sub_I_SystemMode+0x294>)
   b6782:	4949      	ldr	r1, [pc, #292]	; (b68a8 <_GLOBAL__sub_I_SystemMode+0x298>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	4849      	ldr	r0, [pc, #292]	; (b68ac <_GLOBAL__sub_I_SystemMode+0x29c>)
	    _M_manager = &_My_handler::_M_manager;
   b6788:	4d49      	ldr	r5, [pc, #292]	; (b68b0 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b678a:	f04f 0210 	mov.w	r2, #16
   b678e:	f7ff fc46 	bl	b601e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b6792:	4848      	ldr	r0, [pc, #288]	; (b68b4 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   b6794:	f008 faaf 	bl	becf6 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6798:	4b47      	ldr	r3, [pc, #284]	; (b68b8 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b679a:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b679c:	aa0e      	add	r2, sp, #56	; 0x38
   b679e:	4623      	mov	r3, r4
   b67a0:	f643 2198 	movw	r1, #15000	; 0x3a98
   b67a4:	4845      	ldr	r0, [pc, #276]	; (b68bc <_GLOBAL__sub_I_SystemMode+0x2ac>)
	    _M_invoker = &_My_handler::_M_invoke;
   b67a6:	9711      	str	r7, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b67a8:	9510      	str	r5, [sp, #64]	; 0x40
   b67aa:	f7fd fea1 	bl	b44f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b67ae:	a80e      	add	r0, sp, #56	; 0x38
   b67b0:	f7fd fe60 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b67b4:	4b42      	ldr	r3, [pc, #264]	; (b68c0 <_GLOBAL__sub_I_SystemMode+0x2b0>)
   b67b6:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b67b8:	aa0e      	add	r2, sp, #56	; 0x38
   b67ba:	4623      	mov	r3, r4
   b67bc:	4641      	mov	r1, r8
   b67be:	4841      	ldr	r0, [pc, #260]	; (b68c4 <_GLOBAL__sub_I_SystemMode+0x2b4>)
	    _M_manager = &_My_handler::_M_manager;
   b67c0:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b67c4:	f7fd fe94 	bl	b44f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b67c8:	a80e      	add	r0, sp, #56	; 0x38
   b67ca:	f7fd fe53 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b67ce:	4b3e      	ldr	r3, [pc, #248]	; (b68c8 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b67d0:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b67d2:	aa0e      	add	r2, sp, #56	; 0x38
   b67d4:	4623      	mov	r3, r4
   b67d6:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b67da:	483c      	ldr	r0, [pc, #240]	; (b68cc <_GLOBAL__sub_I_SystemMode+0x2bc>)
	    _M_manager = &_My_handler::_M_manager;
   b67dc:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b67e0:	f7fd fe86 	bl	b44f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b67e4:	a80e      	add	r0, sp, #56	; 0x38
   b67e6:	f7fd fe45 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b67ea:	4b39      	ldr	r3, [pc, #228]	; (b68d0 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b67ec:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b67ee:	aa0e      	add	r2, sp, #56	; 0x38
   b67f0:	4623      	mov	r3, r4
   b67f2:	f643 2198 	movw	r1, #15000	; 0x3a98
   b67f6:	4837      	ldr	r0, [pc, #220]	; (b68d4 <_GLOBAL__sub_I_SystemMode+0x2c4>)
	    _M_manager = &_My_handler::_M_manager;
   b67f8:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b67fc:	f7fd fe78 	bl	b44f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6800:	a80e      	add	r0, sp, #56	; 0x38
   b6802:	f7fd fe37 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6806:	4622      	mov	r2, r4
   b6808:	2114      	movs	r1, #20
   b680a:	4630      	mov	r0, r6
   b680c:	f007 fbac 	bl	bdf68 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6810:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6812:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6814:	9200      	str	r2, [sp, #0]
   b6816:	9601      	str	r6, [sp, #4]
   b6818:	4632      	mov	r2, r6
   b681a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b681e:	482e      	ldr	r0, [pc, #184]	; (b68d8 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b6820:	f009 fcb4 	bl	c018c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b6824:	b012      	add	sp, #72	; 0x48
   b6826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b682a:	bf00      	nop
   b682c:	2003dda4 	.word	0x2003dda4
   b6830:	2003dd40 	.word	0x2003dd40
   b6834:	2003dd90 	.word	0x2003dd90
   b6838:	2003df50 	.word	0x2003df50
   b683c:	2003de40 	.word	0x2003de40
   b6840:	2003dd44 	.word	0x2003dd44
   b6844:	2003e0e4 	.word	0x2003e0e4
   b6848:	2003ded0 	.word	0x2003ded0
   b684c:	000c6b84 	.word	0x000c6b84
   b6850:	2003df1c 	.word	0x2003df1c
   b6854:	000c6bf0 	.word	0x000c6bf0
   b6858:	2003de9c 	.word	0x2003de9c
   b685c:	2003de68 	.word	0x2003de68
   b6860:	000c6bac 	.word	0x000c6bac
   b6864:	000c7da8 	.word	0x000c7da8
   b6868:	000c6bd8 	.word	0x000c6bd8
   b686c:	2003dd6c 	.word	0x2003dd6c
   b6870:	2003db3c 	.word	0x2003db3c
   b6874:	000b424d 	.word	0x000b424d
   b6878:	2003dd7c 	.word	0x2003dd7c
   b687c:	2003db54 	.word	0x2003db54
   b6880:	000c6b6b 	.word	0x000c6b6b
   b6884:	2003e5e4 	.word	0x2003e5e4
   b6888:	000b4bf5 	.word	0x000b4bf5
   b688c:	2003db50 	.word	0x2003db50
   b6890:	000c6b6e 	.word	0x000c6b6e
   b6894:	2003e0dc 	.word	0x2003e0dc
   b6898:	2003db4c 	.word	0x2003db4c
   b689c:	000c6b71 	.word	0x000c6b71
   b68a0:	2003e0c8 	.word	0x2003e0c8
   b68a4:	2003db44 	.word	0x2003db44
   b68a8:	000c6b75 	.word	0x000c6b75
   b68ac:	2003ddc0 	.word	0x2003ddc0
   b68b0:	000b4239 	.word	0x000b4239
   b68b4:	2003dda8 	.word	0x2003dda8
   b68b8:	000b4639 	.word	0x000b4639
   b68bc:	2003e5f0 	.word	0x2003e5f0
   b68c0:	000b4569 	.word	0x000b4569
   b68c4:	2003de20 	.word	0x2003de20
   b68c8:	000b438d 	.word	0x000b438d
   b68cc:	2003df00 	.word	0x2003df00
   b68d0:	000b40fd 	.word	0x000b40fd
   b68d4:	2003e5ac 	.word	0x2003e5ac
   b68d8:	2003e588 	.word	0x2003e588

000b68dc <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b68dc:	b538      	push	{r3, r4, r5, lr}
   b68de:	4604      	mov	r4, r0
   b68e0:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b68e2:	2224      	movs	r2, #36	; 0x24
   b68e4:	2100      	movs	r1, #0
   b68e6:	f00d fd6f 	bl	c43c8 <memset>

  m_vol = vol;
   b68ea:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b68ec:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b68ee:	2b10      	cmp	r3, #16
   b68f0:	d003      	beq.n	b68fa <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b68f2:	2b20      	cmp	r3, #32
   b68f4:	d006      	beq.n	b6904 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b68f6:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b68f8:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b68fa:	2320      	movs	r3, #32
  m_flags = F_READ;
   b68fc:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b68fe:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6900:	70a0      	strb	r0, [r4, #2]
  return true;
   b6902:	e7f9      	b.n	b68f8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6904:	2340      	movs	r3, #64	; 0x40
   b6906:	e7f9      	b.n	b68fc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6908 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6908:	b510      	push	{r4, lr}
   b690a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b690c:	3024      	adds	r0, #36	; 0x24
   b690e:	f000 ff66 	bl	b77de <_ZN8FatCache4syncEv>
   b6912:	b128      	cbz	r0, b6920 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6914:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b691c:	f000 bf5f 	b.w	b77de <_ZN8FatCache4syncEv>
  }
   b6920:	bd10      	pop	{r4, pc}

000b6922 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6922:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6924:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6926:	f043 0304 	orr.w	r3, r3, #4
   b692a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b692c:	f100 0210 	add.w	r2, r0, #16
   b6930:	6880      	ldr	r0, [r0, #8]
   b6932:	f001 b80a 	b.w	b794a <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6938 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b693c:	7801      	ldrb	r1, [r0, #0]
   b693e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6942:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6944:	d003      	beq.n	b694e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6946:	2600      	movs	r6, #0
}
   b6948:	4630      	mov	r0, r6
   b694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b694e:	6942      	ldr	r2, [r0, #20]
   b6950:	4b17      	ldr	r3, [pc, #92]	; (b69b0 <_ZN7FatFile13addDirClusterEv+0x78>)
   b6952:	429a      	cmp	r2, r3
   b6954:	d2f7      	bcs.n	b6946 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6956:	f7ff ffe4 	bl	b6922 <_ZN7FatFile10addClusterEv>
   b695a:	4606      	mov	r6, r0
   b695c:	2800      	cmp	r0, #0
   b695e:	d0f2      	beq.n	b6946 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6960:	6921      	ldr	r1, [r4, #16]
   b6962:	68a0      	ldr	r0, [r4, #8]
   b6964:	f000 ff86 	bl	b7874 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6968:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b696a:	68a0      	ldr	r0, [r4, #8]
   b696c:	2205      	movs	r2, #5
   b696e:	4639      	mov	r1, r7
   b6970:	3024      	adds	r0, #36	; 0x24
   b6972:	f000 ff5c 	bl	b782e <_ZN8FatCache4readEmh>
  if (!pc) {
   b6976:	4680      	mov	r8, r0
   b6978:	2800      	cmp	r0, #0
   b697a:	d0e4      	beq.n	b6946 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b697c:	4629      	mov	r1, r5
   b697e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6982:	f00d fd21 	bl	c43c8 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6986:	2501      	movs	r5, #1
   b6988:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b698a:	791a      	ldrb	r2, [r3, #4]
   b698c:	42aa      	cmp	r2, r5
   b698e:	d909      	bls.n	b69a4 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6990:	6818      	ldr	r0, [r3, #0]
   b6992:	4642      	mov	r2, r8
   b6994:	19e9      	adds	r1, r5, r7
   b6996:	f001 fab6 	bl	b7f06 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b699a:	2800      	cmp	r0, #0
   b699c:	d0d3      	beq.n	b6946 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b699e:	3501      	adds	r5, #1
   b69a0:	b2ed      	uxtb	r5, r5
   b69a2:	e7f1      	b.n	b6988 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b69a4:	6963      	ldr	r3, [r4, #20]
   b69a6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b69aa:	6163      	str	r3, [r4, #20]
  return true;
   b69ac:	e7cc      	b.n	b6948 <_ZN7FatFile13addDirClusterEv+0x10>
   b69ae:	bf00      	nop
   b69b0:	001ffe00 	.word	0x001ffe00

000b69b4 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b69b4:	b510      	push	{r4, lr}
   b69b6:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b69b8:	6880      	ldr	r0, [r0, #8]
   b69ba:	460a      	mov	r2, r1
   b69bc:	3024      	adds	r0, #36	; 0x24
   b69be:	69a1      	ldr	r1, [r4, #24]
   b69c0:	f000 ff35 	bl	b782e <_ZN8FatCache4readEmh>
  if (!pc) {
   b69c4:	b120      	cbz	r0, b69d0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b69c6:	88a3      	ldrh	r3, [r4, #4]
   b69c8:	f003 030f 	and.w	r3, r3, #15
   b69cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b69d0:	bd10      	pop	{r4, pc}

000b69d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b69d2:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b69d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69d6:	4604      	mov	r4, r0
   b69d8:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b69da:	2608      	movs	r6, #8
  uint8_t j = 0;
   b69dc:	4618      	mov	r0, r3
      name[j++] = '.';
   b69de:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b69e0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b69e4:	2a20      	cmp	r2, #32
   b69e6:	d018      	beq.n	b6a1a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b69e8:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b69ea:	bf02      	ittt	eq
   b69ec:	540f      	strbeq	r7, [r1, r0]
   b69ee:	1c42      	addeq	r2, r0, #1
   b69f0:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b69f2:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b69f4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b69f8:	bf08      	it	eq
   b69fa:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b69fc:	f1bc 0f19 	cmp.w	ip, #25
   b6a00:	d806      	bhi.n	b6a10 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6a02:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6a06:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6a0a:	bf1c      	itt	ne
   b6a0c:	3220      	addne	r2, #32
   b6a0e:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6a10:	f100 0c01 	add.w	ip, r0, #1
   b6a14:	540a      	strb	r2, [r1, r0]
   b6a16:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6a1a:	3301      	adds	r3, #1
   b6a1c:	b2db      	uxtb	r3, r3
   b6a1e:	2b0b      	cmp	r3, #11
   b6a20:	d1de      	bne.n	b69e0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b6a22:	2300      	movs	r3, #0
   b6a24:	540b      	strb	r3, [r1, r0]
}
   b6a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a28 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6a28:	7803      	ldrb	r3, [r0, #0]
   b6a2a:	b90b      	cbnz	r3, b6a30 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6a2c:	f7ff bf56 	b.w	b68dc <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6a30:	2000      	movs	r0, #0
   b6a32:	4770      	bx	lr

000b6a34 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6a38:	7803      	ldrb	r3, [r0, #0]
   b6a3a:	4604      	mov	r4, r0
   b6a3c:	4688      	mov	r8, r1
   b6a3e:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6a40:	2b00      	cmp	r3, #0
   b6a42:	d05d      	beq.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
   b6a44:	7882      	ldrb	r2, [r0, #2]
   b6a46:	07d1      	lsls	r1, r2, #31
   b6a48:	d55a      	bpl.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6a4a:	071a      	lsls	r2, r3, #28
   b6a4c:	d52d      	bpl.n	b6aaa <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6a4e:	69c3      	ldr	r3, [r0, #28]
   b6a50:	6942      	ldr	r2, [r0, #20]
   b6a52:	1a9b      	subs	r3, r3, r2
   b6a54:	429d      	cmp	r5, r3
   b6a56:	bf28      	it	cs
   b6a58:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6a5a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6a5c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6a60:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6a64:	2e00      	cmp	r6, #0
   b6a66:	f000 808f 	beq.w	b6b88 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6a6a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6a6c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6a6e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6a70:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6a72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6a76:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6a7a:	d51f      	bpl.n	b6abc <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6a7c:	6a00      	ldr	r0, [r0, #32]
   b6a7e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6a80:	68a0      	ldr	r0, [r4, #8]
   b6a82:	f1ba 0f00 	cmp.w	sl, #0
   b6a86:	d142      	bne.n	b6b0e <_ZN7FatFile4readEPvj+0xda>
   b6a88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6a8c:	d33f      	bcc.n	b6b0e <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6a8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6a90:	4299      	cmp	r1, r3
   b6a92:	d03c      	beq.n	b6b0e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6a94:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6a98:	d252      	bcs.n	b6b40 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6a9a:	6800      	ldr	r0, [r0, #0]
   b6a9c:	4642      	mov	r2, r8
   b6a9e:	f001 f9a9 	bl	b7df4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6aa2:	b368      	cbz	r0, b6b00 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6aa4:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6aa8:	e044      	b.n	b6b34 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6aaa:	069b      	lsls	r3, r3, #26
   b6aac:	d5d5      	bpl.n	b6a5a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6aae:	6883      	ldr	r3, [r0, #8]
   b6ab0:	891a      	ldrh	r2, [r3, #8]
   b6ab2:	6943      	ldr	r3, [r0, #20]
   b6ab4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6ab8:	b29b      	uxth	r3, r3
   b6aba:	e7cb      	b.n	b6a54 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6abc:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6ac0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6ac4:	f1ba 0f00 	cmp.w	sl, #0
   b6ac8:	d108      	bne.n	b6adc <_ZN7FatFile4readEPvj+0xa8>
   b6aca:	f1b9 0f00 	cmp.w	r9, #0
   b6ace:	d105      	bne.n	b6adc <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6ad0:	b95b      	cbnz	r3, b6aea <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6ad2:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6ad4:	bf4c      	ite	mi
   b6ad6:	6a03      	ldrmi	r3, [r0, #32]
   b6ad8:	6a23      	ldrpl	r3, [r4, #32]
   b6ada:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6adc:	6921      	ldr	r1, [r4, #16]
   b6ade:	68a0      	ldr	r0, [r4, #8]
   b6ae0:	f000 fec8 	bl	b7874 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6ae4:	eb09 0100 	add.w	r1, r9, r0
   b6ae8:	e7ca      	b.n	b6a80 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6aea:	6921      	ldr	r1, [r4, #16]
   b6aec:	465a      	mov	r2, fp
   b6aee:	f000 fec7 	bl	b7880 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6af2:	2800      	cmp	r0, #0
   b6af4:	db04      	blt.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6af6:	d1f1      	bne.n	b6adc <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6af8:	7823      	ldrb	r3, [r4, #0]
   b6afa:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6afe:	d143      	bne.n	b6b88 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6b00:	7863      	ldrb	r3, [r4, #1]
   b6b02:	f043 0302 	orr.w	r3, r3, #2
   b6b06:	7063      	strb	r3, [r4, #1]
  return -1;
   b6b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6b0c:	e03d      	b.n	b6b8a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6b0e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6b12:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6b14:	f04f 0200 	mov.w	r2, #0
   b6b18:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6b1c:	bf28      	it	cs
   b6b1e:	4637      	movcs	r7, r6
   b6b20:	f000 fe85 	bl	b782e <_ZN8FatCache4readEmh>
      if (!pc) {
   b6b24:	2800      	cmp	r0, #0
   b6b26:	d0eb      	beq.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6b28:	eb00 010a 	add.w	r1, r0, sl
   b6b2c:	463a      	mov	r2, r7
   b6b2e:	4640      	mov	r0, r8
   b6b30:	f00d fc22 	bl	c4378 <memcpy>
    m_curPosition += n;
   b6b34:	6963      	ldr	r3, [r4, #20]
   b6b36:	443b      	add	r3, r7
    dst += n;
   b6b38:	44b8      	add	r8, r7
    m_curPosition += n;
   b6b3a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6b3c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6b3e:	e791      	b.n	b6a64 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6b40:	7822      	ldrb	r2, [r4, #0]
   b6b42:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6b44:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6b48:	d406      	bmi.n	b6b58 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6b4a:	7902      	ldrb	r2, [r0, #4]
   b6b4c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6b50:	b2d2      	uxtb	r2, r2
   b6b52:	4592      	cmp	sl, r2
   b6b54:	bf28      	it	cs
   b6b56:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6b58:	4299      	cmp	r1, r3
      n = 512*nb;
   b6b5a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6b5e:	d208      	bcs.n	b6b72 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6b60:	68a0      	ldr	r0, [r4, #8]
   b6b62:	4653      	mov	r3, sl
   b6b64:	6800      	ldr	r0, [r0, #0]
   b6b66:	4642      	mov	r2, r8
   b6b68:	f001 f98c 	bl	b7e84 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6b6c:	2800      	cmp	r0, #0
   b6b6e:	d1e1      	bne.n	b6b34 <_ZN7FatFile4readEPvj+0x100>
   b6b70:	e7c6      	b.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6b72:	4453      	add	r3, sl
   b6b74:	428b      	cmp	r3, r1
   b6b76:	d9f3      	bls.n	b6b60 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6b78:	3024      	adds	r0, #36	; 0x24
   b6b7a:	9101      	str	r1, [sp, #4]
   b6b7c:	f000 fe2f 	bl	b77de <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6b80:	9901      	ldr	r1, [sp, #4]
   b6b82:	2800      	cmp	r0, #0
   b6b84:	d1ec      	bne.n	b6b60 <_ZN7FatFile4readEPvj+0x12c>
   b6b86:	e7bb      	b.n	b6b00 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6b88:	1ba8      	subs	r0, r5, r6
}
   b6b8a:	b003      	add	sp, #12
   b6b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6b90 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6b92:	2201      	movs	r2, #1
   b6b94:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6b98:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6b9c:	4604      	mov	r4, r0
   b6b9e:	f7ff ff49 	bl	b6a34 <_ZN7FatFile4readEPvj>
   b6ba2:	2801      	cmp	r0, #1
   b6ba4:	bf0a      	itet	eq
   b6ba6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6baa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6bae:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6bb2:	b002      	add	sp, #8
   b6bb4:	bd70      	pop	{r4, r5, r6, pc}

000b6bb6 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6bb8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6bba:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6bbe:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6bc0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6bc4:	d000      	beq.n	b6bc8 <_ZN7FatFile12readDirCacheEb+0x12>
   b6bc6:	b999      	cbnz	r1, b6bf0 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6bc8:	2201      	movs	r2, #1
   b6bca:	f10d 0107 	add.w	r1, sp, #7
   b6bce:	4620      	mov	r0, r4
   b6bd0:	f7ff ff30 	bl	b6a34 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6bd4:	b240      	sxtb	r0, r0
   b6bd6:	2801      	cmp	r0, #1
   b6bd8:	d002      	beq.n	b6be0 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6bda:	2000      	movs	r0, #0
}
   b6bdc:	b003      	add	sp, #12
   b6bde:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6be0:	6963      	ldr	r3, [r4, #20]
   b6be2:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6be4:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6be6:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6be8:	3030      	adds	r0, #48	; 0x30
   b6bea:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6bee:	e7f5      	b.n	b6bdc <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6bf0:	3320      	adds	r3, #32
   b6bf2:	e7f7      	b.n	b6be4 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6bf4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6bf8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6bfa:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6bfc:	4604      	mov	r4, r0
   b6bfe:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6c00:	b162      	cbz	r2, b6c1c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6c02:	6940      	ldr	r0, [r0, #20]
   b6c04:	4288      	cmp	r0, r1
   b6c06:	d002      	beq.n	b6c0e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6c08:	b919      	cbnz	r1, b6c12 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6c0a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6c0c:	6165      	str	r5, [r4, #20]
    return true;
   b6c0e:	2001      	movs	r0, #1
   b6c10:	e006      	b.n	b6c20 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6c12:	0716      	lsls	r6, r2, #28
   b6c14:	d506      	bpl.n	b6c24 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6c16:	69e3      	ldr	r3, [r4, #28]
   b6c18:	428b      	cmp	r3, r1
   b6c1a:	d20b      	bcs.n	b6c34 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6c1c:	6127      	str	r7, [r4, #16]
  return false;
   b6c1e:	2000      	movs	r0, #0
}
   b6c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6c24:	0691      	lsls	r1, r2, #26
   b6c26:	d505      	bpl.n	b6c34 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6c28:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6c2a:	891b      	ldrh	r3, [r3, #8]
   b6c2c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6c30:	d9ec      	bls.n	b6c0c <_ZN7FatFile7seekSetEm+0x18>
   b6c32:	e7f3      	b.n	b6c1c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6c34:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6c38:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6c3c:	1e43      	subs	r3, r0, #1
   b6c3e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6c42:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6c44:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6c46:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6c48:	42b3      	cmp	r3, r6
   b6c4a:	d800      	bhi.n	b6c4e <_ZN7FatFile7seekSetEm+0x5a>
   b6c4c:	b998      	cbnz	r0, b6c76 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6c4e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6c50:	bf4c      	ite	mi
   b6c52:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6c56:	6a23      	ldrpl	r3, [r4, #32]
   b6c58:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6c5a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6c5e:	2e00      	cmp	r6, #0
   b6c60:	d0d4      	beq.n	b6c0c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6c62:	6921      	ldr	r1, [r4, #16]
   b6c64:	68a0      	ldr	r0, [r4, #8]
   b6c66:	4642      	mov	r2, r8
   b6c68:	f000 fe0a 	bl	b7880 <_ZN9FatVolume6fatGetEmPm>
   b6c6c:	2800      	cmp	r0, #0
   b6c6e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6c72:	dcf4      	bgt.n	b6c5e <_ZN7FatFile7seekSetEm+0x6a>
   b6c74:	e7d2      	b.n	b6c1c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6c76:	1af6      	subs	r6, r6, r3
   b6c78:	e7ef      	b.n	b6c5a <_ZN7FatFile7seekSetEm+0x66>

000b6c7a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c7c:	460f      	mov	r7, r1
   b6c7e:	4604      	mov	r4, r0
   b6c80:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6c82:	2100      	movs	r1, #0
   b6c84:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6c86:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6c88:	f00d fb9e 	bl	c43c8 <memset>
  m_vol = dirFile->m_vol;
   b6c8c:	68b8      	ldr	r0, [r7, #8]
   b6c8e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6c90:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6c92:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6c96:	6a3b      	ldr	r3, [r7, #32]
   b6c98:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6c9a:	016a      	lsls	r2, r5, #5
   b6c9c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6ca0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6ca4:	071f      	lsls	r7, r3, #28
   b6ca6:	d444      	bmi.n	b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6ca8:	f003 0317 	and.w	r3, r3, #23
   b6cac:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6cae:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6cb2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6cb6:	bf04      	itt	eq
   b6cb8:	f043 0308 	orreq.w	r3, r3, #8
   b6cbc:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6cbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6cc2:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6cc4:	f006 0303 	and.w	r3, r6, #3
   b6cc8:	2b01      	cmp	r3, #1
   b6cca:	d02c      	beq.n	b6d26 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6ccc:	2b02      	cmp	r3, #2
   b6cce:	d028      	beq.n	b6d22 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6cd0:	bb7b      	cbnz	r3, b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6cd2:	0571      	lsls	r1, r6, #21
   b6cd4:	d42d      	bmi.n	b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6cd6:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6cd8:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6cda:	78a1      	ldrb	r1, [r4, #2]
   b6cdc:	078b      	lsls	r3, r1, #30
   b6cde:	d504      	bpl.n	b6cea <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6ce0:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6ce2:	06df      	lsls	r7, r3, #27
   b6ce4:	d425      	bmi.n	b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6ce6:	07dd      	lsls	r5, r3, #31
   b6ce8:	d423      	bmi.n	b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6cea:	11b3      	asrs	r3, r6, #6
   b6cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6cf0:	f006 0508 	and.w	r5, r6, #8
   b6cf4:	432b      	orrs	r3, r5
   b6cf6:	430b      	orrs	r3, r1
   b6cf8:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6cfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6cfc:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6cfe:	1883      	adds	r3, r0, r2
   b6d00:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6d04:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6d08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6d0c:	0572      	lsls	r2, r6, #21
   b6d0e:	d513      	bpl.n	b6d38 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6d10:	b959      	cbnz	r1, b6d2a <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6d12:	78a3      	ldrb	r3, [r4, #2]
   b6d14:	f043 0304 	orr.w	r3, r3, #4
   b6d18:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6d1a:	0473      	lsls	r3, r6, #17
   b6d1c:	d410      	bmi.n	b6d40 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6d1e:	2001      	movs	r0, #1
}
   b6d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6d22:	2303      	movs	r3, #3
   b6d24:	e7d8      	b.n	b6cd8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6d26:	2302      	movs	r3, #2
   b6d28:	e7d6      	b.n	b6cd8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6d2a:	f000 fe49 	bl	b79c0 <_ZN9FatVolume9freeChainEm>
   b6d2e:	2800      	cmp	r0, #0
   b6d30:	d1ef      	bne.n	b6d12 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6d32:	2000      	movs	r0, #0
   b6d34:	7020      	strb	r0, [r4, #0]
  return false;
   b6d36:	e7f3      	b.n	b6d20 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6d38:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d3c:	61e3      	str	r3, [r4, #28]
   b6d3e:	e7ec      	b.n	b6d1a <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6d40:	69e1      	ldr	r1, [r4, #28]
   b6d42:	4620      	mov	r0, r4
   b6d44:	f7ff ff56 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
   b6d48:	2800      	cmp	r0, #0
   b6d4a:	d1e8      	bne.n	b6d1e <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6d4c:	e7f1      	b.n	b6d32 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6d4e <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6d4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b6d52:	7803      	ldrb	r3, [r0, #0]
   b6d54:	4607      	mov	r7, r0
   b6d56:	460d      	mov	r5, r1
   b6d58:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6d5a:	bb53      	cbnz	r3, b6db2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6d5c:	780b      	ldrb	r3, [r1, #0]
   b6d5e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6d62:	d026      	beq.n	b6db2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6d64:	694c      	ldr	r4, [r1, #20]
   b6d66:	f014 041f 	ands.w	r4, r4, #31
   b6d6a:	d122      	bne.n	b6db2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6d6c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6d6e:	2100      	movs	r1, #0
   b6d70:	4628      	mov	r0, r5
    return m_curPosition;
   b6d72:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6d76:	f7ff ff1e 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6d7a:	b1d0      	cbz	r0, b6db2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6d7c:	7806      	ldrb	r6, [r0, #0]
   b6d7e:	b1c6      	cbz	r6, b6db2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6d80:	2e2e      	cmp	r6, #46	; 0x2e
   b6d82:	d010      	beq.n	b6da6 <_ZN7FatFile8openNextEPS_i+0x58>
   b6d84:	2ee5      	cmp	r6, #229	; 0xe5
   b6d86:	d00e      	beq.n	b6da6 <_ZN7FatFile8openNextEPS_i+0x58>
   b6d88:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6d8a:	071a      	lsls	r2, r3, #28
   b6d8c:	d413      	bmi.n	b6db6 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6d8e:	b964      	cbnz	r4, b6daa <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6d90:	9400      	str	r4, [sp, #0]
   b6d92:	4653      	mov	r3, sl
   b6d94:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6d98:	4629      	mov	r1, r5
   b6d9a:	4638      	mov	r0, r7
   b6d9c:	f7ff ff6d 	bl	b6c7a <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6da0:	b002      	add	sp, #8
   b6da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6da6:	2400      	movs	r4, #0
   b6da8:	e7e1      	b.n	b6d6e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6daa:	f000 f971 	bl	b7090 <_ZN7FatFile11lfnChecksumEPh>
   b6dae:	4540      	cmp	r0, r8
   b6db0:	d0ee      	beq.n	b6d90 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6db2:	2000      	movs	r0, #0
   b6db4:	e7f4      	b.n	b6da0 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6db6:	2b0f      	cmp	r3, #15
   b6db8:	d1f5      	bne.n	b6da6 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6dba:	0673      	lsls	r3, r6, #25
   b6dbc:	d5d7      	bpl.n	b6d6e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6dbe:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6dc2:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6dc6:	e7d2      	b.n	b6d6e <_ZN7FatFile8openNextEPS_i+0x20>

000b6dc8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6dc8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6dca:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6dcc:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6dce:	b90b      	cbnz	r3, b6dd4 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6dd0:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6dd2:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6dd4:	7883      	ldrb	r3, [r0, #2]
   b6dd6:	075a      	lsls	r2, r3, #29
   b6dd8:	d523      	bpl.n	b6e22 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6dda:	2101      	movs	r1, #1
   b6ddc:	f7ff fdea 	bl	b69b4 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6de0:	4605      	mov	r5, r0
   b6de2:	b928      	cbnz	r0, b6df0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6de4:	7863      	ldrb	r3, [r4, #1]
   b6de6:	f043 0301 	orr.w	r3, r3, #1
   b6dea:	7063      	strb	r3, [r4, #1]
  return false;
   b6dec:	2000      	movs	r0, #0
   b6dee:	e7f0      	b.n	b6dd2 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6df0:	7803      	ldrb	r3, [r0, #0]
   b6df2:	2be5      	cmp	r3, #229	; 0xe5
   b6df4:	d0f6      	beq.n	b6de4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6df6:	7823      	ldrb	r3, [r4, #0]
   b6df8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6dfa:	bf44      	itt	mi
   b6dfc:	69e3      	ldrmi	r3, [r4, #28]
   b6dfe:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6e00:	6a23      	ldr	r3, [r4, #32]
   b6e02:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6e04:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6e06:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6e08:	4b09      	ldr	r3, [pc, #36]	; (b6e30 <_ZN7FatFile4syncEv+0x68>)
   b6e0a:	681b      	ldr	r3, [r3, #0]
   b6e0c:	b12b      	cbz	r3, b6e1a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6e0e:	f100 0116 	add.w	r1, r0, #22
   b6e12:	3018      	adds	r0, #24
   b6e14:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6e16:	8b2b      	ldrh	r3, [r5, #24]
   b6e18:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6e1a:	78a3      	ldrb	r3, [r4, #2]
   b6e1c:	f023 0304 	bic.w	r3, r3, #4
   b6e20:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6e22:	68a0      	ldr	r0, [r4, #8]
   b6e24:	f7ff fd70 	bl	b6908 <_ZN9FatVolume9cacheSyncEv>
   b6e28:	2800      	cmp	r0, #0
   b6e2a:	d0db      	beq.n	b6de4 <_ZN7FatFile4syncEv+0x1c>
   b6e2c:	e7d0      	b.n	b6dd0 <_ZN7FatFile4syncEv+0x8>
   b6e2e:	bf00      	nop
   b6e30:	2003e60c 	.word	0x2003e60c

000b6e34 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6e34:	b510      	push	{r4, lr}
   b6e36:	4604      	mov	r4, r0
  bool rtn = sync();
   b6e38:	f7ff ffc6 	bl	b6dc8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6e3c:	2300      	movs	r3, #0
   b6e3e:	7023      	strb	r3, [r4, #0]
}
   b6e40:	bd10      	pop	{r4, pc}

000b6e42 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6e42:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e44:	b093      	sub	sp, #76	; 0x4c
   b6e46:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6e48:	2300      	movs	r3, #0
   b6e4a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6e4c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6e4e:	9201      	str	r2, [sp, #4]
   b6e50:	4606      	mov	r6, r0
   b6e52:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6e54:	b113      	cbz	r3, b6e5c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6e56:	2000      	movs	r0, #0
}
   b6e58:	b013      	add	sp, #76	; 0x4c
   b6e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6e5c:	780b      	ldrb	r3, [r1, #0]
   b6e5e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6e62:	d0f8      	beq.n	b6e56 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6e64:	7813      	ldrb	r3, [r2, #0]
   b6e66:	2b2f      	cmp	r3, #47	; 0x2f
   b6e68:	d112      	bne.n	b6e90 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6e6a:	9a01      	ldr	r2, [sp, #4]
   b6e6c:	7813      	ldrb	r3, [r2, #0]
   b6e6e:	2b2f      	cmp	r3, #47	; 0x2f
   b6e70:	d102      	bne.n	b6e78 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6e72:	3201      	adds	r2, #1
   b6e74:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6e76:	e7f8      	b.n	b6e6a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6e78:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6e7a:	b91b      	cbnz	r3, b6e84 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6e7c:	4630      	mov	r0, r6
   b6e7e:	f7ff fdd3 	bl	b6a28 <_ZN7FatFile8openRootEP9FatVolume>
   b6e82:	e7e9      	b.n	b6e58 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6e84:	a809      	add	r0, sp, #36	; 0x24
   b6e86:	f7ff fd29 	bl	b68dc <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6e8a:	2800      	cmp	r0, #0
   b6e8c:	d0e3      	beq.n	b6e56 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6e8e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6e90:	9801      	ldr	r0, [sp, #4]
   b6e92:	aa01      	add	r2, sp, #4
   b6e94:	a903      	add	r1, sp, #12
   b6e96:	f000 f98f 	bl	b71b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6e9a:	2800      	cmp	r0, #0
   b6e9c:	d0db      	beq.n	b6e56 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6e9e:	9b01      	ldr	r3, [sp, #4]
   b6ea0:	781b      	ldrb	r3, [r3, #0]
   b6ea2:	b19b      	cbz	r3, b6ecc <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6ea4:	2300      	movs	r3, #0
   b6ea6:	aa03      	add	r2, sp, #12
   b6ea8:	4621      	mov	r1, r4
   b6eaa:	4630      	mov	r0, r6
   b6eac:	f000 fab6 	bl	b741c <_ZN7FatFile4openEPS_P7fname_ti>
   b6eb0:	2800      	cmp	r0, #0
   b6eb2:	d0d0      	beq.n	b6e56 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6eb4:	4635      	mov	r5, r6
   b6eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6eb8:	ac09      	add	r4, sp, #36	; 0x24
   b6eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ec0:	682b      	ldr	r3, [r5, #0]
   b6ec2:	6023      	str	r3, [r4, #0]
    close();
   b6ec4:	4630      	mov	r0, r6
   b6ec6:	f7ff ffb5 	bl	b6e34 <_ZN7FatFile5closeEv>
  while (1) {
   b6eca:	e7e0      	b.n	b6e8e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6ecc:	463b      	mov	r3, r7
   b6ece:	aa03      	add	r2, sp, #12
   b6ed0:	4621      	mov	r1, r4
   b6ed2:	4630      	mov	r0, r6
   b6ed4:	f000 faa2 	bl	b741c <_ZN7FatFile4openEPS_P7fname_ti>
   b6ed8:	e7be      	b.n	b6e58 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6edc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ee0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6ee2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ee4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6ee6:	4604      	mov	r4, r0
   b6ee8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6eea:	d55b      	bpl.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
   b6eec:	7883      	ldrb	r3, [r0, #2]
   b6eee:	079a      	lsls	r2, r3, #30
   b6ef0:	d558      	bpl.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6ef2:	071b      	lsls	r3, r3, #28
   b6ef4:	d451      	bmi.n	b6f9a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6ef6:	6963      	ldr	r3, [r4, #20]
   b6ef8:	43db      	mvns	r3, r3
   b6efa:	42bb      	cmp	r3, r7
   b6efc:	d352      	bcc.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
   b6efe:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6f00:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6f04:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6f06:	f1b8 0f00 	cmp.w	r8, #0
   b6f0a:	f000 8091 	beq.w	b7030 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6f0e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6f10:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6f12:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6f16:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6f1a:	d10e      	bne.n	b6f3a <_ZN7FatFile5writeEPKvj+0x5e>
   b6f1c:	b96d      	cbnz	r5, b6f3a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6f1e:	6921      	ldr	r1, [r4, #16]
   b6f20:	2900      	cmp	r1, #0
   b6f22:	d046      	beq.n	b6fb2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6f24:	4652      	mov	r2, sl
   b6f26:	f000 fcab 	bl	b7880 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6f2a:	2800      	cmp	r0, #0
   b6f2c:	db3a      	blt.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6f2e:	d104      	bne.n	b6f3a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6f30:	4620      	mov	r0, r4
   b6f32:	f7ff fcf6 	bl	b6922 <_ZN7FatFile10addClusterEv>
   b6f36:	2800      	cmp	r0, #0
   b6f38:	d034      	beq.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6f3a:	6921      	ldr	r1, [r4, #16]
   b6f3c:	68a0      	ldr	r0, [r4, #8]
   b6f3e:	f000 fc99 	bl	b7874 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6f42:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6f44:	68a0      	ldr	r0, [r4, #8]
   b6f46:	b915      	cbnz	r5, b6f4e <_ZN7FatFile5writeEPKvj+0x72>
   b6f48:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6f4c:	d23f      	bcs.n	b6fce <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6f4e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6f52:	4546      	cmp	r6, r8
   b6f54:	bf28      	it	cs
   b6f56:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6f58:	2d00      	cmp	r5, #0
   b6f5a:	d136      	bne.n	b6fca <_ZN7FatFile5writeEPKvj+0xee>
   b6f5c:	6962      	ldr	r2, [r4, #20]
   b6f5e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6f60:	429a      	cmp	r2, r3
   b6f62:	bf34      	ite	cc
   b6f64:	2201      	movcc	r2, #1
   b6f66:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6f68:	3024      	adds	r0, #36	; 0x24
   b6f6a:	f000 fc60 	bl	b782e <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6f6e:	b1c8      	cbz	r0, b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6f70:	4428      	add	r0, r5
   b6f72:	4632      	mov	r2, r6
   b6f74:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6f76:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6f78:	f00d f9fe 	bl	c4378 <memcpy>
      if (512 == (n + blockOffset)) {
   b6f7c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6f80:	d104      	bne.n	b6f8c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6f82:	68a0      	ldr	r0, [r4, #8]
   b6f84:	3024      	adds	r0, #36	; 0x24
   b6f86:	f000 fc2a 	bl	b77de <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6f8a:	b158      	cbz	r0, b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6f8c:	6963      	ldr	r3, [r4, #20]
   b6f8e:	4433      	add	r3, r6
   b6f90:	6163      	str	r3, [r4, #20]
    src += n;
   b6f92:	44b1      	add	r9, r6
    nToWrite -= n;
   b6f94:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6f98:	e7b4      	b.n	b6f04 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6f9a:	69c1      	ldr	r1, [r0, #28]
   b6f9c:	f7ff fe2a 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
   b6fa0:	2800      	cmp	r0, #0
   b6fa2:	d1a8      	bne.n	b6ef6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6fa4:	7863      	ldrb	r3, [r4, #1]
   b6fa6:	f043 0301 	orr.w	r3, r3, #1
   b6faa:	7063      	strb	r3, [r4, #1]
  return -1;
   b6fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6fb0:	e050      	b.n	b7054 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6fb2:	6a23      	ldr	r3, [r4, #32]
   b6fb4:	b93b      	cbnz	r3, b6fc6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	f7ff fcb3 	bl	b6922 <_ZN7FatFile10addClusterEv>
   b6fbc:	2800      	cmp	r0, #0
   b6fbe:	d0f1      	beq.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6fc0:	6923      	ldr	r3, [r4, #16]
   b6fc2:	6223      	str	r3, [r4, #32]
   b6fc4:	e7b9      	b.n	b6f3a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6fc6:	6123      	str	r3, [r4, #16]
   b6fc8:	e7b7      	b.n	b6f3a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6fca:	2201      	movs	r2, #1
   b6fcc:	e7cc      	b.n	b6f68 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6fce:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6fd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6fd4:	d31b      	bcc.n	b700e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6fd6:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6fda:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6fde:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6fe0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6fe4:	4573      	cmp	r3, lr
   b6fe6:	bf28      	it	cs
   b6fe8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6fea:	4291      	cmp	r1, r2
      n = 512*nb;
   b6fec:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6ff0:	d307      	bcc.n	b7002 <_ZN7FatFile5writeEPKvj+0x126>
   b6ff2:	441a      	add	r2, r3
   b6ff4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6ff6:	bf82      	ittt	hi
   b6ff8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6ffc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7000:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7002:	68a5      	ldr	r5, [r4, #8]
   b7004:	464a      	mov	r2, r9
   b7006:	6828      	ldr	r0, [r5, #0]
   b7008:	f000 fff3 	bl	b7ff2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b700c:	e7bd      	b.n	b6f8a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b700e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7010:	bf02      	ittt	eq
   b7012:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b7016:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b701a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b701c:	68a3      	ldr	r3, [r4, #8]
   b701e:	464a      	mov	r2, r9
   b7020:	6818      	ldr	r0, [r3, #0]
   b7022:	f000 ff70 	bl	b7f06 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7026:	2800      	cmp	r0, #0
   b7028:	d0bc      	beq.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b702a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b702e:	e7ad      	b.n	b6f8c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7030:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7032:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7034:	42b2      	cmp	r2, r6
   b7036:	d204      	bcs.n	b7042 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7038:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b703a:	f043 0304 	orr.w	r3, r3, #4
   b703e:	70a3      	strb	r3, [r4, #2]
   b7040:	e003      	b.n	b704a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7042:	4a08      	ldr	r2, [pc, #32]	; (b7064 <_ZN7FatFile5writeEPKvj+0x188>)
   b7044:	6812      	ldr	r2, [r2, #0]
   b7046:	2a00      	cmp	r2, #0
   b7048:	d1f7      	bne.n	b703a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b704a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b704e:	2b00      	cmp	r3, #0
   b7050:	db02      	blt.n	b7058 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7052:	4638      	mov	r0, r7
}
   b7054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7058:	4620      	mov	r0, r4
   b705a:	f7ff feb5 	bl	b6dc8 <_ZN7FatFile4syncEv>
   b705e:	2800      	cmp	r0, #0
   b7060:	d1f7      	bne.n	b7052 <_ZN7FatFile5writeEPKvj+0x176>
   b7062:	e79f      	b.n	b6fa4 <_ZN7FatFile5writeEPKvj+0xc8>
   b7064:	2003e60c 	.word	0x2003e60c

000b7068 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7068:	2904      	cmp	r1, #4
   b706a:	d804      	bhi.n	b7076 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b706c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b7070:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7074:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7076:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7078:	bf9b      	ittet	ls
   b707a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b707e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7082:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7084:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7086:	bf84      	itt	hi
   b7088:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b708c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b708e:	4770      	bx	lr

000b7090 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b7090:	1e41      	subs	r1, r0, #1
   b7092:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7096:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7098:	0842      	lsrs	r2, r0, #1
   b709a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b709e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b70a2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b70a6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b70a8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b70aa:	d1f5      	bne.n	b7098 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b70ac:	4770      	bx	lr

000b70ae <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b70ae:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b70b0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b70b2:	4604      	mov	r4, r0
   b70b4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b70b6:	b923      	cbnz	r3, b70c2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b70b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b70bc:	6889      	ldr	r1, [r1, #8]
   b70be:	f7ff bcb3 	b.w	b6a28 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b70c2:	2224      	movs	r2, #36	; 0x24
   b70c4:	2100      	movs	r1, #0
   b70c6:	f00d f97f 	bl	c43c8 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b70ca:	2310      	movs	r3, #16
  m_flags = F_READ;
   b70cc:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b70ce:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b70d0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b70d2:	68ab      	ldr	r3, [r5, #8]
   b70d4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b70d6:	68eb      	ldr	r3, [r5, #12]
   b70d8:	6223      	str	r3, [r4, #32]
}
   b70da:	bd38      	pop	{r3, r4, r5, pc}

000b70dc <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b70dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70e0:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b70e2:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b70e4:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b70e8:	4606      	mov	r6, r0
   b70ea:	460f      	mov	r7, r1
   b70ec:	4690      	mov	r8, r2
   b70ee:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b70f2:	2b00      	cmp	r3, #0
   b70f4:	d05d      	beq.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
   b70f6:	2a0c      	cmp	r2, #12
   b70f8:	d95b      	bls.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b70fa:	78c3      	ldrb	r3, [r0, #3]
   b70fc:	b933      	cbnz	r3, b710c <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b70fe:	f000 fb57 	bl	b77b0 <_ZN7FatFile6getSFNEPc>
   b7102:	4604      	mov	r4, r0
}
   b7104:	4620      	mov	r0, r4
   b7106:	b00d      	add	sp, #52	; 0x34
   b7108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b710c:	4601      	mov	r1, r0
   b710e:	a803      	add	r0, sp, #12
   b7110:	f7ff ffcd 	bl	b70ae <_ZN7FatFile11openClusterEPS_>
   b7114:	2800      	cmp	r0, #0
   b7116:	d04c      	beq.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b7118:	eb07 0308 	add.w	r3, r7, r8
   b711c:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7120:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b7124:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b7126:	78f3      	ldrb	r3, [r6, #3]
   b7128:	fa5f f58b 	uxtb.w	r5, fp
   b712c:	42ab      	cmp	r3, r5
   b712e:	d340      	bcc.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b7130:	88b1      	ldrh	r1, [r6, #4]
   b7132:	eba1 010b 	sub.w	r1, r1, fp
   b7136:	0149      	lsls	r1, r1, #5
   b7138:	a803      	add	r0, sp, #12
   b713a:	f7ff fd5b 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
   b713e:	4604      	mov	r4, r0
   b7140:	2800      	cmp	r0, #0
   b7142:	d036      	beq.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b7144:	2100      	movs	r1, #0
   b7146:	a803      	add	r0, sp, #12
   b7148:	f7ff fd35 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b714c:	4603      	mov	r3, r0
   b714e:	b380      	cbz	r0, b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b7150:	7ac2      	ldrb	r2, [r0, #11]
   b7152:	2a0f      	cmp	r2, #15
   b7154:	d12d      	bne.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b7156:	7802      	ldrb	r2, [r0, #0]
   b7158:	f002 021f 	and.w	r2, r2, #31
   b715c:	42aa      	cmp	r2, r5
   b715e:	d128      	bne.n	b71b2 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7160:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b7164:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b7168:	197a      	adds	r2, r7, r5
   b716a:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b716c:	4618      	mov	r0, r3
   b716e:	9101      	str	r1, [sp, #4]
   b7170:	f7ff ff7a 	bl	b7068 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b7174:	b168      	cbz	r0, b7192 <_ZN7FatFile7getNameEPcj+0xb6>
   b7176:	45a8      	cmp	r8, r5
   b7178:	d912      	bls.n	b71a0 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b717a:	9901      	ldr	r1, [sp, #4]
   b717c:	3101      	adds	r1, #1
   b717e:	287f      	cmp	r0, #127	; 0x7f
   b7180:	b2c9      	uxtb	r1, r1
   b7182:	bf28      	it	cs
   b7184:	203f      	movcs	r0, #63	; 0x3f
   b7186:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b7188:	f802 0b01 	strb.w	r0, [r2], #1
   b718c:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b7190:	d1ec      	bne.n	b716c <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b7192:	45a8      	cmp	r8, r5
   b7194:	d904      	bls.n	b71a0 <_ZN7FatFile7getNameEPcj+0xc4>
   b7196:	781a      	ldrb	r2, [r3, #0]
   b7198:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b719a:	bf48      	it	mi
   b719c:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b71a0:	9a00      	ldr	r2, [sp, #0]
   b71a2:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b71a6:	781b      	ldrb	r3, [r3, #0]
   b71a8:	065b      	lsls	r3, r3, #25
   b71aa:	f10b 0b01 	add.w	fp, fp, #1
   b71ae:	d5ba      	bpl.n	b7126 <_ZN7FatFile7getNameEPcj+0x4a>
   b71b0:	e7a8      	b.n	b7104 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b71b2:	2400      	movs	r4, #0
   b71b4:	703c      	strb	r4, [r7, #0]
  return false;
   b71b6:	e7a5      	b.n	b7104 <_ZN7FatFile7getNameEPcj+0x28>

000b71b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b71b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b71bc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b71be:	f810 3b01 	ldrb.w	r3, [r0], #1
   b71c2:	2b20      	cmp	r3, #32
   b71c4:	d0fa      	beq.n	b71bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b71c6:	4d6a      	ldr	r5, [pc, #424]	; (b7370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b71c8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b71ca:	2400      	movs	r4, #0
    c = path[len];
   b71cc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b71ce:	b1c3      	cbz	r3, b7202 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b71d0:	2b2f      	cmp	r3, #47	; 0x2f
   b71d2:	d016      	beq.n	b7202 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b71d4:	2b5c      	cmp	r3, #92	; 0x5c
   b71d6:	d102      	bne.n	b71de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b71d8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b71da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b71de:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b71e2:	b2c0      	uxtb	r0, r0
   b71e4:	281d      	cmp	r0, #29
   b71e6:	d803      	bhi.n	b71f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b71e8:	fa25 f000 	lsr.w	r0, r5, r0
   b71ec:	07c0      	lsls	r0, r0, #31
   b71ee:	d4f3      	bmi.n	b71d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b71f0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b71f4:	283c      	cmp	r0, #60	; 0x3c
   b71f6:	d0ef      	beq.n	b71d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b71f8:	3b20      	subs	r3, #32
   b71fa:	2b5e      	cmp	r3, #94	; 0x5e
   b71fc:	d8ec      	bhi.n	b71d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b71fe:	3401      	adds	r4, #1
    c = path[len];
   b7200:	e7e4      	b.n	b71cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b7202:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b7204:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b7206:	4607      	mov	r7, r0
   b7208:	f810 5b01 	ldrb.w	r5, [r0], #1
   b720c:	2d20      	cmp	r5, #32
   b720e:	d0fa      	beq.n	b7206 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7210:	2d2f      	cmp	r5, #47	; 0x2f
   b7212:	d0f8      	beq.n	b7206 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b7214:	6017      	str	r7, [r2, #0]
  while (len) {
   b7216:	b14c      	cbz	r4, b722c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b7218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b721c:	2a2e      	cmp	r2, #46	; 0x2e
   b721e:	d001      	beq.n	b7224 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7220:	2a20      	cmp	r2, #32
   b7222:	d101      	bne.n	b7228 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b7224:	3c01      	subs	r4, #1
  while (len) {
   b7226:	e7f6      	b.n	b7216 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b7228:	2cff      	cmp	r4, #255	; 0xff
   b722a:	dcd5      	bgt.n	b71d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b722c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b7230:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b7234:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b7236:	f8c1 300d 	str.w	r3, [r1, #13]
   b723a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b723c:	f04f 0800 	mov.w	r8, #0
   b7240:	f816 3008 	ldrb.w	r3, [r6, r8]
   b7244:	2b2e      	cmp	r3, #46	; 0x2e
   b7246:	d001      	beq.n	b724c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b7248:	2b20      	cmp	r3, #32
   b724a:	d102      	bne.n	b7252 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b724c:	f108 0801 	add.w	r8, r8, #1
   b7250:	e7f6      	b.n	b7240 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7252:	fab8 f088 	clz	r0, r8
   b7256:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7258:	1e65      	subs	r5, r4, #1
   b725a:	1c6b      	adds	r3, r5, #1
   b725c:	d002      	beq.n	b7264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b725e:	5d73      	ldrb	r3, [r6, r5]
   b7260:	2b2e      	cmp	r3, #46	; 0x2e
   b7262:	d114      	bne.n	b728e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7264:	f04f 0900 	mov.w	r9, #0
   b7268:	2707      	movs	r7, #7
   b726a:	464a      	mov	r2, r9
   b726c:	46ca      	mov	sl, r9
   b726e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7272:	45a0      	cmp	r8, r4
   b7274:	da68      	bge.n	b7348 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7276:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b727a:	2b20      	cmp	r3, #32
   b727c:	d003      	beq.n	b7286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b727e:	2b2e      	cmp	r3, #46	; 0x2e
   b7280:	d107      	bne.n	b7292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7282:	45a8      	cmp	r8, r5
   b7284:	d012      	beq.n	b72ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7286:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7288:	f108 0801 	add.w	r8, r8, #1
   b728c:	e7f1      	b.n	b7272 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b728e:	3d01      	subs	r5, #1
   b7290:	e7e3      	b.n	b725a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7292:	2b22      	cmp	r3, #34	; 0x22
   b7294:	d008      	beq.n	b72a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7296:	2b7c      	cmp	r3, #124	; 0x7c
   b7298:	d006      	beq.n	b72a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b729a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b729e:	f1bc 0f05 	cmp.w	ip, #5
   b72a2:	d80a      	bhi.n	b72ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b72a4:	2b2d      	cmp	r3, #45	; 0x2d
   b72a6:	d012      	beq.n	b72ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b72a8:	45a8      	cmp	r8, r5
   b72aa:	d15b      	bne.n	b7364 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b72ac:	2f0a      	cmp	r7, #10
   b72ae:	d04a      	beq.n	b7346 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b72b0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b72b2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b72b4:	f04f 0e10 	mov.w	lr, #16
   b72b8:	e7e6      	b.n	b7288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b72ba:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b72be:	f1bc 0f05 	cmp.w	ip, #5
   b72c2:	d9f1      	bls.n	b72a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b72c4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b72c8:	f1bc 0f02 	cmp.w	ip, #2
   b72cc:	d9ec      	bls.n	b72a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b72ce:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b72d2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b72d6:	d8e7      	bhi.n	b72a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b72d8:	45a8      	cmp	r8, r5
   b72da:	d0e7      	beq.n	b72ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b72dc:	42ba      	cmp	r2, r7
   b72de:	d830      	bhi.n	b7342 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b72e0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b72e4:	f1bc 0f19 	cmp.w	ip, #25
   b72e8:	d81a      	bhi.n	b7320 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b72ea:	3b20      	subs	r3, #32
        lc |= bit;
   b72ec:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b72f0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b72f2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b72f6:	f102 0c01 	add.w	ip, r2, #1
   b72fa:	fa5f fc8c 	uxtb.w	ip, ip
   b72fe:	440a      	add	r2, r1
      if (i < 7) {
   b7300:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b7304:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b7306:	d801      	bhi.n	b730c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b7308:	f881 c00c 	strb.w	ip, [r1, #12]
   b730c:	4662      	mov	r2, ip
   b730e:	e7bb      	b.n	b7288 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b7310:	45a8      	cmp	r8, r5
   b7312:	dc18      	bgt.n	b7346 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b7314:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b7316:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7318:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b731a:	f04f 0e10 	mov.w	lr, #16
   b731e:	e7b2      	b.n	b7286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7320:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7324:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7328:	bf98      	it	ls
   b732a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b732e:	e7e2      	b.n	b72f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7330:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b7332:	2001      	movs	r0, #1
   b7334:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b7336:	4419      	add	r1, r3
   b7338:	237e      	movs	r3, #126	; 0x7e
   b733a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b733c:	2331      	movs	r3, #49	; 0x31
   b733e:	738b      	strb	r3, [r1, #14]
   b7340:	e74b      	b.n	b71da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b7342:	2f0a      	cmp	r7, #10
   b7344:	d1e4      	bne.n	b7310 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b7346:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7348:	7b4b      	ldrb	r3, [r1, #13]
   b734a:	2b20      	cmp	r3, #32
   b734c:	f43f af44 	beq.w	b71d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7350:	2800      	cmp	r0, #0
   b7352:	d0ed      	beq.n	b7330 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7354:	ea1a 0f09 	tst.w	sl, r9
   b7358:	bf18      	it	ne
   b735a:	f04f 0902 	movne.w	r9, #2
   b735e:	f881 9000 	strb.w	r9, [r1]
   b7362:	e73a      	b.n	b71da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7364:	42ba      	cmp	r2, r7
   b7366:	d8ec      	bhi.n	b7342 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7368:	2000      	movs	r0, #0
      c = '_';
   b736a:	235f      	movs	r3, #95	; 0x5f
   b736c:	e7c3      	b.n	b72f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b736e:	bf00      	nop
   b7370:	31000101 	.word	0x31000101

000b7374 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7378:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b737c:	4606      	mov	r6, r0
   b737e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7380:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7382:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7384:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7388:	6861      	ldr	r1, [r4, #4]
   b738a:	68a2      	ldr	r2, [r4, #8]
   b738c:	186b      	adds	r3, r5, r1
   b738e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7390:	4411      	add	r1, r2
   b7392:	4291      	cmp	r1, r2
   b7394:	d006      	beq.n	b73a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7396:	f812 0b01 	ldrb.w	r0, [r2], #1
   b739a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b739e:	4043      	eors	r3, r0
   b73a0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b73a2:	e7f6      	b.n	b7392 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b73a4:	f1b9 0f03 	cmp.w	r9, #3
   b73a8:	bf28      	it	cs
   b73aa:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b73ae:	f109 0204 	add.w	r2, r9, #4
   b73b2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b73b4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b73b8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b73ba:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b73bc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b73be:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b73c0:	bf94      	ite	ls
   b73c2:	3130      	addls	r1, #48	; 0x30
   b73c4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b73c6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b73c8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b73ca:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b73ce:	d1f1      	bne.n	b73b4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b73d0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b73d4:	2100      	movs	r1, #0
   b73d6:	735f      	strb	r7, [r3, #13]
   b73d8:	4630      	mov	r0, r6
   b73da:	f7ff fc0b 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b73de:	2101      	movs	r1, #1
   b73e0:	4630      	mov	r0, r6
   b73e2:	f7ff fbe8 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b73e6:	4601      	mov	r1, r0
   b73e8:	b928      	cbnz	r0, b73f6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b73ea:	7870      	ldrb	r0, [r6, #1]
   b73ec:	fab0 f080 	clz	r0, r0
   b73f0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b73f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b73f6:	7803      	ldrb	r3, [r0, #0]
   b73f8:	b16b      	cbz	r3, b7416 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b73fa:	7ac3      	ldrb	r3, [r0, #11]
   b73fc:	071b      	lsls	r3, r3, #28
   b73fe:	d4ee      	bmi.n	b73de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7400:	220b      	movs	r2, #11
   b7402:	4640      	mov	r0, r8
   b7404:	f00c ffa8 	bl	c4358 <memcmp>
   b7408:	2800      	cmp	r0, #0
   b740a:	d1e8      	bne.n	b73de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b740c:	3501      	adds	r5, #1
   b740e:	b2ad      	uxth	r5, r5
   b7410:	2d64      	cmp	r5, #100	; 0x64
   b7412:	d1b9      	bne.n	b7388 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7414:	e7ed      	b.n	b73f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7416:	2001      	movs	r0, #1
   b7418:	e7eb      	b.n	b73f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b741c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7420:	ed2d 8b02 	vpush	{d8}
   b7424:	b08b      	sub	sp, #44	; 0x2c
   b7426:	460d      	mov	r5, r1
   b7428:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b742a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b742c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b742e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7432:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7434:	d105      	bne.n	b7442 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7436:	2000      	movs	r0, #0
}
   b7438:	b00b      	add	sp, #44	; 0x2c
   b743a:	ecbd 8b02 	vpop	{d8}
   b743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7442:	9b07      	ldr	r3, [sp, #28]
   b7444:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7446:	2b00      	cmp	r3, #0
   b7448:	d1f5      	bne.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b744a:	6853      	ldr	r3, [r2, #4]
   b744c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b744e:	7813      	ldrb	r3, [r2, #0]
   b7450:	079c      	lsls	r4, r3, #30
   b7452:	bf1f      	itttt	ne
   b7454:	9b05      	ldrne	r3, [sp, #20]
   b7456:	330c      	addne	r3, #12
   b7458:	220d      	movne	r2, #13
   b745a:	fbb3 f3f2 	udivne	r3, r3, r2
   b745e:	bf1a      	itte	ne
   b7460:	3301      	addne	r3, #1
   b7462:	b2db      	uxtbne	r3, r3
   b7464:	2301      	moveq	r3, #1
    seekSet(0);
   b7466:	2100      	movs	r1, #0
   b7468:	4628      	mov	r0, r5
   b746a:	9303      	str	r3, [sp, #12]
   b746c:	f7ff fbc2 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7470:	f107 030d 	add.w	r3, r7, #13
  }
   b7474:	f04f 0b00 	mov.w	fp, #0
   b7478:	ee08 3a10 	vmov	s16, r3
   b747c:	46da      	mov	sl, fp
   b747e:	465c      	mov	r4, fp
   b7480:	465e      	mov	r6, fp
   b7482:	f8cd b010 	str.w	fp, [sp, #16]
   b7486:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7488:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b748a:	2101      	movs	r1, #1
   b748c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b748e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7492:	f7ff fb90 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7496:	4603      	mov	r3, r0
   b7498:	2800      	cmp	r0, #0
   b749a:	d171      	bne.n	b7580 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b749c:	786b      	ldrb	r3, [r5, #1]
   b749e:	2b00      	cmp	r3, #0
   b74a0:	d1c9      	bne.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b74a2:	9b06      	ldr	r3, [sp, #24]
   b74a4:	059a      	lsls	r2, r3, #22
   b74a6:	d5c6      	bpl.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b74a8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b74ac:	3b01      	subs	r3, #1
   b74ae:	2b01      	cmp	r3, #1
   b74b0:	d8c1      	bhi.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b74b2:	9b04      	ldr	r3, [sp, #16]
   b74b4:	2c00      	cmp	r4, #0
   b74b6:	bf08      	it	eq
   b74b8:	4643      	moveq	r3, r8
   b74ba:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b74bc:	9b03      	ldr	r3, [sp, #12]
   b74be:	429c      	cmp	r4, r3
   b74c0:	f0c0 80f1 	bcc.w	b76a6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b74c4:	f1b9 0f00 	cmp.w	r9, #0
   b74c8:	f040 810a 	bne.w	b76e0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b74cc:	9b04      	ldr	r3, [sp, #16]
   b74ce:	4628      	mov	r0, r5
   b74d0:	0159      	lsls	r1, r3, #5
   b74d2:	f7ff fb8f 	bl	b6bf4 <_ZN7FatFile7seekSetEm>
   b74d6:	2800      	cmp	r0, #0
   b74d8:	d0ad      	beq.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b74da:	9b03      	ldr	r3, [sp, #12]
   b74dc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b74e0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b74e4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b74e6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b74ea:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b74ee:	2e00      	cmp	r6, #0
   b74f0:	f000 810d 	beq.w	b770e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b74f4:	2100      	movs	r1, #0
   b74f6:	4628      	mov	r0, r5
   b74f8:	f7ff fb5d 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b74fc:	4604      	mov	r4, r0
   b74fe:	2800      	cmp	r0, #0
   b7500:	d099      	beq.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7502:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7504:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7508:	454e      	cmp	r6, r9
   b750a:	f043 0301 	orr.w	r3, r3, #1
   b750e:	bf0c      	ite	eq
   b7510:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7514:	46b3      	movne	fp, r6
   b7516:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b751a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b751e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7522:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7526:	f107 000d 	add.w	r0, r7, #13
   b752a:	f7ff fdb1 	bl	b7090 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b752e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7532:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7534:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7538:	f00b 031f 	and.w	r3, fp, #31
   b753c:	220d      	movs	r2, #13
   b753e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7540:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7544:	4353      	muls	r3, r2
   b7546:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7548:	9905      	ldr	r1, [sp, #20]
   b754a:	4299      	cmp	r1, r3
   b754c:	f240 80d0 	bls.w	b76f0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7550:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7554:	2a04      	cmp	r2, #4
   b7556:	fa5f fe82 	uxtb.w	lr, r2
   b755a:	f102 0001 	add.w	r0, r2, #1
   b755e:	f200 80cd 	bhi.w	b76fc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7562:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7566:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b756a:	280d      	cmp	r0, #13
   b756c:	f103 0301 	add.w	r3, r3, #1
   b7570:	4602      	mov	r2, r0
   b7572:	d1e9      	bne.n	b7548 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7574:	3e01      	subs	r6, #1
   b7576:	b2f6      	uxtb	r6, r6
   b7578:	e7b9      	b.n	b74ee <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b757a:	f04f 0901 	mov.w	r9, #1
   b757e:	e783      	b.n	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7580:	7802      	ldrb	r2, [r0, #0]
   b7582:	2ae5      	cmp	r2, #229	; 0xe5
   b7584:	d000      	beq.n	b7588 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7586:	b97a      	cbnz	r2, b75a8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7588:	9904      	ldr	r1, [sp, #16]
   b758a:	2c00      	cmp	r4, #0
   b758c:	bf08      	it	eq
   b758e:	4641      	moveq	r1, r8
   b7590:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7592:	9903      	ldr	r1, [sp, #12]
   b7594:	428c      	cmp	r4, r1
        freeFound++;
   b7596:	bf3c      	itt	cc
   b7598:	3401      	addcc	r4, #1
   b759a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b759c:	2a00      	cmp	r2, #0
   b759e:	d080      	beq.n	b74a2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b75a0:	2ae5      	cmp	r2, #229	; 0xe5
   b75a2:	d105      	bne.n	b75b0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b75a4:	2600      	movs	r6, #0
   b75a6:	e76f      	b.n	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b75a8:	9903      	ldr	r1, [sp, #12]
   b75aa:	428c      	cmp	r4, r1
   b75ac:	bf38      	it	cc
   b75ae:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b75b0:	2a2e      	cmp	r2, #46	; 0x2e
   b75b2:	d0f7      	beq.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b75b4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b75b6:	290f      	cmp	r1, #15
   b75b8:	d14a      	bne.n	b7650 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b75ba:	bb16      	cbnz	r6, b7602 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b75bc:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b75c0:	f43f af62 	beq.w	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b75c4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b75c8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b75cc:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b75ce:	220d      	movs	r2, #13
   b75d0:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b75d4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b75d8:	9a05      	ldr	r2, [sp, #20]
   b75da:	4542      	cmp	r2, r8
   b75dc:	d9e2      	bls.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b75de:	eba2 0208 	sub.w	r2, r2, r8
   b75e2:	9208      	str	r2, [sp, #32]
   b75e4:	2200      	movs	r2, #0
   b75e6:	eb02 0108 	add.w	r1, r2, r8
   b75ea:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b75ec:	4618      	mov	r0, r3
   b75ee:	b2d1      	uxtb	r1, r2
   b75f0:	f7ff fd3a 	bl	b7068 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b75f4:	9908      	ldr	r1, [sp, #32]
   b75f6:	428a      	cmp	r2, r1
   b75f8:	d10d      	bne.n	b7616 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b75fa:	2800      	cmp	r0, #0
   b75fc:	bf18      	it	ne
   b75fe:	2600      	movne	r6, #0
   b7600:	e742      	b.n	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7602:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7606:	fa5f fa8a 	uxtb.w	sl, sl
   b760a:	4552      	cmp	r2, sl
   b760c:	d1ca      	bne.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b760e:	7b5a      	ldrb	r2, [r3, #13]
   b7610:	455a      	cmp	r2, fp
   b7612:	d0dc      	beq.n	b75ce <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7614:	e7c6      	b.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7616:	28ff      	cmp	r0, #255	; 0xff
   b7618:	d8c4      	bhi.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b761a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b761e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7622:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7624:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7626:	bf9c      	itt	ls
   b7628:	f10e 0020 	addls.w	r0, lr, #32
   b762c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7630:	4608      	mov	r0, r1
   b7632:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7634:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7636:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b763a:	f1bc 0f19 	cmp.w	ip, #25
   b763e:	bf9c      	itt	ls
   b7640:	3120      	addls	r1, #32
   b7642:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7644:	4571      	cmp	r1, lr
   b7646:	d1ad      	bne.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7648:	3201      	adds	r2, #1
   b764a:	2a0d      	cmp	r2, #13
   b764c:	d1cb      	bne.n	b75e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b764e:	e71b      	b.n	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7650:	0708      	lsls	r0, r1, #28
   b7652:	d4a7      	bmi.n	b75a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7654:	b15e      	cbz	r6, b766e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7656:	f1ba 0f01 	cmp.w	sl, #1
   b765a:	f47f aeec 	bne.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b765e:	4618      	mov	r0, r3
   b7660:	f7ff fd16 	bl	b7090 <_ZN7FatFile11lfnChecksumEPh>
   b7664:	4558      	cmp	r0, fp
   b7666:	f47f aee6 	bne.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b766a:	46b1      	mov	r9, r6
   b766c:	e00e      	b.n	b768c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b766e:	ee18 1a10 	vmov	r1, s16
   b7672:	220b      	movs	r2, #11
   b7674:	4618      	mov	r0, r3
   b7676:	f00c fe6f 	bl	c4358 <memcmp>
   b767a:	2800      	cmp	r0, #0
   b767c:	f47f af04 	bne.w	b7488 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7680:	f897 9000 	ldrb.w	r9, [r7]
   b7684:	f019 0901 	ands.w	r9, r9, #1
   b7688:	f47f af77 	bne.w	b757a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b768c:	9b06      	ldr	r3, [sp, #24]
   b768e:	0519      	lsls	r1, r3, #20
   b7690:	f53f aed1 	bmi.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7694:	9b06      	ldr	r3, [sp, #24]
   b7696:	9807      	ldr	r0, [sp, #28]
   b7698:	f8cd 9000 	str.w	r9, [sp]
   b769c:	4642      	mov	r2, r8
   b769e:	4629      	mov	r1, r5
   b76a0:	f7ff faeb 	bl	b6c7a <_ZN7FatFile15openCachedEntryEPS_tih>
   b76a4:	e6c8      	b.n	b7438 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b76a6:	2100      	movs	r1, #0
   b76a8:	4628      	mov	r0, r5
   b76aa:	f7ff fa84 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b76ae:	b9a0      	cbnz	r0, b76da <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b76b0:	786b      	ldrb	r3, [r5, #1]
   b76b2:	2b00      	cmp	r3, #0
   b76b4:	f47f aebf 	bne.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b76b8:	4628      	mov	r0, r5
   b76ba:	f7ff f93d 	bl	b6938 <_ZN7FatFile13addDirClusterEv>
   b76be:	2800      	cmp	r0, #0
   b76c0:	f43f aeb9 	beq.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b76c4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b76c6:	791b      	ldrb	r3, [r3, #4]
   b76c8:	2b01      	cmp	r3, #1
   b76ca:	f63f aefb 	bhi.w	b74c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b76ce:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b76d0:	3410      	adds	r4, #16
   b76d2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b76d4:	42a3      	cmp	r3, r4
   b76d6:	d8ef      	bhi.n	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b76d8:	e6f4      	b.n	b74c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b76da:	3401      	adds	r4, #1
   b76dc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b76de:	e6ed      	b.n	b74bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b76e0:	4639      	mov	r1, r7
   b76e2:	4628      	mov	r0, r5
   b76e4:	f7ff fe46 	bl	b7374 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b76e8:	2800      	cmp	r0, #0
   b76ea:	f47f aeef 	bne.w	b74cc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b76ee:	e6a2      	b.n	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b76f0:	bf14      	ite	ne
   b76f2:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b76f6:	2100      	moveq	r1, #0
   b76f8:	b289      	uxth	r1, r1
   b76fa:	e72b      	b.n	b7554 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b76fc:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7700:	bf94      	ite	ls
   b7702:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7706:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b770a:	8091      	strh	r1, [r2, #4]
   b770c:	e72d      	b.n	b756a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b770e:	4631      	mov	r1, r6
   b7710:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7712:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7716:	f7ff fa4e 	bl	b6bb6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b771a:	4604      	mov	r4, r0
   b771c:	2800      	cmp	r0, #0
   b771e:	f43f ae8a 	beq.w	b7436 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7722:	2220      	movs	r2, #32
   b7724:	4631      	mov	r1, r6
   b7726:	f00c fe4f 	bl	c43c8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b772a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b772e:	6023      	str	r3, [r4, #0]
   b7730:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7734:	6063      	str	r3, [r4, #4]
   b7736:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b773a:	8123      	strh	r3, [r4, #8]
   b773c:	7dfb      	ldrb	r3, [r7, #23]
   b773e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7740:	783b      	ldrb	r3, [r7, #0]
   b7742:	f003 0318 	and.w	r3, r3, #24
   b7746:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7748:	4b0f      	ldr	r3, [pc, #60]	; (b7788 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b774a:	681b      	ldr	r3, [r3, #0]
   b774c:	b19b      	cbz	r3, b7776 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b774e:	f104 010e 	add.w	r1, r4, #14
   b7752:	f104 0010 	add.w	r0, r4, #16
   b7756:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7758:	8a23      	ldrh	r3, [r4, #16]
   b775a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b775c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b775e:	89e3      	ldrh	r3, [r4, #14]
   b7760:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7762:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7764:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7768:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b776c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7770:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7774:	e78e      	b.n	b7694 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7776:	2321      	movs	r3, #33	; 0x21
   b7778:	7423      	strb	r3, [r4, #16]
   b777a:	2328      	movs	r3, #40	; 0x28
   b777c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b777e:	2308      	movs	r3, #8
   b7780:	73a6      	strb	r6, [r4, #14]
   b7782:	73e3      	strb	r3, [r4, #15]
   b7784:	e7e8      	b.n	b7758 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7786:	bf00      	nop
   b7788:	2003e60c 	.word	0x2003e60c

000b778c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b778c:	b513      	push	{r0, r1, r4, lr}
   b778e:	4604      	mov	r4, r0
    }
   b7790:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7792:	b159      	cbz	r1, b77ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7794:	9101      	str	r1, [sp, #4]
   b7796:	f00c fea2 	bl	c44de <strlen>
   b779a:	6823      	ldr	r3, [r4, #0]
   b779c:	9901      	ldr	r1, [sp, #4]
   b779e:	68db      	ldr	r3, [r3, #12]
   b77a0:	4602      	mov	r2, r0
   b77a2:	4620      	mov	r0, r4
    }
   b77a4:	b002      	add	sp, #8
   b77a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b77aa:	4718      	bx	r3
    }
   b77ac:	b002      	add	sp, #8
   b77ae:	bd10      	pop	{r4, pc}

000b77b0 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b77b0:	b510      	push	{r4, lr}
   b77b2:	460c      	mov	r4, r1
    return m_attr;
   b77b4:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b77b6:	b909      	cbnz	r1, b77bc <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b77b8:	2000      	movs	r0, #0
}
   b77ba:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b77bc:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b77c0:	d005      	beq.n	b77ce <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b77c2:	232f      	movs	r3, #47	; 0x2f
   b77c4:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b77c6:	2300      	movs	r3, #0
   b77c8:	7063      	strb	r3, [r4, #1]
  return true;
   b77ca:	2001      	movs	r0, #1
   b77cc:	e7f5      	b.n	b77ba <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b77ce:	f7ff f8f1 	bl	b69b4 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b77d2:	2800      	cmp	r0, #0
   b77d4:	d0f0      	beq.n	b77b8 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b77d6:	4621      	mov	r1, r4
   b77d8:	f7ff f8fb 	bl	b69d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b77dc:	e7f5      	b.n	b77ca <_ZN7FatFile6getSFNEPc+0x1a>

000b77de <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b77de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b77e0:	7803      	ldrb	r3, [r0, #0]
   b77e2:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b77e4:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b77e6:	d520      	bpl.n	b782a <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b77e8:	6843      	ldr	r3, [r0, #4]
   b77ea:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b77ec:	f100 020c 	add.w	r2, r0, #12
   b77f0:	6818      	ldr	r0, [r3, #0]
   b77f2:	9201      	str	r2, [sp, #4]
   b77f4:	f000 fb87 	bl	b7f06 <_ZN9SdSpiCard10writeBlockEmPKh>
   b77f8:	9a01      	ldr	r2, [sp, #4]
   b77fa:	4605      	mov	r5, r0
   b77fc:	b918      	cbnz	r0, b7806 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b77fe:	2500      	movs	r5, #0
}
   b7800:	4628      	mov	r0, r5
   b7802:	b003      	add	sp, #12
   b7804:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7806:	7823      	ldrb	r3, [r4, #0]
   b7808:	079b      	lsls	r3, r3, #30
   b780a:	d404      	bmi.n	b7816 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b780c:	7823      	ldrb	r3, [r4, #0]
   b780e:	f023 0301 	bic.w	r3, r3, #1
   b7812:	7023      	strb	r3, [r4, #0]
   b7814:	e7f4      	b.n	b7800 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7816:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b781a:	6919      	ldr	r1, [r3, #16]
   b781c:	4401      	add	r1, r0
   b781e:	6818      	ldr	r0, [r3, #0]
   b7820:	f000 fb71 	bl	b7f06 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7824:	2800      	cmp	r0, #0
   b7826:	d1f1      	bne.n	b780c <_ZN8FatCache4syncEv+0x2e>
   b7828:	e7e9      	b.n	b77fe <_ZN8FatCache4syncEv+0x20>
  return true;
   b782a:	2501      	movs	r5, #1
   b782c:	e7e8      	b.n	b7800 <_ZN8FatCache4syncEv+0x22>

000b782e <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b782e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7830:	6883      	ldr	r3, [r0, #8]
   b7832:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7834:	4604      	mov	r4, r0
   b7836:	460e      	mov	r6, r1
   b7838:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b783a:	d009      	beq.n	b7850 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b783c:	f7ff ffcf 	bl	b77de <_ZN8FatCache4syncEv>
   b7840:	b908      	cbnz	r0, b7846 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7842:	2000      	movs	r0, #0
}
   b7844:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7846:	076b      	lsls	r3, r5, #29
   b7848:	d50a      	bpl.n	b7860 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b784a:	2300      	movs	r3, #0
   b784c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b784e:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7850:	7822      	ldrb	r2, [r4, #0]
   b7852:	f005 0503 	and.w	r5, r5, #3
   b7856:	4620      	mov	r0, r4
   b7858:	4315      	orrs	r5, r2
   b785a:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b785e:	e7f1      	b.n	b7844 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7860:	6863      	ldr	r3, [r4, #4]
   b7862:	f104 020c 	add.w	r2, r4, #12
   b7866:	6818      	ldr	r0, [r3, #0]
   b7868:	4631      	mov	r1, r6
   b786a:	f000 fac3 	bl	b7df4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b786e:	2800      	cmp	r0, #0
   b7870:	d1eb      	bne.n	b784a <_ZN8FatCache4readEmh+0x1c>
   b7872:	e7e6      	b.n	b7842 <_ZN8FatCache4readEmh+0x14>

000b7874 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7874:	7983      	ldrb	r3, [r0, #6]
   b7876:	6940      	ldr	r0, [r0, #20]
   b7878:	3902      	subs	r1, #2
   b787a:	4099      	lsls	r1, r3
}
   b787c:	4408      	add	r0, r1
   b787e:	4770      	bx	lr

000b7880 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7880:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7882:	b570      	push	{r4, r5, r6, lr}
   b7884:	4605      	mov	r5, r0
   b7886:	460c      	mov	r4, r1
   b7888:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b788a:	d802      	bhi.n	b7892 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7890:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7892:	69c3      	ldr	r3, [r0, #28]
   b7894:	428b      	cmp	r3, r1
   b7896:	d3f9      	bcc.n	b788c <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7898:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b789a:	2b20      	cmp	r3, #32
   b789c:	d116      	bne.n	b78cc <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b789e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b78a0:	2202      	movs	r2, #2
   b78a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b78a6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b78aa:	f7ff ffc0 	bl	b782e <_ZN8FatCache4readEmh>
    if (!pc) {
   b78ae:	2800      	cmp	r0, #0
   b78b0:	d0ec      	beq.n	b788c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b78b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b78b6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b78ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b78be:	69ea      	ldr	r2, [r5, #28]
   b78c0:	429a      	cmp	r2, r3
  *value = next;
   b78c2:	bf26      	itte	cs
   b78c4:	6033      	strcs	r3, [r6, #0]
  return 1;
   b78c6:	2001      	movcs	r0, #1
    return 0;
   b78c8:	2000      	movcc	r0, #0
   b78ca:	e7e1      	b.n	b7890 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b78cc:	2b10      	cmp	r3, #16
   b78ce:	d1dd      	bne.n	b788c <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b78d0:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b78d4:	6981      	ldr	r1, [r0, #24]
   b78d6:	2202      	movs	r2, #2
   b78d8:	4419      	add	r1, r3
   b78da:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b78de:	f7ff ffa6 	bl	b782e <_ZN8FatCache4readEmh>
    if (!pc) {
   b78e2:	2800      	cmp	r0, #0
   b78e4:	d0d2      	beq.n	b788c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b78e6:	b2e4      	uxtb	r4, r4
   b78e8:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b78ec:	e7e7      	b.n	b78be <_ZN9FatVolume6fatGetEmPm+0x3e>

000b78ee <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b78ee:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b78f0:	b538      	push	{r3, r4, r5, lr}
   b78f2:	460c      	mov	r4, r1
   b78f4:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b78f6:	d801      	bhi.n	b78fc <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b78f8:	2000      	movs	r0, #0
}
   b78fa:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b78fc:	69c3      	ldr	r3, [r0, #28]
   b78fe:	428b      	cmp	r3, r1
   b7900:	d3fa      	bcc.n	b78f8 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7902:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7904:	2b20      	cmp	r3, #32
   b7906:	d10f      	bne.n	b7928 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7908:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b790a:	2203      	movs	r2, #3
   b790c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7910:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7914:	f7ff ff8b 	bl	b782e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7918:	2800      	cmp	r0, #0
   b791a:	d0ed      	beq.n	b78f8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b791c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7920:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7924:	2001      	movs	r0, #1
   b7926:	e7e8      	b.n	b78fa <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7928:	2b10      	cmp	r3, #16
   b792a:	d1e5      	bne.n	b78f8 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b792c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7930:	6981      	ldr	r1, [r0, #24]
   b7932:	2203      	movs	r2, #3
   b7934:	4419      	add	r1, r3
   b7936:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b793a:	f7ff ff78 	bl	b782e <_ZN8FatCache4readEmh>
    if (!pc) {
   b793e:	2800      	cmp	r0, #0
   b7940:	d0da      	beq.n	b78f8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7942:	b2e4      	uxtb	r4, r4
   b7944:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7948:	e7ec      	b.n	b7924 <_ZN9FatVolume6fatPutEmm+0x36>

000b794a <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b794a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b794e:	68c4      	ldr	r4, [r0, #12]
   b7950:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7952:	4605      	mov	r5, r0
   b7954:	460e      	mov	r6, r1
   b7956:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7958:	d301      	bcc.n	b795e <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b795a:	2701      	movs	r7, #1
   b795c:	e001      	b.n	b7962 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b795e:	460c      	mov	r4, r1
    setStart = false;
   b7960:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7962:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7964:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7966:	42a3      	cmp	r3, r4
   b7968:	d202      	bcs.n	b7970 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b796a:	b9c7      	cbnz	r7, b799e <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b796c:	68ec      	ldr	r4, [r5, #12]
   b796e:	e7f4      	b.n	b795a <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7970:	42a6      	cmp	r6, r4
   b7972:	d014      	beq.n	b799e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7974:	aa01      	add	r2, sp, #4
   b7976:	4621      	mov	r1, r4
   b7978:	4628      	mov	r0, r5
   b797a:	f7ff ff81 	bl	b7880 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b797e:	2800      	cmp	r0, #0
   b7980:	db0d      	blt.n	b799e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7982:	d0ee      	beq.n	b7962 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7984:	9b01      	ldr	r3, [sp, #4]
   b7986:	2b00      	cmp	r3, #0
   b7988:	d1eb      	bne.n	b7962 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b798a:	b107      	cbz	r7, b798e <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b798c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b798e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7992:	4621      	mov	r1, r4
   b7994:	4628      	mov	r0, r5
   b7996:	f7ff ffaa 	bl	b78ee <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b799a:	4607      	mov	r7, r0
   b799c:	b920      	cbnz	r0, b79a8 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b799e:	2700      	movs	r7, #0
}
   b79a0:	4638      	mov	r0, r7
   b79a2:	b002      	add	sp, #8
   b79a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b79a8:	b916      	cbnz	r6, b79b0 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b79aa:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b79ae:	e7f7      	b.n	b79a0 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b79b0:	4622      	mov	r2, r4
   b79b2:	4631      	mov	r1, r6
   b79b4:	4628      	mov	r0, r5
   b79b6:	f7ff ff9a 	bl	b78ee <_ZN9FatVolume6fatPutEmm>
   b79ba:	2800      	cmp	r0, #0
   b79bc:	d1f5      	bne.n	b79aa <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b79be:	e7ee      	b.n	b799e <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b79c0 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b79c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79c2:	4605      	mov	r5, r0
   b79c4:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b79c6:	aa01      	add	r2, sp, #4
   b79c8:	4621      	mov	r1, r4
   b79ca:	4628      	mov	r0, r5
   b79cc:	f7ff ff58 	bl	b7880 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b79d0:	1e06      	subs	r6, r0, #0
   b79d2:	db10      	blt.n	b79f6 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b79d4:	2200      	movs	r2, #0
   b79d6:	4621      	mov	r1, r4
   b79d8:	4628      	mov	r0, r5
   b79da:	f7ff ff88 	bl	b78ee <_ZN9FatVolume6fatPutEmm>
   b79de:	b150      	cbz	r0, b79f6 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b79e0:	68eb      	ldr	r3, [r5, #12]
   b79e2:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b79e4:	bf24      	itt	cs
   b79e6:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b79ea:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b79ec:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b79ee:	2e00      	cmp	r6, #0
   b79f0:	d1e9      	bne.n	b79c6 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b79f2:	b002      	add	sp, #8
   b79f4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b79f6:	2000      	movs	r0, #0
   b79f8:	e7fb      	b.n	b79f2 <_ZN9FatVolume9freeChainEm+0x32>

000b79fa <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b79fa:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b79fc:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b79fe:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7a00:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7a06:	4604      	mov	r4, r0
  m_fatType = 0;
   b7a08:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7a0a:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7a0e:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7a10:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7a14:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7a16:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7a1a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7a1e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7a22:	460d      	mov	r5, r1
   b7a24:	b1b9      	cbz	r1, b7a56 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7a26:	2904      	cmp	r1, #4
   b7a28:	d901      	bls.n	b7a2e <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7a2a:	2000      	movs	r0, #0
}
   b7a2c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7a2e:	4611      	mov	r1, r2
   b7a30:	4630      	mov	r0, r6
   b7a32:	f7ff fefc 	bl	b782e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7a36:	2800      	cmp	r0, #0
   b7a38:	d0f7      	beq.n	b7a2a <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7a3a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7a3e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7a42:	065b      	lsls	r3, r3, #25
   b7a44:	d1f1      	bne.n	b7a2a <_ZN9FatVolume4initEh+0x30>
   b7a46:	f105 011b 	add.w	r1, r5, #27
   b7a4a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7a4e:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7a52:	2d00      	cmp	r5, #0
   b7a54:	d0e9      	beq.n	b7a2a <_ZN9FatVolume4initEh+0x30>
   b7a56:	2200      	movs	r2, #0
   b7a58:	4629      	mov	r1, r5
   b7a5a:	4630      	mov	r0, r6
   b7a5c:	f7ff fee7 	bl	b782e <_ZN8FatCache4readEmh>
  if (!pc) {
   b7a60:	2800      	cmp	r0, #0
   b7a62:	d0e2      	beq.n	b7a2a <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7a64:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7a6c:	d1dd      	bne.n	b7a2a <_ZN9FatVolume4initEh+0x30>
   b7a6e:	7c03      	ldrb	r3, [r0, #16]
   b7a70:	2b02      	cmp	r3, #2
   b7a72:	d1da      	bne.n	b7a2a <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7a74:	89c3      	ldrh	r3, [r0, #14]
   b7a76:	2b00      	cmp	r3, #0
   b7a78:	d0d7      	beq.n	b7a2a <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7a7a:	7b41      	ldrb	r1, [r0, #13]
   b7a7c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7a7e:	1e4b      	subs	r3, r1, #1
   b7a80:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7a82:	2300      	movs	r3, #0
   b7a84:	71a3      	strb	r3, [r4, #6]
   b7a86:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7a88:	2301      	movs	r3, #1
   b7a8a:	4299      	cmp	r1, r3
   b7a8c:	d007      	beq.n	b7a9e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7a8e:	3e01      	subs	r6, #1
   b7a90:	d0cb      	beq.n	b7a2a <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7a92:	79a2      	ldrb	r2, [r4, #6]
   b7a94:	005b      	lsls	r3, r3, #1
   b7a96:	3201      	adds	r2, #1
   b7a98:	b2db      	uxtb	r3, r3
   b7a9a:	71a2      	strb	r2, [r4, #6]
   b7a9c:	e7f5      	b.n	b7a8a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7a9e:	8ac1      	ldrh	r1, [r0, #22]
   b7aa0:	b901      	cbnz	r1, b7aa4 <_ZN9FatVolume4initEh+0xaa>
   b7aa2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7aa4:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7aa6:	89c3      	ldrh	r3, [r0, #14]
   b7aa8:	442b      	add	r3, r5
   b7aaa:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7aac:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7ab0:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7ab2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7ab6:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7ab8:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7abc:	0149      	lsls	r1, r1, #5
   b7abe:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7ac2:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7ac6:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7ac8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7acc:	b902      	cbnz	r2, b7ad0 <_ZN9FatVolume4initEh+0xd6>
   b7ace:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7ad0:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7ad2:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7ad4:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7ad6:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7ad8:	1c4b      	adds	r3, r1, #1
   b7ada:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7adc:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7ae0:	4299      	cmp	r1, r3
   b7ae2:	d802      	bhi.n	b7aea <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7ae4:	230c      	movs	r3, #12
   b7ae6:	71e3      	strb	r3, [r4, #7]
   b7ae8:	e79f      	b.n	b7a2a <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7aea:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7aee:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7af0:	bf85      	ittet	hi
   b7af2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7af4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7af6:	2310      	movls	r3, #16
    m_fatType = 32;
   b7af8:	2320      	movhi	r3, #32
   b7afa:	71e3      	strb	r3, [r4, #7]
  return true;
   b7afc:	2001      	movs	r0, #1
   b7afe:	e795      	b.n	b7a2c <_ZN9FatVolume4initEh+0x32>

000b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7b00:	f000 baca 	b.w	b8098 <_ZN14SdSpiAltDriver4sendEh>

000b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7b04:	f000 baad 	b.w	b8062 <_ZN14SdSpiAltDriver7receiveEv>

000b7b08 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7b08:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7b0a:	4e0e      	ldr	r6, [pc, #56]	; (b7b44 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7b0c:	460d      	mov	r5, r1
   b7b0e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7b10:	f005 fff8 	bl	bdb04 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7b14:	6833      	ldr	r3, [r6, #0]
   b7b16:	1ac0      	subs	r0, r0, r3
   b7b18:	4b0b      	ldr	r3, [pc, #44]	; (b7b48 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7b1a:	4298      	cmp	r0, r3
   b7b1c:	d908      	bls.n	b7b30 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7b1e:	f005 fff9 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7b22:	4b0a      	ldr	r3, [pc, #40]	; (b7b4c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7b24:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7b26:	f006 fa43 	bl	bdfb0 <spark_process>
   b7b2a:	f005 ffeb 	bl	bdb04 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7b2e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7b30:	f005 fff0 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7b34:	b280      	uxth	r0, r0
   b7b36:	1b40      	subs	r0, r0, r5
}
   b7b38:	42a0      	cmp	r0, r4
   b7b3a:	bfd4      	ite	le
   b7b3c:	2000      	movle	r0, #0
   b7b3e:	2001      	movgt	r0, #1
   b7b40:	bd70      	pop	{r4, r5, r6, pc}
   b7b42:	bf00      	nop
   b7b44:	2003e614 	.word	0x2003e614
   b7b48:	000186a0 	.word	0x000186a0
   b7b4c:	2003e728 	.word	0x2003e728

000b7b50 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7b50:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7b52:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7b54:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7b56:	b94d      	cbnz	r5, b7b6c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7b58:	6840      	ldr	r0, [r0, #4]
   b7b5a:	f000 fa6b 	bl	b8034 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7b5e:	6863      	ldr	r3, [r4, #4]
   b7b60:	4629      	mov	r1, r5
   b7b62:	7d18      	ldrb	r0, [r3, #20]
   b7b64:	f00a f959 	bl	c1e1a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7b68:	2301      	movs	r3, #1
   b7b6a:	7223      	strb	r3, [r4, #8]
  }
}
   b7b6c:	bd38      	pop	{r3, r4, r5, pc}

000b7b6e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7b6e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7b70:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7b72:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7b74:	b16b      	cbz	r3, b7b92 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7b76:	6843      	ldr	r3, [r0, #4]
   b7b78:	2101      	movs	r1, #1
   b7b7a:	7d18      	ldrb	r0, [r3, #20]
   b7b7c:	f00a f94d 	bl	c1e1a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7b80:	6860      	ldr	r0, [r4, #4]
   b7b82:	21ff      	movs	r1, #255	; 0xff
   b7b84:	f7ff ffbc 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7b88:	6860      	ldr	r0, [r4, #4]
   b7b8a:	f000 fa67 	bl	b805c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7b8e:	2300      	movs	r3, #0
   b7b90:	7223      	strb	r3, [r4, #8]
  }
}
   b7b92:	bd10      	pop	{r4, pc}

000b7b94 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b96:	4604      	mov	r4, r0
   b7b98:	460d      	mov	r5, r1
   b7b9a:	4616      	mov	r6, r2
   b7b9c:	f005 ffba 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7ba0:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7ba2:	6860      	ldr	r0, [r4, #4]
   b7ba4:	f7ff ffae 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ba8:	28ff      	cmp	r0, #255	; 0xff
   b7baa:	7260      	strb	r0, [r4, #9]
   b7bac:	d10e      	bne.n	b7bcc <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7bb2:	4639      	mov	r1, r7
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	f7ff ffa7 	bl	b7b08 <_ZN9SdSpiCard10isTimedOutEtt>
   b7bba:	2800      	cmp	r0, #0
   b7bbc:	d0f1      	beq.n	b7ba2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7bbe:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	7023      	strb	r3, [r4, #0]
   b7bc4:	f7ff ffd3 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bc8:	2000      	movs	r0, #0
}
   b7bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7bcc:	28fe      	cmp	r0, #254	; 0xfe
   b7bce:	d001      	beq.n	b7bd4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7bd0:	2350      	movs	r3, #80	; 0x50
   b7bd2:	e7f5      	b.n	b7bc0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7bd4:	6860      	ldr	r0, [r4, #4]
   b7bd6:	4632      	mov	r2, r6
   b7bd8:	4629      	mov	r1, r5
   b7bda:	f000 fa47 	bl	b806c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7bde:	7260      	strb	r0, [r4, #9]
   b7be0:	b108      	cbz	r0, b7be6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7be2:	2360      	movs	r3, #96	; 0x60
   b7be4:	e7ec      	b.n	b7bc0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7be6:	6860      	ldr	r0, [r4, #4]
   b7be8:	f7ff ff8c 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7bec:	6860      	ldr	r0, [r4, #4]
   b7bee:	f7ff ff89 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7bf2:	2001      	movs	r0, #1
   b7bf4:	e7e9      	b.n	b7bca <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7bf6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7bf6:	b570      	push	{r4, r5, r6, lr}
   b7bf8:	4604      	mov	r4, r0
   b7bfa:	460e      	mov	r6, r1
   b7bfc:	f005 ff8a 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   b7c00:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7c02:	4632      	mov	r2, r6
   b7c04:	4629      	mov	r1, r5
   b7c06:	4620      	mov	r0, r4
   b7c08:	f7ff ff7e 	bl	b7b08 <_ZN9SdSpiCard10isTimedOutEtt>
   b7c0c:	b930      	cbnz	r0, b7c1c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7c0e:	6860      	ldr	r0, [r4, #4]
   b7c10:	f7ff ff78 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c14:	28ff      	cmp	r0, #255	; 0xff
   b7c16:	d1f4      	bne.n	b7c02 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7c18:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7c1a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7c1c:	2000      	movs	r0, #0
   b7c1e:	e7fc      	b.n	b7c1a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7c20 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7c22:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7c24:	9201      	str	r2, [sp, #4]
   b7c26:	4604      	mov	r4, r0
   b7c28:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7c2a:	b90b      	cbnz	r3, b7c30 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7c2c:	f7ff ff90 	bl	b7b50 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7c30:	b125      	cbz	r5, b7c3c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7c32:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7c36:	4620      	mov	r0, r4
   b7c38:	f7ff ffdd 	bl	b7bf6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7c3c:	6860      	ldr	r0, [r4, #4]
   b7c3e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7c42:	f7ff ff5d 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7c46:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7c48:	af01      	add	r7, sp, #4
   b7c4a:	5db9      	ldrb	r1, [r7, r6]
   b7c4c:	6860      	ldr	r0, [r4, #4]
   b7c4e:	f7ff ff57 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7c52:	3e01      	subs	r6, #1
   b7c54:	d2f9      	bcs.n	b7c4a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7c56:	2d00      	cmp	r5, #0
   b7c58:	6860      	ldr	r0, [r4, #4]
   b7c5a:	bf0c      	ite	eq
   b7c5c:	2195      	moveq	r1, #149	; 0x95
   b7c5e:	2187      	movne	r1, #135	; 0x87
   b7c60:	f7ff ff4e 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7c64:	6860      	ldr	r0, [r4, #4]
   b7c66:	f7ff ff4d 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c6a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7c6c:	6860      	ldr	r0, [r4, #4]
   b7c6e:	f7ff ff49 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c72:	0603      	lsls	r3, r0, #24
   b7c74:	7260      	strb	r0, [r4, #9]
   b7c76:	d503      	bpl.n	b7c80 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7c78:	3d01      	subs	r5, #1
   b7c7a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7c7e:	d1f5      	bne.n	b7c6c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7c80:	b003      	add	sp, #12
   b7c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c84 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7c84:	b570      	push	{r4, r5, r6, lr}
   b7c86:	4604      	mov	r4, r0
   b7c88:	460d      	mov	r5, r1
   b7c8a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7c8c:	2137      	movs	r1, #55	; 0x37
   b7c8e:	2200      	movs	r2, #0
   b7c90:	f7ff ffc6 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7c94:	4632      	mov	r2, r6
   b7c96:	4629      	mov	r1, r5
   b7c98:	4620      	mov	r0, r4
  }
   b7c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7c9e:	f7ff bfbf 	b.w	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7ca4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7ca8:	2500      	movs	r5, #0
   b7caa:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7cac:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7cae:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7cb0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7cb2:	4604      	mov	r4, r0
   b7cb4:	4690      	mov	r8, r2
   b7cb6:	461e      	mov	r6, r3
   b7cb8:	f005 ff2c 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7cbc:	4641      	mov	r1, r8
   b7cbe:	4607      	mov	r7, r0
   b7cc0:	6860      	ldr	r0, [r4, #4]
   b7cc2:	f000 f9bb 	bl	b803c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7cc6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7cc8:	4a49      	ldr	r2, [pc, #292]	; (b7df0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7cca:	721d      	strb	r5, [r3, #8]
   b7ccc:	2501      	movs	r5, #1
   b7cce:	60da      	str	r2, [r3, #12]
   b7cd0:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7cd2:	4620      	mov	r0, r4
   b7cd4:	f7ff ff3c 	bl	b7b50 <_ZN9SdSpiCard8spiStartEv>
   b7cd8:	6863      	ldr	r3, [r4, #4]
   b7cda:	4629      	mov	r1, r5
   b7cdc:	7d18      	ldrb	r0, [r3, #20]
   b7cde:	f00a f89c 	bl	c1e1a <digitalWrite>
   b7ce2:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7ce4:	6860      	ldr	r0, [r4, #4]
   b7ce6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7ce8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7cea:	f7ff ff09 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7cee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7cf2:	d1f7      	bne.n	b7ce4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7cf4:	6863      	ldr	r3, [r4, #4]
   b7cf6:	4629      	mov	r1, r5
   b7cf8:	7d18      	ldrb	r0, [r3, #20]
   b7cfa:	f00a f88e 	bl	c1e1a <digitalWrite>
  }
   b7cfe:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7d00:	2200      	movs	r2, #0
   b7d02:	4611      	mov	r1, r2
   b7d04:	4620      	mov	r0, r4
   b7d06:	f7ff ff8b 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7d0a:	2801      	cmp	r0, #1
   b7d0c:	4680      	mov	r8, r0
   b7d0e:	d018      	beq.n	b7d42 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7d10:	3d01      	subs	r5, #1
   b7d12:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7d16:	d107      	bne.n	b7d28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7d18:	2320      	movs	r3, #32
  spiStop();
   b7d1a:	4620      	mov	r0, r4
   b7d1c:	7023      	strb	r3, [r4, #0]
   b7d1e:	f7ff ff26 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d22:	2000      	movs	r0, #0
}
   b7d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7d28:	6860      	ldr	r0, [r4, #4]
   b7d2a:	21fd      	movs	r1, #253	; 0xfd
   b7d2c:	f7ff fee8 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7d30:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7d34:	6860      	ldr	r0, [r4, #4]
   b7d36:	f7ff fee5 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7d3a:	f1b8 0801 	subs.w	r8, r8, #1
   b7d3e:	d1f9      	bne.n	b7d34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7d40:	e7de      	b.n	b7d00 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7d42:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7d46:	2108      	movs	r1, #8
   b7d48:	4620      	mov	r0, r4
   b7d4a:	f7ff ff69 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7d4e:	2805      	cmp	r0, #5
   b7d50:	d114      	bne.n	b7d7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7d52:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7d56:	2500      	movs	r5, #0
   b7d58:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7d5a:	462a      	mov	r2, r5
   b7d5c:	2129      	movs	r1, #41	; 0x29
   b7d5e:	4620      	mov	r0, r4
   b7d60:	f7ff ff90 	bl	b7c84 <_ZN9SdSpiCard8cardAcmdEhm>
   b7d64:	4602      	mov	r2, r0
   b7d66:	b1d8      	cbz	r0, b7da0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7d68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7d6c:	4639      	mov	r1, r7
   b7d6e:	4620      	mov	r0, r4
   b7d70:	f7ff feca 	bl	b7b08 <_ZN9SdSpiCard10isTimedOutEtt>
   b7d74:	2800      	cmp	r0, #0
   b7d76:	d0f0      	beq.n	b7d5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7d78:	2343      	movs	r3, #67	; 0x43
   b7d7a:	e7ce      	b.n	b7d1a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7d7c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7d7e:	6860      	ldr	r0, [r4, #4]
   b7d80:	f7ff fec0 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7d84:	3d01      	subs	r5, #1
   b7d86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7d8a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7d8c:	d1f7      	bne.n	b7d7e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7d8e:	28aa      	cmp	r0, #170	; 0xaa
   b7d90:	d104      	bne.n	b7d9c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7d92:	2302      	movs	r3, #2
   b7d94:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7d96:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7d9a:	e7dd      	b.n	b7d58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7d9c:	2325      	movs	r3, #37	; 0x25
   b7d9e:	e7bc      	b.n	b7d1a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7da0:	7aa3      	ldrb	r3, [r4, #10]
   b7da2:	2b02      	cmp	r3, #2
   b7da4:	d118      	bne.n	b7dd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7da6:	213a      	movs	r1, #58	; 0x3a
   b7da8:	4620      	mov	r0, r4
   b7daa:	f7ff ff39 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7dae:	b108      	cbz	r0, b7db4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7db0:	2337      	movs	r3, #55	; 0x37
   b7db2:	e7b2      	b.n	b7d1a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7db4:	6860      	ldr	r0, [r4, #4]
   b7db6:	f7ff fea5 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7dba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7dbe:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7dc0:	bf04      	itt	eq
   b7dc2:	2303      	moveq	r3, #3
   b7dc4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7dc6:	6860      	ldr	r0, [r4, #4]
   b7dc8:	f7ff fe9c 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7dcc:	6860      	ldr	r0, [r4, #4]
   b7dce:	f7ff fe99 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7dd2:	6860      	ldr	r0, [r4, #4]
   b7dd4:	f7ff fe96 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7dd8:	4620      	mov	r0, r4
   b7dda:	f7ff fec8 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7dde:	6863      	ldr	r3, [r4, #4]
   b7de0:	7930      	ldrb	r0, [r6, #4]
   b7de2:	68b1      	ldr	r1, [r6, #8]
   b7de4:	89b2      	ldrh	r2, [r6, #12]
   b7de6:	821a      	strh	r2, [r3, #16]
   b7de8:	7218      	strb	r0, [r3, #8]
   b7dea:	60d9      	str	r1, [r3, #12]
  return true;
   b7dec:	2001      	movs	r0, #1
   b7dee:	e799      	b.n	b7d24 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7df0:	0003d090 	.word	0x0003d090

000b7df4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7df4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7df6:	7a83      	ldrb	r3, [r0, #10]
   b7df8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7dfa:	bf18      	it	ne
   b7dfc:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7dfe:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7e00:	460a      	mov	r2, r1
   b7e02:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7e04:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7e06:	f7ff ff0b 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7e0a:	b130      	cbz	r0, b7e1a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7e0c:	2330      	movs	r3, #48	; 0x30
   b7e0e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7e10:	4620      	mov	r0, r4
   b7e12:	f7ff feac 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e16:	2500      	movs	r5, #0
   b7e18:	e00b      	b.n	b7e32 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7e1a:	4629      	mov	r1, r5
   b7e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7e20:	4620      	mov	r0, r4
   b7e22:	f7ff feb7 	bl	b7b94 <_ZN9SdSpiCard8readDataEPhj>
   b7e26:	4605      	mov	r5, r0
   b7e28:	2800      	cmp	r0, #0
   b7e2a:	d0f1      	beq.n	b7e10 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	f7ff fe9e 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
}
   b7e32:	4628      	mov	r0, r5
   b7e34:	bd38      	pop	{r3, r4, r5, pc}

000b7e36 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7e36:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7e38:	7a83      	ldrb	r3, [r0, #10]
   b7e3a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7e3c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7e3e:	bf18      	it	ne
   b7e40:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7e42:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7e44:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7e46:	f7ff feeb 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7e4a:	b130      	cbz	r0, b7e5a <_ZN9SdSpiCard9readStartEm+0x24>
   b7e4c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7e4e:	4620      	mov	r0, r4
   b7e50:	7023      	strb	r3, [r4, #0]
   b7e52:	f7ff fe8c 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e56:	2000      	movs	r0, #0
}
   b7e58:	bd10      	pop	{r4, pc}
  return true;
   b7e5a:	2001      	movs	r0, #1
   b7e5c:	e7fc      	b.n	b7e58 <_ZN9SdSpiCard9readStartEm+0x22>

000b7e5e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7e5e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7e60:	2200      	movs	r2, #0
   b7e62:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7e64:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7e66:	f7ff fedb 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7e6a:	b130      	cbz	r0, b7e7a <_ZN9SdSpiCard8readStopEv+0x1c>
   b7e6c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7e6e:	4620      	mov	r0, r4
   b7e70:	7023      	strb	r3, [r4, #0]
   b7e72:	f7ff fe7c 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e76:	2000      	movs	r0, #0
}
   b7e78:	bd10      	pop	{r4, pc}
  spiStop();
   b7e7a:	4620      	mov	r0, r4
   b7e7c:	f7ff fe77 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7e80:	2001      	movs	r0, #1
   b7e82:	e7f9      	b.n	b7e78 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7e84 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e86:	4604      	mov	r4, r0
   b7e88:	4616      	mov	r6, r2
   b7e8a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7e8c:	f7ff ffd3 	bl	b7e36 <_ZN9SdSpiCard9readStartEm>
   b7e90:	b168      	cbz	r0, b7eae <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7e92:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7e94:	b2ab      	uxth	r3, r5
   b7e96:	429f      	cmp	r7, r3
   b7e98:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7e9c:	d909      	bls.n	b7eb2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7ea2:	4620      	mov	r0, r4
   b7ea4:	f7ff fe76 	bl	b7b94 <_ZN9SdSpiCard8readDataEPhj>
   b7ea8:	3501      	adds	r5, #1
   b7eaa:	2800      	cmp	r0, #0
   b7eac:	d1f2      	bne.n	b7e94 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7eae:	2000      	movs	r0, #0
   b7eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7eb2:	4620      	mov	r0, r4
}
   b7eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7eb8:	f7ff bfd1 	b.w	b7e5e <_ZN9SdSpiCard8readStopEv>

000b7ebc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7ebc:	b538      	push	{r3, r4, r5, lr}
   b7ebe:	4604      	mov	r4, r0
   b7ec0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7ec2:	6840      	ldr	r0, [r0, #4]
   b7ec4:	f7ff fe1c 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7ecc:	6860      	ldr	r0, [r4, #4]
   b7ece:	4629      	mov	r1, r5
   b7ed0:	f000 f8e6 	bl	b80a0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7ed4:	6860      	ldr	r0, [r4, #4]
   b7ed6:	21ff      	movs	r1, #255	; 0xff
   b7ed8:	f7ff fe12 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7edc:	6860      	ldr	r0, [r4, #4]
   b7ede:	21ff      	movs	r1, #255	; 0xff
   b7ee0:	f7ff fe0e 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7ee4:	6860      	ldr	r0, [r4, #4]
   b7ee6:	f7ff fe0d 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7eea:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7eec:	f000 001f 	and.w	r0, r0, #31
   b7ef0:	2805      	cmp	r0, #5
   b7ef2:	d006      	beq.n	b7f02 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7ef4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7ef6:	4620      	mov	r0, r4
   b7ef8:	7023      	strb	r3, [r4, #0]
   b7efa:	f7ff fe38 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7efe:	2000      	movs	r0, #0
}
   b7f00:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7f02:	2001      	movs	r0, #1
   b7f04:	e7fc      	b.n	b7f00 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7f06 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7f06:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7f08:	7a83      	ldrb	r3, [r0, #10]
   b7f0a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7f0c:	bf18      	it	ne
   b7f0e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7f10:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7f12:	460a      	mov	r2, r1
   b7f14:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7f16:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7f18:	f7ff fe82 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7f1c:	4606      	mov	r6, r0
   b7f1e:	b130      	cbz	r0, b7f2e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7f20:	2332      	movs	r3, #50	; 0x32
   b7f22:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7f24:	4620      	mov	r0, r4
   b7f26:	f7ff fe22 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f2a:	2500      	movs	r5, #0
   b7f2c:	e01f      	b.n	b7f6e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7f2e:	462a      	mov	r2, r5
   b7f30:	21fe      	movs	r1, #254	; 0xfe
   b7f32:	4620      	mov	r0, r4
   b7f34:	f7ff ffc2 	bl	b7ebc <_ZN9SdSpiCard9writeDataEhPKh>
   b7f38:	2800      	cmp	r0, #0
   b7f3a:	d0f3      	beq.n	b7f24 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7f3c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7f40:	4620      	mov	r0, r4
   b7f42:	f7ff fe58 	bl	b7bf6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7f46:	4605      	mov	r5, r0
   b7f48:	b908      	cbnz	r0, b7f4e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7f4a:	235a      	movs	r3, #90	; 0x5a
   b7f4c:	e7e9      	b.n	b7f22 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7f4e:	4632      	mov	r2, r6
   b7f50:	210d      	movs	r1, #13
   b7f52:	4620      	mov	r0, r4
   b7f54:	f7ff fe64 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7f58:	b108      	cbz	r0, b7f5e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7f5a:	2329      	movs	r3, #41	; 0x29
   b7f5c:	e7e1      	b.n	b7f22 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7f5e:	6860      	ldr	r0, [r4, #4]
   b7f60:	f7ff fdd0 	bl	b7b04 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f64:	2800      	cmp	r0, #0
   b7f66:	d1f8      	bne.n	b7f5a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7f68:	4620      	mov	r0, r4
   b7f6a:	f7ff fe00 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
}
   b7f6e:	4628      	mov	r0, r5
   b7f70:	bd70      	pop	{r4, r5, r6, pc}

000b7f72 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7f72:	b513      	push	{r0, r1, r4, lr}
   b7f74:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7f76:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7f7a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7f7c:	f7ff fe3b 	bl	b7bf6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7f80:	9a01      	ldr	r2, [sp, #4]
   b7f82:	b930      	cbnz	r0, b7f92 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7f84:	235b      	movs	r3, #91	; 0x5b
   b7f86:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7f88:	4620      	mov	r0, r4
   b7f8a:	f7ff fdf0 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f8e:	2000      	movs	r0, #0
   b7f90:	e005      	b.n	b7f9e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7f92:	21fc      	movs	r1, #252	; 0xfc
   b7f94:	4620      	mov	r0, r4
   b7f96:	f7ff ff91 	bl	b7ebc <_ZN9SdSpiCard9writeDataEhPKh>
   b7f9a:	2800      	cmp	r0, #0
   b7f9c:	d0f4      	beq.n	b7f88 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7f9e:	b002      	add	sp, #8
   b7fa0:	bd10      	pop	{r4, pc}

000b7fa2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7fa2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7fa4:	7a83      	ldrb	r3, [r0, #10]
   b7fa6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7fa8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7faa:	bf18      	it	ne
   b7fac:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7fae:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7fb0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7fb2:	f7ff fe35 	bl	b7c20 <_ZN9SdSpiCard11cardCommandEhm>
   b7fb6:	b130      	cbz	r0, b7fc6 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7fb8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7fba:	4620      	mov	r0, r4
   b7fbc:	7023      	strb	r3, [r4, #0]
   b7fbe:	f7ff fdd6 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7fc2:	2000      	movs	r0, #0
}
   b7fc4:	bd10      	pop	{r4, pc}
  return true;
   b7fc6:	2001      	movs	r0, #1
   b7fc8:	e7fc      	b.n	b7fc4 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7fca <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7fca:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7fcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7fd0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7fd2:	f7ff fe10 	bl	b7bf6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7fd6:	4605      	mov	r5, r0
   b7fd8:	b930      	cbnz	r0, b7fe8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7fda:	2356      	movs	r3, #86	; 0x56
   b7fdc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7fde:	4620      	mov	r0, r4
   b7fe0:	f7ff fdc5 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7fe4:	4628      	mov	r0, r5
   b7fe6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7fe8:	6860      	ldr	r0, [r4, #4]
   b7fea:	21fd      	movs	r1, #253	; 0xfd
   b7fec:	f7ff fd88 	bl	b7b00 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7ff0:	e7f5      	b.n	b7fde <_ZN9SdSpiCard9writeStopEv+0x14>

000b7ff2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ff4:	4604      	mov	r4, r0
   b7ff6:	4616      	mov	r6, r2
   b7ff8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7ffa:	f7ff ffd2 	bl	b7fa2 <_ZN9SdSpiCard10writeStartEm>
   b7ffe:	b170      	cbz	r0, b801e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8000:	2500      	movs	r5, #0
   b8002:	42bd      	cmp	r5, r7
   b8004:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8008:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b800a:	d004      	beq.n	b8016 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b800c:	f7ff ffb1 	bl	b7f72 <_ZN9SdSpiCard9writeDataEPKh>
   b8010:	b128      	cbz	r0, b801e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8012:	3501      	adds	r5, #1
   b8014:	e7f5      	b.n	b8002 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b8016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b801a:	f7ff bfd6 	b.w	b7fca <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff fda5 	bl	b7b6e <_ZN9SdSpiCard7spiStopEv>
}
   b8024:	2000      	movs	r0, #0
   b8026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8028 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b8028:	4b01      	ldr	r3, [pc, #4]	; (b8030 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b802a:	2201      	movs	r2, #1
   b802c:	701a      	strb	r2, [r3, #0]
}
   b802e:	4770      	bx	lr
   b8030:	2003e618 	.word	0x2003e618

000b8034 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8034:	1d01      	adds	r1, r0, #4
   b8036:	6800      	ldr	r0, [r0, #0]
   b8038:	f009 ba4c 	b.w	c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b803c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b803c:	b510      	push	{r4, lr}
   b803e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8040:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8042:	6800      	ldr	r0, [r0, #0]
   b8044:	f009 fa01 	bl	c144a <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b8048:	7d20      	ldrb	r0, [r4, #20]
   b804a:	2101      	movs	r1, #1
   b804c:	f009 fed4 	bl	c1df8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8050:	7d20      	ldrb	r0, [r4, #20]
   b8052:	2101      	movs	r1, #1
}
   b8054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b8058:	f009 bedf 	b.w	c1e1a <digitalWrite>

000b805c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b805c:	6800      	ldr	r0, [r0, #0]
   b805e:	f009 ba1f 	b.w	c14a0 <_ZN8SPIClass14endTransactionEv>

000b8062 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8062:	6800      	ldr	r0, [r0, #0]
   b8064:	21ff      	movs	r1, #255	; 0xff
   b8066:	f009 bad5 	b.w	c1614 <_ZN8SPIClass8transferEh>
	...

000b806c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b806c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b806e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8070:	4a07      	ldr	r2, [pc, #28]	; (b8090 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8072:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8074:	2500      	movs	r5, #0
   b8076:	4c07      	ldr	r4, [pc, #28]	; (b8094 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8078:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b807a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b807c:	460a      	mov	r2, r1
   b807e:	4629      	mov	r1, r5
   b8080:	f009 face 	bl	c1620 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8084:	7823      	ldrb	r3, [r4, #0]
   b8086:	2b00      	cmp	r3, #0
   b8088:	d0fc      	beq.n	b8084 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b808a:	2000      	movs	r0, #0
   b808c:	b003      	add	sp, #12
   b808e:	bd30      	pop	{r4, r5, pc}
   b8090:	000b8029 	.word	0x000b8029
   b8094:	2003e618 	.word	0x2003e618

000b8098 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b8098:	6800      	ldr	r0, [r0, #0]
   b809a:	f009 babb 	b.w	c1614 <_ZN8SPIClass8transferEh>
	...

000b80a0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b80a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80a2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b80a4:	4a06      	ldr	r2, [pc, #24]	; (b80c0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b80a6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b80a8:	2500      	movs	r5, #0
   b80aa:	4c06      	ldr	r4, [pc, #24]	; (b80c4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b80ac:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b80ae:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b80b0:	462a      	mov	r2, r5
   b80b2:	f009 fab5 	bl	c1620 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b80b6:	7823      	ldrb	r3, [r4, #0]
   b80b8:	2b00      	cmp	r3, #0
   b80ba:	d0fc      	beq.n	b80b6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b80bc:	b003      	add	sp, #12
   b80be:	bd30      	pop	{r4, r5, pc}
   b80c0:	000b8029 	.word	0x000b8029
   b80c4:	2003e618 	.word	0x2003e618

000b80c8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b80c8:	4770      	bx	lr

000b80ca <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b80ca:	4770      	bx	lr

000b80cc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b80cc:	b538      	push	{r3, r4, r5, lr}
   b80ce:	460c      	mov	r4, r1
   b80d0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b80d2:	2220      	movs	r2, #32
   b80d4:	2100      	movs	r1, #0
   b80d6:	f104 0008 	add.w	r0, r4, #8
   b80da:	f00c f975 	bl	c43c8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b80de:	4909      	ldr	r1, [pc, #36]	; (b8104 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b80e0:	220b      	movs	r2, #11
   b80e2:	4620      	mov	r0, r4
   b80e4:	f00c fa2a 	bl	c453c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b80e8:	2301      	movs	r3, #1
   b80ea:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b80ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b80ee:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b80f0:	2302      	movs	r3, #2
   b80f2:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b80f4:	4b04      	ldr	r3, [pc, #16]	; (b8108 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b80f6:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b80f8:	4b04      	ldr	r3, [pc, #16]	; (b810c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b80fa:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b80fc:	4b04      	ldr	r3, [pc, #16]	; (b8110 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b80fe:	6223      	str	r3, [r4, #32]
}
   b8100:	bd38      	pop	{r3, r4, r5, pc}
   b8102:	bf00      	nop
   b8104:	000c6ce8 	.word	0x000c6ce8
   b8108:	c4c80000 	.word	0xc4c80000
   b810c:	44c80000 	.word	0x44c80000
   b8110:	3c75c28f 	.word	0x3c75c28f

000b8114 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b8114:	b510      	push	{r4, lr}
   b8116:	2128      	movs	r1, #40	; 0x28
   b8118:	4604      	mov	r4, r0
   b811a:	f7fb ffc2 	bl	b40a2 <_ZdlPvj>
   b811e:	4620      	mov	r0, r4
   b8120:	bd10      	pop	{r4, pc}
	...

000b8124 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b8124:	4a03      	ldr	r2, [pc, #12]	; (b8134 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b8126:	6002      	str	r2, [r0, #0]
   b8128:	2200      	movs	r2, #0
   b812a:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b812e:	7602      	strb	r2, [r0, #24]
   b8130:	4770      	bx	lr
   b8132:	bf00      	nop
   b8134:	000c6d08 	.word	0x000c6d08

000b8138 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b8138:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b813a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b813c:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b813e:	2200      	movs	r2, #0
   b8140:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8144:	2506      	movs	r5, #6
   b8146:	2228      	movs	r2, #40	; 0x28
   b8148:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b814c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b814e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8152:	a806      	add	r0, sp, #24
   b8154:	f005 f91a 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b8158:	462a      	mov	r2, r5
   b815a:	a904      	add	r1, sp, #16
   b815c:	a806      	add	r0, sp, #24
   b815e:	f005 f993 	bl	bd488 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b8162:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b8164:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b8168:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b816c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b8170:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b8172:	2d03      	cmp	r5, #3
   b8174:	bf98      	it	ls
   b8176:	4812      	ldrls	r0, [pc, #72]	; (b81c0 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b8178:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b817a:	ee07 1a10 	vmov	s14, r1
   b817e:	bf9c      	itt	ls
   b8180:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b8184:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b8188:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b818a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b818e:	bf88      	it	hi
   b8190:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b8194:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b8198:	ee07 2a10 	vmov	s14, r2
   b819c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b81a0:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b81a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b81a8:	ee07 3a10 	vmov	s14, r3
   b81ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b81b0:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b81b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b81b8:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b81bc:	b00d      	add	sp, #52	; 0x34
   b81be:	bd30      	pop	{r4, r5, pc}
   b81c0:	000c6cf0 	.word	0x000c6cf0

000b81c4 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b81c4:	b538      	push	{r3, r4, r5, lr}
   b81c6:	460c      	mov	r4, r1
   b81c8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b81ca:	2220      	movs	r2, #32
   b81cc:	2100      	movs	r1, #0
   b81ce:	1d20      	adds	r0, r4, #4
   b81d0:	f00c f8fa 	bl	c43c8 <memset>
  event->version = sizeof(sensors_event_t);
   b81d4:	2324      	movs	r3, #36	; 0x24
   b81d6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b81d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b81da:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b81dc:	2302      	movs	r3, #2
   b81de:	60a3      	str	r3, [r4, #8]
   b81e0:	f005 fc98 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b81e4:	6120      	str	r0, [r4, #16]
  read();
   b81e6:	4628      	mov	r0, r5
   b81e8:	f7ff ffa6 	bl	b8138 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b81ec:	edd5 7a03 	vldr	s15, [r5, #12]
   b81f0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b8218 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b81f4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b81f8:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b81fa:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b81fe:	edd5 7a04 	vldr	s15, [r5, #16]
   b8202:	ee67 7a87 	vmul.f32	s15, s15, s14
   b8206:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b820a:	edd5 7a05 	vldr	s15, [r5, #20]
   b820e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b8212:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b8216:	bd38      	pop	{r3, r4, r5, pc}
   b8218:	42c80000 	.word	0x42c80000

000b821c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b821c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b821e:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b8220:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8222:	2700      	movs	r7, #0
   b8224:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b8228:	2320      	movs	r3, #32
   b822a:	9300      	str	r3, [sp, #0]
   b822c:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b822e:	460e      	mov	r6, r1
   b8230:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8232:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8236:	462b      	mov	r3, r5
   b8238:	a808      	add	r0, sp, #32
   b823a:	f005 f8a7 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b823e:	2305      	movs	r3, #5
   b8240:	2202      	movs	r2, #2
   b8242:	a908      	add	r1, sp, #32
   b8244:	a804      	add	r0, sp, #16
   b8246:	f005 f97d 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b824a:	4631      	mov	r1, r6
   b824c:	a804      	add	r0, sp, #16
   b824e:	f005 f98b 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b8252:	2323      	movs	r3, #35	; 0x23
   b8254:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b8258:	9300      	str	r3, [sp, #0]
   b825a:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b825e:	462b      	mov	r3, r5
   b8260:	9501      	str	r5, [sp, #4]
   b8262:	a80e      	add	r0, sp, #56	; 0x38
   b8264:	f005 f892 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b8268:	2302      	movs	r3, #2
   b826a:	461a      	mov	r2, r3
   b826c:	a90e      	add	r1, sp, #56	; 0x38
   b826e:	a806      	add	r0, sp, #24
   b8270:	f005 f968 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b8274:	4631      	mov	r1, r6
   b8276:	a806      	add	r0, sp, #24
   b8278:	f005 f976 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b827c:	b015      	add	sp, #84	; 0x54
   b827e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8280 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8280:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b8282:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8284:	b08c      	sub	sp, #48	; 0x30
   b8286:	4606      	mov	r6, r0
   b8288:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b828a:	d103      	bne.n	b8294 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b828c:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b828e:	f7ff ffc5 	bl	b821c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b8292:	e009      	b.n	b82a8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b8294:	2903      	cmp	r1, #3
   b8296:	d003      	beq.n	b82a0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b8298:	2905      	cmp	r1, #5
   b829a:	d103      	bne.n	b82a4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b829c:	2101      	movs	r1, #1
   b829e:	e7f6      	b.n	b828e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b82a0:	2102      	movs	r1, #2
   b82a2:	e7f4      	b.n	b828e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b82a4:	2907      	cmp	r1, #7
   b82a6:	d01b      	beq.n	b82e0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b82a8:	200a      	movs	r0, #10
   b82aa:	f005 ff85 	bl	be1b8 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b82ae:	2501      	movs	r5, #1
   b82b0:	2300      	movs	r3, #0
   b82b2:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b82b6:	2320      	movs	r3, #32
   b82b8:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b82bc:	9300      	str	r3, [sp, #0]
   b82be:	9501      	str	r5, [sp, #4]
   b82c0:	462b      	mov	r3, r5
   b82c2:	a806      	add	r0, sp, #24
   b82c4:	f005 f862 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b82c8:	462b      	mov	r3, r5
   b82ca:	2204      	movs	r2, #4
   b82cc:	a906      	add	r1, sp, #24
   b82ce:	a804      	add	r0, sp, #16
   b82d0:	f005 f938 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b82d4:	4621      	mov	r1, r4
   b82d6:	a804      	add	r0, sp, #16
   b82d8:	f005 f946 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b82dc:	b00c      	add	sp, #48	; 0x30
   b82de:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b82e0:	2100      	movs	r1, #0
   b82e2:	e7d4      	b.n	b828e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b82e4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b82e4:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b82e6:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b82e8:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b82ea:	2500      	movs	r5, #0
   b82ec:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b82f0:	2222      	movs	r2, #34	; 0x22
   b82f2:	9301      	str	r3, [sp, #4]
   b82f4:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b82f6:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b82f8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b82fc:	a806      	add	r0, sp, #24
   b82fe:	f005 f845 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b8302:	462b      	mov	r3, r5
   b8304:	2202      	movs	r2, #2
   b8306:	a906      	add	r1, sp, #24
   b8308:	a804      	add	r0, sp, #16
   b830a:	f005 f91b 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b830e:	4621      	mov	r1, r4
   b8310:	a804      	add	r0, sp, #16
   b8312:	f005 f929 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8316:	b00d      	add	sp, #52	; 0x34
   b8318:	bd30      	pop	{r4, r5, pc}

000b831a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b831a:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b831c:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b831e:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8320:	2200      	movs	r2, #0
   b8322:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8326:	2221      	movs	r2, #33	; 0x21
   b8328:	9301      	str	r3, [sp, #4]
   b832a:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b832c:	460d      	mov	r5, r1
   b832e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8330:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8334:	a806      	add	r0, sp, #24
   b8336:	f005 f829 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b833a:	2305      	movs	r3, #5
   b833c:	2202      	movs	r2, #2
   b833e:	a906      	add	r1, sp, #24
   b8340:	a804      	add	r0, sp, #16
   b8342:	f005 f8ff 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b8346:	4629      	mov	r1, r5
   b8348:	a804      	add	r0, sp, #16
   b834a:	f005 f90d 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b834e:	7625      	strb	r5, [r4, #24]
}
   b8350:	b00d      	add	sp, #52	; 0x34
   b8352:	bd30      	pop	{r4, r5, pc}

000b8354 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8354:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8356:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8358:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b835a:	2200      	movs	r2, #0
   b835c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8360:	2221      	movs	r2, #33	; 0x21
   b8362:	9301      	str	r3, [sp, #4]
   b8364:	9200      	str	r2, [sp, #0]
   b8366:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b836a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b836c:	a806      	add	r0, sp, #24
   b836e:	f005 f80d 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b8372:	2305      	movs	r3, #5
   b8374:	2202      	movs	r2, #2
   b8376:	a906      	add	r1, sp, #24
   b8378:	a804      	add	r0, sp, #16
   b837a:	f005 f8e3 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b837e:	a804      	add	r0, sp, #16
   b8380:	f005 f8e5 	bl	bd54e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b8384:	b2c0      	uxtb	r0, r0
   b8386:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b8388:	b00c      	add	sp, #48	; 0x30
   b838a:	bd10      	pop	{r4, pc}

000b838c <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b838c:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b838e:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b8390:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8392:	2501      	movs	r5, #1
   b8394:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8398:	2321      	movs	r3, #33	; 0x21
   b839a:	9300      	str	r3, [sp, #0]
   b839c:	9501      	str	r5, [sp, #4]
   b839e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b83a2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b83a4:	462b      	mov	r3, r5
   b83a6:	a806      	add	r0, sp, #24
   b83a8:	f004 fff0 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b83ac:	2302      	movs	r3, #2
   b83ae:	462a      	mov	r2, r5
   b83b0:	a906      	add	r1, sp, #24
   b83b2:	a804      	add	r0, sp, #16
   b83b4:	f005 f8c6 	bl	bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b83b8:	4629      	mov	r1, r5
   b83ba:	a804      	add	r0, sp, #16
   b83bc:	f005 f8d4 	bl	bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b83c0:	200a      	movs	r0, #10
   b83c2:	f005 fef9 	bl	be1b8 <delay>
  getRange();
   b83c6:	4620      	mov	r0, r4
   b83c8:	f7ff ffc4 	bl	b8354 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b83cc:	b00d      	add	sp, #52	; 0x34
   b83ce:	bd30      	pop	{r4, r5, pc}

000b83d0 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b83d0:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b83d2:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b83d4:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b83d6:	2500      	movs	r5, #0
   b83d8:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b83dc:	230f      	movs	r3, #15
   b83de:	9300      	str	r3, [sp, #0]
   b83e0:	9601      	str	r6, [sp, #4]
   b83e2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b83e6:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b83e8:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b83ea:	a804      	add	r0, sp, #16
   b83ec:	f004 ffce 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b83f0:	a804      	add	r0, sp, #16
   b83f2:	f005 f88b 	bl	bd50c <_ZN23Adafruit_BusIO_Register4readEv>
   b83f6:	283d      	cmp	r0, #61	; 0x3d
   b83f8:	d115      	bne.n	b8426 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b83fa:	4620      	mov	r0, r4
   b83fc:	f7ff ffc6 	bl	b838c <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b8400:	2103      	movs	r1, #3
   b8402:	4620      	mov	r0, r4
   b8404:	f7ff ff0a 	bl	b821c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b8408:	4631      	mov	r1, r6
   b840a:	4620      	mov	r0, r4
   b840c:	f7ff ff38 	bl	b8280 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b8410:	4629      	mov	r1, r5
   b8412:	4620      	mov	r0, r4
   b8414:	f7ff ff81 	bl	b831a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b8418:	4620      	mov	r0, r4
   b841a:	4629      	mov	r1, r5
   b841c:	f7ff ff62 	bl	b82e4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b8420:	4630      	mov	r0, r6
}
   b8422:	b00a      	add	sp, #40	; 0x28
   b8424:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8426:	4628      	mov	r0, r5
   b8428:	e7fb      	b.n	b8422 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b842a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b842a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b842c:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b842e:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b8430:	b95b      	cbnz	r3, b844a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b8432:	2010      	movs	r0, #16
   b8434:	e9cd 1200 	strd	r1, r2, [sp]
   b8438:	f7fb fe2d 	bl	b4096 <_Znwj>
   b843c:	4605      	mov	r5, r0
   b843e:	b118      	cbz	r0, b8448 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b8440:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8444:	f005 f8a9 	bl	bd59a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b8448:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b844a:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b844c:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b844e:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b8450:	2101      	movs	r1, #1
   b8452:	f005 f8be 	bl	bd5d2 <_ZN18Adafruit_I2CDevice5beginEb>
   b8456:	b128      	cbz	r0, b8464 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b8458:	4620      	mov	r0, r4
}
   b845a:	b003      	add	sp, #12
   b845c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b8460:	f7ff bfb6 	b.w	b83d0 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b8464:	b003      	add	sp, #12
   b8466:	bd30      	pop	{r4, r5, pc}

000b8468 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8468:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b846a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b846c:	b08b      	sub	sp, #44	; 0x2c
   b846e:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b8470:	2500      	movs	r5, #0
   b8472:	2232      	movs	r2, #50	; 0x32
   b8474:	2102      	movs	r1, #2
   b8476:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b847a:	e9cd 2100 	strd	r2, r1, [sp]
   b847e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8482:	a804      	add	r0, sp, #16
   b8484:	f004 ff82 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b8488:	462a      	mov	r2, r5
   b848a:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b848e:	a804      	add	r0, sp, #16
   b8490:	f004 ffdc 	bl	bd44c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8494:	b00b      	add	sp, #44	; 0x2c
   b8496:	bd30      	pop	{r4, r5, pc}

000b8498 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b8498:	b530      	push	{r4, r5, lr}
   b849a:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b849c:	2500      	movs	r5, #0
  value |= latch << 1;
   b849e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b84a2:	0064      	lsls	r4, r4, #1
   b84a4:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b84a8:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b84ac:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b84b0:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b84b4:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b84b8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b84bc:	2301      	movs	r3, #1
  value |= latch << 1;
   b84be:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b84c2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b84c6:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b84c8:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b84ca:	2230      	movs	r2, #48	; 0x30
   b84cc:	9301      	str	r3, [sp, #4]
   b84ce:	9200      	str	r2, [sp, #0]
   b84d0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b84d4:	a804      	add	r0, sp, #16
   b84d6:	f004 ff59 	bl	bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b84da:	462a      	mov	r2, r5
   b84dc:	4621      	mov	r1, r4
   b84de:	a804      	add	r0, sp, #16
   b84e0:	f004 ffb4 	bl	bd44c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b84e4:	b00b      	add	sp, #44	; 0x2c
   b84e6:	bd30      	pop	{r4, r5, pc}

000b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b84e8:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b84ea:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b84ec:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b84ee:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b84f0:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b84f2:	041b      	lsls	r3, r3, #16
   b84f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b84f8:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b84fa:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b84fc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b8500:	bd10      	pop	{r4, pc}

000b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8502:	1843      	adds	r3, r0, r1
   b8504:	5c40      	ldrb	r0, [r0, r1]
   b8506:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b8508:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b850c:	4770      	bx	lr

000b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b850e:	b410      	push	{r4}
    if (base == 0) {
   b8510:	b92a      	cbnz	r2, b851e <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b8512:	6802      	ldr	r2, [r0, #0]
    }
}
   b8514:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b8518:	6892      	ldr	r2, [r2, #8]
   b851a:	b2c9      	uxtb	r1, r1
   b851c:	4710      	bx	r2
}
   b851e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b8522:	b2d2      	uxtb	r2, r2
   b8524:	f008 beb3 	b.w	c128e <_ZN5Print11printNumberEmh>

000b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b8528:	b912      	cbnz	r2, b8530 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b852a:	6803      	ldr	r3, [r0, #0]
   b852c:	689b      	ldr	r3, [r3, #8]
   b852e:	4718      	bx	r3
        return printNumber(val, base) + t;
   b8530:	b2d2      	uxtb	r2, r2
   b8532:	f008 beac 	b.w	c128e <_ZN5Print11printNumberEmh>

000b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b8536:	b510      	push	{r4, lr}
   b8538:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b853a:	f7ff fff5 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b853e:	4620      	mov	r0, r4
    }
   b8540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b8544:	f008 be8b 	b.w	c125e <_ZN5Print7printlnEv>

000b8548 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b8548:	6803      	ldr	r3, [r0, #0]
   b854a:	b2c9      	uxtb	r1, r1
   b854c:	689b      	ldr	r3, [r3, #8]
   b854e:	4718      	bx	r3

000b8550 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8554:	8002      	strh	r2, [r0, #0]
   b8556:	2142      	movs	r1, #66	; 0x42
   b8558:	2200      	movs	r2, #0
   b855a:	b510      	push	{r4, lr}
   b855c:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8560:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8564:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b8568:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b856c:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b8570:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b8574:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b8578:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b857c:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b8580:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b8584:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b8588:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b858c:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b8590:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8594:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b8598:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b859c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b85a0:	2180      	movs	r1, #128	; 0x80
   b85a2:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b85a6:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b85aa:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b85ae:	4925      	ldr	r1, [pc, #148]	; (b8644 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b85b0:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b85b4:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b85b8:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b85bc:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b85c0:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b85c4:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b85c8:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b85cc:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b85d0:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b85d4:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b85d8:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b85dc:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b85e0:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b85e4:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b85e8:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b85ec:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b85f0:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b85f4:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b85f8:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b85fc:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b8600:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b8604:	4910      	ldr	r1, [pc, #64]	; (b8648 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b8606:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b860a:	f640 1164 	movw	r1, #2404	; 0x964
   b860e:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b8612:	2158      	movs	r1, #88	; 0x58
   b8614:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8618:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b861a:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b861e:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b8622:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b8626:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b862a:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b862e:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b8632:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8636:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b863a:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b863e:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b8642:	bd10      	pop	{r4, pc}
   b8644:	02020000 	.word	0x02020000
   b8648:	64640200 	.word	0x64640200

000b864c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b864e:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b8650:	460d      	mov	r5, r1
   b8652:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b8656:	b9a9      	cbnz	r1, b8684 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b8658:	b1a8      	cbz	r0, b8686 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b865a:	f7fb fd20 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b865e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b8662:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8666:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b866a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b866e:	b913      	cbnz	r3, b8676 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b8670:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8674:	b123      	cbz	r3, b8680 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b8676:	4920      	ldr	r1, [pc, #128]	; (b86f8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b8678:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b867c:	f008 fe05 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b8680:	2001      	movs	r0, #1
   b8682:	e011      	b.n	b86a8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b8684:	b9b8      	cbnz	r0, b86b6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b8686:	4628      	mov	r0, r5
   b8688:	f7fb fd07 	bl	b409a <_Znaj>
   b868c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8690:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8694:	bb60      	cbnz	r0, b86f0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8696:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b869a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b869e:	b923      	cbnz	r3, b86aa <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b86a0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b86a4:	b90b      	cbnz	r3, b86aa <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b86a6:	2000      	movs	r0, #0
}
   b86a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b86aa:	4914      	ldr	r1, [pc, #80]	; (b86fc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b86ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b86b0:	f008 fdeb 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b86b4:	e7f7      	b.n	b86a6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b86b6:	4608      	mov	r0, r1
   b86b8:	f7fb fcef 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b86bc:	4606      	mov	r6, r0
   b86be:	b940      	cbnz	r0, b86d2 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b86c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b86c4:	b91b      	cbnz	r3, b86ce <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b86c6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b86ca:	2b00      	cmp	r3, #0
   b86cc:	d0eb      	beq.n	b86a6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b86ce:	490c      	ldr	r1, [pc, #48]	; (b8700 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b86d0:	e7ec      	b.n	b86ac <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b86d2:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b86d6:	42aa      	cmp	r2, r5
   b86d8:	bf28      	it	cs
   b86da:	462a      	movcs	r2, r5
   b86dc:	4639      	mov	r1, r7
   b86de:	f00b fe4b 	bl	c4378 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b86e2:	4638      	mov	r0, r7
   b86e4:	f7fb fcdb 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b86e8:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b86ec:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b86f0:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b86f4:	e7c4      	b.n	b8680 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b86f6:	bf00      	nop
   b86f8:	000c6d1c 	.word	0x000c6d1c
   b86fc:	000c6d47 	.word	0x000c6d47
   b8700:	000c6d72 	.word	0x000c6d72

000b8704 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b8704:	290d      	cmp	r1, #13
   b8706:	f000 80cd 	beq.w	b88a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b870a:	d809      	bhi.n	b8720 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b870c:	2902      	cmp	r1, #2
   b870e:	f000 80a7 	beq.w	b8860 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b8712:	2906      	cmp	r1, #6
   b8714:	f000 80be 	beq.w	b8894 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b8718:	2901      	cmp	r1, #1
   b871a:	d016      	beq.n	b874a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b871c:	2000      	movs	r0, #0
}
   b871e:	4770      	bx	lr
  switch (Class)
   b8720:	2913      	cmp	r1, #19
   b8722:	f000 80d4 	beq.w	b88ce <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b8726:	2928      	cmp	r1, #40	; 0x28
   b8728:	f000 80dc 	beq.w	b88e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b872c:	2910      	cmp	r1, #16
   b872e:	d1f5      	bne.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b8730:	2a10      	cmp	r2, #16
   b8732:	f000 80c9 	beq.w	b88c8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b8736:	f200 80ba 	bhi.w	b88ae <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b873a:	2a02      	cmp	r2, #2
   b873c:	f000 80c1 	beq.w	b88c2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b8740:	2a03      	cmp	r2, #3
   b8742:	d1eb      	bne.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b8744:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b8748:	e066      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b874a:	2a26      	cmp	r2, #38	; 0x26
   b874c:	d854      	bhi.n	b87f8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b874e:	2a00      	cmp	r2, #0
   b8750:	d0e4      	beq.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8752:	3a01      	subs	r2, #1
   b8754:	2a25      	cmp	r2, #37	; 0x25
   b8756:	d8e1      	bhi.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8758:	a301      	add	r3, pc, #4	; (adr r3, b8760 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b875a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b875e:	bf00      	nop
   b8760:	000b8817 	.word	0x000b8817
   b8764:	000b871d 	.word	0x000b871d
   b8768:	000b8821 	.word	0x000b8821
   b876c:	000b8825 	.word	0x000b8825
   b8770:	000b8829 	.word	0x000b8829
   b8774:	000b871d 	.word	0x000b871d
   b8778:	000b882d 	.word	0x000b882d
   b877c:	000b871d 	.word	0x000b871d
   b8780:	000b8831 	.word	0x000b8831
   b8784:	000b871d 	.word	0x000b871d
   b8788:	000b871d 	.word	0x000b871d
   b878c:	000b871d 	.word	0x000b871d
   b8790:	000b871d 	.word	0x000b871d
   b8794:	000b871d 	.word	0x000b871d
   b8798:	000b871d 	.word	0x000b871d
   b879c:	000b871d 	.word	0x000b871d
   b87a0:	000b8835 	.word	0x000b8835
   b87a4:	000b8839 	.word	0x000b8839
   b87a8:	000b883d 	.word	0x000b883d
   b87ac:	000b8841 	.word	0x000b8841
   b87b0:	000b871d 	.word	0x000b871d
   b87b4:	000b871d 	.word	0x000b871d
   b87b8:	000b8845 	.word	0x000b8845
   b87bc:	000b871d 	.word	0x000b871d
   b87c0:	000b871d 	.word	0x000b871d
   b87c4:	000b871d 	.word	0x000b871d
   b87c8:	000b871d 	.word	0x000b871d
   b87cc:	000b871d 	.word	0x000b871d
   b87d0:	000b871d 	.word	0x000b871d
   b87d4:	000b871d 	.word	0x000b871d
   b87d8:	000b871d 	.word	0x000b871d
   b87dc:	000b871d 	.word	0x000b871d
   b87e0:	000b8849 	.word	0x000b8849
   b87e4:	000b884d 	.word	0x000b884d
   b87e8:	000b871d 	.word	0x000b871d
   b87ec:	000b871d 	.word	0x000b871d
   b87f0:	000b871d 	.word	0x000b871d
   b87f4:	000b8851 	.word	0x000b8851
   b87f8:	2a3c      	cmp	r2, #60	; 0x3c
   b87fa:	d02d      	beq.n	b8858 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b87fc:	d805      	bhi.n	b880a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b87fe:	2a35      	cmp	r2, #53	; 0x35
   b8800:	d028      	beq.n	b8854 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8802:	2a3b      	cmp	r2, #59	; 0x3b
   b8804:	d18a      	bne.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b8806:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b8808:	e006      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b880a:	2a60      	cmp	r2, #96	; 0x60
   b880c:	d026      	beq.n	b885c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b880e:	2a61      	cmp	r2, #97	; 0x61
   b8810:	d184      	bne.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8812:	6980      	ldr	r0, [r0, #24]
   b8814:	e000      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b8816:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b8818:	3800      	subs	r0, #0
   b881a:	bf18      	it	ne
   b881c:	2001      	movne	r0, #1
   b881e:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b8820:	6900      	ldr	r0, [r0, #16]
   b8822:	e7f9      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8824:	6940      	ldr	r0, [r0, #20]
   b8826:	e7f7      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b8828:	69c0      	ldr	r0, [r0, #28]
   b882a:	e7f5      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b882c:	6a00      	ldr	r0, [r0, #32]
   b882e:	e7f3      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b8830:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8832:	e7f1      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b8834:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8836:	e7ef      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b8838:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b883a:	e7ed      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b883c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b883e:	e7eb      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b8840:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b8842:	e7e9      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b8844:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8846:	e7e7      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b8848:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b884a:	e7e5      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b884c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b884e:	e7e3      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b8850:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b8852:	e7e1      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8854:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b8856:	e7df      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b8858:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b885a:	e7dd      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b885c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b885e:	e7db      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8860:	2a34      	cmp	r2, #52	; 0x34
   b8862:	d015      	beq.n	b8890 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8864:	d806      	bhi.n	b8874 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b8866:	2a13      	cmp	r2, #19
   b8868:	d00b      	beq.n	b8882 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b886a:	2a15      	cmp	r2, #21
   b886c:	f47f af56 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8870:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8872:	e7d1      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8874:	2a72      	cmp	r2, #114	; 0x72
   b8876:	d006      	beq.n	b8886 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b8878:	2a73      	cmp	r2, #115	; 0x73
   b887a:	f47f af4f 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b887e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8880:	e7ca      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8882:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8884:	e7c8      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8886:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8888:	2b00      	cmp	r3, #0
   b888a:	d13b      	bne.n	b8904 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b888c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b888e:	e7c3      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8890:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8892:	e7c1      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8894:	b122      	cbz	r2, b88a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8896:	2a08      	cmp	r2, #8
   b8898:	f47f af40 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b889c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b889e:	e7bb      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b88a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b88a2:	e7b9      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b88a4:	2a03      	cmp	r2, #3
   b88a6:	f47f af39 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b88aa:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b88ac:	e7b4      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b88ae:	2a14      	cmp	r2, #20
   b88b0:	d005      	beq.n	b88be <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b88b2:	2a15      	cmp	r2, #21
   b88b4:	f47f af32 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b88b8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b88bc:	e7ac      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b88be:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b88c0:	e7aa      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b88c2:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b88c6:	e7a7      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b88c8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b88cc:	e7a4      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b88ce:	2a60      	cmp	r2, #96	; 0x60
   b88d0:	d005      	beq.n	b88de <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b88d2:	2a80      	cmp	r2, #128	; 0x80
   b88d4:	f47f af22 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b88d8:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b88dc:	e79c      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b88de:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b88e2:	e799      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b88e4:	2a01      	cmp	r2, #1
   b88e6:	d007      	beq.n	b88f8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b88e8:	2a02      	cmp	r2, #2
   b88ea:	d008      	beq.n	b88fe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b88ec:	2a00      	cmp	r2, #0
   b88ee:	f47f af15 	bne.w	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b88f2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b88f6:	e78f      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b88f8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b88fc:	e78c      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b88fe:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8902:	e789      	b.n	b8818 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8904:	2001      	movs	r0, #1
   b8906:	4770      	bx	lr

000b8908 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8908:	290d      	cmp	r1, #13
   b890a:	d035      	beq.n	b8978 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b890c:	d807      	bhi.n	b891e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b890e:	2902      	cmp	r1, #2
   b8910:	d019      	beq.n	b8946 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8912:	2906      	cmp	r1, #6
   b8914:	d02a      	beq.n	b896c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8916:	2901      	cmp	r1, #1
   b8918:	d00d      	beq.n	b8936 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b891a:	2000      	movs	r0, #0
}
   b891c:	4770      	bx	lr
  switch (Class)
   b891e:	2913      	cmp	r1, #19
   b8920:	d02f      	beq.n	b8982 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8922:	2928      	cmp	r1, #40	; 0x28
   b8924:	d034      	beq.n	b8990 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8926:	2910      	cmp	r1, #16
   b8928:	d1f7      	bne.n	b891a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b892a:	3a02      	subs	r2, #2
   b892c:	b2d2      	uxtb	r2, r2
   b892e:	2a13      	cmp	r2, #19
   b8930:	d8f3      	bhi.n	b891a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8932:	4b1f      	ldr	r3, [pc, #124]	; (b89b0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8934:	e004      	b.n	b8940 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b8936:	3a01      	subs	r2, #1
   b8938:	b2d2      	uxtb	r2, r2
   b893a:	2a60      	cmp	r2, #96	; 0x60
   b893c:	d8ed      	bhi.n	b891a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b893e:	4b1d      	ldr	r3, [pc, #116]	; (b89b4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b8940:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8944:	4770      	bx	lr
    switch (ID)
   b8946:	2a34      	cmp	r2, #52	; 0x34
   b8948:	d027      	beq.n	b899a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b894a:	d807      	bhi.n	b895c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b894c:	2a13      	cmp	r2, #19
   b894e:	d026      	beq.n	b899e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8950:	2a15      	cmp	r2, #21
   b8952:	bf14      	ite	ne
   b8954:	2000      	movne	r0, #0
   b8956:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b895a:	4770      	bx	lr
   b895c:	2a72      	cmp	r2, #114	; 0x72
   b895e:	d020      	beq.n	b89a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8960:	2a73      	cmp	r2, #115	; 0x73
   b8962:	bf14      	ite	ne
   b8964:	2000      	movne	r0, #0
   b8966:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b896a:	4770      	bx	lr
    switch (ID)
   b896c:	b1e2      	cbz	r2, b89a8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b896e:	2a08      	cmp	r2, #8
   b8970:	bf14      	ite	ne
   b8972:	2000      	movne	r0, #0
   b8974:	2006      	moveq	r0, #6
   b8976:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b8978:	2a03      	cmp	r2, #3
   b897a:	bf14      	ite	ne
   b897c:	2000      	movne	r0, #0
   b897e:	201c      	moveq	r0, #28
   b8980:	4770      	bx	lr
    switch (ID)
   b8982:	2a60      	cmp	r2, #96	; 0x60
   b8984:	d012      	beq.n	b89ac <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8986:	2a80      	cmp	r2, #128	; 0x80
   b8988:	bf14      	ite	ne
   b898a:	2000      	movne	r0, #0
   b898c:	20a4      	moveq	r0, #164	; 0xa4
   b898e:	4770      	bx	lr
    switch (ID)
   b8990:	2a02      	cmp	r2, #2
   b8992:	d8c2      	bhi.n	b891a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8994:	4b08      	ldr	r3, [pc, #32]	; (b89b8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8996:	5c98      	ldrb	r0, [r3, r2]
   b8998:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b899a:	200c      	movs	r0, #12
   b899c:	4770      	bx	lr
   b899e:	2048      	movs	r0, #72	; 0x48
   b89a0:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b89a2:	f44f 7004 	mov.w	r0, #528	; 0x210
   b89a6:	4770      	bx	lr
   b89a8:	2014      	movs	r0, #20
   b89aa:	4770      	bx	lr
   b89ac:	2008      	movs	r0, #8
   b89ae:	4770      	bx	lr
   b89b0:	000c7a32 	.word	0x000c7a32
   b89b4:	000c7970 	.word	0x000c7970
   b89b8:	000c7a5a 	.word	0x000c7a5a

000b89bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b89bc:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b89be:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b89c2:	07ca      	lsls	r2, r1, #31
   b89c4:	d415      	bmi.n	b89f2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b89c6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b89ca:	4b59      	ldr	r3, [pc, #356]	; (b8b30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b89cc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b89d0:	429a      	cmp	r2, r3
   b89d2:	d101      	bne.n	b89d8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b89d4:	078b      	lsls	r3, r1, #30
   b89d6:	d40c      	bmi.n	b89f2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b89d8:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b89dc:	2b47      	cmp	r3, #71	; 0x47
   b89de:	d174      	bne.n	b8aca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b89e0:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b89e4:	f245 1441 	movw	r4, #20801	; 0x5141
   b89e8:	42a3      	cmp	r3, r4
   b89ea:	d104      	bne.n	b89f6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b89ec:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b89f0:	d06b      	beq.n	b8aca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b89f2:	2001      	movs	r0, #1
   b89f4:	e070      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b89f6:	f245 1442 	movw	r4, #20802	; 0x5142
   b89fa:	42a3      	cmp	r3, r4
   b89fc:	d102      	bne.n	b8a04 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b89fe:	f011 0f08 	tst.w	r1, #8
   b8a02:	e7f5      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8a04:	f245 3442 	movw	r4, #21314	; 0x5342
   b8a08:	42a3      	cmp	r3, r4
   b8a0a:	d102      	bne.n	b8a12 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8a0c:	f011 0f10 	tst.w	r1, #16
   b8a10:	e7ee      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8a12:	f244 1447 	movw	r4, #16711	; 0x4147
   b8a16:	42a3      	cmp	r3, r4
   b8a18:	d102      	bne.n	b8a20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b8a1a:	f011 0f20 	tst.w	r1, #32
   b8a1e:	e7e7      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8a20:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8a24:	42a3      	cmp	r3, r4
   b8a26:	d102      	bne.n	b8a2e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8a28:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8a2c:	e7e0      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8a2e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8a32:	42a3      	cmp	r3, r4
   b8a34:	d102      	bne.n	b8a3c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b8a36:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8a3a:	e7d9      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8a3c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8a40:	428b      	cmp	r3, r1
   b8a42:	d104      	bne.n	b8a4e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8a44:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8a48:	f013 0f01 	tst.w	r3, #1
   b8a4c:	e7d0      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8a4e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8a52:	428b      	cmp	r3, r1
   b8a54:	d104      	bne.n	b8a60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b8a56:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8a5a:	f013 0f02 	tst.w	r3, #2
   b8a5e:	e7c7      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8a60:	f245 1150 	movw	r1, #20816	; 0x5150
   b8a64:	428b      	cmp	r3, r1
   b8a66:	d104      	bne.n	b8a72 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b8a68:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8a6c:	f013 0f04 	tst.w	r3, #4
   b8a70:	e7be      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8a72:	f245 1151 	movw	r1, #20817	; 0x5151
   b8a76:	428b      	cmp	r3, r1
   b8a78:	d104      	bne.n	b8a84 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b8a7a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8a7e:	f013 0f08 	tst.w	r3, #8
   b8a82:	e7b5      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8a84:	f245 3152 	movw	r1, #21330	; 0x5352
   b8a88:	428b      	cmp	r3, r1
   b8a8a:	d104      	bne.n	b8a96 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8a8c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8a90:	f013 0f10 	tst.w	r3, #16
   b8a94:	e7ac      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8a96:	f244 1153 	movw	r1, #16723	; 0x4153
   b8a9a:	428b      	cmp	r3, r1
   b8a9c:	d104      	bne.n	b8aa8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8a9e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8aa2:	f013 0f20 	tst.w	r3, #32
   b8aa6:	e7a3      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8aa8:	f245 4153 	movw	r1, #21587	; 0x5453
   b8aac:	428b      	cmp	r3, r1
   b8aae:	d104      	bne.n	b8aba <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8ab0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8ab4:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8ab8:	e79a      	b.n	b89f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b8aba:	f245 6153 	movw	r1, #22099	; 0x5653
   b8abe:	428b      	cmp	r3, r1
   b8ac0:	d103      	bne.n	b8aca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8ac2:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8ac6:	2b00      	cmp	r3, #0
   b8ac8:	db93      	blt.n	b89f2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b8aca:	4b1a      	ldr	r3, [pc, #104]	; (b8b34 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8acc:	429a      	cmp	r2, r3
   b8ace:	d104      	bne.n	b8ada <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8ad0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8ad4:	f000 0001 	and.w	r0, r0, #1
}
   b8ad8:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b8ada:	4b17      	ldr	r3, [pc, #92]	; (b8b38 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8adc:	429a      	cmp	r2, r3
   b8ade:	d104      	bne.n	b8aea <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8ae0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8ae4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8ae8:	e7f6      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b8aea:	4b14      	ldr	r3, [pc, #80]	; (b8b3c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8aec:	429a      	cmp	r2, r3
   b8aee:	d104      	bne.n	b8afa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8af0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8af4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8af8:	e7ee      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b8afa:	4b11      	ldr	r3, [pc, #68]	; (b8b40 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8afc:	429a      	cmp	r2, r3
   b8afe:	d104      	bne.n	b8b0a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8b00:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8b04:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8b08:	e7e6      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b8b0a:	4b0e      	ldr	r3, [pc, #56]	; (b8b44 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8b0c:	429a      	cmp	r2, r3
   b8b0e:	d104      	bne.n	b8b1a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8b10:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8b14:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8b18:	e7de      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b8b1a:	4b0b      	ldr	r3, [pc, #44]	; (b8b48 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8b1c:	429a      	cmp	r2, r3
   b8b1e:	d104      	bne.n	b8b2a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8b20:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8b24:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8b28:	e7d6      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b8b2a:	2000      	movs	r0, #0
   b8b2c:	e7d4      	b.n	b8ad8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8b2e:	bf00      	nop
   b8b30:	4d544400 	.word	0x4d544400
   b8b34:	4d4c5200 	.word	0x4d4c5200
   b8b38:	434d5200 	.word	0x434d5200
   b8b3c:	54585400 	.word	0x54585400
   b8b40:	574c5600 	.word	0x574c5600
   b8b44:	47545600 	.word	0x47545600
   b8b48:	41445a00 	.word	0x41445a00

000b8b4c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8b4c:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8b50:	2b2a      	cmp	r3, #42	; 0x2a
   b8b52:	d157      	bne.n	b8c04 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8b54:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8b58:	2b47      	cmp	r3, #71	; 0x47
   b8b5a:	d153      	bne.n	b8c04 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8b5c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8b60:	4a29      	ldr	r2, [pc, #164]	; (b8c08 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8b66:	4293      	cmp	r3, r2
   b8b68:	d011      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b8b6a:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8b6e:	2a47      	cmp	r2, #71	; 0x47
   b8b70:	d11a      	bne.n	b8ba8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8b72:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8b76:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b8b7a:	3941      	subs	r1, #65	; 0x41
   b8b7c:	b289      	uxth	r1, r1
   b8b7e:	2910      	cmp	r1, #16
   b8b80:	d907      	bls.n	b8b92 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8b82:	f022 0110 	bic.w	r1, r2, #16
   b8b86:	f245 3042 	movw	r0, #21314	; 0x5342
   b8b8a:	4281      	cmp	r1, r0
   b8b8c:	d129      	bne.n	b8be2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8b8e:	2001      	movs	r0, #1
}
   b8b90:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8b92:	481e      	ldr	r0, [pc, #120]	; (b8c0c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8b94:	fa20 f101 	lsr.w	r1, r0, r1
   b8b98:	07c9      	lsls	r1, r1, #31
   b8b9a:	d4f8      	bmi.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8ba0:	f245 4153 	movw	r1, #21587	; 0x5453
   b8ba4:	428a      	cmp	r2, r1
   b8ba6:	d0f2      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8ba8:	4a19      	ldr	r2, [pc, #100]	; (b8c10 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8baa:	4293      	cmp	r3, r2
   b8bac:	d0ef      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8bae:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8bb2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8bb6:	4293      	cmp	r3, r2
   b8bb8:	d0e9      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b8bba:	4a16      	ldr	r2, [pc, #88]	; (b8c14 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8bbc:	4293      	cmp	r3, r2
   b8bbe:	d0e6      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8bc0:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8bc4:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8bc8:	4293      	cmp	r3, r2
   b8bca:	d0e0      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8bcc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8bd0:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8bd4:	4293      	cmp	r3, r2
   b8bd6:	d0da      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8bd8:	480f      	ldr	r0, [pc, #60]	; (b8c18 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b8bda:	1a1b      	subs	r3, r3, r0
   b8bdc:	4258      	negs	r0, r3
   b8bde:	4158      	adcs	r0, r3
   b8be0:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8be2:	f244 1147 	movw	r1, #16711	; 0x4147
   b8be6:	428a      	cmp	r2, r1
   b8be8:	d0d1      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8bea:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8bee:	428a      	cmp	r2, r1
   b8bf0:	d0cd      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8bf2:	f245 314e 	movw	r1, #21326	; 0x534e
   b8bf6:	428a      	cmp	r2, r1
   b8bf8:	d0c9      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8bfa:	f244 1153 	movw	r1, #16723	; 0x4153
   b8bfe:	428a      	cmp	r2, r1
   b8c00:	d0c5      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8c02:	e7cb      	b.n	b8b9c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8c04:	2000      	movs	r0, #0
   b8c06:	4770      	bx	lr
   b8c08:	4d544400 	.word	0x4d544400
   b8c0c:	0001a803 	.word	0x0001a803
   b8c10:	4d4c5200 	.word	0x4d4c5200
   b8c14:	54585400 	.word	0x54585400
   b8c18:	41445a00 	.word	0x41445a00

000b8c1c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8c1c:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8c1e:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8c22:	07ca      	lsls	r2, r1, #31
   b8c24:	d415      	bmi.n	b8c52 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8c26:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8c2a:	4b59      	ldr	r3, [pc, #356]	; (b8d90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8c2c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8c30:	429a      	cmp	r2, r3
   b8c32:	d101      	bne.n	b8c38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8c34:	078b      	lsls	r3, r1, #30
   b8c36:	d40c      	bmi.n	b8c52 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8c38:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8c3c:	2b47      	cmp	r3, #71	; 0x47
   b8c3e:	d174      	bne.n	b8d2a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8c40:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8c44:	f245 1441 	movw	r4, #20801	; 0x5141
   b8c48:	42a3      	cmp	r3, r4
   b8c4a:	d104      	bne.n	b8c56 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8c4c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8c50:	d06b      	beq.n	b8d2a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8c52:	2001      	movs	r0, #1
   b8c54:	e070      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8c56:	f245 1442 	movw	r4, #20802	; 0x5142
   b8c5a:	42a3      	cmp	r3, r4
   b8c5c:	d102      	bne.n	b8c64 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8c5e:	f011 0f08 	tst.w	r1, #8
   b8c62:	e7f5      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8c64:	f245 3442 	movw	r4, #21314	; 0x5342
   b8c68:	42a3      	cmp	r3, r4
   b8c6a:	d102      	bne.n	b8c72 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8c6c:	f011 0f10 	tst.w	r1, #16
   b8c70:	e7ee      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8c72:	f244 1447 	movw	r4, #16711	; 0x4147
   b8c76:	42a3      	cmp	r3, r4
   b8c78:	d102      	bne.n	b8c80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8c7a:	f011 0f20 	tst.w	r1, #32
   b8c7e:	e7e7      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8c80:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8c84:	42a3      	cmp	r3, r4
   b8c86:	d102      	bne.n	b8c8e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8c88:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8c8c:	e7e0      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8c8e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8c92:	42a3      	cmp	r3, r4
   b8c94:	d102      	bne.n	b8c9c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8c96:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8c9a:	e7d9      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8c9c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8ca0:	428b      	cmp	r3, r1
   b8ca2:	d104      	bne.n	b8cae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8ca4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8ca8:	f013 0f01 	tst.w	r3, #1
   b8cac:	e7d0      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8cae:	f245 314e 	movw	r1, #21326	; 0x534e
   b8cb2:	428b      	cmp	r3, r1
   b8cb4:	d104      	bne.n	b8cc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8cb6:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8cba:	f013 0f02 	tst.w	r3, #2
   b8cbe:	e7c7      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8cc0:	f245 1150 	movw	r1, #20816	; 0x5150
   b8cc4:	428b      	cmp	r3, r1
   b8cc6:	d104      	bne.n	b8cd2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8cc8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8ccc:	f013 0f04 	tst.w	r3, #4
   b8cd0:	e7be      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8cd2:	f245 1151 	movw	r1, #20817	; 0x5151
   b8cd6:	428b      	cmp	r3, r1
   b8cd8:	d104      	bne.n	b8ce4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8cda:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8cde:	f013 0f08 	tst.w	r3, #8
   b8ce2:	e7b5      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8ce4:	f245 3152 	movw	r1, #21330	; 0x5352
   b8ce8:	428b      	cmp	r3, r1
   b8cea:	d104      	bne.n	b8cf6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8cec:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8cf0:	f013 0f10 	tst.w	r3, #16
   b8cf4:	e7ac      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8cf6:	f244 1153 	movw	r1, #16723	; 0x4153
   b8cfa:	428b      	cmp	r3, r1
   b8cfc:	d104      	bne.n	b8d08 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8cfe:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8d02:	f013 0f20 	tst.w	r3, #32
   b8d06:	e7a3      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8d08:	f245 4153 	movw	r1, #21587	; 0x5453
   b8d0c:	428b      	cmp	r3, r1
   b8d0e:	d104      	bne.n	b8d1a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8d10:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8d14:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8d18:	e79a      	b.n	b8c50 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8d1a:	f245 6153 	movw	r1, #22099	; 0x5653
   b8d1e:	428b      	cmp	r3, r1
   b8d20:	d103      	bne.n	b8d2a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8d22:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8d26:	2b00      	cmp	r3, #0
   b8d28:	db93      	blt.n	b8c52 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8d2a:	4b1a      	ldr	r3, [pc, #104]	; (b8d94 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8d2c:	429a      	cmp	r2, r3
   b8d2e:	d104      	bne.n	b8d3a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8d30:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d34:	f000 0001 	and.w	r0, r0, #1
}
   b8d38:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8d3a:	4b17      	ldr	r3, [pc, #92]	; (b8d98 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8d3c:	429a      	cmp	r2, r3
   b8d3e:	d104      	bne.n	b8d4a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8d40:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d44:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8d48:	e7f6      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8d4a:	4b14      	ldr	r3, [pc, #80]	; (b8d9c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8d4c:	429a      	cmp	r2, r3
   b8d4e:	d104      	bne.n	b8d5a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8d50:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d54:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8d58:	e7ee      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8d5a:	4b11      	ldr	r3, [pc, #68]	; (b8da0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8d5c:	429a      	cmp	r2, r3
   b8d5e:	d104      	bne.n	b8d6a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8d60:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d64:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8d68:	e7e6      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8d6a:	4b0e      	ldr	r3, [pc, #56]	; (b8da4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8d6c:	429a      	cmp	r2, r3
   b8d6e:	d104      	bne.n	b8d7a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8d70:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d74:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8d78:	e7de      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8d7a:	4b0b      	ldr	r3, [pc, #44]	; (b8da8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8d7c:	429a      	cmp	r2, r3
   b8d7e:	d104      	bne.n	b8d8a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8d80:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8d84:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8d88:	e7d6      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8d8a:	2000      	movs	r0, #0
   b8d8c:	e7d4      	b.n	b8d38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8d8e:	bf00      	nop
   b8d90:	4d544400 	.word	0x4d544400
   b8d94:	4d4c5200 	.word	0x4d4c5200
   b8d98:	434d5200 	.word	0x434d5200
   b8d9c:	54585400 	.word	0x54585400
   b8da0:	574c5600 	.word	0x574c5600
   b8da4:	47545600 	.word	0x47545600
   b8da8:	41445a00 	.word	0x41445a00

000b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8dac:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8db0:	b110      	cbz	r0, b8db8 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8db2:	6803      	ldr	r3, [r0, #0]
   b8db4:	689b      	ldr	r3, [r3, #8]
   b8db6:	4718      	bx	r3
}
   b8db8:	4770      	bx	lr
	...

000b8dbc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8dbe:	4b3d      	ldr	r3, [pc, #244]	; (b8eb4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8dc0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dc2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8dc6:	6818      	ldr	r0, [r3, #0]
   b8dc8:	9000      	str	r0, [sp, #0]
   b8dca:	889b      	ldrh	r3, [r3, #4]
   b8dcc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd0:	2205      	movs	r2, #5
   b8dd2:	4629      	mov	r1, r5
   b8dd4:	4668      	mov	r0, sp
   b8dd6:	f00b fabf 	bl	c4358 <memcmp>
   b8dda:	b928      	cbnz	r0, b8de8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8ddc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8de0:	b113      	cbz	r3, b8de8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8de2:	2001      	movs	r0, #1
}
   b8de4:	b003      	add	sp, #12
   b8de6:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8de8:	4933      	ldr	r1, [pc, #204]	; (b8eb8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b8dea:	4668      	mov	r0, sp
   b8dec:	f00b fb52 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8df0:	2205      	movs	r2, #5
   b8df2:	4629      	mov	r1, r5
   b8df4:	4668      	mov	r0, sp
   b8df6:	f00b faaf 	bl	c4358 <memcmp>
   b8dfa:	b918      	cbnz	r0, b8e04 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8dfc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8e00:	2b00      	cmp	r3, #0
   b8e02:	d1ee      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8e04:	492d      	ldr	r1, [pc, #180]	; (b8ebc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8e06:	4668      	mov	r0, sp
   b8e08:	f00b fb44 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e0c:	2205      	movs	r2, #5
   b8e0e:	4629      	mov	r1, r5
   b8e10:	4668      	mov	r0, sp
   b8e12:	f00b faa1 	bl	c4358 <memcmp>
   b8e16:	b918      	cbnz	r0, b8e20 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8e18:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8e1c:	2b00      	cmp	r3, #0
   b8e1e:	d1e0      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8e20:	4927      	ldr	r1, [pc, #156]	; (b8ec0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8e22:	4668      	mov	r0, sp
   b8e24:	f00b fb36 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e28:	2205      	movs	r2, #5
   b8e2a:	4629      	mov	r1, r5
   b8e2c:	4668      	mov	r0, sp
   b8e2e:	f00b fa93 	bl	c4358 <memcmp>
   b8e32:	b918      	cbnz	r0, b8e3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8e34:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8e38:	2b00      	cmp	r3, #0
   b8e3a:	d1d2      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8e3c:	4921      	ldr	r1, [pc, #132]	; (b8ec4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8e3e:	4668      	mov	r0, sp
   b8e40:	f00b fb28 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e44:	2205      	movs	r2, #5
   b8e46:	4629      	mov	r1, r5
   b8e48:	4668      	mov	r0, sp
   b8e4a:	f00b fa85 	bl	c4358 <memcmp>
   b8e4e:	b918      	cbnz	r0, b8e58 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8e50:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8e54:	2b00      	cmp	r3, #0
   b8e56:	d1c4      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8e58:	491b      	ldr	r1, [pc, #108]	; (b8ec8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8e5a:	4668      	mov	r0, sp
   b8e5c:	f00b fb1a 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e60:	2205      	movs	r2, #5
   b8e62:	4629      	mov	r1, r5
   b8e64:	4668      	mov	r0, sp
   b8e66:	f00b fa77 	bl	c4358 <memcmp>
   b8e6a:	b918      	cbnz	r0, b8e74 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8e6c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8e70:	2b00      	cmp	r3, #0
   b8e72:	d1b6      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8e74:	4915      	ldr	r1, [pc, #84]	; (b8ecc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8e76:	4668      	mov	r0, sp
   b8e78:	f00b fb0c 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e7c:	2205      	movs	r2, #5
   b8e7e:	4629      	mov	r1, r5
   b8e80:	4668      	mov	r0, sp
   b8e82:	f00b fa69 	bl	c4358 <memcmp>
   b8e86:	b918      	cbnz	r0, b8e90 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8e88:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8e8c:	2b00      	cmp	r3, #0
   b8e8e:	d1a8      	bne.n	b8de2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8e90:	490f      	ldr	r1, [pc, #60]	; (b8ed0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8e92:	4668      	mov	r0, sp
   b8e94:	f00b fafe 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e98:	2205      	movs	r2, #5
   b8e9a:	4629      	mov	r1, r5
   b8e9c:	4668      	mov	r0, sp
   b8e9e:	f00b fa5b 	bl	c4358 <memcmp>
   b8ea2:	b928      	cbnz	r0, b8eb0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8ea4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8ea8:	3800      	subs	r0, #0
   b8eaa:	bf18      	it	ne
   b8eac:	2001      	movne	r0, #1
   b8eae:	e799      	b.n	b8de4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8eb0:	2000      	movs	r0, #0
   b8eb2:	e797      	b.n	b8de4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8eb4:	000c6dc8 	.word	0x000c6dc8
   b8eb8:	000c6d9e 	.word	0x000c6d9e
   b8ebc:	000c6da4 	.word	0x000c6da4
   b8ec0:	000c6daa 	.word	0x000c6daa
   b8ec4:	000c6db0 	.word	0x000c6db0
   b8ec8:	000c6db6 	.word	0x000c6db6
   b8ecc:	000c6dbc 	.word	0x000c6dbc
   b8ed0:	000c6dc2 	.word	0x000c6dc2

000b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8ed6:	4b62      	ldr	r3, [pc, #392]	; (b9060 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8ed8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eda:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8ede:	6818      	ldr	r0, [r3, #0]
   b8ee0:	9000      	str	r0, [sp, #0]
   b8ee2:	889b      	ldrh	r3, [r3, #4]
   b8ee4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ee8:	2205      	movs	r2, #5
   b8eea:	4629      	mov	r1, r5
   b8eec:	4668      	mov	r0, sp
   b8eee:	f00b fa33 	bl	c4358 <memcmp>
   b8ef2:	b978      	cbnz	r0, b8f14 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8ef4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8ef8:	b163      	cbz	r3, b8f14 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b8efa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8efe:	b14a      	cbz	r2, b8f14 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8f00:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8f04:	2a00      	cmp	r2, #0
   b8f06:	f040 80a3 	bne.w	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8f0a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8f0e:	2b00      	cmp	r3, #0
   b8f10:	f040 809e 	bne.w	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8f14:	4953      	ldr	r1, [pc, #332]	; (b9064 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8f16:	4668      	mov	r0, sp
   b8f18:	f00b fabc 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f1c:	2205      	movs	r2, #5
   b8f1e:	4629      	mov	r1, r5
   b8f20:	4668      	mov	r0, sp
   b8f22:	f00b fa19 	bl	c4358 <memcmp>
   b8f26:	b978      	cbnz	r0, b8f48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b8f28:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8f2c:	b163      	cbz	r3, b8f48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8f2e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8f32:	b14a      	cbz	r2, b8f48 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8f34:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8f38:	2a00      	cmp	r2, #0
   b8f3a:	f040 8089 	bne.w	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8f3e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8f42:	2b00      	cmp	r3, #0
   b8f44:	f040 8084 	bne.w	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8f48:	4947      	ldr	r1, [pc, #284]	; (b9068 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b8f4a:	4668      	mov	r0, sp
   b8f4c:	f00b faa2 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f50:	2205      	movs	r2, #5
   b8f52:	4629      	mov	r1, r5
   b8f54:	4668      	mov	r0, sp
   b8f56:	f00b f9ff 	bl	c4358 <memcmp>
   b8f5a:	b968      	cbnz	r0, b8f78 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8f5c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8f60:	b153      	cbz	r3, b8f78 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8f62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8f66:	b13a      	cbz	r2, b8f78 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8f68:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8f6c:	2a00      	cmp	r2, #0
   b8f6e:	d16f      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8f70:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8f74:	2b00      	cmp	r3, #0
   b8f76:	d16b      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8f78:	493c      	ldr	r1, [pc, #240]	; (b906c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b8f7a:	4668      	mov	r0, sp
   b8f7c:	f00b fa8a 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f80:	2205      	movs	r2, #5
   b8f82:	4629      	mov	r1, r5
   b8f84:	4668      	mov	r0, sp
   b8f86:	f00b f9e7 	bl	c4358 <memcmp>
   b8f8a:	b968      	cbnz	r0, b8fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8f8c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8f90:	b153      	cbz	r3, b8fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8f92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8f96:	b13a      	cbz	r2, b8fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8f98:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8f9c:	2a00      	cmp	r2, #0
   b8f9e:	d157      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8fa0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8fa4:	2b00      	cmp	r3, #0
   b8fa6:	d153      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8fa8:	4931      	ldr	r1, [pc, #196]	; (b9070 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b8faa:	4668      	mov	r0, sp
   b8fac:	f00b fa72 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fb0:	2205      	movs	r2, #5
   b8fb2:	4629      	mov	r1, r5
   b8fb4:	4668      	mov	r0, sp
   b8fb6:	f00b f9cf 	bl	c4358 <memcmp>
   b8fba:	b968      	cbnz	r0, b8fd8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8fbc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8fc0:	b153      	cbz	r3, b8fd8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8fc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8fc6:	b13a      	cbz	r2, b8fd8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8fc8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8fcc:	2a00      	cmp	r2, #0
   b8fce:	d13f      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8fd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8fd4:	2b00      	cmp	r3, #0
   b8fd6:	d13b      	bne.n	b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8fd8:	4926      	ldr	r1, [pc, #152]	; (b9074 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b8fda:	4668      	mov	r0, sp
   b8fdc:	f00b fa5a 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fe0:	2205      	movs	r2, #5
   b8fe2:	4629      	mov	r1, r5
   b8fe4:	4668      	mov	r0, sp
   b8fe6:	f00b f9b7 	bl	c4358 <memcmp>
   b8fea:	b958      	cbnz	r0, b9004 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8fec:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8ff0:	b143      	cbz	r3, b9004 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8ff2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8ff6:	b12a      	cbz	r2, b9004 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8ff8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8ffc:	bb42      	cbnz	r2, b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8ffe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9002:	bb2b      	cbnz	r3, b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b9004:	491c      	ldr	r1, [pc, #112]	; (b9078 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b9006:	4668      	mov	r0, sp
   b9008:	f00b fa44 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b900c:	2205      	movs	r2, #5
   b900e:	4629      	mov	r1, r5
   b9010:	4668      	mov	r0, sp
   b9012:	f00b f9a1 	bl	c4358 <memcmp>
   b9016:	b940      	cbnz	r0, b902a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b9018:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b901c:	b12b      	cbz	r3, b902a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b901e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b9020:	b11a      	cbz	r2, b902a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b9022:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b9024:	b9a2      	cbnz	r2, b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b9028:	b993      	cbnz	r3, b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b902a:	4914      	ldr	r1, [pc, #80]	; (b907c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b902c:	4668      	mov	r0, sp
   b902e:	f00b fa31 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9032:	2205      	movs	r2, #5
   b9034:	4629      	mov	r1, r5
   b9036:	4668      	mov	r0, sp
   b9038:	f00b f98e 	bl	c4358 <memcmp>
   b903c:	b958      	cbnz	r0, b9056 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b903e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9042:	b153      	cbz	r3, b905a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b9044:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9046:	b120      	cbz	r0, b9052 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b9048:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b904a:	b90a      	cbnz	r2, b9050 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b904c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b904e:	b100      	cbz	r0, b9052 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b9050:	2001      	movs	r0, #1
}
   b9052:	b003      	add	sp, #12
   b9054:	bd30      	pop	{r4, r5, pc}
  return false;
   b9056:	2000      	movs	r0, #0
   b9058:	e7fb      	b.n	b9052 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b905a:	4618      	mov	r0, r3
   b905c:	e7f9      	b.n	b9052 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b905e:	bf00      	nop
   b9060:	000c6dc8 	.word	0x000c6dc8
   b9064:	000c6d9e 	.word	0x000c6d9e
   b9068:	000c6da4 	.word	0x000c6da4
   b906c:	000c6daa 	.word	0x000c6daa
   b9070:	000c6db0 	.word	0x000c6db0
   b9074:	000c6db6 	.word	0x000c6db6
   b9078:	000c6dbc 	.word	0x000c6dbc
   b907c:	000c6dc2 	.word	0x000c6dc2

000b9080 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b9080:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9082:	4b38      	ldr	r3, [pc, #224]	; (b9164 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b9084:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9086:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b908a:	6818      	ldr	r0, [r3, #0]
   b908c:	9000      	str	r0, [sp, #0]
   b908e:	889b      	ldrh	r3, [r3, #4]
   b9090:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9094:	2205      	movs	r2, #5
   b9096:	4629      	mov	r1, r5
   b9098:	4668      	mov	r0, sp
   b909a:	f00b f95d 	bl	c4358 <memcmp>
   b909e:	b920      	cbnz	r0, b90aa <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b90a0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b90a4:	3001      	adds	r0, #1
}
   b90a6:	b003      	add	sp, #12
   b90a8:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b90aa:	492f      	ldr	r1, [pc, #188]	; (b9168 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b90ac:	4668      	mov	r0, sp
   b90ae:	f00b f9f1 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90b2:	2205      	movs	r2, #5
   b90b4:	4629      	mov	r1, r5
   b90b6:	4668      	mov	r0, sp
   b90b8:	f00b f94e 	bl	c4358 <memcmp>
   b90bc:	b910      	cbnz	r0, b90c4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b90be:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b90c2:	e7ef      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b90c4:	4929      	ldr	r1, [pc, #164]	; (b916c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b90c6:	4668      	mov	r0, sp
   b90c8:	f00b f9e4 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90cc:	2205      	movs	r2, #5
   b90ce:	4629      	mov	r1, r5
   b90d0:	4668      	mov	r0, sp
   b90d2:	f00b f941 	bl	c4358 <memcmp>
   b90d6:	b910      	cbnz	r0, b90de <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b90d8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b90dc:	e7e2      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b90de:	4924      	ldr	r1, [pc, #144]	; (b9170 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b90e0:	4668      	mov	r0, sp
   b90e2:	f00b f9d7 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90e6:	2205      	movs	r2, #5
   b90e8:	4629      	mov	r1, r5
   b90ea:	4668      	mov	r0, sp
   b90ec:	f00b f934 	bl	c4358 <memcmp>
   b90f0:	b910      	cbnz	r0, b90f8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b90f2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b90f6:	e7d5      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b90f8:	491e      	ldr	r1, [pc, #120]	; (b9174 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b90fa:	4668      	mov	r0, sp
   b90fc:	f00b f9ca 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9100:	2205      	movs	r2, #5
   b9102:	4629      	mov	r1, r5
   b9104:	4668      	mov	r0, sp
   b9106:	f00b f927 	bl	c4358 <memcmp>
   b910a:	b910      	cbnz	r0, b9112 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b910c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9110:	e7c8      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9112:	4919      	ldr	r1, [pc, #100]	; (b9178 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b9114:	4668      	mov	r0, sp
   b9116:	f00b f9bd 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b911a:	2205      	movs	r2, #5
   b911c:	4629      	mov	r1, r5
   b911e:	4668      	mov	r0, sp
   b9120:	f00b f91a 	bl	c4358 <memcmp>
   b9124:	b910      	cbnz	r0, b912c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b9126:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b912a:	e7bb      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b912c:	4913      	ldr	r1, [pc, #76]	; (b917c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b912e:	4668      	mov	r0, sp
   b9130:	f00b f9b0 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9134:	2205      	movs	r2, #5
   b9136:	4629      	mov	r1, r5
   b9138:	4668      	mov	r0, sp
   b913a:	f00b f90d 	bl	c4358 <memcmp>
   b913e:	b910      	cbnz	r0, b9146 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b9140:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9144:	e7ae      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9146:	490e      	ldr	r1, [pc, #56]	; (b9180 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b9148:	4668      	mov	r0, sp
   b914a:	f00b f9a3 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b914e:	2205      	movs	r2, #5
   b9150:	4629      	mov	r1, r5
   b9152:	4668      	mov	r0, sp
   b9154:	f00b f900 	bl	c4358 <memcmp>
   b9158:	b910      	cbnz	r0, b9160 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b915a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b915e:	e7a1      	b.n	b90a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b9160:	2000      	movs	r0, #0
   b9162:	e7a0      	b.n	b90a6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b9164:	000c6dc8 	.word	0x000c6dc8
   b9168:	000c6d9e 	.word	0x000c6d9e
   b916c:	000c6da4 	.word	0x000c6da4
   b9170:	000c6daa 	.word	0x000c6daa
   b9174:	000c6db0 	.word	0x000c6db0
   b9178:	000c6db6 	.word	0x000c6db6
   b917c:	000c6dbc 	.word	0x000c6dbc
   b9180:	000c6dc2 	.word	0x000c6dc2

000b9184 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b9184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9186:	4b38      	ldr	r3, [pc, #224]	; (b9268 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b9188:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b918a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b918e:	6818      	ldr	r0, [r3, #0]
   b9190:	9000      	str	r0, [sp, #0]
   b9192:	889b      	ldrh	r3, [r3, #4]
   b9194:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9198:	2205      	movs	r2, #5
   b919a:	4629      	mov	r1, r5
   b919c:	4668      	mov	r0, sp
   b919e:	f00b f8db 	bl	c4358 <memcmp>
   b91a2:	b920      	cbnz	r0, b91ae <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b91a4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b91a8:	3002      	adds	r0, #2
}
   b91aa:	b003      	add	sp, #12
   b91ac:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b91ae:	492f      	ldr	r1, [pc, #188]	; (b926c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b91b0:	4668      	mov	r0, sp
   b91b2:	f00b f96f 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91b6:	2205      	movs	r2, #5
   b91b8:	4629      	mov	r1, r5
   b91ba:	4668      	mov	r0, sp
   b91bc:	f00b f8cc 	bl	c4358 <memcmp>
   b91c0:	b910      	cbnz	r0, b91c8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b91c2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b91c6:	e7ef      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b91c8:	4929      	ldr	r1, [pc, #164]	; (b9270 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b91ca:	4668      	mov	r0, sp
   b91cc:	f00b f962 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91d0:	2205      	movs	r2, #5
   b91d2:	4629      	mov	r1, r5
   b91d4:	4668      	mov	r0, sp
   b91d6:	f00b f8bf 	bl	c4358 <memcmp>
   b91da:	b910      	cbnz	r0, b91e2 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b91dc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b91e0:	e7e2      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b91e2:	4924      	ldr	r1, [pc, #144]	; (b9274 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b91e4:	4668      	mov	r0, sp
   b91e6:	f00b f955 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91ea:	2205      	movs	r2, #5
   b91ec:	4629      	mov	r1, r5
   b91ee:	4668      	mov	r0, sp
   b91f0:	f00b f8b2 	bl	c4358 <memcmp>
   b91f4:	b910      	cbnz	r0, b91fc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b91f6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b91fa:	e7d5      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b91fc:	491e      	ldr	r1, [pc, #120]	; (b9278 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b91fe:	4668      	mov	r0, sp
   b9200:	f00b f948 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9204:	2205      	movs	r2, #5
   b9206:	4629      	mov	r1, r5
   b9208:	4668      	mov	r0, sp
   b920a:	f00b f8a5 	bl	c4358 <memcmp>
   b920e:	b910      	cbnz	r0, b9216 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b9210:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9214:	e7c8      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9216:	4919      	ldr	r1, [pc, #100]	; (b927c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b9218:	4668      	mov	r0, sp
   b921a:	f00b f93b 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b921e:	2205      	movs	r2, #5
   b9220:	4629      	mov	r1, r5
   b9222:	4668      	mov	r0, sp
   b9224:	f00b f898 	bl	c4358 <memcmp>
   b9228:	b910      	cbnz	r0, b9230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b922a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b922e:	e7bb      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9230:	4913      	ldr	r1, [pc, #76]	; (b9280 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b9232:	4668      	mov	r0, sp
   b9234:	f00b f92e 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9238:	2205      	movs	r2, #5
   b923a:	4629      	mov	r1, r5
   b923c:	4668      	mov	r0, sp
   b923e:	f00b f88b 	bl	c4358 <memcmp>
   b9242:	b910      	cbnz	r0, b924a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b9244:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9248:	e7ae      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b924a:	490e      	ldr	r1, [pc, #56]	; (b9284 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b924c:	4668      	mov	r0, sp
   b924e:	f00b f921 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9252:	2205      	movs	r2, #5
   b9254:	4629      	mov	r1, r5
   b9256:	4668      	mov	r0, sp
   b9258:	f00b f87e 	bl	c4358 <memcmp>
   b925c:	b910      	cbnz	r0, b9264 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b925e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9262:	e7a1      	b.n	b91a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b9264:	2000      	movs	r0, #0
   b9266:	e7a0      	b.n	b91aa <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b9268:	000c6dc8 	.word	0x000c6dc8
   b926c:	000c6d9e 	.word	0x000c6d9e
   b9270:	000c6da4 	.word	0x000c6da4
   b9274:	000c6daa 	.word	0x000c6daa
   b9278:	000c6db0 	.word	0x000c6db0
   b927c:	000c6db6 	.word	0x000c6db6
   b9280:	000c6dbc 	.word	0x000c6dbc
   b9284:	000c6dc2 	.word	0x000c6dc2

000b9288 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b9288:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b928a:	4b39      	ldr	r3, [pc, #228]	; (b9370 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b928c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b928e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9292:	6818      	ldr	r0, [r3, #0]
   b9294:	9000      	str	r0, [sp, #0]
   b9296:	889b      	ldrh	r3, [r3, #4]
   b9298:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b929c:	2205      	movs	r2, #5
   b929e:	4629      	mov	r1, r5
   b92a0:	4668      	mov	r0, sp
   b92a2:	f00b f859 	bl	c4358 <memcmp>
   b92a6:	b920      	cbnz	r0, b92b2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b92a8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b92ac:	3066      	adds	r0, #102	; 0x66
}
   b92ae:	b003      	add	sp, #12
   b92b0:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b92b2:	4930      	ldr	r1, [pc, #192]	; (b9374 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b92b4:	4668      	mov	r0, sp
   b92b6:	f00b f8ed 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92ba:	2205      	movs	r2, #5
   b92bc:	4629      	mov	r1, r5
   b92be:	4668      	mov	r0, sp
   b92c0:	f00b f84a 	bl	c4358 <memcmp>
   b92c4:	b910      	cbnz	r0, b92cc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b92c6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b92ca:	e7ef      	b.n	b92ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b92cc:	492a      	ldr	r1, [pc, #168]	; (b9378 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b92ce:	4668      	mov	r0, sp
   b92d0:	f00b f8e0 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92d4:	2205      	movs	r2, #5
   b92d6:	4629      	mov	r1, r5
   b92d8:	4668      	mov	r0, sp
   b92da:	f00b f83d 	bl	c4358 <memcmp>
   b92de:	b910      	cbnz	r0, b92e6 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b92e0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b92e4:	e7e2      	b.n	b92ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b92e6:	4925      	ldr	r1, [pc, #148]	; (b937c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b92e8:	4668      	mov	r0, sp
   b92ea:	f00b f8d3 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92ee:	2205      	movs	r2, #5
   b92f0:	4629      	mov	r1, r5
   b92f2:	4668      	mov	r0, sp
   b92f4:	f00b f830 	bl	c4358 <memcmp>
   b92f8:	b910      	cbnz	r0, b9300 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b92fa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b92fe:	e7d5      	b.n	b92ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9300:	491f      	ldr	r1, [pc, #124]	; (b9380 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b9302:	4668      	mov	r0, sp
   b9304:	f00b f8c6 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9308:	2205      	movs	r2, #5
   b930a:	4629      	mov	r1, r5
   b930c:	4668      	mov	r0, sp
   b930e:	f00b f823 	bl	c4358 <memcmp>
   b9312:	b910      	cbnz	r0, b931a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b9314:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9318:	e7c8      	b.n	b92ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b931a:	491a      	ldr	r1, [pc, #104]	; (b9384 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b931c:	4668      	mov	r0, sp
   b931e:	f00b f8b9 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9322:	2205      	movs	r2, #5
   b9324:	4629      	mov	r1, r5
   b9326:	4668      	mov	r0, sp
   b9328:	f00b f816 	bl	c4358 <memcmp>
   b932c:	b910      	cbnz	r0, b9334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b932e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9332:	e7bb      	b.n	b92ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9334:	4914      	ldr	r1, [pc, #80]	; (b9388 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b9336:	4668      	mov	r0, sp
   b9338:	f00b f8ac 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b933c:	2205      	movs	r2, #5
   b933e:	4629      	mov	r1, r5
   b9340:	4668      	mov	r0, sp
   b9342:	f00b f809 	bl	c4358 <memcmp>
   b9346:	b918      	cbnz	r0, b9350 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b9348:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b934c:	3034      	adds	r0, #52	; 0x34
   b934e:	e7ae      	b.n	b92ae <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9350:	490e      	ldr	r1, [pc, #56]	; (b938c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b9352:	4668      	mov	r0, sp
   b9354:	f00b f89e 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9358:	2205      	movs	r2, #5
   b935a:	4629      	mov	r1, r5
   b935c:	4668      	mov	r0, sp
   b935e:	f00a fffb 	bl	c4358 <memcmp>
   b9362:	b910      	cbnz	r0, b936a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b9364:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9368:	e7f0      	b.n	b934c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b936a:	2000      	movs	r0, #0
   b936c:	e79f      	b.n	b92ae <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b936e:	bf00      	nop
   b9370:	000c6dc8 	.word	0x000c6dc8
   b9374:	000c6d9e 	.word	0x000c6d9e
   b9378:	000c6da4 	.word	0x000c6da4
   b937c:	000c6daa 	.word	0x000c6daa
   b9380:	000c6db0 	.word	0x000c6db0
   b9384:	000c6db6 	.word	0x000c6db6
   b9388:	000c6dbc 	.word	0x000c6dbc
   b938c:	000c6dc2 	.word	0x000c6dc2

000b9390 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b9390:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9392:	4b39      	ldr	r3, [pc, #228]	; (b9478 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b9394:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9396:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b939a:	6818      	ldr	r0, [r3, #0]
   b939c:	9000      	str	r0, [sp, #0]
   b939e:	889b      	ldrh	r3, [r3, #4]
   b93a0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93a4:	2205      	movs	r2, #5
   b93a6:	4629      	mov	r1, r5
   b93a8:	4668      	mov	r0, sp
   b93aa:	f00a ffd5 	bl	c4358 <memcmp>
   b93ae:	b920      	cbnz	r0, b93ba <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b93b0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b93b4:	3067      	adds	r0, #103	; 0x67
}
   b93b6:	b003      	add	sp, #12
   b93b8:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b93ba:	4930      	ldr	r1, [pc, #192]	; (b947c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b93bc:	4668      	mov	r0, sp
   b93be:	f00b f869 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93c2:	2205      	movs	r2, #5
   b93c4:	4629      	mov	r1, r5
   b93c6:	4668      	mov	r0, sp
   b93c8:	f00a ffc6 	bl	c4358 <memcmp>
   b93cc:	b910      	cbnz	r0, b93d4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b93ce:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b93d2:	e7ef      	b.n	b93b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b93d4:	492a      	ldr	r1, [pc, #168]	; (b9480 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b93d6:	4668      	mov	r0, sp
   b93d8:	f00b f85c 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93dc:	2205      	movs	r2, #5
   b93de:	4629      	mov	r1, r5
   b93e0:	4668      	mov	r0, sp
   b93e2:	f00a ffb9 	bl	c4358 <memcmp>
   b93e6:	b910      	cbnz	r0, b93ee <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b93e8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b93ec:	e7e2      	b.n	b93b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b93ee:	4925      	ldr	r1, [pc, #148]	; (b9484 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b93f0:	4668      	mov	r0, sp
   b93f2:	f00b f84f 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93f6:	2205      	movs	r2, #5
   b93f8:	4629      	mov	r1, r5
   b93fa:	4668      	mov	r0, sp
   b93fc:	f00a ffac 	bl	c4358 <memcmp>
   b9400:	b910      	cbnz	r0, b9408 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b9402:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9406:	e7d5      	b.n	b93b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9408:	491f      	ldr	r1, [pc, #124]	; (b9488 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b940a:	4668      	mov	r0, sp
   b940c:	f00b f842 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9410:	2205      	movs	r2, #5
   b9412:	4629      	mov	r1, r5
   b9414:	4668      	mov	r0, sp
   b9416:	f00a ff9f 	bl	c4358 <memcmp>
   b941a:	b910      	cbnz	r0, b9422 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b941c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9420:	e7c8      	b.n	b93b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9422:	491a      	ldr	r1, [pc, #104]	; (b948c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b9424:	4668      	mov	r0, sp
   b9426:	f00b f835 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b942a:	2205      	movs	r2, #5
   b942c:	4629      	mov	r1, r5
   b942e:	4668      	mov	r0, sp
   b9430:	f00a ff92 	bl	c4358 <memcmp>
   b9434:	b910      	cbnz	r0, b943c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b9436:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b943a:	e7bb      	b.n	b93b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b943c:	4914      	ldr	r1, [pc, #80]	; (b9490 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b943e:	4668      	mov	r0, sp
   b9440:	f00b f828 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9444:	2205      	movs	r2, #5
   b9446:	4629      	mov	r1, r5
   b9448:	4668      	mov	r0, sp
   b944a:	f00a ff85 	bl	c4358 <memcmp>
   b944e:	b918      	cbnz	r0, b9458 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b9450:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9454:	3035      	adds	r0, #53	; 0x35
   b9456:	e7ae      	b.n	b93b6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9458:	490e      	ldr	r1, [pc, #56]	; (b9494 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b945a:	4668      	mov	r0, sp
   b945c:	f00b f81a 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9460:	2205      	movs	r2, #5
   b9462:	4629      	mov	r1, r5
   b9464:	4668      	mov	r0, sp
   b9466:	f00a ff77 	bl	c4358 <memcmp>
   b946a:	b910      	cbnz	r0, b9472 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b946c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9470:	e7f0      	b.n	b9454 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b9472:	2000      	movs	r0, #0
   b9474:	e79f      	b.n	b93b6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b9476:	bf00      	nop
   b9478:	000c6dc8 	.word	0x000c6dc8
   b947c:	000c6d9e 	.word	0x000c6d9e
   b9480:	000c6da4 	.word	0x000c6da4
   b9484:	000c6daa 	.word	0x000c6daa
   b9488:	000c6db0 	.word	0x000c6db0
   b948c:	000c6db6 	.word	0x000c6db6
   b9490:	000c6dbc 	.word	0x000c6dbc
   b9494:	000c6dc2 	.word	0x000c6dc2

000b9498 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b9498:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b949a:	4b39      	ldr	r3, [pc, #228]	; (b9580 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b949c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b949e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b94a2:	6818      	ldr	r0, [r3, #0]
   b94a4:	9000      	str	r0, [sp, #0]
   b94a6:	889b      	ldrh	r3, [r3, #4]
   b94a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94ac:	2205      	movs	r2, #5
   b94ae:	4629      	mov	r1, r5
   b94b0:	4668      	mov	r0, sp
   b94b2:	f00a ff51 	bl	c4358 <memcmp>
   b94b6:	b928      	cbnz	r0, b94c4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b94b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b94bc:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b94c0:	b003      	add	sp, #12
   b94c2:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b94c4:	492f      	ldr	r1, [pc, #188]	; (b9584 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b94c6:	4668      	mov	r0, sp
   b94c8:	f00a ffe4 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94cc:	2205      	movs	r2, #5
   b94ce:	4629      	mov	r1, r5
   b94d0:	4668      	mov	r0, sp
   b94d2:	f00a ff41 	bl	c4358 <memcmp>
   b94d6:	b910      	cbnz	r0, b94de <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b94d8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b94dc:	e7ee      	b.n	b94bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b94de:	492a      	ldr	r1, [pc, #168]	; (b9588 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b94e0:	4668      	mov	r0, sp
   b94e2:	f00a ffd7 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94e6:	2205      	movs	r2, #5
   b94e8:	4629      	mov	r1, r5
   b94ea:	4668      	mov	r0, sp
   b94ec:	f00a ff34 	bl	c4358 <memcmp>
   b94f0:	b910      	cbnz	r0, b94f8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b94f2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b94f6:	e7e1      	b.n	b94bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b94f8:	4924      	ldr	r1, [pc, #144]	; (b958c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b94fa:	4668      	mov	r0, sp
   b94fc:	f00a ffca 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9500:	2205      	movs	r2, #5
   b9502:	4629      	mov	r1, r5
   b9504:	4668      	mov	r0, sp
   b9506:	f00a ff27 	bl	c4358 <memcmp>
   b950a:	b910      	cbnz	r0, b9512 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b950c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9510:	e7d4      	b.n	b94bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9512:	491f      	ldr	r1, [pc, #124]	; (b9590 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9514:	4668      	mov	r0, sp
   b9516:	f00a ffbd 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b951a:	2205      	movs	r2, #5
   b951c:	4629      	mov	r1, r5
   b951e:	4668      	mov	r0, sp
   b9520:	f00a ff1a 	bl	c4358 <memcmp>
   b9524:	b910      	cbnz	r0, b952c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b9526:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b952a:	e7c7      	b.n	b94bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b952c:	4919      	ldr	r1, [pc, #100]	; (b9594 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b952e:	4668      	mov	r0, sp
   b9530:	f00a ffb0 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9534:	2205      	movs	r2, #5
   b9536:	4629      	mov	r1, r5
   b9538:	4668      	mov	r0, sp
   b953a:	f00a ff0d 	bl	c4358 <memcmp>
   b953e:	b910      	cbnz	r0, b9546 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b9540:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9544:	e7ba      	b.n	b94bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9546:	4914      	ldr	r1, [pc, #80]	; (b9598 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b9548:	4668      	mov	r0, sp
   b954a:	f00a ffa3 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b954e:	2205      	movs	r2, #5
   b9550:	4629      	mov	r1, r5
   b9552:	4668      	mov	r0, sp
   b9554:	f00a ff00 	bl	c4358 <memcmp>
   b9558:	b918      	cbnz	r0, b9562 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b955a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b955e:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9560:	e7ae      	b.n	b94c0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9562:	490e      	ldr	r1, [pc, #56]	; (b959c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9564:	4668      	mov	r0, sp
   b9566:	f00a ff95 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b956a:	2205      	movs	r2, #5
   b956c:	4629      	mov	r1, r5
   b956e:	4668      	mov	r0, sp
   b9570:	f00a fef2 	bl	c4358 <memcmp>
   b9574:	b910      	cbnz	r0, b957c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b9576:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b957a:	e7f0      	b.n	b955e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b957c:	2000      	movs	r0, #0
   b957e:	e79f      	b.n	b94c0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b9580:	000c6dc8 	.word	0x000c6dc8
   b9584:	000c6d9e 	.word	0x000c6d9e
   b9588:	000c6da4 	.word	0x000c6da4
   b958c:	000c6daa 	.word	0x000c6daa
   b9590:	000c6db0 	.word	0x000c6db0
   b9594:	000c6db6 	.word	0x000c6db6
   b9598:	000c6dbc 	.word	0x000c6dbc
   b959c:	000c6dc2 	.word	0x000c6dc2

000b95a0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b95a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b95a2:	4b3a      	ldr	r3, [pc, #232]	; (b968c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b95a4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95a6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b95aa:	6818      	ldr	r0, [r3, #0]
   b95ac:	9000      	str	r0, [sp, #0]
   b95ae:	889b      	ldrh	r3, [r3, #4]
   b95b0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95b4:	2205      	movs	r2, #5
   b95b6:	4629      	mov	r1, r5
   b95b8:	4668      	mov	r0, sp
   b95ba:	f00a fecd 	bl	c4358 <memcmp>
   b95be:	b930      	cbnz	r0, b95ce <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b95c0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b95c4:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b95c8:	3001      	adds	r0, #1
}
   b95ca:	b003      	add	sp, #12
   b95cc:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b95ce:	4930      	ldr	r1, [pc, #192]	; (b9690 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b95d0:	4668      	mov	r0, sp
   b95d2:	f00a ff5f 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95d6:	2205      	movs	r2, #5
   b95d8:	4629      	mov	r1, r5
   b95da:	4668      	mov	r0, sp
   b95dc:	f00a febc 	bl	c4358 <memcmp>
   b95e0:	b910      	cbnz	r0, b95e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b95e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b95e6:	e7ed      	b.n	b95c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b95e8:	492a      	ldr	r1, [pc, #168]	; (b9694 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b95ea:	4668      	mov	r0, sp
   b95ec:	f00a ff52 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95f0:	2205      	movs	r2, #5
   b95f2:	4629      	mov	r1, r5
   b95f4:	4668      	mov	r0, sp
   b95f6:	f00a feaf 	bl	c4358 <memcmp>
   b95fa:	b910      	cbnz	r0, b9602 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b95fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9600:	e7e0      	b.n	b95c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9602:	4925      	ldr	r1, [pc, #148]	; (b9698 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b9604:	4668      	mov	r0, sp
   b9606:	f00a ff45 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b960a:	2205      	movs	r2, #5
   b960c:	4629      	mov	r1, r5
   b960e:	4668      	mov	r0, sp
   b9610:	f00a fea2 	bl	c4358 <memcmp>
   b9614:	b910      	cbnz	r0, b961c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b9616:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b961a:	e7d3      	b.n	b95c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b961c:	491f      	ldr	r1, [pc, #124]	; (b969c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b961e:	4668      	mov	r0, sp
   b9620:	f00a ff38 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9624:	2205      	movs	r2, #5
   b9626:	4629      	mov	r1, r5
   b9628:	4668      	mov	r0, sp
   b962a:	f00a fe95 	bl	c4358 <memcmp>
   b962e:	b910      	cbnz	r0, b9636 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b9630:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9634:	e7c6      	b.n	b95c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9636:	491a      	ldr	r1, [pc, #104]	; (b96a0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b9638:	4668      	mov	r0, sp
   b963a:	f00a ff2b 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b963e:	2205      	movs	r2, #5
   b9640:	4629      	mov	r1, r5
   b9642:	4668      	mov	r0, sp
   b9644:	f00a fe88 	bl	c4358 <memcmp>
   b9648:	b910      	cbnz	r0, b9650 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b964a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b964e:	e7b9      	b.n	b95c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9650:	4914      	ldr	r1, [pc, #80]	; (b96a4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b9652:	4668      	mov	r0, sp
   b9654:	f00a ff1e 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9658:	2205      	movs	r2, #5
   b965a:	4629      	mov	r1, r5
   b965c:	4668      	mov	r0, sp
   b965e:	f00a fe7b 	bl	c4358 <memcmp>
   b9662:	b918      	cbnz	r0, b966c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9664:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9668:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b966a:	e7ad      	b.n	b95c8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b966c:	490e      	ldr	r1, [pc, #56]	; (b96a8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b966e:	4668      	mov	r0, sp
   b9670:	f00a ff10 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9674:	2205      	movs	r2, #5
   b9676:	4629      	mov	r1, r5
   b9678:	4668      	mov	r0, sp
   b967a:	f00a fe6d 	bl	c4358 <memcmp>
   b967e:	b910      	cbnz	r0, b9686 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9680:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9684:	e7f0      	b.n	b9668 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b9686:	2000      	movs	r0, #0
   b9688:	e79f      	b.n	b95ca <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b968a:	bf00      	nop
   b968c:	000c6dc8 	.word	0x000c6dc8
   b9690:	000c6d9e 	.word	0x000c6d9e
   b9694:	000c6da4 	.word	0x000c6da4
   b9698:	000c6daa 	.word	0x000c6daa
   b969c:	000c6db0 	.word	0x000c6db0
   b96a0:	000c6db6 	.word	0x000c6db6
   b96a4:	000c6dbc 	.word	0x000c6dbc
   b96a8:	000c6dc2 	.word	0x000c6dc2

000b96ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b96ac:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b96ae:	4b30      	ldr	r3, [pc, #192]	; (b9770 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b96b0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96b2:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b96b6:	6818      	ldr	r0, [r3, #0]
   b96b8:	9000      	str	r0, [sp, #0]
   b96ba:	889b      	ldrh	r3, [r3, #4]
   b96bc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96c0:	2205      	movs	r2, #5
   b96c2:	4621      	mov	r1, r4
   b96c4:	4668      	mov	r0, sp
   b96c6:	f00a fe47 	bl	c4358 <memcmp>
   b96ca:	b910      	cbnz	r0, b96d2 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b96cc:	2064      	movs	r0, #100	; 0x64
}
   b96ce:	b002      	add	sp, #8
   b96d0:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b96d2:	4928      	ldr	r1, [pc, #160]	; (b9774 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b96d4:	4668      	mov	r0, sp
   b96d6:	f00a fedd 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96da:	2205      	movs	r2, #5
   b96dc:	4621      	mov	r1, r4
   b96de:	4668      	mov	r0, sp
   b96e0:	f00a fe3a 	bl	c4358 <memcmp>
   b96e4:	2800      	cmp	r0, #0
   b96e6:	d0f1      	beq.n	b96cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b96e8:	4923      	ldr	r1, [pc, #140]	; (b9778 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b96ea:	4668      	mov	r0, sp
   b96ec:	f00a fed2 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96f0:	2205      	movs	r2, #5
   b96f2:	4621      	mov	r1, r4
   b96f4:	4668      	mov	r0, sp
   b96f6:	f00a fe2f 	bl	c4358 <memcmp>
   b96fa:	2800      	cmp	r0, #0
   b96fc:	d0e6      	beq.n	b96cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b96fe:	491f      	ldr	r1, [pc, #124]	; (b977c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b9700:	4668      	mov	r0, sp
   b9702:	f00a fec7 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9706:	2205      	movs	r2, #5
   b9708:	4621      	mov	r1, r4
   b970a:	4668      	mov	r0, sp
   b970c:	f00a fe24 	bl	c4358 <memcmp>
   b9710:	2800      	cmp	r0, #0
   b9712:	d0db      	beq.n	b96cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9714:	491a      	ldr	r1, [pc, #104]	; (b9780 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b9716:	4668      	mov	r0, sp
   b9718:	f00a febc 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b971c:	2205      	movs	r2, #5
   b971e:	4621      	mov	r1, r4
   b9720:	4668      	mov	r0, sp
   b9722:	f00a fe19 	bl	c4358 <memcmp>
   b9726:	2800      	cmp	r0, #0
   b9728:	d0d0      	beq.n	b96cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b972a:	4916      	ldr	r1, [pc, #88]	; (b9784 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b972c:	4668      	mov	r0, sp
   b972e:	f00a feb1 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9732:	2205      	movs	r2, #5
   b9734:	4621      	mov	r1, r4
   b9736:	4668      	mov	r0, sp
   b9738:	f00a fe0e 	bl	c4358 <memcmp>
   b973c:	2800      	cmp	r0, #0
   b973e:	d0c5      	beq.n	b96cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b9740:	4911      	ldr	r1, [pc, #68]	; (b9788 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b9742:	4668      	mov	r0, sp
   b9744:	f00a fea6 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9748:	2205      	movs	r2, #5
   b974a:	4621      	mov	r1, r4
   b974c:	4668      	mov	r0, sp
   b974e:	f00a fe03 	bl	c4358 <memcmp>
   b9752:	b148      	cbz	r0, b9768 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b9754:	490d      	ldr	r1, [pc, #52]	; (b978c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b9756:	4668      	mov	r0, sp
   b9758:	f00a fe9c 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b975c:	2205      	movs	r2, #5
   b975e:	4621      	mov	r1, r4
   b9760:	4668      	mov	r0, sp
   b9762:	f00a fdf9 	bl	c4358 <memcmp>
   b9766:	b908      	cbnz	r0, b976c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b9768:	2032      	movs	r0, #50	; 0x32
   b976a:	e7b0      	b.n	b96ce <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b976c:	2000      	movs	r0, #0
   b976e:	e7ae      	b.n	b96ce <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b9770:	000c6dc8 	.word	0x000c6dc8
   b9774:	000c6d9e 	.word	0x000c6d9e
   b9778:	000c6da4 	.word	0x000c6da4
   b977c:	000c6daa 	.word	0x000c6daa
   b9780:	000c6db0 	.word	0x000c6db0
   b9784:	000c6db6 	.word	0x000c6db6
   b9788:	000c6dbc 	.word	0x000c6dbc
   b978c:	000c6dc2 	.word	0x000c6dc2

000b9790 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b9790:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9792:	4b38      	ldr	r3, [pc, #224]	; (b9874 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9794:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9796:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b979a:	6818      	ldr	r0, [r3, #0]
   b979c:	9000      	str	r0, [sp, #0]
   b979e:	889b      	ldrh	r3, [r3, #4]
   b97a0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97a4:	2205      	movs	r2, #5
   b97a6:	4629      	mov	r1, r5
   b97a8:	4668      	mov	r0, sp
   b97aa:	f00a fdd5 	bl	c4358 <memcmp>
   b97ae:	b918      	cbnz	r0, b97b8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b97b0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b97b4:	b003      	add	sp, #12
   b97b6:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b97b8:	492f      	ldr	r1, [pc, #188]	; (b9878 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b97ba:	4668      	mov	r0, sp
   b97bc:	f00a fe6a 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97c0:	2205      	movs	r2, #5
   b97c2:	4629      	mov	r1, r5
   b97c4:	4668      	mov	r0, sp
   b97c6:	f00a fdc7 	bl	c4358 <memcmp>
   b97ca:	b910      	cbnz	r0, b97d2 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b97cc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b97d0:	e7f0      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b97d2:	492a      	ldr	r1, [pc, #168]	; (b987c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b97d4:	4668      	mov	r0, sp
   b97d6:	f00a fe5d 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97da:	2205      	movs	r2, #5
   b97dc:	4629      	mov	r1, r5
   b97de:	4668      	mov	r0, sp
   b97e0:	f00a fdba 	bl	c4358 <memcmp>
   b97e4:	b910      	cbnz	r0, b97ec <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b97e6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b97ea:	e7e3      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b97ec:	4924      	ldr	r1, [pc, #144]	; (b9880 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b97ee:	4668      	mov	r0, sp
   b97f0:	f00a fe50 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97f4:	2205      	movs	r2, #5
   b97f6:	4629      	mov	r1, r5
   b97f8:	4668      	mov	r0, sp
   b97fa:	f00a fdad 	bl	c4358 <memcmp>
   b97fe:	b910      	cbnz	r0, b9806 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9800:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9804:	e7d6      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9806:	491f      	ldr	r1, [pc, #124]	; (b9884 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b9808:	4668      	mov	r0, sp
   b980a:	f00a fe43 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b980e:	2205      	movs	r2, #5
   b9810:	4629      	mov	r1, r5
   b9812:	4668      	mov	r0, sp
   b9814:	f00a fda0 	bl	c4358 <memcmp>
   b9818:	b910      	cbnz	r0, b9820 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b981a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b981e:	e7c9      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9820:	4919      	ldr	r1, [pc, #100]	; (b9888 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b9822:	4668      	mov	r0, sp
   b9824:	f00a fe36 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9828:	2205      	movs	r2, #5
   b982a:	4629      	mov	r1, r5
   b982c:	4668      	mov	r0, sp
   b982e:	f00a fd93 	bl	c4358 <memcmp>
   b9832:	b910      	cbnz	r0, b983a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b9834:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9838:	e7bc      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b983a:	4914      	ldr	r1, [pc, #80]	; (b988c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b983c:	4668      	mov	r0, sp
   b983e:	f00a fe29 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9842:	2205      	movs	r2, #5
   b9844:	4629      	mov	r1, r5
   b9846:	4668      	mov	r0, sp
   b9848:	f00a fd86 	bl	c4358 <memcmp>
   b984c:	b910      	cbnz	r0, b9854 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b984e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9852:	e7af      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9854:	490e      	ldr	r1, [pc, #56]	; (b9890 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b9856:	4668      	mov	r0, sp
   b9858:	f00a fe1c 	bl	c4494 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b985c:	2205      	movs	r2, #5
   b985e:	4629      	mov	r1, r5
   b9860:	4668      	mov	r0, sp
   b9862:	f00a fd79 	bl	c4358 <memcmp>
   b9866:	b910      	cbnz	r0, b986e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b9868:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b986c:	e7a2      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b986e:	2000      	movs	r0, #0
   b9870:	e7a0      	b.n	b97b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9872:	bf00      	nop
   b9874:	000c6dc8 	.word	0x000c6dc8
   b9878:	000c6d9e 	.word	0x000c6d9e
   b987c:	000c6da4 	.word	0x000c6da4
   b9880:	000c6daa 	.word	0x000c6daa
   b9884:	000c6db0 	.word	0x000c6db0
   b9888:	000c6db6 	.word	0x000c6db6
   b988c:	000c6dbc 	.word	0x000c6dbc
   b9890:	000c6dc2 	.word	0x000c6dc2

000b9894 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9894:	4770      	bx	lr
	...

000b9898 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9898:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b989a:	8813      	ldrh	r3, [r2, #0]
   b989c:	4d0c      	ldr	r5, [pc, #48]	; (b98d0 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b989e:	2b01      	cmp	r3, #1
{
   b98a0:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b98a2:	d10e      	bne.n	b98c2 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b98a4:	020a      	lsls	r2, r1, #8
   b98a6:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b98aa:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b98ac:	3301      	adds	r3, #1
   b98ae:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b98b0:	f7ff fff0 	bl	b9894 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b98b4:	8820      	ldrh	r0, [r4, #0]
   b98b6:	882b      	ldrh	r3, [r5, #0]
}
   b98b8:	4298      	cmp	r0, r3
   b98ba:	bf14      	ite	ne
   b98bc:	2003      	movne	r0, #3
   b98be:	2000      	moveq	r0, #0
   b98c0:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b98c2:	2b02      	cmp	r3, #2
   b98c4:	d1f2      	bne.n	b98ac <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b98c6:	882a      	ldrh	r2, [r5, #0]
   b98c8:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b98ca:	3206      	adds	r2, #6
   b98cc:	e7ed      	b.n	b98aa <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b98ce:	bf00      	nop
   b98d0:	2003e61a 	.word	0x2003e61a

000b98d4 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b98d4:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b98d6:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b98d8:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b98da:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b98dc:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b98de:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b98e2:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b98e6:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b98ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b98ee:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b98f2:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b98f4:	4413      	add	r3, r2
   b98f6:	734b      	strb	r3, [r1, #13]
   b98f8:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b98fa:	b293      	uxth	r3, r2
   b98fc:	429c      	cmp	r4, r3
   b98fe:	d90a      	bls.n	b9916 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9900:	688b      	ldr	r3, [r1, #8]
   b9902:	7b08      	ldrb	r0, [r1, #12]
   b9904:	5c9b      	ldrb	r3, [r3, r2]
   b9906:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9908:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b990a:	b2db      	uxtb	r3, r3
   b990c:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b990e:	4403      	add	r3, r0
   b9910:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9912:	3201      	adds	r2, #1
   b9914:	e7f1      	b.n	b98fa <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9916:	bd30      	pop	{r4, r5, pc}

000b9918 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9918:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b991c:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b991e:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9922:	b2c9      	uxtb	r1, r1
   b9924:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9928:	4419      	add	r1, r3
   b992a:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b992e:	4770      	bx	lr

000b9930 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9934:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b9938:	f10b 0b08 	add.w	fp, fp, #8
   b993c:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b9940:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9944:	f1ab 0302 	sub.w	r3, fp, #2
{
   b9948:	4604      	mov	r4, r0
   b994a:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b994c:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b994e:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9950:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9952:	f1ba 0f00 	cmp.w	sl, #0
   b9956:	f000 80a6 	beq.w	b9aa6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b995a:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b995c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9960:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9964:	4556      	cmp	r6, sl
   b9966:	bf28      	it	cs
   b9968:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b996a:	ebaa 0a06 	sub.w	sl, sl, r6
   b996e:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9972:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b9976:	bf02      	ittt	eq
   b9978:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b997c:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b997e:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9982:	f006 f99b 	bl	bfcbc <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9986:	f1b9 0f00 	cmp.w	r9, #0
   b998a:	d15c      	bne.n	b9a46 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b998c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9990:	6803      	ldr	r3, [r0, #0]
   b9992:	21b5      	movs	r1, #181	; 0xb5
   b9994:	689b      	ldr	r3, [r3, #8]
   b9996:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9998:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b999c:	6803      	ldr	r3, [r0, #0]
   b999e:	2162      	movs	r1, #98	; 0x62
   b99a0:	689b      	ldr	r3, [r3, #8]
   b99a2:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b99a4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b99a8:	7829      	ldrb	r1, [r5, #0]
   b99aa:	6803      	ldr	r3, [r0, #0]
   b99ac:	689b      	ldr	r3, [r3, #8]
   b99ae:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b99b0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b99b4:	7869      	ldrb	r1, [r5, #1]
   b99b6:	6803      	ldr	r3, [r0, #0]
   b99b8:	689b      	ldr	r3, [r3, #8]
   b99ba:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b99bc:	78a9      	ldrb	r1, [r5, #2]
   b99be:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b99c2:	f7fe fdc1 	bl	b8548 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b99c6:	8869      	ldrh	r1, [r5, #2]
   b99c8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b99cc:	0a09      	lsrs	r1, r1, #8
   b99ce:	f7fe fdbb 	bl	b8548 <_ZN7TwoWire5writeEi.isra.0>
   b99d2:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b99d4:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b99d6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b99da:	fa1f f983 	uxth.w	r9, r3
   b99de:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b99e2:	454a      	cmp	r2, r9
   b99e4:	b2bf      	uxth	r7, r7
   b99e6:	d90d      	bls.n	b9a04 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b99e8:	42be      	cmp	r6, r7
   b99ea:	d90b      	bls.n	b9a04 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b99ec:	68aa      	ldr	r2, [r5, #8]
   b99ee:	6801      	ldr	r1, [r0, #0]
   b99f0:	9301      	str	r3, [sp, #4]
   b99f2:	4442      	add	r2, r8
   b99f4:	688f      	ldr	r7, [r1, #8]
   b99f6:	5cd1      	ldrb	r1, [r2, r3]
   b99f8:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b99fa:	9b01      	ldr	r3, [sp, #4]
   b99fc:	3301      	adds	r3, #1
   b99fe:	e7e9      	b.n	b99d4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9a00:	46b9      	mov	r9, r7
   b9a02:	e7a6      	b.n	b9952 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9a04:	3e02      	subs	r6, #2
      startSpot += x;
   b9a06:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9a08:	42b7      	cmp	r7, r6
      startSpot += x;
   b9a0a:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9a0e:	d10c      	bne.n	b9a2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9a10:	6803      	ldr	r3, [r0, #0]
   b9a12:	7b29      	ldrb	r1, [r5, #12]
   b9a14:	689b      	ldr	r3, [r3, #8]
   b9a16:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9a18:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9a1c:	7b69      	ldrb	r1, [r5, #13]
   b9a1e:	6803      	ldr	r3, [r0, #0]
   b9a20:	689b      	ldr	r3, [r3, #8]
   b9a22:	4798      	blx	r3
        bytesSent += 2;
   b9a24:	f109 0708 	add.w	r7, r9, #8
   b9a28:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b9a2a:	455f      	cmp	r7, fp
   b9a2c:	d2e8      	bcs.n	b9a00 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9a2e:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9a32:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9a36:	f006 f948 	bl	bfcca <_ZN7TwoWire15endTransmissionEh>
   b9a3a:	2800      	cmp	r0, #0
   b9a3c:	d0e0      	beq.n	b9a00 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b9a3e:	200c      	movs	r0, #12
}
   b9a40:	b003      	add	sp, #12
   b9a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9a46:	2200      	movs	r2, #0
   b9a48:	b291      	uxth	r1, r2
   b9a4a:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9a4e:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9a50:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9a54:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9a56:	d910      	bls.n	b9a7a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b9a58:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9a5c:	eb08 0c02 	add.w	ip, r8, r2
   b9a60:	1c53      	adds	r3, r2, #1
   b9a62:	45f4      	cmp	ip, lr
   b9a64:	9301      	str	r3, [sp, #4]
   b9a66:	da08      	bge.n	b9a7a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9a68:	68a9      	ldr	r1, [r5, #8]
   b9a6a:	6802      	ldr	r2, [r0, #0]
   b9a6c:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9a70:	6892      	ldr	r2, [r2, #8]
   b9a72:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9a74:	9b01      	ldr	r3, [sp, #4]
   b9a76:	461a      	mov	r2, r3
   b9a78:	e7e6      	b.n	b9a48 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9a7a:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9a7c:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9a7e:	429f      	cmp	r7, r3
      startSpot += x;
   b9a80:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9a84:	d1d1      	bne.n	b9a2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9a86:	3e02      	subs	r6, #2
   b9a88:	42b2      	cmp	r2, r6
   b9a8a:	d1ce      	bne.n	b9a2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9a8c:	6803      	ldr	r3, [r0, #0]
   b9a8e:	7b29      	ldrb	r1, [r5, #12]
   b9a90:	689b      	ldr	r3, [r3, #8]
   b9a92:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9a94:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9a98:	7b69      	ldrb	r1, [r5, #13]
   b9a9a:	6803      	ldr	r3, [r0, #0]
   b9a9c:	689b      	ldr	r3, [r3, #8]
   b9a9e:	4798      	blx	r3
        bytesSent += 2;
   b9aa0:	fa1f f78b 	uxth.w	r7, fp
   b9aa4:	e7c1      	b.n	b9a2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9aa6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9aaa:	f006 f912 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
   b9aae:	2800      	cmp	r0, #0
   b9ab0:	d0c6      	beq.n	b9a40 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9ab2:	e7c4      	b.n	b9a3e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9ab4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9ab4:	b570      	push	{r4, r5, r6, lr}
   b9ab6:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9ab8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9abc:	6803      	ldr	r3, [r0, #0]
{
   b9abe:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9ac0:	689b      	ldr	r3, [r3, #8]
   b9ac2:	21b5      	movs	r1, #181	; 0xb5
   b9ac4:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9ac6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9aca:	6803      	ldr	r3, [r0, #0]
   b9acc:	2162      	movs	r1, #98	; 0x62
   b9ace:	689b      	ldr	r3, [r3, #8]
   b9ad0:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9ad2:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9ad6:	7821      	ldrb	r1, [r4, #0]
   b9ad8:	6803      	ldr	r3, [r0, #0]
   b9ada:	689b      	ldr	r3, [r3, #8]
   b9adc:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9ade:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9ae2:	7861      	ldrb	r1, [r4, #1]
   b9ae4:	6803      	ldr	r3, [r0, #0]
   b9ae6:	689b      	ldr	r3, [r3, #8]
   b9ae8:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b9aea:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9aee:	78a1      	ldrb	r1, [r4, #2]
   b9af0:	6803      	ldr	r3, [r0, #0]
   b9af2:	689b      	ldr	r3, [r3, #8]
   b9af4:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9af6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9afa:	8861      	ldrh	r1, [r4, #2]
   b9afc:	6803      	ldr	r3, [r0, #0]
   b9afe:	0a09      	lsrs	r1, r1, #8
   b9b00:	689b      	ldr	r3, [r3, #8]
   b9b02:	4798      	blx	r3
   b9b04:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9b06:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b0a:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9b0c:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b0e:	b2b2      	uxth	r2, r6
   b9b10:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9b12:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b14:	d904      	bls.n	b9b20 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9b16:	68a1      	ldr	r1, [r4, #8]
   b9b18:	5c89      	ldrb	r1, [r1, r2]
   b9b1a:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9b1c:	3601      	adds	r6, #1
   b9b1e:	e7f2      	b.n	b9b06 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9b20:	7b21      	ldrb	r1, [r4, #12]
   b9b22:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9b24:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9b28:	7b61      	ldrb	r1, [r4, #13]
   b9b2a:	6803      	ldr	r3, [r0, #0]
}
   b9b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9b30:	689b      	ldr	r3, [r3, #8]
   b9b32:	4718      	bx	r3

000b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9b34:	b510      	push	{r4, lr}
   b9b36:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b9b38:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9b3c:	f007 fd6a 	bl	c1614 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9b40:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9b44:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9b48:	429a      	cmp	r2, r3
   b9b4a:	d90b      	bls.n	b9b64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9b4c:	28ff      	cmp	r0, #255	; 0xff
   b9b4e:	d101      	bne.n	b9b54 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9b50:	7822      	ldrb	r2, [r4, #0]
   b9b52:	b13a      	cbz	r2, b9b64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9b54:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9b58:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b9b5a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9b5e:	3301      	adds	r3, #1
   b9b60:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9b64:	bd10      	pop	{r4, pc}
	...

000b9b68 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9b68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9b6c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9b70:	4604      	mov	r4, r0
   b9b72:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9b74:	b97b      	cbnz	r3, b9b96 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9b76:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9b7a:	b923      	cbnz	r3, b9b86 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9b7c:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9b80:	2b00      	cmp	r3, #0
   b9b82:	f000 80ca 	beq.w	b9d1a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9b86:	4966      	ldr	r1, [pc, #408]	; (b9d20 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9b88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9b8c:	b004      	add	sp, #16
   b9b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9b92:	f007 bb60 	b.w	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9b96:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9b9a:	4a62      	ldr	r2, [pc, #392]	; (b9d24 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9b9c:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9b9e:	2600      	movs	r6, #0
   b9ba0:	2301      	movs	r3, #1
   b9ba2:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9ba6:	4669      	mov	r1, sp
   b9ba8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9bac:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9bb0:	9200      	str	r2, [sp, #0]
   b9bb2:	f88d 6004 	strb.w	r6, [sp, #4]
   b9bb6:	f007 fc8d 	bl	c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b9bba:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9bbe:	4631      	mov	r1, r6
   b9bc0:	f008 f92b 	bl	c1e1a <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9bc4:	21b5      	movs	r1, #181	; 0xb5
   b9bc6:	4620      	mov	r0, r4
   b9bc8:	f7ff ffb4 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9bcc:	2162      	movs	r1, #98	; 0x62
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f7ff ffb0 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9bd4:	7829      	ldrb	r1, [r5, #0]
   b9bd6:	4620      	mov	r0, r4
   b9bd8:	f7ff ffac 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9bdc:	7869      	ldrb	r1, [r5, #1]
   b9bde:	4620      	mov	r0, r4
   b9be0:	f7ff ffa8 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9be4:	78a9      	ldrb	r1, [r5, #2]
   b9be6:	4620      	mov	r0, r4
   b9be8:	f7ff ffa4 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9bec:	8869      	ldrh	r1, [r5, #2]
   b9bee:	4620      	mov	r0, r4
   b9bf0:	0a09      	lsrs	r1, r1, #8
   b9bf2:	f7ff ff9f 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9bf6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9bfa:	2b00      	cmp	r3, #0
   b9bfc:	d042      	beq.n	b9c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9bfe:	494a      	ldr	r1, [pc, #296]	; (b9d28 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9c00:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c04:	f007 fb27 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9c08:	2210      	movs	r2, #16
   b9c0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c0e:	21b5      	movs	r1, #181	; 0xb5
   b9c10:	f7fe fc8a 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9c14:	4945      	ldr	r1, [pc, #276]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9c16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c1a:	f007 fb1c 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9c1e:	2210      	movs	r2, #16
   b9c20:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c24:	2162      	movs	r1, #98	; 0x62
   b9c26:	f7fe fc7f 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9c2a:	4940      	ldr	r1, [pc, #256]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9c2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c30:	f007 fb11 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9c34:	2210      	movs	r2, #16
   b9c36:	7829      	ldrb	r1, [r5, #0]
   b9c38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c3c:	f7fe fc74 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9c40:	493a      	ldr	r1, [pc, #232]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9c42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c46:	f007 fb06 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9c4a:	2210      	movs	r2, #16
   b9c4c:	7869      	ldrb	r1, [r5, #1]
   b9c4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c52:	f7fe fc69 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9c56:	4935      	ldr	r1, [pc, #212]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9c58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c5c:	f007 fafb 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9c60:	2210      	movs	r2, #16
   b9c62:	78a9      	ldrb	r1, [r5, #2]
   b9c64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c68:	f007 fb11 	bl	c128e <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9c6c:	492f      	ldr	r1, [pc, #188]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9c6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c72:	f007 faf0 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9c76:	8869      	ldrh	r1, [r5, #2]
   b9c78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c7c:	2210      	movs	r2, #16
   b9c7e:	0a09      	lsrs	r1, r1, #8
   b9c80:	f007 fb05 	bl	c128e <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9c84:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9c88:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9c8a:	886a      	ldrh	r2, [r5, #2]
   b9c8c:	b2b3      	uxth	r3, r6
   b9c8e:	429a      	cmp	r2, r3
   b9c90:	d916      	bls.n	b9cc0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9c92:	461f      	mov	r7, r3
   b9c94:	68ab      	ldr	r3, [r5, #8]
   b9c96:	4620      	mov	r0, r4
   b9c98:	5dd9      	ldrb	r1, [r3, r7]
   b9c9a:	f7ff ff4b 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9c9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ca2:	b15b      	cbz	r3, b9cbc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9ca4:	4641      	mov	r1, r8
   b9ca6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9caa:	f007 fad4 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9cae:	68ab      	ldr	r3, [r5, #8]
   b9cb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cb4:	5dd9      	ldrb	r1, [r3, r7]
   b9cb6:	2210      	movs	r2, #16
   b9cb8:	f7fe fc36 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9cbc:	3601      	adds	r6, #1
   b9cbe:	e7e4      	b.n	b9c8a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9cc0:	7b29      	ldrb	r1, [r5, #12]
   b9cc2:	4620      	mov	r0, r4
   b9cc4:	f7ff ff36 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9cc8:	7b69      	ldrb	r1, [r5, #13]
   b9cca:	4620      	mov	r0, r4
   b9ccc:	f7ff ff32 	bl	b9b34 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9cd0:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9cd4:	2101      	movs	r1, #1
   b9cd6:	f008 f8a0 	bl	c1e1a <digitalWrite>
  _spiPort->endTransaction();
   b9cda:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9cde:	f007 fbdf 	bl	c14a0 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9ce2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ce6:	b1c3      	cbz	r3, b9d1a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9ce8:	4910      	ldr	r1, [pc, #64]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9cea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cee:	f007 fab2 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9cf2:	7b29      	ldrb	r1, [r5, #12]
   b9cf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cf8:	2210      	movs	r2, #16
   b9cfa:	f7fe fc15 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9cfe:	490b      	ldr	r1, [pc, #44]	; (b9d2c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9d00:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d04:	f007 faa7 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9d08:	7b69      	ldrb	r1, [r5, #13]
   b9d0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d0e:	2210      	movs	r2, #16
}
   b9d10:	b004      	add	sp, #16
   b9d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9d16:	f7fe bc0e 	b.w	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9d1a:	b004      	add	sp, #16
   b9d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9d20:	000c6dce 	.word	0x000c6dce
   b9d24:	000c6b84 	.word	0x000c6b84
   b9d28:	000c6e03 	.word	0x000c6e03
   b9d2c:	000c7d51 	.word	0x000c7d51

000b9d30 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9d32:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9d36:	4604      	mov	r4, r0
   b9d38:	460d      	mov	r5, r1
   b9d3a:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9d3c:	2b00      	cmp	r3, #0
   b9d3e:	f000 8082 	beq.w	b9e46 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9d42:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9d46:	4940      	ldr	r1, [pc, #256]	; (b9e48 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9d48:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9d4c:	f007 fa83 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9d50:	782b      	ldrb	r3, [r5, #0]
   b9d52:	2b01      	cmp	r3, #1
   b9d54:	d13c      	bne.n	b9dd0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9d56:	493d      	ldr	r1, [pc, #244]	; (b9e4c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9d58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9d5c:	f007 fa7b 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9d60:	493b      	ldr	r1, [pc, #236]	; (b9e50 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9d62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d66:	f007 fa76 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9d6a:	882b      	ldrh	r3, [r5, #0]
   b9d6c:	f240 7201 	movw	r2, #1793	; 0x701
   b9d70:	4293      	cmp	r3, r2
   b9d72:	d145      	bne.n	b9e00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9d74:	4937      	ldr	r1, [pc, #220]	; (b9e54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9d76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9d7a:	f007 fa6c 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9d7e:	4936      	ldr	r1, [pc, #216]	; (b9e58 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9d80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d84:	f007 fa67 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
   b9d88:	8869      	ldrh	r1, [r5, #2]
   b9d8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9d8e:	2210      	movs	r2, #16
   b9d90:	f007 fa7d 	bl	c128e <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9d94:	2f01      	cmp	r7, #1
   b9d96:	d101      	bne.n	b9d9c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9d98:	2e00      	cmp	r6, #0
   b9d9a:	d049      	beq.n	b9e30 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9d9c:	492f      	ldr	r1, [pc, #188]	; (b9e5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9d9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9da2:	4f2f      	ldr	r7, [pc, #188]	; (b9e60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9da4:	f007 fa57 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
   b9da8:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9daa:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9dac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9db0:	b2b3      	uxth	r3, r6
   b9db2:	429a      	cmp	r2, r3
   b9db4:	d941      	bls.n	b9e3a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9db6:	4639      	mov	r1, r7
   b9db8:	f007 fa4d 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9dbc:	b2b3      	uxth	r3, r6
   b9dbe:	68a9      	ldr	r1, [r5, #8]
   b9dc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9dc4:	5cc9      	ldrb	r1, [r1, r3]
   b9dc6:	2210      	movs	r2, #16
   b9dc8:	f7fe fbae 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9dcc:	3601      	adds	r6, #1
   b9dce:	e7ec      	b.n	b9daa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9dd0:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9dd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9dd6:	d101      	bne.n	b9ddc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9dd8:	4922      	ldr	r1, [pc, #136]	; (b9e64 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b9dda:	e7bf      	b.n	b9d5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9ddc:	2b06      	cmp	r3, #6
   b9dde:	d101      	bne.n	b9de4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9de0:	4921      	ldr	r1, [pc, #132]	; (b9e68 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9de2:	e7bb      	b.n	b9d5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9de4:	2b0a      	cmp	r3, #10
   b9de6:	d101      	bne.n	b9dec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9de8:	4920      	ldr	r1, [pc, #128]	; (b9e6c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b9dea:	e7b7      	b.n	b9d5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9dec:	4920      	ldr	r1, [pc, #128]	; (b9e70 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9dee:	f007 fa32 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9df2:	7829      	ldrb	r1, [r5, #0]
   b9df4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9df8:	2210      	movs	r2, #16
   b9dfa:	f7fe fb95 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9dfe:	e7af      	b.n	b9d60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9e00:	f640 0206 	movw	r2, #2054	; 0x806
   b9e04:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9e06:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9e0a:	d101      	bne.n	b9e10 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9e0c:	4919      	ldr	r1, [pc, #100]	; (b9e74 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9e0e:	e7b4      	b.n	b9d7a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9e10:	f640 1206 	movw	r2, #2310	; 0x906
   b9e14:	4293      	cmp	r3, r2
   b9e16:	d101      	bne.n	b9e1c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9e18:	4917      	ldr	r1, [pc, #92]	; (b9e78 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9e1a:	e7ae      	b.n	b9d7a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9e1c:	4914      	ldr	r1, [pc, #80]	; (b9e70 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9e1e:	f007 fa1a 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9e22:	7869      	ldrb	r1, [r5, #1]
   b9e24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e28:	2210      	movs	r2, #16
   b9e2a:	f7fe fb7d 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9e2e:	e7a6      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9e30:	4912      	ldr	r1, [pc, #72]	; (b9e7c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9e32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e36:	f007 fa0e 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9e3a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9e42:	f007 ba0c 	b.w	c125e <_ZN5Print7printlnEv>
}
   b9e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9e48:	000c6e14 	.word	0x000c6e14
   b9e4c:	000c6e19 	.word	0x000c6e19
   b9e50:	000c6e29 	.word	0x000c6e29
   b9e54:	000c6e2e 	.word	0x000c6e2e
   b9e58:	000c6e3c 	.word	0x000c6e3c
   b9e5c:	000c6e45 	.word	0x000c6e45
   b9e60:	000c7d51 	.word	0x000c7d51
   b9e64:	000c6e1d 	.word	0x000c6e1d
   b9e68:	000c6e21 	.word	0x000c6e21
   b9e6c:	000c6e25 	.word	0x000c6e25
   b9e70:	000c709a 	.word	0x000c709a
   b9e74:	000c6e32 	.word	0x000c6e32
   b9e78:	000c6e37 	.word	0x000c6e37
   b9e7c:	000c6e4f 	.word	0x000c6e4f

000b9e80 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9e80:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9e82:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9e86:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9e88:	b955      	cbnz	r5, b9ea0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b9e8a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9e8e:	b90b      	cbnz	r3, b9e94 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9e90:	2000      	movs	r0, #0
}
   b9e92:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9e94:	491a      	ldr	r1, [pc, #104]	; (b9f00 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9e96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e9a:	f007 f9f6 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9e9e:	e7f7      	b.n	b9e90 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9ea0:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9ea4:	b12b      	cbz	r3, b9eb2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9ea6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9eaa:	2b00      	cmp	r3, #0
   b9eac:	d0f0      	beq.n	b9e90 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9eae:	4915      	ldr	r1, [pc, #84]	; (b9f04 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9eb0:	e7f1      	b.n	b9e96 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9eb2:	4628      	mov	r0, r5
   b9eb4:	f7fa f8f1 	bl	b409a <_Znaj>
   b9eb8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ebc:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9ec0:	b930      	cbnz	r0, b9ed0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9ec2:	b91b      	cbnz	r3, b9ecc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9ec4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9ec8:	2b00      	cmp	r3, #0
   b9eca:	d0e1      	beq.n	b9e90 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9ecc:	490e      	ldr	r1, [pc, #56]	; (b9f08 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9ece:	e7e2      	b.n	b9e96 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9ed0:	b17b      	cbz	r3, b9ef2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9ed2:	490e      	ldr	r1, [pc, #56]	; (b9f0c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9ed4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ed8:	f007 f9bd 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9edc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9ee0:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9ee4:	220a      	movs	r2, #10
   b9ee6:	4628      	mov	r0, r5
   b9ee8:	f007 f9d1 	bl	c128e <_ZN5Print11printNumberEmh>
        n += println();
   b9eec:	4628      	mov	r0, r5
   b9eee:	f007 f9b6 	bl	c125e <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9ef2:	2300      	movs	r3, #0
   b9ef4:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9ef8:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9efc:	2001      	movs	r0, #1
   b9efe:	e7c8      	b.n	b9e92 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9f00:	000c6e61 	.word	0x000c6e61
   b9f04:	000c6eb2 	.word	0x000c6eb2
   b9f08:	000c6ef5 	.word	0x000c6ef5
   b9f0c:	000c6f19 	.word	0x000c6f19

000b9f10 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9f10:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9f14:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9f18:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9f1a:	bf3b      	ittet	cc
   b9f1c:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9f20:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9f22:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9f24:	1a80      	subcc	r0, r0, r2
   b9f26:	b280      	uxth	r0, r0
}
   b9f28:	4770      	bx	lr

000b9f2a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b9f2a:	b508      	push	{r3, lr}
   b9f2c:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9f2e:	f7ff ffef 	bl	b9f10 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9f32:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b9f36:	1a18      	subs	r0, r3, r0
}
   b9f38:	b280      	uxth	r0, r0
   b9f3a:	bd08      	pop	{r3, pc}

000b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b9f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9f40:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9f44:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9f48:	1aed      	subs	r5, r5, r3
   b9f4a:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9f4c:	4295      	cmp	r5, r2
   b9f4e:	bf28      	it	cs
   b9f50:	4615      	movcs	r5, r2
{
   b9f52:	4616      	mov	r6, r2
   b9f54:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9f56:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9f5a:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9f5c:	462a      	mov	r2, r5
   b9f5e:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9f60:	b2bf      	uxth	r7, r7
{
   b9f62:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9f64:	f00a fa08 	bl	c4378 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9f68:	b19f      	cbz	r7, b9f92 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b9f6a:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9f6e:	463a      	mov	r2, r7
   b9f70:	eb08 0105 	add.w	r1, r8, r5
   b9f74:	f00a fa00 	bl	c4378 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9f78:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9f7c:	4620      	mov	r0, r4
   b9f7e:	f7ff ffc7 	bl	b9f10 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9f82:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9f86:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9f88:	bf38      	it	cc
   b9f8a:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9f92:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9f96:	4416      	add	r6, r2
   b9f98:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9f9c:	e7ee      	b.n	b9f7c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9fa0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9fa2:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9fa6:	4604      	mov	r4, r0
   b9fa8:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9faa:	b113      	cbz	r3, b9fb2 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9fac:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9fb0:	b953      	cbnz	r3, b9fc8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9fb2:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9fb6:	b128      	cbz	r0, b9fc4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9fb8:	4924      	ldr	r1, [pc, #144]	; (ba04c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9fba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fbe:	f007 f964 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9fc2:	2000      	movs	r0, #0
}
   b9fc4:	b003      	add	sp, #12
   b9fc6:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9fc8:	f7ff ffaf 	bl	b9f2a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9fcc:	886b      	ldrh	r3, [r5, #2]
   b9fce:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9fd0:	b29b      	uxth	r3, r3
   b9fd2:	4283      	cmp	r3, r0
   b9fd4:	d908      	bls.n	b9fe8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9fd6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9fda:	b91b      	cbnz	r3, b9fe4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9fdc:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9fe0:	2800      	cmp	r0, #0
   b9fe2:	d0ef      	beq.n	b9fc4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9fe4:	491a      	ldr	r1, [pc, #104]	; (ba050 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9fe6:	e7e8      	b.n	b9fba <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9fe8:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9fec:	2202      	movs	r2, #2
   b9fee:	4669      	mov	r1, sp
   b9ff0:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9ff2:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9ff6:	f7ff ffa1 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b9ffa:	2201      	movs	r2, #1
   b9ffc:	4629      	mov	r1, r5
   b9ffe:	4620      	mov	r0, r4
   ba000:	f7ff ff9c 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   ba004:	2201      	movs	r2, #1
   ba006:	18a9      	adds	r1, r5, r2
   ba008:	4620      	mov	r0, r4
   ba00a:	f7ff ff97 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   ba00e:	886b      	ldrh	r3, [r5, #2]
   ba010:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   ba014:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   ba016:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   ba018:	a901      	add	r1, sp, #4
   ba01a:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   ba01c:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   ba020:	f7ff ff8c 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   ba024:	886a      	ldrh	r2, [r5, #2]
   ba026:	68a9      	ldr	r1, [r5, #8]
   ba028:	4620      	mov	r0, r4
   ba02a:	f7ff ff87 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   ba02e:	2201      	movs	r2, #1
   ba030:	f105 010c 	add.w	r1, r5, #12
   ba034:	4620      	mov	r0, r4
   ba036:	f7ff ff81 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   ba03a:	4620      	mov	r0, r4
   ba03c:	2201      	movs	r2, #1
   ba03e:	f105 010d 	add.w	r1, r5, #13
   ba042:	f7ff ff7b 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   ba046:	2001      	movs	r0, #1
   ba048:	e7bc      	b.n	b9fc4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   ba04a:	bf00      	nop
   ba04c:	000c6f3f 	.word	0x000c6f3f
   ba050:	000c6f67 	.word	0x000c6f67

000ba054 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   ba054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   ba058:	780e      	ldrb	r6, [r1, #0]
   ba05a:	2e0d      	cmp	r6, #13
{
   ba05c:	4604      	mov	r4, r0
   ba05e:	460d      	mov	r5, r1
  switch (msg->cls)
   ba060:	f001 8228 	beq.w	bb4b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   ba064:	d809      	bhi.n	ba07a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   ba066:	2e02      	cmp	r6, #2
   ba068:	f000 879a 	beq.w	bafa0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   ba06c:	2e06      	cmp	r6, #6
   ba06e:	f001 81cc 	beq.w	bb40a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   ba072:	2e01      	cmp	r6, #1
   ba074:	d04f      	beq.n	ba116 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   ba076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   ba07a:	2e13      	cmp	r6, #19
   ba07c:	f001 83eb 	beq.w	bb856 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   ba080:	2e28      	cmp	r6, #40	; 0x28
   ba082:	f001 84ca 	beq.w	bba1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   ba086:	2e10      	cmp	r6, #16
   ba088:	d1f5      	bne.n	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   ba08a:	680b      	ldr	r3, [r1, #0]
   ba08c:	4a8e      	ldr	r2, [pc, #568]	; (ba2c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   ba08e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba092:	4293      	cmp	r3, r2
   ba094:	f041 826a 	bne.w	bb56c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   ba098:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   ba09a:	2e00      	cmp	r6, #0
   ba09c:	d0eb      	beq.n	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   ba09e:	68a8      	ldr	r0, [r5, #8]
   ba0a0:	2100      	movs	r1, #0
   ba0a2:	f7fe fa21 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0a6:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   ba0a8:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba0aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba0ac:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba0ae:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba0b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba0b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba0b4:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba0b6:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba0b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba0ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba0bc:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba0be:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   ba0c0:	68a8      	ldr	r0, [r5, #8]
   ba0c2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   ba0c4:	2108      	movs	r1, #8
   ba0c6:	f7fe fa0f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0ca:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba0ce:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0d0:	210c      	movs	r1, #12
   ba0d2:	f7fe fa16 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba0d6:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba0da:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0dc:	210e      	movs	r1, #14
   ba0de:	f7fe fa10 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba0e2:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba0e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba0e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0ea:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba0ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba0ee:	6a1a      	ldr	r2, [r3, #32]
   ba0f0:	b17a      	cbz	r2, ba112 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba0f2:	7819      	ldrb	r1, [r3, #0]
   ba0f4:	0708      	lsls	r0, r1, #28
   ba0f6:	d40c      	bmi.n	ba112 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   ba0f8:	1d19      	adds	r1, r3, #4
   ba0fa:	3314      	adds	r3, #20
   ba0fc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba100:	f842 0b04 	str.w	r0, [r2], #4
   ba104:	4299      	cmp	r1, r3
   ba106:	d1f9      	bne.n	ba0fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   ba108:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   ba10a:	7813      	ldrb	r3, [r2, #0]
   ba10c:	f043 0308 	orr.w	r3, r3, #8
   ba110:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   ba112:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba114:	e03d      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   ba116:	680b      	ldr	r3, [r1, #0]
   ba118:	4a6c      	ldr	r2, [pc, #432]	; (ba2cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   ba11a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba11e:	4293      	cmp	r3, r2
   ba120:	d141      	bne.n	ba1a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   ba122:	68c6      	ldr	r6, [r0, #12]
   ba124:	2e00      	cmp	r6, #0
   ba126:	d0a6      	beq.n	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   ba128:	68a8      	ldr	r0, [r5, #8]
   ba12a:	2100      	movs	r1, #0
   ba12c:	f7fe f9dc 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba130:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba132:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba134:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba136:	2104      	movs	r1, #4
   ba138:	f7fe f9d6 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba13c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba13e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba140:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba142:	2108      	movs	r1, #8
   ba144:	f7fe f9d0 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba148:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba14a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba14c:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba14e:	210c      	movs	r1, #12
   ba150:	f7fe f9ca 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba154:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   ba156:	68a8      	ldr	r0, [r5, #8]
   ba158:	68e6      	ldr	r6, [r4, #12]
   ba15a:	2110      	movs	r1, #16
   ba15c:	f7fe f9c4 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba160:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba162:	68e3      	ldr	r3, [r4, #12]
   ba164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba168:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba16a:	68e3      	ldr	r3, [r4, #12]
   ba16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba16e:	b17a      	cbz	r2, ba190 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba170:	7819      	ldrb	r1, [r3, #0]
   ba172:	0709      	lsls	r1, r1, #28
   ba174:	d40c      	bmi.n	ba190 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   ba176:	1d19      	adds	r1, r3, #4
   ba178:	3318      	adds	r3, #24
   ba17a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba17e:	f842 0b04 	str.w	r0, [r2], #4
   ba182:	4299      	cmp	r1, r3
   ba184:	d1f9      	bne.n	ba17a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba186:	68e2      	ldr	r2, [r4, #12]
   ba188:	7813      	ldrb	r3, [r2, #0]
   ba18a:	f043 0308 	orr.w	r3, r3, #8
   ba18e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba190:	68e3      	ldr	r3, [r4, #12]
   ba192:	781b      	ldrb	r3, [r3, #0]
   ba194:	075f      	lsls	r7, r3, #29
   ba196:	f57f af6e 	bpl.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   ba19a:	4629      	mov	r1, r5
   ba19c:	4620      	mov	r0, r4
}
   ba19e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   ba1a2:	f7ff befd 	b.w	b9fa0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   ba1a6:	4a4a      	ldr	r2, [pc, #296]	; (ba2d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   ba1a8:	4293      	cmp	r3, r2
   ba1aa:	d13d      	bne.n	ba228 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   ba1ac:	6906      	ldr	r6, [r0, #16]
   ba1ae:	2e00      	cmp	r6, #0
   ba1b0:	f43f af61 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   ba1b4:	68a8      	ldr	r0, [r5, #8]
   ba1b6:	2100      	movs	r1, #0
   ba1b8:	f7fe f996 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1bc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba1be:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba1c0:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba1c2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba1c4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba1c6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba1c8:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba1ca:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba1cc:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba1ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba1d0:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba1d2:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba1d4:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba1d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba1d8:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba1da:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba1dc:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba1de:	68a8      	ldr	r0, [r5, #8]
   ba1e0:	6926      	ldr	r6, [r4, #16]
   ba1e2:	2108      	movs	r1, #8
   ba1e4:	f7fe f980 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1e8:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba1ea:	68a8      	ldr	r0, [r5, #8]
   ba1ec:	6926      	ldr	r6, [r4, #16]
   ba1ee:	210c      	movs	r1, #12
   ba1f0:	f7fe f97a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1f4:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1f6:	6923      	ldr	r3, [r4, #16]
   ba1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba1fc:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba1fe:	6923      	ldr	r3, [r4, #16]
   ba200:	6a1a      	ldr	r2, [r3, #32]
   ba202:	b17a      	cbz	r2, ba224 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba204:	7819      	ldrb	r1, [r3, #0]
   ba206:	070e      	lsls	r6, r1, #28
   ba208:	d40c      	bmi.n	ba224 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba20a:	1d19      	adds	r1, r3, #4
   ba20c:	3314      	adds	r3, #20
   ba20e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba212:	f842 0b04 	str.w	r0, [r2], #4
   ba216:	4299      	cmp	r1, r3
   ba218:	d1f9      	bne.n	ba20e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba21a:	6922      	ldr	r2, [r4, #16]
   ba21c:	7813      	ldrb	r3, [r2, #0]
   ba21e:	f043 0308 	orr.w	r3, r3, #8
   ba222:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba224:	6923      	ldr	r3, [r4, #16]
   ba226:	e7b4      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba228:	4a2a      	ldr	r2, [pc, #168]	; (ba2d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba22a:	4293      	cmp	r3, r2
   ba22c:	d154      	bne.n	ba2d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba22e:	6946      	ldr	r6, [r0, #20]
   ba230:	2e00      	cmp	r6, #0
   ba232:	f43f af20 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba236:	68a8      	ldr	r0, [r5, #8]
   ba238:	2100      	movs	r1, #0
   ba23a:	f7fe f955 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba23e:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba240:	68a8      	ldr	r0, [r5, #8]
   ba242:	6966      	ldr	r6, [r4, #20]
   ba244:	2104      	movs	r1, #4
   ba246:	f7fe f95c 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba24a:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba24c:	68a8      	ldr	r0, [r5, #8]
   ba24e:	6966      	ldr	r6, [r4, #20]
   ba250:	2106      	movs	r1, #6
   ba252:	f7fe f956 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba256:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba258:	68a8      	ldr	r0, [r5, #8]
   ba25a:	6966      	ldr	r6, [r4, #20]
   ba25c:	2108      	movs	r1, #8
   ba25e:	f7fe f950 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba262:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba264:	68a8      	ldr	r0, [r5, #8]
   ba266:	6966      	ldr	r6, [r4, #20]
   ba268:	210a      	movs	r1, #10
   ba26a:	f7fe f94a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba26e:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba270:	68a8      	ldr	r0, [r5, #8]
   ba272:	6966      	ldr	r6, [r4, #20]
   ba274:	210c      	movs	r1, #12
   ba276:	f7fe f944 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba27a:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba27c:	68a8      	ldr	r0, [r5, #8]
   ba27e:	6966      	ldr	r6, [r4, #20]
   ba280:	210e      	movs	r1, #14
   ba282:	f7fe f93e 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba286:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba288:	68a8      	ldr	r0, [r5, #8]
   ba28a:	6966      	ldr	r6, [r4, #20]
   ba28c:	2110      	movs	r1, #16
   ba28e:	f7fe f938 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba292:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba294:	6963      	ldr	r3, [r4, #20]
   ba296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba29a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba29c:	6963      	ldr	r3, [r4, #20]
   ba29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba2a0:	b17a      	cbz	r2, ba2c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba2a2:	7819      	ldrb	r1, [r3, #0]
   ba2a4:	0708      	lsls	r0, r1, #28
   ba2a6:	d40c      	bmi.n	ba2c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba2a8:	1d19      	adds	r1, r3, #4
   ba2aa:	3318      	adds	r3, #24
   ba2ac:	f851 0b04 	ldr.w	r0, [r1], #4
   ba2b0:	f842 0b04 	str.w	r0, [r2], #4
   ba2b4:	4299      	cmp	r1, r3
   ba2b6:	d1f9      	bne.n	ba2ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba2b8:	6962      	ldr	r2, [r4, #20]
   ba2ba:	7813      	ldrb	r3, [r2, #0]
   ba2bc:	f043 0308 	orr.w	r3, r3, #8
   ba2c0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba2c2:	6963      	ldr	r3, [r4, #20]
   ba2c4:	e765      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba2c6:	bf00      	nop
   ba2c8:	00101400 	.word	0x00101400
   ba2cc:	00140100 	.word	0x00140100
   ba2d0:	00100300 	.word	0x00100300
   ba2d4:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba2d8:	4a8c      	ldr	r2, [pc, #560]	; (ba50c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba2da:	4293      	cmp	r3, r2
   ba2dc:	d149      	bne.n	ba372 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba2de:	69c6      	ldr	r6, [r0, #28]
   ba2e0:	2e00      	cmp	r6, #0
   ba2e2:	f43f aec8 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba2e6:	68a8      	ldr	r0, [r5, #8]
   ba2e8:	2100      	movs	r1, #0
   ba2ea:	f7fe f8fd 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ee:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba2f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba2f2:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba2f4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba2f6:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba2fa:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2fc:	2108      	movs	r1, #8
   ba2fe:	f7fe f8f3 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba302:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba304:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba306:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba308:	210c      	movs	r1, #12
   ba30a:	f7fe f8ed 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba30e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba310:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba312:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba314:	2110      	movs	r1, #16
   ba316:	f7fe f8e7 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba31a:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba31c:	68a8      	ldr	r0, [r5, #8]
   ba31e:	69e6      	ldr	r6, [r4, #28]
   ba320:	2114      	movs	r1, #20
   ba322:	f7fe f8e1 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba326:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba328:	68a8      	ldr	r0, [r5, #8]
   ba32a:	69e6      	ldr	r6, [r4, #28]
   ba32c:	2118      	movs	r1, #24
   ba32e:	f7fe f8db 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba332:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba334:	68a8      	ldr	r0, [r5, #8]
   ba336:	69e6      	ldr	r6, [r4, #28]
   ba338:	211c      	movs	r1, #28
   ba33a:	f7fe f8d5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba33e:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba340:	69e3      	ldr	r3, [r4, #28]
   ba342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba346:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba348:	69e3      	ldr	r3, [r4, #28]
   ba34a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba34c:	b17a      	cbz	r2, ba36e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba34e:	7819      	ldrb	r1, [r3, #0]
   ba350:	0709      	lsls	r1, r1, #28
   ba352:	d40c      	bmi.n	ba36e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba354:	1d19      	adds	r1, r3, #4
   ba356:	3324      	adds	r3, #36	; 0x24
   ba358:	f851 0b04 	ldr.w	r0, [r1], #4
   ba35c:	f842 0b04 	str.w	r0, [r2], #4
   ba360:	4299      	cmp	r1, r3
   ba362:	d1f9      	bne.n	ba358 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba364:	69e2      	ldr	r2, [r4, #28]
   ba366:	7813      	ldrb	r3, [r2, #0]
   ba368:	f043 0308 	orr.w	r3, r3, #8
   ba36c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba36e:	69e3      	ldr	r3, [r4, #28]
   ba370:	e70f      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba372:	4a67      	ldr	r2, [pc, #412]	; (ba510 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba374:	4293      	cmp	r3, r2
   ba376:	f040 80cd 	bne.w	ba514 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba37a:	6a06      	ldr	r6, [r0, #32]
   ba37c:	2e00      	cmp	r6, #0
   ba37e:	f43f ae7a 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba382:	68a8      	ldr	r0, [r5, #8]
   ba384:	2100      	movs	r1, #0
   ba386:	f7fe f8af 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38a:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba38c:	68a8      	ldr	r0, [r5, #8]
   ba38e:	6a26      	ldr	r6, [r4, #32]
   ba390:	2104      	movs	r1, #4
   ba392:	f7fe f8b6 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba396:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba398:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba39a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba39c:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba39e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba3a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba3a2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3a4:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba3a6:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba3a8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba3aa:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3ac:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba3ae:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba3b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba3b2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3b4:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba3b6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba3b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba3ba:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3bc:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba3be:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba3c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba3c2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3c4:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba3c6:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba3c8:	210c      	movs	r1, #12
   ba3ca:	68a8      	ldr	r0, [r5, #8]
   ba3cc:	6a26      	ldr	r6, [r4, #32]
   ba3ce:	f7fe f88b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3d2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3d4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba3d6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3d8:	2110      	movs	r1, #16
   ba3da:	f7fe f885 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba3de:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba3e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba3e2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3e4:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba3e6:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba3e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba3ea:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3ec:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba3ee:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba3f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba3f2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3f4:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba3f6:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba3f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba3fa:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba3fc:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba3fe:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba400:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba402:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba404:	2118      	movs	r1, #24
   ba406:	f7fe f86f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba40a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba40c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba40e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba410:	211c      	movs	r1, #28
   ba412:	f7fe f869 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba416:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba418:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba41a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba41c:	2120      	movs	r1, #32
   ba41e:	f7fe f863 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba422:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba424:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba426:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba428:	2124      	movs	r1, #36	; 0x24
   ba42a:	f7fe f85d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba42e:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba430:	68a8      	ldr	r0, [r5, #8]
   ba432:	6a26      	ldr	r6, [r4, #32]
   ba434:	2128      	movs	r1, #40	; 0x28
   ba436:	f7fe f857 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba43a:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba43c:	6a26      	ldr	r6, [r4, #32]
   ba43e:	68a8      	ldr	r0, [r5, #8]
   ba440:	212c      	movs	r1, #44	; 0x2c
   ba442:	f7fe f851 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba446:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba448:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba44a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba44c:	2130      	movs	r1, #48	; 0x30
   ba44e:	f7fe f84b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba452:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba454:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba456:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba458:	2134      	movs	r1, #52	; 0x34
   ba45a:	f7fe f845 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba45e:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba460:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba462:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba464:	2138      	movs	r1, #56	; 0x38
   ba466:	f7fe f83f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba46a:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba46c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba46e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba470:	213c      	movs	r1, #60	; 0x3c
   ba472:	f7fe f839 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba476:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba478:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba47a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba47c:	2140      	movs	r1, #64	; 0x40
   ba47e:	f7fe f833 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba482:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba484:	68a8      	ldr	r0, [r5, #8]
   ba486:	6a26      	ldr	r6, [r4, #32]
   ba488:	2144      	movs	r1, #68	; 0x44
   ba48a:	f7fe f82d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba48e:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba490:	68a8      	ldr	r0, [r5, #8]
   ba492:	6a26      	ldr	r6, [r4, #32]
   ba494:	2148      	movs	r1, #72	; 0x48
   ba496:	f7fe f827 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba49a:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba49c:	68a8      	ldr	r0, [r5, #8]
   ba49e:	6a26      	ldr	r6, [r4, #32]
   ba4a0:	214c      	movs	r1, #76	; 0x4c
   ba4a2:	f7fe f82e 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4a6:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba4aa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba4ac:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba4ae:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba4b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba4b6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b8:	68a8      	ldr	r0, [r5, #8]
   ba4ba:	2154      	movs	r1, #84	; 0x54
   ba4bc:	f7fe f814 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba4c0:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4c2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba4c4:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4c6:	2158      	movs	r1, #88	; 0x58
   ba4c8:	f7fe f81b 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba4cc:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba4d0:	68a8      	ldr	r0, [r5, #8]
   ba4d2:	6a26      	ldr	r6, [r4, #32]
   ba4d4:	215a      	movs	r1, #90	; 0x5a
   ba4d6:	f7fe f814 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4da:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba4de:	6a22      	ldr	r2, [r4, #32]
   ba4e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba4e4:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba4e6:	6a22      	ldr	r2, [r4, #32]
   ba4e8:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4ea:	6a21      	ldr	r1, [r4, #32]
   ba4ec:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba4ee:	b158      	cbz	r0, ba508 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4f0:	780b      	ldrb	r3, [r1, #0]
   ba4f2:	071b      	lsls	r3, r3, #28
   ba4f4:	d408      	bmi.n	ba508 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba4f6:	225c      	movs	r2, #92	; 0x5c
   ba4f8:	3104      	adds	r1, #4
   ba4fa:	f009 ff3d 	bl	c4378 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4fe:	6a22      	ldr	r2, [r4, #32]
   ba500:	7813      	ldrb	r3, [r2, #0]
   ba502:	f043 0308 	orr.w	r3, r3, #8
   ba506:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba508:	6a23      	ldr	r3, [r4, #32]
   ba50a:	e642      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba50c:	00200500 	.word	0x00200500
   ba510:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba514:	4a8e      	ldr	r2, [pc, #568]	; (ba750 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba516:	4293      	cmp	r3, r2
   ba518:	d137      	bne.n	ba58a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba51a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba51c:	2b00      	cmp	r3, #0
   ba51e:	f43f adaa 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba522:	688a      	ldr	r2, [r1, #8]
   ba524:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba526:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba528:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba52a:	68a8      	ldr	r0, [r5, #8]
   ba52c:	2104      	movs	r1, #4
   ba52e:	f7fd ffdb 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba532:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba534:	68a8      	ldr	r0, [r5, #8]
   ba536:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba538:	2108      	movs	r1, #8
   ba53a:	f7fd ffd5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba53e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba540:	68a8      	ldr	r0, [r5, #8]
   ba542:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba544:	210c      	movs	r1, #12
   ba546:	f7fd ffcf 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba54a:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba54c:	68a8      	ldr	r0, [r5, #8]
   ba54e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba550:	2110      	movs	r1, #16
   ba552:	f7fd ffc9 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba556:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba558:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba55e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba560:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba564:	b17a      	cbz	r2, ba586 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba566:	7819      	ldrb	r1, [r3, #0]
   ba568:	070f      	lsls	r7, r1, #28
   ba56a:	d40c      	bmi.n	ba586 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba56c:	1d19      	adds	r1, r3, #4
   ba56e:	3318      	adds	r3, #24
   ba570:	f851 0b04 	ldr.w	r0, [r1], #4
   ba574:	f842 0b04 	str.w	r0, [r2], #4
   ba578:	4299      	cmp	r1, r3
   ba57a:	d1f9      	bne.n	ba570 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba57c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba57e:	7813      	ldrb	r3, [r2, #0]
   ba580:	f043 0308 	orr.w	r3, r3, #8
   ba584:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba588:	e603      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba58a:	4a72      	ldr	r2, [pc, #456]	; (ba754 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba58c:	4293      	cmp	r3, r2
   ba58e:	d139      	bne.n	ba604 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba590:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba592:	2e00      	cmp	r6, #0
   ba594:	f43f ad6f 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba598:	68a8      	ldr	r0, [r5, #8]
   ba59a:	2100      	movs	r1, #0
   ba59c:	f7fd ffa4 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5a0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5a6:	2104      	movs	r1, #4
   ba5a8:	f7fd ff9e 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba5ac:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b2:	2108      	movs	r1, #8
   ba5b4:	f7fd ff98 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba5b8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba5bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5be:	210c      	movs	r1, #12
   ba5c0:	f7fd ff92 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba5c4:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba5c6:	68a8      	ldr	r0, [r5, #8]
   ba5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba5ca:	2110      	movs	r1, #16
   ba5cc:	f7fd ff8c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5d0:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba5d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5d8:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba5dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba5de:	b17a      	cbz	r2, ba600 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5e0:	7819      	ldrb	r1, [r3, #0]
   ba5e2:	070e      	lsls	r6, r1, #28
   ba5e4:	d40c      	bmi.n	ba600 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba5e6:	1d19      	adds	r1, r3, #4
   ba5e8:	3318      	adds	r3, #24
   ba5ea:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5ee:	f842 0b04 	str.w	r0, [r2], #4
   ba5f2:	4299      	cmp	r1, r3
   ba5f4:	d1f9      	bne.n	ba5ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba5f8:	7813      	ldrb	r3, [r2, #0]
   ba5fa:	f043 0308 	orr.w	r3, r3, #8
   ba5fe:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba602:	e5c6      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba604:	4a54      	ldr	r2, [pc, #336]	; (ba758 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba606:	4293      	cmp	r3, r2
   ba608:	d151      	bne.n	ba6ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba60a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba60c:	2e00      	cmp	r6, #0
   ba60e:	f43f ad32 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba612:	68a8      	ldr	r0, [r5, #8]
   ba614:	2100      	movs	r1, #0
   ba616:	f7fd ff67 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba61a:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba61c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba61e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba620:	2104      	movs	r1, #4
   ba622:	f7fd ff61 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba626:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba628:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba62a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba62c:	2108      	movs	r1, #8
   ba62e:	f7fd ff5b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba632:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba634:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba636:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba638:	210c      	movs	r1, #12
   ba63a:	f7fd ff55 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba63e:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba640:	68a8      	ldr	r0, [r5, #8]
   ba642:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba644:	2110      	movs	r1, #16
   ba646:	f7fd ff4f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba64a:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba64c:	68a8      	ldr	r0, [r5, #8]
   ba64e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba650:	2114      	movs	r1, #20
   ba652:	f7fd ff49 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba656:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba658:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba65a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba65c:	2118      	movs	r1, #24
   ba65e:	f7fd ff43 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba662:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba664:	68a8      	ldr	r0, [r5, #8]
   ba666:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba668:	211c      	movs	r1, #28
   ba66a:	f7fd ff3d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba66e:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba670:	68a8      	ldr	r0, [r5, #8]
   ba672:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba674:	2120      	movs	r1, #32
   ba676:	f7fd ff37 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba67a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba67c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba67e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba682:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba684:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba688:	b17a      	cbz	r2, ba6aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba68a:	7819      	ldrb	r1, [r3, #0]
   ba68c:	0708      	lsls	r0, r1, #28
   ba68e:	d40c      	bmi.n	ba6aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba690:	1d19      	adds	r1, r3, #4
   ba692:	3328      	adds	r3, #40	; 0x28
   ba694:	f851 0b04 	ldr.w	r0, [r1], #4
   ba698:	f842 0b04 	str.w	r0, [r2], #4
   ba69c:	4299      	cmp	r1, r3
   ba69e:	d1f9      	bne.n	ba694 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba6a2:	7813      	ldrb	r3, [r2, #0]
   ba6a4:	f043 0308 	orr.w	r3, r3, #8
   ba6a8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba6aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba6ac:	e571      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba6ae:	4a2b      	ldr	r2, [pc, #172]	; (ba75c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba6b0:	4293      	cmp	r3, r2
   ba6b2:	d155      	bne.n	ba760 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba6b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba6b6:	2b00      	cmp	r3, #0
   ba6b8:	f43f acdd 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba6bc:	688a      	ldr	r2, [r1, #8]
   ba6be:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba6c0:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba6c2:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba6c4:	68a8      	ldr	r0, [r5, #8]
   ba6c6:	2104      	movs	r1, #4
   ba6c8:	f7fd ff0e 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6cc:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6ce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba6d0:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6d2:	2108      	movs	r1, #8
   ba6d4:	f7fd ff08 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba6d8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6da:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba6dc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6de:	210c      	movs	r1, #12
   ba6e0:	f7fd ff02 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba6e4:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6e6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba6e8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6ea:	2110      	movs	r1, #16
   ba6ec:	f7fd fefc 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba6f0:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba6f2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba6f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba6f6:	7d12      	ldrb	r2, [r2, #20]
   ba6f8:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba6fa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba6fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba6fe:	7d52      	ldrb	r2, [r2, #21]
   ba700:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba702:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba704:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba706:	7d92      	ldrb	r2, [r2, #22]
   ba708:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba70a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba70c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba70e:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba710:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba712:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba714:	68a8      	ldr	r0, [r5, #8]
   ba716:	2118      	movs	r1, #24
   ba718:	f7fd fee6 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba71c:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba724:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba726:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba72a:	b17a      	cbz	r2, ba74c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba72c:	7819      	ldrb	r1, [r3, #0]
   ba72e:	0709      	lsls	r1, r1, #28
   ba730:	d40c      	bmi.n	ba74c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba732:	1d19      	adds	r1, r3, #4
   ba734:	3320      	adds	r3, #32
   ba736:	f851 0b04 	ldr.w	r0, [r1], #4
   ba73a:	f842 0b04 	str.w	r0, [r2], #4
   ba73e:	4299      	cmp	r1, r3
   ba740:	d1f9      	bne.n	ba736 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba742:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba744:	7813      	ldrb	r3, [r2, #0]
   ba746:	f043 0308 	orr.w	r3, r3, #8
   ba74a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba74e:	e520      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba750:	00140900 	.word	0x00140900
   ba754:	00141100 	.word	0x00141100
   ba758:	00241200 	.word	0x00241200
   ba75c:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba760:	4a30      	ldr	r2, [pc, #192]	; (ba824 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba762:	4293      	cmp	r3, r2
   ba764:	d160      	bne.n	ba828 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba766:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba768:	2b00      	cmp	r3, #0
   ba76a:	f43f ac84 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba76e:	688a      	ldr	r2, [r1, #8]
   ba770:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba772:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba774:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba776:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba778:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba77a:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba77c:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba77e:	68a8      	ldr	r0, [r5, #8]
   ba780:	2104      	movs	r1, #4
   ba782:	f7fd feb1 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba786:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba788:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba78a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba78c:	2108      	movs	r1, #8
   ba78e:	f7fd feab 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba792:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba794:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba796:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba798:	210c      	movs	r1, #12
   ba79a:	f7fd fea5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba79e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7a0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba7a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7a4:	2110      	movs	r1, #16
   ba7a6:	f7fd fe9f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba7aa:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba7ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7b0:	2114      	movs	r1, #20
   ba7b2:	f7fd fe99 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba7b6:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba7b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba7ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7bc:	7e12      	ldrb	r2, [r2, #24]
   ba7be:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba7c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba7c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7c4:	7e52      	ldrb	r2, [r2, #25]
   ba7c6:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba7c8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba7ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7cc:	7e92      	ldrb	r2, [r2, #26]
   ba7ce:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba7d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba7d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7d4:	7ed2      	ldrb	r2, [r2, #27]
   ba7d6:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba7d8:	68a8      	ldr	r0, [r5, #8]
   ba7da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba7dc:	211c      	movs	r1, #28
   ba7de:	f7fd fe83 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7e2:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba7e4:	68a8      	ldr	r0, [r5, #8]
   ba7e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba7e8:	2120      	movs	r1, #32
   ba7ea:	f7fd fe7d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7ee:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba7f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba7f6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba7f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba7fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba7fc:	b17a      	cbz	r2, ba81e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba7fe:	7819      	ldrb	r1, [r3, #0]
   ba800:	070f      	lsls	r7, r1, #28
   ba802:	d40c      	bmi.n	ba81e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba804:	1d19      	adds	r1, r3, #4
   ba806:	3328      	adds	r3, #40	; 0x28
   ba808:	f851 0b04 	ldr.w	r0, [r1], #4
   ba80c:	f842 0b04 	str.w	r0, [r2], #4
   ba810:	4299      	cmp	r1, r3
   ba812:	d1f9      	bne.n	ba808 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba816:	7813      	ldrb	r3, [r2, #0]
   ba818:	f043 0308 	orr.w	r3, r3, #8
   ba81c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba81e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba820:	e4b7      	b.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba822:	bf00      	nop
   ba824:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba828:	4aa1      	ldr	r2, [pc, #644]	; (baab0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba82a:	4293      	cmp	r3, r2
   ba82c:	f040 80f0 	bne.w	baa10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba830:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba832:	2e00      	cmp	r6, #0
   ba834:	f43f ac1f 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba838:	68a8      	ldr	r0, [r5, #8]
   ba83a:	2100      	movs	r1, #0
   ba83c:	f7fd fe54 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba840:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba842:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba846:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba848:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba84a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba84c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba84e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba850:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba852:	68a8      	ldr	r0, [r5, #8]
   ba854:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba856:	2106      	movs	r1, #6
   ba858:	f7fd fe53 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba85c:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba85e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba862:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba864:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba866:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba86a:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba86c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba86e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba870:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba872:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba874:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba876:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba87a:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba87c:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba87e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba882:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba884:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba886:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba888:	68a8      	ldr	r0, [r5, #8]
   ba88a:	2110      	movs	r1, #16
   ba88c:	f7fd fe2c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba890:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba892:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba894:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba896:	2114      	movs	r1, #20
   ba898:	f7fd fe26 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba89c:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba89e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba8a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba8a2:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba8a4:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba8a6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba8a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba8aa:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba8ac:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba8ae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba8b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba8b2:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba8b4:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba8b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba8b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba8ba:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba8bc:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8be:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba8c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8c2:	211c      	movs	r1, #28
   ba8c4:	f7fd fe10 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba8c8:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8ca:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba8cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8ce:	2120      	movs	r1, #32
   ba8d0:	f7fd fe0a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba8d4:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8d6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba8d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8da:	2124      	movs	r1, #36	; 0x24
   ba8dc:	f7fd fe04 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba8e0:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba8e4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8e6:	2128      	movs	r1, #40	; 0x28
   ba8e8:	f7fd fdfe 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba8ec:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba8ee:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba8f0:	68a8      	ldr	r0, [r5, #8]
   ba8f2:	212c      	movs	r1, #44	; 0x2c
   ba8f4:	f7fd fdf8 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8f8:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba8fa:	68a8      	ldr	r0, [r5, #8]
   ba8fc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba8fe:	2130      	movs	r1, #48	; 0x30
   ba900:	f7fd fdf2 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba904:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba906:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba908:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba90a:	2134      	movs	r1, #52	; 0x34
   ba90c:	f7fd fdec 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba910:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba912:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba914:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba916:	2138      	movs	r1, #56	; 0x38
   ba918:	f7fd fde6 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba91c:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba91e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba920:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba922:	213c      	movs	r1, #60	; 0x3c
   ba924:	f7fd fde0 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba928:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba92a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba92c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba92e:	2140      	movs	r1, #64	; 0x40
   ba930:	f7fd fdda 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba934:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba936:	68a8      	ldr	r0, [r5, #8]
   ba938:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba93a:	2144      	movs	r1, #68	; 0x44
   ba93c:	f7fd fdd4 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba940:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba942:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba944:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba946:	2148      	movs	r1, #72	; 0x48
   ba948:	f7fd fdce 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba94c:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba94e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba950:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba952:	214c      	movs	r1, #76	; 0x4c
   ba954:	f7fd fdc8 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba958:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba95a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba95c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba95e:	2150      	movs	r1, #80	; 0x50
   ba960:	f7fd fdc2 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba964:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba966:	2154      	movs	r1, #84	; 0x54
   ba968:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba96a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba96c:	f7fd fdbc 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba970:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba972:	68a8      	ldr	r0, [r5, #8]
   ba974:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba976:	2158      	movs	r1, #88	; 0x58
   ba978:	f7fd fdc3 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba97c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba980:	68a8      	ldr	r0, [r5, #8]
   ba982:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba984:	215a      	movs	r1, #90	; 0x5a
   ba986:	f7fd fdbc 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba98a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba98e:	68a8      	ldr	r0, [r5, #8]
   ba990:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba992:	215c      	movs	r1, #92	; 0x5c
   ba994:	f7fd fdb5 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba998:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba99c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba99e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba9a0:	215e      	movs	r1, #94	; 0x5e
   ba9a2:	f7fd fdae 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba9a6:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba9aa:	68a8      	ldr	r0, [r5, #8]
   ba9ac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba9ae:	2160      	movs	r1, #96	; 0x60
   ba9b0:	f7fd fda7 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9b4:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba9b8:	68a8      	ldr	r0, [r5, #8]
   ba9ba:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba9bc:	2162      	movs	r1, #98	; 0x62
   ba9be:	f7fd fda0 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9c2:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba9c6:	68a8      	ldr	r0, [r5, #8]
   ba9c8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba9ca:	2164      	movs	r1, #100	; 0x64
   ba9cc:	f7fd fd8c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9d0:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba9d2:	68a8      	ldr	r0, [r5, #8]
   ba9d4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba9d6:	2168      	movs	r1, #104	; 0x68
   ba9d8:	f7fd fd86 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9dc:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba9de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba9e4:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba9e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba9e8:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba9ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba9ec:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba9f0:	b158      	cbz	r0, baa0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9f2:	780b      	ldrb	r3, [r1, #0]
   ba9f4:	071e      	lsls	r6, r3, #28
   ba9f6:	d408      	bmi.n	baa0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba9f8:	2274      	movs	r2, #116	; 0x74
   ba9fa:	3104      	adds	r1, #4
   ba9fc:	f009 fcbc 	bl	c4378 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   baa00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   baa02:	7813      	ldrb	r3, [r2, #0]
   baa04:	f043 0308 	orr.w	r3, r3, #8
   baa08:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   baa0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   baa0c:	f7ff bbc1 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   baa10:	4a28      	ldr	r2, [pc, #160]	; (baab4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   baa12:	4293      	cmp	r3, r2
   baa14:	d150      	bne.n	baab8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   baa16:	6a86      	ldr	r6, [r0, #40]	; 0x28
   baa18:	2e00      	cmp	r6, #0
   baa1a:	f43f ab2c 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   baa1e:	68a8      	ldr	r0, [r5, #8]
   baa20:	2100      	movs	r1, #0
   baa22:	f7fd fd61 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa26:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   baa28:	68a8      	ldr	r0, [r5, #8]
   baa2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   baa2c:	2104      	movs	r1, #4
   baa2e:	f7fd fd5b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa32:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa34:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   baa36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa38:	2108      	movs	r1, #8
   baa3a:	f7fd fd55 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   baa3e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   baa40:	68a8      	ldr	r0, [r5, #8]
   baa42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   baa44:	210c      	movs	r1, #12
   baa46:	f7fd fd5c 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa4a:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   baa4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   baa4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa50:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   baa52:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   baa54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   baa56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa58:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   baa5a:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   baa5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   baa5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa60:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   baa62:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   baa64:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   baa66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa68:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   baa6a:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   baa6c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   baa6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa70:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   baa72:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   baa74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa76:	68aa      	ldr	r2, [r5, #8]
   baa78:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   baa7a:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   baa7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa82:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   baa86:	6a1a      	ldr	r2, [r3, #32]
   baa88:	b17a      	cbz	r2, baaaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa8a:	7819      	ldrb	r1, [r3, #0]
   baa8c:	0708      	lsls	r0, r1, #28
   baa8e:	d40c      	bmi.n	baaaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   baa90:	1d19      	adds	r1, r3, #4
   baa92:	3318      	adds	r3, #24
   baa94:	f851 0b04 	ldr.w	r0, [r1], #4
   baa98:	f842 0b04 	str.w	r0, [r2], #4
   baa9c:	4299      	cmp	r1, r3
   baa9e:	d1f9      	bne.n	baa94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   baaa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   baaa2:	7813      	ldrb	r3, [r2, #0]
   baaa4:	f043 0308 	orr.w	r3, r3, #8
   baaa8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   baaaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   baaac:	f7ff bb71 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baab0:	00741700 	.word	0x00741700
   baab4:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   baab8:	4a84      	ldr	r2, [pc, #528]	; (baccc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   baaba:	4293      	cmp	r3, r2
   baabc:	d13a      	bne.n	bab34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   baabe:	6c06      	ldr	r6, [r0, #64]	; 0x40
   baac0:	2e00      	cmp	r6, #0
   baac2:	f43f aad8 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   baac6:	68a8      	ldr	r0, [r5, #8]
   baac8:	2100      	movs	r1, #0
   baaca:	f7fd fd0d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baace:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baad0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   baad2:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baad4:	2104      	movs	r1, #4
   baad6:	f7fd fd07 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   baada:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baadc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   baade:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baae0:	2108      	movs	r1, #8
   baae2:	f7fd fd01 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   baae6:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   baae8:	68a8      	ldr	r0, [r5, #8]
   baaea:	6c26      	ldr	r6, [r4, #64]	; 0x40
   baaec:	210c      	movs	r1, #12
   baaee:	f7fd fcfb 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaf2:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   baaf4:	68a8      	ldr	r0, [r5, #8]
   baaf6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   baaf8:	2110      	movs	r1, #16
   baafa:	f7fd fcf5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baafe:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab00:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bab02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab06:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab08:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bab0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   bab0c:	b17a      	cbz	r2, bab2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab0e:	7819      	ldrb	r1, [r3, #0]
   bab10:	0709      	lsls	r1, r1, #28
   bab12:	d40c      	bmi.n	bab2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   bab14:	1d19      	adds	r1, r3, #4
   bab16:	3318      	adds	r3, #24
   bab18:	f851 0b04 	ldr.w	r0, [r1], #4
   bab1c:	f842 0b04 	str.w	r0, [r2], #4
   bab20:	4299      	cmp	r1, r3
   bab22:	d1f9      	bne.n	bab18 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   bab24:	6c22      	ldr	r2, [r4, #64]	; 0x40
   bab26:	7813      	ldrb	r3, [r2, #0]
   bab28:	f043 0308 	orr.w	r3, r3, #8
   bab2c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   bab2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bab30:	f7ff bb2f 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   bab34:	4a66      	ldr	r2, [pc, #408]	; (bacd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   bab36:	4293      	cmp	r3, r2
   bab38:	d138      	bne.n	babac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   bab3a:	6c46      	ldr	r6, [r0, #68]	; 0x44
   bab3c:	2e00      	cmp	r6, #0
   bab3e:	f43f aa9a 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   bab42:	68a8      	ldr	r0, [r5, #8]
   bab44:	2100      	movs	r1, #0
   bab46:	f7fd fccf 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab4a:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bab4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bab4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bab50:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bab52:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bab56:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bab58:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bab5a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bab5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   bab5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bab60:	7a52      	ldrb	r2, [r2, #9]
   bab62:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bab64:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bab66:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bab68:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bab6a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bab6c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   bab6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bab70:	7ad2      	ldrb	r2, [r2, #11]
   bab72:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab74:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bab76:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab78:	210c      	movs	r1, #12
   bab7a:	f7fd fcb5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bab7e:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   bab80:	68a8      	ldr	r0, [r5, #8]
   bab82:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bab84:	2110      	movs	r1, #16
   bab86:	f7fd fcbc 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab8a:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   bab8c:	68a8      	ldr	r0, [r5, #8]
   bab8e:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bab90:	2112      	movs	r1, #18
   bab92:	f7fd fcb6 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab96:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   bab98:	68ab      	ldr	r3, [r5, #8]
   bab9a:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   bab9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bab9e:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   baba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baba6:	61da      	str	r2, [r3, #28]
   baba8:	f7ff ba65 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   babac:	4a49      	ldr	r2, [pc, #292]	; (bacd4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   babae:	4293      	cmp	r3, r2
   babb0:	d162      	bne.n	bac78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   babb2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   babb4:	2b00      	cmp	r3, #0
   babb6:	f43f aa5e 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   babba:	688a      	ldr	r2, [r1, #8]
   babbc:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   babbe:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   babc0:	6c86      	ldr	r6, [r0, #72]	; 0x48
   babc2:	68a8      	ldr	r0, [r5, #8]
   babc4:	2104      	movs	r1, #4
   babc6:	f7fd fc8f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babca:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   babcc:	68a8      	ldr	r0, [r5, #8]
   babce:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   babd0:	2108      	movs	r1, #8
   babd2:	f7fd fc89 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babd6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babd8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   babda:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babdc:	210c      	movs	r1, #12
   babde:	f7fd fc83 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   babe2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babe4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   babe6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babe8:	2110      	movs	r1, #16
   babea:	f7fd fc7d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   babee:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   babf2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf4:	2114      	movs	r1, #20
   babf6:	f7fd fc77 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   babfa:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   babfc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   babfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac00:	7e12      	ldrb	r2, [r2, #24]
   bac02:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   bac04:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   bac06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac08:	7e52      	ldrb	r2, [r2, #25]
   bac0a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   bac0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   bac0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac10:	7e92      	ldrb	r2, [r2, #26]
   bac12:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   bac14:	211c      	movs	r1, #28
   bac16:	68a8      	ldr	r0, [r5, #8]
   bac18:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bac1a:	f7fd fc65 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac1e:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   bac20:	68a8      	ldr	r0, [r5, #8]
   bac22:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bac24:	2120      	movs	r1, #32
   bac26:	f7fd fc5f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac2a:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bac2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   bac2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac30:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   bac34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac38:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   bac3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac3c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   bac40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac4a:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bac50:	b17a      	cbz	r2, bac72 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac52:	7819      	ldrb	r1, [r3, #0]
   bac54:	070f      	lsls	r7, r1, #28
   bac56:	d40c      	bmi.n	bac72 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   bac58:	1d19      	adds	r1, r3, #4
   bac5a:	332c      	adds	r3, #44	; 0x2c
   bac5c:	f851 0b04 	ldr.w	r0, [r1], #4
   bac60:	f842 0b04 	str.w	r0, [r2], #4
   bac64:	4299      	cmp	r1, r3
   bac66:	d1f9      	bne.n	bac5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   bac68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   bac6a:	7813      	ldrb	r3, [r2, #0]
   bac6c:	f043 0308 	orr.w	r3, r3, #8
   bac70:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   bac72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bac74:	f7ff ba8d 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   bac78:	784a      	ldrb	r2, [r1, #1]
   bac7a:	2a35      	cmp	r2, #53	; 0x35
   bac7c:	d17f      	bne.n	bad7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   bac7e:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   bac80:	2e00      	cmp	r6, #0
   bac82:	f43f a9f8 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   bac86:	68a8      	ldr	r0, [r5, #8]
   bac88:	2100      	movs	r1, #0
   bac8a:	f7fd fc2d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac8e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bac90:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bac92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bac94:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bac96:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bac98:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bac9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bac9c:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bac9e:	725a      	strb	r2, [r3, #9]
   baca0:	f04f 0808 	mov.w	r8, #8
   baca4:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baca6:	f04f 0a0c 	mov.w	sl, #12
   bacaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bacac:	7a59      	ldrb	r1, [r3, #9]
   bacae:	b2ba      	uxth	r2, r7
   bacb0:	4291      	cmp	r1, r2
   bacb2:	d811      	bhi.n	bacd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   bacb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bacb6:	2201      	movs	r2, #1
   bacb8:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacbc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   bacbe:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   bacc2:	2800      	cmp	r0, #0
   bacc4:	d14d      	bne.n	bad62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   bacc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bacc8:	f7ff ba63 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baccc:	00142200 	.word	0x00142200
   bacd0:	00182600 	.word	0x00182600
   bacd4:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bacd8:	886a      	ldrh	r2, [r5, #2]
   bacda:	fb0a f607 	mul.w	r6, sl, r7
   bacde:	3a08      	subs	r2, #8
   bace0:	42b2      	cmp	r2, r6
   bace2:	dde7      	ble.n	bacb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   bace4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bace6:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bace8:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bacec:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bacee:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bacf0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bacf2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bacf4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bacf6:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bacf8:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bacfa:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bacfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bacfe:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bad00:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bad02:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bad04:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bad06:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bad08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bad0a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bad0c:	4433      	add	r3, r6
   bad0e:	78d2      	ldrb	r2, [r2, #3]
   bad10:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bad12:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bad16:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bad1a:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bad1e:	68a8      	ldr	r0, [r5, #8]
   bad20:	b289      	uxth	r1, r1
   bad22:	f7fd fbee 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bad26:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bad28:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bad2c:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bad30:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bad34:	68a8      	ldr	r0, [r5, #8]
   bad36:	b289      	uxth	r1, r1
   bad38:	f7fd fbe3 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bad3c:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bad3e:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bad42:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bad46:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   bad4a:	68a8      	ldr	r0, [r5, #8]
   bad4c:	b289      	uxth	r1, r1
   bad4e:	f7fd fbcb 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad52:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bad54:	3701      	adds	r7, #1
   bad56:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bad58:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bad5a:	f108 080c 	add.w	r8, r8, #12
   bad5e:	d1a4      	bne.n	bacaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   bad60:	e7a8      	b.n	bacb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad62:	780b      	ldrb	r3, [r1, #0]
   bad64:	071e      	lsls	r6, r3, #28
   bad66:	d4ae      	bmi.n	bacc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   bad68:	f640 32fc 	movw	r2, #3068	; 0xbfc
   bad6c:	3104      	adds	r1, #4
   bad6e:	f009 fb03 	bl	c4378 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bad72:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   bad74:	7813      	ldrb	r3, [r2, #0]
   bad76:	f043 0308 	orr.w	r3, r3, #8
   bad7a:	7013      	strb	r3, [r2, #0]
   bad7c:	e7a3      	b.n	bacc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   bad7e:	2a3c      	cmp	r2, #60	; 0x3c
   bad80:	f040 80bf 	bne.w	baf02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   bad84:	884a      	ldrh	r2, [r1, #2]
   bad86:	2a28      	cmp	r2, #40	; 0x28
   bad88:	d002      	beq.n	bad90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   bad8a:	2a40      	cmp	r2, #64	; 0x40
   bad8c:	f040 80b9 	bne.w	baf02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   bad90:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bad92:	2b00      	cmp	r3, #0
   bad94:	f43f a96f 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bad98:	68aa      	ldr	r2, [r5, #8]
   bad9a:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   bad9c:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   bad9e:	68a8      	ldr	r0, [r5, #8]
   bada0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bada2:	2102      	movs	r1, #2
   bada4:	f7fd fbad 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bada8:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   badaa:	68a8      	ldr	r0, [r5, #8]
   badac:	6d26      	ldr	r6, [r4, #80]	; 0x50
   badae:	2104      	movs	r1, #4
   badb0:	f7fd fb9a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badb4:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badb6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   badb8:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badba:	2108      	movs	r1, #8
   badbc:	f7fd fb94 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   badc0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badc2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   badc4:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badc6:	210c      	movs	r1, #12
   badc8:	f7fd fb8e 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   badcc:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   badd0:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   badd2:	2110      	movs	r1, #16
   badd4:	f7fd fb88 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   badd8:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   badda:	886b      	ldrh	r3, [r5, #2]
   baddc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   badde:	2b28      	cmp	r3, #40	; 0x28
   bade0:	d14b      	bne.n	bae7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   bade2:	2600      	movs	r6, #0
   bade4:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   bade6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bade8:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   badea:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   badec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   badee:	7d12      	ldrb	r2, [r2, #20]
   badf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   badf4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   badf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   badf8:	7d52      	ldrb	r2, [r2, #21]
   badfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   badfe:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bae00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae02:	7d92      	ldrb	r2, [r2, #22]
   bae04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bae08:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae0a:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bae0e:	68a8      	ldr	r0, [r5, #8]
   bae10:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bae12:	2118      	movs	r1, #24
   bae14:	f7fd fb68 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae18:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bae1a:	68a8      	ldr	r0, [r5, #8]
   bae1c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bae1e:	211c      	movs	r1, #28
   bae20:	f7fd fb62 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae24:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bae26:	68a8      	ldr	r0, [r5, #8]
   bae28:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bae2a:	2120      	movs	r1, #32
   bae2c:	f7fd fb5c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae30:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bae32:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae34:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bae36:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae38:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bae3a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bae3c:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bae3e:	68a8      	ldr	r0, [r5, #8]
   bae40:	f7fd fb52 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae44:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bae46:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bae4c:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   bae52:	b17a      	cbz	r2, bae74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae54:	7819      	ldrb	r1, [r3, #0]
   bae56:	0708      	lsls	r0, r1, #28
   bae58:	d40c      	bmi.n	bae74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   bae5a:	1d19      	adds	r1, r3, #4
   bae5c:	3344      	adds	r3, #68	; 0x44
   bae5e:	f851 0b04 	ldr.w	r0, [r1], #4
   bae62:	f842 0b04 	str.w	r0, [r2], #4
   bae66:	4299      	cmp	r1, r3
   bae68:	d1f9      	bne.n	bae5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bae6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bae6c:	7813      	ldrb	r3, [r2, #0]
   bae6e:	f043 0308 	orr.w	r3, r3, #8
   bae72:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bae74:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae76:	f7ff b98c 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae7a:	68a8      	ldr	r0, [r5, #8]
   bae7c:	2114      	movs	r1, #20
   bae7e:	f7fd fb33 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   bae82:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae84:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bae86:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae88:	2118      	movs	r1, #24
   bae8a:	f7fd fb2d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bae8e:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bae90:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bae92:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bae94:	f892 2020 	ldrb.w	r2, [r2, #32]
   bae98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bae9c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bae9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baea0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   baea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   baea8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   baeaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baeac:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   baeb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   baeb4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   baeb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baeb8:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   baebc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   baec0:	68a8      	ldr	r0, [r5, #8]
   baec2:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baec4:	2124      	movs	r1, #36	; 0x24
   baec6:	f7fd fb0f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baeca:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   baecc:	68a8      	ldr	r0, [r5, #8]
   baece:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baed0:	2128      	movs	r1, #40	; 0x28
   baed2:	f7fd fb09 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baed6:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   baed8:	68a8      	ldr	r0, [r5, #8]
   baeda:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baedc:	212c      	movs	r1, #44	; 0x2c
   baede:	f7fd fb03 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baee2:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   baee4:	68a8      	ldr	r0, [r5, #8]
   baee6:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baee8:	2130      	movs	r1, #48	; 0x30
   baeea:	f7fd fafd 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baeee:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   baef0:	2134      	movs	r1, #52	; 0x34
   baef2:	68a8      	ldr	r0, [r5, #8]
   baef4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baef6:	f7fd faf7 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baefa:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   baefc:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baefe:	213c      	movs	r1, #60	; 0x3c
   baf00:	e79d      	b.n	bae3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   baf02:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   baf06:	d12a      	bne.n	baf5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   baf08:	6d66      	ldr	r6, [r4, #84]	; 0x54
   baf0a:	2e00      	cmp	r6, #0
   baf0c:	f43f a8b3 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   baf10:	68a8      	ldr	r0, [r5, #8]
   baf12:	2100      	movs	r1, #0
   baf14:	f7fd fae8 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf18:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baf1a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   baf1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   baf1e:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   baf20:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf22:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   baf24:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   baf26:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   baf28:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   baf2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf30:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf32:	6d63      	ldr	r3, [r4, #84]	; 0x54
   baf34:	6a1a      	ldr	r2, [r3, #32]
   baf36:	b17a      	cbz	r2, baf58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf38:	7819      	ldrb	r1, [r3, #0]
   baf3a:	0709      	lsls	r1, r1, #28
   baf3c:	d40c      	bmi.n	baf58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   baf3e:	1d19      	adds	r1, r3, #4
   baf40:	3314      	adds	r3, #20
   baf42:	f851 0b04 	ldr.w	r0, [r1], #4
   baf46:	f842 0b04 	str.w	r0, [r2], #4
   baf4a:	4299      	cmp	r1, r3
   baf4c:	d1f9      	bne.n	baf42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   baf4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   baf50:	7813      	ldrb	r3, [r2, #0]
   baf52:	f043 0308 	orr.w	r3, r3, #8
   baf56:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baf58:	6d63      	ldr	r3, [r4, #84]	; 0x54
   baf5a:	f7ff b91a 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   baf5e:	4aa1      	ldr	r2, [pc, #644]	; (bb1e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   baf60:	4293      	cmp	r3, r2
   baf62:	f47f a888 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   baf66:	69a6      	ldr	r6, [r4, #24]
   baf68:	2e00      	cmp	r6, #0
   baf6a:	f43f a884 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   baf6e:	68a8      	ldr	r0, [r5, #8]
   baf70:	2100      	movs	r1, #0
   baf72:	f7fd fab9 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf76:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf78:	69a3      	ldr	r3, [r4, #24]
   baf7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf7e:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf80:	69a3      	ldr	r3, [r4, #24]
   baf82:	691a      	ldr	r2, [r3, #16]
   baf84:	b14a      	cbz	r2, baf9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf86:	7819      	ldrb	r1, [r3, #0]
   baf88:	070f      	lsls	r7, r1, #28
   baf8a:	d406      	bmi.n	baf9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   baf8c:	685b      	ldr	r3, [r3, #4]
   baf8e:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   baf90:	69a2      	ldr	r2, [r4, #24]
   baf92:	7813      	ldrb	r3, [r2, #0]
   baf94:	f043 0308 	orr.w	r3, r3, #8
   baf98:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   baf9a:	69a3      	ldr	r3, [r4, #24]
   baf9c:	f7ff b8f9 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bafa0:	784b      	ldrb	r3, [r1, #1]
   bafa2:	2b72      	cmp	r3, #114	; 0x72
   bafa4:	f040 80a4 	bne.w	bb0f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bafa8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bafaa:	2b00      	cmp	r3, #0
   bafac:	d069      	beq.n	bb082 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bafae:	689b      	ldr	r3, [r3, #8]
   bafb0:	2b00      	cmp	r3, #0
   bafb2:	d066      	beq.n	bb082 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bafb4:	688a      	ldr	r2, [r1, #8]
   bafb6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bafb8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bafba:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bafbc:	68a8      	ldr	r0, [r5, #8]
   bafbe:	689f      	ldr	r7, [r3, #8]
   bafc0:	4631      	mov	r1, r6
   bafc2:	f7fd fa9e 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bafc6:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bafc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bafca:	68a8      	ldr	r0, [r5, #8]
   bafcc:	689e      	ldr	r6, [r3, #8]
   bafce:	2104      	movs	r1, #4
   bafd0:	f7fd fa8a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafd4:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bafd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bafd8:	68a8      	ldr	r0, [r5, #8]
   bafda:	689e      	ldr	r6, [r3, #8]
   bafdc:	2108      	movs	r1, #8
   bafde:	f7fd fa83 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafe2:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bafe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bafe6:	68a8      	ldr	r0, [r5, #8]
   bafe8:	689e      	ldr	r6, [r3, #8]
   bafea:	210c      	movs	r1, #12
   bafec:	f7fd fa7c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baff0:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   baff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   baff4:	68a8      	ldr	r0, [r5, #8]
   baff6:	689e      	ldr	r6, [r3, #8]
   baff8:	2110      	movs	r1, #16
   baffa:	f7fd fa82 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baffe:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb000:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb002:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb004:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb006:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb008:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb00c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb00e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb010:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb012:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bb014:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb016:	689e      	ldr	r6, [r3, #8]
   bb018:	7833      	ldrb	r3, [r6, #0]
   bb01a:	bb23      	cbnz	r3, bb066 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bb01c:	68a8      	ldr	r0, [r5, #8]
   bb01e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bb022:	f7fd fa6e 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb026:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb028:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb02a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb02c:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb02e:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb032:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb034:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb036:	689b      	ldr	r3, [r3, #8]
   bb038:	781a      	ldrb	r2, [r3, #0]
   bb03a:	2a00      	cmp	r2, #0
   bb03c:	f040 865d 	bne.w	bbcfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bb040:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb042:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bb046:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb048:	b299      	uxth	r1, r3
   bb04a:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb04c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb04e:	d914      	bls.n	bb07a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bb050:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bb054:	d011      	beq.n	bb07a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bb056:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb058:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bb05a:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb05c:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bb05e:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb060:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb062:	3301      	adds	r3, #1
   bb064:	e7f0      	b.n	bb048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bb066:	68a8      	ldr	r0, [r5, #8]
   bb068:	2114      	movs	r1, #20
   bb06a:	f7fd fa4a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb06e:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb070:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb072:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb074:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb076:	7d92      	ldrb	r2, [r2, #22]
   bb078:	e7db      	b.n	bb032 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb07a:	7813      	ldrb	r3, [r2, #0]
   bb07c:	f043 0308 	orr.w	r3, r3, #8
   bb080:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bb082:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb084:	2b00      	cmp	r3, #0
   bb086:	f43e aff6 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb08a:	689b      	ldr	r3, [r3, #8]
   bb08c:	2b00      	cmp	r3, #0
   bb08e:	f43e aff2 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bb092:	22b5      	movs	r2, #181	; 0xb5
   bb094:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bb096:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb098:	689b      	ldr	r3, [r3, #8]
   bb09a:	2262      	movs	r2, #98	; 0x62
   bb09c:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bb09e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0a0:	689b      	ldr	r3, [r3, #8]
   bb0a2:	2202      	movs	r2, #2
   bb0a4:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bb0a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0a8:	689b      	ldr	r3, [r3, #8]
   bb0aa:	2272      	movs	r2, #114	; 0x72
   bb0ac:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bb0ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0b0:	886a      	ldrh	r2, [r5, #2]
   bb0b2:	689b      	ldr	r3, [r3, #8]
   bb0b4:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   bb0b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0b8:	689a      	ldr	r2, [r3, #8]
   bb0ba:	886b      	ldrh	r3, [r5, #2]
   bb0bc:	0a1b      	lsrs	r3, r3, #8
   bb0be:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bb0c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0c2:	886a      	ldrh	r2, [r5, #2]
   bb0c4:	6898      	ldr	r0, [r3, #8]
   bb0c6:	68a9      	ldr	r1, [r5, #8]
   bb0c8:	3006      	adds	r0, #6
   bb0ca:	f009 f955 	bl	c4378 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bb0ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0d0:	7b2a      	ldrb	r2, [r5, #12]
   bb0d2:	689b      	ldr	r3, [r3, #8]
   bb0d4:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bb0d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb0da:	7b6a      	ldrb	r2, [r5, #13]
   bb0dc:	689b      	ldr	r3, [r3, #8]
   bb0de:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb0e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb0e4:	7813      	ldrb	r3, [r2, #0]
   bb0e6:	f043 0308 	orr.w	r3, r3, #8
   bb0ea:	7013      	strb	r3, [r2, #0]
   bb0ec:	f7fe bfc3 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bb0f0:	2b73      	cmp	r3, #115	; 0x73
   bb0f2:	d14d      	bne.n	bb190 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bb0f4:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bb0f6:	780b      	ldrb	r3, [r1, #0]
   bb0f8:	071e      	lsls	r6, r3, #28
   bb0fa:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb0fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bb102:	d543      	bpl.n	bb18c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bb104:	0843      	lsrs	r3, r0, #1
   bb106:	f47e afb6 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb10a:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bb10c:	f44f 7688 	mov.w	r6, #272	; 0x110
   bb110:	688b      	ldr	r3, [r1, #8]
   bb112:	437e      	muls	r6, r7
   bb114:	22b5      	movs	r2, #181	; 0xb5
   bb116:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bb118:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb11a:	689b      	ldr	r3, [r3, #8]
   bb11c:	4433      	add	r3, r6
   bb11e:	2262      	movs	r2, #98	; 0x62
   bb120:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bb122:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb124:	689b      	ldr	r3, [r3, #8]
   bb126:	4433      	add	r3, r6
   bb128:	2202      	movs	r2, #2
   bb12a:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bb12c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb12e:	689b      	ldr	r3, [r3, #8]
   bb130:	4433      	add	r3, r6
   bb132:	2273      	movs	r2, #115	; 0x73
   bb134:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bb136:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb138:	886a      	ldrh	r2, [r5, #2]
   bb13a:	689b      	ldr	r3, [r3, #8]
   bb13c:	4433      	add	r3, r6
   bb13e:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bb140:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb142:	886a      	ldrh	r2, [r5, #2]
   bb144:	689b      	ldr	r3, [r3, #8]
   bb146:	4433      	add	r3, r6
   bb148:	0a12      	lsrs	r2, r2, #8
   bb14a:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bb14c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb14e:	886a      	ldrh	r2, [r5, #2]
   bb150:	6898      	ldr	r0, [r3, #8]
   bb152:	68a9      	ldr	r1, [r5, #8]
   bb154:	4430      	add	r0, r6
   bb156:	3006      	adds	r0, #6
   bb158:	f009 f90e 	bl	c4378 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bb15c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb15e:	7b2a      	ldrb	r2, [r5, #12]
   bb160:	689b      	ldr	r3, [r3, #8]
   bb162:	4433      	add	r3, r6
   bb164:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bb168:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb16a:	7b6a      	ldrb	r2, [r5, #13]
   bb16c:	689b      	ldr	r3, [r3, #8]
   bb16e:	441e      	add	r6, r3
   bb170:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bb174:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bb176:	780b      	ldrb	r3, [r1, #0]
   bb178:	2201      	movs	r2, #1
   bb17a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb17e:	40ba      	lsls	r2, r7
   bb180:	4302      	orrs	r2, r0
   bb182:	f362 03c4 	bfi	r3, r2, #3, #2
   bb186:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bb188:	f7fe bf75 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb18c:	4617      	mov	r7, r2
   bb18e:	e7bd      	b.n	bb10c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bb190:	2b34      	cmp	r3, #52	; 0x34
   bb192:	d129      	bne.n	bb1e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bb194:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb196:	2b00      	cmp	r3, #0
   bb198:	f43e af6d 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb19c:	689b      	ldr	r3, [r3, #8]
   bb19e:	2b00      	cmp	r3, #0
   bb1a0:	f43e af69 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb1a4:	688a      	ldr	r2, [r1, #8]
   bb1a6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bb1a8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb1aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bb1ac:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb1ae:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1b0:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb1b2:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bb1b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb1b6:	68a8      	ldr	r0, [r5, #8]
   bb1b8:	689e      	ldr	r6, [r3, #8]
   bb1ba:	2104      	movs	r1, #4
   bb1bc:	f7fd f994 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1c0:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bb1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb1c4:	68a8      	ldr	r0, [r5, #8]
   bb1c6:	689e      	ldr	r6, [r3, #8]
   bb1c8:	2108      	movs	r1, #8
   bb1ca:	f7fd f99a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1ce:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bb1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb1d2:	68a8      	ldr	r0, [r5, #8]
   bb1d4:	689e      	ldr	r6, [r3, #8]
   bb1d6:	210a      	movs	r1, #10
   bb1d8:	f7fd f993 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1dc:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb1de:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb1e0:	e780      	b.n	bb0e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb1e2:	bf00      	nop
   bb1e4:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb1e8:	2b13      	cmp	r3, #19
   bb1ea:	d14a      	bne.n	bb282 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb1ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb1ee:	2b00      	cmp	r3, #0
   bb1f0:	f43e af41 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb1f4:	688a      	ldr	r2, [r1, #8]
   bb1f6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb1f8:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb1fa:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb1fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb1fe:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb200:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb202:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb204:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb206:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb208:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb20a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb20c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb20e:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb210:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb212:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb214:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb216:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb218:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb21a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb21c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb21e:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb220:	729a      	strb	r2, [r3, #10]
   bb222:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb224:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb226:	7a3a      	ldrb	r2, [r7, #8]
   bb228:	b2f3      	uxtb	r3, r6
   bb22a:	429a      	cmp	r2, r3
   bb22c:	d809      	bhi.n	bb242 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb22e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb230:	2201      	movs	r2, #1
   bb232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb236:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb238:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb23a:	b9a8      	cbnz	r0, bb268 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb23c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb23e:	f7fe bfa8 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb242:	886b      	ldrh	r3, [r5, #2]
   bb244:	3b08      	subs	r3, #8
   bb246:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb24a:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb24e:	ddee      	ble.n	bb22e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb250:	3108      	adds	r1, #8
   bb252:	68a8      	ldr	r0, [r5, #8]
   bb254:	b289      	uxth	r1, r1
   bb256:	f7fd f947 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb25a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb25e:	3601      	adds	r6, #1
   bb260:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb262:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb264:	d1de      	bne.n	bb224 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb266:	e7e2      	b.n	bb22e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb268:	780b      	ldrb	r3, [r1, #0]
   bb26a:	071b      	lsls	r3, r3, #28
   bb26c:	d4e6      	bmi.n	bb23c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb26e:	2248      	movs	r2, #72	; 0x48
   bb270:	3104      	adds	r1, #4
   bb272:	f009 f881 	bl	c4378 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb276:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb278:	7813      	ldrb	r3, [r2, #0]
   bb27a:	f043 0308 	orr.w	r3, r3, #8
   bb27e:	7013      	strb	r3, [r2, #0]
   bb280:	e7dc      	b.n	bb23c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb282:	2b15      	cmp	r3, #21
   bb284:	f47e aef7 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb288:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb28a:	2b00      	cmp	r3, #0
   bb28c:	f43e aef3 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb290:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb292:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb294:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb296:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb298:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb29a:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb29c:	3101      	adds	r1, #1
   bb29e:	2908      	cmp	r1, #8
   bb2a0:	d1f7      	bne.n	bb292 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb2a2:	68a8      	ldr	r0, [r5, #8]
   bb2a4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb2a6:	f7fd f92c 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2aa:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb2ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb2ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb2b0:	7a92      	ldrb	r2, [r2, #10]
   bb2b2:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb2b4:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb2b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb2b8:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb2ba:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb2bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb2be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb2c0:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb2c2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb2c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb2c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb2c8:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb2ca:	73da      	strb	r2, [r3, #15]
   bb2cc:	2610      	movs	r6, #16
   bb2ce:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb2d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb2d2:	7b51      	ldrb	r1, [r2, #13]
   bb2d4:	b2da      	uxtb	r2, r3
   bb2d6:	4291      	cmp	r1, r2
   bb2d8:	d80b      	bhi.n	bb2f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb2da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb2dc:	2201      	movs	r2, #1
   bb2de:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2e2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb2e4:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb2e8:	2800      	cmp	r0, #0
   bb2ea:	d17f      	bne.n	bb3ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb2ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb2ee:	f7fe bf50 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb2f2:	886a      	ldrh	r2, [r5, #2]
   bb2f4:	3a10      	subs	r2, #16
   bb2f6:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb2fa:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb2fe:	ddec      	ble.n	bb2da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb300:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb302:	46b4      	mov	ip, r6
   bb304:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb306:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb308:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb30a:	4440      	add	r0, r8
   bb30c:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb30e:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb312:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb314:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb316:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb318:	4437      	add	r7, r6
   bb31a:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb31c:	4440      	add	r0, r8
   bb31e:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb320:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb322:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb324:	2a03      	cmp	r2, #3
   bb326:	d80b      	bhi.n	bb340 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb328:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb32a:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb32c:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb330:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb334:	4440      	add	r0, r8
   bb336:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb338:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb33c:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb340:	3201      	adds	r2, #1
   bb342:	2a08      	cmp	r2, #8
   bb344:	f10c 0c01 	add.w	ip, ip, #1
   bb348:	d1dd      	bne.n	bb306 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb34a:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb34c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb34e:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb350:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb352:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb356:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb358:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb35a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb35c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb35e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb360:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb364:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb366:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb368:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb36a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb36c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb36e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb372:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb374:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb376:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb378:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb37a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb37c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb380:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb382:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb384:	3118      	adds	r1, #24
   bb386:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb38a:	68a8      	ldr	r0, [r5, #8]
   bb38c:	b289      	uxth	r1, r1
   bb38e:	f7fd f8b8 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb392:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb394:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb396:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb39a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb39c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb39e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb3a0:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb3a2:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb3a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb3a8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb3aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb3ac:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb3ae:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb3b0:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb3b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb3b6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb3b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb3ba:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb3bc:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb3be:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb3c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb3c4:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb3c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb3c8:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb3ca:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb3cc:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb3ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb3d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb3d4:	68aa      	ldr	r2, [r5, #8]
   bb3d6:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb3d8:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb3da:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb3dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb3e0:	f106 0620 	add.w	r6, r6, #32
   bb3e4:	463b      	mov	r3, r7
   bb3e6:	f47f af73 	bne.w	bb2d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb3ea:	e776      	b.n	bb2da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb3ec:	780b      	ldrb	r3, [r1, #0]
   bb3ee:	071f      	lsls	r7, r3, #28
   bb3f0:	f53f af7c 	bmi.w	bb2ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb3f4:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb3f8:	3102      	adds	r1, #2
   bb3fa:	f008 ffbd 	bl	c4378 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb400:	7813      	ldrb	r3, [r2, #0]
   bb402:	f043 0308 	orr.w	r3, r3, #8
   bb406:	7013      	strb	r3, [r2, #0]
   bb408:	e770      	b.n	bb2ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb40a:	680b      	ldr	r3, [r1, #0]
   bb40c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb410:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb414:	d12f      	bne.n	bb476 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb416:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb418:	2b00      	cmp	r3, #0
   bb41a:	f43e ae2c 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb41e:	688a      	ldr	r2, [r1, #8]
   bb420:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb422:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb424:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb426:	68a8      	ldr	r0, [r5, #8]
   bb428:	2102      	movs	r1, #2
   bb42a:	f7fd f86a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb42e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb430:	68a8      	ldr	r0, [r5, #8]
   bb432:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb434:	2104      	movs	r1, #4
   bb436:	f7fd f857 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb43a:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb43c:	68a8      	ldr	r0, [r5, #8]
   bb43e:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb440:	2108      	movs	r1, #8
   bb442:	f7fd f851 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb446:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb448:	68a8      	ldr	r0, [r5, #8]
   bb44a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb44c:	210c      	movs	r1, #12
   bb44e:	f7fd f858 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb452:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb454:	68a8      	ldr	r0, [r5, #8]
   bb456:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb458:	210e      	movs	r1, #14
   bb45a:	f7fd f852 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb45e:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb460:	68a8      	ldr	r0, [r5, #8]
   bb462:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb464:	2110      	movs	r1, #16
   bb466:	f7fd f84c 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb46a:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb46c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb46e:	2201      	movs	r2, #1
   bb470:	751a      	strb	r2, [r3, #20]
   bb472:	f7fe be00 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb476:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb47a:	f47e adfc 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb47e:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb480:	2e00      	cmp	r6, #0
   bb482:	f43e adf8 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb486:	68a8      	ldr	r0, [r5, #8]
   bb488:	2100      	movs	r1, #0
   bb48a:	f7fd f83a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb48e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb490:	68a8      	ldr	r0, [r5, #8]
   bb492:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb494:	2102      	movs	r1, #2
   bb496:	f7fd f834 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb49a:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb49c:	68a8      	ldr	r0, [r5, #8]
   bb49e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb4a0:	2104      	movs	r1, #4
   bb4a2:	f7fd f82e 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4a6:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb4a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb4ae:	609a      	str	r2, [r3, #8]
   bb4b0:	f7fe bde1 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb4b4:	680b      	ldr	r3, [r1, #0]
   bb4b6:	4ab0      	ldr	r2, [pc, #704]	; (bb778 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb4b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb4bc:	4293      	cmp	r3, r2
   bb4be:	f47e adda 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb4c2:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb4c4:	2b00      	cmp	r3, #0
   bb4c6:	f43e add6 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb4ca:	688a      	ldr	r2, [r1, #8]
   bb4cc:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb4ce:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb4d0:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb4d2:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb4d4:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb4d6:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb4d8:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb4da:	68a8      	ldr	r0, [r5, #8]
   bb4dc:	2102      	movs	r1, #2
   bb4de:	f7fd f810 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4e2:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb4e4:	68a8      	ldr	r0, [r5, #8]
   bb4e6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb4e8:	2104      	movs	r1, #4
   bb4ea:	f7fd f80a 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4ee:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb4f0:	68a8      	ldr	r0, [r5, #8]
   bb4f2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb4f4:	2106      	movs	r1, #6
   bb4f6:	f7fd f804 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4fa:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb4fc:	68a8      	ldr	r0, [r5, #8]
   bb4fe:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb500:	2108      	movs	r1, #8
   bb502:	f7fc fff1 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb506:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb508:	68a8      	ldr	r0, [r5, #8]
   bb50a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb50c:	210c      	movs	r1, #12
   bb50e:	f7fc ffeb 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb512:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb514:	68a8      	ldr	r0, [r5, #8]
   bb516:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb518:	2110      	movs	r1, #16
   bb51a:	f7fc ffe5 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb51e:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb520:	68a8      	ldr	r0, [r5, #8]
   bb522:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb524:	2114      	movs	r1, #20
   bb526:	f7fc ffdf 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb52a:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb52c:	68a8      	ldr	r0, [r5, #8]
   bb52e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb530:	2118      	movs	r1, #24
   bb532:	f7fc ffd9 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb536:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb538:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb53e:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb540:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb544:	b17a      	cbz	r2, bb566 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb546:	7819      	ldrb	r1, [r3, #0]
   bb548:	070e      	lsls	r6, r1, #28
   bb54a:	d40c      	bmi.n	bb566 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb54c:	1d19      	adds	r1, r3, #4
   bb54e:	3320      	adds	r3, #32
   bb550:	f851 0b04 	ldr.w	r0, [r1], #4
   bb554:	f842 0b04 	str.w	r0, [r2], #4
   bb558:	4299      	cmp	r1, r3
   bb55a:	d1f9      	bne.n	bb550 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb55c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb55e:	7813      	ldrb	r3, [r2, #0]
   bb560:	f043 0308 	orr.w	r3, r3, #8
   bb564:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb566:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb568:	f7fe be13 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb56c:	4a83      	ldr	r2, [pc, #524]	; (bb77c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb56e:	4293      	cmp	r3, r2
   bb570:	d158      	bne.n	bb624 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb572:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb576:	2f00      	cmp	r7, #0
   bb578:	f43e ad7d 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb57c:	68a8      	ldr	r0, [r5, #8]
   bb57e:	2100      	movs	r1, #0
   bb580:	f7fc ffb2 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb584:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb586:	68a8      	ldr	r0, [r5, #8]
   bb588:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb58c:	2108      	movs	r1, #8
   bb58e:	f7fc ffab 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb592:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb594:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb596:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb59a:	210c      	movs	r1, #12
   bb59c:	f7fc ffa4 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb5a0:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb5a4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5a8:	4631      	mov	r1, r6
   bb5aa:	f7fc ff9d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb5ae:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb5b2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5b6:	2114      	movs	r1, #20
   bb5b8:	f7fc ff96 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb5bc:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5be:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb5c0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5c4:	2118      	movs	r1, #24
   bb5c6:	f7fc ff8f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb5ca:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb5ce:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5d2:	211c      	movs	r1, #28
   bb5d4:	f7fc ff88 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb5d8:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5da:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb5dc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb5e0:	2120      	movs	r1, #32
   bb5e2:	f7fc ff81 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb5e6:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb5e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb5ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb5f0:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb5f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb5f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb5f8:	b182      	cbz	r2, bb61c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb5fa:	7819      	ldrb	r1, [r3, #0]
   bb5fc:	0709      	lsls	r1, r1, #28
   bb5fe:	d40d      	bmi.n	bb61c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb600:	1d19      	adds	r1, r3, #4
   bb602:	3328      	adds	r3, #40	; 0x28
   bb604:	f851 0b04 	ldr.w	r0, [r1], #4
   bb608:	f842 0b04 	str.w	r0, [r2], #4
   bb60c:	4299      	cmp	r1, r3
   bb60e:	d1f9      	bne.n	bb604 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb610:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb614:	7813      	ldrb	r3, [r2, #0]
   bb616:	f043 0308 	orr.w	r3, r3, #8
   bb61a:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb61c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb620:	f7fe bdb7 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb624:	784b      	ldrb	r3, [r1, #1]
   bb626:	2b02      	cmp	r3, #2
   bb628:	d158      	bne.n	bb6dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb62a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb62e:	2e00      	cmp	r6, #0
   bb630:	f43e ad21 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb634:	68a8      	ldr	r0, [r5, #8]
   bb636:	2100      	movs	r1, #0
   bb638:	f7fc ff56 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb63c:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb63e:	68a8      	ldr	r0, [r5, #8]
   bb640:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb644:	2104      	movs	r1, #4
   bb646:	f7fc ff5c 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb64a:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb64c:	68a8      	ldr	r0, [r5, #8]
   bb64e:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb652:	2106      	movs	r1, #6
   bb654:	f7fc ff55 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb658:	8170      	strh	r0, [r6, #10]
   bb65a:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb65c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb660:	886b      	ldrh	r3, [r5, #2]
   bb662:	7a7a      	ldrb	r2, [r7, #9]
   bb664:	b2b1      	uxth	r1, r6
   bb666:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb66a:	d320      	bcc.n	bb6ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb66c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb670:	886a      	ldrh	r2, [r5, #2]
   bb672:	7a73      	ldrb	r3, [r6, #9]
   bb674:	08db      	lsrs	r3, r3, #3
   bb676:	3302      	adds	r3, #2
   bb678:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb67c:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb680:	d826      	bhi.n	bb6d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb682:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb686:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb68a:	b160      	cbz	r0, bb6a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb68c:	780b      	ldrb	r3, [r1, #0]
   bb68e:	071a      	lsls	r2, r3, #28
   bb690:	d409      	bmi.n	bb6a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb692:	2288      	movs	r2, #136	; 0x88
   bb694:	3104      	adds	r1, #4
   bb696:	f008 fe6f 	bl	c4378 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb69a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb69e:	7813      	ldrb	r3, [r2, #0]
   bb6a0:	f043 0308 	orr.w	r3, r3, #8
   bb6a4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb6a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb6aa:	f7fe bd72 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb6ae:	3b08      	subs	r3, #8
   bb6b0:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb6b4:	ddda      	ble.n	bb66c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb6b6:	0089      	lsls	r1, r1, #2
   bb6b8:	3108      	adds	r1, #8
   bb6ba:	68a8      	ldr	r0, [r5, #8]
   bb6bc:	b289      	uxth	r1, r1
   bb6be:	f7fc ff13 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6c2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb6c6:	3601      	adds	r6, #1
   bb6c8:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb6ca:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb6cc:	d1c6      	bne.n	bb65c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb6ce:	e7cd      	b.n	bb66c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb6d0:	68a8      	ldr	r0, [r5, #8]
   bb6d2:	f7fc ff09 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6d6:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb6da:	e7d2      	b.n	bb682 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb6dc:	2b03      	cmp	r3, #3
   bb6de:	d14f      	bne.n	bb780 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb6e0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb6e4:	2900      	cmp	r1, #0
   bb6e6:	f43e acc6 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb6ea:	886a      	ldrh	r2, [r5, #2]
   bb6ec:	1f13      	subs	r3, r2, #4
   bb6ee:	bf48      	it	mi
   bb6f0:	1cd3      	addmi	r3, r2, #3
   bb6f2:	10db      	asrs	r3, r3, #3
   bb6f4:	2700      	movs	r7, #0
   bb6f6:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb6fa:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb6fc:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb6fe:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb702:	3b04      	subs	r3, #4
   bb704:	42bb      	cmp	r3, r7
   bb706:	dc08      	bgt.n	bb71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb708:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb70c:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb710:	bb10      	cbnz	r0, bb758 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb712:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb716:	f7fe bd3c 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb71a:	fa1f f887 	uxth.w	r8, r7
   bb71e:	f108 0104 	add.w	r1, r8, #4
   bb722:	68a8      	ldr	r0, [r5, #8]
   bb724:	b289      	uxth	r1, r1
   bb726:	f7fc fedf 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb72a:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb72e:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb732:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb736:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb73a:	68a8      	ldr	r0, [r5, #8]
   bb73c:	b289      	uxth	r1, r1
   bb73e:	f7fc fed3 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb742:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb746:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb748:	3601      	adds	r6, #1
   bb74a:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb74c:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb750:	f107 0708 	add.w	r7, r7, #8
   bb754:	d1d2      	bne.n	bb6fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb756:	e7d7      	b.n	bb708 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb758:	780b      	ldrb	r3, [r1, #0]
   bb75a:	071b      	lsls	r3, r3, #28
   bb75c:	d4d9      	bmi.n	bb712 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb75e:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb762:	3108      	adds	r1, #8
   bb764:	3004      	adds	r0, #4
   bb766:	f008 fe07 	bl	c4378 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb76a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb76e:	7813      	ldrb	r3, [r2, #0]
   bb770:	f043 0308 	orr.w	r3, r3, #8
   bb774:	7013      	strb	r3, [r2, #0]
   bb776:	e7cc      	b.n	bb712 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb778:	001c0300 	.word	0x001c0300
   bb77c:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb780:	2b10      	cmp	r3, #16
   bb782:	f47e ac78 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb786:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb78a:	2e00      	cmp	r6, #0
   bb78c:	f43e ac73 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb790:	68a8      	ldr	r0, [r5, #8]
   bb792:	2100      	movs	r1, #0
   bb794:	f7fc fea8 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb798:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb79a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb79c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb7a0:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb7a2:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb7a4:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb7a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb7aa:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb7ac:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb7ae:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb7b0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb7b4:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb7b6:	74da      	strb	r2, [r3, #19]
   bb7b8:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb7ba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb7be:	7cc6      	ldrb	r6, [r0, #19]
   bb7c0:	b28a      	uxth	r2, r1
   bb7c2:	4296      	cmp	r6, r2
   bb7c4:	d80c      	bhi.n	bb7e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb7c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7ce:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb7d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb7d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb7d6:	bb62      	cbnz	r2, bb832 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb7d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb7dc:	f7fe bcd9 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb7e0:	886a      	ldrh	r2, [r5, #2]
   bb7e2:	3a10      	subs	r2, #16
   bb7e4:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb7e8:	dded      	ble.n	bb7c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb7ea:	68aa      	ldr	r2, [r5, #8]
   bb7ec:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb7ee:	1d0a      	adds	r2, r1, #4
   bb7f0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb7f4:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb7f6:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb7f8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb7fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb7fe:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb800:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb804:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb806:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb808:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb80a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb80e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb810:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb814:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb816:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb818:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb81a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb81e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb820:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb824:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb826:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb828:	2907      	cmp	r1, #7
   bb82a:	f103 0304 	add.w	r3, r3, #4
   bb82e:	d1c4      	bne.n	bb7ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb830:	e7c9      	b.n	bb7c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb832:	7819      	ldrb	r1, [r3, #0]
   bb834:	070f      	lsls	r7, r1, #28
   bb836:	d4cf      	bmi.n	bb7d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb838:	1d19      	adds	r1, r3, #4
   bb83a:	3330      	adds	r3, #48	; 0x30
   bb83c:	f851 0b04 	ldr.w	r0, [r1], #4
   bb840:	f842 0b04 	str.w	r0, [r2], #4
   bb844:	4299      	cmp	r1, r3
   bb846:	d1f9      	bne.n	bb83c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb848:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb84c:	7813      	ldrb	r3, [r2, #0]
   bb84e:	f043 0308 	orr.w	r3, r3, #8
   bb852:	7013      	strb	r3, [r2, #0]
   bb854:	e7c0      	b.n	bb7d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb856:	680b      	ldr	r3, [r1, #0]
   bb858:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb85c:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb860:	d16a      	bne.n	bb938 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb862:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb866:	2b00      	cmp	r3, #0
   bb868:	f43e ac05 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb86c:	7818      	ldrb	r0, [r3, #0]
   bb86e:	7859      	ldrb	r1, [r3, #1]
   bb870:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb872:	bf36      	itet	cc
   bb874:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb878:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb87a:	1a52      	subcc	r2, r2, r1
   bb87c:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb87e:	2a0e      	cmp	r2, #14
   bb880:	d84b      	bhi.n	bb91a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb882:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb884:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb888:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb88a:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb88c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb890:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb892:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb894:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb896:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb89a:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb89c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8a0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb8a2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8a4:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb8a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8aa:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb8ac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8b0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb8b2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8b4:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb8b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8ba:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb8bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8c0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb8c2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8c4:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb8c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8ca:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb8cc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8d0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb8d2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8d4:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb8d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8da:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb8dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8e0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb8e2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8e4:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb8e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8ea:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb8ec:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb8f0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb8f2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb8f4:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb8f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb8fa:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb8fc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb900:	7813      	ldrb	r3, [r2, #0]
   bb902:	3301      	adds	r3, #1
   bb904:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb906:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb90a:	781a      	ldrb	r2, [r3, #0]
   bb90c:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb90e:	f47e abb2 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb912:	2200      	movs	r2, #0
   bb914:	701a      	strb	r2, [r3, #0]
   bb916:	f7fe bbae 	b.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb91a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb91e:	b923      	cbnz	r3, bb92a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb920:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb924:	2b00      	cmp	r3, #0
   bb926:	f43e aba6 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb92a:	4996      	ldr	r1, [pc, #600]	; (bbb84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb92c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb930:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb934:	f005 bca9 	b.w	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb938:	784b      	ldrb	r3, [r1, #1]
   bb93a:	2b80      	cmp	r3, #128	; 0x80
   bb93c:	f47e ab9b 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb940:	884b      	ldrh	r3, [r1, #2]
   bb942:	2ba4      	cmp	r3, #164	; 0xa4
   bb944:	f63e ab97 	bhi.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb948:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb94c:	2a00      	cmp	r2, #0
   bb94e:	f43e ab92 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb952:	7810      	ldrb	r0, [r2, #0]
   bb954:	7851      	ldrb	r1, [r2, #1]
   bb956:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb958:	bf36      	itet	cc
   bb95a:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb95c:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb95e:	1a5b      	subcc	r3, r3, r1
   bb960:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb962:	2bf8      	cmp	r3, #248	; 0xf8
   bb964:	d84f      	bhi.n	bba06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb966:	23ac      	movs	r3, #172	; 0xac
   bb968:	fb03 2200 	mla	r2, r3, r0, r2
   bb96c:	21b5      	movs	r1, #181	; 0xb5
   bb96e:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb970:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb974:	7811      	ldrb	r1, [r2, #0]
   bb976:	fb03 2201 	mla	r2, r3, r1, r2
   bb97a:	2162      	movs	r1, #98	; 0x62
   bb97c:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb97e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb982:	7811      	ldrb	r1, [r2, #0]
   bb984:	fb03 2201 	mla	r2, r3, r1, r2
   bb988:	2113      	movs	r1, #19
   bb98a:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb98c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb990:	7811      	ldrb	r1, [r2, #0]
   bb992:	fb03 2201 	mla	r2, r3, r1, r2
   bb996:	2180      	movs	r1, #128	; 0x80
   bb998:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb99a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb99e:	7811      	ldrb	r1, [r2, #0]
   bb9a0:	fb03 2201 	mla	r2, r3, r1, r2
   bb9a4:	8869      	ldrh	r1, [r5, #2]
   bb9a6:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb9a8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb9ac:	7811      	ldrb	r1, [r2, #0]
   bb9ae:	fb03 2201 	mla	r2, r3, r1, r2
   bb9b2:	8869      	ldrh	r1, [r5, #2]
   bb9b4:	0a09      	lsrs	r1, r1, #8
   bb9b6:	71d1      	strb	r1, [r2, #7]
   bb9b8:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb9ba:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb9bc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb9c0:	b28e      	uxth	r6, r1
   bb9c2:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb9c4:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb9c6:	d907      	bls.n	bb9d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb9c8:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb9ca:	fb03 2200 	mla	r2, r3, r0, r2
   bb9ce:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb9d0:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb9d2:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb9d4:	3101      	adds	r1, #1
   bb9d6:	e7f0      	b.n	bb9ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb9d8:	fb03 2200 	mla	r2, r3, r0, r2
   bb9dc:	7b29      	ldrb	r1, [r5, #12]
   bb9de:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb9e2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb9e6:	7b69      	ldrb	r1, [r5, #13]
   bb9e8:	7810      	ldrb	r0, [r2, #0]
   bb9ea:	fb03 2300 	mla	r3, r3, r0, r2
   bb9ee:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb9f2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb9f6:	7813      	ldrb	r3, [r2, #0]
   bb9f8:	3301      	adds	r3, #1
   bb9fa:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb9fc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bba00:	781a      	ldrb	r2, [r3, #0]
   bba02:	2afa      	cmp	r2, #250	; 0xfa
   bba04:	e783      	b.n	bb90e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba0a:	b923      	cbnz	r3, bba16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bba0c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba10:	2b00      	cmp	r3, #0
   bba12:	f43e ab30 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bba16:	495c      	ldr	r1, [pc, #368]	; (bbb88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bba18:	e788      	b.n	bb92c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bba1a:	680b      	ldr	r3, [r1, #0]
   bba1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bba20:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bba24:	f040 80b2 	bne.w	bbb8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bba28:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bba2c:	2f00      	cmp	r7, #0
   bba2e:	f43e ab22 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bba32:	68a8      	ldr	r0, [r5, #8]
   bba34:	2100      	movs	r1, #0
   bba36:	f7fc fd57 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba3a:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bba3c:	68a8      	ldr	r0, [r5, #8]
   bba3e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bba42:	2104      	movs	r1, #4
   bba44:	f7fc fd5d 	bl	b8502 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bba48:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bba4a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bba4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba50:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bba52:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bba54:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bba56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba5a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bba5c:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bba5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bba60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba64:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bba66:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bba68:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bba6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba6e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bba70:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bba72:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bba74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba78:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bba7a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bba7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bba7e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba82:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bba84:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba86:	210c      	movs	r1, #12
   bba88:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bba8a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba8e:	f7fc fd2b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bba92:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bba94:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bba96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bba9a:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bba9c:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bba9e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbaa0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbaa4:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbaa6:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaa8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbaaa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaae:	2114      	movs	r1, #20
   bbab0:	f7fc fd1a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbab4:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbab6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbab8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbabc:	2118      	movs	r1, #24
   bbabe:	f7fc fd13 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbac2:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbac4:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbac6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaca:	211c      	movs	r1, #28
   bbacc:	f7fc fd0c 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbad0:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbad2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbad4:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbad8:	2120      	movs	r1, #32
   bbada:	f7fc fd05 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbade:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbae0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbae2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbae6:	2124      	movs	r1, #36	; 0x24
   bbae8:	f7fc fcfe 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbaec:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaee:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbaf0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaf4:	4631      	mov	r1, r6
   bbaf6:	f7fc fcf7 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbafa:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbafc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbafe:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb02:	212c      	movs	r1, #44	; 0x2c
   bbb04:	f7fc fcf0 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbb08:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb0a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbb0c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbb10:	2130      	movs	r1, #48	; 0x30
   bbb12:	f7fc fce9 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbb16:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bbb18:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbb1c:	68a8      	ldr	r0, [r5, #8]
   bbb1e:	2134      	movs	r1, #52	; 0x34
   bbb20:	f7fc fce2 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbb24:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bbb26:	68a8      	ldr	r0, [r5, #8]
   bbb28:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbb2c:	2138      	movs	r1, #56	; 0x38
   bbb2e:	f7fc fcdb 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbb32:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bbb34:	68a8      	ldr	r0, [r5, #8]
   bbb36:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbb3a:	213c      	movs	r1, #60	; 0x3c
   bbb3c:	f7fc fcd4 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbb40:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bbb42:	68a8      	ldr	r0, [r5, #8]
   bbb44:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbb48:	2140      	movs	r1, #64	; 0x40
   bbb4a:	f7fc fccd 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbb4e:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbb50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbb54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb58:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbb5a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bbb5e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bbb60:	b160      	cbz	r0, bbb7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbb62:	780b      	ldrb	r3, [r1, #0]
   bbb64:	071e      	lsls	r6, r3, #28
   bbb66:	d409      	bmi.n	bbb7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bbb68:	2248      	movs	r2, #72	; 0x48
   bbb6a:	3104      	adds	r1, #4
   bbb6c:	f008 fc04 	bl	c4378 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbb70:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bbb74:	7813      	ldrb	r3, [r2, #0]
   bbb76:	f043 0308 	orr.w	r3, r3, #8
   bbb7a:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bbb7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbb80:	f7fe bb07 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bbb84:	000c6fa5 	.word	0x000c6fa5
   bbb88:	000c6fe2 	.word	0x000c6fe2
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bbb8c:	4a5d      	ldr	r2, [pc, #372]	; (bbd04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bbb8e:	4293      	cmp	r3, r2
   bbb90:	d156      	bne.n	bbc40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bbb92:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bbb96:	2e00      	cmp	r6, #0
   bbb98:	f43e aa6d 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bbb9c:	68a8      	ldr	r0, [r5, #8]
   bbb9e:	2100      	movs	r1, #0
   bbba0:	f7fc fca2 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbba4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bbba6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbba8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bbbac:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbbae:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbb0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbbb2:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbb6:	2108      	movs	r1, #8
   bbbb8:	f7fc fc96 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbbbc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbbe:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbbc0:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbc4:	210c      	movs	r1, #12
   bbbc6:	f7fc fc8f 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbbca:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbcc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbbce:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbbd2:	2110      	movs	r1, #16
   bbbd4:	f7fc fc88 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbbd8:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bbbda:	68a8      	ldr	r0, [r5, #8]
   bbbdc:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbbe0:	2114      	movs	r1, #20
   bbbe2:	f7fc fc81 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbbe6:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bbbe8:	68a8      	ldr	r0, [r5, #8]
   bbbea:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbbee:	2118      	movs	r1, #24
   bbbf0:	f7fc fc7a 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbbf4:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bbbf6:	68a8      	ldr	r0, [r5, #8]
   bbbf8:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbbfc:	211c      	movs	r1, #28
   bbbfe:	f7fc fc73 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbc02:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbc04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbc08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbc0c:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbc0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbc12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bbc14:	b182      	cbz	r2, bbc38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbc16:	7819      	ldrb	r1, [r3, #0]
   bbc18:	0708      	lsls	r0, r1, #28
   bbc1a:	d40d      	bmi.n	bbc38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bbc1c:	1d19      	adds	r1, r3, #4
   bbc1e:	3324      	adds	r3, #36	; 0x24
   bbc20:	f851 0b04 	ldr.w	r0, [r1], #4
   bbc24:	f842 0b04 	str.w	r0, [r2], #4
   bbc28:	4299      	cmp	r1, r3
   bbc2a:	d1f9      	bne.n	bbc20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbc2c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bbc30:	7813      	ldrb	r3, [r2, #0]
   bbc32:	f043 0308 	orr.w	r3, r3, #8
   bbc36:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bbc38:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbc3c:	f7fe baa9 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bbc40:	4a31      	ldr	r2, [pc, #196]	; (bbd08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bbc42:	4293      	cmp	r3, r2
   bbc44:	f47e aa17 	bne.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bbc48:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bbc4c:	2e00      	cmp	r6, #0
   bbc4e:	f43e aa12 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bbc52:	68a8      	ldr	r0, [r5, #8]
   bbc54:	2100      	movs	r1, #0
   bbc56:	f7fc fc47 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbc5a:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bbc5c:	68a8      	ldr	r0, [r5, #8]
   bbc5e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bbc62:	2108      	movs	r1, #8
   bbc64:	f7fc fc40 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbc68:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc6a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbc6c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc70:	210c      	movs	r1, #12
   bbc72:	f7fc fc39 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbc76:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc78:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbc7a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc7e:	2110      	movs	r1, #16
   bbc80:	f7fc fc32 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbc84:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc86:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbc88:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc8c:	2114      	movs	r1, #20
   bbc8e:	f7fc fc2b 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbc92:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc94:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbc96:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc9a:	2118      	movs	r1, #24
   bbc9c:	f7fc fc24 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbca0:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbca2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbca4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbca8:	211c      	movs	r1, #28
   bbcaa:	f7fc fc1d 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbcae:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcb0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbcb2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcb6:	2120      	movs	r1, #32
   bbcb8:	f7fc fc16 	bl	b84e8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbcbc:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbcbe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbcc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbcc6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbcc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbcce:	b182      	cbz	r2, bbcf2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbcd0:	7819      	ldrb	r1, [r3, #0]
   bbcd2:	0709      	lsls	r1, r1, #28
   bbcd4:	d40d      	bmi.n	bbcf2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbcd6:	1d19      	adds	r1, r3, #4
   bbcd8:	3328      	adds	r3, #40	; 0x28
   bbcda:	f851 0b04 	ldr.w	r0, [r1], #4
   bbcde:	f842 0b04 	str.w	r0, [r2], #4
   bbce2:	4299      	cmp	r1, r3
   bbce4:	d1f9      	bne.n	bbcda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbce6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbcea:	7813      	ldrb	r3, [r2, #0]
   bbcec:	f043 0308 	orr.w	r3, r3, #8
   bbcf0:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbcf2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbcf6:	f7fe ba4c 	b.w	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbcfa:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbcfc:	2018      	movs	r0, #24
   bbcfe:	f7ff b9a2 	b.w	bb046 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbd02:	bf00      	nop
   bbd04:	00200100 	.word	0x00200100
   bbd08:	00240200 	.word	0x00240200

000bbd0c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbd10:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbd12:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbd16:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbd1a:	4604      	mov	r4, r0
   bbd1c:	460f      	mov	r7, r1
   bbd1e:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbd20:	b993      	cbnz	r3, bbd48 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbd22:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbd26:	886b      	ldrh	r3, [r5, #2]
   bbd28:	88aa      	ldrh	r2, [r5, #4]
   bbd2a:	3303      	adds	r3, #3
   bbd2c:	4293      	cmp	r3, r2
   bbd2e:	db03      	blt.n	bbd38 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbd30:	4639      	mov	r1, r7
   bbd32:	4620      	mov	r0, r4
   bbd34:	f7fd fdf0 	bl	b9918 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbd38:	88ae      	ldrh	r6, [r5, #4]
   bbd3a:	bb7e      	cbnz	r6, bbd9c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbd3c:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbd3e:	88ab      	ldrh	r3, [r5, #4]
   bbd40:	3301      	adds	r3, #1
   bbd42:	80ab      	strh	r3, [r5, #4]
}
   bbd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbd48:	2b03      	cmp	r3, #3
   bbd4a:	d124      	bne.n	bbd96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbd4c:	7852      	ldrb	r2, [r2, #1]
   bbd4e:	7829      	ldrb	r1, [r5, #0]
   bbd50:	f7fc fdda 	bl	b8908 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bbd54:	4680      	mov	r8, r0
   bbd56:	2800      	cmp	r0, #0
   bbd58:	d1e5      	bne.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd5a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd5e:	b91b      	cbnz	r3, bbd68 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bbd60:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbd64:	2b00      	cmp	r3, #0
   bbd66:	d0de      	beq.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbd68:	49b7      	ldr	r1, [pc, #732]	; (bc048 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bbd6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd6e:	f005 fa72 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bbd72:	7829      	ldrb	r1, [r5, #0]
   bbd74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd78:	220a      	movs	r2, #10
   bbd7a:	f7fc fbd5 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bbd7e:	49b3      	ldr	r1, [pc, #716]	; (bc04c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbd80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd84:	f005 fa67 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bbd88:	7869      	ldrb	r1, [r5, #1]
   bbd8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd8e:	220a      	movs	r2, #10
   bbd90:	f7fc fbd1 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbd94:	e7c7      	b.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bbd96:	f04f 0802 	mov.w	r8, #2
   bbd9a:	e7c4      	b.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bbd9c:	2e01      	cmp	r6, #1
   bbd9e:	d101      	bne.n	bbda4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bbda0:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbda2:	e7cc      	b.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bbda4:	2e02      	cmp	r6, #2
   bbda6:	d101      	bne.n	bbdac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bbda8:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbdaa:	e7c8      	b.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bbdac:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bbdae:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bbdb0:	d103      	bne.n	bbdba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bbdb2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bbdb6:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbdb8:	e7c1      	b.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bbdba:	1d0b      	adds	r3, r1, #4
   bbdbc:	429e      	cmp	r6, r3
   bbdbe:	d136      	bne.n	bbe2e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bbdc0:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbdc2:	88aa      	ldrh	r2, [r5, #4]
   bbdc4:	f108 0306 	add.w	r3, r8, #6
   bbdc8:	429a      	cmp	r2, r3
   bbdca:	d1b8      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bbdcc:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbdd0:	2b00      	cmp	r3, #0
   bbdd2:	d1b4      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bbdd4:	2200      	movs	r2, #0
   bbdd6:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbdd8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bbddc:	b91a      	cbnz	r2, bbde6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bbdde:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bbde2:	2a00      	cmp	r2, #0
   bbde4:	d0ab      	beq.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbde6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bbdea:	2b00      	cmp	r3, #0
   bbdec:	f000 8170 	beq.w	bc0d0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbdf0:	4997      	ldr	r1, [pc, #604]	; (bc050 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbdf2:	f005 fa30 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bbdf6:	4997      	ldr	r1, [pc, #604]	; (bc054 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bbdf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdfc:	f005 fa2b 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbe00:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bbe04:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe08:	220a      	movs	r2, #10
   bbe0a:	f005 fa40 	bl	c128e <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bbe0e:	4992      	ldr	r1, [pc, #584]	; (bc058 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bbe10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe14:	f005 fa1f 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bbe18:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bbe1c:	220a      	movs	r2, #10
   bbe1e:	4641      	mov	r1, r8
   bbe20:	4620      	mov	r0, r4
   bbe22:	f005 fa34 	bl	c128e <_ZN5Print11printNumberEmh>
        n += println();
   bbe26:	4620      	mov	r0, r4
   bbe28:	f005 fa19 	bl	c125e <_ZN5Print7printlnEv>
        return n;
   bbe2c:	e787      	b.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bbe2e:	3105      	adds	r1, #5
   bbe30:	428e      	cmp	r6, r1
   bbe32:	f040 812f 	bne.w	bc094 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbe36:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bbe38:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbe3a:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bbe3c:	89a9      	ldrh	r1, [r5, #12]
   bbe3e:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bbe42:	4291      	cmp	r1, r2
   bbe44:	f040 80ae 	bne.w	bbfa4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bbe48:	2301      	movs	r3, #1
   bbe4a:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bbe4c:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbe50:	7829      	ldrb	r1, [r5, #0]
   bbe52:	4549      	cmp	r1, r9
   bbe54:	d155      	bne.n	bbf02 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bbe56:	786b      	ldrb	r3, [r5, #1]
   bbe58:	4553      	cmp	r3, sl
   bbe5a:	d152      	bne.n	bbf02 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bbe5c:	2301      	movs	r3, #1
   bbe5e:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bbe60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe64:	b3b3      	cbz	r3, bbed4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bbe66:	497d      	ldr	r1, [pc, #500]	; (bc05c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bbe68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe6c:	f005 f9f3 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbe70:	220a      	movs	r2, #10
   bbe72:	8869      	ldrh	r1, [r5, #2]
   bbe74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe78:	f005 fa09 	bl	c128e <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bbe7c:	4978      	ldr	r1, [pc, #480]	; (bc060 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bbe7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe82:	f005 f9e8 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bbe86:	2200      	movs	r2, #0
   bbe88:	4629      	mov	r1, r5
   bbe8a:	4620      	mov	r0, r4
   bbe8c:	f7fd ff50 	bl	b9d30 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbe90:	7bab      	ldrb	r3, [r5, #14]
   bbe92:	2b01      	cmp	r3, #1
   bbe94:	d104      	bne.n	bbea0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bbe96:	4973      	ldr	r1, [pc, #460]	; (bc064 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bbe98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe9c:	f005 f9f5 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbea0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bbea4:	2b01      	cmp	r3, #1
   bbea6:	d104      	bne.n	bbeb2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bbea8:	496f      	ldr	r1, [pc, #444]	; (bc068 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bbeaa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbeae:	f005 f9ec 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbeb2:	7beb      	ldrb	r3, [r5, #15]
   bbeb4:	2b01      	cmp	r3, #1
   bbeb6:	d104      	bne.n	bbec2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bbeb8:	496c      	ldr	r1, [pc, #432]	; (bc06c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bbeba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbebe:	f005 f9e4 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbec2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bbec6:	2b01      	cmp	r3, #1
   bbec8:	d104      	bne.n	bbed4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bbeca:	4969      	ldr	r1, [pc, #420]	; (bc070 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bbecc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbed0:	f005 f9db 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bbed4:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbed8:	b91b      	cbnz	r3, bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bbeda:	4629      	mov	r1, r5
   bbedc:	4620      	mov	r0, r4
   bbede:	f7fe f8b9 	bl	ba054 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbee2:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbee6:	2b03      	cmp	r3, #3
   bbee8:	f47f af6b 	bne.w	bbdc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bbeec:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbef0:	b108      	cbz	r0, bbef6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bbef2:	f7f8 f8d4 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bbef6:	2300      	movs	r3, #0
   bbef8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bbefc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf00:	e75f      	b.n	bbdc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbf02:	882b      	ldrh	r3, [r5, #0]
   bbf04:	f240 1205 	movw	r2, #261	; 0x105
   bbf08:	4293      	cmp	r3, r2
   bbf0a:	d123      	bne.n	bbf54 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bbf0c:	68ab      	ldr	r3, [r5, #8]
   bbf0e:	781a      	ldrb	r2, [r3, #0]
   bbf10:	454a      	cmp	r2, r9
   bbf12:	d102      	bne.n	bbf1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbf14:	785b      	ldrb	r3, [r3, #1]
   bbf16:	4553      	cmp	r3, sl
   bbf18:	d0a0      	beq.n	bbe5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbf1a:	786a      	ldrb	r2, [r5, #1]
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	f7fc fbf1 	bl	b8704 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbf22:	2800      	cmp	r0, #0
   bbf24:	d09c      	beq.n	bbe60 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bbf26:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf2a:	2b00      	cmp	r3, #0
   bbf2c:	d0d2      	beq.n	bbed4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bbf2e:	4951      	ldr	r1, [pc, #324]	; (bc074 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bbf30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf34:	f005 f98f 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bbf38:	2210      	movs	r2, #16
   bbf3a:	7829      	ldrb	r1, [r5, #0]
   bbf3c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf40:	f7fc faf2 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbf44:	4941      	ldr	r1, [pc, #260]	; (bc04c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbf46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf4a:	f005 f984 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bbf4e:	7869      	ldrb	r1, [r5, #1]
   bbf50:	2210      	movs	r2, #16
   bbf52:	e022      	b.n	bbf9a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbf54:	2b05      	cmp	r3, #5
   bbf56:	d1e0      	bne.n	bbf1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbf58:	68ab      	ldr	r3, [r5, #8]
   bbf5a:	781a      	ldrb	r2, [r3, #0]
   bbf5c:	454a      	cmp	r2, r9
   bbf5e:	d1dc      	bne.n	bbf1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbf60:	785b      	ldrb	r3, [r3, #1]
   bbf62:	4553      	cmp	r3, sl
   bbf64:	d1d9      	bne.n	bbf1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bbf66:	2303      	movs	r3, #3
   bbf68:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bbf6a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf6e:	2b00      	cmp	r3, #0
   bbf70:	d0b0      	beq.n	bbed4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bbf72:	4941      	ldr	r1, [pc, #260]	; (bc078 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bbf74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf78:	f005 f96d 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bbf7c:	68ab      	ldr	r3, [r5, #8]
   bbf7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf82:	7819      	ldrb	r1, [r3, #0]
   bbf84:	2210      	movs	r2, #16
   bbf86:	f7fc facf 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bbf8a:	493c      	ldr	r1, [pc, #240]	; (bc07c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bbf8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf90:	f005 f961 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bbf94:	68ab      	ldr	r3, [r5, #8]
   bbf96:	7859      	ldrb	r1, [r3, #1]
   bbf98:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bbf9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf9e:	f7fc faca 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbfa2:	e75d      	b.n	bbe60 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bbfa4:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbfa6:	782b      	ldrb	r3, [r5, #0]
   bbfa8:	454b      	cmp	r3, r9
   bbfaa:	d143      	bne.n	bc034 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bbfac:	786a      	ldrb	r2, [r5, #1]
   bbfae:	4552      	cmp	r2, sl
   bbfb0:	d140      	bne.n	bc034 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bbfb2:	2300      	movs	r3, #0
   bbfb4:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbfb6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbfba:	b91b      	cbnz	r3, bbfc4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bbfbc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbfc0:	2b00      	cmp	r3, #0
   bbfc2:	d08e      	beq.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bbfc4:	492e      	ldr	r1, [pc, #184]	; (bc080 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bbfc6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfca:	f005 f944 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bbfce:	492d      	ldr	r1, [pc, #180]	; (bc084 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bbfd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfd4:	f005 f93f 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bbfd8:	7b29      	ldrb	r1, [r5, #12]
   bbfda:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfde:	220a      	movs	r2, #10
   bbfe0:	f7fc faa2 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bbfe4:	4928      	ldr	r1, [pc, #160]	; (bc088 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bbfe6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfea:	f005 f934 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bbfee:	7b69      	ldrb	r1, [r5, #13]
   bbff0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbff4:	220a      	movs	r2, #10
   bbff6:	f7fc fa97 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bbffa:	4924      	ldr	r1, [pc, #144]	; (bc08c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bbffc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc000:	f005 f929 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bc004:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bc008:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc00c:	220a      	movs	r2, #10
   bc00e:	f7fc fa8b 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bc012:	491f      	ldr	r1, [pc, #124]	; (bc090 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bc014:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc018:	f005 f91d 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bc01c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc020:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bc024:	220a      	movs	r2, #10
   bc026:	f7fc fa7f 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bc02a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc02e:	f005 f916 	bl	c125e <_ZN5Print7printlnEv>
   bc032:	e756      	b.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc034:	2b05      	cmp	r3, #5
   bc036:	d1be      	bne.n	bbfb6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc038:	68ab      	ldr	r3, [r5, #8]
   bc03a:	781a      	ldrb	r2, [r3, #0]
   bc03c:	454a      	cmp	r2, r9
   bc03e:	d1ba      	bne.n	bbfb6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc040:	785b      	ldrb	r3, [r3, #1]
   bc042:	4553      	cmp	r3, sl
   bc044:	d1b7      	bne.n	bbfb6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc046:	e7b4      	b.n	bbfb2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bc048:	000c7024 	.word	0x000c7024
   bc04c:	000c7095 	.word	0x000c7095
   bc050:	000c719d 	.word	0x000c719d
   bc054:	000c71f4 	.word	0x000c71f4
   bc058:	000c720a 	.word	0x000c720a
   bc05c:	000c70d1 	.word	0x000c70d1
   bc060:	000c70e2 	.word	0x000c70e2
   bc064:	000c70ee 	.word	0x000c70ee
   bc068:	000c7102 	.word	0x000c7102
   bc06c:	000c7116 	.word	0x000c7116
   bc070:	000c7130 	.word	0x000c7130
   bc074:	000c709d 	.word	0x000c709d
   bc078:	000c705c 	.word	0x000c705c
   bc07c:	000c708b 	.word	0x000c708b
   bc080:	000c714a 	.word	0x000c714a
   bc084:	000c715b 	.word	0x000c715b
   bc088:	000c7168 	.word	0x000c7168
   bc08c:	000c7175 	.word	0x000c7175
   bc090:	000c7189 	.word	0x000c7189
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc094:	786a      	ldrb	r2, [r5, #1]
   bc096:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bc098:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc09c:	4620      	mov	r0, r4
   bc09e:	f7fc fb31 	bl	b8704 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bc0a2:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bc0a6:	2800      	cmp	r0, #0
   bc0a8:	bf18      	it	ne
   bc0aa:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bc0ae:	2b00      	cmp	r3, #0
   bc0b0:	f47f ae87 	bne.w	bbdc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bc0b4:	1ef3      	subs	r3, r6, #3
   bc0b6:	454b      	cmp	r3, r9
   bc0b8:	f77f ae83 	ble.w	bbdc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bc0bc:	3e04      	subs	r6, #4
   bc0be:	eba6 0609 	sub.w	r6, r6, r9
   bc0c2:	4546      	cmp	r6, r8
   bc0c4:	da02      	bge.n	bc0cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bc0c6:	68ab      	ldr	r3, [r5, #8]
   bc0c8:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc0ca:	e67a      	b.n	bbdc2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bc0cc:	2301      	movs	r3, #1
   bc0ce:	e681      	b.n	bbdd4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc0d0:	4900      	ldr	r1, [pc, #0]	; (bc0d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bc0d2:	e68e      	b.n	bbdf2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bc0d4:	000c71c2 	.word	0x000c71c2

000bc0d8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bc0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc0da:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bc0de:	4604      	mov	r4, r0
   bc0e0:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc0e2:	b113      	cbz	r3, bc0ea <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bc0e4:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bc0e8:	b953      	cbnz	r3, bc100 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bc0ea:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bc0ee:	b128      	cbz	r0, bc0fc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bc0f0:	490e      	ldr	r1, [pc, #56]	; (bc12c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc0f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0f6:	f005 f8c8 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bc0fa:	2000      	movs	r0, #0
}
   bc0fc:	b003      	add	sp, #12
   bc0fe:	bd30      	pop	{r4, r5, pc}
   bc100:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bc102:	f7fd ff12 	bl	b9f2a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bc106:	4285      	cmp	r5, r0
   bc108:	9901      	ldr	r1, [sp, #4]
   bc10a:	d908      	bls.n	bc11e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc10c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc110:	b91b      	cbnz	r3, bc11a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bc112:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc116:	2800      	cmp	r0, #0
   bc118:	d0f0      	beq.n	bc0fc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc11a:	4905      	ldr	r1, [pc, #20]	; (bc130 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bc11c:	e7e9      	b.n	bc0f2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bc11e:	4620      	mov	r0, r4
   bc120:	462a      	mov	r2, r5
   bc122:	f7fd ff0b 	bl	b9f3c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bc126:	2001      	movs	r0, #1
   bc128:	e7e8      	b.n	bc0fc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bc12a:	bf00      	nop
   bc12c:	000c7222 	.word	0x000c7222
   bc130:	000c724d 	.word	0x000c724d

000bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bc134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc138:	4604      	mov	r4, r0
   bc13a:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bc13c:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bc140:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bc144:	f88d 100f 	strb.w	r1, [sp, #15]
   bc148:	4615      	mov	r5, r2
   bc14a:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bc14c:	b118      	cbz	r0, bc156 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bc14e:	6803      	ldr	r3, [r0, #0]
   bc150:	b2c9      	uxtb	r1, r1
   bc152:	689b      	ldr	r3, [r3, #8]
   bc154:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bc156:	7823      	ldrb	r3, [r4, #0]
   bc158:	2b01      	cmp	r3, #1
   bc15a:	d80e      	bhi.n	bc17a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc15c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc160:	2bb5      	cmp	r3, #181	; 0xb5
   bc162:	d12e      	bne.n	bc1c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bc164:	2300      	movs	r3, #0
   bc166:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc16a:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bc16c:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc170:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc174:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc176:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bc17a:	7826      	ldrb	r6, [r4, #0]
   bc17c:	2e02      	cmp	r6, #2
   bc17e:	f040 81d5 	bne.w	bc52c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bc182:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc186:	bb5b      	cbnz	r3, bc1e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bc188:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc18c:	2bb5      	cmp	r3, #181	; 0xb5
   bc18e:	d001      	beq.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bc190:	2300      	movs	r3, #0
   bc192:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc194:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc198:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc19c:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc1a0:	2b01      	cmp	r3, #1
   bc1a2:	f040 81a3 	bne.w	bc4ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc1a6:	463b      	mov	r3, r7
   bc1a8:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc1ac:	4620      	mov	r0, r4
   bc1ae:	f7ff fdad 	bl	bbd0c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bc1b2:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc1b6:	3301      	adds	r3, #1
   bc1b8:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bc1bc:	b005      	add	sp, #20
   bc1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bc1c2:	2b24      	cmp	r3, #36	; 0x24
   bc1c4:	d105      	bne.n	bc1d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bc1c6:	2300      	movs	r3, #0
   bc1c8:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bc1cc:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc1ce:	7023      	strb	r3, [r4, #0]
   bc1d0:	e7d3      	b.n	bc17a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bc1d2:	2bd3      	cmp	r3, #211	; 0xd3
   bc1d4:	d1d1      	bne.n	bc17a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bc1d6:	2300      	movs	r3, #0
   bc1d8:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc1dc:	2303      	movs	r3, #3
   bc1de:	e7f6      	b.n	bc1ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc1e0:	2b01      	cmp	r3, #1
   bc1e2:	d103      	bne.n	bc1ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc1e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc1e8:	2b62      	cmp	r3, #98	; 0x62
   bc1ea:	e7d0      	b.n	bc18e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc1ec:	2b02      	cmp	r3, #2
   bc1ee:	d10e      	bne.n	bc20e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc1f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc1f4:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc1f8:	2200      	movs	r2, #0
   bc1fa:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc1fe:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc202:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc206:	88eb      	ldrh	r3, [r5, #6]
   bc208:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc20c:	e7c2      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc20e:	2b03      	cmp	r3, #3
   bc210:	f040 80b7 	bne.w	bc382 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc214:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc218:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc21c:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc220:	2905      	cmp	r1, #5
   bc222:	d0b7      	beq.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc224:	42b9      	cmp	r1, r7
   bc226:	d10c      	bne.n	bc242 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc228:	4546      	cmp	r6, r8
   bc22a:	d10a      	bne.n	bc242 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc22c:	2300      	movs	r3, #0
   bc22e:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc232:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc234:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc238:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc23a:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc23e:	80ab      	strh	r3, [r5, #4]
   bc240:	e7a8      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc242:	4632      	mov	r2, r6
   bc244:	4620      	mov	r0, r4
   bc246:	f7fc fa5d 	bl	b8704 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc24a:	2800      	cmp	r0, #0
   bc24c:	f000 8095 	beq.w	bc37a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc250:	4632      	mov	r2, r6
   bc252:	4620      	mov	r0, r4
   bc254:	f7fc fb58 	bl	b8908 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc258:	4606      	mov	r6, r0
   bc25a:	b9e8      	cbnz	r0, bc298 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc25c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc260:	b913      	cbnz	r3, bc268 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc262:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc266:	b1bb      	cbz	r3, bc298 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc268:	49a7      	ldr	r1, [pc, #668]	; (bc508 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc26a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc26e:	f004 fff2 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc272:	220a      	movs	r2, #10
   bc274:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc278:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc27c:	f7fc f954 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc280:	49a2      	ldr	r1, [pc, #648]	; (bc50c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc282:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc286:	f004 ffe6 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc28a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc28e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc292:	220a      	movs	r2, #10
   bc294:	f7fc f94f 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc298:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc29c:	b1a3      	cbz	r3, bc2c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc29e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2a2:	b913      	cbnz	r3, bc2aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc2a4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc2a8:	b123      	cbz	r3, bc2b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc2aa:	4999      	ldr	r1, [pc, #612]	; (bc510 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc2ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2b0:	f004 ffeb 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc2b4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc2b8:	b108      	cbz	r0, bc2be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc2ba:	f7f7 fef0 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc2be:	2300      	movs	r3, #0
   bc2c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc2c4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc2c8:	4630      	mov	r0, r6
   bc2ca:	f7f7 fee6 	bl	b409a <_Znaj>
   bc2ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2d2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc2d6:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc2da:	bb38      	cbnz	r0, bc32c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc2dc:	b913      	cbnz	r3, bc2e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc2de:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc2e2:	b1e3      	cbz	r3, bc31e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc2e4:	498b      	ldr	r1, [pc, #556]	; (bc514 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc2e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2ea:	f004 ffb4 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc2ee:	2210      	movs	r2, #16
   bc2f0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc2f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2f8:	f7fc f916 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc2fc:	4983      	ldr	r1, [pc, #524]	; (bc50c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc2fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc302:	f004 ffa8 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc306:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc30a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc30e:	2210      	movs	r2, #16
   bc310:	f7fc f911 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc314:	4980      	ldr	r1, [pc, #512]	; (bc518 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc316:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc31a:	f004 ffb6 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc31e:	2300      	movs	r3, #0
   bc320:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc324:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc328:	702b      	strb	r3, [r5, #0]
   bc32a:	e783      	b.n	bc234 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc32c:	2203      	movs	r2, #3
   bc32e:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc332:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc336:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc33a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc33e:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc342:	2b00      	cmp	r3, #0
   bc344:	f43f af26 	beq.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc348:	4974      	ldr	r1, [pc, #464]	; (bc51c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc34a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc34e:	f004 ff82 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc352:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc356:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc35a:	2210      	movs	r2, #16
   bc35c:	f7fc f8e4 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc360:	496a      	ldr	r1, [pc, #424]	; (bc50c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc362:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc366:	f004 ff76 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc36a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc36e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc372:	2210      	movs	r2, #16
   bc374:	f7fc f8df 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc378:	e70c      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc37a:	2301      	movs	r3, #1
   bc37c:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc380:	e708      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc382:	2b04      	cmp	r3, #4
   bc384:	d104      	bne.n	bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc386:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc38a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc38e:	e701      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc390:	2b05      	cmp	r3, #5
   bc392:	d106      	bne.n	bc3a2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc394:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc398:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc39c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc3a0:	e7f3      	b.n	bc38a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc3a2:	2b06      	cmp	r3, #6
   bc3a4:	d12b      	bne.n	bc3fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc3a6:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc3aa:	bb13      	cbnz	r3, bc3f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc3ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3b0:	b913      	cbnz	r3, bc3b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc3b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc3b6:	b1bb      	cbz	r3, bc3e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc3b8:	4959      	ldr	r1, [pc, #356]	; (bc520 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc3ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3be:	f004 ff4a 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc3c2:	2210      	movs	r2, #16
   bc3c4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc3c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3cc:	f7fc f8ac 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc3d0:	494e      	ldr	r1, [pc, #312]	; (bc50c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc3d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3d6:	f004 ff3e 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc3da:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc3de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3e2:	2210      	movs	r2, #16
   bc3e4:	f7fc f8a7 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc3e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc3ec:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc3f0:	e6d0      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc3f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc3f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc3fa:	701a      	strb	r2, [r3, #0]
   bc3fc:	e6ca      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc3fe:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc400:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc404:	f47f aec6 	bne.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc408:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc40c:	bb9b      	cbnz	r3, bc476 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc40e:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc412:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc416:	2b02      	cmp	r3, #2
   bc418:	f47f aebc 	bne.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc41c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc420:	2905      	cmp	r1, #5
   bc422:	f47f aeb7 	bne.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc426:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc42a:	781a      	ldrb	r2, [r3, #0]
   bc42c:	42ba      	cmp	r2, r7
   bc42e:	f47f aeb1 	bne.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc432:	785a      	ldrb	r2, [r3, #1]
   bc434:	4542      	cmp	r2, r8
   bc436:	f47f aead 	bne.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc43a:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc43e:	2a02      	cmp	r2, #2
   bc440:	d121      	bne.n	bc486 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc442:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc446:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc44a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc44e:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc452:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc456:	2001      	movs	r0, #1
   bc458:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc45c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc460:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc464:	781b      	ldrb	r3, [r3, #0]
   bc466:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc468:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc46c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc470:	7852      	ldrb	r2, [r2, #1]
   bc472:	705a      	strb	r2, [r3, #1]
   bc474:	e68e      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc476:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc478:	bf16      	itet	ne
   bc47a:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc47e:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc482:	705a      	strbne	r2, [r3, #1]
   bc484:	e7c5      	b.n	bc412 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc486:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc48a:	b923      	cbnz	r3, bc496 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc48c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc490:	2b00      	cmp	r3, #0
   bc492:	f43f ae7f 	beq.w	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc496:	4923      	ldr	r1, [pc, #140]	; (bc524 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc498:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49c:	f004 fedb 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc4a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc4a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4a8:	7819      	ldrb	r1, [r3, #0]
   bc4aa:	2210      	movs	r2, #16
   bc4ac:	f7fc f83c 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc4b0:	4916      	ldr	r1, [pc, #88]	; (bc50c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc4b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b6:	f004 fece 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc4ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc4be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4c2:	7859      	ldrb	r1, [r3, #1]
   bc4c4:	2210      	movs	r2, #16
   bc4c6:	f7fc f82f 	bl	b8528 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc4ca:	4917      	ldr	r1, [pc, #92]	; (bc528 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc4cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4d0:	f004 fec1 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc4d4:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc4d8:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc4dc:	220a      	movs	r2, #10
   bc4de:	4630      	mov	r0, r6
   bc4e0:	f004 fed5 	bl	c128e <_ZN5Print11printNumberEmh>
        n += println();
   bc4e4:	4630      	mov	r0, r6
   bc4e6:	f004 feba 	bl	c125e <_ZN5Print7printlnEv>
        return n;
   bc4ea:	e653      	b.n	bc194 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc4ec:	b913      	cbnz	r3, bc4f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc4ee:	463b      	mov	r3, r7
   bc4f0:	462a      	mov	r2, r5
   bc4f2:	e65b      	b.n	bc1ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc4f4:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc4f6:	bf08      	it	eq
   bc4f8:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc4fc:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc4fe:	bf18      	it	ne
   bc500:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc504:	e652      	b.n	bc1ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc506:	bf00      	nop
   bc508:	000c728e 	.word	0x000c728e
   bc50c:	000c7095 	.word	0x000c7095
   bc510:	000c72c3 	.word	0x000c72c3
   bc514:	000c7305 	.word	0x000c7305
   bc518:	000c734a 	.word	0x000c734a
   bc51c:	000c737c 	.word	0x000c737c
   bc520:	000c73ad 	.word	0x000c73ad
   bc524:	000c73dd 	.word	0x000c73dd
   bc528:	000c740d 	.word	0x000c740d
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc52c:	2e01      	cmp	r6, #1
   bc52e:	f040 8188 	bne.w	bc842 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc532:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc536:	2b00      	cmp	r3, #0
   bc538:	d146      	bne.n	bc5c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc53a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc53e:	2a24      	cmp	r2, #36	; 0x24
   bc540:	f000 8086 	beq.w	bc650 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc544:	2300      	movs	r3, #0
   bc546:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc548:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc54c:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc54e:	bf04      	itt	eq
   bc550:	23fb      	moveq	r3, #251	; 0xfb
   bc552:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc556:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc55a:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc55e:	3501      	adds	r5, #1
   bc560:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc562:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc564:	bf08      	it	eq
   bc566:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc568:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc56c:	bf08      	it	eq
   bc56e:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc570:	2d00      	cmp	r5, #0
   bc572:	f47f ae23 	bne.w	bc1bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc576:	4620      	mov	r0, r4
   bc578:	f7fc fc20 	bl	b8dbc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc57c:	2800      	cmp	r0, #0
   bc57e:	f000 8120 	beq.w	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc582:	4620      	mov	r0, r4
   bc584:	f7fc fd7c 	bl	b9080 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc588:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc58a:	4620      	mov	r0, r4
   bc58c:	f7fc fdfa 	bl	b9184 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc590:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc592:	4620      	mov	r0, r4
   bc594:	f7fd f88a 	bl	b96ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc598:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc59a:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc59c:	1e41      	subs	r1, r0, #1
   bc59e:	428e      	cmp	r6, r1
   bc5a0:	f280 80b4 	bge.w	bc70c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc5a4:	783a      	ldrb	r2, [r7, #0]
   bc5a6:	3a04      	subs	r2, #4
   bc5a8:	4296      	cmp	r6, r2
   bc5aa:	f280 80af 	bge.w	bc70c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc5ae:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc5b0:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc5b4:	f000 80ad 	beq.w	bc712 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc5b8:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc5ba:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc5be:	bf18      	it	ne
   bc5c0:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc5c2:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc5c4:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc5c6:	e7ea      	b.n	bc59e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc5c8:	2b01      	cmp	r3, #1
   bc5ca:	d103      	bne.n	bc5d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc5cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc5d0:	2a47      	cmp	r2, #71	; 0x47
   bc5d2:	e7b5      	b.n	bc540 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc5d4:	b2da      	uxtb	r2, r3
   bc5d6:	2a05      	cmp	r2, #5
   bc5d8:	d93a      	bls.n	bc650 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc5da:	4620      	mov	r0, r4
   bc5dc:	f7fc fbee 	bl	b8dbc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc5e0:	b308      	cbz	r0, bc626 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc5e2:	4620      	mov	r0, r4
   bc5e4:	f7fc fd4c 	bl	b9080 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc5e8:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc5ea:	4620      	mov	r0, r4
   bc5ec:	f7fc fdca 	bl	b9184 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc5f0:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc5f2:	4620      	mov	r0, r4
   bc5f4:	f7fd f85a 	bl	b96ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc5f8:	782b      	ldrb	r3, [r5, #0]
   bc5fa:	4283      	cmp	r3, r0
   bc5fc:	d213      	bcs.n	bc626 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc5fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc602:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc604:	782b      	ldrb	r3, [r5, #0]
   bc606:	3301      	adds	r3, #1
   bc608:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc60a:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc60c:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc60e:	d10a      	bne.n	bc626 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc610:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc614:	b913      	cbnz	r3, bc61c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc616:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc61a:	b123      	cbz	r3, bc626 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc61c:	498f      	ldr	r1, [pc, #572]	; (bc85c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc61e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc622:	f004 fe32 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc626:	4620      	mov	r0, r4
   bc628:	f7fc f9c8 	bl	b89bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc62c:	b128      	cbz	r0, bc63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc62e:	2201      	movs	r2, #1
   bc630:	f10d 010f 	add.w	r1, sp, #15
   bc634:	4620      	mov	r0, r4
   bc636:	f7ff fd4f 	bl	bc0d8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc63a:	4620      	mov	r0, r4
   bc63c:	f7fc faee 	bl	b8c1c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc640:	2800      	cmp	r0, #0
   bc642:	d081      	beq.n	bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc644:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc648:	4620      	mov	r0, r4
   bc64a:	f7fc fbaf 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc64e:	e77b      	b.n	bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc650:	18e2      	adds	r2, r4, r3
   bc652:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc656:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc65a:	2b05      	cmp	r3, #5
   bc65c:	f47f af74 	bne.w	bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc660:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc664:	b923      	cbnz	r3, bc670 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc666:	4620      	mov	r0, r4
   bc668:	f7fc fa70 	bl	b8b4c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc66c:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc670:	4620      	mov	r0, r4
   bc672:	f7fc fba3 	bl	b8dbc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc676:	b1b8      	cbz	r0, bc6a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc678:	4620      	mov	r0, r4
   bc67a:	f7fc fd01 	bl	b9080 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc67e:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc680:	4620      	mov	r0, r4
   bc682:	f7fc fd7f 	bl	b9184 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc686:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc688:	4620      	mov	r0, r4
   bc68a:	f7fd f80f 	bl	b96ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc68e:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc690:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc692:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc694:	2100      	movs	r1, #0
   bc696:	4628      	mov	r0, r5
   bc698:	f007 fe96 	bl	c43c8 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc69c:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc6a0:	602b      	str	r3, [r5, #0]
   bc6a2:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc6a6:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc6a8:	4620      	mov	r0, r4
   bc6aa:	f7fc f987 	bl	b89bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc6ae:	b128      	cbz	r0, bc6bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc6b0:	2206      	movs	r2, #6
   bc6b2:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc6b6:	4620      	mov	r0, r4
   bc6b8:	f7ff fd0e 	bl	bc0d8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc6bc:	4620      	mov	r0, r4
   bc6be:	f7fc faad 	bl	b8c1c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc6c2:	b1e8      	cbz	r0, bc700 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc6c4:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc6c8:	4620      	mov	r0, r4
   bc6ca:	f7fc fb6f 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc6ce:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc6d2:	4620      	mov	r0, r4
   bc6d4:	f7fc fb6a 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc6d8:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc6dc:	4620      	mov	r0, r4
   bc6de:	f7fc fb65 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc6e2:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc6e6:	4620      	mov	r0, r4
   bc6e8:	f7fc fb60 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc6ec:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc6f0:	4620      	mov	r0, r4
   bc6f2:	f7fc fb5b 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc6f6:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc6fa:	4620      	mov	r0, r4
   bc6fc:	f7fc fb56 	bl	b8dac <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc700:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc704:	2b05      	cmp	r3, #5
   bc706:	f67f af1f 	bls.w	bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc70a:	e766      	b.n	bc5da <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc70c:	2d2a      	cmp	r5, #42	; 0x2a
   bc70e:	f040 808b 	bne.w	bc828 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc712:	091a      	lsrs	r2, r3, #4
   bc714:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc718:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc71a:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc71c:	f003 030f 	and.w	r3, r3, #15
   bc720:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc724:	bf84      	itt	hi
   bc726:	3237      	addhi	r2, #55	; 0x37
   bc728:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc72a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc72e:	bf88      	it	hi
   bc730:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc734:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc738:	42ab      	cmp	r3, r5
   bc73a:	eb08 0b06 	add.w	fp, r8, r6
   bc73e:	d143      	bne.n	bc7c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc740:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc744:	4553      	cmp	r3, sl
   bc746:	d13f      	bne.n	bc7c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc748:	4620      	mov	r0, r4
   bc74a:	f7fc fd9d 	bl	b9288 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc74e:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc750:	4620      	mov	r0, r4
   bc752:	f7fc fe1d 	bl	b9390 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc756:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc758:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc75a:	2100      	movs	r1, #0
   bc75c:	f007 fe34 	bl	c43c8 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc760:	783a      	ldrb	r2, [r7, #0]
   bc762:	4641      	mov	r1, r8
   bc764:	4630      	mov	r0, r6
   bc766:	f007 fe07 	bl	c4378 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc76a:	783b      	ldrb	r3, [r7, #0]
   bc76c:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc76e:	4620      	mov	r0, r4
   bc770:	f7fd f80e 	bl	b9790 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc774:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc776:	f025 0503 	bic.w	r5, r5, #3
   bc77a:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc77e:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc780:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc784:	4620      	mov	r0, r4
   bc786:	f7fc fba5 	bl	b8ed4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc78a:	b1d0      	cbz	r0, bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc78c:	f01a 0104 	ands.w	r1, sl, #4
   bc790:	d117      	bne.n	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc792:	4620      	mov	r0, r4
   bc794:	9102      	str	r1, [sp, #8]
   bc796:	f7fc fe7f 	bl	b9498 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc79a:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc79c:	4620      	mov	r0, r4
   bc79e:	f7fc feff 	bl	b95a0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc7a2:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc7a4:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc7a6:	464a      	mov	r2, r9
   bc7a8:	f007 fe0e 	bl	c43c8 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc7ac:	783a      	ldrb	r2, [r7, #0]
   bc7ae:	4641      	mov	r1, r8
   bc7b0:	4650      	mov	r0, sl
   bc7b2:	f007 fde1 	bl	c4378 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc7b6:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc7ba:	783b      	ldrb	r3, [r7, #0]
   bc7bc:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc7c0:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc7c2:	2300      	movs	r3, #0
   bc7c4:	7023      	strb	r3, [r4, #0]
   bc7c6:	e4f9      	b.n	bc1bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc7c8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc7cc:	b91b      	cbnz	r3, bc7d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc7ce:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc7d2:	2b00      	cmp	r3, #0
   bc7d4:	d0f5      	beq.n	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc7d6:	4922      	ldr	r1, [pc, #136]	; (bc860 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc7d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7dc:	f004 fd3b 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc7e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7e4:	6803      	ldr	r3, [r0, #0]
   bc7e6:	4629      	mov	r1, r5
   bc7e8:	689b      	ldr	r3, [r3, #8]
   bc7ea:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc7ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7f0:	6803      	ldr	r3, [r0, #0]
   bc7f2:	4651      	mov	r1, sl
   bc7f4:	689b      	ldr	r3, [r3, #8]
   bc7f6:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc7f8:	491a      	ldr	r1, [pc, #104]	; (bc864 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc7fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7fe:	f004 fd2a 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc802:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc806:	f89b 1000 	ldrb.w	r1, [fp]
   bc80a:	6803      	ldr	r3, [r0, #0]
   bc80c:	689b      	ldr	r3, [r3, #8]
   bc80e:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc810:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc814:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc818:	6803      	ldr	r3, [r0, #0]
   bc81a:	689b      	ldr	r3, [r3, #8]
   bc81c:	4798      	blx	r3
              _debugSerial->println();
   bc81e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc822:	f004 fd1c 	bl	c125e <_ZN5Print7printlnEv>
   bc826:	e7cc      	b.n	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc828:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc82c:	b91b      	cbnz	r3, bc836 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc82e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc832:	2b00      	cmp	r3, #0
   bc834:	d0c5      	beq.n	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc836:	490c      	ldr	r1, [pc, #48]	; (bc868 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc838:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc83c:	f004 fd25 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc840:	e7bf      	b.n	bc7c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc842:	2e03      	cmp	r6, #3
   bc844:	f47f acba 	bne.w	bc1bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc848:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc84c:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc850:	4620      	mov	r0, r4
   bc852:	f7fd f821 	bl	b9898 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc856:	7020      	strb	r0, [r4, #0]
}
   bc858:	e4b0      	b.n	bc1bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc85a:	bf00      	nop
   bc85c:	000c7414 	.word	0x000c7414
   bc860:	000c7432 	.word	0x000c7432
   bc864:	000c745d 	.word	0x000c745d
   bc868:	000c7463 	.word	0x000c7463

000bc86c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc86c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc870:	4604      	mov	r4, r0
   bc872:	4699      	mov	r9, r3
   bc874:	460f      	mov	r7, r1
   bc876:	4690      	mov	r8, r2
   bc878:	f001 f94c 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc87c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc880:	1ac0      	subs	r0, r0, r3
   bc882:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc886:	4298      	cmp	r0, r3
   bc888:	f0c0 80a8 	bcc.w	bc9dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc88c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc890:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc894:	f003 fa12 	bl	bfcbc <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc898:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc89c:	21fd      	movs	r1, #253	; 0xfd
   bc89e:	f7fb fe53 	bl	b8548 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc8a2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc8a6:	2100      	movs	r1, #0
   bc8a8:	f003 fa0f 	bl	bfcca <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc8ac:	4605      	mov	r5, r0
   bc8ae:	b1a8      	cbz	r0, bc8dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc8b0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc8b4:	b933      	cbnz	r3, bc8c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc8b6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc8ba:	b91b      	cbnz	r3, bc8c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc8bc:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc8be:	b002      	add	sp, #8
   bc8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc8c4:	4946      	ldr	r1, [pc, #280]	; (bc9e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc8c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8ca:	f004 fcc4 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc8ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8d2:	220a      	movs	r2, #10
   bc8d4:	4629      	mov	r1, r5
   bc8d6:	f7fb fe2e 	bl	b8536 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc8da:	e7ef      	b.n	bc8bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc8dc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc8e0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc8e4:	2202      	movs	r2, #2
   bc8e6:	f003 f9e6 	bl	bfcb6 <_ZN7TwoWire11requestFromEhj>
   bc8ea:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc8ec:	2d02      	cmp	r5, #2
   bc8ee:	d008      	beq.n	bc902 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc8f0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc8f4:	b91b      	cbnz	r3, bc8fe <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc8f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc8fa:	2b00      	cmp	r3, #0
   bc8fc:	d0de      	beq.n	bc8bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc8fe:	4939      	ldr	r1, [pc, #228]	; (bc9e4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc900:	e7e1      	b.n	bc8c6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc902:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc906:	6803      	ldr	r3, [r0, #0]
   bc908:	695b      	ldr	r3, [r3, #20]
   bc90a:	4798      	blx	r3
   bc90c:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc90e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc912:	6803      	ldr	r3, [r0, #0]
   bc914:	695b      	ldr	r3, [r3, #20]
   bc916:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc918:	b2c6      	uxtb	r6, r0
   bc91a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc91e:	b22a      	sxth	r2, r5
   bc920:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc922:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc926:	b955      	cbnz	r5, bc93e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc928:	b123      	cbz	r3, bc934 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc92a:	492f      	ldr	r1, [pc, #188]	; (bc9e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc92c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc930:	f004 fcab 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc934:	f001 f8ee 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc938:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc93c:	e7be      	b.n	bc8bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc93e:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc940:	bfb8      	it	lt
   bc942:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc946:	2d64      	cmp	r5, #100	; 0x64
   bc948:	d936      	bls.n	bc9b8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc94a:	b17b      	cbz	r3, bc96c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc94c:	4927      	ldr	r1, [pc, #156]	; (bc9ec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc94e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc952:	f004 fc80 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc956:	4629      	mov	r1, r5
   bc958:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc95c:	220a      	movs	r2, #10
   bc95e:	f004 fc96 	bl	c128e <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc962:	4923      	ldr	r1, [pc, #140]	; (bc9f0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc964:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc968:	f004 fc8f 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc96c:	2d00      	cmp	r5, #0
   bc96e:	d035      	beq.n	bc9dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc970:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc972:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc976:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc97a:	42ae      	cmp	r6, r5
   bc97c:	bf28      	it	cs
   bc97e:	462e      	movcs	r6, r5
   bc980:	4632      	mov	r2, r6
   bc982:	f003 f998 	bl	bfcb6 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc986:	b2c0      	uxtb	r0, r0
   bc988:	4286      	cmp	r6, r0
   bc98a:	d197      	bne.n	bc8bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc98c:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc990:	fa1f f38a 	uxth.w	r3, sl
   bc994:	429e      	cmp	r6, r3
   bc996:	d91e      	bls.n	bc9d6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc998:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc99c:	6803      	ldr	r3, [r0, #0]
   bc99e:	695b      	ldr	r3, [r3, #20]
   bc9a0:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc9a2:	f8cd 9000 	str.w	r9, [sp]
   bc9a6:	b2c1      	uxtb	r1, r0
   bc9a8:	4643      	mov	r3, r8
   bc9aa:	463a      	mov	r2, r7
   bc9ac:	4620      	mov	r0, r4
   bc9ae:	f7ff fbc1 	bl	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc9b2:	f10a 0a01 	add.w	sl, sl, #1
   bc9b6:	e7eb      	b.n	bc990 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc9b8:	2b00      	cmp	r3, #0
   bc9ba:	d0d7      	beq.n	bc96c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc9bc:	490d      	ldr	r1, [pc, #52]	; (bc9f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc9be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9c2:	f004 fc48 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
   bc9c6:	4629      	mov	r1, r5
   bc9c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9cc:	220a      	movs	r2, #10
   bc9ce:	f004 fc5e 	bl	c128e <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc9d2:	4909      	ldr	r1, [pc, #36]	; (bc9f8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc9d4:	e7c6      	b.n	bc964 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc9d6:	1bad      	subs	r5, r5, r6
   bc9d8:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc9da:	e7c7      	b.n	bc96c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc9dc:	2001      	movs	r0, #1
   bc9de:	e76e      	b.n	bc8be <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc9e0:	000c7484 	.word	0x000c7484
   bc9e4:	000c74b8 	.word	0x000c74b8
   bc9e8:	000c74ed 	.word	0x000c74ed
   bc9ec:	000c7515 	.word	0x000c7515
   bc9f0:	000c7535 	.word	0x000c7535
   bc9f4:	000c7545 	.word	0x000c7545
   bc9f8:	000c755d 	.word	0x000c755d

000bc9fc <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc9fe:	4604      	mov	r4, r0
   bca00:	460d      	mov	r5, r1
   bca02:	4616      	mov	r6, r2
   bca04:	461f      	mov	r7, r3
  while (_serialPort->available())
   bca06:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bca0a:	6803      	ldr	r3, [r0, #0]
   bca0c:	691b      	ldr	r3, [r3, #16]
   bca0e:	4798      	blx	r3
   bca10:	b160      	cbz	r0, bca2c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bca12:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bca16:	6803      	ldr	r3, [r0, #0]
   bca18:	695b      	ldr	r3, [r3, #20]
   bca1a:	4798      	blx	r3
   bca1c:	9700      	str	r7, [sp, #0]
   bca1e:	b2c1      	uxtb	r1, r0
   bca20:	4633      	mov	r3, r6
   bca22:	462a      	mov	r2, r5
   bca24:	4620      	mov	r0, r4
   bca26:	f7ff fb85 	bl	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bca2a:	e7ec      	b.n	bca06 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bca2c:	2001      	movs	r0, #1
   bca2e:	b003      	add	sp, #12
   bca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bca34 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bca34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bca38:	4604      	mov	r4, r0
   bca3a:	b087      	sub	sp, #28
   bca3c:	460d      	mov	r5, r1
   bca3e:	4616      	mov	r6, r2
   bca40:	461f      	mov	r7, r3
   bca42:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bca46:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bca4a:	fa5f f388 	uxtb.w	r3, r8
   bca4e:	429a      	cmp	r2, r3
   bca50:	d90b      	bls.n	bca6a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bca52:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bca56:	4620      	mov	r0, r4
   bca58:	5cd1      	ldrb	r1, [r2, r3]
   bca5a:	9700      	str	r7, [sp, #0]
   bca5c:	4633      	mov	r3, r6
   bca5e:	462a      	mov	r2, r5
   bca60:	f7ff fb68 	bl	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bca64:	f108 0801 	add.w	r8, r8, #1
   bca68:	e7ed      	b.n	bca46 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bca6a:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bca6e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bca72:	4a25      	ldr	r2, [pc, #148]	; (bcb08 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bca74:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bca78:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bca7c:	a902      	add	r1, sp, #8
   bca7e:	f04f 0901 	mov.w	r9, #1
   bca82:	9202      	str	r2, [sp, #8]
   bca84:	9304      	str	r3, [sp, #16]
   bca86:	f88d 800c 	strb.w	r8, [sp, #12]
   bca8a:	f8ad 9014 	strh.w	r9, [sp, #20]
   bca8e:	f004 fd21 	bl	c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bca92:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bca96:	4641      	mov	r1, r8
   bca98:	f005 f9bf 	bl	c1e1a <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bca9c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcaa0:	21ff      	movs	r1, #255	; 0xff
   bcaa2:	f004 fdb7 	bl	c1614 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcaa6:	28ff      	cmp	r0, #255	; 0xff
   bcaa8:	d116      	bne.n	bcad8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcaaa:	7823      	ldrb	r3, [r4, #0]
   bcaac:	b983      	cbnz	r3, bcad0 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bcaae:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcab2:	4649      	mov	r1, r9
   bcab4:	f005 f9b1 	bl	c1e1a <digitalWrite>
    _spiPort->endTransaction();
   bcab8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcabc:	f004 fcf0 	bl	c14a0 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bcac0:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bcac4:	f001 fb78 	bl	be1b8 <delay>
} // end checkUbloxSpi()
   bcac8:	2001      	movs	r0, #1
   bcaca:	b007      	add	sp, #28
   bcacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcad0:	28ff      	cmp	r0, #255	; 0xff
   bcad2:	d101      	bne.n	bcad8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcad4:	7823      	ldrb	r3, [r4, #0]
   bcad6:	b163      	cbz	r3, bcaf2 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bcad8:	4601      	mov	r1, r0
   bcada:	9700      	str	r7, [sp, #0]
   bcadc:	4620      	mov	r0, r4
   bcade:	4633      	mov	r3, r6
   bcae0:	462a      	mov	r2, r5
   bcae2:	f7ff fb27 	bl	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bcae6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcaea:	21ff      	movs	r1, #255	; 0xff
   bcaec:	f004 fd92 	bl	c1614 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcaf0:	e7ee      	b.n	bcad0 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bcaf2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcaf6:	2101      	movs	r1, #1
   bcaf8:	f005 f98f 	bl	c1e1a <digitalWrite>
  _spiPort->endTransaction();
   bcafc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcb00:	f004 fcce 	bl	c14a0 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bcb04:	e7e0      	b.n	bcac8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bcb06:	bf00      	nop
   bcb08:	000c6b84 	.word	0x000c6b84

000bcb0c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bcb0c:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bcb0e:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bcb12:	b91c      	cbnz	r4, bcb1c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bcb14:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bcb18:	f7ff bea8 	b.w	bc86c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bcb1c:	2c01      	cmp	r4, #1
   bcb1e:	d103      	bne.n	bcb28 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bcb20:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bcb24:	f7ff bf6a 	b.w	bc9fc <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bcb28:	2c02      	cmp	r4, #2
   bcb2a:	d103      	bne.n	bcb34 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bcb2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bcb30:	f7ff bf80 	b.w	bca34 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bcb34:	2000      	movs	r0, #0
   bcb36:	f85d 4b04 	ldr.w	r4, [sp], #4
   bcb3a:	4770      	bx	lr

000bcb3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bcb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcb40:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcb42:	2102      	movs	r1, #2
   bcb44:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb46:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb4a:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb4e:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcb52:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb54:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb58:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcb5c:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcb60:	4604      	mov	r4, r0
   bcb62:	4617      	mov	r7, r2
   bcb64:	4698      	mov	r8, r3
   bcb66:	f000 ffd5 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcb6a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bcb6e:	4606      	mov	r6, r0
   bcb70:	4481      	add	r9, r0
   bcb72:	f000 ffcf 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcb76:	4581      	cmp	r9, r0
   bcb78:	f240 80a8 	bls.w	bcccc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcb7c:	4643      	mov	r3, r8
   bcb7e:	463a      	mov	r2, r7
   bcb80:	4629      	mov	r1, r5
   bcb82:	4620      	mov	r0, r4
   bcb84:	f7ff ffc2 	bl	bcb0c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcb88:	2800      	cmp	r0, #0
   bcb8a:	f000 809b 	beq.w	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcb8e:	7beb      	ldrb	r3, [r5, #15]
   bcb90:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bcb94:	2b01      	cmp	r3, #1
   bcb96:	d125      	bne.n	bcbe4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bcb98:	2901      	cmp	r1, #1
   bcb9a:	f040 80ec 	bne.w	bcd76 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bcb9e:	7bab      	ldrb	r3, [r5, #14]
   bcba0:	2b01      	cmp	r3, #1
   bcba2:	782b      	ldrb	r3, [r5, #0]
   bcba4:	d13b      	bne.n	bcc1e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bcba6:	42bb      	cmp	r3, r7
   bcba8:	d13e      	bne.n	bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcbaa:	786a      	ldrb	r2, [r5, #1]
   bcbac:	4542      	cmp	r2, r8
   bcbae:	d136      	bne.n	bcc1e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bcbb0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbb4:	b913      	cbnz	r3, bcbbc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bcbb6:	200b      	movs	r0, #11
}
   bcbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bcbbc:	4978      	ldr	r1, [pc, #480]	; (bcda0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bcbbe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbc2:	f004 fb48 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcbc6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcbca:	f000 ffa3 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcbce:	220a      	movs	r2, #10
   bcbd0:	1b81      	subs	r1, r0, r6
   bcbd2:	4628      	mov	r0, r5
   bcbd4:	f7fb fc9b 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcbd8:	4972      	ldr	r1, [pc, #456]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcbda:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbde:	f004 fb54 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcbe2:	e7e8      	b.n	bcbb6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcbe4:	2b02      	cmp	r3, #2
   bcbe6:	d137      	bne.n	bcc58 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bcbe8:	2901      	cmp	r1, #1
   bcbea:	f040 80aa 	bne.w	bcd42 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bcbee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbf2:	b193      	cbz	r3, bcc1a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bcbf4:	496c      	ldr	r1, [pc, #432]	; (bcda8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bcbf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbfa:	f004 fb2c 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcbfe:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcc02:	f000 ff87 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcc06:	220a      	movs	r2, #10
   bcc08:	1b81      	subs	r1, r0, r6
   bcc0a:	4628      	mov	r0, r5
   bcc0c:	f7fb fc7f 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcc10:	4964      	ldr	r1, [pc, #400]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcc12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc16:	f004 fb38 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bcc1a:	200a      	movs	r0, #10
   bcc1c:	e7cc      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcc1e:	42bb      	cmp	r3, r7
   bcc20:	d102      	bne.n	bcc28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcc22:	786b      	ldrb	r3, [r5, #1]
   bcc24:	4543      	cmp	r3, r8
   bcc26:	d019      	beq.n	bcc5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bcc28:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcc2c:	b193      	cbz	r3, bcc54 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bcc2e:	495f      	ldr	r1, [pc, #380]	; (bcdac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bcc30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc34:	f004 fb0f 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcc38:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcc3c:	f000 ff6a 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcc40:	220a      	movs	r2, #10
   bcc42:	1b81      	subs	r1, r0, r6
   bcc44:	4628      	mov	r0, r5
   bcc46:	f7fb fc62 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcc4a:	4956      	ldr	r1, [pc, #344]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcc4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc50:	f004 fb1b 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcc54:	200d      	movs	r0, #13
   bcc56:	e7af      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcc58:	2901      	cmp	r1, #1
   bcc5a:	d172      	bne.n	bcd42 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bcc5c:	89eb      	ldrh	r3, [r5, #14]
   bcc5e:	bb8b      	cbnz	r3, bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcc60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcc64:	b193      	cbz	r3, bcc8c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bcc66:	4952      	ldr	r1, [pc, #328]	; (bcdb0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bcc68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc6c:	f004 faf3 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcc70:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcc74:	f000 ff4e 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcc78:	220a      	movs	r2, #10
   bcc7a:	1b81      	subs	r1, r0, r6
   bcc7c:	4628      	mov	r0, r5
   bcc7e:	f7fb fc46 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcc82:	4948      	ldr	r1, [pc, #288]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcc84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc88:	f004 faff 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bcc8c:	2002      	movs	r0, #2
   bcc8e:	e793      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcc90:	430b      	orrs	r3, r1
   bcc92:	d117      	bne.n	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcc94:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcc98:	b193      	cbz	r3, bccc0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bcc9a:	4946      	ldr	r1, [pc, #280]	; (bcdb4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bcc9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcca0:	f004 fad9 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcca4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcca8:	f000 ff34 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bccac:	220a      	movs	r2, #10
   bccae:	1b81      	subs	r1, r0, r6
   bccb0:	4628      	mov	r0, r5
   bccb2:	f7fb fc2c 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bccb6:	493b      	ldr	r1, [pc, #236]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bccb8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccbc:	f004 fae5 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bccc0:	2001      	movs	r0, #1
   bccc2:	e779      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bccc4:	2001      	movs	r0, #1
   bccc6:	f001 fa77 	bl	be1b8 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bccca:	e752      	b.n	bcb72 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcccc:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bccce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bccd2:	2a01      	cmp	r2, #1
   bccd4:	d11f      	bne.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bccd6:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bccda:	2a02      	cmp	r2, #2
   bccdc:	d11b      	bne.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bccde:	7baa      	ldrb	r2, [r5, #14]
   bcce0:	2a01      	cmp	r2, #1
   bcce2:	d118      	bne.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcce4:	782a      	ldrb	r2, [r5, #0]
   bcce6:	42ba      	cmp	r2, r7
   bcce8:	d115      	bne.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bccea:	786a      	ldrb	r2, [r5, #1]
   bccec:	4542      	cmp	r2, r8
   bccee:	d112      	bne.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bccf0:	2b00      	cmp	r3, #0
   bccf2:	f43f af60 	beq.w	bcbb6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bccf6:	4930      	ldr	r1, [pc, #192]	; (bcdb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bccf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccfc:	f004 faab 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcd00:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd04:	f000 ff06 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcd08:	220a      	movs	r2, #10
   bcd0a:	1b81      	subs	r1, r0, r6
   bcd0c:	4628      	mov	r0, r5
   bcd0e:	f7fb fbfe 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bcd12:	492a      	ldr	r1, [pc, #168]	; (bcdbc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bcd14:	e761      	b.n	bcbda <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bcd16:	b193      	cbz	r3, bcd3e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcd18:	4929      	ldr	r1, [pc, #164]	; (bcdc0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcd1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd1e:	f004 fa9a 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcd22:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd26:	f000 fef5 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcd2a:	220a      	movs	r2, #10
   bcd2c:	1b81      	subs	r1, r0, r6
   bcd2e:	4628      	mov	r0, r5
   bcd30:	f7fb fbed 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bcd34:	4923      	ldr	r1, [pc, #140]	; (bcdc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bcd36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd3a:	f004 faa6 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcd3e:	2003      	movs	r0, #3
   bcd40:	e73a      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcd42:	2903      	cmp	r1, #3
   bcd44:	d1a4      	bne.n	bcc90 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bcd46:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd4a:	b193      	cbz	r3, bcd72 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcd4c:	491e      	ldr	r1, [pc, #120]	; (bcdc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcd4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd52:	f004 fa80 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcd56:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd5a:	f000 fedb 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcd5e:	220a      	movs	r2, #10
   bcd60:	1b81      	subs	r1, r0, r6
   bcd62:	4628      	mov	r0, r5
   bcd64:	f7fb fbd3 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcd68:	490e      	ldr	r1, [pc, #56]	; (bcda4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcd6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd6e:	f004 fa8c 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bcd72:	2004      	movs	r0, #4
   bcd74:	e720      	b.n	bcbb8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcd76:	2903      	cmp	r1, #3
   bcd78:	d0e5      	beq.n	bcd46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcd7a:	2900      	cmp	r1, #0
   bcd7c:	d1a2      	bne.n	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcd7e:	7bab      	ldrb	r3, [r5, #14]
   bcd80:	2b01      	cmp	r3, #1
   bcd82:	d19f      	bne.n	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcd84:	782b      	ldrb	r3, [r5, #0]
   bcd86:	42bb      	cmp	r3, r7
   bcd88:	d19c      	bne.n	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcd8a:	786b      	ldrb	r3, [r5, #1]
   bcd8c:	4543      	cmp	r3, r8
   bcd8e:	d199      	bne.n	bccc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcd90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd94:	2b00      	cmp	r3, #0
   bcd96:	f43f af0e 	beq.w	bcbb6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bcd9a:	490c      	ldr	r1, [pc, #48]	; (bcdcc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bcd9c:	e70f      	b.n	bcbbe <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bcd9e:	bf00      	nop
   bcda0:	000c7564 	.word	0x000c7564
   bcda4:	000c75a1 	.word	0x000c75a1
   bcda8:	000c75a7 	.word	0x000c75a7
   bcdac:	000c75d8 	.word	0x000c75d8
   bcdb0:	000c760a 	.word	0x000c760a
   bcdb4:	000c76aa 	.word	0x000c76aa
   bcdb8:	000c76eb 	.word	0x000c76eb
   bcdbc:	000c771e 	.word	0x000c771e
   bcdc0:	000c7726 	.word	0x000c7726
   bcdc4:	000c7749 	.word	0x000c7749
   bcdc8:	000c7630 	.word	0x000c7630
   bcdcc:	000c766b 	.word	0x000c766b

000bcdd0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bcdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcdd4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcdd6:	2102      	movs	r1, #2
   bcdd8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdda:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdde:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcde2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcde6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcde8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdec:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdf0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcdf4:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bcdf8:	4604      	mov	r4, r0
   bcdfa:	4617      	mov	r7, r2
   bcdfc:	4698      	mov	r8, r3
   bcdfe:	f000 fe89 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bce02:	f240 1a01 	movw	sl, #257	; 0x101
   bce06:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bce08:	f240 2b01 	movw	fp, #513	; 0x201
   bce0c:	f000 fe82 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bce10:	1b80      	subs	r0, r0, r6
   bce12:	4548      	cmp	r0, r9
   bce14:	d269      	bcs.n	bceea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bce16:	4643      	mov	r3, r8
   bce18:	463a      	mov	r2, r7
   bce1a:	4629      	mov	r1, r5
   bce1c:	4620      	mov	r0, r4
   bce1e:	f7ff fe75 	bl	bcb0c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bce22:	2800      	cmp	r0, #0
   bce24:	d05d      	beq.n	bcee2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bce26:	89ea      	ldrh	r2, [r5, #14]
   bce28:	4552      	cmp	r2, sl
   bce2a:	d11e      	bne.n	bce6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bce2c:	782b      	ldrb	r3, [r5, #0]
   bce2e:	42bb      	cmp	r3, r7
   bce30:	d11b      	bne.n	bce6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bce32:	786b      	ldrb	r3, [r5, #1]
   bce34:	4543      	cmp	r3, r8
   bce36:	d118      	bne.n	bce6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bce38:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce3c:	b193      	cbz	r3, bce64 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bce3e:	4937      	ldr	r1, [pc, #220]	; (bcf1c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bce40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce44:	f004 fa07 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce48:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce4c:	f000 fe62 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bce50:	220a      	movs	r2, #10
   bce52:	1b81      	subs	r1, r0, r6
   bce54:	4628      	mov	r0, r5
   bce56:	f7fb fb5a 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce5a:	4931      	ldr	r1, [pc, #196]	; (bcf20 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bce5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce60:	f004 fa13 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bce64:	200b      	movs	r0, #11
}
   bce66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bce6a:	7beb      	ldrb	r3, [r5, #15]
   bce6c:	2b01      	cmp	r3, #1
   bce6e:	d11d      	bne.n	bceac <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bce70:	782b      	ldrb	r3, [r5, #0]
   bce72:	42bb      	cmp	r3, r7
   bce74:	d102      	bne.n	bce7c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bce76:	786b      	ldrb	r3, [r5, #1]
   bce78:	4543      	cmp	r3, r8
   bce7a:	d032      	beq.n	bcee2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bce7c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce80:	b193      	cbz	r3, bcea8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bce82:	4928      	ldr	r1, [pc, #160]	; (bcf24 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bce84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce88:	f004 f9e5 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce8c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce90:	f000 fe40 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bce94:	220a      	movs	r2, #10
   bce96:	1b81      	subs	r1, r0, r6
   bce98:	4628      	mov	r0, r5
   bce9a:	f7fb fb38 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce9e:	4920      	ldr	r1, [pc, #128]	; (bcf20 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcea0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcea4:	f004 f9f1 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcea8:	200d      	movs	r0, #13
   bceaa:	e7dc      	b.n	bce66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bceac:	455a      	cmp	r2, fp
   bceae:	d018      	beq.n	bcee2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bceb0:	b9bb      	cbnz	r3, bcee2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bceb2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bceb6:	b193      	cbz	r3, bcede <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bceb8:	491b      	ldr	r1, [pc, #108]	; (bcf28 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bceba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcebe:	f004 f9ca 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcec2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcec6:	f000 fe25 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bceca:	220a      	movs	r2, #10
   bcecc:	1b81      	subs	r1, r0, r6
   bcece:	4628      	mov	r0, r5
   bced0:	f7fb fb1d 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bced4:	4912      	ldr	r1, [pc, #72]	; (bcf20 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bced6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bceda:	f004 f9d6 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bcede:	2002      	movs	r0, #2
   bcee0:	e7c1      	b.n	bce66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcee2:	2001      	movs	r0, #1
   bcee4:	f001 f968 	bl	be1b8 <delay>
  while (millis() - startTime < maxTime)
   bcee8:	e790      	b.n	bce0c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bceea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bceee:	b193      	cbz	r3, bcf16 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bcef0:	490e      	ldr	r1, [pc, #56]	; (bcf2c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bcef2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcef6:	f004 f9ae 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcefa:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcefe:	f000 fe09 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
   bcf02:	220a      	movs	r2, #10
   bcf04:	1b81      	subs	r1, r0, r6
   bcf06:	4628      	mov	r0, r5
   bcf08:	f7fb fb01 	bl	b850e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bcf0c:	4908      	ldr	r1, [pc, #32]	; (bcf30 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bcf0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf12:	f004 f9ba 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcf16:	2003      	movs	r0, #3
   bcf18:	e7a5      	b.n	bce66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bcf1a:	bf00      	nop
   bcf1c:	000c7750 	.word	0x000c7750
   bcf20:	000c75a1 	.word	0x000c75a1
   bcf24:	000c778a 	.word	0x000c778a
   bcf28:	000c77be 	.word	0x000c77be
   bcf2c:	000c77f7 	.word	0x000c77f7
   bcf30:	000c781c 	.word	0x000c781c

000bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bcf34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcf38:	4604      	mov	r4, r0
   bcf3a:	4698      	mov	r8, r3
   bcf3c:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bcf3e:	f7fc fcc9 	bl	b98d4 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bcf42:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bcf46:	460d      	mov	r5, r1
  if (_printDebug == true)
   bcf48:	b14b      	cbz	r3, bcf5e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bcf4a:	492a      	ldr	r1, [pc, #168]	; (bcff4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bcf4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf50:	f004 f981 	bl	c1256 <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bcf54:	2201      	movs	r2, #1
   bcf56:	4629      	mov	r1, r5
   bcf58:	4620      	mov	r0, r4
   bcf5a:	f7fc fee9 	bl	b9d30 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bcf5e:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bcf62:	b993      	cbnz	r3, bcf8a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bcf64:	463a      	mov	r2, r7
   bcf66:	4629      	mov	r1, r5
   bcf68:	4620      	mov	r0, r4
   bcf6a:	f7fc fce1 	bl	b9930 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bcf6e:	4606      	mov	r6, r0
   bcf70:	b188      	cbz	r0, bcf96 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcf72:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf76:	b123      	cbz	r3, bcf82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bcf78:	491f      	ldr	r1, [pc, #124]	; (bcff8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bcf7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf7e:	f004 f984 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bcf82:	4630      	mov	r0, r6
   bcf84:	b002      	add	sp, #8
   bcf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bcf8a:	2b01      	cmp	r3, #1
   bcf8c:	d11b      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bcf8e:	4629      	mov	r1, r5
   bcf90:	4620      	mov	r0, r4
   bcf92:	f7fc fd8f 	bl	b9ab4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bcf96:	b35f      	cbz	r7, bcff0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcf98:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bcf9a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcf9e:	2a06      	cmp	r2, #6
   bcfa0:	d002      	beq.n	bcfa8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bcfa2:	f1b8 0f00 	cmp.w	r8, #0
   bcfa6:	d015      	beq.n	bcfd4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bcfa8:	b123      	cbz	r3, bcfb4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bcfaa:	4914      	ldr	r1, [pc, #80]	; (bcffc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bcfac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfb0:	f004 f96b 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcfb4:	786b      	ldrb	r3, [r5, #1]
   bcfb6:	782a      	ldrb	r2, [r5, #0]
   bcfb8:	9700      	str	r7, [sp, #0]
   bcfba:	4629      	mov	r1, r5
   bcfbc:	4620      	mov	r0, r4
   bcfbe:	f7ff fdbd 	bl	bcb3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcfc2:	4606      	mov	r6, r0
   bcfc4:	e7dd      	b.n	bcf82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bcfc6:	2b02      	cmp	r3, #2
   bcfc8:	d1e5      	bne.n	bcf96 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bcfca:	4629      	mov	r1, r5
   bcfcc:	4620      	mov	r0, r4
   bcfce:	f7fc fdcb 	bl	b9b68 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bcfd2:	e7e0      	b.n	bcf96 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcfd4:	b123      	cbz	r3, bcfe0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bcfd6:	490a      	ldr	r1, [pc, #40]	; (bd000 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bcfd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfdc:	f004 f955 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcfe0:	786b      	ldrb	r3, [r5, #1]
   bcfe2:	782a      	ldrb	r2, [r5, #0]
   bcfe4:	9700      	str	r7, [sp, #0]
   bcfe6:	4629      	mov	r1, r5
   bcfe8:	4620      	mov	r0, r4
   bcfea:	f7ff fef1 	bl	bcdd0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bcfee:	e7e8      	b.n	bcfc2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bcff0:	463e      	mov	r6, r7
   bcff2:	e7c6      	b.n	bcf82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bcff4:	000c7837 	.word	0x000c7837
   bcff8:	000c7842 	.word	0x000c7842
   bcffc:	000c785a 	.word	0x000c785a
   bd000:	000c7880 	.word	0x000c7880

000bd004 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bd004:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bd006:	4b09      	ldr	r3, [pc, #36]	; (bd02c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bd008:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd00c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd010:	2300      	movs	r3, #0
   bd012:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bd016:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bd018:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bd01c:	f7ff ff8a 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bd020:	f1a0 030b 	sub.w	r3, r0, #11
   bd024:	4258      	negs	r0, r3
   bd026:	4158      	adcs	r0, r3
   bd028:	bd38      	pop	{r3, r4, r5, pc}
   bd02a:	bf00      	nop
   bd02c:	00010006 	.word	0x00010006

000bd030 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bd030:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd032:	4615      	mov	r5, r2
   bd034:	461a      	mov	r2, r3
   bd036:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd038:	9301      	str	r3, [sp, #4]
   bd03a:	f7ff ffe3 	bl	bd004 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd03e:	b190      	cbz	r0, bd066 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd040:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd044:	4b09      	ldr	r3, [pc, #36]	; (bd06c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bd046:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd04a:	2300      	movs	r3, #0
   bd04c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd050:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd052:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd054:	4620      	mov	r0, r4
   bd056:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd05a:	f7ff ff6b 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd05e:	f1a0 030a 	sub.w	r3, r0, #10
   bd062:	4258      	negs	r0, r3
   bd064:	4158      	adcs	r0, r3
}
   bd066:	b003      	add	sp, #12
   bd068:	bd30      	pop	{r4, r5, pc}
   bd06a:	bf00      	nop
   bd06c:	00140006 	.word	0x00140006

000bd070 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bd070:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd072:	4615      	mov	r5, r2
   bd074:	461a      	mov	r2, r3
   bd076:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd078:	9301      	str	r3, [sp, #4]
   bd07a:	f7ff ffc3 	bl	bd004 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd07e:	b190      	cbz	r0, bd0a6 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd080:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd084:	4b09      	ldr	r3, [pc, #36]	; (bd0ac <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bd086:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd08a:	2300      	movs	r3, #0
   bd08c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd090:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd092:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd094:	4620      	mov	r0, r4
   bd096:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd09a:	f7ff ff4b 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd09e:	f1a0 030a 	sub.w	r3, r0, #10
   bd0a2:	4258      	negs	r0, r3
   bd0a4:	4158      	adcs	r0, r3
}
   bd0a6:	b003      	add	sp, #12
   bd0a8:	bd30      	pop	{r4, r5, pc}
   bd0aa:	bf00      	nop
   bd0ac:	00140006 	.word	0x00140006

000bd0b0 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bd0b0:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bd0b2:	460a      	mov	r2, r1
   bd0b4:	2100      	movs	r1, #0
   bd0b6:	f7ff bfbb 	b.w	bd030 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bd0bc <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bd0bc:	b510      	push	{r4, lr}
   bd0be:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bd0c0:	2074      	movs	r0, #116	; 0x74
   bd0c2:	f7f6 ffe8 	bl	b4096 <_Znwj>
   bd0c6:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bd0c8:	b960      	cbnz	r0, bd0e4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd0ca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0ce:	b913      	cbnz	r3, bd0d6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bd0d0:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd0d4:	b128      	cbz	r0, bd0e2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bd0d6:	4908      	ldr	r1, [pc, #32]	; (bd0f8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bd0d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0dc:	f004 f8d5 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd0e0:	2000      	movs	r0, #0
}
   bd0e2:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd0e4:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bd0e6:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bd0ea:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd0ee:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bd0f0:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bd0f2:	2001      	movs	r0, #1
   bd0f4:	e7f5      	b.n	bd0e2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bd0f6:	bf00      	nop
   bd0f8:	000c78a9 	.word	0x000c78a9

000bd0fc <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bd0fc:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd0fe:	6a03      	ldr	r3, [r0, #32]
{
   bd100:	4604      	mov	r4, r0
   bd102:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bd104:	b91b      	cbnz	r3, bd10e <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bd106:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd108:	f7ff ffd8 	bl	bd0bc <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd10c:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd10e:	6a20      	ldr	r0, [r4, #32]
   bd110:	b180      	cbz	r0, bd134 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd112:	7803      	ldrb	r3, [r0, #0]
   bd114:	f003 0303 	and.w	r3, r3, #3
   bd118:	2b03      	cmp	r3, #3
   bd11a:	d10d      	bne.n	bd138 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bd11c:	2307      	movs	r3, #7
   bd11e:	2201      	movs	r2, #1
   bd120:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd124:	4620      	mov	r0, r4
   bd126:	f7ff fcf1 	bl	bcb0c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bd12a:	6a23      	ldr	r3, [r4, #32]
   bd12c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bd130:	f000 0001 	and.w	r0, r0, #1
}
   bd134:	b002      	add	sp, #8
   bd136:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd138:	2b01      	cmp	r3, #1
   bd13a:	f04f 0300 	mov.w	r3, #0
   bd13e:	d011      	beq.n	bd164 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bd140:	f240 7101 	movw	r1, #1793	; 0x701
   bd144:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bd148:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bd14c:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd150:	4620      	mov	r0, r4
   bd152:	f7ff feef 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd156:	280b      	cmp	r0, #11
   bd158:	d006      	beq.n	bd168 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd15a:	f1a0 030d 	sub.w	r3, r0, #13
   bd15e:	4258      	negs	r0, r3
   bd160:	4158      	adcs	r0, r3
   bd162:	e7e7      	b.n	bd134 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bd164:	4618      	mov	r0, r3
   bd166:	e7e5      	b.n	bd134 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bd168:	2001      	movs	r0, #1
   bd16a:	e7e3      	b.n	bd134 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bd16c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bd16c:	b510      	push	{r4, lr}
   bd16e:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bd170:	2018      	movs	r0, #24
   bd172:	f7f6 ff90 	bl	b4096 <_Znwj>
   bd176:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bd178:	b960      	cbnz	r0, bd194 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd17a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd17e:	b913      	cbnz	r3, bd186 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bd180:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd184:	b128      	cbz	r0, bd192 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bd186:	4905      	ldr	r1, [pc, #20]	; (bd19c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bd188:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd18c:	f004 f87d 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd190:	2000      	movs	r0, #0
}
   bd192:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bd194:	2300      	movs	r3, #0
   bd196:	7503      	strb	r3, [r0, #20]
  return (true);
   bd198:	2001      	movs	r0, #1
   bd19a:	e7fa      	b.n	bd192 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bd19c:	000c78d0 	.word	0x000c78d0

000bd1a0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bd1a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bd1a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bd1a4:	4605      	mov	r5, r0
   bd1a6:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bd1a8:	b18b      	cbz	r3, bd1ce <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bd1aa:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd1ae:	4b13      	ldr	r3, [pc, #76]	; (bd1fc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bd1b0:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd1b4:	2300      	movs	r3, #0
   bd1b6:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd1ba:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bd1bc:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd1be:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bd1c2:	f7ff feb7 	bl	bcf34 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd1c6:	280b      	cmp	r0, #11
   bd1c8:	d10b      	bne.n	bd1e2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bd1ca:	2401      	movs	r4, #1
   bd1cc:	e00d      	b.n	bd1ea <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bd1ce:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bd1d0:	f7ff ffcc 	bl	bd16c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bd1d4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bd1d6:	9a01      	ldr	r2, [sp, #4]
   bd1d8:	2c00      	cmp	r4, #0
   bd1da:	d1e6      	bne.n	bd1aa <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bd1dc:	4620      	mov	r0, r4
   bd1de:	b002      	add	sp, #8
   bd1e0:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd1e2:	f1a0 030d 	sub.w	r3, r0, #13
   bd1e6:	425c      	negs	r4, r3
   bd1e8:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bd1ea:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bd1ec:	b110      	cbz	r0, bd1f4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bd1ee:	2118      	movs	r1, #24
   bd1f0:	f7f6 ff57 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bd1f4:	2300      	movs	r3, #0
   bd1f6:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bd1f8:	e7f0      	b.n	bd1dc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bd1fa:	bf00      	nop
   bd1fc:	00010006 	.word	0x00010006

000bd200 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bd200:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bd202:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bd206:	4604      	mov	r4, r0
   bd208:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bd20a:	b145      	cbz	r5, bd21e <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bd20c:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bd210:	b9b1      	cbnz	r1, bd240 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd212:	4620      	mov	r0, r4
}
   bd214:	b003      	add	sp, #12
   bd216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd21a:	f7ff bfc1 	b.w	bd1a0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bd21e:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bd220:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bd224:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bd228:	f002 fd48 	bl	bfcbc <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd22c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd230:	f002 fd4f 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
   bd234:	9a01      	ldr	r2, [sp, #4]
   bd236:	2800      	cmp	r0, #0
   bd238:	d0e8      	beq.n	bd20c <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd23a:	4628      	mov	r0, r5
   bd23c:	b003      	add	sp, #12
   bd23e:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd240:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd242:	bf18      	it	ne
   bd244:	2104      	movne	r1, #4
   bd246:	e7e4      	b.n	bd212 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd248 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd248:	b570      	push	{r4, r5, r6, lr}
   bd24a:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd24c:	2300      	movs	r3, #0
   bd24e:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd252:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd256:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd25a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd25e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd262:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd264:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd268:	b91b      	cbnz	r3, bd272 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd26a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd26e:	f7fb f9ed 	bl	b864c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd272:	4620      	mov	r0, r4
   bd274:	f7fc fe04 	bl	b9e80 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd278:	4631      	mov	r1, r6
   bd27a:	4620      	mov	r0, r4
   bd27c:	f7ff ffc0 	bl	bd200 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd280:	b110      	cbz	r0, bd288 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd282:	2501      	movs	r5, #1
}
   bd284:	4628      	mov	r0, r5
   bd286:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd288:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd28c:	b913      	cbnz	r3, bd294 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd28e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd292:	b123      	cbz	r3, bd29e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd294:	4917      	ldr	r1, [pc, #92]	; (bd2f4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd296:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd29a:	f003 fff6 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd29e:	4631      	mov	r1, r6
   bd2a0:	4620      	mov	r0, r4
   bd2a2:	f7ff ffad 	bl	bd200 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd2a6:	2800      	cmp	r0, #0
   bd2a8:	d1eb      	bne.n	bd282 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd2aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd2ae:	b913      	cbnz	r3, bd2b6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd2b0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd2b4:	b123      	cbz	r3, bd2c0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd2b6:	4910      	ldr	r1, [pc, #64]	; (bd2f8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd2b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd2bc:	f003 ffe5 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd2c0:	4631      	mov	r1, r6
   bd2c2:	4620      	mov	r0, r4
   bd2c4:	f7ff ff9c 	bl	bd200 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd2c8:	2800      	cmp	r0, #0
   bd2ca:	d1da      	bne.n	bd282 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd2cc:	2d00      	cmp	r5, #0
   bd2ce:	d0d9      	beq.n	bd284 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd2d0:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd2d4:	2d00      	cmp	r5, #0
   bd2d6:	d0d5      	beq.n	bd284 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd2d8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd2dc:	b91b      	cbnz	r3, bd2e6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd2de:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd2e2:	2b00      	cmp	r3, #0
   bd2e4:	d0cd      	beq.n	bd282 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd2e6:	4905      	ldr	r1, [pc, #20]	; (bd2fc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd2e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd2ec:	f003 ffcd 	bl	c128a <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd2f0:	e7c8      	b.n	bd284 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd2f2:	bf00      	nop
   bd2f4:	000c78f7 	.word	0x000c78f7
   bd2f8:	000c791b 	.word	0x000c791b
   bd2fc:	000c793e 	.word	0x000c793e

000bd300 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bd300:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd302:	6a03      	ldr	r3, [r0, #32]
{
   bd304:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd306:	b91b      	cbnz	r3, bd310 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bd308:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd30a:	f7ff fed7 	bl	bd0bc <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd30e:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd310:	6a20      	ldr	r0, [r4, #32]
   bd312:	b1b0      	cbz	r0, bd342 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bd314:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd318:	07db      	lsls	r3, r3, #31
   bd31a:	d402      	bmi.n	bd322 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bd31c:	4620      	mov	r0, r4
   bd31e:	f7ff feed 	bl	bd0fc <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bd322:	6a23      	ldr	r3, [r4, #32]
   bd324:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd328:	f36f 0200 	bfc	r2, #0, #1
   bd32c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd330:	6a23      	ldr	r3, [r4, #32]
   bd332:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd336:	f36f 0200 	bfc	r2, #0, #1
   bd33a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bd33e:	6a23      	ldr	r3, [r4, #32]
   bd340:	69d8      	ldr	r0, [r3, #28]
}
   bd342:	b002      	add	sp, #8
   bd344:	bd10      	pop	{r4, pc}

000bd346 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bd346:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd348:	6a03      	ldr	r3, [r0, #32]
{
   bd34a:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd34c:	b91b      	cbnz	r3, bd356 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bd34e:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd350:	f7ff feb4 	bl	bd0bc <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd354:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd356:	6a20      	ldr	r0, [r4, #32]
   bd358:	b1b0      	cbz	r0, bd388 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bd35a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd35e:	079b      	lsls	r3, r3, #30
   bd360:	d402      	bmi.n	bd368 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bd362:	4620      	mov	r0, r4
   bd364:	f7ff feca 	bl	bd0fc <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bd368:	6a23      	ldr	r3, [r4, #32]
   bd36a:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd36e:	f36f 0241 	bfc	r2, #1, #1
   bd372:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd376:	6a23      	ldr	r3, [r4, #32]
   bd378:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd37c:	f36f 0200 	bfc	r2, #0, #1
   bd380:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bd384:	6a23      	ldr	r3, [r4, #32]
   bd386:	6a18      	ldr	r0, [r3, #32]
}
   bd388:	b002      	add	sp, #8
   bd38a:	bd10      	pop	{r4, pc}

000bd38c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd38c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd38e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd390:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd394:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd396:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd39a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd39c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd3a0:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd3a2:	2500      	movs	r5, #0
  _width = width;
   bd3a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd3a8:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd3aa:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd3ae:	7303      	strb	r3, [r0, #12]
}
   bd3b0:	bd30      	pop	{r4, r5, pc}

000bd3b2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd3b2:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd3b4:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd3b6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd3b8:	b085      	sub	sp, #20
   bd3ba:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd3bc:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd3be:	f88d 400c 	strb.w	r4, [sp, #12]
   bd3c2:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd3c4:	460e      	mov	r6, r1
   bd3c6:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd3c8:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd3cc:	b140      	cbz	r0, bd3e0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd3ce:	7b5b      	ldrb	r3, [r3, #13]
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	ab03      	add	r3, sp, #12
   bd3d4:	9300      	str	r3, [sp, #0]
   bd3d6:	2301      	movs	r3, #1
   bd3d8:	f000 f90a 	bl	bd5f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd3dc:	b005      	add	sp, #20
   bd3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd3e0:	6858      	ldr	r0, [r3, #4]
   bd3e2:	2800      	cmp	r0, #0
   bd3e4:	d0fa      	beq.n	bd3dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd3e6:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd3ea:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd3ee:	f1be 0f03 	cmp.w	lr, #3
   bd3f2:	d10c      	bne.n	bd40e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd3f4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd3f8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd3fc:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd3fe:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd402:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd406:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd408:	f000 fa2b 	bl	bd862 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd40c:	e7e6      	b.n	bd3dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd40e:	f1be 0f00 	cmp.w	lr, #0
   bd412:	d109      	bne.n	bd428 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd414:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd418:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd41c:	f8cd c000 	str.w	ip, [sp]
   bd420:	ab03      	add	r3, sp, #12
   bd422:	463a      	mov	r2, r7
   bd424:	4631      	mov	r1, r6
   bd426:	e7ef      	b.n	bd408 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd428:	f1be 0f02 	cmp.w	lr, #2
   bd42c:	d102      	bne.n	bd434 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd42e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd432:	e7f1      	b.n	bd418 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd434:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd438:	bf01      	itttt	eq
   bd43a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd43e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd442:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd446:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd44a:	e7e7      	b.n	bd41c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd44c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd44c:	b4f0      	push	{r4, r5, r6, r7}
   bd44e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd450:	b902      	cbnz	r2, bd454 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd452:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd454:	2a04      	cmp	r2, #4
   bd456:	d814      	bhi.n	bd482 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd458:	f100 050f 	add.w	r5, r0, #15
   bd45c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd45e:	1884      	adds	r4, r0, r2
   bd460:	4629      	mov	r1, r5
   bd462:	4284      	cmp	r4, r0
   bd464:	d009      	beq.n	bd47a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd466:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd468:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd46a:	b927      	cbnz	r7, bd476 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd46c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd46e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd470:	3501      	adds	r5, #1
   bd472:	3c01      	subs	r4, #1
   bd474:	e7f5      	b.n	bd462 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd476:	73a6      	strb	r6, [r4, #14]
   bd478:	e7f9      	b.n	bd46e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd47a:	4620      	mov	r0, r4
}
   bd47c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd47e:	f7ff bf98 	b.w	bd3b2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd482:	2000      	movs	r0, #0
   bd484:	bcf0      	pop	{r4, r5, r6, r7}
   bd486:	4770      	bx	lr

000bd488 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd48a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd48c:	7a85      	ldrb	r5, [r0, #10]
   bd48e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd492:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd494:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd496:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd498:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd49a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd49e:	b140      	cbz	r0, bd4b2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd4a0:	2100      	movs	r1, #0
   bd4a2:	e9cd 2100 	strd	r2, r1, [sp]
   bd4a6:	a903      	add	r1, sp, #12
   bd4a8:	7b62      	ldrb	r2, [r4, #13]
   bd4aa:	f000 f90f 	bl	bd6cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd4ae:	b004      	add	sp, #16
   bd4b0:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd4b2:	6860      	ldr	r0, [r4, #4]
   bd4b4:	2800      	cmp	r0, #0
   bd4b6:	d0fa      	beq.n	bd4ae <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd4b8:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd4ba:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd4bc:	2903      	cmp	r1, #3
   bd4be:	d10d      	bne.n	bd4dc <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd4c0:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd4c4:	21ff      	movs	r1, #255	; 0xff
   bd4c6:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd4ca:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd4ce:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd4d2:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd4d4:	a903      	add	r1, sp, #12
   bd4d6:	f000 f9f6 	bl	bd8c6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd4da:	e7e8      	b.n	bd4ae <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd4dc:	b941      	cbnz	r1, bd4f0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd4de:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd4e2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd4e6:	21ff      	movs	r1, #255	; 0xff
   bd4e8:	e9cd 2100 	strd	r2, r1, [sp]
   bd4ec:	4622      	mov	r2, r4
   bd4ee:	e7f1      	b.n	bd4d4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd4f0:	2902      	cmp	r1, #2
   bd4f2:	d102      	bne.n	bd4fa <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd4f4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd4f8:	e7f3      	b.n	bd4e2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd4fa:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd4fc:	bf02      	ittt	eq
   bd4fe:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd502:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd506:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd50a:	e7ec      	b.n	bd4e6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd50c <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd50c:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd50e:	f100 050f 	add.w	r5, r0, #15
   bd512:	7b02      	ldrb	r2, [r0, #12]
   bd514:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd516:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd518:	f7ff ffb6 	bl	bd488 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd51c:	b178      	cbz	r0, bd53e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd51e:	7b22      	ldrb	r2, [r4, #12]
   bd520:	4629      	mov	r1, r5
   bd522:	4422      	add	r2, r4
  uint32_t value = 0;
   bd524:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd526:	42a2      	cmp	r2, r4
   bd528:	d00b      	beq.n	bd542 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd52a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd52c:	7ba0      	ldrb	r0, [r4, #14]
   bd52e:	b920      	cbnz	r0, bd53a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd530:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd532:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd534:	3a01      	subs	r2, #1
   bd536:	3101      	adds	r1, #1
   bd538:	e7f5      	b.n	bd526 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd53a:	7808      	ldrb	r0, [r1, #0]
   bd53c:	e7f9      	b.n	bd532 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd542:	bd38      	pop	{r3, r4, r5, pc}

000bd544 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd544:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd546:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd548:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd54a:	7143      	strb	r3, [r0, #5]
}
   bd54c:	bd10      	pop	{r4, pc}

000bd54e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd54e:	b510      	push	{r4, lr}
   bd550:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd552:	6800      	ldr	r0, [r0, #0]
   bd554:	f7ff ffda 	bl	bd50c <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd558:	7922      	ldrb	r2, [r4, #4]
   bd55a:	2301      	movs	r3, #1
   bd55c:	4093      	lsls	r3, r2
  val >>= _shift;
   bd55e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd560:	3b01      	subs	r3, #1
  val >>= _shift;
   bd562:	40d0      	lsrs	r0, r2
}
   bd564:	4018      	ands	r0, r3
   bd566:	bd10      	pop	{r4, pc}

000bd568 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd568:	b570      	push	{r4, r5, r6, lr}
   bd56a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd56c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd56e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd570:	f7ff ffcc 	bl	bd50c <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd574:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd576:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd578:	2201      	movs	r2, #1
   bd57a:	409a      	lsls	r2, r3
   bd57c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd57e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd582:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd586:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd588:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd58a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd58e:	4329      	orrs	r1, r5
   bd590:	7b02      	ldrb	r2, [r0, #12]
}
   bd592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd596:	f7ff bf59 	b.w	bd44c <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd59a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd59a:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd59c:	2200      	movs	r2, #0
   bd59e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd5a0:	2220      	movs	r2, #32
  _addr = addr;
   bd5a2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd5a4:	60c2      	str	r2, [r0, #12]
#endif
}
   bd5a6:	4770      	bx	lr

000bd5a8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd5a8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd5aa:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd5ac:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd5ae:	b153      	cbz	r3, bd5c6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd5b0:	7821      	ldrb	r1, [r4, #0]
   bd5b2:	6860      	ldr	r0, [r4, #4]
   bd5b4:	f002 fb82 	bl	bfcbc <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd5b8:	6860      	ldr	r0, [r4, #4]
   bd5ba:	f002 fb8a 	bl	bfcd2 <_ZN7TwoWire15endTransmissionEv>
   bd5be:	fab0 f080 	clz	r0, r0
   bd5c2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd5c4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd5c6:	2101      	movs	r1, #1
   bd5c8:	f000 f803 	bl	bd5d2 <_ZN18Adafruit_I2CDevice5beginEb>
   bd5cc:	2800      	cmp	r0, #0
   bd5ce:	d1ef      	bne.n	bd5b0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd5d0:	e7f8      	b.n	bd5c4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd5d2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd5d2:	b538      	push	{r3, r4, r5, lr}
   bd5d4:	4604      	mov	r4, r0
  _wire->begin();
   bd5d6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd5d8:	460d      	mov	r5, r1
  _wire->begin();
   bd5da:	f002 fb3d 	bl	bfc58 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd5de:	2001      	movs	r0, #1
   bd5e0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd5e2:	b125      	cbz	r5, bd5ee <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd5e4:	4620      	mov	r0, r4
}
   bd5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd5ea:	f7ff bfdd 	b.w	bd5a8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd5ee:	bd38      	pop	{r3, r4, r5, pc}

000bd5f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd5f4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd5f8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd5fa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd5fc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd5fe:	4432      	add	r2, r6
   bd600:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd602:	4604      	mov	r4, r0
   bd604:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd606:	d902      	bls.n	bd60e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd608:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd60e:	7801      	ldrb	r1, [r0, #0]
   bd610:	6840      	ldr	r0, [r0, #4]
   bd612:	f002 fb53 	bl	bfcbc <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd616:	b97e      	cbnz	r6, bd638 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd618:	6860      	ldr	r0, [r4, #4]
   bd61a:	6803      	ldr	r3, [r0, #0]
   bd61c:	462a      	mov	r2, r5
   bd61e:	68db      	ldr	r3, [r3, #12]
   bd620:	4641      	mov	r1, r8
   bd622:	4798      	blx	r3
   bd624:	4285      	cmp	r5, r0
   bd626:	d1ef      	bne.n	bd608 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd628:	6860      	ldr	r0, [r4, #4]
   bd62a:	4639      	mov	r1, r7
   bd62c:	f002 fb4d 	bl	bfcca <_ZN7TwoWire15endTransmissionEh>
   bd630:	fab0 f080 	clz	r0, r0
   bd634:	0940      	lsrs	r0, r0, #5
   bd636:	e7e8      	b.n	bd60a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd638:	f1b9 0f00 	cmp.w	r9, #0
   bd63c:	d0ec      	beq.n	bd618 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd63e:	6860      	ldr	r0, [r4, #4]
   bd640:	6803      	ldr	r3, [r0, #0]
   bd642:	4632      	mov	r2, r6
   bd644:	68db      	ldr	r3, [r3, #12]
   bd646:	4649      	mov	r1, r9
   bd648:	4798      	blx	r3
   bd64a:	4286      	cmp	r6, r0
   bd64c:	d1dc      	bne.n	bd608 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd64e:	e7e3      	b.n	bd618 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd650 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd654:	4615      	mov	r5, r2
   bd656:	4604      	mov	r4, r0
   bd658:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd65a:	b2d2      	uxtb	r2, r2
   bd65c:	7801      	ldrb	r1, [r0, #0]
   bd65e:	6840      	ldr	r0, [r0, #4]
   bd660:	f002 fb17 	bl	bfc92 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd664:	4285      	cmp	r5, r0
   bd666:	d10d      	bne.n	bd684 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd668:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd66a:	fa1f f887 	uxth.w	r8, r7
   bd66e:	45a8      	cmp	r8, r5
   bd670:	f107 0701 	add.w	r7, r7, #1
   bd674:	d209      	bcs.n	bd68a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd676:	6860      	ldr	r0, [r4, #4]
   bd678:	6803      	ldr	r3, [r0, #0]
   bd67a:	695b      	ldr	r3, [r3, #20]
   bd67c:	4798      	blx	r3
   bd67e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd682:	e7f2      	b.n	bd66a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd684:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd68a:	2001      	movs	r0, #1
   bd68c:	e7fb      	b.n	bd686 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd68e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd68e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd692:	4607      	mov	r7, r0
   bd694:	4688      	mov	r8, r1
   bd696:	4616      	mov	r6, r2
   bd698:	4699      	mov	r9, r3
  size_t pos = 0;
   bd69a:	2500      	movs	r5, #0
  while (pos < len) {
   bd69c:	42b5      	cmp	r5, r6
   bd69e:	d212      	bcs.n	bd6c6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd6a0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd6a2:	1b74      	subs	r4, r6, r5
   bd6a4:	4294      	cmp	r4, r2
   bd6a6:	bf28      	it	cs
   bd6a8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd6aa:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd6ac:	42ab      	cmp	r3, r5
   bd6ae:	bf94      	ite	ls
   bd6b0:	464b      	movls	r3, r9
   bd6b2:	2300      	movhi	r3, #0
   bd6b4:	4622      	mov	r2, r4
   bd6b6:	eb08 0105 	add.w	r1, r8, r5
   bd6ba:	4638      	mov	r0, r7
   bd6bc:	f7ff ffc8 	bl	bd650 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd6c0:	b110      	cbz	r0, bd6c8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd6c2:	4425      	add	r5, r4
  while (pos < len) {
   bd6c4:	e7ea      	b.n	bd69c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd6c6:	2001      	movs	r0, #1
}
   bd6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd6cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd6cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd6ce:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd6d0:	2300      	movs	r3, #0
   bd6d2:	e9cd 3300 	strd	r3, r3, [sp]
   bd6d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd6da:	9e06      	ldr	r6, [sp, #24]
   bd6dc:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd6de:	f7ff ff87 	bl	bd5f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd6e2:	b140      	cbz	r0, bd6f6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd6e4:	2301      	movs	r3, #1
   bd6e6:	4632      	mov	r2, r6
   bd6e8:	4629      	mov	r1, r5
   bd6ea:	4620      	mov	r0, r4
}
   bd6ec:	b002      	add	sp, #8
   bd6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd6f2:	f7ff bfcc 	b.w	bd68e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd6f6:	b002      	add	sp, #8
   bd6f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd6fc <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd700:	4604      	mov	r4, r0
  if (_spi) {
   bd702:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd704:	b085      	sub	sp, #20
   bd706:	460d      	mov	r5, r1
  if (_spi) {
   bd708:	b140      	cbz	r0, bd71c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd70a:	2300      	movs	r3, #0
   bd70c:	9300      	str	r3, [sp, #0]
   bd70e:	4613      	mov	r3, r2
   bd710:	460a      	mov	r2, r1
   bd712:	f003 ff85 	bl	c1620 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd716:	b005      	add	sp, #20
   bd718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd71c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd71e:	68a0      	ldr	r0, [r4, #8]
   bd720:	4f48      	ldr	r7, [pc, #288]	; (bd844 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd722:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd726:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd728:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd72a:	bf0c      	ite	eq
   bd72c:	f04f 0b01 	moveq.w	fp, #1
   bd730:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd734:	ea1b 0f03 	tst.w	fp, r3
   bd738:	eb01 0302 	add.w	r3, r1, r2
   bd73c:	bf0c      	ite	eq
   bd73e:	f04f 0901 	moveq.w	r9, #1
   bd742:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd746:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd748:	9303      	str	r3, [sp, #12]
   bd74a:	9b03      	ldr	r3, [sp, #12]
   bd74c:	42ab      	cmp	r3, r5
   bd74e:	d0e2      	beq.n	bd716 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd750:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd754:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd756:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd75a:	b117      	cbz	r7, bd762 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd75c:	4638      	mov	r0, r7
   bd75e:	f000 f9c9 	bl	bdaf4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd762:	7b63      	ldrb	r3, [r4, #13]
   bd764:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd768:	d141      	bne.n	bd7ee <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd76a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd76e:	1c5a      	adds	r2, r3, #1
   bd770:	d00f      	beq.n	bd792 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd772:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd776:	bf14      	ite	ne
   bd778:	2301      	movne	r3, #1
   bd77a:	2300      	moveq	r3, #0
   bd77c:	454b      	cmp	r3, r9
   bd77e:	d008      	beq.n	bd792 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd780:	6963      	ldr	r3, [r4, #20]
   bd782:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd784:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd786:	2900      	cmp	r1, #0
   bd788:	d02c      	beq.n	bd7e4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd78a:	4302      	orrs	r2, r0
   bd78c:	601a      	str	r2, [r3, #0]
   bd78e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd792:	69a1      	ldr	r1, [r4, #24]
   bd794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd796:	680a      	ldr	r2, [r1, #0]
   bd798:	4313      	orrs	r3, r2
   bd79a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd79c:	b117      	cbz	r7, bd7a4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd79e:	4638      	mov	r0, r7
   bd7a0:	f000 f9a8 	bl	bdaf4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd7a4:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd7a8:	3301      	adds	r3, #1
   bd7aa:	d006      	beq.n	bd7ba <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd7ac:	69e3      	ldr	r3, [r4, #28]
   bd7ae:	681a      	ldr	r2, [r3, #0]
   bd7b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd7b2:	421a      	tst	r2, r3
            reply |= b;
   bd7b4:	bf18      	it	ne
   bd7b6:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd7ba:	69a1      	ldr	r1, [r4, #24]
   bd7bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd7be:	680a      	ldr	r2, [r1, #0]
   bd7c0:	ea22 0303 	bic.w	r3, r2, r3
   bd7c4:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd7c6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd7ca:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd7cc:	bf18      	it	ne
   bd7ce:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd7d2:	7b23      	ldrb	r3, [r4, #12]
   bd7d4:	2b00      	cmp	r3, #0
   bd7d6:	d132      	bne.n	bd83e <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd7d8:	0076      	lsls	r6, r6, #1
   bd7da:	b2f6      	uxtb	r6, r6
   bd7dc:	2e00      	cmp	r6, #0
   bd7de:	d1bc      	bne.n	bd75a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd7e0:	3501      	adds	r5, #1
   bd7e2:	e7b2      	b.n	bd74a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd7e4:	ea22 0200 	bic.w	r2, r2, r0
   bd7e8:	601a      	str	r2, [r3, #0]
   bd7ea:	4689      	mov	r9, r1
   bd7ec:	e7d1      	b.n	bd792 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd7ee:	69a1      	ldr	r1, [r4, #24]
   bd7f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd7f2:	680a      	ldr	r2, [r1, #0]
   bd7f4:	4313      	orrs	r3, r2
   bd7f6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd7f8:	b117      	cbz	r7, bd800 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd7fa:	4638      	mov	r0, r7
   bd7fc:	f000 f97a 	bl	bdaf4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd800:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd804:	3301      	adds	r3, #1
   bd806:	d008      	beq.n	bd81a <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd808:	6963      	ldr	r3, [r4, #20]
   bd80a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd80c:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd80e:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd812:	bf14      	ite	ne
   bd814:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd816:	438a      	biceq	r2, r1
   bd818:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd81a:	69a1      	ldr	r1, [r4, #24]
   bd81c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd81e:	680a      	ldr	r2, [r1, #0]
   bd820:	ea22 0303 	bic.w	r3, r2, r3
   bd824:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd826:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd82a:	3301      	adds	r3, #1
   bd82c:	d0cb      	beq.n	bd7c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd82e:	69e3      	ldr	r3, [r4, #28]
   bd830:	681a      	ldr	r2, [r3, #0]
   bd832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd834:	421a      	tst	r2, r3
            reply |= b;
   bd836:	bf18      	it	ne
   bd838:	ea46 0808 	orrne.w	r8, r6, r8
   bd83c:	e7c3      	b.n	bd7c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd83e:	0876      	lsrs	r6, r6, #1
   bd840:	e7cc      	b.n	bd7dc <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd842:	bf00      	nop
   bd844:	0007a120 	.word	0x0007a120

000bd848 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd848:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd84a:	2201      	movs	r2, #1
  uint8_t data = send;
   bd84c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd850:	f10d 0107 	add.w	r1, sp, #7
   bd854:	f7ff ff52 	bl	bd6fc <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd858:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd85c:	b003      	add	sp, #12
   bd85e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd862 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd866:	4604      	mov	r4, r0
  if (_spi) {
   bd868:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd86a:	460e      	mov	r6, r1
   bd86c:	4617      	mov	r7, r2
   bd86e:	461d      	mov	r5, r3
  if (_spi) {
   bd870:	b110      	cbz	r0, bd878 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd872:	6861      	ldr	r1, [r4, #4]
   bd874:	f003 fe2e 	bl	c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd878:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd87c:	2100      	movs	r1, #0
   bd87e:	b280      	uxth	r0, r0
   bd880:	f004 facb 	bl	c1e1a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd884:	9b06      	ldr	r3, [sp, #24]
   bd886:	eb05 0803 	add.w	r8, r5, r3
   bd88a:	4545      	cmp	r5, r8
   bd88c:	d108      	bne.n	bd8a0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd88e:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd890:	42b7      	cmp	r7, r6
   bd892:	d00b      	beq.n	bd8ac <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd894:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd898:	4620      	mov	r0, r4
   bd89a:	f7ff ffd5 	bl	bd848 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd89e:	e7f7      	b.n	bd890 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd8a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd8a4:	4620      	mov	r0, r4
   bd8a6:	f7ff ffcf 	bl	bd848 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd8aa:	e7ee      	b.n	bd88a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd8ac:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd8b0:	2101      	movs	r1, #1
   bd8b2:	b280      	uxth	r0, r0
   bd8b4:	f004 fab1 	bl	c1e1a <digitalWrite>

  if (_spi) {
   bd8b8:	6820      	ldr	r0, [r4, #0]
   bd8ba:	b108      	cbz	r0, bd8c0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd8bc:	f003 fdf0 	bl	c14a0 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd8c0:	2001      	movs	r0, #1
   bd8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd8c6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd8ca:	4604      	mov	r4, r0
  if (_spi) {
   bd8cc:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd8ce:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd8d2:	460e      	mov	r6, r1
   bd8d4:	4617      	mov	r7, r2
   bd8d6:	461d      	mov	r5, r3
  if (_spi) {
   bd8d8:	b110      	cbz	r0, bd8e0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd8da:	6861      	ldr	r1, [r4, #4]
   bd8dc:	f003 fdfa 	bl	c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd8e0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd8e4:	2100      	movs	r1, #0
   bd8e6:	b280      	uxth	r0, r0
   bd8e8:	f004 fa97 	bl	c1e1a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd8ec:	4437      	add	r7, r6
   bd8ee:	42be      	cmp	r6, r7
   bd8f0:	d10a      	bne.n	bd908 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd8f2:	9b06      	ldr	r3, [sp, #24]
   bd8f4:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd8f6:	42ae      	cmp	r6, r5
   bd8f8:	d00c      	beq.n	bd914 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd8fa:	4641      	mov	r1, r8
   bd8fc:	4620      	mov	r0, r4
   bd8fe:	f7ff ffa3 	bl	bd848 <_ZN18Adafruit_SPIDevice8transferEh>
   bd902:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd906:	e7f6      	b.n	bd8f6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd908:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd90c:	4620      	mov	r0, r4
   bd90e:	f7ff ff9b 	bl	bd848 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd912:	e7ec      	b.n	bd8ee <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd914:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd918:	2101      	movs	r1, #1
   bd91a:	b280      	uxth	r0, r0
   bd91c:	f004 fa7d 	bl	c1e1a <digitalWrite>

  if (_spi) {
   bd920:	6820      	ldr	r0, [r4, #0]
   bd922:	b108      	cbz	r0, bd928 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd924:	f003 fdbc 	bl	c14a0 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd928:	2001      	movs	r0, #1
   bd92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bd930 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd930:	b508      	push	{r3, lr}
   bd932:	4b02      	ldr	r3, [pc, #8]	; (bd93c <hal_ble_stack_init+0xc>)
   bd934:	681b      	ldr	r3, [r3, #0]
   bd936:	689b      	ldr	r3, [r3, #8]
   bd938:	9301      	str	r3, [sp, #4]
   bd93a:	bd08      	pop	{r3, pc}
   bd93c:	00030278 	.word	0x00030278

000bd940 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd940:	b508      	push	{r3, lr}
   bd942:	4b02      	ldr	r3, [pc, #8]	; (bd94c <hal_ble_gap_set_tx_power+0xc>)
   bd944:	681b      	ldr	r3, [r3, #0]
   bd946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd948:	9301      	str	r3, [sp, #4]
   bd94a:	bd08      	pop	{r3, pc}
   bd94c:	00030278 	.word	0x00030278

000bd950 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd950:	b508      	push	{r3, lr}
   bd952:	4b02      	ldr	r3, [pc, #8]	; (bd95c <hal_ble_gap_set_advertising_data+0xc>)
   bd954:	681b      	ldr	r3, [r3, #0]
   bd956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd958:	9301      	str	r3, [sp, #4]
   bd95a:	bd08      	pop	{r3, pc}
   bd95c:	00030278 	.word	0x00030278

000bd960 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd960:	b508      	push	{r3, lr}
   bd962:	4b02      	ldr	r3, [pc, #8]	; (bd96c <hal_ble_gap_set_scan_response_data+0xc>)
   bd964:	681b      	ldr	r3, [r3, #0]
   bd966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd968:	9301      	str	r3, [sp, #4]
   bd96a:	bd08      	pop	{r3, pc}
   bd96c:	00030278 	.word	0x00030278

000bd970 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd970:	b508      	push	{r3, lr}
   bd972:	4b02      	ldr	r3, [pc, #8]	; (bd97c <hal_ble_gap_start_advertising+0xc>)
   bd974:	681b      	ldr	r3, [r3, #0]
   bd976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd978:	9301      	str	r3, [sp, #4]
   bd97a:	bd08      	pop	{r3, pc}
   bd97c:	00030278 	.word	0x00030278

000bd980 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd980:	b508      	push	{r3, lr}
   bd982:	4b03      	ldr	r3, [pc, #12]	; (bd990 <hal_ble_gap_disconnect+0x10>)
   bd984:	681b      	ldr	r3, [r3, #0]
   bd986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd98a:	9301      	str	r3, [sp, #4]
   bd98c:	bd08      	pop	{r3, pc}
   bd98e:	0000      	.short	0x0000
   bd990:	00030278 	.word	0x00030278

000bd994 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd994:	b508      	push	{r3, lr}
   bd996:	4b03      	ldr	r3, [pc, #12]	; (bd9a4 <hal_ble_gatt_server_add_service+0x10>)
   bd998:	681b      	ldr	r3, [r3, #0]
   bd99a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd99e:	9301      	str	r3, [sp, #4]
   bd9a0:	bd08      	pop	{r3, pc}
   bd9a2:	0000      	.short	0x0000
   bd9a4:	00030278 	.word	0x00030278

000bd9a8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd9a8:	b508      	push	{r3, lr}
   bd9aa:	4b03      	ldr	r3, [pc, #12]	; (bd9b8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd9ac:	681b      	ldr	r3, [r3, #0]
   bd9ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd9b2:	9301      	str	r3, [sp, #4]
   bd9b4:	bd08      	pop	{r3, pc}
   bd9b6:	0000      	.short	0x0000
   bd9b8:	00030278 	.word	0x00030278

000bd9bc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd9bc:	b508      	push	{r3, lr}
   bd9be:	4b03      	ldr	r3, [pc, #12]	; (bd9cc <hal_ble_gatt_client_write_with_response+0x10>)
   bd9c0:	681b      	ldr	r3, [r3, #0]
   bd9c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd9c6:	9301      	str	r3, [sp, #4]
   bd9c8:	bd08      	pop	{r3, pc}
   bd9ca:	0000      	.short	0x0000
   bd9cc:	00030278 	.word	0x00030278

000bd9d0 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd9d0:	b508      	push	{r3, lr}
   bd9d2:	4b03      	ldr	r3, [pc, #12]	; (bd9e0 <hal_ble_gatt_client_write_without_response+0x10>)
   bd9d4:	681b      	ldr	r3, [r3, #0]
   bd9d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd9da:	9301      	str	r3, [sp, #4]
   bd9dc:	bd08      	pop	{r3, pc}
   bd9de:	0000      	.short	0x0000
   bd9e0:	00030278 	.word	0x00030278

000bd9e4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd9e4:	b508      	push	{r3, lr}
   bd9e6:	4b03      	ldr	r3, [pc, #12]	; (bd9f4 <hal_ble_gatt_server_add_characteristic+0x10>)
   bd9e8:	681b      	ldr	r3, [r3, #0]
   bd9ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd9ee:	9301      	str	r3, [sp, #4]
   bd9f0:	bd08      	pop	{r3, pc}
   bd9f2:	0000      	.short	0x0000
   bd9f4:	00030278 	.word	0x00030278

000bd9f8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd9f8:	b508      	push	{r3, lr}
   bd9fa:	4b03      	ldr	r3, [pc, #12]	; (bda08 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd9fc:	681b      	ldr	r3, [r3, #0]
   bd9fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bda02:	9301      	str	r3, [sp, #4]
   bda04:	bd08      	pop	{r3, pc}
   bda06:	0000      	.short	0x0000
   bda08:	00030278 	.word	0x00030278

000bda0c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bda0c:	b508      	push	{r3, lr}
   bda0e:	4b03      	ldr	r3, [pc, #12]	; (bda1c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bda10:	681b      	ldr	r3, [r3, #0]
   bda12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bda16:	9301      	str	r3, [sp, #4]
   bda18:	bd08      	pop	{r3, pc}
   bda1a:	0000      	.short	0x0000
   bda1c:	00030278 	.word	0x00030278

000bda20 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bda20:	b508      	push	{r3, lr}
   bda22:	4b03      	ldr	r3, [pc, #12]	; (bda30 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bda24:	681b      	ldr	r3, [r3, #0]
   bda26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bda2a:	9301      	str	r3, [sp, #4]
   bda2c:	bd08      	pop	{r3, pc}
   bda2e:	0000      	.short	0x0000
   bda30:	00030278 	.word	0x00030278

000bda34 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bda34:	b508      	push	{r3, lr}
   bda36:	4b02      	ldr	r3, [pc, #8]	; (bda40 <os_thread_yield+0xc>)
   bda38:	681b      	ldr	r3, [r3, #0]
   bda3a:	68db      	ldr	r3, [r3, #12]
   bda3c:	9301      	str	r3, [sp, #4]
   bda3e:	bd08      	pop	{r3, pc}
   bda40:	00030248 	.word	0x00030248

000bda44 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bda44:	b508      	push	{r3, lr}
   bda46:	4b02      	ldr	r3, [pc, #8]	; (bda50 <os_thread_scheduling+0xc>)
   bda48:	681b      	ldr	r3, [r3, #0]
   bda4a:	69db      	ldr	r3, [r3, #28]
   bda4c:	9301      	str	r3, [sp, #4]
   bda4e:	bd08      	pop	{r3, pc}
   bda50:	00030248 	.word	0x00030248

000bda54 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bda54:	b508      	push	{r3, lr}
   bda56:	4b02      	ldr	r3, [pc, #8]	; (bda60 <os_timer_create+0xc>)
   bda58:	681b      	ldr	r3, [r3, #0]
   bda5a:	6a1b      	ldr	r3, [r3, #32]
   bda5c:	9301      	str	r3, [sp, #4]
   bda5e:	bd08      	pop	{r3, pc}
   bda60:	00030248 	.word	0x00030248

000bda64 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bda64:	b508      	push	{r3, lr}
   bda66:	4b02      	ldr	r3, [pc, #8]	; (bda70 <os_timer_destroy+0xc>)
   bda68:	681b      	ldr	r3, [r3, #0]
   bda6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bda6c:	9301      	str	r3, [sp, #4]
   bda6e:	bd08      	pop	{r3, pc}
   bda70:	00030248 	.word	0x00030248

000bda74 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bda74:	b508      	push	{r3, lr}
   bda76:	4b02      	ldr	r3, [pc, #8]	; (bda80 <os_timer_get_id+0xc>)
   bda78:	681b      	ldr	r3, [r3, #0]
   bda7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bda7c:	9301      	str	r3, [sp, #4]
   bda7e:	bd08      	pop	{r3, pc}
   bda80:	00030248 	.word	0x00030248

000bda84 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bda84:	b508      	push	{r3, lr}
   bda86:	4b02      	ldr	r3, [pc, #8]	; (bda90 <os_timer_change+0xc>)
   bda88:	681b      	ldr	r3, [r3, #0]
   bda8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bda8c:	9301      	str	r3, [sp, #4]
   bda8e:	bd08      	pop	{r3, pc}
   bda90:	00030248 	.word	0x00030248

000bda94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bda94:	b508      	push	{r3, lr}
   bda96:	4b02      	ldr	r3, [pc, #8]	; (bdaa0 <os_mutex_recursive_create+0xc>)
   bda98:	681b      	ldr	r3, [r3, #0]
   bda9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bda9c:	9301      	str	r3, [sp, #4]
   bda9e:	bd08      	pop	{r3, pc}
   bdaa0:	00030248 	.word	0x00030248

000bdaa4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdaa4:	b508      	push	{r3, lr}
   bdaa6:	4b02      	ldr	r3, [pc, #8]	; (bdab0 <os_mutex_recursive_destroy+0xc>)
   bdaa8:	681b      	ldr	r3, [r3, #0]
   bdaaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdaac:	9301      	str	r3, [sp, #4]
   bdaae:	bd08      	pop	{r3, pc}
   bdab0:	00030248 	.word	0x00030248

000bdab4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdab4:	b508      	push	{r3, lr}
   bdab6:	4b02      	ldr	r3, [pc, #8]	; (bdac0 <os_mutex_recursive_lock+0xc>)
   bdab8:	681b      	ldr	r3, [r3, #0]
   bdaba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdabc:	9301      	str	r3, [sp, #4]
   bdabe:	bd08      	pop	{r3, pc}
   bdac0:	00030248 	.word	0x00030248

000bdac4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdac4:	b508      	push	{r3, lr}
   bdac6:	4b02      	ldr	r3, [pc, #8]	; (bdad0 <os_mutex_recursive_unlock+0xc>)
   bdac8:	681b      	ldr	r3, [r3, #0]
   bdaca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdacc:	9301      	str	r3, [sp, #4]
   bdace:	bd08      	pop	{r3, pc}
   bdad0:	00030248 	.word	0x00030248

000bdad4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdad4:	b508      	push	{r3, lr}
   bdad6:	4b02      	ldr	r3, [pc, #8]	; (bdae0 <os_timer_set_id+0xc>)
   bdad8:	681b      	ldr	r3, [r3, #0]
   bdada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdadc:	9301      	str	r3, [sp, #4]
   bdade:	bd08      	pop	{r3, pc}
   bdae0:	00030248 	.word	0x00030248

000bdae4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdae4:	b508      	push	{r3, lr}
   bdae6:	4b02      	ldr	r3, [pc, #8]	; (bdaf0 <HAL_RNG_GetRandomNumber+0xc>)
   bdae8:	681b      	ldr	r3, [r3, #0]
   bdaea:	685b      	ldr	r3, [r3, #4]
   bdaec:	9301      	str	r3, [sp, #4]
   bdaee:	bd08      	pop	{r3, pc}
   bdaf0:	00030218 	.word	0x00030218

000bdaf4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdaf4:	b508      	push	{r3, lr}
   bdaf6:	4b02      	ldr	r3, [pc, #8]	; (bdb00 <HAL_Delay_Microseconds+0xc>)
   bdaf8:	681b      	ldr	r3, [r3, #0]
   bdafa:	68db      	ldr	r3, [r3, #12]
   bdafc:	9301      	str	r3, [sp, #4]
   bdafe:	bd08      	pop	{r3, pc}
   bdb00:	00030218 	.word	0x00030218

000bdb04 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bdb04:	b508      	push	{r3, lr}
   bdb06:	4b02      	ldr	r3, [pc, #8]	; (bdb10 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bdb08:	681b      	ldr	r3, [r3, #0]
   bdb0a:	691b      	ldr	r3, [r3, #16]
   bdb0c:	9301      	str	r3, [sp, #4]
   bdb0e:	bd08      	pop	{r3, pc}
   bdb10:	00030218 	.word	0x00030218

000bdb14 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bdb14:	b508      	push	{r3, lr}
   bdb16:	4b02      	ldr	r3, [pc, #8]	; (bdb20 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bdb18:	681b      	ldr	r3, [r3, #0]
   bdb1a:	695b      	ldr	r3, [r3, #20]
   bdb1c:	9301      	str	r3, [sp, #4]
   bdb1e:	bd08      	pop	{r3, pc}
   bdb20:	00030218 	.word	0x00030218

000bdb24 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bdb24:	b508      	push	{r3, lr}
   bdb26:	4b02      	ldr	r3, [pc, #8]	; (bdb30 <hal_rtc_time_is_valid+0xc>)
   bdb28:	681b      	ldr	r3, [r3, #0]
   bdb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdb2c:	9301      	str	r3, [sp, #4]
   bdb2e:	bd08      	pop	{r3, pc}
   bdb30:	00030218 	.word	0x00030218

000bdb34 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdb34:	b508      	push	{r3, lr}
   bdb36:	4b02      	ldr	r3, [pc, #8]	; (bdb40 <hal_rtc_get_time+0xc>)
   bdb38:	681b      	ldr	r3, [r3, #0]
   bdb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdb3c:	9301      	str	r3, [sp, #4]
   bdb3e:	bd08      	pop	{r3, pc}
   bdb40:	00030218 	.word	0x00030218

000bdb44 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bdb44:	b508      	push	{r3, lr}
   bdb46:	4b02      	ldr	r3, [pc, #8]	; (bdb50 <HAL_Validate_Pin_Function+0xc>)
   bdb48:	681b      	ldr	r3, [r3, #0]
   bdb4a:	685b      	ldr	r3, [r3, #4]
   bdb4c:	9301      	str	r3, [sp, #4]
   bdb4e:	bd08      	pop	{r3, pc}
   bdb50:	0003022c 	.word	0x0003022c

000bdb54 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bdb54:	b508      	push	{r3, lr}
   bdb56:	4b02      	ldr	r3, [pc, #8]	; (bdb60 <HAL_Pin_Mode+0xc>)
   bdb58:	681b      	ldr	r3, [r3, #0]
   bdb5a:	689b      	ldr	r3, [r3, #8]
   bdb5c:	9301      	str	r3, [sp, #4]
   bdb5e:	bd08      	pop	{r3, pc}
   bdb60:	0003022c 	.word	0x0003022c

000bdb64 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bdb64:	b508      	push	{r3, lr}
   bdb66:	4b02      	ldr	r3, [pc, #8]	; (bdb70 <HAL_Get_Pin_Mode+0xc>)
   bdb68:	681b      	ldr	r3, [r3, #0]
   bdb6a:	68db      	ldr	r3, [r3, #12]
   bdb6c:	9301      	str	r3, [sp, #4]
   bdb6e:	bd08      	pop	{r3, pc}
   bdb70:	0003022c 	.word	0x0003022c

000bdb74 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bdb74:	b508      	push	{r3, lr}
   bdb76:	4b02      	ldr	r3, [pc, #8]	; (bdb80 <HAL_GPIO_Write+0xc>)
   bdb78:	681b      	ldr	r3, [r3, #0]
   bdb7a:	691b      	ldr	r3, [r3, #16]
   bdb7c:	9301      	str	r3, [sp, #4]
   bdb7e:	bd08      	pop	{r3, pc}
   bdb80:	0003022c 	.word	0x0003022c

000bdb84 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bdb84:	b508      	push	{r3, lr}
   bdb86:	4b02      	ldr	r3, [pc, #8]	; (bdb90 <HAL_Interrupts_Enable_All+0xc>)
   bdb88:	681b      	ldr	r3, [r3, #0]
   bdb8a:	6a1b      	ldr	r3, [r3, #32]
   bdb8c:	9301      	str	r3, [sp, #4]
   bdb8e:	bd08      	pop	{r3, pc}
   bdb90:	0003022c 	.word	0x0003022c

000bdb94 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bdb94:	b508      	push	{r3, lr}
   bdb96:	4b02      	ldr	r3, [pc, #8]	; (bdba0 <HAL_Interrupts_Disable_All+0xc>)
   bdb98:	681b      	ldr	r3, [r3, #0]
   bdb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdb9c:	9301      	str	r3, [sp, #4]
   bdb9e:	bd08      	pop	{r3, pc}
   bdba0:	0003022c 	.word	0x0003022c

000bdba4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bdba4:	b508      	push	{r3, lr}
   bdba6:	4b02      	ldr	r3, [pc, #8]	; (bdbb0 <hal_adc_read+0xc>)
   bdba8:	681b      	ldr	r3, [r3, #0]
   bdbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdbac:	9301      	str	r3, [sp, #4]
   bdbae:	bd08      	pop	{r3, pc}
   bdbb0:	0003022c 	.word	0x0003022c

000bdbb4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bdbb4:	b508      	push	{r3, lr}
   bdbb6:	4b02      	ldr	r3, [pc, #8]	; (bdbc0 <hal_i2c_set_speed+0xc>)
   bdbb8:	681b      	ldr	r3, [r3, #0]
   bdbba:	681b      	ldr	r3, [r3, #0]
   bdbbc:	9301      	str	r3, [sp, #4]
   bdbbe:	bd08      	pop	{r3, pc}
   bdbc0:	00030228 	.word	0x00030228

000bdbc4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bdbc4:	b508      	push	{r3, lr}
   bdbc6:	4b02      	ldr	r3, [pc, #8]	; (bdbd0 <hal_i2c_begin+0xc>)
   bdbc8:	681b      	ldr	r3, [r3, #0]
   bdbca:	68db      	ldr	r3, [r3, #12]
   bdbcc:	9301      	str	r3, [sp, #4]
   bdbce:	bd08      	pop	{r3, pc}
   bdbd0:	00030228 	.word	0x00030228

000bdbd4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bdbd4:	b508      	push	{r3, lr}
   bdbd6:	4b02      	ldr	r3, [pc, #8]	; (bdbe0 <hal_i2c_begin_transmission+0xc>)
   bdbd8:	681b      	ldr	r3, [r3, #0]
   bdbda:	699b      	ldr	r3, [r3, #24]
   bdbdc:	9301      	str	r3, [sp, #4]
   bdbde:	bd08      	pop	{r3, pc}
   bdbe0:	00030228 	.word	0x00030228

000bdbe4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bdbe4:	b508      	push	{r3, lr}
   bdbe6:	4b02      	ldr	r3, [pc, #8]	; (bdbf0 <hal_i2c_end_transmission+0xc>)
   bdbe8:	681b      	ldr	r3, [r3, #0]
   bdbea:	69db      	ldr	r3, [r3, #28]
   bdbec:	9301      	str	r3, [sp, #4]
   bdbee:	bd08      	pop	{r3, pc}
   bdbf0:	00030228 	.word	0x00030228

000bdbf4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bdbf4:	b508      	push	{r3, lr}
   bdbf6:	4b02      	ldr	r3, [pc, #8]	; (bdc00 <hal_i2c_write+0xc>)
   bdbf8:	681b      	ldr	r3, [r3, #0]
   bdbfa:	6a1b      	ldr	r3, [r3, #32]
   bdbfc:	9301      	str	r3, [sp, #4]
   bdbfe:	bd08      	pop	{r3, pc}
   bdc00:	00030228 	.word	0x00030228

000bdc04 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bdc04:	b508      	push	{r3, lr}
   bdc06:	4b02      	ldr	r3, [pc, #8]	; (bdc10 <hal_i2c_available+0xc>)
   bdc08:	681b      	ldr	r3, [r3, #0]
   bdc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdc0c:	9301      	str	r3, [sp, #4]
   bdc0e:	bd08      	pop	{r3, pc}
   bdc10:	00030228 	.word	0x00030228

000bdc14 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdc14:	b508      	push	{r3, lr}
   bdc16:	4b02      	ldr	r3, [pc, #8]	; (bdc20 <hal_i2c_read+0xc>)
   bdc18:	681b      	ldr	r3, [r3, #0]
   bdc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdc1c:	9301      	str	r3, [sp, #4]
   bdc1e:	bd08      	pop	{r3, pc}
   bdc20:	00030228 	.word	0x00030228

000bdc24 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bdc24:	b508      	push	{r3, lr}
   bdc26:	4b02      	ldr	r3, [pc, #8]	; (bdc30 <hal_i2c_peek+0xc>)
   bdc28:	681b      	ldr	r3, [r3, #0]
   bdc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdc2c:	9301      	str	r3, [sp, #4]
   bdc2e:	bd08      	pop	{r3, pc}
   bdc30:	00030228 	.word	0x00030228

000bdc34 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bdc34:	b508      	push	{r3, lr}
   bdc36:	4b02      	ldr	r3, [pc, #8]	; (bdc40 <hal_i2c_flush+0xc>)
   bdc38:	681b      	ldr	r3, [r3, #0]
   bdc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdc3c:	9301      	str	r3, [sp, #4]
   bdc3e:	bd08      	pop	{r3, pc}
   bdc40:	00030228 	.word	0x00030228

000bdc44 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdc44:	b508      	push	{r3, lr}
   bdc46:	4b02      	ldr	r3, [pc, #8]	; (bdc50 <hal_i2c_is_enabled+0xc>)
   bdc48:	681b      	ldr	r3, [r3, #0]
   bdc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdc4c:	9301      	str	r3, [sp, #4]
   bdc4e:	bd08      	pop	{r3, pc}
   bdc50:	00030228 	.word	0x00030228

000bdc54 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bdc54:	b508      	push	{r3, lr}
   bdc56:	4b02      	ldr	r3, [pc, #8]	; (bdc60 <hal_i2c_init+0xc>)
   bdc58:	681b      	ldr	r3, [r3, #0]
   bdc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdc5c:	9301      	str	r3, [sp, #4]
   bdc5e:	bd08      	pop	{r3, pc}
   bdc60:	00030228 	.word	0x00030228

000bdc64 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bdc64:	b508      	push	{r3, lr}
   bdc66:	4b02      	ldr	r3, [pc, #8]	; (bdc70 <hal_i2c_request_ex+0xc>)
   bdc68:	681b      	ldr	r3, [r3, #0]
   bdc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdc6c:	9301      	str	r3, [sp, #4]
   bdc6e:	bd08      	pop	{r3, pc}
   bdc70:	00030228 	.word	0x00030228

000bdc74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bdc74:	b508      	push	{r3, lr}
   bdc76:	4b02      	ldr	r3, [pc, #8]	; (bdc80 <inet_inet_ntop+0xc>)
   bdc78:	681b      	ldr	r3, [r3, #0]
   bdc7a:	695b      	ldr	r3, [r3, #20]
   bdc7c:	9301      	str	r3, [sp, #4]
   bdc7e:	bd08      	pop	{r3, pc}
   bdc80:	00030264 	.word	0x00030264

000bdc84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bdc84:	b508      	push	{r3, lr}
   bdc86:	4b02      	ldr	r3, [pc, #8]	; (bdc90 <netdb_freeaddrinfo+0xc>)
   bdc88:	681b      	ldr	r3, [r3, #0]
   bdc8a:	689b      	ldr	r3, [r3, #8]
   bdc8c:	9301      	str	r3, [sp, #4]
   bdc8e:	bd08      	pop	{r3, pc}
   bdc90:	00030268 	.word	0x00030268

000bdc94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b02      	ldr	r3, [pc, #8]	; (bdca0 <netdb_getaddrinfo+0xc>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	68db      	ldr	r3, [r3, #12]
   bdc9c:	9301      	str	r3, [sp, #4]
   bdc9e:	bd08      	pop	{r3, pc}
   bdca0:	00030268 	.word	0x00030268

000bdca4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bdca4:	b508      	push	{r3, lr}
   bdca6:	4b02      	ldr	r3, [pc, #8]	; (bdcb0 <HAL_Servo_Attach+0xc>)
   bdca8:	681b      	ldr	r3, [r3, #0]
   bdcaa:	691b      	ldr	r3, [r3, #16]
   bdcac:	9301      	str	r3, [sp, #4]
   bdcae:	bd08      	pop	{r3, pc}
   bdcb0:	00030224 	.word	0x00030224

000bdcb4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bdcb4:	b508      	push	{r3, lr}
   bdcb6:	4b02      	ldr	r3, [pc, #8]	; (bdcc0 <HAL_Servo_Detach+0xc>)
   bdcb8:	681b      	ldr	r3, [r3, #0]
   bdcba:	695b      	ldr	r3, [r3, #20]
   bdcbc:	9301      	str	r3, [sp, #4]
   bdcbe:	bd08      	pop	{r3, pc}
   bdcc0:	00030224 	.word	0x00030224

000bdcc4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bdcc4:	b508      	push	{r3, lr}
   bdcc6:	4b02      	ldr	r3, [pc, #8]	; (bdcd0 <HAL_Servo_Write_Pulse_Width+0xc>)
   bdcc8:	681b      	ldr	r3, [r3, #0]
   bdcca:	699b      	ldr	r3, [r3, #24]
   bdccc:	9301      	str	r3, [sp, #4]
   bdcce:	bd08      	pop	{r3, pc}
   bdcd0:	00030224 	.word	0x00030224

000bdcd4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bdcd4:	b508      	push	{r3, lr}
   bdcd6:	4b02      	ldr	r3, [pc, #8]	; (bdce0 <hal_spi_begin+0xc>)
   bdcd8:	681b      	ldr	r3, [r3, #0]
   bdcda:	681b      	ldr	r3, [r3, #0]
   bdcdc:	9301      	str	r3, [sp, #4]
   bdcde:	bd08      	pop	{r3, pc}
   bdce0:	00030230 	.word	0x00030230

000bdce4 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b02      	ldr	r3, [pc, #8]	; (bdcf0 <hal_spi_set_clock_divider+0xc>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	691b      	ldr	r3, [r3, #16]
   bdcec:	9301      	str	r3, [sp, #4]
   bdcee:	bd08      	pop	{r3, pc}
   bdcf0:	00030230 	.word	0x00030230

000bdcf4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdcf4:	b508      	push	{r3, lr}
   bdcf6:	4b02      	ldr	r3, [pc, #8]	; (bdd00 <hal_spi_transfer+0xc>)
   bdcf8:	681b      	ldr	r3, [r3, #0]
   bdcfa:	695b      	ldr	r3, [r3, #20]
   bdcfc:	9301      	str	r3, [sp, #4]
   bdcfe:	bd08      	pop	{r3, pc}
   bdd00:	00030230 	.word	0x00030230

000bdd04 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdd04:	b508      	push	{r3, lr}
   bdd06:	4b02      	ldr	r3, [pc, #8]	; (bdd10 <hal_spi_init+0xc>)
   bdd08:	681b      	ldr	r3, [r3, #0]
   bdd0a:	69db      	ldr	r3, [r3, #28]
   bdd0c:	9301      	str	r3, [sp, #4]
   bdd0e:	bd08      	pop	{r3, pc}
   bdd10:	00030230 	.word	0x00030230

000bdd14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdd14:	b508      	push	{r3, lr}
   bdd16:	4b02      	ldr	r3, [pc, #8]	; (bdd20 <hal_spi_is_enabled+0xc>)
   bdd18:	681b      	ldr	r3, [r3, #0]
   bdd1a:	6a1b      	ldr	r3, [r3, #32]
   bdd1c:	9301      	str	r3, [sp, #4]
   bdd1e:	bd08      	pop	{r3, pc}
   bdd20:	00030230 	.word	0x00030230

000bdd24 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdd24:	b508      	push	{r3, lr}
   bdd26:	4b02      	ldr	r3, [pc, #8]	; (bdd30 <hal_spi_info+0xc>)
   bdd28:	681b      	ldr	r3, [r3, #0]
   bdd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd2c:	9301      	str	r3, [sp, #4]
   bdd2e:	bd08      	pop	{r3, pc}
   bdd30:	00030230 	.word	0x00030230

000bdd34 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bdd34:	b508      	push	{r3, lr}
   bdd36:	4b02      	ldr	r3, [pc, #8]	; (bdd40 <hal_spi_transfer_dma+0xc>)
   bdd38:	681b      	ldr	r3, [r3, #0]
   bdd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdd3c:	9301      	str	r3, [sp, #4]
   bdd3e:	bd08      	pop	{r3, pc}
   bdd40:	00030230 	.word	0x00030230

000bdd44 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bdd44:	b508      	push	{r3, lr}
   bdd46:	4b02      	ldr	r3, [pc, #8]	; (bdd50 <hal_spi_begin_ext+0xc>)
   bdd48:	681b      	ldr	r3, [r3, #0]
   bdd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdd4c:	9301      	str	r3, [sp, #4]
   bdd4e:	bd08      	pop	{r3, pc}
   bdd50:	00030230 	.word	0x00030230

000bdd54 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bdd54:	b508      	push	{r3, lr}
   bdd56:	4b02      	ldr	r3, [pc, #8]	; (bdd60 <hal_spi_transfer_dma_status+0xc>)
   bdd58:	681b      	ldr	r3, [r3, #0]
   bdd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bdd5c:	9301      	str	r3, [sp, #4]
   bdd5e:	bd08      	pop	{r3, pc}
   bdd60:	00030230 	.word	0x00030230

000bdd64 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bdd64:	b508      	push	{r3, lr}
   bdd66:	4b02      	ldr	r3, [pc, #8]	; (bdd70 <hal_spi_set_settings+0xc>)
   bdd68:	681b      	ldr	r3, [r3, #0]
   bdd6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdd6c:	9301      	str	r3, [sp, #4]
   bdd6e:	bd08      	pop	{r3, pc}
   bdd70:	00030230 	.word	0x00030230

000bdd74 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bdd74:	b508      	push	{r3, lr}
   bdd76:	4b02      	ldr	r3, [pc, #8]	; (bdd80 <hal_spi_acquire+0xc>)
   bdd78:	681b      	ldr	r3, [r3, #0]
   bdd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdd7c:	9301      	str	r3, [sp, #4]
   bdd7e:	bd08      	pop	{r3, pc}
   bdd80:	00030230 	.word	0x00030230

000bdd84 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bdd84:	b508      	push	{r3, lr}
   bdd86:	4b02      	ldr	r3, [pc, #8]	; (bdd90 <hal_spi_release+0xc>)
   bdd88:	681b      	ldr	r3, [r3, #0]
   bdd8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdd8c:	9301      	str	r3, [sp, #4]
   bdd8e:	bd08      	pop	{r3, pc}
   bdd90:	00030230 	.word	0x00030230

000bdd94 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bdd94:	b508      	push	{r3, lr}
   bdd96:	4b02      	ldr	r3, [pc, #8]	; (bdda0 <hal_usart_end+0xc>)
   bdd98:	681b      	ldr	r3, [r3, #0]
   bdd9a:	689b      	ldr	r3, [r3, #8]
   bdd9c:	9301      	str	r3, [sp, #4]
   bdd9e:	bd08      	pop	{r3, pc}
   bdda0:	0003023c 	.word	0x0003023c

000bdda4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bdda4:	b508      	push	{r3, lr}
   bdda6:	4b02      	ldr	r3, [pc, #8]	; (bddb0 <hal_usart_write+0xc>)
   bdda8:	681b      	ldr	r3, [r3, #0]
   bddaa:	68db      	ldr	r3, [r3, #12]
   bddac:	9301      	str	r3, [sp, #4]
   bddae:	bd08      	pop	{r3, pc}
   bddb0:	0003023c 	.word	0x0003023c

000bddb4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bddb4:	b508      	push	{r3, lr}
   bddb6:	4b02      	ldr	r3, [pc, #8]	; (bddc0 <hal_usart_available+0xc>)
   bddb8:	681b      	ldr	r3, [r3, #0]
   bddba:	691b      	ldr	r3, [r3, #16]
   bddbc:	9301      	str	r3, [sp, #4]
   bddbe:	bd08      	pop	{r3, pc}
   bddc0:	0003023c 	.word	0x0003023c

000bddc4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bddc4:	b508      	push	{r3, lr}
   bddc6:	4b02      	ldr	r3, [pc, #8]	; (bddd0 <hal_usart_read+0xc>)
   bddc8:	681b      	ldr	r3, [r3, #0]
   bddca:	695b      	ldr	r3, [r3, #20]
   bddcc:	9301      	str	r3, [sp, #4]
   bddce:	bd08      	pop	{r3, pc}
   bddd0:	0003023c 	.word	0x0003023c

000bddd4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bddd4:	b508      	push	{r3, lr}
   bddd6:	4b02      	ldr	r3, [pc, #8]	; (bdde0 <hal_usart_peek+0xc>)
   bddd8:	681b      	ldr	r3, [r3, #0]
   bddda:	699b      	ldr	r3, [r3, #24]
   bdddc:	9301      	str	r3, [sp, #4]
   bddde:	bd08      	pop	{r3, pc}
   bdde0:	0003023c 	.word	0x0003023c

000bdde4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bdde4:	b508      	push	{r3, lr}
   bdde6:	4b02      	ldr	r3, [pc, #8]	; (bddf0 <hal_usart_flush+0xc>)
   bdde8:	681b      	ldr	r3, [r3, #0]
   bddea:	69db      	ldr	r3, [r3, #28]
   bddec:	9301      	str	r3, [sp, #4]
   bddee:	bd08      	pop	{r3, pc}
   bddf0:	0003023c 	.word	0x0003023c

000bddf4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bddf4:	b508      	push	{r3, lr}
   bddf6:	4b02      	ldr	r3, [pc, #8]	; (bde00 <hal_usart_is_enabled+0xc>)
   bddf8:	681b      	ldr	r3, [r3, #0]
   bddfa:	6a1b      	ldr	r3, [r3, #32]
   bddfc:	9301      	str	r3, [sp, #4]
   bddfe:	bd08      	pop	{r3, pc}
   bde00:	0003023c 	.word	0x0003023c

000bde04 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bde04:	b508      	push	{r3, lr}
   bde06:	4b02      	ldr	r3, [pc, #8]	; (bde10 <hal_usart_available_data_for_write+0xc>)
   bde08:	681b      	ldr	r3, [r3, #0]
   bde0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bde0c:	9301      	str	r3, [sp, #4]
   bde0e:	bd08      	pop	{r3, pc}
   bde10:	0003023c 	.word	0x0003023c

000bde14 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bde14:	b508      	push	{r3, lr}
   bde16:	4b02      	ldr	r3, [pc, #8]	; (bde20 <hal_usart_begin_config+0xc>)
   bde18:	681b      	ldr	r3, [r3, #0]
   bde1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde1c:	9301      	str	r3, [sp, #4]
   bde1e:	bd08      	pop	{r3, pc}
   bde20:	0003023c 	.word	0x0003023c

000bde24 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bde24:	b508      	push	{r3, lr}
   bde26:	4b02      	ldr	r3, [pc, #8]	; (bde30 <hal_usart_init_ex+0xc>)
   bde28:	681b      	ldr	r3, [r3, #0]
   bde2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bde2c:	9301      	str	r3, [sp, #4]
   bde2e:	bd08      	pop	{r3, pc}
   bde30:	0003023c 	.word	0x0003023c

000bde34 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bde34:	b508      	push	{r3, lr}
   bde36:	4b02      	ldr	r3, [pc, #8]	; (bde40 <HAL_USB_USART_Init+0xc>)
   bde38:	681b      	ldr	r3, [r3, #0]
   bde3a:	681b      	ldr	r3, [r3, #0]
   bde3c:	9301      	str	r3, [sp, #4]
   bde3e:	bd08      	pop	{r3, pc}
   bde40:	0003024c 	.word	0x0003024c

000bde44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bde44:	b508      	push	{r3, lr}
   bde46:	4b02      	ldr	r3, [pc, #8]	; (bde50 <HAL_USB_USART_Begin+0xc>)
   bde48:	681b      	ldr	r3, [r3, #0]
   bde4a:	685b      	ldr	r3, [r3, #4]
   bde4c:	9301      	str	r3, [sp, #4]
   bde4e:	bd08      	pop	{r3, pc}
   bde50:	0003024c 	.word	0x0003024c

000bde54 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bde54:	b508      	push	{r3, lr}
   bde56:	4b02      	ldr	r3, [pc, #8]	; (bde60 <HAL_USB_USART_End+0xc>)
   bde58:	681b      	ldr	r3, [r3, #0]
   bde5a:	689b      	ldr	r3, [r3, #8]
   bde5c:	9301      	str	r3, [sp, #4]
   bde5e:	bd08      	pop	{r3, pc}
   bde60:	0003024c 	.word	0x0003024c

000bde64 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bde64:	b508      	push	{r3, lr}
   bde66:	4b02      	ldr	r3, [pc, #8]	; (bde70 <HAL_USB_USART_Available_Data+0xc>)
   bde68:	681b      	ldr	r3, [r3, #0]
   bde6a:	691b      	ldr	r3, [r3, #16]
   bde6c:	9301      	str	r3, [sp, #4]
   bde6e:	bd08      	pop	{r3, pc}
   bde70:	0003024c 	.word	0x0003024c

000bde74 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bde74:	b508      	push	{r3, lr}
   bde76:	4b02      	ldr	r3, [pc, #8]	; (bde80 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bde78:	681b      	ldr	r3, [r3, #0]
   bde7a:	695b      	ldr	r3, [r3, #20]
   bde7c:	9301      	str	r3, [sp, #4]
   bde7e:	bd08      	pop	{r3, pc}
   bde80:	0003024c 	.word	0x0003024c

000bde84 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bde84:	b508      	push	{r3, lr}
   bde86:	4b02      	ldr	r3, [pc, #8]	; (bde90 <HAL_USB_USART_Receive_Data+0xc>)
   bde88:	681b      	ldr	r3, [r3, #0]
   bde8a:	699b      	ldr	r3, [r3, #24]
   bde8c:	9301      	str	r3, [sp, #4]
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	0003024c 	.word	0x0003024c

000bde94 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bde94:	b508      	push	{r3, lr}
   bde96:	4b02      	ldr	r3, [pc, #8]	; (bdea0 <HAL_USB_USART_Send_Data+0xc>)
   bde98:	681b      	ldr	r3, [r3, #0]
   bde9a:	69db      	ldr	r3, [r3, #28]
   bde9c:	9301      	str	r3, [sp, #4]
   bde9e:	bd08      	pop	{r3, pc}
   bdea0:	0003024c 	.word	0x0003024c

000bdea4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bdea4:	b508      	push	{r3, lr}
   bdea6:	4b02      	ldr	r3, [pc, #8]	; (bdeb0 <HAL_USB_USART_Flush_Data+0xc>)
   bdea8:	681b      	ldr	r3, [r3, #0]
   bdeaa:	6a1b      	ldr	r3, [r3, #32]
   bdeac:	9301      	str	r3, [sp, #4]
   bdeae:	bd08      	pop	{r3, pc}
   bdeb0:	0003024c 	.word	0x0003024c

000bdeb4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bdeb4:	b508      	push	{r3, lr}
   bdeb6:	4b02      	ldr	r3, [pc, #8]	; (bdec0 <panic_+0xc>)
   bdeb8:	681b      	ldr	r3, [r3, #0]
   bdeba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdebc:	9301      	str	r3, [sp, #4]
   bdebe:	bd08      	pop	{r3, pc}
   bdec0:	00030260 	.word	0x00030260

000bdec4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bdec4:	b508      	push	{r3, lr}
   bdec6:	4b02      	ldr	r3, [pc, #8]	; (bded0 <log_message+0xc>)
   bdec8:	681b      	ldr	r3, [r3, #0]
   bdeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdecc:	9301      	str	r3, [sp, #4]
   bdece:	bd08      	pop	{r3, pc}
   bded0:	00030260 	.word	0x00030260

000bded4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bded4:	b508      	push	{r3, lr}
   bded6:	4b02      	ldr	r3, [pc, #8]	; (bdee0 <log_level_name+0xc>)
   bded8:	681b      	ldr	r3, [r3, #0]
   bdeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bdedc:	9301      	str	r3, [sp, #4]
   bdede:	bd08      	pop	{r3, pc}
   bdee0:	00030260 	.word	0x00030260

000bdee4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bdee4:	b508      	push	{r3, lr}
   bdee6:	4b02      	ldr	r3, [pc, #8]	; (bdef0 <log_set_callbacks+0xc>)
   bdee8:	681b      	ldr	r3, [r3, #0]
   bdeea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdeec:	9301      	str	r3, [sp, #4]
   bdeee:	bd08      	pop	{r3, pc}
   bdef0:	00030260 	.word	0x00030260

000bdef4 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bdef4:	b508      	push	{r3, lr}
   bdef6:	4b03      	ldr	r3, [pc, #12]	; (bdf04 <led_set_status_active+0x10>)
   bdef8:	681b      	ldr	r3, [r3, #0]
   bdefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bdefe:	9301      	str	r3, [sp, #4]
   bdf00:	bd08      	pop	{r3, pc}
   bdf02:	0000      	.short	0x0000
   bdf04:	00030260 	.word	0x00030260

000bdf08 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bdf08:	b508      	push	{r3, lr}
   bdf0a:	4b02      	ldr	r3, [pc, #8]	; (bdf14 <system_mode+0xc>)
   bdf0c:	681b      	ldr	r3, [r3, #0]
   bdf0e:	681b      	ldr	r3, [r3, #0]
   bdf10:	9301      	str	r3, [sp, #4]
   bdf12:	bd08      	pop	{r3, pc}
   bdf14:	00030220 	.word	0x00030220

000bdf18 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bdf18:	b508      	push	{r3, lr}
   bdf1a:	4b02      	ldr	r3, [pc, #8]	; (bdf24 <set_system_mode+0xc>)
   bdf1c:	681b      	ldr	r3, [r3, #0]
   bdf1e:	685b      	ldr	r3, [r3, #4]
   bdf20:	9301      	str	r3, [sp, #4]
   bdf22:	bd08      	pop	{r3, pc}
   bdf24:	00030220 	.word	0x00030220

000bdf28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bdf28:	b508      	push	{r3, lr}
   bdf2a:	4b02      	ldr	r3, [pc, #8]	; (bdf34 <system_delay_ms+0xc>)
   bdf2c:	681b      	ldr	r3, [r3, #0]
   bdf2e:	695b      	ldr	r3, [r3, #20]
   bdf30:	9301      	str	r3, [sp, #4]
   bdf32:	bd08      	pop	{r3, pc}
   bdf34:	00030220 	.word	0x00030220

000bdf38 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bdf38:	b508      	push	{r3, lr}
   bdf3a:	4b02      	ldr	r3, [pc, #8]	; (bdf44 <application_thread_current+0xc>)
   bdf3c:	681b      	ldr	r3, [r3, #0]
   bdf3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdf40:	9301      	str	r3, [sp, #4]
   bdf42:	bd08      	pop	{r3, pc}
   bdf44:	00030220 	.word	0x00030220

000bdf48 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bdf48:	b508      	push	{r3, lr}
   bdf4a:	4b02      	ldr	r3, [pc, #8]	; (bdf54 <application_thread_invoke+0xc>)
   bdf4c:	681b      	ldr	r3, [r3, #0]
   bdf4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdf50:	9301      	str	r3, [sp, #4]
   bdf52:	bd08      	pop	{r3, pc}
   bdf54:	00030220 	.word	0x00030220

000bdf58 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bdf58:	b508      	push	{r3, lr}
   bdf5a:	4b02      	ldr	r3, [pc, #8]	; (bdf64 <system_thread_get_state+0xc>)
   bdf5c:	681b      	ldr	r3, [r3, #0]
   bdf5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdf60:	9301      	str	r3, [sp, #4]
   bdf62:	bd08      	pop	{r3, pc}
   bdf64:	00030220 	.word	0x00030220

000bdf68 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bdf68:	b508      	push	{r3, lr}
   bdf6a:	4b02      	ldr	r3, [pc, #8]	; (bdf74 <led_pattern_period+0xc>)
   bdf6c:	681b      	ldr	r3, [r3, #0]
   bdf6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bdf70:	9301      	str	r3, [sp, #4]
   bdf72:	bd08      	pop	{r3, pc}
   bdf74:	00030220 	.word	0x00030220

000bdf78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bdf78:	b508      	push	{r3, lr}
   bdf7a:	4b03      	ldr	r3, [pc, #12]	; (bdf88 <system_ctrl_set_app_request_handler+0x10>)
   bdf7c:	681b      	ldr	r3, [r3, #0]
   bdf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bdf82:	9301      	str	r3, [sp, #4]
   bdf84:	bd08      	pop	{r3, pc}
   bdf86:	0000      	.short	0x0000
   bdf88:	00030220 	.word	0x00030220

000bdf8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bdf8c:	b508      	push	{r3, lr}
   bdf8e:	4b03      	ldr	r3, [pc, #12]	; (bdf9c <system_ctrl_set_result+0x10>)
   bdf90:	681b      	ldr	r3, [r3, #0]
   bdf92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bdf96:	9301      	str	r3, [sp, #4]
   bdf98:	bd08      	pop	{r3, pc}
   bdf9a:	0000      	.short	0x0000
   bdf9c:	00030220 	.word	0x00030220

000bdfa0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bdfa0:	b508      	push	{r3, lr}
   bdfa2:	4b02      	ldr	r3, [pc, #8]	; (bdfac <spark_function+0xc>)
   bdfa4:	681b      	ldr	r3, [r3, #0]
   bdfa6:	685b      	ldr	r3, [r3, #4]
   bdfa8:	9301      	str	r3, [sp, #4]
   bdfaa:	bd08      	pop	{r3, pc}
   bdfac:	00030244 	.word	0x00030244

000bdfb0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bdfb0:	b508      	push	{r3, lr}
   bdfb2:	4b02      	ldr	r3, [pc, #8]	; (bdfbc <spark_process+0xc>)
   bdfb4:	681b      	ldr	r3, [r3, #0]
   bdfb6:	689b      	ldr	r3, [r3, #8]
   bdfb8:	9301      	str	r3, [sp, #4]
   bdfba:	bd08      	pop	{r3, pc}
   bdfbc:	00030244 	.word	0x00030244

000bdfc0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bdfc0:	b508      	push	{r3, lr}
   bdfc2:	4b02      	ldr	r3, [pc, #8]	; (bdfcc <spark_cloud_flag_connected+0xc>)
   bdfc4:	681b      	ldr	r3, [r3, #0]
   bdfc6:	695b      	ldr	r3, [r3, #20]
   bdfc8:	9301      	str	r3, [sp, #4]
   bdfca:	bd08      	pop	{r3, pc}
   bdfcc:	00030244 	.word	0x00030244

000bdfd0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bdfd0:	b508      	push	{r3, lr}
   bdfd2:	4b02      	ldr	r3, [pc, #8]	; (bdfdc <spark_send_event+0xc>)
   bdfd4:	681b      	ldr	r3, [r3, #0]
   bdfd6:	6a1b      	ldr	r3, [r3, #32]
   bdfd8:	9301      	str	r3, [sp, #4]
   bdfda:	bd08      	pop	{r3, pc}
   bdfdc:	00030244 	.word	0x00030244

000bdfe0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bdfe0:	b508      	push	{r3, lr}
   bdfe2:	4b02      	ldr	r3, [pc, #8]	; (bdfec <spark_subscribe+0xc>)
   bdfe4:	681b      	ldr	r3, [r3, #0]
   bdfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdfe8:	9301      	str	r3, [sp, #4]
   bdfea:	bd08      	pop	{r3, pc}
   bdfec:	00030244 	.word	0x00030244

000bdff0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bdff0:	b508      	push	{r3, lr}
   bdff2:	4b02      	ldr	r3, [pc, #8]	; (bdffc <spark_sync_time_pending+0xc>)
   bdff4:	681b      	ldr	r3, [r3, #0]
   bdff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdff8:	9301      	str	r3, [sp, #4]
   bdffa:	bd08      	pop	{r3, pc}
   bdffc:	00030244 	.word	0x00030244

000be000 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be000:	b508      	push	{r3, lr}
   be002:	4b02      	ldr	r3, [pc, #8]	; (be00c <spark_set_random_seed_from_cloud_handler+0xc>)
   be004:	681b      	ldr	r3, [r3, #0]
   be006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be008:	9301      	str	r3, [sp, #4]
   be00a:	bd08      	pop	{r3, pc}
   be00c:	00030244 	.word	0x00030244

000be010 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be010:	b508      	push	{r3, lr}
   be012:	4b02      	ldr	r3, [pc, #8]	; (be01c <network_connect+0xc>)
   be014:	681b      	ldr	r3, [r3, #0]
   be016:	685b      	ldr	r3, [r3, #4]
   be018:	9301      	str	r3, [sp, #4]
   be01a:	bd08      	pop	{r3, pc}
   be01c:	00030240 	.word	0x00030240

000be020 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be020:	b508      	push	{r3, lr}
   be022:	4b02      	ldr	r3, [pc, #8]	; (be02c <network_connecting+0xc>)
   be024:	681b      	ldr	r3, [r3, #0]
   be026:	689b      	ldr	r3, [r3, #8]
   be028:	9301      	str	r3, [sp, #4]
   be02a:	bd08      	pop	{r3, pc}
   be02c:	00030240 	.word	0x00030240

000be030 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be030:	b508      	push	{r3, lr}
   be032:	4b02      	ldr	r3, [pc, #8]	; (be03c <network_disconnect+0xc>)
   be034:	681b      	ldr	r3, [r3, #0]
   be036:	68db      	ldr	r3, [r3, #12]
   be038:	9301      	str	r3, [sp, #4]
   be03a:	bd08      	pop	{r3, pc}
   be03c:	00030240 	.word	0x00030240

000be040 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be040:	b508      	push	{r3, lr}
   be042:	4b02      	ldr	r3, [pc, #8]	; (be04c <network_ready+0xc>)
   be044:	681b      	ldr	r3, [r3, #0]
   be046:	691b      	ldr	r3, [r3, #16]
   be048:	9301      	str	r3, [sp, #4]
   be04a:	bd08      	pop	{r3, pc}
   be04c:	00030240 	.word	0x00030240

000be050 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be050:	b508      	push	{r3, lr}
   be052:	4b02      	ldr	r3, [pc, #8]	; (be05c <network_on+0xc>)
   be054:	681b      	ldr	r3, [r3, #0]
   be056:	695b      	ldr	r3, [r3, #20]
   be058:	9301      	str	r3, [sp, #4]
   be05a:	bd08      	pop	{r3, pc}
   be05c:	00030240 	.word	0x00030240

000be060 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be060:	b508      	push	{r3, lr}
   be062:	4b02      	ldr	r3, [pc, #8]	; (be06c <network_off+0xc>)
   be064:	681b      	ldr	r3, [r3, #0]
   be066:	699b      	ldr	r3, [r3, #24]
   be068:	9301      	str	r3, [sp, #4]
   be06a:	bd08      	pop	{r3, pc}
   be06c:	00030240 	.word	0x00030240

000be070 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be070:	b508      	push	{r3, lr}
   be072:	4b02      	ldr	r3, [pc, #8]	; (be07c <network_listen+0xc>)
   be074:	681b      	ldr	r3, [r3, #0]
   be076:	69db      	ldr	r3, [r3, #28]
   be078:	9301      	str	r3, [sp, #4]
   be07a:	bd08      	pop	{r3, pc}
   be07c:	00030240 	.word	0x00030240

000be080 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be080:	b508      	push	{r3, lr}
   be082:	4b02      	ldr	r3, [pc, #8]	; (be08c <network_listening+0xc>)
   be084:	681b      	ldr	r3, [r3, #0]
   be086:	6a1b      	ldr	r3, [r3, #32]
   be088:	9301      	str	r3, [sp, #4]
   be08a:	bd08      	pop	{r3, pc}
   be08c:	00030240 	.word	0x00030240

000be090 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be090:	b508      	push	{r3, lr}
   be092:	4b02      	ldr	r3, [pc, #8]	; (be09c <network_set_listen_timeout+0xc>)
   be094:	681b      	ldr	r3, [r3, #0]
   be096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be098:	9301      	str	r3, [sp, #4]
   be09a:	bd08      	pop	{r3, pc}
   be09c:	00030240 	.word	0x00030240

000be0a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be0a0:	b508      	push	{r3, lr}
   be0a2:	4b02      	ldr	r3, [pc, #8]	; (be0ac <network_get_listen_timeout+0xc>)
   be0a4:	681b      	ldr	r3, [r3, #0]
   be0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be0a8:	9301      	str	r3, [sp, #4]
   be0aa:	bd08      	pop	{r3, pc}
   be0ac:	00030240 	.word	0x00030240

000be0b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be0b0:	b508      	push	{r3, lr}
   be0b2:	4b02      	ldr	r3, [pc, #8]	; (be0bc <network_is_on+0xc>)
   be0b4:	681b      	ldr	r3, [r3, #0]
   be0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be0b8:	9301      	str	r3, [sp, #4]
   be0ba:	bd08      	pop	{r3, pc}
   be0bc:	00030240 	.word	0x00030240

000be0c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be0c0:	b508      	push	{r3, lr}
   be0c2:	4b02      	ldr	r3, [pc, #8]	; (be0cc <network_is_off+0xc>)
   be0c4:	681b      	ldr	r3, [r3, #0]
   be0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be0c8:	9301      	str	r3, [sp, #4]
   be0ca:	bd08      	pop	{r3, pc}
   be0cc:	00030240 	.word	0x00030240

000be0d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be0d0:	b508      	push	{r3, lr}
   be0d2:	4b02      	ldr	r3, [pc, #8]	; (be0dc <malloc+0xc>)
   be0d4:	681b      	ldr	r3, [r3, #0]
   be0d6:	681b      	ldr	r3, [r3, #0]
   be0d8:	9301      	str	r3, [sp, #4]
   be0da:	bd08      	pop	{r3, pc}
   be0dc:	0003021c 	.word	0x0003021c

000be0e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be0e0:	b508      	push	{r3, lr}
   be0e2:	4b02      	ldr	r3, [pc, #8]	; (be0ec <free+0xc>)
   be0e4:	681b      	ldr	r3, [r3, #0]
   be0e6:	685b      	ldr	r3, [r3, #4]
   be0e8:	9301      	str	r3, [sp, #4]
   be0ea:	bd08      	pop	{r3, pc}
   be0ec:	0003021c 	.word	0x0003021c

000be0f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be0f0:	b508      	push	{r3, lr}
   be0f2:	4b02      	ldr	r3, [pc, #8]	; (be0fc <realloc+0xc>)
   be0f4:	681b      	ldr	r3, [r3, #0]
   be0f6:	689b      	ldr	r3, [r3, #8]
   be0f8:	9301      	str	r3, [sp, #4]
   be0fa:	bd08      	pop	{r3, pc}
   be0fc:	0003021c 	.word	0x0003021c

000be100 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be100:	b508      	push	{r3, lr}
   be102:	4b02      	ldr	r3, [pc, #8]	; (be10c <sprintf+0xc>)
   be104:	681b      	ldr	r3, [r3, #0]
   be106:	68db      	ldr	r3, [r3, #12]
   be108:	9301      	str	r3, [sp, #4]
   be10a:	bd08      	pop	{r3, pc}
   be10c:	0003021c 	.word	0x0003021c

000be110 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be110:	b508      	push	{r3, lr}
   be112:	4b02      	ldr	r3, [pc, #8]	; (be11c <sscanf+0xc>)
   be114:	681b      	ldr	r3, [r3, #0]
   be116:	695b      	ldr	r3, [r3, #20]
   be118:	9301      	str	r3, [sp, #4]
   be11a:	bd08      	pop	{r3, pc}
   be11c:	0003021c 	.word	0x0003021c

000be120 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be120:	b508      	push	{r3, lr}
   be122:	4b02      	ldr	r3, [pc, #8]	; (be12c <snprintf+0xc>)
   be124:	681b      	ldr	r3, [r3, #0]
   be126:	69db      	ldr	r3, [r3, #28]
   be128:	9301      	str	r3, [sp, #4]
   be12a:	bd08      	pop	{r3, pc}
   be12c:	0003021c 	.word	0x0003021c

000be130 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be130:	b508      	push	{r3, lr}
   be132:	4b02      	ldr	r3, [pc, #8]	; (be13c <vsnprintf+0xc>)
   be134:	681b      	ldr	r3, [r3, #0]
   be136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be138:	9301      	str	r3, [sp, #4]
   be13a:	bd08      	pop	{r3, pc}
   be13c:	0003021c 	.word	0x0003021c

000be140 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be140:	b508      	push	{r3, lr}
   be142:	4b02      	ldr	r3, [pc, #8]	; (be14c <abort+0xc>)
   be144:	681b      	ldr	r3, [r3, #0]
   be146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be148:	9301      	str	r3, [sp, #4]
   be14a:	bd08      	pop	{r3, pc}
   be14c:	0003021c 	.word	0x0003021c

000be150 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be150:	b508      	push	{r3, lr}
   be152:	4b02      	ldr	r3, [pc, #8]	; (be15c <_malloc_r+0xc>)
   be154:	681b      	ldr	r3, [r3, #0]
   be156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be158:	9301      	str	r3, [sp, #4]
   be15a:	bd08      	pop	{r3, pc}
   be15c:	0003021c 	.word	0x0003021c

000be160 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be160:	b508      	push	{r3, lr}
   be162:	4b02      	ldr	r3, [pc, #8]	; (be16c <__errno+0xc>)
   be164:	681b      	ldr	r3, [r3, #0]
   be166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be168:	9301      	str	r3, [sp, #4]
   be16a:	bd08      	pop	{r3, pc}
   be16c:	0003021c 	.word	0x0003021c

000be170 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be170:	b508      	push	{r3, lr}
   be172:	4b02      	ldr	r3, [pc, #8]	; (be17c <__assert_func+0xc>)
   be174:	681b      	ldr	r3, [r3, #0]
   be176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be178:	9301      	str	r3, [sp, #4]
   be17a:	bd08      	pop	{r3, pc}
   be17c:	0003021c 	.word	0x0003021c

000be180 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be180:	b508      	push	{r3, lr}
   be182:	4b02      	ldr	r3, [pc, #8]	; (be18c <newlib_impure_ptr_callback+0xc>)
   be184:	681b      	ldr	r3, [r3, #0]
   be186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be188:	9301      	str	r3, [sp, #4]
   be18a:	bd08      	pop	{r3, pc}
   be18c:	0003021c 	.word	0x0003021c

000be190 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be190:	b508      	push	{r3, lr}
   be192:	4b02      	ldr	r3, [pc, #8]	; (be19c <localtime_r+0xc>)
   be194:	681b      	ldr	r3, [r3, #0]
   be196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be198:	9301      	str	r3, [sp, #4]
   be19a:	bd08      	pop	{r3, pc}
   be19c:	0003021c 	.word	0x0003021c

000be1a0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   be1a0:	428a      	cmp	r2, r1
{
   be1a2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   be1a4:	d007      	beq.n	be1b6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   be1a6:	1a44      	subs	r4, r0, r1
   be1a8:	9802      	ldr	r0, [sp, #8]
   be1aa:	1ac0      	subs	r0, r0, r3
   be1ac:	4344      	muls	r4, r0
   be1ae:	1a50      	subs	r0, r2, r1
   be1b0:	fb94 f0f0 	sdiv	r0, r4, r0
   be1b4:	4418      	add	r0, r3
}
   be1b6:	bd10      	pop	{r4, pc}

000be1b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   be1b8:	2100      	movs	r1, #0
   be1ba:	f7ff beb5 	b.w	bdf28 <system_delay_ms>

000be1be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   be1be:	b510      	push	{r4, lr}
      if (_M_empty())
   be1c0:	6883      	ldr	r3, [r0, #8]
   be1c2:	4604      	mov	r4, r0
   be1c4:	b90b      	cbnz	r3, be1ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   be1c6:	f003 fed7 	bl	c1f78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be1ca:	68c3      	ldr	r3, [r0, #12]
   be1cc:	4798      	blx	r3
      if (_M_manager)
   be1ce:	68a3      	ldr	r3, [r4, #8]
   be1d0:	b11b      	cbz	r3, be1da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   be1d2:	2203      	movs	r2, #3
   be1d4:	4621      	mov	r1, r4
   be1d6:	4620      	mov	r0, r4
   be1d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   be1da:	4620      	mov	r0, r4
   be1dc:	2110      	movs	r1, #16
}
   be1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   be1e2:	f7f5 bf5e 	b.w	b40a2 <_ZdlPvj>

000be1e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be1e6:	4770      	bx	lr

000be1e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be1e8:	4770      	bx	lr

000be1ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be1ea:	4770      	bx	lr

000be1ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be1ec:	4770      	bx	lr
	...

000be1f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be1f0:	4b06      	ldr	r3, [pc, #24]	; (be20c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be1f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be1f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be1f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   be1fa:	d005      	beq.n	be208 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be1fc:	4608      	mov	r0, r1
   be1fe:	f003 febf 	bl	c1f80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be202:	2800      	cmp	r0, #0
   be204:	bf08      	it	eq
   be206:	2400      	moveq	r4, #0
      }
   be208:	4620      	mov	r0, r4
   be20a:	bd10      	pop	{r4, pc}
   be20c:	000c7c00 	.word	0x000c7c00

000be210 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be210:	4b06      	ldr	r3, [pc, #24]	; (be22c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be212:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be214:	b510      	push	{r4, lr}
   be216:	f100 040c 	add.w	r4, r0, #12
	    ||
   be21a:	d005      	beq.n	be228 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be21c:	4608      	mov	r0, r1
   be21e:	f003 feaf 	bl	c1f80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be222:	2800      	cmp	r0, #0
   be224:	bf08      	it	eq
   be226:	2400      	moveq	r4, #0
      }
   be228:	4620      	mov	r0, r4
   be22a:	bd10      	pop	{r4, pc}
   be22c:	000c7c00 	.word	0x000c7c00

000be230 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be230:	4b06      	ldr	r3, [pc, #24]	; (be24c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be232:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be234:	b510      	push	{r4, lr}
   be236:	f100 040c 	add.w	r4, r0, #12
	    ||
   be23a:	d005      	beq.n	be248 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be23c:	4608      	mov	r0, r1
   be23e:	f003 fe9f 	bl	c1f80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be242:	2800      	cmp	r0, #0
   be244:	bf08      	it	eq
   be246:	2400      	moveq	r4, #0
      }
   be248:	4620      	mov	r0, r4
   be24a:	bd10      	pop	{r4, pc}
   be24c:	000c7c00 	.word	0x000c7c00

000be250 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be250:	b510      	push	{r4, lr}
   be252:	2168      	movs	r1, #104	; 0x68
   be254:	4604      	mov	r4, r0
   be256:	f7f5 ff24 	bl	b40a2 <_ZdlPvj>
   be25a:	4620      	mov	r0, r4
   be25c:	bd10      	pop	{r4, pc}

000be25e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be25e:	b510      	push	{r4, lr}
   be260:	2128      	movs	r1, #40	; 0x28
   be262:	4604      	mov	r4, r0
   be264:	f7f5 ff1d 	bl	b40a2 <_ZdlPvj>
   be268:	4620      	mov	r0, r4
   be26a:	bd10      	pop	{r4, pc}

000be26c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be26c:	b510      	push	{r4, lr}
   be26e:	2130      	movs	r1, #48	; 0x30
   be270:	4604      	mov	r4, r0
   be272:	f7f5 ff16 	bl	b40a2 <_ZdlPvj>
   be276:	4620      	mov	r0, r4
   be278:	bd10      	pop	{r4, pc}

000be27a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be27a:	2168      	movs	r1, #104	; 0x68
   be27c:	f7f5 bf11 	b.w	b40a2 <_ZdlPvj>

000be280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be280:	2128      	movs	r1, #40	; 0x28
   be282:	f7f5 bf0e 	b.w	b40a2 <_ZdlPvj>

000be286 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be286:	2130      	movs	r1, #48	; 0x30
   be288:	f7f5 bf0b 	b.w	b40a2 <_ZdlPvj>

000be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be28e:	2500      	movs	r5, #0
   be290:	1cec      	adds	r4, r5, #3
   be292:	428c      	cmp	r4, r1
   be294:	d80d      	bhi.n	be2b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be296:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be298:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be29a:	5d87      	ldrb	r7, [r0, r6]
   be29c:	4297      	cmp	r7, r2
   be29e:	d105      	bne.n	be2ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be2a0:	4426      	add	r6, r4
   be2a2:	42b1      	cmp	r1, r6
   be2a4:	d305      	bcc.n	be2b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be2a6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be2a8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be2ac:	3401      	adds	r4, #1
   be2ae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be2b0:	e7ee      	b.n	be290 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be2b2:	2000      	movs	r0, #0
   be2b4:	e7f9      	b.n	be2aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be2b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be2b8:	4a02      	ldr	r2, [pc, #8]	; (be2c4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be2ba:	4903      	ldr	r1, [pc, #12]	; (be2c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be2bc:	200a      	movs	r0, #10
   be2be:	f7ff bdf9 	b.w	bdeb4 <panic_>
   be2c2:	bf00      	nop
   be2c4:	000bdaf5 	.word	0x000bdaf5
   be2c8:	000c7a5d 	.word	0x000c7a5d

000be2cc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be2cc:	b430      	push	{r4, r5}
   be2ce:	460d      	mov	r5, r1
   be2d0:	4611      	mov	r1, r2
   be2d2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be2d4:	6803      	ldr	r3, [r0, #0]
   be2d6:	6809      	ldr	r1, [r1, #0]
   be2d8:	6828      	ldr	r0, [r5, #0]
   be2da:	e9d3 4300 	ldrd	r4, r3, [r3]
   be2de:	46a4      	mov	ip, r4
      }
   be2e0:	bc30      	pop	{r4, r5}
   be2e2:	4760      	bx	ip

000be2e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be2e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be2e6:	b538      	push	{r3, r4, r5, lr}
   be2e8:	4604      	mov	r4, r0
	switch (__op)
   be2ea:	d102      	bne.n	be2f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be2ec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be2ee:	6023      	str	r3, [r4, #0]
	}
   be2f0:	e003      	b.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be2f2:	2a02      	cmp	r2, #2
   be2f4:	d003      	beq.n	be2fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be2f6:	2a03      	cmp	r2, #3
   be2f8:	d00d      	beq.n	be316 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be2fa:	2000      	movs	r0, #0
   be2fc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be2fe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be300:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be302:	f7f5 fec8 	bl	b4096 <_Znwj>
   be306:	4603      	mov	r3, r0
   be308:	2800      	cmp	r0, #0
   be30a:	d0f0      	beq.n	be2ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be30c:	e895 0003 	ldmia.w	r5, {r0, r1}
   be310:	e883 0003 	stmia.w	r3, {r0, r1}
   be314:	e7eb      	b.n	be2ee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be316:	6800      	ldr	r0, [r0, #0]
   be318:	2800      	cmp	r0, #0
   be31a:	d0ee      	beq.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be31c:	2108      	movs	r1, #8
   be31e:	f7f5 fec0 	bl	b40a2 <_ZdlPvj>
   be322:	e7ea      	b.n	be2fa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be324 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be324:	b510      	push	{r4, lr}
   be326:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be328:	3058      	adds	r0, #88	; 0x58
   be32a:	f7f6 f8a3 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be32e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be336:	f003 b9cb 	b.w	c16d0 <_ZN6StringD1Ev>

000be33a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be33a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be33c:	6843      	ldr	r3, [r0, #4]
   be33e:	3b01      	subs	r3, #1
    {
   be340:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be342:	6043      	str	r3, [r0, #4]
   be344:	b963      	cbnz	r3, be360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be346:	6803      	ldr	r3, [r0, #0]
   be348:	689b      	ldr	r3, [r3, #8]
   be34a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be34c:	68a3      	ldr	r3, [r4, #8]
   be34e:	3b01      	subs	r3, #1
   be350:	60a3      	str	r3, [r4, #8]
   be352:	b92b      	cbnz	r3, be360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be354:	6823      	ldr	r3, [r4, #0]
   be356:	4620      	mov	r0, r4
   be358:	68db      	ldr	r3, [r3, #12]
    }
   be35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be35e:	4718      	bx	r3
    }
   be360:	bd10      	pop	{r4, pc}

000be362 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be362:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be366:	b2da      	uxtb	r2, r3
   be368:	2a09      	cmp	r2, #9
   be36a:	d801      	bhi.n	be370 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be36c:	4618      	mov	r0, r3
   be36e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be370:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be374:	2b05      	cmp	r3, #5
   be376:	d801      	bhi.n	be37c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be378:	3857      	subs	r0, #87	; 0x57
   be37a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be37c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be380:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be382:	bf94      	ite	ls
   be384:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be386:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   be38a:	4770      	bx	lr

000be38c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be38c:	b510      	push	{r4, lr}
            locked_(false) {
   be38e:	2300      	movs	r3, #0
   be390:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be392:	4b04      	ldr	r3, [pc, #16]	; (be3a4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be394:	4604      	mov	r4, r0
   be396:	6818      	ldr	r0, [r3, #0]
   be398:	f7ff fb8c 	bl	bdab4 <os_mutex_recursive_lock>
        locked_ = true;
   be39c:	2301      	movs	r3, #1
   be39e:	7023      	strb	r3, [r4, #0]
    }
   be3a0:	4620      	mov	r0, r4
   be3a2:	bd10      	pop	{r4, pc}
   be3a4:	2003e624 	.word	0x2003e624

000be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be3a8:	b510      	push	{r4, lr}
        if (locked_) {
   be3aa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be3ac:	4604      	mov	r4, r0
        if (locked_) {
   be3ae:	b11b      	cbz	r3, be3b8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be3b0:	4b02      	ldr	r3, [pc, #8]	; (be3bc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be3b2:	6818      	ldr	r0, [r3, #0]
   be3b4:	f7ff fb86 	bl	bdac4 <os_mutex_recursive_unlock>
    }
   be3b8:	4620      	mov	r0, r4
   be3ba:	bd10      	pop	{r4, pc}
   be3bc:	2003e624 	.word	0x2003e624

000be3c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be3c0:	b082      	sub	sp, #8
   be3c2:	4603      	mov	r3, r0
    address_ = addr;
   be3c4:	6808      	ldr	r0, [r1, #0]
   be3c6:	6849      	ldr	r1, [r1, #4]
   be3c8:	466a      	mov	r2, sp
   be3ca:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be3cc:	466a      	mov	r2, sp
   be3ce:	ca03      	ldmia	r2!, {r0, r1}
   be3d0:	6018      	str	r0, [r3, #0]
}
   be3d2:	4618      	mov	r0, r3
    address_ = addr.address_;
   be3d4:	6059      	str	r1, [r3, #4]
}
   be3d6:	b002      	add	sp, #8
   be3d8:	4770      	bx	lr

000be3da <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be3da:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be3dc:	7982      	ldrb	r2, [r0, #6]
   be3de:	798b      	ldrb	r3, [r1, #6]
   be3e0:	429a      	cmp	r2, r3
   be3e2:	d106      	bne.n	be3f2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be3e4:	2206      	movs	r2, #6
   be3e6:	f005 ffb7 	bl	c4358 <memcmp>
   be3ea:	fab0 f080 	clz	r0, r0
   be3ee:	0940      	lsrs	r0, r0, #5
}
   be3f0:	bd08      	pop	{r3, pc}
    return false;
   be3f2:	2000      	movs	r0, #0
   be3f4:	e7fc      	b.n	be3f0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be3f6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be3f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be3fa:	6003      	str	r3, [r0, #0]
   be3fc:	8083      	strh	r3, [r0, #4]
}
   be3fe:	2000      	movs	r0, #0
   be400:	4770      	bx	lr

000be402 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be402:	b508      	push	{r3, lr}
   be404:	4602      	mov	r2, r0
        : address_{} {
   be406:	2100      	movs	r1, #0
   be408:	6001      	str	r1, [r0, #0]
   be40a:	6041      	str	r1, [r0, #4]
    clear();
   be40c:	f7ff fff3 	bl	be3f6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be410:	7191      	strb	r1, [r2, #6]
}
   be412:	4610      	mov	r0, r2
   be414:	bd08      	pop	{r3, pc}
	...

000be418 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be418:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be41a:	2301      	movs	r3, #1
   be41c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be41e:	4b05      	ldr	r3, [pc, #20]	; (be434 <_ZN8particle7BleUuidC1Ev+0x1c>)
   be420:	4602      	mov	r2, r0
   be422:	f103 0110 	add.w	r1, r3, #16
   be426:	f853 4b04 	ldr.w	r4, [r3], #4
   be42a:	f842 4b04 	str.w	r4, [r2], #4
   be42e:	428b      	cmp	r3, r1
   be430:	d1f9      	bne.n	be426 <_ZN8particle7BleUuidC1Ev+0xe>
}
   be432:	bd10      	pop	{r4, pc}
   be434:	000c7c0e 	.word	0x000c7c0e

000be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be438:	b510      	push	{r4, lr}
    if (uuid128) {
   be43a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be43c:	4604      	mov	r4, r0
    if (uuid128) {
   be43e:	b1b1      	cbz	r1, be46e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be440:	2a01      	cmp	r2, #1
   be442:	f101 0210 	add.w	r2, r1, #16
   be446:	d10a      	bne.n	be45e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be448:	4601      	mov	r1, r0
   be44a:	f853 0b04 	ldr.w	r0, [r3], #4
   be44e:	f841 0b04 	str.w	r0, [r1], #4
   be452:	4293      	cmp	r3, r2
   be454:	d1f9      	bne.n	be44a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be456:	2301      	movs	r3, #1
   be458:	6123      	str	r3, [r4, #16]
}
   be45a:	4620      	mov	r0, r4
   be45c:	bd10      	pop	{r4, pc}
   be45e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be460:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be464:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be468:	429a      	cmp	r2, r3
   be46a:	d1f9      	bne.n	be460 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be46c:	e7f3      	b.n	be456 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be46e:	2210      	movs	r2, #16
   be470:	f005 ffaa 	bl	c43c8 <memset>
   be474:	e7f1      	b.n	be45a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be476:	b538      	push	{r3, r4, r5, lr}
   be478:	4604      	mov	r4, r0
   be47a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be47c:	461a      	mov	r2, r3
   be47e:	f7ff ffdb 	bl	be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be482:	81a5      	strh	r5, [r4, #12]
}
   be484:	4620      	mov	r0, r4
   be486:	bd38      	pop	{r3, r4, r5, pc}

000be488 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be488:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be48a:	6902      	ldr	r2, [r0, #16]
   be48c:	b922      	cbnz	r2, be498 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be48e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be490:	3800      	subs	r0, #0
   be492:	bf18      	it	ne
   be494:	2001      	movne	r0, #1
}
   be496:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be498:	4902      	ldr	r1, [pc, #8]	; (be4a4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be49a:	2210      	movs	r2, #16
   be49c:	f005 ff5c 	bl	c4358 <memcmp>
   be4a0:	e7f6      	b.n	be490 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be4a2:	bf00      	nop
   be4a4:	000c7c2e 	.word	0x000c7c2e

000be4a8 <_ZNK8particle7BleUuid4typeEv>:
}
   be4a8:	6900      	ldr	r0, [r0, #16]
   be4aa:	4770      	bx	lr

000be4ac <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be4ac:	b538      	push	{r3, r4, r5, lr}
   be4ae:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be4b0:	2214      	movs	r2, #20
   be4b2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be4b4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be4b6:	f005 ff87 	bl	c43c8 <memset>
    if (type_ == BleUuidType::SHORT) {
   be4ba:	6923      	ldr	r3, [r4, #16]
   be4bc:	b91b      	cbnz	r3, be4c6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be4be:	89a3      	ldrh	r3, [r4, #12]
   be4c0:	802b      	strh	r3, [r5, #0]
}
   be4c2:	4628      	mov	r0, r5
   be4c4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be4c6:	2301      	movs	r3, #1
   be4c8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be4ca:	4621      	mov	r1, r4
   be4cc:	462b      	mov	r3, r5
   be4ce:	f104 0210 	add.w	r2, r4, #16
   be4d2:	f851 0b04 	ldr.w	r0, [r1], #4
   be4d6:	f843 0b04 	str.w	r0, [r3], #4
   be4da:	4291      	cmp	r1, r2
   be4dc:	d1f9      	bne.n	be4d2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be4de:	e7f0      	b.n	be4c2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be4e0 <_ZNK8particle7BleUuid7shortedEv>:
}
   be4e0:	8980      	ldrh	r0, [r0, #12]
   be4e2:	4770      	bx	lr

000be4e4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be4e4:	4770      	bx	lr

000be4e6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be4e6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be4e8:	6902      	ldr	r2, [r0, #16]
   be4ea:	690b      	ldr	r3, [r1, #16]
   be4ec:	429a      	cmp	r2, r3
   be4ee:	d106      	bne.n	be4fe <_ZNK8particle7BleUuideqERKS0_+0x18>
   be4f0:	2210      	movs	r2, #16
   be4f2:	f005 ff31 	bl	c4358 <memcmp>
   be4f6:	fab0 f080 	clz	r0, r0
   be4fa:	0940      	lsrs	r0, r0, #5
}
   be4fc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be4fe:	2000      	movs	r0, #0
   be500:	e7fc      	b.n	be4fc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be504 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be504:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be506:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be50a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be50c:	4b34      	ldr	r3, [pc, #208]	; (be5e0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be50e:	460c      	mov	r4, r1
   be510:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be512:	4602      	mov	r2, r0
   be514:	f103 0110 	add.w	r1, r3, #16
   be518:	f853 0b04 	ldr.w	r0, [r3], #4
   be51c:	f842 0b04 	str.w	r0, [r2], #4
   be520:	428b      	cmp	r3, r1
   be522:	d1f9      	bne.n	be518 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be524:	b344      	cbz	r4, be578 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be526:	2124      	movs	r1, #36	; 0x24
   be528:	4620      	mov	r0, r4
   be52a:	f006 f81a 	bl	c4562 <strnlen>
   be52e:	2804      	cmp	r0, #4
   be530:	f04f 0500 	mov.w	r5, #0
   be534:	d123      	bne.n	be57e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be536:	f8ad 5004 	strh.w	r5, [sp, #4]
   be53a:	af01      	add	r7, sp, #4
   be53c:	1ca5      	adds	r5, r4, #2
   be53e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be540:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be544:	f7ff ff0d 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be548:	f1b0 0800 	subs.w	r8, r0, #0
   be54c:	db12      	blt.n	be574 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be54e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be552:	f7ff ff06 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be556:	2800      	cmp	r0, #0
   be558:	db0c      	blt.n	be574 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be55a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be55c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be560:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be562:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be566:	d1eb      	bne.n	be540 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be568:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be56c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be56e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be572:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be574:	2300      	movs	r3, #0
   be576:	6133      	str	r3, [r6, #16]
}
   be578:	b002      	add	sp, #8
   be57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be57e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be582:	2124      	movs	r1, #36	; 0x24
   be584:	4620      	mov	r0, r4
   be586:	f005 ffec 	bl	c4562 <strnlen>
   be58a:	42a8      	cmp	r0, r5
   be58c:	d807      	bhi.n	be59e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be58e:	4642      	mov	r2, r8
   be590:	2100      	movs	r1, #0
   be592:	4630      	mov	r0, r6
}
   be594:	b002      	add	sp, #8
   be596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be59a:	f005 bf15 	b.w	c43c8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be59e:	f1b8 0f00 	cmp.w	r8, #0
   be5a2:	d0e9      	beq.n	be578 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be5a4:	5d60      	ldrb	r0, [r4, r5]
   be5a6:	f7ff fedc 	bl	be362 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be5aa:	0603      	lsls	r3, r0, #24
   be5ac:	d415      	bmi.n	be5da <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be5ae:	0100      	lsls	r0, r0, #4
   be5b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be5b4:	b2c7      	uxtb	r7, r0
   be5b6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be5ba:	2124      	movs	r1, #36	; 0x24
   be5bc:	4620      	mov	r0, r4
   be5be:	f005 ffd0 	bl	c4562 <strnlen>
   be5c2:	3501      	adds	r5, #1
   be5c4:	42a8      	cmp	r0, r5
   be5c6:	d908      	bls.n	be5da <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be5c8:	5d60      	ldrb	r0, [r4, r5]
   be5ca:	f7ff feca 	bl	be362 <_ZN8particle11hexToNibbleEc>
   be5ce:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be5d0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be5d2:	bfa4      	itt	ge
   be5d4:	4338      	orrge	r0, r7
   be5d6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be5da:	3501      	adds	r5, #1
   be5dc:	e7d1      	b.n	be582 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be5de:	bf00      	nop
   be5e0:	000c7c0e 	.word	0x000c7c0e

000be5e4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be5e4:	b513      	push	{r0, r1, r4, lr}
   be5e6:	4604      	mov	r4, r0
   be5e8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be5ea:	f7ff ff15 	bl	be418 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be5ee:	4620      	mov	r0, r4
   be5f0:	9901      	ldr	r1, [sp, #4]
   be5f2:	f7ff ff87 	bl	be504 <_ZN8particle7BleUuid9constructEPKc>
}
   be5f6:	4620      	mov	r0, r4
   be5f8:	b002      	add	sp, #8
   be5fa:	bd10      	pop	{r4, pc}

000be5fc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be5fc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be602:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be604:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be606:	8043      	strh	r3, [r0, #2]
   be608:	220e      	movs	r2, #14
   be60a:	4629      	mov	r1, r5
   be60c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be60e:	7105      	strb	r5, [r0, #4]
   be610:	3006      	adds	r0, #6
   be612:	f005 fed9 	bl	c43c8 <memset>
   be616:	f104 0014 	add.w	r0, r4, #20
   be61a:	f7ff fefd 	bl	be418 <_ZN8particle7BleUuidC1Ev>
   be61e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be622:	f7ff fef9 	bl	be418 <_ZN8particle7BleUuidC1Ev>
   be626:	4904      	ldr	r1, [pc, #16]	; (be638 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be628:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be62c:	f003 f89b 	bl	c1766 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be630:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be632:	4620      	mov	r0, r4
   be634:	bd38      	pop	{r3, r4, r5, pc}
   be636:	bf00      	nop
   be638:	000c7d73 	.word	0x000c7d73

000be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be63c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be63e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be642:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be646:	4293      	cmp	r3, r2
   be648:	4618      	mov	r0, r3
   be64a:	d006      	beq.n	be65a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be64c:	6804      	ldr	r4, [r0, #0]
   be64e:	8824      	ldrh	r4, [r4, #0]
   be650:	428c      	cmp	r4, r1
   be652:	f103 0308 	add.w	r3, r3, #8
   be656:	d1f6      	bne.n	be646 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be658:	bd10      	pop	{r4, pc}
        return nullptr;
   be65a:	2000      	movs	r0, #0
   be65c:	e7fc      	b.n	be658 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be660:	b5f0      	push	{r4, r5, r6, r7, lr}
   be662:	4606      	mov	r6, r0
   be664:	b085      	sub	sp, #20
   be666:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be668:	460d      	mov	r5, r1
   be66a:	2900      	cmp	r1, #0
   be66c:	d050      	beq.n	be710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be66e:	2a00      	cmp	r2, #0
   be670:	d04e      	beq.n	be710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be672:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be674:	7823      	ldrb	r3, [r4, #0]
   be676:	2af4      	cmp	r2, #244	; 0xf4
   be678:	bf28      	it	cs
   be67a:	22f4      	movcs	r2, #244	; 0xf4
   be67c:	b343      	cbz	r3, be6d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be67e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be680:	0798      	lsls	r0, r3, #30
   be682:	d509      	bpl.n	be698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be684:	89a0      	ldrh	r0, [r4, #12]
   be686:	9203      	str	r2, [sp, #12]
   be688:	2300      	movs	r3, #0
   be68a:	f7ff f98d 	bl	bd9a8 <hal_ble_gatt_server_set_characteristic_value>
   be68e:	2800      	cmp	r0, #0
   be690:	9a03      	ldr	r2, [sp, #12]
   be692:	da03      	bge.n	be69c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be694:	b005      	add	sp, #20
   be696:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be698:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be69c:	6834      	ldr	r4, [r6, #0]
   be69e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be6a0:	06d9      	lsls	r1, r3, #27
   be6a2:	d509      	bpl.n	be6b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be6a4:	2f01      	cmp	r7, #1
   be6a6:	d007      	beq.n	be6b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6a8:	89a0      	ldrh	r0, [r4, #12]
   be6aa:	2300      	movs	r3, #0
   be6ac:	4629      	mov	r1, r5
}
   be6ae:	b005      	add	sp, #20
   be6b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6b4:	f7ff b9aa 	b.w	bda0c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be6b8:	069b      	lsls	r3, r3, #26
   be6ba:	d5eb      	bpl.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be6bc:	2f02      	cmp	r7, #2
   be6be:	d0e9      	beq.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6c0:	89a0      	ldrh	r0, [r4, #12]
   be6c2:	2300      	movs	r3, #0
   be6c4:	4629      	mov	r1, r5
}
   be6c6:	b005      	add	sp, #20
   be6c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be6cc:	f7ff b9a8 	b.w	bda20 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be6d0:	8860      	ldrh	r0, [r4, #2]
   be6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be6d6:	4288      	cmp	r0, r1
   be6d8:	d01c      	beq.n	be714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be6da:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be6dc:	074e      	lsls	r6, r1, #29
   be6de:	d501      	bpl.n	be6e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be6e0:	2f01      	cmp	r7, #1
   be6e2:	d104      	bne.n	be6ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be6e4:	070b      	lsls	r3, r1, #28
   be6e6:	d409      	bmi.n	be6fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be6e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be6ec:	e7d2      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be6ee:	89a1      	ldrh	r1, [r4, #12]
   be6f0:	9300      	str	r3, [sp, #0]
   be6f2:	4613      	mov	r3, r2
   be6f4:	462a      	mov	r2, r5
   be6f6:	f7ff f96b 	bl	bd9d0 <hal_ble_gatt_client_write_without_response>
   be6fa:	e7cb      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be6fc:	2f02      	cmp	r7, #2
   be6fe:	d0f3      	beq.n	be6e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be700:	2300      	movs	r3, #0
   be702:	89a1      	ldrh	r1, [r4, #12]
   be704:	9300      	str	r3, [sp, #0]
   be706:	4613      	mov	r3, r2
   be708:	462a      	mov	r2, r5
   be70a:	f7ff f957 	bl	bd9bc <hal_ble_gatt_client_write_with_response>
   be70e:	e7c1      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be710:	4802      	ldr	r0, [pc, #8]	; (be71c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be712:	e7bf      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be714:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be718:	e7bc      	b.n	be694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be71a:	bf00      	nop
   be71c:	fffffef2 	.word	0xfffffef2

000be720 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be724:	2600      	movs	r6, #0
   be726:	6006      	str	r6, [r0, #0]
   be728:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be72a:	2028      	movs	r0, #40	; 0x28
   be72c:	460c      	mov	r4, r1
   be72e:	f7f5 fcb2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be732:	1e05      	subs	r5, r0, #0
   be734:	f105 080c 	add.w	r8, r5, #12
   be738:	d00f      	beq.n	be75a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be73a:	2301      	movs	r3, #1
   be73c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be740:	4b08      	ldr	r3, [pc, #32]	; (be764 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be742:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be744:	4640      	mov	r0, r8
   be746:	f7ff fe67 	bl	be418 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be74c:	622e      	str	r6, [r5, #32]
   be74e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be752:	4646      	mov	r6, r8
   be754:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be756:	6823      	ldr	r3, [r4, #0]
   be758:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be75a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be75e:	4638      	mov	r0, r7
   be760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be764:	000c7bd0 	.word	0x000c7bd0

000be768 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be768:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be76a:	2500      	movs	r5, #0
   be76c:	6005      	str	r5, [r0, #0]
   be76e:	4606      	mov	r6, r0
   be770:	2030      	movs	r0, #48	; 0x30
   be772:	f7f5 fc90 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be776:	4604      	mov	r4, r0
   be778:	b188      	cbz	r0, be79e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be77a:	2301      	movs	r3, #1
   be77c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be780:	4b09      	ldr	r3, [pc, #36]	; (be7a8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be782:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be784:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be788:	8183      	strh	r3, [r0, #12]
   be78a:	300e      	adds	r0, #14
   be78c:	f7ff fe39 	bl	be402 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be790:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be794:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be798:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be79c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be79e:	6074      	str	r4, [r6, #4]
   be7a0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   be7a2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be7a4:	4630      	mov	r0, r6
   be7a6:	bd70      	pop	{r4, r5, r6, pc}
   be7a8:	000c7bec 	.word	0x000c7bec

000be7ac <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   be7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be7ae:	460d      	mov	r5, r1
   be7b0:	4604      	mov	r4, r0
    WiringBleLock lk;
   be7b2:	a801      	add	r0, sp, #4
   be7b4:	f7ff fdea 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be7b8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   be7ba:	f8d2 3002 	ldr.w	r3, [r2, #2]
   be7be:	6023      	str	r3, [r4, #0]
   be7c0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   be7c4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   be7c6:	a801      	add	r0, sp, #4
   be7c8:	f7ff fdee 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   be7cc:	4620      	mov	r0, r4
   be7ce:	b003      	add	sp, #12
   be7d0:	bd30      	pop	{r4, r5, pc}

000be7d2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   be7d2:	b530      	push	{r4, r5, lr}
   be7d4:	4605      	mov	r5, r0
   be7d6:	b087      	sub	sp, #28
   be7d8:	460c      	mov	r4, r1
    WiringBleLock lk;
   be7da:	a801      	add	r0, sp, #4
   be7dc:	f7ff fdd6 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   be7e0:	682a      	ldr	r2, [r5, #0]
   be7e2:	6823      	ldr	r3, [r4, #0]
   be7e4:	8812      	ldrh	r2, [r2, #0]
   be7e6:	881b      	ldrh	r3, [r3, #0]
   be7e8:	429a      	cmp	r2, r3
   be7ea:	d10d      	bne.n	be808 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   be7ec:	4629      	mov	r1, r5
   be7ee:	a802      	add	r0, sp, #8
   be7f0:	f7ff ffdc 	bl	be7ac <_ZNK8particle13BlePeerDevice7addressEv>
   be7f4:	4621      	mov	r1, r4
   be7f6:	a804      	add	r0, sp, #16
   be7f8:	f7ff ffd8 	bl	be7ac <_ZNK8particle13BlePeerDevice7addressEv>
   be7fc:	a904      	add	r1, sp, #16
   be7fe:	a802      	add	r0, sp, #8
   be800:	f7ff fdeb 	bl	be3da <_ZNK8particle10BleAddresseqERKS0_>
   be804:	4604      	mov	r4, r0
   be806:	b900      	cbnz	r0, be80a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   be808:	2400      	movs	r4, #0
    WiringBleLock lk;
   be80a:	a801      	add	r0, sp, #4
   be80c:	f7ff fdcc 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   be810:	4620      	mov	r0, r4
   be812:	b007      	add	sp, #28
   be814:	bd30      	pop	{r4, r5, pc}
	...

000be818 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   be818:	b510      	push	{r4, lr}
   be81a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   be81c:	2064      	movs	r0, #100	; 0x64
   be81e:	f7f5 fc3a 	bl	b4096 <_Znwj>
   be822:	b168      	cbz	r0, be840 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   be824:	2300      	movs	r3, #0
   be826:	e9c0 3300 	strd	r3, r3, [r0]
   be82a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be832:	e9c0 3306 	strd	r3, r3, [r0, #24]
   be836:	6203      	str	r3, [r0, #32]
   be838:	62c3      	str	r3, [r0, #44]	; 0x2c
   be83a:	63c3      	str	r3, [r0, #60]	; 0x3c
   be83c:	64c3      	str	r3, [r0, #76]	; 0x4c
   be83e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   be840:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   be842:	b920      	cbnz	r0, be84e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   be844:	4a0a      	ldr	r2, [pc, #40]	; (be870 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be846:	490b      	ldr	r1, [pc, #44]	; (be874 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   be848:	200a      	movs	r0, #10
   be84a:	f7ff fb33 	bl	bdeb4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   be84e:	2000      	movs	r0, #0
   be850:	f7ff f86e 	bl	bd930 <hal_ble_stack_init>
   be854:	b120      	cbz	r0, be860 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   be856:	4a06      	ldr	r2, [pc, #24]	; (be870 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be858:	4907      	ldr	r1, [pc, #28]	; (be878 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   be85a:	200a      	movs	r0, #10
   be85c:	f7ff fb2a 	bl	bdeb4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   be860:	6821      	ldr	r1, [r4, #0]
   be862:	4806      	ldr	r0, [pc, #24]	; (be87c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   be864:	2200      	movs	r2, #0
   be866:	f7ff f8c7 	bl	bd9f8 <hal_ble_set_callback_on_periph_link_events>
}
   be86a:	4620      	mov	r0, r4
   be86c:	bd10      	pop	{r4, pc}
   be86e:	bf00      	nop
   be870:	000bdaf5 	.word	0x000bdaf5
   be874:	000c7a5d 	.word	0x000c7a5d
   be878:	000c7a9b 	.word	0x000c7a9b
   be87c:	000bee3d 	.word	0x000bee3d

000be880 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   be880:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   be882:	4c0a      	ldr	r4, [pc, #40]	; (be8ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   be884:	7823      	ldrb	r3, [r4, #0]
   be886:	f3bf 8f5b 	dmb	ish
   be88a:	07db      	lsls	r3, r3, #31
   be88c:	d40c      	bmi.n	be8a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be88e:	4620      	mov	r0, r4
   be890:	f7f5 fc16 	bl	b40c0 <__cxa_guard_acquire>
   be894:	b140      	cbz	r0, be8a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be896:	4806      	ldr	r0, [pc, #24]	; (be8b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be898:	f7ff ffbe 	bl	be818 <_ZN8particle14BleLocalDeviceC1Ev>
   be89c:	4620      	mov	r0, r4
   be89e:	f7f5 fc14 	bl	b40ca <__cxa_guard_release>
   be8a2:	4804      	ldr	r0, [pc, #16]	; (be8b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   be8a4:	f005 fd42 	bl	c432c <atexit>
    return instance;
}
   be8a8:	4801      	ldr	r0, [pc, #4]	; (be8b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be8aa:	bd10      	pop	{r4, pc}
   be8ac:	2003e61c 	.word	0x2003e61c
   be8b0:	2003e628 	.word	0x2003e628
   be8b4:	000beaf5 	.word	0x000beaf5

000be8b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be8b8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be8ba:	6803      	ldr	r3, [r0, #0]
   be8bc:	3b09      	subs	r3, #9
   be8be:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be8c0:	b08d      	sub	sp, #52	; 0x34
   be8c2:	4604      	mov	r4, r0
   be8c4:	460d      	mov	r5, r1
    switch (event->type) {
   be8c6:	d811      	bhi.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be8c8:	f7ff ffda 	bl	be880 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be8cc:	88a1      	ldrh	r1, [r4, #4]
   be8ce:	6800      	ldr	r0, [r0, #0]
   be8d0:	f7ff feb4 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be8d4:	4603      	mov	r3, r0
   be8d6:	b958      	cbnz	r0, be8f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be8d8:	2220      	movs	r2, #32
   be8da:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be8de:	4a0b      	ldr	r2, [pc, #44]	; (be90c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be8e0:	9200      	str	r2, [sp, #0]
   be8e2:	490b      	ldr	r1, [pc, #44]	; (be910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be8e4:	aa04      	add	r2, sp, #16
   be8e6:	2032      	movs	r0, #50	; 0x32
   be8e8:	f7ff faec 	bl	bdec4 <log_message>
}
   be8ec:	b00d      	add	sp, #52	; 0x34
   be8ee:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be8f0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be8f2:	2a00      	cmp	r2, #0
   be8f4:	d0fa      	beq.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be8f6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be8fa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be8fe:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be902:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be904:	aa04      	add	r2, sp, #16
   be906:	a903      	add	r1, sp, #12
   be908:	47a0      	blx	r4
}
   be90a:	e7ef      	b.n	be8ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be90c:	000c7add 	.word	0x000c7add
   be910:	000c7a74 	.word	0x000c7a74

000be914 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be914:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be916:	2000      	movs	r0, #0
   be918:	f7ff f80a 	bl	bd930 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be91c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be920:	bd08      	pop	{r3, pc}

000be922 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be922:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be924:	2100      	movs	r1, #0
   be926:	f7ff b80b 	b.w	bd940 <hal_ble_gap_set_tx_power>

000be92a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be92a:	b919      	cbnz	r1, be934 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be92c:	460a      	mov	r2, r1
   be92e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be930:	f7ff b80e 	b.w	bd950 <hal_ble_gap_set_advertising_data>
   be934:	e9d1 0100 	ldrd	r0, r1, [r1]
   be938:	2200      	movs	r2, #0
   be93a:	e7f9      	b.n	be930 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be93c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be93c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be93e:	69d8      	ldr	r0, [r3, #28]
}
   be940:	2800      	cmp	r0, #0
   be942:	bfd4      	ite	le
   be944:	2000      	movle	r0, #0
   be946:	2001      	movgt	r0, #1
   be948:	4770      	bx	lr

000be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be94a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be94c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be950:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be952:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be956:	42ae      	cmp	r6, r5
   be958:	d004      	beq.n	be964 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be95a:	4628      	mov	r0, r5
   be95c:	f002 feb8 	bl	c16d0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be960:	3510      	adds	r5, #16
   be962:	e7f8      	b.n	be956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be964:	6820      	ldr	r0, [r4, #0]
   be966:	f7ff fbbb 	bl	be0e0 <free>
}
   be96a:	4620      	mov	r0, r4
   be96c:	bd70      	pop	{r4, r5, r6, pc}

000be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be96e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be970:	1e14      	subs	r4, r2, #0
   be972:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be974:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be976:	db02      	blt.n	be97e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be978:	1862      	adds	r2, r4, r1
   be97a:	429a      	cmp	r2, r3
   be97c:	dd00      	ble.n	be980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be97e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be980:	682a      	ldr	r2, [r5, #0]
   be982:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be984:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be986:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be988:	1a52      	subs	r2, r2, r1
   be98a:	f005 fd03 	bl	c4394 <memmove>
    size_ -= n;
   be98e:	686a      	ldr	r2, [r5, #4]
   be990:	1b12      	subs	r2, r2, r4
   be992:	606a      	str	r2, [r5, #4]
}
   be994:	bd38      	pop	{r3, r4, r5, pc}

000be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be996:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be998:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be99a:	4604      	mov	r4, r0
   be99c:	460d      	mov	r5, r1
   be99e:	ab01      	add	r3, sp, #4
   be9a0:	e9d0 0100 	ldrd	r0, r1, [r0]
   be9a4:	f7ff fc72 	bl	be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be9a8:	4602      	mov	r2, r0
   be9aa:	b138      	cbz	r0, be9bc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be9ac:	9901      	ldr	r1, [sp, #4]
   be9ae:	4620      	mov	r0, r4
   be9b0:	f7ff ffdd 	bl	be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be9b4:	4629      	mov	r1, r5
   be9b6:	4620      	mov	r0, r4
   be9b8:	f7ff ffed 	bl	be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be9bc:	b003      	add	sp, #12
   be9be:	bd30      	pop	{r4, r5, pc}

000be9c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be9c0:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be9c2:	460c      	mov	r4, r1
   be9c4:	b929      	cbnz	r1, be9d2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be9c6:	460a      	mov	r2, r1
   be9c8:	4608      	mov	r0, r1
}
   be9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be9ce:	f7fe bfc7 	b.w	bd960 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be9d2:	2101      	movs	r1, #1
   be9d4:	4620      	mov	r0, r4
   be9d6:	f7ff ffde 	bl	be996 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be9da:	e9d4 0100 	ldrd	r0, r1, [r4]
   be9de:	2200      	movs	r2, #0
   be9e0:	e7f3      	b.n	be9ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be9e2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be9e2:	b538      	push	{r3, r4, r5, lr}
   be9e4:	4604      	mov	r4, r0
   be9e6:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be9e8:	f7ff ff9f 	bl	be92a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be9ec:	2800      	cmp	r0, #0
   be9ee:	db0a      	blt.n	bea06 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be9f0:	4629      	mov	r1, r5
   be9f2:	4620      	mov	r0, r4
   be9f4:	f7ff ffe4 	bl	be9c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be9f8:	2800      	cmp	r0, #0
   be9fa:	db04      	blt.n	bea06 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bea00:	2000      	movs	r0, #0
   bea02:	f7fe bfb5 	b.w	bd970 <hal_ble_gap_start_advertising>
}
   bea06:	bd38      	pop	{r3, r4, r5, pc}

000bea08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bea08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bea0a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bea0c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bea0e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea10:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bea12:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea14:	f7f5 fb3f 	bl	b4096 <_Znwj>
   bea18:	b118      	cbz	r0, bea22 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bea1a:	682b      	ldr	r3, [r5, #0]
   bea1c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bea1e:	686b      	ldr	r3, [r5, #4]
   bea20:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bea22:	4b03      	ldr	r3, [pc, #12]	; (bea30 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bea24:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bea26:	4b03      	ldr	r3, [pc, #12]	; (bea34 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bea28:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bea2a:	60a3      	str	r3, [r4, #8]
      }
   bea2c:	4620      	mov	r0, r4
   bea2e:	bd38      	pop	{r3, r4, r5, pc}
   bea30:	000be2cd 	.word	0x000be2cd
   bea34:	000be2e5 	.word	0x000be2e5

000bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bea38:	680b      	ldr	r3, [r1, #0]
   bea3a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bea3c:	b113      	cbz	r3, bea44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bea3e:	685a      	ldr	r2, [r3, #4]
   bea40:	3201      	adds	r2, #1
   bea42:	605a      	str	r2, [r3, #4]
      }
   bea44:	4770      	bx	lr

000bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bea46:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bea48:	f851 3b04 	ldr.w	r3, [r1], #4
   bea4c:	4604      	mov	r4, r0
   bea4e:	f840 3b04 	str.w	r3, [r0], #4
   bea52:	f7ff fff1 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bea56:	6823      	ldr	r3, [r4, #0]
   bea58:	b90b      	cbnz	r3, bea5e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bea5a:	f7ff fc2d 	bl	be2b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bea5e:	4620      	mov	r0, r4
   bea60:	bd10      	pop	{r4, pc}

000bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bea62:	b510      	push	{r4, lr}
   bea64:	f851 3b04 	ldr.w	r3, [r1], #4
   bea68:	4604      	mov	r4, r0
   bea6a:	f840 3b04 	str.w	r3, [r0], #4
   bea6e:	f7ff ffe3 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bea72:	4620      	mov	r0, r4
   bea74:	bd10      	pop	{r4, pc}

000bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bea76:	b510      	push	{r4, lr}
   bea78:	f851 3b04 	ldr.w	r3, [r1], #4
   bea7c:	4604      	mov	r4, r0
   bea7e:	f840 3b04 	str.w	r3, [r0], #4
   bea82:	f7ff ffd9 	bl	bea38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bea86:	4620      	mov	r0, r4
   bea88:	bd10      	pop	{r4, pc}

000bea8a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bea8a:	b510      	push	{r4, lr}
   bea8c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bea8e:	3004      	adds	r0, #4
   bea90:	f7f7 f950 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bea94:	4620      	mov	r0, r4
   bea96:	bd10      	pop	{r4, pc}

000bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bea9a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea9e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beaa0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beaa4:	42ae      	cmp	r6, r5
   beaa6:	d004      	beq.n	beab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   beaa8:	1d28      	adds	r0, r5, #4
   beaaa:	f7f7 f943 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beaae:	3508      	adds	r5, #8
   beab0:	e7f8      	b.n	beaa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   beab2:	6820      	ldr	r0, [r4, #0]
   beab4:	f7ff fb14 	bl	be0e0 <free>
}
   beab8:	4620      	mov	r0, r4
   beaba:	bd70      	pop	{r4, r5, r6, pc}

000beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   beabc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   beabe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   beac2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beac4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beac8:	42ae      	cmp	r6, r5
   beaca:	d004      	beq.n	bead6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   beacc:	1d28      	adds	r0, r5, #4
   beace:	f7f7 f931 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bead2:	3508      	adds	r5, #8
   bead4:	e7f8      	b.n	beac8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bead6:	6820      	ldr	r0, [r4, #0]
   bead8:	f7ff fb02 	bl	be0e0 <free>
}
   beadc:	4620      	mov	r0, r4
   beade:	bd70      	pop	{r4, r5, r6, pc}

000beae0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   beae0:	b510      	push	{r4, lr}
   beae2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   beae4:	3024      	adds	r0, #36	; 0x24
   beae6:	f7ff ffe9 	bl	beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beaea:	f104 0018 	add.w	r0, r4, #24
   beaee:	f7ff ffd3 	bl	bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   beaf2:	bd10      	pop	{r4, pc}

000beaf4 <__tcf_0>:
    static BleLocalDevice instance;
   beaf4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   beaf6:	4b17      	ldr	r3, [pc, #92]	; (beb54 <__tcf_0+0x60>)
   beaf8:	681c      	ldr	r4, [r3, #0]
   beafa:	b354      	cbz	r4, beb52 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   beafc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   beb00:	f7f5 fcb8 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   beb04:	f104 0044 	add.w	r0, r4, #68	; 0x44
   beb08:	f7f5 fcb4 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   beb0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   beb10:	f7f5 fcb0 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   beb14:	f104 0024 	add.w	r0, r4, #36	; 0x24
   beb18:	f7f5 fcac 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   beb1c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   beb20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beb24:	42ae      	cmp	r6, r5
   beb26:	d004      	beq.n	beb32 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   beb28:	1d28      	adds	r0, r5, #4
   beb2a:	f7f7 f903 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beb2e:	3508      	adds	r5, #8
   beb30:	e7f8      	b.n	beb24 <__tcf_0+0x30>
    ::free(ptr);
   beb32:	69a0      	ldr	r0, [r4, #24]
   beb34:	f7ff fad4 	bl	be0e0 <free>
    ~BleLocalDeviceImpl() = default;
   beb38:	f104 000c 	add.w	r0, r4, #12
   beb3c:	f7ff ffbe 	bl	beabc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beb40:	4620      	mov	r0, r4
   beb42:	f7ff ffa9 	bl	bea98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   beb46:	4620      	mov	r0, r4
   beb48:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   beb4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   beb4e:	f7f5 baa8 	b.w	b40a2 <_ZdlPvj>
   beb52:	bd70      	pop	{r4, r5, r6, pc}
   beb54:	2003e628 	.word	0x2003e628

000beb58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   beb58:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   beb5a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beb5c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   beb60:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   beb64:	6803      	ldr	r3, [r0, #0]
   beb66:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   beb68:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beb6a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   beb6c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   beb6e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   beb70:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   beb72:	f7f7 f8df 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   beb76:	b002      	add	sp, #8
   beb78:	bd10      	pop	{r4, pc}

000beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   beb7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   beb7c:	b510      	push	{r4, lr}
      if (_M_empty())
   beb7e:	b90a      	cbnz	r2, beb84 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   beb80:	f003 f9fa 	bl	c1f78 <_ZSt25__throw_bad_function_callv>
    }
   beb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beb88:	68c3      	ldr	r3, [r0, #12]
   beb8a:	4718      	bx	r3

000beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   beb8c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   beb8e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   beb90:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   beb92:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   beb94:	dd03      	ble.n	beb9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   beb96:	f7ff faab 	bl	be0f0 <realloc>
            if (!d) {
   beb9a:	b918      	cbnz	r0, beba4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   beb9c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   beb9e:	f7ff fa9f 	bl	be0e0 <free>
        T* d = nullptr;
   beba2:	2000      	movs	r0, #0
        data_ = d;
   beba4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   beba6:	60a5      	str	r5, [r4, #8]
        return true;
   beba8:	2001      	movs	r0, #1
   bebaa:	e7f7      	b.n	beb9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bebac:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bebae:	6883      	ldr	r3, [r0, #8]
   bebb0:	428b      	cmp	r3, r1
   bebb2:	da02      	bge.n	bebba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bebb4:	f7ff ffea 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bebb8:	bd08      	pop	{r3, pc}
    return true;
   bebba:	2001      	movs	r0, #1
   bebbc:	e7fc      	b.n	bebb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bebbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bebc2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebc4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebc6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebc8:	4419      	add	r1, r3
   bebca:	6883      	ldr	r3, [r0, #8]
   bebcc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bebce:	4604      	mov	r4, r0
   bebd0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebd2:	dc12      	bgt.n	bebfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bebd4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebd6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bebd8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebda:	1bd2      	subs	r2, r2, r7
   bebdc:	4631      	mov	r1, r6
   bebde:	1970      	adds	r0, r6, r5
   bebe0:	f005 fbd8 	bl	c4394 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bebe4:	462a      	mov	r2, r5
   bebe6:	4641      	mov	r1, r8
   bebe8:	4630      	mov	r0, r6
   bebea:	f005 fbc5 	bl	c4378 <memcpy>
    size_ += n;
   bebee:	6863      	ldr	r3, [r4, #4]
   bebf0:	442b      	add	r3, r5
   bebf2:	6063      	str	r3, [r4, #4]
    return true;
   bebf4:	2001      	movs	r0, #1
}
   bebf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bebfa:	f7ff ffc7 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bebfe:	2800      	cmp	r0, #0
   bec00:	d1e8      	bne.n	bebd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bec02:	e7f8      	b.n	bebf6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bec06:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec08:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bec0c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bec0e:	4604      	mov	r4, r0
   bec10:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec12:	da0b      	bge.n	bec2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bec14:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec16:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bec18:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec1a:	1b52      	subs	r2, r2, r5
   bec1c:	1c48      	adds	r0, r1, #1
   bec1e:	f005 fbb9 	bl	c4394 <memmove>
    new(p) T(std::move(value));
   bec22:	557e      	strb	r6, [r7, r5]
    ++size_;
   bec24:	6863      	ldr	r3, [r4, #4]
   bec26:	3301      	adds	r3, #1
   bec28:	6063      	str	r3, [r4, #4]
}
   bec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec2c:	3101      	adds	r1, #1
   bec2e:	f7ff ffad 	bl	beb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bec32:	2800      	cmp	r0, #0
   bec34:	d1ee      	bne.n	bec14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bec36:	e7f8      	b.n	bec2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bec38:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bec3a:	6841      	ldr	r1, [r0, #4]
   bec3c:	f7ff bfe2 	b.w	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bec40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bec40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bec44:	4604      	mov	r4, r0
   bec46:	461d      	mov	r5, r3
   bec48:	460f      	mov	r7, r1
   bec4a:	ab01      	add	r3, sp, #4
   bec4c:	4690      	mov	r8, r2
   bec4e:	460a      	mov	r2, r1
   bec50:	e9d0 0100 	ldrd	r0, r1, [r0]
   bec54:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bec58:	f7ff fb18 	bl	be28c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bec5c:	1cae      	adds	r6, r5, #2
   bec5e:	6863      	ldr	r3, [r4, #4]
   bec60:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bec62:	f1b9 0f00 	cmp.w	r9, #0
   bec66:	d126      	bne.n	becb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bec68:	b328      	cbz	r0, becb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bec6a:	4433      	add	r3, r6
   bec6c:	1a1b      	subs	r3, r3, r0
   bec6e:	2bff      	cmp	r3, #255	; 0xff
   bec70:	d809      	bhi.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bec72:	9901      	ldr	r1, [sp, #4]
   bec74:	4620      	mov	r0, r4
   bec76:	f7ff fe7a 	bl	be96e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bec7a:	6861      	ldr	r1, [r4, #4]
   bec7c:	4620      	mov	r0, r4
   bec7e:	4431      	add	r1, r6
   bec80:	f7ff ff94 	bl	bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bec84:	b918      	cbnz	r0, bec8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bec86:	6860      	ldr	r0, [r4, #4]
}
   bec88:	b003      	add	sp, #12
   bec8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bec8e:	1c6a      	adds	r2, r5, #1
   bec90:	9901      	ldr	r1, [sp, #4]
   bec92:	b2d2      	uxtb	r2, r2
   bec94:	4620      	mov	r0, r4
   bec96:	f7ff ffb5 	bl	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bec9a:	9901      	ldr	r1, [sp, #4]
   bec9c:	463a      	mov	r2, r7
   bec9e:	3101      	adds	r1, #1
   beca0:	4620      	mov	r0, r4
   beca2:	f7ff ffaf 	bl	bec04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   beca6:	9901      	ldr	r1, [sp, #4]
   beca8:	462b      	mov	r3, r5
   becaa:	4642      	mov	r2, r8
   becac:	3102      	adds	r1, #2
    return insert(size_, values, n);
   becae:	4620      	mov	r0, r4
   becb0:	f7ff ff85 	bl	bebbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   becb4:	e7e7      	b.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   becb6:	18f1      	adds	r1, r6, r3
   becb8:	29ff      	cmp	r1, #255	; 0xff
   becba:	d8e4      	bhi.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   becbc:	4620      	mov	r0, r4
   becbe:	f7ff ff75 	bl	bebac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   becc2:	2800      	cmp	r0, #0
   becc4:	d0df      	beq.n	bec86 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   becc6:	1c69      	adds	r1, r5, #1
   becc8:	b2c9      	uxtb	r1, r1
   becca:	4620      	mov	r0, r4
   beccc:	f7ff ffb4 	bl	bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   becd0:	4639      	mov	r1, r7
   becd2:	4620      	mov	r0, r4
   becd4:	f7ff ffb0 	bl	bec38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   becd8:	6861      	ldr	r1, [r4, #4]
   becda:	462b      	mov	r3, r5
   becdc:	4642      	mov	r2, r8
   becde:	e7e6      	b.n	becae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bece0:	b430      	push	{r4, r5}
   bece2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bece6:	b11a      	cbz	r2, becf0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bece8:	9502      	str	r5, [sp, #8]
}
   becea:	bc30      	pop	{r4, r5}
   becec:	f7ff bfa8 	b.w	bec40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   becf0:	6840      	ldr	r0, [r0, #4]
}
   becf2:	bc30      	pop	{r4, r5}
   becf4:	4770      	bx	lr

000becf6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   becf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   becf8:	2300      	movs	r3, #0
   becfa:	e9c0 3300 	strd	r3, r3, [r0]
   becfe:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bed00:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed02:	9300      	str	r3, [sp, #0]
   bed04:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bed06:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed0a:	4619      	mov	r1, r3
   bed0c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bed10:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bed12:	f7ff ffe5 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bed16:	4620      	mov	r0, r4
   bed18:	b004      	add	sp, #16
   bed1a:	bd10      	pop	{r4, pc}

000bed1c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bed1c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bed1e:	9300      	str	r3, [sp, #0]
   bed20:	4613      	mov	r3, r2
   bed22:	460a      	mov	r2, r1
   bed24:	21ff      	movs	r1, #255	; 0xff
   bed26:	f7ff ffdb 	bl	bece0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bed2a:	b003      	add	sp, #12
   bed2c:	f85d fb04 	ldr.w	pc, [sp], #4

000bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bed30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed34:	4604      	mov	r4, r0
   bed36:	460d      	mov	r5, r1
   bed38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed3a:	d914      	bls.n	bed66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bed3c:	4290      	cmp	r0, r2
   bed3e:	d213      	bcs.n	bed68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bed40:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bed44:	1a75      	subs	r5, r6, r1
   bed46:	f1a1 0708 	sub.w	r7, r1, #8
   bed4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bed4c:	42b7      	cmp	r7, r6
   bed4e:	d018      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bed50:	b11c      	cbz	r4, bed5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bed52:	4631      	mov	r1, r6
   bed54:	4620      	mov	r0, r4
   bed56:	f7ff fe8e 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bed5a:	1d30      	adds	r0, r6, #4
   bed5c:	f7f6 ffea 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bed60:	3e08      	subs	r6, #8
   bed62:	3c08      	subs	r4, #8
   bed64:	e7f2      	b.n	bed4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bed66:	d00c      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bed68:	42b5      	cmp	r5, r6
   bed6a:	d00a      	beq.n	bed82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bed6c:	b11c      	cbz	r4, bed76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bed6e:	4629      	mov	r1, r5
   bed70:	4620      	mov	r0, r4
   bed72:	f7ff fe80 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bed76:	1d28      	adds	r0, r5, #4
   bed78:	f7f6 ffdc 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bed7c:	3508      	adds	r5, #8
   bed7e:	3408      	adds	r4, #8
   bed80:	e7f2      	b.n	bed68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bed82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bed84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bed86:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bed88:	6846      	ldr	r6, [r0, #4]
   bed8a:	4668      	mov	r0, sp
   bed8c:	f7ff fe73 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bed90:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bed94:	429f      	cmp	r7, r3
   bed96:	db12      	blt.n	bedbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bed98:	3701      	adds	r7, #1
        if (n > 0) {
   bed9a:	2f00      	cmp	r7, #0
   bed9c:	dd29      	ble.n	bedf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bed9e:	00f8      	lsls	r0, r7, #3
   beda0:	f7ff f996 	bl	be0d0 <malloc>
            if (!d) {
   beda4:	4605      	mov	r5, r0
   beda6:	b1f0      	cbz	r0, bede6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   beda8:	e9d4 1200 	ldrd	r1, r2, [r4]
   bedac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bedb0:	f7ff ffbe 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bedb4:	6820      	ldr	r0, [r4, #0]
   bedb6:	f7ff f993 	bl	be0e0 <free>
        data_ = d;
   bedba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bedbc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bedbe:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bedc0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bedc2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bedc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bedca:	4631      	mov	r1, r6
   bedcc:	f106 0008 	add.w	r0, r6, #8
   bedd0:	f7ff ffae 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bedd4:	b11e      	cbz	r6, bedde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bedd6:	4669      	mov	r1, sp
   bedd8:	4630      	mov	r0, r6
   bedda:	f7ff fe4c 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bedde:	6863      	ldr	r3, [r4, #4]
   bede0:	3301      	adds	r3, #1
   bede2:	6063      	str	r3, [r4, #4]
    return true;
   bede4:	2501      	movs	r5, #1
   bede6:	a801      	add	r0, sp, #4
   bede8:	f7f6 ffa4 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bedec:	4628      	mov	r0, r5
   bedee:	b003      	add	sp, #12
   bedf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bedf2:	2500      	movs	r5, #0
   bedf4:	e7de      	b.n	bedb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bedf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bedf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bedf8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bedfc:	4605      	mov	r5, r0
   bedfe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bee00:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bee04:	42a6      	cmp	r6, r4
   bee06:	d005      	beq.n	bee14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bee08:	4639      	mov	r1, r7
   bee0a:	4620      	mov	r0, r4
   bee0c:	f7ff fce1 	bl	be7d2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bee10:	b108      	cbz	r0, bee16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bee12:	b914      	cbnz	r4, bee1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bee14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bee16:	3408      	adds	r4, #8
   bee18:	e7f4      	b.n	bee04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bee1a:	1d20      	adds	r0, r4, #4
   bee1c:	f7f6 ff8a 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bee20:	e9d5 3200 	ldrd	r3, r2, [r5]
   bee24:	f104 0108 	add.w	r1, r4, #8
   bee28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bee2c:	4620      	mov	r0, r4
   bee2e:	f7ff ff7f 	bl	bed30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bee32:	686b      	ldr	r3, [r5, #4]
   bee34:	3b01      	subs	r3, #1
   bee36:	606b      	str	r3, [r5, #4]
    return true;
   bee38:	e7ec      	b.n	bee14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bee3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bee40:	4605      	mov	r5, r0
   bee42:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bee44:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bee46:	460c      	mov	r4, r1
        WiringBleLock lk;
   bee48:	f7ff faa0 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bee4c:	682e      	ldr	r6, [r5, #0]
   bee4e:	1ef3      	subs	r3, r6, #3
   bee50:	2b0d      	cmp	r3, #13
   bee52:	d83c      	bhi.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bee54:	e8df f013 	tbh	[pc, r3, lsl #1]
   bee58:	0053000e 	.word	0x0053000e
   bee5c:	00d1003b 	.word	0x00d1003b
   bee60:	003b003b 	.word	0x003b003b
   bee64:	003b003b 	.word	0x003b003b
   bee68:	009b003b 	.word	0x009b003b
   bee6c:	009b009b 	.word	0x009b009b
   bee70:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bee74:	a804      	add	r0, sp, #16
   bee76:	f7ff fc77 	bl	be768 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bee7a:	9b04      	ldr	r3, [sp, #16]
   bee7c:	89aa      	ldrh	r2, [r5, #12]
   bee7e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bee80:	6869      	ldr	r1, [r5, #4]
   bee82:	9804      	ldr	r0, [sp, #16]
   bee84:	3108      	adds	r1, #8
   bee86:	3002      	adds	r0, #2
   bee88:	f7ff fa9a 	bl	be3c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bee8c:	a904      	add	r1, sp, #16
   bee8e:	a806      	add	r0, sp, #24
   bee90:	f7ff fdf1 	bl	bea76 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bee94:	a906      	add	r1, sp, #24
   bee96:	f104 0018 	add.w	r0, r4, #24
   bee9a:	f7ff ff73 	bl	bed84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bee9e:	4605      	mov	r5, r0
   beea0:	a807      	add	r0, sp, #28
   beea2:	f7f6 ff47 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beea6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   beea8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   beeaa:	b9b5      	cbnz	r5, beeda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   beeac:	4b5d      	ldr	r3, [pc, #372]	; (bf024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   beeae:	495e      	ldr	r1, [pc, #376]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   beeb0:	9300      	str	r3, [sp, #0]
   beeb2:	2032      	movs	r0, #50	; 0x32
   beeb4:	462b      	mov	r3, r5
   beeb6:	aa06      	add	r2, sp, #24
   beeb8:	9507      	str	r5, [sp, #28]
   beeba:	f7ff f803 	bl	bdec4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   beebe:	9b04      	ldr	r3, [sp, #16]
   beec0:	4629      	mov	r1, r5
   beec2:	8818      	ldrh	r0, [r3, #0]
   beec4:	f7fe fd5c 	bl	bd980 <hal_ble_gap_disconnect>
   beec8:	a805      	add	r0, sp, #20
   beeca:	f7f6 ff33 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   beece:	a803      	add	r0, sp, #12
   beed0:	f7ff fa6a 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   beed4:	b00e      	add	sp, #56	; 0x38
   beed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   beeda:	4a54      	ldr	r2, [pc, #336]	; (bf02c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   beedc:	9200      	str	r2, [sp, #0]
   beede:	2300      	movs	r3, #0
   beee0:	4951      	ldr	r1, [pc, #324]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   beee2:	9307      	str	r3, [sp, #28]
   beee4:	aa06      	add	r2, sp, #24
   beee6:	2001      	movs	r0, #1
   beee8:	f7fe ffec 	bl	bdec4 <log_message>
                if (impl->connectedCallback_) {
   beeec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   beeee:	2b00      	cmp	r3, #0
   beef0:	d0ea      	beq.n	beec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   beef2:	a904      	add	r1, sp, #16
   beef4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   beef8:	f7ff fe3f 	bl	beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   beefc:	e7e4      	b.n	beec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   beefe:	89a9      	ldrh	r1, [r5, #12]
   bef00:	4620      	mov	r0, r4
   bef02:	f7ff fb9b 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bef06:	4606      	mov	r6, r0
   bef08:	2800      	cmp	r0, #0
   bef0a:	d0e0      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bef0c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bef0e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bef12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bef16:	8029      	strh	r1, [r5, #0]
   bef18:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bef1c:	429a      	cmp	r2, r3
   bef1e:	d003      	beq.n	bef28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bef20:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bef24:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bef26:	e7f9      	b.n	bef1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bef28:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bef2c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bef30:	45b8      	cmp	r8, r7
   bef32:	d004      	beq.n	bef3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bef34:	1d38      	adds	r0, r7, #4
   bef36:	f7f6 fefd 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef3a:	3708      	adds	r7, #8
   bef3c:	e7f8      	b.n	bef30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bef3e:	2300      	movs	r3, #0
   bef40:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bef42:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bef46:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bef4a:	45b8      	cmp	r8, r7
   bef4c:	d004      	beq.n	bef58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bef4e:	1d38      	adds	r0, r7, #4
   bef50:	f7f6 fef0 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef54:	3708      	adds	r7, #8
   bef56:	e7f8      	b.n	bef4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bef58:	2300      	movs	r3, #0
   bef5a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bef5c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bef5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bef60:	b123      	cbz	r3, bef6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bef62:	4631      	mov	r1, r6
   bef64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bef68:	f7ff fe07 	bl	beb7a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bef6c:	2300      	movs	r3, #0
   bef6e:	2220      	movs	r2, #32
   bef70:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bef74:	4a2e      	ldr	r2, [pc, #184]	; (bf030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bef76:	9200      	str	r2, [sp, #0]
   bef78:	492b      	ldr	r1, [pc, #172]	; (bf028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bef7a:	aa06      	add	r2, sp, #24
   bef7c:	2001      	movs	r0, #1
   bef7e:	f7fe ffa1 	bl	bdec4 <log_message>
                    impl->peers_.removeOne(*peer);
   bef82:	4631      	mov	r1, r6
   bef84:	f104 0018 	add.w	r0, r4, #24
   bef88:	f7ff ff35 	bl	bedf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bef8c:	e79f      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bef8e:	89a9      	ldrh	r1, [r5, #12]
   bef90:	4620      	mov	r0, r4
   bef92:	f7ff fb53 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bef96:	2800      	cmp	r0, #0
   bef98:	d099      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bef9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bef9c:	2b00      	cmp	r3, #0
   bef9e:	d096      	beq.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   befa0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   befa2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   befa4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   befa8:	d001      	beq.n	befae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   befaa:	2e10      	cmp	r6, #16
   befac:	d117      	bne.n	befde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   befae:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   befb0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   befb2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   befb4:	2506      	movs	r5, #6
                        };
   befb6:	f88d 3015 	strb.w	r3, [sp, #21]
   befba:	9104      	str	r1, [sp, #16]
   befbc:	f88d 2014 	strb.w	r2, [sp, #20]
   befc0:	9006      	str	r0, [sp, #24]
   befc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   befc6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   befc8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   befcc:	9508      	str	r5, [sp, #32]
   befce:	e883 0003 	stmia.w	r3, {r0, r1}
   befd2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   befd4:	a906      	add	r1, sp, #24
   befd6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   befda:	4798      	blx	r3
   befdc:	e777      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   befde:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   befe0:	bf01      	itttt	eq
   befe2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   befe4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   befe6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   befea:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   befec:	bf0f      	iteee	eq
   befee:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   beff2:	461a      	movne	r2, r3
   beff4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   beff6:	461d      	movne	r5, r3
   beff8:	e7dd      	b.n	befb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   beffa:	89a9      	ldrh	r1, [r5, #12]
   beffc:	4620      	mov	r0, r4
   beffe:	f7ff fb1d 	bl	be63c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf002:	4601      	mov	r1, r0
   bf004:	2800      	cmp	r0, #0
   bf006:	f43f af62 	beq.w	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf00a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf00c:	2b00      	cmp	r3, #0
   bf00e:	f43f af5e 	beq.w	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf012:	686b      	ldr	r3, [r5, #4]
   bf014:	9306      	str	r3, [sp, #24]
   bf016:	aa06      	add	r2, sp, #24
   bf018:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf01a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf01e:	4798      	blx	r3
   bf020:	e755      	b.n	beece <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf022:	bf00      	nop
   bf024:	000c7af5 	.word	0x000c7af5
   bf028:	000c7a74 	.word	0x000c7a74
   bf02c:	000c7b1b 	.word	0x000c7b1b
   bf030:	000c7b38 	.word	0x000c7b38

000bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf034:	b513      	push	{r0, r1, r4, lr}
   bf036:	460b      	mov	r3, r1
   bf038:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf03a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf03e:	466c      	mov	r4, sp
   bf040:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf044:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf048:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf04c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf050:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf054:	b002      	add	sp, #8
   bf056:	bd10      	pop	{r4, pc}

000bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf058:	b538      	push	{r3, r4, r5, lr}
   bf05a:	4605      	mov	r5, r0
   bf05c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf05e:	f7ff ffe9 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf062:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf064:	68a2      	ldr	r2, [r4, #8]
   bf066:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf068:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf06a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf06c:	68e2      	ldr	r2, [r4, #12]
   bf06e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf070:	60e3      	str	r3, [r4, #12]
      }
   bf072:	bd38      	pop	{r3, r4, r5, pc}

000bf074 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf074:	b570      	push	{r4, r5, r6, lr}
   bf076:	4604      	mov	r4, r0
   bf078:	b08c      	sub	sp, #48	; 0x30
   bf07a:	460e      	mov	r6, r1
   bf07c:	9201      	str	r2, [sp, #4]
   bf07e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf080:	f7ff fabc 	bl	be5fc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf084:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf086:	9901      	ldr	r1, [sp, #4]
   bf088:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf08c:	f002 fbc1 	bl	c1812 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf090:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf094:	b1cd      	cbz	r5, bf0ca <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf096:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf098:	9502      	str	r5, [sp, #8]
   bf09a:	a902      	add	r1, sp, #8
   bf09c:	a804      	add	r0, sp, #16
   bf09e:	9303      	str	r3, [sp, #12]
   bf0a0:	f7ff fcb2 	bl	bea08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf0a4:	2300      	movs	r3, #0
	__x.swap(*this);
   bf0a6:	a908      	add	r1, sp, #32
   bf0a8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf0aa:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf0ac:	f7ff ffd4 	bl	bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf0b0:	4631      	mov	r1, r6
   bf0b2:	a808      	add	r0, sp, #32
   bf0b4:	f7ff ffd0 	bl	bf058 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf0b8:	a808      	add	r0, sp, #32
   bf0ba:	f7f5 f9db 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   bf0be:	a804      	add	r0, sp, #16
   bf0c0:	f7f5 f9d8 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
    }
   bf0c4:	4620      	mov	r0, r4
   bf0c6:	b00c      	add	sp, #48	; 0x30
   bf0c8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf0ca:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf0cc:	e7ea      	b.n	bf0a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf0d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf0d4:	b087      	sub	sp, #28
   bf0d6:	461d      	mov	r5, r3
   bf0d8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf0dc:	4680      	mov	r8, r0
   bf0de:	468b      	mov	fp, r1
   bf0e0:	4692      	mov	sl, r2
   bf0e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf0e4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf0e6:	2200      	movs	r2, #0
   bf0e8:	2068      	movs	r0, #104	; 0x68
   bf0ea:	9102      	str	r1, [sp, #8]
   bf0ec:	9204      	str	r2, [sp, #16]
   bf0ee:	f7f4 ffd2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf0f2:	1e06      	subs	r6, r0, #0
   bf0f4:	f106 090c 	add.w	r9, r6, #12
   bf0f8:	d018      	beq.n	bf12c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf0fa:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf0fc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf0fe:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf102:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf104:	4a15      	ldr	r2, [pc, #84]	; (bf15c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf106:	f847 2b20 	str.w	r2, [r7], #32
   bf10a:	9b03      	ldr	r3, [sp, #12]
   bf10c:	9100      	str	r1, [sp, #0]
   bf10e:	465a      	mov	r2, fp
   bf110:	4651      	mov	r1, sl
   bf112:	4648      	mov	r0, r9
   bf114:	f7ff ffae 	bl	bf074 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf11a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf11c:	682b      	ldr	r3, [r5, #0]
   bf11e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf122:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf128:	6823      	ldr	r3, [r4, #0]
   bf12a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf12c:	a904      	add	r1, sp, #16
   bf12e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf130:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf134:	f7ff fd10 	bl	beb58 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf138:	a805      	add	r0, sp, #20
   bf13a:	f7f6 fdfb 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf13e:	f8d8 3000 	ldr.w	r3, [r8]
   bf142:	b93b      	cbnz	r3, bf154 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf144:	4a06      	ldr	r2, [pc, #24]	; (bf160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf146:	4907      	ldr	r1, [pc, #28]	; (bf164 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf148:	200a      	movs	r0, #10
}
   bf14a:	b007      	add	sp, #28
   bf14c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf150:	f7fe beb0 	b.w	bdeb4 <panic_>
}
   bf154:	b007      	add	sp, #28
   bf156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf15a:	bf00      	nop
   bf15c:	000c7bb4 	.word	0x000c7bb4
   bf160:	000bdaf5 	.word	0x000bdaf5
   bf164:	000c7a5d 	.word	0x000c7a5d

000bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf168:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf16c:	4604      	mov	r4, r0
   bf16e:	460d      	mov	r5, r1
   bf170:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf172:	d914      	bls.n	bf19e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf174:	4290      	cmp	r0, r2
   bf176:	d213      	bcs.n	bf1a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf178:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf17c:	1a75      	subs	r5, r6, r1
   bf17e:	f1a1 0708 	sub.w	r7, r1, #8
   bf182:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf184:	42b7      	cmp	r7, r6
   bf186:	d018      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf188:	b11c      	cbz	r4, bf192 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf18a:	4631      	mov	r1, r6
   bf18c:	4620      	mov	r0, r4
   bf18e:	f7ff fc68 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf192:	1d30      	adds	r0, r6, #4
   bf194:	f7f6 fdce 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf198:	3e08      	subs	r6, #8
   bf19a:	3c08      	subs	r4, #8
   bf19c:	e7f2      	b.n	bf184 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf19e:	d00c      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf1a0:	42b5      	cmp	r5, r6
   bf1a2:	d00a      	beq.n	bf1ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf1a4:	b11c      	cbz	r4, bf1ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf1a6:	4629      	mov	r1, r5
   bf1a8:	4620      	mov	r0, r4
   bf1aa:	f7ff fc5a 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf1ae:	1d28      	adds	r0, r5, #4
   bf1b0:	f7f6 fdc0 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf1b4:	3508      	adds	r5, #8
   bf1b6:	3408      	adds	r4, #8
   bf1b8:	e7f2      	b.n	bf1a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf1bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf1bc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf1be:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf1c0:	4605      	mov	r5, r0
        if (n > 0) {
   bf1c2:	dd11      	ble.n	bf1e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf1c4:	00f0      	lsls	r0, r6, #3
   bf1c6:	f7fe ff83 	bl	be0d0 <malloc>
            if (!d) {
   bf1ca:	4604      	mov	r4, r0
   bf1cc:	b158      	cbz	r0, bf1e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf1ce:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf1d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf1d6:	f7ff ffc7 	bl	bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf1da:	6828      	ldr	r0, [r5, #0]
   bf1dc:	f7fe ff80 	bl	be0e0 <free>
        data_ = d;
   bf1e0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf1e2:	60ae      	str	r6, [r5, #8]
        return true;
   bf1e4:	2001      	movs	r0, #1
    }
   bf1e6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf1e8:	2400      	movs	r4, #0
   bf1ea:	e7f6      	b.n	bf1da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf1ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf1ee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf1f0:	6845      	ldr	r5, [r0, #4]
   bf1f2:	4668      	mov	r0, sp
   bf1f4:	f7ff fc35 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf1f8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf1fc:	4299      	cmp	r1, r3
   bf1fe:	da10      	bge.n	bf222 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf200:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf202:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf204:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf208:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf20c:	4629      	mov	r1, r5
   bf20e:	f105 0008 	add.w	r0, r5, #8
   bf212:	f7ff ffa9 	bl	bf168 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf216:	b98d      	cbnz	r5, bf23c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf218:	6863      	ldr	r3, [r4, #4]
   bf21a:	3301      	adds	r3, #1
   bf21c:	6063      	str	r3, [r4, #4]
    return true;
   bf21e:	2601      	movs	r6, #1
   bf220:	e006      	b.n	bf230 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf222:	3101      	adds	r1, #1
   bf224:	4620      	mov	r0, r4
   bf226:	f7ff ffc9 	bl	bf1bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf22a:	4606      	mov	r6, r0
   bf22c:	2800      	cmp	r0, #0
   bf22e:	d1e7      	bne.n	bf200 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf230:	a801      	add	r0, sp, #4
   bf232:	f7f6 fd7f 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf236:	4630      	mov	r0, r6
   bf238:	b002      	add	sp, #8
   bf23a:	bd70      	pop	{r4, r5, r6, pc}
   bf23c:	4669      	mov	r1, sp
   bf23e:	4628      	mov	r0, r5
   bf240:	f7ff fc0f 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf244:	e7e8      	b.n	bf218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf246:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf24a:	4604      	mov	r4, r0
   bf24c:	460d      	mov	r5, r1
   bf24e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf250:	d914      	bls.n	bf27c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf252:	4290      	cmp	r0, r2
   bf254:	d213      	bcs.n	bf27e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf256:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf25a:	1a75      	subs	r5, r6, r1
   bf25c:	f1a1 0708 	sub.w	r7, r1, #8
   bf260:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf262:	42b7      	cmp	r7, r6
   bf264:	d018      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf266:	b11c      	cbz	r4, bf270 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf268:	4631      	mov	r1, r6
   bf26a:	4620      	mov	r0, r4
   bf26c:	f7ff fbeb 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf270:	1d30      	adds	r0, r6, #4
   bf272:	f7f6 fd5f 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf276:	3e08      	subs	r6, #8
   bf278:	3c08      	subs	r4, #8
   bf27a:	e7f2      	b.n	bf262 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf27c:	d00c      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf27e:	42b5      	cmp	r5, r6
   bf280:	d00a      	beq.n	bf298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf282:	b11c      	cbz	r4, bf28c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf284:	4629      	mov	r1, r5
   bf286:	4620      	mov	r0, r4
   bf288:	f7ff fbdd 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf28c:	1d28      	adds	r0, r5, #4
   bf28e:	f7f6 fd51 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf292:	3508      	adds	r5, #8
   bf294:	3408      	adds	r4, #8
   bf296:	e7f2      	b.n	bf27e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf29a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf29a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf29c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf29e:	4605      	mov	r5, r0
        if (n > 0) {
   bf2a0:	dd11      	ble.n	bf2c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf2a2:	00f0      	lsls	r0, r6, #3
   bf2a4:	f7fe ff14 	bl	be0d0 <malloc>
            if (!d) {
   bf2a8:	4604      	mov	r4, r0
   bf2aa:	b158      	cbz	r0, bf2c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf2ac:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf2b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf2b4:	f7ff ffc7 	bl	bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf2b8:	6828      	ldr	r0, [r5, #0]
   bf2ba:	f7fe ff11 	bl	be0e0 <free>
        data_ = d;
   bf2be:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf2c0:	60ae      	str	r6, [r5, #8]
        return true;
   bf2c2:	2001      	movs	r0, #1
    }
   bf2c4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf2c6:	2400      	movs	r4, #0
   bf2c8:	e7f6      	b.n	bf2b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf2ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf2cc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf2ce:	6845      	ldr	r5, [r0, #4]
   bf2d0:	4668      	mov	r0, sp
   bf2d2:	f7ff fbb8 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf2d6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf2da:	4299      	cmp	r1, r3
   bf2dc:	da10      	bge.n	bf300 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf2de:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf2e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf2e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf2e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf2ea:	4629      	mov	r1, r5
   bf2ec:	f105 0008 	add.w	r0, r5, #8
   bf2f0:	f7ff ffa9 	bl	bf246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf2f4:	b98d      	cbnz	r5, bf31a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf2f6:	6863      	ldr	r3, [r4, #4]
   bf2f8:	3301      	adds	r3, #1
   bf2fa:	6063      	str	r3, [r4, #4]
    return true;
   bf2fc:	2601      	movs	r6, #1
   bf2fe:	e006      	b.n	bf30e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf300:	3101      	adds	r1, #1
   bf302:	4620      	mov	r0, r4
   bf304:	f7ff ffc9 	bl	bf29a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf308:	4606      	mov	r6, r0
   bf30a:	2800      	cmp	r0, #0
   bf30c:	d1e7      	bne.n	bf2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf30e:	a801      	add	r0, sp, #4
   bf310:	f7f6 fd10 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf314:	4630      	mov	r0, r6
   bf316:	b002      	add	sp, #8
   bf318:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf31a:	4669      	mov	r1, sp
   bf31c:	4628      	mov	r0, r5
   bf31e:	f7ff fb92 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf322:	e7e8      	b.n	bf2f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf328:	4617      	mov	r7, r2
   bf32a:	b0a1      	sub	sp, #132	; 0x84
   bf32c:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf32e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf330:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf332:	f7ff f82b 	bl	be38c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf336:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf338:	7923      	ldrb	r3, [r4, #4]
   bf33a:	b953      	cbnz	r3, bf352 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf33c:	4639      	mov	r1, r7
   bf33e:	4640      	mov	r0, r8
   bf340:	f7ff fb81 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf344:	a80a      	add	r0, sp, #40	; 0x28
   bf346:	f7ff f82f 	bl	be3a8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf34a:	4640      	mov	r0, r8
   bf34c:	b021      	add	sp, #132	; 0x84
   bf34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf352:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf354:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf358:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf35c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf35e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf362:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf366:	9b03      	ldr	r3, [sp, #12]
   bf368:	429d      	cmp	r5, r3
   bf36a:	d021      	beq.n	bf3b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf36c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf370:	4658      	mov	r0, fp
   bf372:	f109 0114 	add.w	r1, r9, #20
   bf376:	f7ff f8b6 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf37a:	b1b8      	cbz	r0, bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf37c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf380:	4650      	mov	r0, sl
   bf382:	f7ff f8b0 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf386:	b188      	cbz	r0, bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf388:	6823      	ldr	r3, [r4, #0]
   bf38a:	f8d9 2000 	ldr.w	r2, [r9]
   bf38e:	4053      	eors	r3, r2
   bf390:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf394:	d10a      	bne.n	bf3ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf396:	2220      	movs	r2, #32
   bf398:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf39c:	4a5e      	ldr	r2, [pc, #376]	; (bf518 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf39e:	9200      	str	r2, [sp, #0]
   bf3a0:	aa15      	add	r2, sp, #84	; 0x54
   bf3a2:	495e      	ldr	r1, [pc, #376]	; (bf51c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf3a4:	2032      	movs	r0, #50	; 0x32
   bf3a6:	f7fe fd8d 	bl	bdec4 <log_message>
   bf3aa:	e7c7      	b.n	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf3ac:	3508      	adds	r5, #8
   bf3ae:	e7da      	b.n	bf366 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf3b0:	4650      	mov	r0, sl
   bf3b2:	f7ff f869 	bl	be488 <_ZNK8particle7BleUuid7isValidEv>
   bf3b6:	b960      	cbnz	r0, bf3d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf3b8:	4959      	ldr	r1, [pc, #356]	; (bf520 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf3ba:	2201      	movs	r2, #1
   bf3bc:	a815      	add	r0, sp, #84	; 0x54
   bf3be:	ad15      	add	r5, sp, #84	; 0x54
   bf3c0:	f7ff f83a 	bl	be438 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf3c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf3c6:	46d4      	mov	ip, sl
   bf3c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf3cc:	682b      	ldr	r3, [r5, #0]
   bf3ce:	f8cc 3000 	str.w	r3, [ip]
   bf3d2:	6833      	ldr	r3, [r6, #0]
   bf3d4:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf3d8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf3dc:	455d      	cmp	r5, fp
   bf3de:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf3e0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf3e2:	d06e      	beq.n	bf4c2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf3e4:	f855 0b08 	ldr.w	r0, [r5], #8
   bf3e8:	f7ff f87d 	bl	be4e6 <_ZNK8particle7BleUuideqERKS0_>
   bf3ec:	2800      	cmp	r0, #0
   bf3ee:	d0f5      	beq.n	bf3dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf3f0:	f104 0a14 	add.w	sl, r4, #20
   bf3f4:	4650      	mov	r0, sl
   bf3f6:	f7ff f847 	bl	be488 <_ZNK8particle7BleUuid7isValidEv>
   bf3fa:	b988      	cbnz	r0, bf420 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf3fc:	4b49      	ldr	r3, [pc, #292]	; (bf524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf3fe:	4948      	ldr	r1, [pc, #288]	; (bf520 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf400:	881a      	ldrh	r2, [r3, #0]
   bf402:	3201      	adds	r2, #1
   bf404:	b292      	uxth	r2, r2
   bf406:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf408:	a815      	add	r0, sp, #84	; 0x54
   bf40a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf40c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf40e:	f7ff f832 	bl	be476 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf414:	46d4      	mov	ip, sl
   bf416:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf41a:	682b      	ldr	r3, [r5, #0]
   bf41c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf420:	4b41      	ldr	r3, [pc, #260]	; (bf528 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf422:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf424:	2228      	movs	r2, #40	; 0x28
   bf426:	2100      	movs	r1, #0
   bf428:	a816      	add	r0, sp, #88	; 0x58
   bf42a:	f004 ffcd 	bl	c43c8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf42e:	4651      	mov	r1, sl
   bf430:	a804      	add	r0, sp, #16
   bf432:	f7ff f83b 	bl	be4ac <_ZN8particle7BleUuid7halUUIDEv>
   bf436:	ab04      	add	r3, sp, #16
   bf438:	aa18      	add	r2, sp, #96	; 0x60
   bf43a:	f10d 0c20 	add.w	ip, sp, #32
   bf43e:	6818      	ldr	r0, [r3, #0]
   bf440:	6859      	ldr	r1, [r3, #4]
   bf442:	4615      	mov	r5, r2
   bf444:	c503      	stmia	r5!, {r0, r1}
   bf446:	3308      	adds	r3, #8
   bf448:	4563      	cmp	r3, ip
   bf44a:	462a      	mov	r2, r5
   bf44c:	d1f7      	bne.n	bf43e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf44e:	6818      	ldr	r0, [r3, #0]
   bf450:	6028      	str	r0, [r5, #0]
    return value_;
   bf452:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf454:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf458:	f8d9 3000 	ldr.w	r3, [r9]
   bf45c:	8a9b      	ldrh	r3, [r3, #20]
   bf45e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf464:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf466:	4b31      	ldr	r3, [pc, #196]	; (bf52c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf468:	2200      	movs	r2, #0
   bf46a:	1da1      	adds	r1, r4, #6
   bf46c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf46e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf472:	f7fe fab7 	bl	bd9e4 <hal_ble_gatt_server_add_characteristic>
   bf476:	2800      	cmp	r0, #0
   bf478:	f47f af60 	bne.w	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf47c:	2301      	movs	r3, #1
   bf47e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf480:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf482:	4639      	mov	r1, r7
        return characteristics_;
   bf484:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf486:	a80d      	add	r0, sp, #52	; 0x34
   bf488:	f7ff fadd 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf48c:	4620      	mov	r0, r4
   bf48e:	a90d      	add	r1, sp, #52	; 0x34
   bf490:	f7ff ff1b 	bl	bf2ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf494:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf496:	a80e      	add	r0, sp, #56	; 0x38
   bf498:	f7f6 fc4c 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf49c:	2c00      	cmp	r4, #0
   bf49e:	f47f af4d 	bne.w	bf33c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf4a2:	2320      	movs	r3, #32
   bf4a4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf4a8:	4b21      	ldr	r3, [pc, #132]	; (bf530 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf4aa:	9300      	str	r3, [sp, #0]
   bf4ac:	aa0d      	add	r2, sp, #52	; 0x34
   bf4ae:	4623      	mov	r3, r4
   bf4b0:	e777      	b.n	bf3a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf4b2:	4639      	mov	r1, r7
   bf4b4:	4640      	mov	r0, r8
   bf4b6:	f7ff fac6 	bl	bea46 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf4ba:	a80c      	add	r0, sp, #48	; 0x30
   bf4bc:	f7f6 fc3a 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf4c0:	e740      	b.n	bf344 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf4c2:	a80b      	add	r0, sp, #44	; 0x2c
   bf4c4:	f7ff f92c 	bl	be720 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf4c8:	4651      	mov	r1, sl
   bf4ca:	a815      	add	r0, sp, #84	; 0x54
   bf4cc:	f7fe ffee 	bl	be4ac <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf4d2:	2300      	movs	r3, #0
   bf4d4:	3214      	adds	r2, #20
   bf4d6:	a915      	add	r1, sp, #84	; 0x54
   bf4d8:	2001      	movs	r0, #1
   bf4da:	f7fe fa5b 	bl	bd994 <hal_ble_gatt_server_add_service>
   bf4de:	2800      	cmp	r0, #0
   bf4e0:	d1e7      	bne.n	bf4b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf4e2:	6835      	ldr	r5, [r6, #0]
   bf4e4:	a90b      	add	r1, sp, #44	; 0x2c
   bf4e6:	a80d      	add	r0, sp, #52	; 0x34
   bf4e8:	f7ff fabb 	bl	bea62 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf4ec:	4628      	mov	r0, r5
   bf4ee:	a90d      	add	r1, sp, #52	; 0x34
   bf4f0:	f7ff fe7c 	bl	bf1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf4f4:	4605      	mov	r5, r0
   bf4f6:	a80e      	add	r0, sp, #56	; 0x38
   bf4f8:	f7f6 fc1c 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf4fc:	2d00      	cmp	r5, #0
   bf4fe:	d0d8      	beq.n	bf4b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf500:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf502:	6853      	ldr	r3, [r2, #4]
   bf504:	6812      	ldr	r2, [r2, #0]
   bf506:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf50a:	3b01      	subs	r3, #1
   bf50c:	a80c      	add	r0, sp, #48	; 0x30
   bf50e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf512:	f7f6 fc0f 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf516:	e76b      	b.n	bf3f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf518:	000c7b57 	.word	0x000c7b57
   bf51c:	000c7a74 	.word	0x000c7a74
   bf520:	000c7c1e 	.word	0x000c7c1e
   bf524:	2003e620 	.word	0x2003e620
   bf528:	002c0003 	.word	0x002c0003
   bf52c:	000be8b9 	.word	0x000be8b9
   bf530:	000c7b82 	.word	0x000c7b82

000bf534 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf534:	4802      	ldr	r0, [pc, #8]	; (bf540 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf536:	2300      	movs	r3, #0
   bf538:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf53a:	f7fe baab 	b.w	bda94 <os_mutex_recursive_create>
   bf53e:	bf00      	nop
   bf540:	2003e624 	.word	0x2003e624

000bf544 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf544:	2200      	movs	r2, #0
   bf546:	6840      	ldr	r0, [r0, #4]
   bf548:	4611      	mov	r1, r2
   bf54a:	f7fe bd79 	b.w	be040 <network_ready>

000bf54e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf54e:	2200      	movs	r2, #0
   bf550:	6840      	ldr	r0, [r0, #4]
   bf552:	4611      	mov	r1, r2
   bf554:	f7fe bd94 	b.w	be080 <network_listening>

000bf558 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf558:	2200      	movs	r2, #0
   bf55a:	6840      	ldr	r0, [r0, #4]
   bf55c:	4611      	mov	r1, r2
   bf55e:	f7fe bd9f 	b.w	be0a0 <network_get_listen_timeout>

000bf562 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf562:	6840      	ldr	r0, [r0, #4]
   bf564:	2200      	movs	r2, #0
   bf566:	f7fe bd93 	b.w	be090 <network_set_listen_timeout>

000bf56a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf56a:	6840      	ldr	r0, [r0, #4]
   bf56c:	2200      	movs	r2, #0
   bf56e:	f081 0101 	eor.w	r1, r1, #1
   bf572:	f7fe bd7d 	b.w	be070 <network_listen>

000bf576 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf576:	2300      	movs	r3, #0
   bf578:	6840      	ldr	r0, [r0, #4]
   bf57a:	461a      	mov	r2, r3
   bf57c:	4619      	mov	r1, r3
   bf57e:	f7fe bd6f 	b.w	be060 <network_off>

000bf582 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf582:	2300      	movs	r3, #0
   bf584:	6840      	ldr	r0, [r0, #4]
   bf586:	461a      	mov	r2, r3
   bf588:	4619      	mov	r1, r3
   bf58a:	f7fe bd61 	b.w	be050 <network_on>

000bf58e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf58e:	2200      	movs	r2, #0
   bf590:	6840      	ldr	r0, [r0, #4]
   bf592:	4611      	mov	r1, r2
   bf594:	f7fe bd44 	b.w	be020 <network_connecting>

000bf598 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf598:	6840      	ldr	r0, [r0, #4]
   bf59a:	2200      	movs	r2, #0
   bf59c:	2102      	movs	r1, #2
   bf59e:	f7fe bd47 	b.w	be030 <network_disconnect>

000bf5a2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf5a2:	2300      	movs	r3, #0
   bf5a4:	6840      	ldr	r0, [r0, #4]
   bf5a6:	461a      	mov	r2, r3
   bf5a8:	f7fe bd32 	b.w	be010 <network_connect>

000bf5ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf5ac:	4b08      	ldr	r3, [pc, #32]	; (bf5d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf5ae:	b510      	push	{r4, lr}
   bf5b0:	2428      	movs	r4, #40	; 0x28
   bf5b2:	4622      	mov	r2, r4
   bf5b4:	4618      	mov	r0, r3
   bf5b6:	2100      	movs	r1, #0
   bf5b8:	f004 ff06 	bl	c43c8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf5bc:	4b05      	ldr	r3, [pc, #20]	; (bf5d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf5be:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf5c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf5c4:	6042      	str	r2, [r0, #4]
   bf5c6:	2204      	movs	r2, #4
   bf5c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf5ca:	4a03      	ldr	r2, [pc, #12]	; (bf5d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf5cc:	601a      	str	r2, [r3, #0]
   bf5ce:	bd10      	pop	{r4, pc}
   bf5d0:	2003e634 	.word	0x2003e634
   bf5d4:	2003e62c 	.word	0x2003e62c
   bf5d8:	000c7c48 	.word	0x000c7c48

000bf5dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf5dc:	4770      	bx	lr

000bf5de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf5de:	2000      	movs	r0, #0
   bf5e0:	4770      	bx	lr

000bf5e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf5e2:	b510      	push	{r4, lr}
   bf5e4:	2110      	movs	r1, #16
   bf5e6:	4604      	mov	r4, r0
   bf5e8:	f7f4 fd5b 	bl	b40a2 <_ZdlPvj>
   bf5ec:	4620      	mov	r0, r4
   bf5ee:	bd10      	pop	{r4, pc}

000bf5f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf5f0:	b508      	push	{r3, lr}
      { delete this; }
   bf5f2:	f7ff fff6 	bl	bf5e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf5f6:	bd08      	pop	{r3, pc}

000bf5f8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf5f8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf5fa:	2200      	movs	r2, #0
   bf5fc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf600:	6002      	str	r2, [r0, #0]
   bf602:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf604:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf606:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf608:	680c      	ldr	r4, [r1, #0]
   bf60a:	8085      	strh	r5, [r0, #4]
   bf60c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf60e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf610:	bd30      	pop	{r4, r5, pc}

000bf612 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf612:	b510      	push	{r4, lr}
   bf614:	4604      	mov	r4, r0
    free((void*)msg_);
   bf616:	6800      	ldr	r0, [r0, #0]
   bf618:	f7fe fd62 	bl	be0e0 <free>
}
   bf61c:	4620      	mov	r0, r4
   bf61e:	bd10      	pop	{r4, pc}

000bf620 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf620:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf622:	68c4      	ldr	r4, [r0, #12]
   bf624:	b1f4      	cbz	r4, bf664 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf626:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf628:	2b02      	cmp	r3, #2
   bf62a:	d103      	bne.n	bf634 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf62c:	f104 000c 	add.w	r0, r4, #12
   bf630:	f7ff ffef 	bl	bf612 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf634:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf636:	b135      	cbz	r5, bf646 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf638:	4628      	mov	r0, r5
   bf63a:	f7f4 ff1b 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   bf63e:	2110      	movs	r1, #16
   bf640:	4628      	mov	r0, r5
   bf642:	f7f4 fd2e 	bl	b40a2 <_ZdlPvj>
   bf646:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf648:	b135      	cbz	r5, bf658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf64a:	4628      	mov	r0, r5
   bf64c:	f7f4 ff12 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
   bf650:	2110      	movs	r1, #16
   bf652:	4628      	mov	r0, r5
   bf654:	f7f4 fd25 	bl	b40a2 <_ZdlPvj>
   bf658:	4620      	mov	r0, r4
   bf65a:	2114      	movs	r1, #20
   bf65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf660:	f7f4 bd1f 	b.w	b40a2 <_ZdlPvj>
   bf664:	bd38      	pop	{r3, r4, r5, pc}

000bf666 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bf666:	b510      	push	{r4, lr}
   bf668:	b088      	sub	sp, #32
   bf66a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bf66c:	4668      	mov	r0, sp
   bf66e:	f002 f87a 	bl	c1766 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bf672:	4669      	mov	r1, sp
   bf674:	a804      	add	r0, sp, #16
   bf676:	f002 f8c1 	bl	c17fc <_ZN6StringC1ERKS_>
   bf67a:	a804      	add	r0, sp, #16
   bf67c:	47a0      	blx	r4
   bf67e:	4604      	mov	r4, r0
   bf680:	a804      	add	r0, sp, #16
   bf682:	f002 f825 	bl	c16d0 <_ZN6StringD1Ev>
    String p(param);
   bf686:	4668      	mov	r0, sp
   bf688:	f002 f822 	bl	c16d0 <_ZN6StringD1Ev>
}
   bf68c:	4620      	mov	r0, r4
   bf68e:	b008      	add	sp, #32
   bf690:	bd10      	pop	{r4, pc}

000bf692 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bf692:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bf694:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bf696:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bf69a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bf69c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bf69e:	461a      	mov	r2, r3
   bf6a0:	4669      	mov	r1, sp
   bf6a2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bf6a4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bf6a8:	f8ad 4000 	strh.w	r4, [sp]
   bf6ac:	f7fe fc78 	bl	bdfa0 <spark_function>
}
   bf6b0:	b004      	add	sp, #16
   bf6b2:	bd10      	pop	{r4, pc}

000bf6b4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf6b4:	680b      	ldr	r3, [r1, #0]
   bf6b6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf6b8:	684b      	ldr	r3, [r1, #4]
   bf6ba:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf6bc:	b113      	cbz	r3, bf6c4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf6be:	685a      	ldr	r2, [r3, #4]
   bf6c0:	3201      	adds	r2, #1
   bf6c2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf6c4:	4770      	bx	lr

000bf6c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf6c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf6c8:	4604      	mov	r4, r0
   bf6ca:	4668      	mov	r0, sp
   bf6cc:	460d      	mov	r5, r1
   bf6ce:	f7ff fff1 	bl	bf6b4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf6d2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf6d4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf6d6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf6d8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf6da:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf6dc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf6de:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf6e0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf6e2:	f7f6 fb27 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf6e6:	b135      	cbz	r5, bf6f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf6e8:	1d28      	adds	r0, r5, #4
   bf6ea:	f7f6 fb23 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6ee:	2108      	movs	r1, #8
   bf6f0:	4628      	mov	r0, r5
   bf6f2:	f7f4 fcd6 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf6f6:	4620      	mov	r0, r4
   bf6f8:	b003      	add	sp, #12
   bf6fa:	bd30      	pop	{r4, r5, pc}

000bf6fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf6fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf6fe:	b510      	push	{r4, lr}
      if (_M_empty())
   bf700:	b90a      	cbnz	r2, bf706 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf702:	f002 fc39 	bl	c1f78 <_ZSt25__throw_bad_function_callv>
    }
   bf706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf70a:	68c3      	ldr	r3, [r0, #12]
   bf70c:	4718      	bx	r3

000bf70e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf70e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf710:	6800      	ldr	r0, [r0, #0]
   bf712:	f100 0110 	add.w	r1, r0, #16
   bf716:	f7ff fff1 	bl	bf6fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf71a:	bd08      	pop	{r3, pc}

000bf71c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf71c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf71e:	b510      	push	{r4, lr}
      if (_M_empty())
   bf720:	b90a      	cbnz	r2, bf726 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf722:	f002 fc29 	bl	c1f78 <_ZSt25__throw_bad_function_callv>
    }
   bf726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf72a:	68c3      	ldr	r3, [r0, #12]
   bf72c:	4718      	bx	r3

000bf72e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf72e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf730:	6800      	ldr	r0, [r0, #0]
   bf732:	f100 0110 	add.w	r1, r0, #16
   bf736:	f7ff fff1 	bl	bf71c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf73a:	bd08      	pop	{r3, pc}

000bf73c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf73c:	b538      	push	{r3, r4, r5, lr}
   bf73e:	2300      	movs	r3, #0
   bf740:	4604      	mov	r4, r0
   bf742:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf744:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf746:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf748:	f7f4 fca5 	bl	b4096 <_Znwj>
   bf74c:	b128      	cbz	r0, bf75a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf74e:	2301      	movs	r3, #1
   bf750:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf754:	4b02      	ldr	r3, [pc, #8]	; (bf760 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf756:	6003      	str	r3, [r0, #0]
   bf758:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf75a:	6020      	str	r0, [r4, #0]
	}
   bf75c:	4620      	mov	r0, r4
   bf75e:	bd38      	pop	{r3, r4, r5, pc}
   bf760:	000c7c84 	.word	0x000c7c84

000bf764 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf764:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf766:	2300      	movs	r3, #0
   bf768:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf76a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf76c:	4604      	mov	r4, r0
   bf76e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf770:	b12b      	cbz	r3, bf77e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf772:	2202      	movs	r2, #2
   bf774:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf776:	68eb      	ldr	r3, [r5, #12]
   bf778:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf77a:	68ab      	ldr	r3, [r5, #8]
   bf77c:	60a3      	str	r3, [r4, #8]
    }
   bf77e:	4620      	mov	r0, r4
   bf780:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf784:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf786:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf788:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf78a:	4668      	mov	r0, sp
   bf78c:	f7ff ff34 	bl	bf5f8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf790:	f04f 0302 	mov.w	r3, #2
   bf794:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf798:	2a00      	cmp	r2, #0
   bf79a:	d103      	bne.n	bf7a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf79c:	e8c4 3f41 	strexb	r1, r3, [r4]
   bf7a0:	2900      	cmp	r1, #0
   bf7a2:	d1f7      	bne.n	bf794 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bf7a4:	d125      	bne.n	bf7f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bf7a6:	f104 050c 	add.w	r5, r4, #12
   bf7aa:	4669      	mov	r1, sp
   bf7ac:	4628      	mov	r0, r5
   bf7ae:	f7ff ff23 	bl	bf5f8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bf7b2:	f3bf 8f5b 	dmb	ish
   bf7b6:	2301      	movs	r3, #1
   bf7b8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf7ba:	2000      	movs	r0, #0
   bf7bc:	f104 0308 	add.w	r3, r4, #8
   bf7c0:	f3bf 8f5b 	dmb	ish
   bf7c4:	e853 6f00 	ldrex	r6, [r3]
   bf7c8:	e843 0200 	strex	r2, r0, [r3]
   bf7cc:	2a00      	cmp	r2, #0
   bf7ce:	d1f9      	bne.n	bf7c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bf7d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf7d4:	b16e      	cbz	r6, bf7f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bf7d6:	f7fe fbaf 	bl	bdf38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf7da:	b178      	cbz	r0, bf7fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf7dc:	4629      	mov	r1, r5
   bf7de:	4630      	mov	r0, r6
   bf7e0:	f7ff ff8c 	bl	bf6fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bf7e4:	4630      	mov	r0, r6
   bf7e6:	f7f4 fe45 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf7ea:	2110      	movs	r1, #16
   bf7ec:	4630      	mov	r0, r6
   bf7ee:	f7f4 fc58 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bf7f2:	4668      	mov	r0, sp
   bf7f4:	f7ff ff0d 	bl	bf612 <_ZN8particle5ErrorD1Ev>
    }
   bf7f8:	b009      	add	sp, #36	; 0x24
   bf7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf7fc:	4631      	mov	r1, r6
   bf7fe:	a802      	add	r0, sp, #8
   bf800:	f7ff ffb0 	bl	bf764 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf804:	68e0      	ldr	r0, [r4, #12]
   bf806:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf80a:	b108      	cbz	r0, bf810 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bf80c:	f004 fe4a 	bl	c44a4 <strdup>
        type_(type) {
   bf810:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf812:	2010      	movs	r0, #16
   bf814:	f8ad 501c 	strh.w	r5, [sp, #28]
   bf818:	f7f4 fc3d 	bl	b4096 <_Znwj>
   bf81c:	4605      	mov	r5, r0
   bf81e:	b1e8      	cbz	r0, bf85c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bf820:	2700      	movs	r7, #0
   bf822:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf824:	2018      	movs	r0, #24
   bf826:	f7f4 fc36 	bl	b4096 <_Znwj>
   bf82a:	4604      	mov	r4, r0
   bf82c:	b188      	cbz	r0, bf852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bf82e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bf830:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf832:	a802      	add	r0, sp, #8
   bf834:	f7ff fbfe 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf838:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf83a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf83c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf83e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf840:	9204      	str	r2, [sp, #16]
   bf842:	a906      	add	r1, sp, #24
   bf844:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf846:	60e3      	str	r3, [r4, #12]
   bf848:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bf84c:	9205      	str	r2, [sp, #20]
   bf84e:	f7ff fed3 	bl	bf5f8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bf852:	4b08      	ldr	r3, [pc, #32]	; (bf874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bf854:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf856:	4b08      	ldr	r3, [pc, #32]	; (bf878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf858:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf85a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bf85c:	a806      	add	r0, sp, #24
   bf85e:	f7ff fed8 	bl	bf612 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf862:	a802      	add	r0, sp, #8
   bf864:	f7f4 fe06 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf868:	2200      	movs	r2, #0
   bf86a:	4629      	mov	r1, r5
   bf86c:	4803      	ldr	r0, [pc, #12]	; (bf87c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bf86e:	f7fe fb6b 	bl	bdf48 <application_thread_invoke>
   bf872:	e7b7      	b.n	bf7e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bf874:	000bf70f 	.word	0x000bf70f
   bf878:	000bf991 	.word	0x000bf991
   bf87c:	000be1bf 	.word	0x000be1bf

000bf880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bf880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf884:	b08b      	sub	sp, #44	; 0x2c
   bf886:	4605      	mov	r5, r0
   bf888:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bf88c:	460f      	mov	r7, r1
   bf88e:	4690      	mov	r8, r2
   bf890:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf892:	f7fe fb95 	bl	bdfc0 <spark_cloud_flag_connected>
   bf896:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bf898:	4683      	mov	fp, r0
   bf89a:	bb38      	cbnz	r0, bf8ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bf89c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bf8a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf8a2:	a905      	add	r1, sp, #20
   bf8a4:	4630      	mov	r0, r6
   bf8a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf8aa:	f7ff fea5 	bl	bf5f8 <_ZN8particle5ErrorC1EOS0_>
   bf8ae:	2014      	movs	r0, #20
   bf8b0:	f7f4 fbf1 	bl	b4096 <_Znwj>
   bf8b4:	4604      	mov	r4, r0
   bf8b6:	b148      	cbz	r0, bf8cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bf8b8:	2302      	movs	r3, #2
   bf8ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf8bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf8be:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf8c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bf8c4:	4631      	mov	r1, r6
   bf8c6:	300c      	adds	r0, #12
   bf8c8:	f7ff fe96 	bl	bf5f8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf8cc:	4628      	mov	r0, r5
	: __shared_count(__p)
   bf8ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf8d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bf8d4:	f7ff ff32 	bl	bf73c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf8d8:	4630      	mov	r0, r6
   bf8da:	f7ff fe9a 	bl	bf612 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bf8de:	a805      	add	r0, sp, #20
   bf8e0:	f7ff fe97 	bl	bf612 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bf8e4:	4628      	mov	r0, r5
   bf8e6:	b00b      	add	sp, #44	; 0x2c
   bf8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bf8ec:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bf8ee:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bf8f0:	2014      	movs	r0, #20
   bf8f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bf8f6:	9307      	str	r3, [sp, #28]
   bf8f8:	f7f4 fbcd 	bl	b4096 <_Znwj>
   bf8fc:	4601      	mov	r1, r0
   bf8fe:	b118      	cbz	r0, bf908 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf900:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf904:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf906:	7044      	strb	r4, [r0, #1]
   bf908:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf90a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bf90c:	f7ff ff16 	bl	bf73c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bf910:	4b1e      	ldr	r3, [pc, #120]	; (bf98c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bf912:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bf914:	2008      	movs	r0, #8
   bf916:	f7f4 fbbe 	bl	b4096 <_Znwj>
   bf91a:	4604      	mov	r4, r0
   bf91c:	b110      	cbz	r0, bf924 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bf91e:	a903      	add	r1, sp, #12
   bf920:	f7ff fec8 	bl	bf6b4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf924:	9600      	str	r6, [sp, #0]
   bf926:	fa5f f38a 	uxtb.w	r3, sl
   bf92a:	464a      	mov	r2, r9
   bf92c:	4641      	mov	r1, r8
   bf92e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bf930:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf932:	f7fe fb4d 	bl	bdfd0 <spark_send_event>
   bf936:	b9b8      	cbnz	r0, bf968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bf938:	9b03      	ldr	r3, [sp, #12]
   bf93a:	785b      	ldrb	r3, [r3, #1]
   bf93c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bf940:	b993      	cbnz	r3, bf968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bf942:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bf946:	a905      	add	r1, sp, #20
   bf948:	a803      	add	r0, sp, #12
   bf94a:	9205      	str	r2, [sp, #20]
   bf94c:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf950:	f7ff ff18 	bl	bf784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf954:	a805      	add	r0, sp, #20
   bf956:	f7ff fe5c 	bl	bf612 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bf95a:	a805      	add	r0, sp, #20
   bf95c:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf95e:	f7ff feb2 	bl	bf6c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bf962:	a806      	add	r0, sp, #24
   bf964:	f7f6 f9e6 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf968:	a903      	add	r1, sp, #12
   bf96a:	a805      	add	r0, sp, #20
   bf96c:	f7ff fea2 	bl	bf6b4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf970:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf972:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf974:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bf976:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bf978:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf97a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bf97c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bf97e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bf980:	f7f6 f9d8 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf984:	a804      	add	r0, sp, #16
   bf986:	f7f6 f9d5 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bf98a:	e7ab      	b.n	bf8e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bf98c:	000bfa0d 	.word	0x000bfa0d

000bf990 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bf990:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf994:	4605      	mov	r5, r0
	switch (__op)
   bf996:	d103      	bne.n	bf9a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf998:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf99a:	6003      	str	r3, [r0, #0]
      }
   bf99c:	2000      	movs	r0, #0
   bf99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bf9a0:	2a02      	cmp	r2, #2
   bf9a2:	d010      	beq.n	bf9c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bf9a4:	2a03      	cmp	r2, #3
   bf9a6:	d1f9      	bne.n	bf99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf9a8:	6804      	ldr	r4, [r0, #0]
   bf9aa:	2c00      	cmp	r4, #0
   bf9ac:	d0f6      	beq.n	bf99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bf9ae:	f104 0010 	add.w	r0, r4, #16
   bf9b2:	f7ff fe2e 	bl	bf612 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf9b6:	4620      	mov	r0, r4
   bf9b8:	f7f4 fd5c 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf9bc:	2118      	movs	r1, #24
   bf9be:	4620      	mov	r0, r4
   bf9c0:	f7f4 fb6f 	bl	b40a2 <_ZdlPvj>
   bf9c4:	e7ea      	b.n	bf99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf9c6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bf9c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf9ca:	f7f4 fb64 	bl	b4096 <_Znwj>
   bf9ce:	4604      	mov	r4, r0
   bf9d0:	b150      	cbz	r0, bf9e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bf9d2:	4631      	mov	r1, r6
   bf9d4:	f7ff fec6 	bl	bf764 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf9d8:	6930      	ldr	r0, [r6, #16]
   bf9da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf9de:	b108      	cbz	r0, bf9e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bf9e0:	f004 fd60 	bl	c44a4 <strdup>
        type_(type) {
   bf9e4:	6120      	str	r0, [r4, #16]
   bf9e6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bf9e8:	602c      	str	r4, [r5, #0]
	}
   bf9ea:	e7d7      	b.n	bf99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bf9ec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bf9ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf9ee:	2300      	movs	r3, #0
   bf9f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf9f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf9f4:	4604      	mov	r4, r0
   bf9f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf9f8:	b12b      	cbz	r3, bfa06 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf9fa:	2202      	movs	r2, #2
   bf9fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf9fe:	68eb      	ldr	r3, [r5, #12]
   bfa00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfa02:	68ab      	ldr	r3, [r5, #8]
   bfa04:	60a3      	str	r3, [r4, #8]
    }
   bfa06:	4620      	mov	r0, r4
   bfa08:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfa0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bfa0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfa0e:	b089      	sub	sp, #36	; 0x24
   bfa10:	4604      	mov	r4, r0
   bfa12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bfa14:	a801      	add	r0, sp, #4
   bfa16:	4611      	mov	r1, r2
   bfa18:	f7ff fe55 	bl	bf6c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bfa1c:	b1a4      	cbz	r4, bfa48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bfa1e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfa20:	b11d      	cbz	r5, bfa2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bfa22:	4628      	mov	r0, r5
   bfa24:	f004 fd3e 	bl	c44a4 <strdup>
   bfa28:	4605      	mov	r5, r0
   bfa2a:	a801      	add	r0, sp, #4
   bfa2c:	a903      	add	r1, sp, #12
        type_(type) {
   bfa2e:	9503      	str	r5, [sp, #12]
   bfa30:	f8ad 4010 	strh.w	r4, [sp, #16]
   bfa34:	f7ff fea6 	bl	bf784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfa38:	a803      	add	r0, sp, #12
   bfa3a:	f7ff fdea 	bl	bf612 <_ZN8particle5ErrorD1Ev>
   bfa3e:	a802      	add	r0, sp, #8
   bfa40:	f7f6 f978 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa44:	b009      	add	sp, #36	; 0x24
   bfa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bfa48:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfa4a:	2301      	movs	r3, #1
   bfa4c:	e8d5 2f4f 	ldrexb	r2, [r5]
   bfa50:	2a00      	cmp	r2, #0
   bfa52:	d103      	bne.n	bfa5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bfa54:	e8c5 3f41 	strexb	r1, r3, [r5]
   bfa58:	2900      	cmp	r1, #0
   bfa5a:	d1f7      	bne.n	bfa4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bfa5c:	d1ef      	bne.n	bfa3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bfa5e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bfa60:	f3bf 8f5b 	dmb	ish
   bfa64:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfa66:	1d2b      	adds	r3, r5, #4
   bfa68:	f3bf 8f5b 	dmb	ish
   bfa6c:	e853 6f00 	ldrex	r6, [r3]
   bfa70:	e843 4200 	strex	r2, r4, [r3]
   bfa74:	2a00      	cmp	r2, #0
   bfa76:	d1f9      	bne.n	bfa6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bfa78:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfa7c:	2e00      	cmp	r6, #0
   bfa7e:	d0de      	beq.n	bfa3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bfa80:	4620      	mov	r0, r4
   bfa82:	f7fe fa59 	bl	bdf38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfa86:	4607      	mov	r7, r0
   bfa88:	b160      	cbz	r0, bfaa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfa8a:	f105 010c 	add.w	r1, r5, #12
   bfa8e:	4630      	mov	r0, r6
   bfa90:	f7ff fe44 	bl	bf71c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bfa94:	4630      	mov	r0, r6
   bfa96:	f7f4 fced 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfa9a:	2110      	movs	r1, #16
   bfa9c:	4630      	mov	r0, r6
   bfa9e:	f7f4 fb00 	bl	b40a2 <_ZdlPvj>
   bfaa2:	e7cc      	b.n	bfa3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bfaa4:	4631      	mov	r1, r6
   bfaa6:	a803      	add	r0, sp, #12
   bfaa8:	f7ff ffa0 	bl	bf9ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bfaac:	7b2b      	ldrb	r3, [r5, #12]
   bfaae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfab2:	2010      	movs	r0, #16
   bfab4:	f7f4 faef 	bl	b4096 <_Znwj>
   bfab8:	4605      	mov	r5, r0
   bfaba:	b1d0      	cbz	r0, bfaf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bfabc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfabe:	2014      	movs	r0, #20
   bfac0:	f7f4 fae9 	bl	b4096 <_Znwj>
   bfac4:	4604      	mov	r4, r0
   bfac6:	b178      	cbz	r0, bfae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bfac8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfaca:	4601      	mov	r1, r0
   bfacc:	a803      	add	r0, sp, #12
   bface:	f7ff fab1 	bl	bf034 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfad2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfad4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfad6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfad8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bfada:	9205      	str	r2, [sp, #20]
   bfadc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfade:	60e3      	str	r3, [r4, #12]
   bfae0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bfae4:	9206      	str	r2, [sp, #24]
   bfae6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bfae8:	4b06      	ldr	r3, [pc, #24]	; (bfb04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bfaea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfaec:	4b06      	ldr	r3, [pc, #24]	; (bfb08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfaee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfaf0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bfaf2:	a803      	add	r0, sp, #12
   bfaf4:	f7f4 fcbe 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfaf8:	2200      	movs	r2, #0
   bfafa:	4629      	mov	r1, r5
   bfafc:	4803      	ldr	r0, [pc, #12]	; (bfb0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bfafe:	f7fe fa23 	bl	bdf48 <application_thread_invoke>
   bfb02:	e7c7      	b.n	bfa94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bfb04:	000bf72f 	.word	0x000bf72f
   bfb08:	000bfb11 	.word	0x000bfb11
   bfb0c:	000be1bf 	.word	0x000be1bf

000bfb10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bfb10:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfb12:	b570      	push	{r4, r5, r6, lr}
   bfb14:	4604      	mov	r4, r0
	switch (__op)
   bfb16:	d103      	bne.n	bfb20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfb18:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfb1a:	6003      	str	r3, [r0, #0]
      }
   bfb1c:	2000      	movs	r0, #0
   bfb1e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bfb20:	2a02      	cmp	r2, #2
   bfb22:	d00c      	beq.n	bfb3e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bfb24:	2a03      	cmp	r2, #3
   bfb26:	d1f9      	bne.n	bfb1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfb28:	6804      	ldr	r4, [r0, #0]
   bfb2a:	2c00      	cmp	r4, #0
   bfb2c:	d0f6      	beq.n	bfb1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bfb2e:	4620      	mov	r0, r4
   bfb30:	f7f4 fca0 	bl	b4474 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfb34:	2114      	movs	r1, #20
   bfb36:	4620      	mov	r0, r4
   bfb38:	f7f4 fab3 	bl	b40a2 <_ZdlPvj>
   bfb3c:	e7ee      	b.n	bfb1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfb3e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bfb40:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfb42:	f7f4 faa8 	bl	b4096 <_Znwj>
   bfb46:	4605      	mov	r5, r0
   bfb48:	b120      	cbz	r0, bfb54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bfb4a:	4631      	mov	r1, r6
   bfb4c:	f7ff ff4e 	bl	bf9ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bfb50:	7c33      	ldrb	r3, [r6, #16]
   bfb52:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bfb54:	6025      	str	r5, [r4, #0]
	}
   bfb56:	e7e1      	b.n	bfb1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bfb58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bfb58:	2200      	movs	r2, #0
   bfb5a:	6840      	ldr	r0, [r0, #4]
   bfb5c:	4611      	mov	r1, r2
   bfb5e:	f7fe ba8f 	b.w	be080 <network_listening>

000bfb62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bfb62:	2200      	movs	r2, #0
   bfb64:	6840      	ldr	r0, [r0, #4]
   bfb66:	4611      	mov	r1, r2
   bfb68:	f7fe ba9a 	b.w	be0a0 <network_get_listen_timeout>

000bfb6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bfb6c:	6840      	ldr	r0, [r0, #4]
   bfb6e:	2200      	movs	r2, #0
   bfb70:	f7fe ba8e 	b.w	be090 <network_set_listen_timeout>

000bfb74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bfb74:	6840      	ldr	r0, [r0, #4]
   bfb76:	2200      	movs	r2, #0
   bfb78:	f081 0101 	eor.w	r1, r1, #1
   bfb7c:	f7fe ba78 	b.w	be070 <network_listen>

000bfb80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bfb80:	2300      	movs	r3, #0
   bfb82:	6840      	ldr	r0, [r0, #4]
   bfb84:	461a      	mov	r2, r3
   bfb86:	4619      	mov	r1, r3
   bfb88:	f7fe ba6a 	b.w	be060 <network_off>

000bfb8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bfb8c:	2300      	movs	r3, #0
   bfb8e:	6840      	ldr	r0, [r0, #4]
   bfb90:	461a      	mov	r2, r3
   bfb92:	4619      	mov	r1, r3
   bfb94:	f7fe ba5c 	b.w	be050 <network_on>

000bfb98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bfb98:	2200      	movs	r2, #0
   bfb9a:	6840      	ldr	r0, [r0, #4]
   bfb9c:	4611      	mov	r1, r2
   bfb9e:	f7fe ba4f 	b.w	be040 <network_ready>

000bfba2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bfba2:	2200      	movs	r2, #0
   bfba4:	6840      	ldr	r0, [r0, #4]
   bfba6:	4611      	mov	r1, r2
   bfba8:	f7fe ba3a 	b.w	be020 <network_connecting>

000bfbac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bfbac:	6840      	ldr	r0, [r0, #4]
   bfbae:	2200      	movs	r2, #0
   bfbb0:	2102      	movs	r1, #2
   bfbb2:	f7fe ba3d 	b.w	be030 <network_disconnect>

000bfbb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bfbb6:	2300      	movs	r3, #0
   bfbb8:	6840      	ldr	r0, [r0, #4]
   bfbba:	461a      	mov	r2, r3
   bfbbc:	f7fe ba28 	b.w	be010 <network_connect>

000bfbc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bfbc0:	4b02      	ldr	r3, [pc, #8]	; (bfbcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bfbc2:	2203      	movs	r2, #3
   bfbc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bfbc6:	4a02      	ldr	r2, [pc, #8]	; (bfbd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bfbc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bfbca:	4770      	bx	lr
   bfbcc:	2003e65c 	.word	0x2003e65c
   bfbd0:	000c7ca0 	.word	0x000c7ca0

000bfbd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bfbd4:	4770      	bx	lr

000bfbd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bfbd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfbd8:	4606      	mov	r6, r0
   bfbda:	4615      	mov	r5, r2
   bfbdc:	460c      	mov	r4, r1
   bfbde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bfbe0:	42bc      	cmp	r4, r7
   bfbe2:	d006      	beq.n	bfbf2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bfbe4:	6833      	ldr	r3, [r6, #0]
   bfbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
   bfbea:	689b      	ldr	r3, [r3, #8]
   bfbec:	4630      	mov	r0, r6
   bfbee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bfbf0:	e7f6      	b.n	bfbe0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bfbf2:	4628      	mov	r0, r5
   bfbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfbf6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bfbf6:	7c00      	ldrb	r0, [r0, #16]
   bfbf8:	2200      	movs	r2, #0
   bfbfa:	f7fd bffb 	b.w	bdbf4 <hal_i2c_write>

000bfbfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bfbfe:	7c00      	ldrb	r0, [r0, #16]
   bfc00:	2100      	movs	r1, #0
   bfc02:	f7fd bfff 	b.w	bdc04 <hal_i2c_available>

000bfc06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bfc06:	7c00      	ldrb	r0, [r0, #16]
   bfc08:	2100      	movs	r1, #0
   bfc0a:	f7fe b803 	b.w	bdc14 <hal_i2c_read>

000bfc0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bfc0e:	7c00      	ldrb	r0, [r0, #16]
   bfc10:	2100      	movs	r1, #0
   bfc12:	f7fe b807 	b.w	bdc24 <hal_i2c_peek>

000bfc16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bfc16:	7c00      	ldrb	r0, [r0, #16]
   bfc18:	2100      	movs	r1, #0
   bfc1a:	f7fe b80b 	b.w	bdc34 <hal_i2c_flush>

000bfc1e <_ZN7TwoWireD0Ev>:
   bfc1e:	b510      	push	{r4, lr}
   bfc20:	2114      	movs	r1, #20
   bfc22:	4604      	mov	r4, r0
   bfc24:	f7f4 fa3d 	bl	b40a2 <_ZdlPvj>
   bfc28:	4620      	mov	r0, r4
   bfc2a:	bd10      	pop	{r4, pc}

000bfc2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bfc2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bfc2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfc32:	4604      	mov	r4, r0
   bfc34:	4608      	mov	r0, r1
   bfc36:	2100      	movs	r1, #0
   bfc38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bfc3c:	4b03      	ldr	r3, [pc, #12]	; (bfc4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bfc3e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bfc40:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bfc42:	4611      	mov	r1, r2
   bfc44:	f7fe f806 	bl	bdc54 <hal_i2c_init>
}
   bfc48:	4620      	mov	r0, r4
   bfc4a:	bd10      	pop	{r4, pc}
   bfc4c:	000c7cdc 	.word	0x000c7cdc

000bfc50 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bfc50:	7c00      	ldrb	r0, [r0, #16]
   bfc52:	2200      	movs	r2, #0
   bfc54:	f7fd bfae 	b.w	bdbb4 <hal_i2c_set_speed>

000bfc58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bfc58:	2300      	movs	r3, #0
   bfc5a:	7c00      	ldrb	r0, [r0, #16]
   bfc5c:	461a      	mov	r2, r3
   bfc5e:	4619      	mov	r1, r3
   bfc60:	f7fd bfb0 	b.w	bdbc4 <hal_i2c_begin>

000bfc64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bfc64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bfc66:	2200      	movs	r2, #0
   bfc68:	2314      	movs	r3, #20
   bfc6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bfc6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bfc72:	780b      	ldrb	r3, [r1, #0]
   bfc74:	f88d 3008 	strb.w	r3, [sp, #8]
   bfc78:	684b      	ldr	r3, [r1, #4]
   bfc7a:	9303      	str	r3, [sp, #12]
   bfc7c:	68cb      	ldr	r3, [r1, #12]
   bfc7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bfc80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bfc82:	7a0b      	ldrb	r3, [r1, #8]
   bfc84:	9305      	str	r3, [sp, #20]
   bfc86:	a901      	add	r1, sp, #4
   bfc88:	f7fd ffec 	bl	bdc64 <hal_i2c_request_ex>
}
   bfc8c:	b007      	add	sp, #28
   bfc8e:	f85d fb04 	ldr.w	pc, [sp], #4

000bfc92 <_ZN7TwoWire11requestFromEhjh>:
{
   bfc92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bfc94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bfc96:	f88d 1000 	strb.w	r1, [sp]
   bfc9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bfc9e:	9103      	str	r1, [sp, #12]
   bfca0:	bf18      	it	ne
   bfca2:	2301      	movne	r3, #1
   bfca4:	4669      	mov	r1, sp
    size_ = size;
   bfca6:	9201      	str	r2, [sp, #4]
   bfca8:	f88d 3008 	strb.w	r3, [sp, #8]
   bfcac:	f7ff ffda 	bl	bfc64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bfcb0:	b005      	add	sp, #20
   bfcb2:	f85d fb04 	ldr.w	pc, [sp], #4

000bfcb6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bfcb6:	2301      	movs	r3, #1
   bfcb8:	f7ff bfeb 	b.w	bfc92 <_ZN7TwoWire11requestFromEhjh>

000bfcbc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bfcbc:	7c00      	ldrb	r0, [r0, #16]
   bfcbe:	2200      	movs	r2, #0
   bfcc0:	f7fd bf88 	b.w	bdbd4 <hal_i2c_begin_transmission>

000bfcc4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bfcc4:	b2c9      	uxtb	r1, r1
   bfcc6:	f7ff bff9 	b.w	bfcbc <_ZN7TwoWire17beginTransmissionEh>

000bfcca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bfcca:	7c00      	ldrb	r0, [r0, #16]
   bfccc:	2200      	movs	r2, #0
   bfcce:	f7fd bf89 	b.w	bdbe4 <hal_i2c_end_transmission>

000bfcd2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bfcd2:	2101      	movs	r1, #1
   bfcd4:	f7ff bff9 	b.w	bfcca <_ZN7TwoWire15endTransmissionEh>

000bfcd8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bfcd8:	f7fd bf5c 	b.w	bdb94 <HAL_Interrupts_Disable_All>

000bfcdc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bfcdc:	f7fd bf52 	b.w	bdb84 <HAL_Interrupts_Enable_All>

000bfce0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bfce0:	4770      	bx	lr

000bfce2 <_ZN9IPAddressD0Ev>:
   bfce2:	b510      	push	{r4, lr}
   bfce4:	2118      	movs	r1, #24
   bfce6:	4604      	mov	r4, r0
   bfce8:	f7f4 f9db 	bl	b40a2 <_ZdlPvj>
   bfcec:	4620      	mov	r0, r4
   bfcee:	bd10      	pop	{r4, pc}

000bfcf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bfcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bfcf2:	7d03      	ldrb	r3, [r0, #20]
   bfcf4:	2b06      	cmp	r3, #6
{
   bfcf6:	b08d      	sub	sp, #52	; 0x34
   bfcf8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfcfa:	f100 0704 	add.w	r7, r0, #4
   bfcfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bfd02:	d012      	beq.n	bfd2a <_ZNK9IPAddress7printToER5Print+0x3a>
   bfd04:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bfd08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bfd0c:	220a      	movs	r2, #10
   bfd0e:	4630      	mov	r0, r6
   bfd10:	f001 fabd 	bl	c128e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bfd14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bfd16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bfd18:	d019      	beq.n	bfd4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bfd1a:	2c00      	cmp	r4, #0
   bfd1c:	d0f4      	beq.n	bfd08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bfd1e:	212e      	movs	r1, #46	; 0x2e
   bfd20:	4630      	mov	r0, r6
   bfd22:	f001 fa95 	bl	c1250 <_ZN5Print5printEc>
   bfd26:	4404      	add	r4, r0
   bfd28:	e7ee      	b.n	bfd08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfd2a:	232f      	movs	r3, #47	; 0x2f
   bfd2c:	466a      	mov	r2, sp
   bfd2e:	4639      	mov	r1, r7
   bfd30:	200a      	movs	r0, #10
		buf[0] = 0;
   bfd32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfd36:	f7fd ff9d 	bl	bdc74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bfd3a:	4668      	mov	r0, sp
   bfd3c:	f004 fbcf 	bl	c44de <strlen>
   bfd40:	6833      	ldr	r3, [r6, #0]
   bfd42:	4602      	mov	r2, r0
   bfd44:	68db      	ldr	r3, [r3, #12]
   bfd46:	4669      	mov	r1, sp
   bfd48:	4630      	mov	r0, r6
   bfd4a:	4798      	blx	r3
   bfd4c:	4604      	mov	r4, r0
    }
    return n;
}
   bfd4e:	4620      	mov	r0, r4
   bfd50:	b00d      	add	sp, #52	; 0x34
   bfd52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bfd54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bfd54:	b510      	push	{r4, lr}
   bfd56:	4b05      	ldr	r3, [pc, #20]	; (bfd6c <_ZN9IPAddressC1Ev+0x18>)
   bfd58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bfd5a:	2211      	movs	r2, #17
   bfd5c:	f840 3b04 	str.w	r3, [r0], #4
   bfd60:	2100      	movs	r1, #0
   bfd62:	f004 fb31 	bl	c43c8 <memset>
}
   bfd66:	4620      	mov	r0, r4
   bfd68:	bd10      	pop	{r4, pc}
   bfd6a:	bf00      	nop
   bfd6c:	000c7d04 	.word	0x000c7d04

000bfd70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bfd70:	4603      	mov	r3, r0
   bfd72:	4a07      	ldr	r2, [pc, #28]	; (bfd90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bfd74:	b510      	push	{r4, lr}
   bfd76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bfd7a:	f101 0210 	add.w	r2, r1, #16
   bfd7e:	f851 4b04 	ldr.w	r4, [r1], #4
   bfd82:	f843 4b04 	str.w	r4, [r3], #4
   bfd86:	4291      	cmp	r1, r2
   bfd88:	d1f9      	bne.n	bfd7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bfd8a:	780a      	ldrb	r2, [r1, #0]
   bfd8c:	701a      	strb	r2, [r3, #0]
}
   bfd8e:	bd10      	pop	{r4, pc}
   bfd90:	000c7d04 	.word	0x000c7d04

000bfd94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bfd94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bfd96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bfd9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bfd9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bfda2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bfda6:	2304      	movs	r3, #4
   bfda8:	6041      	str	r1, [r0, #4]
   bfdaa:	7503      	strb	r3, [r0, #20]
}
   bfdac:	bd10      	pop	{r4, pc}
	...

000bfdb0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bfdb0:	b507      	push	{r0, r1, r2, lr}
   bfdb2:	4b06      	ldr	r3, [pc, #24]	; (bfdcc <_ZN9IPAddressC1EPKh+0x1c>)
   bfdb4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bfdb6:	78cb      	ldrb	r3, [r1, #3]
   bfdb8:	9300      	str	r3, [sp, #0]
   bfdba:	788b      	ldrb	r3, [r1, #2]
   bfdbc:	784a      	ldrb	r2, [r1, #1]
   bfdbe:	7809      	ldrb	r1, [r1, #0]
   bfdc0:	f7ff ffe8 	bl	bfd94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bfdc4:	b003      	add	sp, #12
   bfdc6:	f85d fb04 	ldr.w	pc, [sp], #4
   bfdca:	bf00      	nop
   bfdcc:	000c7d04 	.word	0x000c7d04

000bfdd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bfdd0:	f100 0310 	add.w	r3, r0, #16
   bfdd4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bfdd6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bfdda:	2901      	cmp	r1, #1
   bfddc:	4618      	mov	r0, r3
   bfdde:	d108      	bne.n	bfdf2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bfde0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bfde4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bfde8:	3a01      	subs	r2, #1
   bfdea:	f103 0310 	add.w	r3, r3, #16
   bfdee:	d1f2      	bne.n	bfdd6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bfdf0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bfdf2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bfdf4:	bf04      	itt	eq
   bfdf6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bfdfa:	1852      	addeq	r2, r2, r1
   bfdfc:	e7f4      	b.n	bfde8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bfdfe <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bfdfe:	b40e      	push	{r1, r2, r3}
   bfe00:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfe02:	b088      	sub	sp, #32
   bfe04:	af00      	add	r7, sp, #0
   bfe06:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe0a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bfe0c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe10:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bfe12:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe14:	462b      	mov	r3, r5
   bfe16:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bfe18:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe1a:	f7fe f989 	bl	be130 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bfe1e:	280f      	cmp	r0, #15
   bfe20:	687a      	ldr	r2, [r7, #4]
   bfe22:	d91a      	bls.n	bfe5a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bfe24:	f100 0308 	add.w	r3, r0, #8
   bfe28:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bfe2c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bfe2e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe32:	1c41      	adds	r1, r0, #1
   bfe34:	462b      	mov	r3, r5
   bfe36:	4668      	mov	r0, sp
        va_start(args, fmt);
   bfe38:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bfe3a:	f7fe f979 	bl	be130 <vsnprintf>
        if (n > 0) {
   bfe3e:	1e02      	subs	r2, r0, #0
   bfe40:	dd04      	ble.n	bfe4c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bfe42:	6823      	ldr	r3, [r4, #0]
   bfe44:	4669      	mov	r1, sp
   bfe46:	689b      	ldr	r3, [r3, #8]
   bfe48:	4620      	mov	r0, r4
   bfe4a:	4798      	blx	r3
   bfe4c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bfe4e:	3720      	adds	r7, #32
   bfe50:	46bd      	mov	sp, r7
   bfe52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bfe56:	b003      	add	sp, #12
   bfe58:	4770      	bx	lr
    } else if (n > 0) {
   bfe5a:	2800      	cmp	r0, #0
   bfe5c:	d0f7      	beq.n	bfe4e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bfe5e:	6823      	ldr	r3, [r4, #0]
   bfe60:	4602      	mov	r2, r0
   bfe62:	689b      	ldr	r3, [r3, #8]
   bfe64:	f107 0110 	add.w	r1, r7, #16
   bfe68:	4620      	mov	r0, r4
   bfe6a:	4798      	blx	r3
}
   bfe6c:	e7ef      	b.n	bfe4e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bfe6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfe6e:	b538      	push	{r3, r4, r5, lr}
   bfe70:	680b      	ldr	r3, [r1, #0]
   bfe72:	6003      	str	r3, [r0, #0]
   bfe74:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bfe76:	6843      	ldr	r3, [r0, #4]
   bfe78:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfe7a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bfe7c:	d008      	beq.n	bfe90 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bfe7e:	b115      	cbz	r5, bfe86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bfe80:	686b      	ldr	r3, [r5, #4]
   bfe82:	3301      	adds	r3, #1
   bfe84:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bfe86:	6860      	ldr	r0, [r4, #4]
   bfe88:	b108      	cbz	r0, bfe8e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bfe8a:	f7fe fa56 	bl	be33a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bfe8e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bfe90:	bd38      	pop	{r3, r4, r5, pc}

000bfe92 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bfe92:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfe94:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bfe96:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfe9a:	689b      	ldr	r3, [r3, #8]
   bfe9c:	2201      	movs	r2, #1
   bfe9e:	f10d 0107 	add.w	r1, sp, #7
   bfea2:	4798      	blx	r3
}
   bfea4:	b003      	add	sp, #12
   bfea6:	f85d fb04 	ldr.w	pc, [sp], #4

000bfeaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfeaa:	460b      	mov	r3, r1
   bfeac:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bfeae:	2200      	movs	r2, #0
   bfeb0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bfeb2:	e9c0 2200 	strd	r2, r2, [r0]
   bfeb6:	4604      	mov	r4, r0
        t_ = t;
   bfeb8:	6083      	str	r3, [r0, #8]
    if (t) {
   bfeba:	b90b      	cbnz	r3, bfec0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bfebc:	4620      	mov	r0, r4
   bfebe:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bfec0:	f7ff ffd5 	bl	bfe6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bfec4:	e7fa      	b.n	bfebc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bfec6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bfec6:	6883      	ldr	r3, [r0, #8]
   bfec8:	b1eb      	cbz	r3, bff06 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bfeca:	781a      	ldrb	r2, [r3, #0]
   bfecc:	2a03      	cmp	r2, #3
   bfece:	d81a      	bhi.n	bff06 <_ZNK5spark9JSONValue4typeEv+0x40>
   bfed0:	e8df f002 	tbb	[pc, r2]
   bfed4:	1b021704 	.word	0x1b021704
   bfed8:	2005      	movs	r0, #5
   bfeda:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bfedc:	6802      	ldr	r2, [r0, #0]
   bfede:	685b      	ldr	r3, [r3, #4]
   bfee0:	6852      	ldr	r2, [r2, #4]
   bfee2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bfee4:	282d      	cmp	r0, #45	; 0x2d
   bfee6:	d012      	beq.n	bff0e <_ZNK5spark9JSONValue4typeEv+0x48>
   bfee8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfeec:	2b09      	cmp	r3, #9
   bfeee:	d90e      	bls.n	bff0e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bfef0:	2874      	cmp	r0, #116	; 0x74
   bfef2:	d00e      	beq.n	bff12 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bfef4:	2866      	cmp	r0, #102	; 0x66
   bfef6:	d00c      	beq.n	bff12 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bfef8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bfefc:	4258      	negs	r0, r3
   bfefe:	4158      	adcs	r0, r3
   bff00:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bff02:	2006      	movs	r0, #6
   bff04:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bff06:	2000      	movs	r0, #0
   bff08:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bff0a:	2004      	movs	r0, #4
   bff0c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bff0e:	2003      	movs	r0, #3
   bff10:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bff12:	2002      	movs	r0, #2
}
   bff14:	4770      	bx	lr

000bff16 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bff16:	b510      	push	{r4, lr}
   bff18:	4604      	mov	r4, r0
    switch (type()) {
   bff1a:	f7ff ffd4 	bl	bfec6 <_ZNK5spark9JSONValue4typeEv>
   bff1e:	2802      	cmp	r0, #2
   bff20:	d00e      	beq.n	bff40 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bff22:	1ec3      	subs	r3, r0, #3
   bff24:	b2db      	uxtb	r3, r3
   bff26:	2b01      	cmp	r3, #1
   bff28:	d814      	bhi.n	bff54 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bff2a:	6822      	ldr	r2, [r4, #0]
   bff2c:	68a3      	ldr	r3, [r4, #8]
   bff2e:	6850      	ldr	r0, [r2, #4]
   bff30:	685b      	ldr	r3, [r3, #4]
}
   bff32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bff36:	220a      	movs	r2, #10
   bff38:	2100      	movs	r1, #0
   bff3a:	4418      	add	r0, r3
   bff3c:	f005 b9f8 	b.w	c5330 <strtol>
        const char* const s = d_->json + t_->start;
   bff40:	6822      	ldr	r2, [r4, #0]
   bff42:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bff44:	6852      	ldr	r2, [r2, #4]
   bff46:	685b      	ldr	r3, [r3, #4]
   bff48:	5cd0      	ldrb	r0, [r2, r3]
   bff4a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bff4e:	4258      	negs	r0, r3
   bff50:	4158      	adcs	r0, r3
}
   bff52:	bd10      	pop	{r4, pc}
    switch (type()) {
   bff54:	2000      	movs	r0, #0
   bff56:	e7fc      	b.n	bff52 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bff58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bff58:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bff5a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bff5c:	e9c0 3300 	strd	r3, r3, [r0]
   bff60:	4604      	mov	r4, r0
        n_(0) {
   bff62:	480e      	ldr	r0, [pc, #56]	; (bff9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bff64:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bff68:	b1a9      	cbz	r1, bff96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bff6a:	780b      	ldrb	r3, [r1, #0]
   bff6c:	2b03      	cmp	r3, #3
   bff6e:	d006      	beq.n	bff7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bff70:	b98b      	cbnz	r3, bff96 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bff72:	6813      	ldr	r3, [r2, #0]
   bff74:	6858      	ldr	r0, [r3, #4]
   bff76:	684b      	ldr	r3, [r1, #4]
   bff78:	5cc3      	ldrb	r3, [r0, r3]
   bff7a:	2b6e      	cmp	r3, #110	; 0x6e
   bff7c:	d007      	beq.n	bff8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bff7e:	6813      	ldr	r3, [r2, #0]
   bff80:	684d      	ldr	r5, [r1, #4]
   bff82:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bff84:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bff86:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bff88:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bff8a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bff8c:	60e3      	str	r3, [r4, #12]
   bff8e:	4611      	mov	r1, r2
   bff90:	4620      	mov	r0, r4
   bff92:	f7ff ff6c 	bl	bfe6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bff96:	4620      	mov	r0, r4
   bff98:	bd38      	pop	{r3, r4, r5, pc}
   bff9a:	bf00      	nop
   bff9c:	000c7d73 	.word	0x000c7d73

000bffa0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bffa0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bffa2:	2500      	movs	r5, #0
   bffa4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bffa6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bffaa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bffae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bffb2:	4604      	mov	r4, r0
   bffb4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bffb6:	b14b      	cbz	r3, bffcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bffb8:	781a      	ldrb	r2, [r3, #0]
   bffba:	2a01      	cmp	r2, #1
   bffbc:	d106      	bne.n	bffcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bffbe:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bffc2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bffc4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bffc6:	6143      	str	r3, [r0, #20]
   bffc8:	f7ff ff51 	bl	bfe6e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bffcc:	4620      	mov	r0, r4
   bffce:	bd38      	pop	{r3, r4, r5, pc}

000bffd0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bffd0:	b510      	push	{r4, lr}
    if (!n_) {
   bffd2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bffd4:	4604      	mov	r4, r0
    if (!n_) {
   bffd6:	b163      	cbz	r3, bfff2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bffd8:	6880      	ldr	r0, [r0, #8]
   bffda:	60e0      	str	r0, [r4, #12]
    --n_;
   bffdc:	3b01      	subs	r3, #1
    ++t_;
   bffde:	3010      	adds	r0, #16
   bffe0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bffe2:	6120      	str	r0, [r4, #16]
    --n_;
   bffe4:	6163      	str	r3, [r4, #20]
    if (n_) {
   bffe6:	b113      	cbz	r3, bffee <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bffe8:	f7ff fef2 	bl	bfdd0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bffec:	60a0      	str	r0, [r4, #8]
    return true;
   bffee:	2001      	movs	r0, #1
   bfff0:	e000      	b.n	bfff4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bfff2:	4618      	mov	r0, r3
}
   bfff4:	bd10      	pop	{r4, pc}

000bfff6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfff6:	b510      	push	{r4, lr}
    write('}');
   bfff8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfffa:	4604      	mov	r4, r0
    write('}');
   bfffc:	f7ff ff49 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c0000:	2301      	movs	r3, #1
   c0002:	7123      	strb	r3, [r4, #4]
}
   c0004:	4620      	mov	r0, r4
   c0006:	bd10      	pop	{r4, pc}

000c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c0008:	b508      	push	{r3, lr}
    switch (state_) {
   c000a:	7903      	ldrb	r3, [r0, #4]
   c000c:	2b01      	cmp	r3, #1
   c000e:	d002      	beq.n	c0016 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c0010:	2b02      	cmp	r3, #2
   c0012:	d004      	beq.n	c001e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c0014:	bd08      	pop	{r3, pc}
        write(',');
   c0016:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c0018:	f7ff ff3b 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
}
   c001c:	e7fa      	b.n	c0014 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c001e:	213a      	movs	r1, #58	; 0x3a
   c0020:	e7fa      	b.n	c0018 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c0022 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c0022:	b510      	push	{r4, lr}
   c0024:	4604      	mov	r4, r0
    writeSeparator();
   c0026:	f7ff ffef 	bl	c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c002a:	4620      	mov	r0, r4
   c002c:	217b      	movs	r1, #123	; 0x7b
   c002e:	f7ff ff30 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c0032:	2300      	movs	r3, #0
   c0034:	7123      	strb	r3, [r4, #4]
}
   c0036:	4620      	mov	r0, r4
   c0038:	bd10      	pop	{r4, pc}
	...

000c003c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c003c:	b513      	push	{r0, r1, r4, lr}
   c003e:	4604      	mov	r4, r0
   c0040:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c0042:	f7ff ffe1 	bl	c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c0046:	6823      	ldr	r3, [r4, #0]
   c0048:	9a01      	ldr	r2, [sp, #4]
   c004a:	68db      	ldr	r3, [r3, #12]
   c004c:	4903      	ldr	r1, [pc, #12]	; (c005c <_ZN5spark10JSONWriter5valueEi+0x20>)
   c004e:	4620      	mov	r0, r4
   c0050:	4798      	blx	r3
    state_ = NEXT;
   c0052:	2301      	movs	r3, #1
}
   c0054:	4620      	mov	r0, r4
    state_ = NEXT;
   c0056:	7123      	strb	r3, [r4, #4]
}
   c0058:	b002      	add	sp, #8
   c005a:	bd10      	pop	{r4, pc}
   c005c:	000c670d 	.word	0x000c670d

000c0060 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c0060:	b513      	push	{r0, r1, r4, lr}
   c0062:	4604      	mov	r4, r0
   c0064:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c0066:	f7ff ffcf 	bl	c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c006a:	6823      	ldr	r3, [r4, #0]
   c006c:	9a01      	ldr	r2, [sp, #4]
   c006e:	68db      	ldr	r3, [r3, #12]
   c0070:	4903      	ldr	r1, [pc, #12]	; (c0080 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c0072:	4620      	mov	r0, r4
   c0074:	4798      	blx	r3
    state_ = NEXT;
   c0076:	2301      	movs	r3, #1
}
   c0078:	4620      	mov	r0, r4
    state_ = NEXT;
   c007a:	7123      	strb	r3, [r4, #4]
}
   c007c:	b002      	add	sp, #8
   c007e:	bd10      	pop	{r4, pc}
   c0080:	000c7d10 	.word	0x000c7d10

000c0084 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c0084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0088:	460d      	mov	r5, r1
    write('"');
   c008a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c008c:	4690      	mov	r8, r2
   c008e:	4604      	mov	r4, r0
    write('"');
   c0090:	f7ff feff 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c0094:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c013c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c0098:	44a8      	add	r8, r5
    const char *s = str;
   c009a:	462f      	mov	r7, r5
    while (s != end) {
   c009c:	4547      	cmp	r7, r8
   c009e:	46ba      	mov	sl, r7
   c00a0:	d03d      	beq.n	c011e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c00a2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c00a6:	2e22      	cmp	r6, #34	; 0x22
   c00a8:	d006      	beq.n	c00b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c00aa:	2e5c      	cmp	r6, #92	; 0x5c
   c00ac:	d004      	beq.n	c00b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c00ae:	4630      	mov	r0, r6
   c00b0:	f004 f94a 	bl	c4348 <isprint>
   c00b4:	2800      	cmp	r0, #0
   c00b6:	d1f1      	bne.n	c009c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c00b8:	6823      	ldr	r3, [r4, #0]
   c00ba:	ebaa 0205 	sub.w	r2, sl, r5
   c00be:	689b      	ldr	r3, [r3, #8]
   c00c0:	4629      	mov	r1, r5
   c00c2:	4620      	mov	r0, r4
   c00c4:	4798      	blx	r3
            write('\\');
   c00c6:	215c      	movs	r1, #92	; 0x5c
   c00c8:	4620      	mov	r0, r4
   c00ca:	f7ff fee2 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c00ce:	2e0d      	cmp	r6, #13
   c00d0:	d80a      	bhi.n	c00e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c00d2:	2e07      	cmp	r6, #7
   c00d4:	d91c      	bls.n	c0110 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c00d6:	f1a6 0308 	sub.w	r3, r6, #8
   c00da:	2b05      	cmp	r3, #5
   c00dc:	d818      	bhi.n	c0110 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c00de:	e8df f003 	tbb	[pc, r3]
   c00e2:	0f0d      	.short	0x0f0d
   c00e4:	15131711 	.word	0x15131711
   c00e8:	2e22      	cmp	r6, #34	; 0x22
   c00ea:	d001      	beq.n	c00f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c00ec:	2e5c      	cmp	r6, #92	; 0x5c
   c00ee:	d10f      	bne.n	c0110 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c00f0:	4631      	mov	r1, r6
                write('b');
   c00f2:	4620      	mov	r0, r4
   c00f4:	f7ff fecd 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c00f8:	463d      	mov	r5, r7
    while (s != end) {
   c00fa:	e7cf      	b.n	c009c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c00fc:	2162      	movs	r1, #98	; 0x62
   c00fe:	e7f8      	b.n	c00f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c0100:	2174      	movs	r1, #116	; 0x74
   c0102:	e7f6      	b.n	c00f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c0104:	216e      	movs	r1, #110	; 0x6e
   c0106:	e7f4      	b.n	c00f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c0108:	2166      	movs	r1, #102	; 0x66
   c010a:	e7f2      	b.n	c00f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c010c:	2172      	movs	r1, #114	; 0x72
   c010e:	e7f0      	b.n	c00f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c0110:	6823      	ldr	r3, [r4, #0]
   c0112:	4632      	mov	r2, r6
   c0114:	68db      	ldr	r3, [r3, #12]
   c0116:	4649      	mov	r1, r9
   c0118:	4620      	mov	r0, r4
   c011a:	4798      	blx	r3
                break;
   c011c:	e7ec      	b.n	c00f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c011e:	42bd      	cmp	r5, r7
   c0120:	d005      	beq.n	c012e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c0122:	6823      	ldr	r3, [r4, #0]
   c0124:	1b7a      	subs	r2, r7, r5
   c0126:	689b      	ldr	r3, [r3, #8]
   c0128:	4629      	mov	r1, r5
   c012a:	4620      	mov	r0, r4
   c012c:	4798      	blx	r3
    }
    write('"');
   c012e:	2122      	movs	r1, #34	; 0x22
   c0130:	4620      	mov	r0, r4
   c0132:	f7ff feae 	bl	bfe92 <_ZN5spark10JSONWriter5writeEc>
}
   c0136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c013a:	bf00      	nop
   c013c:	000c7d13 	.word	0x000c7d13

000c0140 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c0140:	b513      	push	{r0, r1, r4, lr}
   c0142:	4604      	mov	r4, r0
   c0144:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0148:	f7ff ff5e 	bl	c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c014c:	4620      	mov	r0, r4
   c014e:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0152:	f7ff ff97 	bl	c0084 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c0156:	2302      	movs	r3, #2
}
   c0158:	4620      	mov	r0, r4
    state_ = VALUE;
   c015a:	7123      	strb	r3, [r4, #4]
}
   c015c:	b002      	add	sp, #8
   c015e:	bd10      	pop	{r4, pc}

000c0160 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c0160:	b513      	push	{r0, r1, r4, lr}
   c0162:	4604      	mov	r4, r0
   c0164:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0168:	f7ff ff4e 	bl	c0008 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c016c:	4620      	mov	r0, r4
   c016e:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0172:	f7ff ff87 	bl	c0084 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c0176:	2301      	movs	r3, #1
}
   c0178:	4620      	mov	r0, r4
    state_ = NEXT;
   c017a:	7123      	strb	r3, [r4, #4]
}
   c017c:	b002      	add	sp, #8
   c017e:	bd10      	pop	{r4, pc}

000c0180 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   c0180:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   c0182:	460b      	mov	r3, r1
    s->update(ticks);
   c0184:	6892      	ldr	r2, [r2, #8]
   c0186:	4601      	mov	r1, r0
   c0188:	4618      	mov	r0, r3
   c018a:	4710      	bx	r2

000c018c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   c018c:	b570      	push	{r4, r5, r6, lr}
   c018e:	4c0e      	ldr	r4, [pc, #56]	; (c01c8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   c0190:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   c0192:	2500      	movs	r5, #0
   c0194:	241c      	movs	r4, #28
   c0196:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c019a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   c019e:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   c01a2:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c01a4:	f004 0403 	and.w	r4, r4, #3
   c01a8:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   c01ac:	b2e4      	uxtb	r4, r4
   c01ae:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   c01b0:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   c01b2:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   c01b4:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   c01b6:	7c42      	ldrb	r2, [r0, #17]
   c01b8:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   c01ba:	bf0a      	itet	eq
   c01bc:	4b03      	ldreq	r3, [pc, #12]	; (c01cc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   c01be:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   c01c0:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   c01c4:	bd70      	pop	{r4, r5, r6, pc}
   c01c6:	bf00      	nop
   c01c8:	000c6bc4 	.word	0x000c6bc4
   c01cc:	000c0181 	.word	0x000c0181

000c01d0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   c01d0:	6880      	ldr	r0, [r0, #8]
   c01d2:	6803      	ldr	r3, [r0, #0]
   c01d4:	68db      	ldr	r3, [r3, #12]
   c01d6:	4718      	bx	r3

000c01d8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   c01d8:	4770      	bx	lr

000c01da <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   c01da:	4608      	mov	r0, r1
   c01dc:	b111      	cbz	r1, c01e4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   c01de:	680b      	ldr	r3, [r1, #0]
   c01e0:	685b      	ldr	r3, [r3, #4]
   c01e2:	4718      	bx	r3
}
   c01e4:	4770      	bx	lr

000c01e6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   c01e6:	4770      	bx	lr

000c01e8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c01e8:	4770      	bx	lr

000c01ea <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   c01ea:	4770      	bx	lr

000c01ec <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   c01ec:	4770      	bx	lr

000c01ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   c01ee:	b538      	push	{r3, r4, r5, lr}
   c01f0:	4604      	mov	r4, r0
   c01f2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   c01f4:	6800      	ldr	r0, [r0, #0]
   c01f6:	212e      	movs	r1, #46	; 0x2e
   c01f8:	f004 f938 	bl	c446c <strchrnul>
    size = s - category;
   c01fc:	6823      	ldr	r3, [r4, #0]
   c01fe:	1ac3      	subs	r3, r0, r3
   c0200:	602b      	str	r3, [r5, #0]
    if (size) {
   c0202:	b123      	cbz	r3, c020e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   c0204:	7803      	ldrb	r3, [r0, #0]
   c0206:	b103      	cbz	r3, c020a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   c0208:	3001      	adds	r0, #1
   c020a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c020c:	6020      	str	r0, [r4, #0]
}
   c020e:	4618      	mov	r0, r3
   c0210:	bd38      	pop	{r3, r4, r5, pc}

000c0212 <_ZN5spark16JSONStreamWriterD0Ev>:
   c0212:	b510      	push	{r4, lr}
   c0214:	210c      	movs	r1, #12
   c0216:	4604      	mov	r4, r0
   c0218:	f7f3 ff43 	bl	b40a2 <_ZdlPvj>
   c021c:	4620      	mov	r0, r4
   c021e:	bd10      	pop	{r4, pc}

000c0220 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   c0220:	b510      	push	{r4, lr}
   c0222:	2104      	movs	r1, #4
   c0224:	4604      	mov	r4, r0
   c0226:	f7f3 ff3c 	bl	b40a2 <_ZdlPvj>
   c022a:	4620      	mov	r0, r4
   c022c:	bd10      	pop	{r4, pc}

000c022e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c022e:	b510      	push	{r4, lr}
   c0230:	2104      	movs	r1, #4
   c0232:	4604      	mov	r4, r0
   c0234:	f7f3 ff35 	bl	b40a2 <_ZdlPvj>
   c0238:	4620      	mov	r0, r4
   c023a:	bd10      	pop	{r4, pc}

000c023c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   c023c:	f7fd bc3a 	b.w	bdab4 <os_mutex_recursive_lock>

000c0240 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   c0240:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   c0242:	f004 f91d 	bl	c4480 <strcmp>
}
   c0246:	fab0 f080 	clz	r0, r0
   c024a:	0940      	lsrs	r0, r0, #5
   c024c:	bd08      	pop	{r3, pc}

000c024e <__tcf_1>:
   c024e:	4770      	bx	lr

000c0250 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   c0250:	b510      	push	{r4, lr}
   c0252:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   c0254:	f001 fcd0 	bl	c1bf8 <_Z16_fetch_usbserialv>
   c0258:	4284      	cmp	r4, r0
   c025a:	d010      	beq.n	c027e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   c025c:	f001 fe64 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   c0260:	4284      	cmp	r4, r0
   c0262:	d105      	bne.n	c0270 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   c0264:	f001 fe60 	bl	c1f28 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   c0268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   c026c:	f001 bc5f 	b.w	c1b2e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   c0270:	b12c      	cbz	r4, c027e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   c0272:	6823      	ldr	r3, [r4, #0]
   c0274:	4620      	mov	r0, r4
   c0276:	685b      	ldr	r3, [r3, #4]
}
   c0278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c027c:	4718      	bx	r3
   c027e:	bd10      	pop	{r4, pc}

000c0280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0280:	680b      	ldr	r3, [r1, #0]
   c0282:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c0284:	684b      	ldr	r3, [r1, #4]
   c0286:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c0288:	b113      	cbz	r3, c0290 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   c028a:	685a      	ldr	r2, [r3, #4]
   c028c:	3201      	adds	r2, #1
   c028e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0290:	4770      	bx	lr

000c0292 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   c0292:	b513      	push	{r0, r1, r4, lr}
   c0294:	4604      	mov	r4, r0
    return value(val, strlen(val));
   c0296:	4608      	mov	r0, r1
   c0298:	9101      	str	r1, [sp, #4]
   c029a:	f004 f920 	bl	c44de <strlen>
   c029e:	9901      	ldr	r1, [sp, #4]
   c02a0:	4602      	mov	r2, r0
   c02a2:	4620      	mov	r0, r4
}
   c02a4:	b002      	add	sp, #8
   c02a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   c02aa:	f7ff bf59 	b.w	c0160 <_ZN5spark10JSONWriter5valueEPKcj>

000c02ae <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   c02ae:	b513      	push	{r0, r1, r4, lr}
   c02b0:	4604      	mov	r4, r0
    write(str, strlen(str));
   c02b2:	4608      	mov	r0, r1
   c02b4:	9101      	str	r1, [sp, #4]
   c02b6:	f004 f912 	bl	c44de <strlen>
   c02ba:	6823      	ldr	r3, [r4, #0]
   c02bc:	9901      	ldr	r1, [sp, #4]
   c02be:	68db      	ldr	r3, [r3, #12]
   c02c0:	4602      	mov	r2, r0
   c02c2:	4620      	mov	r0, r4
}
   c02c4:	b002      	add	sp, #8
   c02c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   c02ca:	4718      	bx	r3

000c02cc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   c02cc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c02ce:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   c02d0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c02d4:	68db      	ldr	r3, [r3, #12]
   c02d6:	2201      	movs	r2, #1
   c02d8:	f10d 0107 	add.w	r1, sp, #7
   c02dc:	4798      	blx	r3
}
   c02de:	b003      	add	sp, #12
   c02e0:	f85d fb04 	ldr.w	pc, [sp], #4

000c02e4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c02e4:	b40e      	push	{r1, r2, r3}
   c02e6:	b503      	push	{r0, r1, lr}
   c02e8:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   c02ea:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c02ec:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   c02f0:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   c02f2:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   c02f4:	f000 ffe9 	bl	c12ca <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   c02f8:	b002      	add	sp, #8
   c02fa:	f85d eb04 	ldr.w	lr, [sp], #4
   c02fe:	b003      	add	sp, #12
   c0300:	4770      	bx	lr

000c0302 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   c0302:	680a      	ldr	r2, [r1, #0]
   c0304:	6002      	str	r2, [r0, #0]
   c0306:	684a      	ldr	r2, [r1, #4]
   c0308:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   c030a:	2200      	movs	r2, #0
   c030c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   c0310:	b510      	push	{r4, lr}
   c0312:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0314:	688c      	ldr	r4, [r1, #8]
   c0316:	6084      	str	r4, [r0, #8]
   c0318:	68cc      	ldr	r4, [r1, #12]
   c031a:	60c4      	str	r4, [r0, #12]
   c031c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c031e:	608a      	str	r2, [r1, #8]
   c0320:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0322:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c0324:	610a      	str	r2, [r1, #16]
   c0326:	bd10      	pop	{r4, pc}

000c0328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c032c:	e9d0 8400 	ldrd	r8, r4, [r0]
   c0330:	f04f 0a14 	mov.w	sl, #20
   c0334:	9300      	str	r3, [sp, #0]
   c0336:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c033a:	4b18      	ldr	r3, [pc, #96]	; (c039c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c033c:	10a4      	asrs	r4, r4, #2
   c033e:	4617      	mov	r7, r2
   c0340:	435c      	muls	r4, r3
   c0342:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c0344:	2c00      	cmp	r4, #0
   c0346:	dd21      	ble.n	c038c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c0348:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c034a:	fb0a f006 	mul.w	r0, sl, r6
   c034e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c0352:	463a      	mov	r2, r7
   c0354:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c0358:	5828      	ldr	r0, [r5, r0]
   c035a:	9101      	str	r1, [sp, #4]
   c035c:	455f      	cmp	r7, fp
   c035e:	bf28      	it	cs
   c0360:	465a      	movcs	r2, fp
   c0362:	f004 f8d7 	bl	c4514 <strncmp>
                if (cmp == 0) {
   c0366:	2800      	cmp	r0, #0
   c0368:	9901      	ldr	r1, [sp, #4]
   c036a:	f04f 0301 	mov.w	r3, #1
   c036e:	d10b      	bne.n	c0388 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c0370:	455f      	cmp	r7, fp
   c0372:	d103      	bne.n	c037c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c0374:	9a00      	ldr	r2, [sp, #0]
   c0376:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0378:	4634      	mov	r4, r6
   c037a:	e7e3      	b.n	c0344 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c037c:	d9fc      	bls.n	c0378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c037e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c0380:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c0384:	3e01      	subs	r6, #1
   c0386:	e7f7      	b.n	c0378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c0388:	dbf9      	blt.n	c037e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c038a:	e7f5      	b.n	c0378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c038c:	eba5 0508 	sub.w	r5, r5, r8
}
   c0390:	4802      	ldr	r0, [pc, #8]	; (c039c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c0392:	10ad      	asrs	r5, r5, #2
   c0394:	4368      	muls	r0, r5
   c0396:	b003      	add	sp, #12
   c0398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c039c:	cccccccd 	.word	0xcccccccd

000c03a0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c03a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c03a2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c03a4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c03a6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c03a8:	b303      	cbz	r3, c03ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c03aa:	b1f9      	cbz	r1, c03ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c03ac:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c03ae:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c03b2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c03b4:	a903      	add	r1, sp, #12
   c03b6:	a801      	add	r0, sp, #4
   c03b8:	f7ff ff19 	bl	c01ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c03bc:	4601      	mov	r1, r0
   c03be:	b1a8      	cbz	r0, c03ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c03c0:	f10d 030b 	add.w	r3, sp, #11
   c03c4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c03c6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c03ca:	4620      	mov	r0, r4
   c03cc:	f7ff ffac 	bl	c0328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c03d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c03d4:	b153      	cbz	r3, c03ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c03d6:	6823      	ldr	r3, [r4, #0]
   c03d8:	2414      	movs	r4, #20
   c03da:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c03de:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c03e0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c03e4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c03e6:	bfa8      	it	ge
   c03e8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c03ea:	e7e3      	b.n	c03b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c03ec:	4628      	mov	r0, r5
   c03ee:	b004      	add	sp, #16
   c03f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000c03f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c03f4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c03f6:	4c09      	ldr	r4, [pc, #36]	; (c041c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c03f8:	7823      	ldrb	r3, [r4, #0]
   c03fa:	f3bf 8f5b 	dmb	ish
   c03fe:	07db      	lsls	r3, r3, #31
   c0400:	d409      	bmi.n	c0416 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c0402:	4620      	mov	r0, r4
   c0404:	f7f3 fe5c 	bl	b40c0 <__cxa_guard_acquire>
   c0408:	b128      	cbz	r0, c0416 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c040a:	4620      	mov	r0, r4
   c040c:	f7f3 fe5d 	bl	b40ca <__cxa_guard_release>
   c0410:	4803      	ldr	r0, [pc, #12]	; (c0420 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c0412:	f003 ff8b 	bl	c432c <atexit>
}
   c0416:	4803      	ldr	r0, [pc, #12]	; (c0424 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c0418:	bd10      	pop	{r4, pc}
   c041a:	bf00      	nop
   c041c:	2003e668 	.word	0x2003e668
   c0420:	000c01e7 	.word	0x000c01e7
   c0424:	2003db58 	.word	0x2003db58

000c0428 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c0428:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c042a:	4c09      	ldr	r4, [pc, #36]	; (c0450 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c042c:	7823      	ldrb	r3, [r4, #0]
   c042e:	f3bf 8f5b 	dmb	ish
   c0432:	07db      	lsls	r3, r3, #31
   c0434:	d409      	bmi.n	c044a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c0436:	4620      	mov	r0, r4
   c0438:	f7f3 fe42 	bl	b40c0 <__cxa_guard_acquire>
   c043c:	b128      	cbz	r0, c044a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c043e:	4620      	mov	r0, r4
   c0440:	f7f3 fe43 	bl	b40ca <__cxa_guard_release>
   c0444:	4803      	ldr	r0, [pc, #12]	; (c0454 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c0446:	f003 ff71 	bl	c432c <atexit>
    return &factory;
}
   c044a:	4803      	ldr	r0, [pc, #12]	; (c0458 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c044c:	bd10      	pop	{r4, pc}
   c044e:	bf00      	nop
   c0450:	2003e66c 	.word	0x2003e66c
   c0454:	000c024f 	.word	0x000c024f
   c0458:	2003db5c 	.word	0x2003db5c

000c045c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c045c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c045e:	2500      	movs	r5, #0
   c0460:	4604      	mov	r4, r0
   c0462:	e9c0 5500 	strd	r5, r5, [r0]
   c0466:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c046a:	6085      	str	r5, [r0, #8]
   c046c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c046e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c0472:	f7fd fb0f 	bl	bda94 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c0476:	f7ff ffbd 	bl	c03f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c047a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c047c:	f7ff ffd4 	bl	c0428 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c0480:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0482:	6220      	str	r0, [r4, #32]
}
   c0484:	4620      	mov	r0, r4
   c0486:	bd38      	pop	{r3, r4, r5, pc}

000c0488 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0488:	b510      	push	{r4, lr}
    static LogManager mgr;
   c048a:	4c0a      	ldr	r4, [pc, #40]	; (c04b4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c048c:	7823      	ldrb	r3, [r4, #0]
   c048e:	f3bf 8f5b 	dmb	ish
   c0492:	07db      	lsls	r3, r3, #31
   c0494:	d40c      	bmi.n	c04b0 <_ZN5spark10LogManager8instanceEv+0x28>
   c0496:	4620      	mov	r0, r4
   c0498:	f7f3 fe12 	bl	b40c0 <__cxa_guard_acquire>
   c049c:	b140      	cbz	r0, c04b0 <_ZN5spark10LogManager8instanceEv+0x28>
   c049e:	4806      	ldr	r0, [pc, #24]	; (c04b8 <_ZN5spark10LogManager8instanceEv+0x30>)
   c04a0:	f7ff ffdc 	bl	c045c <_ZN5spark10LogManagerC1Ev>
   c04a4:	4620      	mov	r0, r4
   c04a6:	f7f3 fe10 	bl	b40ca <__cxa_guard_release>
   c04aa:	4804      	ldr	r0, [pc, #16]	; (c04bc <_ZN5spark10LogManager8instanceEv+0x34>)
   c04ac:	f003 ff3e 	bl	c432c <atexit>
    return &mgr;
}
   c04b0:	4801      	ldr	r0, [pc, #4]	; (c04b8 <_ZN5spark10LogManager8instanceEv+0x30>)
   c04b2:	bd10      	pop	{r4, pc}
   c04b4:	2003e664 	.word	0x2003e664
   c04b8:	2003e674 	.word	0x2003e674
   c04bc:	000c09dd 	.word	0x000c09dd

000c04c0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c04c0:	4a02      	ldr	r2, [pc, #8]	; (c04cc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c04c2:	4903      	ldr	r1, [pc, #12]	; (c04d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c04c4:	4803      	ldr	r0, [pc, #12]	; (c04d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c04c6:	2300      	movs	r3, #0
   c04c8:	f7fd bd0c 	b.w	bdee4 <log_set_callbacks>
   c04cc:	000c07c1 	.word	0x000c07c1
   c04d0:	000c074d 	.word	0x000c074d
   c04d4:	000c06cd 	.word	0x000c06cd

000c04d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c04d8:	2300      	movs	r3, #0
   c04da:	461a      	mov	r2, r3
   c04dc:	4619      	mov	r1, r3
   c04de:	4618      	mov	r0, r3
   c04e0:	f7fd bd00 	b.w	bdee4 <log_set_callbacks>

000c04e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c04e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c04e6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c04e8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c04ea:	4668      	mov	r0, sp
   c04ec:	f7ff fec8 	bl	c0280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c04f0:	466a      	mov	r2, sp
   c04f2:	4629      	mov	r1, r5
   c04f4:	4620      	mov	r0, r4
   c04f6:	f7ff fd53 	bl	bffa0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c04fa:	a801      	add	r0, sp, #4
   c04fc:	f7f5 fc1a 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0500:	4620      	mov	r0, r4
   c0502:	b003      	add	sp, #12
   c0504:	bd30      	pop	{r4, r5, pc}

000c0506 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0506:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0508:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c050a:	4604      	mov	r4, r0
   c050c:	4668      	mov	r0, sp
   c050e:	f7ff feb7 	bl	c0280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c0512:	466a      	mov	r2, sp
   c0514:	4629      	mov	r1, r5
   c0516:	4620      	mov	r0, r4
   c0518:	f7ff fd1e 	bl	bff58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c051c:	a801      	add	r0, sp, #4
   c051e:	f7f5 fc09 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0522:	4620      	mov	r0, r4
   c0524:	b003      	add	sp, #12
   c0526:	bd30      	pop	{r4, r5, pc}

000c0528 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0528:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c052a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c052c:	4604      	mov	r4, r0
   c052e:	4668      	mov	r0, sp
   c0530:	f7ff fea6 	bl	c0280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c0534:	466a      	mov	r2, sp
   c0536:	4629      	mov	r1, r5
   c0538:	4620      	mov	r0, r4
   c053a:	f7ff fcb6 	bl	bfeaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c053e:	a801      	add	r0, sp, #4
   c0540:	f7f5 fbf8 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0544:	4620      	mov	r0, r4
   c0546:	b003      	add	sp, #12
   c0548:	bd30      	pop	{r4, r5, pc}
	...

000c054c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c054c:	b570      	push	{r4, r5, r6, lr}
   c054e:	b08a      	sub	sp, #40	; 0x28
   c0550:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c0552:	4601      	mov	r1, r0
   c0554:	a804      	add	r0, sp, #16
   c0556:	f7ff ffc5 	bl	c04e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c055a:	4e14      	ldr	r6, [pc, #80]	; (c05ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c055c:	a804      	add	r0, sp, #16
   c055e:	f7ff fd37 	bl	bffd0 <_ZN5spark18JSONObjectIterator4nextEv>
   c0562:	b1e8      	cbz	r0, c05a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c0564:	a904      	add	r1, sp, #16
   c0566:	4668      	mov	r0, sp
   c0568:	f7ff ffcd 	bl	c0506 <_ZNK5spark18JSONObjectIterator4nameEv>
   c056c:	9802      	ldr	r0, [sp, #8]
   c056e:	4631      	mov	r1, r6
   c0570:	f7ff fe66 	bl	c0240 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c0574:	4604      	mov	r4, r0
   c0576:	b110      	cbz	r0, c057e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0578:	1e2c      	subs	r4, r5, #0
   c057a:	bf18      	it	ne
   c057c:	2401      	movne	r4, #1
   c057e:	a801      	add	r0, sp, #4
   c0580:	f7f5 fbd8 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0584:	2c00      	cmp	r4, #0
   c0586:	d0e9      	beq.n	c055c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0588:	a904      	add	r1, sp, #16
   c058a:	4668      	mov	r0, sp
   c058c:	f7ff ffcc 	bl	c0528 <_ZNK5spark18JSONObjectIterator5valueEv>
   c0590:	4668      	mov	r0, sp
   c0592:	f7ff fcc0 	bl	bff16 <_ZNK5spark9JSONValue5toIntEv>
   c0596:	6028      	str	r0, [r5, #0]
   c0598:	a801      	add	r0, sp, #4
   c059a:	f7f5 fbcb 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c059e:	e7dd      	b.n	c055c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c05a0:	a805      	add	r0, sp, #20
   c05a2:	f7f5 fbc7 	bl	b5d34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c05a6:	b00a      	add	sp, #40	; 0x28
   c05a8:	bd70      	pop	{r4, r5, r6, pc}
   c05aa:	bf00      	nop
   c05ac:	000c7d19 	.word	0x000c7d19

000c05b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c05b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c05b2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c05b4:	4620      	mov	r0, r4
   c05b6:	4913      	ldr	r1, [pc, #76]	; (c0604 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c05b8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c05ba:	f003 ff61 	bl	c4480 <strcmp>
   c05be:	b950      	cbnz	r0, c05d6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c05c0:	f001 fb1a 	bl	c1bf8 <_Z16_fetch_usbserialv>
   c05c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c05c8:	f001 fb06 	bl	c1bd8 <_ZN9USBSerial5beginEl>
}
   c05cc:	b003      	add	sp, #12
   c05ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c05d2:	f001 bb11 	b.w	c1bf8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c05d6:	490c      	ldr	r1, [pc, #48]	; (c0608 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c05d8:	4620      	mov	r0, r4
   c05da:	f003 ff51 	bl	c4480 <strcmp>
   c05de:	b978      	cbnz	r0, c0600 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c05e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c05e4:	a901      	add	r1, sp, #4
   c05e6:	4628      	mov	r0, r5
        int baud = 9600;
   c05e8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c05ea:	f7ff ffaf 	bl	c054c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c05ee:	f001 fc9b 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   c05f2:	9901      	ldr	r1, [sp, #4]
   c05f4:	f001 fa98 	bl	c1b28 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c05f8:	f001 fc96 	bl	c1f28 <_Z22__fetch_global_Serial1v>
}
   c05fc:	b003      	add	sp, #12
   c05fe:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c0600:	2000      	movs	r0, #0
   c0602:	e7fb      	b.n	c05fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c0604:	000c7d1e 	.word	0x000c7d1e
   c0608:	000c7d25 	.word	0x000c7d25

000c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c060c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c060e:	e9d0 5300 	ldrd	r5, r3, [r0]
   c0612:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0614:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c0616:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c061a:	42ae      	cmp	r6, r5
   c061c:	d005      	beq.n	c062a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c061e:	f105 0008 	add.w	r0, r5, #8
   c0622:	f7ff fff3 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0626:	3514      	adds	r5, #20
   c0628:	e7f7      	b.n	c061a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c062a:	6820      	ldr	r0, [r4, #0]
   c062c:	f7fd fd58 	bl	be0e0 <free>
}
   c0630:	4620      	mov	r0, r4
   c0632:	bd70      	pop	{r4, r5, r6, pc}

000c0634 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c0634:	b510      	push	{r4, lr}
   c0636:	4604      	mov	r4, r0
   c0638:	300c      	adds	r0, #12
   c063a:	f7ff ffe7 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c063e:	4620      	mov	r0, r4
   c0640:	f7fe f983 	bl	be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0644:	4620      	mov	r0, r4
   c0646:	bd10      	pop	{r4, pc}

000c0648 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0648:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c064a:	4b04      	ldr	r3, [pc, #16]	; (c065c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c064c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c064e:	f840 3b04 	str.w	r3, [r0], #4
   c0652:	f7ff ffef 	bl	c0634 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c0656:	4620      	mov	r0, r4
   c0658:	bd10      	pop	{r4, pc}
   c065a:	bf00      	nop
   c065c:	000c6bac 	.word	0x000c6bac

000c0660 <_ZN5spark16StreamLogHandlerD0Ev>:
   c0660:	b510      	push	{r4, lr}
   c0662:	4604      	mov	r4, r0
   c0664:	f7ff fff0 	bl	c0648 <_ZN5spark16StreamLogHandlerD1Ev>
   c0668:	4620      	mov	r0, r4
   c066a:	2124      	movs	r1, #36	; 0x24
   c066c:	f7f3 fd19 	bl	b40a2 <_ZdlPvj>
   c0670:	4620      	mov	r0, r4
   c0672:	bd10      	pop	{r4, pc}

000c0674 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c0674:	b510      	push	{r4, lr}
   c0676:	4b03      	ldr	r3, [pc, #12]	; (c0684 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0678:	6003      	str	r3, [r0, #0]
   c067a:	4604      	mov	r4, r0
   c067c:	f7ff ffe4 	bl	c0648 <_ZN5spark16StreamLogHandlerD1Ev>
   c0680:	4620      	mov	r0, r4
   c0682:	bd10      	pop	{r4, pc}
   c0684:	000c7dc0 	.word	0x000c7dc0

000c0688 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0688:	b510      	push	{r4, lr}
   c068a:	4604      	mov	r4, r0
   c068c:	f7ff fff2 	bl	c0674 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c0690:	4620      	mov	r0, r4
   c0692:	2124      	movs	r1, #36	; 0x24
   c0694:	f7f3 fd05 	bl	b40a2 <_ZdlPvj>
   c0698:	4620      	mov	r0, r4
   c069a:	bd10      	pop	{r4, pc}

000c069c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c069c:	2200      	movs	r2, #0
   c069e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c06a2:	b510      	push	{r4, lr}
        capacity_(0) {
   c06a4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c06a6:	680c      	ldr	r4, [r1, #0]
   c06a8:	6004      	str	r4, [r0, #0]
   c06aa:	684c      	ldr	r4, [r1, #4]
   c06ac:	6044      	str	r4, [r0, #4]
   c06ae:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c06b0:	600a      	str	r2, [r1, #0]
   c06b2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c06b4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c06b6:	608a      	str	r2, [r1, #8]
}
   c06b8:	bd10      	pop	{r4, pc}

000c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c06ba:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c06bc:	6803      	ldr	r3, [r0, #0]
   c06be:	4604      	mov	r4, r0
   c06c0:	6818      	ldr	r0, [r3, #0]
   c06c2:	f7fd f9ff 	bl	bdac4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c06c6:	4620      	mov	r0, r4
   c06c8:	bd10      	pop	{r4, pc}
	...

000c06cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c06cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c06d0:	b087      	sub	sp, #28
   c06d2:	4680      	mov	r8, r0
   c06d4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c06d6:	4b1c      	ldr	r3, [pc, #112]	; (c0748 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c06d8:	685b      	ldr	r3, [r3, #4]
   c06da:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c06de:	4689      	mov	r9, r1
   c06e0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c06e2:	b96b      	cbnz	r3, c0700 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c06e4:	f7ff fed0 	bl	c0488 <_ZN5spark10LogManager8instanceEv>
   c06e8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c06ea:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c06ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c06f0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c06f2:	f7ff fda3 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c06f6:	7b23      	ldrb	r3, [r4, #12]
   c06f8:	b12b      	cbz	r3, c0706 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c06fa:	a805      	add	r0, sp, #20
   c06fc:	f7ff ffdd 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c0700:	b007      	add	sp, #28
   c0702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c0706:	2301      	movs	r3, #1
   c0708:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c070a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c070e:	fa5f f989 	uxtb.w	r9, r9
   c0712:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0716:	45aa      	cmp	sl, r5
   c0718:	d012      	beq.n	c0740 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c071a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c071e:	4631      	mov	r1, r6
   c0720:	1d38      	adds	r0, r7, #4
   c0722:	f7ff fe3d 	bl	c03a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0726:	4581      	cmp	r9, r0
   c0728:	d3f5      	bcc.n	c0716 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c072a:	683b      	ldr	r3, [r7, #0]
   c072c:	9a03      	ldr	r2, [sp, #12]
   c072e:	9200      	str	r2, [sp, #0]
   c0730:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c0734:	464a      	mov	r2, r9
   c0736:	4633      	mov	r3, r6
   c0738:	4641      	mov	r1, r8
   c073a:	4638      	mov	r0, r7
   c073c:	47d8      	blx	fp
   c073e:	e7ea      	b.n	c0716 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c0740:	2300      	movs	r3, #0
   c0742:	7323      	strb	r3, [r4, #12]
   c0744:	e7d9      	b.n	c06fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c0746:	bf00      	nop
   c0748:	e000ed00 	.word	0xe000ed00

000c074c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c074c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0750:	469b      	mov	fp, r3
   c0752:	4b1a      	ldr	r3, [pc, #104]	; (c07bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0754:	685b      	ldr	r3, [r3, #4]
   c0756:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c075a:	4680      	mov	r8, r0
   c075c:	4689      	mov	r9, r1
   c075e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c0760:	b96b      	cbnz	r3, c077e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c0762:	f7ff fe91 	bl	c0488 <_ZN5spark10LogManager8instanceEv>
   c0766:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0768:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c076c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c076e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0770:	f7ff fd64 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0774:	7b23      	ldrb	r3, [r4, #12]
   c0776:	b12b      	cbz	r3, c0784 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0778:	a801      	add	r0, sp, #4
   c077a:	f7ff ff9e 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c077e:	b003      	add	sp, #12
   c0780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0784:	2301      	movs	r3, #1
   c0786:	7323      	strb	r3, [r4, #12]
   c0788:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c078c:	b2f6      	uxtb	r6, r6
   c078e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0792:	4555      	cmp	r5, sl
   c0794:	d00e      	beq.n	c07b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0796:	f855 7b04 	ldr.w	r7, [r5], #4
   c079a:	4659      	mov	r1, fp
   c079c:	1d38      	adds	r0, r7, #4
   c079e:	f7ff fdff 	bl	c03a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c07a2:	4286      	cmp	r6, r0
   c07a4:	d3f5      	bcc.n	c0792 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c07a6:	683b      	ldr	r3, [r7, #0]
   c07a8:	464a      	mov	r2, r9
   c07aa:	68db      	ldr	r3, [r3, #12]
   c07ac:	4641      	mov	r1, r8
   c07ae:	4638      	mov	r0, r7
   c07b0:	4798      	blx	r3
   c07b2:	e7ee      	b.n	c0792 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c07b4:	2300      	movs	r3, #0
   c07b6:	7323      	strb	r3, [r4, #12]
   c07b8:	e7de      	b.n	c0778 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c07ba:	bf00      	nop
   c07bc:	e000ed00 	.word	0xe000ed00

000c07c0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c07c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c07c4:	4b16      	ldr	r3, [pc, #88]	; (c0820 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c07c6:	685b      	ldr	r3, [r3, #4]
   c07c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c07cc:	4605      	mov	r5, r0
   c07ce:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c07d0:	bb1b      	cbnz	r3, c081a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c07d2:	f7ff fe59 	bl	c0488 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c07d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c07da:	4604      	mov	r4, r0
   c07dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c07de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c07e0:	f7ff fd2c 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
   c07e4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c07e8:	2446      	movs	r4, #70	; 0x46
   c07ea:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c07ee:	45b0      	cmp	r8, r6
   c07f0:	d109      	bne.n	c0806 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c07f2:	a801      	add	r0, sp, #4
   c07f4:	f7ff ff61 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c07f8:	42a5      	cmp	r5, r4
   c07fa:	bfb4      	ite	lt
   c07fc:	2000      	movlt	r0, #0
   c07fe:	2001      	movge	r0, #1
}
   c0800:	b002      	add	sp, #8
   c0802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c0806:	f856 0b04 	ldr.w	r0, [r6], #4
   c080a:	4639      	mov	r1, r7
   c080c:	3004      	adds	r0, #4
   c080e:	f7ff fdc7 	bl	c03a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c0812:	4284      	cmp	r4, r0
   c0814:	bfa8      	it	ge
   c0816:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0818:	e7e9      	b.n	c07ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c081a:	2000      	movs	r0, #0
   c081c:	e7f0      	b.n	c0800 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c081e:	bf00      	nop
   c0820:	e000ed00 	.word	0xe000ed00

000c0824 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0826:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c082a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c082c:	4604      	mov	r4, r0
   c082e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0830:	db0d      	blt.n	c084e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c0832:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0834:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0836:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0838:	dd04      	ble.n	c0844 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c083a:	00b9      	lsls	r1, r7, #2
   c083c:	f7fd fc58 	bl	be0f0 <realloc>
            if (!d) {
   c0840:	b918      	cbnz	r0, c084a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c0842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0844:	f7fd fc4c 	bl	be0e0 <free>
        T* d = nullptr;
   c0848:	2000      	movs	r0, #0
        data_ = d;
   c084a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c084c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c084e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0850:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c0852:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0856:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0858:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c085c:	1d08      	adds	r0, r1, #4
   c085e:	f003 fd99 	bl	c4394 <memmove>
    new(p) T(std::move(value));
   c0862:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0866:	6863      	ldr	r3, [r4, #4]
   c0868:	3301      	adds	r3, #1
   c086a:	6063      	str	r3, [r4, #4]
    return true;
   c086c:	2001      	movs	r0, #1
   c086e:	e7e8      	b.n	c0842 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c0870 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0870:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c0872:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0876:	4604      	mov	r4, r0
   c0878:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c087a:	9301      	str	r3, [sp, #4]
   c087c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c087e:	f7ff fcdd 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c0882:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0886:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c088a:	4293      	cmp	r3, r2
   c088c:	4619      	mov	r1, r3
   c088e:	d00b      	beq.n	c08a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c0890:	6809      	ldr	r1, [r1, #0]
   c0892:	42a9      	cmp	r1, r5
   c0894:	f103 0304 	add.w	r3, r3, #4
   c0898:	d1f7      	bne.n	c088a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c089a:	a801      	add	r0, sp, #4
   c089c:	f7ff ff0d 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c08a0:	2500      	movs	r5, #0
}
   c08a2:	4628      	mov	r0, r5
   c08a4:	b003      	add	sp, #12
   c08a6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c08a8:	4629      	mov	r1, r5
   c08aa:	4620      	mov	r0, r4
   c08ac:	f7ff ffba 	bl	c0824 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c08b0:	4605      	mov	r5, r0
   c08b2:	2800      	cmp	r0, #0
   c08b4:	d0f1      	beq.n	c089a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c08b6:	6863      	ldr	r3, [r4, #4]
   c08b8:	2b01      	cmp	r3, #1
   c08ba:	d101      	bne.n	c08c0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c08bc:	f7ff fe00 	bl	c04c0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c08c0:	a801      	add	r0, sp, #4
   c08c2:	f7ff fefa 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c08c6:	e7ec      	b.n	c08a2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c08c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c08c8:	b570      	push	{r4, r5, r6, lr}
   c08ca:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c08cc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c08d0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c08d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c08d6:	4282      	cmp	r2, r0
   c08d8:	d00f      	beq.n	c08fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c08da:	4601      	mov	r1, r0
            if (*p == value) {
   c08dc:	681d      	ldr	r5, [r3, #0]
   c08de:	f851 6b04 	ldr.w	r6, [r1], #4
   c08e2:	42ae      	cmp	r6, r5
   c08e4:	d107      	bne.n	c08f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c08e6:	1a52      	subs	r2, r2, r1
   c08e8:	f003 fd54 	bl	c4394 <memmove>
    --size_;
   c08ec:	6863      	ldr	r3, [r4, #4]
   c08ee:	3b01      	subs	r3, #1
   c08f0:	6063      	str	r3, [r4, #4]
    return true;
   c08f2:	2001      	movs	r0, #1
}
   c08f4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c08f6:	4608      	mov	r0, r1
   c08f8:	e7ed      	b.n	c08d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c08fa:	2000      	movs	r0, #0
   c08fc:	e7fa      	b.n	c08f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c08fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c08fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0900:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0904:	4604      	mov	r4, r0
   c0906:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0908:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c090a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c090c:	f7ff fc96 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0910:	a901      	add	r1, sp, #4
   c0912:	4620      	mov	r0, r4
   c0914:	f7ff ffd8 	bl	c08c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0918:	b118      	cbz	r0, c0922 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c091a:	6863      	ldr	r3, [r4, #4]
   c091c:	b90b      	cbnz	r3, c0922 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c091e:	f7ff fddb 	bl	c04d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0922:	a803      	add	r0, sp, #12
   c0924:	f7ff fec9 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0928:	b004      	add	sp, #16
   c092a:	bd10      	pop	{r4, pc}

000c092c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c092c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c092e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c0932:	2318      	movs	r3, #24
   c0934:	4604      	mov	r4, r0
   c0936:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c093a:	42ae      	cmp	r6, r5
   c093c:	d015      	beq.n	c096a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c093e:	f105 0110 	add.w	r1, r5, #16
   c0942:	4620      	mov	r0, r4
   c0944:	f7ff ffc0 	bl	c08c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0948:	6863      	ldr	r3, [r4, #4]
   c094a:	b90b      	cbnz	r3, c0950 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c094c:	f7ff fdc4 	bl	c04d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0950:	69e0      	ldr	r0, [r4, #28]
   c0952:	6929      	ldr	r1, [r5, #16]
   c0954:	6803      	ldr	r3, [r0, #0]
   c0956:	68db      	ldr	r3, [r3, #12]
   c0958:	4798      	blx	r3
        if (h.stream) {
   c095a:	6969      	ldr	r1, [r5, #20]
   c095c:	b119      	cbz	r1, c0966 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c095e:	6a20      	ldr	r0, [r4, #32]
   c0960:	6803      	ldr	r3, [r0, #0]
   c0962:	68db      	ldr	r3, [r3, #12]
   c0964:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0966:	3518      	adds	r5, #24
   c0968:	e7e7      	b.n	c093a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c096a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c096e:	2618      	movs	r6, #24
   c0970:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0974:	42ae      	cmp	r6, r5
   c0976:	d004      	beq.n	c0982 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0978:	4628      	mov	r0, r5
   c097a:	f000 fea9 	bl	c16d0 <_ZN6StringD1Ev>
   c097e:	3518      	adds	r5, #24
   c0980:	e7f8      	b.n	c0974 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c0982:	2300      	movs	r3, #0
   c0984:	6163      	str	r3, [r4, #20]
}
   c0986:	bd70      	pop	{r4, r5, r6, pc}

000c0988 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0988:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c098a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c098c:	f7ff fda4 	bl	c04d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0990:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0994:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0996:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0998:	f7ff fc50 	bl	c023c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c099c:	4620      	mov	r0, r4
   c099e:	f7ff ffc5 	bl	c092c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c09a2:	a801      	add	r0, sp, #4
   c09a4:	f7ff fe89 	bl	c06ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c09a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c09aa:	b108      	cbz	r0, c09b0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c09ac:	f7fd f87a 	bl	bdaa4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c09b0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c09b4:	2618      	movs	r6, #24
   c09b6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c09ba:	42ae      	cmp	r6, r5
   c09bc:	d004      	beq.n	c09c8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c09be:	4628      	mov	r0, r5
   c09c0:	f000 fe86 	bl	c16d0 <_ZN6StringD1Ev>
   c09c4:	3518      	adds	r5, #24
   c09c6:	e7f8      	b.n	c09ba <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c09c8:	6920      	ldr	r0, [r4, #16]
   c09ca:	f7fd fb89 	bl	be0e0 <free>
   c09ce:	6820      	ldr	r0, [r4, #0]
   c09d0:	f7fd fb86 	bl	be0e0 <free>
}
   c09d4:	4620      	mov	r0, r4
   c09d6:	b002      	add	sp, #8
   c09d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000c09dc <__tcf_2>:
    static LogManager mgr;
   c09dc:	4801      	ldr	r0, [pc, #4]	; (c09e4 <__tcf_2+0x8>)
   c09de:	f7ff bfd3 	b.w	c0988 <_ZN5spark10LogManagerD1Ev>
   c09e2:	bf00      	nop
   c09e4:	2003e674 	.word	0x2003e674

000c09e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c09e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c09ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c09ec:	4604      	mov	r4, r0
   c09ee:	460d      	mov	r5, r1
   c09f0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c09f2:	d915      	bls.n	c0a20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c09f4:	4290      	cmp	r0, r2
   c09f6:	d214      	bcs.n	c0a22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c09f8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c09fc:	1a75      	subs	r5, r6, r1
   c09fe:	f1a1 0714 	sub.w	r7, r1, #20
   c0a02:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0a04:	42b7      	cmp	r7, r6
   c0a06:	d01a      	beq.n	c0a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0a08:	b11c      	cbz	r4, c0a12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0a0a:	4631      	mov	r1, r6
   c0a0c:	4620      	mov	r0, r4
   c0a0e:	f7ff fc78 	bl	c0302 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c0a12:	f106 0008 	add.w	r0, r6, #8
   c0a16:	f7ff fdf9 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0a1a:	3e14      	subs	r6, #20
   c0a1c:	3c14      	subs	r4, #20
   c0a1e:	e7f1      	b.n	c0a04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0a20:	d00d      	beq.n	c0a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c0a22:	42b5      	cmp	r5, r6
   c0a24:	d00b      	beq.n	c0a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0a26:	b11c      	cbz	r4, c0a30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0a28:	4629      	mov	r1, r5
   c0a2a:	4620      	mov	r0, r4
   c0a2c:	f7ff fc69 	bl	c0302 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0a30:	f105 0008 	add.w	r0, r5, #8
   c0a34:	f7ff fdea 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0a38:	3514      	adds	r5, #20
   c0a3a:	3414      	adds	r4, #20
   c0a3c:	e7f1      	b.n	c0a22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0a40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0a44:	4604      	mov	r4, r0
   c0a46:	460d      	mov	r5, r1
   c0a48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0a4a:	d914      	bls.n	c0a76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0a4c:	4290      	cmp	r0, r2
   c0a4e:	d213      	bcs.n	c0a78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0a50:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0a54:	1a75      	subs	r5, r6, r1
   c0a56:	f1a1 0710 	sub.w	r7, r1, #16
   c0a5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0a5c:	42b7      	cmp	r7, r6
   c0a5e:	d018      	beq.n	c0a92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0a60:	b11c      	cbz	r4, c0a6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c0a62:	4631      	mov	r1, r6
   c0a64:	4620      	mov	r0, r4
   c0a66:	f000 feaf 	bl	c17c8 <_ZN6StringC1EOS_>
                end->~T();
   c0a6a:	4630      	mov	r0, r6
   c0a6c:	f000 fe30 	bl	c16d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0a70:	3e10      	subs	r6, #16
   c0a72:	3c10      	subs	r4, #16
   c0a74:	e7f2      	b.n	c0a5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0a76:	d00c      	beq.n	c0a92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0a78:	42b5      	cmp	r5, r6
   c0a7a:	d00a      	beq.n	c0a92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0a7c:	b11c      	cbz	r4, c0a86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0a7e:	4629      	mov	r1, r5
   c0a80:	4620      	mov	r0, r4
   c0a82:	f000 fea1 	bl	c17c8 <_ZN6StringC1EOS_>
                p->~T();
   c0a86:	4628      	mov	r0, r5
   c0a88:	f000 fe22 	bl	c16d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0a8c:	3510      	adds	r5, #16
   c0a8e:	3410      	adds	r4, #16
   c0a90:	e7f2      	b.n	c0a78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c0a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0a94:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0a96:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0a98:	4605      	mov	r5, r0
        if (n > 0) {
   c0a9a:	dd11      	ble.n	c0ac0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0a9c:	0130      	lsls	r0, r6, #4
   c0a9e:	f7fd fb17 	bl	be0d0 <malloc>
            if (!d) {
   c0aa2:	4604      	mov	r4, r0
   c0aa4:	b158      	cbz	r0, c0abe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0aa6:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0aaa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c0aae:	f7ff ffc7 	bl	c0a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c0ab2:	6828      	ldr	r0, [r5, #0]
   c0ab4:	f7fd fb14 	bl	be0e0 <free>
        data_ = d;
   c0ab8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0aba:	60ae      	str	r6, [r5, #8]
        return true;
   c0abc:	2001      	movs	r0, #1
    }
   c0abe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0ac0:	2400      	movs	r4, #0
   c0ac2:	e7f6      	b.n	c0ab2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c0ac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0ac8:	4690      	mov	r8, r2
   c0aca:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0acc:	2300      	movs	r3, #0
   c0ace:	9103      	str	r1, [sp, #12]
    return size_;
   c0ad0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0ad4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0ad6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0ad8:	4299      	cmp	r1, r3
        capacity_(0) {
   c0ada:	e9c0 3300 	strd	r3, r3, [r0]
   c0ade:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c0ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c0ae6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0aea:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0aec:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0aee:	dc23      	bgt.n	c0b38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0af0:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0af4:	2314      	movs	r3, #20
   c0af6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0afa:	42af      	cmp	r7, r5
   c0afc:	d03b      	beq.n	c0b76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0afe:	4629      	mov	r1, r5
   c0b00:	a80b      	add	r0, sp, #44	; 0x2c
   c0b02:	f000 fe61 	bl	c17c8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0b06:	a90b      	add	r1, sp, #44	; 0x2c
   c0b08:	a80f      	add	r0, sp, #60	; 0x3c
   c0b0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0b0c:	f000 fe5c 	bl	c17c8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0b10:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0b14:	4299      	cmp	r1, r3
   c0b16:	da1b      	bge.n	c0b50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0b18:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0b1c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0b20:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0b24:	4631      	mov	r1, r6
   c0b26:	f106 0010 	add.w	r0, r6, #16
   c0b2a:	f7ff ff89 	bl	c0a40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0b2e:	b9ee      	cbnz	r6, c0b6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0b32:	3301      	adds	r3, #1
   c0b34:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0b36:	e011      	b.n	c0b5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0b38:	a808      	add	r0, sp, #32
   c0b3a:	f7ff ffab 	bl	c0a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0b3e:	2800      	cmp	r0, #0
   c0b40:	d1d6      	bne.n	c0af0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c0b42:	a808      	add	r0, sp, #32
   c0b44:	f7fd ff01 	bl	be94a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0b48:	4620      	mov	r0, r4
   c0b4a:	b015      	add	sp, #84	; 0x54
   c0b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0b50:	3101      	adds	r1, #1
   c0b52:	a808      	add	r0, sp, #32
   c0b54:	f7ff ff9e 	bl	c0a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0b58:	2800      	cmp	r0, #0
   c0b5a:	d1dd      	bne.n	c0b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0b5c:	a80f      	add	r0, sp, #60	; 0x3c
   c0b5e:	f000 fdb7 	bl	c16d0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c0b62:	a80b      	add	r0, sp, #44	; 0x2c
   c0b64:	f000 fdb4 	bl	c16d0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0b68:	3514      	adds	r5, #20
   c0b6a:	e7c6      	b.n	c0afa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0b6c:	a90f      	add	r1, sp, #60	; 0x3c
   c0b6e:	4630      	mov	r0, r6
   c0b70:	f000 fe2a 	bl	c17c8 <_ZN6StringC1EOS_>
   c0b74:	e7dc      	b.n	c0b30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0b76:	2600      	movs	r6, #0
   c0b78:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0b7c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0b7e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0b82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0b86:	429e      	cmp	r6, r3
   c0b88:	da7c      	bge.n	c0c84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0b8a:	0133      	lsls	r3, r6, #4
   c0b8c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0b8e:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0b90:	b90b      	cbnz	r3, c0b96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c0b92:	3601      	adds	r6, #1
   c0b94:	e7f5      	b.n	c0b82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0b96:	2300      	movs	r3, #0
   c0b98:	9307      	str	r3, [sp, #28]
   c0b9a:	fb09 f306 	mul.w	r3, r9, r6
   c0b9e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0ba0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c0ba2:	a907      	add	r1, sp, #28
   c0ba4:	a806      	add	r0, sp, #24
   c0ba6:	f7ff fb22 	bl	c01ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0baa:	4682      	mov	sl, r0
   c0bac:	2800      	cmp	r0, #0
   c0bae:	d0f0      	beq.n	c0b92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0bb0:	f04f 0300 	mov.w	r3, #0
   c0bb4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0bb8:	4601      	mov	r1, r0
   c0bba:	9a07      	ldr	r2, [sp, #28]
   c0bbc:	f10d 0317 	add.w	r3, sp, #23
   c0bc0:	4628      	mov	r0, r5
   c0bc2:	f7ff fbb1 	bl	c0328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0bc6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0bca:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0bcc:	2f00      	cmp	r7, #0
   c0bce:	d14a      	bne.n	c0c66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0bd0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0bd4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0bd8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0be0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0be4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0be8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0bea:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0bee:	4293      	cmp	r3, r2
   c0bf0:	db17      	blt.n	c0c22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0bf2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0bf6:	f1ba 0f00 	cmp.w	sl, #0
   c0bfa:	dd30      	ble.n	c0c5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0bfc:	fb09 f00a 	mul.w	r0, r9, sl
   c0c00:	f7fd fa66 	bl	be0d0 <malloc>
            if (!d) {
   c0c04:	4683      	mov	fp, r0
   c0c06:	b360      	cbz	r0, c0c62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0c08:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0c0c:	fb09 1202 	mla	r2, r9, r2, r1
   c0c10:	f7ff feea 	bl	c09e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0c14:	6828      	ldr	r0, [r5, #0]
   c0c16:	f7fd fa63 	bl	be0e0 <free>
        data_ = d;
   c0c1a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0c1e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0c22:	682b      	ldr	r3, [r5, #0]
   c0c24:	9a01      	ldr	r2, [sp, #4]
   c0c26:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0c2a:	686a      	ldr	r2, [r5, #4]
   c0c2c:	4651      	mov	r1, sl
   c0c2e:	fb09 3202 	mla	r2, r9, r2, r3
   c0c32:	f10a 0014 	add.w	r0, sl, #20
   c0c36:	f7ff fed7 	bl	c09e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0c3a:	f1ba 0f00 	cmp.w	sl, #0
   c0c3e:	d003      	beq.n	c0c48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0c40:	a90f      	add	r1, sp, #60	; 0x3c
   c0c42:	4650      	mov	r0, sl
   c0c44:	f7ff fb5d 	bl	c0302 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0c48:	686b      	ldr	r3, [r5, #4]
   c0c4a:	3301      	adds	r3, #1
   c0c4c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0c4e:	a811      	add	r0, sp, #68	; 0x44
   c0c50:	f7ff fcdc 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0c54:	b13f      	cbz	r7, c0c66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0c56:	a80b      	add	r0, sp, #44	; 0x2c
   c0c58:	f7ff fcd8 	bl	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0c5c:	e771      	b.n	c0b42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0c5e:	46bb      	mov	fp, r7
   c0c60:	e7d8      	b.n	c0c14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0c62:	2701      	movs	r7, #1
   c0c64:	e7f3      	b.n	c0c4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0c66:	9b01      	ldr	r3, [sp, #4]
   c0c68:	682d      	ldr	r5, [r5, #0]
   c0c6a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0c6e:	9b06      	ldr	r3, [sp, #24]
   c0c70:	781b      	ldrb	r3, [r3, #0]
   c0c72:	b92b      	cbnz	r3, c0c80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0c74:	f8d8 3000 	ldr.w	r3, [r8]
   c0c78:	9a02      	ldr	r2, [sp, #8]
   c0c7a:	4413      	add	r3, r2
   c0c7c:	7c1b      	ldrb	r3, [r3, #16]
   c0c7e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0c80:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0c82:	e78e      	b.n	c0ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0c84:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0c86:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0c88:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0c8a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0c8c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0c8e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c0c92:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0c94:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0c96:	60a2      	str	r2, [r4, #8]
   c0c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0c9a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0c9c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0c9e:	60e2      	str	r2, [r4, #12]
   c0ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c0ca2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0ca4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0ca6:	6122      	str	r2, [r4, #16]
   c0ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0caa:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0cac:	9b03      	ldr	r3, [sp, #12]
   c0cae:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0cb0:	6162      	str	r2, [r4, #20]
   c0cb2:	7623      	strb	r3, [r4, #24]
   c0cb4:	e7cf      	b.n	c0c56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0cb8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0cba:	4604      	mov	r4, r0
   c0cbc:	b087      	sub	sp, #28
   c0cbe:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0cc0:	4626      	mov	r6, r4
        stream_(&stream) {
   c0cc2:	4619      	mov	r1, r3
   c0cc4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0cc6:	4617      	mov	r7, r2
        stream_(&stream) {
   c0cc8:	f7f5 fc70 	bl	b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0ccc:	4b0b      	ldr	r3, [pc, #44]	; (c0cfc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0cce:	f846 3b04 	str.w	r3, [r6], #4
   c0cd2:	4669      	mov	r1, sp
   c0cd4:	a803      	add	r0, sp, #12
   c0cd6:	f7f5 fc69 	bl	b65ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0cda:	aa03      	add	r2, sp, #12
   c0cdc:	4639      	mov	r1, r7
   c0cde:	4630      	mov	r0, r6
   c0ce0:	f7ff fef0 	bl	c0ac4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0ce4:	a803      	add	r0, sp, #12
   c0ce6:	f7f5 f987 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0cea:	4668      	mov	r0, sp
   c0cec:	f7f5 f984 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0cf0:	4b03      	ldr	r3, [pc, #12]	; (c0d00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0cf2:	6023      	str	r3, [r4, #0]
}
   c0cf4:	4620      	mov	r0, r4
        stream_(&stream) {
   c0cf6:	6225      	str	r5, [r4, #32]
}
   c0cf8:	b007      	add	sp, #28
   c0cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0cfc:	000c6bac 	.word	0x000c6bac
   c0d00:	000c7da8 	.word	0x000c7da8

000c0d04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0d06:	460f      	mov	r7, r1
   c0d08:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0d0a:	491d      	ldr	r1, [pc, #116]	; (c0d80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0d0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0d0e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0d10:	4616      	mov	r6, r2
   c0d12:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0d14:	f003 fbb4 	bl	c4480 <strcmp>
   c0d18:	b9c0      	cbnz	r0, c0d4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0d1a:	b1a4      	cbz	r4, c0d46 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0d1c:	4629      	mov	r1, r5
   c0d1e:	a801      	add	r0, sp, #4
   c0d20:	f7ff fcbc 	bl	c069c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0d24:	4917      	ldr	r1, [pc, #92]	; (c0d84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0d26:	2024      	movs	r0, #36	; 0x24
   c0d28:	f001 f922 	bl	c1f70 <_ZnwjRKSt9nothrow_t>
   c0d2c:	4605      	mov	r5, r0
   c0d2e:	b130      	cbz	r0, c0d3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0d30:	ab01      	add	r3, sp, #4
   c0d32:	4632      	mov	r2, r6
   c0d34:	4621      	mov	r1, r4
   c0d36:	f7ff ffbf 	bl	c0cb8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0d3a:	4b13      	ldr	r3, [pc, #76]	; (c0d88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0d3c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0d3e:	a801      	add	r0, sp, #4
   c0d40:	f7f5 f95a 	bl	b5ff8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0d44:	462c      	mov	r4, r5
}
   c0d46:	4620      	mov	r0, r4
   c0d48:	b005      	add	sp, #20
   c0d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0d4c:	490f      	ldr	r1, [pc, #60]	; (c0d8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0d4e:	4638      	mov	r0, r7
   c0d50:	f003 fb96 	bl	c4480 <strcmp>
   c0d54:	b990      	cbnz	r0, c0d7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c0d56:	2c00      	cmp	r4, #0
   c0d58:	d0f5      	beq.n	c0d46 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0d5a:	4629      	mov	r1, r5
   c0d5c:	a801      	add	r0, sp, #4
   c0d5e:	f7ff fc9d 	bl	c069c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0d62:	4908      	ldr	r1, [pc, #32]	; (c0d84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0d64:	2024      	movs	r0, #36	; 0x24
   c0d66:	f001 f903 	bl	c1f70 <_ZnwjRKSt9nothrow_t>
   c0d6a:	4605      	mov	r5, r0
   c0d6c:	2800      	cmp	r0, #0
   c0d6e:	d0e6      	beq.n	c0d3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0d70:	ab01      	add	r3, sp, #4
   c0d72:	4632      	mov	r2, r6
   c0d74:	4621      	mov	r1, r4
   c0d76:	f7ff ff9f 	bl	c0cb8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0d7a:	e7e0      	b.n	c0d3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0d7c:	2400      	movs	r4, #0
   c0d7e:	e7e2      	b.n	c0d46 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0d80:	000c7d2d 	.word	0x000c7d2d
   c0d84:	000c7ec0 	.word	0x000c7ec0
   c0d88:	000c7dc0 	.word	0x000c7dc0
   c0d8c:	000c7d31 	.word	0x000c7d31

000c0d90 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0d90:	4b01      	ldr	r3, [pc, #4]	; (c0d98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c0d92:	4a02      	ldr	r2, [pc, #8]	; (c0d9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0d94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c0d96:	4770      	bx	lr
   c0d98:	2003e670 	.word	0x2003e670
   c0d9c:	000c7d42 	.word	0x000c7d42

000c0da0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0da4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c0da6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0daa:	4604      	mov	r4, r0
   c0dac:	460e      	mov	r6, r1
   c0dae:	4617      	mov	r7, r2
   c0db0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c0db2:	f000 ff21 	bl	c1bf8 <_Z16_fetch_usbserialv>
   c0db6:	4581      	cmp	r9, r0
   c0db8:	d04c      	beq.n	c0e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0dba:	792b      	ldrb	r3, [r5, #4]
   c0dbc:	0719      	lsls	r1, r3, #28
   c0dbe:	d504      	bpl.n	c0dca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0dc0:	696a      	ldr	r2, [r5, #20]
   c0dc2:	4954      	ldr	r1, [pc, #336]	; (c0f14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0dc4:	4620      	mov	r0, r4
   c0dc6:	f7ff fa8d 	bl	c02e4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0dca:	f1b8 0f00 	cmp.w	r8, #0
   c0dce:	d00d      	beq.n	c0dec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0dd0:	215b      	movs	r1, #91	; 0x5b
   c0dd2:	4620      	mov	r0, r4
   c0dd4:	f7ff fa7a 	bl	c02cc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0dd8:	4641      	mov	r1, r8
   c0dda:	4620      	mov	r0, r4
   c0ddc:	f7ff fa67 	bl	c02ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0de0:	6823      	ldr	r3, [r4, #0]
   c0de2:	494d      	ldr	r1, [pc, #308]	; (c0f18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0de4:	68db      	ldr	r3, [r3, #12]
   c0de6:	2202      	movs	r2, #2
   c0de8:	4620      	mov	r0, r4
   c0dea:	4798      	blx	r3
    if (attr.has_file) {
   c0dec:	792b      	ldrb	r3, [r5, #4]
   c0dee:	07da      	lsls	r2, r3, #31
   c0df0:	d523      	bpl.n	c0e3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0df2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c0df6:	212f      	movs	r1, #47	; 0x2f
   c0df8:	4640      	mov	r0, r8
   c0dfa:	f003 fbbe 	bl	c457a <strrchr>
    if (s1) {
   c0dfe:	b108      	cbz	r0, c0e04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0e00:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0e04:	4641      	mov	r1, r8
   c0e06:	4620      	mov	r0, r4
   c0e08:	f7ff fa51 	bl	c02ae <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0e0c:	792b      	ldrb	r3, [r5, #4]
   c0e0e:	079b      	lsls	r3, r3, #30
   c0e10:	d508      	bpl.n	c0e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c0e12:	213a      	movs	r1, #58	; 0x3a
   c0e14:	4620      	mov	r0, r4
   c0e16:	f7ff fa59 	bl	c02cc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0e1a:	68ea      	ldr	r2, [r5, #12]
   c0e1c:	493f      	ldr	r1, [pc, #252]	; (c0f1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0e1e:	4620      	mov	r0, r4
   c0e20:	f7ff fa60 	bl	c02e4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0e24:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c0e26:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0e28:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0e2c:	68db      	ldr	r3, [r3, #12]
   c0e2e:	bf14      	ite	ne
   c0e30:	493b      	ldrne	r1, [pc, #236]	; (c0f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0e32:	493c      	ldreq	r1, [pc, #240]	; (c0f24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0e34:	2202      	movs	r2, #2
            write(": ", 2);
   c0e36:	4620      	mov	r0, r4
   c0e38:	4798      	blx	r3
    if (attr.has_function) {
   c0e3a:	792b      	ldrb	r3, [r5, #4]
   c0e3c:	0758      	lsls	r0, r3, #29
   c0e3e:	d51d      	bpl.n	c0e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0e40:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0e42:	460b      	mov	r3, r1
   c0e44:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c0e46:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0e4a:	b160      	cbz	r0, c0e66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0e4c:	2820      	cmp	r0, #32
   c0e4e:	d108      	bne.n	c0e62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0e50:	4619      	mov	r1, r3
   c0e52:	e7f7      	b.n	c0e44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0e54:	4834      	ldr	r0, [pc, #208]	; (c0f28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c0e56:	f000 f966 	bl	c1126 <_ZN5spark12NetworkClass9listeningEv>
   c0e5a:	2800      	cmp	r0, #0
   c0e5c:	d0ad      	beq.n	c0dba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c0e62:	2828      	cmp	r0, #40	; 0x28
   c0e64:	d1ee      	bne.n	c0e44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c0e66:	6823      	ldr	r3, [r4, #0]
   c0e68:	1a52      	subs	r2, r2, r1
   c0e6a:	68db      	ldr	r3, [r3, #12]
   c0e6c:	4620      	mov	r0, r4
   c0e6e:	4798      	blx	r3
        write("(): ", 4);
   c0e70:	6823      	ldr	r3, [r4, #0]
   c0e72:	492e      	ldr	r1, [pc, #184]	; (c0f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0e74:	68db      	ldr	r3, [r3, #12]
   c0e76:	2204      	movs	r2, #4
   c0e78:	4620      	mov	r0, r4
   c0e7a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0e7c:	2100      	movs	r1, #0
   c0e7e:	4638      	mov	r0, r7
   c0e80:	f7fd f828 	bl	bded4 <log_level_name>
   c0e84:	4601      	mov	r1, r0
    write(s);
   c0e86:	4620      	mov	r0, r4
   c0e88:	f7ff fa11 	bl	c02ae <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0e8c:	6823      	ldr	r3, [r4, #0]
   c0e8e:	4925      	ldr	r1, [pc, #148]	; (c0f24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0e90:	68db      	ldr	r3, [r3, #12]
   c0e92:	2202      	movs	r2, #2
   c0e94:	4620      	mov	r0, r4
   c0e96:	4798      	blx	r3
    if (msg) {
   c0e98:	b11e      	cbz	r6, c0ea2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c0e9a:	4631      	mov	r1, r6
   c0e9c:	4620      	mov	r0, r4
   c0e9e:	f7ff fa06 	bl	c02ae <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c0ea2:	792b      	ldrb	r3, [r5, #4]
   c0ea4:	f013 0f30 	tst.w	r3, #48	; 0x30
   c0ea8:	d02c      	beq.n	c0f04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c0eaa:	6823      	ldr	r3, [r4, #0]
   c0eac:	4920      	ldr	r1, [pc, #128]	; (c0f30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0eae:	68db      	ldr	r3, [r3, #12]
   c0eb0:	2202      	movs	r2, #2
   c0eb2:	4620      	mov	r0, r4
   c0eb4:	4798      	blx	r3
        if (attr.has_code) {
   c0eb6:	792b      	ldrb	r3, [r5, #4]
   c0eb8:	06d9      	lsls	r1, r3, #27
   c0eba:	d50a      	bpl.n	c0ed2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0ebc:	6823      	ldr	r3, [r4, #0]
   c0ebe:	491d      	ldr	r1, [pc, #116]	; (c0f34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0ec0:	68db      	ldr	r3, [r3, #12]
   c0ec2:	2207      	movs	r2, #7
   c0ec4:	4620      	mov	r0, r4
   c0ec6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0ec8:	69aa      	ldr	r2, [r5, #24]
   c0eca:	491b      	ldr	r1, [pc, #108]	; (c0f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0ecc:	4620      	mov	r0, r4
   c0ece:	f7ff fa09 	bl	c02e4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0ed2:	792b      	ldrb	r3, [r5, #4]
   c0ed4:	069a      	lsls	r2, r3, #26
   c0ed6:	d511      	bpl.n	c0efc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0ed8:	06db      	lsls	r3, r3, #27
   c0eda:	d505      	bpl.n	c0ee8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0edc:	6823      	ldr	r3, [r4, #0]
   c0ede:	4910      	ldr	r1, [pc, #64]	; (c0f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0ee0:	68db      	ldr	r3, [r3, #12]
   c0ee2:	2202      	movs	r2, #2
   c0ee4:	4620      	mov	r0, r4
   c0ee6:	4798      	blx	r3
            write("details = ", 10);
   c0ee8:	6823      	ldr	r3, [r4, #0]
   c0eea:	4914      	ldr	r1, [pc, #80]	; (c0f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0eec:	68db      	ldr	r3, [r3, #12]
   c0eee:	4620      	mov	r0, r4
   c0ef0:	220a      	movs	r2, #10
   c0ef2:	4798      	blx	r3
            write(attr.details);
   c0ef4:	69e9      	ldr	r1, [r5, #28]
   c0ef6:	4620      	mov	r0, r4
   c0ef8:	f7ff f9d9 	bl	c02ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0efc:	215d      	movs	r1, #93	; 0x5d
   c0efe:	4620      	mov	r0, r4
   c0f00:	f7ff f9e4 	bl	c02cc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0f04:	6823      	ldr	r3, [r4, #0]
   c0f06:	490e      	ldr	r1, [pc, #56]	; (c0f40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0f08:	68db      	ldr	r3, [r3, #12]
   c0f0a:	4620      	mov	r0, r4
   c0f0c:	2202      	movs	r2, #2
}
   c0f0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0f12:	4718      	bx	r3
   c0f14:	000c7d46 	.word	0x000c7d46
   c0f18:	000c7d4d 	.word	0x000c7d4d
   c0f1c:	000c670d 	.word	0x000c670d
   c0f20:	000c7d50 	.word	0x000c7d50
   c0f24:	000c7d55 	.word	0x000c7d55
   c0f28:	2003e69c 	.word	0x2003e69c
   c0f2c:	000c7d53 	.word	0x000c7d53
   c0f30:	000c7d58 	.word	0x000c7d58
   c0f34:	000c7d5b 	.word	0x000c7d5b
   c0f38:	000c7d63 	.word	0x000c7d63
   c0f3c:	000c7d66 	.word	0x000c7d66
   c0f40:	000c7d71 	.word	0x000c7d71

000c0f44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0f48:	b085      	sub	sp, #20
    return stream_;
   c0f4a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0f4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0f50:	4605      	mov	r5, r0
   c0f52:	460f      	mov	r7, r1
   c0f54:	4690      	mov	r8, r2
   c0f56:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0f58:	f000 fe4e 	bl	c1bf8 <_Z16_fetch_usbserialv>
   c0f5c:	4581      	cmp	r9, r0
   c0f5e:	d105      	bne.n	c0f6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0f60:	4849      	ldr	r0, [pc, #292]	; (c1088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0f62:	f000 f8e0 	bl	c1126 <_ZN5spark12NetworkClass9listeningEv>
   c0f66:	2800      	cmp	r0, #0
   c0f68:	f040 808a 	bne.w	c1080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0f6c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0f6e:	4a47      	ldr	r2, [pc, #284]	; (c108c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0f70:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0f72:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0f76:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0f78:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0f7a:	f88d 9008 	strb.w	r9, [sp, #8]
   c0f7e:	f7ff f850 	bl	c0022 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0f82:	4649      	mov	r1, r9
   c0f84:	4640      	mov	r0, r8
   c0f86:	f7fc ffa5 	bl	bded4 <log_level_name>
    json.name("l", 1).value(s);
   c0f8a:	4941      	ldr	r1, [pc, #260]	; (c1090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0f8c:	4680      	mov	r8, r0
   c0f8e:	2201      	movs	r2, #1
   c0f90:	a801      	add	r0, sp, #4
   c0f92:	f7ff f8d5 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c0f96:	4641      	mov	r1, r8
   c0f98:	f7ff f97b 	bl	c0292 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0f9c:	b13f      	cbz	r7, c0fae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0f9e:	493d      	ldr	r1, [pc, #244]	; (c1094 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0fa0:	2201      	movs	r2, #1
   c0fa2:	a801      	add	r0, sp, #4
   c0fa4:	f7ff f8cc 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c0fa8:	4639      	mov	r1, r7
   c0faa:	f7ff f972 	bl	c0292 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0fae:	b13e      	cbz	r6, c0fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0fb0:	4939      	ldr	r1, [pc, #228]	; (c1098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0fb2:	2201      	movs	r2, #1
   c0fb4:	a801      	add	r0, sp, #4
   c0fb6:	f7ff f8c3 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c0fba:	4631      	mov	r1, r6
   c0fbc:	f7ff f969 	bl	c0292 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0fc0:	7923      	ldrb	r3, [r4, #4]
   c0fc2:	07df      	lsls	r7, r3, #31
   c0fc4:	d50e      	bpl.n	c0fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0fc6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0fc8:	212f      	movs	r1, #47	; 0x2f
   c0fca:	4630      	mov	r0, r6
   c0fcc:	f003 fad5 	bl	c457a <strrchr>
    if (s1) {
   c0fd0:	b100      	cbz	r0, c0fd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0fd2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0fd4:	4931      	ldr	r1, [pc, #196]	; (c109c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0fd6:	2201      	movs	r2, #1
   c0fd8:	a801      	add	r0, sp, #4
   c0fda:	f7ff f8b1 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c0fde:	4631      	mov	r1, r6
   c0fe0:	f7ff f957 	bl	c0292 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0fe4:	7923      	ldrb	r3, [r4, #4]
   c0fe6:	079e      	lsls	r6, r3, #30
   c0fe8:	d507      	bpl.n	c0ffa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0fea:	492d      	ldr	r1, [pc, #180]	; (c10a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0fec:	2202      	movs	r2, #2
   c0fee:	a801      	add	r0, sp, #4
   c0ff0:	f7ff f8a6 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c0ff4:	68e1      	ldr	r1, [r4, #12]
   c0ff6:	f7ff f821 	bl	c003c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0ffa:	7923      	ldrb	r3, [r4, #4]
   c0ffc:	0758      	lsls	r0, r3, #29
   c0ffe:	d514      	bpl.n	c102a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1000:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c1002:	4633      	mov	r3, r6
   c1004:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c1006:	f813 2b01 	ldrb.w	r2, [r3], #1
   c100a:	b12a      	cbz	r2, c1018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c100c:	2a20      	cmp	r2, #32
   c100e:	d101      	bne.n	c1014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c1010:	461e      	mov	r6, r3
   c1012:	e7f7      	b.n	c1004 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c1014:	2a28      	cmp	r2, #40	; 0x28
   c1016:	d1f5      	bne.n	c1004 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c1018:	4922      	ldr	r1, [pc, #136]	; (c10a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c101a:	2202      	movs	r2, #2
   c101c:	a801      	add	r0, sp, #4
   c101e:	f7ff f88f 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c1022:	1bba      	subs	r2, r7, r6
   c1024:	4631      	mov	r1, r6
   c1026:	f7ff f89b 	bl	c0160 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c102a:	7923      	ldrb	r3, [r4, #4]
   c102c:	0719      	lsls	r1, r3, #28
   c102e:	d507      	bpl.n	c1040 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c1030:	491d      	ldr	r1, [pc, #116]	; (c10a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c1032:	2201      	movs	r2, #1
   c1034:	a801      	add	r0, sp, #4
   c1036:	f7ff f883 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c103a:	6961      	ldr	r1, [r4, #20]
   c103c:	f7ff f810 	bl	c0060 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c1040:	7923      	ldrb	r3, [r4, #4]
   c1042:	06da      	lsls	r2, r3, #27
   c1044:	d508      	bpl.n	c1058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c1046:	2204      	movs	r2, #4
   c1048:	4918      	ldr	r1, [pc, #96]	; (c10ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c104a:	eb0d 0002 	add.w	r0, sp, r2
   c104e:	f7ff f877 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c1052:	69a1      	ldr	r1, [r4, #24]
   c1054:	f7fe fff2 	bl	c003c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c1058:	7923      	ldrb	r3, [r4, #4]
   c105a:	069b      	lsls	r3, r3, #26
   c105c:	d507      	bpl.n	c106e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c105e:	4914      	ldr	r1, [pc, #80]	; (c10b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c1060:	2206      	movs	r2, #6
   c1062:	a801      	add	r0, sp, #4
   c1064:	f7ff f86c 	bl	c0140 <_ZN5spark10JSONWriter4nameEPKcj>
   c1068:	69e1      	ldr	r1, [r4, #28]
   c106a:	f7ff f912 	bl	c0292 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c106e:	a801      	add	r0, sp, #4
   c1070:	f7fe ffc1 	bl	bfff6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c1074:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c1076:	490f      	ldr	r1, [pc, #60]	; (c10b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c1078:	6803      	ldr	r3, [r0, #0]
   c107a:	2202      	movs	r2, #2
   c107c:	68db      	ldr	r3, [r3, #12]
   c107e:	4798      	blx	r3
}
   c1080:	b005      	add	sp, #20
   c1082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c1086:	bf00      	nop
   c1088:	2003e69c 	.word	0x2003e69c
   c108c:	000c7d90 	.word	0x000c7d90
   c1090:	000c7d23 	.word	0x000c7d23
   c1094:	000c7d74 	.word	0x000c7d74
   c1098:	000c86de 	.word	0x000c86de
   c109c:	000c678e 	.word	0x000c678e
   c10a0:	000c7d76 	.word	0x000c7d76
   c10a4:	000c7d79 	.word	0x000c7d79
   c10a8:	000c6a3b 	.word	0x000c6a3b
   c10ac:	000c7d7c 	.word	0x000c7d7c
   c10b0:	000c7d81 	.word	0x000c7d81
   c10b4:	000c7d71 	.word	0x000c7d71

000c10b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c10b8:	2300      	movs	r3, #0
   c10ba:	6840      	ldr	r0, [r0, #4]
   c10bc:	461a      	mov	r2, r3
   c10be:	f7fc bfa7 	b.w	be010 <network_connect>

000c10c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c10c2:	6840      	ldr	r0, [r0, #4]
   c10c4:	2200      	movs	r2, #0
   c10c6:	2102      	movs	r1, #2
   c10c8:	f7fc bfb2 	b.w	be030 <network_disconnect>

000c10cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c10cc:	2200      	movs	r2, #0
   c10ce:	6840      	ldr	r0, [r0, #4]
   c10d0:	4611      	mov	r1, r2
   c10d2:	f7fc bfa5 	b.w	be020 <network_connecting>

000c10d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c10d6:	2200      	movs	r2, #0
   c10d8:	6840      	ldr	r0, [r0, #4]
   c10da:	4611      	mov	r1, r2
   c10dc:	f7fc bfb0 	b.w	be040 <network_ready>

000c10e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c10e0:	2300      	movs	r3, #0
   c10e2:	6840      	ldr	r0, [r0, #4]
   c10e4:	461a      	mov	r2, r3
   c10e6:	4619      	mov	r1, r3
   c10e8:	f7fc bfb2 	b.w	be050 <network_on>

000c10ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c10ec:	2300      	movs	r3, #0
   c10ee:	6840      	ldr	r0, [r0, #4]
   c10f0:	461a      	mov	r2, r3
   c10f2:	4619      	mov	r1, r3
   c10f4:	f7fc bfb4 	b.w	be060 <network_off>

000c10f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c10f8:	6840      	ldr	r0, [r0, #4]
   c10fa:	2100      	movs	r1, #0
   c10fc:	f7fc bfd8 	b.w	be0b0 <network_is_on>

000c1100 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1100:	6840      	ldr	r0, [r0, #4]
   c1102:	2100      	movs	r1, #0
   c1104:	f7fc bfdc 	b.w	be0c0 <network_is_off>

000c1108 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1108:	6840      	ldr	r0, [r0, #4]
   c110a:	2200      	movs	r2, #0
   c110c:	f081 0101 	eor.w	r1, r1, #1
   c1110:	f7fc bfae 	b.w	be070 <network_listen>

000c1114 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c1114:	6840      	ldr	r0, [r0, #4]
   c1116:	2200      	movs	r2, #0
   c1118:	f7fc bfba 	b.w	be090 <network_set_listen_timeout>

000c111c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c111c:	2200      	movs	r2, #0
   c111e:	6840      	ldr	r0, [r0, #4]
   c1120:	4611      	mov	r1, r2
   c1122:	f7fc bfbd 	b.w	be0a0 <network_get_listen_timeout>

000c1126 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c1126:	2200      	movs	r2, #0
   c1128:	6840      	ldr	r0, [r0, #4]
   c112a:	4611      	mov	r1, r2
   c112c:	f7fc bfa8 	b.w	be080 <network_listening>

000c1130 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1134:	b095      	sub	sp, #84	; 0x54
   c1136:	4614      	mov	r4, r2
   c1138:	460d      	mov	r5, r1
   c113a:	4607      	mov	r7, r0
    IPAddress addr;
   c113c:	f7fe fe0a 	bl	bfd54 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1140:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c1142:	221c      	movs	r2, #28
   c1144:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1146:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1148:	f003 f93e 	bl	c43c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c114c:	2340      	movs	r3, #64	; 0x40
   c114e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1150:	4620      	mov	r0, r4
   c1152:	466b      	mov	r3, sp
   c1154:	aa0c      	add	r2, sp, #48	; 0x30
   c1156:	2100      	movs	r1, #0
   c1158:	f7fc fd9c 	bl	bdc94 <netdb_getaddrinfo>
    if (!r) {
   c115c:	4604      	mov	r4, r0
   c115e:	2800      	cmp	r0, #0
   c1160:	d14b      	bne.n	c11fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1162:	4602      	mov	r2, r0
   c1164:	2101      	movs	r1, #1
   c1166:	6868      	ldr	r0, [r5, #4]
   c1168:	f7fc ff6a 	bl	be040 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c116c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c116e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1170:	4622      	mov	r2, r4
   c1172:	6868      	ldr	r0, [r5, #4]
   c1174:	f7fc ff64 	bl	be040 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1178:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c117a:	4681      	mov	r9, r0
        bool ok = false;
   c117c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c117e:	2e00      	cmp	r6, #0
   c1180:	d03b      	beq.n	c11fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c1182:	2900      	cmp	r1, #0
   c1184:	d139      	bne.n	c11fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c1186:	6873      	ldr	r3, [r6, #4]
   c1188:	2b02      	cmp	r3, #2
   c118a:	d003      	beq.n	c1194 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c118c:	2b0a      	cmp	r3, #10
   c118e:	d011      	beq.n	c11b4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1190:	69f6      	ldr	r6, [r6, #28]
   c1192:	e7f4      	b.n	c117e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c1194:	f1b8 0f00 	cmp.w	r8, #0
   c1198:	d0fa      	beq.n	c1190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c119a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c119c:	a806      	add	r0, sp, #24
   c119e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c11a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c11a2:	f7fe fe05 	bl	bfdb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c11a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c11a8:	1d3c      	adds	r4, r7, #4
   c11aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c11ac:	682b      	ldr	r3, [r5, #0]
   c11ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c11b0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c11b2:	e7ed      	b.n	c1190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c11b4:	f1b9 0f00 	cmp.w	r9, #0
   c11b8:	d0ea      	beq.n	c1190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c11ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c11bc:	2210      	movs	r2, #16
   c11be:	a801      	add	r0, sp, #4
   c11c0:	f003 f902 	bl	c43c8 <memset>
                    a.v = 6;
   c11c4:	2306      	movs	r3, #6
   c11c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c11ca:	ad01      	add	r5, sp, #4
   c11cc:	f104 0308 	add.w	r3, r4, #8
   c11d0:	3418      	adds	r4, #24
   c11d2:	6818      	ldr	r0, [r3, #0]
   c11d4:	6859      	ldr	r1, [r3, #4]
   c11d6:	462a      	mov	r2, r5
   c11d8:	c203      	stmia	r2!, {r0, r1}
   c11da:	3308      	adds	r3, #8
   c11dc:	42a3      	cmp	r3, r4
   c11de:	4615      	mov	r5, r2
   c11e0:	d1f7      	bne.n	c11d2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c11e2:	a901      	add	r1, sp, #4
   c11e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c11e6:	ad07      	add	r5, sp, #28
   c11e8:	f7fe fdc2 	bl	bfd70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c11ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c11ee:	1d3c      	adds	r4, r7, #4
   c11f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c11f2:	682b      	ldr	r3, [r5, #0]
   c11f4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c11f6:	4649      	mov	r1, r9
   c11f8:	e7ca      	b.n	c1190 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c11fa:	9800      	ldr	r0, [sp, #0]
   c11fc:	f7fc fd42 	bl	bdc84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1200:	4638      	mov	r0, r7
   c1202:	b015      	add	sp, #84	; 0x54
   c1204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1208 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1208:	4b02      	ldr	r3, [pc, #8]	; (c1214 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c120a:	4a03      	ldr	r2, [pc, #12]	; (c1218 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c120c:	601a      	str	r2, [r3, #0]
   c120e:	2200      	movs	r2, #0
   c1210:	605a      	str	r2, [r3, #4]

} // spark
   c1212:	4770      	bx	lr
   c1214:	2003e69c 	.word	0x2003e69c
   c1218:	000c7e08 	.word	0x000c7e08

000c121c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c121e:	4606      	mov	r6, r0
   c1220:	460d      	mov	r5, r1
  size_t n = 0;
   c1222:	188f      	adds	r7, r1, r2
   c1224:	2400      	movs	r4, #0
  while (size--) {
   c1226:	42bd      	cmp	r5, r7
   c1228:	d00c      	beq.n	c1244 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c122a:	6833      	ldr	r3, [r6, #0]
   c122c:	f815 1b01 	ldrb.w	r1, [r5], #1
   c1230:	689b      	ldr	r3, [r3, #8]
   c1232:	4630      	mov	r0, r6
   c1234:	4798      	blx	r3
     if (chunk>=0)
   c1236:	1e03      	subs	r3, r0, #0
   c1238:	db01      	blt.n	c123e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c123a:	441c      	add	r4, r3
  while (size--) {
   c123c:	e7f3      	b.n	c1226 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c123e:	2c00      	cmp	r4, #0
   c1240:	bf08      	it	eq
   c1242:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c1244:	4620      	mov	r0, r4
   c1246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1248 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c1248:	b508      	push	{r3, lr}
  return write(str);
   c124a:	f7f6 fa9f 	bl	b778c <_ZN5Print5writeEPKc>
}
   c124e:	bd08      	pop	{r3, pc}

000c1250 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c1250:	6803      	ldr	r3, [r0, #0]
   c1252:	689b      	ldr	r3, [r3, #8]
   c1254:	4718      	bx	r3

000c1256 <_ZN5Print5printEPK19__FlashStringHelper>:
   c1256:	b508      	push	{r3, lr}
   c1258:	f7f6 fa98 	bl	b778c <_ZN5Print5writeEPKc>
   c125c:	bd08      	pop	{r3, pc}

000c125e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c125e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c1260:	210d      	movs	r1, #13
{
   c1262:	4605      	mov	r5, r0
  size_t n = print('\r');
   c1264:	f7ff fff4 	bl	c1250 <_ZN5Print5printEc>
  n += print('\n');
   c1268:	210a      	movs	r1, #10
  size_t n = print('\r');
   c126a:	4604      	mov	r4, r0
  n += print('\n');
   c126c:	4628      	mov	r0, r5
   c126e:	f7ff ffef 	bl	c1250 <_ZN5Print5printEc>
  return n;
}
   c1272:	4420      	add	r0, r4
   c1274:	bd38      	pop	{r3, r4, r5, pc}

000c1276 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c1276:	b538      	push	{r3, r4, r5, lr}
   c1278:	4605      	mov	r5, r0
  return write(str);
   c127a:	f7f6 fa87 	bl	b778c <_ZN5Print5writeEPKc>
   c127e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c1280:	4628      	mov	r0, r5
   c1282:	f7ff ffec 	bl	c125e <_ZN5Print7printlnEv>
  return n;
}
   c1286:	4420      	add	r0, r4
   c1288:	bd38      	pop	{r3, r4, r5, pc}

000c128a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c128a:	f7ff bff4 	b.w	c1276 <_ZN5Print7printlnEPKc>

000c128e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c128e:	b530      	push	{r4, r5, lr}
   c1290:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c1292:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c1294:	2a01      	cmp	r2, #1
  *str = '\0';
   c1296:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c129a:	bf98      	it	ls
   c129c:	220a      	movls	r2, #10
   c129e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c12a0:	460d      	mov	r5, r1
   c12a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c12a6:	fb01 5312 	mls	r3, r1, r2, r5
   c12aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c12ae:	2b09      	cmp	r3, #9
   c12b0:	bf94      	ite	ls
   c12b2:	3330      	addls	r3, #48	; 0x30
   c12b4:	3337      	addhi	r3, #55	; 0x37
   c12b6:	b2db      	uxtb	r3, r3
  } while(n);
   c12b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c12ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c12be:	d9ef      	bls.n	c12a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c12c0:	4621      	mov	r1, r4
   c12c2:	f7f6 fa63 	bl	b778c <_ZN5Print5writeEPKc>
}
   c12c6:	b00b      	add	sp, #44	; 0x2c
   c12c8:	bd30      	pop	{r4, r5, pc}

000c12ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c12ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c12ce:	b086      	sub	sp, #24
   c12d0:	af00      	add	r7, sp, #0
   c12d2:	4605      	mov	r5, r0
   c12d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c12d6:	1d38      	adds	r0, r7, #4
   c12d8:	2114      	movs	r1, #20
{
   c12da:	4614      	mov	r4, r2
    va_copy(args2, args);
   c12dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c12de:	f7fc ff27 	bl	be130 <vsnprintf>

    if (n<bufsize)
   c12e2:	2813      	cmp	r0, #19
   c12e4:	d80e      	bhi.n	c1304 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c12e6:	1d39      	adds	r1, r7, #4
   c12e8:	4628      	mov	r0, r5
   c12ea:	f7f6 fa4f 	bl	b778c <_ZN5Print5writeEPKc>
   c12ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c12f0:	b11e      	cbz	r6, c12fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c12f2:	4628      	mov	r0, r5
   c12f4:	f7ff ffb3 	bl	c125e <_ZN5Print7printlnEv>
   c12f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c12fa:	4620      	mov	r0, r4
   c12fc:	3718      	adds	r7, #24
   c12fe:	46bd      	mov	sp, r7
   c1300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c1304:	f100 0308 	add.w	r3, r0, #8
   c1308:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c130c:	46e8      	mov	r8, sp
        char bigger[n+1];
   c130e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c1312:	4622      	mov	r2, r4
   c1314:	1c41      	adds	r1, r0, #1
   c1316:	683b      	ldr	r3, [r7, #0]
   c1318:	4668      	mov	r0, sp
   c131a:	f7fc ff09 	bl	be130 <vsnprintf>
  return write(str);
   c131e:	4669      	mov	r1, sp
   c1320:	4628      	mov	r0, r5
   c1322:	f7f6 fa33 	bl	b778c <_ZN5Print5writeEPKc>
   c1326:	4604      	mov	r4, r0
   c1328:	46c5      	mov	sp, r8
   c132a:	e7e1      	b.n	c12f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c132c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c132c:	4b01      	ldr	r3, [pc, #4]	; (c1334 <_GLOBAL__sub_I_RGB+0x8>)
   c132e:	2200      	movs	r2, #0
   c1330:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c1332:	4770      	bx	lr
   c1334:	2003e6a4 	.word	0x2003e6a4

000c1338 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c1338:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c133c:	1c53      	adds	r3, r2, #1
   c133e:	d00b      	beq.n	c1358 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c1340:	8843      	ldrh	r3, [r0, #2]
   c1342:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c1344:	428b      	cmp	r3, r1
   c1346:	d803      	bhi.n	c1350 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c1348:	4288      	cmp	r0, r1
   c134a:	4603      	mov	r3, r0
   c134c:	bf28      	it	cs
   c134e:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c1350:	4619      	mov	r1, r3
   c1352:	b290      	uxth	r0, r2
   c1354:	f7fc bcb6 	b.w	bdcc4 <HAL_Servo_Write_Pulse_Width>
}
   c1358:	4770      	bx	lr

000c135a <_ZN5Servo5writeEi>:
{
   c135a:	b513      	push	{r0, r1, r4, lr}
   c135c:	4604      	mov	r4, r0
   c135e:	4608      	mov	r0, r1
   c1360:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c1364:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c1368:	4288      	cmp	r0, r1
   c136a:	db10      	blt.n	c138e <_ZN5Servo5writeEi+0x34>
   c136c:	4290      	cmp	r0, r2
   c136e:	bfa8      	it	ge
   c1370:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c1372:	88a3      	ldrh	r3, [r4, #4]
   c1374:	9300      	str	r3, [sp, #0]
   c1376:	8863      	ldrh	r3, [r4, #2]
   c1378:	f7fc ff12 	bl	be1a0 <_Z3mapiiiii>
   c137c:	68e1      	ldr	r1, [r4, #12]
   c137e:	4401      	add	r1, r0
   c1380:	b289      	uxth	r1, r1
   c1382:	4620      	mov	r0, r4
}
   c1384:	b002      	add	sp, #8
   c1386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c138a:	f7ff bfd5 	b.w	c1338 <_ZN5Servo17writeMicrosecondsEt>
   c138e:	4608      	mov	r0, r1
   c1390:	e7ef      	b.n	c1372 <_ZN5Servo5writeEi+0x18>
	...

000c1394 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c1394:	4a04      	ldr	r2, [pc, #16]	; (c13a8 <_ZN5Servo11resetFieldsEv+0x14>)
   c1396:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c139a:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c139e:	23b4      	movs	r3, #180	; 0xb4
   c13a0:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c13a2:	2300      	movs	r3, #0
   c13a4:	60c3      	str	r3, [r0, #12]
}
   c13a6:	4770      	bx	lr
   c13a8:	0220ffff 	.word	0x0220ffff

000c13ac <_ZN5ServoC1Ev>:
Servo::Servo()
   c13ac:	b508      	push	{r3, lr}
  this->resetFields();
   c13ae:	f7ff fff1 	bl	c1394 <_ZN5Servo11resetFieldsEv>
}
   c13b2:	bd08      	pop	{r3, pc}

000c13b4 <_ZN5Servo6detachEv>:
{
   c13b4:	b510      	push	{r4, lr}
   c13b6:	4604      	mov	r4, r0
   c13b8:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c13bc:	1c43      	adds	r3, r0, #1
   c13be:	d007      	beq.n	c13d0 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c13c0:	b280      	uxth	r0, r0
   c13c2:	f7fc fc77 	bl	bdcb4 <HAL_Servo_Detach>
  this->resetFields();
   c13c6:	4620      	mov	r0, r4
   c13c8:	f7ff ffe4 	bl	c1394 <_ZN5Servo11resetFieldsEv>
  return true;
   c13cc:	2001      	movs	r0, #1
}
   c13ce:	bd10      	pop	{r4, pc}
    return false;
   c13d0:	2000      	movs	r0, #0
   c13d2:	e7fc      	b.n	c13ce <_ZN5Servo6detachEv+0x1a>

000c13d4 <_ZN5Servo6attachEtttss>:
{
   c13d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c13d8:	460d      	mov	r5, r1
   c13da:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c13dc:	2102      	movs	r1, #2
   c13de:	4628      	mov	r0, r5
{
   c13e0:	4690      	mov	r8, r2
   c13e2:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c13e4:	f7fc fbae 	bl	bdb44 <HAL_Validate_Pin_Function>
   c13e8:	2802      	cmp	r0, #2
   c13ea:	d003      	beq.n	c13f4 <_ZN5Servo6attachEtttss+0x20>
    return false;
   c13ec:	2600      	movs	r6, #0
}
   c13ee:	4630      	mov	r0, r6
   c13f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c13f4:	4628      	mov	r0, r5
   c13f6:	f000 fcc1 	bl	c1d7c <pinAvailable>
   c13fa:	4606      	mov	r6, r0
   c13fc:	2800      	cmp	r0, #0
   c13fe:	d0f5      	beq.n	c13ec <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c1400:	f9b4 3000 	ldrsh.w	r3, [r4]
   c1404:	3301      	adds	r3, #1
   c1406:	d002      	beq.n	c140e <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c1408:	4620      	mov	r0, r4
   c140a:	f7ff ffd3 	bl	c13b4 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c140e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c1412:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c1414:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c1418:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c141a:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c141e:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c1420:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c1422:	4628      	mov	r0, r5
   c1424:	f7fc fc3e 	bl	bdca4 <HAL_Servo_Attach>
  return true;
   c1428:	e7e1      	b.n	c13ee <_ZN5Servo6attachEtttss+0x1a>

000c142a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c142a:	2100      	movs	r1, #0
   c142c:	f7fc bcaa 	b.w	bdd84 <hal_spi_release>

000c1430 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c1430:	2100      	movs	r1, #0
   c1432:	f7fc bc9f 	b.w	bdd74 <hal_spi_acquire>

000c1436 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c1436:	b510      	push	{r4, lr}
   c1438:	4604      	mov	r4, r0
   c143a:	4608      	mov	r0, r1
{
    _spi = spi;
   c143c:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c143e:	f7fc fc61 	bl	bdd04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c1442:	2300      	movs	r3, #0
   c1444:	6063      	str	r3, [r4, #4]
}
   c1446:	4620      	mov	r0, r4
   c1448:	bd10      	pop	{r4, pc}

000c144a <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c144a:	b513      	push	{r0, r1, r4, lr}
   c144c:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c144e:	7800      	ldrb	r0, [r0, #0]
   c1450:	f7ff ffee 	bl	c1430 <_ZN8SPIClass4lockEv.isra.0>
   c1454:	b958      	cbnz	r0, c146e <_ZN8SPIClass5beginEv+0x24>
   c1456:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c1458:	9001      	str	r0, [sp, #4]
   c145a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c145e:	f7fc fc39 	bl	bdcd4 <hal_spi_begin>
        unlock();
   c1462:	9801      	ldr	r0, [sp, #4]
    }
}
   c1464:	b002      	add	sp, #8
   c1466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c146a:	f7ff bfde 	b.w	c142a <_ZN8SPIClass6unlockEv.isra.0>
   c146e:	b002      	add	sp, #8
   c1470:	bd10      	pop	{r4, pc}

000c1472 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c1472:	b513      	push	{r0, r1, r4, lr}
   c1474:	4604      	mov	r4, r0
    if (!lock())
   c1476:	7800      	ldrb	r0, [r0, #0]
{
   c1478:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c147c:	f7ff ffd8 	bl	c1430 <_ZN8SPIClass4lockEv.isra.0>
   c1480:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1484:	4603      	mov	r3, r0
   c1486:	b948      	cbnz	r0, c149c <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c1488:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c148a:	9000      	str	r0, [sp, #0]
   c148c:	f7fc fc5a 	bl	bdd44 <hal_spi_begin_ext>
        unlock();
   c1490:	9800      	ldr	r0, [sp, #0]
    }
}
   c1492:	b002      	add	sp, #8
   c1494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1498:	f7ff bfc7 	b.w	c142a <_ZN8SPIClass6unlockEv.isra.0>
   c149c:	b002      	add	sp, #8
   c149e:	bd10      	pop	{r4, pc}

000c14a0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c14a0:	7800      	ldrb	r0, [r0, #0]
   c14a2:	f7ff bfc2 	b.w	c142a <_ZN8SPIClass6unlockEv.isra.0>
	...

000c14a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c14a8:	0840      	lsrs	r0, r0, #1
{
   c14aa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c14ac:	6018      	str	r0, [r3, #0]
   c14ae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c14b0:	6818      	ldr	r0, [r3, #0]
   c14b2:	4288      	cmp	r0, r1
   c14b4:	b2e5      	uxtb	r5, r4
   c14b6:	d906      	bls.n	c14c6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c14b8:	3401      	adds	r4, #1
   c14ba:	2c08      	cmp	r4, #8
   c14bc:	d002      	beq.n	c14c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c14be:	0840      	lsrs	r0, r0, #1
   c14c0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c14c2:	e7f5      	b.n	c14b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c14c4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c14c6:	4b02      	ldr	r3, [pc, #8]	; (c14d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c14c8:	5d5b      	ldrb	r3, [r3, r5]
   c14ca:	7013      	strb	r3, [r2, #0]
}
   c14cc:	bd30      	pop	{r4, r5, pc}
   c14ce:	bf00      	nop
   c14d0:	000c7e3c 	.word	0x000c7e3c

000c14d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c14d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c14d8:	4606      	mov	r6, r0
   c14da:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c14dc:	7800      	ldrb	r0, [r0, #0]
{
   c14de:	460c      	mov	r4, r1
    CHECK(lock());
   c14e0:	f7ff ffa6 	bl	c1430 <_ZN8SPIClass4lockEv.isra.0>
   c14e4:	2800      	cmp	r0, #0
   c14e6:	db1b      	blt.n	c1520 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c14e8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c14ea:	2214      	movs	r2, #20
   c14ec:	2100      	movs	r1, #0
   c14ee:	a809      	add	r0, sp, #36	; 0x24
   c14f0:	f002 ff6a 	bl	c43c8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c14f4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c14f6:	2200      	movs	r2, #0
   c14f8:	a909      	add	r1, sp, #36	; 0x24
   c14fa:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c14fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c1500:	f7fc fc10 	bl	bdd24 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c1504:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c1508:	b113      	cbz	r3, c1510 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c150a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c150e:	b155      	cbz	r5, c1526 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c1510:	2700      	movs	r7, #0
   c1512:	46b9      	mov	r9, r7
   c1514:	46b8      	mov	r8, r7
   c1516:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c1518:	7923      	ldrb	r3, [r4, #4]
   c151a:	b15d      	cbz	r5, c1534 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c151c:	b1c3      	cbz	r3, c1550 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c151e:	2000      	movs	r0, #0
}
   c1520:	b00f      	add	sp, #60	; 0x3c
   c1522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c1526:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c152a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c152e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c1532:	e7f1      	b.n	c1518 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c1534:	2b00      	cmp	r3, #0
   c1536:	d135      	bne.n	c15a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c1538:	68a3      	ldr	r3, [r4, #8]
   c153a:	4543      	cmp	r3, r8
   c153c:	d108      	bne.n	c1550 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c153e:	f88d 9020 	strb.w	r9, [sp, #32]
   c1542:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1546:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c154a:	89a3      	ldrh	r3, [r4, #12]
   c154c:	429a      	cmp	r2, r3
   c154e:	d0e6      	beq.n	c151e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c1550:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1552:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c1554:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1558:	980a      	ldr	r0, [sp, #40]	; 0x28
   c155a:	ab04      	add	r3, sp, #16
   c155c:	f10d 020f 	add.w	r2, sp, #15
   c1560:	f7ff ffa2 	bl	c14a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c1564:	7921      	ldrb	r1, [r4, #4]
   c1566:	b985      	cbnz	r5, c158a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1568:	b989      	cbnz	r1, c158e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c156a:	68a3      	ldr	r3, [r4, #8]
   c156c:	4543      	cmp	r3, r8
   c156e:	d30e      	bcc.n	c158e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c1570:	f88d 9020 	strb.w	r9, [sp, #32]
   c1574:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1578:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c157c:	89a3      	ldrh	r3, [r4, #12]
   c157e:	429a      	cmp	r2, r3
   c1580:	d105      	bne.n	c158e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c1582:	9b04      	ldr	r3, [sp, #16]
   c1584:	4543      	cmp	r3, r8
   c1586:	d102      	bne.n	c158e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1588:	e7c9      	b.n	c151e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c158a:	2900      	cmp	r1, #0
   c158c:	d1f9      	bne.n	c1582 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c158e:	2300      	movs	r3, #0
   c1590:	9301      	str	r3, [sp, #4]
   c1592:	7b63      	ldrb	r3, [r4, #13]
   c1594:	9300      	str	r3, [sp, #0]
   c1596:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c159a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c159c:	7830      	ldrb	r0, [r6, #0]
   c159e:	f7fc fbe1 	bl	bdd64 <hal_spi_set_settings>
   c15a2:	e7bc      	b.n	c151e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c15a4:	e9cd 5500 	strd	r5, r5, [sp]
   c15a8:	462b      	mov	r3, r5
   c15aa:	462a      	mov	r2, r5
   c15ac:	2101      	movs	r1, #1
   c15ae:	e7f5      	b.n	c159c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c15b0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c15b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c15b4:	b088      	sub	sp, #32
    unsigned clock = 0;
   c15b6:	2300      	movs	r3, #0
{
   c15b8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c15ba:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c15bc:	9302      	str	r3, [sp, #8]
{
   c15be:	460e      	mov	r6, r1
   c15c0:	4617      	mov	r7, r2
    if (!lock())
   c15c2:	f7ff ff35 	bl	c1430 <_ZN8SPIClass4lockEv.isra.0>
   c15c6:	4605      	mov	r5, r0
   c15c8:	bb00      	cbnz	r0, c160c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c15ca:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c15ce:	4601      	mov	r1, r0
   c15d0:	2214      	movs	r2, #20
   c15d2:	a803      	add	r0, sp, #12
   c15d4:	f002 fef8 	bl	c43c8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c15d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c15da:	462a      	mov	r2, r5
   c15dc:	a903      	add	r1, sp, #12
   c15de:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c15e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c15e4:	f7fc fb9e 	bl	bdd24 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c15e8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c15ea:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c15ee:	ab02      	add	r3, sp, #8
   c15f0:	f10d 0207 	add.w	r2, sp, #7
   c15f4:	fb07 f106 	mul.w	r1, r7, r6
   c15f8:	f7ff ff56 	bl	c14a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c15fc:	7820      	ldrb	r0, [r4, #0]
   c15fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c1602:	f7fc fb6f 	bl	bdce4 <hal_spi_set_clock_divider>
        unlock();
   c1606:	7820      	ldrb	r0, [r4, #0]
   c1608:	f7ff ff0f 	bl	c142a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c160c:	9802      	ldr	r0, [sp, #8]
   c160e:	b008      	add	sp, #32
   c1610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c1614 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c1614:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c1616:	7800      	ldrb	r0, [r0, #0]
   c1618:	f7fc fb6c 	bl	bdcf4 <hal_spi_transfer>
}
   c161c:	b2c0      	uxtb	r0, r0
   c161e:	bd08      	pop	{r3, pc}

000c1620 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c1620:	b530      	push	{r4, r5, lr}
   c1622:	b087      	sub	sp, #28
   c1624:	4604      	mov	r4, r0
   c1626:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c1628:	9500      	str	r5, [sp, #0]
   c162a:	7800      	ldrb	r0, [r0, #0]
   c162c:	f7fc fb82 	bl	bdd34 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c1630:	b93d      	cbnz	r5, c1642 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c1632:	7820      	ldrb	r0, [r4, #0]
   c1634:	a902      	add	r1, sp, #8
   c1636:	f7fc fb8d 	bl	bdd54 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c163a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c163e:	07db      	lsls	r3, r3, #31
   c1640:	d4f7      	bmi.n	c1632 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c1642:	b007      	add	sp, #28
   c1644:	bd30      	pop	{r4, r5, pc}

000c1646 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c1646:	b510      	push	{r4, lr}
   c1648:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c164a:	f7fc fa63 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c164e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c1650:	6823      	ldr	r3, [r4, #0]
   c1652:	4620      	mov	r0, r4
   c1654:	695b      	ldr	r3, [r3, #20]
   c1656:	4798      	blx	r3
    if (c >= 0) return c;
   c1658:	2800      	cmp	r0, #0
   c165a:	da08      	bge.n	c166e <_ZN6Stream9timedReadEv+0x28>
   c165c:	f7fc fa5a 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c1660:	68e3      	ldr	r3, [r4, #12]
   c1662:	1ac0      	subs	r0, r0, r3
   c1664:	68a3      	ldr	r3, [r4, #8]
   c1666:	4298      	cmp	r0, r3
   c1668:	d3f2      	bcc.n	c1650 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c166a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c166e:	bd10      	pop	{r4, pc}

000c1670 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c1670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1674:	4607      	mov	r7, r0
   c1676:	4688      	mov	r8, r1
   c1678:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c167a:	461d      	mov	r5, r3
   c167c:	b173      	cbz	r3, c169c <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c167e:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c1680:	4638      	mov	r0, r7
   c1682:	f7ff ffe0 	bl	c1646 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c1686:	1e03      	subs	r3, r0, #0
   c1688:	db05      	blt.n	c1696 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c168a:	4543      	cmp	r3, r8
   c168c:	d003      	beq.n	c1696 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c168e:	5533      	strb	r3, [r6, r4]
    index++;
   c1690:	3401      	adds	r4, #1
  while (index < length) {
   c1692:	42a5      	cmp	r5, r4
   c1694:	d1f4      	bne.n	c1680 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c1696:	4620      	mov	r0, r4
   c1698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c169c:	461c      	mov	r4, r3
   c169e:	e7fa      	b.n	c1696 <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c16a0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c16a0:	b570      	push	{r4, r5, r6, lr}
   c16a2:	460d      	mov	r5, r1
  String ret;
   c16a4:	4909      	ldr	r1, [pc, #36]	; (c16cc <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c16a6:	4604      	mov	r4, r0
   c16a8:	4616      	mov	r6, r2
  String ret;
   c16aa:	f000 f85c 	bl	c1766 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c16ae:	4628      	mov	r0, r5
   c16b0:	f7ff ffc9 	bl	c1646 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c16b4:	2800      	cmp	r0, #0
   c16b6:	db06      	blt.n	c16c6 <_ZN6Stream15readStringUntilEc+0x26>
   c16b8:	4286      	cmp	r6, r0
   c16ba:	d004      	beq.n	c16c6 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c16bc:	b2c1      	uxtb	r1, r0
   c16be:	4620      	mov	r0, r4
   c16c0:	f000 f8d0 	bl	c1864 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c16c4:	e7f3      	b.n	c16ae <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c16c6:	4620      	mov	r0, r4
   c16c8:	bd70      	pop	{r4, r5, r6, pc}
   c16ca:	bf00      	nop
   c16cc:	000c7d73 	.word	0x000c7d73

000c16d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c16d0:	b510      	push	{r4, lr}
   c16d2:	4604      	mov	r4, r0
{
	free(buffer);
   c16d4:	6800      	ldr	r0, [r0, #0]
   c16d6:	f7fc fd03 	bl	be0e0 <free>
}
   c16da:	4620      	mov	r0, r4
   c16dc:	bd10      	pop	{r4, pc}

000c16de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c16de:	b510      	push	{r4, lr}
   c16e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c16e2:	6800      	ldr	r0, [r0, #0]
   c16e4:	b108      	cbz	r0, c16ea <_ZN6String10invalidateEv+0xc>
   c16e6:	f7fc fcfb 	bl	be0e0 <free>
	buffer = NULL;
   c16ea:	2300      	movs	r3, #0
	capacity = len = 0;
   c16ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c16f0:	6023      	str	r3, [r4, #0]
}
   c16f2:	bd10      	pop	{r4, pc}

000c16f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c16f4:	b538      	push	{r3, r4, r5, lr}
   c16f6:	4604      	mov	r4, r0
   c16f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c16fa:	6800      	ldr	r0, [r0, #0]
   c16fc:	3101      	adds	r1, #1
   c16fe:	f7fc fcf7 	bl	be0f0 <realloc>
	if (newbuffer) {
   c1702:	b110      	cbz	r0, c170a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c1704:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c1708:	2001      	movs	r0, #1
	}
	return 0;
}
   c170a:	bd38      	pop	{r3, r4, r5, pc}

000c170c <_ZN6String7reserveEj>:
{
   c170c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c170e:	6803      	ldr	r3, [r0, #0]
{
   c1710:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c1712:	b123      	cbz	r3, c171e <_ZN6String7reserveEj+0x12>
   c1714:	6843      	ldr	r3, [r0, #4]
   c1716:	428b      	cmp	r3, r1
   c1718:	d301      	bcc.n	c171e <_ZN6String7reserveEj+0x12>
   c171a:	2001      	movs	r0, #1
}
   c171c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c171e:	4620      	mov	r0, r4
   c1720:	f7ff ffe8 	bl	c16f4 <_ZN6String12changeBufferEj>
   c1724:	2800      	cmp	r0, #0
   c1726:	d0f9      	beq.n	c171c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c1728:	68a3      	ldr	r3, [r4, #8]
   c172a:	2b00      	cmp	r3, #0
   c172c:	d1f5      	bne.n	c171a <_ZN6String7reserveEj+0xe>
   c172e:	6822      	ldr	r2, [r4, #0]
   c1730:	7013      	strb	r3, [r2, #0]
   c1732:	e7f2      	b.n	c171a <_ZN6String7reserveEj+0xe>

000c1734 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c1734:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c1736:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c1738:	4611      	mov	r1, r2
   c173a:	9201      	str	r2, [sp, #4]
{
   c173c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c173e:	f7ff ffe5 	bl	c170c <_ZN6String7reserveEj>
   c1742:	9a01      	ldr	r2, [sp, #4]
   c1744:	b928      	cbnz	r0, c1752 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c1746:	4620      	mov	r0, r4
   c1748:	f7ff ffc9 	bl	c16de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c174c:	4620      	mov	r0, r4
   c174e:	b003      	add	sp, #12
   c1750:	bd30      	pop	{r4, r5, pc}
	len = length;
   c1752:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c1754:	4629      	mov	r1, r5
   c1756:	6820      	ldr	r0, [r4, #0]
   c1758:	f002 fe0e 	bl	c4378 <memcpy>
	buffer[len] = 0;
   c175c:	6822      	ldr	r2, [r4, #0]
   c175e:	68a3      	ldr	r3, [r4, #8]
   c1760:	2100      	movs	r1, #0
   c1762:	54d1      	strb	r1, [r2, r3]
	return *this;
   c1764:	e7f2      	b.n	c174c <_ZN6String4copyEPKcj+0x18>

000c1766 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c1766:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c1768:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c176a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c176e:	4604      	mov	r4, r0
	len = 0;
   c1770:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1772:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c1774:	b141      	cbz	r1, c1788 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c1776:	4608      	mov	r0, r1
   c1778:	9101      	str	r1, [sp, #4]
   c177a:	f002 feb0 	bl	c44de <strlen>
   c177e:	9901      	ldr	r1, [sp, #4]
   c1780:	4602      	mov	r2, r0
   c1782:	4620      	mov	r0, r4
   c1784:	f7ff ffd6 	bl	c1734 <_ZN6String4copyEPKcj>
}
   c1788:	4620      	mov	r0, r4
   c178a:	b002      	add	sp, #8
   c178c:	bd10      	pop	{r4, pc}

000c178e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c178e:	b538      	push	{r3, r4, r5, lr}
   c1790:	4605      	mov	r5, r0
	if (buffer) {
   c1792:	6800      	ldr	r0, [r0, #0]
{
   c1794:	460c      	mov	r4, r1
	if (buffer) {
   c1796:	b168      	cbz	r0, c17b4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c1798:	686a      	ldr	r2, [r5, #4]
   c179a:	688b      	ldr	r3, [r1, #8]
   c179c:	429a      	cmp	r2, r3
   c179e:	d307      	bcc.n	c17b0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c17a0:	6809      	ldr	r1, [r1, #0]
   c17a2:	f002 fe77 	bl	c4494 <strcpy>
			len = rhs.len;
   c17a6:	68a3      	ldr	r3, [r4, #8]
   c17a8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c17aa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c17ac:	60a3      	str	r3, [r4, #8]
}
   c17ae:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c17b0:	f7fc fc96 	bl	be0e0 <free>
	buffer = rhs.buffer;
   c17b4:	6823      	ldr	r3, [r4, #0]
   c17b6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c17b8:	6863      	ldr	r3, [r4, #4]
   c17ba:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c17bc:	68a3      	ldr	r3, [r4, #8]
   c17be:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c17c0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c17c2:	e9c4 3300 	strd	r3, r3, [r4]
   c17c6:	e7f1      	b.n	c17ac <_ZN6String4moveERS_+0x1e>

000c17c8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c17c8:	b510      	push	{r4, lr}
	buffer = NULL;
   c17ca:	2300      	movs	r3, #0
	capacity = 0;
   c17cc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c17d0:	4604      	mov	r4, r0
	len = 0;
   c17d2:	6083      	str	r3, [r0, #8]
	flags = 0;
   c17d4:	7303      	strb	r3, [r0, #12]
	move(rval);
   c17d6:	f7ff ffda 	bl	c178e <_ZN6String4moveERS_>
}
   c17da:	4620      	mov	r0, r4
   c17dc:	bd10      	pop	{r4, pc}

000c17de <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c17de:	4288      	cmp	r0, r1
{
   c17e0:	b510      	push	{r4, lr}
   c17e2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c17e4:	d005      	beq.n	c17f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c17e6:	680b      	ldr	r3, [r1, #0]
   c17e8:	b12b      	cbz	r3, c17f6 <_ZN6StringaSERKS_+0x18>
   c17ea:	688a      	ldr	r2, [r1, #8]
   c17ec:	4619      	mov	r1, r3
   c17ee:	f7ff ffa1 	bl	c1734 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c17f2:	4620      	mov	r0, r4
   c17f4:	bd10      	pop	{r4, pc}
	else invalidate();
   c17f6:	f7ff ff72 	bl	c16de <_ZN6String10invalidateEv>
   c17fa:	e7fa      	b.n	c17f2 <_ZN6StringaSERKS_+0x14>

000c17fc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c17fc:	b510      	push	{r4, lr}
	buffer = NULL;
   c17fe:	2300      	movs	r3, #0
String::String(const String &value)
   c1800:	4604      	mov	r4, r0
	capacity = 0;
   c1802:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c1806:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1808:	7303      	strb	r3, [r0, #12]
	*this = value;
   c180a:	f7ff ffe8 	bl	c17de <_ZN6StringaSERKS_>
}
   c180e:	4620      	mov	r0, r4
   c1810:	bd10      	pop	{r4, pc}

000c1812 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c1812:	b513      	push	{r0, r1, r4, lr}
   c1814:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c1816:	b159      	cbz	r1, c1830 <_ZN6StringaSEPKc+0x1e>
   c1818:	4608      	mov	r0, r1
   c181a:	9101      	str	r1, [sp, #4]
   c181c:	f002 fe5f 	bl	c44de <strlen>
   c1820:	9901      	ldr	r1, [sp, #4]
   c1822:	4602      	mov	r2, r0
   c1824:	4620      	mov	r0, r4
   c1826:	f7ff ff85 	bl	c1734 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c182a:	4620      	mov	r0, r4
   c182c:	b002      	add	sp, #8
   c182e:	bd10      	pop	{r4, pc}
	else invalidate();
   c1830:	f7ff ff55 	bl	c16de <_ZN6String10invalidateEv>
   c1834:	e7f9      	b.n	c182a <_ZN6StringaSEPKc+0x18>

000c1836 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c1836:	b570      	push	{r4, r5, r6, lr}
   c1838:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c183a:	460e      	mov	r6, r1
   c183c:	b909      	cbnz	r1, c1842 <_ZN6String6concatEPKcj+0xc>
   c183e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c1840:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c1842:	b16a      	cbz	r2, c1860 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c1844:	6884      	ldr	r4, [r0, #8]
   c1846:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c1848:	4621      	mov	r1, r4
   c184a:	f7ff ff5f 	bl	c170c <_ZN6String7reserveEj>
   c184e:	2800      	cmp	r0, #0
   c1850:	d0f5      	beq.n	c183e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c1852:	6828      	ldr	r0, [r5, #0]
   c1854:	68ab      	ldr	r3, [r5, #8]
   c1856:	4631      	mov	r1, r6
   c1858:	4418      	add	r0, r3
   c185a:	f002 fe1b 	bl	c4494 <strcpy>
	len = newlen;
   c185e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c1860:	2001      	movs	r0, #1
   c1862:	e7ed      	b.n	c1840 <_ZN6String6concatEPKcj+0xa>

000c1864 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c1864:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c1866:	2300      	movs	r3, #0
	buf[0] = c;
   c1868:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c186c:	2201      	movs	r2, #1
   c186e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c1870:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c1874:	f7ff ffdf 	bl	c1836 <_ZN6String6concatEPKcj>
}
   c1878:	b003      	add	sp, #12
   c187a:	f85d fb04 	ldr.w	pc, [sp], #4

000c187e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c187e:	6883      	ldr	r3, [r0, #8]
   c1880:	428b      	cmp	r3, r1
   c1882:	d903      	bls.n	c188c <_ZNK6StringixEj+0xe>
   c1884:	6800      	ldr	r0, [r0, #0]
   c1886:	b110      	cbz	r0, c188e <_ZNK6StringixEj+0x10>
	return buffer[index];
   c1888:	5c40      	ldrb	r0, [r0, r1]
   c188a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c188c:	2000      	movs	r0, #0
}
   c188e:	4770      	bx	lr

000c1890 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c1890:	f7ff bff5 	b.w	c187e <_ZNK6StringixEj>

000c1894 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   c1894:	b558      	push	{r3, r4, r6, lr}
   c1896:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   c1898:	b12a      	cbz	r2, c18a6 <_ZNK6String8getBytesEPhjj+0x12>
   c189a:	b121      	cbz	r1, c18a6 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   c189c:	6884      	ldr	r4, [r0, #8]
   c189e:	42a3      	cmp	r3, r4
   c18a0:	d302      	bcc.n	c18a8 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   c18a2:	2300      	movs	r3, #0
   c18a4:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   c18a6:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   c18a8:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   c18aa:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   c18ac:	6801      	ldr	r1, [r0, #0]
   c18ae:	4294      	cmp	r4, r2
   c18b0:	bf28      	it	cs
   c18b2:	4614      	movcs	r4, r2
   c18b4:	4419      	add	r1, r3
   c18b6:	4622      	mov	r2, r4
   c18b8:	4630      	mov	r0, r6
   c18ba:	f002 fe3f 	bl	c453c <strncpy>
	buf[n] = 0;
   c18be:	2300      	movs	r3, #0
   c18c0:	5533      	strb	r3, [r6, r4]
   c18c2:	e7f0      	b.n	c18a6 <_ZNK6String8getBytesEPhjj+0x12>

000c18c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c18c4:	4b05      	ldr	r3, [pc, #20]	; (c18dc <_GLOBAL__sub_I_System+0x18>)
   c18c6:	2202      	movs	r2, #2
   c18c8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c18ca:	4b05      	ldr	r3, [pc, #20]	; (c18e0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c18cc:	4a05      	ldr	r2, [pc, #20]	; (c18e4 <_GLOBAL__sub_I_System+0x20>)
   c18ce:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c18d0:	2000      	movs	r0, #0
   c18d2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c18d6:	f7fc bb1f 	b.w	bdf18 <set_system_mode>
   c18da:	bf00      	nop
   c18dc:	2003e6c0 	.word	0x2003e6c0
   c18e0:	2003e6b4 	.word	0x2003e6b4
   c18e4:	ffff0000 	.word	0xffff0000

000c18e8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c18e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c18ec:	4a15      	ldr	r2, [pc, #84]	; (c1944 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c18ee:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1950 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c18f2:	e9d2 6300 	ldrd	r6, r3, [r2]
   c18f6:	1980      	adds	r0, r0, r6
   c18f8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c18fc:	4b12      	ldr	r3, [pc, #72]	; (c1948 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c18fe:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c1902:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c1906:	1986      	adds	r6, r0, r6
   c1908:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c190c:	42bb      	cmp	r3, r7
   c190e:	bf08      	it	eq
   c1910:	42b2      	cmpeq	r2, r6
{
   c1912:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c1914:	d013      	beq.n	c193e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c1916:	a903      	add	r1, sp, #12
   c1918:	4668      	mov	r0, sp
   c191a:	e9cd 6700 	strd	r6, r7, [sp]
   c191e:	f7fc fc37 	bl	be190 <localtime_r>
	calendar_time.tm_year += 1900;
   c1922:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1924:	4d09      	ldr	r5, [pc, #36]	; (c194c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c1926:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c192a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c192c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c1932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c1936:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c193a:	6823      	ldr	r3, [r4, #0]
   c193c:	602b      	str	r3, [r5, #0]
    }
}
   c193e:	b00c      	add	sp, #48	; 0x30
   c1940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1944:	2003e6f8 	.word	0x2003e6f8
   c1948:	2003e6f0 	.word	0x2003e6f0
   c194c:	2003e6c8 	.word	0x2003e6c8
   c1950:	2003e700 	.word	0x2003e700

000c1954 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c1954:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1956:	2000      	movs	r0, #0
   c1958:	f7fc fb4a 	bl	bdff0 <spark_sync_time_pending>
   c195c:	b128      	cbz	r0, c196a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c195e:	f7fc fb2f 	bl	bdfc0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1962:	f080 0001 	eor.w	r0, r0, #1
   c1966:	b2c0      	uxtb	r0, r0
    }
   c1968:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c196a:	2001      	movs	r0, #1
   c196c:	e7fc      	b.n	c1968 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1970 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1970:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1972:	f7ff ffb9 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c1976:	4b02      	ldr	r3, [pc, #8]	; (c1980 <_ZN9TimeClass5monthEx+0x10>)
   c1978:	6918      	ldr	r0, [r3, #16]
}
   c197a:	3001      	adds	r0, #1
   c197c:	bd08      	pop	{r3, pc}
   c197e:	bf00      	nop
   c1980:	2003e6c8 	.word	0x2003e6c8

000c1984 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1984:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c1986:	2000      	movs	r0, #0
   c1988:	f7fc f8cc 	bl	bdb24 <hal_rtc_time_is_valid>
    if (rtcstate)
   c198c:	4604      	mov	r4, r0
   c198e:	b9a0      	cbnz	r0, c19ba <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1990:	f7fc faba 	bl	bdf08 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1994:	2801      	cmp	r0, #1
   c1996:	d110      	bne.n	c19ba <_ZN9TimeClass7isValidEv+0x36>
   c1998:	4620      	mov	r0, r4
   c199a:	f7fc fadd 	bl	bdf58 <system_thread_get_state>
   c199e:	b960      	cbnz	r0, c19ba <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c19a0:	f7ff ffd8 	bl	c1954 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c19a4:	b910      	cbnz	r0, c19ac <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c19a6:	f7fc fb03 	bl	bdfb0 <spark_process>
        while (_while() && !_condition()) {
   c19aa:	e7f9      	b.n	c19a0 <_ZN9TimeClass7isValidEv+0x1c>
   c19ac:	f7ff ffd2 	bl	c1954 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c19b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c19b4:	2000      	movs	r0, #0
   c19b6:	f7fc b8b5 	b.w	bdb24 <hal_rtc_time_is_valid>
}
   c19ba:	4620      	mov	r0, r4
   c19bc:	bd10      	pop	{r4, pc}

000c19be <_ZN9TimeClass3nowEv>:
{
   c19be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c19c0:	f7ff ffe0 	bl	c1984 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c19c4:	2210      	movs	r2, #16
   c19c6:	2100      	movs	r1, #0
   c19c8:	4668      	mov	r0, sp
   c19ca:	f002 fcfd 	bl	c43c8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c19ce:	2100      	movs	r1, #0
   c19d0:	4668      	mov	r0, sp
   c19d2:	f7fc f8af 	bl	bdb34 <hal_rtc_get_time>
}
   c19d6:	9800      	ldr	r0, [sp, #0]
   c19d8:	b005      	add	sp, #20
   c19da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c19e0 <_ZN9TimeClass4hourEv>:
{
   c19e0:	b508      	push	{r3, lr}
	return hour(now());
   c19e2:	f7ff ffec 	bl	c19be <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c19e6:	17c1      	asrs	r1, r0, #31
   c19e8:	f7ff ff7e 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
}
   c19ec:	4b01      	ldr	r3, [pc, #4]	; (c19f4 <_ZN9TimeClass4hourEv+0x14>)
   c19ee:	6898      	ldr	r0, [r3, #8]
   c19f0:	bd08      	pop	{r3, pc}
   c19f2:	bf00      	nop
   c19f4:	2003e6c8 	.word	0x2003e6c8

000c19f8 <_ZN9TimeClass6minuteEv>:
{
   c19f8:	b508      	push	{r3, lr}
	return minute(now());
   c19fa:	f7ff ffe0 	bl	c19be <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c19fe:	17c1      	asrs	r1, r0, #31
   c1a00:	f7ff ff72 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
}
   c1a04:	4b01      	ldr	r3, [pc, #4]	; (c1a0c <_ZN9TimeClass6minuteEv+0x14>)
   c1a06:	6858      	ldr	r0, [r3, #4]
   c1a08:	bd08      	pop	{r3, pc}
   c1a0a:	bf00      	nop
   c1a0c:	2003e6c8 	.word	0x2003e6c8

000c1a10 <_ZN9TimeClass6secondEv>:
{
   c1a10:	b508      	push	{r3, lr}
	return second(now());
   c1a12:	f7ff ffd4 	bl	c19be <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1a16:	17c1      	asrs	r1, r0, #31
   c1a18:	f7ff ff66 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
}
   c1a1c:	4b01      	ldr	r3, [pc, #4]	; (c1a24 <_ZN9TimeClass6secondEv+0x14>)
   c1a1e:	6818      	ldr	r0, [r3, #0]
   c1a20:	bd08      	pop	{r3, pc}
   c1a22:	bf00      	nop
   c1a24:	2003e6c8 	.word	0x2003e6c8

000c1a28 <_ZN9TimeClass3dayEv>:
{
   c1a28:	b508      	push	{r3, lr}
	return day(now());
   c1a2a:	f7ff ffc8 	bl	c19be <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1a2e:	17c1      	asrs	r1, r0, #31
   c1a30:	f7ff ff5a 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
}
   c1a34:	4b01      	ldr	r3, [pc, #4]	; (c1a3c <_ZN9TimeClass3dayEv+0x14>)
   c1a36:	68d8      	ldr	r0, [r3, #12]
   c1a38:	bd08      	pop	{r3, pc}
   c1a3a:	bf00      	nop
   c1a3c:	2003e6c8 	.word	0x2003e6c8

000c1a40 <_ZN9TimeClass5monthEv>:
{
   c1a40:	b508      	push	{r3, lr}
	return month(now());
   c1a42:	f7ff ffbc 	bl	c19be <_ZN9TimeClass3nowEv>
}
   c1a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1a4a:	17c1      	asrs	r1, r0, #31
   c1a4c:	f7ff bf90 	b.w	c1970 <_ZN9TimeClass5monthEx>

000c1a50 <_ZN9TimeClass4yearEv>:
{
   c1a50:	b508      	push	{r3, lr}
	return year(now());
   c1a52:	f7ff ffb4 	bl	c19be <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1a56:	17c1      	asrs	r1, r0, #31
   c1a58:	f7ff ff46 	bl	c18e8 <_ZL22Refresh_UnixTime_Cachex>
}
   c1a5c:	4b01      	ldr	r3, [pc, #4]	; (c1a64 <_ZN9TimeClass4yearEv+0x14>)
   c1a5e:	6958      	ldr	r0, [r3, #20]
   c1a60:	bd08      	pop	{r3, pc}
   c1a62:	bf00      	nop
   c1a64:	2003e6c8 	.word	0x2003e6c8

000c1a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1a68:	4b02      	ldr	r3, [pc, #8]	; (c1a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1a6a:	681a      	ldr	r2, [r3, #0]
   c1a6c:	4b02      	ldr	r3, [pc, #8]	; (c1a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1a6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1a70:	4770      	bx	lr
   c1a72:	bf00      	nop
   c1a74:	2003db60 	.word	0x2003db60
   c1a78:	2003e6c4 	.word	0x2003e6c4

000c1a7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1a7c:	4770      	bx	lr

000c1a7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1a7e:	7441      	strb	r1, [r0, #17]
}
   c1a80:	4770      	bx	lr

000c1a82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1a82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1a84:	7c00      	ldrb	r0, [r0, #16]
   c1a86:	f7fc f9bd 	bl	bde04 <hal_usart_available_data_for_write>
}
   c1a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1a8e:	bd08      	pop	{r3, pc}

000c1a90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1a90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1a92:	7c00      	ldrb	r0, [r0, #16]
   c1a94:	f7fc f98e 	bl	bddb4 <hal_usart_available>
}
   c1a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1a9c:	bd08      	pop	{r3, pc}

000c1a9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1a9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1aa0:	7c00      	ldrb	r0, [r0, #16]
   c1aa2:	f7fc f997 	bl	bddd4 <hal_usart_peek>
}
   c1aa6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1aaa:	bd08      	pop	{r3, pc}

000c1aac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1aac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1aae:	7c00      	ldrb	r0, [r0, #16]
   c1ab0:	f7fc f988 	bl	bddc4 <hal_usart_read>
}
   c1ab4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1ab8:	bd08      	pop	{r3, pc}

000c1aba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1aba:	7c00      	ldrb	r0, [r0, #16]
   c1abc:	f7fc b992 	b.w	bdde4 <hal_usart_flush>

000c1ac0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1ac2:	7c45      	ldrb	r5, [r0, #17]
{
   c1ac4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1ac6:	b12d      	cbz	r5, c1ad4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1ac8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1aca:	b003      	add	sp, #12
   c1acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1ad0:	f7fc b968 	b.w	bdda4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1ad4:	7c00      	ldrb	r0, [r0, #16]
   c1ad6:	9101      	str	r1, [sp, #4]
   c1ad8:	f7fc f994 	bl	bde04 <hal_usart_available_data_for_write>
   c1adc:	2800      	cmp	r0, #0
   c1ade:	9901      	ldr	r1, [sp, #4]
   c1ae0:	dcf2      	bgt.n	c1ac8 <_ZN11USARTSerial5writeEh+0x8>
}
   c1ae2:	4628      	mov	r0, r5
   c1ae4:	b003      	add	sp, #12
   c1ae6:	bd30      	pop	{r4, r5, pc}

000c1ae8 <_ZN11USARTSerialD0Ev>:
   c1ae8:	b510      	push	{r4, lr}
   c1aea:	2114      	movs	r1, #20
   c1aec:	4604      	mov	r4, r0
   c1aee:	f7f2 fad8 	bl	b40a2 <_ZdlPvj>
   c1af2:	4620      	mov	r0, r4
   c1af4:	bd10      	pop	{r4, pc}
	...

000c1af8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1af8:	b510      	push	{r4, lr}
   c1afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1afe:	4604      	mov	r4, r0
   c1b00:	4608      	mov	r0, r1
   c1b02:	4611      	mov	r1, r2
   c1b04:	2200      	movs	r2, #0
   c1b06:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1b0a:	4b04      	ldr	r3, [pc, #16]	; (c1b1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1b0c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1b0e:	2301      	movs	r3, #1
  _serial = serial;
   c1b10:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1b12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1b14:	f7fc f986 	bl	bde24 <hal_usart_init_ex>
}
   c1b18:	4620      	mov	r0, r4
   c1b1a:	bd10      	pop	{r4, pc}
   c1b1c:	000c7e68 	.word	0x000c7e68

000c1b20 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1b20:	7c00      	ldrb	r0, [r0, #16]
   c1b22:	2300      	movs	r3, #0
   c1b24:	f7fc b976 	b.w	bde14 <hal_usart_begin_config>

000c1b28 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1b28:	2200      	movs	r2, #0
   c1b2a:	f7ff bff9 	b.w	c1b20 <_ZN11USARTSerial5beginEmm>

000c1b2e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1b2e:	7c00      	ldrb	r0, [r0, #16]
   c1b30:	f7fc b930 	b.w	bdd94 <hal_usart_end>

000c1b34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1b34:	7441      	strb	r1, [r0, #17]
}
   c1b36:	4770      	bx	lr

000c1b38 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1b38:	4770      	bx	lr

000c1b3a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1b3a:	4770      	bx	lr

000c1b3c <_ZN9USBSerial4readEv>:
{
   c1b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1b3e:	2100      	movs	r1, #0
   c1b40:	7c00      	ldrb	r0, [r0, #16]
   c1b42:	f7fc f99f 	bl	bde84 <HAL_USB_USART_Receive_Data>
}
   c1b46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1b4a:	bd08      	pop	{r3, pc}

000c1b4c <_ZN9USBSerial4peekEv>:
{
   c1b4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1b4e:	2101      	movs	r1, #1
   c1b50:	7c00      	ldrb	r0, [r0, #16]
   c1b52:	f7fc f997 	bl	bde84 <HAL_USB_USART_Receive_Data>
}
   c1b56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1b5a:	bd08      	pop	{r3, pc}

000c1b5c <_ZN9USBSerial17availableForWriteEv>:
{
   c1b5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1b5e:	7c00      	ldrb	r0, [r0, #16]
   c1b60:	f7fc f988 	bl	bde74 <HAL_USB_USART_Available_Data_For_Write>
}
   c1b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1b68:	bd08      	pop	{r3, pc}

000c1b6a <_ZN9USBSerial9availableEv>:
{
   c1b6a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1b6c:	7c00      	ldrb	r0, [r0, #16]
   c1b6e:	f7fc f979 	bl	bde64 <HAL_USB_USART_Available_Data>
}
   c1b72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1b76:	bd08      	pop	{r3, pc}

000c1b78 <_ZN9USBSerial5writeEh>:
{
   c1b78:	b513      	push	{r0, r1, r4, lr}
   c1b7a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1b7c:	7c00      	ldrb	r0, [r0, #16]
{
   c1b7e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1b80:	f7fc f978 	bl	bde74 <HAL_USB_USART_Available_Data_For_Write>
   c1b84:	2800      	cmp	r0, #0
   c1b86:	9901      	ldr	r1, [sp, #4]
   c1b88:	dc01      	bgt.n	c1b8e <_ZN9USBSerial5writeEh+0x16>
   c1b8a:	7c60      	ldrb	r0, [r4, #17]
   c1b8c:	b120      	cbz	r0, c1b98 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1b8e:	7c20      	ldrb	r0, [r4, #16]
   c1b90:	f7fc f980 	bl	bde94 <HAL_USB_USART_Send_Data>
   c1b94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1b98:	b002      	add	sp, #8
   c1b9a:	bd10      	pop	{r4, pc}

000c1b9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1b9c:	7c00      	ldrb	r0, [r0, #16]
   c1b9e:	f7fc b981 	b.w	bdea4 <HAL_USB_USART_Flush_Data>

000c1ba2 <_ZN9USBSerialD0Ev>:
   c1ba2:	b510      	push	{r4, lr}
   c1ba4:	2114      	movs	r1, #20
   c1ba6:	4604      	mov	r4, r0
   c1ba8:	f7f2 fa7b 	bl	b40a2 <_ZdlPvj>
   c1bac:	4620      	mov	r0, r4
   c1bae:	bd10      	pop	{r4, pc}

000c1bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1bb0:	b510      	push	{r4, lr}
   c1bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1bb6:	4604      	mov	r4, r0
   c1bb8:	4608      	mov	r0, r1
   c1bba:	2100      	movs	r1, #0
   c1bbc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1bc0:	4b04      	ldr	r3, [pc, #16]	; (c1bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1bc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1bc4:	2301      	movs	r3, #1
  _serial = serial;
   c1bc6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1bc8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1bca:	4611      	mov	r1, r2
   c1bcc:	f7fc f932 	bl	bde34 <HAL_USB_USART_Init>
}
   c1bd0:	4620      	mov	r0, r4
   c1bd2:	bd10      	pop	{r4, pc}
   c1bd4:	000c7e98 	.word	0x000c7e98

000c1bd8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1bd8:	7c00      	ldrb	r0, [r0, #16]
   c1bda:	2200      	movs	r2, #0
   c1bdc:	f7fc b932 	b.w	bde44 <HAL_USB_USART_Begin>

000c1be0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1be0:	7c00      	ldrb	r0, [r0, #16]
   c1be2:	f7fc b937 	b.w	bde54 <HAL_USB_USART_End>

000c1be6 <_Z19acquireSerialBufferv>:
{
   c1be6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1be8:	2214      	movs	r2, #20
{
   c1bea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1bec:	2100      	movs	r1, #0
   c1bee:	f002 fbeb 	bl	c43c8 <memset>
}
   c1bf2:	4620      	mov	r0, r4
   c1bf4:	bd10      	pop	{r4, pc}
	...

000c1bf8 <_Z16_fetch_usbserialv>:
{
   c1bf8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1bfa:	4c0f      	ldr	r4, [pc, #60]	; (c1c38 <_Z16_fetch_usbserialv+0x40>)
{
   c1bfc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1bfe:	a803      	add	r0, sp, #12
   c1c00:	f7ff fff1 	bl	c1be6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1c04:	7821      	ldrb	r1, [r4, #0]
   c1c06:	f3bf 8f5b 	dmb	ish
   c1c0a:	f011 0101 	ands.w	r1, r1, #1
   c1c0e:	d10f      	bne.n	c1c30 <_Z16_fetch_usbserialv+0x38>
   c1c10:	4620      	mov	r0, r4
   c1c12:	9101      	str	r1, [sp, #4]
   c1c14:	f7f2 fa54 	bl	b40c0 <__cxa_guard_acquire>
   c1c18:	9901      	ldr	r1, [sp, #4]
   c1c1a:	b148      	cbz	r0, c1c30 <_Z16_fetch_usbserialv+0x38>
   c1c1c:	aa03      	add	r2, sp, #12
   c1c1e:	4807      	ldr	r0, [pc, #28]	; (c1c3c <_Z16_fetch_usbserialv+0x44>)
   c1c20:	f7ff ffc6 	bl	c1bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1c24:	4620      	mov	r0, r4
   c1c26:	f7f2 fa50 	bl	b40ca <__cxa_guard_release>
   c1c2a:	4805      	ldr	r0, [pc, #20]	; (c1c40 <_Z16_fetch_usbserialv+0x48>)
   c1c2c:	f002 fb7e 	bl	c432c <atexit>
	return _usbserial;
}
   c1c30:	4802      	ldr	r0, [pc, #8]	; (c1c3c <_Z16_fetch_usbserialv+0x44>)
   c1c32:	b008      	add	sp, #32
   c1c34:	bd10      	pop	{r4, pc}
   c1c36:	bf00      	nop
   c1c38:	2003e708 	.word	0x2003e708
   c1c3c:	2003e70c 	.word	0x2003e70c
   c1c40:	000c1b39 	.word	0x000c1b39

000c1c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1c44:	4b01      	ldr	r3, [pc, #4]	; (c1c4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c1c46:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1c48:	4770      	bx	lr
   c1c4a:	bf00      	nop
   c1c4c:	2003db68 	.word	0x2003db68

000c1c50 <serialEventRun>:
{
   c1c50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c1c52:	4b0b      	ldr	r3, [pc, #44]	; (c1c80 <serialEventRun+0x30>)
   c1c54:	b143      	cbz	r3, c1c68 <serialEventRun+0x18>
   c1c56:	f7ff ffcf 	bl	c1bf8 <_Z16_fetch_usbserialv>
   c1c5a:	6803      	ldr	r3, [r0, #0]
   c1c5c:	691b      	ldr	r3, [r3, #16]
   c1c5e:	4798      	blx	r3
   c1c60:	2800      	cmp	r0, #0
   c1c62:	dd01      	ble.n	c1c68 <serialEventRun+0x18>
        serialEvent();
   c1c64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1c68:	4b06      	ldr	r3, [pc, #24]	; (c1c84 <serialEventRun+0x34>)
   c1c6a:	b143      	cbz	r3, c1c7e <serialEventRun+0x2e>
   c1c6c:	f000 f95c 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   c1c70:	6803      	ldr	r3, [r0, #0]
   c1c72:	691b      	ldr	r3, [r3, #16]
   c1c74:	4798      	blx	r3
   c1c76:	2800      	cmp	r0, #0
   c1c78:	dd01      	ble.n	c1c7e <serialEventRun+0x2e>
        serialEvent1();
   c1c7a:	f3af 8000 	nop.w
}
   c1c7e:	bd08      	pop	{r3, pc}
	...

000c1c88 <_post_loop>:
{
   c1c88:	b508      	push	{r3, lr}
	serialEventRun();
   c1c8a:	f7ff ffe1 	bl	c1c50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1c8e:	f7fb ff41 	bl	bdb14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1c92:	4b01      	ldr	r3, [pc, #4]	; (c1c98 <_post_loop+0x10>)
   c1c94:	6018      	str	r0, [r3, #0]
}
   c1c96:	bd08      	pop	{r3, pc}
   c1c98:	2003e728 	.word	0x2003e728

000c1c9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1c9c:	4805      	ldr	r0, [pc, #20]	; (c1cb4 <_Z33system_initialize_user_backup_ramv+0x18>)
   c1c9e:	4a06      	ldr	r2, [pc, #24]	; (c1cb8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1ca0:	4906      	ldr	r1, [pc, #24]	; (c1cbc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1ca2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1ca4:	1a12      	subs	r2, r2, r0
   c1ca6:	f002 fb67 	bl	c4378 <memcpy>
    __backup_sram_signature = signature;
   c1caa:	4b05      	ldr	r3, [pc, #20]	; (c1cc0 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1cac:	4a05      	ldr	r2, [pc, #20]	; (c1cc4 <_Z33system_initialize_user_backup_ramv+0x28>)
   c1cae:	601a      	str	r2, [r3, #0]
}
   c1cb0:	bd08      	pop	{r3, pc}
   c1cb2:	bf00      	nop
   c1cb4:	2003f400 	.word	0x2003f400
   c1cb8:	2003f404 	.word	0x2003f404
   c1cbc:	000c8824 	.word	0x000c8824
   c1cc0:	2003f400 	.word	0x2003f400
   c1cc4:	9a271c1e 	.word	0x9a271c1e

000c1cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1cc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1cca:	2300      	movs	r3, #0
   c1ccc:	9300      	str	r3, [sp, #0]
   c1cce:	461a      	mov	r2, r3
   c1cd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1cd4:	f7fc f95a 	bl	bdf8c <system_ctrl_set_result>
}
   c1cd8:	b003      	add	sp, #12
   c1cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1ce0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1ce0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c1ce2:	8843      	ldrh	r3, [r0, #2]
   c1ce4:	2b0a      	cmp	r3, #10
   c1ce6:	d008      	beq.n	c1cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1ce8:	2b50      	cmp	r3, #80	; 0x50
   c1cea:	d10b      	bne.n	c1d04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1cec:	4b09      	ldr	r3, [pc, #36]	; (c1d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1cee:	681b      	ldr	r3, [r3, #0]
   c1cf0:	b14b      	cbz	r3, c1d06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c1cf2:	b003      	add	sp, #12
   c1cf4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1cf8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1cfa:	f7ff ffe5 	bl	c1cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1cfe:	b003      	add	sp, #12
   c1d00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1d04:	2300      	movs	r3, #0
   c1d06:	9300      	str	r3, [sp, #0]
   c1d08:	461a      	mov	r2, r3
   c1d0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1d0e:	f7fc f93d 	bl	bdf8c <system_ctrl_set_result>
}
   c1d12:	e7f4      	b.n	c1cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c1d14:	2003e724 	.word	0x2003e724

000c1d18 <module_user_init_hook>:
{
   c1d18:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1d1a:	4812      	ldr	r0, [pc, #72]	; (c1d64 <module_user_init_hook+0x4c>)
   c1d1c:	2100      	movs	r1, #0
   c1d1e:	f7fc fa2f 	bl	be180 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c1d22:	4b11      	ldr	r3, [pc, #68]	; (c1d68 <module_user_init_hook+0x50>)
   c1d24:	681a      	ldr	r2, [r3, #0]
   c1d26:	4b11      	ldr	r3, [pc, #68]	; (c1d6c <module_user_init_hook+0x54>)
   c1d28:	429a      	cmp	r2, r3
   c1d2a:	4b11      	ldr	r3, [pc, #68]	; (c1d70 <module_user_init_hook+0x58>)
   c1d2c:	bf0c      	ite	eq
   c1d2e:	2201      	moveq	r2, #1
   c1d30:	2200      	movne	r2, #0
   c1d32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c1d34:	d001      	beq.n	c1d3a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c1d36:	f7ff ffb1 	bl	c1c9c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1d3a:	f7fb fed3 	bl	bdae4 <HAL_RNG_GetRandomNumber>
   c1d3e:	4604      	mov	r4, r0
    srand(seed);
   c1d40:	f002 fb4a 	bl	c43d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1d44:	4b0b      	ldr	r3, [pc, #44]	; (c1d74 <module_user_init_hook+0x5c>)
   c1d46:	b113      	cbz	r3, c1d4e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1d48:	4620      	mov	r0, r4
   c1d4a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1d4e:	2100      	movs	r1, #0
   c1d50:	4808      	ldr	r0, [pc, #32]	; (c1d74 <module_user_init_hook+0x5c>)
   c1d52:	f7fc f955 	bl	be000 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c1d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1d5a:	4807      	ldr	r0, [pc, #28]	; (c1d78 <module_user_init_hook+0x60>)
   c1d5c:	2100      	movs	r1, #0
   c1d5e:	f7fc b90b 	b.w	bdf78 <system_ctrl_set_app_request_handler>
   c1d62:	bf00      	nop
   c1d64:	000c1c45 	.word	0x000c1c45
   c1d68:	2003f400 	.word	0x2003f400
   c1d6c:	9a271c1e 	.word	0x9a271c1e
   c1d70:	2003e720 	.word	0x2003e720
   c1d74:	00000000 	.word	0x00000000
   c1d78:	000c1ce1 	.word	0x000c1ce1

000c1d7c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1d7c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1d7e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1d80:	d902      	bls.n	c1d88 <pinAvailable+0xc>
    return false;
   c1d82:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1d84:	b002      	add	sp, #8
   c1d86:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1d88:	f1a0 030b 	sub.w	r3, r0, #11
   c1d8c:	2b02      	cmp	r3, #2
   c1d8e:	d81a      	bhi.n	c1dc6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1d90:	4c17      	ldr	r4, [pc, #92]	; (c1df0 <pinAvailable+0x74>)
   c1d92:	7821      	ldrb	r1, [r4, #0]
   c1d94:	f3bf 8f5b 	dmb	ish
   c1d98:	f011 0101 	ands.w	r1, r1, #1
   c1d9c:	d10b      	bne.n	c1db6 <pinAvailable+0x3a>
   c1d9e:	4620      	mov	r0, r4
   c1da0:	9101      	str	r1, [sp, #4]
   c1da2:	f7f2 f98d 	bl	b40c0 <__cxa_guard_acquire>
   c1da6:	9901      	ldr	r1, [sp, #4]
   c1da8:	b128      	cbz	r0, c1db6 <pinAvailable+0x3a>
   c1daa:	4812      	ldr	r0, [pc, #72]	; (c1df4 <pinAvailable+0x78>)
   c1dac:	f7ff fb43 	bl	c1436 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1db0:	4620      	mov	r0, r4
   c1db2:	f7f2 f98a 	bl	b40ca <__cxa_guard_release>
   c1db6:	4b0f      	ldr	r3, [pc, #60]	; (c1df4 <pinAvailable+0x78>)
   c1db8:	7818      	ldrb	r0, [r3, #0]
   c1dba:	f7fb ffab 	bl	bdd14 <hal_spi_is_enabled>
   c1dbe:	2800      	cmp	r0, #0
   c1dc0:	d1df      	bne.n	c1d82 <pinAvailable+0x6>
  return true; // 'pin' is available
   c1dc2:	2001      	movs	r0, #1
   c1dc4:	e7de      	b.n	c1d84 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1dc6:	2801      	cmp	r0, #1
   c1dc8:	d809      	bhi.n	c1dde <pinAvailable+0x62>
   c1dca:	f000 f86d 	bl	c1ea8 <_Z19__fetch_global_Wirev>
   c1dce:	2100      	movs	r1, #0
   c1dd0:	7c00      	ldrb	r0, [r0, #16]
   c1dd2:	f7fb ff37 	bl	bdc44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c1dd6:	f080 0001 	eor.w	r0, r0, #1
   c1dda:	b2c0      	uxtb	r0, r0
   c1ddc:	e7d2      	b.n	c1d84 <pinAvailable+0x8>
   c1dde:	3809      	subs	r0, #9
   c1de0:	2801      	cmp	r0, #1
   c1de2:	d8ee      	bhi.n	c1dc2 <pinAvailable+0x46>
   c1de4:	f000 f8a0 	bl	c1f28 <_Z22__fetch_global_Serial1v>
   c1de8:	7c00      	ldrb	r0, [r0, #16]
   c1dea:	f7fc f803 	bl	bddf4 <hal_usart_is_enabled>
   c1dee:	e7f2      	b.n	c1dd6 <pinAvailable+0x5a>
   c1df0:	2003dd4c 	.word	0x2003dd4c
   c1df4:	2003dd50 	.word	0x2003dd50

000c1df8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1df8:	2825      	cmp	r0, #37	; 0x25
{
   c1dfa:	b538      	push	{r3, r4, r5, lr}
   c1dfc:	4604      	mov	r4, r0
   c1dfe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1e00:	d80a      	bhi.n	c1e18 <pinMode+0x20>
   c1e02:	29ff      	cmp	r1, #255	; 0xff
   c1e04:	d008      	beq.n	c1e18 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1e06:	f7ff ffb9 	bl	c1d7c <pinAvailable>
   c1e0a:	b128      	cbz	r0, c1e18 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1e0c:	4629      	mov	r1, r5
   c1e0e:	4620      	mov	r0, r4
}
   c1e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1e14:	f7fb be9e 	b.w	bdb54 <HAL_Pin_Mode>
}
   c1e18:	bd38      	pop	{r3, r4, r5, pc}

000c1e1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1e1a:	b538      	push	{r3, r4, r5, lr}
   c1e1c:	4604      	mov	r4, r0
   c1e1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1e20:	f7fb fea0 	bl	bdb64 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1e24:	28ff      	cmp	r0, #255	; 0xff
   c1e26:	d010      	beq.n	c1e4a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1e28:	2806      	cmp	r0, #6
   c1e2a:	d804      	bhi.n	c1e36 <digitalWrite+0x1c>
   c1e2c:	234d      	movs	r3, #77	; 0x4d
   c1e2e:	fa23 f000 	lsr.w	r0, r3, r0
   c1e32:	07c3      	lsls	r3, r0, #31
   c1e34:	d409      	bmi.n	c1e4a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1e36:	4620      	mov	r0, r4
   c1e38:	f7ff ffa0 	bl	c1d7c <pinAvailable>
   c1e3c:	b128      	cbz	r0, c1e4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1e3e:	4629      	mov	r1, r5
   c1e40:	4620      	mov	r0, r4
}
   c1e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1e46:	f7fb be95 	b.w	bdb74 <HAL_GPIO_Write>
}
   c1e4a:	bd38      	pop	{r3, r4, r5, pc}

000c1e4c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1e4c:	280d      	cmp	r0, #13
{
   c1e4e:	b510      	push	{r4, lr}
   c1e50:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c1e52:	bf9c      	itt	ls
   c1e54:	340e      	addls	r4, #14
   c1e56:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1e58:	4620      	mov	r0, r4
   c1e5a:	f7ff ff8f 	bl	c1d7c <pinAvailable>
   c1e5e:	b150      	cbz	r0, c1e76 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1e60:	2103      	movs	r1, #3
   c1e62:	4620      	mov	r0, r4
   c1e64:	f7fb fe6e 	bl	bdb44 <HAL_Validate_Pin_Function>
   c1e68:	2803      	cmp	r0, #3
   c1e6a:	d104      	bne.n	c1e76 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1e6c:	4620      	mov	r0, r4
}
   c1e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c1e72:	f7fb be97 	b.w	bdba4 <hal_adc_read>
}
   c1e76:	2000      	movs	r0, #0
   c1e78:	bd10      	pop	{r4, pc}

000c1e7a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1e7a:	4770      	bx	lr

000c1e7c <_Z17acquireWireBufferv>:
{
   c1e7c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1e7e:	2520      	movs	r5, #32
   c1e80:	2314      	movs	r3, #20
{
   c1e82:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1e84:	6003      	str	r3, [r0, #0]
   c1e86:	6085      	str	r5, [r0, #8]
   c1e88:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1e8a:	4906      	ldr	r1, [pc, #24]	; (c1ea4 <_Z17acquireWireBufferv+0x28>)
   c1e8c:	4628      	mov	r0, r5
   c1e8e:	f000 f871 	bl	c1f74 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1e92:	4904      	ldr	r1, [pc, #16]	; (c1ea4 <_Z17acquireWireBufferv+0x28>)
	};
   c1e94:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1e96:	4628      	mov	r0, r5
   c1e98:	f000 f86c 	bl	c1f74 <_ZnajRKSt9nothrow_t>
	};
   c1e9c:	60e0      	str	r0, [r4, #12]
}
   c1e9e:	4620      	mov	r0, r4
   c1ea0:	bd38      	pop	{r3, r4, r5, pc}
   c1ea2:	bf00      	nop
   c1ea4:	000c7ec0 	.word	0x000c7ec0

000c1ea8 <_Z19__fetch_global_Wirev>:
{
   c1ea8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1eaa:	4d0e      	ldr	r5, [pc, #56]	; (c1ee4 <_Z19__fetch_global_Wirev+0x3c>)
   c1eac:	7829      	ldrb	r1, [r5, #0]
   c1eae:	f3bf 8f5b 	dmb	ish
   c1eb2:	f011 0401 	ands.w	r4, r1, #1
{
   c1eb6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1eb8:	d111      	bne.n	c1ede <_Z19__fetch_global_Wirev+0x36>
   c1eba:	4628      	mov	r0, r5
   c1ebc:	f7f2 f900 	bl	b40c0 <__cxa_guard_acquire>
   c1ec0:	b168      	cbz	r0, c1ede <_Z19__fetch_global_Wirev+0x36>
   c1ec2:	a801      	add	r0, sp, #4
   c1ec4:	f7ff ffda 	bl	c1e7c <_Z17acquireWireBufferv>
   c1ec8:	aa01      	add	r2, sp, #4
   c1eca:	4621      	mov	r1, r4
   c1ecc:	4806      	ldr	r0, [pc, #24]	; (c1ee8 <_Z19__fetch_global_Wirev+0x40>)
   c1ece:	f7fd fead 	bl	bfc2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c1ed2:	4628      	mov	r0, r5
   c1ed4:	f7f2 f8f9 	bl	b40ca <__cxa_guard_release>
   c1ed8:	4804      	ldr	r0, [pc, #16]	; (c1eec <_Z19__fetch_global_Wirev+0x44>)
   c1eda:	f002 fa27 	bl	c432c <atexit>
	return wire;
}
   c1ede:	4802      	ldr	r0, [pc, #8]	; (c1ee8 <_Z19__fetch_global_Wirev+0x40>)
   c1ee0:	b007      	add	sp, #28
   c1ee2:	bd30      	pop	{r4, r5, pc}
   c1ee4:	2003e72c 	.word	0x2003e72c
   c1ee8:	2003e730 	.word	0x2003e730
   c1eec:	000c1e7b 	.word	0x000c1e7b

000c1ef0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1ef0:	4770      	bx	lr
	...

000c1ef4 <_Z20acquireSerial1Bufferv>:
{
   c1ef4:	b538      	push	{r3, r4, r5, lr}
   c1ef6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1ef8:	2514      	movs	r5, #20
   c1efa:	462a      	mov	r2, r5
   c1efc:	2100      	movs	r1, #0
   c1efe:	f002 fa63 	bl	c43c8 <memset>
   c1f02:	8025      	strh	r5, [r4, #0]
   c1f04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f06:	4907      	ldr	r1, [pc, #28]	; (c1f24 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c1f08:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f0a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c1f0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f0e:	f000 f831 	bl	c1f74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f12:	4904      	ldr	r1, [pc, #16]	; (c1f24 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c1f14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c1f16:	4628      	mov	r0, r5
   c1f18:	f000 f82c 	bl	c1f74 <_ZnajRKSt9nothrow_t>
    };
   c1f1c:	60e0      	str	r0, [r4, #12]
}
   c1f1e:	4620      	mov	r0, r4
   c1f20:	bd38      	pop	{r3, r4, r5, pc}
   c1f22:	bf00      	nop
   c1f24:	000c7ec0 	.word	0x000c7ec0

000c1f28 <_Z22__fetch_global_Serial1v>:
{
   c1f28:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1f2a:	4d0e      	ldr	r5, [pc, #56]	; (c1f64 <_Z22__fetch_global_Serial1v+0x3c>)
   c1f2c:	7829      	ldrb	r1, [r5, #0]
   c1f2e:	f3bf 8f5b 	dmb	ish
   c1f32:	f011 0401 	ands.w	r4, r1, #1
{
   c1f36:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1f38:	d111      	bne.n	c1f5e <_Z22__fetch_global_Serial1v+0x36>
   c1f3a:	4628      	mov	r0, r5
   c1f3c:	f7f2 f8c0 	bl	b40c0 <__cxa_guard_acquire>
   c1f40:	b168      	cbz	r0, c1f5e <_Z22__fetch_global_Serial1v+0x36>
   c1f42:	a801      	add	r0, sp, #4
   c1f44:	f7ff ffd6 	bl	c1ef4 <_Z20acquireSerial1Bufferv>
   c1f48:	aa01      	add	r2, sp, #4
   c1f4a:	4621      	mov	r1, r4
   c1f4c:	4806      	ldr	r0, [pc, #24]	; (c1f68 <_Z22__fetch_global_Serial1v+0x40>)
   c1f4e:	f7ff fdd3 	bl	c1af8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c1f52:	4628      	mov	r0, r5
   c1f54:	f7f2 f8b9 	bl	b40ca <__cxa_guard_release>
   c1f58:	4804      	ldr	r0, [pc, #16]	; (c1f6c <_Z22__fetch_global_Serial1v+0x44>)
   c1f5a:	f002 f9e7 	bl	c432c <atexit>
    return serial1;
}
   c1f5e:	4802      	ldr	r0, [pc, #8]	; (c1f68 <_Z22__fetch_global_Serial1v+0x40>)
   c1f60:	b007      	add	sp, #28
   c1f62:	bd30      	pop	{r4, r5, pc}
   c1f64:	2003e744 	.word	0x2003e744
   c1f68:	2003e748 	.word	0x2003e748
   c1f6c:	000c1ef1 	.word	0x000c1ef1

000c1f70 <_ZnwjRKSt9nothrow_t>:
   c1f70:	f7f2 b891 	b.w	b4096 <_Znwj>

000c1f74 <_ZnajRKSt9nothrow_t>:
   c1f74:	f7f2 b891 	b.w	b409a <_Znaj>

000c1f78 <_ZSt25__throw_bad_function_callv>:
   c1f78:	b508      	push	{r3, lr}
   c1f7a:	f7fc f8e1 	bl	be140 <abort>
	...

000c1f80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1f80:	4901      	ldr	r1, [pc, #4]	; (c1f88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c1f82:	f000 b8f9 	b.w	c2178 <_ZNKSt9type_infoeqERKS_>
   c1f86:	bf00      	nop
   c1f88:	000c7edc 	.word	0x000c7edc

000c1f8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1f8e:	2400      	movs	r4, #0
   c1f90:	2310      	movs	r3, #16
   c1f92:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c1f96:	6803      	ldr	r3, [r0, #0]
   c1f98:	4615      	mov	r5, r2
   c1f9a:	699e      	ldr	r6, [r3, #24]
   c1f9c:	6812      	ldr	r2, [r2, #0]
   c1f9e:	466b      	mov	r3, sp
   c1fa0:	e9cd 4400 	strd	r4, r4, [sp]
   c1fa4:	47b0      	blx	r6
   c1fa6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1faa:	f003 0306 	and.w	r3, r3, #6
   c1fae:	2b06      	cmp	r3, #6
   c1fb0:	bf03      	ittte	eq
   c1fb2:	9b00      	ldreq	r3, [sp, #0]
   c1fb4:	602b      	streq	r3, [r5, #0]
   c1fb6:	2001      	moveq	r0, #1
   c1fb8:	4620      	movne	r0, r4
   c1fba:	b004      	add	sp, #16
   c1fbc:	bd70      	pop	{r4, r5, r6, pc}

000c1fbe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1fbe:	9800      	ldr	r0, [sp, #0]
   c1fc0:	4290      	cmp	r0, r2
   c1fc2:	bf14      	ite	ne
   c1fc4:	2001      	movne	r0, #1
   c1fc6:	2006      	moveq	r0, #6
   c1fc8:	4770      	bx	lr
	...

000c1fcc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c1fcc:	b510      	push	{r4, lr}
   c1fce:	4b03      	ldr	r3, [pc, #12]	; (c1fdc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c1fd0:	6003      	str	r3, [r0, #0]
   c1fd2:	4604      	mov	r4, r0
   c1fd4:	f000 f8cd 	bl	c2172 <_ZNSt9type_infoD1Ev>
   c1fd8:	4620      	mov	r0, r4
   c1fda:	bd10      	pop	{r4, pc}
   c1fdc:	000c7f1c 	.word	0x000c7f1c

000c1fe0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c1fe0:	b510      	push	{r4, lr}
   c1fe2:	4604      	mov	r4, r0
   c1fe4:	f7ff fff2 	bl	c1fcc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1fe8:	4620      	mov	r0, r4
   c1fea:	2108      	movs	r1, #8
   c1fec:	f7f2 f859 	bl	b40a2 <_ZdlPvj>
   c1ff0:	4620      	mov	r0, r4
   c1ff2:	bd10      	pop	{r4, pc}

000c1ff4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c1ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1ff8:	461f      	mov	r7, r3
   c1ffa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1ffe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c2002:	4598      	cmp	r8, r3
   c2004:	4606      	mov	r6, r0
   c2006:	4615      	mov	r5, r2
   c2008:	d107      	bne.n	c201a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c200a:	9907      	ldr	r1, [sp, #28]
   c200c:	f000 f8b4 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c2010:	b118      	cbz	r0, c201a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c2012:	7165      	strb	r5, [r4, #5]
   c2014:	2000      	movs	r0, #0
   c2016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c201a:	4639      	mov	r1, r7
   c201c:	4630      	mov	r0, r6
   c201e:	f000 f8ab 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c2022:	2800      	cmp	r0, #0
   c2024:	d0f6      	beq.n	c2014 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c2026:	2301      	movs	r3, #1
   c2028:	f8c4 8000 	str.w	r8, [r4]
   c202c:	7125      	strb	r5, [r4, #4]
   c202e:	71a3      	strb	r3, [r4, #6]
   c2030:	e7f0      	b.n	c2014 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c2032 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c2032:	b538      	push	{r3, r4, r5, lr}
   c2034:	4615      	mov	r5, r2
   c2036:	461c      	mov	r4, r3
   c2038:	f000 f89e 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c203c:	b120      	cbz	r0, c2048 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c203e:	2308      	movs	r3, #8
   c2040:	60e3      	str	r3, [r4, #12]
   c2042:	2306      	movs	r3, #6
   c2044:	6025      	str	r5, [r4, #0]
   c2046:	7123      	strb	r3, [r4, #4]
   c2048:	bd38      	pop	{r3, r4, r5, pc}

000c204a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c204a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c204c:	4605      	mov	r5, r0
   c204e:	460c      	mov	r4, r1
   c2050:	9201      	str	r2, [sp, #4]
   c2052:	461e      	mov	r6, r3
   c2054:	f000 f890 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c2058:	b950      	cbnz	r0, c2070 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c205a:	2e03      	cmp	r6, #3
   c205c:	d808      	bhi.n	c2070 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c205e:	6823      	ldr	r3, [r4, #0]
   c2060:	9a01      	ldr	r2, [sp, #4]
   c2062:	695b      	ldr	r3, [r3, #20]
   c2064:	4629      	mov	r1, r5
   c2066:	4620      	mov	r0, r4
   c2068:	b002      	add	sp, #8
   c206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c206e:	4718      	bx	r3
   c2070:	b002      	add	sp, #8
   c2072:	bd70      	pop	{r4, r5, r6, pc}

000c2074 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2074:	b510      	push	{r4, lr}
   c2076:	4b03      	ldr	r3, [pc, #12]	; (c2084 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c2078:	6003      	str	r3, [r0, #0]
   c207a:	4604      	mov	r4, r0
   c207c:	f7ff ffa6 	bl	c1fcc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2080:	4620      	mov	r0, r4
   c2082:	bd10      	pop	{r4, pc}
   c2084:	000c7f7c 	.word	0x000c7f7c

000c2088 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c2088:	b510      	push	{r4, lr}
   c208a:	4604      	mov	r4, r0
   c208c:	f7ff fff2 	bl	c2074 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c2090:	4620      	mov	r0, r4
   c2092:	210c      	movs	r1, #12
   c2094:	f7f2 f805 	bl	b40a2 <_ZdlPvj>
   c2098:	4620      	mov	r0, r4
   c209a:	bd10      	pop	{r4, pc}

000c209c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c209c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c209e:	9f08      	ldr	r7, [sp, #32]
   c20a0:	4297      	cmp	r7, r2
   c20a2:	4605      	mov	r5, r0
   c20a4:	460e      	mov	r6, r1
   c20a6:	4614      	mov	r4, r2
   c20a8:	d00a      	beq.n	c20c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c20aa:	68a8      	ldr	r0, [r5, #8]
   c20ac:	6802      	ldr	r2, [r0, #0]
   c20ae:	9708      	str	r7, [sp, #32]
   c20b0:	6a15      	ldr	r5, [r2, #32]
   c20b2:	4631      	mov	r1, r6
   c20b4:	4622      	mov	r2, r4
   c20b6:	46ac      	mov	ip, r5
   c20b8:	b003      	add	sp, #12
   c20ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c20be:	4760      	bx	ip
   c20c0:	4619      	mov	r1, r3
   c20c2:	9301      	str	r3, [sp, #4]
   c20c4:	f000 f858 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c20c8:	9b01      	ldr	r3, [sp, #4]
   c20ca:	2800      	cmp	r0, #0
   c20cc:	d0ed      	beq.n	c20aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c20ce:	2006      	movs	r0, #6
   c20d0:	b003      	add	sp, #12
   c20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c20d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c20d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c20d8:	460d      	mov	r5, r1
   c20da:	4619      	mov	r1, r3
   c20dc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c20e0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c20e4:	4681      	mov	r9, r0
   c20e6:	4617      	mov	r7, r2
   c20e8:	4698      	mov	r8, r3
   c20ea:	f000 f845 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c20ee:	b190      	cbz	r0, c2116 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c20f0:	2d00      	cmp	r5, #0
   c20f2:	6034      	str	r4, [r6, #0]
   c20f4:	7137      	strb	r7, [r6, #4]
   c20f6:	db09      	blt.n	c210c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c20f8:	1961      	adds	r1, r4, r5
   c20fa:	458a      	cmp	sl, r1
   c20fc:	bf0c      	ite	eq
   c20fe:	2106      	moveq	r1, #6
   c2100:	2101      	movne	r1, #1
   c2102:	71b1      	strb	r1, [r6, #6]
   c2104:	2000      	movs	r0, #0
   c2106:	b001      	add	sp, #4
   c2108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c210c:	3502      	adds	r5, #2
   c210e:	d1f9      	bne.n	c2104 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c2110:	2301      	movs	r3, #1
   c2112:	71b3      	strb	r3, [r6, #6]
   c2114:	e7f6      	b.n	c2104 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c2116:	4554      	cmp	r4, sl
   c2118:	d106      	bne.n	c2128 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c211a:	4659      	mov	r1, fp
   c211c:	4648      	mov	r0, r9
   c211e:	f000 f82b 	bl	c2178 <_ZNKSt9type_infoeqERKS_>
   c2122:	b108      	cbz	r0, c2128 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c2124:	7177      	strb	r7, [r6, #5]
   c2126:	e7ed      	b.n	c2104 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c2128:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c212c:	6803      	ldr	r3, [r0, #0]
   c212e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c2132:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c2136:	69dc      	ldr	r4, [r3, #28]
   c2138:	463a      	mov	r2, r7
   c213a:	4643      	mov	r3, r8
   c213c:	4629      	mov	r1, r5
   c213e:	46a4      	mov	ip, r4
   c2140:	b001      	add	sp, #4
   c2142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2146:	4760      	bx	ip

000c2148 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c2148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c214c:	4607      	mov	r7, r0
   c214e:	460c      	mov	r4, r1
   c2150:	4615      	mov	r5, r2
   c2152:	461e      	mov	r6, r3
   c2154:	f7ff ff6d 	bl	c2032 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c2158:	b948      	cbnz	r0, c216e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c215a:	68b8      	ldr	r0, [r7, #8]
   c215c:	6803      	ldr	r3, [r0, #0]
   c215e:	699f      	ldr	r7, [r3, #24]
   c2160:	462a      	mov	r2, r5
   c2162:	4633      	mov	r3, r6
   c2164:	4621      	mov	r1, r4
   c2166:	46bc      	mov	ip, r7
   c2168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c216c:	4760      	bx	ip
   c216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c2172 <_ZNSt9type_infoD1Ev>:
   c2172:	4770      	bx	lr

000c2174 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2174:	2000      	movs	r0, #0
   c2176:	4770      	bx	lr

000c2178 <_ZNKSt9type_infoeqERKS_>:
   c2178:	4281      	cmp	r1, r0
   c217a:	b508      	push	{r3, lr}
   c217c:	d00e      	beq.n	c219c <_ZNKSt9type_infoeqERKS_+0x24>
   c217e:	6840      	ldr	r0, [r0, #4]
   c2180:	7803      	ldrb	r3, [r0, #0]
   c2182:	2b2a      	cmp	r3, #42	; 0x2a
   c2184:	d00c      	beq.n	c21a0 <_ZNKSt9type_infoeqERKS_+0x28>
   c2186:	6849      	ldr	r1, [r1, #4]
   c2188:	780b      	ldrb	r3, [r1, #0]
   c218a:	2b2a      	cmp	r3, #42	; 0x2a
   c218c:	bf08      	it	eq
   c218e:	3101      	addeq	r1, #1
   c2190:	f002 f976 	bl	c4480 <strcmp>
   c2194:	fab0 f080 	clz	r0, r0
   c2198:	0940      	lsrs	r0, r0, #5
   c219a:	bd08      	pop	{r3, pc}
   c219c:	2001      	movs	r0, #1
   c219e:	e7fc      	b.n	c219a <_ZNKSt9type_infoeqERKS_+0x22>
   c21a0:	2000      	movs	r0, #0
   c21a2:	e7fa      	b.n	c219a <_ZNKSt9type_infoeqERKS_+0x22>

000c21a4 <cosf>:
   c21a4:	ee10 3a10 	vmov	r3, s0
   c21a8:	4a18      	ldr	r2, [pc, #96]	; (c220c <cosf+0x68>)
   c21aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c21ae:	4293      	cmp	r3, r2
   c21b0:	dd1b      	ble.n	c21ea <cosf+0x46>
   c21b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c21b6:	db02      	blt.n	c21be <cosf+0x1a>
   c21b8:	ee30 0a40 	vsub.f32	s0, s0, s0
   c21bc:	4770      	bx	lr
   c21be:	b500      	push	{lr}
   c21c0:	b083      	sub	sp, #12
   c21c2:	4668      	mov	r0, sp
   c21c4:	f000 fb12 	bl	c27ec <__ieee754_rem_pio2f>
   c21c8:	f000 0003 	and.w	r0, r0, #3
   c21cc:	2801      	cmp	r0, #1
   c21ce:	eddd 0a01 	vldr	s1, [sp, #4]
   c21d2:	ed9d 0a00 	vldr	s0, [sp]
   c21d6:	d00c      	beq.n	c21f2 <cosf+0x4e>
   c21d8:	2802      	cmp	r0, #2
   c21da:	d012      	beq.n	c2202 <cosf+0x5e>
   c21dc:	b170      	cbz	r0, c21fc <cosf+0x58>
   c21de:	2001      	movs	r0, #1
   c21e0:	f000 fff6 	bl	c31d0 <__kernel_sinf>
   c21e4:	b003      	add	sp, #12
   c21e6:	f85d fb04 	ldr.w	pc, [sp], #4
   c21ea:	eddf 0a09 	vldr	s1, [pc, #36]	; c2210 <cosf+0x6c>
   c21ee:	f000 bc33 	b.w	c2a58 <__kernel_cosf>
   c21f2:	f000 ffed 	bl	c31d0 <__kernel_sinf>
   c21f6:	eeb1 0a40 	vneg.f32	s0, s0
   c21fa:	e7f3      	b.n	c21e4 <cosf+0x40>
   c21fc:	f000 fc2c 	bl	c2a58 <__kernel_cosf>
   c2200:	e7f0      	b.n	c21e4 <cosf+0x40>
   c2202:	f000 fc29 	bl	c2a58 <__kernel_cosf>
   c2206:	eeb1 0a40 	vneg.f32	s0, s0
   c220a:	e7eb      	b.n	c21e4 <cosf+0x40>
   c220c:	3f490fd8 	.word	0x3f490fd8
   c2210:	00000000 	.word	0x00000000

000c2214 <sinf>:
   c2214:	ee10 3a10 	vmov	r3, s0
   c2218:	4a19      	ldr	r2, [pc, #100]	; (c2280 <sinf+0x6c>)
   c221a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c221e:	4293      	cmp	r3, r2
   c2220:	dd1c      	ble.n	c225c <sinf+0x48>
   c2222:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c2226:	db02      	blt.n	c222e <sinf+0x1a>
   c2228:	ee30 0a40 	vsub.f32	s0, s0, s0
   c222c:	4770      	bx	lr
   c222e:	b500      	push	{lr}
   c2230:	b083      	sub	sp, #12
   c2232:	4668      	mov	r0, sp
   c2234:	f000 fada 	bl	c27ec <__ieee754_rem_pio2f>
   c2238:	f000 0003 	and.w	r0, r0, #3
   c223c:	2801      	cmp	r0, #1
   c223e:	eddd 0a01 	vldr	s1, [sp, #4]
   c2242:	ed9d 0a00 	vldr	s0, [sp]
   c2246:	d00e      	beq.n	c2266 <sinf+0x52>
   c2248:	2802      	cmp	r0, #2
   c224a:	d013      	beq.n	c2274 <sinf+0x60>
   c224c:	b170      	cbz	r0, c226c <sinf+0x58>
   c224e:	f000 fc03 	bl	c2a58 <__kernel_cosf>
   c2252:	eeb1 0a40 	vneg.f32	s0, s0
   c2256:	b003      	add	sp, #12
   c2258:	f85d fb04 	ldr.w	pc, [sp], #4
   c225c:	eddf 0a09 	vldr	s1, [pc, #36]	; c2284 <sinf+0x70>
   c2260:	2000      	movs	r0, #0
   c2262:	f000 bfb5 	b.w	c31d0 <__kernel_sinf>
   c2266:	f000 fbf7 	bl	c2a58 <__kernel_cosf>
   c226a:	e7f4      	b.n	c2256 <sinf+0x42>
   c226c:	2001      	movs	r0, #1
   c226e:	f000 ffaf 	bl	c31d0 <__kernel_sinf>
   c2272:	e7f0      	b.n	c2256 <sinf+0x42>
   c2274:	2001      	movs	r0, #1
   c2276:	f000 ffab 	bl	c31d0 <__kernel_sinf>
   c227a:	eeb1 0a40 	vneg.f32	s0, s0
   c227e:	e7ea      	b.n	c2256 <sinf+0x42>
   c2280:	3f490fd8 	.word	0x3f490fd8
   c2284:	00000000 	.word	0x00000000

000c2288 <atan2>:
   c2288:	f000 b866 	b.w	c2358 <__ieee754_atan2>

000c228c <sqrt>:
   c228c:	b538      	push	{r3, r4, r5, lr}
   c228e:	ed2d 8b02 	vpush	{d8}
   c2292:	ec55 4b10 	vmov	r4, r5, d0
   c2296:	f000 f935 	bl	c2504 <__ieee754_sqrt>
   c229a:	4b18      	ldr	r3, [pc, #96]	; (c22fc <sqrt+0x70>)
   c229c:	eeb0 8a40 	vmov.f32	s16, s0
   c22a0:	eef0 8a60 	vmov.f32	s17, s1
   c22a4:	f993 3000 	ldrsb.w	r3, [r3]
   c22a8:	3301      	adds	r3, #1
   c22aa:	d00d      	beq.n	c22c8 <sqrt+0x3c>
   c22ac:	4622      	mov	r2, r4
   c22ae:	462b      	mov	r3, r5
   c22b0:	4620      	mov	r0, r4
   c22b2:	4629      	mov	r1, r5
   c22b4:	f001 ff6e 	bl	c4194 <__aeabi_dcmpun>
   c22b8:	b930      	cbnz	r0, c22c8 <sqrt+0x3c>
   c22ba:	2200      	movs	r2, #0
   c22bc:	2300      	movs	r3, #0
   c22be:	4620      	mov	r0, r4
   c22c0:	4629      	mov	r1, r5
   c22c2:	f001 ff3f 	bl	c4144 <__aeabi_dcmplt>
   c22c6:	b930      	cbnz	r0, c22d6 <sqrt+0x4a>
   c22c8:	eeb0 0a48 	vmov.f32	s0, s16
   c22cc:	eef0 0a68 	vmov.f32	s1, s17
   c22d0:	ecbd 8b02 	vpop	{d8}
   c22d4:	bd38      	pop	{r3, r4, r5, pc}
   c22d6:	f7fb ff43 	bl	be160 <__errno>
   c22da:	2200      	movs	r2, #0
   c22dc:	2300      	movs	r3, #0
   c22de:	2121      	movs	r1, #33	; 0x21
   c22e0:	6001      	str	r1, [r0, #0]
   c22e2:	4610      	mov	r0, r2
   c22e4:	4619      	mov	r1, r3
   c22e6:	f001 fde5 	bl	c3eb4 <__aeabi_ddiv>
   c22ea:	ec41 0b18 	vmov	d8, r0, r1
   c22ee:	eeb0 0a48 	vmov.f32	s0, s16
   c22f2:	eef0 0a68 	vmov.f32	s1, s17
   c22f6:	ecbd 8b02 	vpop	{d8}
   c22fa:	bd38      	pop	{r3, r4, r5, pc}
   c22fc:	2003db64 	.word	0x2003db64

000c2300 <atan2f>:
   c2300:	f000 b9cc 	b.w	c269c <__ieee754_atan2f>

000c2304 <sqrtf>:
   c2304:	b508      	push	{r3, lr}
   c2306:	ed2d 8b02 	vpush	{d8}
   c230a:	eeb0 8a40 	vmov.f32	s16, s0
   c230e:	f000 fb9f 	bl	c2a50 <__ieee754_sqrtf>
   c2312:	4b0e      	ldr	r3, [pc, #56]	; (c234c <sqrtf+0x48>)
   c2314:	f993 3000 	ldrsb.w	r3, [r3]
   c2318:	3301      	adds	r3, #1
   c231a:	d00b      	beq.n	c2334 <sqrtf+0x30>
   c231c:	eeb4 8a48 	vcmp.f32	s16, s16
   c2320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2324:	d606      	bvs.n	c2334 <sqrtf+0x30>
   c2326:	eddf 8a0a 	vldr	s17, [pc, #40]	; c2350 <sqrtf+0x4c>
   c232a:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2332:	d402      	bmi.n	c233a <sqrtf+0x36>
   c2334:	ecbd 8b02 	vpop	{d8}
   c2338:	bd08      	pop	{r3, pc}
   c233a:	f7fb ff11 	bl	be160 <__errno>
   c233e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c2342:	ecbd 8b02 	vpop	{d8}
   c2346:	2321      	movs	r3, #33	; 0x21
   c2348:	6003      	str	r3, [r0, #0]
   c234a:	bd08      	pop	{r3, pc}
   c234c:	2003db64 	.word	0x2003db64
	...

000c2358 <__ieee754_atan2>:
   c2358:	ec51 0b11 	vmov	r0, r1, d1
   c235c:	4243      	negs	r3, r0
   c235e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2362:	4303      	orrs	r3, r0
   c2364:	4e64      	ldr	r6, [pc, #400]	; (c24f8 <__ieee754_atan2+0x1a0>)
   c2366:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c236a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c236e:	42b3      	cmp	r3, r6
   c2370:	ec55 4b10 	vmov	r4, r5, d0
   c2374:	d83e      	bhi.n	c23f4 <__ieee754_atan2+0x9c>
   c2376:	4263      	negs	r3, r4
   c2378:	4323      	orrs	r3, r4
   c237a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c237e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c2382:	42b3      	cmp	r3, r6
   c2384:	46a9      	mov	r9, r5
   c2386:	d835      	bhi.n	c23f4 <__ieee754_atan2+0x9c>
   c2388:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c238c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2390:	4303      	orrs	r3, r0
   c2392:	d03e      	beq.n	c2412 <__ieee754_atan2+0xba>
   c2394:	178f      	asrs	r7, r1, #30
   c2396:	f007 0702 	and.w	r7, r7, #2
   c239a:	ea5a 0304 	orrs.w	r3, sl, r4
   c239e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c23a2:	d02f      	beq.n	c2404 <__ieee754_atan2+0xac>
   c23a4:	ea5e 0300 	orrs.w	r3, lr, r0
   c23a8:	d037      	beq.n	c241a <__ieee754_atan2+0xc2>
   c23aa:	45b6      	cmp	lr, r6
   c23ac:	d044      	beq.n	c2438 <__ieee754_atan2+0xe0>
   c23ae:	45b2      	cmp	sl, r6
   c23b0:	d033      	beq.n	c241a <__ieee754_atan2+0xc2>
   c23b2:	ebaa 0e0e 	sub.w	lr, sl, lr
   c23b6:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c23ba:	ea4f 532e 	mov.w	r3, lr, asr #20
   c23be:	da38      	bge.n	c2432 <__ieee754_atan2+0xda>
   c23c0:	2900      	cmp	r1, #0
   c23c2:	da45      	bge.n	c2450 <__ieee754_atan2+0xf8>
   c23c4:	333c      	adds	r3, #60	; 0x3c
   c23c6:	da43      	bge.n	c2450 <__ieee754_atan2+0xf8>
   c23c8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c24c0 <__ieee754_atan2+0x168>
   c23cc:	2f01      	cmp	r7, #1
   c23ce:	d05d      	beq.n	c248c <__ieee754_atan2+0x134>
   c23d0:	2f02      	cmp	r7, #2
   c23d2:	d04a      	beq.n	c246a <__ieee754_atan2+0x112>
   c23d4:	b1a7      	cbz	r7, c2400 <__ieee754_atan2+0xa8>
   c23d6:	ec51 0b10 	vmov	r0, r1, d0
   c23da:	a33b      	add	r3, pc, #236	; (adr r3, c24c8 <__ieee754_atan2+0x170>)
   c23dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c23e0:	f001 fa86 	bl	c38f0 <__aeabi_dsub>
   c23e4:	a33a      	add	r3, pc, #232	; (adr r3, c24d0 <__ieee754_atan2+0x178>)
   c23e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c23ea:	f001 fa81 	bl	c38f0 <__aeabi_dsub>
   c23ee:	ec41 0b10 	vmov	d0, r0, r1
   c23f2:	e005      	b.n	c2400 <__ieee754_atan2+0xa8>
   c23f4:	4622      	mov	r2, r4
   c23f6:	462b      	mov	r3, r5
   c23f8:	f001 fa7c 	bl	c38f4 <__adddf3>
   c23fc:	ec41 0b10 	vmov	d0, r0, r1
   c2400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2404:	2f02      	cmp	r7, #2
   c2406:	d00e      	beq.n	c2426 <__ieee754_atan2+0xce>
   c2408:	2f03      	cmp	r7, #3
   c240a:	d1f9      	bne.n	c2400 <__ieee754_atan2+0xa8>
   c240c:	ed9f 0b32 	vldr	d0, [pc, #200]	; c24d8 <__ieee754_atan2+0x180>
   c2410:	e7f6      	b.n	c2400 <__ieee754_atan2+0xa8>
   c2412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2416:	f000 bf23 	b.w	c3260 <atan>
   c241a:	f1b9 0f00 	cmp.w	r9, #0
   c241e:	db05      	blt.n	c242c <__ieee754_atan2+0xd4>
   c2420:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c24e0 <__ieee754_atan2+0x188>
   c2424:	e7ec      	b.n	c2400 <__ieee754_atan2+0xa8>
   c2426:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c24d0 <__ieee754_atan2+0x178>
   c242a:	e7e9      	b.n	c2400 <__ieee754_atan2+0xa8>
   c242c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c24e8 <__ieee754_atan2+0x190>
   c2430:	e7e6      	b.n	c2400 <__ieee754_atan2+0xa8>
   c2432:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c24e0 <__ieee754_atan2+0x188>
   c2436:	e7c9      	b.n	c23cc <__ieee754_atan2+0x74>
   c2438:	45f2      	cmp	sl, lr
   c243a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c243e:	d02e      	beq.n	c249e <__ieee754_atan2+0x146>
   c2440:	2f02      	cmp	r7, #2
   c2442:	d834      	bhi.n	c24ae <__ieee754_atan2+0x156>
   c2444:	4b2d      	ldr	r3, [pc, #180]	; (c24fc <__ieee754_atan2+0x1a4>)
   c2446:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c244a:	ed97 0b00 	vldr	d0, [r7]
   c244e:	e7d7      	b.n	c2400 <__ieee754_atan2+0xa8>
   c2450:	4602      	mov	r2, r0
   c2452:	460b      	mov	r3, r1
   c2454:	4620      	mov	r0, r4
   c2456:	4629      	mov	r1, r5
   c2458:	f001 fd2c 	bl	c3eb4 <__aeabi_ddiv>
   c245c:	ec41 0b10 	vmov	d0, r0, r1
   c2460:	f001 f89e 	bl	c35a0 <fabs>
   c2464:	f000 fefc 	bl	c3260 <atan>
   c2468:	e7b0      	b.n	c23cc <__ieee754_atan2+0x74>
   c246a:	a317      	add	r3, pc, #92	; (adr r3, c24c8 <__ieee754_atan2+0x170>)
   c246c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2470:	ec51 0b10 	vmov	r0, r1, d0
   c2474:	f001 fa3c 	bl	c38f0 <__aeabi_dsub>
   c2478:	4602      	mov	r2, r0
   c247a:	460b      	mov	r3, r1
   c247c:	a114      	add	r1, pc, #80	; (adr r1, c24d0 <__ieee754_atan2+0x178>)
   c247e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2482:	f001 fa35 	bl	c38f0 <__aeabi_dsub>
   c2486:	ec41 0b10 	vmov	d0, r0, r1
   c248a:	e7b9      	b.n	c2400 <__ieee754_atan2+0xa8>
   c248c:	ee10 1a90 	vmov	r1, s1
   c2490:	ec53 2b10 	vmov	r2, r3, d0
   c2494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2498:	ec43 2b10 	vmov	d0, r2, r3
   c249c:	e7b0      	b.n	c2400 <__ieee754_atan2+0xa8>
   c249e:	2f02      	cmp	r7, #2
   c24a0:	d808      	bhi.n	c24b4 <__ieee754_atan2+0x15c>
   c24a2:	4b17      	ldr	r3, [pc, #92]	; (c2500 <__ieee754_atan2+0x1a8>)
   c24a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c24a8:	ed97 0b00 	vldr	d0, [r7]
   c24ac:	e7a8      	b.n	c2400 <__ieee754_atan2+0xa8>
   c24ae:	ed9f 0b04 	vldr	d0, [pc, #16]	; c24c0 <__ieee754_atan2+0x168>
   c24b2:	e7a5      	b.n	c2400 <__ieee754_atan2+0xa8>
   c24b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c24f0 <__ieee754_atan2+0x198>
   c24b8:	e7a2      	b.n	c2400 <__ieee754_atan2+0xa8>
   c24ba:	bf00      	nop
   c24bc:	f3af 8000 	nop.w
	...
   c24c8:	33145c07 	.word	0x33145c07
   c24cc:	3ca1a626 	.word	0x3ca1a626
   c24d0:	54442d18 	.word	0x54442d18
   c24d4:	400921fb 	.word	0x400921fb
   c24d8:	54442d18 	.word	0x54442d18
   c24dc:	c00921fb 	.word	0xc00921fb
   c24e0:	54442d18 	.word	0x54442d18
   c24e4:	3ff921fb 	.word	0x3ff921fb
   c24e8:	54442d18 	.word	0x54442d18
   c24ec:	bff921fb 	.word	0xbff921fb
   c24f0:	54442d18 	.word	0x54442d18
   c24f4:	3fe921fb 	.word	0x3fe921fb
   c24f8:	7ff00000 	.word	0x7ff00000
   c24fc:	000c7fd0 	.word	0x000c7fd0
   c2500:	000c7fb8 	.word	0x000c7fb8

000c2504 <__ieee754_sqrt>:
   c2504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2508:	4a63      	ldr	r2, [pc, #396]	; (c2698 <__ieee754_sqrt+0x194>)
   c250a:	ec55 4b10 	vmov	r4, r5, d0
   c250e:	43aa      	bics	r2, r5
   c2510:	f000 809f 	beq.w	c2652 <__ieee754_sqrt+0x14e>
   c2514:	2d00      	cmp	r5, #0
   c2516:	ee10 ca10 	vmov	ip, s0
   c251a:	462b      	mov	r3, r5
   c251c:	dd54      	ble.n	c25c8 <__ieee754_sqrt+0xc4>
   c251e:	1529      	asrs	r1, r5, #20
   c2520:	d063      	beq.n	c25ea <__ieee754_sqrt+0xe6>
   c2522:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c2526:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c252a:	07c9      	lsls	r1, r1, #31
   c252c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c2530:	d404      	bmi.n	c253c <__ieee754_sqrt+0x38>
   c2532:	005b      	lsls	r3, r3, #1
   c2534:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2538:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c253c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c2540:	2600      	movs	r6, #0
   c2542:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c2546:	107f      	asrs	r7, r7, #1
   c2548:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c254c:	f04f 0e16 	mov.w	lr, #22
   c2550:	4634      	mov	r4, r6
   c2552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c2556:	18a1      	adds	r1, r4, r2
   c2558:	4299      	cmp	r1, r3
   c255a:	dc02      	bgt.n	c2562 <__ieee754_sqrt+0x5e>
   c255c:	1a5b      	subs	r3, r3, r1
   c255e:	188c      	adds	r4, r1, r2
   c2560:	4416      	add	r6, r2
   c2562:	005b      	lsls	r3, r3, #1
   c2564:	f1be 0e01 	subs.w	lr, lr, #1
   c2568:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c256c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2570:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2574:	d1ef      	bne.n	c2556 <__ieee754_sqrt+0x52>
   c2576:	4675      	mov	r5, lr
   c2578:	2020      	movs	r0, #32
   c257a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c257e:	e00a      	b.n	c2596 <__ieee754_sqrt+0x92>
   c2580:	d044      	beq.n	c260c <__ieee754_sqrt+0x108>
   c2582:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c2586:	3801      	subs	r0, #1
   c2588:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c258c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2590:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2594:	d043      	beq.n	c261e <__ieee754_sqrt+0x11a>
   c2596:	42a3      	cmp	r3, r4
   c2598:	eb02 010e 	add.w	r1, r2, lr
   c259c:	ddf0      	ble.n	c2580 <__ieee754_sqrt+0x7c>
   c259e:	2900      	cmp	r1, #0
   c25a0:	eb01 0e02 	add.w	lr, r1, r2
   c25a4:	db0a      	blt.n	c25bc <__ieee754_sqrt+0xb8>
   c25a6:	46a0      	mov	r8, r4
   c25a8:	1b1b      	subs	r3, r3, r4
   c25aa:	4561      	cmp	r1, ip
   c25ac:	bf88      	it	hi
   c25ae:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c25b2:	ebac 0c01 	sub.w	ip, ip, r1
   c25b6:	4415      	add	r5, r2
   c25b8:	4644      	mov	r4, r8
   c25ba:	e7e2      	b.n	c2582 <__ieee754_sqrt+0x7e>
   c25bc:	f1be 0f00 	cmp.w	lr, #0
   c25c0:	dbf1      	blt.n	c25a6 <__ieee754_sqrt+0xa2>
   c25c2:	f104 0801 	add.w	r8, r4, #1
   c25c6:	e7ef      	b.n	c25a8 <__ieee754_sqrt+0xa4>
   c25c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c25cc:	4322      	orrs	r2, r4
   c25ce:	d038      	beq.n	c2642 <__ieee754_sqrt+0x13e>
   c25d0:	2d00      	cmp	r5, #0
   c25d2:	d14e      	bne.n	c2672 <__ieee754_sqrt+0x16e>
   c25d4:	4629      	mov	r1, r5
   c25d6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c25da:	3915      	subs	r1, #21
   c25dc:	4613      	mov	r3, r2
   c25de:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c25e2:	2a00      	cmp	r2, #0
   c25e4:	d0f7      	beq.n	c25d6 <__ieee754_sqrt+0xd2>
   c25e6:	02d6      	lsls	r6, r2, #11
   c25e8:	d450      	bmi.n	c268c <__ieee754_sqrt+0x188>
   c25ea:	2000      	movs	r0, #0
   c25ec:	005b      	lsls	r3, r3, #1
   c25ee:	02dd      	lsls	r5, r3, #11
   c25f0:	4604      	mov	r4, r0
   c25f2:	f100 0001 	add.w	r0, r0, #1
   c25f6:	d5f9      	bpl.n	c25ec <__ieee754_sqrt+0xe8>
   c25f8:	461a      	mov	r2, r3
   c25fa:	4663      	mov	r3, ip
   c25fc:	fa0c fc00 	lsl.w	ip, ip, r0
   c2600:	f1c0 0020 	rsb	r0, r0, #32
   c2604:	40c3      	lsrs	r3, r0
   c2606:	1b09      	subs	r1, r1, r4
   c2608:	4313      	orrs	r3, r2
   c260a:	e78a      	b.n	c2522 <__ieee754_sqrt+0x1e>
   c260c:	4561      	cmp	r1, ip
   c260e:	d8b8      	bhi.n	c2582 <__ieee754_sqrt+0x7e>
   c2610:	2900      	cmp	r1, #0
   c2612:	eb01 0e02 	add.w	lr, r1, r2
   c2616:	dbd1      	blt.n	c25bc <__ieee754_sqrt+0xb8>
   c2618:	4698      	mov	r8, r3
   c261a:	2300      	movs	r3, #0
   c261c:	e7c9      	b.n	c25b2 <__ieee754_sqrt+0xae>
   c261e:	ea53 030c 	orrs.w	r3, r3, ip
   c2622:	d110      	bne.n	c2646 <__ieee754_sqrt+0x142>
   c2624:	0868      	lsrs	r0, r5, #1
   c2626:	1071      	asrs	r1, r6, #1
   c2628:	07f3      	lsls	r3, r6, #31
   c262a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c262e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c2632:	bf48      	it	mi
   c2634:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c2638:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c263c:	4602      	mov	r2, r0
   c263e:	ec43 2b10 	vmov	d0, r2, r3
   c2642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2646:	1c6a      	adds	r2, r5, #1
   c2648:	bf16      	itet	ne
   c264a:	1c68      	addne	r0, r5, #1
   c264c:	3601      	addeq	r6, #1
   c264e:	0840      	lsrne	r0, r0, #1
   c2650:	e7e9      	b.n	c2626 <__ieee754_sqrt+0x122>
   c2652:	ee10 2a10 	vmov	r2, s0
   c2656:	ee10 0a10 	vmov	r0, s0
   c265a:	462b      	mov	r3, r5
   c265c:	4629      	mov	r1, r5
   c265e:	f001 faff 	bl	c3c60 <__aeabi_dmul>
   c2662:	4622      	mov	r2, r4
   c2664:	462b      	mov	r3, r5
   c2666:	f001 f945 	bl	c38f4 <__adddf3>
   c266a:	ec41 0b10 	vmov	d0, r0, r1
   c266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2672:	ee10 2a10 	vmov	r2, s0
   c2676:	4620      	mov	r0, r4
   c2678:	4629      	mov	r1, r5
   c267a:	f001 f939 	bl	c38f0 <__aeabi_dsub>
   c267e:	4602      	mov	r2, r0
   c2680:	460b      	mov	r3, r1
   c2682:	f001 fc17 	bl	c3eb4 <__aeabi_ddiv>
   c2686:	ec41 0b10 	vmov	d0, r0, r1
   c268a:	e7da      	b.n	c2642 <__ieee754_sqrt+0x13e>
   c268c:	4663      	mov	r3, ip
   c268e:	2020      	movs	r0, #32
   c2690:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c2694:	e7b6      	b.n	c2604 <__ieee754_sqrt+0x100>
   c2696:	bf00      	nop
   c2698:	7ff00000 	.word	0x7ff00000

000c269c <__ieee754_atan2f>:
   c269c:	b510      	push	{r4, lr}
   c269e:	b082      	sub	sp, #8
   c26a0:	edcd 0a01 	vstr	s1, [sp, #4]
   c26a4:	9b01      	ldr	r3, [sp, #4]
   c26a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c26aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c26ae:	eef0 7a40 	vmov.f32	s15, s0
   c26b2:	dc30      	bgt.n	c2716 <__ieee754_atan2f+0x7a>
   c26b4:	ee10 0a10 	vmov	r0, s0
   c26b8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c26bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c26c0:	dc29      	bgt.n	c2716 <__ieee754_atan2f+0x7a>
   c26c2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c26c6:	d042      	beq.n	c274e <__ieee754_atan2f+0xb2>
   c26c8:	179c      	asrs	r4, r3, #30
   c26ca:	f004 0402 	and.w	r4, r4, #2
   c26ce:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c26d2:	b331      	cbz	r1, c2722 <__ieee754_atan2f+0x86>
   c26d4:	b37a      	cbz	r2, c2736 <__ieee754_atan2f+0x9a>
   c26d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c26da:	d040      	beq.n	c275e <__ieee754_atan2f+0xc2>
   c26dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c26e0:	d029      	beq.n	c2736 <__ieee754_atan2f+0x9a>
   c26e2:	1a8a      	subs	r2, r1, r2
   c26e4:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c26e8:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c26ec:	da34      	bge.n	c2758 <__ieee754_atan2f+0xbc>
   c26ee:	2b00      	cmp	r3, #0
   c26f0:	da42      	bge.n	c2778 <__ieee754_atan2f+0xdc>
   c26f2:	313c      	adds	r1, #60	; 0x3c
   c26f4:	da40      	bge.n	c2778 <__ieee754_atan2f+0xdc>
   c26f6:	ed9f 0a34 	vldr	s0, [pc, #208]	; c27c8 <__ieee754_atan2f+0x12c>
   c26fa:	2c01      	cmp	r4, #1
   c26fc:	d04e      	beq.n	c279c <__ieee754_atan2f+0x100>
   c26fe:	2c02      	cmp	r4, #2
   c2700:	d043      	beq.n	c278a <__ieee754_atan2f+0xee>
   c2702:	b164      	cbz	r4, c271e <__ieee754_atan2f+0x82>
   c2704:	ed9f 7a31 	vldr	s14, [pc, #196]	; c27cc <__ieee754_atan2f+0x130>
   c2708:	eddf 7a31 	vldr	s15, [pc, #196]	; c27d0 <__ieee754_atan2f+0x134>
   c270c:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2710:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2714:	e003      	b.n	c271e <__ieee754_atan2f+0x82>
   c2716:	ed9d 7a01 	vldr	s14, [sp, #4]
   c271a:	ee37 0a27 	vadd.f32	s0, s14, s15
   c271e:	b002      	add	sp, #8
   c2720:	bd10      	pop	{r4, pc}
   c2722:	2c02      	cmp	r4, #2
   c2724:	d010      	beq.n	c2748 <__ieee754_atan2f+0xac>
   c2726:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c27d4 <__ieee754_atan2f+0x138>
   c272a:	2c03      	cmp	r4, #3
   c272c:	bf18      	it	ne
   c272e:	eeb0 0a67 	vmovne.f32	s0, s15
   c2732:	b002      	add	sp, #8
   c2734:	bd10      	pop	{r4, pc}
   c2736:	ed9f 0a28 	vldr	s0, [pc, #160]	; c27d8 <__ieee754_atan2f+0x13c>
   c273a:	eddf 7a28 	vldr	s15, [pc, #160]	; c27dc <__ieee754_atan2f+0x140>
   c273e:	2800      	cmp	r0, #0
   c2740:	bfb8      	it	lt
   c2742:	eeb0 0a67 	vmovlt.f32	s0, s15
   c2746:	e7ea      	b.n	c271e <__ieee754_atan2f+0x82>
   c2748:	ed9f 0a21 	vldr	s0, [pc, #132]	; c27d0 <__ieee754_atan2f+0x134>
   c274c:	e7e7      	b.n	c271e <__ieee754_atan2f+0x82>
   c274e:	b002      	add	sp, #8
   c2750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2754:	f000 bf2e 	b.w	c35b4 <atanf>
   c2758:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c27d8 <__ieee754_atan2f+0x13c>
   c275c:	e7cd      	b.n	c26fa <__ieee754_atan2f+0x5e>
   c275e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2762:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c2766:	d020      	beq.n	c27aa <__ieee754_atan2f+0x10e>
   c2768:	2c02      	cmp	r4, #2
   c276a:	d826      	bhi.n	c27ba <__ieee754_atan2f+0x11e>
   c276c:	4b1c      	ldr	r3, [pc, #112]	; (c27e0 <__ieee754_atan2f+0x144>)
   c276e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2772:	ed94 0a00 	vldr	s0, [r4]
   c2776:	e7d2      	b.n	c271e <__ieee754_atan2f+0x82>
   c2778:	ed9d 7a01 	vldr	s14, [sp, #4]
   c277c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2780:	f000 fff2 	bl	c3768 <fabsf>
   c2784:	f000 ff16 	bl	c35b4 <atanf>
   c2788:	e7b7      	b.n	c26fa <__ieee754_atan2f+0x5e>
   c278a:	ed9f 7a10 	vldr	s14, [pc, #64]	; c27cc <__ieee754_atan2f+0x130>
   c278e:	eddf 7a10 	vldr	s15, [pc, #64]	; c27d0 <__ieee754_atan2f+0x134>
   c2792:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2796:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c279a:	e7c0      	b.n	c271e <__ieee754_atan2f+0x82>
   c279c:	ee10 3a10 	vmov	r3, s0
   c27a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c27a4:	ee00 3a10 	vmov	s0, r3
   c27a8:	e7b9      	b.n	c271e <__ieee754_atan2f+0x82>
   c27aa:	2c02      	cmp	r4, #2
   c27ac:	d808      	bhi.n	c27c0 <__ieee754_atan2f+0x124>
   c27ae:	4b0d      	ldr	r3, [pc, #52]	; (c27e4 <__ieee754_atan2f+0x148>)
   c27b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c27b4:	ed94 0a00 	vldr	s0, [r4]
   c27b8:	e7b1      	b.n	c271e <__ieee754_atan2f+0x82>
   c27ba:	ed9f 0a03 	vldr	s0, [pc, #12]	; c27c8 <__ieee754_atan2f+0x12c>
   c27be:	e7ae      	b.n	c271e <__ieee754_atan2f+0x82>
   c27c0:	ed9f 0a09 	vldr	s0, [pc, #36]	; c27e8 <__ieee754_atan2f+0x14c>
   c27c4:	e7ab      	b.n	c271e <__ieee754_atan2f+0x82>
   c27c6:	bf00      	nop
   c27c8:	00000000 	.word	0x00000000
   c27cc:	33bbbd2e 	.word	0x33bbbd2e
   c27d0:	40490fdb 	.word	0x40490fdb
   c27d4:	c0490fdb 	.word	0xc0490fdb
   c27d8:	3fc90fdb 	.word	0x3fc90fdb
   c27dc:	bfc90fdb 	.word	0xbfc90fdb
   c27e0:	000c7ff4 	.word	0x000c7ff4
   c27e4:	000c7fe8 	.word	0x000c7fe8
   c27e8:	3f490fdb 	.word	0x3f490fdb

000c27ec <__ieee754_rem_pio2f>:
   c27ec:	b570      	push	{r4, r5, r6, lr}
   c27ee:	ee10 3a10 	vmov	r3, s0
   c27f2:	4a89      	ldr	r2, [pc, #548]	; (c2a18 <__ieee754_rem_pio2f+0x22c>)
   c27f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c27f8:	4294      	cmp	r4, r2
   c27fa:	b086      	sub	sp, #24
   c27fc:	4605      	mov	r5, r0
   c27fe:	dd70      	ble.n	c28e2 <__ieee754_rem_pio2f+0xf6>
   c2800:	4a86      	ldr	r2, [pc, #536]	; (c2a1c <__ieee754_rem_pio2f+0x230>)
   c2802:	4294      	cmp	r4, r2
   c2804:	ee10 6a10 	vmov	r6, s0
   c2808:	dc22      	bgt.n	c2850 <__ieee754_rem_pio2f+0x64>
   c280a:	2b00      	cmp	r3, #0
   c280c:	eddf 7a84 	vldr	s15, [pc, #528]	; c2a20 <__ieee754_rem_pio2f+0x234>
   c2810:	4a84      	ldr	r2, [pc, #528]	; (c2a24 <__ieee754_rem_pio2f+0x238>)
   c2812:	f024 040f 	bic.w	r4, r4, #15
   c2816:	eeb0 7a40 	vmov.f32	s14, s0
   c281a:	f340 80e4 	ble.w	c29e6 <__ieee754_rem_pio2f+0x1fa>
   c281e:	4294      	cmp	r4, r2
   c2820:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2824:	bf09      	itett	eq
   c2826:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2a28 <__ieee754_rem_pio2f+0x23c>
   c282a:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2a2c <__ieee754_rem_pio2f+0x240>
   c282e:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2a30 <__ieee754_rem_pio2f+0x244>
   c2832:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c2836:	2001      	movs	r0, #1
   c2838:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c283c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2840:	edc5 6a00 	vstr	s13, [r5]
   c2844:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2848:	edc5 7a01 	vstr	s15, [r5, #4]
   c284c:	b006      	add	sp, #24
   c284e:	bd70      	pop	{r4, r5, r6, pc}
   c2850:	4a78      	ldr	r2, [pc, #480]	; (c2a34 <__ieee754_rem_pio2f+0x248>)
   c2852:	4294      	cmp	r4, r2
   c2854:	dd54      	ble.n	c2900 <__ieee754_rem_pio2f+0x114>
   c2856:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c285a:	da49      	bge.n	c28f0 <__ieee754_rem_pio2f+0x104>
   c285c:	15e2      	asrs	r2, r4, #23
   c285e:	3a86      	subs	r2, #134	; 0x86
   c2860:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2864:	ee07 3a90 	vmov	s15, r3
   c2868:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c286c:	eddf 6a72 	vldr	s13, [pc, #456]	; c2a38 <__ieee754_rem_pio2f+0x24c>
   c2870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2874:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2878:	ed8d 7a03 	vstr	s14, [sp, #12]
   c287c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2880:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2888:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c288c:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2890:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2894:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c289c:	edcd 7a05 	vstr	s15, [sp, #20]
   c28a0:	f040 8090 	bne.w	c29c4 <__ieee754_rem_pio2f+0x1d8>
   c28a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c28a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c28ac:	bf14      	ite	ne
   c28ae:	2302      	movne	r3, #2
   c28b0:	2301      	moveq	r3, #1
   c28b2:	4962      	ldr	r1, [pc, #392]	; (c2a3c <__ieee754_rem_pio2f+0x250>)
   c28b4:	9101      	str	r1, [sp, #4]
   c28b6:	2102      	movs	r1, #2
   c28b8:	9100      	str	r1, [sp, #0]
   c28ba:	a803      	add	r0, sp, #12
   c28bc:	4629      	mov	r1, r5
   c28be:	f000 f94d 	bl	c2b5c <__kernel_rem_pio2f>
   c28c2:	2e00      	cmp	r6, #0
   c28c4:	dac2      	bge.n	c284c <__ieee754_rem_pio2f+0x60>
   c28c6:	ed95 7a00 	vldr	s14, [r5]
   c28ca:	edd5 7a01 	vldr	s15, [r5, #4]
   c28ce:	eeb1 7a47 	vneg.f32	s14, s14
   c28d2:	eef1 7a67 	vneg.f32	s15, s15
   c28d6:	ed85 7a00 	vstr	s14, [r5]
   c28da:	edc5 7a01 	vstr	s15, [r5, #4]
   c28de:	4240      	negs	r0, r0
   c28e0:	e7b4      	b.n	c284c <__ieee754_rem_pio2f+0x60>
   c28e2:	2200      	movs	r2, #0
   c28e4:	ed85 0a00 	vstr	s0, [r5]
   c28e8:	6042      	str	r2, [r0, #4]
   c28ea:	2000      	movs	r0, #0
   c28ec:	b006      	add	sp, #24
   c28ee:	bd70      	pop	{r4, r5, r6, pc}
   c28f0:	ee70 7a40 	vsub.f32	s15, s0, s0
   c28f4:	2000      	movs	r0, #0
   c28f6:	edc5 7a01 	vstr	s15, [r5, #4]
   c28fa:	edc5 7a00 	vstr	s15, [r5]
   c28fe:	e7a5      	b.n	c284c <__ieee754_rem_pio2f+0x60>
   c2900:	f000 ff32 	bl	c3768 <fabsf>
   c2904:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2a40 <__ieee754_rem_pio2f+0x254>
   c2908:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2a20 <__ieee754_rem_pio2f+0x234>
   c290c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2910:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2914:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2a2c <__ieee754_rem_pio2f+0x240>
   c2918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c291c:	ee17 0a90 	vmov	r0, s15
   c2920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2924:	281f      	cmp	r0, #31
   c2926:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c292a:	ee66 7a87 	vmul.f32	s15, s13, s14
   c292e:	eeb1 6a66 	vneg.f32	s12, s13
   c2932:	dc1e      	bgt.n	c2972 <__ieee754_rem_pio2f+0x186>
   c2934:	4a43      	ldr	r2, [pc, #268]	; (c2a44 <__ieee754_rem_pio2f+0x258>)
   c2936:	1e41      	subs	r1, r0, #1
   c2938:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c293c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2940:	4293      	cmp	r3, r2
   c2942:	d016      	beq.n	c2972 <__ieee754_rem_pio2f+0x186>
   c2944:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2948:	ed85 7a00 	vstr	s14, [r5]
   c294c:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2950:	2e00      	cmp	r6, #0
   c2952:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2956:	ed85 0a01 	vstr	s0, [r5, #4]
   c295a:	f6bf af77 	bge.w	c284c <__ieee754_rem_pio2f+0x60>
   c295e:	eeb1 7a47 	vneg.f32	s14, s14
   c2962:	eeb1 0a40 	vneg.f32	s0, s0
   c2966:	ed85 7a00 	vstr	s14, [r5]
   c296a:	ed85 0a01 	vstr	s0, [r5, #4]
   c296e:	4240      	negs	r0, r0
   c2970:	e76c      	b.n	c284c <__ieee754_rem_pio2f+0x60>
   c2972:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2976:	15e2      	asrs	r2, r4, #23
   c2978:	ee17 3a10 	vmov	r3, s14
   c297c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2980:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2984:	2c08      	cmp	r4, #8
   c2986:	dddf      	ble.n	c2948 <__ieee754_rem_pio2f+0x15c>
   c2988:	eddf 7a27 	vldr	s15, [pc, #156]	; c2a28 <__ieee754_rem_pio2f+0x23c>
   c298c:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2a30 <__ieee754_rem_pio2f+0x244>
   c2990:	eef0 5a40 	vmov.f32	s11, s0
   c2994:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2998:	ee30 0a65 	vsub.f32	s0, s0, s11
   c299c:	eea6 0a27 	vfma.f32	s0, s12, s15
   c29a0:	eef0 7a40 	vmov.f32	s15, s0
   c29a4:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c29a8:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c29ac:	ee17 3a10 	vmov	r3, s14
   c29b0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c29b4:	1ad2      	subs	r2, r2, r3
   c29b6:	2a19      	cmp	r2, #25
   c29b8:	dc06      	bgt.n	c29c8 <__ieee754_rem_pio2f+0x1dc>
   c29ba:	eeb0 0a65 	vmov.f32	s0, s11
   c29be:	ed85 7a00 	vstr	s14, [r5]
   c29c2:	e7c3      	b.n	c294c <__ieee754_rem_pio2f+0x160>
   c29c4:	2303      	movs	r3, #3
   c29c6:	e774      	b.n	c28b2 <__ieee754_rem_pio2f+0xc6>
   c29c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2a48 <__ieee754_rem_pio2f+0x25c>
   c29cc:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2a4c <__ieee754_rem_pio2f+0x260>
   c29d0:	eeb0 0a65 	vmov.f32	s0, s11
   c29d4:	eea6 0a07 	vfma.f32	s0, s12, s14
   c29d8:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c29dc:	eee6 7a07 	vfma.f32	s15, s12, s14
   c29e0:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c29e4:	e7ae      	b.n	c2944 <__ieee754_rem_pio2f+0x158>
   c29e6:	4294      	cmp	r4, r2
   c29e8:	ee70 7a27 	vadd.f32	s15, s0, s15
   c29ec:	bf09      	itett	eq
   c29ee:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2a28 <__ieee754_rem_pio2f+0x23c>
   c29f2:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2a2c <__ieee754_rem_pio2f+0x240>
   c29f6:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2a30 <__ieee754_rem_pio2f+0x244>
   c29fa:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c29fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2a02:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2a0a:	edc5 6a00 	vstr	s13, [r5]
   c2a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2a12:	edc5 7a01 	vstr	s15, [r5, #4]
   c2a16:	e719      	b.n	c284c <__ieee754_rem_pio2f+0x60>
   c2a18:	3f490fd8 	.word	0x3f490fd8
   c2a1c:	4016cbe3 	.word	0x4016cbe3
   c2a20:	3fc90f80 	.word	0x3fc90f80
   c2a24:	3fc90fd0 	.word	0x3fc90fd0
   c2a28:	37354400 	.word	0x37354400
   c2a2c:	37354443 	.word	0x37354443
   c2a30:	2e85a308 	.word	0x2e85a308
   c2a34:	43490f80 	.word	0x43490f80
   c2a38:	43800000 	.word	0x43800000
   c2a3c:	000c8080 	.word	0x000c8080
   c2a40:	3f22f984 	.word	0x3f22f984
   c2a44:	000c8000 	.word	0x000c8000
   c2a48:	2e85a300 	.word	0x2e85a300
   c2a4c:	248d3132 	.word	0x248d3132

000c2a50 <__ieee754_sqrtf>:
   c2a50:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2a54:	4770      	bx	lr
   c2a56:	bf00      	nop

000c2a58 <__kernel_cosf>:
   c2a58:	ee10 3a10 	vmov	r3, s0
   c2a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2a60:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2a64:	da2c      	bge.n	c2ac0 <__kernel_cosf+0x68>
   c2a66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2a6a:	ee17 3a90 	vmov	r3, s15
   c2a6e:	2b00      	cmp	r3, #0
   c2a70:	d060      	beq.n	c2b34 <__kernel_cosf+0xdc>
   c2a72:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2a76:	eddf 7a31 	vldr	s15, [pc, #196]	; c2b3c <__kernel_cosf+0xe4>
   c2a7a:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2b40 <__kernel_cosf+0xe8>
   c2a7e:	eddf 5a31 	vldr	s11, [pc, #196]	; c2b44 <__kernel_cosf+0xec>
   c2a82:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2b48 <__kernel_cosf+0xf0>
   c2a86:	eddf 6a31 	vldr	s13, [pc, #196]	; c2b4c <__kernel_cosf+0xf4>
   c2a8a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2a8e:	eddf 7a30 	vldr	s15, [pc, #192]	; c2b50 <__kernel_cosf+0xf8>
   c2a92:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2a96:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2a9a:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2a9e:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2aa2:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2aa6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2aaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2aae:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2ab2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2ab6:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2aba:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2abe:	4770      	bx	lr
   c2ac0:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2ac4:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2b3c <__kernel_cosf+0xe4>
   c2ac8:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2b40 <__kernel_cosf+0xe8>
   c2acc:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2b44 <__kernel_cosf+0xec>
   c2ad0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2b48 <__kernel_cosf+0xf0>
   c2ad4:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2b4c <__kernel_cosf+0xf4>
   c2ad8:	4a1e      	ldr	r2, [pc, #120]	; (c2b54 <__kernel_cosf+0xfc>)
   c2ada:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2ade:	4293      	cmp	r3, r2
   c2ae0:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2b50 <__kernel_cosf+0xf8>
   c2ae4:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2ae8:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2aec:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2af0:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2af4:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2af8:	ddd5      	ble.n	c2aa6 <__kernel_cosf+0x4e>
   c2afa:	4a17      	ldr	r2, [pc, #92]	; (c2b58 <__kernel_cosf+0x100>)
   c2afc:	4293      	cmp	r3, r2
   c2afe:	dc14      	bgt.n	c2b2a <__kernel_cosf+0xd2>
   c2b00:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2b04:	ee07 3a90 	vmov	s15, r3
   c2b08:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2b0c:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2b10:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2b14:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2b18:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2b1c:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2b20:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2b24:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2b28:	4770      	bx	lr
   c2b2a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2b2e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2b32:	e7ed      	b.n	c2b10 <__kernel_cosf+0xb8>
   c2b34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2b38:	4770      	bx	lr
   c2b3a:	bf00      	nop
   c2b3c:	ad47d74e 	.word	0xad47d74e
   c2b40:	310f74f6 	.word	0x310f74f6
   c2b44:	b493f27c 	.word	0xb493f27c
   c2b48:	37d00d01 	.word	0x37d00d01
   c2b4c:	3d2aaaab 	.word	0x3d2aaaab
   c2b50:	bab60b61 	.word	0xbab60b61
   c2b54:	3e999999 	.word	0x3e999999
   c2b58:	3f480000 	.word	0x3f480000

000c2b5c <__kernel_rem_pio2f>:
   c2b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2b60:	ed2d 8b04 	vpush	{d8-d9}
   c2b64:	b0db      	sub	sp, #364	; 0x16c
   c2b66:	461c      	mov	r4, r3
   c2b68:	9303      	str	r3, [sp, #12]
   c2b6a:	9106      	str	r1, [sp, #24]
   c2b6c:	4ba3      	ldr	r3, [pc, #652]	; (c2dfc <__kernel_rem_pio2f+0x2a0>)
   c2b6e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2b70:	9208      	str	r2, [sp, #32]
   c2b72:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2b76:	1d11      	adds	r1, r2, #4
   c2b78:	4682      	mov	sl, r0
   c2b7a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2b7e:	f2c0 82a2 	blt.w	c30c6 <__kernel_rem_pio2f+0x56a>
   c2b82:	1ed3      	subs	r3, r2, #3
   c2b84:	bf44      	itt	mi
   c2b86:	4613      	movmi	r3, r2
   c2b88:	3304      	addmi	r3, #4
   c2b8a:	10db      	asrs	r3, r3, #3
   c2b8c:	9302      	str	r3, [sp, #8]
   c2b8e:	3301      	adds	r3, #1
   c2b90:	00db      	lsls	r3, r3, #3
   c2b92:	9307      	str	r3, [sp, #28]
   c2b94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2b98:	1a9b      	subs	r3, r3, r2
   c2b9a:	9305      	str	r3, [sp, #20]
   c2b9c:	9b02      	ldr	r3, [sp, #8]
   c2b9e:	eb15 0108 	adds.w	r1, r5, r8
   c2ba2:	eba3 0308 	sub.w	r3, r3, r8
   c2ba6:	d416      	bmi.n	c2bd6 <__kernel_rem_pio2f+0x7a>
   c2ba8:	3101      	adds	r1, #1
   c2baa:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2e00 <__kernel_rem_pio2f+0x2a4>
   c2bae:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2bb0:	4419      	add	r1, r3
   c2bb2:	aa1e      	add	r2, sp, #120	; 0x78
   c2bb4:	2b00      	cmp	r3, #0
   c2bb6:	bfa4      	itt	ge
   c2bb8:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2bbc:	ee07 4a90 	vmovge	s15, r4
   c2bc0:	f103 0301 	add.w	r3, r3, #1
   c2bc4:	bfac      	ite	ge
   c2bc6:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2bca:	eef0 7a47 	vmovlt.f32	s15, s14
   c2bce:	428b      	cmp	r3, r1
   c2bd0:	ece2 7a01 	vstmia	r2!, {s15}
   c2bd4:	d1ee      	bne.n	c2bb4 <__kernel_rem_pio2f+0x58>
   c2bd6:	2d00      	cmp	r5, #0
   c2bd8:	f2c0 82e5 	blt.w	c31a6 <__kernel_rem_pio2f+0x64a>
   c2bdc:	9b03      	ldr	r3, [sp, #12]
   c2bde:	a91e      	add	r1, sp, #120	; 0x78
   c2be0:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2be4:	ae46      	add	r6, sp, #280	; 0x118
   c2be6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2bea:	4640      	mov	r0, r8
   c2bec:	18ef      	adds	r7, r5, r3
   c2bee:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2bf2:	f1b8 0f00 	cmp.w	r8, #0
   c2bf6:	eddf 7a82 	vldr	s15, [pc, #520]	; c2e00 <__kernel_rem_pio2f+0x2a4>
   c2bfa:	db09      	blt.n	c2c10 <__kernel_rem_pio2f+0xb4>
   c2bfc:	4622      	mov	r2, r4
   c2bfe:	4653      	mov	r3, sl
   c2c00:	ecf3 6a01 	vldmia	r3!, {s13}
   c2c04:	ed32 7a01 	vldmdb	r2!, {s14}
   c2c08:	428b      	cmp	r3, r1
   c2c0a:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2c0e:	d1f7      	bne.n	c2c00 <__kernel_rem_pio2f+0xa4>
   c2c10:	3001      	adds	r0, #1
   c2c12:	42b8      	cmp	r0, r7
   c2c14:	ece6 7a01 	vstmia	r6!, {s15}
   c2c18:	f104 0404 	add.w	r4, r4, #4
   c2c1c:	d1e9      	bne.n	c2bf2 <__kernel_rem_pio2f+0x96>
   c2c1e:	ab09      	add	r3, sp, #36	; 0x24
   c2c20:	af0a      	add	r7, sp, #40	; 0x28
   c2c22:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2c26:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2c2a:	3b08      	subs	r3, #8
   c2c2c:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2e08 <__kernel_rem_pio2f+0x2ac>
   c2c30:	eddf 8a74 	vldr	s17, [pc, #464]	; c2e04 <__kernel_rem_pio2f+0x2a8>
   c2c34:	9805      	ldr	r0, [sp, #20]
   c2c36:	9304      	str	r3, [sp, #16]
   c2c38:	eb0a 040c 	add.w	r4, sl, ip
   c2c3c:	ae46      	add	r6, sp, #280	; 0x118
   c2c3e:	9500      	str	r5, [sp, #0]
   c2c40:	ab5a      	add	r3, sp, #360	; 0x168
   c2c42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2c46:	2d00      	cmp	r5, #0
   c2c48:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2c4c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2c50:	dd16      	ble.n	c2c80 <__kernel_rem_pio2f+0x124>
   c2c52:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2c56:	463a      	mov	r2, r7
   c2c58:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2c5c:	eeb0 7a40 	vmov.f32	s14, s0
   c2c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2c64:	ed73 6a01 	vldmdb	r3!, {s13}
   c2c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2c6c:	42b3      	cmp	r3, r6
   c2c6e:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2c72:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2c76:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2c7a:	eca2 7a01 	vstmia	r2!, {s14}
   c2c7e:	d1eb      	bne.n	c2c58 <__kernel_rem_pio2f+0xfc>
   c2c80:	9001      	str	r0, [sp, #4]
   c2c82:	f000 fdbf 	bl	c3804 <scalbnf>
   c2c86:	eeb0 8a40 	vmov.f32	s16, s0
   c2c8a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2c8e:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2c92:	f000 fd71 	bl	c3778 <floorf>
   c2c96:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2c9a:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2c9e:	9801      	ldr	r0, [sp, #4]
   c2ca0:	2800      	cmp	r0, #0
   c2ca2:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2ca6:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2caa:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2cae:	dd79      	ble.n	c2da4 <__kernel_rem_pio2f+0x248>
   c2cb0:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c2cb4:	f1c0 0308 	rsb	r3, r0, #8
   c2cb8:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2cbc:	fa41 fc03 	asr.w	ip, r1, r3
   c2cc0:	fa0c f303 	lsl.w	r3, ip, r3
   c2cc4:	1acb      	subs	r3, r1, r3
   c2cc6:	f1c0 0207 	rsb	r2, r0, #7
   c2cca:	ee19 1a90 	vmov	r1, s19
   c2cce:	fa43 f202 	asr.w	r2, r3, r2
   c2cd2:	4461      	add	r1, ip
   c2cd4:	2a00      	cmp	r2, #0
   c2cd6:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2cda:	ee09 1a90 	vmov	s19, r1
   c2cde:	dc69      	bgt.n	c2db4 <__kernel_rem_pio2f+0x258>
   c2ce0:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2ce8:	f040 80c1 	bne.w	c2e6e <__kernel_rem_pio2f+0x312>
   c2cec:	9b00      	ldr	r3, [sp, #0]
   c2cee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c2cf2:	455b      	cmp	r3, fp
   c2cf4:	dc10      	bgt.n	c2d18 <__kernel_rem_pio2f+0x1bc>
   c2cf6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2cfa:	3b01      	subs	r3, #1
   c2cfc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2d00:	2100      	movs	r1, #0
   c2d02:	4694      	mov	ip, r2
   c2d04:	f853 2904 	ldr.w	r2, [r3], #-4
   c2d08:	454b      	cmp	r3, r9
   c2d0a:	ea41 0102 	orr.w	r1, r1, r2
   c2d0e:	d1f9      	bne.n	c2d04 <__kernel_rem_pio2f+0x1a8>
   c2d10:	4662      	mov	r2, ip
   c2d12:	2900      	cmp	r1, #0
   c2d14:	f040 80f3 	bne.w	c2efe <__kernel_rem_pio2f+0x3a2>
   c2d18:	9b00      	ldr	r3, [sp, #0]
   c2d1a:	3b01      	subs	r3, #1
   c2d1c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2d20:	2b00      	cmp	r3, #0
   c2d22:	f040 80e8 	bne.w	c2ef6 <__kernel_rem_pio2f+0x39a>
   c2d26:	9b04      	ldr	r3, [sp, #16]
   c2d28:	f04f 0c01 	mov.w	ip, #1
   c2d2c:	f853 2904 	ldr.w	r2, [r3], #-4
   c2d30:	f10c 0c01 	add.w	ip, ip, #1
   c2d34:	2a00      	cmp	r2, #0
   c2d36:	d0f9      	beq.n	c2d2c <__kernel_rem_pio2f+0x1d0>
   c2d38:	1c6b      	adds	r3, r5, #1
   c2d3a:	44ac      	add	ip, r5
   c2d3c:	469e      	mov	lr, r3
   c2d3e:	9a03      	ldr	r2, [sp, #12]
   c2d40:	1951      	adds	r1, r2, r5
   c2d42:	9a02      	ldr	r2, [sp, #8]
   c2d44:	eb02 0b03 	add.w	fp, r2, r3
   c2d48:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2d4c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2d4e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2d52:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2d56:	ab1e      	add	r3, sp, #120	; 0x78
   c2d58:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2d5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2d60:	eddb 7a01 	vldr	s15, [fp, #4]
   c2d64:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2e00 <__kernel_rem_pio2f+0x2a4>
   c2d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2d6c:	f1b8 0f00 	cmp.w	r8, #0
   c2d70:	f10b 0b04 	add.w	fp, fp, #4
   c2d74:	edc1 7a00 	vstr	s15, [r1]
   c2d78:	460a      	mov	r2, r1
   c2d7a:	f101 0104 	add.w	r1, r1, #4
   c2d7e:	db09      	blt.n	c2d94 <__kernel_rem_pio2f+0x238>
   c2d80:	4653      	mov	r3, sl
   c2d82:	e001      	b.n	c2d88 <__kernel_rem_pio2f+0x22c>
   c2d84:	ed72 7a01 	vldmdb	r2!, {s15}
   c2d88:	ecf3 6a01 	vldmia	r3!, {s13}
   c2d8c:	42a3      	cmp	r3, r4
   c2d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2d92:	d1f7      	bne.n	c2d84 <__kernel_rem_pio2f+0x228>
   c2d94:	f10e 0e01 	add.w	lr, lr, #1
   c2d98:	45e6      	cmp	lr, ip
   c2d9a:	eca5 7a01 	vstmia	r5!, {s14}
   c2d9e:	dddf      	ble.n	c2d60 <__kernel_rem_pio2f+0x204>
   c2da0:	4665      	mov	r5, ip
   c2da2:	e74d      	b.n	c2c40 <__kernel_rem_pio2f+0xe4>
   c2da4:	f040 809d 	bne.w	c2ee2 <__kernel_rem_pio2f+0x386>
   c2da8:	1e6b      	subs	r3, r5, #1
   c2daa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2dae:	1212      	asrs	r2, r2, #8
   c2db0:	2a00      	cmp	r2, #0
   c2db2:	dd95      	ble.n	c2ce0 <__kernel_rem_pio2f+0x184>
   c2db4:	ee19 3a90 	vmov	r3, s19
   c2db8:	2d00      	cmp	r5, #0
   c2dba:	f103 0301 	add.w	r3, r3, #1
   c2dbe:	ee09 3a90 	vmov	s19, r3
   c2dc2:	f340 8196 	ble.w	c30f2 <__kernel_rem_pio2f+0x596>
   c2dc6:	6839      	ldr	r1, [r7, #0]
   c2dc8:	2900      	cmp	r1, #0
   c2dca:	f040 8080 	bne.w	c2ece <__kernel_rem_pio2f+0x372>
   c2dce:	2d01      	cmp	r5, #1
   c2dd0:	d026      	beq.n	c2e20 <__kernel_rem_pio2f+0x2c4>
   c2dd2:	463b      	mov	r3, r7
   c2dd4:	f04f 0c01 	mov.w	ip, #1
   c2dd8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2ddc:	2900      	cmp	r1, #0
   c2dde:	d07a      	beq.n	c2ed6 <__kernel_rem_pio2f+0x37a>
   c2de0:	f10c 0301 	add.w	r3, ip, #1
   c2de4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c2de8:	429d      	cmp	r5, r3
   c2dea:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c2dee:	dd16      	ble.n	c2e1e <__kernel_rem_pio2f+0x2c2>
   c2df0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c2df4:	44bb      	add	fp, r7
   c2df6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2dfa:	e00a      	b.n	c2e12 <__kernel_rem_pio2f+0x2b6>
   c2dfc:	000c83c4 	.word	0x000c83c4
   c2e00:	00000000 	.word	0x00000000
   c2e04:	43800000 	.word	0x43800000
   c2e08:	3b800000 	.word	0x3b800000
   c2e0c:	3fc90000 	.word	0x3fc90000
   c2e10:	6819      	ldr	r1, [r3, #0]
   c2e12:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c2e16:	f843 1b04 	str.w	r1, [r3], #4
   c2e1a:	455b      	cmp	r3, fp
   c2e1c:	d1f8      	bne.n	c2e10 <__kernel_rem_pio2f+0x2b4>
   c2e1e:	2101      	movs	r1, #1
   c2e20:	2800      	cmp	r0, #0
   c2e22:	dd0c      	ble.n	c2e3e <__kernel_rem_pio2f+0x2e2>
   c2e24:	2801      	cmp	r0, #1
   c2e26:	f000 8145 	beq.w	c30b4 <__kernel_rem_pio2f+0x558>
   c2e2a:	2802      	cmp	r0, #2
   c2e2c:	d107      	bne.n	c2e3e <__kernel_rem_pio2f+0x2e2>
   c2e2e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2e32:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2e3a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2e3e:	2a02      	cmp	r2, #2
   c2e40:	f47f af4e 	bne.w	c2ce0 <__kernel_rem_pio2f+0x184>
   c2e44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2e48:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2e4c:	2900      	cmp	r1, #0
   c2e4e:	f43f af47 	beq.w	c2ce0 <__kernel_rem_pio2f+0x184>
   c2e52:	9209      	str	r2, [sp, #36]	; 0x24
   c2e54:	9001      	str	r0, [sp, #4]
   c2e56:	f000 fcd5 	bl	c3804 <scalbnf>
   c2e5a:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2e60:	9801      	ldr	r0, [sp, #4]
   c2e62:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2e6a:	f43f af3f 	beq.w	c2cec <__kernel_rem_pio2f+0x190>
   c2e6e:	9202      	str	r2, [sp, #8]
   c2e70:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c2e74:	eeb0 0a48 	vmov.f32	s0, s16
   c2e78:	1a98      	subs	r0, r3, r2
   c2e7a:	9501      	str	r5, [sp, #4]
   c2e7c:	9d00      	ldr	r5, [sp, #0]
   c2e7e:	f000 fcc1 	bl	c3804 <scalbnf>
   c2e82:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c2e04 <__kernel_rem_pio2f+0x2a8>
   c2e86:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2e8e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c2e92:	f2c0 8156 	blt.w	c3142 <__kernel_rem_pio2f+0x5e6>
   c2e96:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2e08 <__kernel_rem_pio2f+0x2ac>
   c2e9a:	9905      	ldr	r1, [sp, #20]
   c2e9c:	ee60 7a27 	vmul.f32	s15, s0, s15
   c2ea0:	3108      	adds	r1, #8
   c2ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2ea6:	9105      	str	r1, [sp, #20]
   c2ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2eac:	f103 0b01 	add.w	fp, r3, #1
   c2eb0:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c2eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2eb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2ebc:	ee10 1a10 	vmov	r1, s0
   c2ec0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2ec4:	ee17 3a90 	vmov	r3, s15
   c2ec8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c2ecc:	e02e      	b.n	c2f2c <__kernel_rem_pio2f+0x3d0>
   c2ece:	2301      	movs	r3, #1
   c2ed0:	f04f 0c00 	mov.w	ip, #0
   c2ed4:	e786      	b.n	c2de4 <__kernel_rem_pio2f+0x288>
   c2ed6:	f10c 0c01 	add.w	ip, ip, #1
   c2eda:	45ac      	cmp	ip, r5
   c2edc:	f47f af7c 	bne.w	c2dd8 <__kernel_rem_pio2f+0x27c>
   c2ee0:	e79e      	b.n	c2e20 <__kernel_rem_pio2f+0x2c4>
   c2ee2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2ee6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c2eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2eee:	f280 80ef 	bge.w	c30d0 <__kernel_rem_pio2f+0x574>
   c2ef2:	2200      	movs	r2, #0
   c2ef4:	e6f4      	b.n	c2ce0 <__kernel_rem_pio2f+0x184>
   c2ef6:	1c6b      	adds	r3, r5, #1
   c2ef8:	469e      	mov	lr, r3
   c2efa:	469c      	mov	ip, r3
   c2efc:	e71f      	b.n	c2d3e <__kernel_rem_pio2f+0x1e2>
   c2efe:	9905      	ldr	r1, [sp, #20]
   c2f00:	f1a1 0008 	sub.w	r0, r1, #8
   c2f04:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c2f08:	9005      	str	r0, [sp, #20]
   c2f0a:	462b      	mov	r3, r5
   c2f0c:	9d00      	ldr	r5, [sp, #0]
   c2f0e:	b969      	cbnz	r1, c2f2c <__kernel_rem_pio2f+0x3d0>
   c2f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c2f14:	3b02      	subs	r3, #2
   c2f16:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2f1a:	4601      	mov	r1, r0
   c2f1c:	f853 0904 	ldr.w	r0, [r3], #-4
   c2f20:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2f24:	3908      	subs	r1, #8
   c2f26:	2800      	cmp	r0, #0
   c2f28:	d0f8      	beq.n	c2f1c <__kernel_rem_pio2f+0x3c0>
   c2f2a:	9105      	str	r1, [sp, #20]
   c2f2c:	9805      	ldr	r0, [sp, #20]
   c2f2e:	9200      	str	r2, [sp, #0]
   c2f30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2f34:	f000 fc66 	bl	c3804 <scalbnf>
   c2f38:	f1bb 0f00 	cmp.w	fp, #0
   c2f3c:	9a00      	ldr	r2, [sp, #0]
   c2f3e:	f2c0 8125 	blt.w	c318c <__kernel_rem_pio2f+0x630>
   c2f42:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c2f46:	ab46      	add	r3, sp, #280	; 0x118
   c2f48:	eb03 060e 	add.w	r6, r3, lr
   c2f4c:	f10e 0c04 	add.w	ip, lr, #4
   c2f50:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2e08 <__kernel_rem_pio2f+0x2ac>
   c2f54:	eb07 030c 	add.w	r3, r7, ip
   c2f58:	1d31      	adds	r1, r6, #4
   c2f5a:	ed73 7a01 	vldmdb	r3!, {s15}
   c2f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f62:	42bb      	cmp	r3, r7
   c2f64:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2f68:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2f6c:	ed61 7a01 	vstmdb	r1!, {s15}
   c2f70:	d1f3      	bne.n	c2f5a <__kernel_rem_pio2f+0x3fe>
   c2f72:	2d00      	cmp	r5, #0
   c2f74:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2e0c <__kernel_rem_pio2f+0x2b0>
   c2f78:	f04f 0400 	mov.w	r4, #0
   c2f7c:	db20      	blt.n	c2fc0 <__kernel_rem_pio2f+0x464>
   c2f7e:	4892      	ldr	r0, [pc, #584]	; (c31c8 <__kernel_rem_pio2f+0x66c>)
   c2f80:	eddf 7a92 	vldr	s15, [pc, #584]	; c31cc <__kernel_rem_pio2f+0x670>
   c2f84:	eeb0 7a46 	vmov.f32	s14, s12
   c2f88:	4631      	mov	r1, r6
   c2f8a:	2300      	movs	r3, #0
   c2f8c:	e003      	b.n	c2f96 <__kernel_rem_pio2f+0x43a>
   c2f8e:	429c      	cmp	r4, r3
   c2f90:	db08      	blt.n	c2fa4 <__kernel_rem_pio2f+0x448>
   c2f92:	ecb0 7a01 	vldmia	r0!, {s14}
   c2f96:	ecf1 6a01 	vldmia	r1!, {s13}
   c2f9a:	3301      	adds	r3, #1
   c2f9c:	429d      	cmp	r5, r3
   c2f9e:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2fa2:	daf4      	bge.n	c2f8e <__kernel_rem_pio2f+0x432>
   c2fa4:	ab5a      	add	r3, sp, #360	; 0x168
   c2fa6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c2faa:	45a3      	cmp	fp, r4
   c2fac:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c2fb0:	f1a6 0604 	sub.w	r6, r6, #4
   c2fb4:	f104 0301 	add.w	r3, r4, #1
   c2fb8:	d005      	beq.n	c2fc6 <__kernel_rem_pio2f+0x46a>
   c2fba:	2d00      	cmp	r5, #0
   c2fbc:	461c      	mov	r4, r3
   c2fbe:	dade      	bge.n	c2f7e <__kernel_rem_pio2f+0x422>
   c2fc0:	eddf 7a82 	vldr	s15, [pc, #520]	; c31cc <__kernel_rem_pio2f+0x670>
   c2fc4:	e7ee      	b.n	c2fa4 <__kernel_rem_pio2f+0x448>
   c2fc6:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2fc8:	2902      	cmp	r1, #2
   c2fca:	dc1c      	bgt.n	c3006 <__kernel_rem_pio2f+0x4aa>
   c2fcc:	2900      	cmp	r1, #0
   c2fce:	f300 8092 	bgt.w	c30f6 <__kernel_rem_pio2f+0x59a>
   c2fd2:	d10f      	bne.n	c2ff4 <__kernel_rem_pio2f+0x498>
   c2fd4:	ab32      	add	r3, sp, #200	; 0xc8
   c2fd6:	eddf 7a7d 	vldr	s15, [pc, #500]	; c31cc <__kernel_rem_pio2f+0x670>
   c2fda:	449c      	add	ip, r3
   c2fdc:	ed3c 7a01 	vldmdb	ip!, {s14}
   c2fe0:	4563      	cmp	r3, ip
   c2fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2fe6:	d1f9      	bne.n	c2fdc <__kernel_rem_pio2f+0x480>
   c2fe8:	b10a      	cbz	r2, c2fee <__kernel_rem_pio2f+0x492>
   c2fea:	eef1 7a67 	vneg.f32	s15, s15
   c2fee:	9b06      	ldr	r3, [sp, #24]
   c2ff0:	edc3 7a00 	vstr	s15, [r3]
   c2ff4:	ee19 3a90 	vmov	r3, s19
   c2ff8:	f003 0007 	and.w	r0, r3, #7
   c2ffc:	b05b      	add	sp, #364	; 0x16c
   c2ffe:	ecbd 8b04 	vpop	{d8-d9}
   c3002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3006:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3008:	2b03      	cmp	r3, #3
   c300a:	d1f3      	bne.n	c2ff4 <__kernel_rem_pio2f+0x498>
   c300c:	f1bb 0f00 	cmp.w	fp, #0
   c3010:	f000 80d1 	beq.w	c31b6 <__kernel_rem_pio2f+0x65a>
   c3014:	ab5a      	add	r3, sp, #360	; 0x168
   c3016:	4473      	add	r3, lr
   c3018:	a932      	add	r1, sp, #200	; 0xc8
   c301a:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c301e:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c3022:	ed73 7a01 	vldmdb	r3!, {s15}
   c3026:	eef0 6a47 	vmov.f32	s13, s14
   c302a:	ee37 7a27 	vadd.f32	s14, s14, s15
   c302e:	4299      	cmp	r1, r3
   c3030:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3034:	ed83 7a00 	vstr	s14, [r3]
   c3038:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c303c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3040:	d1ef      	bne.n	c3022 <__kernel_rem_pio2f+0x4c6>
   c3042:	f1bb 0f01 	cmp.w	fp, #1
   c3046:	f340 80b6 	ble.w	c31b6 <__kernel_rem_pio2f+0x65a>
   c304a:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c304e:	ab5a      	add	r3, sp, #360	; 0x168
   c3050:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c3054:	449e      	add	lr, r3
   c3056:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c305a:	f10b 0304 	add.w	r3, fp, #4
   c305e:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c3062:	440b      	add	r3, r1
   c3064:	a833      	add	r0, sp, #204	; 0xcc
   c3066:	ed73 7a01 	vldmdb	r3!, {s15}
   c306a:	eef0 6a47 	vmov.f32	s13, s14
   c306e:	ee37 7a27 	vadd.f32	s14, s14, s15
   c3072:	4298      	cmp	r0, r3
   c3074:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3078:	ed83 7a00 	vstr	s14, [r3]
   c307c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3080:	edc3 7a01 	vstr	s15, [r3, #4]
   c3084:	d1ef      	bne.n	c3066 <__kernel_rem_pio2f+0x50a>
   c3086:	f10b 0b08 	add.w	fp, fp, #8
   c308a:	eddf 7a50 	vldr	s15, [pc, #320]	; c31cc <__kernel_rem_pio2f+0x670>
   c308e:	eb01 030b 	add.w	r3, r1, fp
   c3092:	3108      	adds	r1, #8
   c3094:	ed33 7a01 	vldmdb	r3!, {s14}
   c3098:	4299      	cmp	r1, r3
   c309a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c309e:	d1f9      	bne.n	c3094 <__kernel_rem_pio2f+0x538>
   c30a0:	2a00      	cmp	r2, #0
   c30a2:	d156      	bne.n	c3152 <__kernel_rem_pio2f+0x5f6>
   c30a4:	9906      	ldr	r1, [sp, #24]
   c30a6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c30a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c30aa:	600a      	str	r2, [r1, #0]
   c30ac:	604b      	str	r3, [r1, #4]
   c30ae:	edc1 7a02 	vstr	s15, [r1, #8]
   c30b2:	e79f      	b.n	c2ff4 <__kernel_rem_pio2f+0x498>
   c30b4:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c30b8:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c30bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c30c0:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c30c4:	e6bb      	b.n	c2e3e <__kernel_rem_pio2f+0x2e2>
   c30c6:	2308      	movs	r3, #8
   c30c8:	9307      	str	r3, [sp, #28]
   c30ca:	2300      	movs	r3, #0
   c30cc:	9302      	str	r3, [sp, #8]
   c30ce:	e561      	b.n	c2b94 <__kernel_rem_pio2f+0x38>
   c30d0:	ee19 3a90 	vmov	r3, s19
   c30d4:	2d00      	cmp	r5, #0
   c30d6:	f103 0301 	add.w	r3, r3, #1
   c30da:	ee09 3a90 	vmov	s19, r3
   c30de:	bfc8      	it	gt
   c30e0:	2202      	movgt	r2, #2
   c30e2:	f73f ae70 	bgt.w	c2dc6 <__kernel_rem_pio2f+0x26a>
   c30e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c30ea:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c30ee:	2202      	movs	r2, #2
   c30f0:	e5f6      	b.n	c2ce0 <__kernel_rem_pio2f+0x184>
   c30f2:	2100      	movs	r1, #0
   c30f4:	e694      	b.n	c2e20 <__kernel_rem_pio2f+0x2c4>
   c30f6:	a932      	add	r1, sp, #200	; 0xc8
   c30f8:	eddf 7a34 	vldr	s15, [pc, #208]	; c31cc <__kernel_rem_pio2f+0x670>
   c30fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c3100:	ed33 7a01 	vldmdb	r3!, {s14}
   c3104:	4299      	cmp	r1, r3
   c3106:	ee77 7a87 	vadd.f32	s15, s15, s14
   c310a:	d1f9      	bne.n	c3100 <__kernel_rem_pio2f+0x5a4>
   c310c:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c3110:	bb8a      	cbnz	r2, c3176 <__kernel_rem_pio2f+0x61a>
   c3112:	9b06      	ldr	r3, [sp, #24]
   c3114:	f1bb 0f00 	cmp.w	fp, #0
   c3118:	edc3 7a00 	vstr	s15, [r3]
   c311c:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3120:	dd0b      	ble.n	c313a <__kernel_rem_pio2f+0x5de>
   c3122:	a933      	add	r1, sp, #204	; 0xcc
   c3124:	2301      	movs	r3, #1
   c3126:	ecb1 7a01 	vldmia	r1!, {s14}
   c312a:	3301      	adds	r3, #1
   c312c:	459b      	cmp	fp, r3
   c312e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3132:	daf8      	bge.n	c3126 <__kernel_rem_pio2f+0x5ca>
   c3134:	b10a      	cbz	r2, c313a <__kernel_rem_pio2f+0x5de>
   c3136:	eef1 7a67 	vneg.f32	s15, s15
   c313a:	9b06      	ldr	r3, [sp, #24]
   c313c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3140:	e758      	b.n	c2ff4 <__kernel_rem_pio2f+0x498>
   c3142:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c3146:	469b      	mov	fp, r3
   c3148:	ee10 1a10 	vmov	r1, s0
   c314c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3150:	e6ec      	b.n	c2f2c <__kernel_rem_pio2f+0x3d0>
   c3152:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c3156:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c315a:	9b06      	ldr	r3, [sp, #24]
   c315c:	eef1 6a66 	vneg.f32	s13, s13
   c3160:	eeb1 7a47 	vneg.f32	s14, s14
   c3164:	eef1 7a67 	vneg.f32	s15, s15
   c3168:	edc3 6a00 	vstr	s13, [r3]
   c316c:	ed83 7a01 	vstr	s14, [r3, #4]
   c3170:	edc3 7a02 	vstr	s15, [r3, #8]
   c3174:	e73e      	b.n	c2ff4 <__kernel_rem_pio2f+0x498>
   c3176:	9b06      	ldr	r3, [sp, #24]
   c3178:	eef1 6a67 	vneg.f32	s13, s15
   c317c:	f1bb 0f00 	cmp.w	fp, #0
   c3180:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3184:	edc3 6a00 	vstr	s13, [r3]
   c3188:	dccb      	bgt.n	c3122 <__kernel_rem_pio2f+0x5c6>
   c318a:	e7d4      	b.n	c3136 <__kernel_rem_pio2f+0x5da>
   c318c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c318e:	2b02      	cmp	r3, #2
   c3190:	dc0d      	bgt.n	c31ae <__kernel_rem_pio2f+0x652>
   c3192:	2b00      	cmp	r3, #0
   c3194:	dc14      	bgt.n	c31c0 <__kernel_rem_pio2f+0x664>
   c3196:	f47f af2d 	bne.w	c2ff4 <__kernel_rem_pio2f+0x498>
   c319a:	eddf 7a0c 	vldr	s15, [pc, #48]	; c31cc <__kernel_rem_pio2f+0x670>
   c319e:	2a00      	cmp	r2, #0
   c31a0:	f43f af25 	beq.w	c2fee <__kernel_rem_pio2f+0x492>
   c31a4:	e721      	b.n	c2fea <__kernel_rem_pio2f+0x48e>
   c31a6:	9b03      	ldr	r3, [sp, #12]
   c31a8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c31ac:	e537      	b.n	c2c1e <__kernel_rem_pio2f+0xc2>
   c31ae:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c31b0:	2b03      	cmp	r3, #3
   c31b2:	f47f af1f 	bne.w	c2ff4 <__kernel_rem_pio2f+0x498>
   c31b6:	eddf 7a05 	vldr	s15, [pc, #20]	; c31cc <__kernel_rem_pio2f+0x670>
   c31ba:	2a00      	cmp	r2, #0
   c31bc:	d1c9      	bne.n	c3152 <__kernel_rem_pio2f+0x5f6>
   c31be:	e771      	b.n	c30a4 <__kernel_rem_pio2f+0x548>
   c31c0:	eddf 7a02 	vldr	s15, [pc, #8]	; c31cc <__kernel_rem_pio2f+0x670>
   c31c4:	e7a2      	b.n	c310c <__kernel_rem_pio2f+0x5b0>
   c31c6:	bf00      	nop
   c31c8:	000c839c 	.word	0x000c839c
   c31cc:	00000000 	.word	0x00000000

000c31d0 <__kernel_sinf>:
   c31d0:	ee10 3a10 	vmov	r3, s0
   c31d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c31d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c31dc:	da04      	bge.n	c31e8 <__kernel_sinf+0x18>
   c31de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c31e2:	ee17 3a90 	vmov	r3, s15
   c31e6:	b35b      	cbz	r3, c3240 <__kernel_sinf+0x70>
   c31e8:	ee60 7a00 	vmul.f32	s15, s0, s0
   c31ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; c3244 <__kernel_sinf+0x74>
   c31f0:	eddf 5a15 	vldr	s11, [pc, #84]	; c3248 <__kernel_sinf+0x78>
   c31f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; c324c <__kernel_sinf+0x7c>
   c31f8:	eddf 6a15 	vldr	s13, [pc, #84]	; c3250 <__kernel_sinf+0x80>
   c31fc:	eee7 5a87 	vfma.f32	s11, s15, s14
   c3200:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3254 <__kernel_sinf+0x84>
   c3204:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c3208:	ee20 5a27 	vmul.f32	s10, s0, s15
   c320c:	eee6 6a27 	vfma.f32	s13, s12, s15
   c3210:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c3214:	b930      	cbnz	r0, c3224 <__kernel_sinf+0x54>
   c3216:	eddf 6a10 	vldr	s13, [pc, #64]	; c3258 <__kernel_sinf+0x88>
   c321a:	eee7 6a87 	vfma.f32	s13, s15, s14
   c321e:	eea6 0a85 	vfma.f32	s0, s13, s10
   c3222:	4770      	bx	lr
   c3224:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c3228:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c322c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c3230:	eddf 6a0a 	vldr	s13, [pc, #40]	; c325c <__kernel_sinf+0x8c>
   c3234:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c3238:	eee5 0a26 	vfma.f32	s1, s10, s13
   c323c:	ee30 0a60 	vsub.f32	s0, s0, s1
   c3240:	4770      	bx	lr
   c3242:	bf00      	nop
   c3244:	2f2ec9d3 	.word	0x2f2ec9d3
   c3248:	b2d72f34 	.word	0xb2d72f34
   c324c:	3638ef1b 	.word	0x3638ef1b
   c3250:	b9500d01 	.word	0xb9500d01
   c3254:	3c088889 	.word	0x3c088889
   c3258:	be2aaaab 	.word	0xbe2aaaab
   c325c:	3e2aaaab 	.word	0x3e2aaaab

000c3260 <atan>:
   c3260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3264:	ec55 4b10 	vmov	r4, r5, d0
   c3268:	4bc3      	ldr	r3, [pc, #780]	; (c3578 <atan+0x318>)
   c326a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c326e:	429e      	cmp	r6, r3
   c3270:	46aa      	mov	sl, r5
   c3272:	dd17      	ble.n	c32a4 <atan+0x44>
   c3274:	4bc1      	ldr	r3, [pc, #772]	; (c357c <atan+0x31c>)
   c3276:	429e      	cmp	r6, r3
   c3278:	dc0a      	bgt.n	c3290 <atan+0x30>
   c327a:	d007      	beq.n	c328c <atan+0x2c>
   c327c:	f1ba 0f00 	cmp.w	sl, #0
   c3280:	f340 80cb 	ble.w	c341a <atan+0x1ba>
   c3284:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c3508 <atan+0x2a8>
   c3288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c328c:	2c00      	cmp	r4, #0
   c328e:	d0f5      	beq.n	c327c <atan+0x1c>
   c3290:	4622      	mov	r2, r4
   c3292:	462b      	mov	r3, r5
   c3294:	4620      	mov	r0, r4
   c3296:	4629      	mov	r1, r5
   c3298:	f000 fb2c 	bl	c38f4 <__adddf3>
   c329c:	ec41 0b10 	vmov	d0, r0, r1
   c32a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c32a4:	4bb6      	ldr	r3, [pc, #728]	; (c3580 <atan+0x320>)
   c32a6:	429e      	cmp	r6, r3
   c32a8:	f300 80bb 	bgt.w	c3422 <atan+0x1c2>
   c32ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c32b0:	429e      	cmp	r6, r3
   c32b2:	f340 80a0 	ble.w	c33f6 <atan+0x196>
   c32b6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c32ba:	4622      	mov	r2, r4
   c32bc:	462b      	mov	r3, r5
   c32be:	4620      	mov	r0, r4
   c32c0:	4629      	mov	r1, r5
   c32c2:	f000 fccd 	bl	c3c60 <__aeabi_dmul>
   c32c6:	4602      	mov	r2, r0
   c32c8:	460b      	mov	r3, r1
   c32ca:	4680      	mov	r8, r0
   c32cc:	4689      	mov	r9, r1
   c32ce:	f000 fcc7 	bl	c3c60 <__aeabi_dmul>
   c32d2:	a38f      	add	r3, pc, #572	; (adr r3, c3510 <atan+0x2b0>)
   c32d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32d8:	4606      	mov	r6, r0
   c32da:	460f      	mov	r7, r1
   c32dc:	f000 fcc0 	bl	c3c60 <__aeabi_dmul>
   c32e0:	a38d      	add	r3, pc, #564	; (adr r3, c3518 <atan+0x2b8>)
   c32e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32e6:	f000 fb05 	bl	c38f4 <__adddf3>
   c32ea:	4632      	mov	r2, r6
   c32ec:	463b      	mov	r3, r7
   c32ee:	f000 fcb7 	bl	c3c60 <__aeabi_dmul>
   c32f2:	a38b      	add	r3, pc, #556	; (adr r3, c3520 <atan+0x2c0>)
   c32f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c32f8:	f000 fafc 	bl	c38f4 <__adddf3>
   c32fc:	4632      	mov	r2, r6
   c32fe:	463b      	mov	r3, r7
   c3300:	f000 fcae 	bl	c3c60 <__aeabi_dmul>
   c3304:	a388      	add	r3, pc, #544	; (adr r3, c3528 <atan+0x2c8>)
   c3306:	e9d3 2300 	ldrd	r2, r3, [r3]
   c330a:	f000 faf3 	bl	c38f4 <__adddf3>
   c330e:	4632      	mov	r2, r6
   c3310:	463b      	mov	r3, r7
   c3312:	f000 fca5 	bl	c3c60 <__aeabi_dmul>
   c3316:	a386      	add	r3, pc, #536	; (adr r3, c3530 <atan+0x2d0>)
   c3318:	e9d3 2300 	ldrd	r2, r3, [r3]
   c331c:	f000 faea 	bl	c38f4 <__adddf3>
   c3320:	4632      	mov	r2, r6
   c3322:	463b      	mov	r3, r7
   c3324:	f000 fc9c 	bl	c3c60 <__aeabi_dmul>
   c3328:	a383      	add	r3, pc, #524	; (adr r3, c3538 <atan+0x2d8>)
   c332a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c332e:	f000 fae1 	bl	c38f4 <__adddf3>
   c3332:	4642      	mov	r2, r8
   c3334:	464b      	mov	r3, r9
   c3336:	f000 fc93 	bl	c3c60 <__aeabi_dmul>
   c333a:	a381      	add	r3, pc, #516	; (adr r3, c3540 <atan+0x2e0>)
   c333c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3340:	4680      	mov	r8, r0
   c3342:	4689      	mov	r9, r1
   c3344:	4630      	mov	r0, r6
   c3346:	4639      	mov	r1, r7
   c3348:	f000 fc8a 	bl	c3c60 <__aeabi_dmul>
   c334c:	a37e      	add	r3, pc, #504	; (adr r3, c3548 <atan+0x2e8>)
   c334e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3352:	f000 facd 	bl	c38f0 <__aeabi_dsub>
   c3356:	4632      	mov	r2, r6
   c3358:	463b      	mov	r3, r7
   c335a:	f000 fc81 	bl	c3c60 <__aeabi_dmul>
   c335e:	a37c      	add	r3, pc, #496	; (adr r3, c3550 <atan+0x2f0>)
   c3360:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3364:	f000 fac4 	bl	c38f0 <__aeabi_dsub>
   c3368:	4632      	mov	r2, r6
   c336a:	463b      	mov	r3, r7
   c336c:	f000 fc78 	bl	c3c60 <__aeabi_dmul>
   c3370:	a379      	add	r3, pc, #484	; (adr r3, c3558 <atan+0x2f8>)
   c3372:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3376:	f000 fabb 	bl	c38f0 <__aeabi_dsub>
   c337a:	4632      	mov	r2, r6
   c337c:	463b      	mov	r3, r7
   c337e:	f000 fc6f 	bl	c3c60 <__aeabi_dmul>
   c3382:	a377      	add	r3, pc, #476	; (adr r3, c3560 <atan+0x300>)
   c3384:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3388:	f000 fab2 	bl	c38f0 <__aeabi_dsub>
   c338c:	4632      	mov	r2, r6
   c338e:	463b      	mov	r3, r7
   c3390:	f000 fc66 	bl	c3c60 <__aeabi_dmul>
   c3394:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c3398:	4602      	mov	r2, r0
   c339a:	460b      	mov	r3, r1
   c339c:	4640      	mov	r0, r8
   c339e:	4649      	mov	r1, r9
   c33a0:	d062      	beq.n	c3468 <atan+0x208>
   c33a2:	f000 faa7 	bl	c38f4 <__adddf3>
   c33a6:	4e77      	ldr	r6, [pc, #476]	; (c3584 <atan+0x324>)
   c33a8:	4622      	mov	r2, r4
   c33aa:	462b      	mov	r3, r5
   c33ac:	f000 fc58 	bl	c3c60 <__aeabi_dmul>
   c33b0:	4b75      	ldr	r3, [pc, #468]	; (c3588 <atan+0x328>)
   c33b2:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c33b6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c33ba:	449b      	add	fp, r3
   c33bc:	e9db 2300 	ldrd	r2, r3, [fp]
   c33c0:	f000 fa96 	bl	c38f0 <__aeabi_dsub>
   c33c4:	4622      	mov	r2, r4
   c33c6:	462b      	mov	r3, r5
   c33c8:	f000 fa92 	bl	c38f0 <__aeabi_dsub>
   c33cc:	4602      	mov	r2, r0
   c33ce:	460b      	mov	r3, r1
   c33d0:	e9d6 0100 	ldrd	r0, r1, [r6]
   c33d4:	f000 fa8c 	bl	c38f0 <__aeabi_dsub>
   c33d8:	f1ba 0f00 	cmp.w	sl, #0
   c33dc:	ec41 0b10 	vmov	d0, r0, r1
   c33e0:	f6bf af5e 	bge.w	c32a0 <atan+0x40>
   c33e4:	ee10 1a90 	vmov	r1, s1
   c33e8:	4602      	mov	r2, r0
   c33ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c33ee:	ec43 2b10 	vmov	d0, r2, r3
   c33f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c33f6:	a35c      	add	r3, pc, #368	; (adr r3, c3568 <atan+0x308>)
   c33f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c33fc:	ee10 0a10 	vmov	r0, s0
   c3400:	4629      	mov	r1, r5
   c3402:	f000 fa77 	bl	c38f4 <__adddf3>
   c3406:	4b61      	ldr	r3, [pc, #388]	; (c358c <atan+0x32c>)
   c3408:	2200      	movs	r2, #0
   c340a:	f000 feb9 	bl	c4180 <__aeabi_dcmpgt>
   c340e:	2800      	cmp	r0, #0
   c3410:	f43f af51 	beq.w	c32b6 <atan+0x56>
   c3414:	ec45 4b10 	vmov	d0, r4, r5
   c3418:	e742      	b.n	c32a0 <atan+0x40>
   c341a:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3570 <atan+0x310>
   c341e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3422:	f000 f8bd 	bl	c35a0 <fabs>
   c3426:	4b5a      	ldr	r3, [pc, #360]	; (c3590 <atan+0x330>)
   c3428:	429e      	cmp	r6, r3
   c342a:	ec55 4b10 	vmov	r4, r5, d0
   c342e:	dc2b      	bgt.n	c3488 <atan+0x228>
   c3430:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c3434:	429e      	cmp	r6, r3
   c3436:	dc56      	bgt.n	c34e6 <atan+0x286>
   c3438:	ee10 2a10 	vmov	r2, s0
   c343c:	462b      	mov	r3, r5
   c343e:	ee10 0a10 	vmov	r0, s0
   c3442:	4629      	mov	r1, r5
   c3444:	f000 fa56 	bl	c38f4 <__adddf3>
   c3448:	4b50      	ldr	r3, [pc, #320]	; (c358c <atan+0x32c>)
   c344a:	2200      	movs	r2, #0
   c344c:	f000 fa50 	bl	c38f0 <__aeabi_dsub>
   c3450:	4602      	mov	r2, r0
   c3452:	460b      	mov	r3, r1
   c3454:	4620      	mov	r0, r4
   c3456:	4629      	mov	r1, r5
   c3458:	4614      	mov	r4, r2
   c345a:	461d      	mov	r5, r3
   c345c:	f04f 0b00 	mov.w	fp, #0
   c3460:	2200      	movs	r2, #0
   c3462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3466:	e027      	b.n	c34b8 <atan+0x258>
   c3468:	f000 fa44 	bl	c38f4 <__adddf3>
   c346c:	4622      	mov	r2, r4
   c346e:	462b      	mov	r3, r5
   c3470:	f000 fbf6 	bl	c3c60 <__aeabi_dmul>
   c3474:	4602      	mov	r2, r0
   c3476:	460b      	mov	r3, r1
   c3478:	4620      	mov	r0, r4
   c347a:	4629      	mov	r1, r5
   c347c:	f000 fa38 	bl	c38f0 <__aeabi_dsub>
   c3480:	ec41 0b10 	vmov	d0, r0, r1
   c3484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3488:	4b42      	ldr	r3, [pc, #264]	; (c3594 <atan+0x334>)
   c348a:	429e      	cmp	r6, r3
   c348c:	da1f      	bge.n	c34ce <atan+0x26e>
   c348e:	4b42      	ldr	r3, [pc, #264]	; (c3598 <atan+0x338>)
   c3490:	2200      	movs	r2, #0
   c3492:	4629      	mov	r1, r5
   c3494:	ee10 0a10 	vmov	r0, s0
   c3498:	f000 fa2a 	bl	c38f0 <__aeabi_dsub>
   c349c:	4602      	mov	r2, r0
   c349e:	460b      	mov	r3, r1
   c34a0:	4620      	mov	r0, r4
   c34a2:	4629      	mov	r1, r5
   c34a4:	4614      	mov	r4, r2
   c34a6:	461d      	mov	r5, r3
   c34a8:	2200      	movs	r2, #0
   c34aa:	4b3b      	ldr	r3, [pc, #236]	; (c3598 <atan+0x338>)
   c34ac:	f04f 0b02 	mov.w	fp, #2
   c34b0:	f000 fbd6 	bl	c3c60 <__aeabi_dmul>
   c34b4:	4b35      	ldr	r3, [pc, #212]	; (c358c <atan+0x32c>)
   c34b6:	2200      	movs	r2, #0
   c34b8:	f000 fa1c 	bl	c38f4 <__adddf3>
   c34bc:	4602      	mov	r2, r0
   c34be:	460b      	mov	r3, r1
   c34c0:	4620      	mov	r0, r4
   c34c2:	4629      	mov	r1, r5
   c34c4:	f000 fcf6 	bl	c3eb4 <__aeabi_ddiv>
   c34c8:	4604      	mov	r4, r0
   c34ca:	460d      	mov	r5, r1
   c34cc:	e6f5      	b.n	c32ba <atan+0x5a>
   c34ce:	462b      	mov	r3, r5
   c34d0:	4932      	ldr	r1, [pc, #200]	; (c359c <atan+0x33c>)
   c34d2:	ee10 2a10 	vmov	r2, s0
   c34d6:	2000      	movs	r0, #0
   c34d8:	f000 fcec 	bl	c3eb4 <__aeabi_ddiv>
   c34dc:	f04f 0b03 	mov.w	fp, #3
   c34e0:	4604      	mov	r4, r0
   c34e2:	460d      	mov	r5, r1
   c34e4:	e6e9      	b.n	c32ba <atan+0x5a>
   c34e6:	4b29      	ldr	r3, [pc, #164]	; (c358c <atan+0x32c>)
   c34e8:	2200      	movs	r2, #0
   c34ea:	4629      	mov	r1, r5
   c34ec:	ee10 0a10 	vmov	r0, s0
   c34f0:	f000 f9fe 	bl	c38f0 <__aeabi_dsub>
   c34f4:	4602      	mov	r2, r0
   c34f6:	460b      	mov	r3, r1
   c34f8:	4620      	mov	r0, r4
   c34fa:	4629      	mov	r1, r5
   c34fc:	f04f 0b01 	mov.w	fp, #1
   c3500:	4614      	mov	r4, r2
   c3502:	461d      	mov	r5, r3
   c3504:	e7d6      	b.n	c34b4 <atan+0x254>
   c3506:	bf00      	nop
   c3508:	54442d18 	.word	0x54442d18
   c350c:	3ff921fb 	.word	0x3ff921fb
   c3510:	e322da11 	.word	0xe322da11
   c3514:	3f90ad3a 	.word	0x3f90ad3a
   c3518:	24760deb 	.word	0x24760deb
   c351c:	3fa97b4b 	.word	0x3fa97b4b
   c3520:	a0d03d51 	.word	0xa0d03d51
   c3524:	3fb10d66 	.word	0x3fb10d66
   c3528:	c54c206e 	.word	0xc54c206e
   c352c:	3fb745cd 	.word	0x3fb745cd
   c3530:	920083ff 	.word	0x920083ff
   c3534:	3fc24924 	.word	0x3fc24924
   c3538:	5555550d 	.word	0x5555550d
   c353c:	3fd55555 	.word	0x3fd55555
   c3540:	2c6a6c2f 	.word	0x2c6a6c2f
   c3544:	bfa2b444 	.word	0xbfa2b444
   c3548:	52defd9a 	.word	0x52defd9a
   c354c:	3fadde2d 	.word	0x3fadde2d
   c3550:	af749a6d 	.word	0xaf749a6d
   c3554:	3fb3b0f2 	.word	0x3fb3b0f2
   c3558:	fe231671 	.word	0xfe231671
   c355c:	3fbc71c6 	.word	0x3fbc71c6
   c3560:	9998ebc4 	.word	0x9998ebc4
   c3564:	3fc99999 	.word	0x3fc99999
   c3568:	8800759c 	.word	0x8800759c
   c356c:	7e37e43c 	.word	0x7e37e43c
   c3570:	54442d18 	.word	0x54442d18
   c3574:	bff921fb 	.word	0xbff921fb
   c3578:	440fffff 	.word	0x440fffff
   c357c:	7ff00000 	.word	0x7ff00000
   c3580:	3fdbffff 	.word	0x3fdbffff
   c3584:	000c83d0 	.word	0x000c83d0
   c3588:	000c83f0 	.word	0x000c83f0
   c358c:	3ff00000 	.word	0x3ff00000
   c3590:	3ff2ffff 	.word	0x3ff2ffff
   c3594:	40038000 	.word	0x40038000
   c3598:	3ff80000 	.word	0x3ff80000
   c359c:	bff00000 	.word	0xbff00000

000c35a0 <fabs>:
   c35a0:	ec51 0b10 	vmov	r0, r1, d0
   c35a4:	ee10 2a10 	vmov	r2, s0
   c35a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c35ac:	ec43 2b10 	vmov	d0, r2, r3
   c35b0:	4770      	bx	lr
   c35b2:	bf00      	nop

000c35b4 <atanf>:
   c35b4:	b538      	push	{r3, r4, r5, lr}
   c35b6:	ee10 5a10 	vmov	r5, s0
   c35ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c35be:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c35c2:	eef0 7a40 	vmov.f32	s15, s0
   c35c6:	db0b      	blt.n	c35e0 <atanf+0x2c>
   c35c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c35cc:	dc5b      	bgt.n	c3686 <atanf+0xd2>
   c35ce:	eddf 7a53 	vldr	s15, [pc, #332]	; c371c <atanf+0x168>
   c35d2:	ed9f 0a53 	vldr	s0, [pc, #332]	; c3720 <atanf+0x16c>
   c35d6:	2d00      	cmp	r5, #0
   c35d8:	bfc8      	it	gt
   c35da:	eeb0 0a67 	vmovgt.f32	s0, s15
   c35de:	bd38      	pop	{r3, r4, r5, pc}
   c35e0:	4b50      	ldr	r3, [pc, #320]	; (c3724 <atanf+0x170>)
   c35e2:	429c      	cmp	r4, r3
   c35e4:	dc5e      	bgt.n	c36a4 <atanf+0xf0>
   c35e6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c35ea:	db4f      	blt.n	c368c <atanf+0xd8>
   c35ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c35f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c35f4:	eddf 4a4c 	vldr	s9, [pc, #304]	; c3728 <atanf+0x174>
   c35f8:	eddf 5a4c 	vldr	s11, [pc, #304]	; c372c <atanf+0x178>
   c35fc:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c3730 <atanf+0x17c>
   c3600:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c3734 <atanf+0x180>
   c3604:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c3608:	eeb0 6a66 	vmov.f32	s12, s13
   c360c:	eee7 5a24 	vfma.f32	s11, s14, s9
   c3610:	1c5a      	adds	r2, r3, #1
   c3612:	eddf 4a49 	vldr	s9, [pc, #292]	; c3738 <atanf+0x184>
   c3616:	eddf 6a49 	vldr	s13, [pc, #292]	; c373c <atanf+0x188>
   c361a:	eea5 5a87 	vfma.f32	s10, s11, s14
   c361e:	eee7 6a24 	vfma.f32	s13, s14, s9
   c3622:	eddf 5a47 	vldr	s11, [pc, #284]	; c3740 <atanf+0x18c>
   c3626:	eddf 4a47 	vldr	s9, [pc, #284]	; c3744 <atanf+0x190>
   c362a:	eee6 5a87 	vfma.f32	s11, s13, s14
   c362e:	eea5 4a07 	vfma.f32	s8, s10, s14
   c3632:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3748 <atanf+0x194>
   c3636:	eddf 6a45 	vldr	s13, [pc, #276]	; c374c <atanf+0x198>
   c363a:	eea5 5a87 	vfma.f32	s10, s11, s14
   c363e:	eee4 4a07 	vfma.f32	s9, s8, s14
   c3642:	eddf 5a43 	vldr	s11, [pc, #268]	; c3750 <atanf+0x19c>
   c3646:	eee4 6a87 	vfma.f32	s13, s9, s14
   c364a:	eee5 5a07 	vfma.f32	s11, s10, s14
   c364e:	ee66 6a86 	vmul.f32	s13, s13, s12
   c3652:	ee25 7a87 	vmul.f32	s14, s11, s14
   c3656:	d03a      	beq.n	c36ce <atanf+0x11a>
   c3658:	4a3e      	ldr	r2, [pc, #248]	; (c3754 <atanf+0x1a0>)
   c365a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c365e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3662:	ed92 0a00 	vldr	s0, [r2]
   c3666:	4a3c      	ldr	r2, [pc, #240]	; (c3758 <atanf+0x1a4>)
   c3668:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c366c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3670:	2d00      	cmp	r5, #0
   c3672:	ed93 7a00 	vldr	s14, [r3]
   c3676:	ee70 7a67 	vsub.f32	s15, s0, s15
   c367a:	ee37 0a67 	vsub.f32	s0, s14, s15
   c367e:	daae      	bge.n	c35de <atanf+0x2a>
   c3680:	eeb1 0a40 	vneg.f32	s0, s0
   c3684:	bd38      	pop	{r3, r4, r5, pc}
   c3686:	ee30 0a00 	vadd.f32	s0, s0, s0
   c368a:	bd38      	pop	{r3, r4, r5, pc}
   c368c:	ed9f 7a33 	vldr	s14, [pc, #204]	; c375c <atanf+0x1a8>
   c3690:	ee30 7a07 	vadd.f32	s14, s0, s14
   c3694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3698:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c36a0:	dda4      	ble.n	c35ec <atanf+0x38>
   c36a2:	bd38      	pop	{r3, r4, r5, pc}
   c36a4:	f000 f860 	bl	c3768 <fabsf>
   c36a8:	4b2d      	ldr	r3, [pc, #180]	; (c3760 <atanf+0x1ac>)
   c36aa:	429c      	cmp	r4, r3
   c36ac:	dc16      	bgt.n	c36dc <atanf+0x128>
   c36ae:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c36b2:	429c      	cmp	r4, r3
   c36b4:	dc27      	bgt.n	c3706 <atanf+0x152>
   c36b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c36ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c36be:	eea0 7a27 	vfma.f32	s14, s0, s15
   c36c2:	2300      	movs	r3, #0
   c36c4:	ee30 0a27 	vadd.f32	s0, s0, s15
   c36c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c36cc:	e790      	b.n	c35f0 <atanf+0x3c>
   c36ce:	ee76 6a87 	vadd.f32	s13, s13, s14
   c36d2:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c36d6:	eeb0 0a67 	vmov.f32	s0, s15
   c36da:	bd38      	pop	{r3, r4, r5, pc}
   c36dc:	4b21      	ldr	r3, [pc, #132]	; (c3764 <atanf+0x1b0>)
   c36de:	429c      	cmp	r4, r3
   c36e0:	dc0b      	bgt.n	c36fa <atanf+0x146>
   c36e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c36e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c36ea:	eea0 7a27 	vfma.f32	s14, s0, s15
   c36ee:	2302      	movs	r3, #2
   c36f0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c36f4:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c36f8:	e77a      	b.n	c35f0 <atanf+0x3c>
   c36fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c36fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3702:	2303      	movs	r3, #3
   c3704:	e774      	b.n	c35f0 <atanf+0x3c>
   c3706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c370a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c370e:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3712:	2301      	movs	r3, #1
   c3714:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3718:	e76a      	b.n	c35f0 <atanf+0x3c>
   c371a:	bf00      	nop
   c371c:	3fc90fdb 	.word	0x3fc90fdb
   c3720:	bfc90fdb 	.word	0xbfc90fdb
   c3724:	3edfffff 	.word	0x3edfffff
   c3728:	3c8569d7 	.word	0x3c8569d7
   c372c:	3d4bda59 	.word	0x3d4bda59
   c3730:	3d886b35 	.word	0x3d886b35
   c3734:	3dba2e6e 	.word	0x3dba2e6e
   c3738:	bd15a221 	.word	0xbd15a221
   c373c:	bd6ef16b 	.word	0xbd6ef16b
   c3740:	bd9d8795 	.word	0xbd9d8795
   c3744:	3e124925 	.word	0x3e124925
   c3748:	bde38e38 	.word	0xbde38e38
   c374c:	3eaaaaab 	.word	0x3eaaaaab
   c3750:	be4ccccd 	.word	0xbe4ccccd
   c3754:	000c8420 	.word	0x000c8420
   c3758:	000c8410 	.word	0x000c8410
   c375c:	7149f2ca 	.word	0x7149f2ca
   c3760:	3f97ffff 	.word	0x3f97ffff
   c3764:	401bffff 	.word	0x401bffff

000c3768 <fabsf>:
   c3768:	ee10 3a10 	vmov	r3, s0
   c376c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3770:	ee00 3a10 	vmov	s0, r3
   c3774:	4770      	bx	lr
   c3776:	bf00      	nop

000c3778 <floorf>:
   c3778:	ee10 2a10 	vmov	r2, s0
   c377c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3780:	3b7f      	subs	r3, #127	; 0x7f
   c3782:	2b16      	cmp	r3, #22
   c3784:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3788:	dc28      	bgt.n	c37dc <floorf+0x64>
   c378a:	2b00      	cmp	r3, #0
   c378c:	db18      	blt.n	c37c0 <floorf+0x48>
   c378e:	491a      	ldr	r1, [pc, #104]	; (c37f8 <floorf+0x80>)
   c3790:	4119      	asrs	r1, r3
   c3792:	420a      	tst	r2, r1
   c3794:	d021      	beq.n	c37da <floorf+0x62>
   c3796:	eddf 7a19 	vldr	s15, [pc, #100]	; c37fc <floorf+0x84>
   c379a:	ee70 7a27 	vadd.f32	s15, s0, s15
   c379e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c37a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c37a6:	dd18      	ble.n	c37da <floorf+0x62>
   c37a8:	2a00      	cmp	r2, #0
   c37aa:	da04      	bge.n	c37b6 <floorf+0x3e>
   c37ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c37b0:	fa40 f303 	asr.w	r3, r0, r3
   c37b4:	441a      	add	r2, r3
   c37b6:	ea22 0301 	bic.w	r3, r2, r1
   c37ba:	ee00 3a10 	vmov	s0, r3
   c37be:	4770      	bx	lr
   c37c0:	eddf 7a0e 	vldr	s15, [pc, #56]	; c37fc <floorf+0x84>
   c37c4:	ee70 7a27 	vadd.f32	s15, s0, s15
   c37c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c37cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c37d0:	dd03      	ble.n	c37da <floorf+0x62>
   c37d2:	2a00      	cmp	r2, #0
   c37d4:	db08      	blt.n	c37e8 <floorf+0x70>
   c37d6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3800 <floorf+0x88>
   c37da:	4770      	bx	lr
   c37dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c37e0:	d3fb      	bcc.n	c37da <floorf+0x62>
   c37e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   c37e6:	4770      	bx	lr
   c37e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c37ec:	2900      	cmp	r1, #0
   c37ee:	bf18      	it	ne
   c37f0:	eeb0 0a67 	vmovne.f32	s0, s15
   c37f4:	4770      	bx	lr
   c37f6:	bf00      	nop
   c37f8:	007fffff 	.word	0x007fffff
   c37fc:	7149f2ca 	.word	0x7149f2ca
   c3800:	00000000 	.word	0x00000000

000c3804 <scalbnf>:
   c3804:	b082      	sub	sp, #8
   c3806:	ed8d 0a01 	vstr	s0, [sp, #4]
   c380a:	9b01      	ldr	r3, [sp, #4]
   c380c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c3810:	d02a      	beq.n	c3868 <scalbnf+0x64>
   c3812:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c3816:	d223      	bcs.n	c3860 <scalbnf+0x5c>
   c3818:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c381c:	d128      	bne.n	c3870 <scalbnf+0x6c>
   c381e:	ed9d 7a01 	vldr	s14, [sp, #4]
   c3822:	eddf 7a2a 	vldr	s15, [pc, #168]	; c38cc <scalbnf+0xc8>
   c3826:	4b2a      	ldr	r3, [pc, #168]	; (c38d0 <scalbnf+0xcc>)
   c3828:	ee67 7a27 	vmul.f32	s15, s14, s15
   c382c:	4298      	cmp	r0, r3
   c382e:	edcd 7a01 	vstr	s15, [sp, #4]
   c3832:	db37      	blt.n	c38a4 <scalbnf+0xa0>
   c3834:	9b01      	ldr	r3, [sp, #4]
   c3836:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c383a:	3a19      	subs	r2, #25
   c383c:	4402      	add	r2, r0
   c383e:	2afe      	cmp	r2, #254	; 0xfe
   c3840:	dd1a      	ble.n	c3878 <scalbnf+0x74>
   c3842:	ed9f 0a24 	vldr	s0, [pc, #144]	; c38d4 <scalbnf+0xd0>
   c3846:	ed9f 7a24 	vldr	s14, [pc, #144]	; c38d8 <scalbnf+0xd4>
   c384a:	9b01      	ldr	r3, [sp, #4]
   c384c:	2b00      	cmp	r3, #0
   c384e:	eef0 7a40 	vmov.f32	s15, s0
   c3852:	bfb8      	it	lt
   c3854:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3858:	ee20 0a27 	vmul.f32	s0, s0, s15
   c385c:	b002      	add	sp, #8
   c385e:	4770      	bx	lr
   c3860:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3864:	b002      	add	sp, #8
   c3866:	4770      	bx	lr
   c3868:	ed9d 0a01 	vldr	s0, [sp, #4]
   c386c:	b002      	add	sp, #8
   c386e:	4770      	bx	lr
   c3870:	0dd2      	lsrs	r2, r2, #23
   c3872:	4402      	add	r2, r0
   c3874:	2afe      	cmp	r2, #254	; 0xfe
   c3876:	dce4      	bgt.n	c3842 <scalbnf+0x3e>
   c3878:	2a00      	cmp	r2, #0
   c387a:	dc0b      	bgt.n	c3894 <scalbnf+0x90>
   c387c:	f112 0f16 	cmn.w	r2, #22
   c3880:	da17      	bge.n	c38b2 <scalbnf+0xae>
   c3882:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3886:	4298      	cmp	r0, r3
   c3888:	dcdb      	bgt.n	c3842 <scalbnf+0x3e>
   c388a:	ed9f 0a14 	vldr	s0, [pc, #80]	; c38dc <scalbnf+0xd8>
   c388e:	ed9f 7a14 	vldr	s14, [pc, #80]	; c38e0 <scalbnf+0xdc>
   c3892:	e7da      	b.n	c384a <scalbnf+0x46>
   c3894:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3898:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c389c:	ee00 3a10 	vmov	s0, r3
   c38a0:	b002      	add	sp, #8
   c38a2:	4770      	bx	lr
   c38a4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c38dc <scalbnf+0xd8>
   c38a8:	eddd 7a01 	vldr	s15, [sp, #4]
   c38ac:	ee27 0a80 	vmul.f32	s0, s15, s0
   c38b0:	e7d8      	b.n	c3864 <scalbnf+0x60>
   c38b2:	3219      	adds	r2, #25
   c38b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c38b8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c38bc:	eddf 7a09 	vldr	s15, [pc, #36]	; c38e4 <scalbnf+0xe0>
   c38c0:	ee07 3a10 	vmov	s14, r3
   c38c4:	ee27 0a27 	vmul.f32	s0, s14, s15
   c38c8:	e7cc      	b.n	c3864 <scalbnf+0x60>
   c38ca:	bf00      	nop
   c38cc:	4c000000 	.word	0x4c000000
   c38d0:	ffff3cb0 	.word	0xffff3cb0
   c38d4:	7149f2ca 	.word	0x7149f2ca
   c38d8:	f149f2ca 	.word	0xf149f2ca
   c38dc:	0da24260 	.word	0x0da24260
   c38e0:	8da24260 	.word	0x8da24260
   c38e4:	33000000 	.word	0x33000000

000c38e8 <__aeabi_drsub>:
   c38e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c38ec:	e002      	b.n	c38f4 <__adddf3>
   c38ee:	bf00      	nop

000c38f0 <__aeabi_dsub>:
   c38f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c38f4 <__adddf3>:
   c38f4:	b530      	push	{r4, r5, lr}
   c38f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c38fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c38fe:	ea94 0f05 	teq	r4, r5
   c3902:	bf08      	it	eq
   c3904:	ea90 0f02 	teqeq	r0, r2
   c3908:	bf1f      	itttt	ne
   c390a:	ea54 0c00 	orrsne.w	ip, r4, r0
   c390e:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3912:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3916:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c391a:	f000 80e2 	beq.w	c3ae2 <__adddf3+0x1ee>
   c391e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3922:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3926:	bfb8      	it	lt
   c3928:	426d      	neglt	r5, r5
   c392a:	dd0c      	ble.n	c3946 <__adddf3+0x52>
   c392c:	442c      	add	r4, r5
   c392e:	ea80 0202 	eor.w	r2, r0, r2
   c3932:	ea81 0303 	eor.w	r3, r1, r3
   c3936:	ea82 0000 	eor.w	r0, r2, r0
   c393a:	ea83 0101 	eor.w	r1, r3, r1
   c393e:	ea80 0202 	eor.w	r2, r0, r2
   c3942:	ea81 0303 	eor.w	r3, r1, r3
   c3946:	2d36      	cmp	r5, #54	; 0x36
   c3948:	bf88      	it	hi
   c394a:	bd30      	pophi	{r4, r5, pc}
   c394c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3950:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3954:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3958:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c395c:	d002      	beq.n	c3964 <__adddf3+0x70>
   c395e:	4240      	negs	r0, r0
   c3960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3964:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3968:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c396c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3970:	d002      	beq.n	c3978 <__adddf3+0x84>
   c3972:	4252      	negs	r2, r2
   c3974:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3978:	ea94 0f05 	teq	r4, r5
   c397c:	f000 80a7 	beq.w	c3ace <__adddf3+0x1da>
   c3980:	f1a4 0401 	sub.w	r4, r4, #1
   c3984:	f1d5 0e20 	rsbs	lr, r5, #32
   c3988:	db0d      	blt.n	c39a6 <__adddf3+0xb2>
   c398a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c398e:	fa22 f205 	lsr.w	r2, r2, r5
   c3992:	1880      	adds	r0, r0, r2
   c3994:	f141 0100 	adc.w	r1, r1, #0
   c3998:	fa03 f20e 	lsl.w	r2, r3, lr
   c399c:	1880      	adds	r0, r0, r2
   c399e:	fa43 f305 	asr.w	r3, r3, r5
   c39a2:	4159      	adcs	r1, r3
   c39a4:	e00e      	b.n	c39c4 <__adddf3+0xd0>
   c39a6:	f1a5 0520 	sub.w	r5, r5, #32
   c39aa:	f10e 0e20 	add.w	lr, lr, #32
   c39ae:	2a01      	cmp	r2, #1
   c39b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   c39b4:	bf28      	it	cs
   c39b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   c39ba:	fa43 f305 	asr.w	r3, r3, r5
   c39be:	18c0      	adds	r0, r0, r3
   c39c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c39c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c39c8:	d507      	bpl.n	c39da <__adddf3+0xe6>
   c39ca:	f04f 0e00 	mov.w	lr, #0
   c39ce:	f1dc 0c00 	rsbs	ip, ip, #0
   c39d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   c39d6:	eb6e 0101 	sbc.w	r1, lr, r1
   c39da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c39de:	d31b      	bcc.n	c3a18 <__adddf3+0x124>
   c39e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c39e4:	d30c      	bcc.n	c3a00 <__adddf3+0x10c>
   c39e6:	0849      	lsrs	r1, r1, #1
   c39e8:	ea5f 0030 	movs.w	r0, r0, rrx
   c39ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c39f0:	f104 0401 	add.w	r4, r4, #1
   c39f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c39f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c39fc:	f080 809a 	bcs.w	c3b34 <__adddf3+0x240>
   c3a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3a04:	bf08      	it	eq
   c3a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3a0a:	f150 0000 	adcs.w	r0, r0, #0
   c3a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3a12:	ea41 0105 	orr.w	r1, r1, r5
   c3a16:	bd30      	pop	{r4, r5, pc}
   c3a18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3a1c:	4140      	adcs	r0, r0
   c3a1e:	eb41 0101 	adc.w	r1, r1, r1
   c3a22:	3c01      	subs	r4, #1
   c3a24:	bf28      	it	cs
   c3a26:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3a2a:	d2e9      	bcs.n	c3a00 <__adddf3+0x10c>
   c3a2c:	f091 0f00 	teq	r1, #0
   c3a30:	bf04      	itt	eq
   c3a32:	4601      	moveq	r1, r0
   c3a34:	2000      	moveq	r0, #0
   c3a36:	fab1 f381 	clz	r3, r1
   c3a3a:	bf08      	it	eq
   c3a3c:	3320      	addeq	r3, #32
   c3a3e:	f1a3 030b 	sub.w	r3, r3, #11
   c3a42:	f1b3 0220 	subs.w	r2, r3, #32
   c3a46:	da0c      	bge.n	c3a62 <__adddf3+0x16e>
   c3a48:	320c      	adds	r2, #12
   c3a4a:	dd08      	ble.n	c3a5e <__adddf3+0x16a>
   c3a4c:	f102 0c14 	add.w	ip, r2, #20
   c3a50:	f1c2 020c 	rsb	r2, r2, #12
   c3a54:	fa01 f00c 	lsl.w	r0, r1, ip
   c3a58:	fa21 f102 	lsr.w	r1, r1, r2
   c3a5c:	e00c      	b.n	c3a78 <__adddf3+0x184>
   c3a5e:	f102 0214 	add.w	r2, r2, #20
   c3a62:	bfd8      	it	le
   c3a64:	f1c2 0c20 	rsble	ip, r2, #32
   c3a68:	fa01 f102 	lsl.w	r1, r1, r2
   c3a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3a70:	bfdc      	itt	le
   c3a72:	ea41 010c 	orrle.w	r1, r1, ip
   c3a76:	4090      	lslle	r0, r2
   c3a78:	1ae4      	subs	r4, r4, r3
   c3a7a:	bfa2      	ittt	ge
   c3a7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3a80:	4329      	orrge	r1, r5
   c3a82:	bd30      	popge	{r4, r5, pc}
   c3a84:	ea6f 0404 	mvn.w	r4, r4
   c3a88:	3c1f      	subs	r4, #31
   c3a8a:	da1c      	bge.n	c3ac6 <__adddf3+0x1d2>
   c3a8c:	340c      	adds	r4, #12
   c3a8e:	dc0e      	bgt.n	c3aae <__adddf3+0x1ba>
   c3a90:	f104 0414 	add.w	r4, r4, #20
   c3a94:	f1c4 0220 	rsb	r2, r4, #32
   c3a98:	fa20 f004 	lsr.w	r0, r0, r4
   c3a9c:	fa01 f302 	lsl.w	r3, r1, r2
   c3aa0:	ea40 0003 	orr.w	r0, r0, r3
   c3aa4:	fa21 f304 	lsr.w	r3, r1, r4
   c3aa8:	ea45 0103 	orr.w	r1, r5, r3
   c3aac:	bd30      	pop	{r4, r5, pc}
   c3aae:	f1c4 040c 	rsb	r4, r4, #12
   c3ab2:	f1c4 0220 	rsb	r2, r4, #32
   c3ab6:	fa20 f002 	lsr.w	r0, r0, r2
   c3aba:	fa01 f304 	lsl.w	r3, r1, r4
   c3abe:	ea40 0003 	orr.w	r0, r0, r3
   c3ac2:	4629      	mov	r1, r5
   c3ac4:	bd30      	pop	{r4, r5, pc}
   c3ac6:	fa21 f004 	lsr.w	r0, r1, r4
   c3aca:	4629      	mov	r1, r5
   c3acc:	bd30      	pop	{r4, r5, pc}
   c3ace:	f094 0f00 	teq	r4, #0
   c3ad2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3ad6:	bf06      	itte	eq
   c3ad8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3adc:	3401      	addeq	r4, #1
   c3ade:	3d01      	subne	r5, #1
   c3ae0:	e74e      	b.n	c3980 <__adddf3+0x8c>
   c3ae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3ae6:	bf18      	it	ne
   c3ae8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3aec:	d029      	beq.n	c3b42 <__adddf3+0x24e>
   c3aee:	ea94 0f05 	teq	r4, r5
   c3af2:	bf08      	it	eq
   c3af4:	ea90 0f02 	teqeq	r0, r2
   c3af8:	d005      	beq.n	c3b06 <__adddf3+0x212>
   c3afa:	ea54 0c00 	orrs.w	ip, r4, r0
   c3afe:	bf04      	itt	eq
   c3b00:	4619      	moveq	r1, r3
   c3b02:	4610      	moveq	r0, r2
   c3b04:	bd30      	pop	{r4, r5, pc}
   c3b06:	ea91 0f03 	teq	r1, r3
   c3b0a:	bf1e      	ittt	ne
   c3b0c:	2100      	movne	r1, #0
   c3b0e:	2000      	movne	r0, #0
   c3b10:	bd30      	popne	{r4, r5, pc}
   c3b12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3b16:	d105      	bne.n	c3b24 <__adddf3+0x230>
   c3b18:	0040      	lsls	r0, r0, #1
   c3b1a:	4149      	adcs	r1, r1
   c3b1c:	bf28      	it	cs
   c3b1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3b22:	bd30      	pop	{r4, r5, pc}
   c3b24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3b28:	bf3c      	itt	cc
   c3b2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3b2e:	bd30      	popcc	{r4, r5, pc}
   c3b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3b34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3b38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3b3c:	f04f 0000 	mov.w	r0, #0
   c3b40:	bd30      	pop	{r4, r5, pc}
   c3b42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3b46:	bf1a      	itte	ne
   c3b48:	4619      	movne	r1, r3
   c3b4a:	4610      	movne	r0, r2
   c3b4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3b50:	bf1c      	itt	ne
   c3b52:	460b      	movne	r3, r1
   c3b54:	4602      	movne	r2, r0
   c3b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3b5a:	bf06      	itte	eq
   c3b5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3b60:	ea91 0f03 	teqeq	r1, r3
   c3b64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3b68:	bd30      	pop	{r4, r5, pc}
   c3b6a:	bf00      	nop

000c3b6c <__aeabi_ui2d>:
   c3b6c:	f090 0f00 	teq	r0, #0
   c3b70:	bf04      	itt	eq
   c3b72:	2100      	moveq	r1, #0
   c3b74:	4770      	bxeq	lr
   c3b76:	b530      	push	{r4, r5, lr}
   c3b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3b80:	f04f 0500 	mov.w	r5, #0
   c3b84:	f04f 0100 	mov.w	r1, #0
   c3b88:	e750      	b.n	c3a2c <__adddf3+0x138>
   c3b8a:	bf00      	nop

000c3b8c <__aeabi_i2d>:
   c3b8c:	f090 0f00 	teq	r0, #0
   c3b90:	bf04      	itt	eq
   c3b92:	2100      	moveq	r1, #0
   c3b94:	4770      	bxeq	lr
   c3b96:	b530      	push	{r4, r5, lr}
   c3b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3ba0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3ba4:	bf48      	it	mi
   c3ba6:	4240      	negmi	r0, r0
   c3ba8:	f04f 0100 	mov.w	r1, #0
   c3bac:	e73e      	b.n	c3a2c <__adddf3+0x138>
   c3bae:	bf00      	nop

000c3bb0 <__aeabi_f2d>:
   c3bb0:	0042      	lsls	r2, r0, #1
   c3bb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3bb6:	ea4f 0131 	mov.w	r1, r1, rrx
   c3bba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3bbe:	bf1f      	itttt	ne
   c3bc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3bc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3bc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3bcc:	4770      	bxne	lr
   c3bce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3bd2:	bf08      	it	eq
   c3bd4:	4770      	bxeq	lr
   c3bd6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3bda:	bf04      	itt	eq
   c3bdc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3be0:	4770      	bxeq	lr
   c3be2:	b530      	push	{r4, r5, lr}
   c3be4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3bf0:	e71c      	b.n	c3a2c <__adddf3+0x138>
   c3bf2:	bf00      	nop

000c3bf4 <__aeabi_ul2d>:
   c3bf4:	ea50 0201 	orrs.w	r2, r0, r1
   c3bf8:	bf08      	it	eq
   c3bfa:	4770      	bxeq	lr
   c3bfc:	b530      	push	{r4, r5, lr}
   c3bfe:	f04f 0500 	mov.w	r5, #0
   c3c02:	e00a      	b.n	c3c1a <__aeabi_l2d+0x16>

000c3c04 <__aeabi_l2d>:
   c3c04:	ea50 0201 	orrs.w	r2, r0, r1
   c3c08:	bf08      	it	eq
   c3c0a:	4770      	bxeq	lr
   c3c0c:	b530      	push	{r4, r5, lr}
   c3c0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3c12:	d502      	bpl.n	c3c1a <__aeabi_l2d+0x16>
   c3c14:	4240      	negs	r0, r0
   c3c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3c1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3c1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3c22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3c26:	f43f aed8 	beq.w	c39da <__adddf3+0xe6>
   c3c2a:	f04f 0203 	mov.w	r2, #3
   c3c2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3c32:	bf18      	it	ne
   c3c34:	3203      	addne	r2, #3
   c3c36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3c3a:	bf18      	it	ne
   c3c3c:	3203      	addne	r2, #3
   c3c3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3c42:	f1c2 0320 	rsb	r3, r2, #32
   c3c46:	fa00 fc03 	lsl.w	ip, r0, r3
   c3c4a:	fa20 f002 	lsr.w	r0, r0, r2
   c3c4e:	fa01 fe03 	lsl.w	lr, r1, r3
   c3c52:	ea40 000e 	orr.w	r0, r0, lr
   c3c56:	fa21 f102 	lsr.w	r1, r1, r2
   c3c5a:	4414      	add	r4, r2
   c3c5c:	e6bd      	b.n	c39da <__adddf3+0xe6>
   c3c5e:	bf00      	nop

000c3c60 <__aeabi_dmul>:
   c3c60:	b570      	push	{r4, r5, r6, lr}
   c3c62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3c66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3c6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3c6e:	bf1d      	ittte	ne
   c3c70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3c74:	ea94 0f0c 	teqne	r4, ip
   c3c78:	ea95 0f0c 	teqne	r5, ip
   c3c7c:	f000 f8de 	bleq	c3e3c <__aeabi_dmul+0x1dc>
   c3c80:	442c      	add	r4, r5
   c3c82:	ea81 0603 	eor.w	r6, r1, r3
   c3c86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3c8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3c8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3c92:	bf18      	it	ne
   c3c94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3c98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3ca0:	d038      	beq.n	c3d14 <__aeabi_dmul+0xb4>
   c3ca2:	fba0 ce02 	umull	ip, lr, r0, r2
   c3ca6:	f04f 0500 	mov.w	r5, #0
   c3caa:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3cae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3cb2:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3cb6:	f04f 0600 	mov.w	r6, #0
   c3cba:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3cbe:	f09c 0f00 	teq	ip, #0
   c3cc2:	bf18      	it	ne
   c3cc4:	f04e 0e01 	orrne.w	lr, lr, #1
   c3cc8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3ccc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3cd0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3cd4:	d204      	bcs.n	c3ce0 <__aeabi_dmul+0x80>
   c3cd6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3cda:	416d      	adcs	r5, r5
   c3cdc:	eb46 0606 	adc.w	r6, r6, r6
   c3ce0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3ce4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3ce8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3cec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3cf0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3cf4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3cf8:	bf88      	it	hi
   c3cfa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3cfe:	d81e      	bhi.n	c3d3e <__aeabi_dmul+0xde>
   c3d00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3d04:	bf08      	it	eq
   c3d06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3d0a:	f150 0000 	adcs.w	r0, r0, #0
   c3d0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3d12:	bd70      	pop	{r4, r5, r6, pc}
   c3d14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3d18:	ea46 0101 	orr.w	r1, r6, r1
   c3d1c:	ea40 0002 	orr.w	r0, r0, r2
   c3d20:	ea81 0103 	eor.w	r1, r1, r3
   c3d24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3d28:	bfc2      	ittt	gt
   c3d2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3d2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3d32:	bd70      	popgt	{r4, r5, r6, pc}
   c3d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3d38:	f04f 0e00 	mov.w	lr, #0
   c3d3c:	3c01      	subs	r4, #1
   c3d3e:	f300 80ab 	bgt.w	c3e98 <__aeabi_dmul+0x238>
   c3d42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c3d46:	bfde      	ittt	le
   c3d48:	2000      	movle	r0, #0
   c3d4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3d4e:	bd70      	pople	{r4, r5, r6, pc}
   c3d50:	f1c4 0400 	rsb	r4, r4, #0
   c3d54:	3c20      	subs	r4, #32
   c3d56:	da35      	bge.n	c3dc4 <__aeabi_dmul+0x164>
   c3d58:	340c      	adds	r4, #12
   c3d5a:	dc1b      	bgt.n	c3d94 <__aeabi_dmul+0x134>
   c3d5c:	f104 0414 	add.w	r4, r4, #20
   c3d60:	f1c4 0520 	rsb	r5, r4, #32
   c3d64:	fa00 f305 	lsl.w	r3, r0, r5
   c3d68:	fa20 f004 	lsr.w	r0, r0, r4
   c3d6c:	fa01 f205 	lsl.w	r2, r1, r5
   c3d70:	ea40 0002 	orr.w	r0, r0, r2
   c3d74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3d78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3d7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3d80:	fa21 f604 	lsr.w	r6, r1, r4
   c3d84:	eb42 0106 	adc.w	r1, r2, r6
   c3d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3d8c:	bf08      	it	eq
   c3d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3d92:	bd70      	pop	{r4, r5, r6, pc}
   c3d94:	f1c4 040c 	rsb	r4, r4, #12
   c3d98:	f1c4 0520 	rsb	r5, r4, #32
   c3d9c:	fa00 f304 	lsl.w	r3, r0, r4
   c3da0:	fa20 f005 	lsr.w	r0, r0, r5
   c3da4:	fa01 f204 	lsl.w	r2, r1, r4
   c3da8:	ea40 0002 	orr.w	r0, r0, r2
   c3dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3db0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3db4:	f141 0100 	adc.w	r1, r1, #0
   c3db8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3dbc:	bf08      	it	eq
   c3dbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3dc2:	bd70      	pop	{r4, r5, r6, pc}
   c3dc4:	f1c4 0520 	rsb	r5, r4, #32
   c3dc8:	fa00 f205 	lsl.w	r2, r0, r5
   c3dcc:	ea4e 0e02 	orr.w	lr, lr, r2
   c3dd0:	fa20 f304 	lsr.w	r3, r0, r4
   c3dd4:	fa01 f205 	lsl.w	r2, r1, r5
   c3dd8:	ea43 0302 	orr.w	r3, r3, r2
   c3ddc:	fa21 f004 	lsr.w	r0, r1, r4
   c3de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3de4:	fa21 f204 	lsr.w	r2, r1, r4
   c3de8:	ea20 0002 	bic.w	r0, r0, r2
   c3dec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c3df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3df4:	bf08      	it	eq
   c3df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3dfa:	bd70      	pop	{r4, r5, r6, pc}
   c3dfc:	f094 0f00 	teq	r4, #0
   c3e00:	d10f      	bne.n	c3e22 <__aeabi_dmul+0x1c2>
   c3e02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c3e06:	0040      	lsls	r0, r0, #1
   c3e08:	eb41 0101 	adc.w	r1, r1, r1
   c3e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3e10:	bf08      	it	eq
   c3e12:	3c01      	subeq	r4, #1
   c3e14:	d0f7      	beq.n	c3e06 <__aeabi_dmul+0x1a6>
   c3e16:	ea41 0106 	orr.w	r1, r1, r6
   c3e1a:	f095 0f00 	teq	r5, #0
   c3e1e:	bf18      	it	ne
   c3e20:	4770      	bxne	lr
   c3e22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c3e26:	0052      	lsls	r2, r2, #1
   c3e28:	eb43 0303 	adc.w	r3, r3, r3
   c3e2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3e30:	bf08      	it	eq
   c3e32:	3d01      	subeq	r5, #1
   c3e34:	d0f7      	beq.n	c3e26 <__aeabi_dmul+0x1c6>
   c3e36:	ea43 0306 	orr.w	r3, r3, r6
   c3e3a:	4770      	bx	lr
   c3e3c:	ea94 0f0c 	teq	r4, ip
   c3e40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3e44:	bf18      	it	ne
   c3e46:	ea95 0f0c 	teqne	r5, ip
   c3e4a:	d00c      	beq.n	c3e66 <__aeabi_dmul+0x206>
   c3e4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3e50:	bf18      	it	ne
   c3e52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3e56:	d1d1      	bne.n	c3dfc <__aeabi_dmul+0x19c>
   c3e58:	ea81 0103 	eor.w	r1, r1, r3
   c3e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3e60:	f04f 0000 	mov.w	r0, #0
   c3e64:	bd70      	pop	{r4, r5, r6, pc}
   c3e66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3e6a:	bf06      	itte	eq
   c3e6c:	4610      	moveq	r0, r2
   c3e6e:	4619      	moveq	r1, r3
   c3e70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3e74:	d019      	beq.n	c3eaa <__aeabi_dmul+0x24a>
   c3e76:	ea94 0f0c 	teq	r4, ip
   c3e7a:	d102      	bne.n	c3e82 <__aeabi_dmul+0x222>
   c3e7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3e80:	d113      	bne.n	c3eaa <__aeabi_dmul+0x24a>
   c3e82:	ea95 0f0c 	teq	r5, ip
   c3e86:	d105      	bne.n	c3e94 <__aeabi_dmul+0x234>
   c3e88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3e8c:	bf1c      	itt	ne
   c3e8e:	4610      	movne	r0, r2
   c3e90:	4619      	movne	r1, r3
   c3e92:	d10a      	bne.n	c3eaa <__aeabi_dmul+0x24a>
   c3e94:	ea81 0103 	eor.w	r1, r1, r3
   c3e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3e9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3ea0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3ea4:	f04f 0000 	mov.w	r0, #0
   c3ea8:	bd70      	pop	{r4, r5, r6, pc}
   c3eaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3eae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c3eb2:	bd70      	pop	{r4, r5, r6, pc}

000c3eb4 <__aeabi_ddiv>:
   c3eb4:	b570      	push	{r4, r5, r6, lr}
   c3eb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3eba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3ebe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3ec2:	bf1d      	ittte	ne
   c3ec4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3ec8:	ea94 0f0c 	teqne	r4, ip
   c3ecc:	ea95 0f0c 	teqne	r5, ip
   c3ed0:	f000 f8a7 	bleq	c4022 <__aeabi_ddiv+0x16e>
   c3ed4:	eba4 0405 	sub.w	r4, r4, r5
   c3ed8:	ea81 0e03 	eor.w	lr, r1, r3
   c3edc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3ee0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3ee4:	f000 8088 	beq.w	c3ff8 <__aeabi_ddiv+0x144>
   c3ee8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3eec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c3ef0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c3ef4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c3ef8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c3efc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c3f00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c3f04:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c3f08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c3f0c:	429d      	cmp	r5, r3
   c3f0e:	bf08      	it	eq
   c3f10:	4296      	cmpeq	r6, r2
   c3f12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c3f16:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c3f1a:	d202      	bcs.n	c3f22 <__aeabi_ddiv+0x6e>
   c3f1c:	085b      	lsrs	r3, r3, #1
   c3f1e:	ea4f 0232 	mov.w	r2, r2, rrx
   c3f22:	1ab6      	subs	r6, r6, r2
   c3f24:	eb65 0503 	sbc.w	r5, r5, r3
   c3f28:	085b      	lsrs	r3, r3, #1
   c3f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   c3f2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c3f32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c3f36:	ebb6 0e02 	subs.w	lr, r6, r2
   c3f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3f3e:	bf22      	ittt	cs
   c3f40:	1ab6      	subcs	r6, r6, r2
   c3f42:	4675      	movcs	r5, lr
   c3f44:	ea40 000c 	orrcs.w	r0, r0, ip
   c3f48:	085b      	lsrs	r3, r3, #1
   c3f4a:	ea4f 0232 	mov.w	r2, r2, rrx
   c3f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3f56:	bf22      	ittt	cs
   c3f58:	1ab6      	subcs	r6, r6, r2
   c3f5a:	4675      	movcs	r5, lr
   c3f5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3f60:	085b      	lsrs	r3, r3, #1
   c3f62:	ea4f 0232 	mov.w	r2, r2, rrx
   c3f66:	ebb6 0e02 	subs.w	lr, r6, r2
   c3f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3f6e:	bf22      	ittt	cs
   c3f70:	1ab6      	subcs	r6, r6, r2
   c3f72:	4675      	movcs	r5, lr
   c3f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3f78:	085b      	lsrs	r3, r3, #1
   c3f7a:	ea4f 0232 	mov.w	r2, r2, rrx
   c3f7e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3f82:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3f86:	bf22      	ittt	cs
   c3f88:	1ab6      	subcs	r6, r6, r2
   c3f8a:	4675      	movcs	r5, lr
   c3f8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3f90:	ea55 0e06 	orrs.w	lr, r5, r6
   c3f94:	d018      	beq.n	c3fc8 <__aeabi_ddiv+0x114>
   c3f96:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c3f9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c3f9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c3fa2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c3fa6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c3faa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c3fae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c3fb2:	d1c0      	bne.n	c3f36 <__aeabi_ddiv+0x82>
   c3fb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3fb8:	d10b      	bne.n	c3fd2 <__aeabi_ddiv+0x11e>
   c3fba:	ea41 0100 	orr.w	r1, r1, r0
   c3fbe:	f04f 0000 	mov.w	r0, #0
   c3fc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c3fc6:	e7b6      	b.n	c3f36 <__aeabi_ddiv+0x82>
   c3fc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3fcc:	bf04      	itt	eq
   c3fce:	4301      	orreq	r1, r0
   c3fd0:	2000      	moveq	r0, #0
   c3fd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3fd6:	bf88      	it	hi
   c3fd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3fdc:	f63f aeaf 	bhi.w	c3d3e <__aeabi_dmul+0xde>
   c3fe0:	ebb5 0c03 	subs.w	ip, r5, r3
   c3fe4:	bf04      	itt	eq
   c3fe6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c3fea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3fee:	f150 0000 	adcs.w	r0, r0, #0
   c3ff2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3ff6:	bd70      	pop	{r4, r5, r6, pc}
   c3ff8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c3ffc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c4000:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c4004:	bfc2      	ittt	gt
   c4006:	ebd4 050c 	rsbsgt	r5, r4, ip
   c400a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c400e:	bd70      	popgt	{r4, r5, r6, pc}
   c4010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4014:	f04f 0e00 	mov.w	lr, #0
   c4018:	3c01      	subs	r4, #1
   c401a:	e690      	b.n	c3d3e <__aeabi_dmul+0xde>
   c401c:	ea45 0e06 	orr.w	lr, r5, r6
   c4020:	e68d      	b.n	c3d3e <__aeabi_dmul+0xde>
   c4022:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4026:	ea94 0f0c 	teq	r4, ip
   c402a:	bf08      	it	eq
   c402c:	ea95 0f0c 	teqeq	r5, ip
   c4030:	f43f af3b 	beq.w	c3eaa <__aeabi_dmul+0x24a>
   c4034:	ea94 0f0c 	teq	r4, ip
   c4038:	d10a      	bne.n	c4050 <__aeabi_ddiv+0x19c>
   c403a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c403e:	f47f af34 	bne.w	c3eaa <__aeabi_dmul+0x24a>
   c4042:	ea95 0f0c 	teq	r5, ip
   c4046:	f47f af25 	bne.w	c3e94 <__aeabi_dmul+0x234>
   c404a:	4610      	mov	r0, r2
   c404c:	4619      	mov	r1, r3
   c404e:	e72c      	b.n	c3eaa <__aeabi_dmul+0x24a>
   c4050:	ea95 0f0c 	teq	r5, ip
   c4054:	d106      	bne.n	c4064 <__aeabi_ddiv+0x1b0>
   c4056:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c405a:	f43f aefd 	beq.w	c3e58 <__aeabi_dmul+0x1f8>
   c405e:	4610      	mov	r0, r2
   c4060:	4619      	mov	r1, r3
   c4062:	e722      	b.n	c3eaa <__aeabi_dmul+0x24a>
   c4064:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4068:	bf18      	it	ne
   c406a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c406e:	f47f aec5 	bne.w	c3dfc <__aeabi_dmul+0x19c>
   c4072:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c4076:	f47f af0d 	bne.w	c3e94 <__aeabi_dmul+0x234>
   c407a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c407e:	f47f aeeb 	bne.w	c3e58 <__aeabi_dmul+0x1f8>
   c4082:	e712      	b.n	c3eaa <__aeabi_dmul+0x24a>

000c4084 <__gedf2>:
   c4084:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4088:	e006      	b.n	c4098 <__cmpdf2+0x4>
   c408a:	bf00      	nop

000c408c <__ledf2>:
   c408c:	f04f 0c01 	mov.w	ip, #1
   c4090:	e002      	b.n	c4098 <__cmpdf2+0x4>
   c4092:	bf00      	nop

000c4094 <__cmpdf2>:
   c4094:	f04f 0c01 	mov.w	ip, #1
   c4098:	f84d cd04 	str.w	ip, [sp, #-4]!
   c409c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c40a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c40a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c40a8:	bf18      	it	ne
   c40aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c40ae:	d01b      	beq.n	c40e8 <__cmpdf2+0x54>
   c40b0:	b001      	add	sp, #4
   c40b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c40b6:	bf0c      	ite	eq
   c40b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c40bc:	ea91 0f03 	teqne	r1, r3
   c40c0:	bf02      	ittt	eq
   c40c2:	ea90 0f02 	teqeq	r0, r2
   c40c6:	2000      	moveq	r0, #0
   c40c8:	4770      	bxeq	lr
   c40ca:	f110 0f00 	cmn.w	r0, #0
   c40ce:	ea91 0f03 	teq	r1, r3
   c40d2:	bf58      	it	pl
   c40d4:	4299      	cmppl	r1, r3
   c40d6:	bf08      	it	eq
   c40d8:	4290      	cmpeq	r0, r2
   c40da:	bf2c      	ite	cs
   c40dc:	17d8      	asrcs	r0, r3, #31
   c40de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c40e2:	f040 0001 	orr.w	r0, r0, #1
   c40e6:	4770      	bx	lr
   c40e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c40ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c40f0:	d102      	bne.n	c40f8 <__cmpdf2+0x64>
   c40f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c40f6:	d107      	bne.n	c4108 <__cmpdf2+0x74>
   c40f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c40fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4100:	d1d6      	bne.n	c40b0 <__cmpdf2+0x1c>
   c4102:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4106:	d0d3      	beq.n	c40b0 <__cmpdf2+0x1c>
   c4108:	f85d 0b04 	ldr.w	r0, [sp], #4
   c410c:	4770      	bx	lr
   c410e:	bf00      	nop

000c4110 <__aeabi_cdrcmple>:
   c4110:	4684      	mov	ip, r0
   c4112:	4610      	mov	r0, r2
   c4114:	4662      	mov	r2, ip
   c4116:	468c      	mov	ip, r1
   c4118:	4619      	mov	r1, r3
   c411a:	4663      	mov	r3, ip
   c411c:	e000      	b.n	c4120 <__aeabi_cdcmpeq>
   c411e:	bf00      	nop

000c4120 <__aeabi_cdcmpeq>:
   c4120:	b501      	push	{r0, lr}
   c4122:	f7ff ffb7 	bl	c4094 <__cmpdf2>
   c4126:	2800      	cmp	r0, #0
   c4128:	bf48      	it	mi
   c412a:	f110 0f00 	cmnmi.w	r0, #0
   c412e:	bd01      	pop	{r0, pc}

000c4130 <__aeabi_dcmpeq>:
   c4130:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4134:	f7ff fff4 	bl	c4120 <__aeabi_cdcmpeq>
   c4138:	bf0c      	ite	eq
   c413a:	2001      	moveq	r0, #1
   c413c:	2000      	movne	r0, #0
   c413e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4142:	bf00      	nop

000c4144 <__aeabi_dcmplt>:
   c4144:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4148:	f7ff ffea 	bl	c4120 <__aeabi_cdcmpeq>
   c414c:	bf34      	ite	cc
   c414e:	2001      	movcc	r0, #1
   c4150:	2000      	movcs	r0, #0
   c4152:	f85d fb08 	ldr.w	pc, [sp], #8
   c4156:	bf00      	nop

000c4158 <__aeabi_dcmple>:
   c4158:	f84d ed08 	str.w	lr, [sp, #-8]!
   c415c:	f7ff ffe0 	bl	c4120 <__aeabi_cdcmpeq>
   c4160:	bf94      	ite	ls
   c4162:	2001      	movls	r0, #1
   c4164:	2000      	movhi	r0, #0
   c4166:	f85d fb08 	ldr.w	pc, [sp], #8
   c416a:	bf00      	nop

000c416c <__aeabi_dcmpge>:
   c416c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4170:	f7ff ffce 	bl	c4110 <__aeabi_cdrcmple>
   c4174:	bf94      	ite	ls
   c4176:	2001      	movls	r0, #1
   c4178:	2000      	movhi	r0, #0
   c417a:	f85d fb08 	ldr.w	pc, [sp], #8
   c417e:	bf00      	nop

000c4180 <__aeabi_dcmpgt>:
   c4180:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4184:	f7ff ffc4 	bl	c4110 <__aeabi_cdrcmple>
   c4188:	bf34      	ite	cc
   c418a:	2001      	movcc	r0, #1
   c418c:	2000      	movcs	r0, #0
   c418e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4192:	bf00      	nop

000c4194 <__aeabi_dcmpun>:
   c4194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c419c:	d102      	bne.n	c41a4 <__aeabi_dcmpun+0x10>
   c419e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c41a2:	d10a      	bne.n	c41ba <__aeabi_dcmpun+0x26>
   c41a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c41a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c41ac:	d102      	bne.n	c41b4 <__aeabi_dcmpun+0x20>
   c41ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c41b2:	d102      	bne.n	c41ba <__aeabi_dcmpun+0x26>
   c41b4:	f04f 0000 	mov.w	r0, #0
   c41b8:	4770      	bx	lr
   c41ba:	f04f 0001 	mov.w	r0, #1
   c41be:	4770      	bx	lr

000c41c0 <__aeabi_d2iz>:
   c41c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c41c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c41c8:	d215      	bcs.n	c41f6 <__aeabi_d2iz+0x36>
   c41ca:	d511      	bpl.n	c41f0 <__aeabi_d2iz+0x30>
   c41cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c41d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c41d4:	d912      	bls.n	c41fc <__aeabi_d2iz+0x3c>
   c41d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c41da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c41de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c41e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c41e6:	fa23 f002 	lsr.w	r0, r3, r2
   c41ea:	bf18      	it	ne
   c41ec:	4240      	negne	r0, r0
   c41ee:	4770      	bx	lr
   c41f0:	f04f 0000 	mov.w	r0, #0
   c41f4:	4770      	bx	lr
   c41f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c41fa:	d105      	bne.n	c4208 <__aeabi_d2iz+0x48>
   c41fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c4200:	bf08      	it	eq
   c4202:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c4206:	4770      	bx	lr
   c4208:	f04f 0000 	mov.w	r0, #0
   c420c:	4770      	bx	lr
   c420e:	bf00      	nop

000c4210 <__aeabi_d2uiz>:
   c4210:	004a      	lsls	r2, r1, #1
   c4212:	d211      	bcs.n	c4238 <__aeabi_d2uiz+0x28>
   c4214:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4218:	d211      	bcs.n	c423e <__aeabi_d2uiz+0x2e>
   c421a:	d50d      	bpl.n	c4238 <__aeabi_d2uiz+0x28>
   c421c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4220:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4224:	d40e      	bmi.n	c4244 <__aeabi_d2uiz+0x34>
   c4226:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c422a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c422e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4232:	fa23 f002 	lsr.w	r0, r3, r2
   c4236:	4770      	bx	lr
   c4238:	f04f 0000 	mov.w	r0, #0
   c423c:	4770      	bx	lr
   c423e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c4242:	d102      	bne.n	c424a <__aeabi_d2uiz+0x3a>
   c4244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4248:	4770      	bx	lr
   c424a:	f04f 0000 	mov.w	r0, #0
   c424e:	4770      	bx	lr

000c4250 <__aeabi_d2f>:
   c4250:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4254:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c4258:	bf24      	itt	cs
   c425a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c425e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c4262:	d90d      	bls.n	c4280 <__aeabi_d2f+0x30>
   c4264:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c4268:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c426c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4270:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c4274:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4278:	bf08      	it	eq
   c427a:	f020 0001 	biceq.w	r0, r0, #1
   c427e:	4770      	bx	lr
   c4280:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c4284:	d121      	bne.n	c42ca <__aeabi_d2f+0x7a>
   c4286:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c428a:	bfbc      	itt	lt
   c428c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4290:	4770      	bxlt	lr
   c4292:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4296:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c429a:	f1c2 0218 	rsb	r2, r2, #24
   c429e:	f1c2 0c20 	rsb	ip, r2, #32
   c42a2:	fa10 f30c 	lsls.w	r3, r0, ip
   c42a6:	fa20 f002 	lsr.w	r0, r0, r2
   c42aa:	bf18      	it	ne
   c42ac:	f040 0001 	orrne.w	r0, r0, #1
   c42b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c42b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c42b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   c42bc:	ea40 000c 	orr.w	r0, r0, ip
   c42c0:	fa23 f302 	lsr.w	r3, r3, r2
   c42c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c42c8:	e7cc      	b.n	c4264 <__aeabi_d2f+0x14>
   c42ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c42ce:	d107      	bne.n	c42e0 <__aeabi_d2f+0x90>
   c42d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c42d4:	bf1e      	ittt	ne
   c42d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c42da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c42de:	4770      	bxne	lr
   c42e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c42e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c42e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c42ec:	4770      	bx	lr
   c42ee:	bf00      	nop

000c42f0 <__aeabi_d2ulz>:
   c42f0:	b5d0      	push	{r4, r6, r7, lr}
   c42f2:	4b0c      	ldr	r3, [pc, #48]	; (c4324 <__aeabi_d2ulz+0x34>)
   c42f4:	2200      	movs	r2, #0
   c42f6:	4606      	mov	r6, r0
   c42f8:	460f      	mov	r7, r1
   c42fa:	f7ff fcb1 	bl	c3c60 <__aeabi_dmul>
   c42fe:	f7ff ff87 	bl	c4210 <__aeabi_d2uiz>
   c4302:	4604      	mov	r4, r0
   c4304:	f7ff fc32 	bl	c3b6c <__aeabi_ui2d>
   c4308:	4b07      	ldr	r3, [pc, #28]	; (c4328 <__aeabi_d2ulz+0x38>)
   c430a:	2200      	movs	r2, #0
   c430c:	f7ff fca8 	bl	c3c60 <__aeabi_dmul>
   c4310:	4602      	mov	r2, r0
   c4312:	460b      	mov	r3, r1
   c4314:	4630      	mov	r0, r6
   c4316:	4639      	mov	r1, r7
   c4318:	f7ff faea 	bl	c38f0 <__aeabi_dsub>
   c431c:	f7ff ff78 	bl	c4210 <__aeabi_d2uiz>
   c4320:	4621      	mov	r1, r4
   c4322:	bdd0      	pop	{r4, r6, r7, pc}
   c4324:	3df00000 	.word	0x3df00000
   c4328:	41f00000 	.word	0x41f00000

000c432c <atexit>:
   c432c:	2300      	movs	r3, #0
   c432e:	4601      	mov	r1, r0
   c4330:	461a      	mov	r2, r3
   c4332:	4618      	mov	r0, r3
   c4334:	f001 b806 	b.w	c5344 <__register_exitproc>

000c4338 <atof>:
   c4338:	2100      	movs	r1, #0
   c433a:	f000 bf6b 	b.w	c5214 <strtod>

000c433e <atoi>:
   c433e:	220a      	movs	r2, #10
   c4340:	2100      	movs	r1, #0
   c4342:	f000 bff5 	b.w	c5330 <strtol>
	...

000c4348 <isprint>:
   c4348:	4b02      	ldr	r3, [pc, #8]	; (c4354 <isprint+0xc>)
   c434a:	4418      	add	r0, r3
   c434c:	7840      	ldrb	r0, [r0, #1]
   c434e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c4352:	4770      	bx	lr
   c4354:	000c8500 	.word	0x000c8500

000c4358 <memcmp>:
   c4358:	b510      	push	{r4, lr}
   c435a:	3901      	subs	r1, #1
   c435c:	4402      	add	r2, r0
   c435e:	4290      	cmp	r0, r2
   c4360:	d101      	bne.n	c4366 <memcmp+0xe>
   c4362:	2000      	movs	r0, #0
   c4364:	e005      	b.n	c4372 <memcmp+0x1a>
   c4366:	7803      	ldrb	r3, [r0, #0]
   c4368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c436c:	42a3      	cmp	r3, r4
   c436e:	d001      	beq.n	c4374 <memcmp+0x1c>
   c4370:	1b18      	subs	r0, r3, r4
   c4372:	bd10      	pop	{r4, pc}
   c4374:	3001      	adds	r0, #1
   c4376:	e7f2      	b.n	c435e <memcmp+0x6>

000c4378 <memcpy>:
   c4378:	440a      	add	r2, r1
   c437a:	4291      	cmp	r1, r2
   c437c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c4380:	d100      	bne.n	c4384 <memcpy+0xc>
   c4382:	4770      	bx	lr
   c4384:	b510      	push	{r4, lr}
   c4386:	f811 4b01 	ldrb.w	r4, [r1], #1
   c438a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c438e:	4291      	cmp	r1, r2
   c4390:	d1f9      	bne.n	c4386 <memcpy+0xe>
   c4392:	bd10      	pop	{r4, pc}

000c4394 <memmove>:
   c4394:	4288      	cmp	r0, r1
   c4396:	b510      	push	{r4, lr}
   c4398:	eb01 0402 	add.w	r4, r1, r2
   c439c:	d902      	bls.n	c43a4 <memmove+0x10>
   c439e:	4284      	cmp	r4, r0
   c43a0:	4623      	mov	r3, r4
   c43a2:	d807      	bhi.n	c43b4 <memmove+0x20>
   c43a4:	1e43      	subs	r3, r0, #1
   c43a6:	42a1      	cmp	r1, r4
   c43a8:	d008      	beq.n	c43bc <memmove+0x28>
   c43aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   c43ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   c43b2:	e7f8      	b.n	c43a6 <memmove+0x12>
   c43b4:	4402      	add	r2, r0
   c43b6:	4601      	mov	r1, r0
   c43b8:	428a      	cmp	r2, r1
   c43ba:	d100      	bne.n	c43be <memmove+0x2a>
   c43bc:	bd10      	pop	{r4, pc}
   c43be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c43c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c43c6:	e7f7      	b.n	c43b8 <memmove+0x24>

000c43c8 <memset>:
   c43c8:	4402      	add	r2, r0
   c43ca:	4603      	mov	r3, r0
   c43cc:	4293      	cmp	r3, r2
   c43ce:	d100      	bne.n	c43d2 <memset+0xa>
   c43d0:	4770      	bx	lr
   c43d2:	f803 1b01 	strb.w	r1, [r3], #1
   c43d6:	e7f9      	b.n	c43cc <memset+0x4>

000c43d8 <srand>:
   c43d8:	b538      	push	{r3, r4, r5, lr}
   c43da:	4b10      	ldr	r3, [pc, #64]	; (c441c <srand+0x44>)
   c43dc:	681d      	ldr	r5, [r3, #0]
   c43de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c43e0:	4604      	mov	r4, r0
   c43e2:	b9b3      	cbnz	r3, c4412 <srand+0x3a>
   c43e4:	2018      	movs	r0, #24
   c43e6:	f7f9 fe73 	bl	be0d0 <malloc>
   c43ea:	4602      	mov	r2, r0
   c43ec:	63a8      	str	r0, [r5, #56]	; 0x38
   c43ee:	b920      	cbnz	r0, c43fa <srand+0x22>
   c43f0:	4b0b      	ldr	r3, [pc, #44]	; (c4420 <srand+0x48>)
   c43f2:	480c      	ldr	r0, [pc, #48]	; (c4424 <srand+0x4c>)
   c43f4:	2142      	movs	r1, #66	; 0x42
   c43f6:	f7f9 febb 	bl	be170 <__assert_func>
   c43fa:	490b      	ldr	r1, [pc, #44]	; (c4428 <srand+0x50>)
   c43fc:	4b0b      	ldr	r3, [pc, #44]	; (c442c <srand+0x54>)
   c43fe:	e9c0 1300 	strd	r1, r3, [r0]
   c4402:	4b0b      	ldr	r3, [pc, #44]	; (c4430 <srand+0x58>)
   c4404:	6083      	str	r3, [r0, #8]
   c4406:	230b      	movs	r3, #11
   c4408:	8183      	strh	r3, [r0, #12]
   c440a:	2100      	movs	r1, #0
   c440c:	2001      	movs	r0, #1
   c440e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c4412:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4414:	2200      	movs	r2, #0
   c4416:	611c      	str	r4, [r3, #16]
   c4418:	615a      	str	r2, [r3, #20]
   c441a:	bd38      	pop	{r3, r4, r5, pc}
   c441c:	2003db68 	.word	0x2003db68
   c4420:	000c8430 	.word	0x000c8430
   c4424:	000c8447 	.word	0x000c8447
   c4428:	abcd330e 	.word	0xabcd330e
   c442c:	e66d1234 	.word	0xe66d1234
   c4430:	0005deec 	.word	0x0005deec

000c4434 <strcat>:
   c4434:	b510      	push	{r4, lr}
   c4436:	4602      	mov	r2, r0
   c4438:	7814      	ldrb	r4, [r2, #0]
   c443a:	4613      	mov	r3, r2
   c443c:	3201      	adds	r2, #1
   c443e:	2c00      	cmp	r4, #0
   c4440:	d1fa      	bne.n	c4438 <strcat+0x4>
   c4442:	3b01      	subs	r3, #1
   c4444:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4448:	f803 2f01 	strb.w	r2, [r3, #1]!
   c444c:	2a00      	cmp	r2, #0
   c444e:	d1f9      	bne.n	c4444 <strcat+0x10>
   c4450:	bd10      	pop	{r4, pc}

000c4452 <strchr>:
   c4452:	b2c9      	uxtb	r1, r1
   c4454:	4603      	mov	r3, r0
   c4456:	f810 2b01 	ldrb.w	r2, [r0], #1
   c445a:	b11a      	cbz	r2, c4464 <strchr+0x12>
   c445c:	428a      	cmp	r2, r1
   c445e:	d1f9      	bne.n	c4454 <strchr+0x2>
   c4460:	4618      	mov	r0, r3
   c4462:	4770      	bx	lr
   c4464:	2900      	cmp	r1, #0
   c4466:	bf18      	it	ne
   c4468:	2300      	movne	r3, #0
   c446a:	e7f9      	b.n	c4460 <strchr+0xe>

000c446c <strchrnul>:
   c446c:	b510      	push	{r4, lr}
   c446e:	4604      	mov	r4, r0
   c4470:	f7ff ffef 	bl	c4452 <strchr>
   c4474:	b918      	cbnz	r0, c447e <strchrnul+0x12>
   c4476:	4620      	mov	r0, r4
   c4478:	f000 f831 	bl	c44de <strlen>
   c447c:	4420      	add	r0, r4
   c447e:	bd10      	pop	{r4, pc}

000c4480 <strcmp>:
   c4480:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4484:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4488:	2a01      	cmp	r2, #1
   c448a:	bf28      	it	cs
   c448c:	429a      	cmpcs	r2, r3
   c448e:	d0f7      	beq.n	c4480 <strcmp>
   c4490:	1ad0      	subs	r0, r2, r3
   c4492:	4770      	bx	lr

000c4494 <strcpy>:
   c4494:	4603      	mov	r3, r0
   c4496:	f811 2b01 	ldrb.w	r2, [r1], #1
   c449a:	f803 2b01 	strb.w	r2, [r3], #1
   c449e:	2a00      	cmp	r2, #0
   c44a0:	d1f9      	bne.n	c4496 <strcpy+0x2>
   c44a2:	4770      	bx	lr

000c44a4 <strdup>:
   c44a4:	4b02      	ldr	r3, [pc, #8]	; (c44b0 <strdup+0xc>)
   c44a6:	4601      	mov	r1, r0
   c44a8:	6818      	ldr	r0, [r3, #0]
   c44aa:	f000 b803 	b.w	c44b4 <_strdup_r>
   c44ae:	bf00      	nop
   c44b0:	2003db68 	.word	0x2003db68

000c44b4 <_strdup_r>:
   c44b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c44b6:	4604      	mov	r4, r0
   c44b8:	4608      	mov	r0, r1
   c44ba:	460d      	mov	r5, r1
   c44bc:	f000 f80f 	bl	c44de <strlen>
   c44c0:	1c42      	adds	r2, r0, #1
   c44c2:	4611      	mov	r1, r2
   c44c4:	4620      	mov	r0, r4
   c44c6:	9201      	str	r2, [sp, #4]
   c44c8:	f7f9 fe42 	bl	be150 <_malloc_r>
   c44cc:	4604      	mov	r4, r0
   c44ce:	b118      	cbz	r0, c44d8 <_strdup_r+0x24>
   c44d0:	9a01      	ldr	r2, [sp, #4]
   c44d2:	4629      	mov	r1, r5
   c44d4:	f7ff ff50 	bl	c4378 <memcpy>
   c44d8:	4620      	mov	r0, r4
   c44da:	b003      	add	sp, #12
   c44dc:	bd30      	pop	{r4, r5, pc}

000c44de <strlen>:
   c44de:	4603      	mov	r3, r0
   c44e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   c44e4:	2a00      	cmp	r2, #0
   c44e6:	d1fb      	bne.n	c44e0 <strlen+0x2>
   c44e8:	1a18      	subs	r0, r3, r0
   c44ea:	3801      	subs	r0, #1
   c44ec:	4770      	bx	lr
	...

000c44f0 <strlwr>:
   c44f0:	b510      	push	{r4, lr}
   c44f2:	4c07      	ldr	r4, [pc, #28]	; (c4510 <strlwr+0x20>)
   c44f4:	1e42      	subs	r2, r0, #1
   c44f6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c44fa:	b903      	cbnz	r3, c44fe <strlwr+0xe>
   c44fc:	bd10      	pop	{r4, pc}
   c44fe:	5ce1      	ldrb	r1, [r4, r3]
   c4500:	f001 0103 	and.w	r1, r1, #3
   c4504:	2901      	cmp	r1, #1
   c4506:	bf08      	it	eq
   c4508:	3320      	addeq	r3, #32
   c450a:	7013      	strb	r3, [r2, #0]
   c450c:	e7f3      	b.n	c44f6 <strlwr+0x6>
   c450e:	bf00      	nop
   c4510:	000c8501 	.word	0x000c8501

000c4514 <strncmp>:
   c4514:	b510      	push	{r4, lr}
   c4516:	b17a      	cbz	r2, c4538 <strncmp+0x24>
   c4518:	4603      	mov	r3, r0
   c451a:	3901      	subs	r1, #1
   c451c:	1884      	adds	r4, r0, r2
   c451e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4522:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c4526:	4290      	cmp	r0, r2
   c4528:	d101      	bne.n	c452e <strncmp+0x1a>
   c452a:	42a3      	cmp	r3, r4
   c452c:	d101      	bne.n	c4532 <strncmp+0x1e>
   c452e:	1a80      	subs	r0, r0, r2
   c4530:	bd10      	pop	{r4, pc}
   c4532:	2800      	cmp	r0, #0
   c4534:	d1f3      	bne.n	c451e <strncmp+0xa>
   c4536:	e7fa      	b.n	c452e <strncmp+0x1a>
   c4538:	4610      	mov	r0, r2
   c453a:	e7f9      	b.n	c4530 <strncmp+0x1c>

000c453c <strncpy>:
   c453c:	b510      	push	{r4, lr}
   c453e:	3901      	subs	r1, #1
   c4540:	4603      	mov	r3, r0
   c4542:	b132      	cbz	r2, c4552 <strncpy+0x16>
   c4544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4548:	f803 4b01 	strb.w	r4, [r3], #1
   c454c:	3a01      	subs	r2, #1
   c454e:	2c00      	cmp	r4, #0
   c4550:	d1f7      	bne.n	c4542 <strncpy+0x6>
   c4552:	441a      	add	r2, r3
   c4554:	2100      	movs	r1, #0
   c4556:	4293      	cmp	r3, r2
   c4558:	d100      	bne.n	c455c <strncpy+0x20>
   c455a:	bd10      	pop	{r4, pc}
   c455c:	f803 1b01 	strb.w	r1, [r3], #1
   c4560:	e7f9      	b.n	c4556 <strncpy+0x1a>

000c4562 <strnlen>:
   c4562:	b510      	push	{r4, lr}
   c4564:	4602      	mov	r2, r0
   c4566:	4401      	add	r1, r0
   c4568:	428a      	cmp	r2, r1
   c456a:	4613      	mov	r3, r2
   c456c:	d003      	beq.n	c4576 <strnlen+0x14>
   c456e:	781c      	ldrb	r4, [r3, #0]
   c4570:	3201      	adds	r2, #1
   c4572:	2c00      	cmp	r4, #0
   c4574:	d1f8      	bne.n	c4568 <strnlen+0x6>
   c4576:	1a18      	subs	r0, r3, r0
   c4578:	bd10      	pop	{r4, pc}

000c457a <strrchr>:
   c457a:	b538      	push	{r3, r4, r5, lr}
   c457c:	4603      	mov	r3, r0
   c457e:	460c      	mov	r4, r1
   c4580:	b969      	cbnz	r1, c459e <strrchr+0x24>
   c4582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4586:	f7ff bf64 	b.w	c4452 <strchr>
   c458a:	1c43      	adds	r3, r0, #1
   c458c:	4605      	mov	r5, r0
   c458e:	4621      	mov	r1, r4
   c4590:	4618      	mov	r0, r3
   c4592:	f7ff ff5e 	bl	c4452 <strchr>
   c4596:	2800      	cmp	r0, #0
   c4598:	d1f7      	bne.n	c458a <strrchr+0x10>
   c459a:	4628      	mov	r0, r5
   c459c:	bd38      	pop	{r3, r4, r5, pc}
   c459e:	2500      	movs	r5, #0
   c45a0:	e7f5      	b.n	c458e <strrchr+0x14>

000c45a2 <strstr>:
   c45a2:	780a      	ldrb	r2, [r1, #0]
   c45a4:	b570      	push	{r4, r5, r6, lr}
   c45a6:	b96a      	cbnz	r2, c45c4 <strstr+0x22>
   c45a8:	bd70      	pop	{r4, r5, r6, pc}
   c45aa:	429a      	cmp	r2, r3
   c45ac:	d109      	bne.n	c45c2 <strstr+0x20>
   c45ae:	460c      	mov	r4, r1
   c45b0:	4605      	mov	r5, r0
   c45b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c45b6:	2b00      	cmp	r3, #0
   c45b8:	d0f6      	beq.n	c45a8 <strstr+0x6>
   c45ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c45be:	429e      	cmp	r6, r3
   c45c0:	d0f7      	beq.n	c45b2 <strstr+0x10>
   c45c2:	3001      	adds	r0, #1
   c45c4:	7803      	ldrb	r3, [r0, #0]
   c45c6:	2b00      	cmp	r3, #0
   c45c8:	d1ef      	bne.n	c45aa <strstr+0x8>
   c45ca:	4618      	mov	r0, r3
   c45cc:	e7ec      	b.n	c45a8 <strstr+0x6>

000c45ce <sulp>:
   c45ce:	b570      	push	{r4, r5, r6, lr}
   c45d0:	4604      	mov	r4, r0
   c45d2:	460d      	mov	r5, r1
   c45d4:	ec45 4b10 	vmov	d0, r4, r5
   c45d8:	4616      	mov	r6, r2
   c45da:	f001 fe0d 	bl	c61f8 <__ulp>
   c45de:	ec51 0b10 	vmov	r0, r1, d0
   c45e2:	b17e      	cbz	r6, c4604 <sulp+0x36>
   c45e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c45e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c45ec:	2b00      	cmp	r3, #0
   c45ee:	dd09      	ble.n	c4604 <sulp+0x36>
   c45f0:	051b      	lsls	r3, r3, #20
   c45f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c45f6:	2400      	movs	r4, #0
   c45f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c45fc:	4622      	mov	r2, r4
   c45fe:	462b      	mov	r3, r5
   c4600:	f7ff fb2e 	bl	c3c60 <__aeabi_dmul>
   c4604:	bd70      	pop	{r4, r5, r6, pc}
	...

000c4608 <_strtod_l>:
   c4608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c460c:	ed2d 8b02 	vpush	{d8}
   c4610:	b09d      	sub	sp, #116	; 0x74
   c4612:	461f      	mov	r7, r3
   c4614:	2300      	movs	r3, #0
   c4616:	9318      	str	r3, [sp, #96]	; 0x60
   c4618:	4ba2      	ldr	r3, [pc, #648]	; (c48a4 <_strtod_l+0x29c>)
   c461a:	9213      	str	r2, [sp, #76]	; 0x4c
   c461c:	681b      	ldr	r3, [r3, #0]
   c461e:	9305      	str	r3, [sp, #20]
   c4620:	4604      	mov	r4, r0
   c4622:	4618      	mov	r0, r3
   c4624:	4688      	mov	r8, r1
   c4626:	f7ff ff5a 	bl	c44de <strlen>
   c462a:	f04f 0a00 	mov.w	sl, #0
   c462e:	4605      	mov	r5, r0
   c4630:	f04f 0b00 	mov.w	fp, #0
   c4634:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c463a:	781a      	ldrb	r2, [r3, #0]
   c463c:	2a2b      	cmp	r2, #43	; 0x2b
   c463e:	d04e      	beq.n	c46de <_strtod_l+0xd6>
   c4640:	d83b      	bhi.n	c46ba <_strtod_l+0xb2>
   c4642:	2a0d      	cmp	r2, #13
   c4644:	d834      	bhi.n	c46b0 <_strtod_l+0xa8>
   c4646:	2a08      	cmp	r2, #8
   c4648:	d834      	bhi.n	c46b4 <_strtod_l+0xac>
   c464a:	2a00      	cmp	r2, #0
   c464c:	d03e      	beq.n	c46cc <_strtod_l+0xc4>
   c464e:	2300      	movs	r3, #0
   c4650:	930a      	str	r3, [sp, #40]	; 0x28
   c4652:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c4654:	7833      	ldrb	r3, [r6, #0]
   c4656:	2b30      	cmp	r3, #48	; 0x30
   c4658:	f040 80b0 	bne.w	c47bc <_strtod_l+0x1b4>
   c465c:	7873      	ldrb	r3, [r6, #1]
   c465e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4662:	2b58      	cmp	r3, #88	; 0x58
   c4664:	d168      	bne.n	c4738 <_strtod_l+0x130>
   c4666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4668:	9301      	str	r3, [sp, #4]
   c466a:	ab18      	add	r3, sp, #96	; 0x60
   c466c:	9702      	str	r7, [sp, #8]
   c466e:	9300      	str	r3, [sp, #0]
   c4670:	4a8d      	ldr	r2, [pc, #564]	; (c48a8 <_strtod_l+0x2a0>)
   c4672:	ab19      	add	r3, sp, #100	; 0x64
   c4674:	a917      	add	r1, sp, #92	; 0x5c
   c4676:	4620      	mov	r0, r4
   c4678:	f000 ff2e 	bl	c54d8 <__gethex>
   c467c:	f010 0707 	ands.w	r7, r0, #7
   c4680:	4605      	mov	r5, r0
   c4682:	d005      	beq.n	c4690 <_strtod_l+0x88>
   c4684:	2f06      	cmp	r7, #6
   c4686:	d12c      	bne.n	c46e2 <_strtod_l+0xda>
   c4688:	3601      	adds	r6, #1
   c468a:	2300      	movs	r3, #0
   c468c:	9617      	str	r6, [sp, #92]	; 0x5c
   c468e:	930a      	str	r3, [sp, #40]	; 0x28
   c4690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4692:	2b00      	cmp	r3, #0
   c4694:	f040 8590 	bne.w	c51b8 <_strtod_l+0xbb0>
   c4698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c469a:	b1eb      	cbz	r3, c46d8 <_strtod_l+0xd0>
   c469c:	4652      	mov	r2, sl
   c469e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c46a2:	ec43 2b10 	vmov	d0, r2, r3
   c46a6:	b01d      	add	sp, #116	; 0x74
   c46a8:	ecbd 8b02 	vpop	{d8}
   c46ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c46b0:	2a20      	cmp	r2, #32
   c46b2:	d1cc      	bne.n	c464e <_strtod_l+0x46>
   c46b4:	3301      	adds	r3, #1
   c46b6:	9317      	str	r3, [sp, #92]	; 0x5c
   c46b8:	e7be      	b.n	c4638 <_strtod_l+0x30>
   c46ba:	2a2d      	cmp	r2, #45	; 0x2d
   c46bc:	d1c7      	bne.n	c464e <_strtod_l+0x46>
   c46be:	2201      	movs	r2, #1
   c46c0:	920a      	str	r2, [sp, #40]	; 0x28
   c46c2:	1c5a      	adds	r2, r3, #1
   c46c4:	9217      	str	r2, [sp, #92]	; 0x5c
   c46c6:	785b      	ldrb	r3, [r3, #1]
   c46c8:	2b00      	cmp	r3, #0
   c46ca:	d1c2      	bne.n	c4652 <_strtod_l+0x4a>
   c46cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c46ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c46d2:	2b00      	cmp	r3, #0
   c46d4:	f040 856e 	bne.w	c51b4 <_strtod_l+0xbac>
   c46d8:	4652      	mov	r2, sl
   c46da:	465b      	mov	r3, fp
   c46dc:	e7e1      	b.n	c46a2 <_strtod_l+0x9a>
   c46de:	2200      	movs	r2, #0
   c46e0:	e7ee      	b.n	c46c0 <_strtod_l+0xb8>
   c46e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c46e4:	b13a      	cbz	r2, c46f6 <_strtod_l+0xee>
   c46e6:	2135      	movs	r1, #53	; 0x35
   c46e8:	a81a      	add	r0, sp, #104	; 0x68
   c46ea:	f001 fe90 	bl	c640e <__copybits>
   c46ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   c46f0:	4620      	mov	r0, r4
   c46f2:	f001 fa4f 	bl	c5b94 <_Bfree>
   c46f6:	3f01      	subs	r7, #1
   c46f8:	2f04      	cmp	r7, #4
   c46fa:	d806      	bhi.n	c470a <_strtod_l+0x102>
   c46fc:	e8df f007 	tbb	[pc, r7]
   c4700:	1714030a 	.word	0x1714030a
   c4704:	0a          	.byte	0x0a
   c4705:	00          	.byte	0x00
   c4706:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c470a:	0728      	lsls	r0, r5, #28
   c470c:	d5c0      	bpl.n	c4690 <_strtod_l+0x88>
   c470e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c4712:	e7bd      	b.n	c4690 <_strtod_l+0x88>
   c4714:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c4718:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c471a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c471e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c4722:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c4726:	e7f0      	b.n	c470a <_strtod_l+0x102>
   c4728:	f8df b180 	ldr.w	fp, [pc, #384]	; c48ac <_strtod_l+0x2a4>
   c472c:	e7ed      	b.n	c470a <_strtod_l+0x102>
   c472e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c4732:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4736:	e7e8      	b.n	c470a <_strtod_l+0x102>
   c4738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c473a:	1c5a      	adds	r2, r3, #1
   c473c:	9217      	str	r2, [sp, #92]	; 0x5c
   c473e:	785b      	ldrb	r3, [r3, #1]
   c4740:	2b30      	cmp	r3, #48	; 0x30
   c4742:	d0f9      	beq.n	c4738 <_strtod_l+0x130>
   c4744:	2b00      	cmp	r3, #0
   c4746:	d0a3      	beq.n	c4690 <_strtod_l+0x88>
   c4748:	2301      	movs	r3, #1
   c474a:	f04f 0900 	mov.w	r9, #0
   c474e:	9304      	str	r3, [sp, #16]
   c4750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4752:	9308      	str	r3, [sp, #32]
   c4754:	f8cd 901c 	str.w	r9, [sp, #28]
   c4758:	464f      	mov	r7, r9
   c475a:	220a      	movs	r2, #10
   c475c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c475e:	7806      	ldrb	r6, [r0, #0]
   c4760:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c4764:	b2d9      	uxtb	r1, r3
   c4766:	2909      	cmp	r1, #9
   c4768:	d92a      	bls.n	c47c0 <_strtod_l+0x1b8>
   c476a:	9905      	ldr	r1, [sp, #20]
   c476c:	462a      	mov	r2, r5
   c476e:	f7ff fed1 	bl	c4514 <strncmp>
   c4772:	b398      	cbz	r0, c47dc <_strtod_l+0x1d4>
   c4774:	2000      	movs	r0, #0
   c4776:	4632      	mov	r2, r6
   c4778:	463d      	mov	r5, r7
   c477a:	9005      	str	r0, [sp, #20]
   c477c:	4603      	mov	r3, r0
   c477e:	2a65      	cmp	r2, #101	; 0x65
   c4780:	d001      	beq.n	c4786 <_strtod_l+0x17e>
   c4782:	2a45      	cmp	r2, #69	; 0x45
   c4784:	d118      	bne.n	c47b8 <_strtod_l+0x1b0>
   c4786:	b91d      	cbnz	r5, c4790 <_strtod_l+0x188>
   c4788:	9a04      	ldr	r2, [sp, #16]
   c478a:	4302      	orrs	r2, r0
   c478c:	d09e      	beq.n	c46cc <_strtod_l+0xc4>
   c478e:	2500      	movs	r5, #0
   c4790:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4794:	f108 0201 	add.w	r2, r8, #1
   c4798:	9217      	str	r2, [sp, #92]	; 0x5c
   c479a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c479e:	2a2b      	cmp	r2, #43	; 0x2b
   c47a0:	d075      	beq.n	c488e <_strtod_l+0x286>
   c47a2:	2a2d      	cmp	r2, #45	; 0x2d
   c47a4:	d07b      	beq.n	c489e <_strtod_l+0x296>
   c47a6:	f04f 0c00 	mov.w	ip, #0
   c47aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c47ae:	2909      	cmp	r1, #9
   c47b0:	f240 8082 	bls.w	c48b8 <_strtod_l+0x2b0>
   c47b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c47b8:	2600      	movs	r6, #0
   c47ba:	e09d      	b.n	c48f8 <_strtod_l+0x2f0>
   c47bc:	2300      	movs	r3, #0
   c47be:	e7c4      	b.n	c474a <_strtod_l+0x142>
   c47c0:	2f08      	cmp	r7, #8
   c47c2:	bfd8      	it	le
   c47c4:	9907      	ldrle	r1, [sp, #28]
   c47c6:	f100 0001 	add.w	r0, r0, #1
   c47ca:	bfda      	itte	le
   c47cc:	fb02 3301 	mlale	r3, r2, r1, r3
   c47d0:	9307      	strle	r3, [sp, #28]
   c47d2:	fb02 3909 	mlagt	r9, r2, r9, r3
   c47d6:	3701      	adds	r7, #1
   c47d8:	9017      	str	r0, [sp, #92]	; 0x5c
   c47da:	e7bf      	b.n	c475c <_strtod_l+0x154>
   c47dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47de:	195a      	adds	r2, r3, r5
   c47e0:	9217      	str	r2, [sp, #92]	; 0x5c
   c47e2:	5d5a      	ldrb	r2, [r3, r5]
   c47e4:	2f00      	cmp	r7, #0
   c47e6:	d037      	beq.n	c4858 <_strtod_l+0x250>
   c47e8:	9005      	str	r0, [sp, #20]
   c47ea:	463d      	mov	r5, r7
   c47ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c47f0:	2b09      	cmp	r3, #9
   c47f2:	d912      	bls.n	c481a <_strtod_l+0x212>
   c47f4:	2301      	movs	r3, #1
   c47f6:	e7c2      	b.n	c477e <_strtod_l+0x176>
   c47f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47fa:	1c5a      	adds	r2, r3, #1
   c47fc:	9217      	str	r2, [sp, #92]	; 0x5c
   c47fe:	785a      	ldrb	r2, [r3, #1]
   c4800:	3001      	adds	r0, #1
   c4802:	2a30      	cmp	r2, #48	; 0x30
   c4804:	d0f8      	beq.n	c47f8 <_strtod_l+0x1f0>
   c4806:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c480a:	2b08      	cmp	r3, #8
   c480c:	f200 84d9 	bhi.w	c51c2 <_strtod_l+0xbba>
   c4810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4812:	9005      	str	r0, [sp, #20]
   c4814:	2000      	movs	r0, #0
   c4816:	9308      	str	r3, [sp, #32]
   c4818:	4605      	mov	r5, r0
   c481a:	3a30      	subs	r2, #48	; 0x30
   c481c:	f100 0301 	add.w	r3, r0, #1
   c4820:	d014      	beq.n	c484c <_strtod_l+0x244>
   c4822:	9905      	ldr	r1, [sp, #20]
   c4824:	4419      	add	r1, r3
   c4826:	9105      	str	r1, [sp, #20]
   c4828:	462b      	mov	r3, r5
   c482a:	eb00 0e05 	add.w	lr, r0, r5
   c482e:	210a      	movs	r1, #10
   c4830:	4573      	cmp	r3, lr
   c4832:	d113      	bne.n	c485c <_strtod_l+0x254>
   c4834:	182b      	adds	r3, r5, r0
   c4836:	2b08      	cmp	r3, #8
   c4838:	f105 0501 	add.w	r5, r5, #1
   c483c:	4405      	add	r5, r0
   c483e:	dc1c      	bgt.n	c487a <_strtod_l+0x272>
   c4840:	9907      	ldr	r1, [sp, #28]
   c4842:	230a      	movs	r3, #10
   c4844:	fb03 2301 	mla	r3, r3, r1, r2
   c4848:	9307      	str	r3, [sp, #28]
   c484a:	2300      	movs	r3, #0
   c484c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c484e:	1c51      	adds	r1, r2, #1
   c4850:	9117      	str	r1, [sp, #92]	; 0x5c
   c4852:	7852      	ldrb	r2, [r2, #1]
   c4854:	4618      	mov	r0, r3
   c4856:	e7c9      	b.n	c47ec <_strtod_l+0x1e4>
   c4858:	4638      	mov	r0, r7
   c485a:	e7d2      	b.n	c4802 <_strtod_l+0x1fa>
   c485c:	2b08      	cmp	r3, #8
   c485e:	dc04      	bgt.n	c486a <_strtod_l+0x262>
   c4860:	9e07      	ldr	r6, [sp, #28]
   c4862:	434e      	muls	r6, r1
   c4864:	9607      	str	r6, [sp, #28]
   c4866:	3301      	adds	r3, #1
   c4868:	e7e2      	b.n	c4830 <_strtod_l+0x228>
   c486a:	f103 0c01 	add.w	ip, r3, #1
   c486e:	f1bc 0f10 	cmp.w	ip, #16
   c4872:	bfd8      	it	le
   c4874:	fb01 f909 	mulle.w	r9, r1, r9
   c4878:	e7f5      	b.n	c4866 <_strtod_l+0x25e>
   c487a:	2d10      	cmp	r5, #16
   c487c:	bfdc      	itt	le
   c487e:	230a      	movle	r3, #10
   c4880:	fb03 2909 	mlale	r9, r3, r9, r2
   c4884:	e7e1      	b.n	c484a <_strtod_l+0x242>
   c4886:	2300      	movs	r3, #0
   c4888:	9305      	str	r3, [sp, #20]
   c488a:	2301      	movs	r3, #1
   c488c:	e77c      	b.n	c4788 <_strtod_l+0x180>
   c488e:	f04f 0c00 	mov.w	ip, #0
   c4892:	f108 0202 	add.w	r2, r8, #2
   c4896:	9217      	str	r2, [sp, #92]	; 0x5c
   c4898:	f898 2002 	ldrb.w	r2, [r8, #2]
   c489c:	e785      	b.n	c47aa <_strtod_l+0x1a2>
   c489e:	f04f 0c01 	mov.w	ip, #1
   c48a2:	e7f6      	b.n	c4892 <_strtod_l+0x28a>
   c48a4:	000c8674 	.word	0x000c8674
   c48a8:	000c84ac 	.word	0x000c84ac
   c48ac:	7ff00000 	.word	0x7ff00000
   c48b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c48b2:	1c51      	adds	r1, r2, #1
   c48b4:	9117      	str	r1, [sp, #92]	; 0x5c
   c48b6:	7852      	ldrb	r2, [r2, #1]
   c48b8:	2a30      	cmp	r2, #48	; 0x30
   c48ba:	d0f9      	beq.n	c48b0 <_strtod_l+0x2a8>
   c48bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c48c0:	2908      	cmp	r1, #8
   c48c2:	f63f af79 	bhi.w	c47b8 <_strtod_l+0x1b0>
   c48c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c48ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c48cc:	9206      	str	r2, [sp, #24]
   c48ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c48d0:	1c51      	adds	r1, r2, #1
   c48d2:	9117      	str	r1, [sp, #92]	; 0x5c
   c48d4:	7852      	ldrb	r2, [r2, #1]
   c48d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c48da:	2e09      	cmp	r6, #9
   c48dc:	d937      	bls.n	c494e <_strtod_l+0x346>
   c48de:	9e06      	ldr	r6, [sp, #24]
   c48e0:	1b89      	subs	r1, r1, r6
   c48e2:	2908      	cmp	r1, #8
   c48e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c48e8:	dc02      	bgt.n	c48f0 <_strtod_l+0x2e8>
   c48ea:	4576      	cmp	r6, lr
   c48ec:	bfa8      	it	ge
   c48ee:	4676      	movge	r6, lr
   c48f0:	f1bc 0f00 	cmp.w	ip, #0
   c48f4:	d000      	beq.n	c48f8 <_strtod_l+0x2f0>
   c48f6:	4276      	negs	r6, r6
   c48f8:	2d00      	cmp	r5, #0
   c48fa:	d14d      	bne.n	c4998 <_strtod_l+0x390>
   c48fc:	9904      	ldr	r1, [sp, #16]
   c48fe:	4301      	orrs	r1, r0
   c4900:	f47f aec6 	bne.w	c4690 <_strtod_l+0x88>
   c4904:	2b00      	cmp	r3, #0
   c4906:	f47f aee1 	bne.w	c46cc <_strtod_l+0xc4>
   c490a:	2a69      	cmp	r2, #105	; 0x69
   c490c:	d027      	beq.n	c495e <_strtod_l+0x356>
   c490e:	dc24      	bgt.n	c495a <_strtod_l+0x352>
   c4910:	2a49      	cmp	r2, #73	; 0x49
   c4912:	d024      	beq.n	c495e <_strtod_l+0x356>
   c4914:	2a4e      	cmp	r2, #78	; 0x4e
   c4916:	f47f aed9 	bne.w	c46cc <_strtod_l+0xc4>
   c491a:	499f      	ldr	r1, [pc, #636]	; (c4b98 <_strtod_l+0x590>)
   c491c:	a817      	add	r0, sp, #92	; 0x5c
   c491e:	f001 f833 	bl	c5988 <__match>
   c4922:	2800      	cmp	r0, #0
   c4924:	f43f aed2 	beq.w	c46cc <_strtod_l+0xc4>
   c4928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c492a:	781b      	ldrb	r3, [r3, #0]
   c492c:	2b28      	cmp	r3, #40	; 0x28
   c492e:	d12d      	bne.n	c498c <_strtod_l+0x384>
   c4930:	499a      	ldr	r1, [pc, #616]	; (c4b9c <_strtod_l+0x594>)
   c4932:	aa1a      	add	r2, sp, #104	; 0x68
   c4934:	a817      	add	r0, sp, #92	; 0x5c
   c4936:	f001 f83b 	bl	c59b0 <__hexnan>
   c493a:	2805      	cmp	r0, #5
   c493c:	d126      	bne.n	c498c <_strtod_l+0x384>
   c493e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4940:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4944:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4948:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c494c:	e6a0      	b.n	c4690 <_strtod_l+0x88>
   c494e:	210a      	movs	r1, #10
   c4950:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4954:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4958:	e7b9      	b.n	c48ce <_strtod_l+0x2c6>
   c495a:	2a6e      	cmp	r2, #110	; 0x6e
   c495c:	e7db      	b.n	c4916 <_strtod_l+0x30e>
   c495e:	4990      	ldr	r1, [pc, #576]	; (c4ba0 <_strtod_l+0x598>)
   c4960:	a817      	add	r0, sp, #92	; 0x5c
   c4962:	f001 f811 	bl	c5988 <__match>
   c4966:	2800      	cmp	r0, #0
   c4968:	f43f aeb0 	beq.w	c46cc <_strtod_l+0xc4>
   c496c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c496e:	498d      	ldr	r1, [pc, #564]	; (c4ba4 <_strtod_l+0x59c>)
   c4970:	3b01      	subs	r3, #1
   c4972:	a817      	add	r0, sp, #92	; 0x5c
   c4974:	9317      	str	r3, [sp, #92]	; 0x5c
   c4976:	f001 f807 	bl	c5988 <__match>
   c497a:	b910      	cbnz	r0, c4982 <_strtod_l+0x37a>
   c497c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c497e:	3301      	adds	r3, #1
   c4980:	9317      	str	r3, [sp, #92]	; 0x5c
   c4982:	f8df b230 	ldr.w	fp, [pc, #560]	; c4bb4 <_strtod_l+0x5ac>
   c4986:	f04f 0a00 	mov.w	sl, #0
   c498a:	e681      	b.n	c4690 <_strtod_l+0x88>
   c498c:	4886      	ldr	r0, [pc, #536]	; (c4ba8 <_strtod_l+0x5a0>)
   c498e:	f001 fd93 	bl	c64b8 <nan>
   c4992:	ec5b ab10 	vmov	sl, fp, d0
   c4996:	e67b      	b.n	c4690 <_strtod_l+0x88>
   c4998:	9b05      	ldr	r3, [sp, #20]
   c499a:	9807      	ldr	r0, [sp, #28]
   c499c:	1af3      	subs	r3, r6, r3
   c499e:	2f00      	cmp	r7, #0
   c49a0:	bf08      	it	eq
   c49a2:	462f      	moveq	r7, r5
   c49a4:	2d10      	cmp	r5, #16
   c49a6:	9306      	str	r3, [sp, #24]
   c49a8:	46a8      	mov	r8, r5
   c49aa:	bfa8      	it	ge
   c49ac:	f04f 0810 	movge.w	r8, #16
   c49b0:	f7ff f8dc 	bl	c3b6c <__aeabi_ui2d>
   c49b4:	2d09      	cmp	r5, #9
   c49b6:	4682      	mov	sl, r0
   c49b8:	468b      	mov	fp, r1
   c49ba:	dd13      	ble.n	c49e4 <_strtod_l+0x3dc>
   c49bc:	4b7b      	ldr	r3, [pc, #492]	; (c4bac <_strtod_l+0x5a4>)
   c49be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c49c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c49c6:	f7ff f94b 	bl	c3c60 <__aeabi_dmul>
   c49ca:	4682      	mov	sl, r0
   c49cc:	4648      	mov	r0, r9
   c49ce:	468b      	mov	fp, r1
   c49d0:	f7ff f8cc 	bl	c3b6c <__aeabi_ui2d>
   c49d4:	4602      	mov	r2, r0
   c49d6:	460b      	mov	r3, r1
   c49d8:	4650      	mov	r0, sl
   c49da:	4659      	mov	r1, fp
   c49dc:	f7fe ff8a 	bl	c38f4 <__adddf3>
   c49e0:	4682      	mov	sl, r0
   c49e2:	468b      	mov	fp, r1
   c49e4:	2d0f      	cmp	r5, #15
   c49e6:	dc38      	bgt.n	c4a5a <_strtod_l+0x452>
   c49e8:	9b06      	ldr	r3, [sp, #24]
   c49ea:	2b00      	cmp	r3, #0
   c49ec:	f43f ae50 	beq.w	c4690 <_strtod_l+0x88>
   c49f0:	dd24      	ble.n	c4a3c <_strtod_l+0x434>
   c49f2:	2b16      	cmp	r3, #22
   c49f4:	dc0b      	bgt.n	c4a0e <_strtod_l+0x406>
   c49f6:	496d      	ldr	r1, [pc, #436]	; (c4bac <_strtod_l+0x5a4>)
   c49f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c49fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4a00:	4652      	mov	r2, sl
   c4a02:	465b      	mov	r3, fp
   c4a04:	f7ff f92c 	bl	c3c60 <__aeabi_dmul>
   c4a08:	4682      	mov	sl, r0
   c4a0a:	468b      	mov	fp, r1
   c4a0c:	e640      	b.n	c4690 <_strtod_l+0x88>
   c4a0e:	9a06      	ldr	r2, [sp, #24]
   c4a10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4a14:	4293      	cmp	r3, r2
   c4a16:	db20      	blt.n	c4a5a <_strtod_l+0x452>
   c4a18:	4c64      	ldr	r4, [pc, #400]	; (c4bac <_strtod_l+0x5a4>)
   c4a1a:	f1c5 050f 	rsb	r5, r5, #15
   c4a1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4a22:	4652      	mov	r2, sl
   c4a24:	465b      	mov	r3, fp
   c4a26:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4a2a:	f7ff f919 	bl	c3c60 <__aeabi_dmul>
   c4a2e:	9b06      	ldr	r3, [sp, #24]
   c4a30:	1b5d      	subs	r5, r3, r5
   c4a32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4a36:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4a3a:	e7e3      	b.n	c4a04 <_strtod_l+0x3fc>
   c4a3c:	9b06      	ldr	r3, [sp, #24]
   c4a3e:	3316      	adds	r3, #22
   c4a40:	db0b      	blt.n	c4a5a <_strtod_l+0x452>
   c4a42:	9b05      	ldr	r3, [sp, #20]
   c4a44:	1b9e      	subs	r6, r3, r6
   c4a46:	4b59      	ldr	r3, [pc, #356]	; (c4bac <_strtod_l+0x5a4>)
   c4a48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4a4c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4a50:	4650      	mov	r0, sl
   c4a52:	4659      	mov	r1, fp
   c4a54:	f7ff fa2e 	bl	c3eb4 <__aeabi_ddiv>
   c4a58:	e7d6      	b.n	c4a08 <_strtod_l+0x400>
   c4a5a:	9b06      	ldr	r3, [sp, #24]
   c4a5c:	eba5 0808 	sub.w	r8, r5, r8
   c4a60:	4498      	add	r8, r3
   c4a62:	f1b8 0f00 	cmp.w	r8, #0
   c4a66:	dd74      	ble.n	c4b52 <_strtod_l+0x54a>
   c4a68:	f018 030f 	ands.w	r3, r8, #15
   c4a6c:	d00a      	beq.n	c4a84 <_strtod_l+0x47c>
   c4a6e:	494f      	ldr	r1, [pc, #316]	; (c4bac <_strtod_l+0x5a4>)
   c4a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4a74:	4652      	mov	r2, sl
   c4a76:	465b      	mov	r3, fp
   c4a78:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4a7c:	f7ff f8f0 	bl	c3c60 <__aeabi_dmul>
   c4a80:	4682      	mov	sl, r0
   c4a82:	468b      	mov	fp, r1
   c4a84:	f038 080f 	bics.w	r8, r8, #15
   c4a88:	d04f      	beq.n	c4b2a <_strtod_l+0x522>
   c4a8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4a8e:	dd22      	ble.n	c4ad6 <_strtod_l+0x4ce>
   c4a90:	2500      	movs	r5, #0
   c4a92:	462e      	mov	r6, r5
   c4a94:	9507      	str	r5, [sp, #28]
   c4a96:	9505      	str	r5, [sp, #20]
   c4a98:	2322      	movs	r3, #34	; 0x22
   c4a9a:	f8df b118 	ldr.w	fp, [pc, #280]	; c4bb4 <_strtod_l+0x5ac>
   c4a9e:	6023      	str	r3, [r4, #0]
   c4aa0:	f04f 0a00 	mov.w	sl, #0
   c4aa4:	9b07      	ldr	r3, [sp, #28]
   c4aa6:	2b00      	cmp	r3, #0
   c4aa8:	f43f adf2 	beq.w	c4690 <_strtod_l+0x88>
   c4aac:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4aae:	4620      	mov	r0, r4
   c4ab0:	f001 f870 	bl	c5b94 <_Bfree>
   c4ab4:	9905      	ldr	r1, [sp, #20]
   c4ab6:	4620      	mov	r0, r4
   c4ab8:	f001 f86c 	bl	c5b94 <_Bfree>
   c4abc:	4631      	mov	r1, r6
   c4abe:	4620      	mov	r0, r4
   c4ac0:	f001 f868 	bl	c5b94 <_Bfree>
   c4ac4:	9907      	ldr	r1, [sp, #28]
   c4ac6:	4620      	mov	r0, r4
   c4ac8:	f001 f864 	bl	c5b94 <_Bfree>
   c4acc:	4629      	mov	r1, r5
   c4ace:	4620      	mov	r0, r4
   c4ad0:	f001 f860 	bl	c5b94 <_Bfree>
   c4ad4:	e5dc      	b.n	c4690 <_strtod_l+0x88>
   c4ad6:	4b36      	ldr	r3, [pc, #216]	; (c4bb0 <_strtod_l+0x5a8>)
   c4ad8:	9304      	str	r3, [sp, #16]
   c4ada:	2300      	movs	r3, #0
   c4adc:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4ae0:	4650      	mov	r0, sl
   c4ae2:	4659      	mov	r1, fp
   c4ae4:	4699      	mov	r9, r3
   c4ae6:	f1b8 0f01 	cmp.w	r8, #1
   c4aea:	dc21      	bgt.n	c4b30 <_strtod_l+0x528>
   c4aec:	b10b      	cbz	r3, c4af2 <_strtod_l+0x4ea>
   c4aee:	4682      	mov	sl, r0
   c4af0:	468b      	mov	fp, r1
   c4af2:	4b2f      	ldr	r3, [pc, #188]	; (c4bb0 <_strtod_l+0x5a8>)
   c4af4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4af8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4afc:	4652      	mov	r2, sl
   c4afe:	465b      	mov	r3, fp
   c4b00:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4b04:	f7ff f8ac 	bl	c3c60 <__aeabi_dmul>
   c4b08:	4b2a      	ldr	r3, [pc, #168]	; (c4bb4 <_strtod_l+0x5ac>)
   c4b0a:	460a      	mov	r2, r1
   c4b0c:	400b      	ands	r3, r1
   c4b0e:	492a      	ldr	r1, [pc, #168]	; (c4bb8 <_strtod_l+0x5b0>)
   c4b10:	428b      	cmp	r3, r1
   c4b12:	4682      	mov	sl, r0
   c4b14:	d8bc      	bhi.n	c4a90 <_strtod_l+0x488>
   c4b16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4b1a:	428b      	cmp	r3, r1
   c4b1c:	bf86      	itte	hi
   c4b1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4bbc <_strtod_l+0x5b4>
   c4b22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c4b26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4b2a:	2300      	movs	r3, #0
   c4b2c:	9304      	str	r3, [sp, #16]
   c4b2e:	e084      	b.n	c4c3a <_strtod_l+0x632>
   c4b30:	f018 0f01 	tst.w	r8, #1
   c4b34:	d005      	beq.n	c4b42 <_strtod_l+0x53a>
   c4b36:	9b04      	ldr	r3, [sp, #16]
   c4b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4b3c:	f7ff f890 	bl	c3c60 <__aeabi_dmul>
   c4b40:	2301      	movs	r3, #1
   c4b42:	9a04      	ldr	r2, [sp, #16]
   c4b44:	3208      	adds	r2, #8
   c4b46:	f109 0901 	add.w	r9, r9, #1
   c4b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4b4e:	9204      	str	r2, [sp, #16]
   c4b50:	e7c9      	b.n	c4ae6 <_strtod_l+0x4de>
   c4b52:	d0ea      	beq.n	c4b2a <_strtod_l+0x522>
   c4b54:	f1c8 0800 	rsb	r8, r8, #0
   c4b58:	f018 020f 	ands.w	r2, r8, #15
   c4b5c:	d00a      	beq.n	c4b74 <_strtod_l+0x56c>
   c4b5e:	4b13      	ldr	r3, [pc, #76]	; (c4bac <_strtod_l+0x5a4>)
   c4b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4b64:	4650      	mov	r0, sl
   c4b66:	4659      	mov	r1, fp
   c4b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4b6c:	f7ff f9a2 	bl	c3eb4 <__aeabi_ddiv>
   c4b70:	4682      	mov	sl, r0
   c4b72:	468b      	mov	fp, r1
   c4b74:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4b78:	d0d7      	beq.n	c4b2a <_strtod_l+0x522>
   c4b7a:	f1b8 0f1f 	cmp.w	r8, #31
   c4b7e:	dd1f      	ble.n	c4bc0 <_strtod_l+0x5b8>
   c4b80:	2500      	movs	r5, #0
   c4b82:	462e      	mov	r6, r5
   c4b84:	9507      	str	r5, [sp, #28]
   c4b86:	9505      	str	r5, [sp, #20]
   c4b88:	2322      	movs	r3, #34	; 0x22
   c4b8a:	f04f 0a00 	mov.w	sl, #0
   c4b8e:	f04f 0b00 	mov.w	fp, #0
   c4b92:	6023      	str	r3, [r4, #0]
   c4b94:	e786      	b.n	c4aa4 <_strtod_l+0x49c>
   c4b96:	bf00      	nop
   c4b98:	000c84a9 	.word	0x000c84a9
   c4b9c:	000c84c0 	.word	0x000c84c0
   c4ba0:	000c84a0 	.word	0x000c84a0
   c4ba4:	000c84a3 	.word	0x000c84a3
   c4ba8:	000c7d73 	.word	0x000c7d73
   c4bac:	000c8708 	.word	0x000c8708
   c4bb0:	000c86e0 	.word	0x000c86e0
   c4bb4:	7ff00000 	.word	0x7ff00000
   c4bb8:	7ca00000 	.word	0x7ca00000
   c4bbc:	7fefffff 	.word	0x7fefffff
   c4bc0:	f018 0310 	ands.w	r3, r8, #16
   c4bc4:	bf18      	it	ne
   c4bc6:	236a      	movne	r3, #106	; 0x6a
   c4bc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4f78 <_strtod_l+0x970>
   c4bcc:	9304      	str	r3, [sp, #16]
   c4bce:	4650      	mov	r0, sl
   c4bd0:	4659      	mov	r1, fp
   c4bd2:	2300      	movs	r3, #0
   c4bd4:	f018 0f01 	tst.w	r8, #1
   c4bd8:	d004      	beq.n	c4be4 <_strtod_l+0x5dc>
   c4bda:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4bde:	f7ff f83f 	bl	c3c60 <__aeabi_dmul>
   c4be2:	2301      	movs	r3, #1
   c4be4:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4be8:	f109 0908 	add.w	r9, r9, #8
   c4bec:	d1f2      	bne.n	c4bd4 <_strtod_l+0x5cc>
   c4bee:	b10b      	cbz	r3, c4bf4 <_strtod_l+0x5ec>
   c4bf0:	4682      	mov	sl, r0
   c4bf2:	468b      	mov	fp, r1
   c4bf4:	9b04      	ldr	r3, [sp, #16]
   c4bf6:	b1c3      	cbz	r3, c4c2a <_strtod_l+0x622>
   c4bf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4bfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4c00:	2b00      	cmp	r3, #0
   c4c02:	4659      	mov	r1, fp
   c4c04:	dd11      	ble.n	c4c2a <_strtod_l+0x622>
   c4c06:	2b1f      	cmp	r3, #31
   c4c08:	f340 8124 	ble.w	c4e54 <_strtod_l+0x84c>
   c4c0c:	2b34      	cmp	r3, #52	; 0x34
   c4c0e:	bfde      	ittt	le
   c4c10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4c14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c4c18:	fa03 f202 	lslle.w	r2, r3, r2
   c4c1c:	f04f 0a00 	mov.w	sl, #0
   c4c20:	bfcc      	ite	gt
   c4c22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4c26:	ea02 0b01 	andle.w	fp, r2, r1
   c4c2a:	2200      	movs	r2, #0
   c4c2c:	2300      	movs	r3, #0
   c4c2e:	4650      	mov	r0, sl
   c4c30:	4659      	mov	r1, fp
   c4c32:	f7ff fa7d 	bl	c4130 <__aeabi_dcmpeq>
   c4c36:	2800      	cmp	r0, #0
   c4c38:	d1a2      	bne.n	c4b80 <_strtod_l+0x578>
   c4c3a:	9b07      	ldr	r3, [sp, #28]
   c4c3c:	9300      	str	r3, [sp, #0]
   c4c3e:	9908      	ldr	r1, [sp, #32]
   c4c40:	462b      	mov	r3, r5
   c4c42:	463a      	mov	r2, r7
   c4c44:	4620      	mov	r0, r4
   c4c46:	f001 f80d 	bl	c5c64 <__s2b>
   c4c4a:	9007      	str	r0, [sp, #28]
   c4c4c:	2800      	cmp	r0, #0
   c4c4e:	f43f af1f 	beq.w	c4a90 <_strtod_l+0x488>
   c4c52:	9b05      	ldr	r3, [sp, #20]
   c4c54:	1b9e      	subs	r6, r3, r6
   c4c56:	9b06      	ldr	r3, [sp, #24]
   c4c58:	2b00      	cmp	r3, #0
   c4c5a:	bfb4      	ite	lt
   c4c5c:	4633      	movlt	r3, r6
   c4c5e:	2300      	movge	r3, #0
   c4c60:	930c      	str	r3, [sp, #48]	; 0x30
   c4c62:	9b06      	ldr	r3, [sp, #24]
   c4c64:	2500      	movs	r5, #0
   c4c66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4c6a:	9312      	str	r3, [sp, #72]	; 0x48
   c4c6c:	462e      	mov	r6, r5
   c4c6e:	9b07      	ldr	r3, [sp, #28]
   c4c70:	4620      	mov	r0, r4
   c4c72:	6859      	ldr	r1, [r3, #4]
   c4c74:	f000 ff4e 	bl	c5b14 <_Balloc>
   c4c78:	9005      	str	r0, [sp, #20]
   c4c7a:	2800      	cmp	r0, #0
   c4c7c:	f43f af0c 	beq.w	c4a98 <_strtod_l+0x490>
   c4c80:	9b07      	ldr	r3, [sp, #28]
   c4c82:	691a      	ldr	r2, [r3, #16]
   c4c84:	3202      	adds	r2, #2
   c4c86:	f103 010c 	add.w	r1, r3, #12
   c4c8a:	0092      	lsls	r2, r2, #2
   c4c8c:	300c      	adds	r0, #12
   c4c8e:	f7ff fb73 	bl	c4378 <memcpy>
   c4c92:	ec4b ab10 	vmov	d0, sl, fp
   c4c96:	aa1a      	add	r2, sp, #104	; 0x68
   c4c98:	a919      	add	r1, sp, #100	; 0x64
   c4c9a:	4620      	mov	r0, r4
   c4c9c:	f001 fb28 	bl	c62f0 <__d2b>
   c4ca0:	ec4b ab18 	vmov	d8, sl, fp
   c4ca4:	9018      	str	r0, [sp, #96]	; 0x60
   c4ca6:	2800      	cmp	r0, #0
   c4ca8:	f43f aef6 	beq.w	c4a98 <_strtod_l+0x490>
   c4cac:	2101      	movs	r1, #1
   c4cae:	4620      	mov	r0, r4
   c4cb0:	f001 f872 	bl	c5d98 <__i2b>
   c4cb4:	4606      	mov	r6, r0
   c4cb6:	2800      	cmp	r0, #0
   c4cb8:	f43f aeee 	beq.w	c4a98 <_strtod_l+0x490>
   c4cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4cbe:	9904      	ldr	r1, [sp, #16]
   c4cc0:	2b00      	cmp	r3, #0
   c4cc2:	bfab      	itete	ge
   c4cc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4cc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4cc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4cca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4cce:	bfac      	ite	ge
   c4cd0:	eb03 0902 	addge.w	r9, r3, r2
   c4cd4:	1ad7      	sublt	r7, r2, r3
   c4cd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4cd8:	eba3 0801 	sub.w	r8, r3, r1
   c4cdc:	4490      	add	r8, r2
   c4cde:	4ba1      	ldr	r3, [pc, #644]	; (c4f64 <_strtod_l+0x95c>)
   c4ce0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4ce4:	4598      	cmp	r8, r3
   c4ce6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4cea:	f280 80c7 	bge.w	c4e7c <_strtod_l+0x874>
   c4cee:	eba3 0308 	sub.w	r3, r3, r8
   c4cf2:	2b1f      	cmp	r3, #31
   c4cf4:	eba2 0203 	sub.w	r2, r2, r3
   c4cf8:	f04f 0101 	mov.w	r1, #1
   c4cfc:	f300 80b1 	bgt.w	c4e62 <_strtod_l+0x85a>
   c4d00:	fa01 f303 	lsl.w	r3, r1, r3
   c4d04:	930d      	str	r3, [sp, #52]	; 0x34
   c4d06:	2300      	movs	r3, #0
   c4d08:	9308      	str	r3, [sp, #32]
   c4d0a:	eb09 0802 	add.w	r8, r9, r2
   c4d0e:	9b04      	ldr	r3, [sp, #16]
   c4d10:	45c1      	cmp	r9, r8
   c4d12:	4417      	add	r7, r2
   c4d14:	441f      	add	r7, r3
   c4d16:	464b      	mov	r3, r9
   c4d18:	bfa8      	it	ge
   c4d1a:	4643      	movge	r3, r8
   c4d1c:	42bb      	cmp	r3, r7
   c4d1e:	bfa8      	it	ge
   c4d20:	463b      	movge	r3, r7
   c4d22:	2b00      	cmp	r3, #0
   c4d24:	bfc2      	ittt	gt
   c4d26:	eba8 0803 	subgt.w	r8, r8, r3
   c4d2a:	1aff      	subgt	r7, r7, r3
   c4d2c:	eba9 0903 	subgt.w	r9, r9, r3
   c4d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4d32:	2b00      	cmp	r3, #0
   c4d34:	dd17      	ble.n	c4d66 <_strtod_l+0x75e>
   c4d36:	4631      	mov	r1, r6
   c4d38:	461a      	mov	r2, r3
   c4d3a:	4620      	mov	r0, r4
   c4d3c:	f001 f8ec 	bl	c5f18 <__pow5mult>
   c4d40:	4606      	mov	r6, r0
   c4d42:	2800      	cmp	r0, #0
   c4d44:	f43f aea8 	beq.w	c4a98 <_strtod_l+0x490>
   c4d48:	4601      	mov	r1, r0
   c4d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4d4c:	4620      	mov	r0, r4
   c4d4e:	f001 f839 	bl	c5dc4 <__multiply>
   c4d52:	900b      	str	r0, [sp, #44]	; 0x2c
   c4d54:	2800      	cmp	r0, #0
   c4d56:	f43f ae9f 	beq.w	c4a98 <_strtod_l+0x490>
   c4d5a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4d5c:	4620      	mov	r0, r4
   c4d5e:	f000 ff19 	bl	c5b94 <_Bfree>
   c4d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4d64:	9318      	str	r3, [sp, #96]	; 0x60
   c4d66:	f1b8 0f00 	cmp.w	r8, #0
   c4d6a:	f300 808c 	bgt.w	c4e86 <_strtod_l+0x87e>
   c4d6e:	9b06      	ldr	r3, [sp, #24]
   c4d70:	2b00      	cmp	r3, #0
   c4d72:	dd08      	ble.n	c4d86 <_strtod_l+0x77e>
   c4d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4d76:	9905      	ldr	r1, [sp, #20]
   c4d78:	4620      	mov	r0, r4
   c4d7a:	f001 f8cd 	bl	c5f18 <__pow5mult>
   c4d7e:	9005      	str	r0, [sp, #20]
   c4d80:	2800      	cmp	r0, #0
   c4d82:	f43f ae89 	beq.w	c4a98 <_strtod_l+0x490>
   c4d86:	2f00      	cmp	r7, #0
   c4d88:	dd08      	ble.n	c4d9c <_strtod_l+0x794>
   c4d8a:	9905      	ldr	r1, [sp, #20]
   c4d8c:	463a      	mov	r2, r7
   c4d8e:	4620      	mov	r0, r4
   c4d90:	f001 f91c 	bl	c5fcc <__lshift>
   c4d94:	9005      	str	r0, [sp, #20]
   c4d96:	2800      	cmp	r0, #0
   c4d98:	f43f ae7e 	beq.w	c4a98 <_strtod_l+0x490>
   c4d9c:	f1b9 0f00 	cmp.w	r9, #0
   c4da0:	dd08      	ble.n	c4db4 <_strtod_l+0x7ac>
   c4da2:	4631      	mov	r1, r6
   c4da4:	464a      	mov	r2, r9
   c4da6:	4620      	mov	r0, r4
   c4da8:	f001 f910 	bl	c5fcc <__lshift>
   c4dac:	4606      	mov	r6, r0
   c4dae:	2800      	cmp	r0, #0
   c4db0:	f43f ae72 	beq.w	c4a98 <_strtod_l+0x490>
   c4db4:	9a05      	ldr	r2, [sp, #20]
   c4db6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4db8:	4620      	mov	r0, r4
   c4dba:	f001 f993 	bl	c60e4 <__mdiff>
   c4dbe:	4605      	mov	r5, r0
   c4dc0:	2800      	cmp	r0, #0
   c4dc2:	f43f ae69 	beq.w	c4a98 <_strtod_l+0x490>
   c4dc6:	68c3      	ldr	r3, [r0, #12]
   c4dc8:	930b      	str	r3, [sp, #44]	; 0x2c
   c4dca:	2300      	movs	r3, #0
   c4dcc:	60c3      	str	r3, [r0, #12]
   c4dce:	4631      	mov	r1, r6
   c4dd0:	f001 f96c 	bl	c60ac <__mcmp>
   c4dd4:	2800      	cmp	r0, #0
   c4dd6:	da60      	bge.n	c4e9a <_strtod_l+0x892>
   c4dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4dda:	ea53 030a 	orrs.w	r3, r3, sl
   c4dde:	f040 8082 	bne.w	c4ee6 <_strtod_l+0x8de>
   c4de2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4de6:	2b00      	cmp	r3, #0
   c4de8:	d17d      	bne.n	c4ee6 <_strtod_l+0x8de>
   c4dea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4dee:	0d1b      	lsrs	r3, r3, #20
   c4df0:	051b      	lsls	r3, r3, #20
   c4df2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c4df6:	d976      	bls.n	c4ee6 <_strtod_l+0x8de>
   c4df8:	696b      	ldr	r3, [r5, #20]
   c4dfa:	b913      	cbnz	r3, c4e02 <_strtod_l+0x7fa>
   c4dfc:	692b      	ldr	r3, [r5, #16]
   c4dfe:	2b01      	cmp	r3, #1
   c4e00:	dd71      	ble.n	c4ee6 <_strtod_l+0x8de>
   c4e02:	4629      	mov	r1, r5
   c4e04:	2201      	movs	r2, #1
   c4e06:	4620      	mov	r0, r4
   c4e08:	f001 f8e0 	bl	c5fcc <__lshift>
   c4e0c:	4631      	mov	r1, r6
   c4e0e:	4605      	mov	r5, r0
   c4e10:	f001 f94c 	bl	c60ac <__mcmp>
   c4e14:	2800      	cmp	r0, #0
   c4e16:	dd66      	ble.n	c4ee6 <_strtod_l+0x8de>
   c4e18:	9904      	ldr	r1, [sp, #16]
   c4e1a:	4a53      	ldr	r2, [pc, #332]	; (c4f68 <_strtod_l+0x960>)
   c4e1c:	465b      	mov	r3, fp
   c4e1e:	2900      	cmp	r1, #0
   c4e20:	f000 8081 	beq.w	c4f26 <_strtod_l+0x91e>
   c4e24:	ea02 010b 	and.w	r1, r2, fp
   c4e28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4e2c:	dc7b      	bgt.n	c4f26 <_strtod_l+0x91e>
   c4e2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c4e32:	f77f aea9 	ble.w	c4b88 <_strtod_l+0x580>
   c4e36:	4b4d      	ldr	r3, [pc, #308]	; (c4f6c <_strtod_l+0x964>)
   c4e38:	4650      	mov	r0, sl
   c4e3a:	4659      	mov	r1, fp
   c4e3c:	2200      	movs	r2, #0
   c4e3e:	f7fe ff0f 	bl	c3c60 <__aeabi_dmul>
   c4e42:	460b      	mov	r3, r1
   c4e44:	4303      	orrs	r3, r0
   c4e46:	bf08      	it	eq
   c4e48:	2322      	moveq	r3, #34	; 0x22
   c4e4a:	4682      	mov	sl, r0
   c4e4c:	468b      	mov	fp, r1
   c4e4e:	bf08      	it	eq
   c4e50:	6023      	streq	r3, [r4, #0]
   c4e52:	e62b      	b.n	c4aac <_strtod_l+0x4a4>
   c4e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4e58:	fa02 f303 	lsl.w	r3, r2, r3
   c4e5c:	ea03 0a0a 	and.w	sl, r3, sl
   c4e60:	e6e3      	b.n	c4c2a <_strtod_l+0x622>
   c4e62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c4e66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4e6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4e6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c4e72:	fa01 f308 	lsl.w	r3, r1, r8
   c4e76:	9308      	str	r3, [sp, #32]
   c4e78:	910d      	str	r1, [sp, #52]	; 0x34
   c4e7a:	e746      	b.n	c4d0a <_strtod_l+0x702>
   c4e7c:	2300      	movs	r3, #0
   c4e7e:	9308      	str	r3, [sp, #32]
   c4e80:	2301      	movs	r3, #1
   c4e82:	930d      	str	r3, [sp, #52]	; 0x34
   c4e84:	e741      	b.n	c4d0a <_strtod_l+0x702>
   c4e86:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4e88:	4642      	mov	r2, r8
   c4e8a:	4620      	mov	r0, r4
   c4e8c:	f001 f89e 	bl	c5fcc <__lshift>
   c4e90:	9018      	str	r0, [sp, #96]	; 0x60
   c4e92:	2800      	cmp	r0, #0
   c4e94:	f47f af6b 	bne.w	c4d6e <_strtod_l+0x766>
   c4e98:	e5fe      	b.n	c4a98 <_strtod_l+0x490>
   c4e9a:	465f      	mov	r7, fp
   c4e9c:	d16e      	bne.n	c4f7c <_strtod_l+0x974>
   c4e9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4ea4:	b342      	cbz	r2, c4ef8 <_strtod_l+0x8f0>
   c4ea6:	4a32      	ldr	r2, [pc, #200]	; (c4f70 <_strtod_l+0x968>)
   c4ea8:	4293      	cmp	r3, r2
   c4eaa:	d128      	bne.n	c4efe <_strtod_l+0x8f6>
   c4eac:	9b04      	ldr	r3, [sp, #16]
   c4eae:	4651      	mov	r1, sl
   c4eb0:	b1eb      	cbz	r3, c4eee <_strtod_l+0x8e6>
   c4eb2:	4b2d      	ldr	r3, [pc, #180]	; (c4f68 <_strtod_l+0x960>)
   c4eb4:	403b      	ands	r3, r7
   c4eb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4ebe:	d819      	bhi.n	c4ef4 <_strtod_l+0x8ec>
   c4ec0:	0d1b      	lsrs	r3, r3, #20
   c4ec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c4ec6:	fa02 f303 	lsl.w	r3, r2, r3
   c4eca:	4299      	cmp	r1, r3
   c4ecc:	d117      	bne.n	c4efe <_strtod_l+0x8f6>
   c4ece:	4b29      	ldr	r3, [pc, #164]	; (c4f74 <_strtod_l+0x96c>)
   c4ed0:	429f      	cmp	r7, r3
   c4ed2:	d102      	bne.n	c4eda <_strtod_l+0x8d2>
   c4ed4:	3101      	adds	r1, #1
   c4ed6:	f43f addf 	beq.w	c4a98 <_strtod_l+0x490>
   c4eda:	4b23      	ldr	r3, [pc, #140]	; (c4f68 <_strtod_l+0x960>)
   c4edc:	403b      	ands	r3, r7
   c4ede:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c4ee2:	f04f 0a00 	mov.w	sl, #0
   c4ee6:	9b04      	ldr	r3, [sp, #16]
   c4ee8:	2b00      	cmp	r3, #0
   c4eea:	d1a4      	bne.n	c4e36 <_strtod_l+0x82e>
   c4eec:	e5de      	b.n	c4aac <_strtod_l+0x4a4>
   c4eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c4ef2:	e7ea      	b.n	c4eca <_strtod_l+0x8c2>
   c4ef4:	4613      	mov	r3, r2
   c4ef6:	e7e8      	b.n	c4eca <_strtod_l+0x8c2>
   c4ef8:	ea53 030a 	orrs.w	r3, r3, sl
   c4efc:	d08c      	beq.n	c4e18 <_strtod_l+0x810>
   c4efe:	9b08      	ldr	r3, [sp, #32]
   c4f00:	b1db      	cbz	r3, c4f3a <_strtod_l+0x932>
   c4f02:	423b      	tst	r3, r7
   c4f04:	d0ef      	beq.n	c4ee6 <_strtod_l+0x8de>
   c4f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f08:	9a04      	ldr	r2, [sp, #16]
   c4f0a:	4650      	mov	r0, sl
   c4f0c:	4659      	mov	r1, fp
   c4f0e:	b1c3      	cbz	r3, c4f42 <_strtod_l+0x93a>
   c4f10:	f7ff fb5d 	bl	c45ce <sulp>
   c4f14:	4602      	mov	r2, r0
   c4f16:	460b      	mov	r3, r1
   c4f18:	ec51 0b18 	vmov	r0, r1, d8
   c4f1c:	f7fe fcea 	bl	c38f4 <__adddf3>
   c4f20:	4682      	mov	sl, r0
   c4f22:	468b      	mov	fp, r1
   c4f24:	e7df      	b.n	c4ee6 <_strtod_l+0x8de>
   c4f26:	4013      	ands	r3, r2
   c4f28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4f2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4f30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c4f34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4f38:	e7d5      	b.n	c4ee6 <_strtod_l+0x8de>
   c4f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4f3c:	ea13 0f0a 	tst.w	r3, sl
   c4f40:	e7e0      	b.n	c4f04 <_strtod_l+0x8fc>
   c4f42:	f7ff fb44 	bl	c45ce <sulp>
   c4f46:	4602      	mov	r2, r0
   c4f48:	460b      	mov	r3, r1
   c4f4a:	ec51 0b18 	vmov	r0, r1, d8
   c4f4e:	f7fe fccf 	bl	c38f0 <__aeabi_dsub>
   c4f52:	2200      	movs	r2, #0
   c4f54:	2300      	movs	r3, #0
   c4f56:	4682      	mov	sl, r0
   c4f58:	468b      	mov	fp, r1
   c4f5a:	f7ff f8e9 	bl	c4130 <__aeabi_dcmpeq>
   c4f5e:	2800      	cmp	r0, #0
   c4f60:	d0c1      	beq.n	c4ee6 <_strtod_l+0x8de>
   c4f62:	e611      	b.n	c4b88 <_strtod_l+0x580>
   c4f64:	fffffc02 	.word	0xfffffc02
   c4f68:	7ff00000 	.word	0x7ff00000
   c4f6c:	39500000 	.word	0x39500000
   c4f70:	000fffff 	.word	0x000fffff
   c4f74:	7fefffff 	.word	0x7fefffff
   c4f78:	000c84d8 	.word	0x000c84d8
   c4f7c:	4631      	mov	r1, r6
   c4f7e:	4628      	mov	r0, r5
   c4f80:	f001 fa12 	bl	c63a8 <__ratio>
   c4f84:	ec59 8b10 	vmov	r8, r9, d0
   c4f88:	ee10 0a10 	vmov	r0, s0
   c4f8c:	2200      	movs	r2, #0
   c4f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c4f92:	4649      	mov	r1, r9
   c4f94:	f7ff f8e0 	bl	c4158 <__aeabi_dcmple>
   c4f98:	2800      	cmp	r0, #0
   c4f9a:	d07a      	beq.n	c5092 <_strtod_l+0xa8a>
   c4f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f9e:	2b00      	cmp	r3, #0
   c4fa0:	d04a      	beq.n	c5038 <_strtod_l+0xa30>
   c4fa2:	4b95      	ldr	r3, [pc, #596]	; (c51f8 <_strtod_l+0xbf0>)
   c4fa4:	2200      	movs	r2, #0
   c4fa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4faa:	f8df 924c 	ldr.w	r9, [pc, #588]	; c51f8 <_strtod_l+0xbf0>
   c4fae:	f04f 0800 	mov.w	r8, #0
   c4fb2:	4b92      	ldr	r3, [pc, #584]	; (c51fc <_strtod_l+0xbf4>)
   c4fb4:	403b      	ands	r3, r7
   c4fb6:	930d      	str	r3, [sp, #52]	; 0x34
   c4fb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4fba:	4b91      	ldr	r3, [pc, #580]	; (c5200 <_strtod_l+0xbf8>)
   c4fbc:	429a      	cmp	r2, r3
   c4fbe:	f040 80b0 	bne.w	c5122 <_strtod_l+0xb1a>
   c4fc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4fc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c4fca:	ec4b ab10 	vmov	d0, sl, fp
   c4fce:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c4fd2:	f001 f911 	bl	c61f8 <__ulp>
   c4fd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4fda:	ec53 2b10 	vmov	r2, r3, d0
   c4fde:	f7fe fe3f 	bl	c3c60 <__aeabi_dmul>
   c4fe2:	4652      	mov	r2, sl
   c4fe4:	465b      	mov	r3, fp
   c4fe6:	f7fe fc85 	bl	c38f4 <__adddf3>
   c4fea:	460b      	mov	r3, r1
   c4fec:	4983      	ldr	r1, [pc, #524]	; (c51fc <_strtod_l+0xbf4>)
   c4fee:	4a85      	ldr	r2, [pc, #532]	; (c5204 <_strtod_l+0xbfc>)
   c4ff0:	4019      	ands	r1, r3
   c4ff2:	4291      	cmp	r1, r2
   c4ff4:	4682      	mov	sl, r0
   c4ff6:	d960      	bls.n	c50ba <_strtod_l+0xab2>
   c4ff8:	ee18 3a90 	vmov	r3, s17
   c4ffc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c5000:	4293      	cmp	r3, r2
   c5002:	d104      	bne.n	c500e <_strtod_l+0xa06>
   c5004:	ee18 3a10 	vmov	r3, s16
   c5008:	3301      	adds	r3, #1
   c500a:	f43f ad45 	beq.w	c4a98 <_strtod_l+0x490>
   c500e:	f8df b200 	ldr.w	fp, [pc, #512]	; c5210 <_strtod_l+0xc08>
   c5012:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c5016:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5018:	4620      	mov	r0, r4
   c501a:	f000 fdbb 	bl	c5b94 <_Bfree>
   c501e:	9905      	ldr	r1, [sp, #20]
   c5020:	4620      	mov	r0, r4
   c5022:	f000 fdb7 	bl	c5b94 <_Bfree>
   c5026:	4631      	mov	r1, r6
   c5028:	4620      	mov	r0, r4
   c502a:	f000 fdb3 	bl	c5b94 <_Bfree>
   c502e:	4629      	mov	r1, r5
   c5030:	4620      	mov	r0, r4
   c5032:	f000 fdaf 	bl	c5b94 <_Bfree>
   c5036:	e61a      	b.n	c4c6e <_strtod_l+0x666>
   c5038:	f1ba 0f00 	cmp.w	sl, #0
   c503c:	d11b      	bne.n	c5076 <_strtod_l+0xa6e>
   c503e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5042:	b9f3      	cbnz	r3, c5082 <_strtod_l+0xa7a>
   c5044:	4b6c      	ldr	r3, [pc, #432]	; (c51f8 <_strtod_l+0xbf0>)
   c5046:	2200      	movs	r2, #0
   c5048:	4640      	mov	r0, r8
   c504a:	4649      	mov	r1, r9
   c504c:	f7ff f87a 	bl	c4144 <__aeabi_dcmplt>
   c5050:	b9d0      	cbnz	r0, c5088 <_strtod_l+0xa80>
   c5052:	4640      	mov	r0, r8
   c5054:	4649      	mov	r1, r9
   c5056:	4b6c      	ldr	r3, [pc, #432]	; (c5208 <_strtod_l+0xc00>)
   c5058:	2200      	movs	r2, #0
   c505a:	f7fe fe01 	bl	c3c60 <__aeabi_dmul>
   c505e:	4680      	mov	r8, r0
   c5060:	4689      	mov	r9, r1
   c5062:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c5066:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c506a:	9315      	str	r3, [sp, #84]	; 0x54
   c506c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5070:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5074:	e79d      	b.n	c4fb2 <_strtod_l+0x9aa>
   c5076:	f1ba 0f01 	cmp.w	sl, #1
   c507a:	d102      	bne.n	c5082 <_strtod_l+0xa7a>
   c507c:	2f00      	cmp	r7, #0
   c507e:	f43f ad83 	beq.w	c4b88 <_strtod_l+0x580>
   c5082:	4b62      	ldr	r3, [pc, #392]	; (c520c <_strtod_l+0xc04>)
   c5084:	2200      	movs	r2, #0
   c5086:	e78e      	b.n	c4fa6 <_strtod_l+0x99e>
   c5088:	f8df 917c 	ldr.w	r9, [pc, #380]	; c5208 <_strtod_l+0xc00>
   c508c:	f04f 0800 	mov.w	r8, #0
   c5090:	e7e7      	b.n	c5062 <_strtod_l+0xa5a>
   c5092:	4b5d      	ldr	r3, [pc, #372]	; (c5208 <_strtod_l+0xc00>)
   c5094:	4640      	mov	r0, r8
   c5096:	4649      	mov	r1, r9
   c5098:	2200      	movs	r2, #0
   c509a:	f7fe fde1 	bl	c3c60 <__aeabi_dmul>
   c509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c50a0:	4680      	mov	r8, r0
   c50a2:	4689      	mov	r9, r1
   c50a4:	b933      	cbnz	r3, c50b4 <_strtod_l+0xaac>
   c50a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c50aa:	900e      	str	r0, [sp, #56]	; 0x38
   c50ac:	930f      	str	r3, [sp, #60]	; 0x3c
   c50ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c50b2:	e7dd      	b.n	c5070 <_strtod_l+0xa68>
   c50b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c50b8:	e7f9      	b.n	c50ae <_strtod_l+0xaa6>
   c50ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c50be:	9b04      	ldr	r3, [sp, #16]
   c50c0:	2b00      	cmp	r3, #0
   c50c2:	d1a8      	bne.n	c5016 <_strtod_l+0xa0e>
   c50c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c50c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c50ca:	0d1b      	lsrs	r3, r3, #20
   c50cc:	051b      	lsls	r3, r3, #20
   c50ce:	429a      	cmp	r2, r3
   c50d0:	d1a1      	bne.n	c5016 <_strtod_l+0xa0e>
   c50d2:	4640      	mov	r0, r8
   c50d4:	4649      	mov	r1, r9
   c50d6:	f001 fa05 	bl	c64e4 <__aeabi_d2lz>
   c50da:	f7fe fd93 	bl	c3c04 <__aeabi_l2d>
   c50de:	4602      	mov	r2, r0
   c50e0:	460b      	mov	r3, r1
   c50e2:	4640      	mov	r0, r8
   c50e4:	4649      	mov	r1, r9
   c50e6:	f7fe fc03 	bl	c38f0 <__aeabi_dsub>
   c50ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c50ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c50f0:	ea43 030a 	orr.w	r3, r3, sl
   c50f4:	4313      	orrs	r3, r2
   c50f6:	4680      	mov	r8, r0
   c50f8:	4689      	mov	r9, r1
   c50fa:	d055      	beq.n	c51a8 <_strtod_l+0xba0>
   c50fc:	a336      	add	r3, pc, #216	; (adr r3, c51d8 <_strtod_l+0xbd0>)
   c50fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5102:	f7ff f81f 	bl	c4144 <__aeabi_dcmplt>
   c5106:	2800      	cmp	r0, #0
   c5108:	f47f acd0 	bne.w	c4aac <_strtod_l+0x4a4>
   c510c:	a334      	add	r3, pc, #208	; (adr r3, c51e0 <_strtod_l+0xbd8>)
   c510e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5112:	4640      	mov	r0, r8
   c5114:	4649      	mov	r1, r9
   c5116:	f7ff f833 	bl	c4180 <__aeabi_dcmpgt>
   c511a:	2800      	cmp	r0, #0
   c511c:	f43f af7b 	beq.w	c5016 <_strtod_l+0xa0e>
   c5120:	e4c4      	b.n	c4aac <_strtod_l+0x4a4>
   c5122:	9b04      	ldr	r3, [sp, #16]
   c5124:	b333      	cbz	r3, c5174 <_strtod_l+0xb6c>
   c5126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c5128:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c512c:	d822      	bhi.n	c5174 <_strtod_l+0xb6c>
   c512e:	a32e      	add	r3, pc, #184	; (adr r3, c51e8 <_strtod_l+0xbe0>)
   c5130:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5134:	4640      	mov	r0, r8
   c5136:	4649      	mov	r1, r9
   c5138:	f7ff f80e 	bl	c4158 <__aeabi_dcmple>
   c513c:	b1a0      	cbz	r0, c5168 <_strtod_l+0xb60>
   c513e:	4649      	mov	r1, r9
   c5140:	4640      	mov	r0, r8
   c5142:	f7ff f865 	bl	c4210 <__aeabi_d2uiz>
   c5146:	2801      	cmp	r0, #1
   c5148:	bf38      	it	cc
   c514a:	2001      	movcc	r0, #1
   c514c:	f7fe fd0e 	bl	c3b6c <__aeabi_ui2d>
   c5150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5152:	4680      	mov	r8, r0
   c5154:	4689      	mov	r9, r1
   c5156:	bb23      	cbnz	r3, c51a2 <_strtod_l+0xb9a>
   c5158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c515c:	9010      	str	r0, [sp, #64]	; 0x40
   c515e:	9311      	str	r3, [sp, #68]	; 0x44
   c5160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c5164:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5168:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c516a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c516c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5170:	1a9b      	subs	r3, r3, r2
   c5172:	9309      	str	r3, [sp, #36]	; 0x24
   c5174:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5178:	eeb0 0a48 	vmov.f32	s0, s16
   c517c:	eef0 0a68 	vmov.f32	s1, s17
   c5180:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5184:	f001 f838 	bl	c61f8 <__ulp>
   c5188:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c518c:	ec53 2b10 	vmov	r2, r3, d0
   c5190:	f7fe fd66 	bl	c3c60 <__aeabi_dmul>
   c5194:	ec53 2b18 	vmov	r2, r3, d8
   c5198:	f7fe fbac 	bl	c38f4 <__adddf3>
   c519c:	4682      	mov	sl, r0
   c519e:	468b      	mov	fp, r1
   c51a0:	e78d      	b.n	c50be <_strtod_l+0xab6>
   c51a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c51a6:	e7db      	b.n	c5160 <_strtod_l+0xb58>
   c51a8:	a311      	add	r3, pc, #68	; (adr r3, c51f0 <_strtod_l+0xbe8>)
   c51aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c51ae:	f7fe ffc9 	bl	c4144 <__aeabi_dcmplt>
   c51b2:	e7b2      	b.n	c511a <_strtod_l+0xb12>
   c51b4:	2300      	movs	r3, #0
   c51b6:	930a      	str	r3, [sp, #40]	; 0x28
   c51b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c51ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c51bc:	6013      	str	r3, [r2, #0]
   c51be:	f7ff ba6b 	b.w	c4698 <_strtod_l+0x90>
   c51c2:	2a65      	cmp	r2, #101	; 0x65
   c51c4:	f43f ab5f 	beq.w	c4886 <_strtod_l+0x27e>
   c51c8:	2a45      	cmp	r2, #69	; 0x45
   c51ca:	f43f ab5c 	beq.w	c4886 <_strtod_l+0x27e>
   c51ce:	2301      	movs	r3, #1
   c51d0:	f7ff bb94 	b.w	c48fc <_strtod_l+0x2f4>
   c51d4:	f3af 8000 	nop.w
   c51d8:	94a03595 	.word	0x94a03595
   c51dc:	3fdfffff 	.word	0x3fdfffff
   c51e0:	35afe535 	.word	0x35afe535
   c51e4:	3fe00000 	.word	0x3fe00000
   c51e8:	ffc00000 	.word	0xffc00000
   c51ec:	41dfffff 	.word	0x41dfffff
   c51f0:	94a03595 	.word	0x94a03595
   c51f4:	3fcfffff 	.word	0x3fcfffff
   c51f8:	3ff00000 	.word	0x3ff00000
   c51fc:	7ff00000 	.word	0x7ff00000
   c5200:	7fe00000 	.word	0x7fe00000
   c5204:	7c9fffff 	.word	0x7c9fffff
   c5208:	3fe00000 	.word	0x3fe00000
   c520c:	bff00000 	.word	0xbff00000
   c5210:	7fefffff 	.word	0x7fefffff

000c5214 <strtod>:
   c5214:	460a      	mov	r2, r1
   c5216:	4601      	mov	r1, r0
   c5218:	4802      	ldr	r0, [pc, #8]	; (c5224 <strtod+0x10>)
   c521a:	4b03      	ldr	r3, [pc, #12]	; (c5228 <strtod+0x14>)
   c521c:	6800      	ldr	r0, [r0, #0]
   c521e:	f7ff b9f3 	b.w	c4608 <_strtod_l>
   c5222:	bf00      	nop
   c5224:	2003db68 	.word	0x2003db68
   c5228:	2003dbd4 	.word	0x2003dbd4

000c522c <_strtol_l.constprop.0>:
   c522c:	2b01      	cmp	r3, #1
   c522e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5232:	d001      	beq.n	c5238 <_strtol_l.constprop.0+0xc>
   c5234:	2b24      	cmp	r3, #36	; 0x24
   c5236:	d906      	bls.n	c5246 <_strtol_l.constprop.0+0x1a>
   c5238:	f7f8 ff92 	bl	be160 <__errno>
   c523c:	2316      	movs	r3, #22
   c523e:	6003      	str	r3, [r0, #0]
   c5240:	2000      	movs	r0, #0
   c5242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5246:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c532c <_strtol_l.constprop.0+0x100>
   c524a:	460d      	mov	r5, r1
   c524c:	462e      	mov	r6, r5
   c524e:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5252:	f814 700c 	ldrb.w	r7, [r4, ip]
   c5256:	f017 0708 	ands.w	r7, r7, #8
   c525a:	d1f7      	bne.n	c524c <_strtol_l.constprop.0+0x20>
   c525c:	2c2d      	cmp	r4, #45	; 0x2d
   c525e:	d132      	bne.n	c52c6 <_strtol_l.constprop.0+0x9a>
   c5260:	782c      	ldrb	r4, [r5, #0]
   c5262:	2701      	movs	r7, #1
   c5264:	1cb5      	adds	r5, r6, #2
   c5266:	2b00      	cmp	r3, #0
   c5268:	d05b      	beq.n	c5322 <_strtol_l.constprop.0+0xf6>
   c526a:	2b10      	cmp	r3, #16
   c526c:	d109      	bne.n	c5282 <_strtol_l.constprop.0+0x56>
   c526e:	2c30      	cmp	r4, #48	; 0x30
   c5270:	d107      	bne.n	c5282 <_strtol_l.constprop.0+0x56>
   c5272:	782c      	ldrb	r4, [r5, #0]
   c5274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5278:	2c58      	cmp	r4, #88	; 0x58
   c527a:	d14d      	bne.n	c5318 <_strtol_l.constprop.0+0xec>
   c527c:	786c      	ldrb	r4, [r5, #1]
   c527e:	2310      	movs	r3, #16
   c5280:	3502      	adds	r5, #2
   c5282:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c5286:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c528a:	f04f 0c00 	mov.w	ip, #0
   c528e:	fbb8 f9f3 	udiv	r9, r8, r3
   c5292:	4666      	mov	r6, ip
   c5294:	fb03 8a19 	mls	sl, r3, r9, r8
   c5298:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c529c:	f1be 0f09 	cmp.w	lr, #9
   c52a0:	d816      	bhi.n	c52d0 <_strtol_l.constprop.0+0xa4>
   c52a2:	4674      	mov	r4, lr
   c52a4:	42a3      	cmp	r3, r4
   c52a6:	dd24      	ble.n	c52f2 <_strtol_l.constprop.0+0xc6>
   c52a8:	f1bc 0f00 	cmp.w	ip, #0
   c52ac:	db1e      	blt.n	c52ec <_strtol_l.constprop.0+0xc0>
   c52ae:	45b1      	cmp	r9, r6
   c52b0:	d31c      	bcc.n	c52ec <_strtol_l.constprop.0+0xc0>
   c52b2:	d101      	bne.n	c52b8 <_strtol_l.constprop.0+0x8c>
   c52b4:	45a2      	cmp	sl, r4
   c52b6:	db19      	blt.n	c52ec <_strtol_l.constprop.0+0xc0>
   c52b8:	fb06 4603 	mla	r6, r6, r3, r4
   c52bc:	f04f 0c01 	mov.w	ip, #1
   c52c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   c52c4:	e7e8      	b.n	c5298 <_strtol_l.constprop.0+0x6c>
   c52c6:	2c2b      	cmp	r4, #43	; 0x2b
   c52c8:	bf04      	itt	eq
   c52ca:	782c      	ldrbeq	r4, [r5, #0]
   c52cc:	1cb5      	addeq	r5, r6, #2
   c52ce:	e7ca      	b.n	c5266 <_strtol_l.constprop.0+0x3a>
   c52d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c52d4:	f1be 0f19 	cmp.w	lr, #25
   c52d8:	d801      	bhi.n	c52de <_strtol_l.constprop.0+0xb2>
   c52da:	3c37      	subs	r4, #55	; 0x37
   c52dc:	e7e2      	b.n	c52a4 <_strtol_l.constprop.0+0x78>
   c52de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c52e2:	f1be 0f19 	cmp.w	lr, #25
   c52e6:	d804      	bhi.n	c52f2 <_strtol_l.constprop.0+0xc6>
   c52e8:	3c57      	subs	r4, #87	; 0x57
   c52ea:	e7db      	b.n	c52a4 <_strtol_l.constprop.0+0x78>
   c52ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c52f0:	e7e6      	b.n	c52c0 <_strtol_l.constprop.0+0x94>
   c52f2:	f1bc 0f00 	cmp.w	ip, #0
   c52f6:	da05      	bge.n	c5304 <_strtol_l.constprop.0+0xd8>
   c52f8:	2322      	movs	r3, #34	; 0x22
   c52fa:	6003      	str	r3, [r0, #0]
   c52fc:	4646      	mov	r6, r8
   c52fe:	b942      	cbnz	r2, c5312 <_strtol_l.constprop.0+0xe6>
   c5300:	4630      	mov	r0, r6
   c5302:	e79e      	b.n	c5242 <_strtol_l.constprop.0+0x16>
   c5304:	b107      	cbz	r7, c5308 <_strtol_l.constprop.0+0xdc>
   c5306:	4276      	negs	r6, r6
   c5308:	2a00      	cmp	r2, #0
   c530a:	d0f9      	beq.n	c5300 <_strtol_l.constprop.0+0xd4>
   c530c:	f1bc 0f00 	cmp.w	ip, #0
   c5310:	d000      	beq.n	c5314 <_strtol_l.constprop.0+0xe8>
   c5312:	1e69      	subs	r1, r5, #1
   c5314:	6011      	str	r1, [r2, #0]
   c5316:	e7f3      	b.n	c5300 <_strtol_l.constprop.0+0xd4>
   c5318:	2430      	movs	r4, #48	; 0x30
   c531a:	2b00      	cmp	r3, #0
   c531c:	d1b1      	bne.n	c5282 <_strtol_l.constprop.0+0x56>
   c531e:	2308      	movs	r3, #8
   c5320:	e7af      	b.n	c5282 <_strtol_l.constprop.0+0x56>
   c5322:	2c30      	cmp	r4, #48	; 0x30
   c5324:	d0a5      	beq.n	c5272 <_strtol_l.constprop.0+0x46>
   c5326:	230a      	movs	r3, #10
   c5328:	e7ab      	b.n	c5282 <_strtol_l.constprop.0+0x56>
   c532a:	bf00      	nop
   c532c:	000c8501 	.word	0x000c8501

000c5330 <strtol>:
   c5330:	4613      	mov	r3, r2
   c5332:	460a      	mov	r2, r1
   c5334:	4601      	mov	r1, r0
   c5336:	4802      	ldr	r0, [pc, #8]	; (c5340 <strtol+0x10>)
   c5338:	6800      	ldr	r0, [r0, #0]
   c533a:	f7ff bf77 	b.w	c522c <_strtol_l.constprop.0>
   c533e:	bf00      	nop
   c5340:	2003db68 	.word	0x2003db68

000c5344 <__register_exitproc>:
   c5344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5348:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c5404 <__register_exitproc+0xc0>
   c534c:	4606      	mov	r6, r0
   c534e:	f8d8 0000 	ldr.w	r0, [r8]
   c5352:	461f      	mov	r7, r3
   c5354:	460d      	mov	r5, r1
   c5356:	4691      	mov	r9, r2
   c5358:	f000 fbc6 	bl	c5ae8 <__retarget_lock_acquire_recursive>
   c535c:	4b25      	ldr	r3, [pc, #148]	; (c53f4 <__register_exitproc+0xb0>)
   c535e:	681c      	ldr	r4, [r3, #0]
   c5360:	b934      	cbnz	r4, c5370 <__register_exitproc+0x2c>
   c5362:	4c25      	ldr	r4, [pc, #148]	; (c53f8 <__register_exitproc+0xb4>)
   c5364:	601c      	str	r4, [r3, #0]
   c5366:	4b25      	ldr	r3, [pc, #148]	; (c53fc <__register_exitproc+0xb8>)
   c5368:	b113      	cbz	r3, c5370 <__register_exitproc+0x2c>
   c536a:	681b      	ldr	r3, [r3, #0]
   c536c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5370:	6863      	ldr	r3, [r4, #4]
   c5372:	2b1f      	cmp	r3, #31
   c5374:	dd07      	ble.n	c5386 <__register_exitproc+0x42>
   c5376:	f8d8 0000 	ldr.w	r0, [r8]
   c537a:	f000 fbb7 	bl	c5aec <__retarget_lock_release_recursive>
   c537e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c5382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5386:	b34e      	cbz	r6, c53dc <__register_exitproc+0x98>
   c5388:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c538c:	b988      	cbnz	r0, c53b2 <__register_exitproc+0x6e>
   c538e:	4b1c      	ldr	r3, [pc, #112]	; (c5400 <__register_exitproc+0xbc>)
   c5390:	b923      	cbnz	r3, c539c <__register_exitproc+0x58>
   c5392:	f8d8 0000 	ldr.w	r0, [r8]
   c5396:	f000 fba8 	bl	c5aea <__retarget_lock_release>
   c539a:	e7f0      	b.n	c537e <__register_exitproc+0x3a>
   c539c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c53a0:	f7f8 fe96 	bl	be0d0 <malloc>
   c53a4:	2800      	cmp	r0, #0
   c53a6:	d0f4      	beq.n	c5392 <__register_exitproc+0x4e>
   c53a8:	2300      	movs	r3, #0
   c53aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c53ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c53b2:	6863      	ldr	r3, [r4, #4]
   c53b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c53b8:	2201      	movs	r2, #1
   c53ba:	409a      	lsls	r2, r3
   c53bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c53c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c53c4:	4313      	orrs	r3, r2
   c53c6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c53ca:	2e02      	cmp	r6, #2
   c53cc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c53d0:	bf02      	ittt	eq
   c53d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c53d6:	4313      	orreq	r3, r2
   c53d8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c53dc:	6863      	ldr	r3, [r4, #4]
   c53de:	f8d8 0000 	ldr.w	r0, [r8]
   c53e2:	1c5a      	adds	r2, r3, #1
   c53e4:	3302      	adds	r3, #2
   c53e6:	6062      	str	r2, [r4, #4]
   c53e8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c53ec:	f000 fb7e 	bl	c5aec <__retarget_lock_release_recursive>
   c53f0:	2000      	movs	r0, #0
   c53f2:	e7c6      	b.n	c5382 <__register_exitproc+0x3e>
   c53f4:	2003e7e8 	.word	0x2003e7e8
   c53f8:	2003e75c 	.word	0x2003e75c
   c53fc:	00000000 	.word	0x00000000
   c5400:	000be0d1 	.word	0x000be0d1
   c5404:	2003dbcc 	.word	0x2003dbcc

000c5408 <rshift>:
   c5408:	6903      	ldr	r3, [r0, #16]
   c540a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c540e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c5412:	ea4f 1261 	mov.w	r2, r1, asr #5
   c5416:	f100 0414 	add.w	r4, r0, #20
   c541a:	dd45      	ble.n	c54a8 <rshift+0xa0>
   c541c:	f011 011f 	ands.w	r1, r1, #31
   c5420:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c5424:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c5428:	d10c      	bne.n	c5444 <rshift+0x3c>
   c542a:	f100 0710 	add.w	r7, r0, #16
   c542e:	4629      	mov	r1, r5
   c5430:	42b1      	cmp	r1, r6
   c5432:	d334      	bcc.n	c549e <rshift+0x96>
   c5434:	1a9b      	subs	r3, r3, r2
   c5436:	009b      	lsls	r3, r3, #2
   c5438:	1eea      	subs	r2, r5, #3
   c543a:	4296      	cmp	r6, r2
   c543c:	bf38      	it	cc
   c543e:	2300      	movcc	r3, #0
   c5440:	4423      	add	r3, r4
   c5442:	e015      	b.n	c5470 <rshift+0x68>
   c5444:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c5448:	f1c1 0820 	rsb	r8, r1, #32
   c544c:	40cf      	lsrs	r7, r1
   c544e:	f105 0e04 	add.w	lr, r5, #4
   c5452:	46a1      	mov	r9, r4
   c5454:	4576      	cmp	r6, lr
   c5456:	46f4      	mov	ip, lr
   c5458:	d815      	bhi.n	c5486 <rshift+0x7e>
   c545a:	1a9a      	subs	r2, r3, r2
   c545c:	0092      	lsls	r2, r2, #2
   c545e:	3a04      	subs	r2, #4
   c5460:	3501      	adds	r5, #1
   c5462:	42ae      	cmp	r6, r5
   c5464:	bf38      	it	cc
   c5466:	2200      	movcc	r2, #0
   c5468:	18a3      	adds	r3, r4, r2
   c546a:	50a7      	str	r7, [r4, r2]
   c546c:	b107      	cbz	r7, c5470 <rshift+0x68>
   c546e:	3304      	adds	r3, #4
   c5470:	1b1a      	subs	r2, r3, r4
   c5472:	42a3      	cmp	r3, r4
   c5474:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5478:	bf08      	it	eq
   c547a:	2300      	moveq	r3, #0
   c547c:	6102      	str	r2, [r0, #16]
   c547e:	bf08      	it	eq
   c5480:	6143      	streq	r3, [r0, #20]
   c5482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5486:	f8dc c000 	ldr.w	ip, [ip]
   c548a:	fa0c fc08 	lsl.w	ip, ip, r8
   c548e:	ea4c 0707 	orr.w	r7, ip, r7
   c5492:	f849 7b04 	str.w	r7, [r9], #4
   c5496:	f85e 7b04 	ldr.w	r7, [lr], #4
   c549a:	40cf      	lsrs	r7, r1
   c549c:	e7da      	b.n	c5454 <rshift+0x4c>
   c549e:	f851 cb04 	ldr.w	ip, [r1], #4
   c54a2:	f847 cf04 	str.w	ip, [r7, #4]!
   c54a6:	e7c3      	b.n	c5430 <rshift+0x28>
   c54a8:	4623      	mov	r3, r4
   c54aa:	e7e1      	b.n	c5470 <rshift+0x68>

000c54ac <__hexdig_fun>:
   c54ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c54b0:	2b09      	cmp	r3, #9
   c54b2:	d802      	bhi.n	c54ba <__hexdig_fun+0xe>
   c54b4:	3820      	subs	r0, #32
   c54b6:	b2c0      	uxtb	r0, r0
   c54b8:	4770      	bx	lr
   c54ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c54be:	2b05      	cmp	r3, #5
   c54c0:	d801      	bhi.n	c54c6 <__hexdig_fun+0x1a>
   c54c2:	3847      	subs	r0, #71	; 0x47
   c54c4:	e7f7      	b.n	c54b6 <__hexdig_fun+0xa>
   c54c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c54ca:	2b05      	cmp	r3, #5
   c54cc:	d801      	bhi.n	c54d2 <__hexdig_fun+0x26>
   c54ce:	3827      	subs	r0, #39	; 0x27
   c54d0:	e7f1      	b.n	c54b6 <__hexdig_fun+0xa>
   c54d2:	2000      	movs	r0, #0
   c54d4:	4770      	bx	lr
	...

000c54d8 <__gethex>:
   c54d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c54dc:	ed2d 8b02 	vpush	{d8}
   c54e0:	b089      	sub	sp, #36	; 0x24
   c54e2:	ee08 0a10 	vmov	s16, r0
   c54e6:	9304      	str	r3, [sp, #16]
   c54e8:	4bb4      	ldr	r3, [pc, #720]	; (c57bc <__gethex+0x2e4>)
   c54ea:	681b      	ldr	r3, [r3, #0]
   c54ec:	9301      	str	r3, [sp, #4]
   c54ee:	4618      	mov	r0, r3
   c54f0:	468b      	mov	fp, r1
   c54f2:	4690      	mov	r8, r2
   c54f4:	f7fe fff3 	bl	c44de <strlen>
   c54f8:	9b01      	ldr	r3, [sp, #4]
   c54fa:	f8db 2000 	ldr.w	r2, [fp]
   c54fe:	4403      	add	r3, r0
   c5500:	4682      	mov	sl, r0
   c5502:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c5506:	9305      	str	r3, [sp, #20]
   c5508:	1c93      	adds	r3, r2, #2
   c550a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c550e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c5512:	32fe      	adds	r2, #254	; 0xfe
   c5514:	18d1      	adds	r1, r2, r3
   c5516:	461f      	mov	r7, r3
   c5518:	f813 0b01 	ldrb.w	r0, [r3], #1
   c551c:	9100      	str	r1, [sp, #0]
   c551e:	2830      	cmp	r0, #48	; 0x30
   c5520:	d0f8      	beq.n	c5514 <__gethex+0x3c>
   c5522:	f7ff ffc3 	bl	c54ac <__hexdig_fun>
   c5526:	4604      	mov	r4, r0
   c5528:	2800      	cmp	r0, #0
   c552a:	d13a      	bne.n	c55a2 <__gethex+0xca>
   c552c:	9901      	ldr	r1, [sp, #4]
   c552e:	4652      	mov	r2, sl
   c5530:	4638      	mov	r0, r7
   c5532:	f7fe ffef 	bl	c4514 <strncmp>
   c5536:	4605      	mov	r5, r0
   c5538:	2800      	cmp	r0, #0
   c553a:	d168      	bne.n	c560e <__gethex+0x136>
   c553c:	f817 000a 	ldrb.w	r0, [r7, sl]
   c5540:	eb07 060a 	add.w	r6, r7, sl
   c5544:	f7ff ffb2 	bl	c54ac <__hexdig_fun>
   c5548:	2800      	cmp	r0, #0
   c554a:	d062      	beq.n	c5612 <__gethex+0x13a>
   c554c:	4633      	mov	r3, r6
   c554e:	7818      	ldrb	r0, [r3, #0]
   c5550:	2830      	cmp	r0, #48	; 0x30
   c5552:	461f      	mov	r7, r3
   c5554:	f103 0301 	add.w	r3, r3, #1
   c5558:	d0f9      	beq.n	c554e <__gethex+0x76>
   c555a:	f7ff ffa7 	bl	c54ac <__hexdig_fun>
   c555e:	2301      	movs	r3, #1
   c5560:	fab0 f480 	clz	r4, r0
   c5564:	0964      	lsrs	r4, r4, #5
   c5566:	4635      	mov	r5, r6
   c5568:	9300      	str	r3, [sp, #0]
   c556a:	463a      	mov	r2, r7
   c556c:	4616      	mov	r6, r2
   c556e:	3201      	adds	r2, #1
   c5570:	7830      	ldrb	r0, [r6, #0]
   c5572:	f7ff ff9b 	bl	c54ac <__hexdig_fun>
   c5576:	2800      	cmp	r0, #0
   c5578:	d1f8      	bne.n	c556c <__gethex+0x94>
   c557a:	9901      	ldr	r1, [sp, #4]
   c557c:	4652      	mov	r2, sl
   c557e:	4630      	mov	r0, r6
   c5580:	f7fe ffc8 	bl	c4514 <strncmp>
   c5584:	b980      	cbnz	r0, c55a8 <__gethex+0xd0>
   c5586:	b94d      	cbnz	r5, c559c <__gethex+0xc4>
   c5588:	eb06 050a 	add.w	r5, r6, sl
   c558c:	462a      	mov	r2, r5
   c558e:	4616      	mov	r6, r2
   c5590:	3201      	adds	r2, #1
   c5592:	7830      	ldrb	r0, [r6, #0]
   c5594:	f7ff ff8a 	bl	c54ac <__hexdig_fun>
   c5598:	2800      	cmp	r0, #0
   c559a:	d1f8      	bne.n	c558e <__gethex+0xb6>
   c559c:	1bad      	subs	r5, r5, r6
   c559e:	00ad      	lsls	r5, r5, #2
   c55a0:	e004      	b.n	c55ac <__gethex+0xd4>
   c55a2:	2400      	movs	r4, #0
   c55a4:	4625      	mov	r5, r4
   c55a6:	e7e0      	b.n	c556a <__gethex+0x92>
   c55a8:	2d00      	cmp	r5, #0
   c55aa:	d1f7      	bne.n	c559c <__gethex+0xc4>
   c55ac:	7833      	ldrb	r3, [r6, #0]
   c55ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c55b2:	2b50      	cmp	r3, #80	; 0x50
   c55b4:	d13b      	bne.n	c562e <__gethex+0x156>
   c55b6:	7873      	ldrb	r3, [r6, #1]
   c55b8:	2b2b      	cmp	r3, #43	; 0x2b
   c55ba:	d02c      	beq.n	c5616 <__gethex+0x13e>
   c55bc:	2b2d      	cmp	r3, #45	; 0x2d
   c55be:	d02e      	beq.n	c561e <__gethex+0x146>
   c55c0:	1c71      	adds	r1, r6, #1
   c55c2:	f04f 0900 	mov.w	r9, #0
   c55c6:	7808      	ldrb	r0, [r1, #0]
   c55c8:	f7ff ff70 	bl	c54ac <__hexdig_fun>
   c55cc:	1e43      	subs	r3, r0, #1
   c55ce:	b2db      	uxtb	r3, r3
   c55d0:	2b18      	cmp	r3, #24
   c55d2:	d82c      	bhi.n	c562e <__gethex+0x156>
   c55d4:	f1a0 0210 	sub.w	r2, r0, #16
   c55d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c55dc:	f7ff ff66 	bl	c54ac <__hexdig_fun>
   c55e0:	1e43      	subs	r3, r0, #1
   c55e2:	b2db      	uxtb	r3, r3
   c55e4:	2b18      	cmp	r3, #24
   c55e6:	d91d      	bls.n	c5624 <__gethex+0x14c>
   c55e8:	f1b9 0f00 	cmp.w	r9, #0
   c55ec:	d000      	beq.n	c55f0 <__gethex+0x118>
   c55ee:	4252      	negs	r2, r2
   c55f0:	4415      	add	r5, r2
   c55f2:	f8cb 1000 	str.w	r1, [fp]
   c55f6:	b1e4      	cbz	r4, c5632 <__gethex+0x15a>
   c55f8:	9b00      	ldr	r3, [sp, #0]
   c55fa:	2b00      	cmp	r3, #0
   c55fc:	bf14      	ite	ne
   c55fe:	2700      	movne	r7, #0
   c5600:	2706      	moveq	r7, #6
   c5602:	4638      	mov	r0, r7
   c5604:	b009      	add	sp, #36	; 0x24
   c5606:	ecbd 8b02 	vpop	{d8}
   c560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c560e:	463e      	mov	r6, r7
   c5610:	4625      	mov	r5, r4
   c5612:	2401      	movs	r4, #1
   c5614:	e7ca      	b.n	c55ac <__gethex+0xd4>
   c5616:	f04f 0900 	mov.w	r9, #0
   c561a:	1cb1      	adds	r1, r6, #2
   c561c:	e7d3      	b.n	c55c6 <__gethex+0xee>
   c561e:	f04f 0901 	mov.w	r9, #1
   c5622:	e7fa      	b.n	c561a <__gethex+0x142>
   c5624:	230a      	movs	r3, #10
   c5626:	fb03 0202 	mla	r2, r3, r2, r0
   c562a:	3a10      	subs	r2, #16
   c562c:	e7d4      	b.n	c55d8 <__gethex+0x100>
   c562e:	4631      	mov	r1, r6
   c5630:	e7df      	b.n	c55f2 <__gethex+0x11a>
   c5632:	1bf3      	subs	r3, r6, r7
   c5634:	3b01      	subs	r3, #1
   c5636:	4621      	mov	r1, r4
   c5638:	2b07      	cmp	r3, #7
   c563a:	dc0b      	bgt.n	c5654 <__gethex+0x17c>
   c563c:	ee18 0a10 	vmov	r0, s16
   c5640:	f000 fa68 	bl	c5b14 <_Balloc>
   c5644:	4604      	mov	r4, r0
   c5646:	b940      	cbnz	r0, c565a <__gethex+0x182>
   c5648:	4b5d      	ldr	r3, [pc, #372]	; (c57c0 <__gethex+0x2e8>)
   c564a:	4602      	mov	r2, r0
   c564c:	21de      	movs	r1, #222	; 0xde
   c564e:	485d      	ldr	r0, [pc, #372]	; (c57c4 <__gethex+0x2ec>)
   c5650:	f7f8 fd8e 	bl	be170 <__assert_func>
   c5654:	3101      	adds	r1, #1
   c5656:	105b      	asrs	r3, r3, #1
   c5658:	e7ee      	b.n	c5638 <__gethex+0x160>
   c565a:	f100 0914 	add.w	r9, r0, #20
   c565e:	f04f 0b00 	mov.w	fp, #0
   c5662:	f1ca 0301 	rsb	r3, sl, #1
   c5666:	f8cd 9008 	str.w	r9, [sp, #8]
   c566a:	f8cd b000 	str.w	fp, [sp]
   c566e:	9306      	str	r3, [sp, #24]
   c5670:	42b7      	cmp	r7, r6
   c5672:	d340      	bcc.n	c56f6 <__gethex+0x21e>
   c5674:	9802      	ldr	r0, [sp, #8]
   c5676:	9b00      	ldr	r3, [sp, #0]
   c5678:	f840 3b04 	str.w	r3, [r0], #4
   c567c:	eba0 0009 	sub.w	r0, r0, r9
   c5680:	1080      	asrs	r0, r0, #2
   c5682:	0146      	lsls	r6, r0, #5
   c5684:	6120      	str	r0, [r4, #16]
   c5686:	4618      	mov	r0, r3
   c5688:	f000 fb36 	bl	c5cf8 <__hi0bits>
   c568c:	1a30      	subs	r0, r6, r0
   c568e:	f8d8 6000 	ldr.w	r6, [r8]
   c5692:	42b0      	cmp	r0, r6
   c5694:	dd63      	ble.n	c575e <__gethex+0x286>
   c5696:	1b87      	subs	r7, r0, r6
   c5698:	4639      	mov	r1, r7
   c569a:	4620      	mov	r0, r4
   c569c:	f000 feda 	bl	c6454 <__any_on>
   c56a0:	4682      	mov	sl, r0
   c56a2:	b1a8      	cbz	r0, c56d0 <__gethex+0x1f8>
   c56a4:	1e7b      	subs	r3, r7, #1
   c56a6:	1159      	asrs	r1, r3, #5
   c56a8:	f003 021f 	and.w	r2, r3, #31
   c56ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c56b0:	f04f 0a01 	mov.w	sl, #1
   c56b4:	fa0a f202 	lsl.w	r2, sl, r2
   c56b8:	420a      	tst	r2, r1
   c56ba:	d009      	beq.n	c56d0 <__gethex+0x1f8>
   c56bc:	4553      	cmp	r3, sl
   c56be:	dd05      	ble.n	c56cc <__gethex+0x1f4>
   c56c0:	1eb9      	subs	r1, r7, #2
   c56c2:	4620      	mov	r0, r4
   c56c4:	f000 fec6 	bl	c6454 <__any_on>
   c56c8:	2800      	cmp	r0, #0
   c56ca:	d145      	bne.n	c5758 <__gethex+0x280>
   c56cc:	f04f 0a02 	mov.w	sl, #2
   c56d0:	4639      	mov	r1, r7
   c56d2:	4620      	mov	r0, r4
   c56d4:	f7ff fe98 	bl	c5408 <rshift>
   c56d8:	443d      	add	r5, r7
   c56da:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c56de:	42ab      	cmp	r3, r5
   c56e0:	da4c      	bge.n	c577c <__gethex+0x2a4>
   c56e2:	ee18 0a10 	vmov	r0, s16
   c56e6:	4621      	mov	r1, r4
   c56e8:	f000 fa54 	bl	c5b94 <_Bfree>
   c56ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c56ee:	2300      	movs	r3, #0
   c56f0:	6013      	str	r3, [r2, #0]
   c56f2:	27a3      	movs	r7, #163	; 0xa3
   c56f4:	e785      	b.n	c5602 <__gethex+0x12a>
   c56f6:	1e73      	subs	r3, r6, #1
   c56f8:	9a05      	ldr	r2, [sp, #20]
   c56fa:	9303      	str	r3, [sp, #12]
   c56fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c5700:	4293      	cmp	r3, r2
   c5702:	d019      	beq.n	c5738 <__gethex+0x260>
   c5704:	f1bb 0f20 	cmp.w	fp, #32
   c5708:	d107      	bne.n	c571a <__gethex+0x242>
   c570a:	9b02      	ldr	r3, [sp, #8]
   c570c:	9a00      	ldr	r2, [sp, #0]
   c570e:	f843 2b04 	str.w	r2, [r3], #4
   c5712:	9302      	str	r3, [sp, #8]
   c5714:	2300      	movs	r3, #0
   c5716:	9300      	str	r3, [sp, #0]
   c5718:	469b      	mov	fp, r3
   c571a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c571e:	f7ff fec5 	bl	c54ac <__hexdig_fun>
   c5722:	9b00      	ldr	r3, [sp, #0]
   c5724:	f000 000f 	and.w	r0, r0, #15
   c5728:	fa00 f00b 	lsl.w	r0, r0, fp
   c572c:	4303      	orrs	r3, r0
   c572e:	9300      	str	r3, [sp, #0]
   c5730:	f10b 0b04 	add.w	fp, fp, #4
   c5734:	9b03      	ldr	r3, [sp, #12]
   c5736:	e00d      	b.n	c5754 <__gethex+0x27c>
   c5738:	9b03      	ldr	r3, [sp, #12]
   c573a:	9a06      	ldr	r2, [sp, #24]
   c573c:	4413      	add	r3, r2
   c573e:	42bb      	cmp	r3, r7
   c5740:	d3e0      	bcc.n	c5704 <__gethex+0x22c>
   c5742:	4618      	mov	r0, r3
   c5744:	9901      	ldr	r1, [sp, #4]
   c5746:	9307      	str	r3, [sp, #28]
   c5748:	4652      	mov	r2, sl
   c574a:	f7fe fee3 	bl	c4514 <strncmp>
   c574e:	9b07      	ldr	r3, [sp, #28]
   c5750:	2800      	cmp	r0, #0
   c5752:	d1d7      	bne.n	c5704 <__gethex+0x22c>
   c5754:	461e      	mov	r6, r3
   c5756:	e78b      	b.n	c5670 <__gethex+0x198>
   c5758:	f04f 0a03 	mov.w	sl, #3
   c575c:	e7b8      	b.n	c56d0 <__gethex+0x1f8>
   c575e:	da0a      	bge.n	c5776 <__gethex+0x29e>
   c5760:	1a37      	subs	r7, r6, r0
   c5762:	4621      	mov	r1, r4
   c5764:	ee18 0a10 	vmov	r0, s16
   c5768:	463a      	mov	r2, r7
   c576a:	f000 fc2f 	bl	c5fcc <__lshift>
   c576e:	1bed      	subs	r5, r5, r7
   c5770:	4604      	mov	r4, r0
   c5772:	f100 0914 	add.w	r9, r0, #20
   c5776:	f04f 0a00 	mov.w	sl, #0
   c577a:	e7ae      	b.n	c56da <__gethex+0x202>
   c577c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5780:	42a8      	cmp	r0, r5
   c5782:	dd72      	ble.n	c586a <__gethex+0x392>
   c5784:	1b45      	subs	r5, r0, r5
   c5786:	42ae      	cmp	r6, r5
   c5788:	dc36      	bgt.n	c57f8 <__gethex+0x320>
   c578a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c578e:	2b02      	cmp	r3, #2
   c5790:	d02a      	beq.n	c57e8 <__gethex+0x310>
   c5792:	2b03      	cmp	r3, #3
   c5794:	d02c      	beq.n	c57f0 <__gethex+0x318>
   c5796:	2b01      	cmp	r3, #1
   c5798:	d11c      	bne.n	c57d4 <__gethex+0x2fc>
   c579a:	42ae      	cmp	r6, r5
   c579c:	d11a      	bne.n	c57d4 <__gethex+0x2fc>
   c579e:	2e01      	cmp	r6, #1
   c57a0:	d112      	bne.n	c57c8 <__gethex+0x2f0>
   c57a2:	9a04      	ldr	r2, [sp, #16]
   c57a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c57a8:	6013      	str	r3, [r2, #0]
   c57aa:	2301      	movs	r3, #1
   c57ac:	6123      	str	r3, [r4, #16]
   c57ae:	f8c9 3000 	str.w	r3, [r9]
   c57b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c57b4:	2762      	movs	r7, #98	; 0x62
   c57b6:	601c      	str	r4, [r3, #0]
   c57b8:	e723      	b.n	c5602 <__gethex+0x12a>
   c57ba:	bf00      	nop
   c57bc:	000c8674 	.word	0x000c8674
   c57c0:	000c8601 	.word	0x000c8601
   c57c4:	000c8612 	.word	0x000c8612
   c57c8:	1e71      	subs	r1, r6, #1
   c57ca:	4620      	mov	r0, r4
   c57cc:	f000 fe42 	bl	c6454 <__any_on>
   c57d0:	2800      	cmp	r0, #0
   c57d2:	d1e6      	bne.n	c57a2 <__gethex+0x2ca>
   c57d4:	ee18 0a10 	vmov	r0, s16
   c57d8:	4621      	mov	r1, r4
   c57da:	f000 f9db 	bl	c5b94 <_Bfree>
   c57de:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c57e0:	2300      	movs	r3, #0
   c57e2:	6013      	str	r3, [r2, #0]
   c57e4:	2750      	movs	r7, #80	; 0x50
   c57e6:	e70c      	b.n	c5602 <__gethex+0x12a>
   c57e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c57ea:	2b00      	cmp	r3, #0
   c57ec:	d1f2      	bne.n	c57d4 <__gethex+0x2fc>
   c57ee:	e7d8      	b.n	c57a2 <__gethex+0x2ca>
   c57f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c57f2:	2b00      	cmp	r3, #0
   c57f4:	d1d5      	bne.n	c57a2 <__gethex+0x2ca>
   c57f6:	e7ed      	b.n	c57d4 <__gethex+0x2fc>
   c57f8:	1e6f      	subs	r7, r5, #1
   c57fa:	f1ba 0f00 	cmp.w	sl, #0
   c57fe:	d131      	bne.n	c5864 <__gethex+0x38c>
   c5800:	b127      	cbz	r7, c580c <__gethex+0x334>
   c5802:	4639      	mov	r1, r7
   c5804:	4620      	mov	r0, r4
   c5806:	f000 fe25 	bl	c6454 <__any_on>
   c580a:	4682      	mov	sl, r0
   c580c:	117b      	asrs	r3, r7, #5
   c580e:	2101      	movs	r1, #1
   c5810:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c5814:	f007 071f 	and.w	r7, r7, #31
   c5818:	fa01 f707 	lsl.w	r7, r1, r7
   c581c:	421f      	tst	r7, r3
   c581e:	4629      	mov	r1, r5
   c5820:	4620      	mov	r0, r4
   c5822:	bf18      	it	ne
   c5824:	f04a 0a02 	orrne.w	sl, sl, #2
   c5828:	1b76      	subs	r6, r6, r5
   c582a:	f7ff fded 	bl	c5408 <rshift>
   c582e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c5832:	2702      	movs	r7, #2
   c5834:	f1ba 0f00 	cmp.w	sl, #0
   c5838:	d048      	beq.n	c58cc <__gethex+0x3f4>
   c583a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c583e:	2b02      	cmp	r3, #2
   c5840:	d015      	beq.n	c586e <__gethex+0x396>
   c5842:	2b03      	cmp	r3, #3
   c5844:	d017      	beq.n	c5876 <__gethex+0x39e>
   c5846:	2b01      	cmp	r3, #1
   c5848:	d109      	bne.n	c585e <__gethex+0x386>
   c584a:	f01a 0f02 	tst.w	sl, #2
   c584e:	d006      	beq.n	c585e <__gethex+0x386>
   c5850:	f8d9 0000 	ldr.w	r0, [r9]
   c5854:	ea4a 0a00 	orr.w	sl, sl, r0
   c5858:	f01a 0f01 	tst.w	sl, #1
   c585c:	d10e      	bne.n	c587c <__gethex+0x3a4>
   c585e:	f047 0710 	orr.w	r7, r7, #16
   c5862:	e033      	b.n	c58cc <__gethex+0x3f4>
   c5864:	f04f 0a01 	mov.w	sl, #1
   c5868:	e7d0      	b.n	c580c <__gethex+0x334>
   c586a:	2701      	movs	r7, #1
   c586c:	e7e2      	b.n	c5834 <__gethex+0x35c>
   c586e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5870:	f1c3 0301 	rsb	r3, r3, #1
   c5874:	9315      	str	r3, [sp, #84]	; 0x54
   c5876:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5878:	2b00      	cmp	r3, #0
   c587a:	d0f0      	beq.n	c585e <__gethex+0x386>
   c587c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5880:	f104 0314 	add.w	r3, r4, #20
   c5884:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5888:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c588c:	f04f 0c00 	mov.w	ip, #0
   c5890:	4618      	mov	r0, r3
   c5892:	f853 2b04 	ldr.w	r2, [r3], #4
   c5896:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c589a:	d01c      	beq.n	c58d6 <__gethex+0x3fe>
   c589c:	3201      	adds	r2, #1
   c589e:	6002      	str	r2, [r0, #0]
   c58a0:	2f02      	cmp	r7, #2
   c58a2:	f104 0314 	add.w	r3, r4, #20
   c58a6:	d13f      	bne.n	c5928 <__gethex+0x450>
   c58a8:	f8d8 2000 	ldr.w	r2, [r8]
   c58ac:	3a01      	subs	r2, #1
   c58ae:	42b2      	cmp	r2, r6
   c58b0:	d10a      	bne.n	c58c8 <__gethex+0x3f0>
   c58b2:	1171      	asrs	r1, r6, #5
   c58b4:	2201      	movs	r2, #1
   c58b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c58ba:	f006 061f 	and.w	r6, r6, #31
   c58be:	fa02 f606 	lsl.w	r6, r2, r6
   c58c2:	421e      	tst	r6, r3
   c58c4:	bf18      	it	ne
   c58c6:	4617      	movne	r7, r2
   c58c8:	f047 0720 	orr.w	r7, r7, #32
   c58cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c58ce:	601c      	str	r4, [r3, #0]
   c58d0:	9b04      	ldr	r3, [sp, #16]
   c58d2:	601d      	str	r5, [r3, #0]
   c58d4:	e695      	b.n	c5602 <__gethex+0x12a>
   c58d6:	4299      	cmp	r1, r3
   c58d8:	f843 cc04 	str.w	ip, [r3, #-4]
   c58dc:	d8d8      	bhi.n	c5890 <__gethex+0x3b8>
   c58de:	68a3      	ldr	r3, [r4, #8]
   c58e0:	459b      	cmp	fp, r3
   c58e2:	db19      	blt.n	c5918 <__gethex+0x440>
   c58e4:	6861      	ldr	r1, [r4, #4]
   c58e6:	ee18 0a10 	vmov	r0, s16
   c58ea:	3101      	adds	r1, #1
   c58ec:	f000 f912 	bl	c5b14 <_Balloc>
   c58f0:	4681      	mov	r9, r0
   c58f2:	b918      	cbnz	r0, c58fc <__gethex+0x424>
   c58f4:	4b1a      	ldr	r3, [pc, #104]	; (c5960 <__gethex+0x488>)
   c58f6:	4602      	mov	r2, r0
   c58f8:	2184      	movs	r1, #132	; 0x84
   c58fa:	e6a8      	b.n	c564e <__gethex+0x176>
   c58fc:	6922      	ldr	r2, [r4, #16]
   c58fe:	3202      	adds	r2, #2
   c5900:	f104 010c 	add.w	r1, r4, #12
   c5904:	0092      	lsls	r2, r2, #2
   c5906:	300c      	adds	r0, #12
   c5908:	f7fe fd36 	bl	c4378 <memcpy>
   c590c:	4621      	mov	r1, r4
   c590e:	ee18 0a10 	vmov	r0, s16
   c5912:	f000 f93f 	bl	c5b94 <_Bfree>
   c5916:	464c      	mov	r4, r9
   c5918:	6923      	ldr	r3, [r4, #16]
   c591a:	1c5a      	adds	r2, r3, #1
   c591c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5920:	6122      	str	r2, [r4, #16]
   c5922:	2201      	movs	r2, #1
   c5924:	615a      	str	r2, [r3, #20]
   c5926:	e7bb      	b.n	c58a0 <__gethex+0x3c8>
   c5928:	6922      	ldr	r2, [r4, #16]
   c592a:	455a      	cmp	r2, fp
   c592c:	dd0b      	ble.n	c5946 <__gethex+0x46e>
   c592e:	2101      	movs	r1, #1
   c5930:	4620      	mov	r0, r4
   c5932:	f7ff fd69 	bl	c5408 <rshift>
   c5936:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c593a:	3501      	adds	r5, #1
   c593c:	42ab      	cmp	r3, r5
   c593e:	f6ff aed0 	blt.w	c56e2 <__gethex+0x20a>
   c5942:	2701      	movs	r7, #1
   c5944:	e7c0      	b.n	c58c8 <__gethex+0x3f0>
   c5946:	f016 061f 	ands.w	r6, r6, #31
   c594a:	d0fa      	beq.n	c5942 <__gethex+0x46a>
   c594c:	4453      	add	r3, sl
   c594e:	f1c6 0620 	rsb	r6, r6, #32
   c5952:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5956:	f000 f9cf 	bl	c5cf8 <__hi0bits>
   c595a:	42b0      	cmp	r0, r6
   c595c:	dbe7      	blt.n	c592e <__gethex+0x456>
   c595e:	e7f0      	b.n	c5942 <__gethex+0x46a>
   c5960:	000c8601 	.word	0x000c8601

000c5964 <L_shift>:
   c5964:	f1c2 0208 	rsb	r2, r2, #8
   c5968:	0092      	lsls	r2, r2, #2
   c596a:	b570      	push	{r4, r5, r6, lr}
   c596c:	f1c2 0620 	rsb	r6, r2, #32
   c5970:	6843      	ldr	r3, [r0, #4]
   c5972:	6804      	ldr	r4, [r0, #0]
   c5974:	fa03 f506 	lsl.w	r5, r3, r6
   c5978:	432c      	orrs	r4, r5
   c597a:	40d3      	lsrs	r3, r2
   c597c:	6004      	str	r4, [r0, #0]
   c597e:	f840 3f04 	str.w	r3, [r0, #4]!
   c5982:	4288      	cmp	r0, r1
   c5984:	d3f4      	bcc.n	c5970 <L_shift+0xc>
   c5986:	bd70      	pop	{r4, r5, r6, pc}

000c5988 <__match>:
   c5988:	b530      	push	{r4, r5, lr}
   c598a:	6803      	ldr	r3, [r0, #0]
   c598c:	3301      	adds	r3, #1
   c598e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5992:	b914      	cbnz	r4, c599a <__match+0x12>
   c5994:	6003      	str	r3, [r0, #0]
   c5996:	2001      	movs	r0, #1
   c5998:	bd30      	pop	{r4, r5, pc}
   c599a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c599e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c59a2:	2d19      	cmp	r5, #25
   c59a4:	bf98      	it	ls
   c59a6:	3220      	addls	r2, #32
   c59a8:	42a2      	cmp	r2, r4
   c59aa:	d0f0      	beq.n	c598e <__match+0x6>
   c59ac:	2000      	movs	r0, #0
   c59ae:	e7f3      	b.n	c5998 <__match+0x10>

000c59b0 <__hexnan>:
   c59b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c59b4:	680b      	ldr	r3, [r1, #0]
   c59b6:	115e      	asrs	r6, r3, #5
   c59b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c59bc:	f013 031f 	ands.w	r3, r3, #31
   c59c0:	b087      	sub	sp, #28
   c59c2:	bf18      	it	ne
   c59c4:	3604      	addne	r6, #4
   c59c6:	2500      	movs	r5, #0
   c59c8:	1f37      	subs	r7, r6, #4
   c59ca:	4690      	mov	r8, r2
   c59cc:	6802      	ldr	r2, [r0, #0]
   c59ce:	9301      	str	r3, [sp, #4]
   c59d0:	4682      	mov	sl, r0
   c59d2:	f846 5c04 	str.w	r5, [r6, #-4]
   c59d6:	46b9      	mov	r9, r7
   c59d8:	463c      	mov	r4, r7
   c59da:	9502      	str	r5, [sp, #8]
   c59dc:	46ab      	mov	fp, r5
   c59de:	7851      	ldrb	r1, [r2, #1]
   c59e0:	1c53      	adds	r3, r2, #1
   c59e2:	9303      	str	r3, [sp, #12]
   c59e4:	b341      	cbz	r1, c5a38 <__hexnan+0x88>
   c59e6:	4608      	mov	r0, r1
   c59e8:	9205      	str	r2, [sp, #20]
   c59ea:	9104      	str	r1, [sp, #16]
   c59ec:	f7ff fd5e 	bl	c54ac <__hexdig_fun>
   c59f0:	2800      	cmp	r0, #0
   c59f2:	d14f      	bne.n	c5a94 <__hexnan+0xe4>
   c59f4:	9904      	ldr	r1, [sp, #16]
   c59f6:	9a05      	ldr	r2, [sp, #20]
   c59f8:	2920      	cmp	r1, #32
   c59fa:	d818      	bhi.n	c5a2e <__hexnan+0x7e>
   c59fc:	9b02      	ldr	r3, [sp, #8]
   c59fe:	459b      	cmp	fp, r3
   c5a00:	dd13      	ble.n	c5a2a <__hexnan+0x7a>
   c5a02:	454c      	cmp	r4, r9
   c5a04:	d206      	bcs.n	c5a14 <__hexnan+0x64>
   c5a06:	2d07      	cmp	r5, #7
   c5a08:	dc04      	bgt.n	c5a14 <__hexnan+0x64>
   c5a0a:	462a      	mov	r2, r5
   c5a0c:	4649      	mov	r1, r9
   c5a0e:	4620      	mov	r0, r4
   c5a10:	f7ff ffa8 	bl	c5964 <L_shift>
   c5a14:	4544      	cmp	r4, r8
   c5a16:	d950      	bls.n	c5aba <__hexnan+0x10a>
   c5a18:	2300      	movs	r3, #0
   c5a1a:	f1a4 0904 	sub.w	r9, r4, #4
   c5a1e:	f844 3c04 	str.w	r3, [r4, #-4]
   c5a22:	f8cd b008 	str.w	fp, [sp, #8]
   c5a26:	464c      	mov	r4, r9
   c5a28:	461d      	mov	r5, r3
   c5a2a:	9a03      	ldr	r2, [sp, #12]
   c5a2c:	e7d7      	b.n	c59de <__hexnan+0x2e>
   c5a2e:	2929      	cmp	r1, #41	; 0x29
   c5a30:	d156      	bne.n	c5ae0 <__hexnan+0x130>
   c5a32:	3202      	adds	r2, #2
   c5a34:	f8ca 2000 	str.w	r2, [sl]
   c5a38:	f1bb 0f00 	cmp.w	fp, #0
   c5a3c:	d050      	beq.n	c5ae0 <__hexnan+0x130>
   c5a3e:	454c      	cmp	r4, r9
   c5a40:	d206      	bcs.n	c5a50 <__hexnan+0xa0>
   c5a42:	2d07      	cmp	r5, #7
   c5a44:	dc04      	bgt.n	c5a50 <__hexnan+0xa0>
   c5a46:	462a      	mov	r2, r5
   c5a48:	4649      	mov	r1, r9
   c5a4a:	4620      	mov	r0, r4
   c5a4c:	f7ff ff8a 	bl	c5964 <L_shift>
   c5a50:	4544      	cmp	r4, r8
   c5a52:	d934      	bls.n	c5abe <__hexnan+0x10e>
   c5a54:	f1a8 0204 	sub.w	r2, r8, #4
   c5a58:	4623      	mov	r3, r4
   c5a5a:	f853 1b04 	ldr.w	r1, [r3], #4
   c5a5e:	f842 1f04 	str.w	r1, [r2, #4]!
   c5a62:	429f      	cmp	r7, r3
   c5a64:	d2f9      	bcs.n	c5a5a <__hexnan+0xaa>
   c5a66:	1b3b      	subs	r3, r7, r4
   c5a68:	f023 0303 	bic.w	r3, r3, #3
   c5a6c:	3304      	adds	r3, #4
   c5a6e:	3401      	adds	r4, #1
   c5a70:	3e03      	subs	r6, #3
   c5a72:	42b4      	cmp	r4, r6
   c5a74:	bf88      	it	hi
   c5a76:	2304      	movhi	r3, #4
   c5a78:	4443      	add	r3, r8
   c5a7a:	2200      	movs	r2, #0
   c5a7c:	f843 2b04 	str.w	r2, [r3], #4
   c5a80:	429f      	cmp	r7, r3
   c5a82:	d2fb      	bcs.n	c5a7c <__hexnan+0xcc>
   c5a84:	683b      	ldr	r3, [r7, #0]
   c5a86:	b91b      	cbnz	r3, c5a90 <__hexnan+0xe0>
   c5a88:	4547      	cmp	r7, r8
   c5a8a:	d127      	bne.n	c5adc <__hexnan+0x12c>
   c5a8c:	2301      	movs	r3, #1
   c5a8e:	603b      	str	r3, [r7, #0]
   c5a90:	2005      	movs	r0, #5
   c5a92:	e026      	b.n	c5ae2 <__hexnan+0x132>
   c5a94:	3501      	adds	r5, #1
   c5a96:	2d08      	cmp	r5, #8
   c5a98:	f10b 0b01 	add.w	fp, fp, #1
   c5a9c:	dd06      	ble.n	c5aac <__hexnan+0xfc>
   c5a9e:	4544      	cmp	r4, r8
   c5aa0:	d9c3      	bls.n	c5a2a <__hexnan+0x7a>
   c5aa2:	2300      	movs	r3, #0
   c5aa4:	f844 3c04 	str.w	r3, [r4, #-4]
   c5aa8:	2501      	movs	r5, #1
   c5aaa:	3c04      	subs	r4, #4
   c5aac:	6822      	ldr	r2, [r4, #0]
   c5aae:	f000 000f 	and.w	r0, r0, #15
   c5ab2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5ab6:	6022      	str	r2, [r4, #0]
   c5ab8:	e7b7      	b.n	c5a2a <__hexnan+0x7a>
   c5aba:	2508      	movs	r5, #8
   c5abc:	e7b5      	b.n	c5a2a <__hexnan+0x7a>
   c5abe:	9b01      	ldr	r3, [sp, #4]
   c5ac0:	2b00      	cmp	r3, #0
   c5ac2:	d0df      	beq.n	c5a84 <__hexnan+0xd4>
   c5ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5ac8:	f1c3 0320 	rsb	r3, r3, #32
   c5acc:	fa22 f303 	lsr.w	r3, r2, r3
   c5ad0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5ad4:	401a      	ands	r2, r3
   c5ad6:	f846 2c04 	str.w	r2, [r6, #-4]
   c5ada:	e7d3      	b.n	c5a84 <__hexnan+0xd4>
   c5adc:	3f04      	subs	r7, #4
   c5ade:	e7d1      	b.n	c5a84 <__hexnan+0xd4>
   c5ae0:	2004      	movs	r0, #4
   c5ae2:	b007      	add	sp, #28
   c5ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5ae8 <__retarget_lock_acquire_recursive>:
   c5ae8:	4770      	bx	lr

000c5aea <__retarget_lock_release>:
   c5aea:	4770      	bx	lr

000c5aec <__retarget_lock_release_recursive>:
   c5aec:	4770      	bx	lr

000c5aee <__ascii_mbtowc>:
   c5aee:	b082      	sub	sp, #8
   c5af0:	b901      	cbnz	r1, c5af4 <__ascii_mbtowc+0x6>
   c5af2:	a901      	add	r1, sp, #4
   c5af4:	b142      	cbz	r2, c5b08 <__ascii_mbtowc+0x1a>
   c5af6:	b14b      	cbz	r3, c5b0c <__ascii_mbtowc+0x1e>
   c5af8:	7813      	ldrb	r3, [r2, #0]
   c5afa:	600b      	str	r3, [r1, #0]
   c5afc:	7812      	ldrb	r2, [r2, #0]
   c5afe:	1e10      	subs	r0, r2, #0
   c5b00:	bf18      	it	ne
   c5b02:	2001      	movne	r0, #1
   c5b04:	b002      	add	sp, #8
   c5b06:	4770      	bx	lr
   c5b08:	4610      	mov	r0, r2
   c5b0a:	e7fb      	b.n	c5b04 <__ascii_mbtowc+0x16>
   c5b0c:	f06f 0001 	mvn.w	r0, #1
   c5b10:	e7f8      	b.n	c5b04 <__ascii_mbtowc+0x16>
	...

000c5b14 <_Balloc>:
   c5b14:	b570      	push	{r4, r5, r6, lr}
   c5b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5b18:	4604      	mov	r4, r0
   c5b1a:	460d      	mov	r5, r1
   c5b1c:	b976      	cbnz	r6, c5b3c <_Balloc+0x28>
   c5b1e:	2010      	movs	r0, #16
   c5b20:	f7f8 fad6 	bl	be0d0 <malloc>
   c5b24:	4602      	mov	r2, r0
   c5b26:	6260      	str	r0, [r4, #36]	; 0x24
   c5b28:	b920      	cbnz	r0, c5b34 <_Balloc+0x20>
   c5b2a:	4b18      	ldr	r3, [pc, #96]	; (c5b8c <_Balloc+0x78>)
   c5b2c:	4818      	ldr	r0, [pc, #96]	; (c5b90 <_Balloc+0x7c>)
   c5b2e:	2166      	movs	r1, #102	; 0x66
   c5b30:	f7f8 fb1e 	bl	be170 <__assert_func>
   c5b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5b38:	6006      	str	r6, [r0, #0]
   c5b3a:	60c6      	str	r6, [r0, #12]
   c5b3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5b3e:	68f3      	ldr	r3, [r6, #12]
   c5b40:	b183      	cbz	r3, c5b64 <_Balloc+0x50>
   c5b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5b44:	68db      	ldr	r3, [r3, #12]
   c5b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5b4a:	b9b8      	cbnz	r0, c5b7c <_Balloc+0x68>
   c5b4c:	2101      	movs	r1, #1
   c5b4e:	fa01 f605 	lsl.w	r6, r1, r5
   c5b52:	1d72      	adds	r2, r6, #5
   c5b54:	0092      	lsls	r2, r2, #2
   c5b56:	4620      	mov	r0, r4
   c5b58:	f000 fc9d 	bl	c6496 <_calloc_r>
   c5b5c:	b160      	cbz	r0, c5b78 <_Balloc+0x64>
   c5b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5b62:	e00e      	b.n	c5b82 <_Balloc+0x6e>
   c5b64:	2221      	movs	r2, #33	; 0x21
   c5b66:	2104      	movs	r1, #4
   c5b68:	4620      	mov	r0, r4
   c5b6a:	f000 fc94 	bl	c6496 <_calloc_r>
   c5b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5b70:	60f0      	str	r0, [r6, #12]
   c5b72:	68db      	ldr	r3, [r3, #12]
   c5b74:	2b00      	cmp	r3, #0
   c5b76:	d1e4      	bne.n	c5b42 <_Balloc+0x2e>
   c5b78:	2000      	movs	r0, #0
   c5b7a:	bd70      	pop	{r4, r5, r6, pc}
   c5b7c:	6802      	ldr	r2, [r0, #0]
   c5b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5b82:	2300      	movs	r3, #0
   c5b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5b88:	e7f7      	b.n	c5b7a <_Balloc+0x66>
   c5b8a:	bf00      	nop
   c5b8c:	000c8430 	.word	0x000c8430
   c5b90:	000c8686 	.word	0x000c8686

000c5b94 <_Bfree>:
   c5b94:	b570      	push	{r4, r5, r6, lr}
   c5b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5b98:	4605      	mov	r5, r0
   c5b9a:	460c      	mov	r4, r1
   c5b9c:	b976      	cbnz	r6, c5bbc <_Bfree+0x28>
   c5b9e:	2010      	movs	r0, #16
   c5ba0:	f7f8 fa96 	bl	be0d0 <malloc>
   c5ba4:	4602      	mov	r2, r0
   c5ba6:	6268      	str	r0, [r5, #36]	; 0x24
   c5ba8:	b920      	cbnz	r0, c5bb4 <_Bfree+0x20>
   c5baa:	4b09      	ldr	r3, [pc, #36]	; (c5bd0 <_Bfree+0x3c>)
   c5bac:	4809      	ldr	r0, [pc, #36]	; (c5bd4 <_Bfree+0x40>)
   c5bae:	218a      	movs	r1, #138	; 0x8a
   c5bb0:	f7f8 fade 	bl	be170 <__assert_func>
   c5bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5bb8:	6006      	str	r6, [r0, #0]
   c5bba:	60c6      	str	r6, [r0, #12]
   c5bbc:	b13c      	cbz	r4, c5bce <_Bfree+0x3a>
   c5bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5bc0:	6862      	ldr	r2, [r4, #4]
   c5bc2:	68db      	ldr	r3, [r3, #12]
   c5bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5bc8:	6021      	str	r1, [r4, #0]
   c5bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5bce:	bd70      	pop	{r4, r5, r6, pc}
   c5bd0:	000c8430 	.word	0x000c8430
   c5bd4:	000c8686 	.word	0x000c8686

000c5bd8 <__multadd>:
   c5bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5bdc:	690d      	ldr	r5, [r1, #16]
   c5bde:	4607      	mov	r7, r0
   c5be0:	460c      	mov	r4, r1
   c5be2:	461e      	mov	r6, r3
   c5be4:	f101 0c14 	add.w	ip, r1, #20
   c5be8:	2000      	movs	r0, #0
   c5bea:	f8dc 3000 	ldr.w	r3, [ip]
   c5bee:	b299      	uxth	r1, r3
   c5bf0:	fb02 6101 	mla	r1, r2, r1, r6
   c5bf4:	0c1e      	lsrs	r6, r3, #16
   c5bf6:	0c0b      	lsrs	r3, r1, #16
   c5bf8:	fb02 3306 	mla	r3, r2, r6, r3
   c5bfc:	b289      	uxth	r1, r1
   c5bfe:	3001      	adds	r0, #1
   c5c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5c04:	4285      	cmp	r5, r0
   c5c06:	f84c 1b04 	str.w	r1, [ip], #4
   c5c0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5c0e:	dcec      	bgt.n	c5bea <__multadd+0x12>
   c5c10:	b30e      	cbz	r6, c5c56 <__multadd+0x7e>
   c5c12:	68a3      	ldr	r3, [r4, #8]
   c5c14:	42ab      	cmp	r3, r5
   c5c16:	dc19      	bgt.n	c5c4c <__multadd+0x74>
   c5c18:	6861      	ldr	r1, [r4, #4]
   c5c1a:	4638      	mov	r0, r7
   c5c1c:	3101      	adds	r1, #1
   c5c1e:	f7ff ff79 	bl	c5b14 <_Balloc>
   c5c22:	4680      	mov	r8, r0
   c5c24:	b928      	cbnz	r0, c5c32 <__multadd+0x5a>
   c5c26:	4602      	mov	r2, r0
   c5c28:	4b0c      	ldr	r3, [pc, #48]	; (c5c5c <__multadd+0x84>)
   c5c2a:	480d      	ldr	r0, [pc, #52]	; (c5c60 <__multadd+0x88>)
   c5c2c:	21b5      	movs	r1, #181	; 0xb5
   c5c2e:	f7f8 fa9f 	bl	be170 <__assert_func>
   c5c32:	6922      	ldr	r2, [r4, #16]
   c5c34:	3202      	adds	r2, #2
   c5c36:	f104 010c 	add.w	r1, r4, #12
   c5c3a:	0092      	lsls	r2, r2, #2
   c5c3c:	300c      	adds	r0, #12
   c5c3e:	f7fe fb9b 	bl	c4378 <memcpy>
   c5c42:	4621      	mov	r1, r4
   c5c44:	4638      	mov	r0, r7
   c5c46:	f7ff ffa5 	bl	c5b94 <_Bfree>
   c5c4a:	4644      	mov	r4, r8
   c5c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5c50:	3501      	adds	r5, #1
   c5c52:	615e      	str	r6, [r3, #20]
   c5c54:	6125      	str	r5, [r4, #16]
   c5c56:	4620      	mov	r0, r4
   c5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5c5c:	000c8601 	.word	0x000c8601
   c5c60:	000c8686 	.word	0x000c8686

000c5c64 <__s2b>:
   c5c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5c68:	460c      	mov	r4, r1
   c5c6a:	4615      	mov	r5, r2
   c5c6c:	461f      	mov	r7, r3
   c5c6e:	2209      	movs	r2, #9
   c5c70:	3308      	adds	r3, #8
   c5c72:	4606      	mov	r6, r0
   c5c74:	fb93 f3f2 	sdiv	r3, r3, r2
   c5c78:	2100      	movs	r1, #0
   c5c7a:	2201      	movs	r2, #1
   c5c7c:	429a      	cmp	r2, r3
   c5c7e:	db09      	blt.n	c5c94 <__s2b+0x30>
   c5c80:	4630      	mov	r0, r6
   c5c82:	f7ff ff47 	bl	c5b14 <_Balloc>
   c5c86:	b940      	cbnz	r0, c5c9a <__s2b+0x36>
   c5c88:	4602      	mov	r2, r0
   c5c8a:	4b19      	ldr	r3, [pc, #100]	; (c5cf0 <__s2b+0x8c>)
   c5c8c:	4819      	ldr	r0, [pc, #100]	; (c5cf4 <__s2b+0x90>)
   c5c8e:	21ce      	movs	r1, #206	; 0xce
   c5c90:	f7f8 fa6e 	bl	be170 <__assert_func>
   c5c94:	0052      	lsls	r2, r2, #1
   c5c96:	3101      	adds	r1, #1
   c5c98:	e7f0      	b.n	c5c7c <__s2b+0x18>
   c5c9a:	9b08      	ldr	r3, [sp, #32]
   c5c9c:	6143      	str	r3, [r0, #20]
   c5c9e:	2d09      	cmp	r5, #9
   c5ca0:	f04f 0301 	mov.w	r3, #1
   c5ca4:	6103      	str	r3, [r0, #16]
   c5ca6:	dd16      	ble.n	c5cd6 <__s2b+0x72>
   c5ca8:	f104 0909 	add.w	r9, r4, #9
   c5cac:	46c8      	mov	r8, r9
   c5cae:	442c      	add	r4, r5
   c5cb0:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5cb4:	4601      	mov	r1, r0
   c5cb6:	3b30      	subs	r3, #48	; 0x30
   c5cb8:	220a      	movs	r2, #10
   c5cba:	4630      	mov	r0, r6
   c5cbc:	f7ff ff8c 	bl	c5bd8 <__multadd>
   c5cc0:	45a0      	cmp	r8, r4
   c5cc2:	d1f5      	bne.n	c5cb0 <__s2b+0x4c>
   c5cc4:	f1a5 0408 	sub.w	r4, r5, #8
   c5cc8:	444c      	add	r4, r9
   c5cca:	1b2d      	subs	r5, r5, r4
   c5ccc:	1963      	adds	r3, r4, r5
   c5cce:	42bb      	cmp	r3, r7
   c5cd0:	db04      	blt.n	c5cdc <__s2b+0x78>
   c5cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5cd6:	340a      	adds	r4, #10
   c5cd8:	2509      	movs	r5, #9
   c5cda:	e7f6      	b.n	c5cca <__s2b+0x66>
   c5cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5ce0:	4601      	mov	r1, r0
   c5ce2:	3b30      	subs	r3, #48	; 0x30
   c5ce4:	220a      	movs	r2, #10
   c5ce6:	4630      	mov	r0, r6
   c5ce8:	f7ff ff76 	bl	c5bd8 <__multadd>
   c5cec:	e7ee      	b.n	c5ccc <__s2b+0x68>
   c5cee:	bf00      	nop
   c5cf0:	000c8601 	.word	0x000c8601
   c5cf4:	000c8686 	.word	0x000c8686

000c5cf8 <__hi0bits>:
   c5cf8:	0c03      	lsrs	r3, r0, #16
   c5cfa:	041b      	lsls	r3, r3, #16
   c5cfc:	b9d3      	cbnz	r3, c5d34 <__hi0bits+0x3c>
   c5cfe:	0400      	lsls	r0, r0, #16
   c5d00:	2310      	movs	r3, #16
   c5d02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5d06:	bf04      	itt	eq
   c5d08:	0200      	lsleq	r0, r0, #8
   c5d0a:	3308      	addeq	r3, #8
   c5d0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5d10:	bf04      	itt	eq
   c5d12:	0100      	lsleq	r0, r0, #4
   c5d14:	3304      	addeq	r3, #4
   c5d16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5d1a:	bf04      	itt	eq
   c5d1c:	0080      	lsleq	r0, r0, #2
   c5d1e:	3302      	addeq	r3, #2
   c5d20:	2800      	cmp	r0, #0
   c5d22:	db05      	blt.n	c5d30 <__hi0bits+0x38>
   c5d24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5d28:	f103 0301 	add.w	r3, r3, #1
   c5d2c:	bf08      	it	eq
   c5d2e:	2320      	moveq	r3, #32
   c5d30:	4618      	mov	r0, r3
   c5d32:	4770      	bx	lr
   c5d34:	2300      	movs	r3, #0
   c5d36:	e7e4      	b.n	c5d02 <__hi0bits+0xa>

000c5d38 <__lo0bits>:
   c5d38:	6803      	ldr	r3, [r0, #0]
   c5d3a:	f013 0207 	ands.w	r2, r3, #7
   c5d3e:	4601      	mov	r1, r0
   c5d40:	d00b      	beq.n	c5d5a <__lo0bits+0x22>
   c5d42:	07da      	lsls	r2, r3, #31
   c5d44:	d423      	bmi.n	c5d8e <__lo0bits+0x56>
   c5d46:	0798      	lsls	r0, r3, #30
   c5d48:	bf49      	itett	mi
   c5d4a:	085b      	lsrmi	r3, r3, #1
   c5d4c:	089b      	lsrpl	r3, r3, #2
   c5d4e:	2001      	movmi	r0, #1
   c5d50:	600b      	strmi	r3, [r1, #0]
   c5d52:	bf5c      	itt	pl
   c5d54:	600b      	strpl	r3, [r1, #0]
   c5d56:	2002      	movpl	r0, #2
   c5d58:	4770      	bx	lr
   c5d5a:	b298      	uxth	r0, r3
   c5d5c:	b9a8      	cbnz	r0, c5d8a <__lo0bits+0x52>
   c5d5e:	0c1b      	lsrs	r3, r3, #16
   c5d60:	2010      	movs	r0, #16
   c5d62:	b2da      	uxtb	r2, r3
   c5d64:	b90a      	cbnz	r2, c5d6a <__lo0bits+0x32>
   c5d66:	3008      	adds	r0, #8
   c5d68:	0a1b      	lsrs	r3, r3, #8
   c5d6a:	071a      	lsls	r2, r3, #28
   c5d6c:	bf04      	itt	eq
   c5d6e:	091b      	lsreq	r3, r3, #4
   c5d70:	3004      	addeq	r0, #4
   c5d72:	079a      	lsls	r2, r3, #30
   c5d74:	bf04      	itt	eq
   c5d76:	089b      	lsreq	r3, r3, #2
   c5d78:	3002      	addeq	r0, #2
   c5d7a:	07da      	lsls	r2, r3, #31
   c5d7c:	d403      	bmi.n	c5d86 <__lo0bits+0x4e>
   c5d7e:	085b      	lsrs	r3, r3, #1
   c5d80:	f100 0001 	add.w	r0, r0, #1
   c5d84:	d005      	beq.n	c5d92 <__lo0bits+0x5a>
   c5d86:	600b      	str	r3, [r1, #0]
   c5d88:	4770      	bx	lr
   c5d8a:	4610      	mov	r0, r2
   c5d8c:	e7e9      	b.n	c5d62 <__lo0bits+0x2a>
   c5d8e:	2000      	movs	r0, #0
   c5d90:	4770      	bx	lr
   c5d92:	2020      	movs	r0, #32
   c5d94:	4770      	bx	lr
	...

000c5d98 <__i2b>:
   c5d98:	b510      	push	{r4, lr}
   c5d9a:	460c      	mov	r4, r1
   c5d9c:	2101      	movs	r1, #1
   c5d9e:	f7ff feb9 	bl	c5b14 <_Balloc>
   c5da2:	4602      	mov	r2, r0
   c5da4:	b928      	cbnz	r0, c5db2 <__i2b+0x1a>
   c5da6:	4b05      	ldr	r3, [pc, #20]	; (c5dbc <__i2b+0x24>)
   c5da8:	4805      	ldr	r0, [pc, #20]	; (c5dc0 <__i2b+0x28>)
   c5daa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5dae:	f7f8 f9df 	bl	be170 <__assert_func>
   c5db2:	2301      	movs	r3, #1
   c5db4:	6144      	str	r4, [r0, #20]
   c5db6:	6103      	str	r3, [r0, #16]
   c5db8:	bd10      	pop	{r4, pc}
   c5dba:	bf00      	nop
   c5dbc:	000c8601 	.word	0x000c8601
   c5dc0:	000c8686 	.word	0x000c8686

000c5dc4 <__multiply>:
   c5dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5dc8:	4691      	mov	r9, r2
   c5dca:	690a      	ldr	r2, [r1, #16]
   c5dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5dd0:	429a      	cmp	r2, r3
   c5dd2:	bfb8      	it	lt
   c5dd4:	460b      	movlt	r3, r1
   c5dd6:	460c      	mov	r4, r1
   c5dd8:	bfbc      	itt	lt
   c5dda:	464c      	movlt	r4, r9
   c5ddc:	4699      	movlt	r9, r3
   c5dde:	6927      	ldr	r7, [r4, #16]
   c5de0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c5de4:	68a3      	ldr	r3, [r4, #8]
   c5de6:	6861      	ldr	r1, [r4, #4]
   c5de8:	eb07 060a 	add.w	r6, r7, sl
   c5dec:	42b3      	cmp	r3, r6
   c5dee:	b085      	sub	sp, #20
   c5df0:	bfb8      	it	lt
   c5df2:	3101      	addlt	r1, #1
   c5df4:	f7ff fe8e 	bl	c5b14 <_Balloc>
   c5df8:	b930      	cbnz	r0, c5e08 <__multiply+0x44>
   c5dfa:	4602      	mov	r2, r0
   c5dfc:	4b44      	ldr	r3, [pc, #272]	; (c5f10 <__multiply+0x14c>)
   c5dfe:	4845      	ldr	r0, [pc, #276]	; (c5f14 <__multiply+0x150>)
   c5e00:	f240 115d 	movw	r1, #349	; 0x15d
   c5e04:	f7f8 f9b4 	bl	be170 <__assert_func>
   c5e08:	f100 0514 	add.w	r5, r0, #20
   c5e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5e10:	462b      	mov	r3, r5
   c5e12:	2200      	movs	r2, #0
   c5e14:	4543      	cmp	r3, r8
   c5e16:	d321      	bcc.n	c5e5c <__multiply+0x98>
   c5e18:	f104 0314 	add.w	r3, r4, #20
   c5e1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5e20:	f109 0314 	add.w	r3, r9, #20
   c5e24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5e28:	9202      	str	r2, [sp, #8]
   c5e2a:	1b3a      	subs	r2, r7, r4
   c5e2c:	3a15      	subs	r2, #21
   c5e2e:	f022 0203 	bic.w	r2, r2, #3
   c5e32:	3204      	adds	r2, #4
   c5e34:	f104 0115 	add.w	r1, r4, #21
   c5e38:	428f      	cmp	r7, r1
   c5e3a:	bf38      	it	cc
   c5e3c:	2204      	movcc	r2, #4
   c5e3e:	9201      	str	r2, [sp, #4]
   c5e40:	9a02      	ldr	r2, [sp, #8]
   c5e42:	9303      	str	r3, [sp, #12]
   c5e44:	429a      	cmp	r2, r3
   c5e46:	d80c      	bhi.n	c5e62 <__multiply+0x9e>
   c5e48:	2e00      	cmp	r6, #0
   c5e4a:	dd03      	ble.n	c5e54 <__multiply+0x90>
   c5e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5e50:	2b00      	cmp	r3, #0
   c5e52:	d05a      	beq.n	c5f0a <__multiply+0x146>
   c5e54:	6106      	str	r6, [r0, #16]
   c5e56:	b005      	add	sp, #20
   c5e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5e5c:	f843 2b04 	str.w	r2, [r3], #4
   c5e60:	e7d8      	b.n	c5e14 <__multiply+0x50>
   c5e62:	f8b3 a000 	ldrh.w	sl, [r3]
   c5e66:	f1ba 0f00 	cmp.w	sl, #0
   c5e6a:	d024      	beq.n	c5eb6 <__multiply+0xf2>
   c5e6c:	f104 0e14 	add.w	lr, r4, #20
   c5e70:	46a9      	mov	r9, r5
   c5e72:	f04f 0c00 	mov.w	ip, #0
   c5e76:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5e7a:	f8d9 1000 	ldr.w	r1, [r9]
   c5e7e:	fa1f fb82 	uxth.w	fp, r2
   c5e82:	b289      	uxth	r1, r1
   c5e84:	fb0a 110b 	mla	r1, sl, fp, r1
   c5e88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5e8c:	f8d9 2000 	ldr.w	r2, [r9]
   c5e90:	4461      	add	r1, ip
   c5e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5e96:	fb0a c20b 	mla	r2, sl, fp, ip
   c5e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c5e9e:	b289      	uxth	r1, r1
   c5ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c5ea4:	4577      	cmp	r7, lr
   c5ea6:	f849 1b04 	str.w	r1, [r9], #4
   c5eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5eae:	d8e2      	bhi.n	c5e76 <__multiply+0xb2>
   c5eb0:	9a01      	ldr	r2, [sp, #4]
   c5eb2:	f845 c002 	str.w	ip, [r5, r2]
   c5eb6:	9a03      	ldr	r2, [sp, #12]
   c5eb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c5ebc:	3304      	adds	r3, #4
   c5ebe:	f1b9 0f00 	cmp.w	r9, #0
   c5ec2:	d020      	beq.n	c5f06 <__multiply+0x142>
   c5ec4:	6829      	ldr	r1, [r5, #0]
   c5ec6:	f104 0c14 	add.w	ip, r4, #20
   c5eca:	46ae      	mov	lr, r5
   c5ecc:	f04f 0a00 	mov.w	sl, #0
   c5ed0:	f8bc b000 	ldrh.w	fp, [ip]
   c5ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c5ed8:	fb09 220b 	mla	r2, r9, fp, r2
   c5edc:	4492      	add	sl, r2
   c5ede:	b289      	uxth	r1, r1
   c5ee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c5ee4:	f84e 1b04 	str.w	r1, [lr], #4
   c5ee8:	f85c 2b04 	ldr.w	r2, [ip], #4
   c5eec:	f8be 1000 	ldrh.w	r1, [lr]
   c5ef0:	0c12      	lsrs	r2, r2, #16
   c5ef2:	fb09 1102 	mla	r1, r9, r2, r1
   c5ef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c5efa:	4567      	cmp	r7, ip
   c5efc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c5f00:	d8e6      	bhi.n	c5ed0 <__multiply+0x10c>
   c5f02:	9a01      	ldr	r2, [sp, #4]
   c5f04:	50a9      	str	r1, [r5, r2]
   c5f06:	3504      	adds	r5, #4
   c5f08:	e79a      	b.n	c5e40 <__multiply+0x7c>
   c5f0a:	3e01      	subs	r6, #1
   c5f0c:	e79c      	b.n	c5e48 <__multiply+0x84>
   c5f0e:	bf00      	nop
   c5f10:	000c8601 	.word	0x000c8601
   c5f14:	000c8686 	.word	0x000c8686

000c5f18 <__pow5mult>:
   c5f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5f1c:	4615      	mov	r5, r2
   c5f1e:	f012 0203 	ands.w	r2, r2, #3
   c5f22:	4606      	mov	r6, r0
   c5f24:	460f      	mov	r7, r1
   c5f26:	d007      	beq.n	c5f38 <__pow5mult+0x20>
   c5f28:	4c25      	ldr	r4, [pc, #148]	; (c5fc0 <__pow5mult+0xa8>)
   c5f2a:	3a01      	subs	r2, #1
   c5f2c:	2300      	movs	r3, #0
   c5f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c5f32:	f7ff fe51 	bl	c5bd8 <__multadd>
   c5f36:	4607      	mov	r7, r0
   c5f38:	10ad      	asrs	r5, r5, #2
   c5f3a:	d03d      	beq.n	c5fb8 <__pow5mult+0xa0>
   c5f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5f3e:	b97c      	cbnz	r4, c5f60 <__pow5mult+0x48>
   c5f40:	2010      	movs	r0, #16
   c5f42:	f7f8 f8c5 	bl	be0d0 <malloc>
   c5f46:	4602      	mov	r2, r0
   c5f48:	6270      	str	r0, [r6, #36]	; 0x24
   c5f4a:	b928      	cbnz	r0, c5f58 <__pow5mult+0x40>
   c5f4c:	4b1d      	ldr	r3, [pc, #116]	; (c5fc4 <__pow5mult+0xac>)
   c5f4e:	481e      	ldr	r0, [pc, #120]	; (c5fc8 <__pow5mult+0xb0>)
   c5f50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c5f54:	f7f8 f90c 	bl	be170 <__assert_func>
   c5f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5f5c:	6004      	str	r4, [r0, #0]
   c5f5e:	60c4      	str	r4, [r0, #12]
   c5f60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c5f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5f68:	b94c      	cbnz	r4, c5f7e <__pow5mult+0x66>
   c5f6a:	f240 2171 	movw	r1, #625	; 0x271
   c5f6e:	4630      	mov	r0, r6
   c5f70:	f7ff ff12 	bl	c5d98 <__i2b>
   c5f74:	2300      	movs	r3, #0
   c5f76:	f8c8 0008 	str.w	r0, [r8, #8]
   c5f7a:	4604      	mov	r4, r0
   c5f7c:	6003      	str	r3, [r0, #0]
   c5f7e:	f04f 0900 	mov.w	r9, #0
   c5f82:	07eb      	lsls	r3, r5, #31
   c5f84:	d50a      	bpl.n	c5f9c <__pow5mult+0x84>
   c5f86:	4639      	mov	r1, r7
   c5f88:	4622      	mov	r2, r4
   c5f8a:	4630      	mov	r0, r6
   c5f8c:	f7ff ff1a 	bl	c5dc4 <__multiply>
   c5f90:	4639      	mov	r1, r7
   c5f92:	4680      	mov	r8, r0
   c5f94:	4630      	mov	r0, r6
   c5f96:	f7ff fdfd 	bl	c5b94 <_Bfree>
   c5f9a:	4647      	mov	r7, r8
   c5f9c:	106d      	asrs	r5, r5, #1
   c5f9e:	d00b      	beq.n	c5fb8 <__pow5mult+0xa0>
   c5fa0:	6820      	ldr	r0, [r4, #0]
   c5fa2:	b938      	cbnz	r0, c5fb4 <__pow5mult+0x9c>
   c5fa4:	4622      	mov	r2, r4
   c5fa6:	4621      	mov	r1, r4
   c5fa8:	4630      	mov	r0, r6
   c5faa:	f7ff ff0b 	bl	c5dc4 <__multiply>
   c5fae:	6020      	str	r0, [r4, #0]
   c5fb0:	f8c0 9000 	str.w	r9, [r0]
   c5fb4:	4604      	mov	r4, r0
   c5fb6:	e7e4      	b.n	c5f82 <__pow5mult+0x6a>
   c5fb8:	4638      	mov	r0, r7
   c5fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5fbe:	bf00      	nop
   c5fc0:	000c87d0 	.word	0x000c87d0
   c5fc4:	000c8430 	.word	0x000c8430
   c5fc8:	000c8686 	.word	0x000c8686

000c5fcc <__lshift>:
   c5fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5fd0:	460c      	mov	r4, r1
   c5fd2:	6849      	ldr	r1, [r1, #4]
   c5fd4:	6923      	ldr	r3, [r4, #16]
   c5fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c5fda:	68a3      	ldr	r3, [r4, #8]
   c5fdc:	4607      	mov	r7, r0
   c5fde:	4691      	mov	r9, r2
   c5fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c5fe4:	f108 0601 	add.w	r6, r8, #1
   c5fe8:	42b3      	cmp	r3, r6
   c5fea:	db0b      	blt.n	c6004 <__lshift+0x38>
   c5fec:	4638      	mov	r0, r7
   c5fee:	f7ff fd91 	bl	c5b14 <_Balloc>
   c5ff2:	4605      	mov	r5, r0
   c5ff4:	b948      	cbnz	r0, c600a <__lshift+0x3e>
   c5ff6:	4602      	mov	r2, r0
   c5ff8:	4b2a      	ldr	r3, [pc, #168]	; (c60a4 <__lshift+0xd8>)
   c5ffa:	482b      	ldr	r0, [pc, #172]	; (c60a8 <__lshift+0xdc>)
   c5ffc:	f240 11d9 	movw	r1, #473	; 0x1d9
   c6000:	f7f8 f8b6 	bl	be170 <__assert_func>
   c6004:	3101      	adds	r1, #1
   c6006:	005b      	lsls	r3, r3, #1
   c6008:	e7ee      	b.n	c5fe8 <__lshift+0x1c>
   c600a:	2300      	movs	r3, #0
   c600c:	f100 0114 	add.w	r1, r0, #20
   c6010:	f100 0210 	add.w	r2, r0, #16
   c6014:	4618      	mov	r0, r3
   c6016:	4553      	cmp	r3, sl
   c6018:	db37      	blt.n	c608a <__lshift+0xbe>
   c601a:	6920      	ldr	r0, [r4, #16]
   c601c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c6020:	f104 0314 	add.w	r3, r4, #20
   c6024:	f019 091f 	ands.w	r9, r9, #31
   c6028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c602c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c6030:	d02f      	beq.n	c6092 <__lshift+0xc6>
   c6032:	f1c9 0e20 	rsb	lr, r9, #32
   c6036:	468a      	mov	sl, r1
   c6038:	f04f 0c00 	mov.w	ip, #0
   c603c:	681a      	ldr	r2, [r3, #0]
   c603e:	fa02 f209 	lsl.w	r2, r2, r9
   c6042:	ea42 020c 	orr.w	r2, r2, ip
   c6046:	f84a 2b04 	str.w	r2, [sl], #4
   c604a:	f853 2b04 	ldr.w	r2, [r3], #4
   c604e:	4298      	cmp	r0, r3
   c6050:	fa22 fc0e 	lsr.w	ip, r2, lr
   c6054:	d8f2      	bhi.n	c603c <__lshift+0x70>
   c6056:	1b03      	subs	r3, r0, r4
   c6058:	3b15      	subs	r3, #21
   c605a:	f023 0303 	bic.w	r3, r3, #3
   c605e:	3304      	adds	r3, #4
   c6060:	f104 0215 	add.w	r2, r4, #21
   c6064:	4290      	cmp	r0, r2
   c6066:	bf38      	it	cc
   c6068:	2304      	movcc	r3, #4
   c606a:	f841 c003 	str.w	ip, [r1, r3]
   c606e:	f1bc 0f00 	cmp.w	ip, #0
   c6072:	d001      	beq.n	c6078 <__lshift+0xac>
   c6074:	f108 0602 	add.w	r6, r8, #2
   c6078:	3e01      	subs	r6, #1
   c607a:	4638      	mov	r0, r7
   c607c:	612e      	str	r6, [r5, #16]
   c607e:	4621      	mov	r1, r4
   c6080:	f7ff fd88 	bl	c5b94 <_Bfree>
   c6084:	4628      	mov	r0, r5
   c6086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c608a:	f842 0f04 	str.w	r0, [r2, #4]!
   c608e:	3301      	adds	r3, #1
   c6090:	e7c1      	b.n	c6016 <__lshift+0x4a>
   c6092:	3904      	subs	r1, #4
   c6094:	f853 2b04 	ldr.w	r2, [r3], #4
   c6098:	f841 2f04 	str.w	r2, [r1, #4]!
   c609c:	4298      	cmp	r0, r3
   c609e:	d8f9      	bhi.n	c6094 <__lshift+0xc8>
   c60a0:	e7ea      	b.n	c6078 <__lshift+0xac>
   c60a2:	bf00      	nop
   c60a4:	000c8601 	.word	0x000c8601
   c60a8:	000c8686 	.word	0x000c8686

000c60ac <__mcmp>:
   c60ac:	b530      	push	{r4, r5, lr}
   c60ae:	6902      	ldr	r2, [r0, #16]
   c60b0:	690c      	ldr	r4, [r1, #16]
   c60b2:	1b12      	subs	r2, r2, r4
   c60b4:	d10e      	bne.n	c60d4 <__mcmp+0x28>
   c60b6:	f100 0314 	add.w	r3, r0, #20
   c60ba:	3114      	adds	r1, #20
   c60bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c60c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c60c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c60c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c60cc:	42a5      	cmp	r5, r4
   c60ce:	d003      	beq.n	c60d8 <__mcmp+0x2c>
   c60d0:	d305      	bcc.n	c60de <__mcmp+0x32>
   c60d2:	2201      	movs	r2, #1
   c60d4:	4610      	mov	r0, r2
   c60d6:	bd30      	pop	{r4, r5, pc}
   c60d8:	4283      	cmp	r3, r0
   c60da:	d3f3      	bcc.n	c60c4 <__mcmp+0x18>
   c60dc:	e7fa      	b.n	c60d4 <__mcmp+0x28>
   c60de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c60e2:	e7f7      	b.n	c60d4 <__mcmp+0x28>

000c60e4 <__mdiff>:
   c60e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c60e8:	460c      	mov	r4, r1
   c60ea:	4606      	mov	r6, r0
   c60ec:	4611      	mov	r1, r2
   c60ee:	4620      	mov	r0, r4
   c60f0:	4690      	mov	r8, r2
   c60f2:	f7ff ffdb 	bl	c60ac <__mcmp>
   c60f6:	1e05      	subs	r5, r0, #0
   c60f8:	d110      	bne.n	c611c <__mdiff+0x38>
   c60fa:	4629      	mov	r1, r5
   c60fc:	4630      	mov	r0, r6
   c60fe:	f7ff fd09 	bl	c5b14 <_Balloc>
   c6102:	b930      	cbnz	r0, c6112 <__mdiff+0x2e>
   c6104:	4b3a      	ldr	r3, [pc, #232]	; (c61f0 <__mdiff+0x10c>)
   c6106:	4602      	mov	r2, r0
   c6108:	f240 2132 	movw	r1, #562	; 0x232
   c610c:	4839      	ldr	r0, [pc, #228]	; (c61f4 <__mdiff+0x110>)
   c610e:	f7f8 f82f 	bl	be170 <__assert_func>
   c6112:	2301      	movs	r3, #1
   c6114:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c6118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c611c:	bfa4      	itt	ge
   c611e:	4643      	movge	r3, r8
   c6120:	46a0      	movge	r8, r4
   c6122:	4630      	mov	r0, r6
   c6124:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c6128:	bfa6      	itte	ge
   c612a:	461c      	movge	r4, r3
   c612c:	2500      	movge	r5, #0
   c612e:	2501      	movlt	r5, #1
   c6130:	f7ff fcf0 	bl	c5b14 <_Balloc>
   c6134:	b920      	cbnz	r0, c6140 <__mdiff+0x5c>
   c6136:	4b2e      	ldr	r3, [pc, #184]	; (c61f0 <__mdiff+0x10c>)
   c6138:	4602      	mov	r2, r0
   c613a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c613e:	e7e5      	b.n	c610c <__mdiff+0x28>
   c6140:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c6144:	6926      	ldr	r6, [r4, #16]
   c6146:	60c5      	str	r5, [r0, #12]
   c6148:	f104 0914 	add.w	r9, r4, #20
   c614c:	f108 0514 	add.w	r5, r8, #20
   c6150:	f100 0e14 	add.w	lr, r0, #20
   c6154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c6158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c615c:	f108 0210 	add.w	r2, r8, #16
   c6160:	46f2      	mov	sl, lr
   c6162:	2100      	movs	r1, #0
   c6164:	f859 3b04 	ldr.w	r3, [r9], #4
   c6168:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c616c:	fa1f f883 	uxth.w	r8, r3
   c6170:	fa11 f18b 	uxtah	r1, r1, fp
   c6174:	0c1b      	lsrs	r3, r3, #16
   c6176:	eba1 0808 	sub.w	r8, r1, r8
   c617a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c617e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c6182:	fa1f f888 	uxth.w	r8, r8
   c6186:	1419      	asrs	r1, r3, #16
   c6188:	454e      	cmp	r6, r9
   c618a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c618e:	f84a 3b04 	str.w	r3, [sl], #4
   c6192:	d8e7      	bhi.n	c6164 <__mdiff+0x80>
   c6194:	1b33      	subs	r3, r6, r4
   c6196:	3b15      	subs	r3, #21
   c6198:	f023 0303 	bic.w	r3, r3, #3
   c619c:	3304      	adds	r3, #4
   c619e:	3415      	adds	r4, #21
   c61a0:	42a6      	cmp	r6, r4
   c61a2:	bf38      	it	cc
   c61a4:	2304      	movcc	r3, #4
   c61a6:	441d      	add	r5, r3
   c61a8:	4473      	add	r3, lr
   c61aa:	469e      	mov	lr, r3
   c61ac:	462e      	mov	r6, r5
   c61ae:	4566      	cmp	r6, ip
   c61b0:	d30e      	bcc.n	c61d0 <__mdiff+0xec>
   c61b2:	f10c 0203 	add.w	r2, ip, #3
   c61b6:	1b52      	subs	r2, r2, r5
   c61b8:	f022 0203 	bic.w	r2, r2, #3
   c61bc:	3d03      	subs	r5, #3
   c61be:	45ac      	cmp	ip, r5
   c61c0:	bf38      	it	cc
   c61c2:	2200      	movcc	r2, #0
   c61c4:	441a      	add	r2, r3
   c61c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c61ca:	b17b      	cbz	r3, c61ec <__mdiff+0x108>
   c61cc:	6107      	str	r7, [r0, #16]
   c61ce:	e7a3      	b.n	c6118 <__mdiff+0x34>
   c61d0:	f856 8b04 	ldr.w	r8, [r6], #4
   c61d4:	fa11 f288 	uxtah	r2, r1, r8
   c61d8:	1414      	asrs	r4, r2, #16
   c61da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c61de:	b292      	uxth	r2, r2
   c61e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c61e4:	f84e 2b04 	str.w	r2, [lr], #4
   c61e8:	1421      	asrs	r1, r4, #16
   c61ea:	e7e0      	b.n	c61ae <__mdiff+0xca>
   c61ec:	3f01      	subs	r7, #1
   c61ee:	e7ea      	b.n	c61c6 <__mdiff+0xe2>
   c61f0:	000c8601 	.word	0x000c8601
   c61f4:	000c8686 	.word	0x000c8686

000c61f8 <__ulp>:
   c61f8:	b082      	sub	sp, #8
   c61fa:	ed8d 0b00 	vstr	d0, [sp]
   c61fe:	9b01      	ldr	r3, [sp, #4]
   c6200:	4912      	ldr	r1, [pc, #72]	; (c624c <__ulp+0x54>)
   c6202:	4019      	ands	r1, r3
   c6204:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c6208:	2900      	cmp	r1, #0
   c620a:	dd05      	ble.n	c6218 <__ulp+0x20>
   c620c:	2200      	movs	r2, #0
   c620e:	460b      	mov	r3, r1
   c6210:	ec43 2b10 	vmov	d0, r2, r3
   c6214:	b002      	add	sp, #8
   c6216:	4770      	bx	lr
   c6218:	4249      	negs	r1, r1
   c621a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c621e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c6222:	f04f 0200 	mov.w	r2, #0
   c6226:	f04f 0300 	mov.w	r3, #0
   c622a:	da04      	bge.n	c6236 <__ulp+0x3e>
   c622c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c6230:	fa41 f300 	asr.w	r3, r1, r0
   c6234:	e7ec      	b.n	c6210 <__ulp+0x18>
   c6236:	f1a0 0114 	sub.w	r1, r0, #20
   c623a:	291e      	cmp	r1, #30
   c623c:	bfda      	itte	le
   c623e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c6242:	fa20 f101 	lsrle.w	r1, r0, r1
   c6246:	2101      	movgt	r1, #1
   c6248:	460a      	mov	r2, r1
   c624a:	e7e1      	b.n	c6210 <__ulp+0x18>
   c624c:	7ff00000 	.word	0x7ff00000

000c6250 <__b2d>:
   c6250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c6252:	6905      	ldr	r5, [r0, #16]
   c6254:	f100 0714 	add.w	r7, r0, #20
   c6258:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c625c:	1f2e      	subs	r6, r5, #4
   c625e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c6262:	4620      	mov	r0, r4
   c6264:	f7ff fd48 	bl	c5cf8 <__hi0bits>
   c6268:	f1c0 0320 	rsb	r3, r0, #32
   c626c:	280a      	cmp	r0, #10
   c626e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c62ec <__b2d+0x9c>
   c6272:	600b      	str	r3, [r1, #0]
   c6274:	dc14      	bgt.n	c62a0 <__b2d+0x50>
   c6276:	f1c0 0e0b 	rsb	lr, r0, #11
   c627a:	fa24 f10e 	lsr.w	r1, r4, lr
   c627e:	42b7      	cmp	r7, r6
   c6280:	ea41 030c 	orr.w	r3, r1, ip
   c6284:	bf34      	ite	cc
   c6286:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c628a:	2100      	movcs	r1, #0
   c628c:	3015      	adds	r0, #21
   c628e:	fa04 f000 	lsl.w	r0, r4, r0
   c6292:	fa21 f10e 	lsr.w	r1, r1, lr
   c6296:	ea40 0201 	orr.w	r2, r0, r1
   c629a:	ec43 2b10 	vmov	d0, r2, r3
   c629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c62a0:	42b7      	cmp	r7, r6
   c62a2:	bf3a      	itte	cc
   c62a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c62a8:	f1a5 0608 	subcc.w	r6, r5, #8
   c62ac:	2100      	movcs	r1, #0
   c62ae:	380b      	subs	r0, #11
   c62b0:	d017      	beq.n	c62e2 <__b2d+0x92>
   c62b2:	f1c0 0c20 	rsb	ip, r0, #32
   c62b6:	fa04 f500 	lsl.w	r5, r4, r0
   c62ba:	42be      	cmp	r6, r7
   c62bc:	fa21 f40c 	lsr.w	r4, r1, ip
   c62c0:	ea45 0504 	orr.w	r5, r5, r4
   c62c4:	bf8c      	ite	hi
   c62c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c62ca:	2400      	movls	r4, #0
   c62cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c62d0:	fa01 f000 	lsl.w	r0, r1, r0
   c62d4:	fa24 f40c 	lsr.w	r4, r4, ip
   c62d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c62dc:	ea40 0204 	orr.w	r2, r0, r4
   c62e0:	e7db      	b.n	c629a <__b2d+0x4a>
   c62e2:	ea44 030c 	orr.w	r3, r4, ip
   c62e6:	460a      	mov	r2, r1
   c62e8:	e7d7      	b.n	c629a <__b2d+0x4a>
   c62ea:	bf00      	nop
   c62ec:	3ff00000 	.word	0x3ff00000

000c62f0 <__d2b>:
   c62f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c62f4:	4689      	mov	r9, r1
   c62f6:	2101      	movs	r1, #1
   c62f8:	ec57 6b10 	vmov	r6, r7, d0
   c62fc:	4690      	mov	r8, r2
   c62fe:	f7ff fc09 	bl	c5b14 <_Balloc>
   c6302:	4604      	mov	r4, r0
   c6304:	b930      	cbnz	r0, c6314 <__d2b+0x24>
   c6306:	4602      	mov	r2, r0
   c6308:	4b25      	ldr	r3, [pc, #148]	; (c63a0 <__d2b+0xb0>)
   c630a:	4826      	ldr	r0, [pc, #152]	; (c63a4 <__d2b+0xb4>)
   c630c:	f240 310a 	movw	r1, #778	; 0x30a
   c6310:	f7f7 ff2e 	bl	be170 <__assert_func>
   c6314:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c6318:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c631c:	bb35      	cbnz	r5, c636c <__d2b+0x7c>
   c631e:	2e00      	cmp	r6, #0
   c6320:	9301      	str	r3, [sp, #4]
   c6322:	d028      	beq.n	c6376 <__d2b+0x86>
   c6324:	4668      	mov	r0, sp
   c6326:	9600      	str	r6, [sp, #0]
   c6328:	f7ff fd06 	bl	c5d38 <__lo0bits>
   c632c:	9900      	ldr	r1, [sp, #0]
   c632e:	b300      	cbz	r0, c6372 <__d2b+0x82>
   c6330:	9a01      	ldr	r2, [sp, #4]
   c6332:	f1c0 0320 	rsb	r3, r0, #32
   c6336:	fa02 f303 	lsl.w	r3, r2, r3
   c633a:	430b      	orrs	r3, r1
   c633c:	40c2      	lsrs	r2, r0
   c633e:	6163      	str	r3, [r4, #20]
   c6340:	9201      	str	r2, [sp, #4]
   c6342:	9b01      	ldr	r3, [sp, #4]
   c6344:	61a3      	str	r3, [r4, #24]
   c6346:	2b00      	cmp	r3, #0
   c6348:	bf14      	ite	ne
   c634a:	2202      	movne	r2, #2
   c634c:	2201      	moveq	r2, #1
   c634e:	6122      	str	r2, [r4, #16]
   c6350:	b1d5      	cbz	r5, c6388 <__d2b+0x98>
   c6352:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c6356:	4405      	add	r5, r0
   c6358:	f8c9 5000 	str.w	r5, [r9]
   c635c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6360:	f8c8 0000 	str.w	r0, [r8]
   c6364:	4620      	mov	r0, r4
   c6366:	b003      	add	sp, #12
   c6368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c636c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6370:	e7d5      	b.n	c631e <__d2b+0x2e>
   c6372:	6161      	str	r1, [r4, #20]
   c6374:	e7e5      	b.n	c6342 <__d2b+0x52>
   c6376:	a801      	add	r0, sp, #4
   c6378:	f7ff fcde 	bl	c5d38 <__lo0bits>
   c637c:	9b01      	ldr	r3, [sp, #4]
   c637e:	6163      	str	r3, [r4, #20]
   c6380:	2201      	movs	r2, #1
   c6382:	6122      	str	r2, [r4, #16]
   c6384:	3020      	adds	r0, #32
   c6386:	e7e3      	b.n	c6350 <__d2b+0x60>
   c6388:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c638c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6390:	f8c9 0000 	str.w	r0, [r9]
   c6394:	6918      	ldr	r0, [r3, #16]
   c6396:	f7ff fcaf 	bl	c5cf8 <__hi0bits>
   c639a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c639e:	e7df      	b.n	c6360 <__d2b+0x70>
   c63a0:	000c8601 	.word	0x000c8601
   c63a4:	000c8686 	.word	0x000c8686

000c63a8 <__ratio>:
   c63a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c63ac:	4688      	mov	r8, r1
   c63ae:	4669      	mov	r1, sp
   c63b0:	4681      	mov	r9, r0
   c63b2:	f7ff ff4d 	bl	c6250 <__b2d>
   c63b6:	a901      	add	r1, sp, #4
   c63b8:	4640      	mov	r0, r8
   c63ba:	ec55 4b10 	vmov	r4, r5, d0
   c63be:	f7ff ff47 	bl	c6250 <__b2d>
   c63c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c63c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c63ca:	eba3 0c02 	sub.w	ip, r3, r2
   c63ce:	e9dd 3200 	ldrd	r3, r2, [sp]
   c63d2:	1a9b      	subs	r3, r3, r2
   c63d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c63d8:	ec51 0b10 	vmov	r0, r1, d0
   c63dc:	2b00      	cmp	r3, #0
   c63de:	bfd6      	itet	le
   c63e0:	460a      	movle	r2, r1
   c63e2:	462a      	movgt	r2, r5
   c63e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c63e8:	468b      	mov	fp, r1
   c63ea:	462f      	mov	r7, r5
   c63ec:	bfd4      	ite	le
   c63ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c63f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c63f6:	4620      	mov	r0, r4
   c63f8:	ee10 2a10 	vmov	r2, s0
   c63fc:	465b      	mov	r3, fp
   c63fe:	4639      	mov	r1, r7
   c6400:	f7fd fd58 	bl	c3eb4 <__aeabi_ddiv>
   c6404:	ec41 0b10 	vmov	d0, r0, r1
   c6408:	b003      	add	sp, #12
   c640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c640e <__copybits>:
   c640e:	3901      	subs	r1, #1
   c6410:	b570      	push	{r4, r5, r6, lr}
   c6412:	1149      	asrs	r1, r1, #5
   c6414:	6914      	ldr	r4, [r2, #16]
   c6416:	3101      	adds	r1, #1
   c6418:	f102 0314 	add.w	r3, r2, #20
   c641c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c6420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c6424:	1f05      	subs	r5, r0, #4
   c6426:	42a3      	cmp	r3, r4
   c6428:	d30c      	bcc.n	c6444 <__copybits+0x36>
   c642a:	1aa3      	subs	r3, r4, r2
   c642c:	3b11      	subs	r3, #17
   c642e:	f023 0303 	bic.w	r3, r3, #3
   c6432:	3211      	adds	r2, #17
   c6434:	42a2      	cmp	r2, r4
   c6436:	bf88      	it	hi
   c6438:	2300      	movhi	r3, #0
   c643a:	4418      	add	r0, r3
   c643c:	2300      	movs	r3, #0
   c643e:	4288      	cmp	r0, r1
   c6440:	d305      	bcc.n	c644e <__copybits+0x40>
   c6442:	bd70      	pop	{r4, r5, r6, pc}
   c6444:	f853 6b04 	ldr.w	r6, [r3], #4
   c6448:	f845 6f04 	str.w	r6, [r5, #4]!
   c644c:	e7eb      	b.n	c6426 <__copybits+0x18>
   c644e:	f840 3b04 	str.w	r3, [r0], #4
   c6452:	e7f4      	b.n	c643e <__copybits+0x30>

000c6454 <__any_on>:
   c6454:	f100 0214 	add.w	r2, r0, #20
   c6458:	6900      	ldr	r0, [r0, #16]
   c645a:	114b      	asrs	r3, r1, #5
   c645c:	4298      	cmp	r0, r3
   c645e:	b510      	push	{r4, lr}
   c6460:	db11      	blt.n	c6486 <__any_on+0x32>
   c6462:	dd0a      	ble.n	c647a <__any_on+0x26>
   c6464:	f011 011f 	ands.w	r1, r1, #31
   c6468:	d007      	beq.n	c647a <__any_on+0x26>
   c646a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c646e:	fa24 f001 	lsr.w	r0, r4, r1
   c6472:	fa00 f101 	lsl.w	r1, r0, r1
   c6476:	428c      	cmp	r4, r1
   c6478:	d10b      	bne.n	c6492 <__any_on+0x3e>
   c647a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c647e:	4293      	cmp	r3, r2
   c6480:	d803      	bhi.n	c648a <__any_on+0x36>
   c6482:	2000      	movs	r0, #0
   c6484:	bd10      	pop	{r4, pc}
   c6486:	4603      	mov	r3, r0
   c6488:	e7f7      	b.n	c647a <__any_on+0x26>
   c648a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c648e:	2900      	cmp	r1, #0
   c6490:	d0f5      	beq.n	c647e <__any_on+0x2a>
   c6492:	2001      	movs	r0, #1
   c6494:	e7f6      	b.n	c6484 <__any_on+0x30>

000c6496 <_calloc_r>:
   c6496:	b513      	push	{r0, r1, r4, lr}
   c6498:	434a      	muls	r2, r1
   c649a:	4611      	mov	r1, r2
   c649c:	9201      	str	r2, [sp, #4]
   c649e:	f7f7 fe57 	bl	be150 <_malloc_r>
   c64a2:	4604      	mov	r4, r0
   c64a4:	b118      	cbz	r0, c64ae <_calloc_r+0x18>
   c64a6:	9a01      	ldr	r2, [sp, #4]
   c64a8:	2100      	movs	r1, #0
   c64aa:	f7fd ff8d 	bl	c43c8 <memset>
   c64ae:	4620      	mov	r0, r4
   c64b0:	b002      	add	sp, #8
   c64b2:	bd10      	pop	{r4, pc}
   c64b4:	0000      	movs	r0, r0
	...

000c64b8 <nan>:
   c64b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; c64c0 <nan+0x8>
   c64bc:	4770      	bx	lr
   c64be:	bf00      	nop
   c64c0:	00000000 	.word	0x00000000
   c64c4:	7ff80000 	.word	0x7ff80000

000c64c8 <__ascii_wctomb>:
   c64c8:	b149      	cbz	r1, c64de <__ascii_wctomb+0x16>
   c64ca:	2aff      	cmp	r2, #255	; 0xff
   c64cc:	bf85      	ittet	hi
   c64ce:	238a      	movhi	r3, #138	; 0x8a
   c64d0:	6003      	strhi	r3, [r0, #0]
   c64d2:	700a      	strbls	r2, [r1, #0]
   c64d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c64d8:	bf98      	it	ls
   c64da:	2001      	movls	r0, #1
   c64dc:	4770      	bx	lr
   c64de:	4608      	mov	r0, r1
   c64e0:	4770      	bx	lr
	...

000c64e4 <__aeabi_d2lz>:
   c64e4:	b538      	push	{r3, r4, r5, lr}
   c64e6:	2200      	movs	r2, #0
   c64e8:	2300      	movs	r3, #0
   c64ea:	4604      	mov	r4, r0
   c64ec:	460d      	mov	r5, r1
   c64ee:	f7fd fe29 	bl	c4144 <__aeabi_dcmplt>
   c64f2:	b928      	cbnz	r0, c6500 <__aeabi_d2lz+0x1c>
   c64f4:	4620      	mov	r0, r4
   c64f6:	4629      	mov	r1, r5
   c64f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c64fc:	f7fd bef8 	b.w	c42f0 <__aeabi_d2ulz>
   c6500:	4620      	mov	r0, r4
   c6502:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c6506:	f7fd fef3 	bl	c42f0 <__aeabi_d2ulz>
   c650a:	4240      	negs	r0, r0
   c650c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c6510:	bd38      	pop	{r3, r4, r5, pc}
   c6512:	bf00      	nop

000c6514 <dynalib_user>:
   c6514:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c6524:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c6534:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c6544:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c6554:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c6564:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c6574:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c6584:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c6594:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c65a4:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c65b4:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c65c4:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c65d4:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c65e4:	6157 6e72 6e69 2c67 4720 5350 6f20 2072     Warning, GPS or 
   c65f4:	6f43 706d 7361 2073 6164 6174 6e20 746f     Compass data not
   c6604:	6120 6176 6c69 6261 656c 6620 726f 6720      available for g
   c6614:	6572 7461 7265 7420 6168 206e 6425 736d     reater than %dms
   c6624:	202c 7865 7469 6e69 2067 7561 6f74 6f6e     , exiting autono
   c6634:	6f6d 7375 6d20 646f 0065 575b 5241 5d4e     mous mode.[WARN]
   c6644:	5820 6542 2065 654d 7373 6761 7365 6820      XBee Messages h
   c6654:	7661 2065 6f6e 2074 6562 6e65 7220 6365     ave not been rec
   c6664:	6965 6576 2064 6e69 2520 7364 202c 7361     eived in %ds, as
   c6674:	7573 696d 676e 5820 6542 2065 7369 7520     suming XBee is u
   c6684:	616e 6176 6c69 6261 656c 5b00 4157 4e52     navailable.[WARN
   c6694:	205d 4c42 2045 654d 7373 6761 7365 6820     ] BLE Messages h
   c66a4:	7661 2065 6f6e 2074 6562 6e65 7220 6365     ave not been rec
   c66b4:	6965 6576 2064 6e69 2520 7364 202c 7361     eived in %ds, as
   c66c4:	7573 696d 676e 4220 454c 6920 2073 6e75     suming BLE is un
   c66d4:	7661 6961 616c 6c62 0065 6843 6365 736b     available.Checks
   c66e4:	6d75 203a 3025 7832 202c 3025 6433 5300     um: %02x, %03d.S
   c66f4:	7274 6e69 2067 654c 3a6e 2520 2c64 4320     tring Len: %d, C
   c6704:	6568 6b63 7573 3a6d 2520 0064 575b 5241     hecksum: %d.[WAR
   c6714:	5d4e 4d20 7365 6173 6567 4320 6568 6b63     N] Message Check
   c6724:	7573 206d 6f44 7365 4e20 746f 4d20 7461     sum Does Not Mat
   c6734:	6863 3a21 2520 0073 6157 6e72 6e69 2c67     ch!: %s.Warning,
   c6744:	6320 6568 6b63 7573 206d 6f64 7365 6e20      checksum does n
   c6754:	746f 6d20 7461 6863 6300 6c74 2500 2073     ot match.ctl.%s 
   c6764:	7325 2520 2064 6425 2520 0064 654e 2077     %s %d %d %d.New 
   c6774:	6174 6772 7465 4720 5350 202c 614c 3a74     target GPS, Lat:
   c6784:	2520 2066 6f4c 3a6e 2520 0066 746d 0072      %f Lon: %f.mtr.
   c6794:	6552 6563 7669 6465 4d20 746f 726f 4320     Received Motor C
   c67a4:	6d6f 616d 646e 203a 534c 6570 6465 253d     ommand: LSpeed=%
   c67b4:	2c64 5352 6570 6465 253d 0064 6572 0071     d,RSpeed=%d.req.
   c67c4:	7470 0073 505b 5455 5d53 5220 6365 6965     pts.[PUTS] Recei
   c67d4:	6576 2064 7453 6972 676e 4320 6d6f 616d     ved String Comma
   c67e4:	646e 203a 7325 7300 6370 6800 6177 6400     nd: %s.spc.hwa.d
   c67f4:	706d 6500 7067 2500 2073 7325 5b00 4e49     mp.egp.%s %s.[IN
   c6804:	4f46 205d 6552 6563 7669 6465 4c20 4554     FO] Received LTE
   c6814:	4d20 7365 6173 6567 203a 7325 4e00 7765      Message: %s.New
   c6824:	4220 2054 6f43 6d6d 6e61 3a64 5b00 4e49      BT Command:.[IN
   c6834:	4f46 205d 6552 6563 7669 6465 4220 454c     FO] Received BLE
   c6844:	4d20 7365 6173 6567 203a 7325 4500 7272      Message: %s.Err
   c6854:	726f 202c 6f43 6c75 2064 6f6e 2074 6e69     or, Could not in
   c6864:	7469 6169 696c 657a 4720 5350 4c00 7461     itialize GPS.Lat
   c6874:	203a 6625 4c20 6e6f 2520 2066 4c54 7461     : %f Lon %f TLat
   c6884:	203a 6625 5420 6f4c 3a6e 2520 2c66 4320     : %f TLon: %f, C
   c6894:	6d6f 6170 7373 203a 6625 202c 7254 7661     ompass: %f, Trav
   c68a4:	6c65 6820 3a64 2520 2c66 5420 4420 6c65     el hd: %f, T Del
   c68b4:	6174 203a 6625 202c 6944 7473 203a 6625     ta: %f, Dist: %f
   c68c4:	2500 3230 2564 3230 2564 3430 2564 3230     .%02d%02d%04d%02
   c68d4:	2564 3230 2564 3230 0064 7325 252c 2c66     d%02d%02d.%s,%f,
   c68e4:	6625 252c 2c66 6625 252c 2c66 6625 252c     %f,%f,%f,%f,%f,%
   c68f4:	0066 654e 2077 4258 6565 4320 6d6f 616d     f.New XBee Comma
   c6904:	646e 003a 495b 464e 5d4f 5220 6365 6965     nd:.[INFO] Recei
   c6914:	6576 2064 4258 6565 4d20 7365 6173 6567     ved XBee Message
   c6924:	203a 7325 4500 746e 7265 6e69 2067 6144     : %s.Entering Da
   c6934:	6174 4f20 6666 6f6c 6461 7265 4d20 646f     ta Offloader Mod
   c6944:	0065 002f 7245 6f72 2c72 6320 756f 646c     e./.Error, could
   c6954:	6e20 746f 6f20 6570 206e 6f72 746f 5320      not open root S
   c6964:	2044 6163 6472 6420 7269 6365 6f74 7972     D card directory
   c6974:	5700 6961 6974 676e 6620 726f 4320 4843     .Waiting for CCH
   c6984:	6275 6320 6e6f 656e 7463 6f69 2e6e 2e2e     ub connection...
   c6994:	5300 6174 7472 6e69 2067 7274 6e61 6673     .Starting transf
   c69a4:	7265 2e2e 002e 6843 6365 696b 676e 6920     er....Checking i
   c69b4:	2066 6966 656c 2520 2073 7369 6120 2e20     f file %s is a .
   c69c4:	7363 2076 726f 2e20 7874 2e74 2e2e 2e00     csv or .txt.....
   c69d4:	7363 0076 6966 656c 6f64 656e 6600 6c69     csv.filedone.fil
   c69e4:	6e65 6d61 0065 6553 646e 6e69 2067 6f63     ename.Sending co
   c69f4:	6d6d 6e61 2064 7325 4600 6c69 2065 7325     mmand %s.File %s
   c6a04:	6920 2073 2061 632e 7673 6f20 2072 742e      is a .csv or .t
   c6a14:	7478 7020 6972 746e 6e69 2067 6164 6174     xt printing data
   c6a24:	6600 6c69 6365 6d6f 0070 7325 3025 7832     .filecomp.%s%02x
   c6a34:	4200 746f 6431 7461 4200 6425 4343 6e73     .Bot1dat.B%dCCsn
   c6a44:	2573 2e30 6636 2520 2e30 6636 2520 2064     s%0.6f %0.6f %d 
   c6a54:	6425 2520 2064 6425 2520 2064 4200 6425     %d %d %d %d .B%d
   c6a64:	4241 7573 2570 2064 6425 2520 362e 2066     ABsup%d %d %.6f 
   c6a74:	2e25 6636 0020 4343 7548 0062 6e49 7570     %.6f .CCHub.Inpu
   c6a84:	2074 6f43 6d6d 6e61 0064 6146 6c69 6465     t Command.Failed
   c6a94:	7420 206f 6966 646e 4c20 5349 4d33 4c44      to find LIS3MDL
   c6aa4:	6320 6968 0070 494c 3353 444d 204c 6f46      chip.LIS3MDL Fo
   c6ab4:	6e75 2164 5700 7461 7265 6f42 0074 4c5f     und!.WaterBot._L
   c6ac4:	474f 742e 7478 4500 7272 726f 203a 6f63     OG.txt.Error: co
   c6ad4:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c6ae4:	6f74 5320 2044 6163 6472 0021 6954 656d     to SD card!.Time
   c6af4:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
   c6b04:	6475 2c65 6554 706d 7265 7461 7275 2c65     ude,Temperature,
   c6b14:	4870 442c 7369 6f73 766c 6465 4f20 2c32     pH,Dissolved O2,
   c6b24:	6f43 646e 6375 6974 6976 7974 3020 312e     Conductivity 0.1
   c6b34:	2c4b 6f43 646e 6375 6974 6976 7974 3120     K,Conductivity 1
   c6b44:	004b 495b 464e 5d4f 5720 7461 7265 6f42     K.[INFO] WaterBo
   c6b54:	2074 6425 203a 7453 7261 6574 2064 6f4c     t %d: Started Lo
   c6b64:	6767 6e69 2167 7400 0078 7872 6f00 6666     gging!.tx.rx.off
   c6b74:	6400 6762 0000 0000                         .dbg....

000c6b7c <_ZTVN8particle11SPISettingsE>:
	...
   c6b84:	431d 000b 40d1 000b 418d 000b               .C...@...A..

000c6b90 <_ZTV5Timer>:
	...
   c6b98:	4489 000b 44dd 000b 41f3 000b               .D...D...A..

000c6ba4 <_ZTVN5spark10LogHandlerE>:
	...
   c6bb4:	40a9 000b 40d3 000b                         .@...@..

000c6bbc <_ZTVN8particle9LEDStatusE>:
	...
   c6bc4:	4289 000b 42a5 000b 40dd 000b               .B...B...@..

000c6bd0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6bd8:	42b9 000b 42ed 000b 0da1 000c 40d5 000b     .B...B.......@..

000c6be8 <_ZTV4File>:
	...
   c6bf0:	40f9 000b 419b 000b 41af 000b 41a9 000b     .@...A...A...A..
   c6c00:	40df 000b 41d3 000b 41cd 000b 41c7 000b     .@...A...A...A..
   c6c10:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6c20:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6c30:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6c40:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6c50:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6c60:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6c70:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6c80:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6c90:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6ca0:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6cb0:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6cc0:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6ccc <CSWTCH.381>:
   c6ccc:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6cdc:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6cec:	444d 004c                                   MDL.

000c6cf0 <CSWTCH.26>:
   c6cf0:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c6d00 <_ZTV16Adafruit_LIS3MDL>:
	...
   c6d08:	80cb 000b 8115 000b 80c9 000b 81c5 000b     ................
   c6d18:	80cd 000b 6573 5074 6361 656b 4374 6766     ....setPacketCfg
   c6d28:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c6d38:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c6d48:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c6d58:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c6d68:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c6d78:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c6d88:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c6d98:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c6da8:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c6db8:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c6dc8:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c6dd8:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c6de8:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c6df8:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c6e08:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c6e18:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c6e28:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c6e38:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c6e48:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c6e58:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c6e68:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c6e78:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c6e88:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c6e98:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c6ea8:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c6eb8:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c6ec8:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c6ed8:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c6ee8:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c6ef8:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c6f08:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c6f18:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c6f28:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c6f38:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c6f48:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c6f58:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c6f68:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c6f78:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c6f88:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c6f98:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c6fa8:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c6fb8:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c6fc8:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c6fd8:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c6fe8:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c6ff8:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c7008:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c7018:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c7028:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c7038:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c7048:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c7058:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c7068:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c7078:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c7088:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c7098:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c70a8:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c70b8:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c70c8:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c70d8:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c70e8:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c70f8:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c7108:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c7118:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c7128:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c7138:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c7148:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c7158:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c7168:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c7178:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c7188:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c7198:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c71a8:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c71b8:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c71c8:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c71d8:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c71e8:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c71f8:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c7208:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c7218:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c7228:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c7238:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c7248:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c7258:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c7268:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c7278:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c7288:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c7298:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c72a8:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c72b8:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c72c8:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c72d8:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c72e8:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c72f8:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c7308:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c7318:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c7328:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c7338:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c7348:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c7358:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c7368:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c7378:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c7388:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c7398:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c73a8:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c73b8:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c73c8:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c73d8:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c73e8:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c73f8:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c7408:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c7418:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c7428:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c7438:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c7448:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c7458:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c7468:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c7478:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c7488:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c7498:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c74a8:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c74b8:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c74c8:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c74d8:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c74e8:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c74f8:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c7508:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c7518:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c7528:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c7538:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c7548:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c7558:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c7568:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c7578:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c7588:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c7598:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c75a8:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c75b8:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c75c8:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c75d8:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c75e8:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c75f8:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c7608:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c7618:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c7628:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c7638:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c7648:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c7658:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c7668:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c7678:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c7688:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c7698:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c76a8:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c76b8:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c76c8:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c76d8:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c76e8:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c76f8:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c7708:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c7718:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c7728:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c7738:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c7748:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c7758:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c7768:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c7778:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c7788:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c7798:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c77a8:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c77b8:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c77c8:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c77d8:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c77e8:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c77f8:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c7808:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c7818:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c7828:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c7838:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c7848:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c7858:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c7868:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c7878:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c7888:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c7898:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c78a8:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c78b8:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c78c8:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c78d8:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c78e8:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c78f8:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c7908:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c7918:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c7928:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c7938:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c7948:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c7958:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c7968:	7365 2e73 2e2e 0000                         ess.....

000c7970 <CSWTCH.334>:
   c7970:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7980:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7990:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c79b0:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c79d8:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7a2c:	0000 0010 0004                              ......

000c7a32 <CSWTCH.335>:
   c7a32:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7a4e:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7a5a <CSWTCH.336>:
   c7a5a:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c7a6a:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c7a7a:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c7a8a:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c7a9a:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c7aaa:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c7aba:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c7aca:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c7ada:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c7aea:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c7afa:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c7b0a:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c7b1a:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c7b2a:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c7b3a:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c7b4a:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c7b5a:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c7b6a:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c7b7a:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c7b8a:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c7b9a:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c7bac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7bb4:	e1ed 000b e251 000b e325 000b e27b 000b     ....Q...%...{...
   c7bc4:	e1f1 000b                                   ....

000c7bc8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7bd0:	e1e9 000b e25f 000b e1eb 000b e281 000b     ...._...........
   c7be0:	e211 000b                                   ....

000c7be4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7bec:	e1e7 000b e26d 000b eae1 000b e287 000b     ....m...........
   c7bfc:	e231 000b                                   1...

000c7c00 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7c0c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7c1e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7c1e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7c2e <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7c2e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7c40 <_ZTVN5spark13CellularClassE>:
	...
   c7c48:	f5a3 000b f599 000b f58f 000b f545 000b     ............E...
   c7c58:	f583 000b f577 000b 10f9 000c 1101 000c     ....w...........
   c7c68:	f56b 000b f563 000b f559 000b f54f 000b     k...c...Y...O...
   c7c78:	1131 000c                                   1...

000c7c7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7c84:	f5dd 000b f5e3 000b f621 000b f5f1 000b     ........!.......
   c7c94:	f5df 000b                                   ....

000c7c98 <_ZTVN5spark13EthernetClassE>:
	...
   c7ca0:	fbb7 000b fbad 000b fba3 000b fb99 000b     ................
   c7cb0:	fb8d 000b fb81 000b 10f9 000c 1101 000c     ................
   c7cc0:	fb75 000b fb6d 000b fb63 000b fb59 000b     u...m...c...Y...
   c7cd0:	1131 000c                                   1...

000c7cd4 <_ZTV7TwoWire>:
	...
   c7cdc:	fbd5 000b fc1f 000b fbf7 000b fbd7 000b     ................
   c7cec:	fbff 000b fc07 000b fc0f 000b fc17 000b     ................

000c7cfc <_ZTV9IPAddress>:
	...
   c7d04:	fcf1 000b fce1 000b fce3 000b 7525 7500     ............%u.u
   c7d14:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c7d24:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c7d34:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c7d44:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c7d54:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c7d64:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c7d74:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c7d84:	6961 006c                                   ail.

000c7d88 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7d90:	01ed 000c 0213 000c 01d1 000c fdff 000b     ................

000c7da0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7da8:	0649 000c 0661 000c 0da1 000c 40d5 000b     I...a........@..

000c7db8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7dc0:	0675 000c 0689 000c 0f45 000c 01d9 000c     u.......E.......

000c7dd0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7dd8:	01eb 000c 0221 000c 0d05 000c 01db 000c     ....!...........

000c7de8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7df0:	01e9 000c 022f 000c 05b1 000c 0251 000c     ..../.......Q...

000c7e00 <_ZTVN5spark12NetworkClassE>:
	...
   c7e08:	10b9 000c 10c3 000c 10cd 000c 10d7 000c     ................
   c7e18:	10e1 000c 10ed 000c 10f9 000c 1101 000c     ................
   c7e28:	1109 000c 1115 000c 111d 000c 1127 000c     ............'...
   c7e38:	1131 000c                                   1...

000c7e3c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7e3c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c7e4c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c7e5c:	6d69 0065                                   ime.

000c7e60 <_ZTV11USARTSerial>:
	...
   c7e68:	1a7d 000c 1ae9 000c 1ac1 000c 121d 000c     }...............
   c7e78:	1a91 000c 1aad 000c 1a9f 000c 1abb 000c     ................
   c7e88:	1a7f 000c 1a83 000c                         ........

000c7e90 <_ZTV9USBSerial>:
	...
   c7e98:	1b3b 000c 1ba3 000c 1b79 000c 121d 000c     ;.......y.......
   c7ea8:	1b6b 000c 1b3d 000c 1b4d 000c 1b9d 000c     k...=...M.......
   c7eb8:	1b5d 000c 1b35 000c                         ]...5...

000c7ec0 <_ZSt7nothrow>:
	...

000c7ec1 <_ZTSSt19_Sp_make_shared_tag>:
   c7ec1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c7ed1:	6572 5f64 6174 0067 0000                     red_tag....

000c7edc <_ZTISt19_Sp_make_shared_tag>:
   c7edc:	7f1c 000c 7ec1 000c                         .....~..

000c7ee4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7ee4:	7f7c 000c 7ef0 000c 7fa0 000c               |....~......

000c7ef0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c7ef0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c7f00:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c7f10:	0045 0000                                   E...

000c7f14 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7f14:	0000 0000 7ee4 000c 1fcd 000c 1fe1 000c     .....~..........
   c7f24:	2175 000c 2175 000c 204b 000c 1f8d 000c     u!..u!..K ......
   c7f34:	2033 000c 1ff5 000c 1fbf 000c               3 ..........

000c7f40 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c7f40:	7f7c 000c 7f4c 000c 7ee4 000c               |...L....~..

000c7f4c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7f4c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7f5c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7f6c:	666e 456f 0000 0000                         nfoE....

000c7f74 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c7f74:	0000 0000 7f40 000c 2075 000c 2089 000c     ....@...u ... ..
   c7f84:	2175 000c 2175 000c 204b 000c 1f8d 000c     u!..u!..K ......
   c7f94:	2149 000c 20d5 000c 209d 000c               I!... ... ..

000c7fa0 <_ZTISt9type_info>:
   c7fa0:	7f1c 000c 7fa8 000c                         ........

000c7fa8 <_ZTSSt9type_info>:
   c7fa8:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000c7fb8 <CSWTCH.8>:
   c7fb8:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c7fc8:	21d2 7f33 d97c c002                         .!3.|...

000c7fd0 <CSWTCH.9>:
   c7fd0:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c7fe0:	2d18 5444 21fb c009                         .-DT.!..

000c7fe8 <CSWTCH.8>:
   c7fe8:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c7ff4 <CSWTCH.9>:
   c7ff4:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c8000 <npio2_hw>:
   c8000:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c8010:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c8020:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c8030:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c8040:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c8050:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c8060:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8070:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8080 <two_over_pi>:
   c8080:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8090:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c80a0:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c80b0:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c80c0:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c80d0:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c80e0:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c80f0:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c8100:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c8110:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c8120:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c8130:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c8140:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c8150:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c8160:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8170:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8180:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8190:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c81a0:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c81b0:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c81c0:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c81d0:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c81e0:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c81f0:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c8200:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c8210:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c8220:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c8230:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c8240:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c8250:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c8260:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8270:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8280:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8290:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c82a0:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c82b0:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c82c0:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c82d0:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c82e0:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c82f0:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c8300:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c8310:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c8320:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c8330:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c8340:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c8350:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c8360:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8370:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8380:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8390:	008c 0000 006b 0000                         ....k...

000c8398 <PIo2>:
   c8398:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c83a8:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c83b8:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c83c4 <init_jk>:
   c83c4:	0004 0000 0007 0000 0009 0000               ............

000c83d0 <atanhi>:
   c83d0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c83e0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c83f0 <atanlo>:
   c83f0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c8400:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c8410 <atanhi>:
   c8410:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c8420 <atanlo>:
   c8420:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c8430:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c8440:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c8450:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c8460:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c8470:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c8480:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c8490:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c84a0:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c84ac <fpi.1>:
   c84ac:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c84bc:	0000 0000                                   ....

000c84c0 <fpinan.0>:
   c84c0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c84d8 <tinytens>:
   c84d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c84e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c84f8:	6f43 64ac 0628 1168                         Co.d(.h.

000c8500 <_ctype_>:
   c8500:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c8510:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c8520:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c8530:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c8540:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c8550:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8560:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8570:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8580:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c8600:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c8610:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c8620:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c8630:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c8640:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c8650:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c8660:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c8670:	632e 0000                                   .c..

000c8674 <_C_numeric_locale>:
   c8674:	6ef3 000c 7d73 000c dbd0 2003 4f50 4953     .n..s}..... POSI
   c8684:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c8694:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c86a4:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c86b4:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c86c4:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c86d4:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c86e0 <__mprec_bigtens>:
   c86e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c86f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c8700:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c8708 <__mprec_tens>:
   c8708:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8718:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c8728:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8738:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8748:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8758:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8768:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8778:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8788:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8798:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c87a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c87b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c87c8:	9db4 79d9 7843 44ea                         ...yCx.D

000c87d0 <p05.0>:
   c87d0:	0005 0000 0019 0000 007d 0000               ........}...

000c87dc <link_const_variable_data_end>:
   c87dc:	000b6611 	.word	0x000b6611
   c87e0:	000bf535 	.word	0x000bf535
   c87e4:	000bf5ad 	.word	0x000bf5ad
   c87e8:	000bfbc1 	.word	0x000bfbc1
   c87ec:	000c0d91 	.word	0x000c0d91
   c87f0:	000c1209 	.word	0x000c1209
   c87f4:	000c132d 	.word	0x000c132d
   c87f8:	000c18c5 	.word	0x000c18c5
   c87fc:	000c1a69 	.word	0x000c1a69
