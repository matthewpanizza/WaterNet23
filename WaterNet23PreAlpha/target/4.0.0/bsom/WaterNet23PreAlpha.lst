
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014ad0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8af0  000c8af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8b14  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db20  000c8b18  0002db20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ad0  2003dd20  2003dd20  0003dd20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8d18  000c8d18  00038d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8d40  000c8d40  00038d40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e926  00000000  00000000  00038d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f90  00000000  00000000  0026766a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00071408  00000000  00000000  002885fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f98  00000000  00000000  002f9a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011550  00000000  00000000  002fe99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ffa4  00000000  00000000  0030feea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087d64  00000000  00000000  0035fe8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c972  00000000  00000000  003e7bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fdc8  00000000  00000000  00544564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 fb11 	bl	c4658 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 fb33 	bl	c46a8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db20 	.word	0x2003db20
   b404c:	000c8b18 	.word	0x000c8b18
   b4050:	2003dd20 	.word	0x2003dd20
   b4054:	2003dd20 	.word	0x2003dd20
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d ffb5 	bl	c1fd0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c8ac4 	.word	0x000c8ac4
   b4080:	000c8ae8 	.word	0x000c8ae8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 b8fc 	b.w	b6280 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f87d 	bl	b6188 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d bf55 	b.w	c1f40 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f00a b94b 	b.w	be330 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b949 	b.w	be330 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b94f 	b.w	be340 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f00a b94d 	b.w	be340 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f00a f830 	bl	be114 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdd25 	.word	0x000bdd25
   b40bc:	000c6808 	.word	0x000c6808

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:
}

void StatusHandler(){
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dd80 	.word	0x2003dd80
   b4154:	2003dd38 	.word	0x2003dd38
   b4158:	2003dd6d 	.word	0x2003dd6d
   b415c:	2003e0b4 	.word	0x2003e0b4
   b4160:	2003ddb5 	.word	0x2003ddb5
   b4164:	2003dee0 	.word	0x2003dee0
   b4168:	2003ded9 	.word	0x2003ded9
   b416c:	2003dd6c 	.word	0x2003dd6c
   b4170:	2003dd48 	.word	0x2003dd48
   b4174:	2003dd70 	.word	0x2003dd70
   b4178:	2003e5ac 	.word	0x2003e5ac
   b417c:	2003e5cc 	.word	0x2003e5cc

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b419e:	3010      	adds	r0, #16
   b41a0:	f002 bf2a 	b.w	b6ff8 <_ZN7FatFile4syncEv>

000b41a4 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41a4:	3010      	adds	r0, #16
   b41a6:	f002 be0b 	b.w	b6dc0 <_ZN7FatFile4peekEv>

000b41aa <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41aa:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41ac:	2201      	movs	r2, #1
   b41ae:	f10d 0107 	add.w	r1, sp, #7
   b41b2:	3010      	adds	r0, #16
   b41b4:	f002 fd56 	bl	b6c64 <_ZN7FatFile4readEPvj>
   b41b8:	2801      	cmp	r0, #1
   b41ba:	bf0c      	ite	eq
   b41bc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b41c4:	b003      	add	sp, #12
   b41c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ca <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b41ca:	3010      	adds	r0, #16
   b41cc:	f002 bf9e 	b.w	b710c <_ZN7FatFile5writeEPKvj>

000b41d0 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b41d0:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b41d2:	2201      	movs	r2, #1
   b41d4:	f88d 1007 	strb.w	r1, [sp, #7]
   b41d8:	3010      	adds	r0, #16
   b41da:	f10d 0107 	add.w	r1, sp, #7
   b41de:	f002 ff95 	bl	b710c <_ZN7FatFile5writeEPKvj>
  }
   b41e2:	b003      	add	sp, #12
   b41e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b41e8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41e8:	6943      	ldr	r3, [r0, #20]
   b41ea:	b113      	cbz	r3, b41f2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41ec:	6983      	ldr	r3, [r0, #24]
   b41ee:	300c      	adds	r0, #12
   b41f0:	4718      	bx	r3
            callback();
        }
    }
   b41f2:	4770      	bx	lr

000b41f4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41f4:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41f6:	2100      	movs	r1, #0
   b41f8:	4604      	mov	r4, r0
   b41fa:	4608      	mov	r0, r1
   b41fc:	f009 fd3a 	bl	bdc74 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4200:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4202:	4620      	mov	r0, r4
   b4204:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4206:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4208:	f009 fd4c 	bl	bdca4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b420c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b420e:	b10c      	cbz	r4, b4214 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4210:	2301      	movs	r3, #1
   b4212:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4214:	2100      	movs	r1, #0
   b4216:	2001      	movs	r0, #1
   b4218:	f009 fd2c 	bl	bdc74 <os_thread_scheduling>
            }
        }
        if (t) {
   b421c:	b12c      	cbz	r4, b422a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b421e:	6823      	ldr	r3, [r4, #0]
   b4220:	4620      	mov	r0, r4
   b4222:	689b      	ldr	r3, [r3, #8]
   b4224:	4798      	blx	r3
            t->running = false;
   b4226:	2300      	movs	r3, #0
   b4228:	7123      	strb	r3, [r4, #4]
        }
    }
   b422a:	b002      	add	sp, #8
   b422c:	bd10      	pop	{r4, pc}

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b4246:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4248:	6880      	ldr	r0, [r0, #8]
   b424a:	b128      	cbz	r0, b4258 <_ZN5Timer5_stopEjb.isra.0+0x12>
   b424c:	2300      	movs	r3, #0
   b424e:	e9cd 1300 	strd	r1, r3, [sp]
   b4252:	2102      	movs	r1, #2
   b4254:	f009 fd2e 	bl	bdcb4 <os_timer_change>
    }
   b4258:	b003      	add	sp, #12
   b425a:	f85d fb04 	ldr.w	pc, [sp], #4

000b425e <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b425e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4260:	4606      	mov	r6, r0
   b4262:	4614      	mov	r4, r2
   b4264:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4266:	2200      	movs	r2, #0
   b4268:	4621      	mov	r1, r4
   b426a:	f7ff ffec 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b426e:	68b0      	ldr	r0, [r6, #8]
   b4270:	b130      	cbz	r0, b4280 <_ZN5Timer6_startEjb.isra.0+0x22>
   b4272:	2300      	movs	r3, #0
   b4274:	e9cd 5300 	strd	r5, r3, [sp]
   b4278:	4622      	mov	r2, r4
   b427a:	4619      	mov	r1, r3
   b427c:	f009 fd1a 	bl	bdcb4 <os_timer_change>
    }
   b4280:	b002      	add	sp, #8
   b4282:	bd70      	pop	{r4, r5, r6, pc}

000b4284 <_Z13buttonHandlerv>:
void buttonTimer(){
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
    shutdownTimer.stopFromISR();
}

void buttonHandler(){
   b4284:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){
   b4286:	2012      	movs	r0, #18
   b4288:	f00d ff3c 	bl	c2104 <digitalRead>
   b428c:	4d08      	ldr	r5, [pc, #32]	; (b42b0 <_Z13buttonHandlerv+0x2c>)
   b428e:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b4290:	2201      	movs	r2, #1
   b4292:	b130      	cbz	r0, b42a2 <_Z13buttonHandlerv+0x1e>
   b4294:	4807      	ldr	r0, [pc, #28]	; (b42b4 <_Z13buttonHandlerv+0x30>)
   b4296:	2100      	movs	r1, #0
   b4298:	f7ff ffe1 	bl	b425e <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();
        shutdownActive = true;
   b429c:	2301      	movs	r3, #1
   b429e:	702b      	strb	r3, [r5, #0]
    }
    else{
        shutdownTimer.stopFromISR();
        shutdownActive = false;
    }
}
   b42a0:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b42a2:	4601      	mov	r1, r0
   b42a4:	4803      	ldr	r0, [pc, #12]	; (b42b4 <_Z13buttonHandlerv+0x30>)
   b42a6:	f7ff ffce 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;
   b42aa:	702c      	strb	r4, [r5, #0]
}
   b42ac:	e7f8      	b.n	b42a0 <_Z13buttonHandlerv+0x1c>
   b42ae:	bf00      	nop
   b42b0:	2003e566 	.word	0x2003e566
   b42b4:	2003e568 	.word	0x2003e568

000b42b8 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b42b8:	6803      	ldr	r3, [r0, #0]
   b42ba:	b2c9      	uxtb	r1, r1
   b42bc:	689b      	ldr	r3, [r3, #8]
   b42be:	4718      	bx	r3

000b42c0 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b42c0:	b510      	push	{r4, lr}
   b42c2:	4b05      	ldr	r3, [pc, #20]	; (b42d8 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b42c4:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b42c6:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b42c8:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b42ca:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b42ce:	f009 ff41 	bl	be154 <led_set_status_active>
}
   b42d2:	4620      	mov	r0, r4
   b42d4:	bd10      	pop	{r4, pc}
   b42d6:	bf00      	nop
   b42d8:	000c6ea8 	.word	0x000c6ea8

000b42dc <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b42dc:	b510      	push	{r4, lr}
   b42de:	4604      	mov	r4, r0
}
   b42e0:	f7ff ffee 	bl	b42c0 <_ZN8particle9LEDStatusD1Ev>
   b42e4:	4620      	mov	r0, r4
   b42e6:	2120      	movs	r1, #32
   b42e8:	f7ff fedb 	bl	b40a2 <_ZdlPvj>
   b42ec:	4620      	mov	r0, r4
   b42ee:	bd10      	pop	{r4, pc}

000b42f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b42f0:	4b0a      	ldr	r3, [pc, #40]	; (b431c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b42f2:	b510      	push	{r4, lr}
   b42f4:	4604      	mov	r4, r0
   b42f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42f8:	f00c fa22 	bl	c0740 <_ZN5spark10LogManager8instanceEv>
   b42fc:	4621      	mov	r1, r4
   b42fe:	f00c fc5a 	bl	c0bb6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4302:	f00d fdd5 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4306:	f00d fdc7 	bl	c1e98 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b430a:	4620      	mov	r0, r4
   b430c:	4b04      	ldr	r3, [pc, #16]	; (b4320 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b430e:	f840 3b04 	str.w	r3, [r0], #4
   b4312:	f00c faeb 	bl	c08ec <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4316:	4620      	mov	r0, r4
   b4318:	bd10      	pop	{r4, pc}
   b431a:	bf00      	nop
   b431c:	000c6ebc 	.word	0x000c6ebc
   b4320:	000c6e90 	.word	0x000c6e90

000b4324 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4324:	b510      	push	{r4, lr}
   b4326:	4604      	mov	r4, r0
    }
   b4328:	f7ff ffe2 	bl	b42f0 <_ZN5spark16SerialLogHandlerD1Ev>
   b432c:	4620      	mov	r0, r4
   b432e:	2124      	movs	r1, #36	; 0x24
   b4330:	f7ff feb7 	bl	b40a2 <_ZdlPvj>
   b4334:	4620      	mov	r0, r4
   b4336:	bd10      	pop	{r4, pc}

000b4338 <_Z11buttonTimerv>:
void buttonTimer(){
   b4338:	b508      	push	{r3, lr}
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
   b433a:	2012      	movs	r0, #18
   b433c:	f00d fee2 	bl	c2104 <digitalRead>
   b4340:	b118      	cbz	r0, b434a <_Z11buttonTimerv+0x12>
   b4342:	2100      	movs	r1, #0
   b4344:	201c      	movs	r0, #28
   b4346:	f00d fec4 	bl	c20d2 <digitalWrite>
}
   b434a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b434e:	4802      	ldr	r0, [pc, #8]	; (b4358 <_Z11buttonTimerv+0x20>)
   b4350:	2201      	movs	r2, #1
   b4352:	2100      	movs	r1, #0
   b4354:	f7ff bf77 	b.w	b4246 <_ZN5Timer5_stopEjb.isra.0>
   b4358:	2003e568 	.word	0x2003e568

000b435c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	b40e      	push	{r1, r2, r3}
   b435e:	b503      	push	{r0, r1, lr}
   b4360:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4362:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4364:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4368:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b436a:	f00d f90a 	bl	c1582 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436e:	b002      	add	sp, #8
   b4370:	f85d eb04 	ldr.w	lr, [sp], #4
   b4374:	b003      	add	sp, #12
   b4376:	4770      	bx	lr

000b4378 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4378:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b437a:	4604      	mov	r4, r0
   b437c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b437e:	7922      	ldrb	r2, [r4, #4]
   b4380:	68a3      	ldr	r3, [r4, #8]
   b4382:	b132      	cbz	r2, b4392 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4384:	b9a3      	cbnz	r3, b43b0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4386:	490b      	ldr	r1, [pc, #44]	; (b43b4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4388:	b002      	add	sp, #8
   b438a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b438e:	f00d b8b7 	b.w	c1500 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4392:	4a09      	ldr	r2, [pc, #36]	; (b43b8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4394:	7b26      	ldrb	r6, [r4, #12]
   b4396:	4d09      	ldr	r5, [pc, #36]	; (b43bc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4398:	4909      	ldr	r1, [pc, #36]	; (b43c0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b439a:	7b64      	ldrb	r4, [r4, #13]
   b439c:	2e01      	cmp	r6, #1
   b439e:	bf18      	it	ne
   b43a0:	4629      	movne	r1, r5
   b43a2:	e9cd 1400 	strd	r1, r4, [sp]
   b43a6:	4907      	ldr	r1, [pc, #28]	; (b43c4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b43a8:	f7ff ffd8 	bl	b435c <_ZN5Print6printfEPKcz>
  }
   b43ac:	b002      	add	sp, #8
   b43ae:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b43b0:	4a05      	ldr	r2, [pc, #20]	; (b43c8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b43b2:	e7ef      	b.n	b4394 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b43b4:	000c682e 	.word	0x000c682e
   b43b8:	000c8057 	.word	0x000c8057
   b43bc:	000c682a 	.word	0x000c682a
   b43c0:	000c6826 	.word	0x000c6826
   b43c4:	000c6844 	.word	0x000c6844
   b43c8:	000c681d 	.word	0x000c681d

000b43cc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43cc:	b40e      	push	{r1, r2, r3}
   b43ce:	b503      	push	{r0, r1, lr}
   b43d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43da:	f00d f8d2 	bl	c1582 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43de:	b002      	add	sp, #8
   b43e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e4:	b003      	add	sp, #12
   b43e6:	4770      	bx	lr

000b43e8 <_Z13motionHandlerv>:
void motionHandler(){
   b43e8:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b43ea:	4d2b      	ldr	r5, [pc, #172]	; (b4498 <_Z13motionHandlerv+0xb0>)
   b43ec:	782b      	ldrb	r3, [r5, #0]
   b43ee:	bb3b      	cbnz	r3, b4440 <_Z13motionHandlerv+0x58>
   b43f0:	4e2a      	ldr	r6, [pc, #168]	; (b449c <_Z13motionHandlerv+0xb4>)
   b43f2:	7833      	ldrb	r3, [r6, #0]
   b43f4:	2b5a      	cmp	r3, #90	; 0x5a
   b43f6:	d023      	beq.n	b4440 <_Z13motionHandlerv+0x58>
   b43f8:	4c29      	ldr	r4, [pc, #164]	; (b44a0 <_Z13motionHandlerv+0xb8>)
   b43fa:	7823      	ldrb	r3, [r4, #0]
   b43fc:	2b5a      	cmp	r3, #90	; 0x5a
   b43fe:	d01f      	beq.n	b4440 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4400:	f009 fca0 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b4404:	4b27      	ldr	r3, [pc, #156]	; (b44a4 <_Z13motionHandlerv+0xbc>)
   b4406:	681b      	ldr	r3, [r3, #0]
   b4408:	1ac0      	subs	r0, r0, r3
   b440a:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b440e:	d917      	bls.n	b4440 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b4410:	4b25      	ldr	r3, [pc, #148]	; (b44a8 <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b4412:	4826      	ldr	r0, [pc, #152]	; (b44ac <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b4414:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b4416:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4418:	4b25      	ldr	r3, [pc, #148]	; (b44b0 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b441a:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b441c:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b441e:	4b25      	ldr	r3, [pc, #148]	; (b44b4 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4420:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4422:	2201      	movs	r2, #1
   b4424:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4426:	f00d f8f4 	bl	c1612 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b442a:	7821      	ldrb	r1, [r4, #0]
   b442c:	4822      	ldr	r0, [pc, #136]	; (b44b8 <_Z13motionHandlerv+0xd0>)
   b442e:	f00d f8f0 	bl	c1612 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b4432:	f00d fd3d 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4436:	4921      	ldr	r1, [pc, #132]	; (b44bc <_Z13motionHandlerv+0xd4>)
   b4438:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b443c:	f7ff ffc6 	bl	b43cc <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b4440:	4e1f      	ldr	r6, [pc, #124]	; (b44c0 <_Z13motionHandlerv+0xd8>)
   b4442:	7834      	ldrb	r4, [r6, #0]
   b4444:	bb3c      	cbnz	r4, b4496 <_Z13motionHandlerv+0xae>
   b4446:	782b      	ldrb	r3, [r5, #0]
   b4448:	b32b      	cbz	r3, b4496 <_Z13motionHandlerv+0xae>
   b444a:	f009 fc7b 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b444e:	4b1d      	ldr	r3, [pc, #116]	; (b44c4 <_Z13motionHandlerv+0xdc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	1ac0      	subs	r0, r0, r3
   b4454:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b4458:	d91d      	bls.n	b4496 <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b445a:	4b1b      	ldr	r3, [pc, #108]	; (b44c8 <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b445c:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b445e:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4460:	4b0e      	ldr	r3, [pc, #56]	; (b449c <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4462:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4464:	215a      	movs	r1, #90	; 0x5a
   b4466:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b4468:	4b0f      	ldr	r3, [pc, #60]	; (b44a8 <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b446a:	4c0d      	ldr	r4, [pc, #52]	; (b44a0 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b446c:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b446e:	4b10      	ldr	r3, [pc, #64]	; (b44b0 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b4470:	480e      	ldr	r0, [pc, #56]	; (b44ac <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4472:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4474:	4b0f      	ldr	r3, [pc, #60]	; (b44b4 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4476:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4478:	2201      	movs	r2, #1
   b447a:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b447c:	f00d f8c9 	bl	c1612 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4480:	7821      	ldrb	r1, [r4, #0]
   b4482:	480d      	ldr	r0, [pc, #52]	; (b44b8 <_Z13motionHandlerv+0xd0>)
   b4484:	f00d f8c5 	bl	c1612 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b4488:	f00d fd12 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b448c:	490f      	ldr	r1, [pc, #60]	; (b44cc <_Z13motionHandlerv+0xe4>)
   b448e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4492:	f7ff ff9b 	bl	b43cc <_ZN5Print8printlnfEPKcz>
}
   b4496:	bd70      	pop	{r4, r5, r6, pc}
   b4498:	2003ddb5 	.word	0x2003ddb5
   b449c:	2003e564 	.word	0x2003e564
   b44a0:	2003e565 	.word	0x2003e565
   b44a4:	2003ddf4 	.word	0x2003ddf4
   b44a8:	2003de20 	.word	0x2003de20
   b44ac:	2003dd4c 	.word	0x2003dd4c
   b44b0:	2003e0bd 	.word	0x2003e0bd
   b44b4:	2003e5f0 	.word	0x2003e5f0
   b44b8:	2003dd5c 	.word	0x2003dd5c
   b44bc:	000c6861 	.word	0x000c6861
   b44c0:	2003e5dc 	.word	0x2003e5dc
   b44c4:	2003ddfc 	.word	0x2003ddfc
   b44c8:	2003e0b5 	.word	0x2003e0b5
   b44cc:	000c68ab 	.word	0x000c68ab

000b44d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b44d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44d4:	4604      	mov	r4, r0
      if (_M_manager)
   b44d6:	b113      	cbz	r3, b44de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44d8:	2203      	movs	r2, #3
   b44da:	4601      	mov	r1, r0
   b44dc:	4798      	blx	r3
    }
   b44de:	4620      	mov	r0, r4
   b44e0:	bd10      	pop	{r4, pc}
	...

000b44e4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e4:	b538      	push	{r3, r4, r5, lr}
   b44e6:	4b10      	ldr	r3, [pc, #64]	; (b4528 <_ZN5TimerD1Ev+0x44>)
   b44e8:	6003      	str	r3, [r0, #0]
        if (handle) {
   b44ea:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b44ec:	4604      	mov	r4, r0
        if (handle) {
   b44ee:	b1a3      	cbz	r3, b451a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b44f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44f4:	2200      	movs	r2, #0
   b44f6:	f7ff fea6 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b44fa:	68a0      	ldr	r0, [r4, #8]
   b44fc:	2100      	movs	r1, #0
   b44fe:	f009 fc01 	bl	bdd04 <os_timer_set_id>
            while (running) {
   b4502:	7923      	ldrb	r3, [r4, #4]
   b4504:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4508:	b113      	cbz	r3, b4510 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b450a:	f009 fbab 	bl	bdc64 <os_thread_yield>
            while (running) {
   b450e:	e7f8      	b.n	b4502 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b4510:	68a0      	ldr	r0, [r4, #8]
   b4512:	4629      	mov	r1, r5
   b4514:	f009 fbbe 	bl	bdc94 <os_timer_destroy>
            handle = nullptr;
   b4518:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b451a:	f104 000c 	add.w	r0, r4, #12
   b451e:	f7ff ffd7 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4522:	4620      	mov	r0, r4
   b4524:	bd38      	pop	{r3, r4, r5, pc}
   b4526:	bf00      	nop
   b4528:	000c6e7c 	.word	0x000c6e7c

000b452c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b452c:	b510      	push	{r4, lr}
   b452e:	4604      	mov	r4, r0
    }
   b4530:	f7ff ffd8 	bl	b44e4 <_ZN5TimerD1Ev>
   b4534:	4620      	mov	r0, r4
   b4536:	211c      	movs	r1, #28
   b4538:	f7ff fdb3 	bl	b40a2 <_ZdlPvj>
   b453c:	4620      	mov	r0, r4
   b453e:	bd10      	pop	{r4, pc}

000b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4540:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4542:	468c      	mov	ip, r1
   b4544:	2500      	movs	r5, #0
   b4546:	4914      	ldr	r1, [pc, #80]	; (b4598 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4548:	7105      	strb	r5, [r0, #4]
   b454a:	4604      	mov	r4, r0
   b454c:	6085      	str	r5, [r0, #8]
   b454e:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4550:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4554:	b085      	sub	sp, #20
   b4556:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4558:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b455c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4560:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4564:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4568:	e897 0003 	ldmia.w	r7, {r0, r1}
   b456c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4570:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4572:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4574:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4576:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4578:	6095      	str	r5, [r2, #8]
   b457a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b457c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b457e:	e9cd 3500 	strd	r3, r5, [sp]
   b4582:	4a06      	ldr	r2, [pc, #24]	; (b459c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4584:	4623      	mov	r3, r4
   b4586:	4661      	mov	r1, ip
   b4588:	f104 0008 	add.w	r0, r4, #8
   b458c:	f009 fb7a 	bl	bdc84 <os_timer_create>
    }
   b4590:	4620      	mov	r0, r4
   b4592:	b005      	add	sp, #20
   b4594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4596:	bf00      	nop
   b4598:	000c6e7c 	.word	0x000c6e7c
   b459c:	000b41f5 	.word	0x000b41f5

000b45a0 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b45a0:	b510      	push	{r4, lr}
   b45a2:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b45a4:	2200      	movs	r2, #0
   b45a6:	7c40      	ldrb	r0, [r0, #17]
   b45a8:	f009 fe0e 	bl	be1c8 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b45ac:	7c63      	ldrb	r3, [r4, #17]
   b45ae:	2b0f      	cmp	r3, #15
        d_.period = period;
   b45b0:	bf18      	it	ne
   b45b2:	8320      	strhne	r0, [r4, #24]
}
   b45b4:	bd10      	pop	{r4, pc}
	...

000b45b8 <_Z10LEDHandlerv>:

void LEDHandler(){
   b45b8:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(shutdownActive){
   b45ba:	4b2e      	ldr	r3, [pc, #184]	; (b4674 <_Z10LEDHandlerv+0xbc>)
   b45bc:	781a      	ldrb	r2, [r3, #0]
   b45be:	4b2e      	ldr	r3, [pc, #184]	; (b4678 <_Z10LEDHandlerv+0xc0>)
   b45c0:	b162      	cbz	r2, b45dc <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45c2:	7c5a      	ldrb	r2, [r3, #17]
   b45c4:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45c6:	bf1c      	itt	ne
   b45c8:	2202      	movne	r2, #2
   b45ca:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45cc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b45d0:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b45d2:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b45d4:	4828      	ldr	r0, [pc, #160]	; (b4678 <_Z10LEDHandlerv+0xc0>)
   b45d6:	f7ff ffe3 	bl	b45a0 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b45da:	bd10      	pop	{r4, pc}
    if(stopActive){
   b45dc:	4a27      	ldr	r2, [pc, #156]	; (b467c <_Z10LEDHandlerv+0xc4>)
   b45de:	7812      	ldrb	r2, [r2, #0]
   b45e0:	b132      	cbz	r2, b45f0 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45e2:	7c5a      	ldrb	r2, [r3, #17]
   b45e4:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45e6:	bf1c      	itt	ne
   b45e8:	2202      	movne	r2, #2
   b45ea:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45ec:	4a24      	ldr	r2, [pc, #144]	; (b4680 <_Z10LEDHandlerv+0xc8>)
   b45ee:	e7ef      	b.n	b45d0 <_Z10LEDHandlerv+0x18>
    if(offloadMode){
   b45f0:	4a24      	ldr	r2, [pc, #144]	; (b4684 <_Z10LEDHandlerv+0xcc>)
   b45f2:	7812      	ldrb	r2, [r2, #0]
   b45f4:	b132      	cbz	r2, b4604 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45f6:	7c5a      	ldrb	r2, [r3, #17]
   b45f8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45fa:	bf1c      	itt	ne
   b45fc:	2202      	movne	r2, #2
   b45fe:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4600:	22ff      	movs	r2, #255	; 0xff
   b4602:	e7e5      	b.n	b45d0 <_Z10LEDHandlerv+0x18>
    if(signalLED){
   b4604:	4a20      	ldr	r2, [pc, #128]	; (b4688 <_Z10LEDHandlerv+0xd0>)
   b4606:	7812      	ldrb	r2, [r2, #0]
   b4608:	b132      	cbz	r2, b4618 <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b460a:	7c5a      	ldrb	r2, [r3, #17]
   b460c:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b460e:	bf1c      	itt	ne
   b4610:	2202      	movne	r2, #2
   b4612:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4614:	4a1d      	ldr	r2, [pc, #116]	; (b468c <_Z10LEDHandlerv+0xd4>)
   b4616:	e7db      	b.n	b45d0 <_Z10LEDHandlerv+0x18>
    if(lowBattery){
   b4618:	4a1d      	ldr	r2, [pc, #116]	; (b4690 <_Z10LEDHandlerv+0xd8>)
   b461a:	7812      	ldrb	r2, [r2, #0]
   b461c:	bb22      	cbnz	r2, b4668 <_Z10LEDHandlerv+0xb0>
    else if(logSensors){
   b461e:	4a1d      	ldr	r2, [pc, #116]	; (b4694 <_Z10LEDHandlerv+0xdc>)
   b4620:	7812      	ldrb	r2, [r2, #0]
   b4622:	bb22      	cbnz	r2, b466e <_Z10LEDHandlerv+0xb6>
    else if(driveMode == 0){
   b4624:	4a1c      	ldr	r2, [pc, #112]	; (b4698 <_Z10LEDHandlerv+0xe0>)
   b4626:	7812      	ldrb	r2, [r2, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b4628:	2a00      	cmp	r2, #0
   b462a:	bf0b      	itete	eq
   b462c:	210a      	moveq	r1, #10
   b462e:	2114      	movne	r1, #20
   b4630:	2002      	moveq	r0, #2
   b4632:	2003      	movne	r0, #3
    statusMode |= XBeeAvail << 1;
   b4634:	4a19      	ldr	r2, [pc, #100]	; (b469c <_Z10LEDHandlerv+0xe4>)
   b4636:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b4638:	4a19      	ldr	r2, [pc, #100]	; (b46a0 <_Z10LEDHandlerv+0xe8>)
   b463a:	7812      	ldrb	r2, [r2, #0]
   b463c:	0092      	lsls	r2, r2, #2
   b463e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;
   b4642:	4c18      	ldr	r4, [pc, #96]	; (b46a4 <_Z10LEDHandlerv+0xec>)
    statusMode |= BLEAvail << 2;
   b4644:	7824      	ldrb	r4, [r4, #0]
   b4646:	4322      	orrs	r2, r4
   b4648:	3a01      	subs	r2, #1
   b464a:	b2d2      	uxtb	r2, r2
   b464c:	2a06      	cmp	r2, #6
   b464e:	bf9c      	itt	ls
   b4650:	4c15      	ldrls	r4, [pc, #84]	; (b46a8 <_Z10LEDHandlerv+0xf0>)
   b4652:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4656:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b4658:	bf88      	it	hi
   b465a:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b465e:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b4660:	bf18      	it	ne
   b4662:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b4664:	615a      	str	r2, [r3, #20]
   b4666:	e7b5      	b.n	b45d4 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b4668:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b466a:	2002      	movs	r0, #2
   b466c:	e7e2      	b.n	b4634 <_Z10LEDHandlerv+0x7c>
        SetSpeed = LED_SPEED_NORMAL;
   b466e:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_SOLID;
   b4670:	2001      	movs	r0, #1
   b4672:	e7df      	b.n	b4634 <_Z10LEDHandlerv+0x7c>
   b4674:	2003e566 	.word	0x2003e566
   b4678:	2003e58c 	.word	0x2003e58c
   b467c:	2003e5cd 	.word	0x2003e5cd
   b4680:	00ffff00 	.word	0x00ffff00
   b4684:	2003e0b4 	.word	0x2003e0b4
   b4688:	2003e584 	.word	0x2003e584
   b468c:	00ff6000 	.word	0x00ff6000
   b4690:	2003dee0 	.word	0x2003dee0
   b4694:	2003ded9 	.word	0x2003ded9
   b4698:	2003ddb5 	.word	0x2003ddb5
   b469c:	2003dd80 	.word	0x2003dd80
   b46a0:	2003dd38 	.word	0x2003dd38
   b46a4:	2003dd6d 	.word	0x2003dd6d
   b46a8:	000c6fb0 	.word	0x000c6fb0

000b46ac <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b46ac:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b46ae:	460a      	mov	r2, r1
   b46b0:	4901      	ldr	r1, [pc, #4]	; (b46b8 <_ZN7FatFile4openEPKci+0xc>)
   b46b2:	6809      	ldr	r1, [r1, #0]
   b46b4:	f002 bcdd 	b.w	b7072 <_ZN7FatFile4openEPS_PKci>
   b46b8:	2003e614 	.word	0x2003e614

000b46bc <_Z11wdogHandlerv>:
void wdogHandler(){
   b46bc:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46be:	f009 fdaf 	bl	be220 <spark_cloud_flag_connected>
   b46c2:	4c2e      	ldr	r4, [pc, #184]	; (b477c <_Z11wdogHandlerv+0xc0>)
    if(Particle.connected()) LTEAvail = true;
   b46c4:	b308      	cbz	r0, b470a <_Z11wdogHandlerv+0x4e>
   b46c6:	2301      	movs	r3, #1
        LTEAvail = false;
   b46c8:	7023      	strb	r3, [r4, #0]
   b46ca:	f009 fb3b 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b46ce:	4b2c      	ldr	r3, [pc, #176]	; (b4780 <_Z11wdogHandlerv+0xc4>)
   b46d0:	4c2c      	ldr	r4, [pc, #176]	; (b4784 <_Z11wdogHandlerv+0xc8>)
   b46d2:	681b      	ldr	r3, [r3, #0]
   b46d4:	f247 5230 	movw	r2, #30000	; 0x7530
   b46d8:	1ac0      	subs	r0, r0, r3
   b46da:	4290      	cmp	r0, r2
   b46dc:	d828      	bhi.n	b4730 <_Z11wdogHandlerv+0x74>
   b46de:	b33b      	cbz	r3, b4730 <_Z11wdogHandlerv+0x74>
    else XBeeAvail = true;
   b46e0:	2301      	movs	r3, #1
        XBeeAvail = false;
   b46e2:	7023      	strb	r3, [r4, #0]
   b46e4:	f009 fb2e 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b46e8:	4b27      	ldr	r3, [pc, #156]	; (b4788 <_Z11wdogHandlerv+0xcc>)
   b46ea:	4c28      	ldr	r4, [pc, #160]	; (b478c <_Z11wdogHandlerv+0xd0>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	f247 5230 	movw	r2, #30000	; 0x7530
   b46f2:	1ac0      	subs	r0, r0, r3
   b46f4:	4290      	cmp	r0, r2
   b46f6:	d82d      	bhi.n	b4754 <_Z11wdogHandlerv+0x98>
   b46f8:	b363      	cbz	r3, b4754 <_Z11wdogHandlerv+0x98>
    else BLEAvail = true;
   b46fa:	2301      	movs	r3, #1
        BLEAvail = false;
   b46fc:	7023      	strb	r3, [r4, #0]
    if(stopActive) stopActive = false;
   b46fe:	4b24      	ldr	r3, [pc, #144]	; (b4790 <_Z11wdogHandlerv+0xd4>)
   b4700:	781a      	ldrb	r2, [r3, #0]
   b4702:	b10a      	cbz	r2, b4708 <_Z11wdogHandlerv+0x4c>
   b4704:	2200      	movs	r2, #0
   b4706:	701a      	strb	r2, [r3, #0]
}
   b4708:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b470a:	7823      	ldrb	r3, [r4, #0]
   b470c:	2b00      	cmp	r3, #0
   b470e:	d0dc      	beq.n	b46ca <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4710:	4820      	ldr	r0, [pc, #128]	; (b4794 <_Z11wdogHandlerv+0xd8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4712:	7c03      	ldrb	r3, [r0, #16]
   b4714:	b92b      	cbnz	r3, b4722 <_Z11wdogHandlerv+0x66>
   b4716:	4920      	ldr	r1, [pc, #128]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b4718:	f244 2202 	movw	r2, #16898	; 0x4202
   b471c:	3010      	adds	r0, #16
   b471e:	f7ff ffc5 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4722:	491e      	ldr	r1, [pc, #120]	; (b479c <_Z11wdogHandlerv+0xe0>)
   b4724:	481b      	ldr	r0, [pc, #108]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b4726:	221e      	movs	r2, #30
   b4728:	f7ff fe50 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b472c:	2300      	movs	r3, #0
   b472e:	e7cb      	b.n	b46c8 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4730:	7823      	ldrb	r3, [r4, #0]
   b4732:	b16b      	cbz	r3, b4750 <_Z11wdogHandlerv+0x94>
   b4734:	4817      	ldr	r0, [pc, #92]	; (b4794 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4736:	7c03      	ldrb	r3, [r0, #16]
   b4738:	b92b      	cbnz	r3, b4746 <_Z11wdogHandlerv+0x8a>
   b473a:	4917      	ldr	r1, [pc, #92]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b473c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4740:	3010      	adds	r0, #16
   b4742:	f7ff ffb3 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4746:	4915      	ldr	r1, [pc, #84]	; (b479c <_Z11wdogHandlerv+0xe0>)
   b4748:	4812      	ldr	r0, [pc, #72]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b474a:	221e      	movs	r2, #30
   b474c:	f7ff fe3e 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4750:	2300      	movs	r3, #0
   b4752:	e7c6      	b.n	b46e2 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4754:	7822      	ldrb	r2, [r4, #0]
   b4756:	b172      	cbz	r2, b4776 <_Z11wdogHandlerv+0xba>
   b4758:	b16b      	cbz	r3, b4776 <_Z11wdogHandlerv+0xba>
   b475a:	480e      	ldr	r0, [pc, #56]	; (b4794 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b475c:	7c03      	ldrb	r3, [r0, #16]
   b475e:	b92b      	cbnz	r3, b476c <_Z11wdogHandlerv+0xb0>
   b4760:	490d      	ldr	r1, [pc, #52]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b4762:	f244 2202 	movw	r2, #16898	; 0x4202
   b4766:	3010      	adds	r0, #16
   b4768:	f7ff ffa0 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b476c:	490c      	ldr	r1, [pc, #48]	; (b47a0 <_Z11wdogHandlerv+0xe4>)
   b476e:	4809      	ldr	r0, [pc, #36]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b4770:	221e      	movs	r2, #30
   b4772:	f7ff fe2b 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4776:	2300      	movs	r3, #0
   b4778:	e7c0      	b.n	b46fc <_Z11wdogHandlerv+0x40>
   b477a:	bf00      	nop
   b477c:	2003dd6d 	.word	0x2003dd6d
   b4780:	2003dd84 	.word	0x2003dd84
   b4784:	2003dd80 	.word	0x2003dd80
   b4788:	2003dd44 	.word	0x2003dd44
   b478c:	2003dd38 	.word	0x2003dd38
   b4790:	2003e5cd 	.word	0x2003e5cd
   b4794:	2003de80 	.word	0x2003de80
   b4798:	2003ddd4 	.word	0x2003ddd4
   b479c:	000c6905 	.word	0x000c6905
   b47a0:	000c6956 	.word	0x000c6956

000b47a4 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47a4:	b530      	push	{r4, r5, lr}
   b47a6:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47a8:	4b1b      	ldr	r3, [pc, #108]	; (b4818 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47aa:	9300      	str	r3, [sp, #0]
   b47ac:	7913      	ldrb	r3, [r2, #4]
   b47ae:	f88d 3004 	strb.w	r3, [sp, #4]
   b47b2:	6893      	ldr	r3, [r2, #8]
   b47b4:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47b6:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47ba:	8993      	ldrh	r3, [r2, #12]
   b47bc:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47c0:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47c2:	460a      	mov	r2, r1
   b47c4:	466b      	mov	r3, sp
   b47c6:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b47ca:	4628      	mov	r0, r5
   b47cc:	f003 fb82 	bl	b7ed4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b47d0:	b910      	cbnz	r0, b47d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b47d2:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b47d4:	b005      	add	sp, #20
   b47d6:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b47d8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b47da:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b47de:	4628      	mov	r0, r5
   b47e0:	f002 fc40 	bl	b7064 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b47e4:	2101      	movs	r1, #1
   b47e6:	4620      	mov	r0, r4
   b47e8:	f003 fa1f 	bl	b7c2a <_ZN9FatVolume4initEh>
   b47ec:	4601      	mov	r1, r0
   b47ee:	b168      	cbz	r0, b480c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b47f0:	4621      	mov	r1, r4
   b47f2:	4628      	mov	r0, r5
   b47f4:	f002 fa30 	bl	b6c58 <_ZN7FatFile8openRootEP9FatVolume>
   b47f8:	2800      	cmp	r0, #0
   b47fa:	d0ea      	beq.n	b47d2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b47fc:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4800:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4804:	d0e5      	beq.n	b47d2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4806:	4b05      	ldr	r3, [pc, #20]	; (b481c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4808:	601d      	str	r5, [r3, #0]
    return true;
   b480a:	e7e3      	b.n	b47d4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b480c:	4620      	mov	r0, r4
   b480e:	f003 fa0c 	bl	b7c2a <_ZN9FatVolume4initEh>
   b4812:	2800      	cmp	r0, #0
   b4814:	d1ec      	bne.n	b47f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4816:	e7dc      	b.n	b47d2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4818:	000c6e68 	.word	0x000c6e68
   b481c:	2003e614 	.word	0x2003e614

000b4820 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4824:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4826:	7883      	ldrb	r3, [r0, #2]
   b4828:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b482a:	af04      	add	r7, sp, #16
   b482c:	4604      	mov	r4, r0
   b482e:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4830:	d14d      	bne.n	b48ce <_Z14processCommandPKchb+0xae>
   b4832:	78c3      	ldrb	r3, [r0, #3]
   b4834:	2b42      	cmp	r3, #66	; 0x42
   b4836:	d176      	bne.n	b4926 <_Z14processCommandPKchb+0x106>
        char dataStr[strlen(command)-8];
   b4838:	4620      	mov	r0, r4
   b483a:	f00f ffc0 	bl	c47be <strlen>
   b483e:	3801      	subs	r0, #1
   b4840:	f020 0007 	bic.w	r0, r0, #7
        }
   b4844:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4846:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b484a:	4620      	mov	r0, r4
   b484c:	f00f ffb7 	bl	c47be <strlen>
        char dataStr[strlen(command)-8];
   b4850:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b4852:	4428      	add	r0, r5
   b4854:	2600      	movs	r6, #0
   b4856:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b485a:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b485c:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b485e:	813e      	strh	r6, [r7, #8]
   b4860:	72be      	strb	r6, [r7, #10]
   b4862:	f00f ffac 	bl	c47be <strlen>
   b4866:	4420      	add	r0, r4
   b4868:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b486c:	723b      	strb	r3, [r7, #8]
   b486e:	4620      	mov	r0, r4
   b4870:	f00f ffa5 	bl	c47be <strlen>
   b4874:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4876:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4878:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b487c:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b487e:	2210      	movs	r2, #16
   b4880:	f107 0008 	add.w	r0, r7, #8
   b4884:	f010 fec4 	bl	c5610 <strtol>
   b4888:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b488a:	fa5f f888 	uxtb.w	r8, r8
   b488e:	f00d fb0f 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4892:	49b7      	ldr	r1, [pc, #732]	; (b4b70 <_Z14processCommandPKchb+0x350>)
   b4894:	4643      	mov	r3, r8
   b4896:	4642      	mov	r2, r8
   b4898:	f7ff fd98 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b489c:	2604      	movs	r6, #4
   b489e:	4620      	mov	r0, r4
   b48a0:	f00f ff8d 	bl	c47be <strlen>
   b48a4:	3802      	subs	r0, #2
   b48a6:	4286      	cmp	r6, r0
   b48a8:	d216      	bcs.n	b48d8 <_Z14processCommandPKchb+0xb8>
            if(i < 7) cmdStr[i-4] = command[i];
   b48aa:	2e06      	cmp	r6, #6
   b48ac:	bf9b      	ittet	ls
   b48ae:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b48b2:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b48b4:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b48b6:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b48b8:	bf8c      	ite	hi
   b48ba:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b48bc:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b48c0:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b48c4:	bf88      	it	hi
   b48c6:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b48ca:	b2f6      	uxtb	r6, r6
   b48cc:	e7e7      	b.n	b489e <_Z14processCommandPKchb+0x7e>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b48ce:	2b42      	cmp	r3, #66	; 0x42
   b48d0:	d129      	bne.n	b4926 <_Z14processCommandPKchb+0x106>
   b48d2:	78c3      	ldrb	r3, [r0, #3]
   b48d4:	2b31      	cmp	r3, #49	; 0x31
   b48d6:	e7ae      	b.n	b4836 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b48d8:	4540      	cmp	r0, r8
   b48da:	d02e      	beq.n	b493a <_Z14processCommandPKchb+0x11a>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b48dc:	f00d fae8 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b48e0:	4605      	mov	r5, r0
   b48e2:	4620      	mov	r0, r4
   b48e4:	f00f ff6b 	bl	c47be <strlen>
   b48e8:	1e82      	subs	r2, r0, #2
   b48ea:	4628      	mov	r0, r5
    return m_attr;
   b48ec:	4da1      	ldr	r5, [pc, #644]	; (b4b74 <_Z14processCommandPKchb+0x354>)
   b48ee:	49a2      	ldr	r1, [pc, #648]	; (b4b78 <_Z14processCommandPKchb+0x358>)
   b48f0:	4643      	mov	r3, r8
   b48f2:	f7ff fd6b 	bl	b43cc <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b48f6:	7c2b      	ldrb	r3, [r5, #16]
   b48f8:	b9cb      	cbnz	r3, b492e <_Z14processCommandPKchb+0x10e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b48fa:	49a0      	ldr	r1, [pc, #640]	; (b4b7c <_Z14processCommandPKchb+0x35c>)
   b48fc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4900:	f105 0010 	add.w	r0, r5, #16
   b4904:	f7ff fed2 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4908:	499d      	ldr	r1, [pc, #628]	; (b4b80 <_Z14processCommandPKchb+0x360>)
   b490a:	4622      	mov	r2, r4
   b490c:	4628      	mov	r0, r5
   b490e:	f7ff fd5d 	bl	b43cc <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4912:	f105 0010 	add.w	r0, r5, #16
   b4916:	f002 fba5 	bl	b7064 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b491a:	f00d fac9 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b491e:	4999      	ldr	r1, [pc, #612]	; (b4b84 <_Z14processCommandPKchb+0x364>)
   b4920:	f00c fe05 	bl	c152e <_ZN5Print7printlnEPKc>
            return;
   b4924:	46cd      	mov	sp, r9
}
   b4926:	3728      	adds	r7, #40	; 0x28
   b4928:	46bd      	mov	sp, r7
   b492a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b492e:	4994      	ldr	r1, [pc, #592]	; (b4b80 <_Z14processCommandPKchb+0x360>)
   b4930:	4622      	mov	r2, r4
   b4932:	4628      	mov	r0, r5
   b4934:	f7ff fd4a 	bl	b43cc <_ZN5Print8printlnfEPKcz>
   b4938:	e7ef      	b.n	b491a <_Z14processCommandPKchb+0xfa>
        if(!strcmp(cmdStr,"ctl")){
   b493a:	4993      	ldr	r1, [pc, #588]	; (b4b88 <_Z14processCommandPKchb+0x368>)
   b493c:	f107 000c 	add.w	r0, r7, #12
   b4940:	f00f ff0e 	bl	c4760 <strcmp>
   b4944:	2800      	cmp	r0, #0
   b4946:	d139      	bne.n	b49bc <_Z14processCommandPKchb+0x19c>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b4948:	4b90      	ldr	r3, [pc, #576]	; (b4b8c <_Z14processCommandPKchb+0x36c>)
   b494a:	9302      	str	r3, [sp, #8]
   b494c:	4b90      	ldr	r3, [pc, #576]	; (b4b90 <_Z14processCommandPKchb+0x370>)
   b494e:	9301      	str	r3, [sp, #4]
   b4950:	4b90      	ldr	r3, [pc, #576]	; (b4b94 <_Z14processCommandPKchb+0x374>)
   b4952:	4991      	ldr	r1, [pc, #580]	; (b4b98 <_Z14processCommandPKchb+0x378>)
   b4954:	9300      	str	r3, [sp, #0]
   b4956:	f107 0210 	add.w	r2, r7, #16
   b495a:	f107 031c 	add.w	r3, r7, #28
   b495e:	4628      	mov	r0, r5
   b4960:	f009 fd06 	bl	be370 <sscanf>
            targetLat = atof(tLat);
   b4964:	f107 0010 	add.w	r0, r7, #16
   b4968:	f00f fe56 	bl	c4618 <atof>
   b496c:	ec51 0b10 	vmov	r0, r1, d0
   b4970:	f00f fdde 	bl	c4530 <__aeabi_d2f>
   b4974:	f8df 8290 	ldr.w	r8, [pc, #656]	; b4c08 <_Z14processCommandPKchb+0x3e8>
            targetLon = atof(tLon);
   b4978:	4e88      	ldr	r6, [pc, #544]	; (b4b9c <_Z14processCommandPKchb+0x37c>)
            targetLat = atof(tLat);
   b497a:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);
   b497e:	f107 001c 	add.w	r0, r7, #28
   b4982:	f00f fe49 	bl	c4618 <atof>
   b4986:	ec51 0b10 	vmov	r0, r1, d0
   b498a:	f00f fdd1 	bl	c4530 <__aeabi_d2f>
   b498e:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b4990:	f00d fa8e 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4994:	4604      	mov	r4, r0
   b4996:	f8d8 0000 	ldr.w	r0, [r8]
   b499a:	f00f fa79 	bl	c3e90 <__aeabi_f2d>
   b499e:	4602      	mov	r2, r0
   b49a0:	460b      	mov	r3, r1
   b49a2:	6830      	ldr	r0, [r6, #0]
   b49a4:	e9c7 2300 	strd	r2, r3, [r7]
   b49a8:	f00f fa72 	bl	c3e90 <__aeabi_f2d>
   b49ac:	e9cd 0100 	strd	r0, r1, [sp]
   b49b0:	e9d7 2300 	ldrd	r2, r3, [r7]
   b49b4:	497a      	ldr	r1, [pc, #488]	; (b4ba0 <_Z14processCommandPKchb+0x380>)
   b49b6:	4620      	mov	r0, r4
   b49b8:	f7ff fd08 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b49bc:	4979      	ldr	r1, [pc, #484]	; (b4ba4 <_Z14processCommandPKchb+0x384>)
   b49be:	f107 000c 	add.w	r0, r7, #12
   b49c2:	f00f fecd 	bl	c4760 <strcmp>
   b49c6:	2800      	cmp	r0, #0
   b49c8:	d140      	bne.n	b4a4c <_Z14processCommandPKchb+0x22c>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b49ca:	782b      	ldrb	r3, [r5, #0]
   b49cc:	743b      	strb	r3, [r7, #16]
   b49ce:	786b      	ldrb	r3, [r5, #1]
   b49d0:	747b      	strb	r3, [r7, #17]
   b49d2:	78ab      	ldrb	r3, [r5, #2]
   b49d4:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b49d6:	78eb      	ldrb	r3, [r5, #3]
   b49d8:	773b      	strb	r3, [r7, #28]
   b49da:	792b      	ldrb	r3, [r5, #4]
   b49dc:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);
   b49de:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b49e2:	796b      	ldrb	r3, [r5, #5]
   b49e4:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);
   b49e6:	f00f fe1a 	bl	c461e <atoi>
   b49ea:	4d6f      	ldr	r5, [pc, #444]	; (b4ba8 <_Z14processCommandPKchb+0x388>)
            setRSpeed = atoi(rSpd);
   b49ec:	4c6f      	ldr	r4, [pc, #444]	; (b4bac <_Z14processCommandPKchb+0x38c>)
            setLSpeed = atoi(lSpd);
   b49ee:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b49f0:	f107 001c 	add.w	r0, r7, #28
   b49f4:	f00f fe13 	bl	c461e <atoi>
   b49f8:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b49fa:	f00d fa59 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b49fe:	7823      	ldrb	r3, [r4, #0]
   b4a00:	782a      	ldrb	r2, [r5, #0]
   b4a02:	496b      	ldr	r1, [pc, #428]	; (b4bb0 <_Z14processCommandPKchb+0x390>)
   b4a04:	f7ff fce2 	bl	b43cc <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4a08:	782b      	ldrb	r3, [r5, #0]
   b4a0a:	3b5b      	subs	r3, #91	; 0x5b
   b4a0c:	2b20      	cmp	r3, #32
   b4a0e:	bf9c      	itt	ls
   b4a10:	237b      	movls	r3, #123	; 0x7b
   b4a12:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4a14:	7823      	ldrb	r3, [r4, #0]
   b4a16:	3b5b      	subs	r3, #91	; 0x5b
   b4a18:	2b20      	cmp	r3, #32
   b4a1a:	bf9c      	itt	ls
   b4a1c:	237b      	movls	r3, #123	; 0x7b
   b4a1e:	7023      	strbls	r3, [r4, #0]
            if(!stopActive){
   b4a20:	4b64      	ldr	r3, [pc, #400]	; (b4bb4 <_Z14processCommandPKchb+0x394>)
   b4a22:	781b      	ldrb	r3, [r3, #0]
   b4a24:	b93b      	cbnz	r3, b4a36 <_Z14processCommandPKchb+0x216>
                ESCL.write(setLSpeed);
   b4a26:	7829      	ldrb	r1, [r5, #0]
   b4a28:	4863      	ldr	r0, [pc, #396]	; (b4bb8 <_Z14processCommandPKchb+0x398>)
   b4a2a:	f00c fdf2 	bl	c1612 <_ZN5Servo5writeEi>
                ESCR.write(setRSpeed);
   b4a2e:	7821      	ldrb	r1, [r4, #0]
   b4a30:	4862      	ldr	r0, [pc, #392]	; (b4bbc <_Z14processCommandPKchb+0x39c>)
   b4a32:	f00c fdee 	bl	c1612 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4a36:	4b62      	ldr	r3, [pc, #392]	; (b4bc0 <_Z14processCommandPKchb+0x3a0>)
   b4a38:	2201      	movs	r2, #1
   b4a3a:	701a      	strb	r2, [r3, #0]
   b4a3c:	f009 f982 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b4a40:	4b60      	ldr	r3, [pc, #384]	; (b4bc4 <_Z14processCommandPKchb+0x3a4>)
   b4a42:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b4a44:	4b53      	ldr	r3, [pc, #332]	; (b4b94 <_Z14processCommandPKchb+0x374>)
   b4a46:	2200      	movs	r2, #0
            stopActive = true;
   b4a48:	701a      	strb	r2, [r3, #0]
   b4a4a:	e76b      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b4a4c:	495e      	ldr	r1, [pc, #376]	; (b4bc8 <_Z14processCommandPKchb+0x3a8>)
   b4a4e:	f107 000c 	add.w	r0, r7, #12
   b4a52:	f00f fe85 	bl	c4760 <strcmp>
   b4a56:	b918      	cbnz	r0, b4a60 <_Z14processCommandPKchb+0x240>
            requestActive = mode;
   b4a58:	4b5c      	ldr	r3, [pc, #368]	; (b4bcc <_Z14processCommandPKchb+0x3ac>)
   b4a5a:	f883 a000 	strb.w	sl, [r3]
   b4a5e:	e761      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"pts")){
   b4a60:	495b      	ldr	r1, [pc, #364]	; (b4bd0 <_Z14processCommandPKchb+0x3b0>)
   b4a62:	f107 000c 	add.w	r0, r7, #12
   b4a66:	f00f fe7b 	bl	c4760 <strcmp>
   b4a6a:	b9f0      	cbnz	r0, b4aaa <_Z14processCommandPKchb+0x28a>
   b4a6c:	4c41      	ldr	r4, [pc, #260]	; (b4b74 <_Z14processCommandPKchb+0x354>)
            Serial.println(dataStr);
   b4a6e:	f00d fa1f 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4a72:	4629      	mov	r1, r5
   b4a74:	f00c fd5b 	bl	c152e <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4a78:	7c23      	ldrb	r3, [r4, #16]
   b4a7a:	b983      	cbnz	r3, b4a9e <_Z14processCommandPKchb+0x27e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a7c:	493f      	ldr	r1, [pc, #252]	; (b4b7c <_Z14processCommandPKchb+0x35c>)
   b4a7e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a82:	f104 0010 	add.w	r0, r4, #16
   b4a86:	f7ff fe11 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a8a:	4952      	ldr	r1, [pc, #328]	; (b4bd4 <_Z14processCommandPKchb+0x3b4>)
   b4a8c:	462a      	mov	r2, r5
   b4a8e:	4620      	mov	r0, r4
   b4a90:	f7ff fc9c 	bl	b43cc <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a94:	f104 0010 	add.w	r0, r4, #16
   b4a98:	f002 fae4 	bl	b7064 <_ZN7FatFile5closeEv>
   b4a9c:	e742      	b.n	b4924 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a9e:	494d      	ldr	r1, [pc, #308]	; (b4bd4 <_Z14processCommandPKchb+0x3b4>)
   b4aa0:	462a      	mov	r2, r5
   b4aa2:	4620      	mov	r0, r4
   b4aa4:	f7ff fc92 	bl	b43cc <_ZN5Print8printlnfEPKcz>
   b4aa8:	e73c      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4aaa:	494b      	ldr	r1, [pc, #300]	; (b4bd8 <_Z14processCommandPKchb+0x3b8>)
   b4aac:	f107 000c 	add.w	r0, r7, #12
   b4ab0:	f00f fe56 	bl	c4760 <strcmp>
   b4ab4:	b920      	cbnz	r0, b4ac0 <_Z14processCommandPKchb+0x2a0>
   b4ab6:	f009 f945 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4aba:	4b48      	ldr	r3, [pc, #288]	; (b4bdc <_Z14processCommandPKchb+0x3bc>)
   b4abc:	6018      	str	r0, [r3, #0]
   b4abe:	e731      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"hwa")){
   b4ac0:	4947      	ldr	r1, [pc, #284]	; (b4be0 <_Z14processCommandPKchb+0x3c0>)
   b4ac2:	f107 000c 	add.w	r0, r7, #12
   b4ac6:	f00f fe4b 	bl	c4760 <strcmp>
   b4aca:	b910      	cbnz	r0, b4ad2 <_Z14processCommandPKchb+0x2b2>
            waitForConnection = false;
   b4acc:	4b45      	ldr	r3, [pc, #276]	; (b4be4 <_Z14processCommandPKchb+0x3c4>)
   b4ace:	7018      	strb	r0, [r3, #0]
   b4ad0:	e728      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b4ad2:	4945      	ldr	r1, [pc, #276]	; (b4be8 <_Z14processCommandPKchb+0x3c8>)
   b4ad4:	f107 000c 	add.w	r0, r7, #12
   b4ad8:	f00f fe42 	bl	c4760 <strcmp>
   b4adc:	b978      	cbnz	r0, b4afe <_Z14processCommandPKchb+0x2de>
            offloadMode = true;
   b4ade:	4b43      	ldr	r3, [pc, #268]	; (b4bec <_Z14processCommandPKchb+0x3cc>)
            status.setSpeed(LED_SPEED_FAST);
   b4ae0:	4843      	ldr	r0, [pc, #268]	; (b4bf0 <_Z14processCommandPKchb+0x3d0>)
            offloadMode = true;
   b4ae2:	2201      	movs	r2, #1
   b4ae4:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4ae6:	4b42      	ldr	r3, [pc, #264]	; (b4bf0 <_Z14processCommandPKchb+0x3d0>)
   b4ae8:	7c5a      	ldrb	r2, [r3, #17]
   b4aea:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4aec:	bf1c      	itt	ne
   b4aee:	2202      	movne	r2, #2
   b4af0:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4af2:	211e      	movs	r1, #30
    d_.color = color;
   b4af4:	22ff      	movs	r2, #255	; 0xff
   b4af6:	615a      	str	r2, [r3, #20]
   b4af8:	f7ff fd52 	bl	b45a0 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4afc:	e712      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"egp")){ //Emulated GPS point
   b4afe:	493d      	ldr	r1, [pc, #244]	; (b4bf4 <_Z14processCommandPKchb+0x3d4>)
   b4b00:	f107 000c 	add.w	r0, r7, #12
   b4b04:	f00f fe2c 	bl	c4760 <strcmp>
   b4b08:	b9e0      	cbnz	r0, b4b44 <_Z14processCommandPKchb+0x324>
            sscanf(dataStr,"%s %s",tLat,tLon);
   b4b0a:	f107 0210 	add.w	r2, r7, #16
   b4b0e:	f107 031c 	add.w	r3, r7, #28
   b4b12:	4939      	ldr	r1, [pc, #228]	; (b4bf8 <_Z14processCommandPKchb+0x3d8>)
   b4b14:	4628      	mov	r0, r5
   b4b16:	f009 fc2b 	bl	be370 <sscanf>
            latitude = atof(tLat);
   b4b1a:	f107 0010 	add.w	r0, r7, #16
   b4b1e:	f00f fd7b 	bl	c4618 <atof>
   b4b22:	ec51 0b10 	vmov	r0, r1, d0
   b4b26:	f00f fd03 	bl	c4530 <__aeabi_d2f>
   b4b2a:	4b34      	ldr	r3, [pc, #208]	; (b4bfc <_Z14processCommandPKchb+0x3dc>)
   b4b2c:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4b2e:	f107 001c 	add.w	r0, r7, #28
   b4b32:	f00f fd71 	bl	c4618 <atof>
   b4b36:	ec51 0b10 	vmov	r0, r1, d0
   b4b3a:	f00f fcf9 	bl	c4530 <__aeabi_d2f>
   b4b3e:	4b30      	ldr	r3, [pc, #192]	; (b4c00 <_Z14processCommandPKchb+0x3e0>)
   b4b40:	6018      	str	r0, [r3, #0]
   b4b42:	e6ef      	b.n	b4924 <_Z14processCommandPKchb+0x104>
        else if(!strcmp(cmdStr,"stp")){ //Stop Command (Emergency stop for motors)
   b4b44:	492f      	ldr	r1, [pc, #188]	; (b4c04 <_Z14processCommandPKchb+0x3e4>)
   b4b46:	f107 000c 	add.w	r0, r7, #12
   b4b4a:	f00f fe09 	bl	c4760 <strcmp>
   b4b4e:	2800      	cmp	r0, #0
   b4b50:	f47f aee8 	bne.w	b4924 <_Z14processCommandPKchb+0x104>
            driveMode = 0;
   b4b54:	4b0f      	ldr	r3, [pc, #60]	; (b4b94 <_Z14processCommandPKchb+0x374>)
            ESCL.write(90);
   b4b56:	215a      	movs	r1, #90	; 0x5a
            driveMode = 0;
   b4b58:	7018      	strb	r0, [r3, #0]
            ESCL.write(90);
   b4b5a:	4817      	ldr	r0, [pc, #92]	; (b4bb8 <_Z14processCommandPKchb+0x398>)
   b4b5c:	f00c fd59 	bl	c1612 <_ZN5Servo5writeEi>
            ESCR.write(90);
   b4b60:	4816      	ldr	r0, [pc, #88]	; (b4bbc <_Z14processCommandPKchb+0x39c>)
   b4b62:	215a      	movs	r1, #90	; 0x5a
   b4b64:	f00c fd55 	bl	c1612 <_ZN5Servo5writeEi>
            stopActive = true;
   b4b68:	4b12      	ldr	r3, [pc, #72]	; (b4bb4 <_Z14processCommandPKchb+0x394>)
   b4b6a:	2201      	movs	r2, #1
   b4b6c:	e76c      	b.n	b4a48 <_Z14processCommandPKchb+0x228>
   b4b6e:	bf00      	nop
   b4b70:	000c69a5 	.word	0x000c69a5
   b4b74:	2003de80 	.word	0x2003de80
   b4b78:	000c69ba 	.word	0x000c69ba
   b4b7c:	2003ddd4 	.word	0x2003ddd4
   b4b80:	000c69d7 	.word	0x000c69d7
   b4b84:	000c6a03 	.word	0x000c6a03
   b4b88:	000c6a24 	.word	0x000c6a24
   b4b8c:	2003e584 	.word	0x2003e584
   b4b90:	2003ded9 	.word	0x2003ded9
   b4b94:	2003ddb5 	.word	0x2003ddb5
   b4b98:	000c6a28 	.word	0x000c6a28
   b4b9c:	2003e5d8 	.word	0x2003e5d8
   b4ba0:	000c6a37 	.word	0x000c6a37
   b4ba4:	000c6a57 	.word	0x000c6a57
   b4ba8:	2003e564 	.word	0x2003e564
   b4bac:	2003e565 	.word	0x2003e565
   b4bb0:	000c6a5b 	.word	0x000c6a5b
   b4bb4:	2003e5cd 	.word	0x2003e5cd
   b4bb8:	2003dd4c 	.word	0x2003dd4c
   b4bbc:	2003dd5c 	.word	0x2003dd5c
   b4bc0:	2003e5f0 	.word	0x2003e5f0
   b4bc4:	2003ddf4 	.word	0x2003ddf4
   b4bc8:	000c6a87 	.word	0x000c6a87
   b4bcc:	2003e0bc 	.word	0x2003e0bc
   b4bd0:	000c6a8b 	.word	0x000c6a8b
   b4bd4:	000c6a8f 	.word	0x000c6a8f
   b4bd8:	000c6ab2 	.word	0x000c6ab2
   b4bdc:	2003ddf8 	.word	0x2003ddf8
   b4be0:	000c6ab6 	.word	0x000c6ab6
   b4be4:	2003e5f1 	.word	0x2003e5f1
   b4be8:	000c6aba 	.word	0x000c6aba
   b4bec:	2003e0b4 	.word	0x2003e0b4
   b4bf0:	2003e58c 	.word	0x2003e58c
   b4bf4:	000c6abe 	.word	0x000c6abe
   b4bf8:	000c6ac2 	.word	0x000c6ac2
   b4bfc:	2003de00 	.word	0x2003de00
   b4c00:	2003dedc 	.word	0x2003dedc
   b4c04:	000c6ac8 	.word	0x000c6ac8
   b4c08:	2003e5d4 	.word	0x2003e5d4

000b4c0c <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4c0c:	b510      	push	{r4, lr}
   b4c0e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4c10:	2200      	movs	r2, #0
   b4c12:	2104      	movs	r1, #4
   b4c14:	4620      	mov	r0, r4
   b4c16:	f7ff fe03 	bl	b4820 <_Z14processCommandPKchb>
    if(logMessages){
   b4c1a:	4b0b      	ldr	r3, [pc, #44]	; (b4c48 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4c1c:	781b      	ldrb	r3, [r3, #0]
   b4c1e:	b193      	cbz	r3, b4c46 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4c20:	480a      	ldr	r0, [pc, #40]	; (b4c4c <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c22:	7c03      	ldrb	r3, [r0, #16]
   b4c24:	b92b      	cbnz	r3, b4c32 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4c26:	490a      	ldr	r1, [pc, #40]	; (b4c50 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4c28:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c2c:	3010      	adds	r0, #16
   b4c2e:	f7ff fd3d 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c32:	4622      	mov	r2, r4
   b4c34:	4907      	ldr	r1, [pc, #28]	; (b4c54 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4c36:	4805      	ldr	r0, [pc, #20]	; (b4c4c <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4c38:	f7ff fbc8 	bl	b43cc <_ZN5Print8printlnfEPKcz>
}
   b4c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c40:	4805      	ldr	r0, [pc, #20]	; (b4c58 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4c42:	f002 ba0f 	b.w	b7064 <_ZN7FatFile5closeEv>
}
   b4c46:	bd10      	pop	{r4, pc}
   b4c48:	2003ded8 	.word	0x2003ded8
   b4c4c:	2003de80 	.word	0x2003de80
   b4c50:	2003ddd4 	.word	0x2003ddd4
   b4c54:	000c6acc 	.word	0x000c6acc
   b4c58:	2003de90 	.word	0x2003de90

000b4c5c <_Z15LTEInputCommand6String>:

int LTEInputCommand(String cmd){
   b4c5c:	b500      	push	{lr}
   b4c5e:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4c60:	2300      	movs	r3, #0
   b4c62:	2264      	movs	r2, #100	; 0x64
   b4c64:	a901      	add	r1, sp, #4
   b4c66:	f00c ff71 	bl	c1b4c <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4c6a:	2104      	movs	r1, #4
   b4c6c:	2200      	movs	r2, #0
   b4c6e:	eb0d 0001 	add.w	r0, sp, r1
   b4c72:	f7ff fdd5 	bl	b4820 <_Z14processCommandPKchb>
    if(logMessages){
   b4c76:	4b0c      	ldr	r3, [pc, #48]	; (b4ca8 <_Z15LTEInputCommand6String+0x4c>)
   b4c78:	781b      	ldrb	r3, [r3, #0]
   b4c7a:	b183      	cbz	r3, b4c9e <_Z15LTEInputCommand6String+0x42>
   b4c7c:	480b      	ldr	r0, [pc, #44]	; (b4cac <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c7e:	7c03      	ldrb	r3, [r0, #16]
   b4c80:	b92b      	cbnz	r3, b4c8e <_Z15LTEInputCommand6String+0x32>
   b4c82:	490b      	ldr	r1, [pc, #44]	; (b4cb0 <_Z15LTEInputCommand6String+0x54>)
   b4c84:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c88:	3010      	adds	r0, #16
   b4c8a:	f7ff fd0f 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4c8e:	4909      	ldr	r1, [pc, #36]	; (b4cb4 <_Z15LTEInputCommand6String+0x58>)
   b4c90:	4806      	ldr	r0, [pc, #24]	; (b4cac <_Z15LTEInputCommand6String+0x50>)
   b4c92:	aa01      	add	r2, sp, #4
   b4c94:	f7ff fb9a 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c98:	4807      	ldr	r0, [pc, #28]	; (b4cb8 <_Z15LTEInputCommand6String+0x5c>)
   b4c9a:	f002 f9e3 	bl	b7064 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4c9e:	2001      	movs	r0, #1
   b4ca0:	b01b      	add	sp, #108	; 0x6c
   b4ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ca6:	bf00      	nop
   b4ca8:	2003ded8 	.word	0x2003ded8
   b4cac:	2003de80 	.word	0x2003de80
   b4cb0:	2003ddd4 	.word	0x2003ddd4
   b4cb4:	000c6acc 	.word	0x000c6acc
   b4cb8:	2003de90 	.word	0x2003de90

000b4cbc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4cbc:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4cbe:	f101 0308 	add.w	r3, r1, #8
   b4cc2:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4cc6:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4cc8:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4ccc:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4cce:	460a      	mov	r2, r1
   b4cd0:	4601      	mov	r1, r0
   b4cd2:	4668      	mov	r0, sp
   b4cd4:	f00f fcc0 	bl	c4658 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4cd8:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4cdc:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4cde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4ce2:	b113      	cbz	r3, b4cea <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4ce4:	2300      	movs	r3, #0
   b4ce6:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4cea:	f00d f8e1 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4cee:	4916      	ldr	r1, [pc, #88]	; (b4d48 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cf0:	f00c fc1d 	bl	c152e <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4cf4:	f00d f8dc 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4cf8:	4629      	mov	r1, r5
   b4cfa:	f00c fc18 	bl	c152e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4cfe:	2201      	movs	r2, #1
   b4d00:	4611      	mov	r1, r2
   b4d02:	4628      	mov	r0, r5
   b4d04:	f7ff fd8c 	bl	b4820 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4d08:	782b      	ldrb	r3, [r5, #0]
   b4d0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4d0e:	2b41      	cmp	r3, #65	; 0x41
   b4d10:	d103      	bne.n	b4d1a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4d12:	f009 f817 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b4d16:	4b0d      	ldr	r3, [pc, #52]	; (b4d4c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4d18:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4d1a:	4b0d      	ldr	r3, [pc, #52]	; (b4d50 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4d1c:	781b      	ldrb	r3, [r3, #0]
   b4d1e:	b183      	cbz	r3, b4d42 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4d20:	480c      	ldr	r0, [pc, #48]	; (b4d54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d22:	7c03      	ldrb	r3, [r0, #16]
   b4d24:	b92b      	cbnz	r3, b4d32 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4d26:	490c      	ldr	r1, [pc, #48]	; (b4d58 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4d28:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d2c:	3010      	adds	r0, #16
   b4d2e:	f7ff fcbd 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4d32:	490a      	ldr	r1, [pc, #40]	; (b4d5c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4d34:	4807      	ldr	r0, [pc, #28]	; (b4d54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4d36:	462a      	mov	r2, r5
   b4d38:	f7ff fb48 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4d3c:	4808      	ldr	r0, [pc, #32]	; (b4d60 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4d3e:	f002 f991 	bl	b7064 <_ZN7FatFile5closeEv>
}
   b4d42:	46bd      	mov	sp, r7
   b4d44:	bdb0      	pop	{r4, r5, r7, pc}
   b4d46:	bf00      	nop
   b4d48:	000c6aec 	.word	0x000c6aec
   b4d4c:	2003dd44 	.word	0x2003dd44
   b4d50:	2003ded8 	.word	0x2003ded8
   b4d54:	2003de80 	.word	0x2003de80
   b4d58:	2003ddd4 	.word	0x2003ddd4
   b4d5c:	000c6afc 	.word	0x000c6afc
   b4d60:	2003de90 	.word	0x2003de90

000b4d64 <_Z9setupXBeev>:
void setupXBee(){
   b4d64:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4d66:	f00d fa4f 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b4d6a:	4908      	ldr	r1, [pc, #32]	; (b4d8c <_Z9setupXBeev+0x28>)
   b4d6c:	f7ff faf6 	bl	b435c <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4d70:	2014      	movs	r0, #20
   b4d72:	f009 fb51 	bl	be418 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4d76:	f00d fa47 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b4d7a:	4905      	ldr	r1, [pc, #20]	; (b4d90 <_Z9setupXBeev+0x2c>)
   b4d7c:	f7ff faee 	bl	b435c <_ZN5Print6printfEPKcz>
}
   b4d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4d84:	2014      	movs	r0, #20
   b4d86:	f009 bb47 	b.w	be418 <delay>
   b4d8a:	bf00      	nop
   b4d8c:	000c8056 	.word	0x000c8056
   b4d90:	000c682c 	.word	0x000c682c

000b4d94 <_Z8setupGPSv>:
void setupGPS(){
   b4d94:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4d96:	4c15      	ldr	r4, [pc, #84]	; (b4dec <_Z8setupGPSv+0x58>)
   b4d98:	2301      	movs	r3, #1
   b4d9a:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4d9c:	f00d f9f4 	bl	c2188 <_Z19__fetch_global_Wirev>
   b4da0:	2300      	movs	r3, #0
   b4da2:	4601      	mov	r1, r0
   b4da4:	9300      	str	r3, [sp, #0]
   b4da6:	4812      	ldr	r0, [pc, #72]	; (b4df0 <_Z8setupGPSv+0x5c>)
   b4da8:	f240 434c 	movw	r3, #1100	; 0x44c
   b4dac:	2242      	movs	r2, #66	; 0x42
   b4dae:	f008 fb63 	bl	bd478 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4db2:	b928      	cbnz	r0, b4dc0 <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4db4:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4db6:	f00d f87b 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b4dba:	490e      	ldr	r1, [pc, #56]	; (b4df4 <_Z8setupGPSv+0x60>)
   b4dbc:	f00c fbb7 	bl	c152e <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4dc0:	f240 424c 	movw	r2, #1100	; 0x44c
   b4dc4:	2101      	movs	r1, #1
   b4dc6:	480a      	ldr	r0, [pc, #40]	; (b4df0 <_Z8setupGPSv+0x5c>)
   b4dc8:	f008 fa8a 	bl	bd2e0 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4dcc:	f240 434c 	movw	r3, #1100	; 0x44c
   b4dd0:	2201      	movs	r2, #1
   b4dd2:	2100      	movs	r1, #0
   b4dd4:	4806      	ldr	r0, [pc, #24]	; (b4df0 <_Z8setupGPSv+0x5c>)
   b4dd6:	f008 fa63 	bl	bd2a0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4dda:	f00d f9d5 	bl	c2188 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4dde:	4906      	ldr	r1, [pc, #24]	; (b4df8 <_Z8setupGPSv+0x64>)
}
   b4de0:	b002      	add	sp, #8
   b4de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4de6:	f00b b863 	b.w	bfeb0 <_ZN7TwoWire8setSpeedEm>
   b4dea:	bf00      	nop
   b4dec:	2003dd6c 	.word	0x2003dd6c
   b4df0:	2003df34 	.word	0x2003df34
   b4df4:	000c6b1c 	.word	0x000c6b1c
   b4df8:	00061a80 	.word	0x00061a80
   b4dfc:	00000000 	.word	0x00000000

000b4e00 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4e00:	b510      	push	{r4, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4e02:	2015      	movs	r0, #21
   b4e04:	f00d f991 	bl	c212a <analogRead>
   b4e08:	ee07 0a90 	vmov	s15, r0
   b4e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4e10:	4c37      	ldr	r4, [pc, #220]	; (b4ef0 <_Z12readPowerSysv+0xf0>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4e12:	ee17 0a90 	vmov	r0, s15
   b4e16:	f00f f83b 	bl	c3e90 <__aeabi_f2d>
   b4e1a:	a32d      	add	r3, pc, #180	; (adr r3, b4ed0 <_Z12readPowerSysv+0xd0>)
   b4e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e20:	f00f f88e 	bl	c3f40 <__aeabi_dmul>
   b4e24:	f00f fb84 	bl	c4530 <__aeabi_d2f>
   b4e28:	4b32      	ldr	r3, [pc, #200]	; (b4ef4 <_Z12readPowerSysv+0xf4>)
   b4e2a:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4e2c:	f00f f830 	bl	c3e90 <__aeabi_f2d>
   b4e30:	a329      	add	r3, pc, #164	; (adr r3, b4ed8 <_Z12readPowerSysv+0xd8>)
   b4e32:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e36:	f00e fecb 	bl	c3bd0 <__aeabi_dsub>
   b4e3a:	4b2f      	ldr	r3, [pc, #188]	; (b4ef8 <_Z12readPowerSysv+0xf8>)
   b4e3c:	2200      	movs	r2, #0
   b4e3e:	f00f f87f 	bl	c3f40 <__aeabi_dmul>
   b4e42:	a327      	add	r3, pc, #156	; (adr r3, b4ee0 <_Z12readPowerSysv+0xe0>)
   b4e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e48:	f00f f9a4 	bl	c4194 <__aeabi_ddiv>
   b4e4c:	f00f fb28 	bl	c44a0 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4e50:	2864      	cmp	r0, #100	; 0x64
   b4e52:	4603      	mov	r3, r0
   b4e54:	bfa8      	it	ge
   b4e56:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4e58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4e5c:	2814      	cmp	r0, #20
   b4e5e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4e60:	4b26      	ldr	r3, [pc, #152]	; (b4efc <_Z12readPowerSysv+0xfc>)
   b4e62:	bfcc      	ite	gt
   b4e64:	2000      	movgt	r0, #0
   b4e66:	2001      	movle	r0, #1
   b4e68:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4e6a:	2010      	movs	r0, #16
   b4e6c:	f00d f95d 	bl	c212a <analogRead>
   b4e70:	ee07 0a90 	vmov	s15, r0
   b4e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4e78:	ee17 0a90 	vmov	r0, s15
   b4e7c:	f00f f808 	bl	c3e90 <__aeabi_f2d>
   b4e80:	4b1f      	ldr	r3, [pc, #124]	; (b4f00 <_Z12readPowerSysv+0x100>)
   b4e82:	2200      	movs	r2, #0
   b4e84:	f00f f85c 	bl	c3f40 <__aeabi_dmul>
   b4e88:	a317      	add	r3, pc, #92	; (adr r3, b4ee8 <_Z12readPowerSysv+0xe8>)
   b4e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e8e:	f00f f981 	bl	c4194 <__aeabi_ddiv>
   b4e92:	f00f fb4d 	bl	c4530 <__aeabi_d2f>
   b4e96:	4b1b      	ldr	r3, [pc, #108]	; (b4f04 <_Z12readPowerSysv+0x104>)
   b4e98:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4e9a:	2011      	movs	r0, #17
   b4e9c:	f00d f945 	bl	c212a <analogRead>
   b4ea0:	ee07 0a90 	vmov	s15, r0
   b4ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ea8:	ee17 0a90 	vmov	r0, s15
   b4eac:	f00e fff0 	bl	c3e90 <__aeabi_f2d>
   b4eb0:	4b15      	ldr	r3, [pc, #84]	; (b4f08 <_Z12readPowerSysv+0x108>)
   b4eb2:	2200      	movs	r2, #0
   b4eb4:	f00f f844 	bl	c3f40 <__aeabi_dmul>
   b4eb8:	a30b      	add	r3, pc, #44	; (adr r3, b4ee8 <_Z12readPowerSysv+0xe8>)
   b4eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ebe:	f00f f969 	bl	c4194 <__aeabi_ddiv>
   b4ec2:	f00f fb35 	bl	c4530 <__aeabi_d2f>
   b4ec6:	4b11      	ldr	r3, [pc, #68]	; (b4f0c <_Z12readPowerSysv+0x10c>)
   b4ec8:	6018      	str	r0, [r3, #0]
}
   b4eca:	7820      	ldrb	r0, [r4, #0]
   b4ecc:	bd10      	pop	{r4, pc}
   b4ece:	bf00      	nop
   b4ed0:	6e04c059 	.word	0x6e04c059
   b4ed4:	3f73cddd 	.word	0x3f73cddd
   b4ed8:	66666666 	.word	0x66666666
   b4edc:	40246666 	.word	0x40246666
   b4ee0:	cccccccc 	.word	0xcccccccc
   b4ee4:	4018cccc 	.word	0x4018cccc
   b4ee8:	00000000 	.word	0x00000000
   b4eec:	40affe00 	.word	0x40affe00
   b4ef0:	2003dd9c 	.word	0x2003dd9c
   b4ef4:	2003dda0 	.word	0x2003dda0
   b4ef8:	40590000 	.word	0x40590000
   b4efc:	2003dee0 	.word	0x2003dee0
   b4f00:	40408000 	.word	0x40408000
   b4f04:	2003dd98 	.word	0x2003dd98
   b4f08:	40308000 	.word	0x40308000
   b4f0c:	2003e588 	.word	0x2003e588

000b4f10 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b4f10:	b538      	push	{r3, r4, r5, lr}
   b4f12:	eef0 7a60 	vmov.f32	s15, s1
   b4f16:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4f1a:	eef0 0a40 	vmov.f32	s1, s0
   b4f1e:	eeb0 0a67 	vmov.f32	s0, s15
   b4f22:	f00d fb5d 	bl	c25e0 <atan2f>
   b4f26:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;
   b4f2a:	f00e ffb1 	bl	c3e90 <__aeabi_f2d>
   b4f2e:	4b8e      	ldr	r3, [pc, #568]	; (b5168 <_Z18readCompassHeadingff+0x258>)
   b4f30:	2200      	movs	r2, #0
   b4f32:	f00f f805 	bl	c3f40 <__aeabi_dmul>
   b4f36:	a384      	add	r3, pc, #528	; (adr r3, b5148 <_Z18readCompassHeadingff+0x238>)
   b4f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f3c:	f00f f92a 	bl	c4194 <__aeabi_ddiv>
   b4f40:	f00f faf6 	bl	c4530 <__aeabi_d2f>
   b4f44:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b4f48:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b4f4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b4f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f54:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b4f58:	db13      	blt.n	b4f82 <_Z18readCompassHeadingff+0x72>
   b4f5a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f62:	d50e      	bpl.n	b4f82 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4f64:	f00e ff94 	bl	c3e90 <__aeabi_f2d>
   b4f68:	4b80      	ldr	r3, [pc, #512]	; (b516c <_Z18readCompassHeadingff+0x25c>)
   b4f6a:	2200      	movs	r2, #0
   b4f6c:	f00e fe30 	bl	c3bd0 <__aeabi_dsub>
   b4f70:	4b7f      	ldr	r3, [pc, #508]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b4f72:	2200      	movs	r2, #0
   b4f74:	f00e ffe4 	bl	c3f40 <__aeabi_dmul>
   b4f78:	4b7e      	ldr	r3, [pc, #504]	; (b5174 <_Z18readCompassHeadingff+0x264>)
   b4f7a:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b4f7c:	f00f f90a 	bl	c4194 <__aeabi_ddiv>
   b4f80:	e021      	b.n	b4fc6 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4f82:	ee18 0a10 	vmov	r0, s16
   b4f86:	f00e ff83 	bl	c3e90 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4f8a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b4f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f92:	eddf 7a79 	vldr	s15, [pc, #484]	; b5178 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b4f96:	4604      	mov	r4, r0
   b4f98:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b4f9a:	db1b      	blt.n	b4fd4 <_Z18readCompassHeadingff+0xc4>
   b4f9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fa4:	d516      	bpl.n	b4fd4 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b4fa6:	4b75      	ldr	r3, [pc, #468]	; (b517c <_Z18readCompassHeadingff+0x26c>)
   b4fa8:	2200      	movs	r2, #0
   b4faa:	f00e fe11 	bl	c3bd0 <__aeabi_dsub>
   b4fae:	4b70      	ldr	r3, [pc, #448]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b4fb0:	2200      	movs	r2, #0
   b4fb2:	f00e ffc5 	bl	c3f40 <__aeabi_dmul>
   b4fb6:	4b72      	ldr	r3, [pc, #456]	; (b5180 <_Z18readCompassHeadingff+0x270>)
   b4fb8:	2200      	movs	r2, #0
   b4fba:	f00f f8eb 	bl	c4194 <__aeabi_ddiv>
   b4fbe:	4b6c      	ldr	r3, [pc, #432]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b4fc0:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b4fc2:	f00e fe07 	bl	c3bd4 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4fc6:	f00f fab3 	bl	c4530 <__aeabi_d2f>
}
   b4fca:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b4fce:	ee00 0a10 	vmov	s0, r0
}
   b4fd2:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b4fd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fdc:	eddf 7a69 	vldr	s15, [pc, #420]	; b5184 <_Z18readCompassHeadingff+0x274>
   b4fe0:	db15      	blt.n	b500e <_Z18readCompassHeadingff+0xfe>
   b4fe2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fea:	d510      	bpl.n	b500e <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b4fec:	4b66      	ldr	r3, [pc, #408]	; (b5188 <_Z18readCompassHeadingff+0x278>)
   b4fee:	2200      	movs	r2, #0
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	4629      	mov	r1, r5
   b4ff4:	f00e fdec 	bl	c3bd0 <__aeabi_dsub>
   b4ff8:	4b5d      	ldr	r3, [pc, #372]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b4ffa:	2200      	movs	r2, #0
   b4ffc:	f00e ffa0 	bl	c3f40 <__aeabi_dmul>
   b5000:	4b62      	ldr	r3, [pc, #392]	; (b518c <_Z18readCompassHeadingff+0x27c>)
   b5002:	2200      	movs	r2, #0
   b5004:	f00f f8c6 	bl	c4194 <__aeabi_ddiv>
   b5008:	4b61      	ldr	r3, [pc, #388]	; (b5190 <_Z18readCompassHeadingff+0x280>)
   b500a:	2200      	movs	r2, #0
   b500c:	e7d9      	b.n	b4fc2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b500e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5016:	db18      	blt.n	b504a <_Z18readCompassHeadingff+0x13a>
   b5018:	eddf 7a5e 	vldr	s15, [pc, #376]	; b5194 <_Z18readCompassHeadingff+0x284>
   b501c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5024:	d511      	bpl.n	b504a <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b5026:	4b5c      	ldr	r3, [pc, #368]	; (b5198 <_Z18readCompassHeadingff+0x288>)
   b5028:	2200      	movs	r2, #0
   b502a:	4620      	mov	r0, r4
   b502c:	4629      	mov	r1, r5
   b502e:	f00e fdcf 	bl	c3bd0 <__aeabi_dsub>
   b5032:	4b4f      	ldr	r3, [pc, #316]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b5034:	2200      	movs	r2, #0
   b5036:	f00e ff83 	bl	c3f40 <__aeabi_dmul>
   b503a:	4b58      	ldr	r3, [pc, #352]	; (b519c <_Z18readCompassHeadingff+0x28c>)
   b503c:	2200      	movs	r2, #0
   b503e:	f00f f8a9 	bl	c4194 <__aeabi_ddiv>
   b5042:	a343      	add	r3, pc, #268	; (adr r3, b5150 <_Z18readCompassHeadingff+0x240>)
   b5044:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5048:	e7bb      	b.n	b4fc2 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b504a:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b504e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b5052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5056:	db11      	blt.n	b507c <_Z18readCompassHeadingff+0x16c>
   b5058:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5060:	d50c      	bpl.n	b507c <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b5062:	4b42      	ldr	r3, [pc, #264]	; (b516c <_Z18readCompassHeadingff+0x25c>)
   b5064:	2200      	movs	r2, #0
   b5066:	4620      	mov	r0, r4
   b5068:	4629      	mov	r1, r5
   b506a:	f00e fdb1 	bl	c3bd0 <__aeabi_dsub>
   b506e:	4b4c      	ldr	r3, [pc, #304]	; (b51a0 <_Z18readCompassHeadingff+0x290>)
   b5070:	2200      	movs	r2, #0
   b5072:	f00e ff65 	bl	c3f40 <__aeabi_dmul>
   b5076:	4b4b      	ldr	r3, [pc, #300]	; (b51a4 <_Z18readCompassHeadingff+0x294>)
   b5078:	2200      	movs	r2, #0
   b507a:	e77f      	b.n	b4f7c <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b507c:	eddf 7a4a 	vldr	s15, [pc, #296]	; b51a8 <_Z18readCompassHeadingff+0x298>
   b5080:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5088:	db17      	blt.n	b50ba <_Z18readCompassHeadingff+0x1aa>
   b508a:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5092:	d512      	bpl.n	b50ba <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b5094:	4b45      	ldr	r3, [pc, #276]	; (b51ac <_Z18readCompassHeadingff+0x29c>)
   b5096:	2200      	movs	r2, #0
   b5098:	4620      	mov	r0, r4
   b509a:	4629      	mov	r1, r5
   b509c:	f00e fd9a 	bl	c3bd4 <__adddf3>
   b50a0:	4b3f      	ldr	r3, [pc, #252]	; (b51a0 <_Z18readCompassHeadingff+0x290>)
   b50a2:	2200      	movs	r2, #0
   b50a4:	f00e ff4c 	bl	c3f40 <__aeabi_dmul>
   b50a8:	4b41      	ldr	r3, [pc, #260]	; (b51b0 <_Z18readCompassHeadingff+0x2a0>)
   b50aa:	2200      	movs	r2, #0
   b50ac:	f00f f872 	bl	c4194 <__aeabi_ddiv>
   b50b0:	4b2f      	ldr	r3, [pc, #188]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b50b2:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b50b4:	f00e fd8c 	bl	c3bd0 <__aeabi_dsub>
   b50b8:	e785      	b.n	b4fc6 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b50ba:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b51b4 <_Z18readCompassHeadingff+0x2a4>
   b50be:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b50c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b50c6:	db15      	blt.n	b50f4 <_Z18readCompassHeadingff+0x1e4>
   b50c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b50cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b50d0:	d510      	bpl.n	b50f4 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b50d2:	4b39      	ldr	r3, [pc, #228]	; (b51b8 <_Z18readCompassHeadingff+0x2a8>)
   b50d4:	2200      	movs	r2, #0
   b50d6:	4620      	mov	r0, r4
   b50d8:	4629      	mov	r1, r5
   b50da:	f00e fd7b 	bl	c3bd4 <__adddf3>
   b50de:	4b30      	ldr	r3, [pc, #192]	; (b51a0 <_Z18readCompassHeadingff+0x290>)
   b50e0:	2200      	movs	r2, #0
   b50e2:	f00e ff2d 	bl	c3f40 <__aeabi_dmul>
   b50e6:	4b35      	ldr	r3, [pc, #212]	; (b51bc <_Z18readCompassHeadingff+0x2ac>)
   b50e8:	2200      	movs	r2, #0
   b50ea:	f00f f853 	bl	c4194 <__aeabi_ddiv>
   b50ee:	4b28      	ldr	r3, [pc, #160]	; (b5190 <_Z18readCompassHeadingff+0x280>)
   b50f0:	2200      	movs	r2, #0
   b50f2:	e7df      	b.n	b50b4 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b50f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b50f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b50fc:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b5100:	dd10      	ble.n	b5124 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b5102:	4b2f      	ldr	r3, [pc, #188]	; (b51c0 <_Z18readCompassHeadingff+0x2b0>)
   b5104:	4620      	mov	r0, r4
   b5106:	4629      	mov	r1, r5
   b5108:	f00e fd62 	bl	c3bd0 <__aeabi_dsub>
   b510c:	4b18      	ldr	r3, [pc, #96]	; (b5170 <_Z18readCompassHeadingff+0x260>)
   b510e:	2200      	movs	r2, #0
   b5110:	f00e ff16 	bl	c3f40 <__aeabi_dmul>
   b5114:	a310      	add	r3, pc, #64	; (adr r3, b5158 <_Z18readCompassHeadingff+0x248>)
   b5116:	e9d3 2300 	ldrd	r2, r3, [r3]
   b511a:	f00f f83b 	bl	c4194 <__aeabi_ddiv>
   b511e:	4b12      	ldr	r3, [pc, #72]	; (b5168 <_Z18readCompassHeadingff+0x258>)
   b5120:	2200      	movs	r2, #0
   b5122:	e7c7      	b.n	b50b4 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b5124:	4b27      	ldr	r3, [pc, #156]	; (b51c4 <_Z18readCompassHeadingff+0x2b4>)
   b5126:	4620      	mov	r0, r4
   b5128:	4629      	mov	r1, r5
   b512a:	f00e fd53 	bl	c3bd4 <__adddf3>
   b512e:	a30c      	add	r3, pc, #48	; (adr r3, b5160 <_Z18readCompassHeadingff+0x250>)
   b5130:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5134:	f00e ff04 	bl	c3f40 <__aeabi_dmul>
   b5138:	4b23      	ldr	r3, [pc, #140]	; (b51c8 <_Z18readCompassHeadingff+0x2b8>)
   b513a:	2200      	movs	r2, #0
   b513c:	f00f f82a 	bl	c4194 <__aeabi_ddiv>
   b5140:	a303      	add	r3, pc, #12	; (adr r3, b5150 <_Z18readCompassHeadingff+0x240>)
   b5142:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5146:	e7b5      	b.n	b50b4 <_Z18readCompassHeadingff+0x1a4>
   b5148:	54442d18 	.word	0x54442d18
   b514c:	400921fb 	.word	0x400921fb
   b5150:	00000000 	.word	0x00000000
   b5154:	4060e000 	.word	0x4060e000
   b5158:	00000000 	.word	0x00000000
   b515c:	4063a000 	.word	0x4063a000
   b5160:	bb000000 	.word	0xbb000000
   b5164:	403d3c54 	.word	0x403d3c54
   b5168:	40668000 	.word	0x40668000
   b516c:	40180000 	.word	0x40180000
   b5170:	40468000 	.word	0x40468000
   b5174:	40390000 	.word	0x40390000
   b5178:	42680000 	.word	0x42680000
   b517c:	403f0000 	.word	0x403f0000
   b5180:	403b0000 	.word	0x403b0000
   b5184:	42ac0000 	.word	0x42ac0000
   b5188:	404d0000 	.word	0x404d0000
   b518c:	403c0000 	.word	0x403c0000
   b5190:	40568000 	.word	0x40568000
   b5194:	42fa0000 	.word	0x42fa0000
   b5198:	40558000 	.word	0x40558000
   b519c:	40438000 	.word	0x40438000
   b51a0:	c0468000 	.word	0xc0468000
   b51a4:	c0380000 	.word	0xc0380000
   b51a8:	c2200000 	.word	0xc2200000
   b51ac:	40320000 	.word	0x40320000
   b51b0:	c0360000 	.word	0xc0360000
   b51b4:	c29c0000 	.word	0xc29c0000
   b51b8:	40440000 	.word	0x40440000
   b51bc:	c0430000 	.word	0xc0430000
   b51c0:	405f4000 	.word	0x405f4000
   b51c4:	40538000 	.word	0x40538000
   b51c8:	40598000 	.word	0x40598000
   b51cc:	00000000 	.word	0x00000000

000b51d0 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b51d0:	b510      	push	{r4, lr}
   b51d2:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);
   b51d6:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b51da:	b082      	sub	sp, #8
  return deg * (3.14159/180);
   b51dc:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b51e0:	eef0 aa41 	vmov.f32	s21, s2
   b51e4:	eeb0 aa61 	vmov.f32	s20, s3
   b51e8:	eef0 8a60 	vmov.f32	s17, s1
   b51ec:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);
   b51f0:	f00e fe4e 	bl	c3e90 <__aeabi_f2d>
   b51f4:	a342      	add	r3, pc, #264	; (adr r3, b5300 <_Z12calcDistanceffff+0x130>)
   b51f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51fa:	f00e fea1 	bl	c3f40 <__aeabi_dmul>
   b51fe:	f00f f997 	bl	c4530 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5202:	ee07 0a90 	vmov	s15, r0
   b5206:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b520a:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b520e:	f00d f971 	bl	c24f4 <sinf>
  return deg * (3.14159/180);
   b5212:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5216:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b521a:	f00e fe39 	bl	c3e90 <__aeabi_f2d>
   b521e:	a338      	add	r3, pc, #224	; (adr r3, b5300 <_Z12calcDistanceffff+0x130>)
   b5220:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5224:	f00e fe8c 	bl	c3f40 <__aeabi_dmul>
   b5228:	f00f f982 	bl	c4530 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b522c:	ee00 0a10 	vmov	s0, r0
   b5230:	f00d f928 	bl	c2484 <cosf>
  return deg * (3.14159/180);
   b5234:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5238:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b523c:	f00e fe28 	bl	c3e90 <__aeabi_f2d>
   b5240:	a32f      	add	r3, pc, #188	; (adr r3, b5300 <_Z12calcDistanceffff+0x130>)
   b5242:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5246:	f00e fe7b 	bl	c3f40 <__aeabi_dmul>
   b524a:	f00f f971 	bl	c4530 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b524e:	ee00 0a10 	vmov	s0, r0
   b5252:	f00d f917 	bl	c2484 <cosf>
  return deg * (3.14159/180);
   b5256:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b525a:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b525e:	ee17 0a90 	vmov	r0, s15
   b5262:	f00e fe15 	bl	c3e90 <__aeabi_f2d>
   b5266:	a326      	add	r3, pc, #152	; (adr r3, b5300 <_Z12calcDistanceffff+0x130>)
   b5268:	e9d3 2300 	ldrd	r2, r3, [r3]
   b526c:	f00e fe68 	bl	c3f40 <__aeabi_dmul>
   b5270:	f00f f95e 	bl	c4530 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2); 
   b5274:	ee07 0a90 	vmov	s15, r0
   b5278:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b527c:	f00d f93a 	bl	c24f4 <sinf>
   b5280:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b5284:	ee68 8a80 	vmul.f32	s17, s17, s0
   b5288:	ee28 8a80 	vmul.f32	s16, s17, s0
   b528c:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b5290:	eeb0 0a48 	vmov.f32	s0, s16
   b5294:	f00d f9a6 	bl	c25e4 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b5298:	ee18 0a10 	vmov	r0, s16
   b529c:	ee10 4a10 	vmov	r4, s0
   b52a0:	f00e fdf6 	bl	c3e90 <__aeabi_f2d>
   b52a4:	4602      	mov	r2, r0
   b52a6:	460b      	mov	r3, r1
   b52a8:	2000      	movs	r0, #0
   b52aa:	4913      	ldr	r1, [pc, #76]	; (b52f8 <_Z12calcDistanceffff+0x128>)
   b52ac:	f00e fc90 	bl	c3bd0 <__aeabi_dsub>
   b52b0:	ec41 0b10 	vmov	d0, r0, r1
   b52b4:	f00d f95a 	bl	c256c <sqrt>
      return atan2(__type(__y), __type(__x));
   b52b8:	4620      	mov	r0, r4
   b52ba:	ed8d 0b00 	vstr	d0, [sp]
   b52be:	f00e fde7 	bl	c3e90 <__aeabi_f2d>
   b52c2:	ed9d 1b00 	vldr	d1, [sp]
   b52c6:	ec41 0b10 	vmov	d0, r0, r1
   b52ca:	f00d f94d 	bl	c2568 <atan2>
   b52ce:	ec53 2b10 	vmov	r2, r3, d0
   b52d2:	ee10 0a10 	vmov	r0, s0
   b52d6:	4619      	mov	r1, r3
   b52d8:	f00e fc7c 	bl	c3bd4 <__adddf3>
   b52dc:	f00f f928 	bl	c4530 <__aeabi_d2f>
}
   b52e0:	ed9f 0a06 	vldr	s0, [pc, #24]	; b52fc <_Z12calcDistanceffff+0x12c>
   b52e4:	ee07 0a90 	vmov	s15, r0
   b52e8:	ee27 0a80 	vmul.f32	s0, s15, s0
   b52ec:	b002      	add	sp, #8
   b52ee:	ecbd 8b08 	vpop	{d8-d11}
   b52f2:	bd10      	pop	{r4, pc}
   b52f4:	f3af 8000 	nop.w
   b52f8:	3ff00000 	.word	0x3ff00000
   b52fc:	4ac26d70 	.word	0x4ac26d70
   b5300:	a50de270 	.word	0xa50de270
   b5304:	3f91df45 	.word	0x3f91df45

000b5308 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b5308:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){
   b530a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b5312:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b5316:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b531a:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){
   b531e:	dd37      	ble.n	b5390 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5324:	dd04      	ble.n	b5330 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b5326:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b532a:	ecbd 8b02 	vpop	{d8}
   b532e:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5330:	eddf 7a2b 	vldr	s15, [pc, #172]	; b53e0 <_Z9calcDeltaff+0xd8>
   b5334:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5338:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b533c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5344:	dcef      	bgt.n	b5326 <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b5346:	ee10 0a10 	vmov	r0, s0
   b534a:	f00e fda1 	bl	c3e90 <__aeabi_f2d>
   b534e:	4b25      	ldr	r3, [pc, #148]	; (b53e4 <_Z9calcDeltaff+0xdc>)
   b5350:	2200      	movs	r2, #0
   b5352:	f00e fc3f 	bl	c3bd4 <__adddf3>
   b5356:	4602      	mov	r2, r0
   b5358:	460b      	mov	r3, r1
   b535a:	2000      	movs	r0, #0
   b535c:	2100      	movs	r1, #0
   b535e:	f00e fc37 	bl	c3bd0 <__aeabi_dsub>
   b5362:	4604      	mov	r4, r0
   b5364:	ee18 0a10 	vmov	r0, s16
   b5368:	460d      	mov	r5, r1
   b536a:	f00e fd91 	bl	c3e90 <__aeabi_f2d>
   b536e:	4602      	mov	r2, r0
   b5370:	460b      	mov	r3, r1
   b5372:	2000      	movs	r0, #0
   b5374:	491b      	ldr	r1, [pc, #108]	; (b53e4 <_Z9calcDeltaff+0xdc>)
   b5376:	f00e fc2b 	bl	c3bd0 <__aeabi_dsub>
   b537a:	4602      	mov	r2, r0
   b537c:	460b      	mov	r3, r1
   b537e:	4620      	mov	r0, r4
   b5380:	4629      	mov	r1, r5
   b5382:	f00e fc25 	bl	c3bd0 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b5386:	f00f f8d3 	bl	c4530 <__aeabi_d2f>
   b538a:	ee00 0a10 	vmov	s0, r0
   b538e:	e7cc      	b.n	b532a <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b5390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5394:	ddc7      	ble.n	b5326 <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b5396:	eddf 7a12 	vldr	s15, [pc, #72]	; b53e0 <_Z9calcDeltaff+0xd8>
   b539a:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b539e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b53a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53a6:	d4be      	bmi.n	b5326 <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b53a8:	ee10 0a10 	vmov	r0, s0
   b53ac:	f00e fd70 	bl	c3e90 <__aeabi_f2d>
   b53b0:	4602      	mov	r2, r0
   b53b2:	460b      	mov	r3, r1
   b53b4:	2000      	movs	r0, #0
   b53b6:	490b      	ldr	r1, [pc, #44]	; (b53e4 <_Z9calcDeltaff+0xdc>)
   b53b8:	f00e fc0a 	bl	c3bd0 <__aeabi_dsub>
   b53bc:	4604      	mov	r4, r0
   b53be:	ee18 0a10 	vmov	r0, s16
   b53c2:	460d      	mov	r5, r1
   b53c4:	f00e fd64 	bl	c3e90 <__aeabi_f2d>
   b53c8:	4b06      	ldr	r3, [pc, #24]	; (b53e4 <_Z9calcDeltaff+0xdc>)
   b53ca:	2200      	movs	r2, #0
   b53cc:	f00e fc02 	bl	c3bd4 <__adddf3>
   b53d0:	4602      	mov	r2, r0
   b53d2:	460b      	mov	r3, r1
   b53d4:	4620      	mov	r0, r4
   b53d6:	4629      	mov	r1, r5
   b53d8:	f00e fbfc 	bl	c3bd4 <__adddf3>
   b53dc:	e7d3      	b.n	b5386 <_Z9calcDeltaff+0x7e>
   b53de:	bf00      	nop
   b53e0:	43340000 	.word	0x43340000
   b53e4:	40668000 	.word	0x40668000

000b53e8 <_Z15getPositionDatav>:
void getPositionData(){
   b53e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53ec:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){
   b53f0:	4c75      	ldr	r4, [pc, #468]	; (b55c8 <_Z15getPositionDatav+0x1e0>)
void getPositionData(){
   b53f2:	b0cd      	sub	sp, #308	; 0x134
   b53f4:	f008 fca6 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){
   b53f8:	6823      	ldr	r3, [r4, #0]
   b53fa:	1ac0      	subs	r0, r0, r3
   b53fc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b5400:	f240 80d6 	bls.w	b55b0 <_Z15getPositionDatav+0x1c8>
   b5404:	f008 fc9e 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;
   b5408:	4b70      	ldr	r3, [pc, #448]	; (b55cc <_Z15getPositionDatav+0x1e4>)
        positionTimer = millis();
   b540a:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;
   b540c:	2501      	movs	r5, #1
        if(myGPS.isConnected()){
   b540e:	4870      	ldr	r0, [pc, #448]	; (b55d0 <_Z15getPositionDatav+0x1e8>)
        updateMotorControl = true;
   b5410:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){
   b5412:	f240 414c 	movw	r1, #1100	; 0x44c
   b5416:	f008 f80b 	bl	bd430 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b541a:	4c6e      	ldr	r4, [pc, #440]	; (b55d4 <_Z15getPositionDatav+0x1ec>)
   b541c:	2800      	cmp	r0, #0
   b541e:	f000 80cc 	beq.w	b55ba <_Z15getPositionDatav+0x1d2>
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5422:	f240 414c 	movw	r1, #1100	; 0x44c
   b5426:	486a      	ldr	r0, [pc, #424]	; (b55d0 <_Z15getPositionDatav+0x1e8>)
   b5428:	ed9f 8a6b 	vldr	s16, [pc, #428]	; b55d8 <_Z15getPositionDatav+0x1f0>
   b542c:	f008 f8a3 	bl	bd576 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b5430:	ee07 0a90 	vmov	s15, r0
   b5434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5438:	4b68      	ldr	r3, [pc, #416]	; (b55dc <_Z15getPositionDatav+0x1f4>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b543a:	4865      	ldr	r0, [pc, #404]	; (b55d0 <_Z15getPositionDatav+0x1e8>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b543c:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5440:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;
   b5444:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5448:	f008 f872 	bl	bd530 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b544c:	ee07 0a90 	vmov	s15, r0
   b5450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5454:	4b62      	ldr	r3, [pc, #392]	; (b55e0 <_Z15getPositionDatav+0x1f8>)
            GPSAvail = true;
   b5456:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;
   b5458:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b545c:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();      // get X Y and Z data at once
   b5460:	4860      	ldr	r0, [pc, #384]	; (b55e4 <_Z15getPositionDatav+0x1fc>)
   b5462:	f002 ff81 	bl	b8368 <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);
   b5466:	485f      	ldr	r0, [pc, #380]	; (b55e4 <_Z15getPositionDatav+0x1fc>)
   b5468:	a911      	add	r1, sp, #68	; 0x44
   b546a:	f002 ffc3 	bl	b83f4 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b546e:	4604      	mov	r4, r0
   b5470:	b140      	cbz	r0, b5484 <_Z15getPositionDatav+0x9c>
   b5472:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
   b5476:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
   b547a:	f7ff fd49 	bl	b4f10 <_Z18readCompassHeadingff>
   b547e:	4b5a      	ldr	r3, [pc, #360]	; (b55e8 <_Z15getPositionDatav+0x200>)
   b5480:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b5484:	4e59      	ldr	r6, [pc, #356]	; (b55ec <_Z15getPositionDatav+0x204>)
   b5486:	ed9f 6a5a 	vldr	s12, [pc, #360]	; b55f0 <_Z15getPositionDatav+0x208>
   b548a:	ed96 7a00 	vldr	s14, [r6]
   b548e:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b5492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5496:	f2c0 808b 	blt.w	b55b0 <_Z15getPositionDatav+0x1c8>
   b549a:	eddf 6a56 	vldr	s13, [pc, #344]	; b55f4 <_Z15getPositionDatav+0x20c>
   b549e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b54a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54a6:	f200 8083 	bhi.w	b55b0 <_Z15getPositionDatav+0x1c8>
   b54aa:	4f53      	ldr	r7, [pc, #332]	; (b55f8 <_Z15getPositionDatav+0x210>)
   b54ac:	edd7 7a00 	vldr	s15, [r7]
   b54b0:	eef4 7ac6 	vcmpe.f32	s15, s12
   b54b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54b8:	db7a      	blt.n	b55b0 <_Z15getPositionDatav+0x1c8>
   b54ba:	eef4 7ae6 	vcmpe.f32	s15, s13
   b54be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54c2:	d875      	bhi.n	b55b0 <_Z15getPositionDatav+0x1c8>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b54c4:	f8df 9114 	ldr.w	r9, [pc, #276]	; b55dc <_Z15getPositionDatav+0x1f4>
   b54c8:	4d45      	ldr	r5, [pc, #276]	; (b55e0 <_Z15getPositionDatav+0x1f8>)
   b54ca:	edd9 0a00 	vldr	s1, [r9]
   b54ce:	ed95 0a00 	vldr	s0, [r5]
   b54d2:	f8df 8138 	ldr.w	r8, [pc, #312]	; b560c <_Z15getPositionDatav+0x224>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b54d6:	f8df b138 	ldr.w	fp, [pc, #312]	; b5610 <_Z15getPositionDatav+0x228>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b54da:	f8df a138 	ldr.w	sl, [pc, #312]	; b5614 <_Z15getPositionDatav+0x22c>
  { return __builtin_atan2f(__y, __x); }
   b54de:	ee77 0a60 	vsub.f32	s1, s14, s1
   b54e2:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b54e6:	f00d f87b 	bl	c25e0 <atan2f>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b54ea:	eddf 7a44 	vldr	s15, [pc, #272]	; b55fc <_Z15getPositionDatav+0x214>
   b54ee:	ee60 7a27 	vmul.f32	s15, s0, s15
   b54f2:	ee17 0a90 	vmov	r0, s15
   b54f6:	f00e fccb 	bl	c3e90 <__aeabi_f2d>
   b54fa:	a331      	add	r3, pc, #196	; (adr r3, b55c0 <_Z15getPositionDatav+0x1d8>)
   b54fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5500:	f00e fe48 	bl	c4194 <__aeabi_ddiv>
   b5504:	f00f f814 	bl	c4530 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5508:	edd5 1a00 	vldr	s3, [r5]
   b550c:	ed97 1a00 	vldr	s2, [r7]
   b5510:	edd9 0a00 	vldr	s1, [r9]
   b5514:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b5518:	f8c8 0000 	str.w	r0, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b551c:	f7ff fe58 	bl	b51d0 <_Z12calcDistanceffff>
            targetDelta = calcDelta(compassHeading, travelHeading);
   b5520:	4b31      	ldr	r3, [pc, #196]	; (b55e8 <_Z15getPositionDatav+0x200>)
   b5522:	edd8 0a00 	vldr	s1, [r8]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);
   b5526:	ed8b 0a00 	vstr	s0, [fp]
            targetDelta = calcDelta(compassHeading, travelHeading);
   b552a:	ed93 0a00 	vldr	s0, [r3]
   b552e:	f7ff feeb 	bl	b5308 <_Z9calcDeltaff>
   b5532:	ed8a 0a00 	vstr	s0, [sl]
   b5536:	f008 fc05 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();
   b553a:	4b31      	ldr	r3, [pc, #196]	; (b5600 <_Z15getPositionDatav+0x218>)
   b553c:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;
   b553e:	b114      	cbz	r4, b5546 <_Z15getPositionDatav+0x15e>
   b5540:	4b30      	ldr	r3, [pc, #192]	; (b5604 <_Z15getPositionDatav+0x21c>)
   b5542:	2201      	movs	r2, #1
   b5544:	701a      	strb	r2, [r3, #0]
            sprintf(tempbuf,"Lat: %f Lon %f TLat: %f TLon: %f, Compass: %f, Travel hd: %f, T Delta: %f, Dist: %f", latitude, longitude, targetLat, targetLon, compassHeading, travelHeading, targetDelta, travelDistance);
   b5546:	f8d9 0000 	ldr.w	r0, [r9]
   b554a:	f00e fca1 	bl	c3e90 <__aeabi_f2d>
   b554e:	4602      	mov	r2, r0
   b5550:	460b      	mov	r3, r1
   b5552:	f8db 0000 	ldr.w	r0, [fp]
   b5556:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   b555a:	f00e fc99 	bl	c3e90 <__aeabi_f2d>
   b555e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5562:	f8da 0000 	ldr.w	r0, [sl]
   b5566:	f00e fc93 	bl	c3e90 <__aeabi_f2d>
   b556a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b556e:	f8d8 0000 	ldr.w	r0, [r8]
   b5572:	f00e fc8d 	bl	c3e90 <__aeabi_f2d>
   b5576:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b557a:	4b1b      	ldr	r3, [pc, #108]	; (b55e8 <_Z15getPositionDatav+0x200>)
   b557c:	6818      	ldr	r0, [r3, #0]
   b557e:	f00e fc87 	bl	c3e90 <__aeabi_f2d>
   b5582:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5586:	6838      	ldr	r0, [r7, #0]
   b5588:	f00e fc82 	bl	c3e90 <__aeabi_f2d>
   b558c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5590:	6830      	ldr	r0, [r6, #0]
   b5592:	f00e fc7d 	bl	c3e90 <__aeabi_f2d>
   b5596:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b559a:	6828      	ldr	r0, [r5, #0]
   b559c:	f00e fc78 	bl	c3e90 <__aeabi_f2d>
   b55a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b55a4:	e9cd 0100 	strd	r0, r1, [sp]
   b55a8:	4917      	ldr	r1, [pc, #92]	; (b5608 <_Z15getPositionDatav+0x220>)
   b55aa:	a81a      	add	r0, sp, #104	; 0x68
   b55ac:	f008 fed8 	bl	be360 <sprintf>
}
   b55b0:	b04d      	add	sp, #308	; 0x134
   b55b2:	ecbd 8b02 	vpop	{d8}
   b55b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else GPSAvail = false;
   b55ba:	7020      	strb	r0, [r4, #0]
   b55bc:	e750      	b.n	b5460 <_Z15getPositionDatav+0x78>
   b55be:	bf00      	nop
   b55c0:	54442d18 	.word	0x54442d18
   b55c4:	400921fb 	.word	0x400921fb
   b55c8:	2003e0b8 	.word	0x2003e0b8
   b55cc:	2003e5f0 	.word	0x2003e5f0
   b55d0:	2003df34 	.word	0x2003df34
   b55d4:	2003dd6c 	.word	0x2003dd6c
   b55d8:	49742400 	.word	0x49742400
   b55dc:	2003de00 	.word	0x2003de00
   b55e0:	2003dedc 	.word	0x2003dedc
   b55e4:	2003de24 	.word	0x2003de24
   b55e8:	2003ddac 	.word	0x2003ddac
   b55ec:	2003e5d4 	.word	0x2003e5d4
   b55f0:	c2b40000 	.word	0xc2b40000
   b55f4:	42b40000 	.word	0x42b40000
   b55f8:	2003e5d8 	.word	0x2003e5d8
   b55fc:	43340000 	.word	0x43340000
   b5600:	2003ddfc 	.word	0x2003ddfc
   b5604:	2003e5dc 	.word	0x2003e5dc
   b5608:	000c6b3c 	.word	0x000c6b3c
   b560c:	2003e5e4 	.word	0x2003e5e4
   b5610:	2003e5e0 	.word	0x2003e5e0
   b5614:	2003e5d0 	.word	0x2003e5d0

000b5618 <_Z12updateMotorsv>:
void updateMotors(){
   b5618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b561c:	ed2d 8b02 	vpush	{d8}
    if(updateMotorControl){
   b5620:	4b78      	ldr	r3, [pc, #480]	; (b5804 <_Z12updateMotorsv+0x1ec>)
   b5622:	781b      	ldrb	r3, [r3, #0]
   b5624:	2b00      	cmp	r3, #0
   b5626:	d04b      	beq.n	b56c0 <_Z12updateMotorsv+0xa8>
        if(driveMode == 1 || driveMode == 2){       //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5628:	4b77      	ldr	r3, [pc, #476]	; (b5808 <_Z12updateMotorsv+0x1f0>)
   b562a:	4c78      	ldr	r4, [pc, #480]	; (b580c <_Z12updateMotorsv+0x1f4>)
   b562c:	781b      	ldrb	r3, [r3, #0]
   b562e:	4d78      	ldr	r5, [pc, #480]	; (b5810 <_Z12updateMotorsv+0x1f8>)
   b5630:	3b01      	subs	r3, #1
   b5632:	2b01      	cmp	r3, #1
   b5634:	f200 8096 	bhi.w	b5764 <_Z12updateMotorsv+0x14c>
            if(travelDistance < MTR_CUTOFF_RAD){
   b5638:	4b76      	ldr	r3, [pc, #472]	; (b5814 <_Z12updateMotorsv+0x1fc>)
   b563a:	edd3 7a00 	vldr	s15, [r3]
   b563e:	4b76      	ldr	r3, [pc, #472]	; (b5818 <_Z12updateMotorsv+0x200>)
   b5640:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b5644:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b564c:	d53c      	bpl.n	b56c8 <_Z12updateMotorsv+0xb0>
                pointArrived = true;
   b564e:	2201      	movs	r2, #1
   b5650:	701a      	strb	r2, [r3, #0]
                    setLSpeed = 90;
   b5652:	235a      	movs	r3, #90	; 0x5a
   b5654:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5656:	702b      	strb	r3, [r5, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5658:	7823      	ldrb	r3, [r4, #0]
        if(leftMotorSpeed < setLSpeed){
   b565a:	4a70      	ldr	r2, [pc, #448]	; (b581c <_Z12updateMotorsv+0x204>)
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b565c:	3b43      	subs	r3, #67	; 0x43
   b565e:	2b16      	cmp	r3, #22
   b5660:	bf9c      	itt	ls
   b5662:	2343      	movls	r3, #67	; 0x43
   b5664:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b5666:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b5668:	7821      	ldrb	r1, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b566a:	3b43      	subs	r3, #67	; 0x43
   b566c:	2b16      	cmp	r3, #22
   b566e:	bf9c      	itt	ls
   b5670:	2343      	movls	r3, #67	; 0x43
   b5672:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){
   b5674:	7813      	ldrb	r3, [r2, #0]
   b5676:	428b      	cmp	r3, r1
   b5678:	f080 80b2 	bcs.w	b57e0 <_Z12updateMotorsv+0x1c8>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;
   b567c:	1ac8      	subs	r0, r1, r3
   b567e:	2803      	cmp	r0, #3
   b5680:	f340 80b5 	ble.w	b57ee <_Z12updateMotorsv+0x1d6>
   b5684:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b5686:	7013      	strb	r3, [r2, #0]
        if(rightMotorSpeed < setRSpeed){
   b5688:	4c65      	ldr	r4, [pc, #404]	; (b5820 <_Z12updateMotorsv+0x208>)
   b568a:	7829      	ldrb	r1, [r5, #0]
   b568c:	7823      	ldrb	r3, [r4, #0]
   b568e:	428b      	cmp	r3, r1
   b5690:	f080 80af 	bcs.w	b57f2 <_Z12updateMotorsv+0x1da>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD;
   b5694:	1ac8      	subs	r0, r1, r3
   b5696:	2803      	cmp	r0, #3
   b5698:	f340 80b2 	ble.w	b5800 <_Z12updateMotorsv+0x1e8>
   b569c:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b569e:	7023      	strb	r3, [r4, #0]
        if(!stopActive){
   b56a0:	4b60      	ldr	r3, [pc, #384]	; (b5824 <_Z12updateMotorsv+0x20c>)
   b56a2:	781b      	ldrb	r3, [r3, #0]
   b56a4:	b94b      	cbnz	r3, b56ba <_Z12updateMotorsv+0xa2>
            ESCL.write(leftMotorSpeed);
   b56a6:	7811      	ldrb	r1, [r2, #0]
   b56a8:	485f      	ldr	r0, [pc, #380]	; (b5828 <_Z12updateMotorsv+0x210>)
   b56aa:	f00b ffb2 	bl	c1612 <_ZN5Servo5writeEi>
            ESCR.write(180-rightMotorSpeed);
   b56ae:	7821      	ldrb	r1, [r4, #0]
   b56b0:	485e      	ldr	r0, [pc, #376]	; (b582c <_Z12updateMotorsv+0x214>)
   b56b2:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b56b6:	f00b ffac 	bl	c1612 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b56ba:	4a52      	ldr	r2, [pc, #328]	; (b5804 <_Z12updateMotorsv+0x1ec>)
   b56bc:	2300      	movs	r3, #0
   b56be:	7013      	strb	r3, [r2, #0]
}
   b56c0:	ecbd 8b02 	vpop	{d8}
   b56c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){
   b56c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b56cc:	eef4 7ac7 	vcmpe.f32	s15, s14
   b56d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b56d4:	d55d      	bpl.n	b5792 <_Z12updateMotorsv+0x17a>
                if(pointArrived){
   b56d6:	f893 b000 	ldrb.w	fp, [r3]
   b56da:	f1bb 0f00 	cmp.w	fp, #0
   b56de:	d1b8      	bne.n	b5652 <_Z12updateMotorsv+0x3a>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);
   b56e0:	4b53      	ldr	r3, [pc, #332]	; (b5830 <_Z12updateMotorsv+0x218>)
   b56e2:	eddf 8a54 	vldr	s17, [pc, #336]	; b5834 <_Z12updateMotorsv+0x21c>
   b56e6:	ed93 8a00 	vldr	s16, [r3]
   b56ea:	4b53      	ldr	r3, [pc, #332]	; (b5838 <_Z12updateMotorsv+0x220>)
   b56ec:	eee8 8a28 	vfma.f32	s17, s16, s17
   b56f0:	ed93 7a00 	vldr	s14, [r3]
   b56f4:	ee17 0a90 	vmov	r0, s15
   b56f8:	ee28 8a07 	vmul.f32	s16, s16, s14
   b56fc:	f00e fbc8 	bl	c3e90 <__aeabi_f2d>
   b5700:	4b4e      	ldr	r3, [pc, #312]	; (b583c <_Z12updateMotorsv+0x224>)
   b5702:	2200      	movs	r2, #0
   b5704:	f00e fc1c 	bl	c3f40 <__aeabi_dmul>
   b5708:	ee78 7a88 	vadd.f32	s15, s17, s16
   b570c:	4606      	mov	r6, r0
   b570e:	460f      	mov	r7, r1
   b5710:	ee17 0a90 	vmov	r0, s15
   b5714:	f00e fbbc 	bl	c3e90 <__aeabi_f2d>
   b5718:	4632      	mov	r2, r6
   b571a:	463b      	mov	r3, r7
   b571c:	f00e fc10 	bl	c3f40 <__aeabi_dmul>
   b5720:	f00e febe 	bl	c44a0 <__aeabi_d2iz>
   b5724:	4682      	mov	sl, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5726:	ee18 0a90 	vmov	r0, s17
   b572a:	f00e fbb1 	bl	c3e90 <__aeabi_f2d>
   b572e:	4680      	mov	r8, r0
   b5730:	ee18 0a10 	vmov	r0, s16
   b5734:	4689      	mov	r9, r1
   b5736:	f00e fbab 	bl	c3e90 <__aeabi_f2d>
   b573a:	4632      	mov	r2, r6
   b573c:	463b      	mov	r3, r7
   b573e:	f00e fbff 	bl	c3f40 <__aeabi_dmul>
   b5742:	4602      	mov	r2, r0
   b5744:	460b      	mov	r3, r1
   b5746:	4640      	mov	r0, r8
   b5748:	4649      	mov	r1, r9
   b574a:	f00e fa41 	bl	c3bd0 <__aeabi_dsub>
   b574e:	f00e fea7 	bl	c44a0 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;
   b5752:	f1ba 0f00 	cmp.w	sl, #0
   b5756:	da12      	bge.n	b577e <_Z12updateMotorsv+0x166>
   b5758:	f884 b000 	strb.w	fp, [r4]
                    if(Rset < 0) setRSpeed = 0;
   b575c:	2800      	cmp	r0, #0
   b575e:	da14      	bge.n	b578a <_Z12updateMotorsv+0x172>
   b5760:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b5762:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b5764:	7823      	ldrb	r3, [r4, #0]
   b5766:	3b5b      	subs	r3, #91	; 0x5b
   b5768:	2b20      	cmp	r3, #32
   b576a:	bf9c      	itt	ls
   b576c:	237b      	movls	r3, #123	; 0x7b
   b576e:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5770:	782b      	ldrb	r3, [r5, #0]
   b5772:	3b5b      	subs	r3, #91	; 0x5b
   b5774:	2b20      	cmp	r3, #32
   b5776:	f63f af6f 	bhi.w	b5658 <_Z12updateMotorsv+0x40>
   b577a:	237b      	movs	r3, #123	; 0x7b
   b577c:	e76b      	b.n	b5656 <_Z12updateMotorsv+0x3e>
                    else if(Lset > 180) setLSpeed = 180;
   b577e:	f1ba 0fb4 	cmp.w	sl, #180	; 0xb4
   b5782:	bfc4      	itt	gt
   b5784:	23b4      	movgt	r3, #180	; 0xb4
   b5786:	7023      	strbgt	r3, [r4, #0]
   b5788:	e7e8      	b.n	b575c <_Z12updateMotorsv+0x144>
                    else if(Rset > 180) setRSpeed = 180;
   b578a:	28b4      	cmp	r0, #180	; 0xb4
   b578c:	ddea      	ble.n	b5764 <_Z12updateMotorsv+0x14c>
   b578e:	23b4      	movs	r3, #180	; 0xb4
   b5790:	e7e7      	b.n	b5762 <_Z12updateMotorsv+0x14a>
                pointArrived = false;
   b5792:	2100      	movs	r1, #0
   b5794:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b5796:	4b26      	ldr	r3, [pc, #152]	; (b5830 <_Z12updateMotorsv+0x218>)
   b5798:	eddf 7a26 	vldr	s15, [pc, #152]	; b5834 <_Z12updateMotorsv+0x21c>
   b579c:	edd3 6a00 	vldr	s13, [r3]
   b57a0:	4b25      	ldr	r3, [pc, #148]	; (b5838 <_Z12updateMotorsv+0x220>)
   b57a2:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b57a6:	ed93 6a00 	vldr	s12, [r3]
   b57aa:	eeb0 7a67 	vmov.f32	s14, s15
   b57ae:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b57b2:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b57b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b57ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate);
   b57be:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;
   b57c2:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate);
   b57c4:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;
   b57c8:	da05      	bge.n	b57d6 <_Z12updateMotorsv+0x1be>
   b57ca:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b57cc:	2b00      	cmp	r3, #0
   b57ce:	dbc7      	blt.n	b5760 <_Z12updateMotorsv+0x148>
                else if(Rset > 180) setRSpeed = 180;
   b57d0:	2bb4      	cmp	r3, #180	; 0xb4
   b57d2:	dcdc      	bgt.n	b578e <_Z12updateMotorsv+0x176>
   b57d4:	e7c5      	b.n	b5762 <_Z12updateMotorsv+0x14a>
                else if(Lset > 180) setLSpeed = 180;
   b57d6:	2ab4      	cmp	r2, #180	; 0xb4
   b57d8:	bfc8      	it	gt
   b57da:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b57dc:	7022      	strb	r2, [r4, #0]
   b57de:	e7f5      	b.n	b57cc <_Z12updateMotorsv+0x1b4>
        else if(leftMotorSpeed > setLSpeed){
   b57e0:	f67f af52 	bls.w	b5688 <_Z12updateMotorsv+0x70>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;
   b57e4:	1a58      	subs	r0, r3, r1
   b57e6:	2803      	cmp	r0, #3
   b57e8:	dd01      	ble.n	b57ee <_Z12updateMotorsv+0x1d6>
   b57ea:	3b03      	subs	r3, #3
   b57ec:	e74b      	b.n	b5686 <_Z12updateMotorsv+0x6e>
            else leftMotorSpeed = setLSpeed;
   b57ee:	7011      	strb	r1, [r2, #0]
   b57f0:	e74a      	b.n	b5688 <_Z12updateMotorsv+0x70>
        else if(rightMotorSpeed > setRSpeed){
   b57f2:	f67f af55 	bls.w	b56a0 <_Z12updateMotorsv+0x88>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD;
   b57f6:	1a58      	subs	r0, r3, r1
   b57f8:	2803      	cmp	r0, #3
   b57fa:	dd01      	ble.n	b5800 <_Z12updateMotorsv+0x1e8>
   b57fc:	3b03      	subs	r3, #3
   b57fe:	e74e      	b.n	b569e <_Z12updateMotorsv+0x86>
            else rightMotorSpeed = setRSpeed;
   b5800:	7021      	strb	r1, [r4, #0]
   b5802:	e74d      	b.n	b56a0 <_Z12updateMotorsv+0x88>
   b5804:	2003e5f0 	.word	0x2003e5f0
   b5808:	2003ddb5 	.word	0x2003ddb5
   b580c:	2003e564 	.word	0x2003e564
   b5810:	2003e565 	.word	0x2003e565
   b5814:	2003e5e0 	.word	0x2003e5e0
   b5818:	2003e0b5 	.word	0x2003e0b5
   b581c:	2003de20 	.word	0x2003de20
   b5820:	2003e0bd 	.word	0x2003e0bd
   b5824:	2003e5cd 	.word	0x2003e5cd
   b5828:	2003dd4c 	.word	0x2003dd4c
   b582c:	2003dd5c 	.word	0x2003dd5c
   b5830:	2003db24 	.word	0x2003db24
   b5834:	42b40000 	.word	0x42b40000
   b5838:	2003e5d0 	.word	0x2003e5d0
   b583c:	3fd00000 	.word	0x3fd00000

000b5840 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b5844:	4d60      	ldr	r5, [pc, #384]	; (b59c8 <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   b5846:	b097      	sub	sp, #92	; 0x5c
   b5848:	f008 fa7c 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b584c:	682b      	ldr	r3, [r5, #0]
   b584e:	4283      	cmp	r3, r0
   b5850:	f080 8139 	bcs.w	b5ac6 <_Z13sensorHandlerv+0x286>
   b5854:	4e5d      	ldr	r6, [pc, #372]	; (b59cc <_Z13sensorHandlerv+0x18c>)
   b5856:	7833      	ldrb	r3, [r6, #0]
   b5858:	2b00      	cmp	r3, #0
   b585a:	f000 8134 	beq.w	b5ac6 <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){
   b585e:	f00c fc93 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5862:	2301      	movs	r3, #1
   b5864:	2214      	movs	r2, #20
   b5866:	2163      	movs	r1, #99	; 0x63
   b5868:	f00a fb43 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
   b586c:	b1e8      	cbz	r0, b58aa <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b586e:	f00c fc8b 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5872:	6803      	ldr	r3, [r0, #0]
   b5874:	695b      	ldr	r3, [r3, #20]
   b5876:	4798      	blx	r3
            int c = 0;
   b5878:	ac11      	add	r4, sp, #68	; 0x44
   b587a:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b587c:	f00c fc84 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5880:	6803      	ldr	r3, [r0, #0]
   b5882:	691b      	ldr	r3, [r3, #16]
   b5884:	4798      	blx	r3
   b5886:	b138      	cbz	r0, b5898 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();
   b5888:	f00c fc7e 	bl	c2188 <_Z19__fetch_global_Wirev>
   b588c:	6803      	ldr	r3, [r0, #0]
   b588e:	695b      	ldr	r3, [r3, #20]
   b5890:	4798      	blx	r3
   b5892:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5896:	e7f1      	b.n	b587c <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);
   b5898:	4638      	mov	r0, r7
   b589a:	f00e febd 	bl	c4618 <atof>
   b589e:	ec51 0b10 	vmov	r0, r1, d0
   b58a2:	f00e fe45 	bl	c4530 <__aeabi_d2f>
   b58a6:	4b4a      	ldr	r3, [pc, #296]	; (b59d0 <_Z13sensorHandlerv+0x190>)
   b58a8:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b58aa:	f00c fc6d 	bl	c2188 <_Z19__fetch_global_Wirev>
   b58ae:	2301      	movs	r3, #1
   b58b0:	2214      	movs	r2, #20
   b58b2:	2164      	movs	r1, #100	; 0x64
   b58b4:	f00a fb1d 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
   b58b8:	b1e8      	cbz	r0, b58f6 <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b58ba:	f00c fc65 	bl	c2188 <_Z19__fetch_global_Wirev>
   b58be:	6803      	ldr	r3, [r0, #0]
   b58c0:	695b      	ldr	r3, [r3, #20]
   b58c2:	4798      	blx	r3
            int c = 0;
   b58c4:	ac11      	add	r4, sp, #68	; 0x44
   b58c6:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b58c8:	f00c fc5e 	bl	c2188 <_Z19__fetch_global_Wirev>
   b58cc:	6803      	ldr	r3, [r0, #0]
   b58ce:	691b      	ldr	r3, [r3, #16]
   b58d0:	4798      	blx	r3
   b58d2:	b138      	cbz	r0, b58e4 <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b58d4:	f00c fc58 	bl	c2188 <_Z19__fetch_global_Wirev>
   b58d8:	6803      	ldr	r3, [r0, #0]
   b58da:	695b      	ldr	r3, [r3, #20]
   b58dc:	4798      	blx	r3
   b58de:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b58e2:	e7f1      	b.n	b58c8 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b58e4:	4638      	mov	r0, r7
   b58e6:	f00e fe97 	bl	c4618 <atof>
   b58ea:	ec51 0b10 	vmov	r0, r1, d0
   b58ee:	f00e fe1f 	bl	c4530 <__aeabi_d2f>
   b58f2:	4b38      	ldr	r3, [pc, #224]	; (b59d4 <_Z13sensorHandlerv+0x194>)
   b58f4:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b58f6:	f00c fc47 	bl	c2188 <_Z19__fetch_global_Wirev>
   b58fa:	2301      	movs	r3, #1
   b58fc:	2214      	movs	r2, #20
   b58fe:	2165      	movs	r1, #101	; 0x65
   b5900:	f00a faf7 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
   b5904:	b1e8      	cbz	r0, b5942 <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5906:	f00c fc3f 	bl	c2188 <_Z19__fetch_global_Wirev>
   b590a:	6803      	ldr	r3, [r0, #0]
   b590c:	695b      	ldr	r3, [r3, #20]
   b590e:	4798      	blx	r3
            int c = 0;
   b5910:	ac11      	add	r4, sp, #68	; 0x44
   b5912:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5914:	f00c fc38 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5918:	6803      	ldr	r3, [r0, #0]
   b591a:	691b      	ldr	r3, [r3, #16]
   b591c:	4798      	blx	r3
   b591e:	b138      	cbz	r0, b5930 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b5920:	f00c fc32 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5924:	6803      	ldr	r3, [r0, #0]
   b5926:	695b      	ldr	r3, [r3, #20]
   b5928:	4798      	blx	r3
   b592a:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b592e:	e7f1      	b.n	b5914 <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b5930:	4638      	mov	r0, r7
   b5932:	f00e fe71 	bl	c4618 <atof>
   b5936:	ec51 0b10 	vmov	r0, r1, d0
   b593a:	f00e fdf9 	bl	c4530 <__aeabi_d2f>
   b593e:	4b26      	ldr	r3, [pc, #152]	; (b59d8 <_Z13sensorHandlerv+0x198>)
   b5940:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b5942:	f00c fc21 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5946:	2301      	movs	r3, #1
   b5948:	2214      	movs	r2, #20
   b594a:	2166      	movs	r1, #102	; 0x66
   b594c:	f00a fad1 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
   b5950:	b1e8      	cbz	r0, b598e <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5952:	f00c fc19 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5956:	6803      	ldr	r3, [r0, #0]
   b5958:	695b      	ldr	r3, [r3, #20]
   b595a:	4798      	blx	r3
            int c = 0;
   b595c:	ac11      	add	r4, sp, #68	; 0x44
   b595e:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5960:	f00c fc12 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5964:	6803      	ldr	r3, [r0, #0]
   b5966:	691b      	ldr	r3, [r3, #16]
   b5968:	4798      	blx	r3
   b596a:	b138      	cbz	r0, b597c <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b596c:	f00c fc0c 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5970:	6803      	ldr	r3, [r0, #0]
   b5972:	695b      	ldr	r3, [r3, #20]
   b5974:	4798      	blx	r3
   b5976:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b597a:	e7f1      	b.n	b5960 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b597c:	4638      	mov	r0, r7
   b597e:	f00e fe4b 	bl	c4618 <atof>
   b5982:	ec51 0b10 	vmov	r0, r1, d0
   b5986:	f00e fdd3 	bl	c4530 <__aeabi_d2f>
   b598a:	4b14      	ldr	r3, [pc, #80]	; (b59dc <_Z13sensorHandlerv+0x19c>)
   b598c:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   b598e:	f00c fbfb 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5992:	2301      	movs	r3, #1
   b5994:	2214      	movs	r2, #20
   b5996:	2161      	movs	r1, #97	; 0x61
   b5998:	f00a faab 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
   b599c:	b348      	cbz	r0, b59f2 <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b599e:	f00c fbf3 	bl	c2188 <_Z19__fetch_global_Wirev>
   b59a2:	6803      	ldr	r3, [r0, #0]
   b59a4:	695b      	ldr	r3, [r3, #20]
   b59a6:	4798      	blx	r3
            int c = 0;
   b59a8:	ac11      	add	r4, sp, #68	; 0x44
   b59aa:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b59ac:	f00c fbec 	bl	c2188 <_Z19__fetch_global_Wirev>
   b59b0:	6803      	ldr	r3, [r0, #0]
   b59b2:	691b      	ldr	r3, [r3, #16]
   b59b4:	4798      	blx	r3
   b59b6:	b198      	cbz	r0, b59e0 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   b59b8:	f00c fbe6 	bl	c2188 <_Z19__fetch_global_Wirev>
   b59bc:	6803      	ldr	r3, [r0, #0]
   b59be:	695b      	ldr	r3, [r3, #20]
   b59c0:	4798      	blx	r3
   b59c2:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b59c6:	e7f1      	b.n	b59ac <_Z13sensorHandlerv+0x16c>
   b59c8:	2003ddb0 	.word	0x2003ddb0
   b59cc:	2003ddb4 	.word	0x2003ddb4
   b59d0:	2003e558 	.word	0x2003e558
   b59d4:	2003e554 	.word	0x2003e554
   b59d8:	2003e54c 	.word	0x2003e54c
   b59dc:	2003e55c 	.word	0x2003e55c
            senseDO = atof(addrSense);
   b59e0:	4638      	mov	r0, r7
   b59e2:	f00e fe19 	bl	c4618 <atof>
   b59e6:	ec51 0b10 	vmov	r0, r1, d0
   b59ea:	f00e fda1 	bl	c4530 <__aeabi_d2f>
   b59ee:	4b7a      	ldr	r3, [pc, #488]	; (b5bd8 <_Z13sensorHandlerv+0x398>)
   b59f0:	6018      	str	r0, [r3, #0]
        dataWait = false;
   b59f2:	2300      	movs	r3, #0
   b59f4:	7033      	strb	r3, [r6, #0]
        if(logSensors){
   b59f6:	4b79      	ldr	r3, [pc, #484]	; (b5bdc <_Z13sensorHandlerv+0x39c>)
   b59f8:	781b      	ldrb	r3, [r3, #0]
   b59fa:	2b00      	cmp	r3, #0
   b59fc:	d063      	beq.n	b5ac6 <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b59fe:	f00c f97b 	bl	c1cf8 <_ZN9TimeClass5monthEv>
   b5a02:	900f      	str	r0, [sp, #60]	; 0x3c
   b5a04:	f00c f96c 	bl	c1ce0 <_ZN9TimeClass3dayEv>
   b5a08:	4604      	mov	r4, r0
   b5a0a:	f00c f97d 	bl	c1d08 <_ZN9TimeClass4yearEv>
   b5a0e:	4606      	mov	r6, r0
   b5a10:	f00c f942 	bl	c1c98 <_ZN9TimeClass4hourEv>
   b5a14:	4607      	mov	r7, r0
   b5a16:	f00c f94b 	bl	c1cb0 <_ZN9TimeClass6minuteEv>
   b5a1a:	4680      	mov	r8, r0
   b5a1c:	f00c f954 	bl	c1cc8 <_ZN9TimeClass6secondEv>
   b5a20:	9400      	str	r4, [sp, #0]
   b5a22:	4c6f      	ldr	r4, [pc, #444]	; (b5be0 <_Z13sensorHandlerv+0x3a0>)
   b5a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b5a26:	4a6f      	ldr	r2, [pc, #444]	; (b5be4 <_Z13sensorHandlerv+0x3a4>)
   b5a28:	f8df 91d8 	ldr.w	r9, [pc, #472]	; b5c04 <_Z13sensorHandlerv+0x3c4>
   b5a2c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b5c08 <_Z13sensorHandlerv+0x3c8>
   b5a30:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b5bd8 <_Z13sensorHandlerv+0x398>
   b5a34:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b5a38:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b5a3c:	2110      	movs	r1, #16
   b5a3e:	a811      	add	r0, sp, #68	; 0x44
   b5a40:	f008 fc9e 	bl	be380 <snprintf>
            if(!myFile.isOpen()){
   b5a44:	7c22      	ldrb	r2, [r4, #16]
   b5a46:	4b68      	ldr	r3, [pc, #416]	; (b5be8 <_Z13sensorHandlerv+0x3a8>)
   b5a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b5c0c <_Z13sensorHandlerv+0x3cc>
   b5a4c:	4f67      	ldr	r7, [pc, #412]	; (b5bec <_Z13sensorHandlerv+0x3ac>)
   b5a4e:	4e68      	ldr	r6, [pc, #416]	; (b5bf0 <_Z13sensorHandlerv+0x3b0>)
   b5a50:	2a00      	cmp	r2, #0
   b5a52:	f040 8094 	bne.w	b5b7e <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5a56:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a5a:	4966      	ldr	r1, [pc, #408]	; (b5bf4 <_Z13sensorHandlerv+0x3b4>)
   b5a5c:	f104 0010 	add.w	r0, r4, #16
   b5a60:	f7fe fe24 	bl	b46ac <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5a64:	4b60      	ldr	r3, [pc, #384]	; (b5be8 <_Z13sensorHandlerv+0x3a8>)
   b5a66:	6818      	ldr	r0, [r3, #0]
   b5a68:	f00e fa12 	bl	c3e90 <__aeabi_f2d>
   b5a6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5a70:	f8db 0000 	ldr.w	r0, [fp]
   b5a74:	f00e fa0c 	bl	c3e90 <__aeabi_f2d>
   b5a78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5a7c:	f8da 0000 	ldr.w	r0, [sl]
   b5a80:	f00e fa06 	bl	c3e90 <__aeabi_f2d>
   b5a84:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5a88:	f8d9 0000 	ldr.w	r0, [r9]
   b5a8c:	f00e fa00 	bl	c3e90 <__aeabi_f2d>
   b5a90:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5a94:	f8d8 0000 	ldr.w	r0, [r8]
   b5a98:	f00e f9fa 	bl	c3e90 <__aeabi_f2d>
   b5a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5aa0:	6838      	ldr	r0, [r7, #0]
   b5aa2:	f00e f9f5 	bl	c3e90 <__aeabi_f2d>
   b5aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5aaa:	6830      	ldr	r0, [r6, #0]
   b5aac:	f00e f9f0 	bl	c3e90 <__aeabi_f2d>
   b5ab0:	aa11      	add	r2, sp, #68	; 0x44
   b5ab2:	e9cd 0100 	strd	r0, r1, [sp]
   b5ab6:	4950      	ldr	r1, [pc, #320]	; (b5bf8 <_Z13sensorHandlerv+0x3b8>)
   b5ab8:	4620      	mov	r0, r4
   b5aba:	f7fe fc87 	bl	b43cc <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b5abe:	f104 0010 	add.w	r0, r4, #16
   b5ac2:	f001 facf 	bl	b7064 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b5ac6:	4c4d      	ldr	r4, [pc, #308]	; (b5bfc <_Z13sensorHandlerv+0x3bc>)
   b5ac8:	f008 f93c 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b5acc:	6823      	ldr	r3, [r4, #0]
   b5ace:	4283      	cmp	r3, r0
   b5ad0:	d252      	bcs.n	b5b78 <_Z13sensorHandlerv+0x338>
   b5ad2:	f008 f937 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b5ad6:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b5ada:	6020      	str	r0, [r4, #0]
   b5adc:	f008 f932 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b5ae0:	f200 3039 	addw	r0, r0, #825	; 0x339
   b5ae4:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b5ae6:	f00c fb4f 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5aea:	2163      	movs	r1, #99	; 0x63
   b5aec:	f00a fa1a 	bl	bff24 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5af0:	f00c fb4a 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5af4:	2172      	movs	r1, #114	; 0x72
   b5af6:	f7fe fbdf 	bl	b42b8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5afa:	f00c fb45 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5afe:	f00a fa18 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b5b02:	f00c fb41 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b06:	2164      	movs	r1, #100	; 0x64
   b5b08:	f00a fa0c 	bl	bff24 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5b0c:	f00c fb3c 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b10:	2172      	movs	r1, #114	; 0x72
   b5b12:	f7fe fbd1 	bl	b42b8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5b16:	f00c fb37 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b1a:	f00a fa0a 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b5b1e:	f00c fb33 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b22:	2165      	movs	r1, #101	; 0x65
   b5b24:	f00a f9fe 	bl	bff24 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5b28:	f00c fb2e 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b2c:	2172      	movs	r1, #114	; 0x72
   b5b2e:	f7fe fbc3 	bl	b42b8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5b32:	f00c fb29 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b36:	f00a f9fc 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b5b3a:	f00c fb25 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b3e:	2166      	movs	r1, #102	; 0x66
   b5b40:	f00a f9f0 	bl	bff24 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5b44:	f00c fb20 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b48:	2172      	movs	r1, #114	; 0x72
   b5b4a:	f7fe fbb5 	bl	b42b8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5b4e:	f00c fb1b 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b52:	f00a f9ee 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);                                              //call the circuit by its ID number.
   b5b56:	f00c fb17 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b5a:	2161      	movs	r1, #97	; 0x61
   b5b5c:	f00a f9e2 	bl	bff24 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5b60:	f00c fb12 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b64:	2172      	movs	r1, #114	; 0x72
   b5b66:	f7fe fba7 	bl	b42b8 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   b5b6a:	f00c fb0d 	bl	c2188 <_Z19__fetch_global_Wirev>
   b5b6e:	f00a f9e0 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b5b72:	4b23      	ldr	r3, [pc, #140]	; (b5c00 <_Z13sensorHandlerv+0x3c0>)
   b5b74:	2201      	movs	r2, #1
   b5b76:	701a      	strb	r2, [r3, #0]
}
   b5b78:	b017      	add	sp, #92	; 0x5c
   b5b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5b7e:	6818      	ldr	r0, [r3, #0]
   b5b80:	f00e f986 	bl	c3e90 <__aeabi_f2d>
   b5b84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5b88:	f8db 0000 	ldr.w	r0, [fp]
   b5b8c:	f00e f980 	bl	c3e90 <__aeabi_f2d>
   b5b90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5b94:	f8da 0000 	ldr.w	r0, [sl]
   b5b98:	f00e f97a 	bl	c3e90 <__aeabi_f2d>
   b5b9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5ba0:	f8d9 0000 	ldr.w	r0, [r9]
   b5ba4:	f00e f974 	bl	c3e90 <__aeabi_f2d>
   b5ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5bac:	f8d8 0000 	ldr.w	r0, [r8]
   b5bb0:	f00e f96e 	bl	c3e90 <__aeabi_f2d>
   b5bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5bb8:	6838      	ldr	r0, [r7, #0]
   b5bba:	f00e f969 	bl	c3e90 <__aeabi_f2d>
   b5bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5bc2:	6830      	ldr	r0, [r6, #0]
   b5bc4:	f00e f964 	bl	c3e90 <__aeabi_f2d>
   b5bc8:	aa11      	add	r2, sp, #68	; 0x44
   b5bca:	e9cd 0100 	strd	r0, r1, [sp]
   b5bce:	490a      	ldr	r1, [pc, #40]	; (b5bf8 <_Z13sensorHandlerv+0x3b8>)
   b5bd0:	4620      	mov	r0, r4
   b5bd2:	f7fe fbfb 	bl	b43cc <_ZN5Print8printlnfEPKcz>
   b5bd6:	e776      	b.n	b5ac6 <_Z13sensorHandlerv+0x286>
   b5bd8:	2003e550 	.word	0x2003e550
   b5bdc:	2003ded9 	.word	0x2003ded9
   b5be0:	2003df00 	.word	0x2003df00
   b5be4:	000c6b90 	.word	0x000c6b90
   b5be8:	2003e54c 	.word	0x2003e54c
   b5bec:	2003dedc 	.word	0x2003dedc
   b5bf0:	2003de00 	.word	0x2003de00
   b5bf4:	2003ddb6 	.word	0x2003ddb6
   b5bf8:	000c6ba9 	.word	0x000c6ba9
   b5bfc:	2003e560 	.word	0x2003e560
   b5c00:	2003ddb4 	.word	0x2003ddb4
   b5c04:	2003e558 	.word	0x2003e558
   b5c08:	2003e554 	.word	0x2003e554
   b5c0c:	2003e55c 	.word	0x2003e55c

000b5c10 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5c14:	4e3c      	ldr	r6, [pc, #240]	; (b5d08 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5c16:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5d1c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b5c1a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5d20 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b5c1e:	b089      	sub	sp, #36	; 0x24
   b5c20:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5c22:	f00c faf1 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b5c26:	6803      	ldr	r3, [r0, #0]
   b5c28:	691b      	ldr	r3, [r3, #16]
   b5c2a:	4798      	blx	r3
   b5c2c:	2800      	cmp	r0, #0
   b5c2e:	d066      	beq.n	b5cfe <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5c30:	f00c faea 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b5c34:	220a      	movs	r2, #10
   b5c36:	4601      	mov	r1, r0
   b5c38:	4638      	mov	r0, r7
   b5c3a:	f00b fe8d 	bl	c1958 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b5c3e:	68bb      	ldr	r3, [r7, #8]
   b5c40:	3307      	adds	r3, #7
   b5c42:	f023 0307 	bic.w	r3, r3, #7
    }
   b5c46:	466d      	mov	r5, sp
        char buffer[data.length()];
   b5c48:	ebad 0d03 	sub.w	sp, sp, r3
   b5c4c:	46ea      	mov	sl, sp
   b5c4e:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5c50:	68b9      	ldr	r1, [r7, #8]
   b5c52:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b5c56:	458b      	cmp	fp, r1
   b5c58:	f103 0401 	add.w	r4, r3, #1
   b5c5c:	d207      	bcs.n	b5c6e <_Z11XBeeHandlerv+0x5e>
   b5c5e:	4659      	mov	r1, fp
   b5c60:	4638      	mov	r0, r7
   b5c62:	f00b ff71 	bl	c1b48 <_ZNK6String6charAtEj>
   b5c66:	4623      	mov	r3, r4
   b5c68:	f80a 000b 	strb.w	r0, [sl, fp]
   b5c6c:	e7f0      	b.n	b5c50 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b5c6e:	2901      	cmp	r1, #1
   b5c70:	d90a      	bls.n	b5c88 <_Z11XBeeHandlerv+0x78>
   b5c72:	3901      	subs	r1, #1
   b5c74:	4638      	mov	r0, r7
   b5c76:	f00b ff67 	bl	c1b48 <_ZNK6String6charAtEj>
   b5c7a:	280d      	cmp	r0, #13
   b5c7c:	bf01      	itttt	eq
   b5c7e:	68bb      	ldreq	r3, [r7, #8]
   b5c80:	4453      	addeq	r3, sl
   b5c82:	2200      	moveq	r2, #0
   b5c84:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b5c88:	f00c f912 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5c8c:	4631      	mov	r1, r6
   b5c8e:	f00b fc4e 	bl	c152e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5c92:	f00c f90d 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5c96:	6839      	ldr	r1, [r7, #0]
   b5c98:	f00b fc49 	bl	c152e <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);
   b5c9c:	2201      	movs	r2, #1
   b5c9e:	2102      	movs	r1, #2
   b5ca0:	4650      	mov	r0, sl
   b5ca2:	f7fe fdbd 	bl	b4820 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5ca6:	f89a 3000 	ldrb.w	r3, [sl]
   b5caa:	3b42      	subs	r3, #66	; 0x42
   b5cac:	2b01      	cmp	r3, #1
   b5cae:	d803      	bhi.n	b5cb8 <_Z11XBeeHandlerv+0xa8>
   b5cb0:	f008 f848 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b5cb4:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5cb8:	f899 3000 	ldrb.w	r3, [r9]
   b5cbc:	b1d3      	cbz	r3, b5cf4 <_Z11XBeeHandlerv+0xe4>
   b5cbe:	4813      	ldr	r0, [pc, #76]	; (b5d0c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5cc0:	7c03      	ldrb	r3, [r0, #16]
   b5cc2:	b92b      	cbnz	r3, b5cd0 <_Z11XBeeHandlerv+0xc0>
   b5cc4:	4912      	ldr	r1, [pc, #72]	; (b5d10 <_Z11XBeeHandlerv+0x100>)
   b5cc6:	f244 2202 	movw	r2, #16898	; 0x4202
   b5cca:	3010      	adds	r0, #16
   b5ccc:	f7fe fcee 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5cd0:	4639      	mov	r1, r7
   b5cd2:	f107 0010 	add.w	r0, r7, #16
   b5cd6:	f00b feed 	bl	c1ab4 <_ZN6StringC1ERKS_>
   b5cda:	490e      	ldr	r1, [pc, #56]	; (b5d14 <_Z11XBeeHandlerv+0x104>)
   b5cdc:	480b      	ldr	r0, [pc, #44]	; (b5d0c <_Z11XBeeHandlerv+0xfc>)
   b5cde:	f107 0210 	add.w	r2, r7, #16
   b5ce2:	f7fe fb73 	bl	b43cc <_ZN5Print8printlnfEPKcz>
   b5ce6:	f107 0010 	add.w	r0, r7, #16
   b5cea:	f00b fe4d 	bl	c1988 <_ZN6StringD1Ev>
            logFile.close();
   b5cee:	480a      	ldr	r0, [pc, #40]	; (b5d18 <_Z11XBeeHandlerv+0x108>)
   b5cf0:	f001 f9b8 	bl	b7064 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5cf4:	4638      	mov	r0, r7
   b5cf6:	f00b fe47 	bl	c1988 <_ZN6StringD1Ev>
   b5cfa:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b5cfc:	e791      	b.n	b5c22 <_Z11XBeeHandlerv+0x12>
}
   b5cfe:	3724      	adds	r7, #36	; 0x24
   b5d00:	46bd      	mov	sp, r7
   b5d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d06:	bf00      	nop
   b5d08:	000c6bc1 	.word	0x000c6bc1
   b5d0c:	2003de80 	.word	0x2003de80
   b5d10:	2003ddd4 	.word	0x2003ddd4
   b5d14:	000c6bd3 	.word	0x000c6bd3
   b5d18:	2003de90 	.word	0x2003de90
   b5d1c:	2003dd84 	.word	0x2003dd84
   b5d20:	2003ded8 	.word	0x2003ded8

000b5d24 <_Z13dataOffloaderv>:
void dataOffloader(){
   b5d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d28:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b5d2a:	f00c f8c1 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5d2e:	4963      	ldr	r1, [pc, #396]	; (b5ebc <_Z13dataOffloaderv+0x198>)
   b5d30:	f00b fbfd 	bl	c152e <_ZN5Print7printlnEPKc>
    myFile.close();
   b5d34:	4862      	ldr	r0, [pc, #392]	; (b5ec0 <_Z13dataOffloaderv+0x19c>)
   b5d36:	f001 f995 	bl	b7064 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b5d3a:	4962      	ldr	r1, [pc, #392]	; (b5ec4 <_Z13dataOffloaderv+0x1a0>)
   b5d3c:	4862      	ldr	r0, [pc, #392]	; (b5ec8 <_Z13dataOffloaderv+0x1a4>)
   b5d3e:	2200      	movs	r2, #0
   b5d40:	f7fe fcb4 	bl	b46ac <_ZN7FatFile4openEPKci>
   b5d44:	b948      	cbnz	r0, b5d5a <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b5d46:	4b61      	ldr	r3, [pc, #388]	; (b5ecc <_Z13dataOffloaderv+0x1a8>)
   b5d48:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5d4a:	f00c f8b1 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5d4e:	4960      	ldr	r1, [pc, #384]	; (b5ed0 <_Z13dataOffloaderv+0x1ac>)
}
   b5d50:	b02d      	add	sp, #180	; 0xb4
   b5d52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5d56:	f00b bbea 	b.w	c152e <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5d5a:	f00c f8a9 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5d5e:	495d      	ldr	r1, [pc, #372]	; (b5ed4 <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b5d60:	4d5d      	ldr	r5, [pc, #372]	; (b5ed8 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b5d62:	f00b fbe4 	bl	c152e <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5d66:	f008 febb 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d6a:	f008 ff17 	bl	beb9c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5d6e:	4604      	mov	r4, r0
   b5d70:	b948      	cbnz	r0, b5d86 <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b5d72:	f008 feb5 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d76:	4622      	mov	r2, r4
   b5d78:	4629      	mov	r1, r5
   b5d7a:	f008 ff62 	bl	bec42 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5d7e:	200a      	movs	r0, #10
   b5d80:	f008 fb4a 	bl	be418 <delay>
    while(!BLE.connected()){
   b5d84:	e7ef      	b.n	b5d66 <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b5d86:	f00c f893 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5d8a:	4954      	ldr	r1, [pc, #336]	; (b5edc <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5d8c:	4f4e      	ldr	r7, [pc, #312]	; (b5ec8 <_Z13dataOffloaderv+0x1a4>)
   b5d8e:	4d4c      	ldr	r5, [pc, #304]	; (b5ec0 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5d90:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5f00 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b5d94:	f00b fbcb 	bl	c152e <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5d98:	2200      	movs	r2, #0
   b5d9a:	4639      	mov	r1, r7
   b5d9c:	4628      	mov	r0, r5
   b5d9e:	f001 f8ee 	bl	b6f7e <_ZN7FatFile8openNextEPS_i>
   b5da2:	b1f8      	cbz	r0, b5de4 <_Z13dataOffloaderv+0xc0>
   b5da4:	f008 fe9c 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5da8:	f008 fef8 	bl	beb9c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5dac:	b1d0      	cbz	r0, b5de4 <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5dae:	221e      	movs	r2, #30
   b5db0:	a901      	add	r1, sp, #4
   b5db2:	4628      	mov	r0, r5
   b5db4:	f001 faaa 	bl	b730c <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5db8:	f00c f87a 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5dbc:	4641      	mov	r1, r8
   b5dbe:	aa01      	add	r2, sp, #4
   b5dc0:	f7fe fb04 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5dc4:	a801      	add	r0, sp, #4
   b5dc6:	f00e fcfa 	bl	c47be <strlen>
   b5dca:	ab01      	add	r3, sp, #4
   b5dcc:	3804      	subs	r0, #4
   b5dce:	4418      	add	r0, r3
   b5dd0:	f00e fcfe 	bl	c47d0 <strlwr>
   b5dd4:	4942      	ldr	r1, [pc, #264]	; (b5ee0 <_Z13dataOffloaderv+0x1bc>)
   b5dd6:	f00e fd54 	bl	c4882 <strstr>
   b5dda:	b9d8      	cbnz	r0, b5e14 <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b5ddc:	4628      	mov	r0, r5
   b5dde:	f001 f941 	bl	b7064 <_ZN7FatFile5closeEv>
   b5de2:	e7d9      	b.n	b5d98 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b5de4:	4838      	ldr	r0, [pc, #224]	; (b5ec8 <_Z13dataOffloaderv+0x1a4>)
   b5de6:	f001 f93d 	bl	b7064 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5dea:	2226      	movs	r2, #38	; 0x26
   b5dec:	2100      	movs	r1, #0
   b5dee:	a809      	add	r0, sp, #36	; 0x24
   b5df0:	f00e fc5a 	bl	c46a8 <memset>
    strcpy(fileCode,"filedone");
   b5df4:	493b      	ldr	r1, [pc, #236]	; (b5ee4 <_Z13dataOffloaderv+0x1c0>)
   b5df6:	a809      	add	r0, sp, #36	; 0x24
   b5df8:	f00e fcbc 	bl	c4774 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5dfc:	2300      	movs	r3, #0
   b5dfe:	2226      	movs	r2, #38	; 0x26
   b5e00:	a909      	add	r1, sp, #36	; 0x24
   b5e02:	4839      	ldr	r0, [pc, #228]	; (b5ee8 <_Z13dataOffloaderv+0x1c4>)
   b5e04:	f008 fd5c 	bl	be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5e08:	4b30      	ldr	r3, [pc, #192]	; (b5ecc <_Z13dataOffloaderv+0x1a8>)
   b5e0a:	2200      	movs	r2, #0
   b5e0c:	701a      	strb	r2, [r3, #0]
}
   b5e0e:	b02d      	add	sp, #180	; 0xb4
   b5e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5e14:	2226      	movs	r2, #38	; 0x26
   b5e16:	2100      	movs	r1, #0
   b5e18:	a809      	add	r0, sp, #36	; 0x24
   b5e1a:	f00e fc45 	bl	c46a8 <memset>
            strcpy(fileCode,"filename");
   b5e1e:	4933      	ldr	r1, [pc, #204]	; (b5eec <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b5e20:	4e33      	ldr	r6, [pc, #204]	; (b5ef0 <_Z13dataOffloaderv+0x1cc>)
   b5e22:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b5ee8 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b5e26:	a809      	add	r0, sp, #36	; 0x24
   b5e28:	f00e fca4 	bl	c4774 <strcpy>
            strcat(fileCode,namebuf);
   b5e2c:	a901      	add	r1, sp, #4
   b5e2e:	a809      	add	r0, sp, #36	; 0x24
   b5e30:	f00e fc70 	bl	c4714 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5e34:	f00c f83c 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5e38:	492e      	ldr	r1, [pc, #184]	; (b5ef4 <_Z13dataOffloaderv+0x1d0>)
   b5e3a:	aa09      	add	r2, sp, #36	; 0x24
   b5e3c:	f7fe fac6 	bl	b43cc <_ZN5Print8printlnfEPKcz>
   b5e40:	2300      	movs	r3, #0
   b5e42:	2226      	movs	r2, #38	; 0x26
   b5e44:	a909      	add	r1, sp, #36	; 0x24
   b5e46:	4828      	ldr	r0, [pc, #160]	; (b5ee8 <_Z13dataOffloaderv+0x1c4>)
   b5e48:	f008 fd3a 	bl	be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5e4c:	f00c f830 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b5e50:	4929      	ldr	r1, [pc, #164]	; (b5ef8 <_Z13dataOffloaderv+0x1d4>)
   b5e52:	aa01      	add	r2, sp, #4
   b5e54:	f7fe faba 	bl	b43cc <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5e58:	2096      	movs	r0, #150	; 0x96
   b5e5a:	f008 fadd 	bl	be418 <delay>
            noInterrupts();
   b5e5e:	f00a f897 	bl	bff90 <_Z12noInterruptsv>
            while(myFile.available()){
   b5e62:	4630      	mov	r0, r6
   b5e64:	f7fe f93b 	bl	b40de <_ZN4File9availableEv>
   b5e68:	4604      	mov	r4, r0
   b5e6a:	b188      	cbz	r0, b5e90 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5e6c:	2264      	movs	r2, #100	; 0x64
   b5e6e:	2100      	movs	r1, #0
   b5e70:	a813      	add	r0, sp, #76	; 0x4c
   b5e72:	f00e fc19 	bl	c46a8 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5e76:	aa13      	add	r2, sp, #76	; 0x4c
   b5e78:	2364      	movs	r3, #100	; 0x64
   b5e7a:	210d      	movs	r1, #13
   b5e7c:	4630      	mov	r0, r6
   b5e7e:	f00b fd53 	bl	c1928 <_ZN6Stream14readBytesUntilEcPcj>
   b5e82:	2300      	movs	r3, #0
   b5e84:	2264      	movs	r2, #100	; 0x64
   b5e86:	a913      	add	r1, sp, #76	; 0x4c
   b5e88:	4648      	mov	r0, r9
   b5e8a:	f008 fd19 	bl	be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5e8e:	e7e8      	b.n	b5e62 <_Z13dataOffloaderv+0x13e>
            interrupts();
   b5e90:	f00a f880 	bl	bff94 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5e94:	2226      	movs	r2, #38	; 0x26
   b5e96:	4621      	mov	r1, r4
   b5e98:	a809      	add	r0, sp, #36	; 0x24
   b5e9a:	f00e fc05 	bl	c46a8 <memset>
            strcpy(fileCode,"filecomp");
   b5e9e:	4917      	ldr	r1, [pc, #92]	; (b5efc <_Z13dataOffloaderv+0x1d8>)
   b5ea0:	a809      	add	r0, sp, #36	; 0x24
   b5ea2:	f00e fc67 	bl	c4774 <strcpy>
   b5ea6:	4623      	mov	r3, r4
   b5ea8:	2226      	movs	r2, #38	; 0x26
   b5eaa:	a909      	add	r1, sp, #36	; 0x24
   b5eac:	480e      	ldr	r0, [pc, #56]	; (b5ee8 <_Z13dataOffloaderv+0x1c4>)
   b5eae:	f008 fd07 	bl	be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5eb2:	2096      	movs	r0, #150	; 0x96
   b5eb4:	f008 fab0 	bl	be418 <delay>
   b5eb8:	e790      	b.n	b5ddc <_Z13dataOffloaderv+0xb8>
   b5eba:	bf00      	nop
   b5ebc:	000c6bf4 	.word	0x000c6bf4
   b5ec0:	2003df10 	.word	0x2003df10
   b5ec4:	000c6c11 	.word	0x000c6c11
   b5ec8:	2003de5c 	.word	0x2003de5c
   b5ecc:	2003e0b4 	.word	0x2003e0b4
   b5ed0:	000c6c13 	.word	0x000c6c13
   b5ed4:	000c6c40 	.word	0x000c6c40
   b5ed8:	2003dd8c 	.word	0x2003dd8c
   b5edc:	000c6c60 	.word	0x000c6c60
   b5ee0:	000c6c9e 	.word	0x000c6c9e
   b5ee4:	000c6ca3 	.word	0x000c6ca3
   b5ee8:	2003e0ac 	.word	0x2003e0ac
   b5eec:	000c6cac 	.word	0x000c6cac
   b5ef0:	2003df00 	.word	0x2003df00
   b5ef4:	000c6cb5 	.word	0x000c6cb5
   b5ef8:	000c6cc8 	.word	0x000c6cc8
   b5efc:	000c6cf0 	.word	0x000c6cf0
   b5f00:	000c6c75 	.word	0x000c6c75

000b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5f04:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5f06:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5f08:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5f0a:	b17c      	cbz	r4, b5f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5f0c:	6863      	ldr	r3, [r4, #4]
   b5f0e:	3b01      	subs	r3, #1
   b5f10:	6063      	str	r3, [r4, #4]
   b5f12:	b95b      	cbnz	r3, b5f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5f14:	6823      	ldr	r3, [r4, #0]
   b5f16:	4620      	mov	r0, r4
   b5f18:	689b      	ldr	r3, [r3, #8]
   b5f1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5f1c:	68a3      	ldr	r3, [r4, #8]
   b5f1e:	3b01      	subs	r3, #1
   b5f20:	60a3      	str	r3, [r4, #8]
   b5f22:	b91b      	cbnz	r3, b5f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5f24:	6823      	ldr	r3, [r4, #0]
   b5f26:	4620      	mov	r0, r4
   b5f28:	68db      	ldr	r3, [r3, #12]
   b5f2a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5f2c:	4628      	mov	r0, r5
   b5f2e:	bd38      	pop	{r3, r4, r5, pc}

000b5f30 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f34:	b084      	sub	sp, #16
   b5f36:	af02      	add	r7, sp, #8
   b5f38:	4680      	mov	r8, r0
   b5f3a:	4691      	mov	r9, r2
   b5f3c:	461e      	mov	r6, r3
   b5f3e:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5f40:	f00e fc3d 	bl	c47be <strlen>
   b5f44:	3009      	adds	r0, #9
   b5f46:	f020 0107 	bic.w	r1, r0, #7
   b5f4a:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5f4e:	4640      	mov	r0, r8
   b5f50:	f00e fc35 	bl	c47be <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5f54:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5f58:	4925      	ldr	r1, [pc, #148]	; (b5ff0 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5f5a:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5f5c:	4603      	mov	r3, r0
   b5f5e:	4642      	mov	r2, r8
   b5f60:	4620      	mov	r0, r4
   b5f62:	f008 f9fd 	bl	be360 <sprintf>
    if(sendLTE || sendMode == 4){
   b5f66:	f1ba 0f00 	cmp.w	sl, #0
   b5f6a:	d101      	bne.n	b5f70 <_Z8sendDataPKchbbb+0x40>
   b5f6c:	2d04      	cmp	r5, #4
   b5f6e:	d10c      	bne.n	b5f8a <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5f70:	4b20      	ldr	r3, [pc, #128]	; (b5ff4 <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5f72:	4921      	ldr	r1, [pc, #132]	; (b5ff8 <_Z8sendDataPKchbbb+0xc8>)
   b5f74:	781b      	ldrb	r3, [r3, #0]
   b5f76:	f88d 3000 	strb.w	r3, [sp]
   b5f7a:	4638      	mov	r0, r7
   b5f7c:	233c      	movs	r3, #60	; 0x3c
   b5f7e:	4622      	mov	r2, r4
   b5f80:	f009 fdae 	bl	bfae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5f84:	1d38      	adds	r0, r7, #4
   b5f86:	f7ff ffbd 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5f8a:	f1b9 0f00 	cmp.w	r9, #0
   b5f8e:	d101      	bne.n	b5f94 <_Z8sendDataPKchbbb+0x64>
   b5f90:	2d01      	cmp	r5, #1
   b5f92:	d121      	bne.n	b5fd8 <_Z8sendDataPKchbbb+0xa8>
   b5f94:	f008 fda4 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f98:	f008 fe00 	bl	beb9c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5f9c:	b1e0      	cbz	r0, b5fd8 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5f9e:	4620      	mov	r0, r4
   b5fa0:	f00e fc0d 	bl	c47be <strlen>
   b5fa4:	3007      	adds	r0, #7
   b5fa6:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5faa:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5fac:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	f00e fc04 	bl	c47be <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5fb6:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5fba:	4602      	mov	r2, r0
   b5fbc:	4621      	mov	r1, r4
   b5fbe:	4648      	mov	r0, r9
   b5fc0:	f00e fb4a 	bl	c4658 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	f00e fbfa 	bl	c47be <strlen>
   b5fca:	2300      	movs	r3, #0
   b5fcc:	4602      	mov	r2, r0
   b5fce:	4649      	mov	r1, r9
   b5fd0:	480a      	ldr	r0, [pc, #40]	; (b5ffc <_Z8sendDataPKchbbb+0xcc>)
   b5fd2:	f008 fc75 	bl	be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5fd6:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5fd8:	b90e      	cbnz	r6, b5fde <_Z8sendDataPKchbbb+0xae>
   b5fda:	2d02      	cmp	r5, #2
   b5fdc:	d104      	bne.n	b5fe8 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5fde:	f00c f913 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b5fe2:	4621      	mov	r1, r4
   b5fe4:	f00b faa3 	bl	c152e <_ZN5Print7printlnEPKc>
}
   b5fe8:	3708      	adds	r7, #8
   b5fea:	46bd      	mov	sp, r7
   b5fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5ff0:	000c6cf9 	.word	0x000c6cf9
   b5ff4:	2003dd88 	.word	0x2003dd88
   b5ff8:	000c6d00 	.word	0x000c6d00
   b5ffc:	2003e5e8 	.word	0x2003e5e8

000b6000 <_Z16sendResponseDatav>:
void sendResponseData(){
   b6000:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b6002:	4d2a      	ldr	r5, [pc, #168]	; (b60ac <_Z16sendResponseDatav+0xac>)
   b6004:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b6006:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b6008:	2b00      	cmp	r3, #0
   b600a:	d04d      	beq.n	b60a8 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);
   b600c:	2241      	movs	r2, #65	; 0x41
   b600e:	2100      	movs	r1, #0
   b6010:	a80b      	add	r0, sp, #44	; 0x2c
   b6012:	f00e fb49 	bl	c46a8 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b6016:	4b26      	ldr	r3, [pc, #152]	; (b60b0 <_Z16sendResponseDatav+0xb0>)
   b6018:	ed9f 7a26 	vldr	s14, [pc, #152]	; b60b4 <_Z16sendResponseDatav+0xb4>
   b601c:	edd3 7a00 	vldr	s15, [r3]
   b6020:	4b25      	ldr	r3, [pc, #148]	; (b60b8 <_Z16sendResponseDatav+0xb8>)
   b6022:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);
   b6026:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b6028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b602c:	edcd 7a08 	vstr	s15, [sp, #32]
   b6030:	edd3 7a00 	vldr	s15, [r3]
   b6034:	4b21      	ldr	r3, [pc, #132]	; (b60bc <_Z16sendResponseDatav+0xbc>)
   b6036:	ee67 7a87 	vmul.f32	s15, s15, s14
   b603a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b603e:	edcd 7a07 	vstr	s15, [sp, #28]
   b6042:	edd3 7a00 	vldr	s15, [r3]
   b6046:	4b1e      	ldr	r3, [pc, #120]	; (b60c0 <_Z16sendResponseDatav+0xc0>)
   b6048:	ee67 7a87 	vmul.f32	s15, s15, s14
   b604c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b6050:	edcd 7a06 	vstr	s15, [sp, #24]
   b6054:	edd3 7a00 	vldr	s15, [r3]
   b6058:	4b1a      	ldr	r3, [pc, #104]	; (b60c4 <_Z16sendResponseDatav+0xc4>)
   b605a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b605e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b6062:	edcd 7a05 	vstr	s15, [sp, #20]
   b6066:	edd3 7a00 	vldr	s15, [r3]
   b606a:	4b17      	ldr	r3, [pc, #92]	; (b60c8 <_Z16sendResponseDatav+0xc8>)
   b606c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b6074:	edcd 7a04 	vstr	s15, [sp, #16]
   b6078:	6818      	ldr	r0, [r3, #0]
   b607a:	f00d ff09 	bl	c3e90 <__aeabi_f2d>
   b607e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6082:	4b12      	ldr	r3, [pc, #72]	; (b60cc <_Z16sendResponseDatav+0xcc>)
   b6084:	6818      	ldr	r0, [r3, #0]
   b6086:	f00d ff03 	bl	c3e90 <__aeabi_f2d>
   b608a:	2201      	movs	r2, #1
   b608c:	e9cd 0100 	strd	r0, r1, [sp]
   b6090:	490f      	ldr	r1, [pc, #60]	; (b60d0 <_Z16sendResponseDatav+0xd0>)
   b6092:	a80b      	add	r0, sp, #44	; 0x2c
   b6094:	f008 f964 	bl	be360 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b6098:	7829      	ldrb	r1, [r5, #0]
   b609a:	9400      	str	r4, [sp, #0]
   b609c:	4623      	mov	r3, r4
   b609e:	4622      	mov	r2, r4
   b60a0:	a80b      	add	r0, sp, #44	; 0x2c
   b60a2:	f7ff ff45 	bl	b5f30 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b60a6:	702c      	strb	r4, [r5, #0]
}
   b60a8:	b01d      	add	sp, #116	; 0x74
   b60aa:	bd30      	pop	{r4, r5, pc}
   b60ac:	2003e0bc 	.word	0x2003e0bc
   b60b0:	2003e55c 	.word	0x2003e55c
   b60b4:	447a0000 	.word	0x447a0000
   b60b8:	2003e554 	.word	0x2003e554
   b60bc:	2003e54c 	.word	0x2003e54c
   b60c0:	2003e558 	.word	0x2003e558
   b60c4:	2003e550 	.word	0x2003e550
   b60c8:	2003dedc 	.word	0x2003dedc
   b60cc:	2003de00 	.word	0x2003de00
   b60d0:	000c6d08 	.word	0x000c6d08

000b60d4 <_Z12statusUpdatev>:
void statusUpdate(){
   b60d4:	b530      	push	{r4, r5, lr}
    if(statusReady){
   b60d6:	4d22      	ldr	r5, [pc, #136]	; (b6160 <_Z12statusUpdatev+0x8c>)
   b60d8:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b60da:	b093      	sub	sp, #76	; 0x4c
    if(statusReady){
   b60dc:	2b00      	cmp	r3, #0
   b60de:	d035      	beq.n	b614c <_Z12statusUpdatev+0x78>
        Serial.println("Sending a status update!");
   b60e0:	f00b fee6 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b60e4:	491f      	ldr	r1, [pc, #124]	; (b6164 <_Z12statusUpdatev+0x90>)
   b60e6:	4c20      	ldr	r4, [pc, #128]	; (b6168 <_Z12statusUpdatev+0x94>)
   b60e8:	f00b fa21 	bl	c152e <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b60ec:	4a1f      	ldr	r2, [pc, #124]	; (b616c <_Z12statusUpdatev+0x98>)
   b60ee:	4b20      	ldr	r3, [pc, #128]	; (b6170 <_Z12statusUpdatev+0x9c>)
   b60f0:	6810      	ldr	r0, [r2, #0]
   b60f2:	781b      	ldrb	r3, [r3, #0]
   b60f4:	9307      	str	r3, [sp, #28]
   b60f6:	f00d fecb 	bl	c3e90 <__aeabi_f2d>
   b60fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b60fe:	4a1d      	ldr	r2, [pc, #116]	; (b6174 <_Z12statusUpdatev+0xa0>)
   b6100:	6810      	ldr	r0, [r2, #0]
   b6102:	f00d fec5 	bl	c3e90 <__aeabi_f2d>
   b6106:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b610a:	4a1b      	ldr	r2, [pc, #108]	; (b6178 <_Z12statusUpdatev+0xa4>)
   b610c:	9b07      	ldr	r3, [sp, #28]
   b610e:	8812      	ldrh	r2, [r2, #0]
   b6110:	9200      	str	r2, [sp, #0]
   b6112:	491a      	ldr	r1, [pc, #104]	; (b617c <_Z12statusUpdatev+0xa8>)
   b6114:	2201      	movs	r2, #1
   b6116:	a808      	add	r0, sp, #32
   b6118:	f008 f922 	bl	be360 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b611c:	4b18      	ldr	r3, [pc, #96]	; (b6180 <_Z12statusUpdatev+0xac>)
   b611e:	781b      	ldrb	r3, [r3, #0]
   b6120:	b9b3      	cbnz	r3, b6150 <_Z12statusUpdatev+0x7c>
   b6122:	4b18      	ldr	r3, [pc, #96]	; (b6184 <_Z12statusUpdatev+0xb0>)
   b6124:	781b      	ldrb	r3, [r3, #0]
   b6126:	b99b      	cbnz	r3, b6150 <_Z12statusUpdatev+0x7c>
   b6128:	8823      	ldrh	r3, [r4, #0]
   b612a:	b1a3      	cbz	r3, b6156 <_Z12statusUpdatev+0x82>
   b612c:	f013 0303 	ands.w	r3, r3, #3
   b6130:	d111      	bne.n	b6156 <_Z12statusUpdatev+0x82>
            sendData(updateStr,0,false,false,true);
   b6132:	2201      	movs	r2, #1
   b6134:	9200      	str	r2, [sp, #0]
   b6136:	4619      	mov	r1, r3
   b6138:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b613a:	a808      	add	r0, sp, #32
   b613c:	f7ff fef8 	bl	b5f30 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b6140:	8823      	ldrh	r3, [r4, #0]
   b6142:	b10b      	cbz	r3, b6148 <_Z12statusUpdatev+0x74>
   b6144:	3b01      	subs	r3, #1
   b6146:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b6148:	2300      	movs	r3, #0
   b614a:	702b      	strb	r3, [r5, #0]
}
   b614c:	b013      	add	sp, #76	; 0x4c
   b614e:	bd30      	pop	{r4, r5, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b6150:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b6154:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b6156:	2100      	movs	r1, #0
   b6158:	2301      	movs	r3, #1
   b615a:	9100      	str	r1, [sp, #0]
   b615c:	461a      	mov	r2, r3
   b615e:	e7ec      	b.n	b613a <_Z12statusUpdatev+0x66>
   b6160:	2003e5cc 	.word	0x2003e5cc
   b6164:	000c6d2c 	.word	0x000c6d2c
   b6168:	2003dd6e 	.word	0x2003dd6e
   b616c:	2003dedc 	.word	0x2003dedc
   b6170:	2003dd9c 	.word	0x2003dd9c
   b6174:	2003de00 	.word	0x2003de00
   b6178:	2003e5ac 	.word	0x2003e5ac
   b617c:	000c6d45 	.word	0x000c6d45
   b6180:	2003dd38 	.word	0x2003dd38
   b6184:	2003dd80 	.word	0x2003dd80

000b6188 <loop>:
void loop(){
   b6188:	b508      	push	{r3, lr}
    getPositionData();
   b618a:	f7ff f92d 	bl	b53e8 <_Z15getPositionDatav>
    readPowerSys();
   b618e:	f7fe fe37 	bl	b4e00 <_Z12readPowerSysv>
    sensorHandler();
   b6192:	f7ff fb55 	bl	b5840 <_Z13sensorHandlerv>
    XBeeHandler();
   b6196:	f7ff fd3b 	bl	b5c10 <_Z11XBeeHandlerv>
    statusUpdate();
   b619a:	f7ff ff9b 	bl	b60d4 <_Z12statusUpdatev>
    updateMotors();
   b619e:	f7ff fa3b 	bl	b5618 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b61a2:	4b06      	ldr	r3, [pc, #24]	; (b61bc <loop+0x34>)
   b61a4:	781b      	ldrb	r3, [r3, #0]
   b61a6:	b10b      	cbz	r3, b61ac <loop+0x24>
   b61a8:	f7ff fdbc 	bl	b5d24 <_Z13dataOffloaderv>
    sendResponseData();
   b61ac:	f7ff ff28 	bl	b6000 <_Z16sendResponseDatav>
}
   b61b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);
   b61b4:	200a      	movs	r0, #10
   b61b6:	f008 b92f 	b.w	be418 <delay>
   b61ba:	bf00      	nop
   b61bc:	2003e0b4 	.word	0x2003e0b4

000b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b61c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b61c2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b61c6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b61c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b61ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b61ce:	42ae      	cmp	r6, r5
   b61d0:	d004      	beq.n	b61dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b61d2:	4628      	mov	r0, r5
   b61d4:	f00b fbd8 	bl	c1988 <_ZN6StringD1Ev>
   b61d8:	3514      	adds	r5, #20
   b61da:	e7f8      	b.n	b61ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b61dc:	6820      	ldr	r0, [r4, #0]
   b61de:	f008 f8af 	bl	be340 <free>
    AllocatorT::free(data_);
}
   b61e2:	4620      	mov	r0, r4
   b61e4:	bd70      	pop	{r4, r5, r6, pc}

000b61e6 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b61e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61e8:	4616      	mov	r6, r2
   b61ea:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b61ec:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b61ee:	e9c0 2200 	strd	r2, r2, [r0]
   b61f2:	4604      	mov	r4, r0
   b61f4:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b61f6:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b61f8:	4619      	mov	r1, r3
   b61fa:	a804      	add	r0, sp, #16
   b61fc:	f008 fb22 	bl	be844 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b6200:	9914      	ldr	r1, [sp, #80]	; 0x50
   b6202:	4638      	mov	r0, r7
   b6204:	f008 fb1e 	bl	be844 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6208:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b620a:	9302      	str	r3, [sp, #8]
   b620c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b620e:	4620      	mov	r0, r4
   b6210:	e9cd 7300 	strd	r7, r3, [sp]
   b6214:	4632      	mov	r2, r6
   b6216:	ab04      	add	r3, sp, #16
   b6218:	4629      	mov	r1, r5
   b621a:	f009 f889 	bl	bf330 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b621e:	4620      	mov	r0, r4
   b6220:	b00f      	add	sp, #60	; 0x3c
   b6222:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6224 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6224:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6226:	4c0b      	ldr	r4, [pc, #44]	; (b6254 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6228:	7821      	ldrb	r1, [r4, #0]
   b622a:	f3bf 8f5b 	dmb	ish
   b622e:	f011 0101 	ands.w	r1, r1, #1
   b6232:	d10b      	bne.n	b624c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6234:	4620      	mov	r0, r4
   b6236:	9101      	str	r1, [sp, #4]
   b6238:	f7fd ff42 	bl	b40c0 <__cxa_guard_acquire>
   b623c:	9901      	ldr	r1, [sp, #4]
   b623e:	b128      	cbz	r0, b624c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6240:	4805      	ldr	r0, [pc, #20]	; (b6258 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6242:	f00b fa54 	bl	c16ee <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6246:	4620      	mov	r0, r4
   b6248:	f7fd ff3f 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b624c:	4802      	ldr	r0, [pc, #8]	; (b6258 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b624e:	b002      	add	sp, #8
   b6250:	bd10      	pop	{r4, pc}
   b6252:	bf00      	nop
   b6254:	2003dd2c 	.word	0x2003dd2c
   b6258:	2003dd30 	.word	0x2003dd30

000b625c <_Z8setupSPIv>:
void setupSPI(){
   b625c:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b625e:	f7ff ffe1 	bl	b6224 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6262:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6266:	2100      	movs	r1, #0
   b6268:	f00b fa5f 	bl	c172a <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b626c:	f7ff ffda 	bl	b6224 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b6270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6274:	4901      	ldr	r1, [pc, #4]	; (b627c <_Z8setupSPIv+0x20>)
   b6276:	2201      	movs	r2, #1
   b6278:	f00b baf6 	b.w	c1868 <_ZN8SPIClass13setClockSpeedEjj>
   b627c:	000f4240 	.word	0x000f4240

000b6280 <setup>:
void setup(){
   b6280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b6284:	48c9      	ldr	r0, [pc, #804]	; (b65ac <setup+0x32c>)
    leftMotorSpeed = setLSpeed = 90;
   b6286:	4fca      	ldr	r7, [pc, #808]	; (b65b0 <setup+0x330>)
   b6288:	7c03      	ldrb	r3, [r0, #16]
    rightMotorSpeed = setRSpeed = 90;
   b628a:	4eca      	ldr	r6, [pc, #808]	; (b65b4 <setup+0x334>)
   b628c:	f003 0303 	and.w	r3, r3, #3
   b6290:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b6294:	b095      	sub	sp, #84	; 0x54
   b6296:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b6298:	2200      	movs	r2, #0
   b629a:	2101      	movs	r1, #1
   b629c:	3004      	adds	r0, #4
   b629e:	f007 ff59 	bl	be154 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b62a2:	2101      	movs	r1, #1
   b62a4:	2002      	movs	r0, #2
   b62a6:	f00b ff03 	bl	c20b0 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b62aa:	2100      	movs	r1, #0
   b62ac:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);
   b62ae:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);
   b62b0:	f00b ff0f 	bl	c20d2 <digitalWrite>
    pinMode(PWR_BUT, INPUT_PULLDOWN);
   b62b4:	2103      	movs	r1, #3
   b62b6:	2012      	movs	r0, #18
   b62b8:	f00b fefa 	bl	c20b0 <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);
   b62bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b62c0:	4622      	mov	r2, r4
   b62c2:	49bd      	ldr	r1, [pc, #756]	; (b65b8 <setup+0x338>)
   b62c4:	9400      	str	r4, [sp, #0]
   b62c6:	2012      	movs	r0, #18
   b62c8:	f009 fe38 	bl	bff3c <_Z15attachInterrupttPFvvE13InterruptModeah>
        pinMode(PWR_EN, OUTPUT);
   b62cc:	2101      	movs	r1, #1
   b62ce:	201c      	movs	r0, #28
   b62d0:	f00b feee 	bl	c20b0 <pinMode>
        digitalWrite(PWR_EN,HIGH);
   b62d4:	2101      	movs	r1, #1
   b62d6:	201c      	movs	r0, #28
   b62d8:	f00b fefb 	bl	c20d2 <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b62dc:	4621      	mov	r1, r4
   b62de:	201d      	movs	r0, #29
   b62e0:	f00b fee6 	bl	c20b0 <pinMode>
   b62e4:	f007 fd2e 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;
   b62e8:	4ab4      	ldr	r2, [pc, #720]	; (b65bc <setup+0x33c>)
   b62ea:	235a      	movs	r3, #90	; 0x5a
   b62ec:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;
   b62ee:	4ab4      	ldr	r2, [pc, #720]	; (b65c0 <setup+0x340>)
    leftMotorSpeed = setLSpeed = 90;
   b62f0:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b62f2:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;
   b62f6:	7033      	strb	r3, [r6, #0]
   b62f8:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b62fa:	2106      	movs	r1, #6
   b62fc:	e9cd 4800 	strd	r4, r8, [sp]
   b6300:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6308:	4605      	mov	r5, r0
   b630a:	48ae      	ldr	r0, [pc, #696]	; (b65c4 <setup+0x344>)
   b630c:	f00b f9be 	bl	c168c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6310:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6318:	e9cd 4800 	strd	r4, r8, [sp]
   b631c:	2105      	movs	r1, #5
   b631e:	48aa      	ldr	r0, [pc, #680]	; (b65c8 <setup+0x348>)
    logSensors = true;
   b6320:	f8df 8354 	ldr.w	r8, [pc, #852]	; b6678 <setup+0x3f8>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b6324:	f00b f9b2 	bl	c168c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b6328:	7839      	ldrb	r1, [r7, #0]
   b632a:	48a6      	ldr	r0, [pc, #664]	; (b65c4 <setup+0x344>)
    logMessages = true;
   b632c:	4fa7      	ldr	r7, [pc, #668]	; (b65cc <setup+0x34c>)
    ESCL.write(setLSpeed);
   b632e:	f00b f970 	bl	c1612 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b6332:	7831      	ldrb	r1, [r6, #0]
   b6334:	48a4      	ldr	r0, [pc, #656]	; (b65c8 <setup+0x348>)
    SDAvail = true;
   b6336:	4ea6      	ldr	r6, [pc, #664]	; (b65d0 <setup+0x350>)
    ESCR.write(setRSpeed);
   b6338:	f00b f96b 	bl	c1612 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b633c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b6340:	f008 f86a 	bl	be418 <delay>
    BLE.on();
   b6344:	f008 fbcc 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6348:	f008 fc14 	bl	beb74 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b634c:	f008 fbc8 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6350:	2108      	movs	r1, #8
   b6352:	f008 fc16 	bl	beb82 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b6356:	f00b fdab 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b635a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b635e:	f00b fd97 	bl	c1e90 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b6362:	f00b ff51 	bl	c2208 <_Z22__fetch_global_Serial1v>
   b6366:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b636a:	f00b fd39 	bl	c1de0 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b636e:	f7ff ff75 	bl	b625c <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b6372:	f7fe fcf7 	bl	b4d64 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b6376:	f7fe fd0d 	bl	b4d94 <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b637a:	2301      	movs	r3, #1
   b637c:	4995      	ldr	r1, [pc, #596]	; (b65d4 <setup+0x354>)
   b637e:	4896      	ldr	r0, [pc, #600]	; (b65d8 <setup+0x358>)
   b6380:	4622      	mov	r2, r4
   b6382:	e9cd 4400 	strd	r4, r4, [sp]
   b6386:	f007 ff5b 	bl	be240 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b638a:	4994      	ldr	r1, [pc, #592]	; (b65dc <setup+0x35c>)
   b638c:	4a94      	ldr	r2, [pc, #592]	; (b65e0 <setup+0x360>)
   b638e:	4895      	ldr	r0, [pc, #596]	; (b65e4 <setup+0x364>)
   b6390:	f009 faaf 	bl	bf8f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;
   b6394:	4b94      	ldr	r3, [pc, #592]	; (b65e8 <setup+0x368>)
    SDAvail = true;
   b6396:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;
   b639a:	701c      	strb	r4, [r3, #0]
    SDAvail = true;
   b639c:	f886 9000 	strb.w	r9, [r6]
   b63a0:	f007 fcd0 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b63a4:	4b91      	ldr	r3, [pc, #580]	; (b65ec <setup+0x36c>)
    logSensors = true;
   b63a6:	f888 9000 	strb.w	r9, [r8]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b63aa:	6018      	str	r0, [r3, #0]
   b63ac:	4b90      	ldr	r3, [pc, #576]	; (b65f0 <setup+0x370>)
    logMessages = true;
   b63ae:	f887 9000 	strb.w	r9, [r7]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();
   b63b2:	6018      	str	r0, [r3, #0]
   b63b4:	4b8f      	ldr	r3, [pc, #572]	; (b65f4 <setup+0x374>)
   b63b6:	6018      	str	r0, [r3, #0]
   b63b8:	4b8f      	ldr	r3, [pc, #572]	; (b65f8 <setup+0x378>)
   b63ba:	6018      	str	r0, [r3, #0]
   b63bc:	4b8f      	ldr	r3, [pc, #572]	; (b65fc <setup+0x37c>)
   b63be:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b63c0:	4b8f      	ldr	r3, [pc, #572]	; (b6600 <setup+0x380>)
   b63c2:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b63c4:	4b8f      	ldr	r3, [pc, #572]	; (b6604 <setup+0x384>)
   b63c6:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b63c8:	4b8f      	ldr	r3, [pc, #572]	; (b6608 <setup+0x388>)
   b63ca:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b63cc:	4b8f      	ldr	r3, [pc, #572]	; (b660c <setup+0x38c>)
   b63ce:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b63d0:	4b8f      	ldr	r3, [pc, #572]	; (b6610 <setup+0x390>)
   b63d2:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b63d4:	4b8f      	ldr	r3, [pc, #572]	; (b6614 <setup+0x394>)
   b63d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b63da:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;
   b63dc:	4b8e      	ldr	r3, [pc, #568]	; (b6618 <setup+0x398>)
   b63de:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;
   b63e0:	4b8e      	ldr	r3, [pc, #568]	; (b661c <setup+0x39c>)
   b63e2:	701c      	strb	r4, [r3, #0]
    stopActive = false;
   b63e4:	4b8e      	ldr	r3, [pc, #568]	; (b6620 <setup+0x3a0>)
   b63e6:	701c      	strb	r4, [r3, #0]
    battPercent = 50;
   b63e8:	4b8e      	ldr	r3, [pc, #568]	; (b6624 <setup+0x3a4>)
   b63ea:	2232      	movs	r2, #50	; 0x32
   b63ec:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b63ee:	f008 fb77 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b63f2:	4a8d      	ldr	r2, [pc, #564]	; (b6628 <setup+0x3a8>)
   b63f4:	4601      	mov	r1, r0
   b63f6:	a80f      	add	r0, sp, #60	; 0x3c
   b63f8:	f009 f8c4 	bl	bf584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b63fc:	a80f      	add	r0, sp, #60	; 0x3c
   b63fe:	f008 fc74 	bl	becea <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b6402:	f008 fb6d 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6406:	4a89      	ldr	r2, [pc, #548]	; (b662c <setup+0x3ac>)
   b6408:	4601      	mov	r1, r0
   b640a:	a80f      	add	r0, sp, #60	; 0x3c
   b640c:	f009 f8ba 	bl	bf584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6410:	a80f      	add	r0, sp, #60	; 0x3c
   b6412:	f008 fc6a 	bl	becea <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b6416:	f008 fb63 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b641a:	4a85      	ldr	r2, [pc, #532]	; (b6630 <setup+0x3b0>)
   b641c:	4601      	mov	r1, r0
   b641e:	a80f      	add	r0, sp, #60	; 0x3c
   b6420:	f009 f8b0 	bl	bf584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6424:	a80f      	add	r0, sp, #60	; 0x3c
   b6426:	f008 fc60 	bl	becea <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);
   b642a:	f008 fb59 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b642e:	4a81      	ldr	r2, [pc, #516]	; (b6634 <setup+0x3b4>)
   b6430:	4601      	mov	r1, r0
   b6432:	a80f      	add	r0, sp, #60	; 0x3c
   b6434:	f009 f8a6 	bl	bf584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6438:	a80f      	add	r0, sp, #60	; 0x3c
   b643a:	f008 fc56 	bl	becea <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b643e:	4b7e      	ldr	r3, [pc, #504]	; (b6638 <setup+0x3b8>)
   b6440:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b6444:	4b7d      	ldr	r3, [pc, #500]	; (b663c <setup+0x3bc>)
        BleUuid tempUUID(uuid);
   b6446:	a80f      	add	r0, sp, #60	; 0x3c
   b6448:	6819      	ldr	r1, [r3, #0]
   b644a:	f008 f9fb 	bl	be844 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b644e:	a80f      	add	r0, sp, #60	; 0x3c
   b6450:	f008 f95a 	bl	be708 <_ZNK8particle7BleUuid4typeEv>
   b6454:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6456:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6458:	f1b9 0f00 	cmp.w	r9, #0
   b645c:	f040 8130 	bne.w	b66c0 <setup+0x440>
            uint16_t uuid16 = tempUUID.shorted();
   b6460:	f008 f96e 	bl	be740 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6464:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b6468:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b646c:	2302      	movs	r3, #2
   b646e:	aa0b      	add	r2, sp, #44	; 0x2c
   b6470:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6472:	4873      	ldr	r0, [pc, #460]	; (b6640 <setup+0x3c0>)
    CompassAvail = true;
   b6474:	4c73      	ldr	r4, [pc, #460]	; (b6644 <setup+0x3c4>)
   b6476:	f008 fd63 	bl	bef40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b647a:	2300      	movs	r3, #0
   b647c:	496e      	ldr	r1, [pc, #440]	; (b6638 <setup+0x3b8>)
   b647e:	4870      	ldr	r0, [pc, #448]	; (b6640 <setup+0x3c0>)
   b6480:	2208      	movs	r2, #8
   b6482:	f008 fd7b 	bl	bef7c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b6486:	f008 fb2b 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b648a:	2200      	movs	r2, #0
   b648c:	496c      	ldr	r1, [pc, #432]	; (b6640 <setup+0x3c0>)
   b648e:	f008 fbd8 	bl	bec42 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b6492:	f00b fe79 	bl	c2188 <_Z19__fetch_global_Wirev>
   b6496:	f009 fd0f 	bl	bfeb8 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b649a:	f00b fe75 	bl	c2188 <_Z19__fetch_global_Wirev>
   b649e:	496a      	ldr	r1, [pc, #424]	; (b6648 <setup+0x3c8>)
   b64a0:	f009 fd06 	bl	bfeb0 <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;
   b64a4:	2301      	movs	r3, #1
   b64a6:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b64a8:	f00b fe6e 	bl	c2188 <_Z19__fetch_global_Wirev>
   b64ac:	211c      	movs	r1, #28
   b64ae:	4602      	mov	r2, r0
   b64b0:	4866      	ldr	r0, [pc, #408]	; (b664c <setup+0x3cc>)
   b64b2:	f002 f8d2 	bl	b865a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b64b6:	2800      	cmp	r0, #0
   b64b8:	f040 8109 	bne.w	b66ce <setup+0x44e>
        CompassAvail = false;
   b64bc:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b64be:	f00b fcf7 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b64c2:	4963      	ldr	r1, [pc, #396]	; (b6650 <setup+0x3d0>)
    else Serial.println("LIS3MDL Found!");
   b64c4:	f00b f833 	bl	c152e <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b64c8:	4860      	ldr	r0, [pc, #384]	; (b664c <setup+0x3cc>)
   b64ca:	2102      	movs	r1, #2
   b64cc:	f001 ffbe 	bl	b844c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b64d0:	485e      	ldr	r0, [pc, #376]	; (b664c <setup+0x3cc>)
   b64d2:	2100      	movs	r1, #0
   b64d4:	f002 f81e 	bl	b8514 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b64d8:	485c      	ldr	r0, [pc, #368]	; (b664c <setup+0x3cc>)
   b64da:	2101      	movs	r1, #1
   b64dc:	f001 ffe8 	bl	b84b0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b64e0:	485a      	ldr	r0, [pc, #360]	; (b664c <setup+0x3cc>)
   b64e2:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b64e4:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b64e6:	f002 f830 	bl	b854a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b64ea:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   b64ee:	4857      	ldr	r0, [pc, #348]	; (b664c <setup+0x3cc>)
   b64f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b64f4:	f002 f8d0 	bl	b8698 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b64f8:	4622      	mov	r2, r4
   b64fa:	4621      	mov	r1, r4
   b64fc:	464b      	mov	r3, r9
   b64fe:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b6502:	4852      	ldr	r0, [pc, #328]	; (b664c <setup+0x3cc>)
   b6504:	f8cd 9000 	str.w	r9, [sp]
   b6508:	f002 f8de 	bl	b86c8 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b650c:	f00b fbf4 	bl	c1cf8 <_ZN9TimeClass5monthEv>
   b6510:	9009      	str	r0, [sp, #36]	; 0x24
   b6512:	f00b fbe5 	bl	c1ce0 <_ZN9TimeClass3dayEv>
   b6516:	4682      	mov	sl, r0
   b6518:	f00b fbf6 	bl	c1d08 <_ZN9TimeClass4yearEv>
   b651c:	4683      	mov	fp, r0
   b651e:	f00b fbbb 	bl	c1c98 <_ZN9TimeClass4hourEv>
   b6522:	9008      	str	r0, [sp, #32]
   b6524:	f00b fbc4 	bl	c1cb0 <_ZN9TimeClass6minuteEv>
   b6528:	9007      	str	r0, [sp, #28]
   b652a:	f00b fbcd 	bl	c1cc8 <_ZN9TimeClass6secondEv>
   b652e:	9a08      	ldr	r2, [sp, #32]
   b6530:	9907      	ldr	r1, [sp, #28]
   b6532:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6534:	9004      	str	r0, [sp, #16]
   b6536:	e9cd b201 	strd	fp, r2, [sp, #4]
   b653a:	9103      	str	r1, [sp, #12]
   b653c:	4a45      	ldr	r2, [pc, #276]	; (b6654 <setup+0x3d4>)
   b653e:	f8cd a000 	str.w	sl, [sp]
   b6542:	2110      	movs	r1, #16
   b6544:	a80b      	add	r0, sp, #44	; 0x2c
   b6546:	f007 ff1b 	bl	be380 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b654a:	4943      	ldr	r1, [pc, #268]	; (b6658 <setup+0x3d8>)
   b654c:	4843      	ldr	r0, [pc, #268]	; (b665c <setup+0x3dc>)
   b654e:	f00e f911 	bl	c4774 <strcpy>
    strcat(filename,timestamp);
   b6552:	a90b      	add	r1, sp, #44	; 0x2c
   b6554:	4841      	ldr	r0, [pc, #260]	; (b665c <setup+0x3dc>)
   b6556:	f00e f8dd 	bl	c4714 <strcat>
    strcpy(filenameMessages,filename);
   b655a:	4940      	ldr	r1, [pc, #256]	; (b665c <setup+0x3dc>)
   b655c:	4840      	ldr	r0, [pc, #256]	; (b6660 <setup+0x3e0>)
   b655e:	f00e f909 	bl	c4774 <strcpy>
    strcat(filename,".csv");
   b6562:	4940      	ldr	r1, [pc, #256]	; (b6664 <setup+0x3e4>)
   b6564:	483d      	ldr	r0, [pc, #244]	; (b665c <setup+0x3dc>)
   b6566:	f00e f8d5 	bl	c4714 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b656a:	493f      	ldr	r1, [pc, #252]	; (b6668 <setup+0x3e8>)
   b656c:	483c      	ldr	r0, [pc, #240]	; (b6660 <setup+0x3e0>)
   b656e:	f00e f8d1 	bl	c4714 <strcat>
    Serial.println(filename);
   b6572:	f00b fc9d 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b6576:	4939      	ldr	r1, [pc, #228]	; (b665c <setup+0x3dc>)
   b6578:	f00a ffd9 	bl	c152e <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b657c:	f00b fc98 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b6580:	4937      	ldr	r1, [pc, #220]	; (b6660 <setup+0x3e0>)
   b6582:	f00a ffd4 	bl	c152e <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b6586:	4622      	mov	r2, r4
   b6588:	4838      	ldr	r0, [pc, #224]	; (b666c <setup+0x3ec>)
   b658a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b658e:	f7fd fe66 	bl	b425e <_ZN5Timer6_startEjb.isra.0>
   b6592:	4622      	mov	r2, r4
   b6594:	4836      	ldr	r0, [pc, #216]	; (b6670 <setup+0x3f0>)
   b6596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b659a:	f7fd fe60 	bl	b425e <_ZN5Timer6_startEjb.isra.0>
   b659e:	4622      	mov	r2, r4
   b65a0:	4834      	ldr	r0, [pc, #208]	; (b6674 <setup+0x3f4>)
   b65a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b65a6:	f7fd fe5a 	bl	b425e <_ZN5Timer6_startEjb.isra.0>
   b65aa:	e067      	b.n	b667c <setup+0x3fc>
   b65ac:	2003e58c 	.word	0x2003e58c
   b65b0:	2003e564 	.word	0x2003e564
   b65b4:	2003e565 	.word	0x2003e565
   b65b8:	000b4285 	.word	0x000b4285
   b65bc:	2003de20 	.word	0x2003de20
   b65c0:	2003e0bd 	.word	0x2003e0bd
   b65c4:	2003dd4c 	.word	0x2003dd4c
   b65c8:	2003dd5c 	.word	0x2003dd5c
   b65cc:	2003ded8 	.word	0x2003ded8
   b65d0:	2003dd70 	.word	0x2003dd70
   b65d4:	000b4c0d 	.word	0x000b4c0d
   b65d8:	000c6d60 	.word	0x000c6d60
   b65dc:	000b4c5d 	.word	0x000b4c5d
   b65e0:	000c6d66 	.word	0x000c6d66
   b65e4:	000bf8c7 	.word	0x000bf8c7
   b65e8:	2003dd6d 	.word	0x2003dd6d
   b65ec:	2003e560 	.word	0x2003e560
   b65f0:	2003ddb0 	.word	0x2003ddb0
   b65f4:	2003ddf8 	.word	0x2003ddf8
   b65f8:	2003ddfc 	.word	0x2003ddfc
   b65fc:	2003e0b8 	.word	0x2003e0b8
   b6600:	2003dd84 	.word	0x2003dd84
   b6604:	2003dd44 	.word	0x2003dd44
   b6608:	2003ddb4 	.word	0x2003ddb4
   b660c:	2003e0b4 	.word	0x2003e0b4
   b6610:	2003e0bc 	.word	0x2003e0bc
   b6614:	2003dd6e 	.word	0x2003dd6e
   b6618:	2003e5dc 	.word	0x2003e5dc
   b661c:	2003e566 	.word	0x2003e566
   b6620:	2003e5cd 	.word	0x2003e5cd
   b6624:	2003dd9c 	.word	0x2003dd9c
   b6628:	2003e5e8 	.word	0x2003e5e8
   b662c:	2003e0c0 	.word	0x2003e0c0
   b6630:	2003e0ac 	.word	0x2003e0ac
   b6634:	2003dda4 	.word	0x2003dda4
   b6638:	2003dd39 	.word	0x2003dd39
   b663c:	2003db20 	.word	0x2003db20
   b6640:	2003dd8c 	.word	0x2003dd8c
   b6644:	2003dd48 	.word	0x2003dd48
   b6648:	00061a80 	.word	0x00061a80
   b664c:	2003de24 	.word	0x2003de24
   b6650:	000c6d74 	.word	0x000c6d74
   b6654:	000c6b90 	.word	0x000c6b90
   b6658:	000c6d9f 	.word	0x000c6d9f
   b665c:	2003ddb6 	.word	0x2003ddb6
   b6660:	2003ddd4 	.word	0x2003ddd4
   b6664:	000c6c9e 	.word	0x000c6c9e
   b6668:	000c6da8 	.word	0x000c6da8
   b666c:	2003e5f4 	.word	0x2003e5f4
   b6670:	2003de04 	.word	0x2003de04
   b6674:	2003e5b0 	.word	0x2003e5b0
   b6678:	2003ded9 	.word	0x2003ded9
      dataMode_{dataMode}
   b667c:	4b2a      	ldr	r3, [pc, #168]	; (b6728 <setup+0x4a8>)
   b667e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b6680:	482a      	ldr	r0, [pc, #168]	; (b672c <setup+0x4ac>)
   b6682:	4b2b      	ldr	r3, [pc, #172]	; (b6730 <setup+0x4b0>)
   b6684:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   b6688:	aa0f      	add	r2, sp, #60	; 0x3c
   b668a:	2108      	movs	r1, #8
   b668c:	9311      	str	r3, [sp, #68]	; 0x44
   b668e:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   b6692:	f7fe f887 	bl	b47a4 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b6696:	4604      	mov	r4, r0
   b6698:	b9e8      	cbnz	r0, b66d6 <setup+0x456>
        Serial.println("Error: could not connect to SD card!");
   b669a:	f00b fc09 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b669e:	4925      	ldr	r1, [pc, #148]	; (b6734 <setup+0x4b4>)
   b66a0:	f00a ff45 	bl	c152e <_ZN5Print7printlnEPKc>
        logSensors = false;
   b66a4:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b66a8:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b66aa:	7034      	strb	r4, [r6, #0]
   b66ac:	f007 fb4a 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);
   b66b0:	1b40      	subs	r0, r0, r5
   b66b2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b66b6:	d233      	bcs.n	b6720 <setup+0x4a0>
   b66b8:	2005      	movs	r0, #5
   b66ba:	f007 fead 	bl	be418 <delay>
   b66be:	e7f5      	b.n	b66ac <setup+0x42c>
   b66c0:	f008 f840 	bl	be744 <_ZNK8particle7BleUuid8rawBytesEv>
   b66c4:	9400      	str	r4, [sp, #0]
   b66c6:	4602      	mov	r2, r0
   b66c8:	2310      	movs	r3, #16
   b66ca:	2107      	movs	r1, #7
   b66cc:	e6d1      	b.n	b6472 <setup+0x1f2>
    else Serial.println("LIS3MDL Found!");
   b66ce:	f00b fbef 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b66d2:	4919      	ldr	r1, [pc, #100]	; (b6738 <setup+0x4b8>)
   b66d4:	e6f6      	b.n	b64c4 <setup+0x244>
    if(logSensors){
   b66d6:	f898 3000 	ldrb.w	r3, [r8]
   b66da:	b163      	cbz	r3, b66f6 <setup+0x476>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b66dc:	4917      	ldr	r1, [pc, #92]	; (b673c <setup+0x4bc>)
   b66de:	4818      	ldr	r0, [pc, #96]	; (b6740 <setup+0x4c0>)
   b66e0:	f244 2202 	movw	r2, #16898	; 0x4202
   b66e4:	f7fd ffe2 	bl	b46ac <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b66e8:	4916      	ldr	r1, [pc, #88]	; (b6744 <setup+0x4c4>)
   b66ea:	4817      	ldr	r0, [pc, #92]	; (b6748 <setup+0x4c8>)
   b66ec:	f00a ff1f 	bl	c152e <_ZN5Print7printlnEPKc>
        myFile.close();
   b66f0:	4813      	ldr	r0, [pc, #76]	; (b6740 <setup+0x4c0>)
   b66f2:	f000 fcb7 	bl	b7064 <_ZN7FatFile5closeEv>
    if(logMessages){
   b66f6:	783b      	ldrb	r3, [r7, #0]
   b66f8:	2b00      	cmp	r3, #0
   b66fa:	d0d7      	beq.n	b66ac <setup+0x42c>
   b66fc:	4813      	ldr	r0, [pc, #76]	; (b674c <setup+0x4cc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b66fe:	7c03      	ldrb	r3, [r0, #16]
   b6700:	b92b      	cbnz	r3, b670e <setup+0x48e>
   b6702:	4913      	ldr	r1, [pc, #76]	; (b6750 <setup+0x4d0>)
   b6704:	f244 2202 	movw	r2, #16898	; 0x4202
   b6708:	3010      	adds	r0, #16
   b670a:	f7fd ffcf 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b670e:	4911      	ldr	r1, [pc, #68]	; (b6754 <setup+0x4d4>)
   b6710:	480e      	ldr	r0, [pc, #56]	; (b674c <setup+0x4cc>)
   b6712:	2201      	movs	r2, #1
   b6714:	f7fd fe5a 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b6718:	480f      	ldr	r0, [pc, #60]	; (b6758 <setup+0x4d8>)
   b671a:	f000 fca3 	bl	b7064 <_ZN7FatFile5closeEv>
   b671e:	e7c5      	b.n	b66ac <setup+0x42c>
}
   b6720:	b015      	add	sp, #84	; 0x54
   b6722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6726:	bf00      	nop
   b6728:	000c6e68 	.word	0x000c6e68
   b672c:	2003e0c8 	.word	0x2003e0c8
   b6730:	007a1200 	.word	0x007a1200
   b6734:	000c6db1 	.word	0x000c6db1
   b6738:	000c6d90 	.word	0x000c6d90
   b673c:	2003ddb6 	.word	0x2003ddb6
   b6740:	2003df10 	.word	0x2003df10
   b6744:	000c6dd6 	.word	0x000c6dd6
   b6748:	2003df00 	.word	0x2003df00
   b674c:	2003de80 	.word	0x2003de80
   b6750:	2003ddd4 	.word	0x2003ddd4
   b6754:	000c6e2c 	.word	0x000c6e2c
   b6758:	2003de90 	.word	0x2003de90

000b675c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b675c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6760:	4604      	mov	r4, r0
   b6762:	460d      	mov	r5, r1
   b6764:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6766:	d916      	bls.n	b6796 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b6768:	4290      	cmp	r0, r2
   b676a:	d215      	bcs.n	b6798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b676c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6770:	1a75      	subs	r5, r6, r1
   b6772:	f1a1 0714 	sub.w	r7, r1, #20
   b6776:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6778:	42b7      	cmp	r7, r6
   b677a:	d01c      	beq.n	b67b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b677c:	b12c      	cbz	r4, b678a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b677e:	4631      	mov	r1, r6
   b6780:	4620      	mov	r0, r4
   b6782:	f00b f97d 	bl	c1a80 <_ZN6StringC1EOS_>
   b6786:	7c33      	ldrb	r3, [r6, #16]
   b6788:	7423      	strb	r3, [r4, #16]
   b678a:	4630      	mov	r0, r6
   b678c:	f00b f8fc 	bl	c1988 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6790:	3e14      	subs	r6, #20
   b6792:	3c14      	subs	r4, #20
   b6794:	e7f0      	b.n	b6778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b6796:	d00e      	beq.n	b67b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b6798:	42b5      	cmp	r5, r6
   b679a:	d00c      	beq.n	b67b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b679c:	b12c      	cbz	r4, b67aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b679e:	4629      	mov	r1, r5
   b67a0:	4620      	mov	r0, r4
   b67a2:	f00b f96d 	bl	c1a80 <_ZN6StringC1EOS_>
   b67a6:	7c2b      	ldrb	r3, [r5, #16]
   b67a8:	7423      	strb	r3, [r4, #16]
   b67aa:	4628      	mov	r0, r5
   b67ac:	f00b f8ec 	bl	c1988 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b67b0:	3514      	adds	r5, #20
   b67b2:	3414      	adds	r4, #20
   b67b4:	e7f0      	b.n	b6798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b67b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b67b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b67bc:	2300      	movs	r3, #0
   b67be:	e9c0 3300 	strd	r3, r3, [r0]
   b67c2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b67c4:	684f      	ldr	r7, [r1, #4]
   b67c6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b67c8:	4604      	mov	r4, r0
   b67ca:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b67cc:	dd23      	ble.n	b6816 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b67ce:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b67d2:	fb08 f007 	mul.w	r0, r8, r7
   b67d6:	f007 fdab 	bl	be330 <malloc>
            if (!d) {
   b67da:	4605      	mov	r5, r0
   b67dc:	b1d8      	cbz	r0, b6816 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b67de:	e9d4 1200 	ldrd	r1, r2, [r4]
   b67e2:	fb08 1202 	mla	r2, r8, r2, r1
   b67e6:	f7ff ffb9 	bl	b675c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b67ea:	6820      	ldr	r0, [r4, #0]
   b67ec:	f007 fda8 	bl	be340 <free>
        data_ = d;
   b67f0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b67f2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b67f4:	e9d6 7300 	ldrd	r7, r3, [r6]
   b67f8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b67fc:	45b8      	cmp	r8, r7
   b67fe:	d008      	beq.n	b6812 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6800:	4639      	mov	r1, r7
   b6802:	4628      	mov	r0, r5
   b6804:	f00b f956 	bl	c1ab4 <_ZN6StringC1ERKS_>
   b6808:	7c3b      	ldrb	r3, [r7, #16]
   b680a:	742b      	strb	r3, [r5, #16]
   b680c:	3714      	adds	r7, #20
   b680e:	3514      	adds	r5, #20
   b6810:	e7f4      	b.n	b67fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6812:	6873      	ldr	r3, [r6, #4]
   b6814:	6063      	str	r3, [r4, #4]
}
   b6816:	4620      	mov	r0, r4
   b6818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b681c <_GLOBAL__sub_I_SystemMode>:
   b681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   b6820:	4b8c      	ldr	r3, [pc, #560]	; (b6a54 <_GLOBAL__sub_I_SystemMode+0x238>)
        static SPIClass instance(Interface);
   b6822:	4c8d      	ldr	r4, [pc, #564]	; (b6a58 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b6824:	2501      	movs	r5, #1
   b6826:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6828:	4b8c      	ldr	r3, [pc, #560]	; (b6a5c <_GLOBAL__sub_I_SystemMode+0x240>)
   b682a:	2200      	movs	r2, #0
   b682c:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6830:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6834:	609a      	str	r2, [r3, #8]
   b6836:	b092      	sub	sp, #72	; 0x48

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6838:	2003      	movs	r0, #3
   b683a:	f007 fc9d 	bl	be178 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b683e:	4888      	ldr	r0, [pc, #544]	; (b6a60 <_GLOBAL__sub_I_SystemMode+0x244>)
   b6840:	f001 ff9e 	bl	b8780 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b6844:	4887      	ldr	r0, [pc, #540]	; (b6a64 <_GLOBAL__sub_I_SystemMode+0x248>)
   b6846:	f001 fd85 	bl	b8354 <_ZN16Adafruit_LIS3MDLC1Ev>
   b684a:	7823      	ldrb	r3, [r4, #0]
   b684c:	f3bf 8f5b 	dmb	ish
   b6850:	07db      	lsls	r3, r3, #31
   b6852:	d40a      	bmi.n	b686a <_GLOBAL__sub_I_SystemMode+0x4e>
   b6854:	4620      	mov	r0, r4
   b6856:	f7fd fc33 	bl	b40c0 <__cxa_guard_acquire>
   b685a:	b130      	cbz	r0, b686a <_GLOBAL__sub_I_SystemMode+0x4e>
   b685c:	4882      	ldr	r0, [pc, #520]	; (b6a68 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b685e:	4629      	mov	r1, r5
   b6860:	f00a ff45 	bl	c16ee <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6864:	4620      	mov	r0, r4
   b6866:	f7fd fc30 	bl	b40ca <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b686a:	4b80      	ldr	r3, [pc, #512]	; (b6a6c <_GLOBAL__sub_I_SystemMode+0x250>)
        filter_(level, filters) {
   b686c:	4d80      	ldr	r5, [pc, #512]	; (b6a70 <_GLOBAL__sub_I_SystemMode+0x254>)
   b686e:	2264      	movs	r2, #100	; 0x64
   b6870:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b6874:	4a7f      	ldr	r2, [pc, #508]	; (b6a74 <_GLOBAL__sub_I_SystemMode+0x258>)
   b6876:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b687a:	2400      	movs	r4, #0
   b687c:	2701      	movs	r7, #1
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b687e:	4a7a      	ldr	r2, [pc, #488]	; (b6a68 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b6880:	605c      	str	r4, [r3, #4]
   b6882:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b6886:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b688a:	f883 7474 	strb.w	r7, [r3, #1140]	; 0x474
   b688e:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b6892:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b6896:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b689a:	4b77      	ldr	r3, [pc, #476]	; (b6a78 <_GLOBAL__sub_I_SystemMode+0x25c>)
  File() {}
   b689c:	4a77      	ldr	r2, [pc, #476]	; (b6a7c <_GLOBAL__sub_I_SystemMode+0x260>)
   b689e:	601a      	str	r2, [r3, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b68a0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b68a4:	605c      	str	r4, [r3, #4]
   b68a6:	f8c3 8008 	str.w	r8, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b68aa:	611c      	str	r4, [r3, #16]
   b68ac:	4b74      	ldr	r3, [pc, #464]	; (b6a80 <_GLOBAL__sub_I_SystemMode+0x264>)
        capacity_(0) {
   b68ae:	9407      	str	r4, [sp, #28]
   b68b0:	601a      	str	r2, [r3, #0]
   b68b2:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b68b6:	611c      	str	r4, [r3, #16]
   b68b8:	4b72      	ldr	r3, [pc, #456]	; (b6a84 <_GLOBAL__sub_I_SystemMode+0x268>)
   b68ba:	601a      	str	r2, [r3, #0]
   b68bc:	e9c3 4801 	strd	r4, r8, [r3, #4]
   b68c0:	611c      	str	r4, [r3, #16]
   b68c2:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b68c6:	f00b faf3 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b68ca:	a905      	add	r1, sp, #20
   b68cc:	4606      	mov	r6, r0
   b68ce:	a808      	add	r0, sp, #32
   b68d0:	f7ff ff72 	bl	b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b68d4:	a908      	add	r1, sp, #32
   b68d6:	a80b      	add	r0, sp, #44	; 0x2c
   b68d8:	f7ff ff6e 	bl	b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b68dc:	4b6a      	ldr	r3, [pc, #424]	; (b6a88 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b68de:	602b      	str	r3, [r5, #0]
   b68e0:	a90b      	add	r1, sp, #44	; 0x2c
   b68e2:	a80e      	add	r0, sp, #56	; 0x38
   b68e4:	f7ff ff68 	bl	b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b68e8:	aa0e      	add	r2, sp, #56	; 0x38
   b68ea:	211e      	movs	r1, #30
   b68ec:	1d28      	adds	r0, r5, #4
   b68ee:	f00a fa45 	bl	c0d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b68f2:	a80e      	add	r0, sp, #56	; 0x38
   b68f4:	f7ff fc64 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b68f8:	a80b      	add	r0, sp, #44	; 0x2c
   b68fa:	f7ff fc61 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b68fe:	4b63      	ldr	r3, [pc, #396]	; (b6a8c <_GLOBAL__sub_I_SystemMode+0x270>)
   b6900:	602b      	str	r3, [r5, #0]
   b6902:	622e      	str	r6, [r5, #32]
   b6904:	a808      	add	r0, sp, #32
   b6906:	f7ff fc5b 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b690a:	4b61      	ldr	r3, [pc, #388]	; (b6a90 <_GLOBAL__sub_I_SystemMode+0x274>)
   b690c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b690e:	f00b facf 	bl	c1eb0 <_Z16_fetch_usbserialv>
   b6912:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6916:	f00b fabb 	bl	c1e90 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b691a:	f009 ff11 	bl	c0740 <_ZN5spark10LogManager8instanceEv>
   b691e:	4629      	mov	r1, r5
   b6920:	f00a f902 	bl	c0b28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b6924:	a805      	add	r0, sp, #20
   b6926:	f7ff fc4b 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b692a:	485a      	ldr	r0, [pc, #360]	; (b6a94 <_GLOBAL__sub_I_SystemMode+0x278>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b692c:	4d5a      	ldr	r5, [pc, #360]	; (b6a98 <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b692e:	4e5b      	ldr	r6, [pc, #364]	; (b6a9c <_GLOBAL__sub_I_SystemMode+0x280>)
Servo ESCL; 
   b6930:	f00a fe98 	bl	c1664 <_ZN5ServoC1Ev>
Servo ESCR;
   b6934:	485a      	ldr	r0, [pc, #360]	; (b6aa0 <_GLOBAL__sub_I_SystemMode+0x284>)
   b6936:	f00a fe95 	bl	c1664 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b693a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b693e:	682b      	ldr	r3, [r5, #0]
   b6940:	9300      	str	r3, [sp, #0]
   b6942:	4b58      	ldr	r3, [pc, #352]	; (b6aa4 <_GLOBAL__sub_I_SystemMode+0x288>)
   b6944:	4958      	ldr	r1, [pc, #352]	; (b6aa8 <_GLOBAL__sub_I_SystemMode+0x28c>)
   b6946:	681b      	ldr	r3, [r3, #0]
   b6948:	4858      	ldr	r0, [pc, #352]	; (b6aac <_GLOBAL__sub_I_SystemMode+0x290>)
   b694a:	f04f 0210 	mov.w	r2, #16
   b694e:	f7ff fc4a 	bl	b61e6 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b6952:	4b57      	ldr	r3, [pc, #348]	; (b6ab0 <_GLOBAL__sub_I_SystemMode+0x294>)
   b6954:	9402      	str	r4, [sp, #8]
   b6956:	9301      	str	r3, [sp, #4]
   b6958:	682b      	ldr	r3, [r5, #0]
   b695a:	9300      	str	r3, [sp, #0]
   b695c:	4b55      	ldr	r3, [pc, #340]	; (b6ab4 <_GLOBAL__sub_I_SystemMode+0x298>)
   b695e:	4956      	ldr	r1, [pc, #344]	; (b6ab8 <_GLOBAL__sub_I_SystemMode+0x29c>)
   b6960:	681b      	ldr	r3, [r3, #0]
   b6962:	4856      	ldr	r0, [pc, #344]	; (b6abc <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b6964:	f04f 0204 	mov.w	r2, #4
   b6968:	f7ff fc3d 	bl	b61e6 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b696c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6970:	682b      	ldr	r3, [r5, #0]
   b6972:	9300      	str	r3, [sp, #0]
   b6974:	4b52      	ldr	r3, [pc, #328]	; (b6ac0 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   b6976:	4953      	ldr	r1, [pc, #332]	; (b6ac4 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	4853      	ldr	r0, [pc, #332]	; (b6ac8 <_GLOBAL__sub_I_SystemMode+0x2ac>)
   b697c:	f04f 0210 	mov.w	r2, #16
   b6980:	f7ff fc31 	bl	b61e6 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b6984:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6988:	682b      	ldr	r3, [r5, #0]
   b698a:	9300      	str	r3, [sp, #0]
   b698c:	4b4f      	ldr	r3, [pc, #316]	; (b6acc <_GLOBAL__sub_I_SystemMode+0x2b0>)
   b698e:	4950      	ldr	r1, [pc, #320]	; (b6ad0 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	4850      	ldr	r0, [pc, #320]	; (b6ad4 <_GLOBAL__sub_I_SystemMode+0x2b8>)
	    _M_manager = &_My_handler::_M_manager;
   b6994:	4d50      	ldr	r5, [pc, #320]	; (b6ad8 <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b6996:	f04f 0210 	mov.w	r2, #16
   b699a:	f7ff fc24 	bl	b61e6 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b699e:	484f      	ldr	r0, [pc, #316]	; (b6adc <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b69a0:	f008 fad9 	bl	bef56 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69a4:	4b4e      	ldr	r3, [pc, #312]	; (b6ae0 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b69a6:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b69a8:	aa0e      	add	r2, sp, #56	; 0x38
   b69aa:	4623      	mov	r3, r4
   b69ac:	f643 2198 	movw	r1, #15000	; 0x3a98
   b69b0:	484c      	ldr	r0, [pc, #304]	; (b6ae4 <_GLOBAL__sub_I_SystemMode+0x2c8>)
	    _M_invoker = &_My_handler::_M_invoke;
   b69b2:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b69b4:	9510      	str	r5, [sp, #64]	; 0x40
   b69b6:	f7fd fdc3 	bl	b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b69ba:	a80e      	add	r0, sp, #56	; 0x38
   b69bc:	f7fd fd88 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69c0:	4b49      	ldr	r3, [pc, #292]	; (b6ae8 <_GLOBAL__sub_I_SystemMode+0x2cc>)
   b69c2:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b69c4:	aa0e      	add	r2, sp, #56	; 0x38
   b69c6:	4623      	mov	r3, r4
   b69c8:	4641      	mov	r1, r8
   b69ca:	4848      	ldr	r0, [pc, #288]	; (b6aec <_GLOBAL__sub_I_SystemMode+0x2d0>)
	    _M_manager = &_My_handler::_M_manager;
   b69cc:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b69d0:	f7fd fdb6 	bl	b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b69d4:	a80e      	add	r0, sp, #56	; 0x38
   b69d6:	f7fd fd7b 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69da:	4b45      	ldr	r3, [pc, #276]	; (b6af0 <_GLOBAL__sub_I_SystemMode+0x2d4>)
   b69dc:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b69de:	aa0e      	add	r2, sp, #56	; 0x38
   b69e0:	4623      	mov	r3, r4
   b69e2:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b69e6:	4843      	ldr	r0, [pc, #268]	; (b6af4 <_GLOBAL__sub_I_SystemMode+0x2d8>)
	    _M_manager = &_My_handler::_M_manager;
   b69e8:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b69ec:	f7fd fda8 	bl	b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b69f0:	a80e      	add	r0, sp, #56	; 0x38
   b69f2:	f7fd fd6d 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69f6:	4b40      	ldr	r3, [pc, #256]	; (b6af8 <_GLOBAL__sub_I_SystemMode+0x2dc>)
   b69f8:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b69fa:	aa0e      	add	r2, sp, #56	; 0x38
   b69fc:	4623      	mov	r3, r4
   b69fe:	f643 2198 	movw	r1, #15000	; 0x3a98
   b6a02:	483e      	ldr	r0, [pc, #248]	; (b6afc <_GLOBAL__sub_I_SystemMode+0x2e0>)
	    _M_manager = &_My_handler::_M_manager;
   b6a04:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b6a08:	f7fd fd9a 	bl	b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6a0c:	a80e      	add	r0, sp, #56	; 0x38
   b6a0e:	f7fd fd5f 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6a12:	4b3b      	ldr	r3, [pc, #236]	; (b6b00 <_GLOBAL__sub_I_SystemMode+0x2e4>)
   b6a14:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);
   b6a16:	aa0e      	add	r2, sp, #56	; 0x38
   b6a18:	4623      	mov	r3, r4
   b6a1a:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b6a1e:	4839      	ldr	r0, [pc, #228]	; (b6b04 <_GLOBAL__sub_I_SystemMode+0x2e8>)
	    _M_manager = &_My_handler::_M_manager;
   b6a20:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b6a24:	f7fd fd8c 	bl	b4540 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6a28:	a80e      	add	r0, sp, #56	; 0x38
   b6a2a:	f7fd fd51 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6a2e:	4622      	mov	r2, r4
   b6a30:	2114      	movs	r1, #20
   b6a32:	4638      	mov	r0, r7
   b6a34:	f007 fbc8 	bl	be1c8 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6a38:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6a3a:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6a3c:	9200      	str	r2, [sp, #0]
   b6a3e:	9701      	str	r7, [sp, #4]
   b6a40:	463a      	mov	r2, r7
   b6a42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b6a46:	4830      	ldr	r0, [pc, #192]	; (b6b08 <_GLOBAL__sub_I_SystemMode+0x2ec>)
   b6a48:	f009 fcfc 	bl	c0444 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b6a4c:	b012      	add	sp, #72	; 0x48
   b6a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a52:	bf00      	nop
   b6a54:	2003dd88 	.word	0x2003dd88
   b6a58:	2003dd20 	.word	0x2003dd20
   b6a5c:	2003dd74 	.word	0x2003dd74
   b6a60:	2003df34 	.word	0x2003df34
   b6a64:	2003de24 	.word	0x2003de24
   b6a68:	2003dd24 	.word	0x2003dd24
   b6a6c:	2003e0c8 	.word	0x2003e0c8
   b6a70:	2003deb4 	.word	0x2003deb4
   b6a74:	000c6e68 	.word	0x000c6e68
   b6a78:	2003df00 	.word	0x2003df00
   b6a7c:	000c6ed4 	.word	0x000c6ed4
   b6a80:	2003de80 	.word	0x2003de80
   b6a84:	2003de4c 	.word	0x2003de4c
   b6a88:	000c6e90 	.word	0x000c6e90
   b6a8c:	000c808c 	.word	0x000c808c
   b6a90:	000c6ebc 	.word	0x000c6ebc
   b6a94:	2003dd4c 	.word	0x2003dd4c
   b6a98:	2003db20 	.word	0x2003db20
   b6a9c:	000b4243 	.word	0x000b4243
   b6aa0:	2003dd5c 	.word	0x2003dd5c
   b6aa4:	2003db34 	.word	0x2003db34
   b6aa8:	000c6e51 	.word	0x000c6e51
   b6aac:	2003e5e8 	.word	0x2003e5e8
   b6ab0:	000b4cbd 	.word	0x000b4cbd
   b6ab4:	2003db30 	.word	0x2003db30
   b6ab8:	000c6e54 	.word	0x000c6e54
   b6abc:	2003e0c0 	.word	0x2003e0c0
   b6ac0:	2003db2c 	.word	0x2003db2c
   b6ac4:	000c6e57 	.word	0x000c6e57
   b6ac8:	2003e0ac 	.word	0x2003e0ac
   b6acc:	2003db28 	.word	0x2003db28
   b6ad0:	000c6e5b 	.word	0x000c6e5b
   b6ad4:	2003dda4 	.word	0x2003dda4
   b6ad8:	000b422f 	.word	0x000b422f
   b6adc:	2003dd8c 	.word	0x2003dd8c
   b6ae0:	000b46bd 	.word	0x000b46bd
   b6ae4:	2003e5f4 	.word	0x2003e5f4
   b6ae8:	000b45b9 	.word	0x000b45b9
   b6aec:	2003de04 	.word	0x2003de04
   b6af0:	000b43e9 	.word	0x000b43e9
   b6af4:	2003dee4 	.word	0x2003dee4
   b6af8:	000b40f9 	.word	0x000b40f9
   b6afc:	2003e5b0 	.word	0x2003e5b0
   b6b00:	000b4339 	.word	0x000b4339
   b6b04:	2003e568 	.word	0x2003e568
   b6b08:	2003e58c 	.word	0x2003e58c

000b6b0c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6b0c:	b538      	push	{r3, r4, r5, lr}
   b6b0e:	4604      	mov	r4, r0
   b6b10:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6b12:	2224      	movs	r2, #36	; 0x24
   b6b14:	2100      	movs	r1, #0
   b6b16:	f00d fdc7 	bl	c46a8 <memset>

  m_vol = vol;
   b6b1a:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6b1c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6b1e:	2b10      	cmp	r3, #16
   b6b20:	d003      	beq.n	b6b2a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6b22:	2b20      	cmp	r3, #32
   b6b24:	d006      	beq.n	b6b34 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6b26:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6b28:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6b2a:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6b2c:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6b2e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6b30:	70a0      	strb	r0, [r4, #2]
  return true;
   b6b32:	e7f9      	b.n	b6b28 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6b34:	2340      	movs	r3, #64	; 0x40
   b6b36:	e7f9      	b.n	b6b2c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6b38 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6b38:	b510      	push	{r4, lr}
   b6b3a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6b3c:	3024      	adds	r0, #36	; 0x24
   b6b3e:	f000 ff66 	bl	b7a0e <_ZN8FatCache4syncEv>
   b6b42:	b128      	cbz	r0, b6b50 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6b44:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6b4c:	f000 bf5f 	b.w	b7a0e <_ZN8FatCache4syncEv>
  }
   b6b50:	bd10      	pop	{r4, pc}

000b6b52 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6b52:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6b54:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6b56:	f043 0304 	orr.w	r3, r3, #4
   b6b5a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6b5c:	f100 0210 	add.w	r2, r0, #16
   b6b60:	6880      	ldr	r0, [r0, #8]
   b6b62:	f001 b80a 	b.w	b7b7a <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6b68 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6b6c:	7801      	ldrb	r1, [r0, #0]
   b6b6e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6b72:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6b74:	d003      	beq.n	b6b7e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6b76:	2600      	movs	r6, #0
}
   b6b78:	4630      	mov	r0, r6
   b6b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6b7e:	6942      	ldr	r2, [r0, #20]
   b6b80:	4b17      	ldr	r3, [pc, #92]	; (b6be0 <_ZN7FatFile13addDirClusterEv+0x78>)
   b6b82:	429a      	cmp	r2, r3
   b6b84:	d2f7      	bcs.n	b6b76 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6b86:	f7ff ffe4 	bl	b6b52 <_ZN7FatFile10addClusterEv>
   b6b8a:	4606      	mov	r6, r0
   b6b8c:	2800      	cmp	r0, #0
   b6b8e:	d0f2      	beq.n	b6b76 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6b90:	6921      	ldr	r1, [r4, #16]
   b6b92:	68a0      	ldr	r0, [r4, #8]
   b6b94:	f000 ff86 	bl	b7aa4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6b98:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6b9a:	68a0      	ldr	r0, [r4, #8]
   b6b9c:	2205      	movs	r2, #5
   b6b9e:	4639      	mov	r1, r7
   b6ba0:	3024      	adds	r0, #36	; 0x24
   b6ba2:	f000 ff5c 	bl	b7a5e <_ZN8FatCache4readEmh>
  if (!pc) {
   b6ba6:	4680      	mov	r8, r0
   b6ba8:	2800      	cmp	r0, #0
   b6baa:	d0e4      	beq.n	b6b76 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6bac:	4629      	mov	r1, r5
   b6bae:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6bb2:	f00d fd79 	bl	c46a8 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6bb6:	2501      	movs	r5, #1
   b6bb8:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6bba:	791a      	ldrb	r2, [r3, #4]
   b6bbc:	42aa      	cmp	r2, r5
   b6bbe:	d909      	bls.n	b6bd4 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6bc0:	6818      	ldr	r0, [r3, #0]
   b6bc2:	4642      	mov	r2, r8
   b6bc4:	19e9      	adds	r1, r5, r7
   b6bc6:	f001 fab6 	bl	b8136 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6bca:	2800      	cmp	r0, #0
   b6bcc:	d0d3      	beq.n	b6b76 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6bce:	3501      	adds	r5, #1
   b6bd0:	b2ed      	uxtb	r5, r5
   b6bd2:	e7f1      	b.n	b6bb8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6bd4:	6963      	ldr	r3, [r4, #20]
   b6bd6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6bda:	6163      	str	r3, [r4, #20]
  return true;
   b6bdc:	e7cc      	b.n	b6b78 <_ZN7FatFile13addDirClusterEv+0x10>
   b6bde:	bf00      	nop
   b6be0:	001ffe00 	.word	0x001ffe00

000b6be4 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6be4:	b510      	push	{r4, lr}
   b6be6:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6be8:	6880      	ldr	r0, [r0, #8]
   b6bea:	460a      	mov	r2, r1
   b6bec:	3024      	adds	r0, #36	; 0x24
   b6bee:	69a1      	ldr	r1, [r4, #24]
   b6bf0:	f000 ff35 	bl	b7a5e <_ZN8FatCache4readEmh>
  if (!pc) {
   b6bf4:	b120      	cbz	r0, b6c00 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6bf6:	88a3      	ldrh	r3, [r4, #4]
   b6bf8:	f003 030f 	and.w	r3, r3, #15
   b6bfc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6c00:	bd10      	pop	{r4, pc}

000b6c02 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6c02:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c06:	4604      	mov	r4, r0
   b6c08:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b6c0a:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6c0c:	4618      	mov	r0, r3
      name[j++] = '.';
   b6c0e:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6c10:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6c14:	2a20      	cmp	r2, #32
   b6c16:	d018      	beq.n	b6c4a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6c18:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b6c1a:	bf02      	ittt	eq
   b6c1c:	540f      	strbeq	r7, [r1, r0]
   b6c1e:	1c42      	addeq	r2, r0, #1
   b6c20:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6c22:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6c24:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b6c28:	bf08      	it	eq
   b6c2a:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6c2c:	f1bc 0f19 	cmp.w	ip, #25
   b6c30:	d806      	bhi.n	b6c40 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6c32:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6c36:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6c3a:	bf1c      	itt	ne
   b6c3c:	3220      	addne	r2, #32
   b6c3e:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6c40:	f100 0c01 	add.w	ip, r0, #1
   b6c44:	540a      	strb	r2, [r1, r0]
   b6c46:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6c4a:	3301      	adds	r3, #1
   b6c4c:	b2db      	uxtb	r3, r3
   b6c4e:	2b0b      	cmp	r3, #11
   b6c50:	d1de      	bne.n	b6c10 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b6c52:	2300      	movs	r3, #0
   b6c54:	540b      	strb	r3, [r1, r0]
}
   b6c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6c58 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6c58:	7803      	ldrb	r3, [r0, #0]
   b6c5a:	b90b      	cbnz	r3, b6c60 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6c5c:	f7ff bf56 	b.w	b6b0c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6c60:	2000      	movs	r0, #0
   b6c62:	4770      	bx	lr

000b6c64 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6c68:	7803      	ldrb	r3, [r0, #0]
   b6c6a:	4604      	mov	r4, r0
   b6c6c:	4688      	mov	r8, r1
   b6c6e:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6c70:	2b00      	cmp	r3, #0
   b6c72:	d05d      	beq.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
   b6c74:	7882      	ldrb	r2, [r0, #2]
   b6c76:	07d1      	lsls	r1, r2, #31
   b6c78:	d55a      	bpl.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6c7a:	071a      	lsls	r2, r3, #28
   b6c7c:	d52d      	bpl.n	b6cda <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6c7e:	69c3      	ldr	r3, [r0, #28]
   b6c80:	6942      	ldr	r2, [r0, #20]
   b6c82:	1a9b      	subs	r3, r3, r2
   b6c84:	429d      	cmp	r5, r3
   b6c86:	bf28      	it	cs
   b6c88:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6c8a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6c8c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6c90:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6c94:	2e00      	cmp	r6, #0
   b6c96:	f000 808f 	beq.w	b6db8 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6c9a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6c9c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6c9e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6ca0:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6ca6:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6caa:	d51f      	bpl.n	b6cec <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6cac:	6a00      	ldr	r0, [r0, #32]
   b6cae:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6cb0:	68a0      	ldr	r0, [r4, #8]
   b6cb2:	f1ba 0f00 	cmp.w	sl, #0
   b6cb6:	d142      	bne.n	b6d3e <_ZN7FatFile4readEPvj+0xda>
   b6cb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6cbc:	d33f      	bcc.n	b6d3e <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6cbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6cc0:	4299      	cmp	r1, r3
   b6cc2:	d03c      	beq.n	b6d3e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6cc4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6cc8:	d252      	bcs.n	b6d70 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6cca:	6800      	ldr	r0, [r0, #0]
   b6ccc:	4642      	mov	r2, r8
   b6cce:	f001 f9a9 	bl	b8024 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6cd2:	b368      	cbz	r0, b6d30 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6cd4:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6cd8:	e044      	b.n	b6d64 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6cda:	069b      	lsls	r3, r3, #26
   b6cdc:	d5d5      	bpl.n	b6c8a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6cde:	6883      	ldr	r3, [r0, #8]
   b6ce0:	891a      	ldrh	r2, [r3, #8]
   b6ce2:	6943      	ldr	r3, [r0, #20]
   b6ce4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6ce8:	b29b      	uxth	r3, r3
   b6cea:	e7cb      	b.n	b6c84 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6cec:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6cf0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6cf4:	f1ba 0f00 	cmp.w	sl, #0
   b6cf8:	d108      	bne.n	b6d0c <_ZN7FatFile4readEPvj+0xa8>
   b6cfa:	f1b9 0f00 	cmp.w	r9, #0
   b6cfe:	d105      	bne.n	b6d0c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6d00:	b95b      	cbnz	r3, b6d1a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6d02:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6d04:	bf4c      	ite	mi
   b6d06:	6a03      	ldrmi	r3, [r0, #32]
   b6d08:	6a23      	ldrpl	r3, [r4, #32]
   b6d0a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6d0c:	6921      	ldr	r1, [r4, #16]
   b6d0e:	68a0      	ldr	r0, [r4, #8]
   b6d10:	f000 fec8 	bl	b7aa4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6d14:	eb09 0100 	add.w	r1, r9, r0
   b6d18:	e7ca      	b.n	b6cb0 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d1a:	6921      	ldr	r1, [r4, #16]
   b6d1c:	465a      	mov	r2, fp
   b6d1e:	f000 fec7 	bl	b7ab0 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6d22:	2800      	cmp	r0, #0
   b6d24:	db04      	blt.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6d26:	d1f1      	bne.n	b6d0c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6d28:	7823      	ldrb	r3, [r4, #0]
   b6d2a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6d2e:	d143      	bne.n	b6db8 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6d30:	7863      	ldrb	r3, [r4, #1]
   b6d32:	f043 0302 	orr.w	r3, r3, #2
   b6d36:	7063      	strb	r3, [r4, #1]
  return -1;
   b6d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d3c:	e03d      	b.n	b6dba <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6d3e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6d42:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6d44:	f04f 0200 	mov.w	r2, #0
   b6d48:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6d4c:	bf28      	it	cs
   b6d4e:	4637      	movcs	r7, r6
   b6d50:	f000 fe85 	bl	b7a5e <_ZN8FatCache4readEmh>
      if (!pc) {
   b6d54:	2800      	cmp	r0, #0
   b6d56:	d0eb      	beq.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6d58:	eb00 010a 	add.w	r1, r0, sl
   b6d5c:	463a      	mov	r2, r7
   b6d5e:	4640      	mov	r0, r8
   b6d60:	f00d fc7a 	bl	c4658 <memcpy>
    m_curPosition += n;
   b6d64:	6963      	ldr	r3, [r4, #20]
   b6d66:	443b      	add	r3, r7
    dst += n;
   b6d68:	44b8      	add	r8, r7
    m_curPosition += n;
   b6d6a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6d6c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6d6e:	e791      	b.n	b6c94 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6d70:	7822      	ldrb	r2, [r4, #0]
   b6d72:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6d74:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6d78:	d406      	bmi.n	b6d88 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6d7a:	7902      	ldrb	r2, [r0, #4]
   b6d7c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6d80:	b2d2      	uxtb	r2, r2
   b6d82:	4592      	cmp	sl, r2
   b6d84:	bf28      	it	cs
   b6d86:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6d88:	4299      	cmp	r1, r3
      n = 512*nb;
   b6d8a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6d8e:	d208      	bcs.n	b6da2 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6d90:	68a0      	ldr	r0, [r4, #8]
   b6d92:	4653      	mov	r3, sl
   b6d94:	6800      	ldr	r0, [r0, #0]
   b6d96:	4642      	mov	r2, r8
   b6d98:	f001 f98c 	bl	b80b4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6d9c:	2800      	cmp	r0, #0
   b6d9e:	d1e1      	bne.n	b6d64 <_ZN7FatFile4readEPvj+0x100>
   b6da0:	e7c6      	b.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6da2:	4453      	add	r3, sl
   b6da4:	428b      	cmp	r3, r1
   b6da6:	d9f3      	bls.n	b6d90 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6da8:	3024      	adds	r0, #36	; 0x24
   b6daa:	9101      	str	r1, [sp, #4]
   b6dac:	f000 fe2f 	bl	b7a0e <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6db0:	9901      	ldr	r1, [sp, #4]
   b6db2:	2800      	cmp	r0, #0
   b6db4:	d1ec      	bne.n	b6d90 <_ZN7FatFile4readEPvj+0x12c>
   b6db6:	e7bb      	b.n	b6d30 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6db8:	1ba8      	subs	r0, r5, r6
}
   b6dba:	b003      	add	sp, #12
   b6dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6dc0 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6dc2:	2201      	movs	r2, #1
   b6dc4:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6dc8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6dcc:	4604      	mov	r4, r0
   b6dce:	f7ff ff49 	bl	b6c64 <_ZN7FatFile4readEPvj>
   b6dd2:	2801      	cmp	r0, #1
   b6dd4:	bf0a      	itet	eq
   b6dd6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6dda:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6dde:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6de2:	b002      	add	sp, #8
   b6de4:	bd70      	pop	{r4, r5, r6, pc}

000b6de6 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6de6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6de8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6dea:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6dee:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6df0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6df4:	d000      	beq.n	b6df8 <_ZN7FatFile12readDirCacheEb+0x12>
   b6df6:	b999      	cbnz	r1, b6e20 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6df8:	2201      	movs	r2, #1
   b6dfa:	f10d 0107 	add.w	r1, sp, #7
   b6dfe:	4620      	mov	r0, r4
   b6e00:	f7ff ff30 	bl	b6c64 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6e04:	b240      	sxtb	r0, r0
   b6e06:	2801      	cmp	r0, #1
   b6e08:	d002      	beq.n	b6e10 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6e0a:	2000      	movs	r0, #0
}
   b6e0c:	b003      	add	sp, #12
   b6e0e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6e10:	6963      	ldr	r3, [r4, #20]
   b6e12:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6e14:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6e16:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6e18:	3030      	adds	r0, #48	; 0x30
   b6e1a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6e1e:	e7f5      	b.n	b6e0c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6e20:	3320      	adds	r3, #32
   b6e22:	e7f7      	b.n	b6e14 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6e24 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6e28:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6e2a:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6e2c:	4604      	mov	r4, r0
   b6e2e:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6e30:	b162      	cbz	r2, b6e4c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6e32:	6940      	ldr	r0, [r0, #20]
   b6e34:	4288      	cmp	r0, r1
   b6e36:	d002      	beq.n	b6e3e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6e38:	b919      	cbnz	r1, b6e42 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6e3a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6e3c:	6165      	str	r5, [r4, #20]
    return true;
   b6e3e:	2001      	movs	r0, #1
   b6e40:	e006      	b.n	b6e50 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6e42:	0716      	lsls	r6, r2, #28
   b6e44:	d506      	bpl.n	b6e54 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6e46:	69e3      	ldr	r3, [r4, #28]
   b6e48:	428b      	cmp	r3, r1
   b6e4a:	d20b      	bcs.n	b6e64 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6e4c:	6127      	str	r7, [r4, #16]
  return false;
   b6e4e:	2000      	movs	r0, #0
}
   b6e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6e54:	0691      	lsls	r1, r2, #26
   b6e56:	d505      	bpl.n	b6e64 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6e58:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6e5a:	891b      	ldrh	r3, [r3, #8]
   b6e5c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6e60:	d9ec      	bls.n	b6e3c <_ZN7FatFile7seekSetEm+0x18>
   b6e62:	e7f3      	b.n	b6e4c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e64:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6e68:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6e6c:	1e43      	subs	r3, r0, #1
   b6e6e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e72:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e74:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6e76:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6e78:	42b3      	cmp	r3, r6
   b6e7a:	d800      	bhi.n	b6e7e <_ZN7FatFile7seekSetEm+0x5a>
   b6e7c:	b998      	cbnz	r0, b6ea6 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6e7e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6e80:	bf4c      	ite	mi
   b6e82:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6e86:	6a23      	ldrpl	r3, [r4, #32]
   b6e88:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6e8a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6e8e:	2e00      	cmp	r6, #0
   b6e90:	d0d4      	beq.n	b6e3c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6e92:	6921      	ldr	r1, [r4, #16]
   b6e94:	68a0      	ldr	r0, [r4, #8]
   b6e96:	4642      	mov	r2, r8
   b6e98:	f000 fe0a 	bl	b7ab0 <_ZN9FatVolume6fatGetEmPm>
   b6e9c:	2800      	cmp	r0, #0
   b6e9e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6ea2:	dcf4      	bgt.n	b6e8e <_ZN7FatFile7seekSetEm+0x6a>
   b6ea4:	e7d2      	b.n	b6e4c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6ea6:	1af6      	subs	r6, r6, r3
   b6ea8:	e7ef      	b.n	b6e8a <_ZN7FatFile7seekSetEm+0x66>

000b6eaa <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6eac:	460f      	mov	r7, r1
   b6eae:	4604      	mov	r4, r0
   b6eb0:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6eb2:	2100      	movs	r1, #0
   b6eb4:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6eb6:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6eb8:	f00d fbf6 	bl	c46a8 <memset>
  m_vol = dirFile->m_vol;
   b6ebc:	68b8      	ldr	r0, [r7, #8]
   b6ebe:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6ec0:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6ec2:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6ec6:	6a3b      	ldr	r3, [r7, #32]
   b6ec8:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6eca:	016a      	lsls	r2, r5, #5
   b6ecc:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6ed0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6ed4:	071f      	lsls	r7, r3, #28
   b6ed6:	d444      	bmi.n	b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6ed8:	f003 0317 	and.w	r3, r3, #23
   b6edc:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6ede:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6ee2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6ee6:	bf04      	itt	eq
   b6ee8:	f043 0308 	orreq.w	r3, r3, #8
   b6eec:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6eee:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6ef2:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6ef4:	f006 0303 	and.w	r3, r6, #3
   b6ef8:	2b01      	cmp	r3, #1
   b6efa:	d02c      	beq.n	b6f56 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6efc:	2b02      	cmp	r3, #2
   b6efe:	d028      	beq.n	b6f52 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6f00:	bb7b      	cbnz	r3, b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6f02:	0571      	lsls	r1, r6, #21
   b6f04:	d42d      	bmi.n	b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6f06:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6f08:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6f0a:	78a1      	ldrb	r1, [r4, #2]
   b6f0c:	078b      	lsls	r3, r1, #30
   b6f0e:	d504      	bpl.n	b6f1a <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6f10:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6f12:	06df      	lsls	r7, r3, #27
   b6f14:	d425      	bmi.n	b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6f16:	07dd      	lsls	r5, r3, #31
   b6f18:	d423      	bmi.n	b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6f1a:	11b3      	asrs	r3, r6, #6
   b6f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6f20:	f006 0508 	and.w	r5, r6, #8
   b6f24:	432b      	orrs	r3, r5
   b6f26:	430b      	orrs	r3, r1
   b6f28:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6f2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6f2c:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6f2e:	1883      	adds	r3, r0, r2
   b6f30:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6f34:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6f38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6f3c:	0572      	lsls	r2, r6, #21
   b6f3e:	d513      	bpl.n	b6f68 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6f40:	b959      	cbnz	r1, b6f5a <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6f42:	78a3      	ldrb	r3, [r4, #2]
   b6f44:	f043 0304 	orr.w	r3, r3, #4
   b6f48:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6f4a:	0473      	lsls	r3, r6, #17
   b6f4c:	d410      	bmi.n	b6f70 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6f4e:	2001      	movs	r0, #1
}
   b6f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6f52:	2303      	movs	r3, #3
   b6f54:	e7d8      	b.n	b6f08 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6f56:	2302      	movs	r3, #2
   b6f58:	e7d6      	b.n	b6f08 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6f5a:	f000 fe49 	bl	b7bf0 <_ZN9FatVolume9freeChainEm>
   b6f5e:	2800      	cmp	r0, #0
   b6f60:	d1ef      	bne.n	b6f42 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6f62:	2000      	movs	r0, #0
   b6f64:	7020      	strb	r0, [r4, #0]
  return false;
   b6f66:	e7f3      	b.n	b6f50 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6f68:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f6c:	61e3      	str	r3, [r4, #28]
   b6f6e:	e7ec      	b.n	b6f4a <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6f70:	69e1      	ldr	r1, [r4, #28]
   b6f72:	4620      	mov	r0, r4
   b6f74:	f7ff ff56 	bl	b6e24 <_ZN7FatFile7seekSetEm>
   b6f78:	2800      	cmp	r0, #0
   b6f7a:	d1e8      	bne.n	b6f4e <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6f7c:	e7f1      	b.n	b6f62 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6f7e <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6f7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b6f82:	7803      	ldrb	r3, [r0, #0]
   b6f84:	4607      	mov	r7, r0
   b6f86:	460d      	mov	r5, r1
   b6f88:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6f8a:	bb53      	cbnz	r3, b6fe2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6f8c:	780b      	ldrb	r3, [r1, #0]
   b6f8e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6f92:	d026      	beq.n	b6fe2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6f94:	694c      	ldr	r4, [r1, #20]
   b6f96:	f014 041f 	ands.w	r4, r4, #31
   b6f9a:	d122      	bne.n	b6fe2 <_ZN7FatFile8openNextEPS_i+0x64>
   b6f9c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6f9e:	2100      	movs	r1, #0
   b6fa0:	4628      	mov	r0, r5
    return m_curPosition;
   b6fa2:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6fa6:	f7ff ff1e 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6faa:	b1d0      	cbz	r0, b6fe2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6fac:	7806      	ldrb	r6, [r0, #0]
   b6fae:	b1c6      	cbz	r6, b6fe2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6fb0:	2e2e      	cmp	r6, #46	; 0x2e
   b6fb2:	d010      	beq.n	b6fd6 <_ZN7FatFile8openNextEPS_i+0x58>
   b6fb4:	2ee5      	cmp	r6, #229	; 0xe5
   b6fb6:	d00e      	beq.n	b6fd6 <_ZN7FatFile8openNextEPS_i+0x58>
   b6fb8:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6fba:	071a      	lsls	r2, r3, #28
   b6fbc:	d413      	bmi.n	b6fe6 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6fbe:	b964      	cbnz	r4, b6fda <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6fc0:	9400      	str	r4, [sp, #0]
   b6fc2:	4653      	mov	r3, sl
   b6fc4:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6fc8:	4629      	mov	r1, r5
   b6fca:	4638      	mov	r0, r7
   b6fcc:	f7ff ff6d 	bl	b6eaa <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6fd0:	b002      	add	sp, #8
   b6fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6fd6:	2400      	movs	r4, #0
   b6fd8:	e7e1      	b.n	b6f9e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6fda:	f000 f971 	bl	b72c0 <_ZN7FatFile11lfnChecksumEPh>
   b6fde:	4540      	cmp	r0, r8
   b6fe0:	d0ee      	beq.n	b6fc0 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6fe2:	2000      	movs	r0, #0
   b6fe4:	e7f4      	b.n	b6fd0 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6fe6:	2b0f      	cmp	r3, #15
   b6fe8:	d1f5      	bne.n	b6fd6 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6fea:	0673      	lsls	r3, r6, #25
   b6fec:	d5d7      	bpl.n	b6f9e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6fee:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6ff2:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6ff6:	e7d2      	b.n	b6f9e <_ZN7FatFile8openNextEPS_i+0x20>

000b6ff8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6ff8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6ffa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6ffc:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6ffe:	b90b      	cbnz	r3, b7004 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7000:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7002:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7004:	7883      	ldrb	r3, [r0, #2]
   b7006:	075a      	lsls	r2, r3, #29
   b7008:	d523      	bpl.n	b7052 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b700a:	2101      	movs	r1, #1
   b700c:	f7ff fdea 	bl	b6be4 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7010:	4605      	mov	r5, r0
   b7012:	b928      	cbnz	r0, b7020 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7014:	7863      	ldrb	r3, [r4, #1]
   b7016:	f043 0301 	orr.w	r3, r3, #1
   b701a:	7063      	strb	r3, [r4, #1]
  return false;
   b701c:	2000      	movs	r0, #0
   b701e:	e7f0      	b.n	b7002 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7020:	7803      	ldrb	r3, [r0, #0]
   b7022:	2be5      	cmp	r3, #229	; 0xe5
   b7024:	d0f6      	beq.n	b7014 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b7026:	7823      	ldrb	r3, [r4, #0]
   b7028:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b702a:	bf44      	itt	mi
   b702c:	69e3      	ldrmi	r3, [r4, #28]
   b702e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7030:	6a23      	ldr	r3, [r4, #32]
   b7032:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7034:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b7036:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b7038:	4b09      	ldr	r3, [pc, #36]	; (b7060 <_ZN7FatFile4syncEv+0x68>)
   b703a:	681b      	ldr	r3, [r3, #0]
   b703c:	b12b      	cbz	r3, b704a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b703e:	f100 0116 	add.w	r1, r0, #22
   b7042:	3018      	adds	r0, #24
   b7044:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b7046:	8b2b      	ldrh	r3, [r5, #24]
   b7048:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b704a:	78a3      	ldrb	r3, [r4, #2]
   b704c:	f023 0304 	bic.w	r3, r3, #4
   b7050:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b7052:	68a0      	ldr	r0, [r4, #8]
   b7054:	f7ff fd70 	bl	b6b38 <_ZN9FatVolume9cacheSyncEv>
   b7058:	2800      	cmp	r0, #0
   b705a:	d0db      	beq.n	b7014 <_ZN7FatFile4syncEv+0x1c>
   b705c:	e7d0      	b.n	b7000 <_ZN7FatFile4syncEv+0x8>
   b705e:	bf00      	nop
   b7060:	2003e610 	.word	0x2003e610

000b7064 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b7064:	b510      	push	{r4, lr}
   b7066:	4604      	mov	r4, r0
  bool rtn = sync();
   b7068:	f7ff ffc6 	bl	b6ff8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b706c:	2300      	movs	r3, #0
   b706e:	7023      	strb	r3, [r4, #0]
}
   b7070:	bd10      	pop	{r4, pc}

000b7072 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7072:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7074:	b093      	sub	sp, #76	; 0x4c
   b7076:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7078:	2300      	movs	r3, #0
   b707a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b707c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b707e:	9201      	str	r2, [sp, #4]
   b7080:	4606      	mov	r6, r0
   b7082:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7084:	b113      	cbz	r3, b708c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b7086:	2000      	movs	r0, #0
}
   b7088:	b013      	add	sp, #76	; 0x4c
   b708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b708c:	780b      	ldrb	r3, [r1, #0]
   b708e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7092:	d0f8      	beq.n	b7086 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7094:	7813      	ldrb	r3, [r2, #0]
   b7096:	2b2f      	cmp	r3, #47	; 0x2f
   b7098:	d112      	bne.n	b70c0 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b709a:	9a01      	ldr	r2, [sp, #4]
   b709c:	7813      	ldrb	r3, [r2, #0]
   b709e:	2b2f      	cmp	r3, #47	; 0x2f
   b70a0:	d102      	bne.n	b70a8 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b70a2:	3201      	adds	r2, #1
   b70a4:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b70a6:	e7f8      	b.n	b709a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b70a8:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b70aa:	b91b      	cbnz	r3, b70b4 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b70ac:	4630      	mov	r0, r6
   b70ae:	f7ff fdd3 	bl	b6c58 <_ZN7FatFile8openRootEP9FatVolume>
   b70b2:	e7e9      	b.n	b7088 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b70b4:	a809      	add	r0, sp, #36	; 0x24
   b70b6:	f7ff fd29 	bl	b6b0c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b70ba:	2800      	cmp	r0, #0
   b70bc:	d0e3      	beq.n	b7086 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b70be:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b70c0:	9801      	ldr	r0, [sp, #4]
   b70c2:	aa01      	add	r2, sp, #4
   b70c4:	a903      	add	r1, sp, #12
   b70c6:	f000 f98f 	bl	b73e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b70ca:	2800      	cmp	r0, #0
   b70cc:	d0db      	beq.n	b7086 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b70ce:	9b01      	ldr	r3, [sp, #4]
   b70d0:	781b      	ldrb	r3, [r3, #0]
   b70d2:	b19b      	cbz	r3, b70fc <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b70d4:	2300      	movs	r3, #0
   b70d6:	aa03      	add	r2, sp, #12
   b70d8:	4621      	mov	r1, r4
   b70da:	4630      	mov	r0, r6
   b70dc:	f000 fab6 	bl	b764c <_ZN7FatFile4openEPS_P7fname_ti>
   b70e0:	2800      	cmp	r0, #0
   b70e2:	d0d0      	beq.n	b7086 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b70e4:	4635      	mov	r5, r6
   b70e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70e8:	ac09      	add	r4, sp, #36	; 0x24
   b70ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70f0:	682b      	ldr	r3, [r5, #0]
   b70f2:	6023      	str	r3, [r4, #0]
    close();
   b70f4:	4630      	mov	r0, r6
   b70f6:	f7ff ffb5 	bl	b7064 <_ZN7FatFile5closeEv>
  while (1) {
   b70fa:	e7e0      	b.n	b70be <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b70fc:	463b      	mov	r3, r7
   b70fe:	aa03      	add	r2, sp, #12
   b7100:	4621      	mov	r1, r4
   b7102:	4630      	mov	r0, r6
   b7104:	f000 faa2 	bl	b764c <_ZN7FatFile4openEPS_P7fname_ti>
   b7108:	e7be      	b.n	b7088 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b710c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b710c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7110:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7112:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7114:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7116:	4604      	mov	r4, r0
   b7118:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b711a:	d55b      	bpl.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
   b711c:	7883      	ldrb	r3, [r0, #2]
   b711e:	079a      	lsls	r2, r3, #30
   b7120:	d558      	bpl.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b7122:	071b      	lsls	r3, r3, #28
   b7124:	d451      	bmi.n	b71ca <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b7126:	6963      	ldr	r3, [r4, #20]
   b7128:	43db      	mvns	r3, r3
   b712a:	42bb      	cmp	r3, r7
   b712c:	d352      	bcc.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
   b712e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7130:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7134:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b7136:	f1b8 0f00 	cmp.w	r8, #0
   b713a:	f000 8091 	beq.w	b7260 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b713e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7140:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7142:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b7146:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b714a:	d10e      	bne.n	b716a <_ZN7FatFile5writeEPKvj+0x5e>
   b714c:	b96d      	cbnz	r5, b716a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b714e:	6921      	ldr	r1, [r4, #16]
   b7150:	2900      	cmp	r1, #0
   b7152:	d046      	beq.n	b71e2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7154:	4652      	mov	r2, sl
   b7156:	f000 fcab 	bl	b7ab0 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b715a:	2800      	cmp	r0, #0
   b715c:	db3a      	blt.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b715e:	d104      	bne.n	b716a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7160:	4620      	mov	r0, r4
   b7162:	f7ff fcf6 	bl	b6b52 <_ZN7FatFile10addClusterEv>
   b7166:	2800      	cmp	r0, #0
   b7168:	d034      	beq.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b716a:	6921      	ldr	r1, [r4, #16]
   b716c:	68a0      	ldr	r0, [r4, #8]
   b716e:	f000 fc99 	bl	b7aa4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7172:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7174:	68a0      	ldr	r0, [r4, #8]
   b7176:	b915      	cbnz	r5, b717e <_ZN7FatFile5writeEPKvj+0x72>
   b7178:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b717c:	d23f      	bcs.n	b71fe <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b717e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7182:	4546      	cmp	r6, r8
   b7184:	bf28      	it	cs
   b7186:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7188:	2d00      	cmp	r5, #0
   b718a:	d136      	bne.n	b71fa <_ZN7FatFile5writeEPKvj+0xee>
   b718c:	6962      	ldr	r2, [r4, #20]
   b718e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7190:	429a      	cmp	r2, r3
   b7192:	bf34      	ite	cc
   b7194:	2201      	movcc	r2, #1
   b7196:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7198:	3024      	adds	r0, #36	; 0x24
   b719a:	f000 fc60 	bl	b7a5e <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b719e:	b1c8      	cbz	r0, b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b71a0:	4428      	add	r0, r5
   b71a2:	4632      	mov	r2, r6
   b71a4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b71a6:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b71a8:	f00d fa56 	bl	c4658 <memcpy>
      if (512 == (n + blockOffset)) {
   b71ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b71b0:	d104      	bne.n	b71bc <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b71b2:	68a0      	ldr	r0, [r4, #8]
   b71b4:	3024      	adds	r0, #36	; 0x24
   b71b6:	f000 fc2a 	bl	b7a0e <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b71ba:	b158      	cbz	r0, b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b71bc:	6963      	ldr	r3, [r4, #20]
   b71be:	4433      	add	r3, r6
   b71c0:	6163      	str	r3, [r4, #20]
    src += n;
   b71c2:	44b1      	add	r9, r6
    nToWrite -= n;
   b71c4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b71c8:	e7b4      	b.n	b7134 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b71ca:	69c1      	ldr	r1, [r0, #28]
   b71cc:	f7ff fe2a 	bl	b6e24 <_ZN7FatFile7seekSetEm>
   b71d0:	2800      	cmp	r0, #0
   b71d2:	d1a8      	bne.n	b7126 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b71d4:	7863      	ldrb	r3, [r4, #1]
   b71d6:	f043 0301 	orr.w	r3, r3, #1
   b71da:	7063      	strb	r3, [r4, #1]
  return -1;
   b71dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b71e0:	e050      	b.n	b7284 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b71e2:	6a23      	ldr	r3, [r4, #32]
   b71e4:	b93b      	cbnz	r3, b71f6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b71e6:	4620      	mov	r0, r4
   b71e8:	f7ff fcb3 	bl	b6b52 <_ZN7FatFile10addClusterEv>
   b71ec:	2800      	cmp	r0, #0
   b71ee:	d0f1      	beq.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b71f0:	6923      	ldr	r3, [r4, #16]
   b71f2:	6223      	str	r3, [r4, #32]
   b71f4:	e7b9      	b.n	b716a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b71f6:	6123      	str	r3, [r4, #16]
   b71f8:	e7b7      	b.n	b716a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b71fa:	2201      	movs	r2, #1
   b71fc:	e7cc      	b.n	b7198 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b71fe:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7202:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7204:	d31b      	bcc.n	b723e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7206:	f890 c004 	ldrb.w	ip, [r0, #4]
   b720a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b720e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7210:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7214:	4573      	cmp	r3, lr
   b7216:	bf28      	it	cs
   b7218:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b721a:	4291      	cmp	r1, r2
      n = 512*nb;
   b721c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7220:	d307      	bcc.n	b7232 <_ZN7FatFile5writeEPKvj+0x126>
   b7222:	441a      	add	r2, r3
   b7224:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7226:	bf82      	ittt	hi
   b7228:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b722c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7230:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7232:	68a5      	ldr	r5, [r4, #8]
   b7234:	464a      	mov	r2, r9
   b7236:	6828      	ldr	r0, [r5, #0]
   b7238:	f000 fff3 	bl	b8222 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b723c:	e7bd      	b.n	b71ba <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b723e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7240:	bf02      	ittt	eq
   b7242:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b7246:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b724a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b724c:	68a3      	ldr	r3, [r4, #8]
   b724e:	464a      	mov	r2, r9
   b7250:	6818      	ldr	r0, [r3, #0]
   b7252:	f000 ff70 	bl	b8136 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b7256:	2800      	cmp	r0, #0
   b7258:	d0bc      	beq.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b725a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b725e:	e7ad      	b.n	b71bc <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7260:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7262:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7264:	42b2      	cmp	r2, r6
   b7266:	d204      	bcs.n	b7272 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b7268:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b726a:	f043 0304 	orr.w	r3, r3, #4
   b726e:	70a3      	strb	r3, [r4, #2]
   b7270:	e003      	b.n	b727a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7272:	4a08      	ldr	r2, [pc, #32]	; (b7294 <_ZN7FatFile5writeEPKvj+0x188>)
   b7274:	6812      	ldr	r2, [r2, #0]
   b7276:	2a00      	cmp	r2, #0
   b7278:	d1f7      	bne.n	b726a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b727a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b727e:	2b00      	cmp	r3, #0
   b7280:	db02      	blt.n	b7288 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7282:	4638      	mov	r0, r7
}
   b7284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7288:	4620      	mov	r0, r4
   b728a:	f7ff feb5 	bl	b6ff8 <_ZN7FatFile4syncEv>
   b728e:	2800      	cmp	r0, #0
   b7290:	d1f7      	bne.n	b7282 <_ZN7FatFile5writeEPKvj+0x176>
   b7292:	e79f      	b.n	b71d4 <_ZN7FatFile5writeEPKvj+0xc8>
   b7294:	2003e610 	.word	0x2003e610

000b7298 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7298:	2904      	cmp	r1, #4
   b729a:	d804      	bhi.n	b72a6 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b729c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b72a0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b72a4:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b72a6:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b72a8:	bf9b      	ittet	ls
   b72aa:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b72ae:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b72b2:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b72b4:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b72b6:	bf84      	itt	hi
   b72b8:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b72bc:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b72be:	4770      	bx	lr

000b72c0 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b72c0:	1e41      	subs	r1, r0, #1
   b72c2:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b72c6:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b72c8:	0842      	lsrs	r2, r0, #1
   b72ca:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b72ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b72d2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b72d6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b72d8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b72da:	d1f5      	bne.n	b72c8 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b72dc:	4770      	bx	lr

000b72de <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b72de:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b72e0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b72e2:	4604      	mov	r4, r0
   b72e4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b72e6:	b923      	cbnz	r3, b72f2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b72e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b72ec:	6889      	ldr	r1, [r1, #8]
   b72ee:	f7ff bcb3 	b.w	b6c58 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b72f2:	2224      	movs	r2, #36	; 0x24
   b72f4:	2100      	movs	r1, #0
   b72f6:	f00d f9d7 	bl	c46a8 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b72fa:	2310      	movs	r3, #16
  m_flags = F_READ;
   b72fc:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b72fe:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7300:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b7302:	68ab      	ldr	r3, [r5, #8]
   b7304:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7306:	68eb      	ldr	r3, [r5, #12]
   b7308:	6223      	str	r3, [r4, #32]
}
   b730a:	bd38      	pop	{r3, r4, r5, pc}

000b730c <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7310:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b7312:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7314:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b7318:	4606      	mov	r6, r0
   b731a:	460f      	mov	r7, r1
   b731c:	4690      	mov	r8, r2
   b731e:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b7322:	2b00      	cmp	r3, #0
   b7324:	d05d      	beq.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
   b7326:	2a0c      	cmp	r2, #12
   b7328:	d95b      	bls.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b732a:	78c3      	ldrb	r3, [r0, #3]
   b732c:	b933      	cbnz	r3, b733c <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b732e:	f000 fb57 	bl	b79e0 <_ZN7FatFile6getSFNEPc>
   b7332:	4604      	mov	r4, r0
}
   b7334:	4620      	mov	r0, r4
   b7336:	b00d      	add	sp, #52	; 0x34
   b7338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b733c:	4601      	mov	r1, r0
   b733e:	a803      	add	r0, sp, #12
   b7340:	f7ff ffcd 	bl	b72de <_ZN7FatFile11openClusterEPS_>
   b7344:	2800      	cmp	r0, #0
   b7346:	d04c      	beq.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b7348:	eb07 0308 	add.w	r3, r7, r8
   b734c:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7350:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b7354:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b7356:	78f3      	ldrb	r3, [r6, #3]
   b7358:	fa5f f58b 	uxtb.w	r5, fp
   b735c:	42ab      	cmp	r3, r5
   b735e:	d340      	bcc.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b7360:	88b1      	ldrh	r1, [r6, #4]
   b7362:	eba1 010b 	sub.w	r1, r1, fp
   b7366:	0149      	lsls	r1, r1, #5
   b7368:	a803      	add	r0, sp, #12
   b736a:	f7ff fd5b 	bl	b6e24 <_ZN7FatFile7seekSetEm>
   b736e:	4604      	mov	r4, r0
   b7370:	2800      	cmp	r0, #0
   b7372:	d036      	beq.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b7374:	2100      	movs	r1, #0
   b7376:	a803      	add	r0, sp, #12
   b7378:	f7ff fd35 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b737c:	4603      	mov	r3, r0
   b737e:	b380      	cbz	r0, b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b7380:	7ac2      	ldrb	r2, [r0, #11]
   b7382:	2a0f      	cmp	r2, #15
   b7384:	d12d      	bne.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b7386:	7802      	ldrb	r2, [r0, #0]
   b7388:	f002 021f 	and.w	r2, r2, #31
   b738c:	42aa      	cmp	r2, r5
   b738e:	d128      	bne.n	b73e2 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7390:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b7394:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b7398:	197a      	adds	r2, r7, r5
   b739a:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b739c:	4618      	mov	r0, r3
   b739e:	9101      	str	r1, [sp, #4]
   b73a0:	f7ff ff7a 	bl	b7298 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b73a4:	b168      	cbz	r0, b73c2 <_ZN7FatFile7getNameEPcj+0xb6>
   b73a6:	45a8      	cmp	r8, r5
   b73a8:	d912      	bls.n	b73d0 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b73aa:	9901      	ldr	r1, [sp, #4]
   b73ac:	3101      	adds	r1, #1
   b73ae:	287f      	cmp	r0, #127	; 0x7f
   b73b0:	b2c9      	uxtb	r1, r1
   b73b2:	bf28      	it	cs
   b73b4:	203f      	movcs	r0, #63	; 0x3f
   b73b6:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b73b8:	f802 0b01 	strb.w	r0, [r2], #1
   b73bc:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b73c0:	d1ec      	bne.n	b739c <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b73c2:	45a8      	cmp	r8, r5
   b73c4:	d904      	bls.n	b73d0 <_ZN7FatFile7getNameEPcj+0xc4>
   b73c6:	781a      	ldrb	r2, [r3, #0]
   b73c8:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b73ca:	bf48      	it	mi
   b73cc:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b73d0:	9a00      	ldr	r2, [sp, #0]
   b73d2:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b73d6:	781b      	ldrb	r3, [r3, #0]
   b73d8:	065b      	lsls	r3, r3, #25
   b73da:	f10b 0b01 	add.w	fp, fp, #1
   b73de:	d5ba      	bpl.n	b7356 <_ZN7FatFile7getNameEPcj+0x4a>
   b73e0:	e7a8      	b.n	b7334 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b73e2:	2400      	movs	r4, #0
   b73e4:	703c      	strb	r4, [r7, #0]
  return false;
   b73e6:	e7a5      	b.n	b7334 <_ZN7FatFile7getNameEPcj+0x28>

000b73e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b73e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b73ec:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b73ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   b73f2:	2b20      	cmp	r3, #32
   b73f4:	d0fa      	beq.n	b73ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b73f6:	4d6a      	ldr	r5, [pc, #424]	; (b75a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b73f8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b73fa:	2400      	movs	r4, #0
    c = path[len];
   b73fc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b73fe:	b1c3      	cbz	r3, b7432 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7400:	2b2f      	cmp	r3, #47	; 0x2f
   b7402:	d016      	beq.n	b7432 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7404:	2b5c      	cmp	r3, #92	; 0x5c
   b7406:	d102      	bne.n	b740e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7408:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b740e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7412:	b2c0      	uxtb	r0, r0
   b7414:	281d      	cmp	r0, #29
   b7416:	d803      	bhi.n	b7420 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7418:	fa25 f000 	lsr.w	r0, r5, r0
   b741c:	07c0      	lsls	r0, r0, #31
   b741e:	d4f3      	bmi.n	b7408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b7420:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b7424:	283c      	cmp	r0, #60	; 0x3c
   b7426:	d0ef      	beq.n	b7408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b7428:	3b20      	subs	r3, #32
   b742a:	2b5e      	cmp	r3, #94	; 0x5e
   b742c:	d8ec      	bhi.n	b7408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b742e:	3401      	adds	r4, #1
    c = path[len];
   b7430:	e7e4      	b.n	b73fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b7432:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b7434:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b7436:	4607      	mov	r7, r0
   b7438:	f810 5b01 	ldrb.w	r5, [r0], #1
   b743c:	2d20      	cmp	r5, #32
   b743e:	d0fa      	beq.n	b7436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b7440:	2d2f      	cmp	r5, #47	; 0x2f
   b7442:	d0f8      	beq.n	b7436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b7444:	6017      	str	r7, [r2, #0]
  while (len) {
   b7446:	b14c      	cbz	r4, b745c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b7448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b744c:	2a2e      	cmp	r2, #46	; 0x2e
   b744e:	d001      	beq.n	b7454 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b7450:	2a20      	cmp	r2, #32
   b7452:	d101      	bne.n	b7458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b7454:	3c01      	subs	r4, #1
  while (len) {
   b7456:	e7f6      	b.n	b7446 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b7458:	2cff      	cmp	r4, #255	; 0xff
   b745a:	dcd5      	bgt.n	b7408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b745c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b7460:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b7464:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b7466:	f8c1 300d 	str.w	r3, [r1, #13]
   b746a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b746c:	f04f 0800 	mov.w	r8, #0
   b7470:	f816 3008 	ldrb.w	r3, [r6, r8]
   b7474:	2b2e      	cmp	r3, #46	; 0x2e
   b7476:	d001      	beq.n	b747c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b7478:	2b20      	cmp	r3, #32
   b747a:	d102      	bne.n	b7482 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b747c:	f108 0801 	add.w	r8, r8, #1
   b7480:	e7f6      	b.n	b7470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7482:	fab8 f088 	clz	r0, r8
   b7486:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7488:	1e65      	subs	r5, r4, #1
   b748a:	1c6b      	adds	r3, r5, #1
   b748c:	d002      	beq.n	b7494 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b748e:	5d73      	ldrb	r3, [r6, r5]
   b7490:	2b2e      	cmp	r3, #46	; 0x2e
   b7492:	d114      	bne.n	b74be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7494:	f04f 0900 	mov.w	r9, #0
   b7498:	2707      	movs	r7, #7
   b749a:	464a      	mov	r2, r9
   b749c:	46ca      	mov	sl, r9
   b749e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b74a2:	45a0      	cmp	r8, r4
   b74a4:	da68      	bge.n	b7578 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b74a6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b74aa:	2b20      	cmp	r3, #32
   b74ac:	d003      	beq.n	b74b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b74ae:	2b2e      	cmp	r3, #46	; 0x2e
   b74b0:	d107      	bne.n	b74c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b74b2:	45a8      	cmp	r8, r5
   b74b4:	d012      	beq.n	b74dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b74b6:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b74b8:	f108 0801 	add.w	r8, r8, #1
   b74bc:	e7f1      	b.n	b74a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b74be:	3d01      	subs	r5, #1
   b74c0:	e7e3      	b.n	b748a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b74c2:	2b22      	cmp	r3, #34	; 0x22
   b74c4:	d008      	beq.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b74c6:	2b7c      	cmp	r3, #124	; 0x7c
   b74c8:	d006      	beq.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b74ca:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b74ce:	f1bc 0f05 	cmp.w	ip, #5
   b74d2:	d80a      	bhi.n	b74ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b74d4:	2b2d      	cmp	r3, #45	; 0x2d
   b74d6:	d012      	beq.n	b74fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b74d8:	45a8      	cmp	r8, r5
   b74da:	d15b      	bne.n	b7594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b74dc:	2f0a      	cmp	r7, #10
   b74de:	d04a      	beq.n	b7576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b74e0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b74e2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b74e4:	f04f 0e10 	mov.w	lr, #16
   b74e8:	e7e6      	b.n	b74b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b74ea:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b74ee:	f1bc 0f05 	cmp.w	ip, #5
   b74f2:	d9f1      	bls.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b74f4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b74f8:	f1bc 0f02 	cmp.w	ip, #2
   b74fc:	d9ec      	bls.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b74fe:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7502:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b7506:	d8e7      	bhi.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7508:	45a8      	cmp	r8, r5
   b750a:	d0e7      	beq.n	b74dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b750c:	42ba      	cmp	r2, r7
   b750e:	d830      	bhi.n	b7572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7510:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7514:	f1bc 0f19 	cmp.w	ip, #25
   b7518:	d81a      	bhi.n	b7550 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b751a:	3b20      	subs	r3, #32
        lc |= bit;
   b751c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b7520:	b2db      	uxtb	r3, r3
        lc |= bit;
   b7522:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b7526:	f102 0c01 	add.w	ip, r2, #1
   b752a:	fa5f fc8c 	uxtb.w	ip, ip
   b752e:	440a      	add	r2, r1
      if (i < 7) {
   b7530:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b7534:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b7536:	d801      	bhi.n	b753c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b7538:	f881 c00c 	strb.w	ip, [r1, #12]
   b753c:	4662      	mov	r2, ip
   b753e:	e7bb      	b.n	b74b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b7540:	45a8      	cmp	r8, r5
   b7542:	dc18      	bgt.n	b7576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b7544:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b7546:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7548:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b754a:	f04f 0e10 	mov.w	lr, #16
   b754e:	e7b2      	b.n	b74b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b7550:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b7554:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b7558:	bf98      	it	ls
   b755a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b755e:	e7e2      	b.n	b7526 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b7560:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b7562:	2001      	movs	r0, #1
   b7564:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b7566:	4419      	add	r1, r3
   b7568:	237e      	movs	r3, #126	; 0x7e
   b756a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b756c:	2331      	movs	r3, #49	; 0x31
   b756e:	738b      	strb	r3, [r1, #14]
   b7570:	e74b      	b.n	b740a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b7572:	2f0a      	cmp	r7, #10
   b7574:	d1e4      	bne.n	b7540 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b7576:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b7578:	7b4b      	ldrb	r3, [r1, #13]
   b757a:	2b20      	cmp	r3, #32
   b757c:	f43f af44 	beq.w	b7408 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7580:	2800      	cmp	r0, #0
   b7582:	d0ed      	beq.n	b7560 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7584:	ea1a 0f09 	tst.w	sl, r9
   b7588:	bf18      	it	ne
   b758a:	f04f 0902 	movne.w	r9, #2
   b758e:	f881 9000 	strb.w	r9, [r1]
   b7592:	e73a      	b.n	b740a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7594:	42ba      	cmp	r2, r7
   b7596:	d8ec      	bhi.n	b7572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7598:	2000      	movs	r0, #0
      c = '_';
   b759a:	235f      	movs	r3, #95	; 0x5f
   b759c:	e7c3      	b.n	b7526 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b759e:	bf00      	nop
   b75a0:	31000101 	.word	0x31000101

000b75a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b75a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b75a8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b75ac:	4606      	mov	r6, r0
   b75ae:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b75b0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b75b2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b75b4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b75b8:	6861      	ldr	r1, [r4, #4]
   b75ba:	68a2      	ldr	r2, [r4, #8]
   b75bc:	186b      	adds	r3, r5, r1
   b75be:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b75c0:	4411      	add	r1, r2
   b75c2:	4291      	cmp	r1, r2
   b75c4:	d006      	beq.n	b75d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b75c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b75ca:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b75ce:	4043      	eors	r3, r0
   b75d0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b75d2:	e7f6      	b.n	b75c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b75d4:	f1b9 0f03 	cmp.w	r9, #3
   b75d8:	bf28      	it	cs
   b75da:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b75de:	f109 0204 	add.w	r2, r9, #4
   b75e2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b75e4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b75e8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b75ea:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b75ec:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b75ee:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b75f0:	bf94      	ite	ls
   b75f2:	3130      	addls	r1, #48	; 0x30
   b75f4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b75f6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b75f8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b75fa:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b75fe:	d1f1      	bne.n	b75e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7600:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7604:	2100      	movs	r1, #0
   b7606:	735f      	strb	r7, [r3, #13]
   b7608:	4630      	mov	r0, r6
   b760a:	f7ff fc0b 	bl	b6e24 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b760e:	2101      	movs	r1, #1
   b7610:	4630      	mov	r0, r6
   b7612:	f7ff fbe8 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7616:	4601      	mov	r1, r0
   b7618:	b928      	cbnz	r0, b7626 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b761a:	7870      	ldrb	r0, [r6, #1]
   b761c:	fab0 f080 	clz	r0, r0
   b7620:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b7622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b7626:	7803      	ldrb	r3, [r0, #0]
   b7628:	b16b      	cbz	r3, b7646 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b762a:	7ac3      	ldrb	r3, [r0, #11]
   b762c:	071b      	lsls	r3, r3, #28
   b762e:	d4ee      	bmi.n	b760e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b7630:	220b      	movs	r2, #11
   b7632:	4640      	mov	r0, r8
   b7634:	f00d f800 	bl	c4638 <memcmp>
   b7638:	2800      	cmp	r0, #0
   b763a:	d1e8      	bne.n	b760e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b763c:	3501      	adds	r5, #1
   b763e:	b2ad      	uxth	r5, r5
   b7640:	2d64      	cmp	r5, #100	; 0x64
   b7642:	d1b9      	bne.n	b75b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7644:	e7ed      	b.n	b7622 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7646:	2001      	movs	r0, #1
   b7648:	e7eb      	b.n	b7622 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b764c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7650:	ed2d 8b02 	vpush	{d8}
   b7654:	b08b      	sub	sp, #44	; 0x2c
   b7656:	460d      	mov	r5, r1
   b7658:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b765a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b765c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b765e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7662:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7664:	d105      	bne.n	b7672 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7666:	2000      	movs	r0, #0
}
   b7668:	b00b      	add	sp, #44	; 0x2c
   b766a:	ecbd 8b02 	vpop	{d8}
   b766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b7672:	9b07      	ldr	r3, [sp, #28]
   b7674:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7676:	2b00      	cmp	r3, #0
   b7678:	d1f5      	bne.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b767a:	6853      	ldr	r3, [r2, #4]
   b767c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b767e:	7813      	ldrb	r3, [r2, #0]
   b7680:	079c      	lsls	r4, r3, #30
   b7682:	bf1f      	itttt	ne
   b7684:	9b05      	ldrne	r3, [sp, #20]
   b7686:	330c      	addne	r3, #12
   b7688:	220d      	movne	r2, #13
   b768a:	fbb3 f3f2 	udivne	r3, r3, r2
   b768e:	bf1a      	itte	ne
   b7690:	3301      	addne	r3, #1
   b7692:	b2db      	uxtbne	r3, r3
   b7694:	2301      	moveq	r3, #1
    seekSet(0);
   b7696:	2100      	movs	r1, #0
   b7698:	4628      	mov	r0, r5
   b769a:	9303      	str	r3, [sp, #12]
   b769c:	f7ff fbc2 	bl	b6e24 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b76a0:	f107 030d 	add.w	r3, r7, #13
  }
   b76a4:	f04f 0b00 	mov.w	fp, #0
   b76a8:	ee08 3a10 	vmov	s16, r3
   b76ac:	46da      	mov	sl, fp
   b76ae:	465c      	mov	r4, fp
   b76b0:	465e      	mov	r6, fp
   b76b2:	f8cd b010 	str.w	fp, [sp, #16]
   b76b6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b76b8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b76ba:	2101      	movs	r1, #1
   b76bc:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b76be:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b76c2:	f7ff fb90 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b76c6:	4603      	mov	r3, r0
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d171      	bne.n	b77b0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b76cc:	786b      	ldrb	r3, [r5, #1]
   b76ce:	2b00      	cmp	r3, #0
   b76d0:	d1c9      	bne.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b76d2:	9b06      	ldr	r3, [sp, #24]
   b76d4:	059a      	lsls	r2, r3, #22
   b76d6:	d5c6      	bpl.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b76d8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b76dc:	3b01      	subs	r3, #1
   b76de:	2b01      	cmp	r3, #1
   b76e0:	d8c1      	bhi.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b76e2:	9b04      	ldr	r3, [sp, #16]
   b76e4:	2c00      	cmp	r4, #0
   b76e6:	bf08      	it	eq
   b76e8:	4643      	moveq	r3, r8
   b76ea:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b76ec:	9b03      	ldr	r3, [sp, #12]
   b76ee:	429c      	cmp	r4, r3
   b76f0:	f0c0 80f1 	bcc.w	b78d6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b76f4:	f1b9 0f00 	cmp.w	r9, #0
   b76f8:	f040 810a 	bne.w	b7910 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b76fc:	9b04      	ldr	r3, [sp, #16]
   b76fe:	4628      	mov	r0, r5
   b7700:	0159      	lsls	r1, r3, #5
   b7702:	f7ff fb8f 	bl	b6e24 <_ZN7FatFile7seekSetEm>
   b7706:	2800      	cmp	r0, #0
   b7708:	d0ad      	beq.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b770a:	9b03      	ldr	r3, [sp, #12]
   b770c:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7710:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7714:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7716:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b771a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b771e:	2e00      	cmp	r6, #0
   b7720:	f000 810d 	beq.w	b793e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7724:	2100      	movs	r1, #0
   b7726:	4628      	mov	r0, r5
   b7728:	f7ff fb5d 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b772c:	4604      	mov	r4, r0
   b772e:	2800      	cmp	r0, #0
   b7730:	d099      	beq.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b7732:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7734:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b7738:	454e      	cmp	r6, r9
   b773a:	f043 0301 	orr.w	r3, r3, #1
   b773e:	bf0c      	ite	eq
   b7740:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7744:	46b3      	movne	fp, r6
   b7746:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b774a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b774e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b7752:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7756:	f107 000d 	add.w	r0, r7, #13
   b775a:	f7ff fdb1 	bl	b72c0 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b775e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7762:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7764:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7768:	f00b 031f 	and.w	r3, fp, #31
   b776c:	220d      	movs	r2, #13
   b776e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7770:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7774:	4353      	muls	r3, r2
   b7776:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7778:	9905      	ldr	r1, [sp, #20]
   b777a:	4299      	cmp	r1, r3
   b777c:	f240 80d0 	bls.w	b7920 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7780:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7784:	2a04      	cmp	r2, #4
   b7786:	fa5f fe82 	uxtb.w	lr, r2
   b778a:	f102 0001 	add.w	r0, r2, #1
   b778e:	f200 80cd 	bhi.w	b792c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7792:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7796:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b779a:	280d      	cmp	r0, #13
   b779c:	f103 0301 	add.w	r3, r3, #1
   b77a0:	4602      	mov	r2, r0
   b77a2:	d1e9      	bne.n	b7778 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b77a4:	3e01      	subs	r6, #1
   b77a6:	b2f6      	uxtb	r6, r6
   b77a8:	e7b9      	b.n	b771e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b77aa:	f04f 0901 	mov.w	r9, #1
   b77ae:	e783      	b.n	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b77b0:	7802      	ldrb	r2, [r0, #0]
   b77b2:	2ae5      	cmp	r2, #229	; 0xe5
   b77b4:	d000      	beq.n	b77b8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b77b6:	b97a      	cbnz	r2, b77d8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b77b8:	9904      	ldr	r1, [sp, #16]
   b77ba:	2c00      	cmp	r4, #0
   b77bc:	bf08      	it	eq
   b77be:	4641      	moveq	r1, r8
   b77c0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b77c2:	9903      	ldr	r1, [sp, #12]
   b77c4:	428c      	cmp	r4, r1
        freeFound++;
   b77c6:	bf3c      	itt	cc
   b77c8:	3401      	addcc	r4, #1
   b77ca:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b77cc:	2a00      	cmp	r2, #0
   b77ce:	d080      	beq.n	b76d2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b77d0:	2ae5      	cmp	r2, #229	; 0xe5
   b77d2:	d105      	bne.n	b77e0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b77d4:	2600      	movs	r6, #0
   b77d6:	e76f      	b.n	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b77d8:	9903      	ldr	r1, [sp, #12]
   b77da:	428c      	cmp	r4, r1
   b77dc:	bf38      	it	cc
   b77de:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b77e0:	2a2e      	cmp	r2, #46	; 0x2e
   b77e2:	d0f7      	beq.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b77e4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b77e6:	290f      	cmp	r1, #15
   b77e8:	d14a      	bne.n	b7880 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b77ea:	bb16      	cbnz	r6, b7832 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b77ec:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b77f0:	f43f af62 	beq.w	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b77f4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b77f8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b77fc:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b77fe:	220d      	movs	r2, #13
   b7800:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7804:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7808:	9a05      	ldr	r2, [sp, #20]
   b780a:	4542      	cmp	r2, r8
   b780c:	d9e2      	bls.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b780e:	eba2 0208 	sub.w	r2, r2, r8
   b7812:	9208      	str	r2, [sp, #32]
   b7814:	2200      	movs	r2, #0
   b7816:	eb02 0108 	add.w	r1, r2, r8
   b781a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b781c:	4618      	mov	r0, r3
   b781e:	b2d1      	uxtb	r1, r2
   b7820:	f7ff fd3a 	bl	b7298 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7824:	9908      	ldr	r1, [sp, #32]
   b7826:	428a      	cmp	r2, r1
   b7828:	d10d      	bne.n	b7846 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b782a:	2800      	cmp	r0, #0
   b782c:	bf18      	it	ne
   b782e:	2600      	movne	r6, #0
   b7830:	e742      	b.n	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7832:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b7836:	fa5f fa8a 	uxtb.w	sl, sl
   b783a:	4552      	cmp	r2, sl
   b783c:	d1ca      	bne.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b783e:	7b5a      	ldrb	r2, [r3, #13]
   b7840:	455a      	cmp	r2, fp
   b7842:	d0dc      	beq.n	b77fe <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7844:	e7c6      	b.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7846:	28ff      	cmp	r0, #255	; 0xff
   b7848:	d8c4      	bhi.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b784a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b784e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7852:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7854:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7856:	bf9c      	itt	ls
   b7858:	f10e 0020 	addls.w	r0, lr, #32
   b785c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7860:	4608      	mov	r0, r1
   b7862:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7864:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7866:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b786a:	f1bc 0f19 	cmp.w	ip, #25
   b786e:	bf9c      	itt	ls
   b7870:	3120      	addls	r1, #32
   b7872:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7874:	4571      	cmp	r1, lr
   b7876:	d1ad      	bne.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7878:	3201      	adds	r2, #1
   b787a:	2a0d      	cmp	r2, #13
   b787c:	d1cb      	bne.n	b7816 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b787e:	e71b      	b.n	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7880:	0708      	lsls	r0, r1, #28
   b7882:	d4a7      	bmi.n	b77d4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7884:	b15e      	cbz	r6, b789e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7886:	f1ba 0f01 	cmp.w	sl, #1
   b788a:	f47f aeec 	bne.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b788e:	4618      	mov	r0, r3
   b7890:	f7ff fd16 	bl	b72c0 <_ZN7FatFile11lfnChecksumEPh>
   b7894:	4558      	cmp	r0, fp
   b7896:	f47f aee6 	bne.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b789a:	46b1      	mov	r9, r6
   b789c:	e00e      	b.n	b78bc <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b789e:	ee18 1a10 	vmov	r1, s16
   b78a2:	220b      	movs	r2, #11
   b78a4:	4618      	mov	r0, r3
   b78a6:	f00c fec7 	bl	c4638 <memcmp>
   b78aa:	2800      	cmp	r0, #0
   b78ac:	f47f af04 	bne.w	b76b8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b78b0:	f897 9000 	ldrb.w	r9, [r7]
   b78b4:	f019 0901 	ands.w	r9, r9, #1
   b78b8:	f47f af77 	bne.w	b77aa <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b78bc:	9b06      	ldr	r3, [sp, #24]
   b78be:	0519      	lsls	r1, r3, #20
   b78c0:	f53f aed1 	bmi.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b78c4:	9b06      	ldr	r3, [sp, #24]
   b78c6:	9807      	ldr	r0, [sp, #28]
   b78c8:	f8cd 9000 	str.w	r9, [sp]
   b78cc:	4642      	mov	r2, r8
   b78ce:	4629      	mov	r1, r5
   b78d0:	f7ff faeb 	bl	b6eaa <_ZN7FatFile15openCachedEntryEPS_tih>
   b78d4:	e6c8      	b.n	b7668 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b78d6:	2100      	movs	r1, #0
   b78d8:	4628      	mov	r0, r5
   b78da:	f7ff fa84 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b78de:	b9a0      	cbnz	r0, b790a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b78e0:	786b      	ldrb	r3, [r5, #1]
   b78e2:	2b00      	cmp	r3, #0
   b78e4:	f47f aebf 	bne.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b78e8:	4628      	mov	r0, r5
   b78ea:	f7ff f93d 	bl	b6b68 <_ZN7FatFile13addDirClusterEv>
   b78ee:	2800      	cmp	r0, #0
   b78f0:	f43f aeb9 	beq.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b78f4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b78f6:	791b      	ldrb	r3, [r3, #4]
   b78f8:	2b01      	cmp	r3, #1
   b78fa:	f63f aefb 	bhi.w	b76f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b78fe:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7900:	3410      	adds	r4, #16
   b7902:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7904:	42a3      	cmp	r3, r4
   b7906:	d8ef      	bhi.n	b78e8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7908:	e6f4      	b.n	b76f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b790a:	3401      	adds	r4, #1
   b790c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b790e:	e6ed      	b.n	b76ec <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7910:	4639      	mov	r1, r7
   b7912:	4628      	mov	r0, r5
   b7914:	f7ff fe46 	bl	b75a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7918:	2800      	cmp	r0, #0
   b791a:	f47f aeef 	bne.w	b76fc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b791e:	e6a2      	b.n	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7920:	bf14      	ite	ne
   b7922:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b7926:	2100      	moveq	r1, #0
   b7928:	b289      	uxth	r1, r1
   b792a:	e72b      	b.n	b7784 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b792c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7930:	bf94      	ite	ls
   b7932:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7936:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b793a:	8091      	strh	r1, [r2, #4]
   b793c:	e72d      	b.n	b779a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b793e:	4631      	mov	r1, r6
   b7940:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7942:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7946:	f7ff fa4e 	bl	b6de6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b794a:	4604      	mov	r4, r0
   b794c:	2800      	cmp	r0, #0
   b794e:	f43f ae8a 	beq.w	b7666 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7952:	2220      	movs	r2, #32
   b7954:	4631      	mov	r1, r6
   b7956:	f00c fea7 	bl	c46a8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b795a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b795e:	6023      	str	r3, [r4, #0]
   b7960:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7964:	6063      	str	r3, [r4, #4]
   b7966:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b796a:	8123      	strh	r3, [r4, #8]
   b796c:	7dfb      	ldrb	r3, [r7, #23]
   b796e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7970:	783b      	ldrb	r3, [r7, #0]
   b7972:	f003 0318 	and.w	r3, r3, #24
   b7976:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7978:	4b0f      	ldr	r3, [pc, #60]	; (b79b8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b797a:	681b      	ldr	r3, [r3, #0]
   b797c:	b19b      	cbz	r3, b79a6 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b797e:	f104 010e 	add.w	r1, r4, #14
   b7982:	f104 0010 	add.w	r0, r4, #16
   b7986:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7988:	8a23      	ldrh	r3, [r4, #16]
   b798a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b798c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b798e:	89e3      	ldrh	r3, [r4, #14]
   b7990:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7992:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7994:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7998:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b799c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b79a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b79a4:	e78e      	b.n	b78c4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b79a6:	2321      	movs	r3, #33	; 0x21
   b79a8:	7423      	strb	r3, [r4, #16]
   b79aa:	2328      	movs	r3, #40	; 0x28
   b79ac:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b79ae:	2308      	movs	r3, #8
   b79b0:	73a6      	strb	r6, [r4, #14]
   b79b2:	73e3      	strb	r3, [r4, #15]
   b79b4:	e7e8      	b.n	b7988 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b79b6:	bf00      	nop
   b79b8:	2003e610 	.word	0x2003e610

000b79bc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b79bc:	b513      	push	{r0, r1, r4, lr}
   b79be:	4604      	mov	r4, r0
    }
   b79c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b79c2:	b159      	cbz	r1, b79dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b79c4:	9101      	str	r1, [sp, #4]
   b79c6:	f00c fefa 	bl	c47be <strlen>
   b79ca:	6823      	ldr	r3, [r4, #0]
   b79cc:	9901      	ldr	r1, [sp, #4]
   b79ce:	68db      	ldr	r3, [r3, #12]
   b79d0:	4602      	mov	r2, r0
   b79d2:	4620      	mov	r0, r4
    }
   b79d4:	b002      	add	sp, #8
   b79d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b79da:	4718      	bx	r3
    }
   b79dc:	b002      	add	sp, #8
   b79de:	bd10      	pop	{r4, pc}

000b79e0 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b79e0:	b510      	push	{r4, lr}
   b79e2:	460c      	mov	r4, r1
    return m_attr;
   b79e4:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b79e6:	b909      	cbnz	r1, b79ec <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b79e8:	2000      	movs	r0, #0
}
   b79ea:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b79ec:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b79f0:	d005      	beq.n	b79fe <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b79f2:	232f      	movs	r3, #47	; 0x2f
   b79f4:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b79f6:	2300      	movs	r3, #0
   b79f8:	7063      	strb	r3, [r4, #1]
  return true;
   b79fa:	2001      	movs	r0, #1
   b79fc:	e7f5      	b.n	b79ea <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b79fe:	f7ff f8f1 	bl	b6be4 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7a02:	2800      	cmp	r0, #0
   b7a04:	d0f0      	beq.n	b79e8 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b7a06:	4621      	mov	r1, r4
   b7a08:	f7ff f8fb 	bl	b6c02 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b7a0c:	e7f5      	b.n	b79fa <_ZN7FatFile6getSFNEPc+0x1a>

000b7a0e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7a0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a10:	7803      	ldrb	r3, [r0, #0]
   b7a12:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7a14:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a16:	d520      	bpl.n	b7a5a <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7a18:	6843      	ldr	r3, [r0, #4]
   b7a1a:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7a1c:	f100 020c 	add.w	r2, r0, #12
   b7a20:	6818      	ldr	r0, [r3, #0]
   b7a22:	9201      	str	r2, [sp, #4]
   b7a24:	f000 fb87 	bl	b8136 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7a28:	9a01      	ldr	r2, [sp, #4]
   b7a2a:	4605      	mov	r5, r0
   b7a2c:	b918      	cbnz	r0, b7a36 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7a2e:	2500      	movs	r5, #0
}
   b7a30:	4628      	mov	r0, r5
   b7a32:	b003      	add	sp, #12
   b7a34:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7a36:	7823      	ldrb	r3, [r4, #0]
   b7a38:	079b      	lsls	r3, r3, #30
   b7a3a:	d404      	bmi.n	b7a46 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7a3c:	7823      	ldrb	r3, [r4, #0]
   b7a3e:	f023 0301 	bic.w	r3, r3, #1
   b7a42:	7023      	strb	r3, [r4, #0]
   b7a44:	e7f4      	b.n	b7a30 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7a46:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7a4a:	6919      	ldr	r1, [r3, #16]
   b7a4c:	4401      	add	r1, r0
   b7a4e:	6818      	ldr	r0, [r3, #0]
   b7a50:	f000 fb71 	bl	b8136 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7a54:	2800      	cmp	r0, #0
   b7a56:	d1f1      	bne.n	b7a3c <_ZN8FatCache4syncEv+0x2e>
   b7a58:	e7e9      	b.n	b7a2e <_ZN8FatCache4syncEv+0x20>
  return true;
   b7a5a:	2501      	movs	r5, #1
   b7a5c:	e7e8      	b.n	b7a30 <_ZN8FatCache4syncEv+0x22>

000b7a5e <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7a5e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7a60:	6883      	ldr	r3, [r0, #8]
   b7a62:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7a64:	4604      	mov	r4, r0
   b7a66:	460e      	mov	r6, r1
   b7a68:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7a6a:	d009      	beq.n	b7a80 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7a6c:	f7ff ffcf 	bl	b7a0e <_ZN8FatCache4syncEv>
   b7a70:	b908      	cbnz	r0, b7a76 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7a72:	2000      	movs	r0, #0
}
   b7a74:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7a76:	076b      	lsls	r3, r5, #29
   b7a78:	d50a      	bpl.n	b7a90 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7a7a:	2300      	movs	r3, #0
   b7a7c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7a7e:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7a80:	7822      	ldrb	r2, [r4, #0]
   b7a82:	f005 0503 	and.w	r5, r5, #3
   b7a86:	4620      	mov	r0, r4
   b7a88:	4315      	orrs	r5, r2
   b7a8a:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7a8e:	e7f1      	b.n	b7a74 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7a90:	6863      	ldr	r3, [r4, #4]
   b7a92:	f104 020c 	add.w	r2, r4, #12
   b7a96:	6818      	ldr	r0, [r3, #0]
   b7a98:	4631      	mov	r1, r6
   b7a9a:	f000 fac3 	bl	b8024 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7a9e:	2800      	cmp	r0, #0
   b7aa0:	d1eb      	bne.n	b7a7a <_ZN8FatCache4readEmh+0x1c>
   b7aa2:	e7e6      	b.n	b7a72 <_ZN8FatCache4readEmh+0x14>

000b7aa4 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7aa4:	7983      	ldrb	r3, [r0, #6]
   b7aa6:	6940      	ldr	r0, [r0, #20]
   b7aa8:	3902      	subs	r1, #2
   b7aaa:	4099      	lsls	r1, r3
}
   b7aac:	4408      	add	r0, r1
   b7aae:	4770      	bx	lr

000b7ab0 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ab0:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7ab2:	b570      	push	{r4, r5, r6, lr}
   b7ab4:	4605      	mov	r5, r0
   b7ab6:	460c      	mov	r4, r1
   b7ab8:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7aba:	d802      	bhi.n	b7ac2 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7ac0:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ac2:	69c3      	ldr	r3, [r0, #28]
   b7ac4:	428b      	cmp	r3, r1
   b7ac6:	d3f9      	bcc.n	b7abc <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7ac8:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7aca:	2b20      	cmp	r3, #32
   b7acc:	d116      	bne.n	b7afc <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7ace:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7ad0:	2202      	movs	r2, #2
   b7ad2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7ad6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7ada:	f7ff ffc0 	bl	b7a5e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ade:	2800      	cmp	r0, #0
   b7ae0:	d0ec      	beq.n	b7abc <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7ae2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7ae6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7aea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7aee:	69ea      	ldr	r2, [r5, #28]
   b7af0:	429a      	cmp	r2, r3
  *value = next;
   b7af2:	bf26      	itte	cs
   b7af4:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7af6:	2001      	movcs	r0, #1
    return 0;
   b7af8:	2000      	movcc	r0, #0
   b7afa:	e7e1      	b.n	b7ac0 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7afc:	2b10      	cmp	r3, #16
   b7afe:	d1dd      	bne.n	b7abc <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7b00:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7b04:	6981      	ldr	r1, [r0, #24]
   b7b06:	2202      	movs	r2, #2
   b7b08:	4419      	add	r1, r3
   b7b0a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b0e:	f7ff ffa6 	bl	b7a5e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b12:	2800      	cmp	r0, #0
   b7b14:	d0d2      	beq.n	b7abc <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7b16:	b2e4      	uxtb	r4, r4
   b7b18:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7b1c:	e7e7      	b.n	b7aee <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7b1e <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b1e:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7b20:	b538      	push	{r3, r4, r5, lr}
   b7b22:	460c      	mov	r4, r1
   b7b24:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b26:	d801      	bhi.n	b7b2c <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7b28:	2000      	movs	r0, #0
}
   b7b2a:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b2c:	69c3      	ldr	r3, [r0, #28]
   b7b2e:	428b      	cmp	r3, r1
   b7b30:	d3fa      	bcc.n	b7b28 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7b32:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7b34:	2b20      	cmp	r3, #32
   b7b36:	d10f      	bne.n	b7b58 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7b38:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7b3a:	2203      	movs	r2, #3
   b7b3c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7b40:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b44:	f7ff ff8b 	bl	b7a5e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b48:	2800      	cmp	r0, #0
   b7b4a:	d0ed      	beq.n	b7b28 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7b4c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7b50:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7b54:	2001      	movs	r0, #1
   b7b56:	e7e8      	b.n	b7b2a <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7b58:	2b10      	cmp	r3, #16
   b7b5a:	d1e5      	bne.n	b7b28 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7b5c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7b60:	6981      	ldr	r1, [r0, #24]
   b7b62:	2203      	movs	r2, #3
   b7b64:	4419      	add	r1, r3
   b7b66:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b6a:	f7ff ff78 	bl	b7a5e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b6e:	2800      	cmp	r0, #0
   b7b70:	d0da      	beq.n	b7b28 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7b72:	b2e4      	uxtb	r4, r4
   b7b74:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7b78:	e7ec      	b.n	b7b54 <_ZN9FatVolume6fatPutEmm+0x36>

000b7b7a <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7b7e:	68c4      	ldr	r4, [r0, #12]
   b7b80:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7b82:	4605      	mov	r5, r0
   b7b84:	460e      	mov	r6, r1
   b7b86:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7b88:	d301      	bcc.n	b7b8e <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7b8a:	2701      	movs	r7, #1
   b7b8c:	e001      	b.n	b7b92 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7b8e:	460c      	mov	r4, r1
    setStart = false;
   b7b90:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7b92:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7b94:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7b96:	42a3      	cmp	r3, r4
   b7b98:	d202      	bcs.n	b7ba0 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7b9a:	b9c7      	cbnz	r7, b7bce <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7b9c:	68ec      	ldr	r4, [r5, #12]
   b7b9e:	e7f4      	b.n	b7b8a <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7ba0:	42a6      	cmp	r6, r4
   b7ba2:	d014      	beq.n	b7bce <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7ba4:	aa01      	add	r2, sp, #4
   b7ba6:	4621      	mov	r1, r4
   b7ba8:	4628      	mov	r0, r5
   b7baa:	f7ff ff81 	bl	b7ab0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7bae:	2800      	cmp	r0, #0
   b7bb0:	db0d      	blt.n	b7bce <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7bb2:	d0ee      	beq.n	b7b92 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7bb4:	9b01      	ldr	r3, [sp, #4]
   b7bb6:	2b00      	cmp	r3, #0
   b7bb8:	d1eb      	bne.n	b7b92 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7bba:	b107      	cbz	r7, b7bbe <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7bbc:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7bbe:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7bc2:	4621      	mov	r1, r4
   b7bc4:	4628      	mov	r0, r5
   b7bc6:	f7ff ffaa 	bl	b7b1e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7bca:	4607      	mov	r7, r0
   b7bcc:	b920      	cbnz	r0, b7bd8 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7bce:	2700      	movs	r7, #0
}
   b7bd0:	4638      	mov	r0, r7
   b7bd2:	b002      	add	sp, #8
   b7bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7bd8:	b916      	cbnz	r6, b7be0 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7bda:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7bde:	e7f7      	b.n	b7bd0 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7be0:	4622      	mov	r2, r4
   b7be2:	4631      	mov	r1, r6
   b7be4:	4628      	mov	r0, r5
   b7be6:	f7ff ff9a 	bl	b7b1e <_ZN9FatVolume6fatPutEmm>
   b7bea:	2800      	cmp	r0, #0
   b7bec:	d1f5      	bne.n	b7bda <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7bee:	e7ee      	b.n	b7bce <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7bf0 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7bf2:	4605      	mov	r5, r0
   b7bf4:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7bf6:	aa01      	add	r2, sp, #4
   b7bf8:	4621      	mov	r1, r4
   b7bfa:	4628      	mov	r0, r5
   b7bfc:	f7ff ff58 	bl	b7ab0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7c00:	1e06      	subs	r6, r0, #0
   b7c02:	db10      	blt.n	b7c26 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7c04:	2200      	movs	r2, #0
   b7c06:	4621      	mov	r1, r4
   b7c08:	4628      	mov	r0, r5
   b7c0a:	f7ff ff88 	bl	b7b1e <_ZN9FatVolume6fatPutEmm>
   b7c0e:	b150      	cbz	r0, b7c26 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7c10:	68eb      	ldr	r3, [r5, #12]
   b7c12:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7c14:	bf24      	itt	cs
   b7c16:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7c1a:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7c1c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7c1e:	2e00      	cmp	r6, #0
   b7c20:	d1e9      	bne.n	b7bf6 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7c22:	b002      	add	sp, #8
   b7c24:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7c26:	2000      	movs	r0, #0
   b7c28:	e7fb      	b.n	b7c22 <_ZN9FatVolume9freeChainEm+0x32>

000b7c2a <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7c2a:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7c2c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7c2e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7c30:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7c36:	4604      	mov	r4, r0
  m_fatType = 0;
   b7c38:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7c3a:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7c3e:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7c40:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7c44:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7c46:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7c4a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7c4e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7c52:	460d      	mov	r5, r1
   b7c54:	b1b9      	cbz	r1, b7c86 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7c56:	2904      	cmp	r1, #4
   b7c58:	d901      	bls.n	b7c5e <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7c5a:	2000      	movs	r0, #0
}
   b7c5c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7c5e:	4611      	mov	r1, r2
   b7c60:	4630      	mov	r0, r6
   b7c62:	f7ff fefc 	bl	b7a5e <_ZN8FatCache4readEmh>
    if (!pc) {
   b7c66:	2800      	cmp	r0, #0
   b7c68:	d0f7      	beq.n	b7c5a <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7c6a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7c6e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7c72:	065b      	lsls	r3, r3, #25
   b7c74:	d1f1      	bne.n	b7c5a <_ZN9FatVolume4initEh+0x30>
   b7c76:	f105 011b 	add.w	r1, r5, #27
   b7c7a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7c7e:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7c82:	2d00      	cmp	r5, #0
   b7c84:	d0e9      	beq.n	b7c5a <_ZN9FatVolume4initEh+0x30>
   b7c86:	2200      	movs	r2, #0
   b7c88:	4629      	mov	r1, r5
   b7c8a:	4630      	mov	r0, r6
   b7c8c:	f7ff fee7 	bl	b7a5e <_ZN8FatCache4readEmh>
  if (!pc) {
   b7c90:	2800      	cmp	r0, #0
   b7c92:	d0e2      	beq.n	b7c5a <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7c94:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7c9c:	d1dd      	bne.n	b7c5a <_ZN9FatVolume4initEh+0x30>
   b7c9e:	7c03      	ldrb	r3, [r0, #16]
   b7ca0:	2b02      	cmp	r3, #2
   b7ca2:	d1da      	bne.n	b7c5a <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7ca4:	89c3      	ldrh	r3, [r0, #14]
   b7ca6:	2b00      	cmp	r3, #0
   b7ca8:	d0d7      	beq.n	b7c5a <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7caa:	7b41      	ldrb	r1, [r0, #13]
   b7cac:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7cae:	1e4b      	subs	r3, r1, #1
   b7cb0:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7cb2:	2300      	movs	r3, #0
   b7cb4:	71a3      	strb	r3, [r4, #6]
   b7cb6:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7cb8:	2301      	movs	r3, #1
   b7cba:	4299      	cmp	r1, r3
   b7cbc:	d007      	beq.n	b7cce <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7cbe:	3e01      	subs	r6, #1
   b7cc0:	d0cb      	beq.n	b7c5a <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7cc2:	79a2      	ldrb	r2, [r4, #6]
   b7cc4:	005b      	lsls	r3, r3, #1
   b7cc6:	3201      	adds	r2, #1
   b7cc8:	b2db      	uxtb	r3, r3
   b7cca:	71a2      	strb	r2, [r4, #6]
   b7ccc:	e7f5      	b.n	b7cba <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7cce:	8ac1      	ldrh	r1, [r0, #22]
   b7cd0:	b901      	cbnz	r1, b7cd4 <_ZN9FatVolume4initEh+0xaa>
   b7cd2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7cd4:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7cd6:	89c3      	ldrh	r3, [r0, #14]
   b7cd8:	442b      	add	r3, r5
   b7cda:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7cdc:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7ce0:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7ce2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7ce6:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7ce8:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7cec:	0149      	lsls	r1, r1, #5
   b7cee:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7cf2:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7cf6:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7cf8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7cfc:	b902      	cbnz	r2, b7d00 <_ZN9FatVolume4initEh+0xd6>
   b7cfe:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d00:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7d02:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d04:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7d06:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7d08:	1c4b      	adds	r3, r1, #1
   b7d0a:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7d0c:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7d10:	4299      	cmp	r1, r3
   b7d12:	d802      	bhi.n	b7d1a <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7d14:	230c      	movs	r3, #12
   b7d16:	71e3      	strb	r3, [r4, #7]
   b7d18:	e79f      	b.n	b7c5a <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7d1a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7d1e:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7d20:	bf85      	ittet	hi
   b7d22:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7d24:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7d26:	2310      	movls	r3, #16
    m_fatType = 32;
   b7d28:	2320      	movhi	r3, #32
   b7d2a:	71e3      	strb	r3, [r4, #7]
  return true;
   b7d2c:	2001      	movs	r0, #1
   b7d2e:	e795      	b.n	b7c5c <_ZN9FatVolume4initEh+0x32>

000b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7d30:	f000 baca 	b.w	b82c8 <_ZN14SdSpiAltDriver4sendEh>

000b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7d34:	f000 baad 	b.w	b8292 <_ZN14SdSpiAltDriver7receiveEv>

000b7d38 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7d38:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7d3a:	4e0e      	ldr	r6, [pc, #56]	; (b7d74 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7d3c:	460d      	mov	r5, r1
   b7d3e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7d40:	f005 fff8 	bl	bdd34 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7d44:	6833      	ldr	r3, [r6, #0]
   b7d46:	1ac0      	subs	r0, r0, r3
   b7d48:	4b0b      	ldr	r3, [pc, #44]	; (b7d78 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7d4a:	4298      	cmp	r0, r3
   b7d4c:	d908      	bls.n	b7d60 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d4e:	f005 fff9 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d52:	4b0a      	ldr	r3, [pc, #40]	; (b7d7c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7d54:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7d56:	f006 fa5b 	bl	be210 <spark_process>
   b7d5a:	f005 ffeb 	bl	bdd34 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7d5e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7d60:	f005 fff0 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7d64:	b280      	uxth	r0, r0
   b7d66:	1b40      	subs	r0, r0, r5
}
   b7d68:	42a0      	cmp	r0, r4
   b7d6a:	bfd4      	ite	le
   b7d6c:	2000      	movle	r0, #0
   b7d6e:	2001      	movgt	r0, #1
   b7d70:	bd70      	pop	{r4, r5, r6, pc}
   b7d72:	bf00      	nop
   b7d74:	2003e618 	.word	0x2003e618
   b7d78:	000186a0 	.word	0x000186a0
   b7d7c:	2003e728 	.word	0x2003e728

000b7d80 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7d80:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7d82:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7d84:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7d86:	b94d      	cbnz	r5, b7d9c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7d88:	6840      	ldr	r0, [r0, #4]
   b7d8a:	f000 fa6b 	bl	b8264 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7d8e:	6863      	ldr	r3, [r4, #4]
   b7d90:	4629      	mov	r1, r5
   b7d92:	7d18      	ldrb	r0, [r3, #20]
   b7d94:	f00a f99d 	bl	c20d2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7d98:	2301      	movs	r3, #1
   b7d9a:	7223      	strb	r3, [r4, #8]
  }
}
   b7d9c:	bd38      	pop	{r3, r4, r5, pc}

000b7d9e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7d9e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7da0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7da2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7da4:	b16b      	cbz	r3, b7dc2 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7da6:	6843      	ldr	r3, [r0, #4]
   b7da8:	2101      	movs	r1, #1
   b7daa:	7d18      	ldrb	r0, [r3, #20]
   b7dac:	f00a f991 	bl	c20d2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7db0:	6860      	ldr	r0, [r4, #4]
   b7db2:	21ff      	movs	r1, #255	; 0xff
   b7db4:	f7ff ffbc 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7db8:	6860      	ldr	r0, [r4, #4]
   b7dba:	f000 fa67 	bl	b828c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	7223      	strb	r3, [r4, #8]
  }
}
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	460d      	mov	r5, r1
   b7dca:	4616      	mov	r6, r2
   b7dcc:	f005 ffba 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7dd0:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7dd2:	6860      	ldr	r0, [r4, #4]
   b7dd4:	f7ff ffae 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7dd8:	28ff      	cmp	r0, #255	; 0xff
   b7dda:	7260      	strb	r0, [r4, #9]
   b7ddc:	d10e      	bne.n	b7dfc <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7de2:	4639      	mov	r1, r7
   b7de4:	4620      	mov	r0, r4
   b7de6:	f7ff ffa7 	bl	b7d38 <_ZN9SdSpiCard10isTimedOutEtt>
   b7dea:	2800      	cmp	r0, #0
   b7dec:	d0f1      	beq.n	b7dd2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7dee:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7df0:	4620      	mov	r0, r4
   b7df2:	7023      	strb	r3, [r4, #0]
   b7df4:	f7ff ffd3 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7df8:	2000      	movs	r0, #0
}
   b7dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7dfc:	28fe      	cmp	r0, #254	; 0xfe
   b7dfe:	d001      	beq.n	b7e04 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7e00:	2350      	movs	r3, #80	; 0x50
   b7e02:	e7f5      	b.n	b7df0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7e04:	6860      	ldr	r0, [r4, #4]
   b7e06:	4632      	mov	r2, r6
   b7e08:	4629      	mov	r1, r5
   b7e0a:	f000 fa47 	bl	b829c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7e0e:	7260      	strb	r0, [r4, #9]
   b7e10:	b108      	cbz	r0, b7e16 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7e12:	2360      	movs	r3, #96	; 0x60
   b7e14:	e7ec      	b.n	b7df0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7e16:	6860      	ldr	r0, [r4, #4]
   b7e18:	f7ff ff8c 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7e1c:	6860      	ldr	r0, [r4, #4]
   b7e1e:	f7ff ff89 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7e22:	2001      	movs	r0, #1
   b7e24:	e7e9      	b.n	b7dfa <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7e26 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7e26:	b570      	push	{r4, r5, r6, lr}
   b7e28:	4604      	mov	r4, r0
   b7e2a:	460e      	mov	r6, r1
   b7e2c:	f005 ff8a 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   b7e30:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7e32:	4632      	mov	r2, r6
   b7e34:	4629      	mov	r1, r5
   b7e36:	4620      	mov	r0, r4
   b7e38:	f7ff ff7e 	bl	b7d38 <_ZN9SdSpiCard10isTimedOutEtt>
   b7e3c:	b930      	cbnz	r0, b7e4c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7e3e:	6860      	ldr	r0, [r4, #4]
   b7e40:	f7ff ff78 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e44:	28ff      	cmp	r0, #255	; 0xff
   b7e46:	d1f4      	bne.n	b7e32 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7e48:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7e4a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7e4c:	2000      	movs	r0, #0
   b7e4e:	e7fc      	b.n	b7e4a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7e50 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7e52:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7e54:	9201      	str	r2, [sp, #4]
   b7e56:	4604      	mov	r4, r0
   b7e58:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7e5a:	b90b      	cbnz	r3, b7e60 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7e5c:	f7ff ff90 	bl	b7d80 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7e60:	b125      	cbz	r5, b7e6c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7e62:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7e66:	4620      	mov	r0, r4
   b7e68:	f7ff ffdd 	bl	b7e26 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7e6c:	6860      	ldr	r0, [r4, #4]
   b7e6e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7e72:	f7ff ff5d 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7e76:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7e78:	af01      	add	r7, sp, #4
   b7e7a:	5db9      	ldrb	r1, [r7, r6]
   b7e7c:	6860      	ldr	r0, [r4, #4]
   b7e7e:	f7ff ff57 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7e82:	3e01      	subs	r6, #1
   b7e84:	d2f9      	bcs.n	b7e7a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7e86:	2d00      	cmp	r5, #0
   b7e88:	6860      	ldr	r0, [r4, #4]
   b7e8a:	bf0c      	ite	eq
   b7e8c:	2195      	moveq	r1, #149	; 0x95
   b7e8e:	2187      	movne	r1, #135	; 0x87
   b7e90:	f7ff ff4e 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7e94:	6860      	ldr	r0, [r4, #4]
   b7e96:	f7ff ff4d 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e9a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7e9c:	6860      	ldr	r0, [r4, #4]
   b7e9e:	f7ff ff49 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ea2:	0603      	lsls	r3, r0, #24
   b7ea4:	7260      	strb	r0, [r4, #9]
   b7ea6:	d503      	bpl.n	b7eb0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7ea8:	3d01      	subs	r5, #1
   b7eaa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7eae:	d1f5      	bne.n	b7e9c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7eb0:	b003      	add	sp, #12
   b7eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7eb4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7eb4:	b570      	push	{r4, r5, r6, lr}
   b7eb6:	4604      	mov	r4, r0
   b7eb8:	460d      	mov	r5, r1
   b7eba:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7ebc:	2137      	movs	r1, #55	; 0x37
   b7ebe:	2200      	movs	r2, #0
   b7ec0:	f7ff ffc6 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7ec4:	4632      	mov	r2, r6
   b7ec6:	4629      	mov	r1, r5
   b7ec8:	4620      	mov	r0, r4
  }
   b7eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7ece:	f7ff bfbf 	b.w	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7ed4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7ed8:	2500      	movs	r5, #0
   b7eda:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7edc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7ede:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7ee0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ee2:	4604      	mov	r4, r0
   b7ee4:	4690      	mov	r8, r2
   b7ee6:	461e      	mov	r6, r3
   b7ee8:	f005 ff2c 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7eec:	4641      	mov	r1, r8
   b7eee:	4607      	mov	r7, r0
   b7ef0:	6860      	ldr	r0, [r4, #4]
   b7ef2:	f000 f9bb 	bl	b826c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7ef6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7ef8:	4a49      	ldr	r2, [pc, #292]	; (b8020 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7efa:	721d      	strb	r5, [r3, #8]
   b7efc:	2501      	movs	r5, #1
   b7efe:	60da      	str	r2, [r3, #12]
   b7f00:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7f02:	4620      	mov	r0, r4
   b7f04:	f7ff ff3c 	bl	b7d80 <_ZN9SdSpiCard8spiStartEv>
   b7f08:	6863      	ldr	r3, [r4, #4]
   b7f0a:	4629      	mov	r1, r5
   b7f0c:	7d18      	ldrb	r0, [r3, #20]
   b7f0e:	f00a f8e0 	bl	c20d2 <digitalWrite>
   b7f12:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7f14:	6860      	ldr	r0, [r4, #4]
   b7f16:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7f18:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7f1a:	f7ff ff09 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7f1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7f22:	d1f7      	bne.n	b7f14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7f24:	6863      	ldr	r3, [r4, #4]
   b7f26:	4629      	mov	r1, r5
   b7f28:	7d18      	ldrb	r0, [r3, #20]
   b7f2a:	f00a f8d2 	bl	c20d2 <digitalWrite>
  }
   b7f2e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7f30:	2200      	movs	r2, #0
   b7f32:	4611      	mov	r1, r2
   b7f34:	4620      	mov	r0, r4
   b7f36:	f7ff ff8b 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b7f3a:	2801      	cmp	r0, #1
   b7f3c:	4680      	mov	r8, r0
   b7f3e:	d018      	beq.n	b7f72 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7f40:	3d01      	subs	r5, #1
   b7f42:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7f46:	d107      	bne.n	b7f58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7f48:	2320      	movs	r3, #32
  spiStop();
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	7023      	strb	r3, [r4, #0]
   b7f4e:	f7ff ff26 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f52:	2000      	movs	r0, #0
}
   b7f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7f58:	6860      	ldr	r0, [r4, #4]
   b7f5a:	21fd      	movs	r1, #253	; 0xfd
   b7f5c:	f7ff fee8 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7f60:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7f64:	6860      	ldr	r0, [r4, #4]
   b7f66:	f7ff fee5 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7f6a:	f1b8 0801 	subs.w	r8, r8, #1
   b7f6e:	d1f9      	bne.n	b7f64 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7f70:	e7de      	b.n	b7f30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7f72:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7f76:	2108      	movs	r1, #8
   b7f78:	4620      	mov	r0, r4
   b7f7a:	f7ff ff69 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b7f7e:	2805      	cmp	r0, #5
   b7f80:	d114      	bne.n	b7fac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7f82:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7f86:	2500      	movs	r5, #0
   b7f88:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7f8a:	462a      	mov	r2, r5
   b7f8c:	2129      	movs	r1, #41	; 0x29
   b7f8e:	4620      	mov	r0, r4
   b7f90:	f7ff ff90 	bl	b7eb4 <_ZN9SdSpiCard8cardAcmdEhm>
   b7f94:	4602      	mov	r2, r0
   b7f96:	b1d8      	cbz	r0, b7fd0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7f98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7f9c:	4639      	mov	r1, r7
   b7f9e:	4620      	mov	r0, r4
   b7fa0:	f7ff feca 	bl	b7d38 <_ZN9SdSpiCard10isTimedOutEtt>
   b7fa4:	2800      	cmp	r0, #0
   b7fa6:	d0f0      	beq.n	b7f8a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7fa8:	2343      	movs	r3, #67	; 0x43
   b7faa:	e7ce      	b.n	b7f4a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7fac:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7fae:	6860      	ldr	r0, [r4, #4]
   b7fb0:	f7ff fec0 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7fb4:	3d01      	subs	r5, #1
   b7fb6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7fba:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7fbc:	d1f7      	bne.n	b7fae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7fbe:	28aa      	cmp	r0, #170	; 0xaa
   b7fc0:	d104      	bne.n	b7fcc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7fc2:	2302      	movs	r3, #2
   b7fc4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7fc6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7fca:	e7dd      	b.n	b7f88 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7fcc:	2325      	movs	r3, #37	; 0x25
   b7fce:	e7bc      	b.n	b7f4a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7fd0:	7aa3      	ldrb	r3, [r4, #10]
   b7fd2:	2b02      	cmp	r3, #2
   b7fd4:	d118      	bne.n	b8008 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7fd6:	213a      	movs	r1, #58	; 0x3a
   b7fd8:	4620      	mov	r0, r4
   b7fda:	f7ff ff39 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b7fde:	b108      	cbz	r0, b7fe4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7fe0:	2337      	movs	r3, #55	; 0x37
   b7fe2:	e7b2      	b.n	b7f4a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7fe4:	6860      	ldr	r0, [r4, #4]
   b7fe6:	f7ff fea5 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7fea:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7fee:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7ff0:	bf04      	itt	eq
   b7ff2:	2303      	moveq	r3, #3
   b7ff4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7ff6:	6860      	ldr	r0, [r4, #4]
   b7ff8:	f7ff fe9c 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ffc:	6860      	ldr	r0, [r4, #4]
   b7ffe:	f7ff fe99 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8002:	6860      	ldr	r0, [r4, #4]
   b8004:	f7ff fe96 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b8008:	4620      	mov	r0, r4
   b800a:	f7ff fec8 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b800e:	6863      	ldr	r3, [r4, #4]
   b8010:	7930      	ldrb	r0, [r6, #4]
   b8012:	68b1      	ldr	r1, [r6, #8]
   b8014:	89b2      	ldrh	r2, [r6, #12]
   b8016:	821a      	strh	r2, [r3, #16]
   b8018:	7218      	strb	r0, [r3, #8]
   b801a:	60d9      	str	r1, [r3, #12]
  return true;
   b801c:	2001      	movs	r0, #1
   b801e:	e799      	b.n	b7f54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8020:	0003d090 	.word	0x0003d090

000b8024 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8024:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8026:	7a83      	ldrb	r3, [r0, #10]
   b8028:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b802a:	bf18      	it	ne
   b802c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b802e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8030:	460a      	mov	r2, r1
   b8032:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8034:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b8036:	f7ff ff0b 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b803a:	b130      	cbz	r0, b804a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b803c:	2330      	movs	r3, #48	; 0x30
   b803e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8040:	4620      	mov	r0, r4
   b8042:	f7ff feac 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8046:	2500      	movs	r5, #0
   b8048:	e00b      	b.n	b8062 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b804a:	4629      	mov	r1, r5
   b804c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8050:	4620      	mov	r0, r4
   b8052:	f7ff feb7 	bl	b7dc4 <_ZN9SdSpiCard8readDataEPhj>
   b8056:	4605      	mov	r5, r0
   b8058:	2800      	cmp	r0, #0
   b805a:	d0f1      	beq.n	b8040 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b805c:	4620      	mov	r0, r4
   b805e:	f7ff fe9e 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
}
   b8062:	4628      	mov	r0, r5
   b8064:	bd38      	pop	{r3, r4, r5, pc}

000b8066 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8066:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8068:	7a83      	ldrb	r3, [r0, #10]
   b806a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b806c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b806e:	bf18      	it	ne
   b8070:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b8072:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8074:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b8076:	f7ff feeb 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b807a:	b130      	cbz	r0, b808a <_ZN9SdSpiCard9readStartEm+0x24>
   b807c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b807e:	4620      	mov	r0, r4
   b8080:	7023      	strb	r3, [r4, #0]
   b8082:	f7ff fe8c 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8086:	2000      	movs	r0, #0
}
   b8088:	bd10      	pop	{r4, pc}
  return true;
   b808a:	2001      	movs	r0, #1
   b808c:	e7fc      	b.n	b8088 <_ZN9SdSpiCard9readStartEm+0x22>

000b808e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b808e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b8090:	2200      	movs	r2, #0
   b8092:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b8094:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b8096:	f7ff fedb 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b809a:	b130      	cbz	r0, b80aa <_ZN9SdSpiCard8readStopEv+0x1c>
   b809c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b809e:	4620      	mov	r0, r4
   b80a0:	7023      	strb	r3, [r4, #0]
   b80a2:	f7ff fe7c 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b80a6:	2000      	movs	r0, #0
}
   b80a8:	bd10      	pop	{r4, pc}
  spiStop();
   b80aa:	4620      	mov	r0, r4
   b80ac:	f7ff fe77 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b80b0:	2001      	movs	r0, #1
   b80b2:	e7f9      	b.n	b80a8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b80b4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b80b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80b6:	4604      	mov	r4, r0
   b80b8:	4616      	mov	r6, r2
   b80ba:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b80bc:	f7ff ffd3 	bl	b8066 <_ZN9SdSpiCard9readStartEm>
   b80c0:	b168      	cbz	r0, b80de <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b80c2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b80c4:	b2ab      	uxth	r3, r5
   b80c6:	429f      	cmp	r7, r3
   b80c8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b80cc:	d909      	bls.n	b80e2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b80ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   b80d2:	4620      	mov	r0, r4
   b80d4:	f7ff fe76 	bl	b7dc4 <_ZN9SdSpiCard8readDataEPhj>
   b80d8:	3501      	adds	r5, #1
   b80da:	2800      	cmp	r0, #0
   b80dc:	d1f2      	bne.n	b80c4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b80de:	2000      	movs	r0, #0
   b80e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b80e2:	4620      	mov	r0, r4
}
   b80e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b80e8:	f7ff bfd1 	b.w	b808e <_ZN9SdSpiCard8readStopEv>

000b80ec <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b80ec:	b538      	push	{r3, r4, r5, lr}
   b80ee:	4604      	mov	r4, r0
   b80f0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b80f2:	6840      	ldr	r0, [r0, #4]
   b80f4:	f7ff fe1c 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b80f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b80fc:	6860      	ldr	r0, [r4, #4]
   b80fe:	4629      	mov	r1, r5
   b8100:	f000 f8e6 	bl	b82d0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8104:	6860      	ldr	r0, [r4, #4]
   b8106:	21ff      	movs	r1, #255	; 0xff
   b8108:	f7ff fe12 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b810c:	6860      	ldr	r0, [r4, #4]
   b810e:	21ff      	movs	r1, #255	; 0xff
   b8110:	f7ff fe0e 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b8114:	6860      	ldr	r0, [r4, #4]
   b8116:	f7ff fe0d 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b811a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b811c:	f000 001f 	and.w	r0, r0, #31
   b8120:	2805      	cmp	r0, #5
   b8122:	d006      	beq.n	b8132 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b8124:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b8126:	4620      	mov	r0, r4
   b8128:	7023      	strb	r3, [r4, #0]
   b812a:	f7ff fe38 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b812e:	2000      	movs	r0, #0
}
   b8130:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b8132:	2001      	movs	r0, #1
   b8134:	e7fc      	b.n	b8130 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b8136 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8136:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b8138:	7a83      	ldrb	r3, [r0, #10]
   b813a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b813c:	bf18      	it	ne
   b813e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8140:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b8142:	460a      	mov	r2, r1
   b8144:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8146:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b8148:	f7ff fe82 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b814c:	4606      	mov	r6, r0
   b814e:	b130      	cbz	r0, b815e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8150:	2332      	movs	r3, #50	; 0x32
   b8152:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8154:	4620      	mov	r0, r4
   b8156:	f7ff fe22 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b815a:	2500      	movs	r5, #0
   b815c:	e01f      	b.n	b819e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b815e:	462a      	mov	r2, r5
   b8160:	21fe      	movs	r1, #254	; 0xfe
   b8162:	4620      	mov	r0, r4
   b8164:	f7ff ffc2 	bl	b80ec <_ZN9SdSpiCard9writeDataEhPKh>
   b8168:	2800      	cmp	r0, #0
   b816a:	d0f3      	beq.n	b8154 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b816c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8170:	4620      	mov	r0, r4
   b8172:	f7ff fe58 	bl	b7e26 <_ZN9SdSpiCard11waitNotBusyEt>
   b8176:	4605      	mov	r5, r0
   b8178:	b908      	cbnz	r0, b817e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b817a:	235a      	movs	r3, #90	; 0x5a
   b817c:	e7e9      	b.n	b8152 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b817e:	4632      	mov	r2, r6
   b8180:	210d      	movs	r1, #13
   b8182:	4620      	mov	r0, r4
   b8184:	f7ff fe64 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b8188:	b108      	cbz	r0, b818e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b818a:	2329      	movs	r3, #41	; 0x29
   b818c:	e7e1      	b.n	b8152 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b818e:	6860      	ldr	r0, [r4, #4]
   b8190:	f7ff fdd0 	bl	b7d34 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8194:	2800      	cmp	r0, #0
   b8196:	d1f8      	bne.n	b818a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b8198:	4620      	mov	r0, r4
   b819a:	f7ff fe00 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
}
   b819e:	4628      	mov	r0, r5
   b81a0:	bd70      	pop	{r4, r5, r6, pc}

000b81a2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b81a2:	b513      	push	{r0, r1, r4, lr}
   b81a4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b81aa:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81ac:	f7ff fe3b 	bl	b7e26 <_ZN9SdSpiCard11waitNotBusyEt>
   b81b0:	9a01      	ldr	r2, [sp, #4]
   b81b2:	b930      	cbnz	r0, b81c2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b81b4:	235b      	movs	r3, #91	; 0x5b
   b81b6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b81b8:	4620      	mov	r0, r4
   b81ba:	f7ff fdf0 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81be:	2000      	movs	r0, #0
   b81c0:	e005      	b.n	b81ce <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b81c2:	21fc      	movs	r1, #252	; 0xfc
   b81c4:	4620      	mov	r0, r4
   b81c6:	f7ff ff91 	bl	b80ec <_ZN9SdSpiCard9writeDataEhPKh>
   b81ca:	2800      	cmp	r0, #0
   b81cc:	d0f4      	beq.n	b81b8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b81ce:	b002      	add	sp, #8
   b81d0:	bd10      	pop	{r4, pc}

000b81d2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81d2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b81d4:	7a83      	ldrb	r3, [r0, #10]
   b81d6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81d8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b81da:	bf18      	it	ne
   b81dc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b81de:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81e0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b81e2:	f7ff fe35 	bl	b7e50 <_ZN9SdSpiCard11cardCommandEhm>
   b81e6:	b130      	cbz	r0, b81f6 <_ZN9SdSpiCard10writeStartEm+0x24>
   b81e8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b81ea:	4620      	mov	r0, r4
   b81ec:	7023      	strb	r3, [r4, #0]
   b81ee:	f7ff fdd6 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81f2:	2000      	movs	r0, #0
}
   b81f4:	bd10      	pop	{r4, pc}
  return true;
   b81f6:	2001      	movs	r0, #1
   b81f8:	e7fc      	b.n	b81f4 <_ZN9SdSpiCard10writeStartEm+0x22>

000b81fa <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b81fa:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8200:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8202:	f7ff fe10 	bl	b7e26 <_ZN9SdSpiCard11waitNotBusyEt>
   b8206:	4605      	mov	r5, r0
   b8208:	b930      	cbnz	r0, b8218 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b820a:	2356      	movs	r3, #86	; 0x56
   b820c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b820e:	4620      	mov	r0, r4
   b8210:	f7ff fdc5 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8214:	4628      	mov	r0, r5
   b8216:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8218:	6860      	ldr	r0, [r4, #4]
   b821a:	21fd      	movs	r1, #253	; 0xfd
   b821c:	f7ff fd88 	bl	b7d30 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8220:	e7f5      	b.n	b820e <_ZN9SdSpiCard9writeStopEv+0x14>

000b8222 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8224:	4604      	mov	r4, r0
   b8226:	4616      	mov	r6, r2
   b8228:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b822a:	f7ff ffd2 	bl	b81d2 <_ZN9SdSpiCard10writeStartEm>
   b822e:	b170      	cbz	r0, b824e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8230:	2500      	movs	r5, #0
   b8232:	42bd      	cmp	r5, r7
   b8234:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b8238:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b823a:	d004      	beq.n	b8246 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b823c:	f7ff ffb1 	bl	b81a2 <_ZN9SdSpiCard9writeDataEPKh>
   b8240:	b128      	cbz	r0, b824e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8242:	3501      	adds	r5, #1
   b8244:	e7f5      	b.n	b8232 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b8246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b824a:	f7ff bfd6 	b.w	b81fa <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b824e:	4620      	mov	r0, r4
   b8250:	f7ff fda5 	bl	b7d9e <_ZN9SdSpiCard7spiStopEv>
}
   b8254:	2000      	movs	r0, #0
   b8256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8258 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b8258:	4b01      	ldr	r3, [pc, #4]	; (b8260 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b825a:	2201      	movs	r2, #1
   b825c:	701a      	strb	r2, [r3, #0]
}
   b825e:	4770      	bx	lr
   b8260:	2003e61c 	.word	0x2003e61c

000b8264 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8264:	1d01      	adds	r1, r0, #4
   b8266:	6800      	ldr	r0, [r0, #0]
   b8268:	f009 ba90 	b.w	c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b826c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b826c:	b510      	push	{r4, lr}
   b826e:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8270:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8272:	6800      	ldr	r0, [r0, #0]
   b8274:	f009 fa45 	bl	c1702 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b8278:	7d20      	ldrb	r0, [r4, #20]
   b827a:	2101      	movs	r1, #1
   b827c:	f009 ff18 	bl	c20b0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8280:	7d20      	ldrb	r0, [r4, #20]
   b8282:	2101      	movs	r1, #1
}
   b8284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b8288:	f009 bf23 	b.w	c20d2 <digitalWrite>

000b828c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b828c:	6800      	ldr	r0, [r0, #0]
   b828e:	f009 ba63 	b.w	c1758 <_ZN8SPIClass14endTransactionEv>

000b8292 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8292:	6800      	ldr	r0, [r0, #0]
   b8294:	21ff      	movs	r1, #255	; 0xff
   b8296:	f009 bb19 	b.w	c18cc <_ZN8SPIClass8transferEh>
	...

000b829c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b829c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b829e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82a0:	4a07      	ldr	r2, [pc, #28]	; (b82c0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b82a2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b82a4:	2500      	movs	r5, #0
   b82a6:	4c07      	ldr	r4, [pc, #28]	; (b82c4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82a8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b82aa:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82ac:	460a      	mov	r2, r1
   b82ae:	4629      	mov	r1, r5
   b82b0:	f009 fb12 	bl	c18d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b82b4:	7823      	ldrb	r3, [r4, #0]
   b82b6:	2b00      	cmp	r3, #0
   b82b8:	d0fc      	beq.n	b82b4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b82ba:	2000      	movs	r0, #0
   b82bc:	b003      	add	sp, #12
   b82be:	bd30      	pop	{r4, r5, pc}
   b82c0:	000b8259 	.word	0x000b8259
   b82c4:	2003e61c 	.word	0x2003e61c

000b82c8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b82c8:	6800      	ldr	r0, [r0, #0]
   b82ca:	f009 baff 	b.w	c18cc <_ZN8SPIClass8transferEh>
	...

000b82d0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b82d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82d2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82d4:	4a06      	ldr	r2, [pc, #24]	; (b82f0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b82d6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b82d8:	2500      	movs	r5, #0
   b82da:	4c06      	ldr	r4, [pc, #24]	; (b82f4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82dc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b82de:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82e0:	462a      	mov	r2, r5
   b82e2:	f009 faf9 	bl	c18d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b82e6:	7823      	ldrb	r3, [r4, #0]
   b82e8:	2b00      	cmp	r3, #0
   b82ea:	d0fc      	beq.n	b82e6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b82ec:	b003      	add	sp, #12
   b82ee:	bd30      	pop	{r4, r5, pc}
   b82f0:	000b8259 	.word	0x000b8259
   b82f4:	2003e61c 	.word	0x2003e61c

000b82f8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b82f8:	4770      	bx	lr

000b82fa <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b82fa:	4770      	bx	lr

000b82fc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b82fc:	b538      	push	{r3, r4, r5, lr}
   b82fe:	460c      	mov	r4, r1
   b8300:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b8302:	2220      	movs	r2, #32
   b8304:	2100      	movs	r1, #0
   b8306:	f104 0008 	add.w	r0, r4, #8
   b830a:	f00c f9cd 	bl	c46a8 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b830e:	4909      	ldr	r1, [pc, #36]	; (b8334 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b8310:	220b      	movs	r2, #11
   b8312:	4620      	mov	r0, r4
   b8314:	f00c fa82 	bl	c481c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b8318:	2301      	movs	r3, #1
   b831a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b831c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b831e:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b8320:	2302      	movs	r3, #2
   b8322:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b8324:	4b04      	ldr	r3, [pc, #16]	; (b8338 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b8326:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b8328:	4b04      	ldr	r3, [pc, #16]	; (b833c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b832a:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b832c:	4b04      	ldr	r3, [pc, #16]	; (b8340 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b832e:	6223      	str	r3, [r4, #32]
}
   b8330:	bd38      	pop	{r3, r4, r5, pc}
   b8332:	bf00      	nop
   b8334:	000c6fcc 	.word	0x000c6fcc
   b8338:	c4c80000 	.word	0xc4c80000
   b833c:	44c80000 	.word	0x44c80000
   b8340:	3c75c28f 	.word	0x3c75c28f

000b8344 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b8344:	b510      	push	{r4, lr}
   b8346:	2128      	movs	r1, #40	; 0x28
   b8348:	4604      	mov	r4, r0
   b834a:	f7fb feaa 	bl	b40a2 <_ZdlPvj>
   b834e:	4620      	mov	r0, r4
   b8350:	bd10      	pop	{r4, pc}
	...

000b8354 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b8354:	4a03      	ldr	r2, [pc, #12]	; (b8364 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b8356:	6002      	str	r2, [r0, #0]
   b8358:	2200      	movs	r2, #0
   b835a:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b835e:	7602      	strb	r2, [r0, #24]
   b8360:	4770      	bx	lr
   b8362:	bf00      	nop
   b8364:	000c6fec 	.word	0x000c6fec

000b8368 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b8368:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b836a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b836c:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b836e:	2200      	movs	r2, #0
   b8370:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8374:	2506      	movs	r5, #6
   b8376:	2228      	movs	r2, #40	; 0x28
   b8378:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b837c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b837e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8382:	a806      	add	r0, sp, #24
   b8384:	f005 f91a 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b8388:	462a      	mov	r2, r5
   b838a:	a904      	add	r1, sp, #16
   b838c:	a806      	add	r0, sp, #24
   b838e:	f005 f993 	bl	bd6b8 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b8392:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b8394:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b8398:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b839c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b83a0:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b83a2:	2d03      	cmp	r5, #3
   b83a4:	bf98      	it	ls
   b83a6:	4812      	ldrls	r0, [pc, #72]	; (b83f0 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b83a8:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b83aa:	ee07 1a10 	vmov	s14, r1
   b83ae:	bf9c      	itt	ls
   b83b0:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b83b4:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b83b8:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b83ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b83be:	bf88      	it	hi
   b83c0:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b83c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b83c8:	ee07 2a10 	vmov	s14, r2
   b83cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b83d0:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b83d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b83d8:	ee07 3a10 	vmov	s14, r3
   b83dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b83e0:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b83e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b83e8:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b83ec:	b00d      	add	sp, #52	; 0x34
   b83ee:	bd30      	pop	{r4, r5, pc}
   b83f0:	000c6fd4 	.word	0x000c6fd4

000b83f4 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b83f4:	b538      	push	{r3, r4, r5, lr}
   b83f6:	460c      	mov	r4, r1
   b83f8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b83fa:	2220      	movs	r2, #32
   b83fc:	2100      	movs	r1, #0
   b83fe:	1d20      	adds	r0, r4, #4
   b8400:	f00c f952 	bl	c46a8 <memset>
  event->version = sizeof(sensors_event_t);
   b8404:	2324      	movs	r3, #36	; 0x24
   b8406:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b8408:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b840a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b840c:	2302      	movs	r3, #2
   b840e:	60a3      	str	r3, [r4, #8]
   b8410:	f005 fc98 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b8414:	6120      	str	r0, [r4, #16]
  read();
   b8416:	4628      	mov	r0, r5
   b8418:	f7ff ffa6 	bl	b8368 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b841c:	edd5 7a03 	vldr	s15, [r5, #12]
   b8420:	ed9f 7a09 	vldr	s14, [pc, #36]	; b8448 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b8424:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b8428:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b842a:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b842e:	edd5 7a04 	vldr	s15, [r5, #16]
   b8432:	ee67 7a87 	vmul.f32	s15, s15, s14
   b8436:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b843a:	edd5 7a05 	vldr	s15, [r5, #20]
   b843e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b8442:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b8446:	bd38      	pop	{r3, r4, r5, pc}
   b8448:	42c80000 	.word	0x42c80000

000b844c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b844c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b844e:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b8450:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8452:	2700      	movs	r7, #0
   b8454:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b8458:	2320      	movs	r3, #32
   b845a:	9300      	str	r3, [sp, #0]
   b845c:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b845e:	460e      	mov	r6, r1
   b8460:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8462:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8466:	462b      	mov	r3, r5
   b8468:	a808      	add	r0, sp, #32
   b846a:	f005 f8a7 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b846e:	2305      	movs	r3, #5
   b8470:	2202      	movs	r2, #2
   b8472:	a908      	add	r1, sp, #32
   b8474:	a804      	add	r0, sp, #16
   b8476:	f005 f97d 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b847a:	4631      	mov	r1, r6
   b847c:	a804      	add	r0, sp, #16
   b847e:	f005 f98b 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b8482:	2323      	movs	r3, #35	; 0x23
   b8484:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b8488:	9300      	str	r3, [sp, #0]
   b848a:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b848e:	462b      	mov	r3, r5
   b8490:	9501      	str	r5, [sp, #4]
   b8492:	a80e      	add	r0, sp, #56	; 0x38
   b8494:	f005 f892 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b8498:	2302      	movs	r3, #2
   b849a:	461a      	mov	r2, r3
   b849c:	a90e      	add	r1, sp, #56	; 0x38
   b849e:	a806      	add	r0, sp, #24
   b84a0:	f005 f968 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b84a4:	4631      	mov	r1, r6
   b84a6:	a806      	add	r0, sp, #24
   b84a8:	f005 f976 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b84ac:	b015      	add	sp, #84	; 0x54
   b84ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b84b0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b84b0:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b84b2:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b84b4:	b08c      	sub	sp, #48	; 0x30
   b84b6:	4606      	mov	r6, r0
   b84b8:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b84ba:	d103      	bne.n	b84c4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b84bc:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b84be:	f7ff ffc5 	bl	b844c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b84c2:	e009      	b.n	b84d8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b84c4:	2903      	cmp	r1, #3
   b84c6:	d003      	beq.n	b84d0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b84c8:	2905      	cmp	r1, #5
   b84ca:	d103      	bne.n	b84d4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b84cc:	2101      	movs	r1, #1
   b84ce:	e7f6      	b.n	b84be <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b84d0:	2102      	movs	r1, #2
   b84d2:	e7f4      	b.n	b84be <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b84d4:	2907      	cmp	r1, #7
   b84d6:	d01b      	beq.n	b8510 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b84d8:	200a      	movs	r0, #10
   b84da:	f005 ff9d 	bl	be418 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b84de:	2501      	movs	r5, #1
   b84e0:	2300      	movs	r3, #0
   b84e2:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b84e6:	2320      	movs	r3, #32
   b84e8:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b84ec:	9300      	str	r3, [sp, #0]
   b84ee:	9501      	str	r5, [sp, #4]
   b84f0:	462b      	mov	r3, r5
   b84f2:	a806      	add	r0, sp, #24
   b84f4:	f005 f862 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b84f8:	462b      	mov	r3, r5
   b84fa:	2204      	movs	r2, #4
   b84fc:	a906      	add	r1, sp, #24
   b84fe:	a804      	add	r0, sp, #16
   b8500:	f005 f938 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b8504:	4621      	mov	r1, r4
   b8506:	a804      	add	r0, sp, #16
   b8508:	f005 f946 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b850c:	b00c      	add	sp, #48	; 0x30
   b850e:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8510:	2100      	movs	r1, #0
   b8512:	e7d4      	b.n	b84be <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b8514 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8514:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b8516:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8518:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b851a:	2500      	movs	r5, #0
   b851c:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b8520:	2222      	movs	r2, #34	; 0x22
   b8522:	9301      	str	r3, [sp, #4]
   b8524:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8526:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b8528:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b852c:	a806      	add	r0, sp, #24
   b852e:	f005 f845 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b8532:	462b      	mov	r3, r5
   b8534:	2202      	movs	r2, #2
   b8536:	a906      	add	r1, sp, #24
   b8538:	a804      	add	r0, sp, #16
   b853a:	f005 f91b 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b853e:	4621      	mov	r1, r4
   b8540:	a804      	add	r0, sp, #16
   b8542:	f005 f929 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8546:	b00d      	add	sp, #52	; 0x34
   b8548:	bd30      	pop	{r4, r5, pc}

000b854a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b854a:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b854c:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b854e:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8550:	2200      	movs	r2, #0
   b8552:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8556:	2221      	movs	r2, #33	; 0x21
   b8558:	9301      	str	r3, [sp, #4]
   b855a:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b855c:	460d      	mov	r5, r1
   b855e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8560:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8564:	a806      	add	r0, sp, #24
   b8566:	f005 f829 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b856a:	2305      	movs	r3, #5
   b856c:	2202      	movs	r2, #2
   b856e:	a906      	add	r1, sp, #24
   b8570:	a804      	add	r0, sp, #16
   b8572:	f005 f8ff 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b8576:	4629      	mov	r1, r5
   b8578:	a804      	add	r0, sp, #16
   b857a:	f005 f90d 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b857e:	7625      	strb	r5, [r4, #24]
}
   b8580:	b00d      	add	sp, #52	; 0x34
   b8582:	bd30      	pop	{r4, r5, pc}

000b8584 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8584:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8586:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8588:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b858a:	2200      	movs	r2, #0
   b858c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8590:	2221      	movs	r2, #33	; 0x21
   b8592:	9301      	str	r3, [sp, #4]
   b8594:	9200      	str	r2, [sp, #0]
   b8596:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b859a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b859c:	a806      	add	r0, sp, #24
   b859e:	f005 f80d 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b85a2:	2305      	movs	r3, #5
   b85a4:	2202      	movs	r2, #2
   b85a6:	a906      	add	r1, sp, #24
   b85a8:	a804      	add	r0, sp, #16
   b85aa:	f005 f8e3 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b85ae:	a804      	add	r0, sp, #16
   b85b0:	f005 f8e5 	bl	bd77e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b85b4:	b2c0      	uxtb	r0, r0
   b85b6:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b85b8:	b00c      	add	sp, #48	; 0x30
   b85ba:	bd10      	pop	{r4, pc}

000b85bc <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b85bc:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85be:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b85c0:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85c2:	2501      	movs	r5, #1
   b85c4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b85c8:	2321      	movs	r3, #33	; 0x21
   b85ca:	9300      	str	r3, [sp, #0]
   b85cc:	9501      	str	r5, [sp, #4]
   b85ce:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b85d2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85d4:	462b      	mov	r3, r5
   b85d6:	a806      	add	r0, sp, #24
   b85d8:	f004 fff0 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b85dc:	2302      	movs	r3, #2
   b85de:	462a      	mov	r2, r5
   b85e0:	a906      	add	r1, sp, #24
   b85e2:	a804      	add	r0, sp, #16
   b85e4:	f005 f8c6 	bl	bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b85e8:	4629      	mov	r1, r5
   b85ea:	a804      	add	r0, sp, #16
   b85ec:	f005 f8d4 	bl	bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b85f0:	200a      	movs	r0, #10
   b85f2:	f005 ff11 	bl	be418 <delay>
  getRange();
   b85f6:	4620      	mov	r0, r4
   b85f8:	f7ff ffc4 	bl	b8584 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b85fc:	b00d      	add	sp, #52	; 0x34
   b85fe:	bd30      	pop	{r4, r5, pc}

000b8600 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b8600:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8602:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b8604:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8606:	2500      	movs	r5, #0
   b8608:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b860c:	230f      	movs	r3, #15
   b860e:	9300      	str	r3, [sp, #0]
   b8610:	9601      	str	r6, [sp, #4]
   b8612:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8616:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b8618:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b861a:	a804      	add	r0, sp, #16
   b861c:	f004 ffce 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b8620:	a804      	add	r0, sp, #16
   b8622:	f005 f88b 	bl	bd73c <_ZN23Adafruit_BusIO_Register4readEv>
   b8626:	283d      	cmp	r0, #61	; 0x3d
   b8628:	d115      	bne.n	b8656 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b862a:	4620      	mov	r0, r4
   b862c:	f7ff ffc6 	bl	b85bc <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b8630:	2103      	movs	r1, #3
   b8632:	4620      	mov	r0, r4
   b8634:	f7ff ff0a 	bl	b844c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b8638:	4631      	mov	r1, r6
   b863a:	4620      	mov	r0, r4
   b863c:	f7ff ff38 	bl	b84b0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b8640:	4629      	mov	r1, r5
   b8642:	4620      	mov	r0, r4
   b8644:	f7ff ff81 	bl	b854a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b8648:	4620      	mov	r0, r4
   b864a:	4629      	mov	r1, r5
   b864c:	f7ff ff62 	bl	b8514 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b8650:	4630      	mov	r0, r6
}
   b8652:	b00a      	add	sp, #40	; 0x28
   b8654:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8656:	4628      	mov	r0, r5
   b8658:	e7fb      	b.n	b8652 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b865a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b865a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b865c:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b865e:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b8660:	b95b      	cbnz	r3, b867a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b8662:	2010      	movs	r0, #16
   b8664:	e9cd 1200 	strd	r1, r2, [sp]
   b8668:	f7fb fd15 	bl	b4096 <_Znwj>
   b866c:	4605      	mov	r5, r0
   b866e:	b118      	cbz	r0, b8678 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b8670:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8674:	f005 f8a9 	bl	bd7ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b8678:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b867a:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b867c:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b867e:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b8680:	2101      	movs	r1, #1
   b8682:	f005 f8be 	bl	bd802 <_ZN18Adafruit_I2CDevice5beginEb>
   b8686:	b128      	cbz	r0, b8694 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b8688:	4620      	mov	r0, r4
}
   b868a:	b003      	add	sp, #12
   b868c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b8690:	f7ff bfb6 	b.w	b8600 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b8694:	b003      	add	sp, #12
   b8696:	bd30      	pop	{r4, r5, pc}

000b8698 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8698:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b869a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b869c:	b08b      	sub	sp, #44	; 0x2c
   b869e:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b86a0:	2500      	movs	r5, #0
   b86a2:	2232      	movs	r2, #50	; 0x32
   b86a4:	2102      	movs	r1, #2
   b86a6:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b86aa:	e9cd 2100 	strd	r2, r1, [sp]
   b86ae:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b86b2:	a804      	add	r0, sp, #16
   b86b4:	f004 ff82 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b86b8:	462a      	mov	r2, r5
   b86ba:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b86be:	a804      	add	r0, sp, #16
   b86c0:	f004 ffdc 	bl	bd67c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b86c4:	b00b      	add	sp, #44	; 0x2c
   b86c6:	bd30      	pop	{r4, r5, pc}

000b86c8 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b86c8:	b530      	push	{r4, r5, lr}
   b86ca:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b86cc:	2500      	movs	r5, #0
  value |= latch << 1;
   b86ce:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b86d2:	0064      	lsls	r4, r4, #1
   b86d4:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b86d8:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b86dc:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b86e0:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b86e4:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b86e8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b86ec:	2301      	movs	r3, #1
  value |= latch << 1;
   b86ee:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b86f2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b86f6:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b86f8:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b86fa:	2230      	movs	r2, #48	; 0x30
   b86fc:	9301      	str	r3, [sp, #4]
   b86fe:	9200      	str	r2, [sp, #0]
   b8700:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8704:	a804      	add	r0, sp, #16
   b8706:	f004 ff59 	bl	bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b870a:	462a      	mov	r2, r5
   b870c:	4621      	mov	r1, r4
   b870e:	a804      	add	r0, sp, #16
   b8710:	f004 ffb4 	bl	bd67c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8714:	b00b      	add	sp, #44	; 0x2c
   b8716:	bd30      	pop	{r4, r5, pc}

000b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b8718:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b871a:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b871c:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b871e:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8720:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8722:	041b      	lsls	r3, r3, #16
   b8724:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b8728:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b872a:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b872c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b8730:	bd10      	pop	{r4, pc}

000b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8732:	1843      	adds	r3, r0, r1
   b8734:	5c40      	ldrb	r0, [r0, r1]
   b8736:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b8738:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b873c:	4770      	bx	lr

000b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b873e:	b410      	push	{r4}
{
    if (base == 0) {
   b8740:	b92a      	cbnz	r2, b874e <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b8742:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b8744:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b8748:	6892      	ldr	r2, [r2, #8]
   b874a:	b2c9      	uxtb	r1, r1
   b874c:	4710      	bx	r2
}
   b874e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b8752:	b2d2      	uxtb	r2, r2
   b8754:	f008 bef7 	b.w	c1546 <_ZN5Print11printNumberEmh>

000b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b8758:	b912      	cbnz	r2, b8760 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b875a:	6803      	ldr	r3, [r0, #0]
   b875c:	689b      	ldr	r3, [r3, #8]
   b875e:	4718      	bx	r3
        return printNumber(val, base) + t;
   b8760:	b2d2      	uxtb	r2, r2
   b8762:	f008 bef0 	b.w	c1546 <_ZN5Print11printNumberEmh>

000b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b8766:	b510      	push	{r4, lr}
   b8768:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b876a:	f7ff fff5 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b876e:	4620      	mov	r0, r4
    }
   b8770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b8774:	f008 becf 	b.w	c1516 <_ZN5Print7printlnEv>

000b8778 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b8778:	6803      	ldr	r3, [r0, #0]
   b877a:	b2c9      	uxtb	r1, r1
   b877c:	689b      	ldr	r3, [r3, #8]
   b877e:	4718      	bx	r3

000b8780 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8784:	8002      	strh	r2, [r0, #0]
   b8786:	2142      	movs	r1, #66	; 0x42
   b8788:	2200      	movs	r2, #0
   b878a:	b510      	push	{r4, lr}
   b878c:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8790:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8794:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b8798:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b879c:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b87a0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b87a4:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b87a8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b87ac:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b87b0:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b87b4:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b87b8:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b87bc:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b87c0:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b87c4:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b87c8:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b87cc:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b87d0:	2180      	movs	r1, #128	; 0x80
   b87d2:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b87d6:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b87da:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b87de:	4925      	ldr	r1, [pc, #148]	; (b8874 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b87e0:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b87e4:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b87e8:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b87ec:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b87f0:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b87f4:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b87f8:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b87fc:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b8800:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b8804:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b8808:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b880c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8810:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8814:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b8818:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b881c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b8820:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b8824:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b8828:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b882c:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b8830:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b8834:	4910      	ldr	r1, [pc, #64]	; (b8878 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b8836:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b883a:	f640 1164 	movw	r1, #2404	; 0x964
   b883e:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b8842:	2158      	movs	r1, #88	; 0x58
   b8844:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8848:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b884a:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b884e:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b8852:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b8856:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b885a:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b885e:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b8862:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8866:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b886a:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b886e:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b8872:	bd10      	pop	{r4, pc}
   b8874:	02020000 	.word	0x02020000
   b8878:	64640200 	.word	0x64640200

000b887c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b887e:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b8880:	460d      	mov	r5, r1
   b8882:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b8886:	b9a9      	cbnz	r1, b88b4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b8888:	b1a8      	cbz	r0, b88b6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b888a:	f7fb fc08 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b888e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b8892:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8896:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b889a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b889e:	b913      	cbnz	r3, b88a6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b88a0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b88a4:	b123      	cbz	r3, b88b0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b88a6:	4920      	ldr	r1, [pc, #128]	; (b8928 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b88a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b88ac:	f008 fe49 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b88b0:	2001      	movs	r0, #1
   b88b2:	e011      	b.n	b88d8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b88b4:	b9b8      	cbnz	r0, b88e6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b88b6:	4628      	mov	r0, r5
   b88b8:	f7fb fbef 	bl	b409a <_Znaj>
   b88bc:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b88c0:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b88c4:	bb60      	cbnz	r0, b8920 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b88c6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b88ca:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b88ce:	b923      	cbnz	r3, b88da <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b88d0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b88d4:	b90b      	cbnz	r3, b88da <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b88d6:	2000      	movs	r0, #0
}
   b88d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b88da:	4914      	ldr	r1, [pc, #80]	; (b892c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b88dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b88e0:	f008 fe2f 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b88e4:	e7f7      	b.n	b88d6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b88e6:	4608      	mov	r0, r1
   b88e8:	f7fb fbd7 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b88ec:	4606      	mov	r6, r0
   b88ee:	b940      	cbnz	r0, b8902 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b88f0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b88f4:	b91b      	cbnz	r3, b88fe <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b88f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b88fa:	2b00      	cmp	r3, #0
   b88fc:	d0eb      	beq.n	b88d6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b88fe:	490c      	ldr	r1, [pc, #48]	; (b8930 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b8900:	e7ec      	b.n	b88dc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b8902:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b8906:	42aa      	cmp	r2, r5
   b8908:	bf28      	it	cs
   b890a:	462a      	movcs	r2, r5
   b890c:	4639      	mov	r1, r7
   b890e:	f00b fea3 	bl	c4658 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8912:	4638      	mov	r0, r7
   b8914:	f7fb fbc3 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b8918:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b891c:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b8920:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b8924:	e7c4      	b.n	b88b0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b8926:	bf00      	nop
   b8928:	000c7000 	.word	0x000c7000
   b892c:	000c702b 	.word	0x000c702b
   b8930:	000c7056 	.word	0x000c7056

000b8934 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b8934:	290d      	cmp	r1, #13
   b8936:	f000 80cd 	beq.w	b8ad4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b893a:	d809      	bhi.n	b8950 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b893c:	2902      	cmp	r1, #2
   b893e:	f000 80a7 	beq.w	b8a90 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b8942:	2906      	cmp	r1, #6
   b8944:	f000 80be 	beq.w	b8ac4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b8948:	2901      	cmp	r1, #1
   b894a:	d016      	beq.n	b897a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b894c:	2000      	movs	r0, #0
}
   b894e:	4770      	bx	lr
  switch (Class)
   b8950:	2913      	cmp	r1, #19
   b8952:	f000 80d4 	beq.w	b8afe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b8956:	2928      	cmp	r1, #40	; 0x28
   b8958:	f000 80dc 	beq.w	b8b14 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b895c:	2910      	cmp	r1, #16
   b895e:	d1f5      	bne.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b8960:	2a10      	cmp	r2, #16
   b8962:	f000 80c9 	beq.w	b8af8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b8966:	f200 80ba 	bhi.w	b8ade <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b896a:	2a02      	cmp	r2, #2
   b896c:	f000 80c1 	beq.w	b8af2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b8970:	2a03      	cmp	r2, #3
   b8972:	d1eb      	bne.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b8974:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b8978:	e066      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b897a:	2a26      	cmp	r2, #38	; 0x26
   b897c:	d854      	bhi.n	b8a28 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b897e:	2a00      	cmp	r2, #0
   b8980:	d0e4      	beq.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8982:	3a01      	subs	r2, #1
   b8984:	2a25      	cmp	r2, #37	; 0x25
   b8986:	d8e1      	bhi.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8988:	a301      	add	r3, pc, #4	; (adr r3, b8990 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b898a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b898e:	bf00      	nop
   b8990:	000b8a47 	.word	0x000b8a47
   b8994:	000b894d 	.word	0x000b894d
   b8998:	000b8a51 	.word	0x000b8a51
   b899c:	000b8a55 	.word	0x000b8a55
   b89a0:	000b8a59 	.word	0x000b8a59
   b89a4:	000b894d 	.word	0x000b894d
   b89a8:	000b8a5d 	.word	0x000b8a5d
   b89ac:	000b894d 	.word	0x000b894d
   b89b0:	000b8a61 	.word	0x000b8a61
   b89b4:	000b894d 	.word	0x000b894d
   b89b8:	000b894d 	.word	0x000b894d
   b89bc:	000b894d 	.word	0x000b894d
   b89c0:	000b894d 	.word	0x000b894d
   b89c4:	000b894d 	.word	0x000b894d
   b89c8:	000b894d 	.word	0x000b894d
   b89cc:	000b894d 	.word	0x000b894d
   b89d0:	000b8a65 	.word	0x000b8a65
   b89d4:	000b8a69 	.word	0x000b8a69
   b89d8:	000b8a6d 	.word	0x000b8a6d
   b89dc:	000b8a71 	.word	0x000b8a71
   b89e0:	000b894d 	.word	0x000b894d
   b89e4:	000b894d 	.word	0x000b894d
   b89e8:	000b8a75 	.word	0x000b8a75
   b89ec:	000b894d 	.word	0x000b894d
   b89f0:	000b894d 	.word	0x000b894d
   b89f4:	000b894d 	.word	0x000b894d
   b89f8:	000b894d 	.word	0x000b894d
   b89fc:	000b894d 	.word	0x000b894d
   b8a00:	000b894d 	.word	0x000b894d
   b8a04:	000b894d 	.word	0x000b894d
   b8a08:	000b894d 	.word	0x000b894d
   b8a0c:	000b894d 	.word	0x000b894d
   b8a10:	000b8a79 	.word	0x000b8a79
   b8a14:	000b8a7d 	.word	0x000b8a7d
   b8a18:	000b894d 	.word	0x000b894d
   b8a1c:	000b894d 	.word	0x000b894d
   b8a20:	000b894d 	.word	0x000b894d
   b8a24:	000b8a81 	.word	0x000b8a81
   b8a28:	2a3c      	cmp	r2, #60	; 0x3c
   b8a2a:	d02d      	beq.n	b8a88 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b8a2c:	d805      	bhi.n	b8a3a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b8a2e:	2a35      	cmp	r2, #53	; 0x35
   b8a30:	d028      	beq.n	b8a84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8a32:	2a3b      	cmp	r2, #59	; 0x3b
   b8a34:	d18a      	bne.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b8a36:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b8a38:	e006      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8a3a:	2a60      	cmp	r2, #96	; 0x60
   b8a3c:	d026      	beq.n	b8a8c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b8a3e:	2a61      	cmp	r2, #97	; 0x61
   b8a40:	d184      	bne.n	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8a42:	6980      	ldr	r0, [r0, #24]
   b8a44:	e000      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b8a46:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b8a48:	3800      	subs	r0, #0
   b8a4a:	bf18      	it	ne
   b8a4c:	2001      	movne	r0, #1
   b8a4e:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b8a50:	6900      	ldr	r0, [r0, #16]
   b8a52:	e7f9      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8a54:	6940      	ldr	r0, [r0, #20]
   b8a56:	e7f7      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b8a58:	69c0      	ldr	r0, [r0, #28]
   b8a5a:	e7f5      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b8a5c:	6a00      	ldr	r0, [r0, #32]
   b8a5e:	e7f3      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b8a60:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8a62:	e7f1      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b8a64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8a66:	e7ef      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b8a68:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b8a6a:	e7ed      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b8a6c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b8a6e:	e7eb      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b8a70:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b8a72:	e7e9      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b8a74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8a76:	e7e7      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b8a78:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8a7a:	e7e5      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b8a7c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b8a7e:	e7e3      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b8a80:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b8a82:	e7e1      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8a84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b8a86:	e7df      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b8a88:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8a8a:	e7dd      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8a8c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b8a8e:	e7db      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a90:	2a34      	cmp	r2, #52	; 0x34
   b8a92:	d015      	beq.n	b8ac0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8a94:	d806      	bhi.n	b8aa4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b8a96:	2a13      	cmp	r2, #19
   b8a98:	d00b      	beq.n	b8ab2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b8a9a:	2a15      	cmp	r2, #21
   b8a9c:	f47f af56 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8aa0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8aa2:	e7d1      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8aa4:	2a72      	cmp	r2, #114	; 0x72
   b8aa6:	d006      	beq.n	b8ab6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b8aa8:	2a73      	cmp	r2, #115	; 0x73
   b8aaa:	f47f af4f 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8aae:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8ab0:	e7ca      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8ab2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8ab4:	e7c8      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8ab6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8ab8:	2b00      	cmp	r3, #0
   b8aba:	d13b      	bne.n	b8b34 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8abc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8abe:	e7c3      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8ac0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8ac2:	e7c1      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8ac4:	b122      	cbz	r2, b8ad0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8ac6:	2a08      	cmp	r2, #8
   b8ac8:	f47f af40 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8acc:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8ace:	e7bb      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8ad0:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8ad2:	e7b9      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8ad4:	2a03      	cmp	r2, #3
   b8ad6:	f47f af39 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b8ada:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8adc:	e7b4      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8ade:	2a14      	cmp	r2, #20
   b8ae0:	d005      	beq.n	b8aee <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8ae2:	2a15      	cmp	r2, #21
   b8ae4:	f47f af32 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b8ae8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8aec:	e7ac      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8aee:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8af0:	e7aa      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8af2:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b8af6:	e7a7      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b8af8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8afc:	e7a4      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8afe:	2a60      	cmp	r2, #96	; 0x60
   b8b00:	d005      	beq.n	b8b0e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8b02:	2a80      	cmp	r2, #128	; 0x80
   b8b04:	f47f af22 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b8b08:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8b0c:	e79c      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8b0e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8b12:	e799      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b14:	2a01      	cmp	r2, #1
   b8b16:	d007      	beq.n	b8b28 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b8b18:	2a02      	cmp	r2, #2
   b8b1a:	d008      	beq.n	b8b2e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8b1c:	2a00      	cmp	r2, #0
   b8b1e:	f47f af15 	bne.w	b894c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8b22:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b8b26:	e78f      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b8b28:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8b2c:	e78c      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8b2e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8b32:	e789      	b.n	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8b34:	2001      	movs	r0, #1
   b8b36:	4770      	bx	lr

000b8b38 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8b38:	290d      	cmp	r1, #13
   b8b3a:	d035      	beq.n	b8ba8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8b3c:	d807      	bhi.n	b8b4e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8b3e:	2902      	cmp	r1, #2
   b8b40:	d019      	beq.n	b8b76 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8b42:	2906      	cmp	r1, #6
   b8b44:	d02a      	beq.n	b8b9c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8b46:	2901      	cmp	r1, #1
   b8b48:	d00d      	beq.n	b8b66 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b8b4a:	2000      	movs	r0, #0
}
   b8b4c:	4770      	bx	lr
  switch (Class)
   b8b4e:	2913      	cmp	r1, #19
   b8b50:	d02f      	beq.n	b8bb2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8b52:	2928      	cmp	r1, #40	; 0x28
   b8b54:	d034      	beq.n	b8bc0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8b56:	2910      	cmp	r1, #16
   b8b58:	d1f7      	bne.n	b8b4a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b8b5a:	3a02      	subs	r2, #2
   b8b5c:	b2d2      	uxtb	r2, r2
   b8b5e:	2a13      	cmp	r2, #19
   b8b60:	d8f3      	bhi.n	b8b4a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8b62:	4b1f      	ldr	r3, [pc, #124]	; (b8be0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8b64:	e004      	b.n	b8b70 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b8b66:	3a01      	subs	r2, #1
   b8b68:	b2d2      	uxtb	r2, r2
   b8b6a:	2a60      	cmp	r2, #96	; 0x60
   b8b6c:	d8ed      	bhi.n	b8b4a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8b6e:	4b1d      	ldr	r3, [pc, #116]	; (b8be4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b8b70:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8b74:	4770      	bx	lr
    switch (ID)
   b8b76:	2a34      	cmp	r2, #52	; 0x34
   b8b78:	d027      	beq.n	b8bca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b8b7a:	d807      	bhi.n	b8b8c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8b7c:	2a13      	cmp	r2, #19
   b8b7e:	d026      	beq.n	b8bce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8b80:	2a15      	cmp	r2, #21
   b8b82:	bf14      	ite	ne
   b8b84:	2000      	movne	r0, #0
   b8b86:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b8b8a:	4770      	bx	lr
   b8b8c:	2a72      	cmp	r2, #114	; 0x72
   b8b8e:	d020      	beq.n	b8bd2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8b90:	2a73      	cmp	r2, #115	; 0x73
   b8b92:	bf14      	ite	ne
   b8b94:	2000      	movne	r0, #0
   b8b96:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b8b9a:	4770      	bx	lr
    switch (ID)
   b8b9c:	b1e2      	cbz	r2, b8bd8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8b9e:	2a08      	cmp	r2, #8
   b8ba0:	bf14      	ite	ne
   b8ba2:	2000      	movne	r0, #0
   b8ba4:	2006      	moveq	r0, #6
   b8ba6:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b8ba8:	2a03      	cmp	r2, #3
   b8baa:	bf14      	ite	ne
   b8bac:	2000      	movne	r0, #0
   b8bae:	201c      	moveq	r0, #28
   b8bb0:	4770      	bx	lr
    switch (ID)
   b8bb2:	2a60      	cmp	r2, #96	; 0x60
   b8bb4:	d012      	beq.n	b8bdc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8bb6:	2a80      	cmp	r2, #128	; 0x80
   b8bb8:	bf14      	ite	ne
   b8bba:	2000      	movne	r0, #0
   b8bbc:	20a4      	moveq	r0, #164	; 0xa4
   b8bbe:	4770      	bx	lr
    switch (ID)
   b8bc0:	2a02      	cmp	r2, #2
   b8bc2:	d8c2      	bhi.n	b8b4a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8bc4:	4b08      	ldr	r3, [pc, #32]	; (b8be8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8bc6:	5c98      	ldrb	r0, [r3, r2]
   b8bc8:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b8bca:	200c      	movs	r0, #12
   b8bcc:	4770      	bx	lr
   b8bce:	2048      	movs	r0, #72	; 0x48
   b8bd0:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8bd2:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8bd6:	4770      	bx	lr
   b8bd8:	2014      	movs	r0, #20
   b8bda:	4770      	bx	lr
   b8bdc:	2008      	movs	r0, #8
   b8bde:	4770      	bx	lr
   b8be0:	000c7d16 	.word	0x000c7d16
   b8be4:	000c7c54 	.word	0x000c7c54
   b8be8:	000c7d3e 	.word	0x000c7d3e

000b8bec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8bec:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8bee:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8bf2:	07ca      	lsls	r2, r1, #31
   b8bf4:	d415      	bmi.n	b8c22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b8bf6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8bfa:	4b59      	ldr	r3, [pc, #356]	; (b8d60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8bfc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8c00:	429a      	cmp	r2, r3
   b8c02:	d101      	bne.n	b8c08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8c04:	078b      	lsls	r3, r1, #30
   b8c06:	d40c      	bmi.n	b8c22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8c08:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8c0c:	2b47      	cmp	r3, #71	; 0x47
   b8c0e:	d174      	bne.n	b8cfa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8c10:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8c14:	f245 1441 	movw	r4, #20801	; 0x5141
   b8c18:	42a3      	cmp	r3, r4
   b8c1a:	d104      	bne.n	b8c26 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8c1c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8c20:	d06b      	beq.n	b8cfa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8c22:	2001      	movs	r0, #1
   b8c24:	e070      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b8c26:	f245 1442 	movw	r4, #20802	; 0x5142
   b8c2a:	42a3      	cmp	r3, r4
   b8c2c:	d102      	bne.n	b8c34 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8c2e:	f011 0f08 	tst.w	r1, #8
   b8c32:	e7f5      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8c34:	f245 3442 	movw	r4, #21314	; 0x5342
   b8c38:	42a3      	cmp	r3, r4
   b8c3a:	d102      	bne.n	b8c42 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8c3c:	f011 0f10 	tst.w	r1, #16
   b8c40:	e7ee      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8c42:	f244 1447 	movw	r4, #16711	; 0x4147
   b8c46:	42a3      	cmp	r3, r4
   b8c48:	d102      	bne.n	b8c50 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b8c4a:	f011 0f20 	tst.w	r1, #32
   b8c4e:	e7e7      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8c50:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8c54:	42a3      	cmp	r3, r4
   b8c56:	d102      	bne.n	b8c5e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8c58:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8c5c:	e7e0      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8c5e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8c62:	42a3      	cmp	r3, r4
   b8c64:	d102      	bne.n	b8c6c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b8c66:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8c6a:	e7d9      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8c6c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8c70:	428b      	cmp	r3, r1
   b8c72:	d104      	bne.n	b8c7e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8c74:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c78:	f013 0f01 	tst.w	r3, #1
   b8c7c:	e7d0      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8c7e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8c82:	428b      	cmp	r3, r1
   b8c84:	d104      	bne.n	b8c90 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b8c86:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c8a:	f013 0f02 	tst.w	r3, #2
   b8c8e:	e7c7      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8c90:	f245 1150 	movw	r1, #20816	; 0x5150
   b8c94:	428b      	cmp	r3, r1
   b8c96:	d104      	bne.n	b8ca2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b8c98:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c9c:	f013 0f04 	tst.w	r3, #4
   b8ca0:	e7be      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8ca2:	f245 1151 	movw	r1, #20817	; 0x5151
   b8ca6:	428b      	cmp	r3, r1
   b8ca8:	d104      	bne.n	b8cb4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b8caa:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8cae:	f013 0f08 	tst.w	r3, #8
   b8cb2:	e7b5      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8cb4:	f245 3152 	movw	r1, #21330	; 0x5352
   b8cb8:	428b      	cmp	r3, r1
   b8cba:	d104      	bne.n	b8cc6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8cbc:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8cc0:	f013 0f10 	tst.w	r3, #16
   b8cc4:	e7ac      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8cc6:	f244 1153 	movw	r1, #16723	; 0x4153
   b8cca:	428b      	cmp	r3, r1
   b8ccc:	d104      	bne.n	b8cd8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8cce:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8cd2:	f013 0f20 	tst.w	r3, #32
   b8cd6:	e7a3      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8cd8:	f245 4153 	movw	r1, #21587	; 0x5453
   b8cdc:	428b      	cmp	r3, r1
   b8cde:	d104      	bne.n	b8cea <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8ce0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8ce4:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8ce8:	e79a      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b8cea:	f245 6153 	movw	r1, #22099	; 0x5653
   b8cee:	428b      	cmp	r3, r1
   b8cf0:	d103      	bne.n	b8cfa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8cf2:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8cf6:	2b00      	cmp	r3, #0
   b8cf8:	db93      	blt.n	b8c22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b8cfa:	4b1a      	ldr	r3, [pc, #104]	; (b8d64 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8cfc:	429a      	cmp	r2, r3
   b8cfe:	d104      	bne.n	b8d0a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8d00:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d04:	f000 0001 	and.w	r0, r0, #1
}
   b8d08:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b8d0a:	4b17      	ldr	r3, [pc, #92]	; (b8d68 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8d0c:	429a      	cmp	r2, r3
   b8d0e:	d104      	bne.n	b8d1a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8d10:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d14:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8d18:	e7f6      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b8d1a:	4b14      	ldr	r3, [pc, #80]	; (b8d6c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8d1c:	429a      	cmp	r2, r3
   b8d1e:	d104      	bne.n	b8d2a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8d20:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d24:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8d28:	e7ee      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b8d2a:	4b11      	ldr	r3, [pc, #68]	; (b8d70 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8d2c:	429a      	cmp	r2, r3
   b8d2e:	d104      	bne.n	b8d3a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8d30:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d34:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8d38:	e7e6      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b8d3a:	4b0e      	ldr	r3, [pc, #56]	; (b8d74 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8d3c:	429a      	cmp	r2, r3
   b8d3e:	d104      	bne.n	b8d4a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8d40:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d44:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8d48:	e7de      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b8d4a:	4b0b      	ldr	r3, [pc, #44]	; (b8d78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8d4c:	429a      	cmp	r2, r3
   b8d4e:	d104      	bne.n	b8d5a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8d50:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d54:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8d58:	e7d6      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b8d5a:	2000      	movs	r0, #0
   b8d5c:	e7d4      	b.n	b8d08 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8d5e:	bf00      	nop
   b8d60:	4d544400 	.word	0x4d544400
   b8d64:	4d4c5200 	.word	0x4d4c5200
   b8d68:	434d5200 	.word	0x434d5200
   b8d6c:	54585400 	.word	0x54585400
   b8d70:	574c5600 	.word	0x574c5600
   b8d74:	47545600 	.word	0x47545600
   b8d78:	41445a00 	.word	0x41445a00

000b8d7c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8d7c:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8d80:	2b2a      	cmp	r3, #42	; 0x2a
   b8d82:	d157      	bne.n	b8e34 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8d84:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8d88:	2b47      	cmp	r3, #71	; 0x47
   b8d8a:	d153      	bne.n	b8e34 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8d8c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8d90:	4a29      	ldr	r2, [pc, #164]	; (b8e38 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8d96:	4293      	cmp	r3, r2
   b8d98:	d011      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b8d9a:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8d9e:	2a47      	cmp	r2, #71	; 0x47
   b8da0:	d11a      	bne.n	b8dd8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8da2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8da6:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b8daa:	3941      	subs	r1, #65	; 0x41
   b8dac:	b289      	uxth	r1, r1
   b8dae:	2910      	cmp	r1, #16
   b8db0:	d907      	bls.n	b8dc2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8db2:	f022 0110 	bic.w	r1, r2, #16
   b8db6:	f245 3042 	movw	r0, #21314	; 0x5342
   b8dba:	4281      	cmp	r1, r0
   b8dbc:	d129      	bne.n	b8e12 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8dbe:	2001      	movs	r0, #1
}
   b8dc0:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8dc2:	481e      	ldr	r0, [pc, #120]	; (b8e3c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8dc4:	fa20 f101 	lsr.w	r1, r0, r1
   b8dc8:	07c9      	lsls	r1, r1, #31
   b8dca:	d4f8      	bmi.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8dd0:	f245 4153 	movw	r1, #21587	; 0x5453
   b8dd4:	428a      	cmp	r2, r1
   b8dd6:	d0f2      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8dd8:	4a19      	ldr	r2, [pc, #100]	; (b8e40 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8dda:	4293      	cmp	r3, r2
   b8ddc:	d0ef      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8dde:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8de2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8de6:	4293      	cmp	r3, r2
   b8de8:	d0e9      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b8dea:	4a16      	ldr	r2, [pc, #88]	; (b8e44 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8dec:	4293      	cmp	r3, r2
   b8dee:	d0e6      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8df0:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8df4:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8df8:	4293      	cmp	r3, r2
   b8dfa:	d0e0      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8dfc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8e00:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8e04:	4293      	cmp	r3, r2
   b8e06:	d0da      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8e08:	480f      	ldr	r0, [pc, #60]	; (b8e48 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b8e0a:	1a1b      	subs	r3, r3, r0
   b8e0c:	4258      	negs	r0, r3
   b8e0e:	4158      	adcs	r0, r3
   b8e10:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8e12:	f244 1147 	movw	r1, #16711	; 0x4147
   b8e16:	428a      	cmp	r2, r1
   b8e18:	d0d1      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8e1a:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8e1e:	428a      	cmp	r2, r1
   b8e20:	d0cd      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8e22:	f245 314e 	movw	r1, #21326	; 0x534e
   b8e26:	428a      	cmp	r2, r1
   b8e28:	d0c9      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8e2a:	f244 1153 	movw	r1, #16723	; 0x4153
   b8e2e:	428a      	cmp	r2, r1
   b8e30:	d0c5      	beq.n	b8dbe <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8e32:	e7cb      	b.n	b8dcc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8e34:	2000      	movs	r0, #0
   b8e36:	4770      	bx	lr
   b8e38:	4d544400 	.word	0x4d544400
   b8e3c:	0001a803 	.word	0x0001a803
   b8e40:	4d4c5200 	.word	0x4d4c5200
   b8e44:	54585400 	.word	0x54585400
   b8e48:	41445a00 	.word	0x41445a00

000b8e4c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8e4c:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8e4e:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8e52:	07ca      	lsls	r2, r1, #31
   b8e54:	d415      	bmi.n	b8e82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8e56:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8e5a:	4b59      	ldr	r3, [pc, #356]	; (b8fc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8e5c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8e60:	429a      	cmp	r2, r3
   b8e62:	d101      	bne.n	b8e68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8e64:	078b      	lsls	r3, r1, #30
   b8e66:	d40c      	bmi.n	b8e82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8e68:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8e6c:	2b47      	cmp	r3, #71	; 0x47
   b8e6e:	d174      	bne.n	b8f5a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8e70:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8e74:	f245 1441 	movw	r4, #20801	; 0x5141
   b8e78:	42a3      	cmp	r3, r4
   b8e7a:	d104      	bne.n	b8e86 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8e7c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8e80:	d06b      	beq.n	b8f5a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8e82:	2001      	movs	r0, #1
   b8e84:	e070      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8e86:	f245 1442 	movw	r4, #20802	; 0x5142
   b8e8a:	42a3      	cmp	r3, r4
   b8e8c:	d102      	bne.n	b8e94 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8e8e:	f011 0f08 	tst.w	r1, #8
   b8e92:	e7f5      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8e94:	f245 3442 	movw	r4, #21314	; 0x5342
   b8e98:	42a3      	cmp	r3, r4
   b8e9a:	d102      	bne.n	b8ea2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8e9c:	f011 0f10 	tst.w	r1, #16
   b8ea0:	e7ee      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8ea2:	f244 1447 	movw	r4, #16711	; 0x4147
   b8ea6:	42a3      	cmp	r3, r4
   b8ea8:	d102      	bne.n	b8eb0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8eaa:	f011 0f20 	tst.w	r1, #32
   b8eae:	e7e7      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8eb0:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8eb4:	42a3      	cmp	r3, r4
   b8eb6:	d102      	bne.n	b8ebe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8eb8:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8ebc:	e7e0      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8ebe:	f245 144c 	movw	r4, #20812	; 0x514c
   b8ec2:	42a3      	cmp	r3, r4
   b8ec4:	d102      	bne.n	b8ecc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8ec6:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8eca:	e7d9      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8ecc:	f245 114e 	movw	r1, #20814	; 0x514e
   b8ed0:	428b      	cmp	r3, r1
   b8ed2:	d104      	bne.n	b8ede <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8ed4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8ed8:	f013 0f01 	tst.w	r3, #1
   b8edc:	e7d0      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8ede:	f245 314e 	movw	r1, #21326	; 0x534e
   b8ee2:	428b      	cmp	r3, r1
   b8ee4:	d104      	bne.n	b8ef0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8ee6:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8eea:	f013 0f02 	tst.w	r3, #2
   b8eee:	e7c7      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8ef0:	f245 1150 	movw	r1, #20816	; 0x5150
   b8ef4:	428b      	cmp	r3, r1
   b8ef6:	d104      	bne.n	b8f02 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8ef8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8efc:	f013 0f04 	tst.w	r3, #4
   b8f00:	e7be      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8f02:	f245 1151 	movw	r1, #20817	; 0x5151
   b8f06:	428b      	cmp	r3, r1
   b8f08:	d104      	bne.n	b8f14 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8f0a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f0e:	f013 0f08 	tst.w	r3, #8
   b8f12:	e7b5      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8f14:	f245 3152 	movw	r1, #21330	; 0x5352
   b8f18:	428b      	cmp	r3, r1
   b8f1a:	d104      	bne.n	b8f26 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8f1c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f20:	f013 0f10 	tst.w	r3, #16
   b8f24:	e7ac      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8f26:	f244 1153 	movw	r1, #16723	; 0x4153
   b8f2a:	428b      	cmp	r3, r1
   b8f2c:	d104      	bne.n	b8f38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8f2e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f32:	f013 0f20 	tst.w	r3, #32
   b8f36:	e7a3      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8f38:	f245 4153 	movw	r1, #21587	; 0x5453
   b8f3c:	428b      	cmp	r3, r1
   b8f3e:	d104      	bne.n	b8f4a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8f40:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f44:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8f48:	e79a      	b.n	b8e80 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8f4a:	f245 6153 	movw	r1, #22099	; 0x5653
   b8f4e:	428b      	cmp	r3, r1
   b8f50:	d103      	bne.n	b8f5a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8f52:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8f56:	2b00      	cmp	r3, #0
   b8f58:	db93      	blt.n	b8e82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8f5a:	4b1a      	ldr	r3, [pc, #104]	; (b8fc4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8f5c:	429a      	cmp	r2, r3
   b8f5e:	d104      	bne.n	b8f6a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8f60:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f64:	f000 0001 	and.w	r0, r0, #1
}
   b8f68:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8f6a:	4b17      	ldr	r3, [pc, #92]	; (b8fc8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8f6c:	429a      	cmp	r2, r3
   b8f6e:	d104      	bne.n	b8f7a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8f70:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f74:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8f78:	e7f6      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8f7a:	4b14      	ldr	r3, [pc, #80]	; (b8fcc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8f7c:	429a      	cmp	r2, r3
   b8f7e:	d104      	bne.n	b8f8a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8f80:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f84:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8f88:	e7ee      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8f8a:	4b11      	ldr	r3, [pc, #68]	; (b8fd0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8f8c:	429a      	cmp	r2, r3
   b8f8e:	d104      	bne.n	b8f9a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8f90:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8f98:	e7e6      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8f9a:	4b0e      	ldr	r3, [pc, #56]	; (b8fd4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8f9c:	429a      	cmp	r2, r3
   b8f9e:	d104      	bne.n	b8faa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8fa0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8fa4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8fa8:	e7de      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8faa:	4b0b      	ldr	r3, [pc, #44]	; (b8fd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8fac:	429a      	cmp	r2, r3
   b8fae:	d104      	bne.n	b8fba <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8fb0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8fb4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8fb8:	e7d6      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8fba:	2000      	movs	r0, #0
   b8fbc:	e7d4      	b.n	b8f68 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8fbe:	bf00      	nop
   b8fc0:	4d544400 	.word	0x4d544400
   b8fc4:	4d4c5200 	.word	0x4d4c5200
   b8fc8:	434d5200 	.word	0x434d5200
   b8fcc:	54585400 	.word	0x54585400
   b8fd0:	574c5600 	.word	0x574c5600
   b8fd4:	47545600 	.word	0x47545600
   b8fd8:	41445a00 	.word	0x41445a00

000b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8fdc:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8fe0:	b110      	cbz	r0, b8fe8 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8fe2:	6803      	ldr	r3, [r0, #0]
   b8fe4:	689b      	ldr	r3, [r3, #8]
   b8fe6:	4718      	bx	r3
}
   b8fe8:	4770      	bx	lr
	...

000b8fec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8fee:	4b3d      	ldr	r3, [pc, #244]	; (b90e4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8ff0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ff2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8ff6:	6818      	ldr	r0, [r3, #0]
   b8ff8:	9000      	str	r0, [sp, #0]
   b8ffa:	889b      	ldrh	r3, [r3, #4]
   b8ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9000:	2205      	movs	r2, #5
   b9002:	4629      	mov	r1, r5
   b9004:	4668      	mov	r0, sp
   b9006:	f00b fb17 	bl	c4638 <memcmp>
   b900a:	b928      	cbnz	r0, b9018 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b900c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9010:	b113      	cbz	r3, b9018 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b9012:	2001      	movs	r0, #1
}
   b9014:	b003      	add	sp, #12
   b9016:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9018:	4933      	ldr	r1, [pc, #204]	; (b90e8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b901a:	4668      	mov	r0, sp
   b901c:	f00b fbaa 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9020:	2205      	movs	r2, #5
   b9022:	4629      	mov	r1, r5
   b9024:	4668      	mov	r0, sp
   b9026:	f00b fb07 	bl	c4638 <memcmp>
   b902a:	b918      	cbnz	r0, b9034 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b902c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9030:	2b00      	cmp	r3, #0
   b9032:	d1ee      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b9034:	492d      	ldr	r1, [pc, #180]	; (b90ec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b9036:	4668      	mov	r0, sp
   b9038:	f00b fb9c 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b903c:	2205      	movs	r2, #5
   b903e:	4629      	mov	r1, r5
   b9040:	4668      	mov	r0, sp
   b9042:	f00b faf9 	bl	c4638 <memcmp>
   b9046:	b918      	cbnz	r0, b9050 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b9048:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b904c:	2b00      	cmp	r3, #0
   b904e:	d1e0      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b9050:	4927      	ldr	r1, [pc, #156]	; (b90f0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b9052:	4668      	mov	r0, sp
   b9054:	f00b fb8e 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9058:	2205      	movs	r2, #5
   b905a:	4629      	mov	r1, r5
   b905c:	4668      	mov	r0, sp
   b905e:	f00b faeb 	bl	c4638 <memcmp>
   b9062:	b918      	cbnz	r0, b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b9064:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9068:	2b00      	cmp	r3, #0
   b906a:	d1d2      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b906c:	4921      	ldr	r1, [pc, #132]	; (b90f4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b906e:	4668      	mov	r0, sp
   b9070:	f00b fb80 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9074:	2205      	movs	r2, #5
   b9076:	4629      	mov	r1, r5
   b9078:	4668      	mov	r0, sp
   b907a:	f00b fadd 	bl	c4638 <memcmp>
   b907e:	b918      	cbnz	r0, b9088 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b9080:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9084:	2b00      	cmp	r3, #0
   b9086:	d1c4      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b9088:	491b      	ldr	r1, [pc, #108]	; (b90f8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b908a:	4668      	mov	r0, sp
   b908c:	f00b fb72 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9090:	2205      	movs	r2, #5
   b9092:	4629      	mov	r1, r5
   b9094:	4668      	mov	r0, sp
   b9096:	f00b facf 	bl	c4638 <memcmp>
   b909a:	b918      	cbnz	r0, b90a4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b909c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b90a0:	2b00      	cmp	r3, #0
   b90a2:	d1b6      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b90a4:	4915      	ldr	r1, [pc, #84]	; (b90fc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b90a6:	4668      	mov	r0, sp
   b90a8:	f00b fb64 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90ac:	2205      	movs	r2, #5
   b90ae:	4629      	mov	r1, r5
   b90b0:	4668      	mov	r0, sp
   b90b2:	f00b fac1 	bl	c4638 <memcmp>
   b90b6:	b918      	cbnz	r0, b90c0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b90b8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b90bc:	2b00      	cmp	r3, #0
   b90be:	d1a8      	bne.n	b9012 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b90c0:	490f      	ldr	r1, [pc, #60]	; (b9100 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b90c2:	4668      	mov	r0, sp
   b90c4:	f00b fb56 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90c8:	2205      	movs	r2, #5
   b90ca:	4629      	mov	r1, r5
   b90cc:	4668      	mov	r0, sp
   b90ce:	f00b fab3 	bl	c4638 <memcmp>
   b90d2:	b928      	cbnz	r0, b90e0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b90d4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b90d8:	3800      	subs	r0, #0
   b90da:	bf18      	it	ne
   b90dc:	2001      	movne	r0, #1
   b90de:	e799      	b.n	b9014 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b90e0:	2000      	movs	r0, #0
   b90e2:	e797      	b.n	b9014 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b90e4:	000c70ac 	.word	0x000c70ac
   b90e8:	000c7082 	.word	0x000c7082
   b90ec:	000c7088 	.word	0x000c7088
   b90f0:	000c708e 	.word	0x000c708e
   b90f4:	000c7094 	.word	0x000c7094
   b90f8:	000c709a 	.word	0x000c709a
   b90fc:	000c70a0 	.word	0x000c70a0
   b9100:	000c70a6 	.word	0x000c70a6

000b9104 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b9104:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9106:	4b62      	ldr	r3, [pc, #392]	; (b9290 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b9108:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b910a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b910e:	6818      	ldr	r0, [r3, #0]
   b9110:	9000      	str	r0, [sp, #0]
   b9112:	889b      	ldrh	r3, [r3, #4]
   b9114:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9118:	2205      	movs	r2, #5
   b911a:	4629      	mov	r1, r5
   b911c:	4668      	mov	r0, sp
   b911e:	f00b fa8b 	bl	c4638 <memcmp>
   b9122:	b978      	cbnz	r0, b9144 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b9124:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9128:	b163      	cbz	r3, b9144 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b912a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b912e:	b14a      	cbz	r2, b9144 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b9130:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b9134:	2a00      	cmp	r2, #0
   b9136:	f040 80a3 	bne.w	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b913a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b913e:	2b00      	cmp	r3, #0
   b9140:	f040 809e 	bne.w	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b9144:	4953      	ldr	r1, [pc, #332]	; (b9294 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b9146:	4668      	mov	r0, sp
   b9148:	f00b fb14 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b914c:	2205      	movs	r2, #5
   b914e:	4629      	mov	r1, r5
   b9150:	4668      	mov	r0, sp
   b9152:	f00b fa71 	bl	c4638 <memcmp>
   b9156:	b978      	cbnz	r0, b9178 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b9158:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b915c:	b163      	cbz	r3, b9178 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b915e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9162:	b14a      	cbz	r2, b9178 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b9164:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b9168:	2a00      	cmp	r2, #0
   b916a:	f040 8089 	bne.w	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b916e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9172:	2b00      	cmp	r3, #0
   b9174:	f040 8084 	bne.w	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b9178:	4947      	ldr	r1, [pc, #284]	; (b9298 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b917a:	4668      	mov	r0, sp
   b917c:	f00b fafa 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9180:	2205      	movs	r2, #5
   b9182:	4629      	mov	r1, r5
   b9184:	4668      	mov	r0, sp
   b9186:	f00b fa57 	bl	c4638 <memcmp>
   b918a:	b968      	cbnz	r0, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b918c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9190:	b153      	cbz	r3, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b9192:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9196:	b13a      	cbz	r2, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b9198:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b919c:	2a00      	cmp	r2, #0
   b919e:	d16f      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b91a4:	2b00      	cmp	r3, #0
   b91a6:	d16b      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b91a8:	493c      	ldr	r1, [pc, #240]	; (b929c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b91aa:	4668      	mov	r0, sp
   b91ac:	f00b fae2 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91b0:	2205      	movs	r2, #5
   b91b2:	4629      	mov	r1, r5
   b91b4:	4668      	mov	r0, sp
   b91b6:	f00b fa3f 	bl	c4638 <memcmp>
   b91ba:	b968      	cbnz	r0, b91d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b91bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b91c0:	b153      	cbz	r3, b91d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b91c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b91c6:	b13a      	cbz	r2, b91d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b91c8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b91cc:	2a00      	cmp	r2, #0
   b91ce:	d157      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b91d4:	2b00      	cmp	r3, #0
   b91d6:	d153      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b91d8:	4931      	ldr	r1, [pc, #196]	; (b92a0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b91da:	4668      	mov	r0, sp
   b91dc:	f00b faca 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91e0:	2205      	movs	r2, #5
   b91e2:	4629      	mov	r1, r5
   b91e4:	4668      	mov	r0, sp
   b91e6:	f00b fa27 	bl	c4638 <memcmp>
   b91ea:	b968      	cbnz	r0, b9208 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b91ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b91f0:	b153      	cbz	r3, b9208 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b91f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b91f6:	b13a      	cbz	r2, b9208 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b91f8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b91fc:	2a00      	cmp	r2, #0
   b91fe:	d13f      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9200:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9204:	2b00      	cmp	r3, #0
   b9206:	d13b      	bne.n	b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b9208:	4926      	ldr	r1, [pc, #152]	; (b92a4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b920a:	4668      	mov	r0, sp
   b920c:	f00b fab2 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9210:	2205      	movs	r2, #5
   b9212:	4629      	mov	r1, r5
   b9214:	4668      	mov	r0, sp
   b9216:	f00b fa0f 	bl	c4638 <memcmp>
   b921a:	b958      	cbnz	r0, b9234 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b921c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9220:	b143      	cbz	r3, b9234 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b9222:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9226:	b12a      	cbz	r2, b9234 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b9228:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b922c:	bb42      	cbnz	r2, b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b922e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9232:	bb2b      	cbnz	r3, b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b9234:	491c      	ldr	r1, [pc, #112]	; (b92a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b9236:	4668      	mov	r0, sp
   b9238:	f00b fa9c 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b923c:	2205      	movs	r2, #5
   b923e:	4629      	mov	r1, r5
   b9240:	4668      	mov	r0, sp
   b9242:	f00b f9f9 	bl	c4638 <memcmp>
   b9246:	b940      	cbnz	r0, b925a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b9248:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b924c:	b12b      	cbz	r3, b925a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b924e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b9250:	b11a      	cbz	r2, b925a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b9252:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b9254:	b9a2      	cbnz	r2, b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b9258:	b993      	cbnz	r3, b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b925a:	4914      	ldr	r1, [pc, #80]	; (b92ac <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b925c:	4668      	mov	r0, sp
   b925e:	f00b fa89 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9262:	2205      	movs	r2, #5
   b9264:	4629      	mov	r1, r5
   b9266:	4668      	mov	r0, sp
   b9268:	f00b f9e6 	bl	c4638 <memcmp>
   b926c:	b958      	cbnz	r0, b9286 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b926e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9272:	b153      	cbz	r3, b928a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b9274:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9276:	b120      	cbz	r0, b9282 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b9278:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b927a:	b90a      	cbnz	r2, b9280 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b927c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b927e:	b100      	cbz	r0, b9282 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b9280:	2001      	movs	r0, #1
}
   b9282:	b003      	add	sp, #12
   b9284:	bd30      	pop	{r4, r5, pc}
  return false;
   b9286:	2000      	movs	r0, #0
   b9288:	e7fb      	b.n	b9282 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b928a:	4618      	mov	r0, r3
   b928c:	e7f9      	b.n	b9282 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b928e:	bf00      	nop
   b9290:	000c70ac 	.word	0x000c70ac
   b9294:	000c7082 	.word	0x000c7082
   b9298:	000c7088 	.word	0x000c7088
   b929c:	000c708e 	.word	0x000c708e
   b92a0:	000c7094 	.word	0x000c7094
   b92a4:	000c709a 	.word	0x000c709a
   b92a8:	000c70a0 	.word	0x000c70a0
   b92ac:	000c70a6 	.word	0x000c70a6

000b92b0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b92b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b92b2:	4b38      	ldr	r3, [pc, #224]	; (b9394 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b92b4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92b6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b92ba:	6818      	ldr	r0, [r3, #0]
   b92bc:	9000      	str	r0, [sp, #0]
   b92be:	889b      	ldrh	r3, [r3, #4]
   b92c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92c4:	2205      	movs	r2, #5
   b92c6:	4629      	mov	r1, r5
   b92c8:	4668      	mov	r0, sp
   b92ca:	f00b f9b5 	bl	c4638 <memcmp>
   b92ce:	b920      	cbnz	r0, b92da <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b92d0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b92d4:	3001      	adds	r0, #1
}
   b92d6:	b003      	add	sp, #12
   b92d8:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b92da:	492f      	ldr	r1, [pc, #188]	; (b9398 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b92dc:	4668      	mov	r0, sp
   b92de:	f00b fa49 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92e2:	2205      	movs	r2, #5
   b92e4:	4629      	mov	r1, r5
   b92e6:	4668      	mov	r0, sp
   b92e8:	f00b f9a6 	bl	c4638 <memcmp>
   b92ec:	b910      	cbnz	r0, b92f4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b92ee:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b92f2:	e7ef      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b92f4:	4929      	ldr	r1, [pc, #164]	; (b939c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b92f6:	4668      	mov	r0, sp
   b92f8:	f00b fa3c 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92fc:	2205      	movs	r2, #5
   b92fe:	4629      	mov	r1, r5
   b9300:	4668      	mov	r0, sp
   b9302:	f00b f999 	bl	c4638 <memcmp>
   b9306:	b910      	cbnz	r0, b930e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b9308:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b930c:	e7e2      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b930e:	4924      	ldr	r1, [pc, #144]	; (b93a0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b9310:	4668      	mov	r0, sp
   b9312:	f00b fa2f 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9316:	2205      	movs	r2, #5
   b9318:	4629      	mov	r1, r5
   b931a:	4668      	mov	r0, sp
   b931c:	f00b f98c 	bl	c4638 <memcmp>
   b9320:	b910      	cbnz	r0, b9328 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b9322:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9326:	e7d5      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9328:	491e      	ldr	r1, [pc, #120]	; (b93a4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b932a:	4668      	mov	r0, sp
   b932c:	f00b fa22 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9330:	2205      	movs	r2, #5
   b9332:	4629      	mov	r1, r5
   b9334:	4668      	mov	r0, sp
   b9336:	f00b f97f 	bl	c4638 <memcmp>
   b933a:	b910      	cbnz	r0, b9342 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b933c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9340:	e7c8      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9342:	4919      	ldr	r1, [pc, #100]	; (b93a8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b9344:	4668      	mov	r0, sp
   b9346:	f00b fa15 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b934a:	2205      	movs	r2, #5
   b934c:	4629      	mov	r1, r5
   b934e:	4668      	mov	r0, sp
   b9350:	f00b f972 	bl	c4638 <memcmp>
   b9354:	b910      	cbnz	r0, b935c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b9356:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b935a:	e7bb      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b935c:	4913      	ldr	r1, [pc, #76]	; (b93ac <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b935e:	4668      	mov	r0, sp
   b9360:	f00b fa08 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9364:	2205      	movs	r2, #5
   b9366:	4629      	mov	r1, r5
   b9368:	4668      	mov	r0, sp
   b936a:	f00b f965 	bl	c4638 <memcmp>
   b936e:	b910      	cbnz	r0, b9376 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b9370:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9374:	e7ae      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9376:	490e      	ldr	r1, [pc, #56]	; (b93b0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b9378:	4668      	mov	r0, sp
   b937a:	f00b f9fb 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b937e:	2205      	movs	r2, #5
   b9380:	4629      	mov	r1, r5
   b9382:	4668      	mov	r0, sp
   b9384:	f00b f958 	bl	c4638 <memcmp>
   b9388:	b910      	cbnz	r0, b9390 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b938a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b938e:	e7a1      	b.n	b92d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b9390:	2000      	movs	r0, #0
   b9392:	e7a0      	b.n	b92d6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b9394:	000c70ac 	.word	0x000c70ac
   b9398:	000c7082 	.word	0x000c7082
   b939c:	000c7088 	.word	0x000c7088
   b93a0:	000c708e 	.word	0x000c708e
   b93a4:	000c7094 	.word	0x000c7094
   b93a8:	000c709a 	.word	0x000c709a
   b93ac:	000c70a0 	.word	0x000c70a0
   b93b0:	000c70a6 	.word	0x000c70a6

000b93b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b93b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b93b6:	4b38      	ldr	r3, [pc, #224]	; (b9498 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b93b8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93ba:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b93be:	6818      	ldr	r0, [r3, #0]
   b93c0:	9000      	str	r0, [sp, #0]
   b93c2:	889b      	ldrh	r3, [r3, #4]
   b93c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93c8:	2205      	movs	r2, #5
   b93ca:	4629      	mov	r1, r5
   b93cc:	4668      	mov	r0, sp
   b93ce:	f00b f933 	bl	c4638 <memcmp>
   b93d2:	b920      	cbnz	r0, b93de <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b93d4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b93d8:	3002      	adds	r0, #2
}
   b93da:	b003      	add	sp, #12
   b93dc:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b93de:	492f      	ldr	r1, [pc, #188]	; (b949c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b93e0:	4668      	mov	r0, sp
   b93e2:	f00b f9c7 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93e6:	2205      	movs	r2, #5
   b93e8:	4629      	mov	r1, r5
   b93ea:	4668      	mov	r0, sp
   b93ec:	f00b f924 	bl	c4638 <memcmp>
   b93f0:	b910      	cbnz	r0, b93f8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b93f2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b93f6:	e7ef      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b93f8:	4929      	ldr	r1, [pc, #164]	; (b94a0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b93fa:	4668      	mov	r0, sp
   b93fc:	f00b f9ba 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9400:	2205      	movs	r2, #5
   b9402:	4629      	mov	r1, r5
   b9404:	4668      	mov	r0, sp
   b9406:	f00b f917 	bl	c4638 <memcmp>
   b940a:	b910      	cbnz	r0, b9412 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b940c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9410:	e7e2      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9412:	4924      	ldr	r1, [pc, #144]	; (b94a4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b9414:	4668      	mov	r0, sp
   b9416:	f00b f9ad 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b941a:	2205      	movs	r2, #5
   b941c:	4629      	mov	r1, r5
   b941e:	4668      	mov	r0, sp
   b9420:	f00b f90a 	bl	c4638 <memcmp>
   b9424:	b910      	cbnz	r0, b942c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b9426:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b942a:	e7d5      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b942c:	491e      	ldr	r1, [pc, #120]	; (b94a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b942e:	4668      	mov	r0, sp
   b9430:	f00b f9a0 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9434:	2205      	movs	r2, #5
   b9436:	4629      	mov	r1, r5
   b9438:	4668      	mov	r0, sp
   b943a:	f00b f8fd 	bl	c4638 <memcmp>
   b943e:	b910      	cbnz	r0, b9446 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b9440:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9444:	e7c8      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9446:	4919      	ldr	r1, [pc, #100]	; (b94ac <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b9448:	4668      	mov	r0, sp
   b944a:	f00b f993 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b944e:	2205      	movs	r2, #5
   b9450:	4629      	mov	r1, r5
   b9452:	4668      	mov	r0, sp
   b9454:	f00b f8f0 	bl	c4638 <memcmp>
   b9458:	b910      	cbnz	r0, b9460 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b945a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b945e:	e7bb      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9460:	4913      	ldr	r1, [pc, #76]	; (b94b0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b9462:	4668      	mov	r0, sp
   b9464:	f00b f986 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9468:	2205      	movs	r2, #5
   b946a:	4629      	mov	r1, r5
   b946c:	4668      	mov	r0, sp
   b946e:	f00b f8e3 	bl	c4638 <memcmp>
   b9472:	b910      	cbnz	r0, b947a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b9474:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9478:	e7ae      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b947a:	490e      	ldr	r1, [pc, #56]	; (b94b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b947c:	4668      	mov	r0, sp
   b947e:	f00b f979 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9482:	2205      	movs	r2, #5
   b9484:	4629      	mov	r1, r5
   b9486:	4668      	mov	r0, sp
   b9488:	f00b f8d6 	bl	c4638 <memcmp>
   b948c:	b910      	cbnz	r0, b9494 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b948e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9492:	e7a1      	b.n	b93d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b9494:	2000      	movs	r0, #0
   b9496:	e7a0      	b.n	b93da <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b9498:	000c70ac 	.word	0x000c70ac
   b949c:	000c7082 	.word	0x000c7082
   b94a0:	000c7088 	.word	0x000c7088
   b94a4:	000c708e 	.word	0x000c708e
   b94a8:	000c7094 	.word	0x000c7094
   b94ac:	000c709a 	.word	0x000c709a
   b94b0:	000c70a0 	.word	0x000c70a0
   b94b4:	000c70a6 	.word	0x000c70a6

000b94b8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b94b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b94ba:	4b39      	ldr	r3, [pc, #228]	; (b95a0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b94bc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94be:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b94c2:	6818      	ldr	r0, [r3, #0]
   b94c4:	9000      	str	r0, [sp, #0]
   b94c6:	889b      	ldrh	r3, [r3, #4]
   b94c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94cc:	2205      	movs	r2, #5
   b94ce:	4629      	mov	r1, r5
   b94d0:	4668      	mov	r0, sp
   b94d2:	f00b f8b1 	bl	c4638 <memcmp>
   b94d6:	b920      	cbnz	r0, b94e2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b94d8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b94dc:	3066      	adds	r0, #102	; 0x66
}
   b94de:	b003      	add	sp, #12
   b94e0:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b94e2:	4930      	ldr	r1, [pc, #192]	; (b95a4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b94e4:	4668      	mov	r0, sp
   b94e6:	f00b f945 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94ea:	2205      	movs	r2, #5
   b94ec:	4629      	mov	r1, r5
   b94ee:	4668      	mov	r0, sp
   b94f0:	f00b f8a2 	bl	c4638 <memcmp>
   b94f4:	b910      	cbnz	r0, b94fc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b94f6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b94fa:	e7ef      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b94fc:	492a      	ldr	r1, [pc, #168]	; (b95a8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b94fe:	4668      	mov	r0, sp
   b9500:	f00b f938 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9504:	2205      	movs	r2, #5
   b9506:	4629      	mov	r1, r5
   b9508:	4668      	mov	r0, sp
   b950a:	f00b f895 	bl	c4638 <memcmp>
   b950e:	b910      	cbnz	r0, b9516 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b9510:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9514:	e7e2      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9516:	4925      	ldr	r1, [pc, #148]	; (b95ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b9518:	4668      	mov	r0, sp
   b951a:	f00b f92b 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b951e:	2205      	movs	r2, #5
   b9520:	4629      	mov	r1, r5
   b9522:	4668      	mov	r0, sp
   b9524:	f00b f888 	bl	c4638 <memcmp>
   b9528:	b910      	cbnz	r0, b9530 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b952a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b952e:	e7d5      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9530:	491f      	ldr	r1, [pc, #124]	; (b95b0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b9532:	4668      	mov	r0, sp
   b9534:	f00b f91e 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9538:	2205      	movs	r2, #5
   b953a:	4629      	mov	r1, r5
   b953c:	4668      	mov	r0, sp
   b953e:	f00b f87b 	bl	c4638 <memcmp>
   b9542:	b910      	cbnz	r0, b954a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b9544:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9548:	e7c8      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b954a:	491a      	ldr	r1, [pc, #104]	; (b95b4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b954c:	4668      	mov	r0, sp
   b954e:	f00b f911 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9552:	2205      	movs	r2, #5
   b9554:	4629      	mov	r1, r5
   b9556:	4668      	mov	r0, sp
   b9558:	f00b f86e 	bl	c4638 <memcmp>
   b955c:	b910      	cbnz	r0, b9564 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b955e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9562:	e7bb      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9564:	4914      	ldr	r1, [pc, #80]	; (b95b8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b9566:	4668      	mov	r0, sp
   b9568:	f00b f904 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b956c:	2205      	movs	r2, #5
   b956e:	4629      	mov	r1, r5
   b9570:	4668      	mov	r0, sp
   b9572:	f00b f861 	bl	c4638 <memcmp>
   b9576:	b918      	cbnz	r0, b9580 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b9578:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b957c:	3034      	adds	r0, #52	; 0x34
   b957e:	e7ae      	b.n	b94de <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9580:	490e      	ldr	r1, [pc, #56]	; (b95bc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b9582:	4668      	mov	r0, sp
   b9584:	f00b f8f6 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9588:	2205      	movs	r2, #5
   b958a:	4629      	mov	r1, r5
   b958c:	4668      	mov	r0, sp
   b958e:	f00b f853 	bl	c4638 <memcmp>
   b9592:	b910      	cbnz	r0, b959a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b9594:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9598:	e7f0      	b.n	b957c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b959a:	2000      	movs	r0, #0
   b959c:	e79f      	b.n	b94de <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b959e:	bf00      	nop
   b95a0:	000c70ac 	.word	0x000c70ac
   b95a4:	000c7082 	.word	0x000c7082
   b95a8:	000c7088 	.word	0x000c7088
   b95ac:	000c708e 	.word	0x000c708e
   b95b0:	000c7094 	.word	0x000c7094
   b95b4:	000c709a 	.word	0x000c709a
   b95b8:	000c70a0 	.word	0x000c70a0
   b95bc:	000c70a6 	.word	0x000c70a6

000b95c0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b95c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b95c2:	4b39      	ldr	r3, [pc, #228]	; (b96a8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b95c4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95c6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b95ca:	6818      	ldr	r0, [r3, #0]
   b95cc:	9000      	str	r0, [sp, #0]
   b95ce:	889b      	ldrh	r3, [r3, #4]
   b95d0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95d4:	2205      	movs	r2, #5
   b95d6:	4629      	mov	r1, r5
   b95d8:	4668      	mov	r0, sp
   b95da:	f00b f82d 	bl	c4638 <memcmp>
   b95de:	b920      	cbnz	r0, b95ea <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b95e0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b95e4:	3067      	adds	r0, #103	; 0x67
}
   b95e6:	b003      	add	sp, #12
   b95e8:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b95ea:	4930      	ldr	r1, [pc, #192]	; (b96ac <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b95ec:	4668      	mov	r0, sp
   b95ee:	f00b f8c1 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95f2:	2205      	movs	r2, #5
   b95f4:	4629      	mov	r1, r5
   b95f6:	4668      	mov	r0, sp
   b95f8:	f00b f81e 	bl	c4638 <memcmp>
   b95fc:	b910      	cbnz	r0, b9604 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b95fe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9602:	e7ef      	b.n	b95e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9604:	492a      	ldr	r1, [pc, #168]	; (b96b0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b9606:	4668      	mov	r0, sp
   b9608:	f00b f8b4 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b960c:	2205      	movs	r2, #5
   b960e:	4629      	mov	r1, r5
   b9610:	4668      	mov	r0, sp
   b9612:	f00b f811 	bl	c4638 <memcmp>
   b9616:	b910      	cbnz	r0, b961e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b9618:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b961c:	e7e2      	b.n	b95e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b961e:	4925      	ldr	r1, [pc, #148]	; (b96b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b9620:	4668      	mov	r0, sp
   b9622:	f00b f8a7 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9626:	2205      	movs	r2, #5
   b9628:	4629      	mov	r1, r5
   b962a:	4668      	mov	r0, sp
   b962c:	f00b f804 	bl	c4638 <memcmp>
   b9630:	b910      	cbnz	r0, b9638 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b9632:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9636:	e7d5      	b.n	b95e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9638:	491f      	ldr	r1, [pc, #124]	; (b96b8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b963a:	4668      	mov	r0, sp
   b963c:	f00b f89a 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9640:	2205      	movs	r2, #5
   b9642:	4629      	mov	r1, r5
   b9644:	4668      	mov	r0, sp
   b9646:	f00a fff7 	bl	c4638 <memcmp>
   b964a:	b910      	cbnz	r0, b9652 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b964c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9650:	e7c8      	b.n	b95e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9652:	491a      	ldr	r1, [pc, #104]	; (b96bc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b9654:	4668      	mov	r0, sp
   b9656:	f00b f88d 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b965a:	2205      	movs	r2, #5
   b965c:	4629      	mov	r1, r5
   b965e:	4668      	mov	r0, sp
   b9660:	f00a ffea 	bl	c4638 <memcmp>
   b9664:	b910      	cbnz	r0, b966c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b9666:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b966a:	e7bb      	b.n	b95e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b966c:	4914      	ldr	r1, [pc, #80]	; (b96c0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b966e:	4668      	mov	r0, sp
   b9670:	f00b f880 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9674:	2205      	movs	r2, #5
   b9676:	4629      	mov	r1, r5
   b9678:	4668      	mov	r0, sp
   b967a:	f00a ffdd 	bl	c4638 <memcmp>
   b967e:	b918      	cbnz	r0, b9688 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b9680:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9684:	3035      	adds	r0, #53	; 0x35
   b9686:	e7ae      	b.n	b95e6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9688:	490e      	ldr	r1, [pc, #56]	; (b96c4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b968a:	4668      	mov	r0, sp
   b968c:	f00b f872 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9690:	2205      	movs	r2, #5
   b9692:	4629      	mov	r1, r5
   b9694:	4668      	mov	r0, sp
   b9696:	f00a ffcf 	bl	c4638 <memcmp>
   b969a:	b910      	cbnz	r0, b96a2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b969c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b96a0:	e7f0      	b.n	b9684 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b96a2:	2000      	movs	r0, #0
   b96a4:	e79f      	b.n	b95e6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b96a6:	bf00      	nop
   b96a8:	000c70ac 	.word	0x000c70ac
   b96ac:	000c7082 	.word	0x000c7082
   b96b0:	000c7088 	.word	0x000c7088
   b96b4:	000c708e 	.word	0x000c708e
   b96b8:	000c7094 	.word	0x000c7094
   b96bc:	000c709a 	.word	0x000c709a
   b96c0:	000c70a0 	.word	0x000c70a0
   b96c4:	000c70a6 	.word	0x000c70a6

000b96c8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b96c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b96ca:	4b39      	ldr	r3, [pc, #228]	; (b97b0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b96cc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96ce:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b96d2:	6818      	ldr	r0, [r3, #0]
   b96d4:	9000      	str	r0, [sp, #0]
   b96d6:	889b      	ldrh	r3, [r3, #4]
   b96d8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96dc:	2205      	movs	r2, #5
   b96de:	4629      	mov	r1, r5
   b96e0:	4668      	mov	r0, sp
   b96e2:	f00a ffa9 	bl	c4638 <memcmp>
   b96e6:	b928      	cbnz	r0, b96f4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b96e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b96ec:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b96f0:	b003      	add	sp, #12
   b96f2:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b96f4:	492f      	ldr	r1, [pc, #188]	; (b97b4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b96f6:	4668      	mov	r0, sp
   b96f8:	f00b f83c 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96fc:	2205      	movs	r2, #5
   b96fe:	4629      	mov	r1, r5
   b9700:	4668      	mov	r0, sp
   b9702:	f00a ff99 	bl	c4638 <memcmp>
   b9706:	b910      	cbnz	r0, b970e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b9708:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b970c:	e7ee      	b.n	b96ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b970e:	492a      	ldr	r1, [pc, #168]	; (b97b8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9710:	4668      	mov	r0, sp
   b9712:	f00b f82f 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9716:	2205      	movs	r2, #5
   b9718:	4629      	mov	r1, r5
   b971a:	4668      	mov	r0, sp
   b971c:	f00a ff8c 	bl	c4638 <memcmp>
   b9720:	b910      	cbnz	r0, b9728 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b9722:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9726:	e7e1      	b.n	b96ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9728:	4924      	ldr	r1, [pc, #144]	; (b97bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b972a:	4668      	mov	r0, sp
   b972c:	f00b f822 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9730:	2205      	movs	r2, #5
   b9732:	4629      	mov	r1, r5
   b9734:	4668      	mov	r0, sp
   b9736:	f00a ff7f 	bl	c4638 <memcmp>
   b973a:	b910      	cbnz	r0, b9742 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b973c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9740:	e7d4      	b.n	b96ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9742:	491f      	ldr	r1, [pc, #124]	; (b97c0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9744:	4668      	mov	r0, sp
   b9746:	f00b f815 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b974a:	2205      	movs	r2, #5
   b974c:	4629      	mov	r1, r5
   b974e:	4668      	mov	r0, sp
   b9750:	f00a ff72 	bl	c4638 <memcmp>
   b9754:	b910      	cbnz	r0, b975c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b9756:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b975a:	e7c7      	b.n	b96ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b975c:	4919      	ldr	r1, [pc, #100]	; (b97c4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b975e:	4668      	mov	r0, sp
   b9760:	f00b f808 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9764:	2205      	movs	r2, #5
   b9766:	4629      	mov	r1, r5
   b9768:	4668      	mov	r0, sp
   b976a:	f00a ff65 	bl	c4638 <memcmp>
   b976e:	b910      	cbnz	r0, b9776 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b9770:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9774:	e7ba      	b.n	b96ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9776:	4914      	ldr	r1, [pc, #80]	; (b97c8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b9778:	4668      	mov	r0, sp
   b977a:	f00a fffb 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b977e:	2205      	movs	r2, #5
   b9780:	4629      	mov	r1, r5
   b9782:	4668      	mov	r0, sp
   b9784:	f00a ff58 	bl	c4638 <memcmp>
   b9788:	b918      	cbnz	r0, b9792 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b978a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b978e:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9790:	e7ae      	b.n	b96f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9792:	490e      	ldr	r1, [pc, #56]	; (b97cc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9794:	4668      	mov	r0, sp
   b9796:	f00a ffed 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b979a:	2205      	movs	r2, #5
   b979c:	4629      	mov	r1, r5
   b979e:	4668      	mov	r0, sp
   b97a0:	f00a ff4a 	bl	c4638 <memcmp>
   b97a4:	b910      	cbnz	r0, b97ac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b97a6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b97aa:	e7f0      	b.n	b978e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b97ac:	2000      	movs	r0, #0
   b97ae:	e79f      	b.n	b96f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b97b0:	000c70ac 	.word	0x000c70ac
   b97b4:	000c7082 	.word	0x000c7082
   b97b8:	000c7088 	.word	0x000c7088
   b97bc:	000c708e 	.word	0x000c708e
   b97c0:	000c7094 	.word	0x000c7094
   b97c4:	000c709a 	.word	0x000c709a
   b97c8:	000c70a0 	.word	0x000c70a0
   b97cc:	000c70a6 	.word	0x000c70a6

000b97d0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b97d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b97d2:	4b3a      	ldr	r3, [pc, #232]	; (b98bc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b97d4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97d6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b97da:	6818      	ldr	r0, [r3, #0]
   b97dc:	9000      	str	r0, [sp, #0]
   b97de:	889b      	ldrh	r3, [r3, #4]
   b97e0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97e4:	2205      	movs	r2, #5
   b97e6:	4629      	mov	r1, r5
   b97e8:	4668      	mov	r0, sp
   b97ea:	f00a ff25 	bl	c4638 <memcmp>
   b97ee:	b930      	cbnz	r0, b97fe <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b97f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b97f4:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b97f8:	3001      	adds	r0, #1
}
   b97fa:	b003      	add	sp, #12
   b97fc:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b97fe:	4930      	ldr	r1, [pc, #192]	; (b98c0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b9800:	4668      	mov	r0, sp
   b9802:	f00a ffb7 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9806:	2205      	movs	r2, #5
   b9808:	4629      	mov	r1, r5
   b980a:	4668      	mov	r0, sp
   b980c:	f00a ff14 	bl	c4638 <memcmp>
   b9810:	b910      	cbnz	r0, b9818 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9812:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9816:	e7ed      	b.n	b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9818:	492a      	ldr	r1, [pc, #168]	; (b98c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b981a:	4668      	mov	r0, sp
   b981c:	f00a ffaa 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9820:	2205      	movs	r2, #5
   b9822:	4629      	mov	r1, r5
   b9824:	4668      	mov	r0, sp
   b9826:	f00a ff07 	bl	c4638 <memcmp>
   b982a:	b910      	cbnz	r0, b9832 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b982c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9830:	e7e0      	b.n	b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9832:	4925      	ldr	r1, [pc, #148]	; (b98c8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b9834:	4668      	mov	r0, sp
   b9836:	f00a ff9d 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b983a:	2205      	movs	r2, #5
   b983c:	4629      	mov	r1, r5
   b983e:	4668      	mov	r0, sp
   b9840:	f00a fefa 	bl	c4638 <memcmp>
   b9844:	b910      	cbnz	r0, b984c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b9846:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b984a:	e7d3      	b.n	b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b984c:	491f      	ldr	r1, [pc, #124]	; (b98cc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b984e:	4668      	mov	r0, sp
   b9850:	f00a ff90 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9854:	2205      	movs	r2, #5
   b9856:	4629      	mov	r1, r5
   b9858:	4668      	mov	r0, sp
   b985a:	f00a feed 	bl	c4638 <memcmp>
   b985e:	b910      	cbnz	r0, b9866 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b9860:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9864:	e7c6      	b.n	b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9866:	491a      	ldr	r1, [pc, #104]	; (b98d0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b9868:	4668      	mov	r0, sp
   b986a:	f00a ff83 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b986e:	2205      	movs	r2, #5
   b9870:	4629      	mov	r1, r5
   b9872:	4668      	mov	r0, sp
   b9874:	f00a fee0 	bl	c4638 <memcmp>
   b9878:	b910      	cbnz	r0, b9880 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b987a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b987e:	e7b9      	b.n	b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9880:	4914      	ldr	r1, [pc, #80]	; (b98d4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b9882:	4668      	mov	r0, sp
   b9884:	f00a ff76 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9888:	2205      	movs	r2, #5
   b988a:	4629      	mov	r1, r5
   b988c:	4668      	mov	r0, sp
   b988e:	f00a fed3 	bl	c4638 <memcmp>
   b9892:	b918      	cbnz	r0, b989c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9894:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9898:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b989a:	e7ad      	b.n	b97f8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b989c:	490e      	ldr	r1, [pc, #56]	; (b98d8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b989e:	4668      	mov	r0, sp
   b98a0:	f00a ff68 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98a4:	2205      	movs	r2, #5
   b98a6:	4629      	mov	r1, r5
   b98a8:	4668      	mov	r0, sp
   b98aa:	f00a fec5 	bl	c4638 <memcmp>
   b98ae:	b910      	cbnz	r0, b98b6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b98b0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b98b4:	e7f0      	b.n	b9898 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b98b6:	2000      	movs	r0, #0
   b98b8:	e79f      	b.n	b97fa <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b98ba:	bf00      	nop
   b98bc:	000c70ac 	.word	0x000c70ac
   b98c0:	000c7082 	.word	0x000c7082
   b98c4:	000c7088 	.word	0x000c7088
   b98c8:	000c708e 	.word	0x000c708e
   b98cc:	000c7094 	.word	0x000c7094
   b98d0:	000c709a 	.word	0x000c709a
   b98d4:	000c70a0 	.word	0x000c70a0
   b98d8:	000c70a6 	.word	0x000c70a6

000b98dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b98dc:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b98de:	4b30      	ldr	r3, [pc, #192]	; (b99a0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b98e0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98e2:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b98e6:	6818      	ldr	r0, [r3, #0]
   b98e8:	9000      	str	r0, [sp, #0]
   b98ea:	889b      	ldrh	r3, [r3, #4]
   b98ec:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98f0:	2205      	movs	r2, #5
   b98f2:	4621      	mov	r1, r4
   b98f4:	4668      	mov	r0, sp
   b98f6:	f00a fe9f 	bl	c4638 <memcmp>
   b98fa:	b910      	cbnz	r0, b9902 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b98fc:	2064      	movs	r0, #100	; 0x64
}
   b98fe:	b002      	add	sp, #8
   b9900:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b9902:	4928      	ldr	r1, [pc, #160]	; (b99a4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b9904:	4668      	mov	r0, sp
   b9906:	f00a ff35 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b990a:	2205      	movs	r2, #5
   b990c:	4621      	mov	r1, r4
   b990e:	4668      	mov	r0, sp
   b9910:	f00a fe92 	bl	c4638 <memcmp>
   b9914:	2800      	cmp	r0, #0
   b9916:	d0f1      	beq.n	b98fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b9918:	4923      	ldr	r1, [pc, #140]	; (b99a8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b991a:	4668      	mov	r0, sp
   b991c:	f00a ff2a 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9920:	2205      	movs	r2, #5
   b9922:	4621      	mov	r1, r4
   b9924:	4668      	mov	r0, sp
   b9926:	f00a fe87 	bl	c4638 <memcmp>
   b992a:	2800      	cmp	r0, #0
   b992c:	d0e6      	beq.n	b98fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b992e:	491f      	ldr	r1, [pc, #124]	; (b99ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b9930:	4668      	mov	r0, sp
   b9932:	f00a ff1f 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9936:	2205      	movs	r2, #5
   b9938:	4621      	mov	r1, r4
   b993a:	4668      	mov	r0, sp
   b993c:	f00a fe7c 	bl	c4638 <memcmp>
   b9940:	2800      	cmp	r0, #0
   b9942:	d0db      	beq.n	b98fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9944:	491a      	ldr	r1, [pc, #104]	; (b99b0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b9946:	4668      	mov	r0, sp
   b9948:	f00a ff14 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b994c:	2205      	movs	r2, #5
   b994e:	4621      	mov	r1, r4
   b9950:	4668      	mov	r0, sp
   b9952:	f00a fe71 	bl	c4638 <memcmp>
   b9956:	2800      	cmp	r0, #0
   b9958:	d0d0      	beq.n	b98fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b995a:	4916      	ldr	r1, [pc, #88]	; (b99b4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b995c:	4668      	mov	r0, sp
   b995e:	f00a ff09 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9962:	2205      	movs	r2, #5
   b9964:	4621      	mov	r1, r4
   b9966:	4668      	mov	r0, sp
   b9968:	f00a fe66 	bl	c4638 <memcmp>
   b996c:	2800      	cmp	r0, #0
   b996e:	d0c5      	beq.n	b98fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b9970:	4911      	ldr	r1, [pc, #68]	; (b99b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b9972:	4668      	mov	r0, sp
   b9974:	f00a fefe 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9978:	2205      	movs	r2, #5
   b997a:	4621      	mov	r1, r4
   b997c:	4668      	mov	r0, sp
   b997e:	f00a fe5b 	bl	c4638 <memcmp>
   b9982:	b148      	cbz	r0, b9998 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b9984:	490d      	ldr	r1, [pc, #52]	; (b99bc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b9986:	4668      	mov	r0, sp
   b9988:	f00a fef4 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b998c:	2205      	movs	r2, #5
   b998e:	4621      	mov	r1, r4
   b9990:	4668      	mov	r0, sp
   b9992:	f00a fe51 	bl	c4638 <memcmp>
   b9996:	b908      	cbnz	r0, b999c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b9998:	2032      	movs	r0, #50	; 0x32
   b999a:	e7b0      	b.n	b98fe <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b999c:	2000      	movs	r0, #0
   b999e:	e7ae      	b.n	b98fe <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b99a0:	000c70ac 	.word	0x000c70ac
   b99a4:	000c7082 	.word	0x000c7082
   b99a8:	000c7088 	.word	0x000c7088
   b99ac:	000c708e 	.word	0x000c708e
   b99b0:	000c7094 	.word	0x000c7094
   b99b4:	000c709a 	.word	0x000c709a
   b99b8:	000c70a0 	.word	0x000c70a0
   b99bc:	000c70a6 	.word	0x000c70a6

000b99c0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b99c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b99c2:	4b38      	ldr	r3, [pc, #224]	; (b9aa4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b99c4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99c6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b99ca:	6818      	ldr	r0, [r3, #0]
   b99cc:	9000      	str	r0, [sp, #0]
   b99ce:	889b      	ldrh	r3, [r3, #4]
   b99d0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99d4:	2205      	movs	r2, #5
   b99d6:	4629      	mov	r1, r5
   b99d8:	4668      	mov	r0, sp
   b99da:	f00a fe2d 	bl	c4638 <memcmp>
   b99de:	b918      	cbnz	r0, b99e8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b99e0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b99e4:	b003      	add	sp, #12
   b99e6:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b99e8:	492f      	ldr	r1, [pc, #188]	; (b9aa8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b99ea:	4668      	mov	r0, sp
   b99ec:	f00a fec2 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99f0:	2205      	movs	r2, #5
   b99f2:	4629      	mov	r1, r5
   b99f4:	4668      	mov	r0, sp
   b99f6:	f00a fe1f 	bl	c4638 <memcmp>
   b99fa:	b910      	cbnz	r0, b9a02 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b99fc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9a00:	e7f0      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9a02:	492a      	ldr	r1, [pc, #168]	; (b9aac <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b9a04:	4668      	mov	r0, sp
   b9a06:	f00a feb5 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a0a:	2205      	movs	r2, #5
   b9a0c:	4629      	mov	r1, r5
   b9a0e:	4668      	mov	r0, sp
   b9a10:	f00a fe12 	bl	c4638 <memcmp>
   b9a14:	b910      	cbnz	r0, b9a1c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b9a16:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9a1a:	e7e3      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9a1c:	4924      	ldr	r1, [pc, #144]	; (b9ab0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b9a1e:	4668      	mov	r0, sp
   b9a20:	f00a fea8 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a24:	2205      	movs	r2, #5
   b9a26:	4629      	mov	r1, r5
   b9a28:	4668      	mov	r0, sp
   b9a2a:	f00a fe05 	bl	c4638 <memcmp>
   b9a2e:	b910      	cbnz	r0, b9a36 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9a30:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9a34:	e7d6      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9a36:	491f      	ldr	r1, [pc, #124]	; (b9ab4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b9a38:	4668      	mov	r0, sp
   b9a3a:	f00a fe9b 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a3e:	2205      	movs	r2, #5
   b9a40:	4629      	mov	r1, r5
   b9a42:	4668      	mov	r0, sp
   b9a44:	f00a fdf8 	bl	c4638 <memcmp>
   b9a48:	b910      	cbnz	r0, b9a50 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b9a4a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9a4e:	e7c9      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9a50:	4919      	ldr	r1, [pc, #100]	; (b9ab8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b9a52:	4668      	mov	r0, sp
   b9a54:	f00a fe8e 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a58:	2205      	movs	r2, #5
   b9a5a:	4629      	mov	r1, r5
   b9a5c:	4668      	mov	r0, sp
   b9a5e:	f00a fdeb 	bl	c4638 <memcmp>
   b9a62:	b910      	cbnz	r0, b9a6a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b9a64:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9a68:	e7bc      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9a6a:	4914      	ldr	r1, [pc, #80]	; (b9abc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b9a6c:	4668      	mov	r0, sp
   b9a6e:	f00a fe81 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a72:	2205      	movs	r2, #5
   b9a74:	4629      	mov	r1, r5
   b9a76:	4668      	mov	r0, sp
   b9a78:	f00a fdde 	bl	c4638 <memcmp>
   b9a7c:	b910      	cbnz	r0, b9a84 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b9a7e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9a82:	e7af      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9a84:	490e      	ldr	r1, [pc, #56]	; (b9ac0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b9a86:	4668      	mov	r0, sp
   b9a88:	f00a fe74 	bl	c4774 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a8c:	2205      	movs	r2, #5
   b9a8e:	4629      	mov	r1, r5
   b9a90:	4668      	mov	r0, sp
   b9a92:	f00a fdd1 	bl	c4638 <memcmp>
   b9a96:	b910      	cbnz	r0, b9a9e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b9a98:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9a9c:	e7a2      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9a9e:	2000      	movs	r0, #0
   b9aa0:	e7a0      	b.n	b99e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9aa2:	bf00      	nop
   b9aa4:	000c70ac 	.word	0x000c70ac
   b9aa8:	000c7082 	.word	0x000c7082
   b9aac:	000c7088 	.word	0x000c7088
   b9ab0:	000c708e 	.word	0x000c708e
   b9ab4:	000c7094 	.word	0x000c7094
   b9ab8:	000c709a 	.word	0x000c709a
   b9abc:	000c70a0 	.word	0x000c70a0
   b9ac0:	000c70a6 	.word	0x000c70a6

000b9ac4 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9ac4:	4770      	bx	lr
	...

000b9ac8 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9ac8:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b9aca:	8813      	ldrh	r3, [r2, #0]
   b9acc:	4d0c      	ldr	r5, [pc, #48]	; (b9b00 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9ace:	2b01      	cmp	r3, #1
{
   b9ad0:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9ad2:	d10e      	bne.n	b9af2 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9ad4:	020a      	lsls	r2, r1, #8
   b9ad6:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9ada:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9adc:	3301      	adds	r3, #1
   b9ade:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9ae0:	f7ff fff0 	bl	b9ac4 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9ae4:	8820      	ldrh	r0, [r4, #0]
   b9ae6:	882b      	ldrh	r3, [r5, #0]
}
   b9ae8:	4298      	cmp	r0, r3
   b9aea:	bf14      	ite	ne
   b9aec:	2003      	movne	r0, #3
   b9aee:	2000      	moveq	r0, #0
   b9af0:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9af2:	2b02      	cmp	r3, #2
   b9af4:	d1f2      	bne.n	b9adc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b9af6:	882a      	ldrh	r2, [r5, #0]
   b9af8:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9afa:	3206      	adds	r2, #6
   b9afc:	e7ed      	b.n	b9ada <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9afe:	bf00      	nop
   b9b00:	2003e61e 	.word	0x2003e61e

000b9b04 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9b04:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b9b06:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b9b08:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b9b0a:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9b0c:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9b0e:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9b12:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b9b16:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b9b1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9b1e:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9b22:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9b24:	4413      	add	r3, r2
   b9b26:	734b      	strb	r3, [r1, #13]
   b9b28:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b9b2a:	b293      	uxth	r3, r2
   b9b2c:	429c      	cmp	r4, r3
   b9b2e:	d90a      	bls.n	b9b46 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9b30:	688b      	ldr	r3, [r1, #8]
   b9b32:	7b08      	ldrb	r0, [r1, #12]
   b9b34:	5c9b      	ldrb	r3, [r3, r2]
   b9b36:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9b38:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b9b3a:	b2db      	uxtb	r3, r3
   b9b3c:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9b3e:	4403      	add	r3, r0
   b9b40:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9b42:	3201      	adds	r2, #1
   b9b44:	e7f1      	b.n	b9b2a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9b46:	bd30      	pop	{r4, r5, pc}

000b9b48 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9b48:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9b4c:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b9b4e:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9b52:	b2c9      	uxtb	r1, r1
   b9b54:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9b58:	4419      	add	r1, r3
   b9b5a:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b9b5e:	4770      	bx	lr

000b9b60 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9b64:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b9b68:	f10b 0b08 	add.w	fp, fp, #8
   b9b6c:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b9b70:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9b74:	f1ab 0302 	sub.w	r3, fp, #2
{
   b9b78:	4604      	mov	r4, r0
   b9b7a:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9b7c:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b9b7e:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9b80:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9b82:	f1ba 0f00 	cmp.w	sl, #0
   b9b86:	f000 80a6 	beq.w	b9cd6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b9b8a:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9b8c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9b90:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b94:	4556      	cmp	r6, sl
   b9b96:	bf28      	it	cs
   b9b98:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b9b9a:	ebaa 0a06 	sub.w	sl, sl, r6
   b9b9e:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9ba2:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b9ba6:	bf02      	ittt	eq
   b9ba8:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b9bac:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9bae:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9bb2:	f006 f9b3 	bl	bff1c <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9bb6:	f1b9 0f00 	cmp.w	r9, #0
   b9bba:	d15c      	bne.n	b9c76 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9bbc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bc0:	6803      	ldr	r3, [r0, #0]
   b9bc2:	21b5      	movs	r1, #181	; 0xb5
   b9bc4:	689b      	ldr	r3, [r3, #8]
   b9bc6:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9bc8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bcc:	6803      	ldr	r3, [r0, #0]
   b9bce:	2162      	movs	r1, #98	; 0x62
   b9bd0:	689b      	ldr	r3, [r3, #8]
   b9bd2:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9bd4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bd8:	7829      	ldrb	r1, [r5, #0]
   b9bda:	6803      	ldr	r3, [r0, #0]
   b9bdc:	689b      	ldr	r3, [r3, #8]
   b9bde:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9be0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9be4:	7869      	ldrb	r1, [r5, #1]
   b9be6:	6803      	ldr	r3, [r0, #0]
   b9be8:	689b      	ldr	r3, [r3, #8]
   b9bea:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9bec:	78a9      	ldrb	r1, [r5, #2]
   b9bee:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bf2:	f7fe fdc1 	bl	b8778 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b9bf6:	8869      	ldrh	r1, [r5, #2]
   b9bf8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bfc:	0a09      	lsrs	r1, r1, #8
   b9bfe:	f7fe fdbb 	bl	b8778 <_ZN7TwoWire5writeEi.isra.0>
   b9c02:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9c04:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c06:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c0a:	fa1f f983 	uxth.w	r9, r3
   b9c0e:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9c12:	454a      	cmp	r2, r9
   b9c14:	b2bf      	uxth	r7, r7
   b9c16:	d90d      	bls.n	b9c34 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b9c18:	42be      	cmp	r6, r7
   b9c1a:	d90b      	bls.n	b9c34 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c1c:	68aa      	ldr	r2, [r5, #8]
   b9c1e:	6801      	ldr	r1, [r0, #0]
   b9c20:	9301      	str	r3, [sp, #4]
   b9c22:	4442      	add	r2, r8
   b9c24:	688f      	ldr	r7, [r1, #8]
   b9c26:	5cd1      	ldrb	r1, [r2, r3]
   b9c28:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9c2a:	9b01      	ldr	r3, [sp, #4]
   b9c2c:	3301      	adds	r3, #1
   b9c2e:	e7e9      	b.n	b9c04 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9c30:	46b9      	mov	r9, r7
   b9c32:	e7a6      	b.n	b9b82 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9c34:	3e02      	subs	r6, #2
      startSpot += x;
   b9c36:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9c38:	42b7      	cmp	r7, r6
      startSpot += x;
   b9c3a:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9c3e:	d10c      	bne.n	b9c5a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9c40:	6803      	ldr	r3, [r0, #0]
   b9c42:	7b29      	ldrb	r1, [r5, #12]
   b9c44:	689b      	ldr	r3, [r3, #8]
   b9c46:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9c48:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c4c:	7b69      	ldrb	r1, [r5, #13]
   b9c4e:	6803      	ldr	r3, [r0, #0]
   b9c50:	689b      	ldr	r3, [r3, #8]
   b9c52:	4798      	blx	r3
        bytesSent += 2;
   b9c54:	f109 0708 	add.w	r7, r9, #8
   b9c58:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b9c5a:	455f      	cmp	r7, fp
   b9c5c:	d2e8      	bcs.n	b9c30 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9c5e:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9c62:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c66:	f006 f960 	bl	bff2a <_ZN7TwoWire15endTransmissionEh>
   b9c6a:	2800      	cmp	r0, #0
   b9c6c:	d0e0      	beq.n	b9c30 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b9c6e:	200c      	movs	r0, #12
}
   b9c70:	b003      	add	sp, #12
   b9c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9c76:	2200      	movs	r2, #0
   b9c78:	b291      	uxth	r1, r2
   b9c7a:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9c7e:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c80:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c84:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9c86:	d910      	bls.n	b9caa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b9c88:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9c8c:	eb08 0c02 	add.w	ip, r8, r2
   b9c90:	1c53      	adds	r3, r2, #1
   b9c92:	45f4      	cmp	ip, lr
   b9c94:	9301      	str	r3, [sp, #4]
   b9c96:	da08      	bge.n	b9caa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c98:	68a9      	ldr	r1, [r5, #8]
   b9c9a:	6802      	ldr	r2, [r0, #0]
   b9c9c:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9ca0:	6892      	ldr	r2, [r2, #8]
   b9ca2:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9ca4:	9b01      	ldr	r3, [sp, #4]
   b9ca6:	461a      	mov	r2, r3
   b9ca8:	e7e6      	b.n	b9c78 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9caa:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9cac:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9cae:	429f      	cmp	r7, r3
      startSpot += x;
   b9cb0:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9cb4:	d1d1      	bne.n	b9c5a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9cb6:	3e02      	subs	r6, #2
   b9cb8:	42b2      	cmp	r2, r6
   b9cba:	d1ce      	bne.n	b9c5a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9cbc:	6803      	ldr	r3, [r0, #0]
   b9cbe:	7b29      	ldrb	r1, [r5, #12]
   b9cc0:	689b      	ldr	r3, [r3, #8]
   b9cc2:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9cc4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9cc8:	7b69      	ldrb	r1, [r5, #13]
   b9cca:	6803      	ldr	r3, [r0, #0]
   b9ccc:	689b      	ldr	r3, [r3, #8]
   b9cce:	4798      	blx	r3
        bytesSent += 2;
   b9cd0:	fa1f f78b 	uxth.w	r7, fp
   b9cd4:	e7c1      	b.n	b9c5a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9cd6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9cda:	f006 f92a 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
   b9cde:	2800      	cmp	r0, #0
   b9ce0:	d0c6      	beq.n	b9c70 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9ce2:	e7c4      	b.n	b9c6e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9ce4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9ce4:	b570      	push	{r4, r5, r6, lr}
   b9ce6:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9ce8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9cec:	6803      	ldr	r3, [r0, #0]
{
   b9cee:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9cf0:	689b      	ldr	r3, [r3, #8]
   b9cf2:	21b5      	movs	r1, #181	; 0xb5
   b9cf4:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9cf6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9cfa:	6803      	ldr	r3, [r0, #0]
   b9cfc:	2162      	movs	r1, #98	; 0x62
   b9cfe:	689b      	ldr	r3, [r3, #8]
   b9d00:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9d02:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d06:	7821      	ldrb	r1, [r4, #0]
   b9d08:	6803      	ldr	r3, [r0, #0]
   b9d0a:	689b      	ldr	r3, [r3, #8]
   b9d0c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9d0e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d12:	7861      	ldrb	r1, [r4, #1]
   b9d14:	6803      	ldr	r3, [r0, #0]
   b9d16:	689b      	ldr	r3, [r3, #8]
   b9d18:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b9d1a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d1e:	78a1      	ldrb	r1, [r4, #2]
   b9d20:	6803      	ldr	r3, [r0, #0]
   b9d22:	689b      	ldr	r3, [r3, #8]
   b9d24:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9d26:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d2a:	8861      	ldrh	r1, [r4, #2]
   b9d2c:	6803      	ldr	r3, [r0, #0]
   b9d2e:	0a09      	lsrs	r1, r1, #8
   b9d30:	689b      	ldr	r3, [r3, #8]
   b9d32:	4798      	blx	r3
   b9d34:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9d36:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9d3a:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9d3c:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9d3e:	b2b2      	uxth	r2, r6
   b9d40:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9d42:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9d44:	d904      	bls.n	b9d50 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9d46:	68a1      	ldr	r1, [r4, #8]
   b9d48:	5c89      	ldrb	r1, [r1, r2]
   b9d4a:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9d4c:	3601      	adds	r6, #1
   b9d4e:	e7f2      	b.n	b9d36 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9d50:	7b21      	ldrb	r1, [r4, #12]
   b9d52:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9d54:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d58:	7b61      	ldrb	r1, [r4, #13]
   b9d5a:	6803      	ldr	r3, [r0, #0]
}
   b9d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9d60:	689b      	ldr	r3, [r3, #8]
   b9d62:	4718      	bx	r3

000b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9d64:	b510      	push	{r4, lr}
   b9d66:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b9d68:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9d6c:	f007 fdae 	bl	c18cc <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9d70:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9d74:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9d78:	429a      	cmp	r2, r3
   b9d7a:	d90b      	bls.n	b9d94 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9d7c:	28ff      	cmp	r0, #255	; 0xff
   b9d7e:	d101      	bne.n	b9d84 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9d80:	7822      	ldrb	r2, [r4, #0]
   b9d82:	b13a      	cbz	r2, b9d94 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9d84:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9d88:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b9d8a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9d8e:	3301      	adds	r3, #1
   b9d90:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9d94:	bd10      	pop	{r4, pc}
	...

000b9d98 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9d9c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9da0:	4604      	mov	r4, r0
   b9da2:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9da4:	b97b      	cbnz	r3, b9dc6 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9da6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9daa:	b923      	cbnz	r3, b9db6 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9dac:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9db0:	2b00      	cmp	r3, #0
   b9db2:	f000 80ca 	beq.w	b9f4a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9db6:	4966      	ldr	r1, [pc, #408]	; (b9f50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9db8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9dbc:	b004      	add	sp, #16
   b9dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9dc2:	f007 bba4 	b.w	c150e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9dc6:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9dca:	4a62      	ldr	r2, [pc, #392]	; (b9f54 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9dcc:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9dce:	2600      	movs	r6, #0
   b9dd0:	2301      	movs	r3, #1
   b9dd2:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9dd6:	4669      	mov	r1, sp
   b9dd8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9ddc:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9de0:	9200      	str	r2, [sp, #0]
   b9de2:	f88d 6004 	strb.w	r6, [sp, #4]
   b9de6:	f007 fcd1 	bl	c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b9dea:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9dee:	4631      	mov	r1, r6
   b9df0:	f008 f96f 	bl	c20d2 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9df4:	21b5      	movs	r1, #181	; 0xb5
   b9df6:	4620      	mov	r0, r4
   b9df8:	f7ff ffb4 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9dfc:	2162      	movs	r1, #98	; 0x62
   b9dfe:	4620      	mov	r0, r4
   b9e00:	f7ff ffb0 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9e04:	7829      	ldrb	r1, [r5, #0]
   b9e06:	4620      	mov	r0, r4
   b9e08:	f7ff ffac 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9e0c:	7869      	ldrb	r1, [r5, #1]
   b9e0e:	4620      	mov	r0, r4
   b9e10:	f7ff ffa8 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9e14:	78a9      	ldrb	r1, [r5, #2]
   b9e16:	4620      	mov	r0, r4
   b9e18:	f7ff ffa4 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9e1c:	8869      	ldrh	r1, [r5, #2]
   b9e1e:	4620      	mov	r0, r4
   b9e20:	0a09      	lsrs	r1, r1, #8
   b9e22:	f7ff ff9f 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9e26:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9e2a:	2b00      	cmp	r3, #0
   b9e2c:	d042      	beq.n	b9eb4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9e2e:	494a      	ldr	r1, [pc, #296]	; (b9f58 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9e30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e34:	f007 fb6b 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9e38:	2210      	movs	r2, #16
   b9e3a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e3e:	21b5      	movs	r1, #181	; 0xb5
   b9e40:	f7fe fc8a 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9e44:	4945      	ldr	r1, [pc, #276]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e4a:	f007 fb60 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9e4e:	2210      	movs	r2, #16
   b9e50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e54:	2162      	movs	r1, #98	; 0x62
   b9e56:	f7fe fc7f 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9e5a:	4940      	ldr	r1, [pc, #256]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e60:	f007 fb55 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9e64:	2210      	movs	r2, #16
   b9e66:	7829      	ldrb	r1, [r5, #0]
   b9e68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e6c:	f7fe fc74 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9e70:	493a      	ldr	r1, [pc, #232]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e76:	f007 fb4a 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9e7a:	2210      	movs	r2, #16
   b9e7c:	7869      	ldrb	r1, [r5, #1]
   b9e7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e82:	f7fe fc69 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9e86:	4935      	ldr	r1, [pc, #212]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e8c:	f007 fb3f 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9e90:	2210      	movs	r2, #16
   b9e92:	78a9      	ldrb	r1, [r5, #2]
   b9e94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e98:	f007 fb55 	bl	c1546 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9e9c:	492f      	ldr	r1, [pc, #188]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ea2:	f007 fb34 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9ea6:	8869      	ldrh	r1, [r5, #2]
   b9ea8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eac:	2210      	movs	r2, #16
   b9eae:	0a09      	lsrs	r1, r1, #8
   b9eb0:	f007 fb49 	bl	c1546 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9eb4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9eb8:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9eba:	886a      	ldrh	r2, [r5, #2]
   b9ebc:	b2b3      	uxth	r3, r6
   b9ebe:	429a      	cmp	r2, r3
   b9ec0:	d916      	bls.n	b9ef0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9ec2:	461f      	mov	r7, r3
   b9ec4:	68ab      	ldr	r3, [r5, #8]
   b9ec6:	4620      	mov	r0, r4
   b9ec8:	5dd9      	ldrb	r1, [r3, r7]
   b9eca:	f7ff ff4b 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9ece:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ed2:	b15b      	cbz	r3, b9eec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9ed4:	4641      	mov	r1, r8
   b9ed6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eda:	f007 fb18 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9ede:	68ab      	ldr	r3, [r5, #8]
   b9ee0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ee4:	5dd9      	ldrb	r1, [r3, r7]
   b9ee6:	2210      	movs	r2, #16
   b9ee8:	f7fe fc36 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9eec:	3601      	adds	r6, #1
   b9eee:	e7e4      	b.n	b9eba <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9ef0:	7b29      	ldrb	r1, [r5, #12]
   b9ef2:	4620      	mov	r0, r4
   b9ef4:	f7ff ff36 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9ef8:	7b69      	ldrb	r1, [r5, #13]
   b9efa:	4620      	mov	r0, r4
   b9efc:	f7ff ff32 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9f00:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9f04:	2101      	movs	r1, #1
   b9f06:	f008 f8e4 	bl	c20d2 <digitalWrite>
  _spiPort->endTransaction();
   b9f0a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9f0e:	f007 fc23 	bl	c1758 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9f12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9f16:	b1c3      	cbz	r3, b9f4a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9f18:	4910      	ldr	r1, [pc, #64]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9f1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f1e:	f007 faf6 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9f22:	7b29      	ldrb	r1, [r5, #12]
   b9f24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f28:	2210      	movs	r2, #16
   b9f2a:	f7fe fc15 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9f2e:	490b      	ldr	r1, [pc, #44]	; (b9f5c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9f30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f34:	f007 faeb 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9f38:	7b69      	ldrb	r1, [r5, #13]
   b9f3a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f3e:	2210      	movs	r2, #16
}
   b9f40:	b004      	add	sp, #16
   b9f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9f46:	f7fe bc0e 	b.w	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9f4a:	b004      	add	sp, #16
   b9f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9f50:	000c70b2 	.word	0x000c70b2
   b9f54:	000c6e68 	.word	0x000c6e68
   b9f58:	000c70e7 	.word	0x000c70e7
   b9f5c:	000c8035 	.word	0x000c8035

000b9f60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9f62:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9f66:	4604      	mov	r4, r0
   b9f68:	460d      	mov	r5, r1
   b9f6a:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9f6c:	2b00      	cmp	r3, #0
   b9f6e:	f000 8082 	beq.w	ba076 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9f72:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9f76:	4940      	ldr	r1, [pc, #256]	; (ba078 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9f78:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9f7c:	f007 fac7 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9f80:	782b      	ldrb	r3, [r5, #0]
   b9f82:	2b01      	cmp	r3, #1
   b9f84:	d13c      	bne.n	ba000 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9f86:	493d      	ldr	r1, [pc, #244]	; (ba07c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9f88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9f8c:	f007 fabf 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9f90:	493b      	ldr	r1, [pc, #236]	; (ba080 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9f92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f96:	f007 faba 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9f9a:	882b      	ldrh	r3, [r5, #0]
   b9f9c:	f240 7201 	movw	r2, #1793	; 0x701
   b9fa0:	4293      	cmp	r3, r2
   b9fa2:	d145      	bne.n	ba030 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9fa4:	4937      	ldr	r1, [pc, #220]	; (ba084 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9fa6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9faa:	f007 fab0 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9fae:	4936      	ldr	r1, [pc, #216]	; (ba088 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9fb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fb4:	f007 faab 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
   b9fb8:	8869      	ldrh	r1, [r5, #2]
   b9fba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fbe:	2210      	movs	r2, #16
   b9fc0:	f007 fac1 	bl	c1546 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9fc4:	2f01      	cmp	r7, #1
   b9fc6:	d101      	bne.n	b9fcc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9fc8:	2e00      	cmp	r6, #0
   b9fca:	d049      	beq.n	ba060 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9fcc:	492f      	ldr	r1, [pc, #188]	; (ba08c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9fce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9fd2:	4f2f      	ldr	r7, [pc, #188]	; (ba090 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9fd4:	f007 fa9b 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
   b9fd8:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9fda:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9fdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9fe0:	b2b3      	uxth	r3, r6
   b9fe2:	429a      	cmp	r2, r3
   b9fe4:	d941      	bls.n	ba06a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9fe6:	4639      	mov	r1, r7
   b9fe8:	f007 fa91 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9fec:	b2b3      	uxth	r3, r6
   b9fee:	68a9      	ldr	r1, [r5, #8]
   b9ff0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ff4:	5cc9      	ldrb	r1, [r1, r3]
   b9ff6:	2210      	movs	r2, #16
   b9ff8:	f7fe fbae 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9ffc:	3601      	adds	r6, #1
   b9ffe:	e7ec      	b.n	b9fda <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   ba000:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   ba002:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   ba006:	d101      	bne.n	ba00c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   ba008:	4922      	ldr	r1, [pc, #136]	; (ba094 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   ba00a:	e7bf      	b.n	b9f8c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   ba00c:	2b06      	cmp	r3, #6
   ba00e:	d101      	bne.n	ba014 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   ba010:	4921      	ldr	r1, [pc, #132]	; (ba098 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   ba012:	e7bb      	b.n	b9f8c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   ba014:	2b0a      	cmp	r3, #10
   ba016:	d101      	bne.n	ba01c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   ba018:	4920      	ldr	r1, [pc, #128]	; (ba09c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   ba01a:	e7b7      	b.n	b9f8c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   ba01c:	4920      	ldr	r1, [pc, #128]	; (ba0a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   ba01e:	f007 fa76 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   ba022:	7829      	ldrb	r1, [r5, #0]
   ba024:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba028:	2210      	movs	r2, #16
   ba02a:	f7fe fb95 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   ba02e:	e7af      	b.n	b9f90 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   ba030:	f640 0206 	movw	r2, #2054	; 0x806
   ba034:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   ba036:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   ba03a:	d101      	bne.n	ba040 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   ba03c:	4919      	ldr	r1, [pc, #100]	; (ba0a4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   ba03e:	e7b4      	b.n	b9faa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   ba040:	f640 1206 	movw	r2, #2310	; 0x906
   ba044:	4293      	cmp	r3, r2
   ba046:	d101      	bne.n	ba04c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   ba048:	4917      	ldr	r1, [pc, #92]	; (ba0a8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   ba04a:	e7ae      	b.n	b9faa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   ba04c:	4914      	ldr	r1, [pc, #80]	; (ba0a0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   ba04e:	f007 fa5e 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   ba052:	7869      	ldrb	r1, [r5, #1]
   ba054:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba058:	2210      	movs	r2, #16
   ba05a:	f7fe fb7d 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   ba05e:	e7a6      	b.n	b9fae <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   ba060:	4912      	ldr	r1, [pc, #72]	; (ba0ac <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   ba062:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba066:	f007 fa52 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   ba06a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   ba06e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   ba072:	f007 ba50 	b.w	c1516 <_ZN5Print7printlnEv>
}
   ba076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba078:	000c70f8 	.word	0x000c70f8
   ba07c:	000c70fd 	.word	0x000c70fd
   ba080:	000c710d 	.word	0x000c710d
   ba084:	000c7112 	.word	0x000c7112
   ba088:	000c7120 	.word	0x000c7120
   ba08c:	000c7129 	.word	0x000c7129
   ba090:	000c8035 	.word	0x000c8035
   ba094:	000c7101 	.word	0x000c7101
   ba098:	000c7105 	.word	0x000c7105
   ba09c:	000c7109 	.word	0x000c7109
   ba0a0:	000c737e 	.word	0x000c737e
   ba0a4:	000c7116 	.word	0x000c7116
   ba0a8:	000c711b 	.word	0x000c711b
   ba0ac:	000c7133 	.word	0x000c7133

000ba0b0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   ba0b0:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba0b2:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   ba0b6:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba0b8:	b955      	cbnz	r5, ba0d0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   ba0ba:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba0be:	b90b      	cbnz	r3, ba0c4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   ba0c0:	2000      	movs	r0, #0
}
   ba0c2:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   ba0c4:	491a      	ldr	r1, [pc, #104]	; (ba130 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba0c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba0ca:	f007 fa3a 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   ba0ce:	e7f7      	b.n	ba0c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   ba0d0:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   ba0d4:	b12b      	cbz	r3, ba0e2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   ba0d6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba0da:	2b00      	cmp	r3, #0
   ba0dc:	d0f0      	beq.n	ba0c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   ba0de:	4915      	ldr	r1, [pc, #84]	; (ba134 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   ba0e0:	e7f1      	b.n	ba0c6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   ba0e2:	4628      	mov	r0, r5
   ba0e4:	f7f9 ffd9 	bl	b409a <_Znaj>
   ba0e8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba0ec:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   ba0f0:	b930      	cbnz	r0, ba100 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba0f2:	b91b      	cbnz	r3, ba0fc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   ba0f4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   ba0f8:	2b00      	cmp	r3, #0
   ba0fa:	d0e1      	beq.n	ba0c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba0fc:	490e      	ldr	r1, [pc, #56]	; (ba138 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   ba0fe:	e7e2      	b.n	ba0c6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   ba100:	b17b      	cbz	r3, ba122 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   ba102:	490e      	ldr	r1, [pc, #56]	; (ba13c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   ba104:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba108:	f007 fa01 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   ba10c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   ba110:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   ba114:	220a      	movs	r2, #10
   ba116:	4628      	mov	r0, r5
   ba118:	f007 fa15 	bl	c1546 <_ZN5Print11printNumberEmh>
        n += println();
   ba11c:	4628      	mov	r0, r5
   ba11e:	f007 f9fa 	bl	c1516 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   ba122:	2300      	movs	r3, #0
   ba124:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   ba128:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   ba12c:	2001      	movs	r0, #1
   ba12e:	e7c8      	b.n	ba0c2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   ba130:	000c7145 	.word	0x000c7145
   ba134:	000c7196 	.word	0x000c7196
   ba138:	000c71d9 	.word	0x000c71d9
   ba13c:	000c71fd 	.word	0x000c71fd

000ba140 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   ba140:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba144:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   ba148:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba14a:	bf3b      	ittet	cc
   ba14c:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   ba150:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   ba152:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba154:	1a80      	subcc	r0, r0, r2
   ba156:	b280      	uxth	r0, r0
}
   ba158:	4770      	bx	lr

000ba15a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   ba15a:	b508      	push	{r3, lr}
   ba15c:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   ba15e:	f7ff ffef 	bl	ba140 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   ba162:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   ba166:	1a18      	subs	r0, r3, r0
}
   ba168:	b280      	uxth	r0, r0
   ba16a:	bd08      	pop	{r3, pc}

000ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   ba16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   ba170:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba174:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   ba178:	1aed      	subs	r5, r5, r3
   ba17a:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   ba17c:	4295      	cmp	r5, r2
   ba17e:	bf28      	it	cs
   ba180:	4615      	movcs	r5, r2
{
   ba182:	4616      	mov	r6, r2
   ba184:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba186:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba18a:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba18c:	462a      	mov	r2, r5
   ba18e:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba190:	b2bf      	uxth	r7, r7
{
   ba192:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba194:	f00a fa60 	bl	c4658 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   ba198:	b19f      	cbz	r7, ba1c2 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   ba19a:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   ba19e:	463a      	mov	r2, r7
   ba1a0:	eb08 0105 	add.w	r1, r8, r5
   ba1a4:	f00a fa58 	bl	c4658 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   ba1a8:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   ba1ac:	4620      	mov	r0, r4
   ba1ae:	f7ff ffc7 	bl	ba140 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   ba1b2:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   ba1b6:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   ba1b8:	bf38      	it	cc
   ba1ba:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   ba1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   ba1c2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   ba1c6:	4416      	add	r6, r2
   ba1c8:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   ba1cc:	e7ee      	b.n	ba1ac <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000ba1d0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   ba1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba1d2:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   ba1d6:	4604      	mov	r4, r0
   ba1d8:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba1da:	b113      	cbz	r3, ba1e2 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   ba1dc:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   ba1e0:	b953      	cbnz	r3, ba1f8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   ba1e2:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   ba1e6:	b128      	cbz	r0, ba1f4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   ba1e8:	4924      	ldr	r1, [pc, #144]	; (ba27c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba1ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba1ee:	f007 f9a8 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   ba1f2:	2000      	movs	r0, #0
}
   ba1f4:	b003      	add	sp, #12
   ba1f6:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   ba1f8:	f7ff ffaf 	bl	ba15a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   ba1fc:	886b      	ldrh	r3, [r5, #2]
   ba1fe:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   ba200:	b29b      	uxth	r3, r3
   ba202:	4283      	cmp	r3, r0
   ba204:	d908      	bls.n	ba218 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba206:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba20a:	b91b      	cbnz	r3, ba214 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   ba20c:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   ba210:	2800      	cmp	r0, #0
   ba212:	d0ef      	beq.n	ba1f4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba214:	491a      	ldr	r1, [pc, #104]	; (ba280 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   ba216:	e7e8      	b.n	ba1ea <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba218:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   ba21c:	2202      	movs	r2, #2
   ba21e:	4669      	mov	r1, sp
   ba220:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba222:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   ba226:	f7ff ffa1 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   ba22a:	2201      	movs	r2, #1
   ba22c:	4629      	mov	r1, r5
   ba22e:	4620      	mov	r0, r4
   ba230:	f7ff ff9c 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   ba234:	2201      	movs	r2, #1
   ba236:	18a9      	adds	r1, r5, r2
   ba238:	4620      	mov	r0, r4
   ba23a:	f7ff ff97 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   ba23e:	886b      	ldrh	r3, [r5, #2]
   ba240:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   ba244:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   ba246:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   ba248:	a901      	add	r1, sp, #4
   ba24a:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   ba24c:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   ba250:	f7ff ff8c 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   ba254:	886a      	ldrh	r2, [r5, #2]
   ba256:	68a9      	ldr	r1, [r5, #8]
   ba258:	4620      	mov	r0, r4
   ba25a:	f7ff ff87 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   ba25e:	2201      	movs	r2, #1
   ba260:	f105 010c 	add.w	r1, r5, #12
   ba264:	4620      	mov	r0, r4
   ba266:	f7ff ff81 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   ba26a:	4620      	mov	r0, r4
   ba26c:	2201      	movs	r2, #1
   ba26e:	f105 010d 	add.w	r1, r5, #13
   ba272:	f7ff ff7b 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   ba276:	2001      	movs	r0, #1
   ba278:	e7bc      	b.n	ba1f4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   ba27a:	bf00      	nop
   ba27c:	000c7223 	.word	0x000c7223
   ba280:	000c724b 	.word	0x000c724b

000ba284 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   ba284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   ba288:	780e      	ldrb	r6, [r1, #0]
   ba28a:	2e0d      	cmp	r6, #13
{
   ba28c:	4604      	mov	r4, r0
   ba28e:	460d      	mov	r5, r1
  switch (msg->cls)
   ba290:	f001 8228 	beq.w	bb6e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   ba294:	d809      	bhi.n	ba2aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   ba296:	2e02      	cmp	r6, #2
   ba298:	f000 879a 	beq.w	bb1d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   ba29c:	2e06      	cmp	r6, #6
   ba29e:	f001 81cc 	beq.w	bb63a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   ba2a2:	2e01      	cmp	r6, #1
   ba2a4:	d04f      	beq.n	ba346 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   ba2a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   ba2aa:	2e13      	cmp	r6, #19
   ba2ac:	f001 83eb 	beq.w	bba86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   ba2b0:	2e28      	cmp	r6, #40	; 0x28
   ba2b2:	f001 84ca 	beq.w	bbc4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   ba2b6:	2e10      	cmp	r6, #16
   ba2b8:	d1f5      	bne.n	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   ba2ba:	680b      	ldr	r3, [r1, #0]
   ba2bc:	4a8e      	ldr	r2, [pc, #568]	; (ba4f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   ba2be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba2c2:	4293      	cmp	r3, r2
   ba2c4:	f041 826a 	bne.w	bb79c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   ba2c8:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   ba2ca:	2e00      	cmp	r6, #0
   ba2cc:	d0eb      	beq.n	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   ba2ce:	68a8      	ldr	r0, [r5, #8]
   ba2d0:	2100      	movs	r1, #0
   ba2d2:	f7fe fa21 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2d6:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   ba2d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba2da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba2dc:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba2de:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba2e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba2e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba2e4:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba2e6:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba2e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba2ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba2ec:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba2ee:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   ba2f0:	68a8      	ldr	r0, [r5, #8]
   ba2f2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   ba2f4:	2108      	movs	r1, #8
   ba2f6:	f7fe fa0f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2fa:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba2fe:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba300:	210c      	movs	r1, #12
   ba302:	f7fe fa16 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba306:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba308:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba30a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba30c:	210e      	movs	r1, #14
   ba30e:	f7fe fa10 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba312:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba314:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba31a:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba31c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba31e:	6a1a      	ldr	r2, [r3, #32]
   ba320:	b17a      	cbz	r2, ba342 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba322:	7819      	ldrb	r1, [r3, #0]
   ba324:	0708      	lsls	r0, r1, #28
   ba326:	d40c      	bmi.n	ba342 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   ba328:	1d19      	adds	r1, r3, #4
   ba32a:	3314      	adds	r3, #20
   ba32c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba330:	f842 0b04 	str.w	r0, [r2], #4
   ba334:	4299      	cmp	r1, r3
   ba336:	d1f9      	bne.n	ba32c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   ba338:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   ba33a:	7813      	ldrb	r3, [r2, #0]
   ba33c:	f043 0308 	orr.w	r3, r3, #8
   ba340:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   ba342:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba344:	e03d      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   ba346:	680b      	ldr	r3, [r1, #0]
   ba348:	4a6c      	ldr	r2, [pc, #432]	; (ba4fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   ba34a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba34e:	4293      	cmp	r3, r2
   ba350:	d141      	bne.n	ba3d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   ba352:	68c6      	ldr	r6, [r0, #12]
   ba354:	2e00      	cmp	r6, #0
   ba356:	d0a6      	beq.n	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   ba358:	68a8      	ldr	r0, [r5, #8]
   ba35a:	2100      	movs	r1, #0
   ba35c:	f7fe f9dc 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba360:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba362:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba364:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba366:	2104      	movs	r1, #4
   ba368:	f7fe f9d6 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba36c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba36e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba370:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba372:	2108      	movs	r1, #8
   ba374:	f7fe f9d0 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba378:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba37a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba37c:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba37e:	210c      	movs	r1, #12
   ba380:	f7fe f9ca 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba384:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   ba386:	68a8      	ldr	r0, [r5, #8]
   ba388:	68e6      	ldr	r6, [r4, #12]
   ba38a:	2110      	movs	r1, #16
   ba38c:	f7fe f9c4 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba390:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba392:	68e3      	ldr	r3, [r4, #12]
   ba394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba398:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba39a:	68e3      	ldr	r3, [r4, #12]
   ba39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba39e:	b17a      	cbz	r2, ba3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3a0:	7819      	ldrb	r1, [r3, #0]
   ba3a2:	0709      	lsls	r1, r1, #28
   ba3a4:	d40c      	bmi.n	ba3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   ba3a6:	1d19      	adds	r1, r3, #4
   ba3a8:	3318      	adds	r3, #24
   ba3aa:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3ae:	f842 0b04 	str.w	r0, [r2], #4
   ba3b2:	4299      	cmp	r1, r3
   ba3b4:	d1f9      	bne.n	ba3aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3b6:	68e2      	ldr	r2, [r4, #12]
   ba3b8:	7813      	ldrb	r3, [r2, #0]
   ba3ba:	f043 0308 	orr.w	r3, r3, #8
   ba3be:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba3c0:	68e3      	ldr	r3, [r4, #12]
   ba3c2:	781b      	ldrb	r3, [r3, #0]
   ba3c4:	075f      	lsls	r7, r3, #29
   ba3c6:	f57f af6e 	bpl.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   ba3ca:	4629      	mov	r1, r5
   ba3cc:	4620      	mov	r0, r4
}
   ba3ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   ba3d2:	f7ff befd 	b.w	ba1d0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   ba3d6:	4a4a      	ldr	r2, [pc, #296]	; (ba500 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   ba3d8:	4293      	cmp	r3, r2
   ba3da:	d13d      	bne.n	ba458 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   ba3dc:	6906      	ldr	r6, [r0, #16]
   ba3de:	2e00      	cmp	r6, #0
   ba3e0:	f43f af61 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   ba3e4:	68a8      	ldr	r0, [r5, #8]
   ba3e6:	2100      	movs	r1, #0
   ba3e8:	f7fe f996 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3ec:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba3ee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba3f0:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba3f2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba3f4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba3f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba3f8:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba3fa:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba3fc:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba3fe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba400:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba402:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba404:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba406:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba408:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba40a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba40c:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba40e:	68a8      	ldr	r0, [r5, #8]
   ba410:	6926      	ldr	r6, [r4, #16]
   ba412:	2108      	movs	r1, #8
   ba414:	f7fe f980 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba418:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba41a:	68a8      	ldr	r0, [r5, #8]
   ba41c:	6926      	ldr	r6, [r4, #16]
   ba41e:	210c      	movs	r1, #12
   ba420:	f7fe f97a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba424:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba426:	6923      	ldr	r3, [r4, #16]
   ba428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba42c:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba42e:	6923      	ldr	r3, [r4, #16]
   ba430:	6a1a      	ldr	r2, [r3, #32]
   ba432:	b17a      	cbz	r2, ba454 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba434:	7819      	ldrb	r1, [r3, #0]
   ba436:	070e      	lsls	r6, r1, #28
   ba438:	d40c      	bmi.n	ba454 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba43a:	1d19      	adds	r1, r3, #4
   ba43c:	3314      	adds	r3, #20
   ba43e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba442:	f842 0b04 	str.w	r0, [r2], #4
   ba446:	4299      	cmp	r1, r3
   ba448:	d1f9      	bne.n	ba43e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba44a:	6922      	ldr	r2, [r4, #16]
   ba44c:	7813      	ldrb	r3, [r2, #0]
   ba44e:	f043 0308 	orr.w	r3, r3, #8
   ba452:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba454:	6923      	ldr	r3, [r4, #16]
   ba456:	e7b4      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba458:	4a2a      	ldr	r2, [pc, #168]	; (ba504 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba45a:	4293      	cmp	r3, r2
   ba45c:	d154      	bne.n	ba508 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba45e:	6946      	ldr	r6, [r0, #20]
   ba460:	2e00      	cmp	r6, #0
   ba462:	f43f af20 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba466:	68a8      	ldr	r0, [r5, #8]
   ba468:	2100      	movs	r1, #0
   ba46a:	f7fe f955 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba46e:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba470:	68a8      	ldr	r0, [r5, #8]
   ba472:	6966      	ldr	r6, [r4, #20]
   ba474:	2104      	movs	r1, #4
   ba476:	f7fe f95c 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba47a:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba47c:	68a8      	ldr	r0, [r5, #8]
   ba47e:	6966      	ldr	r6, [r4, #20]
   ba480:	2106      	movs	r1, #6
   ba482:	f7fe f956 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba486:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba488:	68a8      	ldr	r0, [r5, #8]
   ba48a:	6966      	ldr	r6, [r4, #20]
   ba48c:	2108      	movs	r1, #8
   ba48e:	f7fe f950 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba492:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba494:	68a8      	ldr	r0, [r5, #8]
   ba496:	6966      	ldr	r6, [r4, #20]
   ba498:	210a      	movs	r1, #10
   ba49a:	f7fe f94a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba49e:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba4a0:	68a8      	ldr	r0, [r5, #8]
   ba4a2:	6966      	ldr	r6, [r4, #20]
   ba4a4:	210c      	movs	r1, #12
   ba4a6:	f7fe f944 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4aa:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba4ac:	68a8      	ldr	r0, [r5, #8]
   ba4ae:	6966      	ldr	r6, [r4, #20]
   ba4b0:	210e      	movs	r1, #14
   ba4b2:	f7fe f93e 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4b6:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba4b8:	68a8      	ldr	r0, [r5, #8]
   ba4ba:	6966      	ldr	r6, [r4, #20]
   ba4bc:	2110      	movs	r1, #16
   ba4be:	f7fe f938 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4c2:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba4c4:	6963      	ldr	r3, [r4, #20]
   ba4c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba4ca:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4cc:	6963      	ldr	r3, [r4, #20]
   ba4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba4d0:	b17a      	cbz	r2, ba4f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4d2:	7819      	ldrb	r1, [r3, #0]
   ba4d4:	0708      	lsls	r0, r1, #28
   ba4d6:	d40c      	bmi.n	ba4f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba4d8:	1d19      	adds	r1, r3, #4
   ba4da:	3318      	adds	r3, #24
   ba4dc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba4e0:	f842 0b04 	str.w	r0, [r2], #4
   ba4e4:	4299      	cmp	r1, r3
   ba4e6:	d1f9      	bne.n	ba4dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4e8:	6962      	ldr	r2, [r4, #20]
   ba4ea:	7813      	ldrb	r3, [r2, #0]
   ba4ec:	f043 0308 	orr.w	r3, r3, #8
   ba4f0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba4f2:	6963      	ldr	r3, [r4, #20]
   ba4f4:	e765      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba4f6:	bf00      	nop
   ba4f8:	00101400 	.word	0x00101400
   ba4fc:	00140100 	.word	0x00140100
   ba500:	00100300 	.word	0x00100300
   ba504:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba508:	4a8c      	ldr	r2, [pc, #560]	; (ba73c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba50a:	4293      	cmp	r3, r2
   ba50c:	d149      	bne.n	ba5a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba50e:	69c6      	ldr	r6, [r0, #28]
   ba510:	2e00      	cmp	r6, #0
   ba512:	f43f aec8 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba516:	68a8      	ldr	r0, [r5, #8]
   ba518:	2100      	movs	r1, #0
   ba51a:	f7fe f8fd 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba51e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba520:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba522:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba524:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba526:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba528:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba52a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba52c:	2108      	movs	r1, #8
   ba52e:	f7fe f8f3 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba532:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba534:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba536:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba538:	210c      	movs	r1, #12
   ba53a:	f7fe f8ed 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba53e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba540:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba542:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba544:	2110      	movs	r1, #16
   ba546:	f7fe f8e7 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba54a:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba54c:	68a8      	ldr	r0, [r5, #8]
   ba54e:	69e6      	ldr	r6, [r4, #28]
   ba550:	2114      	movs	r1, #20
   ba552:	f7fe f8e1 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba556:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba558:	68a8      	ldr	r0, [r5, #8]
   ba55a:	69e6      	ldr	r6, [r4, #28]
   ba55c:	2118      	movs	r1, #24
   ba55e:	f7fe f8db 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba562:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba564:	68a8      	ldr	r0, [r5, #8]
   ba566:	69e6      	ldr	r6, [r4, #28]
   ba568:	211c      	movs	r1, #28
   ba56a:	f7fe f8d5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba56e:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba570:	69e3      	ldr	r3, [r4, #28]
   ba572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba576:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba578:	69e3      	ldr	r3, [r4, #28]
   ba57a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba57c:	b17a      	cbz	r2, ba59e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba57e:	7819      	ldrb	r1, [r3, #0]
   ba580:	0709      	lsls	r1, r1, #28
   ba582:	d40c      	bmi.n	ba59e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba584:	1d19      	adds	r1, r3, #4
   ba586:	3324      	adds	r3, #36	; 0x24
   ba588:	f851 0b04 	ldr.w	r0, [r1], #4
   ba58c:	f842 0b04 	str.w	r0, [r2], #4
   ba590:	4299      	cmp	r1, r3
   ba592:	d1f9      	bne.n	ba588 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba594:	69e2      	ldr	r2, [r4, #28]
   ba596:	7813      	ldrb	r3, [r2, #0]
   ba598:	f043 0308 	orr.w	r3, r3, #8
   ba59c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba59e:	69e3      	ldr	r3, [r4, #28]
   ba5a0:	e70f      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba5a2:	4a67      	ldr	r2, [pc, #412]	; (ba740 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba5a4:	4293      	cmp	r3, r2
   ba5a6:	f040 80cd 	bne.w	ba744 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba5aa:	6a06      	ldr	r6, [r0, #32]
   ba5ac:	2e00      	cmp	r6, #0
   ba5ae:	f43f ae7a 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba5b2:	68a8      	ldr	r0, [r5, #8]
   ba5b4:	2100      	movs	r1, #0
   ba5b6:	f7fe f8af 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5ba:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba5bc:	68a8      	ldr	r0, [r5, #8]
   ba5be:	6a26      	ldr	r6, [r4, #32]
   ba5c0:	2104      	movs	r1, #4
   ba5c2:	f7fe f8b6 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5c6:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba5c8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba5ca:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5cc:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba5ce:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba5d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba5d2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5d4:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba5d6:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba5d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba5da:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5dc:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba5de:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba5e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba5e2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5e4:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba5e6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba5e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba5ea:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5ec:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba5ee:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba5f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba5f2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5f4:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba5f6:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba5f8:	210c      	movs	r1, #12
   ba5fa:	68a8      	ldr	r0, [r5, #8]
   ba5fc:	6a26      	ldr	r6, [r4, #32]
   ba5fe:	f7fe f88b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba602:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba604:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba606:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba608:	2110      	movs	r1, #16
   ba60a:	f7fe f885 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba60e:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba610:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba612:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba614:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba616:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba618:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba61a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba61c:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba61e:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba620:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba622:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba624:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba626:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba628:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba62a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba62c:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba62e:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba630:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba632:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba634:	2118      	movs	r1, #24
   ba636:	f7fe f86f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba63a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba63c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba63e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba640:	211c      	movs	r1, #28
   ba642:	f7fe f869 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba646:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba648:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba64a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba64c:	2120      	movs	r1, #32
   ba64e:	f7fe f863 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba652:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba654:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba656:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba658:	2124      	movs	r1, #36	; 0x24
   ba65a:	f7fe f85d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba65e:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba660:	68a8      	ldr	r0, [r5, #8]
   ba662:	6a26      	ldr	r6, [r4, #32]
   ba664:	2128      	movs	r1, #40	; 0x28
   ba666:	f7fe f857 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba66a:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba66c:	6a26      	ldr	r6, [r4, #32]
   ba66e:	68a8      	ldr	r0, [r5, #8]
   ba670:	212c      	movs	r1, #44	; 0x2c
   ba672:	f7fe f851 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba676:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba678:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba67a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba67c:	2130      	movs	r1, #48	; 0x30
   ba67e:	f7fe f84b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba682:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba684:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba686:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba688:	2134      	movs	r1, #52	; 0x34
   ba68a:	f7fe f845 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba68e:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba690:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba692:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba694:	2138      	movs	r1, #56	; 0x38
   ba696:	f7fe f83f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba69a:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba69c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba69e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6a0:	213c      	movs	r1, #60	; 0x3c
   ba6a2:	f7fe f839 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba6a6:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6a8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba6aa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6ac:	2140      	movs	r1, #64	; 0x40
   ba6ae:	f7fe f833 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba6b2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba6b4:	68a8      	ldr	r0, [r5, #8]
   ba6b6:	6a26      	ldr	r6, [r4, #32]
   ba6b8:	2144      	movs	r1, #68	; 0x44
   ba6ba:	f7fe f82d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6be:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba6c0:	68a8      	ldr	r0, [r5, #8]
   ba6c2:	6a26      	ldr	r6, [r4, #32]
   ba6c4:	2148      	movs	r1, #72	; 0x48
   ba6c6:	f7fe f827 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ca:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba6cc:	68a8      	ldr	r0, [r5, #8]
   ba6ce:	6a26      	ldr	r6, [r4, #32]
   ba6d0:	214c      	movs	r1, #76	; 0x4c
   ba6d2:	f7fe f82e 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba6d6:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba6da:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba6dc:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba6de:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba6e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba6e6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6e8:	68a8      	ldr	r0, [r5, #8]
   ba6ea:	2154      	movs	r1, #84	; 0x54
   ba6ec:	f7fe f814 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba6f0:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba6f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba6f4:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba6f6:	2158      	movs	r1, #88	; 0x58
   ba6f8:	f7fe f81b 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba6fc:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba700:	68a8      	ldr	r0, [r5, #8]
   ba702:	6a26      	ldr	r6, [r4, #32]
   ba704:	215a      	movs	r1, #90	; 0x5a
   ba706:	f7fe f814 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba70a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba70e:	6a22      	ldr	r2, [r4, #32]
   ba710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba714:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba716:	6a22      	ldr	r2, [r4, #32]
   ba718:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba71a:	6a21      	ldr	r1, [r4, #32]
   ba71c:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba71e:	b158      	cbz	r0, ba738 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba720:	780b      	ldrb	r3, [r1, #0]
   ba722:	071b      	lsls	r3, r3, #28
   ba724:	d408      	bmi.n	ba738 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba726:	225c      	movs	r2, #92	; 0x5c
   ba728:	3104      	adds	r1, #4
   ba72a:	f009 ff95 	bl	c4658 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba72e:	6a22      	ldr	r2, [r4, #32]
   ba730:	7813      	ldrb	r3, [r2, #0]
   ba732:	f043 0308 	orr.w	r3, r3, #8
   ba736:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba738:	6a23      	ldr	r3, [r4, #32]
   ba73a:	e642      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba73c:	00200500 	.word	0x00200500
   ba740:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba744:	4a8e      	ldr	r2, [pc, #568]	; (ba980 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba746:	4293      	cmp	r3, r2
   ba748:	d137      	bne.n	ba7ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba74a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba74c:	2b00      	cmp	r3, #0
   ba74e:	f43f adaa 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba752:	688a      	ldr	r2, [r1, #8]
   ba754:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba756:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba758:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba75a:	68a8      	ldr	r0, [r5, #8]
   ba75c:	2104      	movs	r1, #4
   ba75e:	f7fd ffdb 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba762:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba764:	68a8      	ldr	r0, [r5, #8]
   ba766:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba768:	2108      	movs	r1, #8
   ba76a:	f7fd ffd5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba76e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba770:	68a8      	ldr	r0, [r5, #8]
   ba772:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba774:	210c      	movs	r1, #12
   ba776:	f7fd ffcf 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba77a:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba77c:	68a8      	ldr	r0, [r5, #8]
   ba77e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba780:	2110      	movs	r1, #16
   ba782:	f7fd ffc9 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba786:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba788:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba78e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba790:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba794:	b17a      	cbz	r2, ba7b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba796:	7819      	ldrb	r1, [r3, #0]
   ba798:	070f      	lsls	r7, r1, #28
   ba79a:	d40c      	bmi.n	ba7b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba79c:	1d19      	adds	r1, r3, #4
   ba79e:	3318      	adds	r3, #24
   ba7a0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba7a4:	f842 0b04 	str.w	r0, [r2], #4
   ba7a8:	4299      	cmp	r1, r3
   ba7aa:	d1f9      	bne.n	ba7a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba7ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba7ae:	7813      	ldrb	r3, [r2, #0]
   ba7b0:	f043 0308 	orr.w	r3, r3, #8
   ba7b4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba7b8:	e603      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba7ba:	4a72      	ldr	r2, [pc, #456]	; (ba984 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba7bc:	4293      	cmp	r3, r2
   ba7be:	d139      	bne.n	ba834 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba7c0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba7c2:	2e00      	cmp	r6, #0
   ba7c4:	f43f ad6f 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba7c8:	68a8      	ldr	r0, [r5, #8]
   ba7ca:	2100      	movs	r1, #0
   ba7cc:	f7fd ffa4 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7d0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d6:	2104      	movs	r1, #4
   ba7d8:	f7fd ff9e 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba7dc:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7de:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba7e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7e2:	2108      	movs	r1, #8
   ba7e4:	f7fd ff98 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba7e8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ea:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7ee:	210c      	movs	r1, #12
   ba7f0:	f7fd ff92 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba7f4:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba7f6:	68a8      	ldr	r0, [r5, #8]
   ba7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba7fa:	2110      	movs	r1, #16
   ba7fc:	f7fd ff8c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba800:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba808:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba80a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba80c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba80e:	b17a      	cbz	r2, ba830 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba810:	7819      	ldrb	r1, [r3, #0]
   ba812:	070e      	lsls	r6, r1, #28
   ba814:	d40c      	bmi.n	ba830 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba816:	1d19      	adds	r1, r3, #4
   ba818:	3318      	adds	r3, #24
   ba81a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba81e:	f842 0b04 	str.w	r0, [r2], #4
   ba822:	4299      	cmp	r1, r3
   ba824:	d1f9      	bne.n	ba81a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba828:	7813      	ldrb	r3, [r2, #0]
   ba82a:	f043 0308 	orr.w	r3, r3, #8
   ba82e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba832:	e5c6      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba834:	4a54      	ldr	r2, [pc, #336]	; (ba988 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba836:	4293      	cmp	r3, r2
   ba838:	d151      	bne.n	ba8de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba83a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba83c:	2e00      	cmp	r6, #0
   ba83e:	f43f ad32 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba842:	68a8      	ldr	r0, [r5, #8]
   ba844:	2100      	movs	r1, #0
   ba846:	f7fd ff67 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba84a:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba84c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba84e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba850:	2104      	movs	r1, #4
   ba852:	f7fd ff61 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba856:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba858:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba85a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba85c:	2108      	movs	r1, #8
   ba85e:	f7fd ff5b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba862:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba864:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba866:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba868:	210c      	movs	r1, #12
   ba86a:	f7fd ff55 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba86e:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba870:	68a8      	ldr	r0, [r5, #8]
   ba872:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba874:	2110      	movs	r1, #16
   ba876:	f7fd ff4f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba87a:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba87c:	68a8      	ldr	r0, [r5, #8]
   ba87e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba880:	2114      	movs	r1, #20
   ba882:	f7fd ff49 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba886:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba888:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba88a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba88c:	2118      	movs	r1, #24
   ba88e:	f7fd ff43 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba892:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba894:	68a8      	ldr	r0, [r5, #8]
   ba896:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba898:	211c      	movs	r1, #28
   ba89a:	f7fd ff3d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba89e:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba8a0:	68a8      	ldr	r0, [r5, #8]
   ba8a2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba8a4:	2120      	movs	r1, #32
   ba8a6:	f7fd ff37 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8aa:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba8ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba8b2:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba8b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba8b8:	b17a      	cbz	r2, ba8da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba8ba:	7819      	ldrb	r1, [r3, #0]
   ba8bc:	0708      	lsls	r0, r1, #28
   ba8be:	d40c      	bmi.n	ba8da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba8c0:	1d19      	adds	r1, r3, #4
   ba8c2:	3328      	adds	r3, #40	; 0x28
   ba8c4:	f851 0b04 	ldr.w	r0, [r1], #4
   ba8c8:	f842 0b04 	str.w	r0, [r2], #4
   ba8cc:	4299      	cmp	r1, r3
   ba8ce:	d1f9      	bne.n	ba8c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba8d2:	7813      	ldrb	r3, [r2, #0]
   ba8d4:	f043 0308 	orr.w	r3, r3, #8
   ba8d8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba8da:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba8dc:	e571      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba8de:	4a2b      	ldr	r2, [pc, #172]	; (ba98c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba8e0:	4293      	cmp	r3, r2
   ba8e2:	d155      	bne.n	ba990 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba8e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba8e6:	2b00      	cmp	r3, #0
   ba8e8:	f43f acdd 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba8ec:	688a      	ldr	r2, [r1, #8]
   ba8ee:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba8f0:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba8f2:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba8f4:	68a8      	ldr	r0, [r5, #8]
   ba8f6:	2104      	movs	r1, #4
   ba8f8:	f7fd ff0e 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8fc:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba900:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba902:	2108      	movs	r1, #8
   ba904:	f7fd ff08 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba908:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba90a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba90c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba90e:	210c      	movs	r1, #12
   ba910:	f7fd ff02 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba914:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba916:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba918:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba91a:	2110      	movs	r1, #16
   ba91c:	f7fd fefc 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba920:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba922:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba924:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba926:	7d12      	ldrb	r2, [r2, #20]
   ba928:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba92a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba92e:	7d52      	ldrb	r2, [r2, #21]
   ba930:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba932:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba934:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba936:	7d92      	ldrb	r2, [r2, #22]
   ba938:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba93a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba93c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba93e:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba940:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba942:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba944:	68a8      	ldr	r0, [r5, #8]
   ba946:	2118      	movs	r1, #24
   ba948:	f7fd fee6 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba94c:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba94e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba954:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba956:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba95a:	b17a      	cbz	r2, ba97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba95c:	7819      	ldrb	r1, [r3, #0]
   ba95e:	0709      	lsls	r1, r1, #28
   ba960:	d40c      	bmi.n	ba97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba962:	1d19      	adds	r1, r3, #4
   ba964:	3320      	adds	r3, #32
   ba966:	f851 0b04 	ldr.w	r0, [r1], #4
   ba96a:	f842 0b04 	str.w	r0, [r2], #4
   ba96e:	4299      	cmp	r1, r3
   ba970:	d1f9      	bne.n	ba966 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba972:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba974:	7813      	ldrb	r3, [r2, #0]
   ba976:	f043 0308 	orr.w	r3, r3, #8
   ba97a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba97c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba97e:	e520      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba980:	00140900 	.word	0x00140900
   ba984:	00141100 	.word	0x00141100
   ba988:	00241200 	.word	0x00241200
   ba98c:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba990:	4a30      	ldr	r2, [pc, #192]	; (baa54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba992:	4293      	cmp	r3, r2
   ba994:	d160      	bne.n	baa58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba996:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba998:	2b00      	cmp	r3, #0
   ba99a:	f43f ac84 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba99e:	688a      	ldr	r2, [r1, #8]
   ba9a0:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba9a2:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba9a4:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba9a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba9a8:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba9aa:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba9ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba9ae:	68a8      	ldr	r0, [r5, #8]
   ba9b0:	2104      	movs	r1, #4
   ba9b2:	f7fd feb1 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9b6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba9ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9bc:	2108      	movs	r1, #8
   ba9be:	f7fd feab 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba9c2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba9c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9c8:	210c      	movs	r1, #12
   ba9ca:	f7fd fea5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba9ce:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba9d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9d4:	2110      	movs	r1, #16
   ba9d6:	f7fd fe9f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba9da:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba9de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9e0:	2114      	movs	r1, #20
   ba9e2:	f7fd fe99 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba9e6:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba9e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba9ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba9ec:	7e12      	ldrb	r2, [r2, #24]
   ba9ee:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba9f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba9f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba9f4:	7e52      	ldrb	r2, [r2, #25]
   ba9f6:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba9f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba9fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba9fc:	7e92      	ldrb	r2, [r2, #26]
   ba9fe:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   baa00:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   baa02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa04:	7ed2      	ldrb	r2, [r2, #27]
   baa06:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   baa08:	68a8      	ldr	r0, [r5, #8]
   baa0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   baa0c:	211c      	movs	r1, #28
   baa0e:	f7fd fe83 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa12:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   baa14:	68a8      	ldr	r0, [r5, #8]
   baa16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   baa18:	2120      	movs	r1, #32
   baa1a:	f7fd fe7d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa1e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa26:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baa2c:	b17a      	cbz	r2, baa4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa2e:	7819      	ldrb	r1, [r3, #0]
   baa30:	070f      	lsls	r7, r1, #28
   baa32:	d40c      	bmi.n	baa4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   baa34:	1d19      	adds	r1, r3, #4
   baa36:	3328      	adds	r3, #40	; 0x28
   baa38:	f851 0b04 	ldr.w	r0, [r1], #4
   baa3c:	f842 0b04 	str.w	r0, [r2], #4
   baa40:	4299      	cmp	r1, r3
   baa42:	d1f9      	bne.n	baa38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   baa44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   baa46:	7813      	ldrb	r3, [r2, #0]
   baa48:	f043 0308 	orr.w	r3, r3, #8
   baa4c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   baa4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa50:	e4b7      	b.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baa52:	bf00      	nop
   baa54:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   baa58:	4aa1      	ldr	r2, [pc, #644]	; (bace0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   baa5a:	4293      	cmp	r3, r2
   baa5c:	f040 80f0 	bne.w	bac40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   baa60:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   baa62:	2e00      	cmp	r6, #0
   baa64:	f43f ac1f 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   baa68:	68a8      	ldr	r0, [r5, #8]
   baa6a:	2100      	movs	r1, #0
   baa6c:	f7fd fe54 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa70:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baa72:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   baa74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa76:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   baa78:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baa7a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   baa7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa7e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   baa80:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   baa82:	68a8      	ldr	r0, [r5, #8]
   baa84:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baa86:	2106      	movs	r1, #6
   baa88:	f7fd fe53 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa8c:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa8e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   baa90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa92:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   baa94:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa96:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   baa98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa9a:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   baa9c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa9e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   baaa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baaa2:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   baaa4:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baaa6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   baaa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baaaa:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   baaac:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   baaae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   baab0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baab2:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   baab4:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   baab6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baab8:	68a8      	ldr	r0, [r5, #8]
   baaba:	2110      	movs	r1, #16
   baabc:	f7fd fe2c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baac0:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baac2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   baac4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baac6:	2114      	movs	r1, #20
   baac8:	f7fd fe26 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   baacc:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baace:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   baad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baad2:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   baad4:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baad6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   baad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baada:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   baadc:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baade:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   baae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baae2:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   baae4:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   baae6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   baae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baaea:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   baaec:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaee:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   baaf0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaf2:	211c      	movs	r1, #28
   baaf4:	f7fd fe10 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   baaf8:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baafa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   baafc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baafe:	2120      	movs	r1, #32
   bab00:	f7fd fe0a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   bab04:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab06:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   bab08:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab0a:	2124      	movs	r1, #36	; 0x24
   bab0c:	f7fd fe04 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   bab10:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab12:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   bab14:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab16:	2128      	movs	r1, #40	; 0x28
   bab18:	f7fd fdfe 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   bab1c:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   bab1e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab20:	68a8      	ldr	r0, [r5, #8]
   bab22:	212c      	movs	r1, #44	; 0x2c
   bab24:	f7fd fdf8 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab28:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   bab2a:	68a8      	ldr	r0, [r5, #8]
   bab2c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab2e:	2130      	movs	r1, #48	; 0x30
   bab30:	f7fd fdf2 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab34:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab36:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   bab38:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab3a:	2134      	movs	r1, #52	; 0x34
   bab3c:	f7fd fdec 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   bab40:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab42:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   bab44:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab46:	2138      	movs	r1, #56	; 0x38
   bab48:	f7fd fde6 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   bab4c:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab4e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   bab50:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab52:	213c      	movs	r1, #60	; 0x3c
   bab54:	f7fd fde0 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   bab58:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   bab5c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab5e:	2140      	movs	r1, #64	; 0x40
   bab60:	f7fd fdda 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   bab64:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   bab66:	68a8      	ldr	r0, [r5, #8]
   bab68:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab6a:	2144      	movs	r1, #68	; 0x44
   bab6c:	f7fd fdd4 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab70:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab72:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   bab74:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab76:	2148      	movs	r1, #72	; 0x48
   bab78:	f7fd fdce 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   bab7c:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab7e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   bab80:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab82:	214c      	movs	r1, #76	; 0x4c
   bab84:	f7fd fdc8 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   bab88:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab8a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bab8c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab8e:	2150      	movs	r1, #80	; 0x50
   bab90:	f7fd fdc2 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bab94:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab96:	2154      	movs	r1, #84	; 0x54
   bab98:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   bab9a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab9c:	f7fd fdbc 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   baba0:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   baba2:	68a8      	ldr	r0, [r5, #8]
   baba4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baba6:	2158      	movs	r1, #88	; 0x58
   baba8:	f7fd fdc3 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babac:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   babb0:	68a8      	ldr	r0, [r5, #8]
   babb2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babb4:	215a      	movs	r1, #90	; 0x5a
   babb6:	f7fd fdbc 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babba:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   babbe:	68a8      	ldr	r0, [r5, #8]
   babc0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babc2:	215c      	movs	r1, #92	; 0x5c
   babc4:	f7fd fdb5 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babc8:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   babcc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   babce:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   babd0:	215e      	movs	r1, #94	; 0x5e
   babd2:	f7fd fdae 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   babd6:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   babda:	68a8      	ldr	r0, [r5, #8]
   babdc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babde:	2160      	movs	r1, #96	; 0x60
   babe0:	f7fd fda7 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babe4:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   babe8:	68a8      	ldr	r0, [r5, #8]
   babea:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babec:	2162      	movs	r1, #98	; 0x62
   babee:	f7fd fda0 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babf2:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   babf6:	68a8      	ldr	r0, [r5, #8]
   babf8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babfa:	2164      	movs	r1, #100	; 0x64
   babfc:	f7fd fd8c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac00:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   bac02:	68a8      	ldr	r0, [r5, #8]
   bac04:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac06:	2168      	movs	r1, #104	; 0x68
   bac08:	f7fd fd86 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac0c:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   bac0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bac10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bac14:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   bac16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bac18:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   bac1c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   bac20:	b158      	cbz	r0, bac3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac22:	780b      	ldrb	r3, [r1, #0]
   bac24:	071e      	lsls	r6, r3, #28
   bac26:	d408      	bmi.n	bac3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   bac28:	2274      	movs	r2, #116	; 0x74
   bac2a:	3104      	adds	r1, #4
   bac2c:	f009 fd14 	bl	c4658 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bac30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bac32:	7813      	ldrb	r3, [r2, #0]
   bac34:	f043 0308 	orr.w	r3, r3, #8
   bac38:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   bac3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bac3c:	f7ff bbc1 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   bac40:	4a28      	ldr	r2, [pc, #160]	; (bace4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   bac42:	4293      	cmp	r3, r2
   bac44:	d150      	bne.n	bace8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   bac46:	6a86      	ldr	r6, [r0, #40]	; 0x28
   bac48:	2e00      	cmp	r6, #0
   bac4a:	f43f ab2c 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   bac4e:	68a8      	ldr	r0, [r5, #8]
   bac50:	2100      	movs	r1, #0
   bac52:	f7fd fd61 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac56:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   bac58:	68a8      	ldr	r0, [r5, #8]
   bac5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   bac5c:	2104      	movs	r1, #4
   bac5e:	f7fd fd5b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac62:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac64:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   bac66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac68:	2108      	movs	r1, #8
   bac6a:	f7fd fd55 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   bac6e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   bac70:	68a8      	ldr	r0, [r5, #8]
   bac72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   bac74:	210c      	movs	r1, #12
   bac76:	f7fd fd5c 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac7a:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   bac7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   bac7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac80:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   bac82:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   bac84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   bac86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac88:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   bac8a:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   bac8c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bac8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac90:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bac92:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bac94:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bac96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac98:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bac9a:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   bac9c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   bac9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baca0:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   baca2:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   baca4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baca6:	68aa      	ldr	r2, [r5, #8]
   baca8:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   bacaa:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bacac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bacae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacb2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bacb6:	6a1a      	ldr	r2, [r3, #32]
   bacb8:	b17a      	cbz	r2, bacda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacba:	7819      	ldrb	r1, [r3, #0]
   bacbc:	0708      	lsls	r0, r1, #28
   bacbe:	d40c      	bmi.n	bacda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   bacc0:	1d19      	adds	r1, r3, #4
   bacc2:	3318      	adds	r3, #24
   bacc4:	f851 0b04 	ldr.w	r0, [r1], #4
   bacc8:	f842 0b04 	str.w	r0, [r2], #4
   baccc:	4299      	cmp	r1, r3
   bacce:	d1f9      	bne.n	bacc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   bacd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   bacd2:	7813      	ldrb	r3, [r2, #0]
   bacd4:	f043 0308 	orr.w	r3, r3, #8
   bacd8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   bacda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bacdc:	f7ff bb71 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bace0:	00741700 	.word	0x00741700
   bace4:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   bace8:	4a84      	ldr	r2, [pc, #528]	; (baefc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   bacea:	4293      	cmp	r3, r2
   bacec:	d13a      	bne.n	bad64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   bacee:	6c06      	ldr	r6, [r0, #64]	; 0x40
   bacf0:	2e00      	cmp	r6, #0
   bacf2:	f43f aad8 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   bacf6:	68a8      	ldr	r0, [r5, #8]
   bacf8:	2100      	movs	r1, #0
   bacfa:	f7fd fd0d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacfe:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad00:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bad02:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad04:	2104      	movs	r1, #4
   bad06:	f7fd fd07 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bad0a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad0c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bad0e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad10:	2108      	movs	r1, #8
   bad12:	f7fd fd01 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bad16:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   bad18:	68a8      	ldr	r0, [r5, #8]
   bad1a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bad1c:	210c      	movs	r1, #12
   bad1e:	f7fd fcfb 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad22:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   bad24:	68a8      	ldr	r0, [r5, #8]
   bad26:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bad28:	2110      	movs	r1, #16
   bad2a:	f7fd fcf5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad2e:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bad32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad36:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad38:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bad3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   bad3c:	b17a      	cbz	r2, bad5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad3e:	7819      	ldrb	r1, [r3, #0]
   bad40:	0709      	lsls	r1, r1, #28
   bad42:	d40c      	bmi.n	bad5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   bad44:	1d19      	adds	r1, r3, #4
   bad46:	3318      	adds	r3, #24
   bad48:	f851 0b04 	ldr.w	r0, [r1], #4
   bad4c:	f842 0b04 	str.w	r0, [r2], #4
   bad50:	4299      	cmp	r1, r3
   bad52:	d1f9      	bne.n	bad48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   bad54:	6c22      	ldr	r2, [r4, #64]	; 0x40
   bad56:	7813      	ldrb	r3, [r2, #0]
   bad58:	f043 0308 	orr.w	r3, r3, #8
   bad5c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   bad5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bad60:	f7ff bb2f 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   bad64:	4a66      	ldr	r2, [pc, #408]	; (baf00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   bad66:	4293      	cmp	r3, r2
   bad68:	d138      	bne.n	baddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   bad6a:	6c46      	ldr	r6, [r0, #68]	; 0x44
   bad6c:	2e00      	cmp	r6, #0
   bad6e:	f43f aa9a 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   bad72:	68a8      	ldr	r0, [r5, #8]
   bad74:	2100      	movs	r1, #0
   bad76:	f7fd fccf 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad7a:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bad7c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bad7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bad80:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bad82:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bad84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bad86:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bad88:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bad8a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bad8c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   bad8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bad90:	7a52      	ldrb	r2, [r2, #9]
   bad92:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bad94:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bad96:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bad98:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bad9a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bad9c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   bad9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bada0:	7ad2      	ldrb	r2, [r2, #11]
   bada2:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bada4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bada6:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bada8:	210c      	movs	r1, #12
   badaa:	f7fd fcb5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   badae:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   badb0:	68a8      	ldr	r0, [r5, #8]
   badb2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   badb4:	2110      	movs	r1, #16
   badb6:	f7fd fcbc 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badba:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   badbc:	68a8      	ldr	r0, [r5, #8]
   badbe:	6c66      	ldr	r6, [r4, #68]	; 0x44
   badc0:	2112      	movs	r1, #18
   badc2:	f7fd fcb6 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badc6:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   badc8:	68ab      	ldr	r3, [r5, #8]
   badca:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   badcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   badce:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   badd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   badd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   badd6:	61da      	str	r2, [r3, #28]
   badd8:	f7ff ba65 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   baddc:	4a49      	ldr	r2, [pc, #292]	; (baf04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   badde:	4293      	cmp	r3, r2
   bade0:	d162      	bne.n	baea8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   bade2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   bade4:	2b00      	cmp	r3, #0
   bade6:	f43f aa5e 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   badea:	688a      	ldr	r2, [r1, #8]
   badec:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   badee:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   badf0:	6c86      	ldr	r6, [r0, #72]	; 0x48
   badf2:	68a8      	ldr	r0, [r5, #8]
   badf4:	2104      	movs	r1, #4
   badf6:	f7fd fc8f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badfa:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   badfc:	68a8      	ldr	r0, [r5, #8]
   badfe:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bae00:	2108      	movs	r1, #8
   bae02:	f7fd fc89 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae06:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae08:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bae0a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae0c:	210c      	movs	r1, #12
   bae0e:	f7fd fc83 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bae12:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae14:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bae16:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae18:	2110      	movs	r1, #16
   bae1a:	f7fd fc7d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bae1e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae20:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   bae22:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae24:	2114      	movs	r1, #20
   bae26:	f7fd fc77 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   bae2a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   bae2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   bae2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae30:	7e12      	ldrb	r2, [r2, #24]
   bae32:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   bae34:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   bae36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae38:	7e52      	ldrb	r2, [r2, #25]
   bae3a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   bae3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   bae3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae40:	7e92      	ldrb	r2, [r2, #26]
   bae42:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   bae44:	211c      	movs	r1, #28
   bae46:	68a8      	ldr	r0, [r5, #8]
   bae48:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bae4a:	f7fd fc65 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae4e:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   bae50:	68a8      	ldr	r0, [r5, #8]
   bae52:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bae54:	2120      	movs	r1, #32
   bae56:	f7fd fc5f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae5a:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bae5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   bae5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae60:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   bae64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bae68:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   bae6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae6c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   bae70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bae74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bae7a:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bae80:	b17a      	cbz	r2, baea2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae82:	7819      	ldrb	r1, [r3, #0]
   bae84:	070f      	lsls	r7, r1, #28
   bae86:	d40c      	bmi.n	baea2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   bae88:	1d19      	adds	r1, r3, #4
   bae8a:	332c      	adds	r3, #44	; 0x2c
   bae8c:	f851 0b04 	ldr.w	r0, [r1], #4
   bae90:	f842 0b04 	str.w	r0, [r2], #4
   bae94:	4299      	cmp	r1, r3
   bae96:	d1f9      	bne.n	bae8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   bae98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   bae9a:	7813      	ldrb	r3, [r2, #0]
   bae9c:	f043 0308 	orr.w	r3, r3, #8
   baea0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   baea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baea4:	f7ff ba8d 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   baea8:	784a      	ldrb	r2, [r1, #1]
   baeaa:	2a35      	cmp	r2, #53	; 0x35
   baeac:	d17f      	bne.n	bafae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   baeae:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   baeb0:	2e00      	cmp	r6, #0
   baeb2:	f43f a9f8 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   baeb6:	68a8      	ldr	r0, [r5, #8]
   baeb8:	2100      	movs	r1, #0
   baeba:	f7fd fc2d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baebe:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baec0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baec2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baec4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baec6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baec8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baeca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baecc:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baece:	725a      	strb	r2, [r3, #9]
   baed0:	f04f 0808 	mov.w	r8, #8
   baed4:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baed6:	f04f 0a0c 	mov.w	sl, #12
   baeda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baedc:	7a59      	ldrb	r1, [r3, #9]
   baede:	b2ba      	uxth	r2, r7
   baee0:	4291      	cmp	r1, r2
   baee2:	d811      	bhi.n	baf08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   baee4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baee6:	2201      	movs	r2, #1
   baee8:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baeec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   baeee:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   baef2:	2800      	cmp	r0, #0
   baef4:	d14d      	bne.n	baf92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   baef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baef8:	f7ff ba63 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baefc:	00142200 	.word	0x00142200
   baf00:	00182600 	.word	0x00182600
   baf04:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baf08:	886a      	ldrh	r2, [r5, #2]
   baf0a:	fb0a f607 	mul.w	r6, sl, r7
   baf0e:	3a08      	subs	r2, #8
   baf10:	42b2      	cmp	r2, r6
   baf12:	dde7      	ble.n	baee4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   baf14:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   baf16:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   baf18:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   baf1c:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baf1e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   baf20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baf22:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   baf24:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   baf26:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   baf28:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baf2a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baf2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baf2e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baf30:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   baf32:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baf34:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baf36:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   baf38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baf3a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   baf3c:	4433      	add	r3, r6
   baf3e:	78d2      	ldrb	r2, [r2, #3]
   baf40:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baf42:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baf46:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baf4a:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baf4e:	68a8      	ldr	r0, [r5, #8]
   baf50:	b289      	uxth	r1, r1
   baf52:	f7fd fbee 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baf56:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baf58:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baf5c:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baf60:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baf64:	68a8      	ldr	r0, [r5, #8]
   baf66:	b289      	uxth	r1, r1
   baf68:	f7fd fbe3 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baf6c:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baf6e:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baf72:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baf76:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   baf7a:	68a8      	ldr	r0, [r5, #8]
   baf7c:	b289      	uxth	r1, r1
   baf7e:	f7fd fbcb 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf82:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baf84:	3701      	adds	r7, #1
   baf86:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baf88:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baf8a:	f108 080c 	add.w	r8, r8, #12
   baf8e:	d1a4      	bne.n	baeda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   baf90:	e7a8      	b.n	baee4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf92:	780b      	ldrb	r3, [r1, #0]
   baf94:	071e      	lsls	r6, r3, #28
   baf96:	d4ae      	bmi.n	baef6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   baf98:	f640 32fc 	movw	r2, #3068	; 0xbfc
   baf9c:	3104      	adds	r1, #4
   baf9e:	f009 fb5b 	bl	c4658 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bafa2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   bafa4:	7813      	ldrb	r3, [r2, #0]
   bafa6:	f043 0308 	orr.w	r3, r3, #8
   bafaa:	7013      	strb	r3, [r2, #0]
   bafac:	e7a3      	b.n	baef6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   bafae:	2a3c      	cmp	r2, #60	; 0x3c
   bafb0:	f040 80bf 	bne.w	bb132 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   bafb4:	884a      	ldrh	r2, [r1, #2]
   bafb6:	2a28      	cmp	r2, #40	; 0x28
   bafb8:	d002      	beq.n	bafc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   bafba:	2a40      	cmp	r2, #64	; 0x40
   bafbc:	f040 80b9 	bne.w	bb132 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   bafc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafc2:	2b00      	cmp	r3, #0
   bafc4:	f43f a96f 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bafc8:	68aa      	ldr	r2, [r5, #8]
   bafca:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   bafcc:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   bafce:	68a8      	ldr	r0, [r5, #8]
   bafd0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bafd2:	2102      	movs	r1, #2
   bafd4:	f7fd fbad 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bafd8:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   bafda:	68a8      	ldr	r0, [r5, #8]
   bafdc:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bafde:	2104      	movs	r1, #4
   bafe0:	f7fd fb9a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafe4:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafe6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   bafe8:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafea:	2108      	movs	r1, #8
   bafec:	f7fd fb94 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   baff0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baff2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baff4:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baff6:	210c      	movs	r1, #12
   baff8:	f7fd fb8e 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baffc:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baffe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bb000:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb002:	2110      	movs	r1, #16
   bb004:	f7fd fb88 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bb008:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   bb00a:	886b      	ldrh	r3, [r5, #2]
   bb00c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb00e:	2b28      	cmp	r3, #40	; 0x28
   bb010:	d14b      	bne.n	bb0aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   bb012:	2600      	movs	r6, #0
   bb014:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   bb016:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb018:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   bb01a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   bb01c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb01e:	7d12      	ldrb	r2, [r2, #20]
   bb020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bb024:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   bb026:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb028:	7d52      	ldrb	r2, [r2, #21]
   bb02a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bb02e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bb030:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb032:	7d92      	ldrb	r2, [r2, #22]
   bb034:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bb038:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb03a:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bb03e:	68a8      	ldr	r0, [r5, #8]
   bb040:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb042:	2118      	movs	r1, #24
   bb044:	f7fd fb68 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb048:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bb04a:	68a8      	ldr	r0, [r5, #8]
   bb04c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb04e:	211c      	movs	r1, #28
   bb050:	f7fd fb62 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb054:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bb056:	68a8      	ldr	r0, [r5, #8]
   bb058:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb05a:	2120      	movs	r1, #32
   bb05c:	f7fd fb5c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb060:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bb062:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb064:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bb066:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb068:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bb06a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb06c:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bb06e:	68a8      	ldr	r0, [r5, #8]
   bb070:	f7fd fb52 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb074:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb076:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb07c:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb07e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   bb082:	b17a      	cbz	r2, bb0a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb084:	7819      	ldrb	r1, [r3, #0]
   bb086:	0708      	lsls	r0, r1, #28
   bb088:	d40c      	bmi.n	bb0a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   bb08a:	1d19      	adds	r1, r3, #4
   bb08c:	3344      	adds	r3, #68	; 0x44
   bb08e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb092:	f842 0b04 	str.w	r0, [r2], #4
   bb096:	4299      	cmp	r1, r3
   bb098:	d1f9      	bne.n	bb08e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bb09a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bb09c:	7813      	ldrb	r3, [r2, #0]
   bb09e:	f043 0308 	orr.w	r3, r3, #8
   bb0a2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bb0a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0a6:	f7ff b98c 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0aa:	68a8      	ldr	r0, [r5, #8]
   bb0ac:	2114      	movs	r1, #20
   bb0ae:	f7fd fb33 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   bb0b2:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0b4:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb0b6:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb0b8:	2118      	movs	r1, #24
   bb0ba:	f7fd fb2d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb0be:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bb0c0:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bb0c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0c4:	f892 2020 	ldrb.w	r2, [r2, #32]
   bb0c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bb0cc:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bb0ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0d0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bb0d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bb0d8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bb0da:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0dc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bb0e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bb0e4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bb0e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0e8:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bb0ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bb0f0:	68a8      	ldr	r0, [r5, #8]
   bb0f2:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb0f4:	2124      	movs	r1, #36	; 0x24
   bb0f6:	f7fd fb0f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0fa:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bb0fc:	68a8      	ldr	r0, [r5, #8]
   bb0fe:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb100:	2128      	movs	r1, #40	; 0x28
   bb102:	f7fd fb09 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb106:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bb108:	68a8      	ldr	r0, [r5, #8]
   bb10a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb10c:	212c      	movs	r1, #44	; 0x2c
   bb10e:	f7fd fb03 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb112:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bb114:	68a8      	ldr	r0, [r5, #8]
   bb116:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb118:	2130      	movs	r1, #48	; 0x30
   bb11a:	f7fd fafd 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb11e:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bb120:	2134      	movs	r1, #52	; 0x34
   bb122:	68a8      	ldr	r0, [r5, #8]
   bb124:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb126:	f7fd faf7 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb12a:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bb12c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb12e:	213c      	movs	r1, #60	; 0x3c
   bb130:	e79d      	b.n	bb06e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bb132:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bb136:	d12a      	bne.n	bb18e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bb138:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bb13a:	2e00      	cmp	r6, #0
   bb13c:	f43f a8b3 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bb140:	68a8      	ldr	r0, [r5, #8]
   bb142:	2100      	movs	r1, #0
   bb144:	f7fd fae8 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb148:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb14a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb14c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb14e:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb150:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb152:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb154:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb156:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb158:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb15a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb160:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb162:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb164:	6a1a      	ldr	r2, [r3, #32]
   bb166:	b17a      	cbz	r2, bb188 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb168:	7819      	ldrb	r1, [r3, #0]
   bb16a:	0709      	lsls	r1, r1, #28
   bb16c:	d40c      	bmi.n	bb188 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   bb16e:	1d19      	adds	r1, r3, #4
   bb170:	3314      	adds	r3, #20
   bb172:	f851 0b04 	ldr.w	r0, [r1], #4
   bb176:	f842 0b04 	str.w	r0, [r2], #4
   bb17a:	4299      	cmp	r1, r3
   bb17c:	d1f9      	bne.n	bb172 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb17e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   bb180:	7813      	ldrb	r3, [r2, #0]
   bb182:	f043 0308 	orr.w	r3, r3, #8
   bb186:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb188:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb18a:	f7ff b91a 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bb18e:	4aa1      	ldr	r2, [pc, #644]	; (bb414 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bb190:	4293      	cmp	r3, r2
   bb192:	f47f a888 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   bb196:	69a6      	ldr	r6, [r4, #24]
   bb198:	2e00      	cmp	r6, #0
   bb19a:	f43f a884 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   bb19e:	68a8      	ldr	r0, [r5, #8]
   bb1a0:	2100      	movs	r1, #0
   bb1a2:	f7fd fab9 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1a6:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb1a8:	69a3      	ldr	r3, [r4, #24]
   bb1aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb1ae:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb1b0:	69a3      	ldr	r3, [r4, #24]
   bb1b2:	691a      	ldr	r2, [r3, #16]
   bb1b4:	b14a      	cbz	r2, bb1ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb1b6:	7819      	ldrb	r1, [r3, #0]
   bb1b8:	070f      	lsls	r7, r1, #28
   bb1ba:	d406      	bmi.n	bb1ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   bb1bc:	685b      	ldr	r3, [r3, #4]
   bb1be:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1c0:	69a2      	ldr	r2, [r4, #24]
   bb1c2:	7813      	ldrb	r3, [r2, #0]
   bb1c4:	f043 0308 	orr.w	r3, r3, #8
   bb1c8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bb1ca:	69a3      	ldr	r3, [r4, #24]
   bb1cc:	f7ff b8f9 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bb1d0:	784b      	ldrb	r3, [r1, #1]
   bb1d2:	2b72      	cmp	r3, #114	; 0x72
   bb1d4:	f040 80a4 	bne.w	bb320 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bb1d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb1da:	2b00      	cmp	r3, #0
   bb1dc:	d069      	beq.n	bb2b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bb1de:	689b      	ldr	r3, [r3, #8]
   bb1e0:	2b00      	cmp	r3, #0
   bb1e2:	d066      	beq.n	bb2b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bb1e4:	688a      	ldr	r2, [r1, #8]
   bb1e6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bb1e8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bb1ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb1ec:	68a8      	ldr	r0, [r5, #8]
   bb1ee:	689f      	ldr	r7, [r3, #8]
   bb1f0:	4631      	mov	r1, r6
   bb1f2:	f7fd fa9e 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1f6:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bb1f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb1fa:	68a8      	ldr	r0, [r5, #8]
   bb1fc:	689e      	ldr	r6, [r3, #8]
   bb1fe:	2104      	movs	r1, #4
   bb200:	f7fd fa8a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb204:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bb206:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb208:	68a8      	ldr	r0, [r5, #8]
   bb20a:	689e      	ldr	r6, [r3, #8]
   bb20c:	2108      	movs	r1, #8
   bb20e:	f7fd fa83 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb212:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bb214:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb216:	68a8      	ldr	r0, [r5, #8]
   bb218:	689e      	ldr	r6, [r3, #8]
   bb21a:	210c      	movs	r1, #12
   bb21c:	f7fd fa7c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb220:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bb222:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb224:	68a8      	ldr	r0, [r5, #8]
   bb226:	689e      	ldr	r6, [r3, #8]
   bb228:	2110      	movs	r1, #16
   bb22a:	f7fd fa82 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb22e:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb230:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb232:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb234:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb236:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb238:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb23a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb23c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb23e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb240:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb242:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bb244:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb246:	689e      	ldr	r6, [r3, #8]
   bb248:	7833      	ldrb	r3, [r6, #0]
   bb24a:	bb23      	cbnz	r3, bb296 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bb24c:	68a8      	ldr	r0, [r5, #8]
   bb24e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bb252:	f7fd fa6e 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb256:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb258:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb25a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb25c:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb25e:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb262:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb264:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb266:	689b      	ldr	r3, [r3, #8]
   bb268:	781a      	ldrb	r2, [r3, #0]
   bb26a:	2a00      	cmp	r2, #0
   bb26c:	f040 865d 	bne.w	bbf2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bb270:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb272:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bb276:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb278:	b299      	uxth	r1, r3
   bb27a:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb27c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb27e:	d914      	bls.n	bb2aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bb280:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bb284:	d011      	beq.n	bb2aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bb286:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb288:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bb28a:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb28c:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bb28e:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb290:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb292:	3301      	adds	r3, #1
   bb294:	e7f0      	b.n	bb278 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bb296:	68a8      	ldr	r0, [r5, #8]
   bb298:	2114      	movs	r1, #20
   bb29a:	f7fd fa4a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb29e:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb2a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb2a2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb2a4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb2a6:	7d92      	ldrb	r2, [r2, #22]
   bb2a8:	e7db      	b.n	bb262 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb2aa:	7813      	ldrb	r3, [r2, #0]
   bb2ac:	f043 0308 	orr.w	r3, r3, #8
   bb2b0:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bb2b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2b4:	2b00      	cmp	r3, #0
   bb2b6:	f43e aff6 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb2ba:	689b      	ldr	r3, [r3, #8]
   bb2bc:	2b00      	cmp	r3, #0
   bb2be:	f43e aff2 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bb2c2:	22b5      	movs	r2, #181	; 0xb5
   bb2c4:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bb2c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2c8:	689b      	ldr	r3, [r3, #8]
   bb2ca:	2262      	movs	r2, #98	; 0x62
   bb2cc:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bb2ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2d0:	689b      	ldr	r3, [r3, #8]
   bb2d2:	2202      	movs	r2, #2
   bb2d4:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bb2d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2d8:	689b      	ldr	r3, [r3, #8]
   bb2da:	2272      	movs	r2, #114	; 0x72
   bb2dc:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bb2de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2e0:	886a      	ldrh	r2, [r5, #2]
   bb2e2:	689b      	ldr	r3, [r3, #8]
   bb2e4:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   bb2e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2e8:	689a      	ldr	r2, [r3, #8]
   bb2ea:	886b      	ldrh	r3, [r5, #2]
   bb2ec:	0a1b      	lsrs	r3, r3, #8
   bb2ee:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bb2f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb2f2:	886a      	ldrh	r2, [r5, #2]
   bb2f4:	6898      	ldr	r0, [r3, #8]
   bb2f6:	68a9      	ldr	r1, [r5, #8]
   bb2f8:	3006      	adds	r0, #6
   bb2fa:	f009 f9ad 	bl	c4658 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bb2fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb300:	7b2a      	ldrb	r2, [r5, #12]
   bb302:	689b      	ldr	r3, [r3, #8]
   bb304:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bb308:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb30a:	7b6a      	ldrb	r2, [r5, #13]
   bb30c:	689b      	ldr	r3, [r3, #8]
   bb30e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb312:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb314:	7813      	ldrb	r3, [r2, #0]
   bb316:	f043 0308 	orr.w	r3, r3, #8
   bb31a:	7013      	strb	r3, [r2, #0]
   bb31c:	f7fe bfc3 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bb320:	2b73      	cmp	r3, #115	; 0x73
   bb322:	d14d      	bne.n	bb3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bb324:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bb326:	780b      	ldrb	r3, [r1, #0]
   bb328:	071e      	lsls	r6, r3, #28
   bb32a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb32e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bb332:	d543      	bpl.n	bb3bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bb334:	0843      	lsrs	r3, r0, #1
   bb336:	f47e afb6 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb33a:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bb33c:	f44f 7688 	mov.w	r6, #272	; 0x110
   bb340:	688b      	ldr	r3, [r1, #8]
   bb342:	437e      	muls	r6, r7
   bb344:	22b5      	movs	r2, #181	; 0xb5
   bb346:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bb348:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb34a:	689b      	ldr	r3, [r3, #8]
   bb34c:	4433      	add	r3, r6
   bb34e:	2262      	movs	r2, #98	; 0x62
   bb350:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bb352:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb354:	689b      	ldr	r3, [r3, #8]
   bb356:	4433      	add	r3, r6
   bb358:	2202      	movs	r2, #2
   bb35a:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bb35c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb35e:	689b      	ldr	r3, [r3, #8]
   bb360:	4433      	add	r3, r6
   bb362:	2273      	movs	r2, #115	; 0x73
   bb364:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bb366:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb368:	886a      	ldrh	r2, [r5, #2]
   bb36a:	689b      	ldr	r3, [r3, #8]
   bb36c:	4433      	add	r3, r6
   bb36e:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bb370:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb372:	886a      	ldrh	r2, [r5, #2]
   bb374:	689b      	ldr	r3, [r3, #8]
   bb376:	4433      	add	r3, r6
   bb378:	0a12      	lsrs	r2, r2, #8
   bb37a:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bb37c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb37e:	886a      	ldrh	r2, [r5, #2]
   bb380:	6898      	ldr	r0, [r3, #8]
   bb382:	68a9      	ldr	r1, [r5, #8]
   bb384:	4430      	add	r0, r6
   bb386:	3006      	adds	r0, #6
   bb388:	f009 f966 	bl	c4658 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bb38c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb38e:	7b2a      	ldrb	r2, [r5, #12]
   bb390:	689b      	ldr	r3, [r3, #8]
   bb392:	4433      	add	r3, r6
   bb394:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bb398:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb39a:	7b6a      	ldrb	r2, [r5, #13]
   bb39c:	689b      	ldr	r3, [r3, #8]
   bb39e:	441e      	add	r6, r3
   bb3a0:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bb3a4:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bb3a6:	780b      	ldrb	r3, [r1, #0]
   bb3a8:	2201      	movs	r2, #1
   bb3aa:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb3ae:	40ba      	lsls	r2, r7
   bb3b0:	4302      	orrs	r2, r0
   bb3b2:	f362 03c4 	bfi	r3, r2, #3, #2
   bb3b6:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bb3b8:	f7fe bf75 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb3bc:	4617      	mov	r7, r2
   bb3be:	e7bd      	b.n	bb33c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bb3c0:	2b34      	cmp	r3, #52	; 0x34
   bb3c2:	d129      	bne.n	bb418 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bb3c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb3c6:	2b00      	cmp	r3, #0
   bb3c8:	f43e af6d 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb3cc:	689b      	ldr	r3, [r3, #8]
   bb3ce:	2b00      	cmp	r3, #0
   bb3d0:	f43e af69 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb3d4:	688a      	ldr	r2, [r1, #8]
   bb3d6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bb3d8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb3da:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bb3dc:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb3de:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb3e0:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb3e2:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bb3e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb3e6:	68a8      	ldr	r0, [r5, #8]
   bb3e8:	689e      	ldr	r6, [r3, #8]
   bb3ea:	2104      	movs	r1, #4
   bb3ec:	f7fd f994 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3f0:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bb3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb3f4:	68a8      	ldr	r0, [r5, #8]
   bb3f6:	689e      	ldr	r6, [r3, #8]
   bb3f8:	2108      	movs	r1, #8
   bb3fa:	f7fd f99a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb3fe:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bb400:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb402:	68a8      	ldr	r0, [r5, #8]
   bb404:	689e      	ldr	r6, [r3, #8]
   bb406:	210a      	movs	r1, #10
   bb408:	f7fd f993 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb40c:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb410:	e780      	b.n	bb314 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb412:	bf00      	nop
   bb414:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb418:	2b13      	cmp	r3, #19
   bb41a:	d14a      	bne.n	bb4b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb41c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb41e:	2b00      	cmp	r3, #0
   bb420:	f43e af41 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb424:	688a      	ldr	r2, [r1, #8]
   bb426:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb428:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb42a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb42c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb42e:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb430:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb432:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb434:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb436:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb438:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb43a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb43c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb43e:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb440:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb442:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb444:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb446:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb448:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb44a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb44c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb44e:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb450:	729a      	strb	r2, [r3, #10]
   bb452:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb454:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb456:	7a3a      	ldrb	r2, [r7, #8]
   bb458:	b2f3      	uxtb	r3, r6
   bb45a:	429a      	cmp	r2, r3
   bb45c:	d809      	bhi.n	bb472 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb45e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb460:	2201      	movs	r2, #1
   bb462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb466:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb468:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb46a:	b9a8      	cbnz	r0, bb498 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb46c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb46e:	f7fe bfa8 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb472:	886b      	ldrh	r3, [r5, #2]
   bb474:	3b08      	subs	r3, #8
   bb476:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb47a:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb47e:	ddee      	ble.n	bb45e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb480:	3108      	adds	r1, #8
   bb482:	68a8      	ldr	r0, [r5, #8]
   bb484:	b289      	uxth	r1, r1
   bb486:	f7fd f947 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb48a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb48e:	3601      	adds	r6, #1
   bb490:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb492:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb494:	d1de      	bne.n	bb454 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb496:	e7e2      	b.n	bb45e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb498:	780b      	ldrb	r3, [r1, #0]
   bb49a:	071b      	lsls	r3, r3, #28
   bb49c:	d4e6      	bmi.n	bb46c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb49e:	2248      	movs	r2, #72	; 0x48
   bb4a0:	3104      	adds	r1, #4
   bb4a2:	f009 f8d9 	bl	c4658 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb4a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb4a8:	7813      	ldrb	r3, [r2, #0]
   bb4aa:	f043 0308 	orr.w	r3, r3, #8
   bb4ae:	7013      	strb	r3, [r2, #0]
   bb4b0:	e7dc      	b.n	bb46c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb4b2:	2b15      	cmp	r3, #21
   bb4b4:	f47e aef7 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb4b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb4ba:	2b00      	cmp	r3, #0
   bb4bc:	f43e aef3 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb4c0:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb4c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4c4:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb4c6:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb4c8:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb4ca:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb4cc:	3101      	adds	r1, #1
   bb4ce:	2908      	cmp	r1, #8
   bb4d0:	d1f7      	bne.n	bb4c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb4d2:	68a8      	ldr	r0, [r5, #8]
   bb4d4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb4d6:	f7fd f92c 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb4da:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb4dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb4de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb4e0:	7a92      	ldrb	r2, [r2, #10]
   bb4e2:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb4e4:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb4e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4e8:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb4ea:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb4ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb4ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4f0:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb4f2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb4f4:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb4f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4f8:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb4fa:	73da      	strb	r2, [r3, #15]
   bb4fc:	2610      	movs	r6, #16
   bb4fe:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb500:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb502:	7b51      	ldrb	r1, [r2, #13]
   bb504:	b2da      	uxtb	r2, r3
   bb506:	4291      	cmp	r1, r2
   bb508:	d80b      	bhi.n	bb522 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb50a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb50c:	2201      	movs	r2, #1
   bb50e:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb512:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb514:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb518:	2800      	cmp	r0, #0
   bb51a:	d17f      	bne.n	bb61c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb51c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb51e:	f7fe bf50 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb522:	886a      	ldrh	r2, [r5, #2]
   bb524:	3a10      	subs	r2, #16
   bb526:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb52a:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb52e:	ddec      	ble.n	bb50a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb530:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb532:	46b4      	mov	ip, r6
   bb534:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb536:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb538:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb53a:	4440      	add	r0, r8
   bb53c:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb53e:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb542:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb544:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb546:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb548:	4437      	add	r7, r6
   bb54a:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb54c:	4440      	add	r0, r8
   bb54e:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb550:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb552:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb554:	2a03      	cmp	r2, #3
   bb556:	d80b      	bhi.n	bb570 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb558:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb55a:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb55c:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb560:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb564:	4440      	add	r0, r8
   bb566:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb568:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb56c:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb570:	3201      	adds	r2, #1
   bb572:	2a08      	cmp	r2, #8
   bb574:	f10c 0c01 	add.w	ip, ip, #1
   bb578:	d1dd      	bne.n	bb536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb57a:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb57c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb57e:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb580:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb582:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb586:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb588:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb58a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb58c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb58e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb590:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb594:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb596:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb598:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb59a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb59c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb59e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb5a2:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb5a4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb5a6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb5a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5aa:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb5ac:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb5b0:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb5b2:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb5b4:	3118      	adds	r1, #24
   bb5b6:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb5ba:	68a8      	ldr	r0, [r5, #8]
   bb5bc:	b289      	uxth	r1, r1
   bb5be:	f7fd f8b8 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb5c2:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb5c4:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb5c6:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb5ca:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb5cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5ce:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb5d0:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb5d2:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb5d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb5d8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb5da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5dc:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb5de:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb5e0:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb5e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb5e6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb5e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5ea:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb5ec:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb5ee:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb5f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb5f4:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb5f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5f8:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb5fa:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb5fc:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb5fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb602:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb604:	68aa      	ldr	r2, [r5, #8]
   bb606:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb608:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb60a:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb60c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb610:	f106 0620 	add.w	r6, r6, #32
   bb614:	463b      	mov	r3, r7
   bb616:	f47f af73 	bne.w	bb500 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb61a:	e776      	b.n	bb50a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb61c:	780b      	ldrb	r3, [r1, #0]
   bb61e:	071f      	lsls	r7, r3, #28
   bb620:	f53f af7c 	bmi.w	bb51c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb624:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb628:	3102      	adds	r1, #2
   bb62a:	f009 f815 	bl	c4658 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb62e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb630:	7813      	ldrb	r3, [r2, #0]
   bb632:	f043 0308 	orr.w	r3, r3, #8
   bb636:	7013      	strb	r3, [r2, #0]
   bb638:	e770      	b.n	bb51c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb63a:	680b      	ldr	r3, [r1, #0]
   bb63c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb640:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb644:	d12f      	bne.n	bb6a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb646:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb648:	2b00      	cmp	r3, #0
   bb64a:	f43e ae2c 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb64e:	688a      	ldr	r2, [r1, #8]
   bb650:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb652:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb654:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb656:	68a8      	ldr	r0, [r5, #8]
   bb658:	2102      	movs	r1, #2
   bb65a:	f7fd f86a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb65e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb660:	68a8      	ldr	r0, [r5, #8]
   bb662:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb664:	2104      	movs	r1, #4
   bb666:	f7fd f857 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb66a:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb66c:	68a8      	ldr	r0, [r5, #8]
   bb66e:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb670:	2108      	movs	r1, #8
   bb672:	f7fd f851 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb676:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb678:	68a8      	ldr	r0, [r5, #8]
   bb67a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb67c:	210c      	movs	r1, #12
   bb67e:	f7fd f858 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb682:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb684:	68a8      	ldr	r0, [r5, #8]
   bb686:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb688:	210e      	movs	r1, #14
   bb68a:	f7fd f852 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb68e:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb690:	68a8      	ldr	r0, [r5, #8]
   bb692:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb694:	2110      	movs	r1, #16
   bb696:	f7fd f84c 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb69a:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb69c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb69e:	2201      	movs	r2, #1
   bb6a0:	751a      	strb	r2, [r3, #20]
   bb6a2:	f7fe be00 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb6a6:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb6aa:	f47e adfc 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb6ae:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb6b0:	2e00      	cmp	r6, #0
   bb6b2:	f43e adf8 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb6b6:	68a8      	ldr	r0, [r5, #8]
   bb6b8:	2100      	movs	r1, #0
   bb6ba:	f7fd f83a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb6be:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb6c0:	68a8      	ldr	r0, [r5, #8]
   bb6c2:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb6c4:	2102      	movs	r1, #2
   bb6c6:	f7fd f834 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb6ca:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb6cc:	68a8      	ldr	r0, [r5, #8]
   bb6ce:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb6d0:	2104      	movs	r1, #4
   bb6d2:	f7fd f82e 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb6d6:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb6d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb6de:	609a      	str	r2, [r3, #8]
   bb6e0:	f7fe bde1 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb6e4:	680b      	ldr	r3, [r1, #0]
   bb6e6:	4ab0      	ldr	r2, [pc, #704]	; (bb9a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb6e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb6ec:	4293      	cmp	r3, r2
   bb6ee:	f47e adda 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb6f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb6f4:	2b00      	cmp	r3, #0
   bb6f6:	f43e add6 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb6fa:	688a      	ldr	r2, [r1, #8]
   bb6fc:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb6fe:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb700:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb702:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb704:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb706:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb708:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb70a:	68a8      	ldr	r0, [r5, #8]
   bb70c:	2102      	movs	r1, #2
   bb70e:	f7fd f810 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb712:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb714:	68a8      	ldr	r0, [r5, #8]
   bb716:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb718:	2104      	movs	r1, #4
   bb71a:	f7fd f80a 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb71e:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb720:	68a8      	ldr	r0, [r5, #8]
   bb722:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb724:	2106      	movs	r1, #6
   bb726:	f7fd f804 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb72a:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb72c:	68a8      	ldr	r0, [r5, #8]
   bb72e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb730:	2108      	movs	r1, #8
   bb732:	f7fc fff1 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb736:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb738:	68a8      	ldr	r0, [r5, #8]
   bb73a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb73c:	210c      	movs	r1, #12
   bb73e:	f7fc ffeb 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb742:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb744:	68a8      	ldr	r0, [r5, #8]
   bb746:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb748:	2110      	movs	r1, #16
   bb74a:	f7fc ffe5 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb74e:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb750:	68a8      	ldr	r0, [r5, #8]
   bb752:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb754:	2114      	movs	r1, #20
   bb756:	f7fc ffdf 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb75a:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb75c:	68a8      	ldr	r0, [r5, #8]
   bb75e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb760:	2118      	movs	r1, #24
   bb762:	f7fc ffd9 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb766:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb768:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb76e:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb770:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb774:	b17a      	cbz	r2, bb796 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb776:	7819      	ldrb	r1, [r3, #0]
   bb778:	070e      	lsls	r6, r1, #28
   bb77a:	d40c      	bmi.n	bb796 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb77c:	1d19      	adds	r1, r3, #4
   bb77e:	3320      	adds	r3, #32
   bb780:	f851 0b04 	ldr.w	r0, [r1], #4
   bb784:	f842 0b04 	str.w	r0, [r2], #4
   bb788:	4299      	cmp	r1, r3
   bb78a:	d1f9      	bne.n	bb780 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb78c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb78e:	7813      	ldrb	r3, [r2, #0]
   bb790:	f043 0308 	orr.w	r3, r3, #8
   bb794:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb796:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb798:	f7fe be13 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb79c:	4a83      	ldr	r2, [pc, #524]	; (bb9ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb79e:	4293      	cmp	r3, r2
   bb7a0:	d158      	bne.n	bb854 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb7a2:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb7a6:	2f00      	cmp	r7, #0
   bb7a8:	f43e ad7d 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb7ac:	68a8      	ldr	r0, [r5, #8]
   bb7ae:	2100      	movs	r1, #0
   bb7b0:	f7fc ffb2 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7b4:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb7b6:	68a8      	ldr	r0, [r5, #8]
   bb7b8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb7bc:	2108      	movs	r1, #8
   bb7be:	f7fc ffab 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7c2:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb7c6:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7ca:	210c      	movs	r1, #12
   bb7cc:	f7fc ffa4 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb7d0:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb7d4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7d8:	4631      	mov	r1, r6
   bb7da:	f7fc ff9d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb7de:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7e0:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb7e2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7e6:	2114      	movs	r1, #20
   bb7e8:	f7fc ff96 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb7ec:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7ee:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb7f0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7f4:	2118      	movs	r1, #24
   bb7f6:	f7fc ff8f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb7fa:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb7fe:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb802:	211c      	movs	r1, #28
   bb804:	f7fc ff88 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb808:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb80a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb80c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb810:	2120      	movs	r1, #32
   bb812:	f7fc ff81 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb816:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb818:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb820:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb822:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb828:	b182      	cbz	r2, bb84c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb82a:	7819      	ldrb	r1, [r3, #0]
   bb82c:	0709      	lsls	r1, r1, #28
   bb82e:	d40d      	bmi.n	bb84c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb830:	1d19      	adds	r1, r3, #4
   bb832:	3328      	adds	r3, #40	; 0x28
   bb834:	f851 0b04 	ldr.w	r0, [r1], #4
   bb838:	f842 0b04 	str.w	r0, [r2], #4
   bb83c:	4299      	cmp	r1, r3
   bb83e:	d1f9      	bne.n	bb834 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb840:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb844:	7813      	ldrb	r3, [r2, #0]
   bb846:	f043 0308 	orr.w	r3, r3, #8
   bb84a:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb84c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb850:	f7fe bdb7 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb854:	784b      	ldrb	r3, [r1, #1]
   bb856:	2b02      	cmp	r3, #2
   bb858:	d158      	bne.n	bb90c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb85a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb85e:	2e00      	cmp	r6, #0
   bb860:	f43e ad21 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb864:	68a8      	ldr	r0, [r5, #8]
   bb866:	2100      	movs	r1, #0
   bb868:	f7fc ff56 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb86c:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb86e:	68a8      	ldr	r0, [r5, #8]
   bb870:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb874:	2104      	movs	r1, #4
   bb876:	f7fc ff5c 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb87a:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb87c:	68a8      	ldr	r0, [r5, #8]
   bb87e:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb882:	2106      	movs	r1, #6
   bb884:	f7fc ff55 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb888:	8170      	strh	r0, [r6, #10]
   bb88a:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb88c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb890:	886b      	ldrh	r3, [r5, #2]
   bb892:	7a7a      	ldrb	r2, [r7, #9]
   bb894:	b2b1      	uxth	r1, r6
   bb896:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb89a:	d320      	bcc.n	bb8de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb89c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb8a0:	886a      	ldrh	r2, [r5, #2]
   bb8a2:	7a73      	ldrb	r3, [r6, #9]
   bb8a4:	08db      	lsrs	r3, r3, #3
   bb8a6:	3302      	adds	r3, #2
   bb8a8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb8ac:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb8b0:	d826      	bhi.n	bb900 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb8b2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb8b6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb8ba:	b160      	cbz	r0, bb8d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb8bc:	780b      	ldrb	r3, [r1, #0]
   bb8be:	071a      	lsls	r2, r3, #28
   bb8c0:	d409      	bmi.n	bb8d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb8c2:	2288      	movs	r2, #136	; 0x88
   bb8c4:	3104      	adds	r1, #4
   bb8c6:	f008 fec7 	bl	c4658 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb8ca:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb8ce:	7813      	ldrb	r3, [r2, #0]
   bb8d0:	f043 0308 	orr.w	r3, r3, #8
   bb8d4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb8d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb8da:	f7fe bd72 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb8de:	3b08      	subs	r3, #8
   bb8e0:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb8e4:	ddda      	ble.n	bb89c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb8e6:	0089      	lsls	r1, r1, #2
   bb8e8:	3108      	adds	r1, #8
   bb8ea:	68a8      	ldr	r0, [r5, #8]
   bb8ec:	b289      	uxth	r1, r1
   bb8ee:	f7fc ff13 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8f2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb8f6:	3601      	adds	r6, #1
   bb8f8:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb8fa:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb8fc:	d1c6      	bne.n	bb88c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb8fe:	e7cd      	b.n	bb89c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb900:	68a8      	ldr	r0, [r5, #8]
   bb902:	f7fc ff09 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb906:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb90a:	e7d2      	b.n	bb8b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb90c:	2b03      	cmp	r3, #3
   bb90e:	d14f      	bne.n	bb9b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb910:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb914:	2900      	cmp	r1, #0
   bb916:	f43e acc6 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb91a:	886a      	ldrh	r2, [r5, #2]
   bb91c:	1f13      	subs	r3, r2, #4
   bb91e:	bf48      	it	mi
   bb920:	1cd3      	addmi	r3, r2, #3
   bb922:	10db      	asrs	r3, r3, #3
   bb924:	2700      	movs	r7, #0
   bb926:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb92a:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb92c:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb92e:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb932:	3b04      	subs	r3, #4
   bb934:	42bb      	cmp	r3, r7
   bb936:	dc08      	bgt.n	bb94a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb938:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb93c:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb940:	bb10      	cbnz	r0, bb988 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb942:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb946:	f7fe bd3c 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb94a:	fa1f f887 	uxth.w	r8, r7
   bb94e:	f108 0104 	add.w	r1, r8, #4
   bb952:	68a8      	ldr	r0, [r5, #8]
   bb954:	b289      	uxth	r1, r1
   bb956:	f7fc fedf 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb95a:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb95e:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb962:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb966:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb96a:	68a8      	ldr	r0, [r5, #8]
   bb96c:	b289      	uxth	r1, r1
   bb96e:	f7fc fed3 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb972:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb976:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb978:	3601      	adds	r6, #1
   bb97a:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb97c:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb980:	f107 0708 	add.w	r7, r7, #8
   bb984:	d1d2      	bne.n	bb92c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb986:	e7d7      	b.n	bb938 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb988:	780b      	ldrb	r3, [r1, #0]
   bb98a:	071b      	lsls	r3, r3, #28
   bb98c:	d4d9      	bmi.n	bb942 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb98e:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb992:	3108      	adds	r1, #8
   bb994:	3004      	adds	r0, #4
   bb996:	f008 fe5f 	bl	c4658 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb99a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb99e:	7813      	ldrb	r3, [r2, #0]
   bb9a0:	f043 0308 	orr.w	r3, r3, #8
   bb9a4:	7013      	strb	r3, [r2, #0]
   bb9a6:	e7cc      	b.n	bb942 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb9a8:	001c0300 	.word	0x001c0300
   bb9ac:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb9b0:	2b10      	cmp	r3, #16
   bb9b2:	f47e ac78 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb9b6:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb9ba:	2e00      	cmp	r6, #0
   bb9bc:	f43e ac73 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb9c0:	68a8      	ldr	r0, [r5, #8]
   bb9c2:	2100      	movs	r1, #0
   bb9c4:	f7fc fea8 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9c8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb9ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb9cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9d0:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb9d2:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb9d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb9d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9da:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb9dc:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb9de:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb9e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9e4:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb9e6:	74da      	strb	r2, [r3, #19]
   bb9e8:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb9ea:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb9ee:	7cc6      	ldrb	r6, [r0, #19]
   bb9f0:	b28a      	uxth	r2, r1
   bb9f2:	4296      	cmp	r6, r2
   bb9f4:	d80c      	bhi.n	bba10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb9f6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb9fe:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bba00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bba04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bba06:	bb62      	cbnz	r2, bba62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bba08:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bba0c:	f7fe bcd9 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bba10:	886a      	ldrh	r2, [r5, #2]
   bba12:	3a10      	subs	r2, #16
   bba14:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bba18:	dded      	ble.n	bb9f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bba1a:	68aa      	ldr	r2, [r5, #8]
   bba1c:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bba1e:	1d0a      	adds	r2, r1, #4
   bba20:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bba24:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bba26:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bba28:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bba2a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba2e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bba30:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bba34:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bba36:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bba38:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bba3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba3e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bba40:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bba44:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bba46:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bba48:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bba4a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba4e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bba50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bba54:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bba56:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bba58:	2907      	cmp	r1, #7
   bba5a:	f103 0304 	add.w	r3, r3, #4
   bba5e:	d1c4      	bne.n	bb9ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bba60:	e7c9      	b.n	bb9f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bba62:	7819      	ldrb	r1, [r3, #0]
   bba64:	070f      	lsls	r7, r1, #28
   bba66:	d4cf      	bmi.n	bba08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bba68:	1d19      	adds	r1, r3, #4
   bba6a:	3330      	adds	r3, #48	; 0x30
   bba6c:	f851 0b04 	ldr.w	r0, [r1], #4
   bba70:	f842 0b04 	str.w	r0, [r2], #4
   bba74:	4299      	cmp	r1, r3
   bba76:	d1f9      	bne.n	bba6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bba78:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bba7c:	7813      	ldrb	r3, [r2, #0]
   bba7e:	f043 0308 	orr.w	r3, r3, #8
   bba82:	7013      	strb	r3, [r2, #0]
   bba84:	e7c0      	b.n	bba08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bba86:	680b      	ldr	r3, [r1, #0]
   bba88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bba8c:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bba90:	d16a      	bne.n	bbb68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bba92:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bba96:	2b00      	cmp	r3, #0
   bba98:	f43e ac05 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bba9c:	7818      	ldrb	r0, [r3, #0]
   bba9e:	7859      	ldrb	r1, [r3, #1]
   bbaa0:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bbaa2:	bf36      	itet	cc
   bbaa4:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bbaa8:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bbaaa:	1a52      	subcc	r2, r2, r1
   bbaac:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bbaae:	2a0e      	cmp	r2, #14
   bbab0:	d84b      	bhi.n	bbb4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bbab2:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bbab4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bbab8:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bbaba:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbabc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbac0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbac2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbac4:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbac6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbaca:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbacc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbad0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbad2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbad4:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbad6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbada:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbadc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbae0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbae2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbae4:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbae6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbaea:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbaec:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbaf0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbaf2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbaf4:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbaf6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbafa:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbafc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb00:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbb02:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb04:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbb06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb0a:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb0c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb10:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb12:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb14:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb1a:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbb1c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb20:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbb22:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb24:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbb26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb2a:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bbb2c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bbb30:	7813      	ldrb	r3, [r2, #0]
   bbb32:	3301      	adds	r3, #1
   bbb34:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bbb36:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bbb3a:	781a      	ldrb	r2, [r3, #0]
   bbb3c:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbb3e:	f47e abb2 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bbb42:	2200      	movs	r2, #0
   bbb44:	701a      	strb	r2, [r3, #0]
   bbb46:	f7fe bbae 	b.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb4a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb4e:	b923      	cbnz	r3, bbb5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bbb50:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb54:	2b00      	cmp	r3, #0
   bbb56:	f43e aba6 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bbb5a:	4996      	ldr	r1, [pc, #600]	; (bbdb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbb5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bbb60:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbb64:	f005 bced 	b.w	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bbb68:	784b      	ldrb	r3, [r1, #1]
   bbb6a:	2b80      	cmp	r3, #128	; 0x80
   bbb6c:	f47e ab9b 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bbb70:	884b      	ldrh	r3, [r1, #2]
   bbb72:	2ba4      	cmp	r3, #164	; 0xa4
   bbb74:	f63e ab97 	bhi.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bbb78:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bbb7c:	2a00      	cmp	r2, #0
   bbb7e:	f43e ab92 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bbb82:	7810      	ldrb	r0, [r2, #0]
   bbb84:	7851      	ldrb	r1, [r2, #1]
   bbb86:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbb88:	bf36      	itet	cc
   bbb8a:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bbb8c:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbb8e:	1a5b      	subcc	r3, r3, r1
   bbb90:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bbb92:	2bf8      	cmp	r3, #248	; 0xf8
   bbb94:	d84f      	bhi.n	bbc36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bbb96:	23ac      	movs	r3, #172	; 0xac
   bbb98:	fb03 2200 	mla	r2, r3, r0, r2
   bbb9c:	21b5      	movs	r1, #181	; 0xb5
   bbb9e:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bbba0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbba4:	7811      	ldrb	r1, [r2, #0]
   bbba6:	fb03 2201 	mla	r2, r3, r1, r2
   bbbaa:	2162      	movs	r1, #98	; 0x62
   bbbac:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bbbae:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbbb2:	7811      	ldrb	r1, [r2, #0]
   bbbb4:	fb03 2201 	mla	r2, r3, r1, r2
   bbbb8:	2113      	movs	r1, #19
   bbbba:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bbbbc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbbc0:	7811      	ldrb	r1, [r2, #0]
   bbbc2:	fb03 2201 	mla	r2, r3, r1, r2
   bbbc6:	2180      	movs	r1, #128	; 0x80
   bbbc8:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bbbca:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbbce:	7811      	ldrb	r1, [r2, #0]
   bbbd0:	fb03 2201 	mla	r2, r3, r1, r2
   bbbd4:	8869      	ldrh	r1, [r5, #2]
   bbbd6:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bbbd8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbbdc:	7811      	ldrb	r1, [r2, #0]
   bbbde:	fb03 2201 	mla	r2, r3, r1, r2
   bbbe2:	8869      	ldrh	r1, [r5, #2]
   bbbe4:	0a09      	lsrs	r1, r1, #8
   bbbe6:	71d1      	strb	r1, [r2, #7]
   bbbe8:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bbbea:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbbec:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bbbf0:	b28e      	uxth	r6, r1
   bbbf2:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbbf4:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bbbf6:	d907      	bls.n	bbc08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bbbf8:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbbfa:	fb03 2200 	mla	r2, r3, r0, r2
   bbbfe:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bbc00:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbc02:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bbc04:	3101      	adds	r1, #1
   bbc06:	e7f0      	b.n	bbbea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bbc08:	fb03 2200 	mla	r2, r3, r0, r2
   bbc0c:	7b29      	ldrb	r1, [r5, #12]
   bbc0e:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bbc12:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc16:	7b69      	ldrb	r1, [r5, #13]
   bbc18:	7810      	ldrb	r0, [r2, #0]
   bbc1a:	fb03 2300 	mla	r3, r3, r0, r2
   bbc1e:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bbc22:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc26:	7813      	ldrb	r3, [r2, #0]
   bbc28:	3301      	adds	r3, #1
   bbc2a:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbc2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bbc30:	781a      	ldrb	r2, [r3, #0]
   bbc32:	2afa      	cmp	r2, #250	; 0xfa
   bbc34:	e783      	b.n	bbb3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc36:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc3a:	b923      	cbnz	r3, bbc46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bbc3c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc40:	2b00      	cmp	r3, #0
   bbc42:	f43e ab30 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbc46:	495c      	ldr	r1, [pc, #368]	; (bbdb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bbc48:	e788      	b.n	bbb5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bbc4a:	680b      	ldr	r3, [r1, #0]
   bbc4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bbc50:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bbc54:	f040 80b2 	bne.w	bbdbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bbc58:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bbc5c:	2f00      	cmp	r7, #0
   bbc5e:	f43e ab22 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bbc62:	68a8      	ldr	r0, [r5, #8]
   bbc64:	2100      	movs	r1, #0
   bbc66:	f7fc fd57 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbc6a:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bbc6c:	68a8      	ldr	r0, [r5, #8]
   bbc6e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bbc72:	2104      	movs	r1, #4
   bbc74:	f7fc fd5d 	bl	b8732 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bbc78:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bbc7a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbc7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc80:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbc82:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bbc84:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbc86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc8a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbc8c:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bbc8e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbc90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc94:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbc96:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bbc98:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbc9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc9e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbca0:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bbca2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbca4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbca8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbcaa:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bbcac:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbcae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbcb2:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbcb4:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcb6:	210c      	movs	r1, #12
   bbcb8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbcba:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcbe:	f7fc fd2b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbcc2:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bbcc4:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbcc6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbcca:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbccc:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bbcce:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbcd0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbcd4:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbcd6:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcd8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbcda:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcde:	2114      	movs	r1, #20
   bbce0:	f7fc fd1a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbce4:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbce6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbce8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcec:	2118      	movs	r1, #24
   bbcee:	f7fc fd13 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbcf2:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcf4:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbcf6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcfa:	211c      	movs	r1, #28
   bbcfc:	f7fc fd0c 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbd00:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd02:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbd04:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd08:	2120      	movs	r1, #32
   bbd0a:	f7fc fd05 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbd0e:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd10:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbd12:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd16:	2124      	movs	r1, #36	; 0x24
   bbd18:	f7fc fcfe 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbd1c:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd1e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbd20:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd24:	4631      	mov	r1, r6
   bbd26:	f7fc fcf7 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbd2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd2c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbd2e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd32:	212c      	movs	r1, #44	; 0x2c
   bbd34:	f7fc fcf0 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbd38:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd3a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbd3c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd40:	2130      	movs	r1, #48	; 0x30
   bbd42:	f7fc fce9 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbd46:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bbd48:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbd4c:	68a8      	ldr	r0, [r5, #8]
   bbd4e:	2134      	movs	r1, #52	; 0x34
   bbd50:	f7fc fce2 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd54:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bbd56:	68a8      	ldr	r0, [r5, #8]
   bbd58:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbd5c:	2138      	movs	r1, #56	; 0x38
   bbd5e:	f7fc fcdb 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd62:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bbd64:	68a8      	ldr	r0, [r5, #8]
   bbd66:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbd6a:	213c      	movs	r1, #60	; 0x3c
   bbd6c:	f7fc fcd4 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd70:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bbd72:	68a8      	ldr	r0, [r5, #8]
   bbd74:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbd78:	2140      	movs	r1, #64	; 0x40
   bbd7a:	f7fc fccd 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd7e:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbd80:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbd88:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbd8a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bbd8e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bbd90:	b160      	cbz	r0, bbdac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbd92:	780b      	ldrb	r3, [r1, #0]
   bbd94:	071e      	lsls	r6, r3, #28
   bbd96:	d409      	bmi.n	bbdac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bbd98:	2248      	movs	r2, #72	; 0x48
   bbd9a:	3104      	adds	r1, #4
   bbd9c:	f008 fc5c 	bl	c4658 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbda0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bbda4:	7813      	ldrb	r3, [r2, #0]
   bbda6:	f043 0308 	orr.w	r3, r3, #8
   bbdaa:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bbdac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbdb0:	f7fe bb07 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bbdb4:	000c7289 	.word	0x000c7289
   bbdb8:	000c72c6 	.word	0x000c72c6
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bbdbc:	4a5d      	ldr	r2, [pc, #372]	; (bbf34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bbdbe:	4293      	cmp	r3, r2
   bbdc0:	d156      	bne.n	bbe70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bbdc2:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bbdc6:	2e00      	cmp	r6, #0
   bbdc8:	f43e aa6d 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bbdcc:	68a8      	ldr	r0, [r5, #8]
   bbdce:	2100      	movs	r1, #0
   bbdd0:	f7fc fca2 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbdd4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bbdd6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbdd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bbddc:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbdde:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbde0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbde2:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbde6:	2108      	movs	r1, #8
   bbde8:	f7fc fc96 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbdec:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdee:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbdf0:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdf4:	210c      	movs	r1, #12
   bbdf6:	f7fc fc8f 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbdfa:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdfc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbdfe:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe02:	2110      	movs	r1, #16
   bbe04:	f7fc fc88 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbe08:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bbe0a:	68a8      	ldr	r0, [r5, #8]
   bbe0c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbe10:	2114      	movs	r1, #20
   bbe12:	f7fc fc81 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe16:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bbe18:	68a8      	ldr	r0, [r5, #8]
   bbe1a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbe1e:	2118      	movs	r1, #24
   bbe20:	f7fc fc7a 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe24:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bbe26:	68a8      	ldr	r0, [r5, #8]
   bbe28:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbe2c:	211c      	movs	r1, #28
   bbe2e:	f7fc fc73 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe32:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbe34:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbe38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbe3c:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbe3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbe42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bbe44:	b182      	cbz	r2, bbe68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbe46:	7819      	ldrb	r1, [r3, #0]
   bbe48:	0708      	lsls	r0, r1, #28
   bbe4a:	d40d      	bmi.n	bbe68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bbe4c:	1d19      	adds	r1, r3, #4
   bbe4e:	3324      	adds	r3, #36	; 0x24
   bbe50:	f851 0b04 	ldr.w	r0, [r1], #4
   bbe54:	f842 0b04 	str.w	r0, [r2], #4
   bbe58:	4299      	cmp	r1, r3
   bbe5a:	d1f9      	bne.n	bbe50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbe5c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bbe60:	7813      	ldrb	r3, [r2, #0]
   bbe62:	f043 0308 	orr.w	r3, r3, #8
   bbe66:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bbe68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbe6c:	f7fe baa9 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bbe70:	4a31      	ldr	r2, [pc, #196]	; (bbf38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bbe72:	4293      	cmp	r3, r2
   bbe74:	f47e aa17 	bne.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bbe78:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bbe7c:	2e00      	cmp	r6, #0
   bbe7e:	f43e aa12 	beq.w	ba2a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bbe82:	68a8      	ldr	r0, [r5, #8]
   bbe84:	2100      	movs	r1, #0
   bbe86:	f7fc fc47 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe8a:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bbe8c:	68a8      	ldr	r0, [r5, #8]
   bbe8e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bbe92:	2108      	movs	r1, #8
   bbe94:	f7fc fc40 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe98:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe9a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbe9c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbea0:	210c      	movs	r1, #12
   bbea2:	f7fc fc39 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbea6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbea8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbeaa:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbeae:	2110      	movs	r1, #16
   bbeb0:	f7fc fc32 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbeb4:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbeb6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbeb8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbebc:	2114      	movs	r1, #20
   bbebe:	f7fc fc2b 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbec2:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbec4:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbec6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbeca:	2118      	movs	r1, #24
   bbecc:	f7fc fc24 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbed0:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbed2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbed4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbed8:	211c      	movs	r1, #28
   bbeda:	f7fc fc1d 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbede:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbee0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbee2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbee6:	2120      	movs	r1, #32
   bbee8:	f7fc fc16 	bl	b8718 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbeec:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbeee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbef6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbef8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbefc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbefe:	b182      	cbz	r2, bbf22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbf00:	7819      	ldrb	r1, [r3, #0]
   bbf02:	0709      	lsls	r1, r1, #28
   bbf04:	d40d      	bmi.n	bbf22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbf06:	1d19      	adds	r1, r3, #4
   bbf08:	3328      	adds	r3, #40	; 0x28
   bbf0a:	f851 0b04 	ldr.w	r0, [r1], #4
   bbf0e:	f842 0b04 	str.w	r0, [r2], #4
   bbf12:	4299      	cmp	r1, r3
   bbf14:	d1f9      	bne.n	bbf0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbf16:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbf1a:	7813      	ldrb	r3, [r2, #0]
   bbf1c:	f043 0308 	orr.w	r3, r3, #8
   bbf20:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbf22:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbf26:	f7fe ba4c 	b.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbf2a:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbf2c:	2018      	movs	r0, #24
   bbf2e:	f7ff b9a2 	b.w	bb276 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbf32:	bf00      	nop
   bbf34:	00200100 	.word	0x00200100
   bbf38:	00240200 	.word	0x00240200

000bbf3c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbf40:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbf42:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbf46:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbf4a:	4604      	mov	r4, r0
   bbf4c:	460f      	mov	r7, r1
   bbf4e:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbf50:	b993      	cbnz	r3, bbf78 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbf52:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbf56:	886b      	ldrh	r3, [r5, #2]
   bbf58:	88aa      	ldrh	r2, [r5, #4]
   bbf5a:	3303      	adds	r3, #3
   bbf5c:	4293      	cmp	r3, r2
   bbf5e:	db03      	blt.n	bbf68 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbf60:	4639      	mov	r1, r7
   bbf62:	4620      	mov	r0, r4
   bbf64:	f7fd fdf0 	bl	b9b48 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbf68:	88ae      	ldrh	r6, [r5, #4]
   bbf6a:	bb7e      	cbnz	r6, bbfcc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbf6c:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbf6e:	88ab      	ldrh	r3, [r5, #4]
   bbf70:	3301      	adds	r3, #1
   bbf72:	80ab      	strh	r3, [r5, #4]
}
   bbf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbf78:	2b03      	cmp	r3, #3
   bbf7a:	d124      	bne.n	bbfc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbf7c:	7852      	ldrb	r2, [r2, #1]
   bbf7e:	7829      	ldrb	r1, [r5, #0]
   bbf80:	f7fc fdda 	bl	b8b38 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bbf84:	4680      	mov	r8, r0
   bbf86:	2800      	cmp	r0, #0
   bbf88:	d1e5      	bne.n	bbf56 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf8a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf8e:	b91b      	cbnz	r3, bbf98 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bbf90:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf94:	2b00      	cmp	r3, #0
   bbf96:	d0de      	beq.n	bbf56 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbf98:	49b7      	ldr	r1, [pc, #732]	; (bc278 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bbf9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf9e:	f005 fab6 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bbfa2:	7829      	ldrb	r1, [r5, #0]
   bbfa4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa8:	220a      	movs	r2, #10
   bbfaa:	f7fc fbd5 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bbfae:	49b3      	ldr	r1, [pc, #716]	; (bc27c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbfb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfb4:	f005 faab 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bbfb8:	7869      	ldrb	r1, [r5, #1]
   bbfba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfbe:	220a      	movs	r2, #10
   bbfc0:	f7fc fbd1 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbfc4:	e7c7      	b.n	bbf56 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bbfc6:	f04f 0802 	mov.w	r8, #2
   bbfca:	e7c4      	b.n	bbf56 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bbfcc:	2e01      	cmp	r6, #1
   bbfce:	d101      	bne.n	bbfd4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bbfd0:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbfd2:	e7cc      	b.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bbfd4:	2e02      	cmp	r6, #2
   bbfd6:	d101      	bne.n	bbfdc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bbfd8:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbfda:	e7c8      	b.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bbfdc:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bbfde:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bbfe0:	d103      	bne.n	bbfea <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bbfe2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bbfe6:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbfe8:	e7c1      	b.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bbfea:	1d0b      	adds	r3, r1, #4
   bbfec:	429e      	cmp	r6, r3
   bbfee:	d136      	bne.n	bc05e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bbff0:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbff2:	88aa      	ldrh	r2, [r5, #4]
   bbff4:	f108 0306 	add.w	r3, r8, #6
   bbff8:	429a      	cmp	r2, r3
   bbffa:	d1b8      	bne.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bbffc:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bc000:	2b00      	cmp	r3, #0
   bc002:	d1b4      	bne.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bc004:	2200      	movs	r2, #0
   bc006:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc008:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bc00c:	b91a      	cbnz	r2, bc016 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bc00e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bc012:	2a00      	cmp	r2, #0
   bc014:	d0ab      	beq.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bc016:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bc01a:	2b00      	cmp	r3, #0
   bc01c:	f000 8170 	beq.w	bc300 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bc020:	4997      	ldr	r1, [pc, #604]	; (bc280 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc022:	f005 fa74 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bc026:	4997      	ldr	r1, [pc, #604]	; (bc284 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bc028:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc02c:	f005 fa6f 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc030:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bc034:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc038:	220a      	movs	r2, #10
   bc03a:	f005 fa84 	bl	c1546 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bc03e:	4992      	ldr	r1, [pc, #584]	; (bc288 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bc040:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc044:	f005 fa63 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bc048:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bc04c:	220a      	movs	r2, #10
   bc04e:	4641      	mov	r1, r8
   bc050:	4620      	mov	r0, r4
   bc052:	f005 fa78 	bl	c1546 <_ZN5Print11printNumberEmh>
        n += println();
   bc056:	4620      	mov	r0, r4
   bc058:	f005 fa5d 	bl	c1516 <_ZN5Print7printlnEv>
        return n;
   bc05c:	e787      	b.n	bbf6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bc05e:	3105      	adds	r1, #5
   bc060:	428e      	cmp	r6, r1
   bc062:	f040 812f 	bne.w	bc2c4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bc066:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bc068:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bc06a:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bc06c:	89a9      	ldrh	r1, [r5, #12]
   bc06e:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bc072:	4291      	cmp	r1, r2
   bc074:	f040 80ae 	bne.w	bc1d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bc078:	2301      	movs	r3, #1
   bc07a:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bc07c:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bc080:	7829      	ldrb	r1, [r5, #0]
   bc082:	4549      	cmp	r1, r9
   bc084:	d155      	bne.n	bc132 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bc086:	786b      	ldrb	r3, [r5, #1]
   bc088:	4553      	cmp	r3, sl
   bc08a:	d152      	bne.n	bc132 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bc08c:	2301      	movs	r3, #1
   bc08e:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bc090:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc094:	b3b3      	cbz	r3, bc104 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bc096:	497d      	ldr	r1, [pc, #500]	; (bc28c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bc098:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc09c:	f005 fa37 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc0a0:	220a      	movs	r2, #10
   bc0a2:	8869      	ldrh	r1, [r5, #2]
   bc0a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0a8:	f005 fa4d 	bl	c1546 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bc0ac:	4978      	ldr	r1, [pc, #480]	; (bc290 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bc0ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0b2:	f005 fa2c 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bc0b6:	2200      	movs	r2, #0
   bc0b8:	4629      	mov	r1, r5
   bc0ba:	4620      	mov	r0, r4
   bc0bc:	f7fd ff50 	bl	b9f60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc0c0:	7bab      	ldrb	r3, [r5, #14]
   bc0c2:	2b01      	cmp	r3, #1
   bc0c4:	d104      	bne.n	bc0d0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bc0c6:	4973      	ldr	r1, [pc, #460]	; (bc294 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bc0c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0cc:	f005 fa39 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc0d0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bc0d4:	2b01      	cmp	r3, #1
   bc0d6:	d104      	bne.n	bc0e2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bc0d8:	496f      	ldr	r1, [pc, #444]	; (bc298 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bc0da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0de:	f005 fa30 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc0e2:	7beb      	ldrb	r3, [r5, #15]
   bc0e4:	2b01      	cmp	r3, #1
   bc0e6:	d104      	bne.n	bc0f2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bc0e8:	496c      	ldr	r1, [pc, #432]	; (bc29c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bc0ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0ee:	f005 fa28 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc0f2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bc0f6:	2b01      	cmp	r3, #1
   bc0f8:	d104      	bne.n	bc104 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bc0fa:	4969      	ldr	r1, [pc, #420]	; (bc2a0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bc0fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc100:	f005 fa1f 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bc104:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bc108:	b91b      	cbnz	r3, bc112 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bc10a:	4629      	mov	r1, r5
   bc10c:	4620      	mov	r0, r4
   bc10e:	f7fe f8b9 	bl	ba284 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bc112:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc116:	2b03      	cmp	r3, #3
   bc118:	f47f af6b 	bne.w	bbff2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bc11c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc120:	b108      	cbz	r0, bc126 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bc122:	f7f7 ffbc 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bc126:	2300      	movs	r3, #0
   bc128:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bc12c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc130:	e75f      	b.n	bbff2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc132:	882b      	ldrh	r3, [r5, #0]
   bc134:	f240 1205 	movw	r2, #261	; 0x105
   bc138:	4293      	cmp	r3, r2
   bc13a:	d123      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bc13c:	68ab      	ldr	r3, [r5, #8]
   bc13e:	781a      	ldrb	r2, [r3, #0]
   bc140:	454a      	cmp	r2, r9
   bc142:	d102      	bne.n	bc14a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc144:	785b      	ldrb	r3, [r3, #1]
   bc146:	4553      	cmp	r3, sl
   bc148:	d0a0      	beq.n	bc08c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc14a:	786a      	ldrb	r2, [r5, #1]
   bc14c:	4620      	mov	r0, r4
   bc14e:	f7fc fbf1 	bl	b8934 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc152:	2800      	cmp	r0, #0
   bc154:	d09c      	beq.n	bc090 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bc156:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc15a:	2b00      	cmp	r3, #0
   bc15c:	d0d2      	beq.n	bc104 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bc15e:	4951      	ldr	r1, [pc, #324]	; (bc2a4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bc160:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc164:	f005 f9d3 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bc168:	2210      	movs	r2, #16
   bc16a:	7829      	ldrb	r1, [r5, #0]
   bc16c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc170:	f7fc faf2 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc174:	4941      	ldr	r1, [pc, #260]	; (bc27c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bc176:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc17a:	f005 f9c8 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bc17e:	7869      	ldrb	r1, [r5, #1]
   bc180:	2210      	movs	r2, #16
   bc182:	e022      	b.n	bc1ca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc184:	2b05      	cmp	r3, #5
   bc186:	d1e0      	bne.n	bc14a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc188:	68ab      	ldr	r3, [r5, #8]
   bc18a:	781a      	ldrb	r2, [r3, #0]
   bc18c:	454a      	cmp	r2, r9
   bc18e:	d1dc      	bne.n	bc14a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc190:	785b      	ldrb	r3, [r3, #1]
   bc192:	4553      	cmp	r3, sl
   bc194:	d1d9      	bne.n	bc14a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bc196:	2303      	movs	r3, #3
   bc198:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bc19a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc19e:	2b00      	cmp	r3, #0
   bc1a0:	d0b0      	beq.n	bc104 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bc1a2:	4941      	ldr	r1, [pc, #260]	; (bc2a8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bc1a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1a8:	f005 f9b1 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bc1ac:	68ab      	ldr	r3, [r5, #8]
   bc1ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1b2:	7819      	ldrb	r1, [r3, #0]
   bc1b4:	2210      	movs	r2, #16
   bc1b6:	f7fc facf 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bc1ba:	493c      	ldr	r1, [pc, #240]	; (bc2ac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bc1bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1c0:	f005 f9a5 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bc1c4:	68ab      	ldr	r3, [r5, #8]
   bc1c6:	7859      	ldrb	r1, [r3, #1]
   bc1c8:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bc1ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1ce:	f7fc faca 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc1d2:	e75d      	b.n	bc090 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bc1d4:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bc1d6:	782b      	ldrb	r3, [r5, #0]
   bc1d8:	454b      	cmp	r3, r9
   bc1da:	d143      	bne.n	bc264 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bc1dc:	786a      	ldrb	r2, [r5, #1]
   bc1de:	4552      	cmp	r2, sl
   bc1e0:	d140      	bne.n	bc264 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bc1e2:	2300      	movs	r3, #0
   bc1e4:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc1e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1ea:	b91b      	cbnz	r3, bc1f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bc1ec:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc1f0:	2b00      	cmp	r3, #0
   bc1f2:	d08e      	beq.n	bc112 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bc1f4:	492e      	ldr	r1, [pc, #184]	; (bc2b0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bc1f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1fa:	f005 f988 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bc1fe:	492d      	ldr	r1, [pc, #180]	; (bc2b4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bc200:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc204:	f005 f983 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bc208:	7b29      	ldrb	r1, [r5, #12]
   bc20a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc20e:	220a      	movs	r2, #10
   bc210:	f7fc faa2 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bc214:	4928      	ldr	r1, [pc, #160]	; (bc2b8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bc216:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc21a:	f005 f978 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bc21e:	7b69      	ldrb	r1, [r5, #13]
   bc220:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc224:	220a      	movs	r2, #10
   bc226:	f7fc fa97 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bc22a:	4924      	ldr	r1, [pc, #144]	; (bc2bc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bc22c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc230:	f005 f96d 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bc234:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bc238:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc23c:	220a      	movs	r2, #10
   bc23e:	f7fc fa8b 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bc242:	491f      	ldr	r1, [pc, #124]	; (bc2c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bc244:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc248:	f005 f961 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bc24c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc250:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bc254:	220a      	movs	r2, #10
   bc256:	f7fc fa7f 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bc25a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc25e:	f005 f95a 	bl	c1516 <_ZN5Print7printlnEv>
   bc262:	e756      	b.n	bc112 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc264:	2b05      	cmp	r3, #5
   bc266:	d1be      	bne.n	bc1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc268:	68ab      	ldr	r3, [r5, #8]
   bc26a:	781a      	ldrb	r2, [r3, #0]
   bc26c:	454a      	cmp	r2, r9
   bc26e:	d1ba      	bne.n	bc1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc270:	785b      	ldrb	r3, [r3, #1]
   bc272:	4553      	cmp	r3, sl
   bc274:	d1b7      	bne.n	bc1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc276:	e7b4      	b.n	bc1e2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bc278:	000c7308 	.word	0x000c7308
   bc27c:	000c7379 	.word	0x000c7379
   bc280:	000c7481 	.word	0x000c7481
   bc284:	000c74d8 	.word	0x000c74d8
   bc288:	000c74ee 	.word	0x000c74ee
   bc28c:	000c73b5 	.word	0x000c73b5
   bc290:	000c73c6 	.word	0x000c73c6
   bc294:	000c73d2 	.word	0x000c73d2
   bc298:	000c73e6 	.word	0x000c73e6
   bc29c:	000c73fa 	.word	0x000c73fa
   bc2a0:	000c7414 	.word	0x000c7414
   bc2a4:	000c7381 	.word	0x000c7381
   bc2a8:	000c7340 	.word	0x000c7340
   bc2ac:	000c736f 	.word	0x000c736f
   bc2b0:	000c742e 	.word	0x000c742e
   bc2b4:	000c743f 	.word	0x000c743f
   bc2b8:	000c744c 	.word	0x000c744c
   bc2bc:	000c7459 	.word	0x000c7459
   bc2c0:	000c746d 	.word	0x000c746d
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc2c4:	786a      	ldrb	r2, [r5, #1]
   bc2c6:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bc2c8:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc2cc:	4620      	mov	r0, r4
   bc2ce:	f7fc fb31 	bl	b8934 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bc2d2:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bc2d6:	2800      	cmp	r0, #0
   bc2d8:	bf18      	it	ne
   bc2da:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bc2de:	2b00      	cmp	r3, #0
   bc2e0:	f47f ae87 	bne.w	bbff2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bc2e4:	1ef3      	subs	r3, r6, #3
   bc2e6:	454b      	cmp	r3, r9
   bc2e8:	f77f ae83 	ble.w	bbff2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bc2ec:	3e04      	subs	r6, #4
   bc2ee:	eba6 0609 	sub.w	r6, r6, r9
   bc2f2:	4546      	cmp	r6, r8
   bc2f4:	da02      	bge.n	bc2fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bc2f6:	68ab      	ldr	r3, [r5, #8]
   bc2f8:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc2fa:	e67a      	b.n	bbff2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bc2fc:	2301      	movs	r3, #1
   bc2fe:	e681      	b.n	bc004 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc300:	4900      	ldr	r1, [pc, #0]	; (bc304 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bc302:	e68e      	b.n	bc022 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bc304:	000c74a6 	.word	0x000c74a6

000bc308 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bc308:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc30a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bc30e:	4604      	mov	r4, r0
   bc310:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc312:	b113      	cbz	r3, bc31a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bc314:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bc318:	b953      	cbnz	r3, bc330 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bc31a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bc31e:	b128      	cbz	r0, bc32c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bc320:	490e      	ldr	r1, [pc, #56]	; (bc35c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc322:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc326:	f005 f90c 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bc32a:	2000      	movs	r0, #0
}
   bc32c:	b003      	add	sp, #12
   bc32e:	bd30      	pop	{r4, r5, pc}
   bc330:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bc332:	f7fd ff12 	bl	ba15a <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bc336:	4285      	cmp	r5, r0
   bc338:	9901      	ldr	r1, [sp, #4]
   bc33a:	d908      	bls.n	bc34e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc33c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc340:	b91b      	cbnz	r3, bc34a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bc342:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc346:	2800      	cmp	r0, #0
   bc348:	d0f0      	beq.n	bc32c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc34a:	4905      	ldr	r1, [pc, #20]	; (bc360 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bc34c:	e7e9      	b.n	bc322 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bc34e:	4620      	mov	r0, r4
   bc350:	462a      	mov	r2, r5
   bc352:	f7fd ff0b 	bl	ba16c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bc356:	2001      	movs	r0, #1
   bc358:	e7e8      	b.n	bc32c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bc35a:	bf00      	nop
   bc35c:	000c7506 	.word	0x000c7506
   bc360:	000c7531 	.word	0x000c7531

000bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bc364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc368:	4604      	mov	r4, r0
   bc36a:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bc36c:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bc370:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bc374:	f88d 100f 	strb.w	r1, [sp, #15]
   bc378:	4615      	mov	r5, r2
   bc37a:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bc37c:	b118      	cbz	r0, bc386 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bc37e:	6803      	ldr	r3, [r0, #0]
   bc380:	b2c9      	uxtb	r1, r1
   bc382:	689b      	ldr	r3, [r3, #8]
   bc384:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bc386:	7823      	ldrb	r3, [r4, #0]
   bc388:	2b01      	cmp	r3, #1
   bc38a:	d80e      	bhi.n	bc3aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc38c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc390:	2bb5      	cmp	r3, #181	; 0xb5
   bc392:	d12e      	bne.n	bc3f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bc394:	2300      	movs	r3, #0
   bc396:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc39a:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bc39c:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc3a0:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc3a4:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc3a6:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bc3aa:	7826      	ldrb	r6, [r4, #0]
   bc3ac:	2e02      	cmp	r6, #2
   bc3ae:	f040 81d5 	bne.w	bc75c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bc3b2:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc3b6:	bb5b      	cbnz	r3, bc410 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bc3b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc3bc:	2bb5      	cmp	r3, #181	; 0xb5
   bc3be:	d001      	beq.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bc3c0:	2300      	movs	r3, #0
   bc3c2:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc3c4:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc3c8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc3cc:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc3d0:	2b01      	cmp	r3, #1
   bc3d2:	f040 81a3 	bne.w	bc71c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc3d6:	463b      	mov	r3, r7
   bc3d8:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc3dc:	4620      	mov	r0, r4
   bc3de:	f7ff fdad 	bl	bbf3c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bc3e2:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc3e6:	3301      	adds	r3, #1
   bc3e8:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bc3ec:	b005      	add	sp, #20
   bc3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bc3f2:	2b24      	cmp	r3, #36	; 0x24
   bc3f4:	d105      	bne.n	bc402 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bc3f6:	2300      	movs	r3, #0
   bc3f8:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bc3fc:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc3fe:	7023      	strb	r3, [r4, #0]
   bc400:	e7d3      	b.n	bc3aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bc402:	2bd3      	cmp	r3, #211	; 0xd3
   bc404:	d1d1      	bne.n	bc3aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bc406:	2300      	movs	r3, #0
   bc408:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc40c:	2303      	movs	r3, #3
   bc40e:	e7f6      	b.n	bc3fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc410:	2b01      	cmp	r3, #1
   bc412:	d103      	bne.n	bc41c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc414:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc418:	2b62      	cmp	r3, #98	; 0x62
   bc41a:	e7d0      	b.n	bc3be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc41c:	2b02      	cmp	r3, #2
   bc41e:	d10e      	bne.n	bc43e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc420:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc424:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc428:	2200      	movs	r2, #0
   bc42a:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc42e:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc432:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc436:	88eb      	ldrh	r3, [r5, #6]
   bc438:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc43c:	e7c2      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc43e:	2b03      	cmp	r3, #3
   bc440:	f040 80b7 	bne.w	bc5b2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc444:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc448:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc44c:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc450:	2905      	cmp	r1, #5
   bc452:	d0b7      	beq.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc454:	42b9      	cmp	r1, r7
   bc456:	d10c      	bne.n	bc472 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc458:	4546      	cmp	r6, r8
   bc45a:	d10a      	bne.n	bc472 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc45c:	2300      	movs	r3, #0
   bc45e:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc462:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc464:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc468:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc46a:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc46e:	80ab      	strh	r3, [r5, #4]
   bc470:	e7a8      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc472:	4632      	mov	r2, r6
   bc474:	4620      	mov	r0, r4
   bc476:	f7fc fa5d 	bl	b8934 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc47a:	2800      	cmp	r0, #0
   bc47c:	f000 8095 	beq.w	bc5aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc480:	4632      	mov	r2, r6
   bc482:	4620      	mov	r0, r4
   bc484:	f7fc fb58 	bl	b8b38 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc488:	4606      	mov	r6, r0
   bc48a:	b9e8      	cbnz	r0, bc4c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc48c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc490:	b913      	cbnz	r3, bc498 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc492:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc496:	b1bb      	cbz	r3, bc4c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc498:	49a7      	ldr	r1, [pc, #668]	; (bc738 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc49a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49e:	f005 f836 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc4a2:	220a      	movs	r2, #10
   bc4a4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc4a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ac:	f7fc f954 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc4b0:	49a2      	ldr	r1, [pc, #648]	; (bc73c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc4b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b6:	f005 f82a 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc4ba:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc4be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4c2:	220a      	movs	r2, #10
   bc4c4:	f7fc f94f 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc4c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc4cc:	b1a3      	cbz	r3, bc4f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc4ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4d2:	b913      	cbnz	r3, bc4da <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc4d4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc4d8:	b123      	cbz	r3, bc4e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc4da:	4999      	ldr	r1, [pc, #612]	; (bc740 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc4dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4e0:	f005 f82f 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc4e4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc4e8:	b108      	cbz	r0, bc4ee <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc4ea:	f7f7 fdd8 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc4ee:	2300      	movs	r3, #0
   bc4f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc4f4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc4f8:	4630      	mov	r0, r6
   bc4fa:	f7f7 fdce 	bl	b409a <_Znaj>
   bc4fe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc502:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc506:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc50a:	bb38      	cbnz	r0, bc55c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc50c:	b913      	cbnz	r3, bc514 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc50e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc512:	b1e3      	cbz	r3, bc54e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc514:	498b      	ldr	r1, [pc, #556]	; (bc744 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc516:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc51a:	f004 fff8 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc51e:	2210      	movs	r2, #16
   bc520:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc524:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc528:	f7fc f916 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc52c:	4983      	ldr	r1, [pc, #524]	; (bc73c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc52e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc532:	f004 ffec 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc536:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc53a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc53e:	2210      	movs	r2, #16
   bc540:	f7fc f911 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc544:	4980      	ldr	r1, [pc, #512]	; (bc748 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc546:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc54a:	f004 fffa 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc54e:	2300      	movs	r3, #0
   bc550:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc554:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc558:	702b      	strb	r3, [r5, #0]
   bc55a:	e783      	b.n	bc464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc55c:	2203      	movs	r2, #3
   bc55e:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc562:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc566:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc56a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc56e:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc572:	2b00      	cmp	r3, #0
   bc574:	f43f af26 	beq.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc578:	4974      	ldr	r1, [pc, #464]	; (bc74c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc57a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc57e:	f004 ffc6 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc582:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc586:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc58a:	2210      	movs	r2, #16
   bc58c:	f7fc f8e4 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc590:	496a      	ldr	r1, [pc, #424]	; (bc73c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc592:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc596:	f004 ffba 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc59a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc59e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5a2:	2210      	movs	r2, #16
   bc5a4:	f7fc f8df 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc5a8:	e70c      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc5aa:	2301      	movs	r3, #1
   bc5ac:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc5b0:	e708      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc5b2:	2b04      	cmp	r3, #4
   bc5b4:	d104      	bne.n	bc5c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc5b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc5ba:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc5be:	e701      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc5c0:	2b05      	cmp	r3, #5
   bc5c2:	d106      	bne.n	bc5d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc5c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc5c8:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc5cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc5d0:	e7f3      	b.n	bc5ba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc5d2:	2b06      	cmp	r3, #6
   bc5d4:	d12b      	bne.n	bc62e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc5d6:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc5da:	bb13      	cbnz	r3, bc622 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc5dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5e0:	b913      	cbnz	r3, bc5e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc5e2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc5e6:	b1bb      	cbz	r3, bc618 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc5e8:	4959      	ldr	r1, [pc, #356]	; (bc750 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc5ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5ee:	f004 ff8e 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc5f2:	2210      	movs	r2, #16
   bc5f4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc5f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5fc:	f7fc f8ac 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc600:	494e      	ldr	r1, [pc, #312]	; (bc73c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc602:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc606:	f004 ff82 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc60a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc60e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc612:	2210      	movs	r2, #16
   bc614:	f7fc f8a7 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc618:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc61c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc620:	e6d0      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc622:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc626:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc62a:	701a      	strb	r2, [r3, #0]
   bc62c:	e6ca      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc62e:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc630:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc634:	f47f aec6 	bne.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc638:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc63c:	bb9b      	cbnz	r3, bc6a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc63e:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc642:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc646:	2b02      	cmp	r3, #2
   bc648:	f47f aebc 	bne.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc64c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc650:	2905      	cmp	r1, #5
   bc652:	f47f aeb7 	bne.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc656:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc65a:	781a      	ldrb	r2, [r3, #0]
   bc65c:	42ba      	cmp	r2, r7
   bc65e:	f47f aeb1 	bne.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc662:	785a      	ldrb	r2, [r3, #1]
   bc664:	4542      	cmp	r2, r8
   bc666:	f47f aead 	bne.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc66a:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc66e:	2a02      	cmp	r2, #2
   bc670:	d121      	bne.n	bc6b6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc672:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc676:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc67a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc67e:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc682:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc686:	2001      	movs	r0, #1
   bc688:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc68c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc690:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc694:	781b      	ldrb	r3, [r3, #0]
   bc696:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc698:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc69c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc6a0:	7852      	ldrb	r2, [r2, #1]
   bc6a2:	705a      	strb	r2, [r3, #1]
   bc6a4:	e68e      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc6a6:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc6a8:	bf16      	itet	ne
   bc6aa:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc6ae:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc6b2:	705a      	strbne	r2, [r3, #1]
   bc6b4:	e7c5      	b.n	bc642 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc6b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6ba:	b923      	cbnz	r3, bc6c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc6bc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc6c0:	2b00      	cmp	r3, #0
   bc6c2:	f43f ae7f 	beq.w	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc6c6:	4923      	ldr	r1, [pc, #140]	; (bc754 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc6c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6cc:	f004 ff1f 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc6d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc6d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6d8:	7819      	ldrb	r1, [r3, #0]
   bc6da:	2210      	movs	r2, #16
   bc6dc:	f7fc f83c 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc6e0:	4916      	ldr	r1, [pc, #88]	; (bc73c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc6e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6e6:	f004 ff12 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc6ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc6ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6f2:	7859      	ldrb	r1, [r3, #1]
   bc6f4:	2210      	movs	r2, #16
   bc6f6:	f7fc f82f 	bl	b8758 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc6fa:	4917      	ldr	r1, [pc, #92]	; (bc758 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc6fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc700:	f004 ff05 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc704:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc708:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc70c:	220a      	movs	r2, #10
   bc70e:	4630      	mov	r0, r6
   bc710:	f004 ff19 	bl	c1546 <_ZN5Print11printNumberEmh>
        n += println();
   bc714:	4630      	mov	r0, r6
   bc716:	f004 fefe 	bl	c1516 <_ZN5Print7printlnEv>
        return n;
   bc71a:	e653      	b.n	bc3c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc71c:	b913      	cbnz	r3, bc724 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc71e:	463b      	mov	r3, r7
   bc720:	462a      	mov	r2, r5
   bc722:	e65b      	b.n	bc3dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc724:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc726:	bf08      	it	eq
   bc728:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc72c:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc72e:	bf18      	it	ne
   bc730:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc734:	e652      	b.n	bc3dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc736:	bf00      	nop
   bc738:	000c7572 	.word	0x000c7572
   bc73c:	000c7379 	.word	0x000c7379
   bc740:	000c75a7 	.word	0x000c75a7
   bc744:	000c75e9 	.word	0x000c75e9
   bc748:	000c762e 	.word	0x000c762e
   bc74c:	000c7660 	.word	0x000c7660
   bc750:	000c7691 	.word	0x000c7691
   bc754:	000c76c1 	.word	0x000c76c1
   bc758:	000c76f1 	.word	0x000c76f1
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc75c:	2e01      	cmp	r6, #1
   bc75e:	f040 8188 	bne.w	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc762:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc766:	2b00      	cmp	r3, #0
   bc768:	d146      	bne.n	bc7f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc76a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc76e:	2a24      	cmp	r2, #36	; 0x24
   bc770:	f000 8086 	beq.w	bc880 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc774:	2300      	movs	r3, #0
   bc776:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc778:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc77c:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc77e:	bf04      	itt	eq
   bc780:	23fb      	moveq	r3, #251	; 0xfb
   bc782:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc786:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc78a:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc78e:	3501      	adds	r5, #1
   bc790:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc792:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc794:	bf08      	it	eq
   bc796:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc798:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc79c:	bf08      	it	eq
   bc79e:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc7a0:	2d00      	cmp	r5, #0
   bc7a2:	f47f ae23 	bne.w	bc3ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc7a6:	4620      	mov	r0, r4
   bc7a8:	f7fc fc20 	bl	b8fec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc7ac:	2800      	cmp	r0, #0
   bc7ae:	f000 8120 	beq.w	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc7b2:	4620      	mov	r0, r4
   bc7b4:	f7fc fd7c 	bl	b92b0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc7b8:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc7ba:	4620      	mov	r0, r4
   bc7bc:	f7fc fdfa 	bl	b93b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc7c0:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc7c2:	4620      	mov	r0, r4
   bc7c4:	f7fd f88a 	bl	b98dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc7c8:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc7ca:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc7cc:	1e41      	subs	r1, r0, #1
   bc7ce:	428e      	cmp	r6, r1
   bc7d0:	f280 80b4 	bge.w	bc93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc7d4:	783a      	ldrb	r2, [r7, #0]
   bc7d6:	3a04      	subs	r2, #4
   bc7d8:	4296      	cmp	r6, r2
   bc7da:	f280 80af 	bge.w	bc93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc7de:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc7e0:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc7e4:	f000 80ad 	beq.w	bc942 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc7e8:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc7ea:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc7ee:	bf18      	it	ne
   bc7f0:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc7f2:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc7f4:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc7f6:	e7ea      	b.n	bc7ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc7f8:	2b01      	cmp	r3, #1
   bc7fa:	d103      	bne.n	bc804 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc7fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc800:	2a47      	cmp	r2, #71	; 0x47
   bc802:	e7b5      	b.n	bc770 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc804:	b2da      	uxtb	r2, r3
   bc806:	2a05      	cmp	r2, #5
   bc808:	d93a      	bls.n	bc880 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc80a:	4620      	mov	r0, r4
   bc80c:	f7fc fbee 	bl	b8fec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc810:	b308      	cbz	r0, bc856 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc812:	4620      	mov	r0, r4
   bc814:	f7fc fd4c 	bl	b92b0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc818:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc81a:	4620      	mov	r0, r4
   bc81c:	f7fc fdca 	bl	b93b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc820:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc822:	4620      	mov	r0, r4
   bc824:	f7fd f85a 	bl	b98dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc828:	782b      	ldrb	r3, [r5, #0]
   bc82a:	4283      	cmp	r3, r0
   bc82c:	d213      	bcs.n	bc856 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc82e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc832:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc834:	782b      	ldrb	r3, [r5, #0]
   bc836:	3301      	adds	r3, #1
   bc838:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc83a:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc83c:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc83e:	d10a      	bne.n	bc856 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc840:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc844:	b913      	cbnz	r3, bc84c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc846:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc84a:	b123      	cbz	r3, bc856 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc84c:	498f      	ldr	r1, [pc, #572]	; (bca8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc84e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc852:	f004 fe76 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc856:	4620      	mov	r0, r4
   bc858:	f7fc f9c8 	bl	b8bec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc85c:	b128      	cbz	r0, bc86a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc85e:	2201      	movs	r2, #1
   bc860:	f10d 010f 	add.w	r1, sp, #15
   bc864:	4620      	mov	r0, r4
   bc866:	f7ff fd4f 	bl	bc308 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc86a:	4620      	mov	r0, r4
   bc86c:	f7fc faee 	bl	b8e4c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc870:	2800      	cmp	r0, #0
   bc872:	d081      	beq.n	bc778 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc874:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc878:	4620      	mov	r0, r4
   bc87a:	f7fc fbaf 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc87e:	e77b      	b.n	bc778 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc880:	18e2      	adds	r2, r4, r3
   bc882:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc886:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc88a:	2b05      	cmp	r3, #5
   bc88c:	f47f af74 	bne.w	bc778 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc890:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc894:	b923      	cbnz	r3, bc8a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc896:	4620      	mov	r0, r4
   bc898:	f7fc fa70 	bl	b8d7c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc89c:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc8a0:	4620      	mov	r0, r4
   bc8a2:	f7fc fba3 	bl	b8fec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc8a6:	b1b8      	cbz	r0, bc8d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc8a8:	4620      	mov	r0, r4
   bc8aa:	f7fc fd01 	bl	b92b0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc8ae:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc8b0:	4620      	mov	r0, r4
   bc8b2:	f7fc fd7f 	bl	b93b4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc8b6:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc8b8:	4620      	mov	r0, r4
   bc8ba:	f7fd f80f 	bl	b98dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc8be:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc8c0:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc8c2:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc8c4:	2100      	movs	r1, #0
   bc8c6:	4628      	mov	r0, r5
   bc8c8:	f007 feee 	bl	c46a8 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc8cc:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc8d0:	602b      	str	r3, [r5, #0]
   bc8d2:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc8d6:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc8d8:	4620      	mov	r0, r4
   bc8da:	f7fc f987 	bl	b8bec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc8de:	b128      	cbz	r0, bc8ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc8e0:	2206      	movs	r2, #6
   bc8e2:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc8e6:	4620      	mov	r0, r4
   bc8e8:	f7ff fd0e 	bl	bc308 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc8ec:	4620      	mov	r0, r4
   bc8ee:	f7fc faad 	bl	b8e4c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc8f2:	b1e8      	cbz	r0, bc930 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc8f4:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc8f8:	4620      	mov	r0, r4
   bc8fa:	f7fc fb6f 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc8fe:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc902:	4620      	mov	r0, r4
   bc904:	f7fc fb6a 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc908:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc90c:	4620      	mov	r0, r4
   bc90e:	f7fc fb65 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc912:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc916:	4620      	mov	r0, r4
   bc918:	f7fc fb60 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc91c:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc920:	4620      	mov	r0, r4
   bc922:	f7fc fb5b 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc926:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc92a:	4620      	mov	r0, r4
   bc92c:	f7fc fb56 	bl	b8fdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc930:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc934:	2b05      	cmp	r3, #5
   bc936:	f67f af1f 	bls.w	bc778 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc93a:	e766      	b.n	bc80a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc93c:	2d2a      	cmp	r5, #42	; 0x2a
   bc93e:	f040 808b 	bne.w	bca58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc942:	091a      	lsrs	r2, r3, #4
   bc944:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc948:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc94a:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc94c:	f003 030f 	and.w	r3, r3, #15
   bc950:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc954:	bf84      	itt	hi
   bc956:	3237      	addhi	r2, #55	; 0x37
   bc958:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc95a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc95e:	bf88      	it	hi
   bc960:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc964:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc968:	42ab      	cmp	r3, r5
   bc96a:	eb08 0b06 	add.w	fp, r8, r6
   bc96e:	d143      	bne.n	bc9f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc970:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc974:	4553      	cmp	r3, sl
   bc976:	d13f      	bne.n	bc9f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc978:	4620      	mov	r0, r4
   bc97a:	f7fc fd9d 	bl	b94b8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc97e:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc980:	4620      	mov	r0, r4
   bc982:	f7fc fe1d 	bl	b95c0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc986:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc988:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc98a:	2100      	movs	r1, #0
   bc98c:	f007 fe8c 	bl	c46a8 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc990:	783a      	ldrb	r2, [r7, #0]
   bc992:	4641      	mov	r1, r8
   bc994:	4630      	mov	r0, r6
   bc996:	f007 fe5f 	bl	c4658 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc99a:	783b      	ldrb	r3, [r7, #0]
   bc99c:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc99e:	4620      	mov	r0, r4
   bc9a0:	f7fd f80e 	bl	b99c0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc9a4:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc9a6:	f025 0503 	bic.w	r5, r5, #3
   bc9aa:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc9ae:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc9b0:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc9b4:	4620      	mov	r0, r4
   bc9b6:	f7fc fba5 	bl	b9104 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc9ba:	b1d0      	cbz	r0, bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc9bc:	f01a 0104 	ands.w	r1, sl, #4
   bc9c0:	d117      	bne.n	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc9c2:	4620      	mov	r0, r4
   bc9c4:	9102      	str	r1, [sp, #8]
   bc9c6:	f7fc fe7f 	bl	b96c8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc9ca:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc9cc:	4620      	mov	r0, r4
   bc9ce:	f7fc feff 	bl	b97d0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc9d2:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc9d4:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc9d6:	464a      	mov	r2, r9
   bc9d8:	f007 fe66 	bl	c46a8 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc9dc:	783a      	ldrb	r2, [r7, #0]
   bc9de:	4641      	mov	r1, r8
   bc9e0:	4650      	mov	r0, sl
   bc9e2:	f007 fe39 	bl	c4658 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc9e6:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc9ea:	783b      	ldrb	r3, [r7, #0]
   bc9ec:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc9f0:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc9f2:	2300      	movs	r3, #0
   bc9f4:	7023      	strb	r3, [r4, #0]
   bc9f6:	e4f9      	b.n	bc3ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9fc:	b91b      	cbnz	r3, bca06 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc9fe:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca02:	2b00      	cmp	r3, #0
   bca04:	d0f5      	beq.n	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bca06:	4922      	ldr	r1, [pc, #136]	; (bca90 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bca08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca0c:	f004 fd7f 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bca10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca14:	6803      	ldr	r3, [r0, #0]
   bca16:	4629      	mov	r1, r5
   bca18:	689b      	ldr	r3, [r3, #8]
   bca1a:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bca1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca20:	6803      	ldr	r3, [r0, #0]
   bca22:	4651      	mov	r1, sl
   bca24:	689b      	ldr	r3, [r3, #8]
   bca26:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bca28:	491a      	ldr	r1, [pc, #104]	; (bca94 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bca2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca2e:	f004 fd6e 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bca32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca36:	f89b 1000 	ldrb.w	r1, [fp]
   bca3a:	6803      	ldr	r3, [r0, #0]
   bca3c:	689b      	ldr	r3, [r3, #8]
   bca3e:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bca40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca44:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bca48:	6803      	ldr	r3, [r0, #0]
   bca4a:	689b      	ldr	r3, [r3, #8]
   bca4c:	4798      	blx	r3
              _debugSerial->println();
   bca4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca52:	f004 fd60 	bl	c1516 <_ZN5Print7printlnEv>
   bca56:	e7cc      	b.n	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca58:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca5c:	b91b      	cbnz	r3, bca66 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bca5e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca62:	2b00      	cmp	r3, #0
   bca64:	d0c5      	beq.n	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bca66:	490c      	ldr	r1, [pc, #48]	; (bca98 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bca68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca6c:	f004 fd69 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bca70:	e7bf      	b.n	bc9f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bca72:	2e03      	cmp	r6, #3
   bca74:	f47f acba 	bne.w	bc3ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bca78:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bca7c:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bca80:	4620      	mov	r0, r4
   bca82:	f7fd f821 	bl	b9ac8 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bca86:	7020      	strb	r0, [r4, #0]
}
   bca88:	e4b0      	b.n	bc3ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bca8a:	bf00      	nop
   bca8c:	000c76f8 	.word	0x000c76f8
   bca90:	000c7716 	.word	0x000c7716
   bca94:	000c7741 	.word	0x000c7741
   bca98:	000c7747 	.word	0x000c7747

000bca9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bca9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bcaa0:	4604      	mov	r4, r0
   bcaa2:	4699      	mov	r9, r3
   bcaa4:	460f      	mov	r7, r1
   bcaa6:	4690      	mov	r8, r2
   bcaa8:	f001 f94c 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bcaac:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bcab0:	1ac0      	subs	r0, r0, r3
   bcab2:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bcab6:	4298      	cmp	r0, r3
   bcab8:	f0c0 80a8 	bcc.w	bcc0c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bcabc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcac0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcac4:	f003 fa2a 	bl	bff1c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bcac8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcacc:	21fd      	movs	r1, #253	; 0xfd
   bcace:	f7fb fe53 	bl	b8778 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bcad2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcad6:	2100      	movs	r1, #0
   bcad8:	f003 fa27 	bl	bff2a <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bcadc:	4605      	mov	r5, r0
   bcade:	b1a8      	cbz	r0, bcb0c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcae0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcae4:	b933      	cbnz	r3, bcaf4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bcae6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcaea:	b91b      	cbnz	r3, bcaf4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bcaec:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bcaee:	b002      	add	sp, #8
   bcaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bcaf4:	4946      	ldr	r1, [pc, #280]	; (bcc10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bcaf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcafa:	f004 fd08 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bcafe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb02:	220a      	movs	r2, #10
   bcb04:	4629      	mov	r1, r5
   bcb06:	f7fb fe2e 	bl	b8766 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bcb0a:	e7ef      	b.n	bcaec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bcb0c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcb10:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb14:	2202      	movs	r2, #2
   bcb16:	f003 f9fe 	bl	bff16 <_ZN7TwoWire11requestFromEhj>
   bcb1a:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bcb1c:	2d02      	cmp	r5, #2
   bcb1e:	d008      	beq.n	bcb32 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcb20:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb24:	b91b      	cbnz	r3, bcb2e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bcb26:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcb2a:	2b00      	cmp	r3, #0
   bcb2c:	d0de      	beq.n	bcaec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bcb2e:	4939      	ldr	r1, [pc, #228]	; (bcc14 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bcb30:	e7e1      	b.n	bcaf6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bcb32:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb36:	6803      	ldr	r3, [r0, #0]
   bcb38:	695b      	ldr	r3, [r3, #20]
   bcb3a:	4798      	blx	r3
   bcb3c:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bcb3e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb42:	6803      	ldr	r3, [r0, #0]
   bcb44:	695b      	ldr	r3, [r3, #20]
   bcb46:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bcb48:	b2c6      	uxtb	r6, r0
   bcb4a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bcb4e:	b22a      	sxth	r2, r5
   bcb50:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bcb52:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb56:	b955      	cbnz	r5, bcb6e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bcb58:	b123      	cbz	r3, bcb64 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bcb5a:	492f      	ldr	r1, [pc, #188]	; (bcc18 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bcb5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb60:	f004 fcef 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcb64:	f001 f8ee 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bcb68:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bcb6c:	e7be      	b.n	bcaec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bcb6e:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bcb70:	bfb8      	it	lt
   bcb72:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bcb76:	2d64      	cmp	r5, #100	; 0x64
   bcb78:	d936      	bls.n	bcbe8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bcb7a:	b17b      	cbz	r3, bcb9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bcb7c:	4927      	ldr	r1, [pc, #156]	; (bcc1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bcb7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb82:	f004 fcc4 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bcb86:	4629      	mov	r1, r5
   bcb88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb8c:	220a      	movs	r2, #10
   bcb8e:	f004 fcda 	bl	c1546 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bcb92:	4923      	ldr	r1, [pc, #140]	; (bcc20 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bcb94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb98:	f004 fcd3 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bcb9c:	2d00      	cmp	r5, #0
   bcb9e:	d035      	beq.n	bcc0c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bcba0:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bcba2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcba6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcbaa:	42ae      	cmp	r6, r5
   bcbac:	bf28      	it	cs
   bcbae:	462e      	movcs	r6, r5
   bcbb0:	4632      	mov	r2, r6
   bcbb2:	f003 f9b0 	bl	bff16 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bcbb6:	b2c0      	uxtb	r0, r0
   bcbb8:	4286      	cmp	r6, r0
   bcbba:	d197      	bne.n	bcaec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bcbbc:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcbc0:	fa1f f38a 	uxth.w	r3, sl
   bcbc4:	429e      	cmp	r6, r3
   bcbc6:	d91e      	bls.n	bcc06 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bcbc8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcbcc:	6803      	ldr	r3, [r0, #0]
   bcbce:	695b      	ldr	r3, [r3, #20]
   bcbd0:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bcbd2:	f8cd 9000 	str.w	r9, [sp]
   bcbd6:	b2c1      	uxtb	r1, r0
   bcbd8:	4643      	mov	r3, r8
   bcbda:	463a      	mov	r2, r7
   bcbdc:	4620      	mov	r0, r4
   bcbde:	f7ff fbc1 	bl	bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcbe2:	f10a 0a01 	add.w	sl, sl, #1
   bcbe6:	e7eb      	b.n	bcbc0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bcbe8:	2b00      	cmp	r3, #0
   bcbea:	d0d7      	beq.n	bcb9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bcbec:	490d      	ldr	r1, [pc, #52]	; (bcc24 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bcbee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbf2:	f004 fc8c 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
   bcbf6:	4629      	mov	r1, r5
   bcbf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbfc:	220a      	movs	r2, #10
   bcbfe:	f004 fca2 	bl	c1546 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bcc02:	4909      	ldr	r1, [pc, #36]	; (bcc28 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bcc04:	e7c6      	b.n	bcb94 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bcc06:	1bad      	subs	r5, r5, r6
   bcc08:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bcc0a:	e7c7      	b.n	bcb9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bcc0c:	2001      	movs	r0, #1
   bcc0e:	e76e      	b.n	bcaee <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bcc10:	000c7768 	.word	0x000c7768
   bcc14:	000c779c 	.word	0x000c779c
   bcc18:	000c77d1 	.word	0x000c77d1
   bcc1c:	000c77f9 	.word	0x000c77f9
   bcc20:	000c7819 	.word	0x000c7819
   bcc24:	000c7829 	.word	0x000c7829
   bcc28:	000c7841 	.word	0x000c7841

000bcc2c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bcc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bcc2e:	4604      	mov	r4, r0
   bcc30:	460d      	mov	r5, r1
   bcc32:	4616      	mov	r6, r2
   bcc34:	461f      	mov	r7, r3
  while (_serialPort->available())
   bcc36:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bcc3a:	6803      	ldr	r3, [r0, #0]
   bcc3c:	691b      	ldr	r3, [r3, #16]
   bcc3e:	4798      	blx	r3
   bcc40:	b160      	cbz	r0, bcc5c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bcc42:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bcc46:	6803      	ldr	r3, [r0, #0]
   bcc48:	695b      	ldr	r3, [r3, #20]
   bcc4a:	4798      	blx	r3
   bcc4c:	9700      	str	r7, [sp, #0]
   bcc4e:	b2c1      	uxtb	r1, r0
   bcc50:	4633      	mov	r3, r6
   bcc52:	462a      	mov	r2, r5
   bcc54:	4620      	mov	r0, r4
   bcc56:	f7ff fb85 	bl	bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bcc5a:	e7ec      	b.n	bcc36 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bcc5c:	2001      	movs	r0, #1
   bcc5e:	b003      	add	sp, #12
   bcc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bcc64 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bcc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcc68:	4604      	mov	r4, r0
   bcc6a:	b087      	sub	sp, #28
   bcc6c:	460d      	mov	r5, r1
   bcc6e:	4616      	mov	r6, r2
   bcc70:	461f      	mov	r7, r3
   bcc72:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bcc76:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bcc7a:	fa5f f388 	uxtb.w	r3, r8
   bcc7e:	429a      	cmp	r2, r3
   bcc80:	d90b      	bls.n	bcc9a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bcc82:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bcc86:	4620      	mov	r0, r4
   bcc88:	5cd1      	ldrb	r1, [r2, r3]
   bcc8a:	9700      	str	r7, [sp, #0]
   bcc8c:	4633      	mov	r3, r6
   bcc8e:	462a      	mov	r2, r5
   bcc90:	f7ff fb68 	bl	bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bcc94:	f108 0801 	add.w	r8, r8, #1
   bcc98:	e7ed      	b.n	bcc76 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bcc9a:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bcc9e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bcca2:	4a25      	ldr	r2, [pc, #148]	; (bcd38 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bcca4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bcca8:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bccac:	a902      	add	r1, sp, #8
   bccae:	f04f 0901 	mov.w	r9, #1
   bccb2:	9202      	str	r2, [sp, #8]
   bccb4:	9304      	str	r3, [sp, #16]
   bccb6:	f88d 800c 	strb.w	r8, [sp, #12]
   bccba:	f8ad 9014 	strh.w	r9, [sp, #20]
   bccbe:	f004 fd65 	bl	c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bccc2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bccc6:	4641      	mov	r1, r8
   bccc8:	f005 fa03 	bl	c20d2 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bcccc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bccd0:	21ff      	movs	r1, #255	; 0xff
   bccd2:	f004 fdfb 	bl	c18cc <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bccd6:	28ff      	cmp	r0, #255	; 0xff
   bccd8:	d116      	bne.n	bcd08 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bccda:	7823      	ldrb	r3, [r4, #0]
   bccdc:	b983      	cbnz	r3, bcd00 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bccde:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcce2:	4649      	mov	r1, r9
   bcce4:	f005 f9f5 	bl	c20d2 <digitalWrite>
    _spiPort->endTransaction();
   bcce8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bccec:	f004 fd34 	bl	c1758 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bccf0:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bccf4:	f001 fb90 	bl	be418 <delay>
} // end checkUbloxSpi()
   bccf8:	2001      	movs	r0, #1
   bccfa:	b007      	add	sp, #28
   bccfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcd00:	28ff      	cmp	r0, #255	; 0xff
   bcd02:	d101      	bne.n	bcd08 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcd04:	7823      	ldrb	r3, [r4, #0]
   bcd06:	b163      	cbz	r3, bcd22 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bcd08:	4601      	mov	r1, r0
   bcd0a:	9700      	str	r7, [sp, #0]
   bcd0c:	4620      	mov	r0, r4
   bcd0e:	4633      	mov	r3, r6
   bcd10:	462a      	mov	r2, r5
   bcd12:	f7ff fb27 	bl	bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bcd16:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcd1a:	21ff      	movs	r1, #255	; 0xff
   bcd1c:	f004 fdd6 	bl	c18cc <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcd20:	e7ee      	b.n	bcd00 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bcd22:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcd26:	2101      	movs	r1, #1
   bcd28:	f005 f9d3 	bl	c20d2 <digitalWrite>
  _spiPort->endTransaction();
   bcd2c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcd30:	f004 fd12 	bl	c1758 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bcd34:	e7e0      	b.n	bccf8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bcd36:	bf00      	nop
   bcd38:	000c6e68 	.word	0x000c6e68

000bcd3c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bcd3c:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bcd3e:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bcd42:	b91c      	cbnz	r4, bcd4c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bcd44:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bcd48:	f7ff bea8 	b.w	bca9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bcd4c:	2c01      	cmp	r4, #1
   bcd4e:	d103      	bne.n	bcd58 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bcd50:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bcd54:	f7ff bf6a 	b.w	bcc2c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bcd58:	2c02      	cmp	r4, #2
   bcd5a:	d103      	bne.n	bcd64 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bcd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bcd60:	f7ff bf80 	b.w	bcc64 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bcd64:	2000      	movs	r0, #0
   bcd66:	f85d 4b04 	ldr.w	r4, [sp], #4
   bcd6a:	4770      	bx	lr

000bcd6c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bcd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd70:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcd72:	2102      	movs	r1, #2
   bcd74:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd76:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd7a:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd7e:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcd82:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd84:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd88:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd8c:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcd90:	4604      	mov	r4, r0
   bcd92:	4617      	mov	r7, r2
   bcd94:	4698      	mov	r8, r3
   bcd96:	f000 ffd5 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcd9a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bcd9e:	4606      	mov	r6, r0
   bcda0:	4481      	add	r9, r0
   bcda2:	f000 ffcf 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcda6:	4581      	cmp	r9, r0
   bcda8:	f240 80a8 	bls.w	bcefc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcdac:	4643      	mov	r3, r8
   bcdae:	463a      	mov	r2, r7
   bcdb0:	4629      	mov	r1, r5
   bcdb2:	4620      	mov	r0, r4
   bcdb4:	f7ff ffc2 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcdb8:	2800      	cmp	r0, #0
   bcdba:	f000 809b 	beq.w	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcdbe:	7beb      	ldrb	r3, [r5, #15]
   bcdc0:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bcdc4:	2b01      	cmp	r3, #1
   bcdc6:	d125      	bne.n	bce14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bcdc8:	2901      	cmp	r1, #1
   bcdca:	f040 80ec 	bne.w	bcfa6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bcdce:	7bab      	ldrb	r3, [r5, #14]
   bcdd0:	2b01      	cmp	r3, #1
   bcdd2:	782b      	ldrb	r3, [r5, #0]
   bcdd4:	d13b      	bne.n	bce4e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bcdd6:	42bb      	cmp	r3, r7
   bcdd8:	d13e      	bne.n	bce58 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcdda:	786a      	ldrb	r2, [r5, #1]
   bcddc:	4542      	cmp	r2, r8
   bcdde:	d136      	bne.n	bce4e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bcde0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcde4:	b913      	cbnz	r3, bcdec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bcde6:	200b      	movs	r0, #11
}
   bcde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bcdec:	4978      	ldr	r1, [pc, #480]	; (bcfd0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bcdee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdf2:	f004 fb8c 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcdf6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcdfa:	f000 ffa3 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcdfe:	220a      	movs	r2, #10
   bce00:	1b81      	subs	r1, r0, r6
   bce02:	4628      	mov	r0, r5
   bce04:	f7fb fc9b 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce08:	4972      	ldr	r1, [pc, #456]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce0e:	f004 fb98 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bce12:	e7e8      	b.n	bcde6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bce14:	2b02      	cmp	r3, #2
   bce16:	d137      	bne.n	bce88 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bce18:	2901      	cmp	r1, #1
   bce1a:	f040 80aa 	bne.w	bcf72 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bce1e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce22:	b193      	cbz	r3, bce4a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bce24:	496c      	ldr	r1, [pc, #432]	; (bcfd8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bce26:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce2a:	f004 fb70 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce2e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce32:	f000 ff87 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bce36:	220a      	movs	r2, #10
   bce38:	1b81      	subs	r1, r0, r6
   bce3a:	4628      	mov	r0, r5
   bce3c:	f7fb fc7f 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce40:	4964      	ldr	r1, [pc, #400]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce46:	f004 fb7c 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bce4a:	200a      	movs	r0, #10
   bce4c:	e7cc      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bce4e:	42bb      	cmp	r3, r7
   bce50:	d102      	bne.n	bce58 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bce52:	786b      	ldrb	r3, [r5, #1]
   bce54:	4543      	cmp	r3, r8
   bce56:	d019      	beq.n	bce8c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bce58:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce5c:	b193      	cbz	r3, bce84 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bce5e:	495f      	ldr	r1, [pc, #380]	; (bcfdc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bce60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce64:	f004 fb53 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce68:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce6c:	f000 ff6a 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bce70:	220a      	movs	r2, #10
   bce72:	1b81      	subs	r1, r0, r6
   bce74:	4628      	mov	r0, r5
   bce76:	f7fb fc62 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce7a:	4956      	ldr	r1, [pc, #344]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce80:	f004 fb5f 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bce84:	200d      	movs	r0, #13
   bce86:	e7af      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bce88:	2901      	cmp	r1, #1
   bce8a:	d172      	bne.n	bcf72 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bce8c:	89eb      	ldrh	r3, [r5, #14]
   bce8e:	bb8b      	cbnz	r3, bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bce90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce94:	b193      	cbz	r3, bcebc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bce96:	4952      	ldr	r1, [pc, #328]	; (bcfe0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bce98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce9c:	f004 fb37 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcea0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcea4:	f000 ff4e 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcea8:	220a      	movs	r2, #10
   bceaa:	1b81      	subs	r1, r0, r6
   bceac:	4628      	mov	r0, r5
   bceae:	f7fb fc46 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bceb2:	4948      	ldr	r1, [pc, #288]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bceb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bceb8:	f004 fb43 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bcebc:	2002      	movs	r0, #2
   bcebe:	e793      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcec0:	430b      	orrs	r3, r1
   bcec2:	d117      	bne.n	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcec4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcec8:	b193      	cbz	r3, bcef0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bceca:	4946      	ldr	r1, [pc, #280]	; (bcfe4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bcecc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bced0:	f004 fb1d 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bced4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bced8:	f000 ff34 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcedc:	220a      	movs	r2, #10
   bcede:	1b81      	subs	r1, r0, r6
   bcee0:	4628      	mov	r0, r5
   bcee2:	f7fb fc2c 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcee6:	493b      	ldr	r1, [pc, #236]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcee8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bceec:	f004 fb29 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bcef0:	2001      	movs	r0, #1
   bcef2:	e779      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcef4:	2001      	movs	r0, #1
   bcef6:	f001 fa8f 	bl	be418 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcefa:	e752      	b.n	bcda2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcefc:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bcefe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcf02:	2a01      	cmp	r2, #1
   bcf04:	d11f      	bne.n	bcf46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf06:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bcf0a:	2a02      	cmp	r2, #2
   bcf0c:	d11b      	bne.n	bcf46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf0e:	7baa      	ldrb	r2, [r5, #14]
   bcf10:	2a01      	cmp	r2, #1
   bcf12:	d118      	bne.n	bcf46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf14:	782a      	ldrb	r2, [r5, #0]
   bcf16:	42ba      	cmp	r2, r7
   bcf18:	d115      	bne.n	bcf46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf1a:	786a      	ldrb	r2, [r5, #1]
   bcf1c:	4542      	cmp	r2, r8
   bcf1e:	d112      	bne.n	bcf46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bcf20:	2b00      	cmp	r3, #0
   bcf22:	f43f af60 	beq.w	bcde6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bcf26:	4930      	ldr	r1, [pc, #192]	; (bcfe8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bcf28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf2c:	f004 faef 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcf30:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcf34:	f000 ff06 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcf38:	220a      	movs	r2, #10
   bcf3a:	1b81      	subs	r1, r0, r6
   bcf3c:	4628      	mov	r0, r5
   bcf3e:	f7fb fbfe 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bcf42:	492a      	ldr	r1, [pc, #168]	; (bcfec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bcf44:	e761      	b.n	bce0a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bcf46:	b193      	cbz	r3, bcf6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcf48:	4929      	ldr	r1, [pc, #164]	; (bcff0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcf4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf4e:	f004 fade 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcf52:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcf56:	f000 fef5 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcf5a:	220a      	movs	r2, #10
   bcf5c:	1b81      	subs	r1, r0, r6
   bcf5e:	4628      	mov	r0, r5
   bcf60:	f7fb fbed 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bcf64:	4923      	ldr	r1, [pc, #140]	; (bcff4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bcf66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf6a:	f004 faea 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcf6e:	2003      	movs	r0, #3
   bcf70:	e73a      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcf72:	2903      	cmp	r1, #3
   bcf74:	d1a4      	bne.n	bcec0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bcf76:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf7a:	b193      	cbz	r3, bcfa2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcf7c:	491e      	ldr	r1, [pc, #120]	; (bcff8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcf7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf82:	f004 fac4 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcf86:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcf8a:	f000 fedb 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bcf8e:	220a      	movs	r2, #10
   bcf90:	1b81      	subs	r1, r0, r6
   bcf92:	4628      	mov	r0, r5
   bcf94:	f7fb fbd3 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcf98:	490e      	ldr	r1, [pc, #56]	; (bcfd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcf9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf9e:	f004 fad0 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bcfa2:	2004      	movs	r0, #4
   bcfa4:	e720      	b.n	bcde8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcfa6:	2903      	cmp	r1, #3
   bcfa8:	d0e5      	beq.n	bcf76 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcfaa:	2900      	cmp	r1, #0
   bcfac:	d1a2      	bne.n	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcfae:	7bab      	ldrb	r3, [r5, #14]
   bcfb0:	2b01      	cmp	r3, #1
   bcfb2:	d19f      	bne.n	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcfb4:	782b      	ldrb	r3, [r5, #0]
   bcfb6:	42bb      	cmp	r3, r7
   bcfb8:	d19c      	bne.n	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcfba:	786b      	ldrb	r3, [r5, #1]
   bcfbc:	4543      	cmp	r3, r8
   bcfbe:	d199      	bne.n	bcef4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcfc0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcfc4:	2b00      	cmp	r3, #0
   bcfc6:	f43f af0e 	beq.w	bcde6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bcfca:	490c      	ldr	r1, [pc, #48]	; (bcffc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bcfcc:	e70f      	b.n	bcdee <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bcfce:	bf00      	nop
   bcfd0:	000c7848 	.word	0x000c7848
   bcfd4:	000c7885 	.word	0x000c7885
   bcfd8:	000c788b 	.word	0x000c788b
   bcfdc:	000c78bc 	.word	0x000c78bc
   bcfe0:	000c78ee 	.word	0x000c78ee
   bcfe4:	000c798e 	.word	0x000c798e
   bcfe8:	000c79cf 	.word	0x000c79cf
   bcfec:	000c7a02 	.word	0x000c7a02
   bcff0:	000c7a0a 	.word	0x000c7a0a
   bcff4:	000c7a2d 	.word	0x000c7a2d
   bcff8:	000c7914 	.word	0x000c7914
   bcffc:	000c794f 	.word	0x000c794f

000bd000 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bd000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd004:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bd006:	2102      	movs	r1, #2
   bd008:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd00a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd00e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd012:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bd016:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd018:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd01c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd020:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bd024:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bd028:	4604      	mov	r4, r0
   bd02a:	4617      	mov	r7, r2
   bd02c:	4698      	mov	r8, r3
   bd02e:	f000 fe89 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bd032:	f240 1a01 	movw	sl, #257	; 0x101
   bd036:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bd038:	f240 2b01 	movw	fp, #513	; 0x201
   bd03c:	f000 fe82 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bd040:	1b80      	subs	r0, r0, r6
   bd042:	4548      	cmp	r0, r9
   bd044:	d269      	bcs.n	bd11a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bd046:	4643      	mov	r3, r8
   bd048:	463a      	mov	r2, r7
   bd04a:	4629      	mov	r1, r5
   bd04c:	4620      	mov	r0, r4
   bd04e:	f7ff fe75 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bd052:	2800      	cmp	r0, #0
   bd054:	d05d      	beq.n	bd112 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bd056:	89ea      	ldrh	r2, [r5, #14]
   bd058:	4552      	cmp	r2, sl
   bd05a:	d11e      	bne.n	bd09a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bd05c:	782b      	ldrb	r3, [r5, #0]
   bd05e:	42bb      	cmp	r3, r7
   bd060:	d11b      	bne.n	bd09a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bd062:	786b      	ldrb	r3, [r5, #1]
   bd064:	4543      	cmp	r3, r8
   bd066:	d118      	bne.n	bd09a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bd068:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd06c:	b193      	cbz	r3, bd094 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bd06e:	4937      	ldr	r1, [pc, #220]	; (bd14c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bd070:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd074:	f004 fa4b 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd078:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd07c:	f000 fe62 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bd080:	220a      	movs	r2, #10
   bd082:	1b81      	subs	r1, r0, r6
   bd084:	4628      	mov	r0, r5
   bd086:	f7fb fb5a 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd08a:	4931      	ldr	r1, [pc, #196]	; (bd150 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd08c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd090:	f004 fa57 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bd094:	200b      	movs	r0, #11
}
   bd096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bd09a:	7beb      	ldrb	r3, [r5, #15]
   bd09c:	2b01      	cmp	r3, #1
   bd09e:	d11d      	bne.n	bd0dc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bd0a0:	782b      	ldrb	r3, [r5, #0]
   bd0a2:	42bb      	cmp	r3, r7
   bd0a4:	d102      	bne.n	bd0ac <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bd0a6:	786b      	ldrb	r3, [r5, #1]
   bd0a8:	4543      	cmp	r3, r8
   bd0aa:	d032      	beq.n	bd112 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd0ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0b0:	b193      	cbz	r3, bd0d8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bd0b2:	4928      	ldr	r1, [pc, #160]	; (bd154 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bd0b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0b8:	f004 fa29 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd0bc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd0c0:	f000 fe40 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bd0c4:	220a      	movs	r2, #10
   bd0c6:	1b81      	subs	r1, r0, r6
   bd0c8:	4628      	mov	r0, r5
   bd0ca:	f7fb fb38 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd0ce:	4920      	ldr	r1, [pc, #128]	; (bd150 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd0d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0d4:	f004 fa35 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bd0d8:	200d      	movs	r0, #13
   bd0da:	e7dc      	b.n	bd096 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bd0dc:	455a      	cmp	r2, fp
   bd0de:	d018      	beq.n	bd112 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bd0e0:	b9bb      	cbnz	r3, bd112 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd0e2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0e6:	b193      	cbz	r3, bd10e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bd0e8:	491b      	ldr	r1, [pc, #108]	; (bd158 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bd0ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0ee:	f004 fa0e 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd0f2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd0f6:	f000 fe25 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bd0fa:	220a      	movs	r2, #10
   bd0fc:	1b81      	subs	r1, r0, r6
   bd0fe:	4628      	mov	r0, r5
   bd100:	f7fb fb1d 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd104:	4912      	ldr	r1, [pc, #72]	; (bd150 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd106:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd10a:	f004 fa1a 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bd10e:	2002      	movs	r0, #2
   bd110:	e7c1      	b.n	bd096 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bd112:	2001      	movs	r0, #1
   bd114:	f001 f980 	bl	be418 <delay>
  while (millis() - startTime < maxTime)
   bd118:	e790      	b.n	bd03c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bd11a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd11e:	b193      	cbz	r3, bd146 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bd120:	490e      	ldr	r1, [pc, #56]	; (bd15c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bd122:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd126:	f004 f9f2 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bd12a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd12e:	f000 fe09 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
   bd132:	220a      	movs	r2, #10
   bd134:	1b81      	subs	r1, r0, r6
   bd136:	4628      	mov	r0, r5
   bd138:	f7fb fb01 	bl	b873e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bd13c:	4908      	ldr	r1, [pc, #32]	; (bd160 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bd13e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd142:	f004 f9fe 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bd146:	2003      	movs	r0, #3
   bd148:	e7a5      	b.n	bd096 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bd14a:	bf00      	nop
   bd14c:	000c7a34 	.word	0x000c7a34
   bd150:	000c7885 	.word	0x000c7885
   bd154:	000c7a6e 	.word	0x000c7a6e
   bd158:	000c7aa2 	.word	0x000c7aa2
   bd15c:	000c7adb 	.word	0x000c7adb
   bd160:	000c7b00 	.word	0x000c7b00

000bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bd164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bd168:	4604      	mov	r4, r0
   bd16a:	4698      	mov	r8, r3
   bd16c:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bd16e:	f7fc fcc9 	bl	b9b04 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bd172:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bd176:	460d      	mov	r5, r1
  if (_printDebug == true)
   bd178:	b14b      	cbz	r3, bd18e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bd17a:	492a      	ldr	r1, [pc, #168]	; (bd224 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bd17c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd180:	f004 f9c5 	bl	c150e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bd184:	2201      	movs	r2, #1
   bd186:	4629      	mov	r1, r5
   bd188:	4620      	mov	r0, r4
   bd18a:	f7fc fee9 	bl	b9f60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bd18e:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bd192:	b993      	cbnz	r3, bd1ba <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bd194:	463a      	mov	r2, r7
   bd196:	4629      	mov	r1, r5
   bd198:	4620      	mov	r0, r4
   bd19a:	f7fc fce1 	bl	b9b60 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bd19e:	4606      	mov	r6, r0
   bd1a0:	b188      	cbz	r0, bd1c6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd1a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd1a6:	b123      	cbz	r3, bd1b2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bd1a8:	491f      	ldr	r1, [pc, #124]	; (bd228 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bd1aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd1ae:	f004 f9c8 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bd1b2:	4630      	mov	r0, r6
   bd1b4:	b002      	add	sp, #8
   bd1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd1ba:	2b01      	cmp	r3, #1
   bd1bc:	d11b      	bne.n	bd1f6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bd1be:	4629      	mov	r1, r5
   bd1c0:	4620      	mov	r0, r4
   bd1c2:	f7fc fd8f 	bl	b9ce4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bd1c6:	b35f      	cbz	r7, bd220 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd1c8:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bd1ca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd1ce:	2a06      	cmp	r2, #6
   bd1d0:	d002      	beq.n	bd1d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bd1d2:	f1b8 0f00 	cmp.w	r8, #0
   bd1d6:	d015      	beq.n	bd204 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bd1d8:	b123      	cbz	r3, bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bd1da:	4914      	ldr	r1, [pc, #80]	; (bd22c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bd1dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd1e0:	f004 f9af 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd1e4:	786b      	ldrb	r3, [r5, #1]
   bd1e6:	782a      	ldrb	r2, [r5, #0]
   bd1e8:	9700      	str	r7, [sp, #0]
   bd1ea:	4629      	mov	r1, r5
   bd1ec:	4620      	mov	r0, r4
   bd1ee:	f7ff fdbd 	bl	bcd6c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd1f2:	4606      	mov	r6, r0
   bd1f4:	e7dd      	b.n	bd1b2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bd1f6:	2b02      	cmp	r3, #2
   bd1f8:	d1e5      	bne.n	bd1c6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bd1fa:	4629      	mov	r1, r5
   bd1fc:	4620      	mov	r0, r4
   bd1fe:	f7fc fdcb 	bl	b9d98 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bd202:	e7e0      	b.n	bd1c6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd204:	b123      	cbz	r3, bd210 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bd206:	490a      	ldr	r1, [pc, #40]	; (bd230 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bd208:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd20c:	f004 f999 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd210:	786b      	ldrb	r3, [r5, #1]
   bd212:	782a      	ldrb	r2, [r5, #0]
   bd214:	9700      	str	r7, [sp, #0]
   bd216:	4629      	mov	r1, r5
   bd218:	4620      	mov	r0, r4
   bd21a:	f7ff fef1 	bl	bd000 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bd21e:	e7e8      	b.n	bd1f2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bd220:	463e      	mov	r6, r7
   bd222:	e7c6      	b.n	bd1b2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bd224:	000c7b1b 	.word	0x000c7b1b
   bd228:	000c7b26 	.word	0x000c7b26
   bd22c:	000c7b3e 	.word	0x000c7b3e
   bd230:	000c7b64 	.word	0x000c7b64

000bd234 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bd234:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bd236:	4b09      	ldr	r3, [pc, #36]	; (bd25c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bd238:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd23c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd240:	2300      	movs	r3, #0
   bd242:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bd246:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bd248:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bd24c:	f7ff ff8a 	bl	bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bd250:	f1a0 030b 	sub.w	r3, r0, #11
   bd254:	4258      	negs	r0, r3
   bd256:	4158      	adcs	r0, r3
   bd258:	bd38      	pop	{r3, r4, r5, pc}
   bd25a:	bf00      	nop
   bd25c:	00010006 	.word	0x00010006

000bd260 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bd260:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd262:	4615      	mov	r5, r2
   bd264:	461a      	mov	r2, r3
   bd266:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd268:	9301      	str	r3, [sp, #4]
   bd26a:	f7ff ffe3 	bl	bd234 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd26e:	b190      	cbz	r0, bd296 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd270:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd274:	4b09      	ldr	r3, [pc, #36]	; (bd29c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bd276:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd27a:	2300      	movs	r3, #0
   bd27c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd280:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd282:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd284:	4620      	mov	r0, r4
   bd286:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd28a:	f7ff ff6b 	bl	bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd28e:	f1a0 030a 	sub.w	r3, r0, #10
   bd292:	4258      	negs	r0, r3
   bd294:	4158      	adcs	r0, r3
}
   bd296:	b003      	add	sp, #12
   bd298:	bd30      	pop	{r4, r5, pc}
   bd29a:	bf00      	nop
   bd29c:	00140006 	.word	0x00140006

000bd2a0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bd2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd2a2:	4615      	mov	r5, r2
   bd2a4:	461a      	mov	r2, r3
   bd2a6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd2a8:	9301      	str	r3, [sp, #4]
   bd2aa:	f7ff ffc3 	bl	bd234 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd2ae:	b190      	cbz	r0, bd2d6 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd2b0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd2b4:	4b09      	ldr	r3, [pc, #36]	; (bd2dc <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bd2b6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd2ba:	2300      	movs	r3, #0
   bd2bc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd2c0:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd2c2:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd2c4:	4620      	mov	r0, r4
   bd2c6:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd2ca:	f7ff ff4b 	bl	bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd2ce:	f1a0 030a 	sub.w	r3, r0, #10
   bd2d2:	4258      	negs	r0, r3
   bd2d4:	4158      	adcs	r0, r3
}
   bd2d6:	b003      	add	sp, #12
   bd2d8:	bd30      	pop	{r4, r5, pc}
   bd2da:	bf00      	nop
   bd2dc:	00140006 	.word	0x00140006

000bd2e0 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bd2e0:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bd2e2:	460a      	mov	r2, r1
   bd2e4:	2100      	movs	r1, #0
   bd2e6:	f7ff bfbb 	b.w	bd260 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bd2ec <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bd2ec:	b510      	push	{r4, lr}
   bd2ee:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bd2f0:	2074      	movs	r0, #116	; 0x74
   bd2f2:	f7f6 fed0 	bl	b4096 <_Znwj>
   bd2f6:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bd2f8:	b960      	cbnz	r0, bd314 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd2fa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd2fe:	b913      	cbnz	r3, bd306 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bd300:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd304:	b128      	cbz	r0, bd312 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bd306:	4908      	ldr	r1, [pc, #32]	; (bd328 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bd308:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd30c:	f004 f919 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd310:	2000      	movs	r0, #0
}
   bd312:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd314:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bd316:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bd31a:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd31e:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bd320:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bd322:	2001      	movs	r0, #1
   bd324:	e7f5      	b.n	bd312 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bd326:	bf00      	nop
   bd328:	000c7b8d 	.word	0x000c7b8d

000bd32c <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bd32c:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd32e:	6a03      	ldr	r3, [r0, #32]
{
   bd330:	4604      	mov	r4, r0
   bd332:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bd334:	b91b      	cbnz	r3, bd33e <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bd336:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd338:	f7ff ffd8 	bl	bd2ec <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd33c:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd33e:	6a20      	ldr	r0, [r4, #32]
   bd340:	b180      	cbz	r0, bd364 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd342:	7803      	ldrb	r3, [r0, #0]
   bd344:	f003 0303 	and.w	r3, r3, #3
   bd348:	2b03      	cmp	r3, #3
   bd34a:	d10d      	bne.n	bd368 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bd34c:	2307      	movs	r3, #7
   bd34e:	2201      	movs	r2, #1
   bd350:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd354:	4620      	mov	r0, r4
   bd356:	f7ff fcf1 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bd35a:	6a23      	ldr	r3, [r4, #32]
   bd35c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bd360:	f000 0001 	and.w	r0, r0, #1
}
   bd364:	b002      	add	sp, #8
   bd366:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd368:	2b01      	cmp	r3, #1
   bd36a:	f04f 0300 	mov.w	r3, #0
   bd36e:	d011      	beq.n	bd394 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bd370:	f240 7101 	movw	r1, #1793	; 0x701
   bd374:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bd378:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bd37c:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd380:	4620      	mov	r0, r4
   bd382:	f7ff feef 	bl	bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd386:	280b      	cmp	r0, #11
   bd388:	d006      	beq.n	bd398 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd38a:	f1a0 030d 	sub.w	r3, r0, #13
   bd38e:	4258      	negs	r0, r3
   bd390:	4158      	adcs	r0, r3
   bd392:	e7e7      	b.n	bd364 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bd394:	4618      	mov	r0, r3
   bd396:	e7e5      	b.n	bd364 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bd398:	2001      	movs	r0, #1
   bd39a:	e7e3      	b.n	bd364 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bd39c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bd39c:	b510      	push	{r4, lr}
   bd39e:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bd3a0:	2018      	movs	r0, #24
   bd3a2:	f7f6 fe78 	bl	b4096 <_Znwj>
   bd3a6:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bd3a8:	b960      	cbnz	r0, bd3c4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd3aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd3ae:	b913      	cbnz	r3, bd3b6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bd3b0:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd3b4:	b128      	cbz	r0, bd3c2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bd3b6:	4905      	ldr	r1, [pc, #20]	; (bd3cc <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bd3b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd3bc:	f004 f8c1 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd3c0:	2000      	movs	r0, #0
}
   bd3c2:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bd3c4:	2300      	movs	r3, #0
   bd3c6:	7503      	strb	r3, [r0, #20]
  return (true);
   bd3c8:	2001      	movs	r0, #1
   bd3ca:	e7fa      	b.n	bd3c2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bd3cc:	000c7bb4 	.word	0x000c7bb4

000bd3d0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bd3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bd3d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bd3d4:	4605      	mov	r5, r0
   bd3d6:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bd3d8:	b18b      	cbz	r3, bd3fe <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bd3da:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd3de:	4b13      	ldr	r3, [pc, #76]	; (bd42c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bd3e0:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd3e4:	2300      	movs	r3, #0
   bd3e6:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd3ea:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bd3ec:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd3ee:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bd3f2:	f7ff feb7 	bl	bd164 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd3f6:	280b      	cmp	r0, #11
   bd3f8:	d10b      	bne.n	bd412 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bd3fa:	2401      	movs	r4, #1
   bd3fc:	e00d      	b.n	bd41a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bd3fe:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bd400:	f7ff ffcc 	bl	bd39c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bd404:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bd406:	9a01      	ldr	r2, [sp, #4]
   bd408:	2c00      	cmp	r4, #0
   bd40a:	d1e6      	bne.n	bd3da <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bd40c:	4620      	mov	r0, r4
   bd40e:	b002      	add	sp, #8
   bd410:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd412:	f1a0 030d 	sub.w	r3, r0, #13
   bd416:	425c      	negs	r4, r3
   bd418:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bd41a:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bd41c:	b110      	cbz	r0, bd424 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bd41e:	2118      	movs	r1, #24
   bd420:	f7f6 fe3f 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bd424:	2300      	movs	r3, #0
   bd426:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bd428:	e7f0      	b.n	bd40c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bd42a:	bf00      	nop
   bd42c:	00010006 	.word	0x00010006

000bd430 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bd430:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bd432:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bd436:	4604      	mov	r4, r0
   bd438:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bd43a:	b145      	cbz	r5, bd44e <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bd43c:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bd440:	b9b1      	cbnz	r1, bd470 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd442:	4620      	mov	r0, r4
}
   bd444:	b003      	add	sp, #12
   bd446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd44a:	f7ff bfc1 	b.w	bd3d0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bd44e:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bd450:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bd454:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bd458:	f002 fd60 	bl	bff1c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd45c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd460:	f002 fd67 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
   bd464:	9a01      	ldr	r2, [sp, #4]
   bd466:	2800      	cmp	r0, #0
   bd468:	d0e8      	beq.n	bd43c <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd46a:	4628      	mov	r0, r5
   bd46c:	b003      	add	sp, #12
   bd46e:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd470:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd472:	bf18      	it	ne
   bd474:	2104      	movne	r1, #4
   bd476:	e7e4      	b.n	bd442 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd478 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd478:	b570      	push	{r4, r5, r6, lr}
   bd47a:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd47c:	2300      	movs	r3, #0
   bd47e:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd482:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd486:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd48a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd48e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd492:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd494:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd498:	b91b      	cbnz	r3, bd4a2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd49a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd49e:	f7fb f9ed 	bl	b887c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd4a2:	4620      	mov	r0, r4
   bd4a4:	f7fc fe04 	bl	ba0b0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd4a8:	4631      	mov	r1, r6
   bd4aa:	4620      	mov	r0, r4
   bd4ac:	f7ff ffc0 	bl	bd430 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd4b0:	b110      	cbz	r0, bd4b8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd4b2:	2501      	movs	r5, #1
}
   bd4b4:	4628      	mov	r0, r5
   bd4b6:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd4b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd4bc:	b913      	cbnz	r3, bd4c4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd4be:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd4c2:	b123      	cbz	r3, bd4ce <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd4c4:	4917      	ldr	r1, [pc, #92]	; (bd524 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd4c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd4ca:	f004 f83a 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd4ce:	4631      	mov	r1, r6
   bd4d0:	4620      	mov	r0, r4
   bd4d2:	f7ff ffad 	bl	bd430 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd4d6:	2800      	cmp	r0, #0
   bd4d8:	d1eb      	bne.n	bd4b2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd4da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd4de:	b913      	cbnz	r3, bd4e6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd4e0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd4e4:	b123      	cbz	r3, bd4f0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd4e6:	4910      	ldr	r1, [pc, #64]	; (bd528 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd4e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd4ec:	f004 f829 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd4f0:	4631      	mov	r1, r6
   bd4f2:	4620      	mov	r0, r4
   bd4f4:	f7ff ff9c 	bl	bd430 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd4f8:	2800      	cmp	r0, #0
   bd4fa:	d1da      	bne.n	bd4b2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd4fc:	2d00      	cmp	r5, #0
   bd4fe:	d0d9      	beq.n	bd4b4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd500:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd504:	2d00      	cmp	r5, #0
   bd506:	d0d5      	beq.n	bd4b4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd508:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd50c:	b91b      	cbnz	r3, bd516 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd50e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd512:	2b00      	cmp	r3, #0
   bd514:	d0cd      	beq.n	bd4b2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd516:	4905      	ldr	r1, [pc, #20]	; (bd52c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd518:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd51c:	f004 f811 	bl	c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd520:	e7c8      	b.n	bd4b4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd522:	bf00      	nop
   bd524:	000c7bdb 	.word	0x000c7bdb
   bd528:	000c7bff 	.word	0x000c7bff
   bd52c:	000c7c22 	.word	0x000c7c22

000bd530 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bd530:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd532:	6a03      	ldr	r3, [r0, #32]
{
   bd534:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd536:	b91b      	cbnz	r3, bd540 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bd538:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd53a:	f7ff fed7 	bl	bd2ec <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd53e:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd540:	6a20      	ldr	r0, [r4, #32]
   bd542:	b1b0      	cbz	r0, bd572 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bd544:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd548:	07db      	lsls	r3, r3, #31
   bd54a:	d402      	bmi.n	bd552 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bd54c:	4620      	mov	r0, r4
   bd54e:	f7ff feed 	bl	bd32c <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bd552:	6a23      	ldr	r3, [r4, #32]
   bd554:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd558:	f36f 0200 	bfc	r2, #0, #1
   bd55c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd560:	6a23      	ldr	r3, [r4, #32]
   bd562:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd566:	f36f 0200 	bfc	r2, #0, #1
   bd56a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bd56e:	6a23      	ldr	r3, [r4, #32]
   bd570:	69d8      	ldr	r0, [r3, #28]
}
   bd572:	b002      	add	sp, #8
   bd574:	bd10      	pop	{r4, pc}

000bd576 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bd576:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd578:	6a03      	ldr	r3, [r0, #32]
{
   bd57a:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd57c:	b91b      	cbnz	r3, bd586 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bd57e:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd580:	f7ff feb4 	bl	bd2ec <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd584:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd586:	6a20      	ldr	r0, [r4, #32]
   bd588:	b1b0      	cbz	r0, bd5b8 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bd58a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd58e:	079b      	lsls	r3, r3, #30
   bd590:	d402      	bmi.n	bd598 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bd592:	4620      	mov	r0, r4
   bd594:	f7ff feca 	bl	bd32c <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bd598:	6a23      	ldr	r3, [r4, #32]
   bd59a:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd59e:	f36f 0241 	bfc	r2, #1, #1
   bd5a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd5a6:	6a23      	ldr	r3, [r4, #32]
   bd5a8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd5ac:	f36f 0200 	bfc	r2, #0, #1
   bd5b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bd5b4:	6a23      	ldr	r3, [r4, #32]
   bd5b6:	6a18      	ldr	r0, [r3, #32]
}
   bd5b8:	b002      	add	sp, #8
   bd5ba:	bd10      	pop	{r4, pc}

000bd5bc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd5bc:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd5be:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd5c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd5c4:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd5c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd5ca:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd5cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd5d0:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd5d2:	2500      	movs	r5, #0
  _width = width;
   bd5d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd5d8:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd5da:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd5de:	7303      	strb	r3, [r0, #12]
}
   bd5e0:	bd30      	pop	{r4, r5, pc}

000bd5e2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd5e2:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd5e4:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd5e6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd5e8:	b085      	sub	sp, #20
   bd5ea:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd5ec:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd5ee:	f88d 400c 	strb.w	r4, [sp, #12]
   bd5f2:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd5f4:	460e      	mov	r6, r1
   bd5f6:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd5f8:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd5fc:	b140      	cbz	r0, bd610 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd5fe:	7b5b      	ldrb	r3, [r3, #13]
   bd600:	9301      	str	r3, [sp, #4]
   bd602:	ab03      	add	r3, sp, #12
   bd604:	9300      	str	r3, [sp, #0]
   bd606:	2301      	movs	r3, #1
   bd608:	f000 f90a 	bl	bd820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd60c:	b005      	add	sp, #20
   bd60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd610:	6858      	ldr	r0, [r3, #4]
   bd612:	2800      	cmp	r0, #0
   bd614:	d0fa      	beq.n	bd60c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd616:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd61a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd61e:	f1be 0f03 	cmp.w	lr, #3
   bd622:	d10c      	bne.n	bd63e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd624:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd628:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd62c:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd62e:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd632:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd636:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd638:	f000 fa2b 	bl	bda92 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd63c:	e7e6      	b.n	bd60c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd63e:	f1be 0f00 	cmp.w	lr, #0
   bd642:	d109      	bne.n	bd658 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd644:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd648:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd64c:	f8cd c000 	str.w	ip, [sp]
   bd650:	ab03      	add	r3, sp, #12
   bd652:	463a      	mov	r2, r7
   bd654:	4631      	mov	r1, r6
   bd656:	e7ef      	b.n	bd638 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd658:	f1be 0f02 	cmp.w	lr, #2
   bd65c:	d102      	bne.n	bd664 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd65e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd662:	e7f1      	b.n	bd648 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd664:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd668:	bf01      	itttt	eq
   bd66a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd66e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd672:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd676:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd67a:	e7e7      	b.n	bd64c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd67c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd67c:	b4f0      	push	{r4, r5, r6, r7}
   bd67e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd680:	b902      	cbnz	r2, bd684 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd682:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd684:	2a04      	cmp	r2, #4
   bd686:	d814      	bhi.n	bd6b2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd688:	f100 050f 	add.w	r5, r0, #15
   bd68c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd68e:	1884      	adds	r4, r0, r2
   bd690:	4629      	mov	r1, r5
   bd692:	4284      	cmp	r4, r0
   bd694:	d009      	beq.n	bd6aa <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd696:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd698:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd69a:	b927      	cbnz	r7, bd6a6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd69c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd69e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd6a0:	3501      	adds	r5, #1
   bd6a2:	3c01      	subs	r4, #1
   bd6a4:	e7f5      	b.n	bd692 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd6a6:	73a6      	strb	r6, [r4, #14]
   bd6a8:	e7f9      	b.n	bd69e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd6aa:	4620      	mov	r0, r4
}
   bd6ac:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd6ae:	f7ff bf98 	b.w	bd5e2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd6b2:	2000      	movs	r0, #0
   bd6b4:	bcf0      	pop	{r4, r5, r6, r7}
   bd6b6:	4770      	bx	lr

000bd6b8 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd6ba:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd6bc:	7a85      	ldrb	r5, [r0, #10]
   bd6be:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6c2:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd6c4:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd6c6:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6c8:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd6ca:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd6ce:	b140      	cbz	r0, bd6e2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd6d0:	2100      	movs	r1, #0
   bd6d2:	e9cd 2100 	strd	r2, r1, [sp]
   bd6d6:	a903      	add	r1, sp, #12
   bd6d8:	7b62      	ldrb	r2, [r4, #13]
   bd6da:	f000 f90f 	bl	bd8fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd6de:	b004      	add	sp, #16
   bd6e0:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd6e2:	6860      	ldr	r0, [r4, #4]
   bd6e4:	2800      	cmp	r0, #0
   bd6e6:	d0fa      	beq.n	bd6de <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd6e8:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd6ea:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd6ec:	2903      	cmp	r1, #3
   bd6ee:	d10d      	bne.n	bd70c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd6f0:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd6f4:	21ff      	movs	r1, #255	; 0xff
   bd6f6:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd6fa:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd6fe:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd702:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd704:	a903      	add	r1, sp, #12
   bd706:	f000 f9f6 	bl	bdaf6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd70a:	e7e8      	b.n	bd6de <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd70c:	b941      	cbnz	r1, bd720 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd70e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd712:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd716:	21ff      	movs	r1, #255	; 0xff
   bd718:	e9cd 2100 	strd	r2, r1, [sp]
   bd71c:	4622      	mov	r2, r4
   bd71e:	e7f1      	b.n	bd704 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd720:	2902      	cmp	r1, #2
   bd722:	d102      	bne.n	bd72a <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd724:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd728:	e7f3      	b.n	bd712 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd72a:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd72c:	bf02      	ittt	eq
   bd72e:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd732:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd736:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd73a:	e7ec      	b.n	bd716 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd73c <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd73c:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd73e:	f100 050f 	add.w	r5, r0, #15
   bd742:	7b02      	ldrb	r2, [r0, #12]
   bd744:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd746:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd748:	f7ff ffb6 	bl	bd6b8 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd74c:	b178      	cbz	r0, bd76e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd74e:	7b22      	ldrb	r2, [r4, #12]
   bd750:	4629      	mov	r1, r5
   bd752:	4422      	add	r2, r4
  uint32_t value = 0;
   bd754:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd756:	42a2      	cmp	r2, r4
   bd758:	d00b      	beq.n	bd772 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd75a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd75c:	7ba0      	ldrb	r0, [r4, #14]
   bd75e:	b920      	cbnz	r0, bd76a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd760:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd762:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd764:	3a01      	subs	r2, #1
   bd766:	3101      	adds	r1, #1
   bd768:	e7f5      	b.n	bd756 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd76a:	7808      	ldrb	r0, [r1, #0]
   bd76c:	e7f9      	b.n	bd762 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd76e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd772:	bd38      	pop	{r3, r4, r5, pc}

000bd774 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd774:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd776:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd778:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd77a:	7143      	strb	r3, [r0, #5]
}
   bd77c:	bd10      	pop	{r4, pc}

000bd77e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd77e:	b510      	push	{r4, lr}
   bd780:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd782:	6800      	ldr	r0, [r0, #0]
   bd784:	f7ff ffda 	bl	bd73c <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd788:	7922      	ldrb	r2, [r4, #4]
   bd78a:	2301      	movs	r3, #1
   bd78c:	4093      	lsls	r3, r2
  val >>= _shift;
   bd78e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd790:	3b01      	subs	r3, #1
  val >>= _shift;
   bd792:	40d0      	lsrs	r0, r2
}
   bd794:	4018      	ands	r0, r3
   bd796:	bd10      	pop	{r4, pc}

000bd798 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd798:	b570      	push	{r4, r5, r6, lr}
   bd79a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd79c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd79e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd7a0:	f7ff ffcc 	bl	bd73c <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd7a4:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd7a6:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd7a8:	2201      	movs	r2, #1
   bd7aa:	409a      	lsls	r2, r3
   bd7ac:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd7ae:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd7b2:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd7b6:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd7b8:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd7ba:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd7be:	4329      	orrs	r1, r5
   bd7c0:	7b02      	ldrb	r2, [r0, #12]
}
   bd7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd7c6:	f7ff bf59 	b.w	bd67c <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd7ca <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd7ca:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd7cc:	2200      	movs	r2, #0
   bd7ce:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd7d0:	2220      	movs	r2, #32
  _addr = addr;
   bd7d2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd7d4:	60c2      	str	r2, [r0, #12]
#endif
}
   bd7d6:	4770      	bx	lr

000bd7d8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd7d8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd7da:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd7dc:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd7de:	b153      	cbz	r3, bd7f6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd7e0:	7821      	ldrb	r1, [r4, #0]
   bd7e2:	6860      	ldr	r0, [r4, #4]
   bd7e4:	f002 fb9a 	bl	bff1c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd7e8:	6860      	ldr	r0, [r4, #4]
   bd7ea:	f002 fba2 	bl	bff32 <_ZN7TwoWire15endTransmissionEv>
   bd7ee:	fab0 f080 	clz	r0, r0
   bd7f2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd7f4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd7f6:	2101      	movs	r1, #1
   bd7f8:	f000 f803 	bl	bd802 <_ZN18Adafruit_I2CDevice5beginEb>
   bd7fc:	2800      	cmp	r0, #0
   bd7fe:	d1ef      	bne.n	bd7e0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd800:	e7f8      	b.n	bd7f4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd802 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd802:	b538      	push	{r3, r4, r5, lr}
   bd804:	4604      	mov	r4, r0
  _wire->begin();
   bd806:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd808:	460d      	mov	r5, r1
  _wire->begin();
   bd80a:	f002 fb55 	bl	bfeb8 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd80e:	2001      	movs	r0, #1
   bd810:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd812:	b125      	cbz	r5, bd81e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd814:	4620      	mov	r0, r4
}
   bd816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd81a:	f7ff bfdd 	b.w	bd7d8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd81e:	bd38      	pop	{r3, r4, r5, pc}

000bd820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd824:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd828:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd82a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd82c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd82e:	4432      	add	r2, r6
   bd830:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd832:	4604      	mov	r4, r0
   bd834:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd836:	d902      	bls.n	bd83e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd838:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd83e:	7801      	ldrb	r1, [r0, #0]
   bd840:	6840      	ldr	r0, [r0, #4]
   bd842:	f002 fb6b 	bl	bff1c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd846:	b97e      	cbnz	r6, bd868 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd848:	6860      	ldr	r0, [r4, #4]
   bd84a:	6803      	ldr	r3, [r0, #0]
   bd84c:	462a      	mov	r2, r5
   bd84e:	68db      	ldr	r3, [r3, #12]
   bd850:	4641      	mov	r1, r8
   bd852:	4798      	blx	r3
   bd854:	4285      	cmp	r5, r0
   bd856:	d1ef      	bne.n	bd838 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd858:	6860      	ldr	r0, [r4, #4]
   bd85a:	4639      	mov	r1, r7
   bd85c:	f002 fb65 	bl	bff2a <_ZN7TwoWire15endTransmissionEh>
   bd860:	fab0 f080 	clz	r0, r0
   bd864:	0940      	lsrs	r0, r0, #5
   bd866:	e7e8      	b.n	bd83a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd868:	f1b9 0f00 	cmp.w	r9, #0
   bd86c:	d0ec      	beq.n	bd848 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd86e:	6860      	ldr	r0, [r4, #4]
   bd870:	6803      	ldr	r3, [r0, #0]
   bd872:	4632      	mov	r2, r6
   bd874:	68db      	ldr	r3, [r3, #12]
   bd876:	4649      	mov	r1, r9
   bd878:	4798      	blx	r3
   bd87a:	4286      	cmp	r6, r0
   bd87c:	d1dc      	bne.n	bd838 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd87e:	e7e3      	b.n	bd848 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd880 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd884:	4615      	mov	r5, r2
   bd886:	4604      	mov	r4, r0
   bd888:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd88a:	b2d2      	uxtb	r2, r2
   bd88c:	7801      	ldrb	r1, [r0, #0]
   bd88e:	6840      	ldr	r0, [r0, #4]
   bd890:	f002 fb2f 	bl	bfef2 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd894:	4285      	cmp	r5, r0
   bd896:	d10d      	bne.n	bd8b4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd898:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd89a:	fa1f f887 	uxth.w	r8, r7
   bd89e:	45a8      	cmp	r8, r5
   bd8a0:	f107 0701 	add.w	r7, r7, #1
   bd8a4:	d209      	bcs.n	bd8ba <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd8a6:	6860      	ldr	r0, [r4, #4]
   bd8a8:	6803      	ldr	r3, [r0, #0]
   bd8aa:	695b      	ldr	r3, [r3, #20]
   bd8ac:	4798      	blx	r3
   bd8ae:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd8b2:	e7f2      	b.n	bd89a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd8b4:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd8ba:	2001      	movs	r0, #1
   bd8bc:	e7fb      	b.n	bd8b6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd8be <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd8be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd8c2:	4607      	mov	r7, r0
   bd8c4:	4688      	mov	r8, r1
   bd8c6:	4616      	mov	r6, r2
   bd8c8:	4699      	mov	r9, r3
  size_t pos = 0;
   bd8ca:	2500      	movs	r5, #0
  while (pos < len) {
   bd8cc:	42b5      	cmp	r5, r6
   bd8ce:	d212      	bcs.n	bd8f6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd8d0:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd8d2:	1b74      	subs	r4, r6, r5
   bd8d4:	4294      	cmp	r4, r2
   bd8d6:	bf28      	it	cs
   bd8d8:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd8da:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd8dc:	42ab      	cmp	r3, r5
   bd8de:	bf94      	ite	ls
   bd8e0:	464b      	movls	r3, r9
   bd8e2:	2300      	movhi	r3, #0
   bd8e4:	4622      	mov	r2, r4
   bd8e6:	eb08 0105 	add.w	r1, r8, r5
   bd8ea:	4638      	mov	r0, r7
   bd8ec:	f7ff ffc8 	bl	bd880 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd8f0:	b110      	cbz	r0, bd8f8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd8f2:	4425      	add	r5, r4
  while (pos < len) {
   bd8f4:	e7ea      	b.n	bd8cc <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd8f6:	2001      	movs	r0, #1
}
   bd8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd8fc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd8fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd8fe:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd900:	2300      	movs	r3, #0
   bd902:	e9cd 3300 	strd	r3, r3, [sp]
   bd906:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd90a:	9e06      	ldr	r6, [sp, #24]
   bd90c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd90e:	f7ff ff87 	bl	bd820 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd912:	b140      	cbz	r0, bd926 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd914:	2301      	movs	r3, #1
   bd916:	4632      	mov	r2, r6
   bd918:	4629      	mov	r1, r5
   bd91a:	4620      	mov	r0, r4
}
   bd91c:	b002      	add	sp, #8
   bd91e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd922:	f7ff bfcc 	b.w	bd8be <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd926:	b002      	add	sp, #8
   bd928:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd92c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd930:	4604      	mov	r4, r0
  if (_spi) {
   bd932:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd934:	b085      	sub	sp, #20
   bd936:	460d      	mov	r5, r1
  if (_spi) {
   bd938:	b140      	cbz	r0, bd94c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd93a:	2300      	movs	r3, #0
   bd93c:	9300      	str	r3, [sp, #0]
   bd93e:	4613      	mov	r3, r2
   bd940:	460a      	mov	r2, r1
   bd942:	f003 ffc9 	bl	c18d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd946:	b005      	add	sp, #20
   bd948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd94c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd94e:	68a0      	ldr	r0, [r4, #8]
   bd950:	4f48      	ldr	r7, [pc, #288]	; (bda74 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd952:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd956:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd958:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd95a:	bf0c      	ite	eq
   bd95c:	f04f 0b01 	moveq.w	fp, #1
   bd960:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd964:	ea1b 0f03 	tst.w	fp, r3
   bd968:	eb01 0302 	add.w	r3, r1, r2
   bd96c:	bf0c      	ite	eq
   bd96e:	f04f 0901 	moveq.w	r9, #1
   bd972:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd976:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd978:	9303      	str	r3, [sp, #12]
   bd97a:	9b03      	ldr	r3, [sp, #12]
   bd97c:	42ab      	cmp	r3, r5
   bd97e:	d0e2      	beq.n	bd946 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd980:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd984:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd986:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd98a:	b117      	cbz	r7, bd992 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd98c:	4638      	mov	r0, r7
   bd98e:	f000 f9c9 	bl	bdd24 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd992:	7b63      	ldrb	r3, [r4, #13]
   bd994:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd998:	d141      	bne.n	bda1e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd99a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd99e:	1c5a      	adds	r2, r3, #1
   bd9a0:	d00f      	beq.n	bd9c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd9a2:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd9a6:	bf14      	ite	ne
   bd9a8:	2301      	movne	r3, #1
   bd9aa:	2300      	moveq	r3, #0
   bd9ac:	454b      	cmp	r3, r9
   bd9ae:	d008      	beq.n	bd9c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd9b0:	6963      	ldr	r3, [r4, #20]
   bd9b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd9b4:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd9b6:	2900      	cmp	r1, #0
   bd9b8:	d02c      	beq.n	bda14 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd9ba:	4302      	orrs	r2, r0
   bd9bc:	601a      	str	r2, [r3, #0]
   bd9be:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd9c2:	69a1      	ldr	r1, [r4, #24]
   bd9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd9c6:	680a      	ldr	r2, [r1, #0]
   bd9c8:	4313      	orrs	r3, r2
   bd9ca:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd9cc:	b117      	cbz	r7, bd9d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd9ce:	4638      	mov	r0, r7
   bd9d0:	f000 f9a8 	bl	bdd24 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd9d4:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd9d8:	3301      	adds	r3, #1
   bd9da:	d006      	beq.n	bd9ea <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd9dc:	69e3      	ldr	r3, [r4, #28]
   bd9de:	681a      	ldr	r2, [r3, #0]
   bd9e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd9e2:	421a      	tst	r2, r3
            reply |= b;
   bd9e4:	bf18      	it	ne
   bd9e6:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd9ea:	69a1      	ldr	r1, [r4, #24]
   bd9ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd9ee:	680a      	ldr	r2, [r1, #0]
   bd9f0:	ea22 0303 	bic.w	r3, r2, r3
   bd9f4:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd9f6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd9fa:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd9fc:	bf18      	it	ne
   bd9fe:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bda02:	7b23      	ldrb	r3, [r4, #12]
   bda04:	2b00      	cmp	r3, #0
   bda06:	d132      	bne.n	bda6e <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bda08:	0076      	lsls	r6, r6, #1
   bda0a:	b2f6      	uxtb	r6, r6
   bda0c:	2e00      	cmp	r6, #0
   bda0e:	d1bc      	bne.n	bd98a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bda10:	3501      	adds	r5, #1
   bda12:	e7b2      	b.n	bd97a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bda14:	ea22 0200 	bic.w	r2, r2, r0
   bda18:	601a      	str	r2, [r3, #0]
   bda1a:	4689      	mov	r9, r1
   bda1c:	e7d1      	b.n	bd9c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bda1e:	69a1      	ldr	r1, [r4, #24]
   bda20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bda22:	680a      	ldr	r2, [r1, #0]
   bda24:	4313      	orrs	r3, r2
   bda26:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bda28:	b117      	cbz	r7, bda30 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bda2a:	4638      	mov	r0, r7
   bda2c:	f000 f97a 	bl	bdd24 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bda30:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bda34:	3301      	adds	r3, #1
   bda36:	d008      	beq.n	bda4a <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bda38:	6963      	ldr	r3, [r4, #20]
   bda3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bda3c:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bda3e:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bda42:	bf14      	ite	ne
   bda44:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bda46:	438a      	biceq	r2, r1
   bda48:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bda4a:	69a1      	ldr	r1, [r4, #24]
   bda4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bda4e:	680a      	ldr	r2, [r1, #0]
   bda50:	ea22 0303 	bic.w	r3, r2, r3
   bda54:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bda56:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bda5a:	3301      	adds	r3, #1
   bda5c:	d0cb      	beq.n	bd9f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bda5e:	69e3      	ldr	r3, [r4, #28]
   bda60:	681a      	ldr	r2, [r3, #0]
   bda62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bda64:	421a      	tst	r2, r3
            reply |= b;
   bda66:	bf18      	it	ne
   bda68:	ea46 0808 	orrne.w	r8, r6, r8
   bda6c:	e7c3      	b.n	bd9f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bda6e:	0876      	lsrs	r6, r6, #1
   bda70:	e7cc      	b.n	bda0c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bda72:	bf00      	nop
   bda74:	0007a120 	.word	0x0007a120

000bda78 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bda78:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bda7a:	2201      	movs	r2, #1
  uint8_t data = send;
   bda7c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bda80:	f10d 0107 	add.w	r1, sp, #7
   bda84:	f7ff ff52 	bl	bd92c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bda88:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bda8c:	b003      	add	sp, #12
   bda8e:	f85d fb04 	ldr.w	pc, [sp], #4

000bda92 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bda92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda96:	4604      	mov	r4, r0
  if (_spi) {
   bda98:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bda9a:	460e      	mov	r6, r1
   bda9c:	4617      	mov	r7, r2
   bda9e:	461d      	mov	r5, r3
  if (_spi) {
   bdaa0:	b110      	cbz	r0, bdaa8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bdaa2:	6861      	ldr	r1, [r4, #4]
   bdaa4:	f003 fe72 	bl	c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bdaa8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdaac:	2100      	movs	r1, #0
   bdaae:	b280      	uxth	r0, r0
   bdab0:	f004 fb0f 	bl	c20d2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bdab4:	9b06      	ldr	r3, [sp, #24]
   bdab6:	eb05 0803 	add.w	r8, r5, r3
   bdaba:	4545      	cmp	r5, r8
   bdabc:	d108      	bne.n	bdad0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bdabe:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bdac0:	42b7      	cmp	r7, r6
   bdac2:	d00b      	beq.n	bdadc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bdac4:	f816 1b01 	ldrb.w	r1, [r6], #1
   bdac8:	4620      	mov	r0, r4
   bdaca:	f7ff ffd5 	bl	bda78 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bdace:	e7f7      	b.n	bdac0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bdad0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bdad4:	4620      	mov	r0, r4
   bdad6:	f7ff ffcf 	bl	bda78 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bdada:	e7ee      	b.n	bdaba <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bdadc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdae0:	2101      	movs	r1, #1
   bdae2:	b280      	uxth	r0, r0
   bdae4:	f004 faf5 	bl	c20d2 <digitalWrite>

  if (_spi) {
   bdae8:	6820      	ldr	r0, [r4, #0]
   bdaea:	b108      	cbz	r0, bdaf0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bdaec:	f003 fe34 	bl	c1758 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bdaf0:	2001      	movs	r0, #1
   bdaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdaf6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bdaf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdafa:	4604      	mov	r4, r0
  if (_spi) {
   bdafc:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bdafe:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bdb02:	460e      	mov	r6, r1
   bdb04:	4617      	mov	r7, r2
   bdb06:	461d      	mov	r5, r3
  if (_spi) {
   bdb08:	b110      	cbz	r0, bdb10 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bdb0a:	6861      	ldr	r1, [r4, #4]
   bdb0c:	f003 fe3e 	bl	c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bdb10:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdb14:	2100      	movs	r1, #0
   bdb16:	b280      	uxth	r0, r0
   bdb18:	f004 fadb 	bl	c20d2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bdb1c:	4437      	add	r7, r6
   bdb1e:	42be      	cmp	r6, r7
   bdb20:	d10a      	bne.n	bdb38 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bdb22:	9b06      	ldr	r3, [sp, #24]
   bdb24:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bdb26:	42ae      	cmp	r6, r5
   bdb28:	d00c      	beq.n	bdb44 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bdb2a:	4641      	mov	r1, r8
   bdb2c:	4620      	mov	r0, r4
   bdb2e:	f7ff ffa3 	bl	bda78 <_ZN18Adafruit_SPIDevice8transferEh>
   bdb32:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bdb36:	e7f6      	b.n	bdb26 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bdb38:	f816 1b01 	ldrb.w	r1, [r6], #1
   bdb3c:	4620      	mov	r0, r4
   bdb3e:	f7ff ff9b 	bl	bda78 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bdb42:	e7ec      	b.n	bdb1e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bdb44:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdb48:	2101      	movs	r1, #1
   bdb4a:	b280      	uxth	r0, r0
   bdb4c:	f004 fac1 	bl	c20d2 <digitalWrite>

  if (_spi) {
   bdb50:	6820      	ldr	r0, [r4, #0]
   bdb52:	b108      	cbz	r0, bdb58 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bdb54:	f003 fe00 	bl	c1758 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bdb58:	2001      	movs	r0, #1
   bdb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bdb60 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdb60:	b508      	push	{r3, lr}
   bdb62:	4b02      	ldr	r3, [pc, #8]	; (bdb6c <hal_ble_stack_init+0xc>)
   bdb64:	681b      	ldr	r3, [r3, #0]
   bdb66:	689b      	ldr	r3, [r3, #8]
   bdb68:	9301      	str	r3, [sp, #4]
   bdb6a:	bd08      	pop	{r3, pc}
   bdb6c:	00030278 	.word	0x00030278

000bdb70 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdb70:	b508      	push	{r3, lr}
   bdb72:	4b02      	ldr	r3, [pc, #8]	; (bdb7c <hal_ble_gap_set_tx_power+0xc>)
   bdb74:	681b      	ldr	r3, [r3, #0]
   bdb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdb78:	9301      	str	r3, [sp, #4]
   bdb7a:	bd08      	pop	{r3, pc}
   bdb7c:	00030278 	.word	0x00030278

000bdb80 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdb80:	b508      	push	{r3, lr}
   bdb82:	4b02      	ldr	r3, [pc, #8]	; (bdb8c <hal_ble_gap_set_advertising_data+0xc>)
   bdb84:	681b      	ldr	r3, [r3, #0]
   bdb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdb88:	9301      	str	r3, [sp, #4]
   bdb8a:	bd08      	pop	{r3, pc}
   bdb8c:	00030278 	.word	0x00030278

000bdb90 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdb90:	b508      	push	{r3, lr}
   bdb92:	4b02      	ldr	r3, [pc, #8]	; (bdb9c <hal_ble_gap_set_scan_response_data+0xc>)
   bdb94:	681b      	ldr	r3, [r3, #0]
   bdb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdb98:	9301      	str	r3, [sp, #4]
   bdb9a:	bd08      	pop	{r3, pc}
   bdb9c:	00030278 	.word	0x00030278

000bdba0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdba0:	b508      	push	{r3, lr}
   bdba2:	4b02      	ldr	r3, [pc, #8]	; (bdbac <hal_ble_gap_start_advertising+0xc>)
   bdba4:	681b      	ldr	r3, [r3, #0]
   bdba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdba8:	9301      	str	r3, [sp, #4]
   bdbaa:	bd08      	pop	{r3, pc}
   bdbac:	00030278 	.word	0x00030278

000bdbb0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdbb0:	b508      	push	{r3, lr}
   bdbb2:	4b03      	ldr	r3, [pc, #12]	; (bdbc0 <hal_ble_gap_disconnect+0x10>)
   bdbb4:	681b      	ldr	r3, [r3, #0]
   bdbb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdbba:	9301      	str	r3, [sp, #4]
   bdbbc:	bd08      	pop	{r3, pc}
   bdbbe:	0000      	.short	0x0000
   bdbc0:	00030278 	.word	0x00030278

000bdbc4 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdbc4:	b508      	push	{r3, lr}
   bdbc6:	4b03      	ldr	r3, [pc, #12]	; (bdbd4 <hal_ble_gatt_server_add_service+0x10>)
   bdbc8:	681b      	ldr	r3, [r3, #0]
   bdbca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdbce:	9301      	str	r3, [sp, #4]
   bdbd0:	bd08      	pop	{r3, pc}
   bdbd2:	0000      	.short	0x0000
   bdbd4:	00030278 	.word	0x00030278

000bdbd8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdbd8:	b508      	push	{r3, lr}
   bdbda:	4b03      	ldr	r3, [pc, #12]	; (bdbe8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdbdc:	681b      	ldr	r3, [r3, #0]
   bdbde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdbe2:	9301      	str	r3, [sp, #4]
   bdbe4:	bd08      	pop	{r3, pc}
   bdbe6:	0000      	.short	0x0000
   bdbe8:	00030278 	.word	0x00030278

000bdbec <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdbec:	b508      	push	{r3, lr}
   bdbee:	4b03      	ldr	r3, [pc, #12]	; (bdbfc <hal_ble_gatt_client_write_with_response+0x10>)
   bdbf0:	681b      	ldr	r3, [r3, #0]
   bdbf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdbf6:	9301      	str	r3, [sp, #4]
   bdbf8:	bd08      	pop	{r3, pc}
   bdbfa:	0000      	.short	0x0000
   bdbfc:	00030278 	.word	0x00030278

000bdc00 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc00:	b508      	push	{r3, lr}
   bdc02:	4b03      	ldr	r3, [pc, #12]	; (bdc10 <hal_ble_gatt_client_write_without_response+0x10>)
   bdc04:	681b      	ldr	r3, [r3, #0]
   bdc06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdc0a:	9301      	str	r3, [sp, #4]
   bdc0c:	bd08      	pop	{r3, pc}
   bdc0e:	0000      	.short	0x0000
   bdc10:	00030278 	.word	0x00030278

000bdc14 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdc14:	b508      	push	{r3, lr}
   bdc16:	4b03      	ldr	r3, [pc, #12]	; (bdc24 <hal_ble_gatt_server_add_characteristic+0x10>)
   bdc18:	681b      	ldr	r3, [r3, #0]
   bdc1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdc1e:	9301      	str	r3, [sp, #4]
   bdc20:	bd08      	pop	{r3, pc}
   bdc22:	0000      	.short	0x0000
   bdc24:	00030278 	.word	0x00030278

000bdc28 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdc28:	b508      	push	{r3, lr}
   bdc2a:	4b03      	ldr	r3, [pc, #12]	; (bdc38 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdc2c:	681b      	ldr	r3, [r3, #0]
   bdc2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdc32:	9301      	str	r3, [sp, #4]
   bdc34:	bd08      	pop	{r3, pc}
   bdc36:	0000      	.short	0x0000
   bdc38:	00030278 	.word	0x00030278

000bdc3c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc3c:	b508      	push	{r3, lr}
   bdc3e:	4b03      	ldr	r3, [pc, #12]	; (bdc4c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdc40:	681b      	ldr	r3, [r3, #0]
   bdc42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdc46:	9301      	str	r3, [sp, #4]
   bdc48:	bd08      	pop	{r3, pc}
   bdc4a:	0000      	.short	0x0000
   bdc4c:	00030278 	.word	0x00030278

000bdc50 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc50:	b508      	push	{r3, lr}
   bdc52:	4b03      	ldr	r3, [pc, #12]	; (bdc60 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdc54:	681b      	ldr	r3, [r3, #0]
   bdc56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdc5a:	9301      	str	r3, [sp, #4]
   bdc5c:	bd08      	pop	{r3, pc}
   bdc5e:	0000      	.short	0x0000
   bdc60:	00030278 	.word	0x00030278

000bdc64 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdc64:	b508      	push	{r3, lr}
   bdc66:	4b02      	ldr	r3, [pc, #8]	; (bdc70 <os_thread_yield+0xc>)
   bdc68:	681b      	ldr	r3, [r3, #0]
   bdc6a:	68db      	ldr	r3, [r3, #12]
   bdc6c:	9301      	str	r3, [sp, #4]
   bdc6e:	bd08      	pop	{r3, pc}
   bdc70:	00030248 	.word	0x00030248

000bdc74 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdc74:	b508      	push	{r3, lr}
   bdc76:	4b02      	ldr	r3, [pc, #8]	; (bdc80 <os_thread_scheduling+0xc>)
   bdc78:	681b      	ldr	r3, [r3, #0]
   bdc7a:	69db      	ldr	r3, [r3, #28]
   bdc7c:	9301      	str	r3, [sp, #4]
   bdc7e:	bd08      	pop	{r3, pc}
   bdc80:	00030248 	.word	0x00030248

000bdc84 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bdc84:	b508      	push	{r3, lr}
   bdc86:	4b02      	ldr	r3, [pc, #8]	; (bdc90 <os_timer_create+0xc>)
   bdc88:	681b      	ldr	r3, [r3, #0]
   bdc8a:	6a1b      	ldr	r3, [r3, #32]
   bdc8c:	9301      	str	r3, [sp, #4]
   bdc8e:	bd08      	pop	{r3, pc}
   bdc90:	00030248 	.word	0x00030248

000bdc94 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b02      	ldr	r3, [pc, #8]	; (bdca0 <os_timer_destroy+0xc>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdc9c:	9301      	str	r3, [sp, #4]
   bdc9e:	bd08      	pop	{r3, pc}
   bdca0:	00030248 	.word	0x00030248

000bdca4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bdca4:	b508      	push	{r3, lr}
   bdca6:	4b02      	ldr	r3, [pc, #8]	; (bdcb0 <os_timer_get_id+0xc>)
   bdca8:	681b      	ldr	r3, [r3, #0]
   bdcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdcac:	9301      	str	r3, [sp, #4]
   bdcae:	bd08      	pop	{r3, pc}
   bdcb0:	00030248 	.word	0x00030248

000bdcb4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdcb4:	b508      	push	{r3, lr}
   bdcb6:	4b02      	ldr	r3, [pc, #8]	; (bdcc0 <os_timer_change+0xc>)
   bdcb8:	681b      	ldr	r3, [r3, #0]
   bdcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdcbc:	9301      	str	r3, [sp, #4]
   bdcbe:	bd08      	pop	{r3, pc}
   bdcc0:	00030248 	.word	0x00030248

000bdcc4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bdcc4:	b508      	push	{r3, lr}
   bdcc6:	4b02      	ldr	r3, [pc, #8]	; (bdcd0 <os_mutex_recursive_create+0xc>)
   bdcc8:	681b      	ldr	r3, [r3, #0]
   bdcca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdccc:	9301      	str	r3, [sp, #4]
   bdcce:	bd08      	pop	{r3, pc}
   bdcd0:	00030248 	.word	0x00030248

000bdcd4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdcd4:	b508      	push	{r3, lr}
   bdcd6:	4b02      	ldr	r3, [pc, #8]	; (bdce0 <os_mutex_recursive_destroy+0xc>)
   bdcd8:	681b      	ldr	r3, [r3, #0]
   bdcda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdcdc:	9301      	str	r3, [sp, #4]
   bdcde:	bd08      	pop	{r3, pc}
   bdce0:	00030248 	.word	0x00030248

000bdce4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b02      	ldr	r3, [pc, #8]	; (bdcf0 <os_mutex_recursive_lock+0xc>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdcec:	9301      	str	r3, [sp, #4]
   bdcee:	bd08      	pop	{r3, pc}
   bdcf0:	00030248 	.word	0x00030248

000bdcf4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdcf4:	b508      	push	{r3, lr}
   bdcf6:	4b02      	ldr	r3, [pc, #8]	; (bdd00 <os_mutex_recursive_unlock+0xc>)
   bdcf8:	681b      	ldr	r3, [r3, #0]
   bdcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdcfc:	9301      	str	r3, [sp, #4]
   bdcfe:	bd08      	pop	{r3, pc}
   bdd00:	00030248 	.word	0x00030248

000bdd04 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdd04:	b508      	push	{r3, lr}
   bdd06:	4b02      	ldr	r3, [pc, #8]	; (bdd10 <os_timer_set_id+0xc>)
   bdd08:	681b      	ldr	r3, [r3, #0]
   bdd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdd0c:	9301      	str	r3, [sp, #4]
   bdd0e:	bd08      	pop	{r3, pc}
   bdd10:	00030248 	.word	0x00030248

000bdd14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdd14:	b508      	push	{r3, lr}
   bdd16:	4b02      	ldr	r3, [pc, #8]	; (bdd20 <HAL_RNG_GetRandomNumber+0xc>)
   bdd18:	681b      	ldr	r3, [r3, #0]
   bdd1a:	685b      	ldr	r3, [r3, #4]
   bdd1c:	9301      	str	r3, [sp, #4]
   bdd1e:	bd08      	pop	{r3, pc}
   bdd20:	00030218 	.word	0x00030218

000bdd24 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdd24:	b508      	push	{r3, lr}
   bdd26:	4b02      	ldr	r3, [pc, #8]	; (bdd30 <HAL_Delay_Microseconds+0xc>)
   bdd28:	681b      	ldr	r3, [r3, #0]
   bdd2a:	68db      	ldr	r3, [r3, #12]
   bdd2c:	9301      	str	r3, [sp, #4]
   bdd2e:	bd08      	pop	{r3, pc}
   bdd30:	00030218 	.word	0x00030218

000bdd34 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bdd34:	b508      	push	{r3, lr}
   bdd36:	4b02      	ldr	r3, [pc, #8]	; (bdd40 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bdd38:	681b      	ldr	r3, [r3, #0]
   bdd3a:	691b      	ldr	r3, [r3, #16]
   bdd3c:	9301      	str	r3, [sp, #4]
   bdd3e:	bd08      	pop	{r3, pc}
   bdd40:	00030218 	.word	0x00030218

000bdd44 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bdd44:	b508      	push	{r3, lr}
   bdd46:	4b02      	ldr	r3, [pc, #8]	; (bdd50 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bdd48:	681b      	ldr	r3, [r3, #0]
   bdd4a:	695b      	ldr	r3, [r3, #20]
   bdd4c:	9301      	str	r3, [sp, #4]
   bdd4e:	bd08      	pop	{r3, pc}
   bdd50:	00030218 	.word	0x00030218

000bdd54 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bdd54:	b508      	push	{r3, lr}
   bdd56:	4b02      	ldr	r3, [pc, #8]	; (bdd60 <hal_rtc_time_is_valid+0xc>)
   bdd58:	681b      	ldr	r3, [r3, #0]
   bdd5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdd5c:	9301      	str	r3, [sp, #4]
   bdd5e:	bd08      	pop	{r3, pc}
   bdd60:	00030218 	.word	0x00030218

000bdd64 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdd64:	b508      	push	{r3, lr}
   bdd66:	4b02      	ldr	r3, [pc, #8]	; (bdd70 <hal_rtc_get_time+0xc>)
   bdd68:	681b      	ldr	r3, [r3, #0]
   bdd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdd6c:	9301      	str	r3, [sp, #4]
   bdd6e:	bd08      	pop	{r3, pc}
   bdd70:	00030218 	.word	0x00030218

000bdd74 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bdd74:	b508      	push	{r3, lr}
   bdd76:	4b02      	ldr	r3, [pc, #8]	; (bdd80 <HAL_Validate_Pin_Function+0xc>)
   bdd78:	681b      	ldr	r3, [r3, #0]
   bdd7a:	685b      	ldr	r3, [r3, #4]
   bdd7c:	9301      	str	r3, [sp, #4]
   bdd7e:	bd08      	pop	{r3, pc}
   bdd80:	0003022c 	.word	0x0003022c

000bdd84 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bdd84:	b508      	push	{r3, lr}
   bdd86:	4b02      	ldr	r3, [pc, #8]	; (bdd90 <HAL_Pin_Mode+0xc>)
   bdd88:	681b      	ldr	r3, [r3, #0]
   bdd8a:	689b      	ldr	r3, [r3, #8]
   bdd8c:	9301      	str	r3, [sp, #4]
   bdd8e:	bd08      	pop	{r3, pc}
   bdd90:	0003022c 	.word	0x0003022c

000bdd94 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bdd94:	b508      	push	{r3, lr}
   bdd96:	4b02      	ldr	r3, [pc, #8]	; (bdda0 <HAL_Get_Pin_Mode+0xc>)
   bdd98:	681b      	ldr	r3, [r3, #0]
   bdd9a:	68db      	ldr	r3, [r3, #12]
   bdd9c:	9301      	str	r3, [sp, #4]
   bdd9e:	bd08      	pop	{r3, pc}
   bdda0:	0003022c 	.word	0x0003022c

000bdda4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bdda4:	b508      	push	{r3, lr}
   bdda6:	4b02      	ldr	r3, [pc, #8]	; (bddb0 <HAL_GPIO_Write+0xc>)
   bdda8:	681b      	ldr	r3, [r3, #0]
   bddaa:	691b      	ldr	r3, [r3, #16]
   bddac:	9301      	str	r3, [sp, #4]
   bddae:	bd08      	pop	{r3, pc}
   bddb0:	0003022c 	.word	0x0003022c

000bddb4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bddb4:	b508      	push	{r3, lr}
   bddb6:	4b02      	ldr	r3, [pc, #8]	; (bddc0 <HAL_GPIO_Read+0xc>)
   bddb8:	681b      	ldr	r3, [r3, #0]
   bddba:	695b      	ldr	r3, [r3, #20]
   bddbc:	9301      	str	r3, [sp, #4]
   bddbe:	bd08      	pop	{r3, pc}
   bddc0:	0003022c 	.word	0x0003022c

000bddc4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bddc4:	b508      	push	{r3, lr}
   bddc6:	4b02      	ldr	r3, [pc, #8]	; (bddd0 <HAL_Interrupts_Attach+0xc>)
   bddc8:	681b      	ldr	r3, [r3, #0]
   bddca:	699b      	ldr	r3, [r3, #24]
   bddcc:	9301      	str	r3, [sp, #4]
   bddce:	bd08      	pop	{r3, pc}
   bddd0:	0003022c 	.word	0x0003022c

000bddd4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bddd4:	b508      	push	{r3, lr}
   bddd6:	4b02      	ldr	r3, [pc, #8]	; (bdde0 <HAL_Interrupts_Detach+0xc>)
   bddd8:	681b      	ldr	r3, [r3, #0]
   bddda:	69db      	ldr	r3, [r3, #28]
   bdddc:	9301      	str	r3, [sp, #4]
   bddde:	bd08      	pop	{r3, pc}
   bdde0:	0003022c 	.word	0x0003022c

000bdde4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bdde4:	b508      	push	{r3, lr}
   bdde6:	4b02      	ldr	r3, [pc, #8]	; (bddf0 <HAL_Interrupts_Enable_All+0xc>)
   bdde8:	681b      	ldr	r3, [r3, #0]
   bddea:	6a1b      	ldr	r3, [r3, #32]
   bddec:	9301      	str	r3, [sp, #4]
   bddee:	bd08      	pop	{r3, pc}
   bddf0:	0003022c 	.word	0x0003022c

000bddf4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bddf4:	b508      	push	{r3, lr}
   bddf6:	4b02      	ldr	r3, [pc, #8]	; (bde00 <HAL_Interrupts_Disable_All+0xc>)
   bddf8:	681b      	ldr	r3, [r3, #0]
   bddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bddfc:	9301      	str	r3, [sp, #4]
   bddfe:	bd08      	pop	{r3, pc}
   bde00:	0003022c 	.word	0x0003022c

000bde04 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bde04:	b508      	push	{r3, lr}
   bde06:	4b02      	ldr	r3, [pc, #8]	; (bde10 <hal_adc_read+0xc>)
   bde08:	681b      	ldr	r3, [r3, #0]
   bde0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bde0c:	9301      	str	r3, [sp, #4]
   bde0e:	bd08      	pop	{r3, pc}
   bde10:	0003022c 	.word	0x0003022c

000bde14 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bde14:	b508      	push	{r3, lr}
   bde16:	4b02      	ldr	r3, [pc, #8]	; (bde20 <hal_i2c_set_speed+0xc>)
   bde18:	681b      	ldr	r3, [r3, #0]
   bde1a:	681b      	ldr	r3, [r3, #0]
   bde1c:	9301      	str	r3, [sp, #4]
   bde1e:	bd08      	pop	{r3, pc}
   bde20:	00030228 	.word	0x00030228

000bde24 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bde24:	b508      	push	{r3, lr}
   bde26:	4b02      	ldr	r3, [pc, #8]	; (bde30 <hal_i2c_begin+0xc>)
   bde28:	681b      	ldr	r3, [r3, #0]
   bde2a:	68db      	ldr	r3, [r3, #12]
   bde2c:	9301      	str	r3, [sp, #4]
   bde2e:	bd08      	pop	{r3, pc}
   bde30:	00030228 	.word	0x00030228

000bde34 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bde34:	b508      	push	{r3, lr}
   bde36:	4b02      	ldr	r3, [pc, #8]	; (bde40 <hal_i2c_begin_transmission+0xc>)
   bde38:	681b      	ldr	r3, [r3, #0]
   bde3a:	699b      	ldr	r3, [r3, #24]
   bde3c:	9301      	str	r3, [sp, #4]
   bde3e:	bd08      	pop	{r3, pc}
   bde40:	00030228 	.word	0x00030228

000bde44 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bde44:	b508      	push	{r3, lr}
   bde46:	4b02      	ldr	r3, [pc, #8]	; (bde50 <hal_i2c_end_transmission+0xc>)
   bde48:	681b      	ldr	r3, [r3, #0]
   bde4a:	69db      	ldr	r3, [r3, #28]
   bde4c:	9301      	str	r3, [sp, #4]
   bde4e:	bd08      	pop	{r3, pc}
   bde50:	00030228 	.word	0x00030228

000bde54 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bde54:	b508      	push	{r3, lr}
   bde56:	4b02      	ldr	r3, [pc, #8]	; (bde60 <hal_i2c_write+0xc>)
   bde58:	681b      	ldr	r3, [r3, #0]
   bde5a:	6a1b      	ldr	r3, [r3, #32]
   bde5c:	9301      	str	r3, [sp, #4]
   bde5e:	bd08      	pop	{r3, pc}
   bde60:	00030228 	.word	0x00030228

000bde64 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bde64:	b508      	push	{r3, lr}
   bde66:	4b02      	ldr	r3, [pc, #8]	; (bde70 <hal_i2c_available+0xc>)
   bde68:	681b      	ldr	r3, [r3, #0]
   bde6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bde6c:	9301      	str	r3, [sp, #4]
   bde6e:	bd08      	pop	{r3, pc}
   bde70:	00030228 	.word	0x00030228

000bde74 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bde74:	b508      	push	{r3, lr}
   bde76:	4b02      	ldr	r3, [pc, #8]	; (bde80 <hal_i2c_read+0xc>)
   bde78:	681b      	ldr	r3, [r3, #0]
   bde7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bde7c:	9301      	str	r3, [sp, #4]
   bde7e:	bd08      	pop	{r3, pc}
   bde80:	00030228 	.word	0x00030228

000bde84 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bde84:	b508      	push	{r3, lr}
   bde86:	4b02      	ldr	r3, [pc, #8]	; (bde90 <hal_i2c_peek+0xc>)
   bde88:	681b      	ldr	r3, [r3, #0]
   bde8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde8c:	9301      	str	r3, [sp, #4]
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	00030228 	.word	0x00030228

000bde94 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bde94:	b508      	push	{r3, lr}
   bde96:	4b02      	ldr	r3, [pc, #8]	; (bdea0 <hal_i2c_flush+0xc>)
   bde98:	681b      	ldr	r3, [r3, #0]
   bde9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bde9c:	9301      	str	r3, [sp, #4]
   bde9e:	bd08      	pop	{r3, pc}
   bdea0:	00030228 	.word	0x00030228

000bdea4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdea4:	b508      	push	{r3, lr}
   bdea6:	4b02      	ldr	r3, [pc, #8]	; (bdeb0 <hal_i2c_is_enabled+0xc>)
   bdea8:	681b      	ldr	r3, [r3, #0]
   bdeaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdeac:	9301      	str	r3, [sp, #4]
   bdeae:	bd08      	pop	{r3, pc}
   bdeb0:	00030228 	.word	0x00030228

000bdeb4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bdeb4:	b508      	push	{r3, lr}
   bdeb6:	4b02      	ldr	r3, [pc, #8]	; (bdec0 <hal_i2c_init+0xc>)
   bdeb8:	681b      	ldr	r3, [r3, #0]
   bdeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdebc:	9301      	str	r3, [sp, #4]
   bdebe:	bd08      	pop	{r3, pc}
   bdec0:	00030228 	.word	0x00030228

000bdec4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bdec4:	b508      	push	{r3, lr}
   bdec6:	4b02      	ldr	r3, [pc, #8]	; (bded0 <hal_i2c_request_ex+0xc>)
   bdec8:	681b      	ldr	r3, [r3, #0]
   bdeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdecc:	9301      	str	r3, [sp, #4]
   bdece:	bd08      	pop	{r3, pc}
   bded0:	00030228 	.word	0x00030228

000bded4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bded4:	b508      	push	{r3, lr}
   bded6:	4b02      	ldr	r3, [pc, #8]	; (bdee0 <inet_inet_ntop+0xc>)
   bded8:	681b      	ldr	r3, [r3, #0]
   bdeda:	695b      	ldr	r3, [r3, #20]
   bdedc:	9301      	str	r3, [sp, #4]
   bdede:	bd08      	pop	{r3, pc}
   bdee0:	00030264 	.word	0x00030264

000bdee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bdee4:	b508      	push	{r3, lr}
   bdee6:	4b02      	ldr	r3, [pc, #8]	; (bdef0 <netdb_freeaddrinfo+0xc>)
   bdee8:	681b      	ldr	r3, [r3, #0]
   bdeea:	689b      	ldr	r3, [r3, #8]
   bdeec:	9301      	str	r3, [sp, #4]
   bdeee:	bd08      	pop	{r3, pc}
   bdef0:	00030268 	.word	0x00030268

000bdef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bdef4:	b508      	push	{r3, lr}
   bdef6:	4b02      	ldr	r3, [pc, #8]	; (bdf00 <netdb_getaddrinfo+0xc>)
   bdef8:	681b      	ldr	r3, [r3, #0]
   bdefa:	68db      	ldr	r3, [r3, #12]
   bdefc:	9301      	str	r3, [sp, #4]
   bdefe:	bd08      	pop	{r3, pc}
   bdf00:	00030268 	.word	0x00030268

000bdf04 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bdf04:	b508      	push	{r3, lr}
   bdf06:	4b02      	ldr	r3, [pc, #8]	; (bdf10 <HAL_Servo_Attach+0xc>)
   bdf08:	681b      	ldr	r3, [r3, #0]
   bdf0a:	691b      	ldr	r3, [r3, #16]
   bdf0c:	9301      	str	r3, [sp, #4]
   bdf0e:	bd08      	pop	{r3, pc}
   bdf10:	00030224 	.word	0x00030224

000bdf14 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bdf14:	b508      	push	{r3, lr}
   bdf16:	4b02      	ldr	r3, [pc, #8]	; (bdf20 <HAL_Servo_Detach+0xc>)
   bdf18:	681b      	ldr	r3, [r3, #0]
   bdf1a:	695b      	ldr	r3, [r3, #20]
   bdf1c:	9301      	str	r3, [sp, #4]
   bdf1e:	bd08      	pop	{r3, pc}
   bdf20:	00030224 	.word	0x00030224

000bdf24 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bdf24:	b508      	push	{r3, lr}
   bdf26:	4b02      	ldr	r3, [pc, #8]	; (bdf30 <HAL_Servo_Write_Pulse_Width+0xc>)
   bdf28:	681b      	ldr	r3, [r3, #0]
   bdf2a:	699b      	ldr	r3, [r3, #24]
   bdf2c:	9301      	str	r3, [sp, #4]
   bdf2e:	bd08      	pop	{r3, pc}
   bdf30:	00030224 	.word	0x00030224

000bdf34 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bdf34:	b508      	push	{r3, lr}
   bdf36:	4b02      	ldr	r3, [pc, #8]	; (bdf40 <hal_spi_begin+0xc>)
   bdf38:	681b      	ldr	r3, [r3, #0]
   bdf3a:	681b      	ldr	r3, [r3, #0]
   bdf3c:	9301      	str	r3, [sp, #4]
   bdf3e:	bd08      	pop	{r3, pc}
   bdf40:	00030230 	.word	0x00030230

000bdf44 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bdf44:	b508      	push	{r3, lr}
   bdf46:	4b02      	ldr	r3, [pc, #8]	; (bdf50 <hal_spi_set_clock_divider+0xc>)
   bdf48:	681b      	ldr	r3, [r3, #0]
   bdf4a:	691b      	ldr	r3, [r3, #16]
   bdf4c:	9301      	str	r3, [sp, #4]
   bdf4e:	bd08      	pop	{r3, pc}
   bdf50:	00030230 	.word	0x00030230

000bdf54 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdf54:	b508      	push	{r3, lr}
   bdf56:	4b02      	ldr	r3, [pc, #8]	; (bdf60 <hal_spi_transfer+0xc>)
   bdf58:	681b      	ldr	r3, [r3, #0]
   bdf5a:	695b      	ldr	r3, [r3, #20]
   bdf5c:	9301      	str	r3, [sp, #4]
   bdf5e:	bd08      	pop	{r3, pc}
   bdf60:	00030230 	.word	0x00030230

000bdf64 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdf64:	b508      	push	{r3, lr}
   bdf66:	4b02      	ldr	r3, [pc, #8]	; (bdf70 <hal_spi_init+0xc>)
   bdf68:	681b      	ldr	r3, [r3, #0]
   bdf6a:	69db      	ldr	r3, [r3, #28]
   bdf6c:	9301      	str	r3, [sp, #4]
   bdf6e:	bd08      	pop	{r3, pc}
   bdf70:	00030230 	.word	0x00030230

000bdf74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdf74:	b508      	push	{r3, lr}
   bdf76:	4b02      	ldr	r3, [pc, #8]	; (bdf80 <hal_spi_is_enabled+0xc>)
   bdf78:	681b      	ldr	r3, [r3, #0]
   bdf7a:	6a1b      	ldr	r3, [r3, #32]
   bdf7c:	9301      	str	r3, [sp, #4]
   bdf7e:	bd08      	pop	{r3, pc}
   bdf80:	00030230 	.word	0x00030230

000bdf84 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdf84:	b508      	push	{r3, lr}
   bdf86:	4b02      	ldr	r3, [pc, #8]	; (bdf90 <hal_spi_info+0xc>)
   bdf88:	681b      	ldr	r3, [r3, #0]
   bdf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdf8c:	9301      	str	r3, [sp, #4]
   bdf8e:	bd08      	pop	{r3, pc}
   bdf90:	00030230 	.word	0x00030230

000bdf94 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bdf94:	b508      	push	{r3, lr}
   bdf96:	4b02      	ldr	r3, [pc, #8]	; (bdfa0 <hal_spi_transfer_dma+0xc>)
   bdf98:	681b      	ldr	r3, [r3, #0]
   bdf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdf9c:	9301      	str	r3, [sp, #4]
   bdf9e:	bd08      	pop	{r3, pc}
   bdfa0:	00030230 	.word	0x00030230

000bdfa4 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bdfa4:	b508      	push	{r3, lr}
   bdfa6:	4b02      	ldr	r3, [pc, #8]	; (bdfb0 <hal_spi_begin_ext+0xc>)
   bdfa8:	681b      	ldr	r3, [r3, #0]
   bdfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdfac:	9301      	str	r3, [sp, #4]
   bdfae:	bd08      	pop	{r3, pc}
   bdfb0:	00030230 	.word	0x00030230

000bdfb4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bdfb4:	b508      	push	{r3, lr}
   bdfb6:	4b02      	ldr	r3, [pc, #8]	; (bdfc0 <hal_spi_transfer_dma_status+0xc>)
   bdfb8:	681b      	ldr	r3, [r3, #0]
   bdfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bdfbc:	9301      	str	r3, [sp, #4]
   bdfbe:	bd08      	pop	{r3, pc}
   bdfc0:	00030230 	.word	0x00030230

000bdfc4 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bdfc4:	b508      	push	{r3, lr}
   bdfc6:	4b02      	ldr	r3, [pc, #8]	; (bdfd0 <hal_spi_set_settings+0xc>)
   bdfc8:	681b      	ldr	r3, [r3, #0]
   bdfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdfcc:	9301      	str	r3, [sp, #4]
   bdfce:	bd08      	pop	{r3, pc}
   bdfd0:	00030230 	.word	0x00030230

000bdfd4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bdfd4:	b508      	push	{r3, lr}
   bdfd6:	4b02      	ldr	r3, [pc, #8]	; (bdfe0 <hal_spi_acquire+0xc>)
   bdfd8:	681b      	ldr	r3, [r3, #0]
   bdfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdfdc:	9301      	str	r3, [sp, #4]
   bdfde:	bd08      	pop	{r3, pc}
   bdfe0:	00030230 	.word	0x00030230

000bdfe4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bdfe4:	b508      	push	{r3, lr}
   bdfe6:	4b02      	ldr	r3, [pc, #8]	; (bdff0 <hal_spi_release+0xc>)
   bdfe8:	681b      	ldr	r3, [r3, #0]
   bdfea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdfec:	9301      	str	r3, [sp, #4]
   bdfee:	bd08      	pop	{r3, pc}
   bdff0:	00030230 	.word	0x00030230

000bdff4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bdff4:	b508      	push	{r3, lr}
   bdff6:	4b02      	ldr	r3, [pc, #8]	; (be000 <hal_usart_end+0xc>)
   bdff8:	681b      	ldr	r3, [r3, #0]
   bdffa:	689b      	ldr	r3, [r3, #8]
   bdffc:	9301      	str	r3, [sp, #4]
   bdffe:	bd08      	pop	{r3, pc}
   be000:	0003023c 	.word	0x0003023c

000be004 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   be004:	b508      	push	{r3, lr}
   be006:	4b02      	ldr	r3, [pc, #8]	; (be010 <hal_usart_write+0xc>)
   be008:	681b      	ldr	r3, [r3, #0]
   be00a:	68db      	ldr	r3, [r3, #12]
   be00c:	9301      	str	r3, [sp, #4]
   be00e:	bd08      	pop	{r3, pc}
   be010:	0003023c 	.word	0x0003023c

000be014 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   be014:	b508      	push	{r3, lr}
   be016:	4b02      	ldr	r3, [pc, #8]	; (be020 <hal_usart_available+0xc>)
   be018:	681b      	ldr	r3, [r3, #0]
   be01a:	691b      	ldr	r3, [r3, #16]
   be01c:	9301      	str	r3, [sp, #4]
   be01e:	bd08      	pop	{r3, pc}
   be020:	0003023c 	.word	0x0003023c

000be024 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   be024:	b508      	push	{r3, lr}
   be026:	4b02      	ldr	r3, [pc, #8]	; (be030 <hal_usart_read+0xc>)
   be028:	681b      	ldr	r3, [r3, #0]
   be02a:	695b      	ldr	r3, [r3, #20]
   be02c:	9301      	str	r3, [sp, #4]
   be02e:	bd08      	pop	{r3, pc}
   be030:	0003023c 	.word	0x0003023c

000be034 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   be034:	b508      	push	{r3, lr}
   be036:	4b02      	ldr	r3, [pc, #8]	; (be040 <hal_usart_peek+0xc>)
   be038:	681b      	ldr	r3, [r3, #0]
   be03a:	699b      	ldr	r3, [r3, #24]
   be03c:	9301      	str	r3, [sp, #4]
   be03e:	bd08      	pop	{r3, pc}
   be040:	0003023c 	.word	0x0003023c

000be044 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   be044:	b508      	push	{r3, lr}
   be046:	4b02      	ldr	r3, [pc, #8]	; (be050 <hal_usart_flush+0xc>)
   be048:	681b      	ldr	r3, [r3, #0]
   be04a:	69db      	ldr	r3, [r3, #28]
   be04c:	9301      	str	r3, [sp, #4]
   be04e:	bd08      	pop	{r3, pc}
   be050:	0003023c 	.word	0x0003023c

000be054 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   be054:	b508      	push	{r3, lr}
   be056:	4b02      	ldr	r3, [pc, #8]	; (be060 <hal_usart_is_enabled+0xc>)
   be058:	681b      	ldr	r3, [r3, #0]
   be05a:	6a1b      	ldr	r3, [r3, #32]
   be05c:	9301      	str	r3, [sp, #4]
   be05e:	bd08      	pop	{r3, pc}
   be060:	0003023c 	.word	0x0003023c

000be064 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   be064:	b508      	push	{r3, lr}
   be066:	4b02      	ldr	r3, [pc, #8]	; (be070 <hal_usart_available_data_for_write+0xc>)
   be068:	681b      	ldr	r3, [r3, #0]
   be06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   be06c:	9301      	str	r3, [sp, #4]
   be06e:	bd08      	pop	{r3, pc}
   be070:	0003023c 	.word	0x0003023c

000be074 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   be074:	b508      	push	{r3, lr}
   be076:	4b02      	ldr	r3, [pc, #8]	; (be080 <hal_usart_begin_config+0xc>)
   be078:	681b      	ldr	r3, [r3, #0]
   be07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be07c:	9301      	str	r3, [sp, #4]
   be07e:	bd08      	pop	{r3, pc}
   be080:	0003023c 	.word	0x0003023c

000be084 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   be084:	b508      	push	{r3, lr}
   be086:	4b02      	ldr	r3, [pc, #8]	; (be090 <hal_usart_init_ex+0xc>)
   be088:	681b      	ldr	r3, [r3, #0]
   be08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be08c:	9301      	str	r3, [sp, #4]
   be08e:	bd08      	pop	{r3, pc}
   be090:	0003023c 	.word	0x0003023c

000be094 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   be094:	b508      	push	{r3, lr}
   be096:	4b02      	ldr	r3, [pc, #8]	; (be0a0 <HAL_USB_USART_Init+0xc>)
   be098:	681b      	ldr	r3, [r3, #0]
   be09a:	681b      	ldr	r3, [r3, #0]
   be09c:	9301      	str	r3, [sp, #4]
   be09e:	bd08      	pop	{r3, pc}
   be0a0:	0003024c 	.word	0x0003024c

000be0a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   be0a4:	b508      	push	{r3, lr}
   be0a6:	4b02      	ldr	r3, [pc, #8]	; (be0b0 <HAL_USB_USART_Begin+0xc>)
   be0a8:	681b      	ldr	r3, [r3, #0]
   be0aa:	685b      	ldr	r3, [r3, #4]
   be0ac:	9301      	str	r3, [sp, #4]
   be0ae:	bd08      	pop	{r3, pc}
   be0b0:	0003024c 	.word	0x0003024c

000be0b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   be0b4:	b508      	push	{r3, lr}
   be0b6:	4b02      	ldr	r3, [pc, #8]	; (be0c0 <HAL_USB_USART_End+0xc>)
   be0b8:	681b      	ldr	r3, [r3, #0]
   be0ba:	689b      	ldr	r3, [r3, #8]
   be0bc:	9301      	str	r3, [sp, #4]
   be0be:	bd08      	pop	{r3, pc}
   be0c0:	0003024c 	.word	0x0003024c

000be0c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   be0c4:	b508      	push	{r3, lr}
   be0c6:	4b02      	ldr	r3, [pc, #8]	; (be0d0 <HAL_USB_USART_Available_Data+0xc>)
   be0c8:	681b      	ldr	r3, [r3, #0]
   be0ca:	691b      	ldr	r3, [r3, #16]
   be0cc:	9301      	str	r3, [sp, #4]
   be0ce:	bd08      	pop	{r3, pc}
   be0d0:	0003024c 	.word	0x0003024c

000be0d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   be0d4:	b508      	push	{r3, lr}
   be0d6:	4b02      	ldr	r3, [pc, #8]	; (be0e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   be0d8:	681b      	ldr	r3, [r3, #0]
   be0da:	695b      	ldr	r3, [r3, #20]
   be0dc:	9301      	str	r3, [sp, #4]
   be0de:	bd08      	pop	{r3, pc}
   be0e0:	0003024c 	.word	0x0003024c

000be0e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be0e4:	b508      	push	{r3, lr}
   be0e6:	4b02      	ldr	r3, [pc, #8]	; (be0f0 <HAL_USB_USART_Receive_Data+0xc>)
   be0e8:	681b      	ldr	r3, [r3, #0]
   be0ea:	699b      	ldr	r3, [r3, #24]
   be0ec:	9301      	str	r3, [sp, #4]
   be0ee:	bd08      	pop	{r3, pc}
   be0f0:	0003024c 	.word	0x0003024c

000be0f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be0f4:	b508      	push	{r3, lr}
   be0f6:	4b02      	ldr	r3, [pc, #8]	; (be100 <HAL_USB_USART_Send_Data+0xc>)
   be0f8:	681b      	ldr	r3, [r3, #0]
   be0fa:	69db      	ldr	r3, [r3, #28]
   be0fc:	9301      	str	r3, [sp, #4]
   be0fe:	bd08      	pop	{r3, pc}
   be100:	0003024c 	.word	0x0003024c

000be104 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   be104:	b508      	push	{r3, lr}
   be106:	4b02      	ldr	r3, [pc, #8]	; (be110 <HAL_USB_USART_Flush_Data+0xc>)
   be108:	681b      	ldr	r3, [r3, #0]
   be10a:	6a1b      	ldr	r3, [r3, #32]
   be10c:	9301      	str	r3, [sp, #4]
   be10e:	bd08      	pop	{r3, pc}
   be110:	0003024c 	.word	0x0003024c

000be114 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   be114:	b508      	push	{r3, lr}
   be116:	4b02      	ldr	r3, [pc, #8]	; (be120 <panic_+0xc>)
   be118:	681b      	ldr	r3, [r3, #0]
   be11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be11c:	9301      	str	r3, [sp, #4]
   be11e:	bd08      	pop	{r3, pc}
   be120:	00030260 	.word	0x00030260

000be124 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   be124:	b508      	push	{r3, lr}
   be126:	4b02      	ldr	r3, [pc, #8]	; (be130 <log_message+0xc>)
   be128:	681b      	ldr	r3, [r3, #0]
   be12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   be12c:	9301      	str	r3, [sp, #4]
   be12e:	bd08      	pop	{r3, pc}
   be130:	00030260 	.word	0x00030260

000be134 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   be134:	b508      	push	{r3, lr}
   be136:	4b02      	ldr	r3, [pc, #8]	; (be140 <log_level_name+0xc>)
   be138:	681b      	ldr	r3, [r3, #0]
   be13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   be13c:	9301      	str	r3, [sp, #4]
   be13e:	bd08      	pop	{r3, pc}
   be140:	00030260 	.word	0x00030260

000be144 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   be144:	b508      	push	{r3, lr}
   be146:	4b02      	ldr	r3, [pc, #8]	; (be150 <log_set_callbacks+0xc>)
   be148:	681b      	ldr	r3, [r3, #0]
   be14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   be14c:	9301      	str	r3, [sp, #4]
   be14e:	bd08      	pop	{r3, pc}
   be150:	00030260 	.word	0x00030260

000be154 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   be154:	b508      	push	{r3, lr}
   be156:	4b03      	ldr	r3, [pc, #12]	; (be164 <led_set_status_active+0x10>)
   be158:	681b      	ldr	r3, [r3, #0]
   be15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   be15e:	9301      	str	r3, [sp, #4]
   be160:	bd08      	pop	{r3, pc}
   be162:	0000      	.short	0x0000
   be164:	00030260 	.word	0x00030260

000be168 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   be168:	b508      	push	{r3, lr}
   be16a:	4b02      	ldr	r3, [pc, #8]	; (be174 <system_mode+0xc>)
   be16c:	681b      	ldr	r3, [r3, #0]
   be16e:	681b      	ldr	r3, [r3, #0]
   be170:	9301      	str	r3, [sp, #4]
   be172:	bd08      	pop	{r3, pc}
   be174:	00030220 	.word	0x00030220

000be178 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   be178:	b508      	push	{r3, lr}
   be17a:	4b02      	ldr	r3, [pc, #8]	; (be184 <set_system_mode+0xc>)
   be17c:	681b      	ldr	r3, [r3, #0]
   be17e:	685b      	ldr	r3, [r3, #4]
   be180:	9301      	str	r3, [sp, #4]
   be182:	bd08      	pop	{r3, pc}
   be184:	00030220 	.word	0x00030220

000be188 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   be188:	b508      	push	{r3, lr}
   be18a:	4b02      	ldr	r3, [pc, #8]	; (be194 <system_delay_ms+0xc>)
   be18c:	681b      	ldr	r3, [r3, #0]
   be18e:	695b      	ldr	r3, [r3, #20]
   be190:	9301      	str	r3, [sp, #4]
   be192:	bd08      	pop	{r3, pc}
   be194:	00030220 	.word	0x00030220

000be198 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   be198:	b508      	push	{r3, lr}
   be19a:	4b02      	ldr	r3, [pc, #8]	; (be1a4 <application_thread_current+0xc>)
   be19c:	681b      	ldr	r3, [r3, #0]
   be19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be1a0:	9301      	str	r3, [sp, #4]
   be1a2:	bd08      	pop	{r3, pc}
   be1a4:	00030220 	.word	0x00030220

000be1a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   be1a8:	b508      	push	{r3, lr}
   be1aa:	4b02      	ldr	r3, [pc, #8]	; (be1b4 <application_thread_invoke+0xc>)
   be1ac:	681b      	ldr	r3, [r3, #0]
   be1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   be1b0:	9301      	str	r3, [sp, #4]
   be1b2:	bd08      	pop	{r3, pc}
   be1b4:	00030220 	.word	0x00030220

000be1b8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   be1b8:	b508      	push	{r3, lr}
   be1ba:	4b02      	ldr	r3, [pc, #8]	; (be1c4 <system_thread_get_state+0xc>)
   be1bc:	681b      	ldr	r3, [r3, #0]
   be1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   be1c0:	9301      	str	r3, [sp, #4]
   be1c2:	bd08      	pop	{r3, pc}
   be1c4:	00030220 	.word	0x00030220

000be1c8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   be1c8:	b508      	push	{r3, lr}
   be1ca:	4b02      	ldr	r3, [pc, #8]	; (be1d4 <led_pattern_period+0xc>)
   be1cc:	681b      	ldr	r3, [r3, #0]
   be1ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be1d0:	9301      	str	r3, [sp, #4]
   be1d2:	bd08      	pop	{r3, pc}
   be1d4:	00030220 	.word	0x00030220

000be1d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be1d8:	b508      	push	{r3, lr}
   be1da:	4b03      	ldr	r3, [pc, #12]	; (be1e8 <system_ctrl_set_app_request_handler+0x10>)
   be1dc:	681b      	ldr	r3, [r3, #0]
   be1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be1e2:	9301      	str	r3, [sp, #4]
   be1e4:	bd08      	pop	{r3, pc}
   be1e6:	0000      	.short	0x0000
   be1e8:	00030220 	.word	0x00030220

000be1ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be1ec:	b508      	push	{r3, lr}
   be1ee:	4b03      	ldr	r3, [pc, #12]	; (be1fc <system_ctrl_set_result+0x10>)
   be1f0:	681b      	ldr	r3, [r3, #0]
   be1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be1f6:	9301      	str	r3, [sp, #4]
   be1f8:	bd08      	pop	{r3, pc}
   be1fa:	0000      	.short	0x0000
   be1fc:	00030220 	.word	0x00030220

000be200 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be200:	b508      	push	{r3, lr}
   be202:	4b02      	ldr	r3, [pc, #8]	; (be20c <spark_function+0xc>)
   be204:	681b      	ldr	r3, [r3, #0]
   be206:	685b      	ldr	r3, [r3, #4]
   be208:	9301      	str	r3, [sp, #4]
   be20a:	bd08      	pop	{r3, pc}
   be20c:	00030244 	.word	0x00030244

000be210 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be210:	b508      	push	{r3, lr}
   be212:	4b02      	ldr	r3, [pc, #8]	; (be21c <spark_process+0xc>)
   be214:	681b      	ldr	r3, [r3, #0]
   be216:	689b      	ldr	r3, [r3, #8]
   be218:	9301      	str	r3, [sp, #4]
   be21a:	bd08      	pop	{r3, pc}
   be21c:	00030244 	.word	0x00030244

000be220 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be220:	b508      	push	{r3, lr}
   be222:	4b02      	ldr	r3, [pc, #8]	; (be22c <spark_cloud_flag_connected+0xc>)
   be224:	681b      	ldr	r3, [r3, #0]
   be226:	695b      	ldr	r3, [r3, #20]
   be228:	9301      	str	r3, [sp, #4]
   be22a:	bd08      	pop	{r3, pc}
   be22c:	00030244 	.word	0x00030244

000be230 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be230:	b508      	push	{r3, lr}
   be232:	4b02      	ldr	r3, [pc, #8]	; (be23c <spark_send_event+0xc>)
   be234:	681b      	ldr	r3, [r3, #0]
   be236:	6a1b      	ldr	r3, [r3, #32]
   be238:	9301      	str	r3, [sp, #4]
   be23a:	bd08      	pop	{r3, pc}
   be23c:	00030244 	.word	0x00030244

000be240 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be240:	b508      	push	{r3, lr}
   be242:	4b02      	ldr	r3, [pc, #8]	; (be24c <spark_subscribe+0xc>)
   be244:	681b      	ldr	r3, [r3, #0]
   be246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be248:	9301      	str	r3, [sp, #4]
   be24a:	bd08      	pop	{r3, pc}
   be24c:	00030244 	.word	0x00030244

000be250 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be250:	b508      	push	{r3, lr}
   be252:	4b02      	ldr	r3, [pc, #8]	; (be25c <spark_sync_time_pending+0xc>)
   be254:	681b      	ldr	r3, [r3, #0]
   be256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be258:	9301      	str	r3, [sp, #4]
   be25a:	bd08      	pop	{r3, pc}
   be25c:	00030244 	.word	0x00030244

000be260 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be260:	b508      	push	{r3, lr}
   be262:	4b02      	ldr	r3, [pc, #8]	; (be26c <spark_set_random_seed_from_cloud_handler+0xc>)
   be264:	681b      	ldr	r3, [r3, #0]
   be266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be268:	9301      	str	r3, [sp, #4]
   be26a:	bd08      	pop	{r3, pc}
   be26c:	00030244 	.word	0x00030244

000be270 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be270:	b508      	push	{r3, lr}
   be272:	4b02      	ldr	r3, [pc, #8]	; (be27c <network_connect+0xc>)
   be274:	681b      	ldr	r3, [r3, #0]
   be276:	685b      	ldr	r3, [r3, #4]
   be278:	9301      	str	r3, [sp, #4]
   be27a:	bd08      	pop	{r3, pc}
   be27c:	00030240 	.word	0x00030240

000be280 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be280:	b508      	push	{r3, lr}
   be282:	4b02      	ldr	r3, [pc, #8]	; (be28c <network_connecting+0xc>)
   be284:	681b      	ldr	r3, [r3, #0]
   be286:	689b      	ldr	r3, [r3, #8]
   be288:	9301      	str	r3, [sp, #4]
   be28a:	bd08      	pop	{r3, pc}
   be28c:	00030240 	.word	0x00030240

000be290 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be290:	b508      	push	{r3, lr}
   be292:	4b02      	ldr	r3, [pc, #8]	; (be29c <network_disconnect+0xc>)
   be294:	681b      	ldr	r3, [r3, #0]
   be296:	68db      	ldr	r3, [r3, #12]
   be298:	9301      	str	r3, [sp, #4]
   be29a:	bd08      	pop	{r3, pc}
   be29c:	00030240 	.word	0x00030240

000be2a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be2a0:	b508      	push	{r3, lr}
   be2a2:	4b02      	ldr	r3, [pc, #8]	; (be2ac <network_ready+0xc>)
   be2a4:	681b      	ldr	r3, [r3, #0]
   be2a6:	691b      	ldr	r3, [r3, #16]
   be2a8:	9301      	str	r3, [sp, #4]
   be2aa:	bd08      	pop	{r3, pc}
   be2ac:	00030240 	.word	0x00030240

000be2b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be2b0:	b508      	push	{r3, lr}
   be2b2:	4b02      	ldr	r3, [pc, #8]	; (be2bc <network_on+0xc>)
   be2b4:	681b      	ldr	r3, [r3, #0]
   be2b6:	695b      	ldr	r3, [r3, #20]
   be2b8:	9301      	str	r3, [sp, #4]
   be2ba:	bd08      	pop	{r3, pc}
   be2bc:	00030240 	.word	0x00030240

000be2c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be2c0:	b508      	push	{r3, lr}
   be2c2:	4b02      	ldr	r3, [pc, #8]	; (be2cc <network_off+0xc>)
   be2c4:	681b      	ldr	r3, [r3, #0]
   be2c6:	699b      	ldr	r3, [r3, #24]
   be2c8:	9301      	str	r3, [sp, #4]
   be2ca:	bd08      	pop	{r3, pc}
   be2cc:	00030240 	.word	0x00030240

000be2d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be2d0:	b508      	push	{r3, lr}
   be2d2:	4b02      	ldr	r3, [pc, #8]	; (be2dc <network_listen+0xc>)
   be2d4:	681b      	ldr	r3, [r3, #0]
   be2d6:	69db      	ldr	r3, [r3, #28]
   be2d8:	9301      	str	r3, [sp, #4]
   be2da:	bd08      	pop	{r3, pc}
   be2dc:	00030240 	.word	0x00030240

000be2e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be2e0:	b508      	push	{r3, lr}
   be2e2:	4b02      	ldr	r3, [pc, #8]	; (be2ec <network_listening+0xc>)
   be2e4:	681b      	ldr	r3, [r3, #0]
   be2e6:	6a1b      	ldr	r3, [r3, #32]
   be2e8:	9301      	str	r3, [sp, #4]
   be2ea:	bd08      	pop	{r3, pc}
   be2ec:	00030240 	.word	0x00030240

000be2f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be2f0:	b508      	push	{r3, lr}
   be2f2:	4b02      	ldr	r3, [pc, #8]	; (be2fc <network_set_listen_timeout+0xc>)
   be2f4:	681b      	ldr	r3, [r3, #0]
   be2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be2f8:	9301      	str	r3, [sp, #4]
   be2fa:	bd08      	pop	{r3, pc}
   be2fc:	00030240 	.word	0x00030240

000be300 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be300:	b508      	push	{r3, lr}
   be302:	4b02      	ldr	r3, [pc, #8]	; (be30c <network_get_listen_timeout+0xc>)
   be304:	681b      	ldr	r3, [r3, #0]
   be306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be308:	9301      	str	r3, [sp, #4]
   be30a:	bd08      	pop	{r3, pc}
   be30c:	00030240 	.word	0x00030240

000be310 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be310:	b508      	push	{r3, lr}
   be312:	4b02      	ldr	r3, [pc, #8]	; (be31c <network_is_on+0xc>)
   be314:	681b      	ldr	r3, [r3, #0]
   be316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be318:	9301      	str	r3, [sp, #4]
   be31a:	bd08      	pop	{r3, pc}
   be31c:	00030240 	.word	0x00030240

000be320 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be320:	b508      	push	{r3, lr}
   be322:	4b02      	ldr	r3, [pc, #8]	; (be32c <network_is_off+0xc>)
   be324:	681b      	ldr	r3, [r3, #0]
   be326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be328:	9301      	str	r3, [sp, #4]
   be32a:	bd08      	pop	{r3, pc}
   be32c:	00030240 	.word	0x00030240

000be330 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be330:	b508      	push	{r3, lr}
   be332:	4b02      	ldr	r3, [pc, #8]	; (be33c <malloc+0xc>)
   be334:	681b      	ldr	r3, [r3, #0]
   be336:	681b      	ldr	r3, [r3, #0]
   be338:	9301      	str	r3, [sp, #4]
   be33a:	bd08      	pop	{r3, pc}
   be33c:	0003021c 	.word	0x0003021c

000be340 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be340:	b508      	push	{r3, lr}
   be342:	4b02      	ldr	r3, [pc, #8]	; (be34c <free+0xc>)
   be344:	681b      	ldr	r3, [r3, #0]
   be346:	685b      	ldr	r3, [r3, #4]
   be348:	9301      	str	r3, [sp, #4]
   be34a:	bd08      	pop	{r3, pc}
   be34c:	0003021c 	.word	0x0003021c

000be350 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be350:	b508      	push	{r3, lr}
   be352:	4b02      	ldr	r3, [pc, #8]	; (be35c <realloc+0xc>)
   be354:	681b      	ldr	r3, [r3, #0]
   be356:	689b      	ldr	r3, [r3, #8]
   be358:	9301      	str	r3, [sp, #4]
   be35a:	bd08      	pop	{r3, pc}
   be35c:	0003021c 	.word	0x0003021c

000be360 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be360:	b508      	push	{r3, lr}
   be362:	4b02      	ldr	r3, [pc, #8]	; (be36c <sprintf+0xc>)
   be364:	681b      	ldr	r3, [r3, #0]
   be366:	68db      	ldr	r3, [r3, #12]
   be368:	9301      	str	r3, [sp, #4]
   be36a:	bd08      	pop	{r3, pc}
   be36c:	0003021c 	.word	0x0003021c

000be370 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be370:	b508      	push	{r3, lr}
   be372:	4b02      	ldr	r3, [pc, #8]	; (be37c <sscanf+0xc>)
   be374:	681b      	ldr	r3, [r3, #0]
   be376:	695b      	ldr	r3, [r3, #20]
   be378:	9301      	str	r3, [sp, #4]
   be37a:	bd08      	pop	{r3, pc}
   be37c:	0003021c 	.word	0x0003021c

000be380 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be380:	b508      	push	{r3, lr}
   be382:	4b02      	ldr	r3, [pc, #8]	; (be38c <snprintf+0xc>)
   be384:	681b      	ldr	r3, [r3, #0]
   be386:	69db      	ldr	r3, [r3, #28]
   be388:	9301      	str	r3, [sp, #4]
   be38a:	bd08      	pop	{r3, pc}
   be38c:	0003021c 	.word	0x0003021c

000be390 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be390:	b508      	push	{r3, lr}
   be392:	4b02      	ldr	r3, [pc, #8]	; (be39c <vsnprintf+0xc>)
   be394:	681b      	ldr	r3, [r3, #0]
   be396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be398:	9301      	str	r3, [sp, #4]
   be39a:	bd08      	pop	{r3, pc}
   be39c:	0003021c 	.word	0x0003021c

000be3a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be3a0:	b508      	push	{r3, lr}
   be3a2:	4b02      	ldr	r3, [pc, #8]	; (be3ac <abort+0xc>)
   be3a4:	681b      	ldr	r3, [r3, #0]
   be3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be3a8:	9301      	str	r3, [sp, #4]
   be3aa:	bd08      	pop	{r3, pc}
   be3ac:	0003021c 	.word	0x0003021c

000be3b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be3b0:	b508      	push	{r3, lr}
   be3b2:	4b02      	ldr	r3, [pc, #8]	; (be3bc <_malloc_r+0xc>)
   be3b4:	681b      	ldr	r3, [r3, #0]
   be3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be3b8:	9301      	str	r3, [sp, #4]
   be3ba:	bd08      	pop	{r3, pc}
   be3bc:	0003021c 	.word	0x0003021c

000be3c0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be3c0:	b508      	push	{r3, lr}
   be3c2:	4b02      	ldr	r3, [pc, #8]	; (be3cc <__errno+0xc>)
   be3c4:	681b      	ldr	r3, [r3, #0]
   be3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be3c8:	9301      	str	r3, [sp, #4]
   be3ca:	bd08      	pop	{r3, pc}
   be3cc:	0003021c 	.word	0x0003021c

000be3d0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be3d0:	b508      	push	{r3, lr}
   be3d2:	4b02      	ldr	r3, [pc, #8]	; (be3dc <__assert_func+0xc>)
   be3d4:	681b      	ldr	r3, [r3, #0]
   be3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be3d8:	9301      	str	r3, [sp, #4]
   be3da:	bd08      	pop	{r3, pc}
   be3dc:	0003021c 	.word	0x0003021c

000be3e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be3e0:	b508      	push	{r3, lr}
   be3e2:	4b02      	ldr	r3, [pc, #8]	; (be3ec <newlib_impure_ptr_callback+0xc>)
   be3e4:	681b      	ldr	r3, [r3, #0]
   be3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be3e8:	9301      	str	r3, [sp, #4]
   be3ea:	bd08      	pop	{r3, pc}
   be3ec:	0003021c 	.word	0x0003021c

000be3f0 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be3f0:	b508      	push	{r3, lr}
   be3f2:	4b02      	ldr	r3, [pc, #8]	; (be3fc <localtime_r+0xc>)
   be3f4:	681b      	ldr	r3, [r3, #0]
   be3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be3f8:	9301      	str	r3, [sp, #4]
   be3fa:	bd08      	pop	{r3, pc}
   be3fc:	0003021c 	.word	0x0003021c

000be400 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   be400:	428a      	cmp	r2, r1
{
   be402:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   be404:	d007      	beq.n	be416 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   be406:	1a44      	subs	r4, r0, r1
   be408:	9802      	ldr	r0, [sp, #8]
   be40a:	1ac0      	subs	r0, r0, r3
   be40c:	4344      	muls	r4, r0
   be40e:	1a50      	subs	r0, r2, r1
   be410:	fb94 f0f0 	sdiv	r0, r4, r0
   be414:	4418      	add	r0, r3
}
   be416:	bd10      	pop	{r4, pc}

000be418 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   be418:	2100      	movs	r1, #0
   be41a:	f7ff beb5 	b.w	be188 <system_delay_ms>

000be41e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   be41e:	b510      	push	{r4, lr}
      if (_M_empty())
   be420:	6883      	ldr	r3, [r0, #8]
   be422:	4604      	mov	r4, r0
   be424:	b90b      	cbnz	r3, be42a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   be426:	f003 ff17 	bl	c2258 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be42a:	68c3      	ldr	r3, [r0, #12]
   be42c:	4798      	blx	r3
      if (_M_manager)
   be42e:	68a3      	ldr	r3, [r4, #8]
   be430:	b11b      	cbz	r3, be43a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   be432:	2203      	movs	r2, #3
   be434:	4621      	mov	r1, r4
   be436:	4620      	mov	r0, r4
   be438:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   be43a:	4620      	mov	r0, r4
   be43c:	2110      	movs	r1, #16
}
   be43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   be442:	f7f5 be2e 	b.w	b40a2 <_ZdlPvj>

000be446 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be446:	4770      	bx	lr

000be448 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be448:	4770      	bx	lr

000be44a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be44a:	4770      	bx	lr

000be44c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be44c:	4770      	bx	lr
	...

000be450 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be450:	4b06      	ldr	r3, [pc, #24]	; (be46c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be452:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be454:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be456:	f100 040c 	add.w	r4, r0, #12
	    ||
   be45a:	d005      	beq.n	be468 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be45c:	4608      	mov	r0, r1
   be45e:	f003 feff 	bl	c2260 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be462:	2800      	cmp	r0, #0
   be464:	bf08      	it	eq
   be466:	2400      	moveq	r4, #0
      }
   be468:	4620      	mov	r0, r4
   be46a:	bd10      	pop	{r4, pc}
   be46c:	000c7ee4 	.word	0x000c7ee4

000be470 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be470:	4b06      	ldr	r3, [pc, #24]	; (be48c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be472:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be474:	b510      	push	{r4, lr}
   be476:	f100 040c 	add.w	r4, r0, #12
	    ||
   be47a:	d005      	beq.n	be488 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be47c:	4608      	mov	r0, r1
   be47e:	f003 feef 	bl	c2260 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be482:	2800      	cmp	r0, #0
   be484:	bf08      	it	eq
   be486:	2400      	moveq	r4, #0
      }
   be488:	4620      	mov	r0, r4
   be48a:	bd10      	pop	{r4, pc}
   be48c:	000c7ee4 	.word	0x000c7ee4

000be490 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be490:	4b06      	ldr	r3, [pc, #24]	; (be4ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be492:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be494:	b510      	push	{r4, lr}
   be496:	f100 040c 	add.w	r4, r0, #12
	    ||
   be49a:	d005      	beq.n	be4a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be49c:	4608      	mov	r0, r1
   be49e:	f003 fedf 	bl	c2260 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be4a2:	2800      	cmp	r0, #0
   be4a4:	bf08      	it	eq
   be4a6:	2400      	moveq	r4, #0
      }
   be4a8:	4620      	mov	r0, r4
   be4aa:	bd10      	pop	{r4, pc}
   be4ac:	000c7ee4 	.word	0x000c7ee4

000be4b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be4b0:	b510      	push	{r4, lr}
   be4b2:	2168      	movs	r1, #104	; 0x68
   be4b4:	4604      	mov	r4, r0
   be4b6:	f7f5 fdf4 	bl	b40a2 <_ZdlPvj>
   be4ba:	4620      	mov	r0, r4
   be4bc:	bd10      	pop	{r4, pc}

000be4be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be4be:	b510      	push	{r4, lr}
   be4c0:	2128      	movs	r1, #40	; 0x28
   be4c2:	4604      	mov	r4, r0
   be4c4:	f7f5 fded 	bl	b40a2 <_ZdlPvj>
   be4c8:	4620      	mov	r0, r4
   be4ca:	bd10      	pop	{r4, pc}

000be4cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be4cc:	b510      	push	{r4, lr}
   be4ce:	2130      	movs	r1, #48	; 0x30
   be4d0:	4604      	mov	r4, r0
   be4d2:	f7f5 fde6 	bl	b40a2 <_ZdlPvj>
   be4d6:	4620      	mov	r0, r4
   be4d8:	bd10      	pop	{r4, pc}

000be4da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be4da:	2168      	movs	r1, #104	; 0x68
   be4dc:	f7f5 bde1 	b.w	b40a2 <_ZdlPvj>

000be4e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be4e0:	2128      	movs	r1, #40	; 0x28
   be4e2:	f7f5 bdde 	b.w	b40a2 <_ZdlPvj>

000be4e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be4e6:	2130      	movs	r1, #48	; 0x30
   be4e8:	f7f5 bddb 	b.w	b40a2 <_ZdlPvj>

000be4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be4ee:	2500      	movs	r5, #0
   be4f0:	1cec      	adds	r4, r5, #3
   be4f2:	428c      	cmp	r4, r1
   be4f4:	d80d      	bhi.n	be512 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be4f6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be4f8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be4fa:	5d87      	ldrb	r7, [r0, r6]
   be4fc:	4297      	cmp	r7, r2
   be4fe:	d105      	bne.n	be50c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be500:	4426      	add	r6, r4
   be502:	42b1      	cmp	r1, r6
   be504:	d305      	bcc.n	be512 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be506:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be508:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be50c:	3401      	adds	r4, #1
   be50e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be510:	e7ee      	b.n	be4f0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be512:	2000      	movs	r0, #0
   be514:	e7f9      	b.n	be50a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be518 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be518:	4a02      	ldr	r2, [pc, #8]	; (be524 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be51a:	4903      	ldr	r1, [pc, #12]	; (be528 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be51c:	200a      	movs	r0, #10
   be51e:	f7ff bdf9 	b.w	be114 <panic_>
   be522:	bf00      	nop
   be524:	000bdd25 	.word	0x000bdd25
   be528:	000c7d41 	.word	0x000c7d41

000be52c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be52c:	b430      	push	{r4, r5}
   be52e:	460d      	mov	r5, r1
   be530:	4611      	mov	r1, r2
   be532:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be534:	6803      	ldr	r3, [r0, #0]
   be536:	6809      	ldr	r1, [r1, #0]
   be538:	6828      	ldr	r0, [r5, #0]
   be53a:	e9d3 4300 	ldrd	r4, r3, [r3]
   be53e:	46a4      	mov	ip, r4
      }
   be540:	bc30      	pop	{r4, r5}
   be542:	4760      	bx	ip

000be544 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be544:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be546:	b538      	push	{r3, r4, r5, lr}
   be548:	4604      	mov	r4, r0
	switch (__op)
   be54a:	d102      	bne.n	be552 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be54c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be54e:	6023      	str	r3, [r4, #0]
	}
   be550:	e003      	b.n	be55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be552:	2a02      	cmp	r2, #2
   be554:	d003      	beq.n	be55e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be556:	2a03      	cmp	r2, #3
   be558:	d00d      	beq.n	be576 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be55a:	2000      	movs	r0, #0
   be55c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be55e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be560:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be562:	f7f5 fd98 	bl	b4096 <_Znwj>
   be566:	4603      	mov	r3, r0
   be568:	2800      	cmp	r0, #0
   be56a:	d0f0      	beq.n	be54e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be56c:	e895 0003 	ldmia.w	r5, {r0, r1}
   be570:	e883 0003 	stmia.w	r3, {r0, r1}
   be574:	e7eb      	b.n	be54e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be576:	6800      	ldr	r0, [r0, #0]
   be578:	2800      	cmp	r0, #0
   be57a:	d0ee      	beq.n	be55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be57c:	2108      	movs	r1, #8
   be57e:	f7f5 fd90 	bl	b40a2 <_ZdlPvj>
   be582:	e7ea      	b.n	be55a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be584 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be584:	b510      	push	{r4, lr}
   be586:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be588:	3058      	adds	r0, #88	; 0x58
   be58a:	f7f5 ffa1 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be58e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be596:	f003 b9f7 	b.w	c1988 <_ZN6StringD1Ev>

000be59a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be59a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be59c:	6843      	ldr	r3, [r0, #4]
   be59e:	3b01      	subs	r3, #1
    {
   be5a0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be5a2:	6043      	str	r3, [r0, #4]
   be5a4:	b963      	cbnz	r3, be5c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be5a6:	6803      	ldr	r3, [r0, #0]
   be5a8:	689b      	ldr	r3, [r3, #8]
   be5aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be5ac:	68a3      	ldr	r3, [r4, #8]
   be5ae:	3b01      	subs	r3, #1
   be5b0:	60a3      	str	r3, [r4, #8]
   be5b2:	b92b      	cbnz	r3, be5c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be5b4:	6823      	ldr	r3, [r4, #0]
   be5b6:	4620      	mov	r0, r4
   be5b8:	68db      	ldr	r3, [r3, #12]
    }
   be5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be5be:	4718      	bx	r3
    }
   be5c0:	bd10      	pop	{r4, pc}

000be5c2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be5c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be5c6:	b2da      	uxtb	r2, r3
   be5c8:	2a09      	cmp	r2, #9
   be5ca:	d801      	bhi.n	be5d0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be5cc:	4618      	mov	r0, r3
   be5ce:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be5d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be5d4:	2b05      	cmp	r3, #5
   be5d6:	d801      	bhi.n	be5dc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be5d8:	3857      	subs	r0, #87	; 0x57
   be5da:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be5dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be5e0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be5e2:	bf94      	ite	ls
   be5e4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be5e6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   be5ea:	4770      	bx	lr

000be5ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be5ec:	b510      	push	{r4, lr}
            locked_(false) {
   be5ee:	2300      	movs	r3, #0
   be5f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be5f2:	4b04      	ldr	r3, [pc, #16]	; (be604 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be5f4:	4604      	mov	r4, r0
   be5f6:	6818      	ldr	r0, [r3, #0]
   be5f8:	f7ff fb74 	bl	bdce4 <os_mutex_recursive_lock>
        locked_ = true;
   be5fc:	2301      	movs	r3, #1
   be5fe:	7023      	strb	r3, [r4, #0]
    }
   be600:	4620      	mov	r0, r4
   be602:	bd10      	pop	{r4, pc}
   be604:	2003e628 	.word	0x2003e628

000be608 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be608:	b510      	push	{r4, lr}
        if (locked_) {
   be60a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be60c:	4604      	mov	r4, r0
        if (locked_) {
   be60e:	b11b      	cbz	r3, be618 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be610:	4b02      	ldr	r3, [pc, #8]	; (be61c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be612:	6818      	ldr	r0, [r3, #0]
   be614:	f7ff fb6e 	bl	bdcf4 <os_mutex_recursive_unlock>
    }
   be618:	4620      	mov	r0, r4
   be61a:	bd10      	pop	{r4, pc}
   be61c:	2003e628 	.word	0x2003e628

000be620 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be620:	b082      	sub	sp, #8
   be622:	4603      	mov	r3, r0
    address_ = addr;
   be624:	6808      	ldr	r0, [r1, #0]
   be626:	6849      	ldr	r1, [r1, #4]
   be628:	466a      	mov	r2, sp
   be62a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be62c:	466a      	mov	r2, sp
   be62e:	ca03      	ldmia	r2!, {r0, r1}
   be630:	6018      	str	r0, [r3, #0]
}
   be632:	4618      	mov	r0, r3
    address_ = addr.address_;
   be634:	6059      	str	r1, [r3, #4]
}
   be636:	b002      	add	sp, #8
   be638:	4770      	bx	lr

000be63a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be63a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be63c:	7982      	ldrb	r2, [r0, #6]
   be63e:	798b      	ldrb	r3, [r1, #6]
   be640:	429a      	cmp	r2, r3
   be642:	d106      	bne.n	be652 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be644:	2206      	movs	r2, #6
   be646:	f005 fff7 	bl	c4638 <memcmp>
   be64a:	fab0 f080 	clz	r0, r0
   be64e:	0940      	lsrs	r0, r0, #5
}
   be650:	bd08      	pop	{r3, pc}
    return false;
   be652:	2000      	movs	r0, #0
   be654:	e7fc      	b.n	be650 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be656 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be65a:	6003      	str	r3, [r0, #0]
   be65c:	8083      	strh	r3, [r0, #4]
}
   be65e:	2000      	movs	r0, #0
   be660:	4770      	bx	lr

000be662 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be662:	b508      	push	{r3, lr}
   be664:	4602      	mov	r2, r0
        : address_{} {
   be666:	2100      	movs	r1, #0
   be668:	6001      	str	r1, [r0, #0]
   be66a:	6041      	str	r1, [r0, #4]
    clear();
   be66c:	f7ff fff3 	bl	be656 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be670:	7191      	strb	r1, [r2, #6]
}
   be672:	4610      	mov	r0, r2
   be674:	bd08      	pop	{r3, pc}
	...

000be678 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be678:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be67a:	2301      	movs	r3, #1
   be67c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be67e:	4b05      	ldr	r3, [pc, #20]	; (be694 <_ZN8particle7BleUuidC1Ev+0x1c>)
   be680:	4602      	mov	r2, r0
   be682:	f103 0110 	add.w	r1, r3, #16
   be686:	f853 4b04 	ldr.w	r4, [r3], #4
   be68a:	f842 4b04 	str.w	r4, [r2], #4
   be68e:	428b      	cmp	r3, r1
   be690:	d1f9      	bne.n	be686 <_ZN8particle7BleUuidC1Ev+0xe>
}
   be692:	bd10      	pop	{r4, pc}
   be694:	000c7ef2 	.word	0x000c7ef2

000be698 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be698:	b510      	push	{r4, lr}
    if (uuid128) {
   be69a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be69c:	4604      	mov	r4, r0
    if (uuid128) {
   be69e:	b1b1      	cbz	r1, be6ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be6a0:	2a01      	cmp	r2, #1
   be6a2:	f101 0210 	add.w	r2, r1, #16
   be6a6:	d10a      	bne.n	be6be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be6a8:	4601      	mov	r1, r0
   be6aa:	f853 0b04 	ldr.w	r0, [r3], #4
   be6ae:	f841 0b04 	str.w	r0, [r1], #4
   be6b2:	4293      	cmp	r3, r2
   be6b4:	d1f9      	bne.n	be6aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be6b6:	2301      	movs	r3, #1
   be6b8:	6123      	str	r3, [r4, #16]
}
   be6ba:	4620      	mov	r0, r4
   be6bc:	bd10      	pop	{r4, pc}
   be6be:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be6c0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be6c4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be6c8:	429a      	cmp	r2, r3
   be6ca:	d1f9      	bne.n	be6c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be6cc:	e7f3      	b.n	be6b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be6ce:	2210      	movs	r2, #16
   be6d0:	f005 ffea 	bl	c46a8 <memset>
   be6d4:	e7f1      	b.n	be6ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be6d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be6d6:	b538      	push	{r3, r4, r5, lr}
   be6d8:	4604      	mov	r4, r0
   be6da:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be6dc:	461a      	mov	r2, r3
   be6de:	f7ff ffdb 	bl	be698 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be6e2:	81a5      	strh	r5, [r4, #12]
}
   be6e4:	4620      	mov	r0, r4
   be6e6:	bd38      	pop	{r3, r4, r5, pc}

000be6e8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be6e8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be6ea:	6902      	ldr	r2, [r0, #16]
   be6ec:	b922      	cbnz	r2, be6f8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be6ee:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be6f0:	3800      	subs	r0, #0
   be6f2:	bf18      	it	ne
   be6f4:	2001      	movne	r0, #1
}
   be6f6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be6f8:	4902      	ldr	r1, [pc, #8]	; (be704 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be6fa:	2210      	movs	r2, #16
   be6fc:	f005 ff9c 	bl	c4638 <memcmp>
   be700:	e7f6      	b.n	be6f0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be702:	bf00      	nop
   be704:	000c7f12 	.word	0x000c7f12

000be708 <_ZNK8particle7BleUuid4typeEv>:
}
   be708:	6900      	ldr	r0, [r0, #16]
   be70a:	4770      	bx	lr

000be70c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be70c:	b538      	push	{r3, r4, r5, lr}
   be70e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be710:	2214      	movs	r2, #20
   be712:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be714:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be716:	f005 ffc7 	bl	c46a8 <memset>
    if (type_ == BleUuidType::SHORT) {
   be71a:	6923      	ldr	r3, [r4, #16]
   be71c:	b91b      	cbnz	r3, be726 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be71e:	89a3      	ldrh	r3, [r4, #12]
   be720:	802b      	strh	r3, [r5, #0]
}
   be722:	4628      	mov	r0, r5
   be724:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be726:	2301      	movs	r3, #1
   be728:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be72a:	4621      	mov	r1, r4
   be72c:	462b      	mov	r3, r5
   be72e:	f104 0210 	add.w	r2, r4, #16
   be732:	f851 0b04 	ldr.w	r0, [r1], #4
   be736:	f843 0b04 	str.w	r0, [r3], #4
   be73a:	4291      	cmp	r1, r2
   be73c:	d1f9      	bne.n	be732 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be73e:	e7f0      	b.n	be722 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be740 <_ZNK8particle7BleUuid7shortedEv>:
}
   be740:	8980      	ldrh	r0, [r0, #12]
   be742:	4770      	bx	lr

000be744 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be744:	4770      	bx	lr

000be746 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be746:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be748:	6902      	ldr	r2, [r0, #16]
   be74a:	690b      	ldr	r3, [r1, #16]
   be74c:	429a      	cmp	r2, r3
   be74e:	d106      	bne.n	be75e <_ZNK8particle7BleUuideqERKS0_+0x18>
   be750:	2210      	movs	r2, #16
   be752:	f005 ff71 	bl	c4638 <memcmp>
   be756:	fab0 f080 	clz	r0, r0
   be75a:	0940      	lsrs	r0, r0, #5
}
   be75c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be75e:	2000      	movs	r0, #0
   be760:	e7fc      	b.n	be75c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be764 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be764:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be766:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be76a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be76c:	4b34      	ldr	r3, [pc, #208]	; (be840 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be76e:	460c      	mov	r4, r1
   be770:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be772:	4602      	mov	r2, r0
   be774:	f103 0110 	add.w	r1, r3, #16
   be778:	f853 0b04 	ldr.w	r0, [r3], #4
   be77c:	f842 0b04 	str.w	r0, [r2], #4
   be780:	428b      	cmp	r3, r1
   be782:	d1f9      	bne.n	be778 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be784:	b344      	cbz	r4, be7d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be786:	2124      	movs	r1, #36	; 0x24
   be788:	4620      	mov	r0, r4
   be78a:	f006 f85a 	bl	c4842 <strnlen>
   be78e:	2804      	cmp	r0, #4
   be790:	f04f 0500 	mov.w	r5, #0
   be794:	d123      	bne.n	be7de <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be796:	f8ad 5004 	strh.w	r5, [sp, #4]
   be79a:	af01      	add	r7, sp, #4
   be79c:	1ca5      	adds	r5, r4, #2
   be79e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be7a0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be7a4:	f7ff ff0d 	bl	be5c2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be7a8:	f1b0 0800 	subs.w	r8, r0, #0
   be7ac:	db12      	blt.n	be7d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be7ae:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be7b2:	f7ff ff06 	bl	be5c2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be7b6:	2800      	cmp	r0, #0
   be7b8:	db0c      	blt.n	be7d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be7ba:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be7bc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be7c0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be7c2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be7c6:	d1eb      	bne.n	be7a0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be7c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be7cc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be7ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be7d2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be7d4:	2300      	movs	r3, #0
   be7d6:	6133      	str	r3, [r6, #16]
}
   be7d8:	b002      	add	sp, #8
   be7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be7de:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be7e2:	2124      	movs	r1, #36	; 0x24
   be7e4:	4620      	mov	r0, r4
   be7e6:	f006 f82c 	bl	c4842 <strnlen>
   be7ea:	42a8      	cmp	r0, r5
   be7ec:	d807      	bhi.n	be7fe <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be7ee:	4642      	mov	r2, r8
   be7f0:	2100      	movs	r1, #0
   be7f2:	4630      	mov	r0, r6
}
   be7f4:	b002      	add	sp, #8
   be7f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be7fa:	f005 bf55 	b.w	c46a8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be7fe:	f1b8 0f00 	cmp.w	r8, #0
   be802:	d0e9      	beq.n	be7d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be804:	5d60      	ldrb	r0, [r4, r5]
   be806:	f7ff fedc 	bl	be5c2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be80a:	0603      	lsls	r3, r0, #24
   be80c:	d415      	bmi.n	be83a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be80e:	0100      	lsls	r0, r0, #4
   be810:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be814:	b2c7      	uxtb	r7, r0
   be816:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be81a:	2124      	movs	r1, #36	; 0x24
   be81c:	4620      	mov	r0, r4
   be81e:	f006 f810 	bl	c4842 <strnlen>
   be822:	3501      	adds	r5, #1
   be824:	42a8      	cmp	r0, r5
   be826:	d908      	bls.n	be83a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be828:	5d60      	ldrb	r0, [r4, r5]
   be82a:	f7ff feca 	bl	be5c2 <_ZN8particle11hexToNibbleEc>
   be82e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be830:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be832:	bfa4      	itt	ge
   be834:	4338      	orrge	r0, r7
   be836:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be83a:	3501      	adds	r5, #1
   be83c:	e7d1      	b.n	be7e2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be83e:	bf00      	nop
   be840:	000c7ef2 	.word	0x000c7ef2

000be844 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be844:	b513      	push	{r0, r1, r4, lr}
   be846:	4604      	mov	r4, r0
   be848:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be84a:	f7ff ff15 	bl	be678 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be84e:	4620      	mov	r0, r4
   be850:	9901      	ldr	r1, [sp, #4]
   be852:	f7ff ff87 	bl	be764 <_ZN8particle7BleUuid9constructEPKc>
}
   be856:	4620      	mov	r0, r4
   be858:	b002      	add	sp, #8
   be85a:	bd10      	pop	{r4, pc}

000be85c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be85c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be862:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be864:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be866:	8043      	strh	r3, [r0, #2]
   be868:	220e      	movs	r2, #14
   be86a:	4629      	mov	r1, r5
   be86c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be86e:	7105      	strb	r5, [r0, #4]
   be870:	3006      	adds	r0, #6
   be872:	f005 ff19 	bl	c46a8 <memset>
   be876:	f104 0014 	add.w	r0, r4, #20
   be87a:	f7ff fefd 	bl	be678 <_ZN8particle7BleUuidC1Ev>
   be87e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be882:	f7ff fef9 	bl	be678 <_ZN8particle7BleUuidC1Ev>
   be886:	4904      	ldr	r1, [pc, #16]	; (be898 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be888:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be88c:	f003 f8c7 	bl	c1a1e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be890:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be892:	4620      	mov	r0, r4
   be894:	bd38      	pop	{r3, r4, r5, pc}
   be896:	bf00      	nop
   be898:	000c8057 	.word	0x000c8057

000be89c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be89c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be89e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be8a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be8a6:	4293      	cmp	r3, r2
   be8a8:	4618      	mov	r0, r3
   be8aa:	d006      	beq.n	be8ba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be8ac:	6804      	ldr	r4, [r0, #0]
   be8ae:	8824      	ldrh	r4, [r4, #0]
   be8b0:	428c      	cmp	r4, r1
   be8b2:	f103 0308 	add.w	r3, r3, #8
   be8b6:	d1f6      	bne.n	be8a6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be8b8:	bd10      	pop	{r4, pc}
        return nullptr;
   be8ba:	2000      	movs	r0, #0
   be8bc:	e7fc      	b.n	be8b8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be8c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   be8c2:	4606      	mov	r6, r0
   be8c4:	b085      	sub	sp, #20
   be8c6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be8c8:	460d      	mov	r5, r1
   be8ca:	2900      	cmp	r1, #0
   be8cc:	d050      	beq.n	be970 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be8ce:	2a00      	cmp	r2, #0
   be8d0:	d04e      	beq.n	be970 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be8d2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be8d4:	7823      	ldrb	r3, [r4, #0]
   be8d6:	2af4      	cmp	r2, #244	; 0xf4
   be8d8:	bf28      	it	cs
   be8da:	22f4      	movcs	r2, #244	; 0xf4
   be8dc:	b343      	cbz	r3, be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be8de:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be8e0:	0798      	lsls	r0, r3, #30
   be8e2:	d509      	bpl.n	be8f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be8e4:	89a0      	ldrh	r0, [r4, #12]
   be8e6:	9203      	str	r2, [sp, #12]
   be8e8:	2300      	movs	r3, #0
   be8ea:	f7ff f975 	bl	bdbd8 <hal_ble_gatt_server_set_characteristic_value>
   be8ee:	2800      	cmp	r0, #0
   be8f0:	9a03      	ldr	r2, [sp, #12]
   be8f2:	da03      	bge.n	be8fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be8f4:	b005      	add	sp, #20
   be8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be8f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be8fc:	6834      	ldr	r4, [r6, #0]
   be8fe:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be900:	06d9      	lsls	r1, r3, #27
   be902:	d509      	bpl.n	be918 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be904:	2f01      	cmp	r7, #1
   be906:	d007      	beq.n	be918 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be908:	89a0      	ldrh	r0, [r4, #12]
   be90a:	2300      	movs	r3, #0
   be90c:	4629      	mov	r1, r5
}
   be90e:	b005      	add	sp, #20
   be910:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be914:	f7ff b992 	b.w	bdc3c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be918:	069b      	lsls	r3, r3, #26
   be91a:	d5eb      	bpl.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be91c:	2f02      	cmp	r7, #2
   be91e:	d0e9      	beq.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be920:	89a0      	ldrh	r0, [r4, #12]
   be922:	2300      	movs	r3, #0
   be924:	4629      	mov	r1, r5
}
   be926:	b005      	add	sp, #20
   be928:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be92c:	f7ff b990 	b.w	bdc50 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be930:	8860      	ldrh	r0, [r4, #2]
   be932:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be936:	4288      	cmp	r0, r1
   be938:	d01c      	beq.n	be974 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be93a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be93c:	074e      	lsls	r6, r1, #29
   be93e:	d501      	bpl.n	be944 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be940:	2f01      	cmp	r7, #1
   be942:	d104      	bne.n	be94e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be944:	070b      	lsls	r3, r1, #28
   be946:	d409      	bmi.n	be95c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be948:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be94c:	e7d2      	b.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be94e:	89a1      	ldrh	r1, [r4, #12]
   be950:	9300      	str	r3, [sp, #0]
   be952:	4613      	mov	r3, r2
   be954:	462a      	mov	r2, r5
   be956:	f7ff f953 	bl	bdc00 <hal_ble_gatt_client_write_without_response>
   be95a:	e7cb      	b.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be95c:	2f02      	cmp	r7, #2
   be95e:	d0f3      	beq.n	be948 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be960:	2300      	movs	r3, #0
   be962:	89a1      	ldrh	r1, [r4, #12]
   be964:	9300      	str	r3, [sp, #0]
   be966:	4613      	mov	r3, r2
   be968:	462a      	mov	r2, r5
   be96a:	f7ff f93f 	bl	bdbec <hal_ble_gatt_client_write_with_response>
   be96e:	e7c1      	b.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be970:	4802      	ldr	r0, [pc, #8]	; (be97c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be972:	e7bf      	b.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be974:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be978:	e7bc      	b.n	be8f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be97a:	bf00      	nop
   be97c:	fffffef2 	.word	0xfffffef2

000be980 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be984:	2600      	movs	r6, #0
   be986:	6006      	str	r6, [r0, #0]
   be988:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be98a:	2028      	movs	r0, #40	; 0x28
   be98c:	460c      	mov	r4, r1
   be98e:	f7f5 fb82 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be992:	1e05      	subs	r5, r0, #0
   be994:	f105 080c 	add.w	r8, r5, #12
   be998:	d00f      	beq.n	be9ba <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be99a:	2301      	movs	r3, #1
   be99c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be9a0:	4b08      	ldr	r3, [pc, #32]	; (be9c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be9a2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be9a4:	4640      	mov	r0, r8
   be9a6:	f7ff fe67 	bl	be678 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be9aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be9ac:	622e      	str	r6, [r5, #32]
   be9ae:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be9b2:	4646      	mov	r6, r8
   be9b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be9b6:	6823      	ldr	r3, [r4, #0]
   be9b8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be9ba:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be9be:	4638      	mov	r0, r7
   be9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be9c4:	000c7eb4 	.word	0x000c7eb4

000be9c8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be9c8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be9ca:	2500      	movs	r5, #0
   be9cc:	6005      	str	r5, [r0, #0]
   be9ce:	4606      	mov	r6, r0
   be9d0:	2030      	movs	r0, #48	; 0x30
   be9d2:	f7f5 fb60 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be9d6:	4604      	mov	r4, r0
   be9d8:	b188      	cbz	r0, be9fe <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be9da:	2301      	movs	r3, #1
   be9dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be9e0:	4b09      	ldr	r3, [pc, #36]	; (bea08 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be9e2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be9e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be9e8:	8183      	strh	r3, [r0, #12]
   be9ea:	300e      	adds	r0, #14
   be9ec:	f7ff fe39 	bl	be662 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be9f0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be9f4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be9f8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be9fc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be9fe:	6074      	str	r4, [r6, #4]
   bea00:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bea02:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bea04:	4630      	mov	r0, r6
   bea06:	bd70      	pop	{r4, r5, r6, pc}
   bea08:	000c7ed0 	.word	0x000c7ed0

000bea0c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bea0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bea0e:	460d      	mov	r5, r1
   bea10:	4604      	mov	r4, r0
    WiringBleLock lk;
   bea12:	a801      	add	r0, sp, #4
   bea14:	f7ff fdea 	bl	be5ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bea18:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bea1a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bea1e:	6023      	str	r3, [r4, #0]
   bea20:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bea24:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bea26:	a801      	add	r0, sp, #4
   bea28:	f7ff fdee 	bl	be608 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bea2c:	4620      	mov	r0, r4
   bea2e:	b003      	add	sp, #12
   bea30:	bd30      	pop	{r4, r5, pc}

000bea32 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bea32:	b530      	push	{r4, r5, lr}
   bea34:	4605      	mov	r5, r0
   bea36:	b087      	sub	sp, #28
   bea38:	460c      	mov	r4, r1
    WiringBleLock lk;
   bea3a:	a801      	add	r0, sp, #4
   bea3c:	f7ff fdd6 	bl	be5ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bea40:	682a      	ldr	r2, [r5, #0]
   bea42:	6823      	ldr	r3, [r4, #0]
   bea44:	8812      	ldrh	r2, [r2, #0]
   bea46:	881b      	ldrh	r3, [r3, #0]
   bea48:	429a      	cmp	r2, r3
   bea4a:	d10d      	bne.n	bea68 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bea4c:	4629      	mov	r1, r5
   bea4e:	a802      	add	r0, sp, #8
   bea50:	f7ff ffdc 	bl	bea0c <_ZNK8particle13BlePeerDevice7addressEv>
   bea54:	4621      	mov	r1, r4
   bea56:	a804      	add	r0, sp, #16
   bea58:	f7ff ffd8 	bl	bea0c <_ZNK8particle13BlePeerDevice7addressEv>
   bea5c:	a904      	add	r1, sp, #16
   bea5e:	a802      	add	r0, sp, #8
   bea60:	f7ff fdeb 	bl	be63a <_ZNK8particle10BleAddresseqERKS0_>
   bea64:	4604      	mov	r4, r0
   bea66:	b900      	cbnz	r0, bea6a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bea68:	2400      	movs	r4, #0
    WiringBleLock lk;
   bea6a:	a801      	add	r0, sp, #4
   bea6c:	f7ff fdcc 	bl	be608 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bea70:	4620      	mov	r0, r4
   bea72:	b007      	add	sp, #28
   bea74:	bd30      	pop	{r4, r5, pc}
	...

000bea78 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bea78:	b510      	push	{r4, lr}
   bea7a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bea7c:	2064      	movs	r0, #100	; 0x64
   bea7e:	f7f5 fb0a 	bl	b4096 <_Znwj>
   bea82:	b168      	cbz	r0, beaa0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bea84:	2300      	movs	r3, #0
   bea86:	e9c0 3300 	strd	r3, r3, [r0]
   bea8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bea8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bea92:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bea96:	6203      	str	r3, [r0, #32]
   bea98:	62c3      	str	r3, [r0, #44]	; 0x2c
   bea9a:	63c3      	str	r3, [r0, #60]	; 0x3c
   bea9c:	64c3      	str	r3, [r0, #76]	; 0x4c
   bea9e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   beaa0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   beaa2:	b920      	cbnz	r0, beaae <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   beaa4:	4a0a      	ldr	r2, [pc, #40]	; (bead0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   beaa6:	490b      	ldr	r1, [pc, #44]	; (bead4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   beaa8:	200a      	movs	r0, #10
   beaaa:	f7ff fb33 	bl	be114 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   beaae:	2000      	movs	r0, #0
   beab0:	f7ff f856 	bl	bdb60 <hal_ble_stack_init>
   beab4:	b120      	cbz	r0, beac0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   beab6:	4a06      	ldr	r2, [pc, #24]	; (bead0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   beab8:	4907      	ldr	r1, [pc, #28]	; (bead8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   beaba:	200a      	movs	r0, #10
   beabc:	f7ff fb2a 	bl	be114 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   beac0:	6821      	ldr	r1, [r4, #0]
   beac2:	4806      	ldr	r0, [pc, #24]	; (beadc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   beac4:	2200      	movs	r2, #0
   beac6:	f7ff f8af 	bl	bdc28 <hal_ble_set_callback_on_periph_link_events>
}
   beaca:	4620      	mov	r0, r4
   beacc:	bd10      	pop	{r4, pc}
   beace:	bf00      	nop
   bead0:	000bdd25 	.word	0x000bdd25
   bead4:	000c7d41 	.word	0x000c7d41
   bead8:	000c7d7f 	.word	0x000c7d7f
   beadc:	000bf09d 	.word	0x000bf09d

000beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   beae0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   beae2:	4c0a      	ldr	r4, [pc, #40]	; (beb0c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   beae4:	7823      	ldrb	r3, [r4, #0]
   beae6:	f3bf 8f5b 	dmb	ish
   beaea:	07db      	lsls	r3, r3, #31
   beaec:	d40c      	bmi.n	beb08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beaee:	4620      	mov	r0, r4
   beaf0:	f7f5 fae6 	bl	b40c0 <__cxa_guard_acquire>
   beaf4:	b140      	cbz	r0, beb08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beaf6:	4806      	ldr	r0, [pc, #24]	; (beb10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beaf8:	f7ff ffbe 	bl	bea78 <_ZN8particle14BleLocalDeviceC1Ev>
   beafc:	4620      	mov	r0, r4
   beafe:	f7f5 fae4 	bl	b40ca <__cxa_guard_release>
   beb02:	4804      	ldr	r0, [pc, #16]	; (beb14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   beb04:	f005 fd82 	bl	c460c <atexit>
    return instance;
}
   beb08:	4801      	ldr	r0, [pc, #4]	; (beb10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beb0a:	bd10      	pop	{r4, pc}
   beb0c:	2003e620 	.word	0x2003e620
   beb10:	2003e62c 	.word	0x2003e62c
   beb14:	000bed55 	.word	0x000bed55

000beb18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beb18:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   beb1a:	6803      	ldr	r3, [r0, #0]
   beb1c:	3b09      	subs	r3, #9
   beb1e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beb20:	b08d      	sub	sp, #52	; 0x34
   beb22:	4604      	mov	r4, r0
   beb24:	460d      	mov	r5, r1
    switch (event->type) {
   beb26:	d811      	bhi.n	beb4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   beb28:	f7ff ffda 	bl	beae0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   beb2c:	88a1      	ldrh	r1, [r4, #4]
   beb2e:	6800      	ldr	r0, [r0, #0]
   beb30:	f7ff feb4 	bl	be89c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   beb34:	4603      	mov	r3, r0
   beb36:	b958      	cbnz	r0, beb50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   beb38:	2220      	movs	r2, #32
   beb3a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   beb3e:	4a0b      	ldr	r2, [pc, #44]	; (beb6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   beb40:	9200      	str	r2, [sp, #0]
   beb42:	490b      	ldr	r1, [pc, #44]	; (beb70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   beb44:	aa04      	add	r2, sp, #16
   beb46:	2032      	movs	r0, #50	; 0x32
   beb48:	f7ff faec 	bl	be124 <log_message>
}
   beb4c:	b00d      	add	sp, #52	; 0x34
   beb4e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   beb50:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   beb52:	2a00      	cmp	r2, #0
   beb54:	d0fa      	beq.n	beb4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   beb56:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beb5a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   beb5e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   beb62:	6dac      	ldr	r4, [r5, #88]	; 0x58
   beb64:	aa04      	add	r2, sp, #16
   beb66:	a903      	add	r1, sp, #12
   beb68:	47a0      	blx	r4
}
   beb6a:	e7ef      	b.n	beb4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   beb6c:	000c7dc1 	.word	0x000c7dc1
   beb70:	000c7d58 	.word	0x000c7d58

000beb74 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   beb74:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   beb76:	2000      	movs	r0, #0
   beb78:	f7fe fff2 	bl	bdb60 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   beb7c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   beb80:	bd08      	pop	{r3, pc}

000beb82 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   beb82:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   beb84:	2100      	movs	r1, #0
   beb86:	f7fe bff3 	b.w	bdb70 <hal_ble_gap_set_tx_power>

000beb8a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   beb8a:	b919      	cbnz	r1, beb94 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   beb8c:	460a      	mov	r2, r1
   beb8e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   beb90:	f7fe bff6 	b.w	bdb80 <hal_ble_gap_set_advertising_data>
   beb94:	e9d1 0100 	ldrd	r0, r1, [r1]
   beb98:	2200      	movs	r2, #0
   beb9a:	e7f9      	b.n	beb90 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000beb9c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   beb9c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   beb9e:	69d8      	ldr	r0, [r3, #28]
}
   beba0:	2800      	cmp	r0, #0
   beba2:	bfd4      	ite	le
   beba4:	2000      	movle	r0, #0
   beba6:	2001      	movgt	r0, #1
   beba8:	4770      	bx	lr

000bebaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bebaa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bebac:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bebb0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bebb2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bebb6:	42ae      	cmp	r6, r5
   bebb8:	d004      	beq.n	bebc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bebba:	4628      	mov	r0, r5
   bebbc:	f002 fee4 	bl	c1988 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bebc0:	3510      	adds	r5, #16
   bebc2:	e7f8      	b.n	bebb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bebc4:	6820      	ldr	r0, [r4, #0]
   bebc6:	f7ff fbbb 	bl	be340 <free>
}
   bebca:	4620      	mov	r0, r4
   bebcc:	bd70      	pop	{r4, r5, r6, pc}

000bebce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bebce:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bebd0:	1e14      	subs	r4, r2, #0
   bebd2:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bebd4:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bebd6:	db02      	blt.n	bebde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bebd8:	1862      	adds	r2, r4, r1
   bebda:	429a      	cmp	r2, r3
   bebdc:	dd00      	ble.n	bebe0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bebde:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bebe0:	682a      	ldr	r2, [r5, #0]
   bebe2:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bebe4:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bebe6:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bebe8:	1a52      	subs	r2, r2, r1
   bebea:	f005 fd43 	bl	c4674 <memmove>
    size_ -= n;
   bebee:	686a      	ldr	r2, [r5, #4]
   bebf0:	1b12      	subs	r2, r2, r4
   bebf2:	606a      	str	r2, [r5, #4]
}
   bebf4:	bd38      	pop	{r3, r4, r5, pc}

000bebf6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bebf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bebf8:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bebfa:	4604      	mov	r4, r0
   bebfc:	460d      	mov	r5, r1
   bebfe:	ab01      	add	r3, sp, #4
   bec00:	e9d0 0100 	ldrd	r0, r1, [r0]
   bec04:	f7ff fc72 	bl	be4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bec08:	4602      	mov	r2, r0
   bec0a:	b138      	cbz	r0, bec1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bec0c:	9901      	ldr	r1, [sp, #4]
   bec0e:	4620      	mov	r0, r4
   bec10:	f7ff ffdd 	bl	bebce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bec14:	4629      	mov	r1, r5
   bec16:	4620      	mov	r0, r4
   bec18:	f7ff ffed 	bl	bebf6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bec1c:	b003      	add	sp, #12
   bec1e:	bd30      	pop	{r4, r5, pc}

000bec20 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bec20:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bec22:	460c      	mov	r4, r1
   bec24:	b929      	cbnz	r1, bec32 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bec26:	460a      	mov	r2, r1
   bec28:	4608      	mov	r0, r1
}
   bec2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bec2e:	f7fe bfaf 	b.w	bdb90 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bec32:	2101      	movs	r1, #1
   bec34:	4620      	mov	r0, r4
   bec36:	f7ff ffde 	bl	bebf6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bec3a:	e9d4 0100 	ldrd	r0, r1, [r4]
   bec3e:	2200      	movs	r2, #0
   bec40:	e7f3      	b.n	bec2a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bec42 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bec42:	b538      	push	{r3, r4, r5, lr}
   bec44:	4604      	mov	r4, r0
   bec46:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bec48:	f7ff ff9f 	bl	beb8a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bec4c:	2800      	cmp	r0, #0
   bec4e:	db0a      	blt.n	bec66 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bec50:	4629      	mov	r1, r5
   bec52:	4620      	mov	r0, r4
   bec54:	f7ff ffe4 	bl	bec20 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bec58:	2800      	cmp	r0, #0
   bec5a:	db04      	blt.n	bec66 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bec5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bec60:	2000      	movs	r0, #0
   bec62:	f7fe bf9d 	b.w	bdba0 <hal_ble_gap_start_advertising>
}
   bec66:	bd38      	pop	{r3, r4, r5, pc}

000bec68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bec68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bec6a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bec6c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bec6e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bec70:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bec72:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bec74:	f7f5 fa0f 	bl	b4096 <_Znwj>
   bec78:	b118      	cbz	r0, bec82 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bec7a:	682b      	ldr	r3, [r5, #0]
   bec7c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bec7e:	686b      	ldr	r3, [r5, #4]
   bec80:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bec82:	4b03      	ldr	r3, [pc, #12]	; (bec90 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bec84:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bec86:	4b03      	ldr	r3, [pc, #12]	; (bec94 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bec88:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bec8a:	60a3      	str	r3, [r4, #8]
      }
   bec8c:	4620      	mov	r0, r4
   bec8e:	bd38      	pop	{r3, r4, r5, pc}
   bec90:	000be52d 	.word	0x000be52d
   bec94:	000be545 	.word	0x000be545

000bec98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bec98:	680b      	ldr	r3, [r1, #0]
   bec9a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bec9c:	b113      	cbz	r3, beca4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bec9e:	685a      	ldr	r2, [r3, #4]
   beca0:	3201      	adds	r2, #1
   beca2:	605a      	str	r2, [r3, #4]
      }
   beca4:	4770      	bx	lr

000beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   beca6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   beca8:	f851 3b04 	ldr.w	r3, [r1], #4
   becac:	4604      	mov	r4, r0
   becae:	f840 3b04 	str.w	r3, [r0], #4
   becb2:	f7ff fff1 	bl	bec98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   becb6:	6823      	ldr	r3, [r4, #0]
   becb8:	b90b      	cbnz	r3, becbe <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   becba:	f7ff fc2d 	bl	be518 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   becbe:	4620      	mov	r0, r4
   becc0:	bd10      	pop	{r4, pc}

000becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   becc2:	b510      	push	{r4, lr}
   becc4:	f851 3b04 	ldr.w	r3, [r1], #4
   becc8:	4604      	mov	r4, r0
   becca:	f840 3b04 	str.w	r3, [r0], #4
   becce:	f7ff ffe3 	bl	bec98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   becd2:	4620      	mov	r0, r4
   becd4:	bd10      	pop	{r4, pc}

000becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   becd6:	b510      	push	{r4, lr}
   becd8:	f851 3b04 	ldr.w	r3, [r1], #4
   becdc:	4604      	mov	r4, r0
   becde:	f840 3b04 	str.w	r3, [r0], #4
   bece2:	f7ff ffd9 	bl	bec98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bece6:	4620      	mov	r0, r4
   bece8:	bd10      	pop	{r4, pc}

000becea <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   becea:	b510      	push	{r4, lr}
   becec:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   becee:	3004      	adds	r0, #4
   becf0:	f7f7 f908 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   becf4:	4620      	mov	r0, r4
   becf6:	bd10      	pop	{r4, pc}

000becf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   becf8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   becfa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   becfe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bed00:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bed04:	42ae      	cmp	r6, r5
   bed06:	d004      	beq.n	bed12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bed08:	1d28      	adds	r0, r5, #4
   bed0a:	f7f7 f8fb 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bed0e:	3508      	adds	r5, #8
   bed10:	e7f8      	b.n	bed04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bed12:	6820      	ldr	r0, [r4, #0]
   bed14:	f7ff fb14 	bl	be340 <free>
}
   bed18:	4620      	mov	r0, r4
   bed1a:	bd70      	pop	{r4, r5, r6, pc}

000bed1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bed1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bed1e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bed22:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bed24:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bed28:	42ae      	cmp	r6, r5
   bed2a:	d004      	beq.n	bed36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bed2c:	1d28      	adds	r0, r5, #4
   bed2e:	f7f7 f8e9 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bed32:	3508      	adds	r5, #8
   bed34:	e7f8      	b.n	bed28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bed36:	6820      	ldr	r0, [r4, #0]
   bed38:	f7ff fb02 	bl	be340 <free>
}
   bed3c:	4620      	mov	r0, r4
   bed3e:	bd70      	pop	{r4, r5, r6, pc}

000bed40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bed40:	b510      	push	{r4, lr}
   bed42:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bed44:	3024      	adds	r0, #36	; 0x24
   bed46:	f7ff ffe9 	bl	bed1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bed4a:	f104 0018 	add.w	r0, r4, #24
   bed4e:	f7ff ffd3 	bl	becf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bed52:	bd10      	pop	{r4, pc}

000bed54 <__tcf_0>:
    static BleLocalDevice instance;
   bed54:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bed56:	4b17      	ldr	r3, [pc, #92]	; (bedb4 <__tcf_0+0x60>)
   bed58:	681c      	ldr	r4, [r3, #0]
   bed5a:	b354      	cbz	r4, bedb2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bed5c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bed60:	f7f5 fbb6 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bed64:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bed68:	f7f5 fbb2 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bed6c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bed70:	f7f5 fbae 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bed74:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bed78:	f7f5 fbaa 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bed7c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bed80:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bed84:	42ae      	cmp	r6, r5
   bed86:	d004      	beq.n	bed92 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bed88:	1d28      	adds	r0, r5, #4
   bed8a:	f7f7 f8bb 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bed8e:	3508      	adds	r5, #8
   bed90:	e7f8      	b.n	bed84 <__tcf_0+0x30>
    ::free(ptr);
   bed92:	69a0      	ldr	r0, [r4, #24]
   bed94:	f7ff fad4 	bl	be340 <free>
    ~BleLocalDeviceImpl() = default;
   bed98:	f104 000c 	add.w	r0, r4, #12
   bed9c:	f7ff ffbe 	bl	bed1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beda0:	4620      	mov	r0, r4
   beda2:	f7ff ffa9 	bl	becf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   beda6:	4620      	mov	r0, r4
   beda8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bedaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bedae:	f7f5 b978 	b.w	b40a2 <_ZdlPvj>
   bedb2:	bd70      	pop	{r4, r5, r6, pc}
   bedb4:	2003e62c 	.word	0x2003e62c

000bedb8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bedb8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bedba:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bedbc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bedc0:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bedc4:	6803      	ldr	r3, [r0, #0]
   bedc6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bedc8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bedca:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bedcc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bedce:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bedd0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bedd2:	f7f7 f897 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bedd6:	b002      	add	sp, #8
   bedd8:	bd10      	pop	{r4, pc}

000bedda <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bedda:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   beddc:	b510      	push	{r4, lr}
      if (_M_empty())
   bedde:	b90a      	cbnz	r2, bede4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bede0:	f003 fa3a 	bl	c2258 <_ZSt25__throw_bad_function_callv>
    }
   bede4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bede8:	68c3      	ldr	r3, [r0, #12]
   bedea:	4718      	bx	r3

000bedec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bedec:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bedee:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bedf0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bedf2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bedf4:	dd03      	ble.n	bedfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bedf6:	f7ff faab 	bl	be350 <realloc>
            if (!d) {
   bedfa:	b918      	cbnz	r0, bee04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bedfc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bedfe:	f7ff fa9f 	bl	be340 <free>
        T* d = nullptr;
   bee02:	2000      	movs	r0, #0
        data_ = d;
   bee04:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bee06:	60a5      	str	r5, [r4, #8]
        return true;
   bee08:	2001      	movs	r0, #1
   bee0a:	e7f7      	b.n	bedfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bee0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bee0c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bee0e:	6883      	ldr	r3, [r0, #8]
   bee10:	428b      	cmp	r3, r1
   bee12:	da02      	bge.n	bee1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bee14:	f7ff ffea 	bl	bedec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bee18:	bd08      	pop	{r3, pc}
    return true;
   bee1a:	2001      	movs	r0, #1
   bee1c:	e7fc      	b.n	bee18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bee1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bee1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bee22:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bee24:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bee26:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bee28:	4419      	add	r1, r3
   bee2a:	6883      	ldr	r3, [r0, #8]
   bee2c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bee2e:	4604      	mov	r4, r0
   bee30:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bee32:	dc12      	bgt.n	bee5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bee34:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bee36:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bee38:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bee3a:	1bd2      	subs	r2, r2, r7
   bee3c:	4631      	mov	r1, r6
   bee3e:	1970      	adds	r0, r6, r5
   bee40:	f005 fc18 	bl	c4674 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bee44:	462a      	mov	r2, r5
   bee46:	4641      	mov	r1, r8
   bee48:	4630      	mov	r0, r6
   bee4a:	f005 fc05 	bl	c4658 <memcpy>
    size_ += n;
   bee4e:	6863      	ldr	r3, [r4, #4]
   bee50:	442b      	add	r3, r5
   bee52:	6063      	str	r3, [r4, #4]
    return true;
   bee54:	2001      	movs	r0, #1
}
   bee56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bee5a:	f7ff ffc7 	bl	bedec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bee5e:	2800      	cmp	r0, #0
   bee60:	d1e8      	bne.n	bee34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bee62:	e7f8      	b.n	bee56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bee64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bee66:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bee68:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bee6c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bee6e:	4604      	mov	r4, r0
   bee70:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bee72:	da0b      	bge.n	bee8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bee74:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bee76:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bee78:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bee7a:	1b52      	subs	r2, r2, r5
   bee7c:	1c48      	adds	r0, r1, #1
   bee7e:	f005 fbf9 	bl	c4674 <memmove>
    new(p) T(std::move(value));
   bee82:	557e      	strb	r6, [r7, r5]
    ++size_;
   bee84:	6863      	ldr	r3, [r4, #4]
   bee86:	3301      	adds	r3, #1
   bee88:	6063      	str	r3, [r4, #4]
}
   bee8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bee8c:	3101      	adds	r1, #1
   bee8e:	f7ff ffad 	bl	bedec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bee92:	2800      	cmp	r0, #0
   bee94:	d1ee      	bne.n	bee74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bee96:	e7f8      	b.n	bee8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bee98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bee98:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bee9a:	6841      	ldr	r1, [r0, #4]
   bee9c:	f7ff bfe2 	b.w	bee64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000beea0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   beea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   beea4:	4604      	mov	r4, r0
   beea6:	461d      	mov	r5, r3
   beea8:	460f      	mov	r7, r1
   beeaa:	ab01      	add	r3, sp, #4
   beeac:	4690      	mov	r8, r2
   beeae:	460a      	mov	r2, r1
   beeb0:	e9d0 0100 	ldrd	r0, r1, [r0]
   beeb4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   beeb8:	f7ff fb18 	bl	be4ec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   beebc:	1cae      	adds	r6, r5, #2
   beebe:	6863      	ldr	r3, [r4, #4]
   beec0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   beec2:	f1b9 0f00 	cmp.w	r9, #0
   beec6:	d126      	bne.n	bef16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   beec8:	b328      	cbz	r0, bef16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   beeca:	4433      	add	r3, r6
   beecc:	1a1b      	subs	r3, r3, r0
   beece:	2bff      	cmp	r3, #255	; 0xff
   beed0:	d809      	bhi.n	beee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   beed2:	9901      	ldr	r1, [sp, #4]
   beed4:	4620      	mov	r0, r4
   beed6:	f7ff fe7a 	bl	bebce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   beeda:	6861      	ldr	r1, [r4, #4]
   beedc:	4620      	mov	r0, r4
   beede:	4431      	add	r1, r6
   beee0:	f7ff ff94 	bl	bee0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   beee4:	b918      	cbnz	r0, beeee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   beee6:	6860      	ldr	r0, [r4, #4]
}
   beee8:	b003      	add	sp, #12
   beeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   beeee:	1c6a      	adds	r2, r5, #1
   beef0:	9901      	ldr	r1, [sp, #4]
   beef2:	b2d2      	uxtb	r2, r2
   beef4:	4620      	mov	r0, r4
   beef6:	f7ff ffb5 	bl	bee64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   beefa:	9901      	ldr	r1, [sp, #4]
   beefc:	463a      	mov	r2, r7
   beefe:	3101      	adds	r1, #1
   bef00:	4620      	mov	r0, r4
   bef02:	f7ff ffaf 	bl	bee64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bef06:	9901      	ldr	r1, [sp, #4]
   bef08:	462b      	mov	r3, r5
   bef0a:	4642      	mov	r2, r8
   bef0c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bef0e:	4620      	mov	r0, r4
   bef10:	f7ff ff85 	bl	bee1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bef14:	e7e7      	b.n	beee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bef16:	18f1      	adds	r1, r6, r3
   bef18:	29ff      	cmp	r1, #255	; 0xff
   bef1a:	d8e4      	bhi.n	beee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bef1c:	4620      	mov	r0, r4
   bef1e:	f7ff ff75 	bl	bee0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bef22:	2800      	cmp	r0, #0
   bef24:	d0df      	beq.n	beee6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bef26:	1c69      	adds	r1, r5, #1
   bef28:	b2c9      	uxtb	r1, r1
   bef2a:	4620      	mov	r0, r4
   bef2c:	f7ff ffb4 	bl	bee98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bef30:	4639      	mov	r1, r7
   bef32:	4620      	mov	r0, r4
   bef34:	f7ff ffb0 	bl	bee98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bef38:	6861      	ldr	r1, [r4, #4]
   bef3a:	462b      	mov	r3, r5
   bef3c:	4642      	mov	r2, r8
   bef3e:	e7e6      	b.n	bef0e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bef40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bef40:	b430      	push	{r4, r5}
   bef42:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bef46:	b11a      	cbz	r2, bef50 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bef48:	9502      	str	r5, [sp, #8]
}
   bef4a:	bc30      	pop	{r4, r5}
   bef4c:	f7ff bfa8 	b.w	beea0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bef50:	6840      	ldr	r0, [r0, #4]
}
   bef52:	bc30      	pop	{r4, r5}
   bef54:	4770      	bx	lr

000bef56 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bef56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bef58:	2300      	movs	r3, #0
   bef5a:	e9c0 3300 	strd	r3, r3, [r0]
   bef5e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bef60:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bef62:	9300      	str	r3, [sp, #0]
   bef64:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bef66:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bef6a:	4619      	mov	r1, r3
   bef6c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bef70:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bef72:	f7ff ffe5 	bl	bef40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bef76:	4620      	mov	r0, r4
   bef78:	b004      	add	sp, #16
   bef7a:	bd10      	pop	{r4, pc}

000bef7c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bef7c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bef7e:	9300      	str	r3, [sp, #0]
   bef80:	4613      	mov	r3, r2
   bef82:	460a      	mov	r2, r1
   bef84:	21ff      	movs	r1, #255	; 0xff
   bef86:	f7ff ffdb 	bl	bef40 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bef8a:	b003      	add	sp, #12
   bef8c:	f85d fb04 	ldr.w	pc, [sp], #4

000bef90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bef90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bef92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bef94:	4604      	mov	r4, r0
   bef96:	460d      	mov	r5, r1
   bef98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bef9a:	d914      	bls.n	befc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bef9c:	4290      	cmp	r0, r2
   bef9e:	d213      	bcs.n	befc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   befa0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   befa4:	1a75      	subs	r5, r6, r1
   befa6:	f1a1 0708 	sub.w	r7, r1, #8
   befaa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   befac:	42b7      	cmp	r7, r6
   befae:	d018      	beq.n	befe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   befb0:	b11c      	cbz	r4, befba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   befb2:	4631      	mov	r1, r6
   befb4:	4620      	mov	r0, r4
   befb6:	f7ff fe8e 	bl	becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   befba:	1d30      	adds	r0, r6, #4
   befbc:	f7f6 ffa2 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   befc0:	3e08      	subs	r6, #8
   befc2:	3c08      	subs	r4, #8
   befc4:	e7f2      	b.n	befac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   befc6:	d00c      	beq.n	befe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   befc8:	42b5      	cmp	r5, r6
   befca:	d00a      	beq.n	befe2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   befcc:	b11c      	cbz	r4, befd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   befce:	4629      	mov	r1, r5
   befd0:	4620      	mov	r0, r4
   befd2:	f7ff fe80 	bl	becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   befd6:	1d28      	adds	r0, r5, #4
   befd8:	f7f6 ff94 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   befdc:	3508      	adds	r5, #8
   befde:	3408      	adds	r4, #8
   befe0:	e7f2      	b.n	befc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   befe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000befe4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   befe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   befe6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   befe8:	6846      	ldr	r6, [r0, #4]
   befea:	4668      	mov	r0, sp
   befec:	f7ff fe73 	bl	becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beff0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   beff4:	429f      	cmp	r7, r3
   beff6:	db12      	blt.n	bf01e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   beff8:	3701      	adds	r7, #1
        if (n > 0) {
   beffa:	2f00      	cmp	r7, #0
   beffc:	dd29      	ble.n	bf052 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   beffe:	00f8      	lsls	r0, r7, #3
   bf000:	f7ff f996 	bl	be330 <malloc>
            if (!d) {
   bf004:	4605      	mov	r5, r0
   bf006:	b1f0      	cbz	r0, bf046 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bf008:	e9d4 1200 	ldrd	r1, r2, [r4]
   bf00c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf010:	f7ff ffbe 	bl	bef90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf014:	6820      	ldr	r0, [r4, #0]
   bf016:	f7ff f993 	bl	be340 <free>
        data_ = d;
   bf01a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bf01c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bf01e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf020:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf022:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bf026:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf02a:	4631      	mov	r1, r6
   bf02c:	f106 0008 	add.w	r0, r6, #8
   bf030:	f7ff ffae 	bl	bef90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf034:	b11e      	cbz	r6, bf03e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bf036:	4669      	mov	r1, sp
   bf038:	4630      	mov	r0, r6
   bf03a:	f7ff fe4c 	bl	becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bf03e:	6863      	ldr	r3, [r4, #4]
   bf040:	3301      	adds	r3, #1
   bf042:	6063      	str	r3, [r4, #4]
    return true;
   bf044:	2501      	movs	r5, #1
   bf046:	a801      	add	r0, sp, #4
   bf048:	f7f6 ff5c 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf04c:	4628      	mov	r0, r5
   bf04e:	b003      	add	sp, #12
   bf050:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bf052:	2500      	movs	r5, #0
   bf054:	e7de      	b.n	bf014 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bf056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bf058:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf05c:	4605      	mov	r5, r0
   bf05e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bf060:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bf064:	42a6      	cmp	r6, r4
   bf066:	d005      	beq.n	bf074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bf068:	4639      	mov	r1, r7
   bf06a:	4620      	mov	r0, r4
   bf06c:	f7ff fce1 	bl	bea32 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bf070:	b108      	cbz	r0, bf076 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bf072:	b914      	cbnz	r4, bf07a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bf074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bf076:	3408      	adds	r4, #8
   bf078:	e7f4      	b.n	bf064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bf07a:	1d20      	adds	r0, r4, #4
   bf07c:	f7f6 ff42 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bf080:	e9d5 3200 	ldrd	r3, r2, [r5]
   bf084:	f104 0108 	add.w	r1, r4, #8
   bf088:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf08c:	4620      	mov	r0, r4
   bf08e:	f7ff ff7f 	bl	bef90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bf092:	686b      	ldr	r3, [r5, #4]
   bf094:	3b01      	subs	r3, #1
   bf096:	606b      	str	r3, [r5, #4]
    return true;
   bf098:	e7ec      	b.n	bf074 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bf09c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf0a0:	4605      	mov	r5, r0
   bf0a2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bf0a4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf0a6:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf0a8:	f7ff faa0 	bl	be5ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf0ac:	682e      	ldr	r6, [r5, #0]
   bf0ae:	1ef3      	subs	r3, r6, #3
   bf0b0:	2b0d      	cmp	r3, #13
   bf0b2:	d83c      	bhi.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf0b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf0b8:	0053000e 	.word	0x0053000e
   bf0bc:	00d1003b 	.word	0x00d1003b
   bf0c0:	003b003b 	.word	0x003b003b
   bf0c4:	003b003b 	.word	0x003b003b
   bf0c8:	009b003b 	.word	0x009b003b
   bf0cc:	009b009b 	.word	0x009b009b
   bf0d0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf0d4:	a804      	add	r0, sp, #16
   bf0d6:	f7ff fc77 	bl	be9c8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf0da:	9b04      	ldr	r3, [sp, #16]
   bf0dc:	89aa      	ldrh	r2, [r5, #12]
   bf0de:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf0e0:	6869      	ldr	r1, [r5, #4]
   bf0e2:	9804      	ldr	r0, [sp, #16]
   bf0e4:	3108      	adds	r1, #8
   bf0e6:	3002      	adds	r0, #2
   bf0e8:	f7ff fa9a 	bl	be620 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf0ec:	a904      	add	r1, sp, #16
   bf0ee:	a806      	add	r0, sp, #24
   bf0f0:	f7ff fdf1 	bl	becd6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf0f4:	a906      	add	r1, sp, #24
   bf0f6:	f104 0018 	add.w	r0, r4, #24
   bf0fa:	f7ff ff73 	bl	befe4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf0fe:	4605      	mov	r5, r0
   bf100:	a807      	add	r0, sp, #28
   bf102:	f7f6 feff 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf106:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf108:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf10a:	b9b5      	cbnz	r5, bf13a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf10c:	4b5d      	ldr	r3, [pc, #372]	; (bf284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf10e:	495e      	ldr	r1, [pc, #376]	; (bf288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf110:	9300      	str	r3, [sp, #0]
   bf112:	2032      	movs	r0, #50	; 0x32
   bf114:	462b      	mov	r3, r5
   bf116:	aa06      	add	r2, sp, #24
   bf118:	9507      	str	r5, [sp, #28]
   bf11a:	f7ff f803 	bl	be124 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf11e:	9b04      	ldr	r3, [sp, #16]
   bf120:	4629      	mov	r1, r5
   bf122:	8818      	ldrh	r0, [r3, #0]
   bf124:	f7fe fd44 	bl	bdbb0 <hal_ble_gap_disconnect>
   bf128:	a805      	add	r0, sp, #20
   bf12a:	f7f6 feeb 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf12e:	a803      	add	r0, sp, #12
   bf130:	f7ff fa6a 	bl	be608 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf134:	b00e      	add	sp, #56	; 0x38
   bf136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf13a:	4a54      	ldr	r2, [pc, #336]	; (bf28c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf13c:	9200      	str	r2, [sp, #0]
   bf13e:	2300      	movs	r3, #0
   bf140:	4951      	ldr	r1, [pc, #324]	; (bf288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf142:	9307      	str	r3, [sp, #28]
   bf144:	aa06      	add	r2, sp, #24
   bf146:	2001      	movs	r0, #1
   bf148:	f7fe ffec 	bl	be124 <log_message>
                if (impl->connectedCallback_) {
   bf14c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf14e:	2b00      	cmp	r3, #0
   bf150:	d0ea      	beq.n	bf128 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf152:	a904      	add	r1, sp, #16
   bf154:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf158:	f7ff fe3f 	bl	bedda <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf15c:	e7e4      	b.n	bf128 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf15e:	89a9      	ldrh	r1, [r5, #12]
   bf160:	4620      	mov	r0, r4
   bf162:	f7ff fb9b 	bl	be89c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf166:	4606      	mov	r6, r0
   bf168:	2800      	cmp	r0, #0
   bf16a:	d0e0      	beq.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf16c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf16e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf172:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf176:	8029      	strh	r1, [r5, #0]
   bf178:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf17c:	429a      	cmp	r2, r3
   bf17e:	d003      	beq.n	bf188 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf180:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf184:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf186:	e7f9      	b.n	bf17c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf188:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf18c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf190:	45b8      	cmp	r8, r7
   bf192:	d004      	beq.n	bf19e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf194:	1d38      	adds	r0, r7, #4
   bf196:	f7f6 feb5 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf19a:	3708      	adds	r7, #8
   bf19c:	e7f8      	b.n	bf190 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf19e:	2300      	movs	r3, #0
   bf1a0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf1a2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf1a6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf1aa:	45b8      	cmp	r8, r7
   bf1ac:	d004      	beq.n	bf1b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf1ae:	1d38      	adds	r0, r7, #4
   bf1b0:	f7f6 fea8 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf1b4:	3708      	adds	r7, #8
   bf1b6:	e7f8      	b.n	bf1aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf1b8:	2300      	movs	r3, #0
   bf1ba:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf1bc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf1be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf1c0:	b123      	cbz	r3, bf1cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf1c2:	4631      	mov	r1, r6
   bf1c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf1c8:	f7ff fe07 	bl	bedda <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf1cc:	2300      	movs	r3, #0
   bf1ce:	2220      	movs	r2, #32
   bf1d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf1d4:	4a2e      	ldr	r2, [pc, #184]	; (bf290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf1d6:	9200      	str	r2, [sp, #0]
   bf1d8:	492b      	ldr	r1, [pc, #172]	; (bf288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf1da:	aa06      	add	r2, sp, #24
   bf1dc:	2001      	movs	r0, #1
   bf1de:	f7fe ffa1 	bl	be124 <log_message>
                    impl->peers_.removeOne(*peer);
   bf1e2:	4631      	mov	r1, r6
   bf1e4:	f104 0018 	add.w	r0, r4, #24
   bf1e8:	f7ff ff35 	bl	bf056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf1ec:	e79f      	b.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf1ee:	89a9      	ldrh	r1, [r5, #12]
   bf1f0:	4620      	mov	r0, r4
   bf1f2:	f7ff fb53 	bl	be89c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf1f6:	2800      	cmp	r0, #0
   bf1f8:	d099      	beq.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf1fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf1fc:	2b00      	cmp	r3, #0
   bf1fe:	d096      	beq.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf200:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf202:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf204:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf208:	d001      	beq.n	bf20e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf20a:	2e10      	cmp	r6, #16
   bf20c:	d117      	bne.n	bf23e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf20e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf210:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf212:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf214:	2506      	movs	r5, #6
                        };
   bf216:	f88d 3015 	strb.w	r3, [sp, #21]
   bf21a:	9104      	str	r1, [sp, #16]
   bf21c:	f88d 2014 	strb.w	r2, [sp, #20]
   bf220:	9006      	str	r0, [sp, #24]
   bf222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf226:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf228:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf22c:	9508      	str	r5, [sp, #32]
   bf22e:	e883 0003 	stmia.w	r3, {r0, r1}
   bf232:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf234:	a906      	add	r1, sp, #24
   bf236:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf23a:	4798      	blx	r3
   bf23c:	e777      	b.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf23e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf240:	bf01      	itttt	eq
   bf242:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf244:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf246:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf24a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf24c:	bf0f      	iteee	eq
   bf24e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf252:	461a      	movne	r2, r3
   bf254:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf256:	461d      	movne	r5, r3
   bf258:	e7dd      	b.n	bf216 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf25a:	89a9      	ldrh	r1, [r5, #12]
   bf25c:	4620      	mov	r0, r4
   bf25e:	f7ff fb1d 	bl	be89c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf262:	4601      	mov	r1, r0
   bf264:	2800      	cmp	r0, #0
   bf266:	f43f af62 	beq.w	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf26a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf26c:	2b00      	cmp	r3, #0
   bf26e:	f43f af5e 	beq.w	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf272:	686b      	ldr	r3, [r5, #4]
   bf274:	9306      	str	r3, [sp, #24]
   bf276:	aa06      	add	r2, sp, #24
   bf278:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf27a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf27e:	4798      	blx	r3
   bf280:	e755      	b.n	bf12e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf282:	bf00      	nop
   bf284:	000c7dd9 	.word	0x000c7dd9
   bf288:	000c7d58 	.word	0x000c7d58
   bf28c:	000c7dff 	.word	0x000c7dff
   bf290:	000c7e1c 	.word	0x000c7e1c

000bf294 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf294:	b513      	push	{r0, r1, r4, lr}
   bf296:	460b      	mov	r3, r1
   bf298:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf29a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf29e:	466c      	mov	r4, sp
   bf2a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf2a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf2a8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf2ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf2b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf2b4:	b002      	add	sp, #8
   bf2b6:	bd10      	pop	{r4, pc}

000bf2b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf2b8:	b538      	push	{r3, r4, r5, lr}
   bf2ba:	4605      	mov	r5, r0
   bf2bc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf2be:	f7ff ffe9 	bl	bf294 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf2c2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf2c4:	68a2      	ldr	r2, [r4, #8]
   bf2c6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf2c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf2ca:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf2cc:	68e2      	ldr	r2, [r4, #12]
   bf2ce:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf2d0:	60e3      	str	r3, [r4, #12]
      }
   bf2d2:	bd38      	pop	{r3, r4, r5, pc}

000bf2d4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf2d4:	b570      	push	{r4, r5, r6, lr}
   bf2d6:	4604      	mov	r4, r0
   bf2d8:	b08c      	sub	sp, #48	; 0x30
   bf2da:	460e      	mov	r6, r1
   bf2dc:	9201      	str	r2, [sp, #4]
   bf2de:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf2e0:	f7ff fabc 	bl	be85c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf2e4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf2e6:	9901      	ldr	r1, [sp, #4]
   bf2e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf2ec:	f002 fbed 	bl	c1aca <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf2f0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf2f4:	b1cd      	cbz	r5, bf32a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf2f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf2f8:	9502      	str	r5, [sp, #8]
   bf2fa:	a902      	add	r1, sp, #8
   bf2fc:	a804      	add	r0, sp, #16
   bf2fe:	9303      	str	r3, [sp, #12]
   bf300:	f7ff fcb2 	bl	bec68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf304:	2300      	movs	r3, #0
	__x.swap(*this);
   bf306:	a908      	add	r1, sp, #32
   bf308:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf30a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf30c:	f7ff ffd4 	bl	bf2b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf310:	4631      	mov	r1, r6
   bf312:	a808      	add	r0, sp, #32
   bf314:	f7ff ffd0 	bl	bf2b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf318:	a808      	add	r0, sp, #32
   bf31a:	f7f5 f8d9 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bf31e:	a804      	add	r0, sp, #16
   bf320:	f7f5 f8d6 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
    }
   bf324:	4620      	mov	r0, r4
   bf326:	b00c      	add	sp, #48	; 0x30
   bf328:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf32a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf32c:	e7ea      	b.n	bf304 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf330 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf334:	b087      	sub	sp, #28
   bf336:	461d      	mov	r5, r3
   bf338:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf33c:	4680      	mov	r8, r0
   bf33e:	468b      	mov	fp, r1
   bf340:	4692      	mov	sl, r2
   bf342:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf344:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf346:	2200      	movs	r2, #0
   bf348:	2068      	movs	r0, #104	; 0x68
   bf34a:	9102      	str	r1, [sp, #8]
   bf34c:	9204      	str	r2, [sp, #16]
   bf34e:	f7f4 fea2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf352:	1e06      	subs	r6, r0, #0
   bf354:	f106 090c 	add.w	r9, r6, #12
   bf358:	d018      	beq.n	bf38c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf35a:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf35c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf35e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf362:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf364:	4a15      	ldr	r2, [pc, #84]	; (bf3bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf366:	f847 2b20 	str.w	r2, [r7], #32
   bf36a:	9b03      	ldr	r3, [sp, #12]
   bf36c:	9100      	str	r1, [sp, #0]
   bf36e:	465a      	mov	r2, fp
   bf370:	4651      	mov	r1, sl
   bf372:	4648      	mov	r0, r9
   bf374:	f7ff ffae 	bl	bf2d4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf37a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf37c:	682b      	ldr	r3, [r5, #0]
   bf37e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf382:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf388:	6823      	ldr	r3, [r4, #0]
   bf38a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf38c:	a904      	add	r1, sp, #16
   bf38e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf390:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf394:	f7ff fd10 	bl	bedb8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf398:	a805      	add	r0, sp, #20
   bf39a:	f7f6 fdb3 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf39e:	f8d8 3000 	ldr.w	r3, [r8]
   bf3a2:	b93b      	cbnz	r3, bf3b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf3a4:	4a06      	ldr	r2, [pc, #24]	; (bf3c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf3a6:	4907      	ldr	r1, [pc, #28]	; (bf3c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf3a8:	200a      	movs	r0, #10
}
   bf3aa:	b007      	add	sp, #28
   bf3ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf3b0:	f7fe beb0 	b.w	be114 <panic_>
}
   bf3b4:	b007      	add	sp, #28
   bf3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf3ba:	bf00      	nop
   bf3bc:	000c7e98 	.word	0x000c7e98
   bf3c0:	000bdd25 	.word	0x000bdd25
   bf3c4:	000c7d41 	.word	0x000c7d41

000bf3c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf3c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf3cc:	4604      	mov	r4, r0
   bf3ce:	460d      	mov	r5, r1
   bf3d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf3d2:	d914      	bls.n	bf3fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf3d4:	4290      	cmp	r0, r2
   bf3d6:	d213      	bcs.n	bf400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf3d8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf3dc:	1a75      	subs	r5, r6, r1
   bf3de:	f1a1 0708 	sub.w	r7, r1, #8
   bf3e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf3e4:	42b7      	cmp	r7, r6
   bf3e6:	d018      	beq.n	bf41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf3e8:	b11c      	cbz	r4, bf3f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf3ea:	4631      	mov	r1, r6
   bf3ec:	4620      	mov	r0, r4
   bf3ee:	f7ff fc68 	bl	becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf3f2:	1d30      	adds	r0, r6, #4
   bf3f4:	f7f6 fd86 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf3f8:	3e08      	subs	r6, #8
   bf3fa:	3c08      	subs	r4, #8
   bf3fc:	e7f2      	b.n	bf3e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf3fe:	d00c      	beq.n	bf41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf400:	42b5      	cmp	r5, r6
   bf402:	d00a      	beq.n	bf41a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf404:	b11c      	cbz	r4, bf40e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf406:	4629      	mov	r1, r5
   bf408:	4620      	mov	r0, r4
   bf40a:	f7ff fc5a 	bl	becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf40e:	1d28      	adds	r0, r5, #4
   bf410:	f7f6 fd78 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf414:	3508      	adds	r5, #8
   bf416:	3408      	adds	r4, #8
   bf418:	e7f2      	b.n	bf400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf41c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf41c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf41e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf420:	4605      	mov	r5, r0
        if (n > 0) {
   bf422:	dd11      	ble.n	bf448 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf424:	00f0      	lsls	r0, r6, #3
   bf426:	f7fe ff83 	bl	be330 <malloc>
            if (!d) {
   bf42a:	4604      	mov	r4, r0
   bf42c:	b158      	cbz	r0, bf446 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf42e:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf432:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf436:	f7ff ffc7 	bl	bf3c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf43a:	6828      	ldr	r0, [r5, #0]
   bf43c:	f7fe ff80 	bl	be340 <free>
        data_ = d;
   bf440:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf442:	60ae      	str	r6, [r5, #8]
        return true;
   bf444:	2001      	movs	r0, #1
    }
   bf446:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf448:	2400      	movs	r4, #0
   bf44a:	e7f6      	b.n	bf43a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf44c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf44c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf44e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf450:	6845      	ldr	r5, [r0, #4]
   bf452:	4668      	mov	r0, sp
   bf454:	f7ff fc35 	bl	becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf458:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf45c:	4299      	cmp	r1, r3
   bf45e:	da10      	bge.n	bf482 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf460:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf462:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf464:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf468:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf46c:	4629      	mov	r1, r5
   bf46e:	f105 0008 	add.w	r0, r5, #8
   bf472:	f7ff ffa9 	bl	bf3c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf476:	b98d      	cbnz	r5, bf49c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf478:	6863      	ldr	r3, [r4, #4]
   bf47a:	3301      	adds	r3, #1
   bf47c:	6063      	str	r3, [r4, #4]
    return true;
   bf47e:	2601      	movs	r6, #1
   bf480:	e006      	b.n	bf490 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf482:	3101      	adds	r1, #1
   bf484:	4620      	mov	r0, r4
   bf486:	f7ff ffc9 	bl	bf41c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf48a:	4606      	mov	r6, r0
   bf48c:	2800      	cmp	r0, #0
   bf48e:	d1e7      	bne.n	bf460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf490:	a801      	add	r0, sp, #4
   bf492:	f7f6 fd37 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf496:	4630      	mov	r0, r6
   bf498:	b002      	add	sp, #8
   bf49a:	bd70      	pop	{r4, r5, r6, pc}
   bf49c:	4669      	mov	r1, sp
   bf49e:	4628      	mov	r0, r5
   bf4a0:	f7ff fc0f 	bl	becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf4a4:	e7e8      	b.n	bf478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf4a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf4a6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf4aa:	4604      	mov	r4, r0
   bf4ac:	460d      	mov	r5, r1
   bf4ae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf4b0:	d914      	bls.n	bf4dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf4b2:	4290      	cmp	r0, r2
   bf4b4:	d213      	bcs.n	bf4de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf4b6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf4ba:	1a75      	subs	r5, r6, r1
   bf4bc:	f1a1 0708 	sub.w	r7, r1, #8
   bf4c0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf4c2:	42b7      	cmp	r7, r6
   bf4c4:	d018      	beq.n	bf4f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf4c6:	b11c      	cbz	r4, bf4d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf4c8:	4631      	mov	r1, r6
   bf4ca:	4620      	mov	r0, r4
   bf4cc:	f7ff fbeb 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf4d0:	1d30      	adds	r0, r6, #4
   bf4d2:	f7f6 fd17 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf4d6:	3e08      	subs	r6, #8
   bf4d8:	3c08      	subs	r4, #8
   bf4da:	e7f2      	b.n	bf4c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf4dc:	d00c      	beq.n	bf4f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf4de:	42b5      	cmp	r5, r6
   bf4e0:	d00a      	beq.n	bf4f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf4e2:	b11c      	cbz	r4, bf4ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf4e4:	4629      	mov	r1, r5
   bf4e6:	4620      	mov	r0, r4
   bf4e8:	f7ff fbdd 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf4ec:	1d28      	adds	r0, r5, #4
   bf4ee:	f7f6 fd09 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf4f2:	3508      	adds	r5, #8
   bf4f4:	3408      	adds	r4, #8
   bf4f6:	e7f2      	b.n	bf4de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf4fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf4fa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf4fc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf4fe:	4605      	mov	r5, r0
        if (n > 0) {
   bf500:	dd11      	ble.n	bf526 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf502:	00f0      	lsls	r0, r6, #3
   bf504:	f7fe ff14 	bl	be330 <malloc>
            if (!d) {
   bf508:	4604      	mov	r4, r0
   bf50a:	b158      	cbz	r0, bf524 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf50c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf510:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf514:	f7ff ffc7 	bl	bf4a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf518:	6828      	ldr	r0, [r5, #0]
   bf51a:	f7fe ff11 	bl	be340 <free>
        data_ = d;
   bf51e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf520:	60ae      	str	r6, [r5, #8]
        return true;
   bf522:	2001      	movs	r0, #1
    }
   bf524:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf526:	2400      	movs	r4, #0
   bf528:	e7f6      	b.n	bf518 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf52a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf52c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf52e:	6845      	ldr	r5, [r0, #4]
   bf530:	4668      	mov	r0, sp
   bf532:	f7ff fbb8 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf536:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf53a:	4299      	cmp	r1, r3
   bf53c:	da10      	bge.n	bf560 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf53e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf540:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf542:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf546:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf54a:	4629      	mov	r1, r5
   bf54c:	f105 0008 	add.w	r0, r5, #8
   bf550:	f7ff ffa9 	bl	bf4a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf554:	b98d      	cbnz	r5, bf57a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf556:	6863      	ldr	r3, [r4, #4]
   bf558:	3301      	adds	r3, #1
   bf55a:	6063      	str	r3, [r4, #4]
    return true;
   bf55c:	2601      	movs	r6, #1
   bf55e:	e006      	b.n	bf56e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf560:	3101      	adds	r1, #1
   bf562:	4620      	mov	r0, r4
   bf564:	f7ff ffc9 	bl	bf4fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf568:	4606      	mov	r6, r0
   bf56a:	2800      	cmp	r0, #0
   bf56c:	d1e7      	bne.n	bf53e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf56e:	a801      	add	r0, sp, #4
   bf570:	f7f6 fcc8 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf574:	4630      	mov	r0, r6
   bf576:	b002      	add	sp, #8
   bf578:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf57a:	4669      	mov	r1, sp
   bf57c:	4628      	mov	r0, r5
   bf57e:	f7ff fb92 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf582:	e7e8      	b.n	bf556 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf584 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf588:	4617      	mov	r7, r2
   bf58a:	b0a1      	sub	sp, #132	; 0x84
   bf58c:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf58e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf590:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf592:	f7ff f82b 	bl	be5ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf596:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf598:	7923      	ldrb	r3, [r4, #4]
   bf59a:	b953      	cbnz	r3, bf5b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf59c:	4639      	mov	r1, r7
   bf59e:	4640      	mov	r0, r8
   bf5a0:	f7ff fb81 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf5a4:	a80a      	add	r0, sp, #40	; 0x28
   bf5a6:	f7ff f82f 	bl	be608 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf5aa:	4640      	mov	r0, r8
   bf5ac:	b021      	add	sp, #132	; 0x84
   bf5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf5b2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf5b4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf5b8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf5bc:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf5be:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf5c2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf5c6:	9b03      	ldr	r3, [sp, #12]
   bf5c8:	429d      	cmp	r5, r3
   bf5ca:	d021      	beq.n	bf610 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf5cc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf5d0:	4658      	mov	r0, fp
   bf5d2:	f109 0114 	add.w	r1, r9, #20
   bf5d6:	f7ff f8b6 	bl	be746 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf5da:	b1b8      	cbz	r0, bf60c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf5dc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf5e0:	4650      	mov	r0, sl
   bf5e2:	f7ff f8b0 	bl	be746 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf5e6:	b188      	cbz	r0, bf60c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf5e8:	6823      	ldr	r3, [r4, #0]
   bf5ea:	f8d9 2000 	ldr.w	r2, [r9]
   bf5ee:	4053      	eors	r3, r2
   bf5f0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf5f4:	d10a      	bne.n	bf60c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf5f6:	2220      	movs	r2, #32
   bf5f8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf5fc:	4a5e      	ldr	r2, [pc, #376]	; (bf778 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf5fe:	9200      	str	r2, [sp, #0]
   bf600:	aa15      	add	r2, sp, #84	; 0x54
   bf602:	495e      	ldr	r1, [pc, #376]	; (bf77c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf604:	2032      	movs	r0, #50	; 0x32
   bf606:	f7fe fd8d 	bl	be124 <log_message>
   bf60a:	e7c7      	b.n	bf59c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf60c:	3508      	adds	r5, #8
   bf60e:	e7da      	b.n	bf5c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf610:	4650      	mov	r0, sl
   bf612:	f7ff f869 	bl	be6e8 <_ZNK8particle7BleUuid7isValidEv>
   bf616:	b960      	cbnz	r0, bf632 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf618:	4959      	ldr	r1, [pc, #356]	; (bf780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf61a:	2201      	movs	r2, #1
   bf61c:	a815      	add	r0, sp, #84	; 0x54
   bf61e:	ad15      	add	r5, sp, #84	; 0x54
   bf620:	f7ff f83a 	bl	be698 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf626:	46d4      	mov	ip, sl
   bf628:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf62c:	682b      	ldr	r3, [r5, #0]
   bf62e:	f8cc 3000 	str.w	r3, [ip]
   bf632:	6833      	ldr	r3, [r6, #0]
   bf634:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf638:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf63c:	455d      	cmp	r5, fp
   bf63e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf640:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf642:	d06e      	beq.n	bf722 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf644:	f855 0b08 	ldr.w	r0, [r5], #8
   bf648:	f7ff f87d 	bl	be746 <_ZNK8particle7BleUuideqERKS0_>
   bf64c:	2800      	cmp	r0, #0
   bf64e:	d0f5      	beq.n	bf63c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf650:	f104 0a14 	add.w	sl, r4, #20
   bf654:	4650      	mov	r0, sl
   bf656:	f7ff f847 	bl	be6e8 <_ZNK8particle7BleUuid7isValidEv>
   bf65a:	b988      	cbnz	r0, bf680 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf65c:	4b49      	ldr	r3, [pc, #292]	; (bf784 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf65e:	4948      	ldr	r1, [pc, #288]	; (bf780 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf660:	881a      	ldrh	r2, [r3, #0]
   bf662:	3201      	adds	r2, #1
   bf664:	b292      	uxth	r2, r2
   bf666:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf668:	a815      	add	r0, sp, #84	; 0x54
   bf66a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf66c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf66e:	f7ff f832 	bl	be6d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf674:	46d4      	mov	ip, sl
   bf676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf67a:	682b      	ldr	r3, [r5, #0]
   bf67c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf680:	4b41      	ldr	r3, [pc, #260]	; (bf788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf682:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf684:	2228      	movs	r2, #40	; 0x28
   bf686:	2100      	movs	r1, #0
   bf688:	a816      	add	r0, sp, #88	; 0x58
   bf68a:	f005 f80d 	bl	c46a8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf68e:	4651      	mov	r1, sl
   bf690:	a804      	add	r0, sp, #16
   bf692:	f7ff f83b 	bl	be70c <_ZN8particle7BleUuid7halUUIDEv>
   bf696:	ab04      	add	r3, sp, #16
   bf698:	aa18      	add	r2, sp, #96	; 0x60
   bf69a:	f10d 0c20 	add.w	ip, sp, #32
   bf69e:	6818      	ldr	r0, [r3, #0]
   bf6a0:	6859      	ldr	r1, [r3, #4]
   bf6a2:	4615      	mov	r5, r2
   bf6a4:	c503      	stmia	r5!, {r0, r1}
   bf6a6:	3308      	adds	r3, #8
   bf6a8:	4563      	cmp	r3, ip
   bf6aa:	462a      	mov	r2, r5
   bf6ac:	d1f7      	bne.n	bf69e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf6ae:	6818      	ldr	r0, [r3, #0]
   bf6b0:	6028      	str	r0, [r5, #0]
    return value_;
   bf6b2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf6b4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf6b8:	f8d9 3000 	ldr.w	r3, [r9]
   bf6bc:	8a9b      	ldrh	r3, [r3, #20]
   bf6be:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf6c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf6c4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf6c6:	4b31      	ldr	r3, [pc, #196]	; (bf78c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf6c8:	2200      	movs	r2, #0
   bf6ca:	1da1      	adds	r1, r4, #6
   bf6cc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf6ce:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf6d2:	f7fe fa9f 	bl	bdc14 <hal_ble_gatt_server_add_characteristic>
   bf6d6:	2800      	cmp	r0, #0
   bf6d8:	f47f af60 	bne.w	bf59c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf6dc:	2301      	movs	r3, #1
   bf6de:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf6e0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf6e2:	4639      	mov	r1, r7
        return characteristics_;
   bf6e4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf6e6:	a80d      	add	r0, sp, #52	; 0x34
   bf6e8:	f7ff fadd 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf6ec:	4620      	mov	r0, r4
   bf6ee:	a90d      	add	r1, sp, #52	; 0x34
   bf6f0:	f7ff ff1b 	bl	bf52a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf6f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf6f6:	a80e      	add	r0, sp, #56	; 0x38
   bf6f8:	f7f6 fc04 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6fc:	2c00      	cmp	r4, #0
   bf6fe:	f47f af4d 	bne.w	bf59c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf702:	2320      	movs	r3, #32
   bf704:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf708:	4b21      	ldr	r3, [pc, #132]	; (bf790 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf70a:	9300      	str	r3, [sp, #0]
   bf70c:	aa0d      	add	r2, sp, #52	; 0x34
   bf70e:	4623      	mov	r3, r4
   bf710:	e777      	b.n	bf602 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf712:	4639      	mov	r1, r7
   bf714:	4640      	mov	r0, r8
   bf716:	f7ff fac6 	bl	beca6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf71a:	a80c      	add	r0, sp, #48	; 0x30
   bf71c:	f7f6 fbf2 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf720:	e740      	b.n	bf5a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf722:	a80b      	add	r0, sp, #44	; 0x2c
   bf724:	f7ff f92c 	bl	be980 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf728:	4651      	mov	r1, sl
   bf72a:	a815      	add	r0, sp, #84	; 0x54
   bf72c:	f7fe ffee 	bl	be70c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf732:	2300      	movs	r3, #0
   bf734:	3214      	adds	r2, #20
   bf736:	a915      	add	r1, sp, #84	; 0x54
   bf738:	2001      	movs	r0, #1
   bf73a:	f7fe fa43 	bl	bdbc4 <hal_ble_gatt_server_add_service>
   bf73e:	2800      	cmp	r0, #0
   bf740:	d1e7      	bne.n	bf712 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf742:	6835      	ldr	r5, [r6, #0]
   bf744:	a90b      	add	r1, sp, #44	; 0x2c
   bf746:	a80d      	add	r0, sp, #52	; 0x34
   bf748:	f7ff fabb 	bl	becc2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf74c:	4628      	mov	r0, r5
   bf74e:	a90d      	add	r1, sp, #52	; 0x34
   bf750:	f7ff fe7c 	bl	bf44c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf754:	4605      	mov	r5, r0
   bf756:	a80e      	add	r0, sp, #56	; 0x38
   bf758:	f7f6 fbd4 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf75c:	2d00      	cmp	r5, #0
   bf75e:	d0d8      	beq.n	bf712 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf760:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf762:	6853      	ldr	r3, [r2, #4]
   bf764:	6812      	ldr	r2, [r2, #0]
   bf766:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf76a:	3b01      	subs	r3, #1
   bf76c:	a80c      	add	r0, sp, #48	; 0x30
   bf76e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf772:	f7f6 fbc7 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf776:	e76b      	b.n	bf650 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf778:	000c7e3b 	.word	0x000c7e3b
   bf77c:	000c7d58 	.word	0x000c7d58
   bf780:	000c7f02 	.word	0x000c7f02
   bf784:	2003e624 	.word	0x2003e624
   bf788:	002c0003 	.word	0x002c0003
   bf78c:	000beb19 	.word	0x000beb19
   bf790:	000c7e66 	.word	0x000c7e66

000bf794 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf794:	4802      	ldr	r0, [pc, #8]	; (bf7a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf796:	2300      	movs	r3, #0
   bf798:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf79a:	f7fe ba93 	b.w	bdcc4 <os_mutex_recursive_create>
   bf79e:	bf00      	nop
   bf7a0:	2003e628 	.word	0x2003e628

000bf7a4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf7a4:	2200      	movs	r2, #0
   bf7a6:	6840      	ldr	r0, [r0, #4]
   bf7a8:	4611      	mov	r1, r2
   bf7aa:	f7fe bd79 	b.w	be2a0 <network_ready>

000bf7ae <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf7ae:	2200      	movs	r2, #0
   bf7b0:	6840      	ldr	r0, [r0, #4]
   bf7b2:	4611      	mov	r1, r2
   bf7b4:	f7fe bd94 	b.w	be2e0 <network_listening>

000bf7b8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf7b8:	2200      	movs	r2, #0
   bf7ba:	6840      	ldr	r0, [r0, #4]
   bf7bc:	4611      	mov	r1, r2
   bf7be:	f7fe bd9f 	b.w	be300 <network_get_listen_timeout>

000bf7c2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf7c2:	6840      	ldr	r0, [r0, #4]
   bf7c4:	2200      	movs	r2, #0
   bf7c6:	f7fe bd93 	b.w	be2f0 <network_set_listen_timeout>

000bf7ca <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf7ca:	6840      	ldr	r0, [r0, #4]
   bf7cc:	2200      	movs	r2, #0
   bf7ce:	f081 0101 	eor.w	r1, r1, #1
   bf7d2:	f7fe bd7d 	b.w	be2d0 <network_listen>

000bf7d6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf7d6:	2300      	movs	r3, #0
   bf7d8:	6840      	ldr	r0, [r0, #4]
   bf7da:	461a      	mov	r2, r3
   bf7dc:	4619      	mov	r1, r3
   bf7de:	f7fe bd6f 	b.w	be2c0 <network_off>

000bf7e2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf7e2:	2300      	movs	r3, #0
   bf7e4:	6840      	ldr	r0, [r0, #4]
   bf7e6:	461a      	mov	r2, r3
   bf7e8:	4619      	mov	r1, r3
   bf7ea:	f7fe bd61 	b.w	be2b0 <network_on>

000bf7ee <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf7ee:	2200      	movs	r2, #0
   bf7f0:	6840      	ldr	r0, [r0, #4]
   bf7f2:	4611      	mov	r1, r2
   bf7f4:	f7fe bd44 	b.w	be280 <network_connecting>

000bf7f8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf7f8:	6840      	ldr	r0, [r0, #4]
   bf7fa:	2200      	movs	r2, #0
   bf7fc:	2102      	movs	r1, #2
   bf7fe:	f7fe bd47 	b.w	be290 <network_disconnect>

000bf802 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf802:	2300      	movs	r3, #0
   bf804:	6840      	ldr	r0, [r0, #4]
   bf806:	461a      	mov	r2, r3
   bf808:	f7fe bd32 	b.w	be270 <network_connect>

000bf80c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf80c:	4b08      	ldr	r3, [pc, #32]	; (bf830 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf80e:	b510      	push	{r4, lr}
   bf810:	2428      	movs	r4, #40	; 0x28
   bf812:	4622      	mov	r2, r4
   bf814:	4618      	mov	r0, r3
   bf816:	2100      	movs	r1, #0
   bf818:	f004 ff46 	bl	c46a8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf81c:	4b05      	ldr	r3, [pc, #20]	; (bf834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf81e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf824:	6042      	str	r2, [r0, #4]
   bf826:	2204      	movs	r2, #4
   bf828:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf82a:	4a03      	ldr	r2, [pc, #12]	; (bf838 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf82c:	601a      	str	r2, [r3, #0]
   bf82e:	bd10      	pop	{r4, pc}
   bf830:	2003e638 	.word	0x2003e638
   bf834:	2003e630 	.word	0x2003e630
   bf838:	000c7f2c 	.word	0x000c7f2c

000bf83c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf83c:	4770      	bx	lr

000bf83e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf83e:	2000      	movs	r0, #0
   bf840:	4770      	bx	lr

000bf842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf842:	b510      	push	{r4, lr}
   bf844:	2110      	movs	r1, #16
   bf846:	4604      	mov	r4, r0
   bf848:	f7f4 fc2b 	bl	b40a2 <_ZdlPvj>
   bf84c:	4620      	mov	r0, r4
   bf84e:	bd10      	pop	{r4, pc}

000bf850 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf850:	b508      	push	{r3, lr}
      { delete this; }
   bf852:	f7ff fff6 	bl	bf842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf856:	bd08      	pop	{r3, pc}

000bf858 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf858:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf85a:	2200      	movs	r2, #0
   bf85c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf860:	6002      	str	r2, [r0, #0]
   bf862:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf864:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf866:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf868:	680c      	ldr	r4, [r1, #0]
   bf86a:	8085      	strh	r5, [r0, #4]
   bf86c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf86e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf870:	bd30      	pop	{r4, r5, pc}

000bf872 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf872:	b510      	push	{r4, lr}
   bf874:	4604      	mov	r4, r0
    free((void*)msg_);
   bf876:	6800      	ldr	r0, [r0, #0]
   bf878:	f7fe fd62 	bl	be340 <free>
}
   bf87c:	4620      	mov	r0, r4
   bf87e:	bd10      	pop	{r4, pc}

000bf880 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf880:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf882:	68c4      	ldr	r4, [r0, #12]
   bf884:	b1f4      	cbz	r4, bf8c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf886:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf888:	2b02      	cmp	r3, #2
   bf88a:	d103      	bne.n	bf894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf88c:	f104 000c 	add.w	r0, r4, #12
   bf890:	f7ff ffef 	bl	bf872 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf894:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf896:	b135      	cbz	r5, bf8a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf898:	4628      	mov	r0, r5
   bf89a:	f7f4 fe19 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bf89e:	2110      	movs	r1, #16
   bf8a0:	4628      	mov	r0, r5
   bf8a2:	f7f4 fbfe 	bl	b40a2 <_ZdlPvj>
   bf8a6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf8a8:	b135      	cbz	r5, bf8b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf8aa:	4628      	mov	r0, r5
   bf8ac:	f7f4 fe10 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
   bf8b0:	2110      	movs	r1, #16
   bf8b2:	4628      	mov	r0, r5
   bf8b4:	f7f4 fbf5 	bl	b40a2 <_ZdlPvj>
   bf8b8:	4620      	mov	r0, r4
   bf8ba:	2114      	movs	r1, #20
   bf8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf8c0:	f7f4 bbef 	b.w	b40a2 <_ZdlPvj>
   bf8c4:	bd38      	pop	{r3, r4, r5, pc}

000bf8c6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bf8c6:	b510      	push	{r4, lr}
   bf8c8:	b088      	sub	sp, #32
   bf8ca:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bf8cc:	4668      	mov	r0, sp
   bf8ce:	f002 f8a6 	bl	c1a1e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bf8d2:	4669      	mov	r1, sp
   bf8d4:	a804      	add	r0, sp, #16
   bf8d6:	f002 f8ed 	bl	c1ab4 <_ZN6StringC1ERKS_>
   bf8da:	a804      	add	r0, sp, #16
   bf8dc:	47a0      	blx	r4
   bf8de:	4604      	mov	r4, r0
   bf8e0:	a804      	add	r0, sp, #16
   bf8e2:	f002 f851 	bl	c1988 <_ZN6StringD1Ev>
    String p(param);
   bf8e6:	4668      	mov	r0, sp
   bf8e8:	f002 f84e 	bl	c1988 <_ZN6StringD1Ev>
}
   bf8ec:	4620      	mov	r0, r4
   bf8ee:	b008      	add	sp, #32
   bf8f0:	bd10      	pop	{r4, pc}

000bf8f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bf8f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bf8f4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bf8f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bf8fa:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bf8fc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bf8fe:	461a      	mov	r2, r3
   bf900:	4669      	mov	r1, sp
   bf902:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bf904:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bf908:	f8ad 4000 	strh.w	r4, [sp]
   bf90c:	f7fe fc78 	bl	be200 <spark_function>
}
   bf910:	b004      	add	sp, #16
   bf912:	bd10      	pop	{r4, pc}

000bf914 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf914:	680b      	ldr	r3, [r1, #0]
   bf916:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf918:	684b      	ldr	r3, [r1, #4]
   bf91a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf91c:	b113      	cbz	r3, bf924 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf91e:	685a      	ldr	r2, [r3, #4]
   bf920:	3201      	adds	r2, #1
   bf922:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf924:	4770      	bx	lr

000bf926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf926:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf928:	4604      	mov	r4, r0
   bf92a:	4668      	mov	r0, sp
   bf92c:	460d      	mov	r5, r1
   bf92e:	f7ff fff1 	bl	bf914 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf932:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf934:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf936:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf938:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf93a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf93c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf93e:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf940:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf942:	f7f6 fadf 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf946:	b135      	cbz	r5, bf956 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf948:	1d28      	adds	r0, r5, #4
   bf94a:	f7f6 fadb 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf94e:	2108      	movs	r1, #8
   bf950:	4628      	mov	r0, r5
   bf952:	f7f4 fba6 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf956:	4620      	mov	r0, r4
   bf958:	b003      	add	sp, #12
   bf95a:	bd30      	pop	{r4, r5, pc}

000bf95c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf95c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf95e:	b510      	push	{r4, lr}
      if (_M_empty())
   bf960:	b90a      	cbnz	r2, bf966 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf962:	f002 fc79 	bl	c2258 <_ZSt25__throw_bad_function_callv>
    }
   bf966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf96a:	68c3      	ldr	r3, [r0, #12]
   bf96c:	4718      	bx	r3

000bf96e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf96e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf970:	6800      	ldr	r0, [r0, #0]
   bf972:	f100 0110 	add.w	r1, r0, #16
   bf976:	f7ff fff1 	bl	bf95c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf97a:	bd08      	pop	{r3, pc}

000bf97c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf97c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf97e:	b510      	push	{r4, lr}
      if (_M_empty())
   bf980:	b90a      	cbnz	r2, bf986 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf982:	f002 fc69 	bl	c2258 <_ZSt25__throw_bad_function_callv>
    }
   bf986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf98a:	68c3      	ldr	r3, [r0, #12]
   bf98c:	4718      	bx	r3

000bf98e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf98e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf990:	6800      	ldr	r0, [r0, #0]
   bf992:	f100 0110 	add.w	r1, r0, #16
   bf996:	f7ff fff1 	bl	bf97c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf99a:	bd08      	pop	{r3, pc}

000bf99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf99c:	b538      	push	{r3, r4, r5, lr}
   bf99e:	2300      	movs	r3, #0
   bf9a0:	4604      	mov	r4, r0
   bf9a2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf9a4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf9a6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf9a8:	f7f4 fb75 	bl	b4096 <_Znwj>
   bf9ac:	b128      	cbz	r0, bf9ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf9ae:	2301      	movs	r3, #1
   bf9b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf9b4:	4b02      	ldr	r3, [pc, #8]	; (bf9c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf9b6:	6003      	str	r3, [r0, #0]
   bf9b8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf9ba:	6020      	str	r0, [r4, #0]
	}
   bf9bc:	4620      	mov	r0, r4
   bf9be:	bd38      	pop	{r3, r4, r5, pc}
   bf9c0:	000c7f68 	.word	0x000c7f68

000bf9c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf9c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf9c6:	2300      	movs	r3, #0
   bf9c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf9ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf9cc:	4604      	mov	r4, r0
   bf9ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf9d0:	b12b      	cbz	r3, bf9de <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf9d2:	2202      	movs	r2, #2
   bf9d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf9d6:	68eb      	ldr	r3, [r5, #12]
   bf9d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf9da:	68ab      	ldr	r3, [r5, #8]
   bf9dc:	60a3      	str	r3, [r4, #8]
    }
   bf9de:	4620      	mov	r0, r4
   bf9e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf9e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf9e6:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf9e8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf9ea:	4668      	mov	r0, sp
   bf9ec:	f7ff ff34 	bl	bf858 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf9f0:	f04f 0302 	mov.w	r3, #2
   bf9f4:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf9f8:	2a00      	cmp	r2, #0
   bf9fa:	d103      	bne.n	bfa04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf9fc:	e8c4 3f41 	strexb	r1, r3, [r4]
   bfa00:	2900      	cmp	r1, #0
   bfa02:	d1f7      	bne.n	bf9f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bfa04:	d125      	bne.n	bfa52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bfa06:	f104 050c 	add.w	r5, r4, #12
   bfa0a:	4669      	mov	r1, sp
   bfa0c:	4628      	mov	r0, r5
   bfa0e:	f7ff ff23 	bl	bf858 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bfa12:	f3bf 8f5b 	dmb	ish
   bfa16:	2301      	movs	r3, #1
   bfa18:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfa1a:	2000      	movs	r0, #0
   bfa1c:	f104 0308 	add.w	r3, r4, #8
   bfa20:	f3bf 8f5b 	dmb	ish
   bfa24:	e853 6f00 	ldrex	r6, [r3]
   bfa28:	e843 0200 	strex	r2, r0, [r3]
   bfa2c:	2a00      	cmp	r2, #0
   bfa2e:	d1f9      	bne.n	bfa24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bfa30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfa34:	b16e      	cbz	r6, bfa52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bfa36:	f7fe fbaf 	bl	be198 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfa3a:	b178      	cbz	r0, bfa5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfa3c:	4629      	mov	r1, r5
   bfa3e:	4630      	mov	r0, r6
   bfa40:	f7ff ff8c 	bl	bf95c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bfa44:	4630      	mov	r0, r6
   bfa46:	f7f4 fd43 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfa4a:	2110      	movs	r1, #16
   bfa4c:	4630      	mov	r0, r6
   bfa4e:	f7f4 fb28 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bfa52:	4668      	mov	r0, sp
   bfa54:	f7ff ff0d 	bl	bf872 <_ZN8particle5ErrorD1Ev>
    }
   bfa58:	b009      	add	sp, #36	; 0x24
   bfa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bfa5c:	4631      	mov	r1, r6
   bfa5e:	a802      	add	r0, sp, #8
   bfa60:	f7ff ffb0 	bl	bf9c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfa64:	68e0      	ldr	r0, [r4, #12]
   bfa66:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfa6a:	b108      	cbz	r0, bfa70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bfa6c:	f004 fe8a 	bl	c4784 <strdup>
        type_(type) {
   bfa70:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfa72:	2010      	movs	r0, #16
   bfa74:	f8ad 501c 	strh.w	r5, [sp, #28]
   bfa78:	f7f4 fb0d 	bl	b4096 <_Znwj>
   bfa7c:	4605      	mov	r5, r0
   bfa7e:	b1e8      	cbz	r0, bfabc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bfa80:	2700      	movs	r7, #0
   bfa82:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfa84:	2018      	movs	r0, #24
   bfa86:	f7f4 fb06 	bl	b4096 <_Znwj>
   bfa8a:	4604      	mov	r4, r0
   bfa8c:	b188      	cbz	r0, bfab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bfa8e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bfa90:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfa92:	a802      	add	r0, sp, #8
   bfa94:	f7ff fbfe 	bl	bf294 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfa98:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfa9a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa9c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfa9e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfaa0:	9204      	str	r2, [sp, #16]
   bfaa2:	a906      	add	r1, sp, #24
   bfaa4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfaa6:	60e3      	str	r3, [r4, #12]
   bfaa8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bfaac:	9205      	str	r2, [sp, #20]
   bfaae:	f7ff fed3 	bl	bf858 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bfab2:	4b08      	ldr	r3, [pc, #32]	; (bfad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bfab4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfab6:	4b08      	ldr	r3, [pc, #32]	; (bfad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfab8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfaba:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bfabc:	a806      	add	r0, sp, #24
   bfabe:	f7ff fed8 	bl	bf872 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfac2:	a802      	add	r0, sp, #8
   bfac4:	f7f4 fd04 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfac8:	2200      	movs	r2, #0
   bfaca:	4629      	mov	r1, r5
   bfacc:	4803      	ldr	r0, [pc, #12]	; (bfadc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bface:	f7fe fb6b 	bl	be1a8 <application_thread_invoke>
   bfad2:	e7b7      	b.n	bfa44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bfad4:	000bf96f 	.word	0x000bf96f
   bfad8:	000bfbf1 	.word	0x000bfbf1
   bfadc:	000be41f 	.word	0x000be41f

000bfae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bfae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfae4:	b08b      	sub	sp, #44	; 0x2c
   bfae6:	4605      	mov	r5, r0
   bfae8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bfaec:	460f      	mov	r7, r1
   bfaee:	4690      	mov	r8, r2
   bfaf0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfaf2:	f7fe fb95 	bl	be220 <spark_cloud_flag_connected>
   bfaf6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bfaf8:	4683      	mov	fp, r0
   bfafa:	bb38      	cbnz	r0, bfb4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bfafc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bfb00:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfb02:	a905      	add	r1, sp, #20
   bfb04:	4630      	mov	r0, r6
   bfb06:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfb0a:	f7ff fea5 	bl	bf858 <_ZN8particle5ErrorC1EOS0_>
   bfb0e:	2014      	movs	r0, #20
   bfb10:	f7f4 fac1 	bl	b4096 <_Znwj>
   bfb14:	4604      	mov	r4, r0
   bfb16:	b148      	cbz	r0, bfb2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bfb18:	2302      	movs	r3, #2
   bfb1a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfb1c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfb1e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfb22:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bfb24:	4631      	mov	r1, r6
   bfb26:	300c      	adds	r0, #12
   bfb28:	f7ff fe96 	bl	bf858 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfb2c:	4628      	mov	r0, r5
	: __shared_count(__p)
   bfb2e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfb30:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bfb34:	f7ff ff32 	bl	bf99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfb38:	4630      	mov	r0, r6
   bfb3a:	f7ff fe9a 	bl	bf872 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bfb3e:	a805      	add	r0, sp, #20
   bfb40:	f7ff fe97 	bl	bf872 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bfb44:	4628      	mov	r0, r5
   bfb46:	b00b      	add	sp, #44	; 0x2c
   bfb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bfb4c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bfb4e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bfb50:	2014      	movs	r0, #20
   bfb52:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bfb56:	9307      	str	r3, [sp, #28]
   bfb58:	f7f4 fa9d 	bl	b4096 <_Znwj>
   bfb5c:	4601      	mov	r1, r0
   bfb5e:	b118      	cbz	r0, bfb68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfb60:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfb64:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfb66:	7044      	strb	r4, [r0, #1]
   bfb68:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfb6a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bfb6c:	f7ff ff16 	bl	bf99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bfb70:	4b1e      	ldr	r3, [pc, #120]	; (bfbec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bfb72:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bfb74:	2008      	movs	r0, #8
   bfb76:	f7f4 fa8e 	bl	b4096 <_Znwj>
   bfb7a:	4604      	mov	r4, r0
   bfb7c:	b110      	cbz	r0, bfb84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bfb7e:	a903      	add	r1, sp, #12
   bfb80:	f7ff fec8 	bl	bf914 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfb84:	9600      	str	r6, [sp, #0]
   bfb86:	fa5f f38a 	uxtb.w	r3, sl
   bfb8a:	464a      	mov	r2, r9
   bfb8c:	4641      	mov	r1, r8
   bfb8e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bfb90:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfb92:	f7fe fb4d 	bl	be230 <spark_send_event>
   bfb96:	b9b8      	cbnz	r0, bfbc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bfb98:	9b03      	ldr	r3, [sp, #12]
   bfb9a:	785b      	ldrb	r3, [r3, #1]
   bfb9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bfba0:	b993      	cbnz	r3, bfbc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bfba2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bfba6:	a905      	add	r1, sp, #20
   bfba8:	a803      	add	r0, sp, #12
   bfbaa:	9205      	str	r2, [sp, #20]
   bfbac:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfbb0:	f7ff ff18 	bl	bf9e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfbb4:	a805      	add	r0, sp, #20
   bfbb6:	f7ff fe5c 	bl	bf872 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bfbba:	a805      	add	r0, sp, #20
   bfbbc:	9909      	ldr	r1, [sp, #36]	; 0x24
   bfbbe:	f7ff feb2 	bl	bf926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bfbc2:	a806      	add	r0, sp, #24
   bfbc4:	f7f6 f99e 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfbc8:	a903      	add	r1, sp, #12
   bfbca:	a805      	add	r0, sp, #20
   bfbcc:	f7ff fea2 	bl	bf914 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfbd0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bfbd2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfbd4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bfbd6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bfbd8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bfbda:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bfbdc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bfbde:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bfbe0:	f7f6 f990 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfbe4:	a804      	add	r0, sp, #16
   bfbe6:	f7f6 f98d 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bfbea:	e7ab      	b.n	bfb44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bfbec:	000bfc6d 	.word	0x000bfc6d

000bfbf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bfbf0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfbf4:	4605      	mov	r5, r0
	switch (__op)
   bfbf6:	d103      	bne.n	bfc00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfbf8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfbfa:	6003      	str	r3, [r0, #0]
      }
   bfbfc:	2000      	movs	r0, #0
   bfbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bfc00:	2a02      	cmp	r2, #2
   bfc02:	d010      	beq.n	bfc26 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bfc04:	2a03      	cmp	r2, #3
   bfc06:	d1f9      	bne.n	bfbfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfc08:	6804      	ldr	r4, [r0, #0]
   bfc0a:	2c00      	cmp	r4, #0
   bfc0c:	d0f6      	beq.n	bfbfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bfc0e:	f104 0010 	add.w	r0, r4, #16
   bfc12:	f7ff fe2e 	bl	bf872 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfc16:	4620      	mov	r0, r4
   bfc18:	f7f4 fc5a 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfc1c:	2118      	movs	r1, #24
   bfc1e:	4620      	mov	r0, r4
   bfc20:	f7f4 fa3f 	bl	b40a2 <_ZdlPvj>
   bfc24:	e7ea      	b.n	bfbfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfc26:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bfc28:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfc2a:	f7f4 fa34 	bl	b4096 <_Znwj>
   bfc2e:	4604      	mov	r4, r0
   bfc30:	b150      	cbz	r0, bfc48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bfc32:	4631      	mov	r1, r6
   bfc34:	f7ff fec6 	bl	bf9c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfc38:	6930      	ldr	r0, [r6, #16]
   bfc3a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfc3e:	b108      	cbz	r0, bfc44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bfc40:	f004 fda0 	bl	c4784 <strdup>
        type_(type) {
   bfc44:	6120      	str	r0, [r4, #16]
   bfc46:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bfc48:	602c      	str	r4, [r5, #0]
	}
   bfc4a:	e7d7      	b.n	bfbfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bfc4c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bfc4c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bfc4e:	2300      	movs	r3, #0
   bfc50:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bfc52:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bfc54:	4604      	mov	r4, r0
   bfc56:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bfc58:	b12b      	cbz	r3, bfc66 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bfc5a:	2202      	movs	r2, #2
   bfc5c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bfc5e:	68eb      	ldr	r3, [r5, #12]
   bfc60:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfc62:	68ab      	ldr	r3, [r5, #8]
   bfc64:	60a3      	str	r3, [r4, #8]
    }
   bfc66:	4620      	mov	r0, r4
   bfc68:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfc6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bfc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfc6e:	b089      	sub	sp, #36	; 0x24
   bfc70:	4604      	mov	r4, r0
   bfc72:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bfc74:	a801      	add	r0, sp, #4
   bfc76:	4611      	mov	r1, r2
   bfc78:	f7ff fe55 	bl	bf926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bfc7c:	b1a4      	cbz	r4, bfca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bfc7e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfc80:	b11d      	cbz	r5, bfc8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bfc82:	4628      	mov	r0, r5
   bfc84:	f004 fd7e 	bl	c4784 <strdup>
   bfc88:	4605      	mov	r5, r0
   bfc8a:	a801      	add	r0, sp, #4
   bfc8c:	a903      	add	r1, sp, #12
        type_(type) {
   bfc8e:	9503      	str	r5, [sp, #12]
   bfc90:	f8ad 4010 	strh.w	r4, [sp, #16]
   bfc94:	f7ff fea6 	bl	bf9e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfc98:	a803      	add	r0, sp, #12
   bfc9a:	f7ff fdea 	bl	bf872 <_ZN8particle5ErrorD1Ev>
   bfc9e:	a802      	add	r0, sp, #8
   bfca0:	f7f6 f930 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfca4:	b009      	add	sp, #36	; 0x24
   bfca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bfca8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfcaa:	2301      	movs	r3, #1
   bfcac:	e8d5 2f4f 	ldrexb	r2, [r5]
   bfcb0:	2a00      	cmp	r2, #0
   bfcb2:	d103      	bne.n	bfcbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bfcb4:	e8c5 3f41 	strexb	r1, r3, [r5]
   bfcb8:	2900      	cmp	r1, #0
   bfcba:	d1f7      	bne.n	bfcac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bfcbc:	d1ef      	bne.n	bfc9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bfcbe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bfcc0:	f3bf 8f5b 	dmb	ish
   bfcc4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfcc6:	1d2b      	adds	r3, r5, #4
   bfcc8:	f3bf 8f5b 	dmb	ish
   bfccc:	e853 6f00 	ldrex	r6, [r3]
   bfcd0:	e843 4200 	strex	r2, r4, [r3]
   bfcd4:	2a00      	cmp	r2, #0
   bfcd6:	d1f9      	bne.n	bfccc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bfcd8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfcdc:	2e00      	cmp	r6, #0
   bfcde:	d0de      	beq.n	bfc9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bfce0:	4620      	mov	r0, r4
   bfce2:	f7fe fa59 	bl	be198 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfce6:	4607      	mov	r7, r0
   bfce8:	b160      	cbz	r0, bfd04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfcea:	f105 010c 	add.w	r1, r5, #12
   bfcee:	4630      	mov	r0, r6
   bfcf0:	f7ff fe44 	bl	bf97c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bfcf4:	4630      	mov	r0, r6
   bfcf6:	f7f4 fbeb 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfcfa:	2110      	movs	r1, #16
   bfcfc:	4630      	mov	r0, r6
   bfcfe:	f7f4 f9d0 	bl	b40a2 <_ZdlPvj>
   bfd02:	e7cc      	b.n	bfc9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bfd04:	4631      	mov	r1, r6
   bfd06:	a803      	add	r0, sp, #12
   bfd08:	f7ff ffa0 	bl	bfc4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bfd0c:	7b2b      	ldrb	r3, [r5, #12]
   bfd0e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfd12:	2010      	movs	r0, #16
   bfd14:	f7f4 f9bf 	bl	b4096 <_Znwj>
   bfd18:	4605      	mov	r5, r0
   bfd1a:	b1d0      	cbz	r0, bfd52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bfd1c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfd1e:	2014      	movs	r0, #20
   bfd20:	f7f4 f9b9 	bl	b4096 <_Znwj>
   bfd24:	4604      	mov	r4, r0
   bfd26:	b178      	cbz	r0, bfd48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bfd28:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfd2a:	4601      	mov	r1, r0
   bfd2c:	a803      	add	r0, sp, #12
   bfd2e:	f7ff fab1 	bl	bf294 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfd32:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfd34:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfd36:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfd38:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bfd3a:	9205      	str	r2, [sp, #20]
   bfd3c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfd3e:	60e3      	str	r3, [r4, #12]
   bfd40:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bfd44:	9206      	str	r2, [sp, #24]
   bfd46:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bfd48:	4b06      	ldr	r3, [pc, #24]	; (bfd64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bfd4a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfd4c:	4b06      	ldr	r3, [pc, #24]	; (bfd68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfd4e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfd50:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bfd52:	a803      	add	r0, sp, #12
   bfd54:	f7f4 fbbc 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfd58:	2200      	movs	r2, #0
   bfd5a:	4629      	mov	r1, r5
   bfd5c:	4803      	ldr	r0, [pc, #12]	; (bfd6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bfd5e:	f7fe fa23 	bl	be1a8 <application_thread_invoke>
   bfd62:	e7c7      	b.n	bfcf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bfd64:	000bf98f 	.word	0x000bf98f
   bfd68:	000bfd71 	.word	0x000bfd71
   bfd6c:	000be41f 	.word	0x000be41f

000bfd70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bfd70:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfd72:	b570      	push	{r4, r5, r6, lr}
   bfd74:	4604      	mov	r4, r0
	switch (__op)
   bfd76:	d103      	bne.n	bfd80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfd78:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfd7a:	6003      	str	r3, [r0, #0]
      }
   bfd7c:	2000      	movs	r0, #0
   bfd7e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bfd80:	2a02      	cmp	r2, #2
   bfd82:	d00c      	beq.n	bfd9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bfd84:	2a03      	cmp	r2, #3
   bfd86:	d1f9      	bne.n	bfd7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfd88:	6804      	ldr	r4, [r0, #0]
   bfd8a:	2c00      	cmp	r4, #0
   bfd8c:	d0f6      	beq.n	bfd7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bfd8e:	4620      	mov	r0, r4
   bfd90:	f7f4 fb9e 	bl	b44d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfd94:	2114      	movs	r1, #20
   bfd96:	4620      	mov	r0, r4
   bfd98:	f7f4 f983 	bl	b40a2 <_ZdlPvj>
   bfd9c:	e7ee      	b.n	bfd7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfd9e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bfda0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfda2:	f7f4 f978 	bl	b4096 <_Znwj>
   bfda6:	4605      	mov	r5, r0
   bfda8:	b120      	cbz	r0, bfdb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bfdaa:	4631      	mov	r1, r6
   bfdac:	f7ff ff4e 	bl	bfc4c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bfdb0:	7c33      	ldrb	r3, [r6, #16]
   bfdb2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bfdb4:	6025      	str	r5, [r4, #0]
	}
   bfdb6:	e7e1      	b.n	bfd7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bfdb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bfdb8:	2200      	movs	r2, #0
   bfdba:	6840      	ldr	r0, [r0, #4]
   bfdbc:	4611      	mov	r1, r2
   bfdbe:	f7fe ba8f 	b.w	be2e0 <network_listening>

000bfdc2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bfdc2:	2200      	movs	r2, #0
   bfdc4:	6840      	ldr	r0, [r0, #4]
   bfdc6:	4611      	mov	r1, r2
   bfdc8:	f7fe ba9a 	b.w	be300 <network_get_listen_timeout>

000bfdcc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bfdcc:	6840      	ldr	r0, [r0, #4]
   bfdce:	2200      	movs	r2, #0
   bfdd0:	f7fe ba8e 	b.w	be2f0 <network_set_listen_timeout>

000bfdd4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bfdd4:	6840      	ldr	r0, [r0, #4]
   bfdd6:	2200      	movs	r2, #0
   bfdd8:	f081 0101 	eor.w	r1, r1, #1
   bfddc:	f7fe ba78 	b.w	be2d0 <network_listen>

000bfde0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bfde0:	2300      	movs	r3, #0
   bfde2:	6840      	ldr	r0, [r0, #4]
   bfde4:	461a      	mov	r2, r3
   bfde6:	4619      	mov	r1, r3
   bfde8:	f7fe ba6a 	b.w	be2c0 <network_off>

000bfdec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bfdec:	2300      	movs	r3, #0
   bfdee:	6840      	ldr	r0, [r0, #4]
   bfdf0:	461a      	mov	r2, r3
   bfdf2:	4619      	mov	r1, r3
   bfdf4:	f7fe ba5c 	b.w	be2b0 <network_on>

000bfdf8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bfdf8:	2200      	movs	r2, #0
   bfdfa:	6840      	ldr	r0, [r0, #4]
   bfdfc:	4611      	mov	r1, r2
   bfdfe:	f7fe ba4f 	b.w	be2a0 <network_ready>

000bfe02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bfe02:	2200      	movs	r2, #0
   bfe04:	6840      	ldr	r0, [r0, #4]
   bfe06:	4611      	mov	r1, r2
   bfe08:	f7fe ba3a 	b.w	be280 <network_connecting>

000bfe0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bfe0c:	6840      	ldr	r0, [r0, #4]
   bfe0e:	2200      	movs	r2, #0
   bfe10:	2102      	movs	r1, #2
   bfe12:	f7fe ba3d 	b.w	be290 <network_disconnect>

000bfe16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bfe16:	2300      	movs	r3, #0
   bfe18:	6840      	ldr	r0, [r0, #4]
   bfe1a:	461a      	mov	r2, r3
   bfe1c:	f7fe ba28 	b.w	be270 <network_connect>

000bfe20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bfe20:	4b02      	ldr	r3, [pc, #8]	; (bfe2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bfe22:	2203      	movs	r2, #3
   bfe24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bfe26:	4a02      	ldr	r2, [pc, #8]	; (bfe30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bfe28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bfe2a:	4770      	bx	lr
   bfe2c:	2003e660 	.word	0x2003e660
   bfe30:	000c7f84 	.word	0x000c7f84

000bfe34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bfe34:	4770      	bx	lr

000bfe36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bfe36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfe38:	4606      	mov	r6, r0
   bfe3a:	4615      	mov	r5, r2
   bfe3c:	460c      	mov	r4, r1
   bfe3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bfe40:	42bc      	cmp	r4, r7
   bfe42:	d006      	beq.n	bfe52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bfe44:	6833      	ldr	r3, [r6, #0]
   bfe46:	f814 1b01 	ldrb.w	r1, [r4], #1
   bfe4a:	689b      	ldr	r3, [r3, #8]
   bfe4c:	4630      	mov	r0, r6
   bfe4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bfe50:	e7f6      	b.n	bfe40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bfe52:	4628      	mov	r0, r5
   bfe54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfe56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bfe56:	7c00      	ldrb	r0, [r0, #16]
   bfe58:	2200      	movs	r2, #0
   bfe5a:	f7fd bffb 	b.w	bde54 <hal_i2c_write>

000bfe5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bfe5e:	7c00      	ldrb	r0, [r0, #16]
   bfe60:	2100      	movs	r1, #0
   bfe62:	f7fd bfff 	b.w	bde64 <hal_i2c_available>

000bfe66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bfe66:	7c00      	ldrb	r0, [r0, #16]
   bfe68:	2100      	movs	r1, #0
   bfe6a:	f7fe b803 	b.w	bde74 <hal_i2c_read>

000bfe6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bfe6e:	7c00      	ldrb	r0, [r0, #16]
   bfe70:	2100      	movs	r1, #0
   bfe72:	f7fe b807 	b.w	bde84 <hal_i2c_peek>

000bfe76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bfe76:	7c00      	ldrb	r0, [r0, #16]
   bfe78:	2100      	movs	r1, #0
   bfe7a:	f7fe b80b 	b.w	bde94 <hal_i2c_flush>

000bfe7e <_ZN7TwoWireD0Ev>:
   bfe7e:	b510      	push	{r4, lr}
   bfe80:	2114      	movs	r1, #20
   bfe82:	4604      	mov	r4, r0
   bfe84:	f7f4 f90d 	bl	b40a2 <_ZdlPvj>
   bfe88:	4620      	mov	r0, r4
   bfe8a:	bd10      	pop	{r4, pc}

000bfe8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bfe8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bfe8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfe92:	4604      	mov	r4, r0
   bfe94:	4608      	mov	r0, r1
   bfe96:	2100      	movs	r1, #0
   bfe98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bfe9c:	4b03      	ldr	r3, [pc, #12]	; (bfeac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bfe9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bfea0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bfea2:	4611      	mov	r1, r2
   bfea4:	f7fe f806 	bl	bdeb4 <hal_i2c_init>
}
   bfea8:	4620      	mov	r0, r4
   bfeaa:	bd10      	pop	{r4, pc}
   bfeac:	000c7fc0 	.word	0x000c7fc0

000bfeb0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bfeb0:	7c00      	ldrb	r0, [r0, #16]
   bfeb2:	2200      	movs	r2, #0
   bfeb4:	f7fd bfae 	b.w	bde14 <hal_i2c_set_speed>

000bfeb8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bfeb8:	2300      	movs	r3, #0
   bfeba:	7c00      	ldrb	r0, [r0, #16]
   bfebc:	461a      	mov	r2, r3
   bfebe:	4619      	mov	r1, r3
   bfec0:	f7fd bfb0 	b.w	bde24 <hal_i2c_begin>

000bfec4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bfec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bfec6:	2200      	movs	r2, #0
   bfec8:	2314      	movs	r3, #20
   bfeca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bfece:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bfed2:	780b      	ldrb	r3, [r1, #0]
   bfed4:	f88d 3008 	strb.w	r3, [sp, #8]
   bfed8:	684b      	ldr	r3, [r1, #4]
   bfeda:	9303      	str	r3, [sp, #12]
   bfedc:	68cb      	ldr	r3, [r1, #12]
   bfede:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bfee0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bfee2:	7a0b      	ldrb	r3, [r1, #8]
   bfee4:	9305      	str	r3, [sp, #20]
   bfee6:	a901      	add	r1, sp, #4
   bfee8:	f7fd ffec 	bl	bdec4 <hal_i2c_request_ex>
}
   bfeec:	b007      	add	sp, #28
   bfeee:	f85d fb04 	ldr.w	pc, [sp], #4

000bfef2 <_ZN7TwoWire11requestFromEhjh>:
{
   bfef2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bfef4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bfef6:	f88d 1000 	strb.w	r1, [sp]
   bfefa:	f04f 0164 	mov.w	r1, #100	; 0x64
   bfefe:	9103      	str	r1, [sp, #12]
   bff00:	bf18      	it	ne
   bff02:	2301      	movne	r3, #1
   bff04:	4669      	mov	r1, sp
    size_ = size;
   bff06:	9201      	str	r2, [sp, #4]
   bff08:	f88d 3008 	strb.w	r3, [sp, #8]
   bff0c:	f7ff ffda 	bl	bfec4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bff10:	b005      	add	sp, #20
   bff12:	f85d fb04 	ldr.w	pc, [sp], #4

000bff16 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bff16:	2301      	movs	r3, #1
   bff18:	f7ff bfeb 	b.w	bfef2 <_ZN7TwoWire11requestFromEhjh>

000bff1c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bff1c:	7c00      	ldrb	r0, [r0, #16]
   bff1e:	2200      	movs	r2, #0
   bff20:	f7fd bf88 	b.w	bde34 <hal_i2c_begin_transmission>

000bff24 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bff24:	b2c9      	uxtb	r1, r1
   bff26:	f7ff bff9 	b.w	bff1c <_ZN7TwoWire17beginTransmissionEh>

000bff2a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bff2a:	7c00      	ldrb	r0, [r0, #16]
   bff2c:	2200      	movs	r2, #0
   bff2e:	f7fd bf89 	b.w	bde44 <hal_i2c_end_transmission>

000bff32 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bff32:	2101      	movs	r1, #1
   bff34:	f7ff bff9 	b.w	bff2a <_ZN7TwoWire15endTransmissionEh>

000bff38 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bff38:	4700      	bx	r0
	...

000bff3c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bff3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bff40:	2400      	movs	r4, #0
{
   bff42:	461d      	mov	r5, r3
   bff44:	460f      	mov	r7, r1
   bff46:	4690      	mov	r8, r2
   bff48:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bff4a:	f7fd ff43 	bl	bddd4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bff4e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bff50:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bff54:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bff58:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bff5c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bff60:	bfa2      	ittt	ge
   bff62:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bff66:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bff6a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bff6c:	4907      	ldr	r1, [pc, #28]	; (bff8c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bff6e:	9400      	str	r4, [sp, #0]
   bff70:	4643      	mov	r3, r8
   bff72:	463a      	mov	r2, r7
   bff74:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bff76:	bfa8      	it	ge
   bff78:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bff7c:	f7fd ff22 	bl	bddc4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bff80:	fab0 f080 	clz	r0, r0
   bff84:	0940      	lsrs	r0, r0, #5
   bff86:	b004      	add	sp, #16
   bff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bff8c:	000bff39 	.word	0x000bff39

000bff90 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bff90:	f7fd bf30 	b.w	bddf4 <HAL_Interrupts_Disable_All>

000bff94 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bff94:	f7fd bf26 	b.w	bdde4 <HAL_Interrupts_Enable_All>

000bff98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bff98:	4770      	bx	lr

000bff9a <_ZN9IPAddressD0Ev>:
   bff9a:	b510      	push	{r4, lr}
   bff9c:	2118      	movs	r1, #24
   bff9e:	4604      	mov	r4, r0
   bffa0:	f7f4 f87f 	bl	b40a2 <_ZdlPvj>
   bffa4:	4620      	mov	r0, r4
   bffa6:	bd10      	pop	{r4, pc}

000bffa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bffa8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bffaa:	7d03      	ldrb	r3, [r0, #20]
   bffac:	2b06      	cmp	r3, #6
{
   bffae:	b08d      	sub	sp, #52	; 0x34
   bffb0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bffb2:	f100 0704 	add.w	r7, r0, #4
   bffb6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bffba:	d012      	beq.n	bffe2 <_ZNK9IPAddress7printToER5Print+0x3a>
   bffbc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bffc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bffc4:	220a      	movs	r2, #10
   bffc6:	4630      	mov	r0, r6
   bffc8:	f001 fabd 	bl	c1546 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bffcc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bffce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bffd0:	d019      	beq.n	c0006 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bffd2:	2c00      	cmp	r4, #0
   bffd4:	d0f4      	beq.n	bffc0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bffd6:	212e      	movs	r1, #46	; 0x2e
   bffd8:	4630      	mov	r0, r6
   bffda:	f001 fa95 	bl	c1508 <_ZN5Print5printEc>
   bffde:	4404      	add	r4, r0
   bffe0:	e7ee      	b.n	bffc0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bffe2:	232f      	movs	r3, #47	; 0x2f
   bffe4:	466a      	mov	r2, sp
   bffe6:	4639      	mov	r1, r7
   bffe8:	200a      	movs	r0, #10
		buf[0] = 0;
   bffea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bffee:	f7fd ff71 	bl	bded4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bfff2:	4668      	mov	r0, sp
   bfff4:	f004 fbe3 	bl	c47be <strlen>
   bfff8:	6833      	ldr	r3, [r6, #0]
   bfffa:	4602      	mov	r2, r0
   bfffc:	68db      	ldr	r3, [r3, #12]
   bfffe:	4669      	mov	r1, sp
   c0000:	4630      	mov	r0, r6
   c0002:	4798      	blx	r3
   c0004:	4604      	mov	r4, r0
    }
    return n;
}
   c0006:	4620      	mov	r0, r4
   c0008:	b00d      	add	sp, #52	; 0x34
   c000a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c000c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c000c:	b510      	push	{r4, lr}
   c000e:	4b05      	ldr	r3, [pc, #20]	; (c0024 <_ZN9IPAddressC1Ev+0x18>)
   c0010:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c0012:	2211      	movs	r2, #17
   c0014:	f840 3b04 	str.w	r3, [r0], #4
   c0018:	2100      	movs	r1, #0
   c001a:	f004 fb45 	bl	c46a8 <memset>
}
   c001e:	4620      	mov	r0, r4
   c0020:	bd10      	pop	{r4, pc}
   c0022:	bf00      	nop
   c0024:	000c7fe8 	.word	0x000c7fe8

000c0028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c0028:	4603      	mov	r3, r0
   c002a:	4a07      	ldr	r2, [pc, #28]	; (c0048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c002c:	b510      	push	{r4, lr}
   c002e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c0032:	f101 0210 	add.w	r2, r1, #16
   c0036:	f851 4b04 	ldr.w	r4, [r1], #4
   c003a:	f843 4b04 	str.w	r4, [r3], #4
   c003e:	4291      	cmp	r1, r2
   c0040:	d1f9      	bne.n	c0036 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c0042:	780a      	ldrb	r2, [r1, #0]
   c0044:	701a      	strb	r2, [r3, #0]
}
   c0046:	bd10      	pop	{r4, pc}
   c0048:	000c7fe8 	.word	0x000c7fe8

000c004c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c004c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c004e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c0052:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c0056:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c005a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c005e:	2304      	movs	r3, #4
   c0060:	6041      	str	r1, [r0, #4]
   c0062:	7503      	strb	r3, [r0, #20]
}
   c0064:	bd10      	pop	{r4, pc}
	...

000c0068 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c0068:	b507      	push	{r0, r1, r2, lr}
   c006a:	4b06      	ldr	r3, [pc, #24]	; (c0084 <_ZN9IPAddressC1EPKh+0x1c>)
   c006c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c006e:	78cb      	ldrb	r3, [r1, #3]
   c0070:	9300      	str	r3, [sp, #0]
   c0072:	788b      	ldrb	r3, [r1, #2]
   c0074:	784a      	ldrb	r2, [r1, #1]
   c0076:	7809      	ldrb	r1, [r1, #0]
   c0078:	f7ff ffe8 	bl	c004c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c007c:	b003      	add	sp, #12
   c007e:	f85d fb04 	ldr.w	pc, [sp], #4
   c0082:	bf00      	nop
   c0084:	000c7fe8 	.word	0x000c7fe8

000c0088 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c0088:	f100 0310 	add.w	r3, r0, #16
   c008c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c008e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c0092:	2901      	cmp	r1, #1
   c0094:	4618      	mov	r0, r3
   c0096:	d108      	bne.n	c00aa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c0098:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c009c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c00a0:	3a01      	subs	r2, #1
   c00a2:	f103 0310 	add.w	r3, r3, #16
   c00a6:	d1f2      	bne.n	c008e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c00a8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c00aa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c00ac:	bf04      	itt	eq
   c00ae:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c00b2:	1852      	addeq	r2, r2, r1
   c00b4:	e7f4      	b.n	c00a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c00b6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c00b6:	b40e      	push	{r1, r2, r3}
   c00b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c00ba:	b088      	sub	sp, #32
   c00bc:	af00      	add	r7, sp, #0
   c00be:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00c2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c00c4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00c8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c00ca:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00cc:	462b      	mov	r3, r5
   c00ce:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c00d0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00d2:	f7fe f95d 	bl	be390 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c00d6:	280f      	cmp	r0, #15
   c00d8:	687a      	ldr	r2, [r7, #4]
   c00da:	d91a      	bls.n	c0112 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c00dc:	f100 0308 	add.w	r3, r0, #8
   c00e0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c00e4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c00e6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00ea:	1c41      	adds	r1, r0, #1
   c00ec:	462b      	mov	r3, r5
   c00ee:	4668      	mov	r0, sp
        va_start(args, fmt);
   c00f0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c00f2:	f7fe f94d 	bl	be390 <vsnprintf>
        if (n > 0) {
   c00f6:	1e02      	subs	r2, r0, #0
   c00f8:	dd04      	ble.n	c0104 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c00fa:	6823      	ldr	r3, [r4, #0]
   c00fc:	4669      	mov	r1, sp
   c00fe:	689b      	ldr	r3, [r3, #8]
   c0100:	4620      	mov	r0, r4
   c0102:	4798      	blx	r3
   c0104:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c0106:	3720      	adds	r7, #32
   c0108:	46bd      	mov	sp, r7
   c010a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c010e:	b003      	add	sp, #12
   c0110:	4770      	bx	lr
    } else if (n > 0) {
   c0112:	2800      	cmp	r0, #0
   c0114:	d0f7      	beq.n	c0106 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c0116:	6823      	ldr	r3, [r4, #0]
   c0118:	4602      	mov	r2, r0
   c011a:	689b      	ldr	r3, [r3, #8]
   c011c:	f107 0110 	add.w	r1, r7, #16
   c0120:	4620      	mov	r0, r4
   c0122:	4798      	blx	r3
}
   c0124:	e7ef      	b.n	c0106 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c0126 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c0126:	b538      	push	{r3, r4, r5, lr}
   c0128:	680b      	ldr	r3, [r1, #0]
   c012a:	6003      	str	r3, [r0, #0]
   c012c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c012e:	6843      	ldr	r3, [r0, #4]
   c0130:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c0132:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c0134:	d008      	beq.n	c0148 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c0136:	b115      	cbz	r5, c013e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c0138:	686b      	ldr	r3, [r5, #4]
   c013a:	3301      	adds	r3, #1
   c013c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c013e:	6860      	ldr	r0, [r4, #4]
   c0140:	b108      	cbz	r0, c0146 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c0142:	f7fe fa2a 	bl	be59a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c0146:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c0148:	bd38      	pop	{r3, r4, r5, pc}

000c014a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   c014a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c014c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c014e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c0152:	689b      	ldr	r3, [r3, #8]
   c0154:	2201      	movs	r2, #1
   c0156:	f10d 0107 	add.w	r1, sp, #7
   c015a:	4798      	blx	r3
}
   c015c:	b003      	add	sp, #12
   c015e:	f85d fb04 	ldr.w	pc, [sp], #4

000c0162 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c0162:	460b      	mov	r3, r1
   c0164:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c0166:	2200      	movs	r2, #0
   c0168:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c016a:	e9c0 2200 	strd	r2, r2, [r0]
   c016e:	4604      	mov	r4, r0
        t_ = t;
   c0170:	6083      	str	r3, [r0, #8]
    if (t) {
   c0172:	b90b      	cbnz	r3, c0178 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c0174:	4620      	mov	r0, r4
   c0176:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c0178:	f7ff ffd5 	bl	c0126 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c017c:	e7fa      	b.n	c0174 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c017e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c017e:	6883      	ldr	r3, [r0, #8]
   c0180:	b1eb      	cbz	r3, c01be <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c0182:	781a      	ldrb	r2, [r3, #0]
   c0184:	2a03      	cmp	r2, #3
   c0186:	d81a      	bhi.n	c01be <_ZNK5spark9JSONValue4typeEv+0x40>
   c0188:	e8df f002 	tbb	[pc, r2]
   c018c:	1b021704 	.word	0x1b021704
   c0190:	2005      	movs	r0, #5
   c0192:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c0194:	6802      	ldr	r2, [r0, #0]
   c0196:	685b      	ldr	r3, [r3, #4]
   c0198:	6852      	ldr	r2, [r2, #4]
   c019a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c019c:	282d      	cmp	r0, #45	; 0x2d
   c019e:	d012      	beq.n	c01c6 <_ZNK5spark9JSONValue4typeEv+0x48>
   c01a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c01a4:	2b09      	cmp	r3, #9
   c01a6:	d90e      	bls.n	c01c6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c01a8:	2874      	cmp	r0, #116	; 0x74
   c01aa:	d00e      	beq.n	c01ca <_ZNK5spark9JSONValue4typeEv+0x4c>
   c01ac:	2866      	cmp	r0, #102	; 0x66
   c01ae:	d00c      	beq.n	c01ca <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c01b0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c01b4:	4258      	negs	r0, r3
   c01b6:	4158      	adcs	r0, r3
   c01b8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c01ba:	2006      	movs	r0, #6
   c01bc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c01be:	2000      	movs	r0, #0
   c01c0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c01c2:	2004      	movs	r0, #4
   c01c4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c01c6:	2003      	movs	r0, #3
   c01c8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c01ca:	2002      	movs	r0, #2
}
   c01cc:	4770      	bx	lr

000c01ce <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c01ce:	b510      	push	{r4, lr}
   c01d0:	4604      	mov	r4, r0
    switch (type()) {
   c01d2:	f7ff ffd4 	bl	c017e <_ZNK5spark9JSONValue4typeEv>
   c01d6:	2802      	cmp	r0, #2
   c01d8:	d00e      	beq.n	c01f8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c01da:	1ec3      	subs	r3, r0, #3
   c01dc:	b2db      	uxtb	r3, r3
   c01de:	2b01      	cmp	r3, #1
   c01e0:	d814      	bhi.n	c020c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c01e2:	6822      	ldr	r2, [r4, #0]
   c01e4:	68a3      	ldr	r3, [r4, #8]
   c01e6:	6850      	ldr	r0, [r2, #4]
   c01e8:	685b      	ldr	r3, [r3, #4]
}
   c01ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c01ee:	220a      	movs	r2, #10
   c01f0:	2100      	movs	r1, #0
   c01f2:	4418      	add	r0, r3
   c01f4:	f005 ba0c 	b.w	c5610 <strtol>
        const char* const s = d_->json + t_->start;
   c01f8:	6822      	ldr	r2, [r4, #0]
   c01fa:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c01fc:	6852      	ldr	r2, [r2, #4]
   c01fe:	685b      	ldr	r3, [r3, #4]
   c0200:	5cd0      	ldrb	r0, [r2, r3]
   c0202:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c0206:	4258      	negs	r0, r3
   c0208:	4158      	adcs	r0, r3
}
   c020a:	bd10      	pop	{r4, pc}
    switch (type()) {
   c020c:	2000      	movs	r0, #0
   c020e:	e7fc      	b.n	c020a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c0210 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c0210:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c0212:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c0214:	e9c0 3300 	strd	r3, r3, [r0]
   c0218:	4604      	mov	r4, r0
        n_(0) {
   c021a:	480e      	ldr	r0, [pc, #56]	; (c0254 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c021c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c0220:	b1a9      	cbz	r1, c024e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c0222:	780b      	ldrb	r3, [r1, #0]
   c0224:	2b03      	cmp	r3, #3
   c0226:	d006      	beq.n	c0236 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c0228:	b98b      	cbnz	r3, c024e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c022a:	6813      	ldr	r3, [r2, #0]
   c022c:	6858      	ldr	r0, [r3, #4]
   c022e:	684b      	ldr	r3, [r1, #4]
   c0230:	5cc3      	ldrb	r3, [r0, r3]
   c0232:	2b6e      	cmp	r3, #110	; 0x6e
   c0234:	d007      	beq.n	c0246 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c0236:	6813      	ldr	r3, [r2, #0]
   c0238:	684d      	ldr	r5, [r1, #4]
   c023a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c023c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c023e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c0240:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c0242:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c0244:	60e3      	str	r3, [r4, #12]
   c0246:	4611      	mov	r1, r2
   c0248:	4620      	mov	r0, r4
   c024a:	f7ff ff6c 	bl	c0126 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c024e:	4620      	mov	r0, r4
   c0250:	bd38      	pop	{r3, r4, r5, pc}
   c0252:	bf00      	nop
   c0254:	000c8057 	.word	0x000c8057

000c0258 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c0258:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c025a:	2500      	movs	r5, #0
   c025c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c025e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c0262:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c0266:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c026a:	4604      	mov	r4, r0
   c026c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c026e:	b14b      	cbz	r3, c0284 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c0270:	781a      	ldrb	r2, [r3, #0]
   c0272:	2a01      	cmp	r2, #1
   c0274:	d106      	bne.n	c0284 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c0276:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c027a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c027c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c027e:	6143      	str	r3, [r0, #20]
   c0280:	f7ff ff51 	bl	c0126 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c0284:	4620      	mov	r0, r4
   c0286:	bd38      	pop	{r3, r4, r5, pc}

000c0288 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c0288:	b510      	push	{r4, lr}
    if (!n_) {
   c028a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c028c:	4604      	mov	r4, r0
    if (!n_) {
   c028e:	b163      	cbz	r3, c02aa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c0290:	6880      	ldr	r0, [r0, #8]
   c0292:	60e0      	str	r0, [r4, #12]
    --n_;
   c0294:	3b01      	subs	r3, #1
    ++t_;
   c0296:	3010      	adds	r0, #16
   c0298:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c029a:	6120      	str	r0, [r4, #16]
    --n_;
   c029c:	6163      	str	r3, [r4, #20]
    if (n_) {
   c029e:	b113      	cbz	r3, c02a6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c02a0:	f7ff fef2 	bl	c0088 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c02a4:	60a0      	str	r0, [r4, #8]
    return true;
   c02a6:	2001      	movs	r0, #1
   c02a8:	e000      	b.n	c02ac <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c02aa:	4618      	mov	r0, r3
}
   c02ac:	bd10      	pop	{r4, pc}

000c02ae <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c02ae:	b510      	push	{r4, lr}
    write('}');
   c02b0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c02b2:	4604      	mov	r4, r0
    write('}');
   c02b4:	f7ff ff49 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c02b8:	2301      	movs	r3, #1
   c02ba:	7123      	strb	r3, [r4, #4]
}
   c02bc:	4620      	mov	r0, r4
   c02be:	bd10      	pop	{r4, pc}

000c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c02c0:	b508      	push	{r3, lr}
    switch (state_) {
   c02c2:	7903      	ldrb	r3, [r0, #4]
   c02c4:	2b01      	cmp	r3, #1
   c02c6:	d002      	beq.n	c02ce <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c02c8:	2b02      	cmp	r3, #2
   c02ca:	d004      	beq.n	c02d6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c02cc:	bd08      	pop	{r3, pc}
        write(',');
   c02ce:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c02d0:	f7ff ff3b 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
}
   c02d4:	e7fa      	b.n	c02cc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c02d6:	213a      	movs	r1, #58	; 0x3a
   c02d8:	e7fa      	b.n	c02d0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c02da <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c02da:	b510      	push	{r4, lr}
   c02dc:	4604      	mov	r4, r0
    writeSeparator();
   c02de:	f7ff ffef 	bl	c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c02e2:	4620      	mov	r0, r4
   c02e4:	217b      	movs	r1, #123	; 0x7b
   c02e6:	f7ff ff30 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c02ea:	2300      	movs	r3, #0
   c02ec:	7123      	strb	r3, [r4, #4]
}
   c02ee:	4620      	mov	r0, r4
   c02f0:	bd10      	pop	{r4, pc}
	...

000c02f4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c02f4:	b513      	push	{r0, r1, r4, lr}
   c02f6:	4604      	mov	r4, r0
   c02f8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c02fa:	f7ff ffe1 	bl	c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c02fe:	6823      	ldr	r3, [r4, #0]
   c0300:	9a01      	ldr	r2, [sp, #4]
   c0302:	68db      	ldr	r3, [r3, #12]
   c0304:	4903      	ldr	r1, [pc, #12]	; (c0314 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c0306:	4620      	mov	r0, r4
   c0308:	4798      	blx	r3
    state_ = NEXT;
   c030a:	2301      	movs	r3, #1
}
   c030c:	4620      	mov	r0, r4
    state_ = NEXT;
   c030e:	7123      	strb	r3, [r4, #4]
}
   c0310:	b002      	add	sp, #8
   c0312:	bd10      	pop	{r4, pc}
   c0314:	000c69d4 	.word	0x000c69d4

000c0318 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c0318:	b513      	push	{r0, r1, r4, lr}
   c031a:	4604      	mov	r4, r0
   c031c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c031e:	f7ff ffcf 	bl	c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c0322:	6823      	ldr	r3, [r4, #0]
   c0324:	9a01      	ldr	r2, [sp, #4]
   c0326:	68db      	ldr	r3, [r3, #12]
   c0328:	4903      	ldr	r1, [pc, #12]	; (c0338 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c032a:	4620      	mov	r0, r4
   c032c:	4798      	blx	r3
    state_ = NEXT;
   c032e:	2301      	movs	r3, #1
}
   c0330:	4620      	mov	r0, r4
    state_ = NEXT;
   c0332:	7123      	strb	r3, [r4, #4]
}
   c0334:	b002      	add	sp, #8
   c0336:	bd10      	pop	{r4, pc}
   c0338:	000c7ff4 	.word	0x000c7ff4

000c033c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0340:	460d      	mov	r5, r1
    write('"');
   c0342:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c0344:	4690      	mov	r8, r2
   c0346:	4604      	mov	r4, r0
    write('"');
   c0348:	f7ff feff 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c034c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c03f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c0350:	44a8      	add	r8, r5
    const char *s = str;
   c0352:	462f      	mov	r7, r5
    while (s != end) {
   c0354:	4547      	cmp	r7, r8
   c0356:	46ba      	mov	sl, r7
   c0358:	d03d      	beq.n	c03d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c035a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c035e:	2e22      	cmp	r6, #34	; 0x22
   c0360:	d006      	beq.n	c0370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c0362:	2e5c      	cmp	r6, #92	; 0x5c
   c0364:	d004      	beq.n	c0370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c0366:	4630      	mov	r0, r6
   c0368:	f004 f95e 	bl	c4628 <isprint>
   c036c:	2800      	cmp	r0, #0
   c036e:	d1f1      	bne.n	c0354 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c0370:	6823      	ldr	r3, [r4, #0]
   c0372:	ebaa 0205 	sub.w	r2, sl, r5
   c0376:	689b      	ldr	r3, [r3, #8]
   c0378:	4629      	mov	r1, r5
   c037a:	4620      	mov	r0, r4
   c037c:	4798      	blx	r3
            write('\\');
   c037e:	215c      	movs	r1, #92	; 0x5c
   c0380:	4620      	mov	r0, r4
   c0382:	f7ff fee2 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c0386:	2e0d      	cmp	r6, #13
   c0388:	d80a      	bhi.n	c03a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c038a:	2e07      	cmp	r6, #7
   c038c:	d91c      	bls.n	c03c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c038e:	f1a6 0308 	sub.w	r3, r6, #8
   c0392:	2b05      	cmp	r3, #5
   c0394:	d818      	bhi.n	c03c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c0396:	e8df f003 	tbb	[pc, r3]
   c039a:	0f0d      	.short	0x0f0d
   c039c:	15131711 	.word	0x15131711
   c03a0:	2e22      	cmp	r6, #34	; 0x22
   c03a2:	d001      	beq.n	c03a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c03a4:	2e5c      	cmp	r6, #92	; 0x5c
   c03a6:	d10f      	bne.n	c03c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c03a8:	4631      	mov	r1, r6
                write('b');
   c03aa:	4620      	mov	r0, r4
   c03ac:	f7ff fecd 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c03b0:	463d      	mov	r5, r7
    while (s != end) {
   c03b2:	e7cf      	b.n	c0354 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c03b4:	2162      	movs	r1, #98	; 0x62
   c03b6:	e7f8      	b.n	c03aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c03b8:	2174      	movs	r1, #116	; 0x74
   c03ba:	e7f6      	b.n	c03aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c03bc:	216e      	movs	r1, #110	; 0x6e
   c03be:	e7f4      	b.n	c03aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c03c0:	2166      	movs	r1, #102	; 0x66
   c03c2:	e7f2      	b.n	c03aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c03c4:	2172      	movs	r1, #114	; 0x72
   c03c6:	e7f0      	b.n	c03aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c03c8:	6823      	ldr	r3, [r4, #0]
   c03ca:	4632      	mov	r2, r6
   c03cc:	68db      	ldr	r3, [r3, #12]
   c03ce:	4649      	mov	r1, r9
   c03d0:	4620      	mov	r0, r4
   c03d2:	4798      	blx	r3
                break;
   c03d4:	e7ec      	b.n	c03b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c03d6:	42bd      	cmp	r5, r7
   c03d8:	d005      	beq.n	c03e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c03da:	6823      	ldr	r3, [r4, #0]
   c03dc:	1b7a      	subs	r2, r7, r5
   c03de:	689b      	ldr	r3, [r3, #8]
   c03e0:	4629      	mov	r1, r5
   c03e2:	4620      	mov	r0, r4
   c03e4:	4798      	blx	r3
    }
    write('"');
   c03e6:	2122      	movs	r1, #34	; 0x22
   c03e8:	4620      	mov	r0, r4
   c03ea:	f7ff feae 	bl	c014a <_ZN5spark10JSONWriter5writeEc>
}
   c03ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c03f2:	bf00      	nop
   c03f4:	000c7ff7 	.word	0x000c7ff7

000c03f8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c03f8:	b513      	push	{r0, r1, r4, lr}
   c03fa:	4604      	mov	r4, r0
   c03fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0400:	f7ff ff5e 	bl	c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c0404:	4620      	mov	r0, r4
   c0406:	e9dd 2100 	ldrd	r2, r1, [sp]
   c040a:	f7ff ff97 	bl	c033c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c040e:	2302      	movs	r3, #2
}
   c0410:	4620      	mov	r0, r4
    state_ = VALUE;
   c0412:	7123      	strb	r3, [r4, #4]
}
   c0414:	b002      	add	sp, #8
   c0416:	bd10      	pop	{r4, pc}

000c0418 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c0418:	b513      	push	{r0, r1, r4, lr}
   c041a:	4604      	mov	r4, r0
   c041c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0420:	f7ff ff4e 	bl	c02c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c0424:	4620      	mov	r0, r4
   c0426:	e9dd 2100 	ldrd	r2, r1, [sp]
   c042a:	f7ff ff87 	bl	c033c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c042e:	2301      	movs	r3, #1
}
   c0430:	4620      	mov	r0, r4
    state_ = NEXT;
   c0432:	7123      	strb	r3, [r4, #4]
}
   c0434:	b002      	add	sp, #8
   c0436:	bd10      	pop	{r4, pc}

000c0438 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   c0438:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   c043a:	460b      	mov	r3, r1
    s->update(ticks);
   c043c:	6892      	ldr	r2, [r2, #8]
   c043e:	4601      	mov	r1, r0
   c0440:	4618      	mov	r0, r3
   c0442:	4710      	bx	r2

000c0444 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   c0444:	b570      	push	{r4, r5, r6, lr}
   c0446:	4c0e      	ldr	r4, [pc, #56]	; (c0480 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   c0448:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   c044a:	2500      	movs	r5, #0
   c044c:	241c      	movs	r4, #28
   c044e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c0452:	f89d 4014 	ldrb.w	r4, [sp, #20]
   c0456:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   c045a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c045c:	f004 0403 	and.w	r4, r4, #3
   c0460:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   c0464:	b2e4      	uxtb	r4, r4
   c0466:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   c0468:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   c046a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   c046c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   c046e:	7c42      	ldrb	r2, [r0, #17]
   c0470:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   c0472:	bf0a      	itet	eq
   c0474:	4b03      	ldreq	r3, [pc, #12]	; (c0484 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   c0476:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   c0478:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   c047c:	bd70      	pop	{r4, r5, r6, pc}
   c047e:	bf00      	nop
   c0480:	000c6ea8 	.word	0x000c6ea8
   c0484:	000c0439 	.word	0x000c0439

000c0488 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   c0488:	6880      	ldr	r0, [r0, #8]
   c048a:	6803      	ldr	r3, [r0, #0]
   c048c:	68db      	ldr	r3, [r3, #12]
   c048e:	4718      	bx	r3

000c0490 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   c0490:	4770      	bx	lr

000c0492 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   c0492:	4608      	mov	r0, r1
   c0494:	b111      	cbz	r1, c049c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   c0496:	680b      	ldr	r3, [r1, #0]
   c0498:	685b      	ldr	r3, [r3, #4]
   c049a:	4718      	bx	r3
}
   c049c:	4770      	bx	lr

000c049e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   c049e:	4770      	bx	lr

000c04a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c04a0:	4770      	bx	lr

000c04a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   c04a2:	4770      	bx	lr

000c04a4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   c04a4:	4770      	bx	lr

000c04a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   c04a6:	b538      	push	{r3, r4, r5, lr}
   c04a8:	4604      	mov	r4, r0
   c04aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   c04ac:	6800      	ldr	r0, [r0, #0]
   c04ae:	212e      	movs	r1, #46	; 0x2e
   c04b0:	f004 f94c 	bl	c474c <strchrnul>
    size = s - category;
   c04b4:	6823      	ldr	r3, [r4, #0]
   c04b6:	1ac3      	subs	r3, r0, r3
   c04b8:	602b      	str	r3, [r5, #0]
    if (size) {
   c04ba:	b123      	cbz	r3, c04c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   c04bc:	7803      	ldrb	r3, [r0, #0]
   c04be:	b103      	cbz	r3, c04c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   c04c0:	3001      	adds	r0, #1
   c04c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c04c4:	6020      	str	r0, [r4, #0]
}
   c04c6:	4618      	mov	r0, r3
   c04c8:	bd38      	pop	{r3, r4, r5, pc}

000c04ca <_ZN5spark16JSONStreamWriterD0Ev>:
   c04ca:	b510      	push	{r4, lr}
   c04cc:	210c      	movs	r1, #12
   c04ce:	4604      	mov	r4, r0
   c04d0:	f7f3 fde7 	bl	b40a2 <_ZdlPvj>
   c04d4:	4620      	mov	r0, r4
   c04d6:	bd10      	pop	{r4, pc}

000c04d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   c04d8:	b510      	push	{r4, lr}
   c04da:	2104      	movs	r1, #4
   c04dc:	4604      	mov	r4, r0
   c04de:	f7f3 fde0 	bl	b40a2 <_ZdlPvj>
   c04e2:	4620      	mov	r0, r4
   c04e4:	bd10      	pop	{r4, pc}

000c04e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c04e6:	b510      	push	{r4, lr}
   c04e8:	2104      	movs	r1, #4
   c04ea:	4604      	mov	r4, r0
   c04ec:	f7f3 fdd9 	bl	b40a2 <_ZdlPvj>
   c04f0:	4620      	mov	r0, r4
   c04f2:	bd10      	pop	{r4, pc}

000c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   c04f4:	f7fd bbf6 	b.w	bdce4 <os_mutex_recursive_lock>

000c04f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   c04f8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   c04fa:	f004 f931 	bl	c4760 <strcmp>
}
   c04fe:	fab0 f080 	clz	r0, r0
   c0502:	0940      	lsrs	r0, r0, #5
   c0504:	bd08      	pop	{r3, pc}

000c0506 <__tcf_1>:
   c0506:	4770      	bx	lr

000c0508 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   c0508:	b510      	push	{r4, lr}
   c050a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   c050c:	f001 fcd0 	bl	c1eb0 <_Z16_fetch_usbserialv>
   c0510:	4284      	cmp	r4, r0
   c0512:	d010      	beq.n	c0536 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   c0514:	f001 fe78 	bl	c2208 <_Z22__fetch_global_Serial1v>
   c0518:	4284      	cmp	r4, r0
   c051a:	d105      	bne.n	c0528 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   c051c:	f001 fe74 	bl	c2208 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   c0520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   c0524:	f001 bc5f 	b.w	c1de6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   c0528:	b12c      	cbz	r4, c0536 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   c052a:	6823      	ldr	r3, [r4, #0]
   c052c:	4620      	mov	r0, r4
   c052e:	685b      	ldr	r3, [r3, #4]
}
   c0530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0534:	4718      	bx	r3
   c0536:	bd10      	pop	{r4, pc}

000c0538 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0538:	680b      	ldr	r3, [r1, #0]
   c053a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c053c:	684b      	ldr	r3, [r1, #4]
   c053e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c0540:	b113      	cbz	r3, c0548 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   c0542:	685a      	ldr	r2, [r3, #4]
   c0544:	3201      	adds	r2, #1
   c0546:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0548:	4770      	bx	lr

000c054a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   c054a:	b513      	push	{r0, r1, r4, lr}
   c054c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   c054e:	4608      	mov	r0, r1
   c0550:	9101      	str	r1, [sp, #4]
   c0552:	f004 f934 	bl	c47be <strlen>
   c0556:	9901      	ldr	r1, [sp, #4]
   c0558:	4602      	mov	r2, r0
   c055a:	4620      	mov	r0, r4
}
   c055c:	b002      	add	sp, #8
   c055e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   c0562:	f7ff bf59 	b.w	c0418 <_ZN5spark10JSONWriter5valueEPKcj>

000c0566 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   c0566:	b513      	push	{r0, r1, r4, lr}
   c0568:	4604      	mov	r4, r0
    write(str, strlen(str));
   c056a:	4608      	mov	r0, r1
   c056c:	9101      	str	r1, [sp, #4]
   c056e:	f004 f926 	bl	c47be <strlen>
   c0572:	6823      	ldr	r3, [r4, #0]
   c0574:	9901      	ldr	r1, [sp, #4]
   c0576:	68db      	ldr	r3, [r3, #12]
   c0578:	4602      	mov	r2, r0
   c057a:	4620      	mov	r0, r4
}
   c057c:	b002      	add	sp, #8
   c057e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   c0582:	4718      	bx	r3

000c0584 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   c0584:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c0586:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   c0588:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c058c:	68db      	ldr	r3, [r3, #12]
   c058e:	2201      	movs	r2, #1
   c0590:	f10d 0107 	add.w	r1, sp, #7
   c0594:	4798      	blx	r3
}
   c0596:	b003      	add	sp, #12
   c0598:	f85d fb04 	ldr.w	pc, [sp], #4

000c059c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c059c:	b40e      	push	{r1, r2, r3}
   c059e:	b503      	push	{r0, r1, lr}
   c05a0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   c05a2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c05a4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   c05a8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   c05aa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   c05ac:	f000 ffe9 	bl	c1582 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   c05b0:	b002      	add	sp, #8
   c05b2:	f85d eb04 	ldr.w	lr, [sp], #4
   c05b6:	b003      	add	sp, #12
   c05b8:	4770      	bx	lr

000c05ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   c05ba:	680a      	ldr	r2, [r1, #0]
   c05bc:	6002      	str	r2, [r0, #0]
   c05be:	684a      	ldr	r2, [r1, #4]
   c05c0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   c05c2:	2200      	movs	r2, #0
   c05c4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   c05c8:	b510      	push	{r4, lr}
   c05ca:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c05cc:	688c      	ldr	r4, [r1, #8]
   c05ce:	6084      	str	r4, [r0, #8]
   c05d0:	68cc      	ldr	r4, [r1, #12]
   c05d2:	60c4      	str	r4, [r0, #12]
   c05d4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c05d6:	608a      	str	r2, [r1, #8]
   c05d8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c05da:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c05dc:	610a      	str	r2, [r1, #16]
   c05de:	bd10      	pop	{r4, pc}

000c05e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c05e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c05e4:	e9d0 8400 	ldrd	r8, r4, [r0]
   c05e8:	f04f 0a14 	mov.w	sl, #20
   c05ec:	9300      	str	r3, [sp, #0]
   c05ee:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c05f2:	4b18      	ldr	r3, [pc, #96]	; (c0654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c05f4:	10a4      	asrs	r4, r4, #2
   c05f6:	4617      	mov	r7, r2
   c05f8:	435c      	muls	r4, r3
   c05fa:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c05fc:	2c00      	cmp	r4, #0
   c05fe:	dd21      	ble.n	c0644 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c0600:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c0602:	fb0a f006 	mul.w	r0, sl, r6
   c0606:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c060a:	463a      	mov	r2, r7
   c060c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c0610:	5828      	ldr	r0, [r5, r0]
   c0612:	9101      	str	r1, [sp, #4]
   c0614:	455f      	cmp	r7, fp
   c0616:	bf28      	it	cs
   c0618:	465a      	movcs	r2, fp
   c061a:	f004 f8eb 	bl	c47f4 <strncmp>
                if (cmp == 0) {
   c061e:	2800      	cmp	r0, #0
   c0620:	9901      	ldr	r1, [sp, #4]
   c0622:	f04f 0301 	mov.w	r3, #1
   c0626:	d10b      	bne.n	c0640 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c0628:	455f      	cmp	r7, fp
   c062a:	d103      	bne.n	c0634 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c062c:	9a00      	ldr	r2, [sp, #0]
   c062e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0630:	4634      	mov	r4, r6
   c0632:	e7e3      	b.n	c05fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c0634:	d9fc      	bls.n	c0630 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c0636:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c0638:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c063c:	3e01      	subs	r6, #1
   c063e:	e7f7      	b.n	c0630 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c0640:	dbf9      	blt.n	c0636 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c0642:	e7f5      	b.n	c0630 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c0644:	eba5 0508 	sub.w	r5, r5, r8
}
   c0648:	4802      	ldr	r0, [pc, #8]	; (c0654 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c064a:	10ad      	asrs	r5, r5, #2
   c064c:	4368      	muls	r0, r5
   c064e:	b003      	add	sp, #12
   c0650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0654:	cccccccd 	.word	0xcccccccd

000c0658 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c0658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c065a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c065c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c065e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c0660:	b303      	cbz	r3, c06a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c0662:	b1f9      	cbz	r1, c06a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c0664:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c0666:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c066a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c066c:	a903      	add	r1, sp, #12
   c066e:	a801      	add	r0, sp, #4
   c0670:	f7ff ff19 	bl	c04a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0674:	4601      	mov	r1, r0
   c0676:	b1a8      	cbz	r0, c06a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c0678:	f10d 030b 	add.w	r3, sp, #11
   c067c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c067e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0682:	4620      	mov	r0, r4
   c0684:	f7ff ffac 	bl	c05e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c0688:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c068c:	b153      	cbz	r3, c06a4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c068e:	6823      	ldr	r3, [r4, #0]
   c0690:	2414      	movs	r4, #20
   c0692:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c0696:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c0698:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c069c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c069e:	bfa8      	it	ge
   c06a0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c06a2:	e7e3      	b.n	c066c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c06a4:	4628      	mov	r0, r5
   c06a6:	b004      	add	sp, #16
   c06a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000c06ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c06ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c06ae:	4c09      	ldr	r4, [pc, #36]	; (c06d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c06b0:	7823      	ldrb	r3, [r4, #0]
   c06b2:	f3bf 8f5b 	dmb	ish
   c06b6:	07db      	lsls	r3, r3, #31
   c06b8:	d409      	bmi.n	c06ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c06ba:	4620      	mov	r0, r4
   c06bc:	f7f3 fd00 	bl	b40c0 <__cxa_guard_acquire>
   c06c0:	b128      	cbz	r0, c06ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c06c2:	4620      	mov	r0, r4
   c06c4:	f7f3 fd01 	bl	b40ca <__cxa_guard_release>
   c06c8:	4803      	ldr	r0, [pc, #12]	; (c06d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c06ca:	f003 ff9f 	bl	c460c <atexit>
}
   c06ce:	4803      	ldr	r0, [pc, #12]	; (c06dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c06d0:	bd10      	pop	{r4, pc}
   c06d2:	bf00      	nop
   c06d4:	2003e66c 	.word	0x2003e66c
   c06d8:	000c049f 	.word	0x000c049f
   c06dc:	2003db38 	.word	0x2003db38

000c06e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c06e0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c06e2:	4c09      	ldr	r4, [pc, #36]	; (c0708 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c06e4:	7823      	ldrb	r3, [r4, #0]
   c06e6:	f3bf 8f5b 	dmb	ish
   c06ea:	07db      	lsls	r3, r3, #31
   c06ec:	d409      	bmi.n	c0702 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c06ee:	4620      	mov	r0, r4
   c06f0:	f7f3 fce6 	bl	b40c0 <__cxa_guard_acquire>
   c06f4:	b128      	cbz	r0, c0702 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c06f6:	4620      	mov	r0, r4
   c06f8:	f7f3 fce7 	bl	b40ca <__cxa_guard_release>
   c06fc:	4803      	ldr	r0, [pc, #12]	; (c070c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c06fe:	f003 ff85 	bl	c460c <atexit>
    return &factory;
}
   c0702:	4803      	ldr	r0, [pc, #12]	; (c0710 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c0704:	bd10      	pop	{r4, pc}
   c0706:	bf00      	nop
   c0708:	2003e670 	.word	0x2003e670
   c070c:	000c0507 	.word	0x000c0507
   c0710:	2003db3c 	.word	0x2003db3c

000c0714 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c0714:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c0716:	2500      	movs	r5, #0
   c0718:	4604      	mov	r4, r0
   c071a:	e9c0 5500 	strd	r5, r5, [r0]
   c071e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c0722:	6085      	str	r5, [r0, #8]
   c0724:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c0726:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c072a:	f7fd facb 	bl	bdcc4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c072e:	f7ff ffbd 	bl	c06ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c0732:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0734:	f7ff ffd4 	bl	c06e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c0738:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c073a:	6220      	str	r0, [r4, #32]
}
   c073c:	4620      	mov	r0, r4
   c073e:	bd38      	pop	{r3, r4, r5, pc}

000c0740 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0740:	b510      	push	{r4, lr}
    static LogManager mgr;
   c0742:	4c0a      	ldr	r4, [pc, #40]	; (c076c <_ZN5spark10LogManager8instanceEv+0x2c>)
   c0744:	7823      	ldrb	r3, [r4, #0]
   c0746:	f3bf 8f5b 	dmb	ish
   c074a:	07db      	lsls	r3, r3, #31
   c074c:	d40c      	bmi.n	c0768 <_ZN5spark10LogManager8instanceEv+0x28>
   c074e:	4620      	mov	r0, r4
   c0750:	f7f3 fcb6 	bl	b40c0 <__cxa_guard_acquire>
   c0754:	b140      	cbz	r0, c0768 <_ZN5spark10LogManager8instanceEv+0x28>
   c0756:	4806      	ldr	r0, [pc, #24]	; (c0770 <_ZN5spark10LogManager8instanceEv+0x30>)
   c0758:	f7ff ffdc 	bl	c0714 <_ZN5spark10LogManagerC1Ev>
   c075c:	4620      	mov	r0, r4
   c075e:	f7f3 fcb4 	bl	b40ca <__cxa_guard_release>
   c0762:	4804      	ldr	r0, [pc, #16]	; (c0774 <_ZN5spark10LogManager8instanceEv+0x34>)
   c0764:	f003 ff52 	bl	c460c <atexit>
    return &mgr;
}
   c0768:	4801      	ldr	r0, [pc, #4]	; (c0770 <_ZN5spark10LogManager8instanceEv+0x30>)
   c076a:	bd10      	pop	{r4, pc}
   c076c:	2003e668 	.word	0x2003e668
   c0770:	2003e678 	.word	0x2003e678
   c0774:	000c0c95 	.word	0x000c0c95

000c0778 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c0778:	4a02      	ldr	r2, [pc, #8]	; (c0784 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c077a:	4903      	ldr	r1, [pc, #12]	; (c0788 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c077c:	4803      	ldr	r0, [pc, #12]	; (c078c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c077e:	2300      	movs	r3, #0
   c0780:	f7fd bce0 	b.w	be144 <log_set_callbacks>
   c0784:	000c0a79 	.word	0x000c0a79
   c0788:	000c0a05 	.word	0x000c0a05
   c078c:	000c0985 	.word	0x000c0985

000c0790 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c0790:	2300      	movs	r3, #0
   c0792:	461a      	mov	r2, r3
   c0794:	4619      	mov	r1, r3
   c0796:	4618      	mov	r0, r3
   c0798:	f7fd bcd4 	b.w	be144 <log_set_callbacks>

000c079c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c079c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c079e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c07a0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c07a2:	4668      	mov	r0, sp
   c07a4:	f7ff fec8 	bl	c0538 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c07a8:	466a      	mov	r2, sp
   c07aa:	4629      	mov	r1, r5
   c07ac:	4620      	mov	r0, r4
   c07ae:	f7ff fd53 	bl	c0258 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c07b2:	a801      	add	r0, sp, #4
   c07b4:	f7f5 fba6 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c07b8:	4620      	mov	r0, r4
   c07ba:	b003      	add	sp, #12
   c07bc:	bd30      	pop	{r4, r5, pc}

000c07be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c07be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c07c0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c07c2:	4604      	mov	r4, r0
   c07c4:	4668      	mov	r0, sp
   c07c6:	f7ff feb7 	bl	c0538 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c07ca:	466a      	mov	r2, sp
   c07cc:	4629      	mov	r1, r5
   c07ce:	4620      	mov	r0, r4
   c07d0:	f7ff fd1e 	bl	c0210 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c07d4:	a801      	add	r0, sp, #4
   c07d6:	f7f5 fb95 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c07da:	4620      	mov	r0, r4
   c07dc:	b003      	add	sp, #12
   c07de:	bd30      	pop	{r4, r5, pc}

000c07e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c07e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c07e2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c07e4:	4604      	mov	r4, r0
   c07e6:	4668      	mov	r0, sp
   c07e8:	f7ff fea6 	bl	c0538 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c07ec:	466a      	mov	r2, sp
   c07ee:	4629      	mov	r1, r5
   c07f0:	4620      	mov	r0, r4
   c07f2:	f7ff fcb6 	bl	c0162 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c07f6:	a801      	add	r0, sp, #4
   c07f8:	f7f5 fb84 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c07fc:	4620      	mov	r0, r4
   c07fe:	b003      	add	sp, #12
   c0800:	bd30      	pop	{r4, r5, pc}
	...

000c0804 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0804:	b570      	push	{r4, r5, r6, lr}
   c0806:	b08a      	sub	sp, #40	; 0x28
   c0808:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c080a:	4601      	mov	r1, r0
   c080c:	a804      	add	r0, sp, #16
   c080e:	f7ff ffc5 	bl	c079c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c0812:	4e14      	ldr	r6, [pc, #80]	; (c0864 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c0814:	a804      	add	r0, sp, #16
   c0816:	f7ff fd37 	bl	c0288 <_ZN5spark18JSONObjectIterator4nextEv>
   c081a:	b1e8      	cbz	r0, c0858 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c081c:	a904      	add	r1, sp, #16
   c081e:	4668      	mov	r0, sp
   c0820:	f7ff ffcd 	bl	c07be <_ZNK5spark18JSONObjectIterator4nameEv>
   c0824:	9802      	ldr	r0, [sp, #8]
   c0826:	4631      	mov	r1, r6
   c0828:	f7ff fe66 	bl	c04f8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c082c:	4604      	mov	r4, r0
   c082e:	b110      	cbz	r0, c0836 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0830:	1e2c      	subs	r4, r5, #0
   c0832:	bf18      	it	ne
   c0834:	2401      	movne	r4, #1
   c0836:	a801      	add	r0, sp, #4
   c0838:	f7f5 fb64 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c083c:	2c00      	cmp	r4, #0
   c083e:	d0e9      	beq.n	c0814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0840:	a904      	add	r1, sp, #16
   c0842:	4668      	mov	r0, sp
   c0844:	f7ff ffcc 	bl	c07e0 <_ZNK5spark18JSONObjectIterator5valueEv>
   c0848:	4668      	mov	r0, sp
   c084a:	f7ff fcc0 	bl	c01ce <_ZNK5spark9JSONValue5toIntEv>
   c084e:	6028      	str	r0, [r5, #0]
   c0850:	a801      	add	r0, sp, #4
   c0852:	f7f5 fb57 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0856:	e7dd      	b.n	c0814 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c0858:	a805      	add	r0, sp, #20
   c085a:	f7f5 fb53 	bl	b5f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c085e:	b00a      	add	sp, #40	; 0x28
   c0860:	bd70      	pop	{r4, r5, r6, pc}
   c0862:	bf00      	nop
   c0864:	000c7ffd 	.word	0x000c7ffd

000c0868 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c0868:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c086a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c086c:	4620      	mov	r0, r4
   c086e:	4913      	ldr	r1, [pc, #76]	; (c08bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c0870:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c0872:	f003 ff75 	bl	c4760 <strcmp>
   c0876:	b950      	cbnz	r0, c088e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c0878:	f001 fb1a 	bl	c1eb0 <_Z16_fetch_usbserialv>
   c087c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c0880:	f001 fb06 	bl	c1e90 <_ZN9USBSerial5beginEl>
}
   c0884:	b003      	add	sp, #12
   c0886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c088a:	f001 bb11 	b.w	c1eb0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c088e:	490c      	ldr	r1, [pc, #48]	; (c08c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c0890:	4620      	mov	r0, r4
   c0892:	f003 ff65 	bl	c4760 <strcmp>
   c0896:	b978      	cbnz	r0, c08b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c0898:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c089c:	a901      	add	r1, sp, #4
   c089e:	4628      	mov	r0, r5
        int baud = 9600;
   c08a0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c08a2:	f7ff ffaf 	bl	c0804 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c08a6:	f001 fcaf 	bl	c2208 <_Z22__fetch_global_Serial1v>
   c08aa:	9901      	ldr	r1, [sp, #4]
   c08ac:	f001 fa98 	bl	c1de0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c08b0:	f001 fcaa 	bl	c2208 <_Z22__fetch_global_Serial1v>
}
   c08b4:	b003      	add	sp, #12
   c08b6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c08b8:	2000      	movs	r0, #0
   c08ba:	e7fb      	b.n	c08b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c08bc:	000c8002 	.word	0x000c8002
   c08c0:	000c8009 	.word	0x000c8009

000c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c08c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c08c6:	e9d0 5300 	ldrd	r5, r3, [r0]
   c08ca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c08cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c08ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c08d2:	42ae      	cmp	r6, r5
   c08d4:	d005      	beq.n	c08e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c08d6:	f105 0008 	add.w	r0, r5, #8
   c08da:	f7ff fff3 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c08de:	3514      	adds	r5, #20
   c08e0:	e7f7      	b.n	c08d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c08e2:	6820      	ldr	r0, [r4, #0]
   c08e4:	f7fd fd2c 	bl	be340 <free>
}
   c08e8:	4620      	mov	r0, r4
   c08ea:	bd70      	pop	{r4, r5, r6, pc}

000c08ec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c08ec:	b510      	push	{r4, lr}
   c08ee:	4604      	mov	r4, r0
   c08f0:	300c      	adds	r0, #12
   c08f2:	f7ff ffe7 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c08f6:	4620      	mov	r0, r4
   c08f8:	f7fe f957 	bl	bebaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c08fc:	4620      	mov	r0, r4
   c08fe:	bd10      	pop	{r4, pc}

000c0900 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0900:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0902:	4b04      	ldr	r3, [pc, #16]	; (c0914 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0904:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c0906:	f840 3b04 	str.w	r3, [r0], #4
   c090a:	f7ff ffef 	bl	c08ec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c090e:	4620      	mov	r0, r4
   c0910:	bd10      	pop	{r4, pc}
   c0912:	bf00      	nop
   c0914:	000c6e90 	.word	0x000c6e90

000c0918 <_ZN5spark16StreamLogHandlerD0Ev>:
   c0918:	b510      	push	{r4, lr}
   c091a:	4604      	mov	r4, r0
   c091c:	f7ff fff0 	bl	c0900 <_ZN5spark16StreamLogHandlerD1Ev>
   c0920:	4620      	mov	r0, r4
   c0922:	2124      	movs	r1, #36	; 0x24
   c0924:	f7f3 fbbd 	bl	b40a2 <_ZdlPvj>
   c0928:	4620      	mov	r0, r4
   c092a:	bd10      	pop	{r4, pc}

000c092c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c092c:	b510      	push	{r4, lr}
   c092e:	4b03      	ldr	r3, [pc, #12]	; (c093c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0930:	6003      	str	r3, [r0, #0]
   c0932:	4604      	mov	r4, r0
   c0934:	f7ff ffe4 	bl	c0900 <_ZN5spark16StreamLogHandlerD1Ev>
   c0938:	4620      	mov	r0, r4
   c093a:	bd10      	pop	{r4, pc}
   c093c:	000c80a4 	.word	0x000c80a4

000c0940 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0940:	b510      	push	{r4, lr}
   c0942:	4604      	mov	r4, r0
   c0944:	f7ff fff2 	bl	c092c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c0948:	4620      	mov	r0, r4
   c094a:	2124      	movs	r1, #36	; 0x24
   c094c:	f7f3 fba9 	bl	b40a2 <_ZdlPvj>
   c0950:	4620      	mov	r0, r4
   c0952:	bd10      	pop	{r4, pc}

000c0954 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c0954:	2200      	movs	r2, #0
   c0956:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c095a:	b510      	push	{r4, lr}
        capacity_(0) {
   c095c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c095e:	680c      	ldr	r4, [r1, #0]
   c0960:	6004      	str	r4, [r0, #0]
   c0962:	684c      	ldr	r4, [r1, #4]
   c0964:	6044      	str	r4, [r0, #4]
   c0966:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0968:	600a      	str	r2, [r1, #0]
   c096a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c096c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c096e:	608a      	str	r2, [r1, #8]
}
   c0970:	bd10      	pop	{r4, pc}

000c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c0972:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c0974:	6803      	ldr	r3, [r0, #0]
   c0976:	4604      	mov	r4, r0
   c0978:	6818      	ldr	r0, [r3, #0]
   c097a:	f7fd f9bb 	bl	bdcf4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c097e:	4620      	mov	r0, r4
   c0980:	bd10      	pop	{r4, pc}
	...

000c0984 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c0984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0988:	b087      	sub	sp, #28
   c098a:	4680      	mov	r8, r0
   c098c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c098e:	4b1c      	ldr	r3, [pc, #112]	; (c0a00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c0990:	685b      	ldr	r3, [r3, #4]
   c0992:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0996:	4689      	mov	r9, r1
   c0998:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c099a:	b96b      	cbnz	r3, c09b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c099c:	f7ff fed0 	bl	c0740 <_ZN5spark10LogManager8instanceEv>
   c09a0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c09a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c09a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c09a8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c09aa:	f7ff fda3 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c09ae:	7b23      	ldrb	r3, [r4, #12]
   c09b0:	b12b      	cbz	r3, c09be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c09b2:	a805      	add	r0, sp, #20
   c09b4:	f7ff ffdd 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c09b8:	b007      	add	sp, #28
   c09ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c09be:	2301      	movs	r3, #1
   c09c0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c09c2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c09c6:	fa5f f989 	uxtb.w	r9, r9
   c09ca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c09ce:	45aa      	cmp	sl, r5
   c09d0:	d012      	beq.n	c09f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c09d2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c09d6:	4631      	mov	r1, r6
   c09d8:	1d38      	adds	r0, r7, #4
   c09da:	f7ff fe3d 	bl	c0658 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c09de:	4581      	cmp	r9, r0
   c09e0:	d3f5      	bcc.n	c09ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c09e2:	683b      	ldr	r3, [r7, #0]
   c09e4:	9a03      	ldr	r2, [sp, #12]
   c09e6:	9200      	str	r2, [sp, #0]
   c09e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c09ec:	464a      	mov	r2, r9
   c09ee:	4633      	mov	r3, r6
   c09f0:	4641      	mov	r1, r8
   c09f2:	4638      	mov	r0, r7
   c09f4:	47d8      	blx	fp
   c09f6:	e7ea      	b.n	c09ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c09f8:	2300      	movs	r3, #0
   c09fa:	7323      	strb	r3, [r4, #12]
   c09fc:	e7d9      	b.n	c09b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c09fe:	bf00      	nop
   c0a00:	e000ed00 	.word	0xe000ed00

000c0a04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0a08:	469b      	mov	fp, r3
   c0a0a:	4b1a      	ldr	r3, [pc, #104]	; (c0a74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0a0c:	685b      	ldr	r3, [r3, #4]
   c0a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0a12:	4680      	mov	r8, r0
   c0a14:	4689      	mov	r9, r1
   c0a16:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c0a18:	b96b      	cbnz	r3, c0a36 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c0a1a:	f7ff fe91 	bl	c0740 <_ZN5spark10LogManager8instanceEv>
   c0a1e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0a20:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c0a24:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0a26:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0a28:	f7ff fd64 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0a2c:	7b23      	ldrb	r3, [r4, #12]
   c0a2e:	b12b      	cbz	r3, c0a3c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0a30:	a801      	add	r0, sp, #4
   c0a32:	f7ff ff9e 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0a36:	b003      	add	sp, #12
   c0a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0a3c:	2301      	movs	r3, #1
   c0a3e:	7323      	strb	r3, [r4, #12]
   c0a40:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c0a44:	b2f6      	uxtb	r6, r6
   c0a46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0a4a:	4555      	cmp	r5, sl
   c0a4c:	d00e      	beq.n	c0a6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0a4e:	f855 7b04 	ldr.w	r7, [r5], #4
   c0a52:	4659      	mov	r1, fp
   c0a54:	1d38      	adds	r0, r7, #4
   c0a56:	f7ff fdff 	bl	c0658 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0a5a:	4286      	cmp	r6, r0
   c0a5c:	d3f5      	bcc.n	c0a4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c0a5e:	683b      	ldr	r3, [r7, #0]
   c0a60:	464a      	mov	r2, r9
   c0a62:	68db      	ldr	r3, [r3, #12]
   c0a64:	4641      	mov	r1, r8
   c0a66:	4638      	mov	r0, r7
   c0a68:	4798      	blx	r3
   c0a6a:	e7ee      	b.n	c0a4a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c0a6c:	2300      	movs	r3, #0
   c0a6e:	7323      	strb	r3, [r4, #12]
   c0a70:	e7de      	b.n	c0a30 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c0a72:	bf00      	nop
   c0a74:	e000ed00 	.word	0xe000ed00

000c0a78 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c0a78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0a7c:	4b16      	ldr	r3, [pc, #88]	; (c0ad8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c0a7e:	685b      	ldr	r3, [r3, #4]
   c0a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0a84:	4605      	mov	r5, r0
   c0a86:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c0a88:	bb1b      	cbnz	r3, c0ad2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c0a8a:	f7ff fe59 	bl	c0740 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c0a8e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c0a92:	4604      	mov	r4, r0
   c0a94:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0a96:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0a98:	f7ff fd2c 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
   c0a9c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c0aa0:	2446      	movs	r4, #70	; 0x46
   c0aa2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0aa6:	45b0      	cmp	r8, r6
   c0aa8:	d109      	bne.n	c0abe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c0aaa:	a801      	add	r0, sp, #4
   c0aac:	f7ff ff61 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0ab0:	42a5      	cmp	r5, r4
   c0ab2:	bfb4      	ite	lt
   c0ab4:	2000      	movlt	r0, #0
   c0ab6:	2001      	movge	r0, #1
}
   c0ab8:	b002      	add	sp, #8
   c0aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c0abe:	f856 0b04 	ldr.w	r0, [r6], #4
   c0ac2:	4639      	mov	r1, r7
   c0ac4:	3004      	adds	r0, #4
   c0ac6:	f7ff fdc7 	bl	c0658 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c0aca:	4284      	cmp	r4, r0
   c0acc:	bfa8      	it	ge
   c0ace:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0ad0:	e7e9      	b.n	c0aa6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0ad2:	2000      	movs	r0, #0
   c0ad4:	e7f0      	b.n	c0ab8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c0ad6:	bf00      	nop
   c0ad8:	e000ed00 	.word	0xe000ed00

000c0adc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0ade:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0ae2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0ae4:	4604      	mov	r4, r0
   c0ae6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0ae8:	db0d      	blt.n	c0b06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c0aea:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0aec:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0aee:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0af0:	dd04      	ble.n	c0afc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0af2:	00b9      	lsls	r1, r7, #2
   c0af4:	f7fd fc2c 	bl	be350 <realloc>
            if (!d) {
   c0af8:	b918      	cbnz	r0, c0b02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c0afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0afc:	f7fd fc20 	bl	be340 <free>
        T* d = nullptr;
   c0b00:	2000      	movs	r0, #0
        data_ = d;
   c0b02:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0b04:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c0b06:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0b08:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c0b0a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0b0e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0b10:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0b14:	1d08      	adds	r0, r1, #4
   c0b16:	f003 fdad 	bl	c4674 <memmove>
    new(p) T(std::move(value));
   c0b1a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0b1e:	6863      	ldr	r3, [r4, #4]
   c0b20:	3301      	adds	r3, #1
   c0b22:	6063      	str	r3, [r4, #4]
    return true;
   c0b24:	2001      	movs	r0, #1
   c0b26:	e7e8      	b.n	c0afa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c0b28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c0b2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0b2e:	4604      	mov	r4, r0
   c0b30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0b32:	9301      	str	r3, [sp, #4]
   c0b34:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c0b36:	f7ff fcdd 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c0b3a:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0b3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0b42:	4293      	cmp	r3, r2
   c0b44:	4619      	mov	r1, r3
   c0b46:	d00b      	beq.n	c0b60 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c0b48:	6809      	ldr	r1, [r1, #0]
   c0b4a:	42a9      	cmp	r1, r5
   c0b4c:	f103 0304 	add.w	r3, r3, #4
   c0b50:	d1f7      	bne.n	c0b42 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0b52:	a801      	add	r0, sp, #4
   c0b54:	f7ff ff0d 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0b58:	2500      	movs	r5, #0
}
   c0b5a:	4628      	mov	r0, r5
   c0b5c:	b003      	add	sp, #12
   c0b5e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0b60:	4629      	mov	r1, r5
   c0b62:	4620      	mov	r0, r4
   c0b64:	f7ff ffba 	bl	c0adc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c0b68:	4605      	mov	r5, r0
   c0b6a:	2800      	cmp	r0, #0
   c0b6c:	d0f1      	beq.n	c0b52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c0b6e:	6863      	ldr	r3, [r4, #4]
   c0b70:	2b01      	cmp	r3, #1
   c0b72:	d101      	bne.n	c0b78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c0b74:	f7ff fe00 	bl	c0778 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0b78:	a801      	add	r0, sp, #4
   c0b7a:	f7ff fefa 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0b7e:	e7ec      	b.n	c0b5a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0b80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0b80:	b570      	push	{r4, r5, r6, lr}
   c0b82:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0b84:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0b88:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c0b8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c0b8e:	4282      	cmp	r2, r0
   c0b90:	d00f      	beq.n	c0bb2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0b92:	4601      	mov	r1, r0
            if (*p == value) {
   c0b94:	681d      	ldr	r5, [r3, #0]
   c0b96:	f851 6b04 	ldr.w	r6, [r1], #4
   c0b9a:	42ae      	cmp	r6, r5
   c0b9c:	d107      	bne.n	c0bae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0b9e:	1a52      	subs	r2, r2, r1
   c0ba0:	f003 fd68 	bl	c4674 <memmove>
    --size_;
   c0ba4:	6863      	ldr	r3, [r4, #4]
   c0ba6:	3b01      	subs	r3, #1
   c0ba8:	6063      	str	r3, [r4, #4]
    return true;
   c0baa:	2001      	movs	r0, #1
}
   c0bac:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c0bae:	4608      	mov	r0, r1
   c0bb0:	e7ed      	b.n	c0b8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0bb2:	2000      	movs	r0, #0
   c0bb4:	e7fa      	b.n	c0bac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0bb6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0bb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0bb8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0bbc:	4604      	mov	r4, r0
   c0bbe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0bc0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0bc2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0bc4:	f7ff fc96 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0bc8:	a901      	add	r1, sp, #4
   c0bca:	4620      	mov	r0, r4
   c0bcc:	f7ff ffd8 	bl	c0b80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0bd0:	b118      	cbz	r0, c0bda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0bd2:	6863      	ldr	r3, [r4, #4]
   c0bd4:	b90b      	cbnz	r3, c0bda <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0bd6:	f7ff fddb 	bl	c0790 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0bda:	a803      	add	r0, sp, #12
   c0bdc:	f7ff fec9 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0be0:	b004      	add	sp, #16
   c0be2:	bd10      	pop	{r4, pc}

000c0be4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0be4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0be6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c0bea:	2318      	movs	r3, #24
   c0bec:	4604      	mov	r4, r0
   c0bee:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0bf2:	42ae      	cmp	r6, r5
   c0bf4:	d015      	beq.n	c0c22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0bf6:	f105 0110 	add.w	r1, r5, #16
   c0bfa:	4620      	mov	r0, r4
   c0bfc:	f7ff ffc0 	bl	c0b80 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0c00:	6863      	ldr	r3, [r4, #4]
   c0c02:	b90b      	cbnz	r3, c0c08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0c04:	f7ff fdc4 	bl	c0790 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0c08:	69e0      	ldr	r0, [r4, #28]
   c0c0a:	6929      	ldr	r1, [r5, #16]
   c0c0c:	6803      	ldr	r3, [r0, #0]
   c0c0e:	68db      	ldr	r3, [r3, #12]
   c0c10:	4798      	blx	r3
        if (h.stream) {
   c0c12:	6969      	ldr	r1, [r5, #20]
   c0c14:	b119      	cbz	r1, c0c1e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0c16:	6a20      	ldr	r0, [r4, #32]
   c0c18:	6803      	ldr	r3, [r0, #0]
   c0c1a:	68db      	ldr	r3, [r3, #12]
   c0c1c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0c1e:	3518      	adds	r5, #24
   c0c20:	e7e7      	b.n	c0bf2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0c22:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0c26:	2618      	movs	r6, #24
   c0c28:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0c2c:	42ae      	cmp	r6, r5
   c0c2e:	d004      	beq.n	c0c3a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0c30:	4628      	mov	r0, r5
   c0c32:	f000 fea9 	bl	c1988 <_ZN6StringD1Ev>
   c0c36:	3518      	adds	r5, #24
   c0c38:	e7f8      	b.n	c0c2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c0c3a:	2300      	movs	r3, #0
   c0c3c:	6163      	str	r3, [r4, #20]
}
   c0c3e:	bd70      	pop	{r4, r5, r6, pc}

000c0c40 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0c42:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0c44:	f7ff fda4 	bl	c0790 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0c48:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0c4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0c4e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0c50:	f7ff fc50 	bl	c04f4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0c54:	4620      	mov	r0, r4
   c0c56:	f7ff ffc5 	bl	c0be4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c0c5a:	a801      	add	r0, sp, #4
   c0c5c:	f7ff fe89 	bl	c0972 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0c60:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0c62:	b108      	cbz	r0, c0c68 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0c64:	f7fd f836 	bl	bdcd4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c0c68:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0c6c:	2618      	movs	r6, #24
   c0c6e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0c72:	42ae      	cmp	r6, r5
   c0c74:	d004      	beq.n	c0c80 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c0c76:	4628      	mov	r0, r5
   c0c78:	f000 fe86 	bl	c1988 <_ZN6StringD1Ev>
   c0c7c:	3518      	adds	r5, #24
   c0c7e:	e7f8      	b.n	c0c72 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0c80:	6920      	ldr	r0, [r4, #16]
   c0c82:	f7fd fb5d 	bl	be340 <free>
   c0c86:	6820      	ldr	r0, [r4, #0]
   c0c88:	f7fd fb5a 	bl	be340 <free>
}
   c0c8c:	4620      	mov	r0, r4
   c0c8e:	b002      	add	sp, #8
   c0c90:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0c94 <__tcf_2>:
    static LogManager mgr;
   c0c94:	4801      	ldr	r0, [pc, #4]	; (c0c9c <__tcf_2+0x8>)
   c0c96:	f7ff bfd3 	b.w	c0c40 <_ZN5spark10LogManagerD1Ev>
   c0c9a:	bf00      	nop
   c0c9c:	2003e678 	.word	0x2003e678

000c0ca0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0ca0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0ca4:	4604      	mov	r4, r0
   c0ca6:	460d      	mov	r5, r1
   c0ca8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0caa:	d915      	bls.n	c0cd8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c0cac:	4290      	cmp	r0, r2
   c0cae:	d214      	bcs.n	c0cda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0cb0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0cb4:	1a75      	subs	r5, r6, r1
   c0cb6:	f1a1 0714 	sub.w	r7, r1, #20
   c0cba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0cbc:	42b7      	cmp	r7, r6
   c0cbe:	d01a      	beq.n	c0cf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0cc0:	b11c      	cbz	r4, c0cca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0cc2:	4631      	mov	r1, r6
   c0cc4:	4620      	mov	r0, r4
   c0cc6:	f7ff fc78 	bl	c05ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c0cca:	f106 0008 	add.w	r0, r6, #8
   c0cce:	f7ff fdf9 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0cd2:	3e14      	subs	r6, #20
   c0cd4:	3c14      	subs	r4, #20
   c0cd6:	e7f1      	b.n	c0cbc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0cd8:	d00d      	beq.n	c0cf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c0cda:	42b5      	cmp	r5, r6
   c0cdc:	d00b      	beq.n	c0cf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0cde:	b11c      	cbz	r4, c0ce8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0ce0:	4629      	mov	r1, r5
   c0ce2:	4620      	mov	r0, r4
   c0ce4:	f7ff fc69 	bl	c05ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0ce8:	f105 0008 	add.w	r0, r5, #8
   c0cec:	f7ff fdea 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0cf0:	3514      	adds	r5, #20
   c0cf2:	3414      	adds	r4, #20
   c0cf4:	e7f1      	b.n	c0cda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0cf8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0cfc:	4604      	mov	r4, r0
   c0cfe:	460d      	mov	r5, r1
   c0d00:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0d02:	d914      	bls.n	c0d2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0d04:	4290      	cmp	r0, r2
   c0d06:	d213      	bcs.n	c0d30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0d08:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0d0c:	1a75      	subs	r5, r6, r1
   c0d0e:	f1a1 0710 	sub.w	r7, r1, #16
   c0d12:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0d14:	42b7      	cmp	r7, r6
   c0d16:	d018      	beq.n	c0d4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0d18:	b11c      	cbz	r4, c0d22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c0d1a:	4631      	mov	r1, r6
   c0d1c:	4620      	mov	r0, r4
   c0d1e:	f000 feaf 	bl	c1a80 <_ZN6StringC1EOS_>
                end->~T();
   c0d22:	4630      	mov	r0, r6
   c0d24:	f000 fe30 	bl	c1988 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0d28:	3e10      	subs	r6, #16
   c0d2a:	3c10      	subs	r4, #16
   c0d2c:	e7f2      	b.n	c0d14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0d2e:	d00c      	beq.n	c0d4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0d30:	42b5      	cmp	r5, r6
   c0d32:	d00a      	beq.n	c0d4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0d34:	b11c      	cbz	r4, c0d3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0d36:	4629      	mov	r1, r5
   c0d38:	4620      	mov	r0, r4
   c0d3a:	f000 fea1 	bl	c1a80 <_ZN6StringC1EOS_>
                p->~T();
   c0d3e:	4628      	mov	r0, r5
   c0d40:	f000 fe22 	bl	c1988 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0d44:	3510      	adds	r5, #16
   c0d46:	3410      	adds	r4, #16
   c0d48:	e7f2      	b.n	c0d30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c0d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0d4c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0d4e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0d50:	4605      	mov	r5, r0
        if (n > 0) {
   c0d52:	dd11      	ble.n	c0d78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0d54:	0130      	lsls	r0, r6, #4
   c0d56:	f7fd faeb 	bl	be330 <malloc>
            if (!d) {
   c0d5a:	4604      	mov	r4, r0
   c0d5c:	b158      	cbz	r0, c0d76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0d5e:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0d62:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c0d66:	f7ff ffc7 	bl	c0cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c0d6a:	6828      	ldr	r0, [r5, #0]
   c0d6c:	f7fd fae8 	bl	be340 <free>
        data_ = d;
   c0d70:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0d72:	60ae      	str	r6, [r5, #8]
        return true;
   c0d74:	2001      	movs	r0, #1
    }
   c0d76:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0d78:	2400      	movs	r4, #0
   c0d7a:	e7f6      	b.n	c0d6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c0d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0d80:	4690      	mov	r8, r2
   c0d82:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0d84:	2300      	movs	r3, #0
   c0d86:	9103      	str	r1, [sp, #12]
    return size_;
   c0d88:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0d8c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0d8e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0d90:	4299      	cmp	r1, r3
        capacity_(0) {
   c0d92:	e9c0 3300 	strd	r3, r3, [r0]
   c0d96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c0d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c0d9e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0da2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0da4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0da6:	dc23      	bgt.n	c0df0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0da8:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0dac:	2314      	movs	r3, #20
   c0dae:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0db2:	42af      	cmp	r7, r5
   c0db4:	d03b      	beq.n	c0e2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0db6:	4629      	mov	r1, r5
   c0db8:	a80b      	add	r0, sp, #44	; 0x2c
   c0dba:	f000 fe61 	bl	c1a80 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0dbe:	a90b      	add	r1, sp, #44	; 0x2c
   c0dc0:	a80f      	add	r0, sp, #60	; 0x3c
   c0dc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0dc4:	f000 fe5c 	bl	c1a80 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0dc8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0dcc:	4299      	cmp	r1, r3
   c0dce:	da1b      	bge.n	c0e08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0dd0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0dd4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0dd8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0ddc:	4631      	mov	r1, r6
   c0dde:	f106 0010 	add.w	r0, r6, #16
   c0de2:	f7ff ff89 	bl	c0cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0de6:	b9ee      	cbnz	r6, c0e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0dea:	3301      	adds	r3, #1
   c0dec:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0dee:	e011      	b.n	c0e14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0df0:	a808      	add	r0, sp, #32
   c0df2:	f7ff ffab 	bl	c0d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0df6:	2800      	cmp	r0, #0
   c0df8:	d1d6      	bne.n	c0da8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c0dfa:	a808      	add	r0, sp, #32
   c0dfc:	f7fd fed5 	bl	bebaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0e00:	4620      	mov	r0, r4
   c0e02:	b015      	add	sp, #84	; 0x54
   c0e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0e08:	3101      	adds	r1, #1
   c0e0a:	a808      	add	r0, sp, #32
   c0e0c:	f7ff ff9e 	bl	c0d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0e10:	2800      	cmp	r0, #0
   c0e12:	d1dd      	bne.n	c0dd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0e14:	a80f      	add	r0, sp, #60	; 0x3c
   c0e16:	f000 fdb7 	bl	c1988 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c0e1a:	a80b      	add	r0, sp, #44	; 0x2c
   c0e1c:	f000 fdb4 	bl	c1988 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0e20:	3514      	adds	r5, #20
   c0e22:	e7c6      	b.n	c0db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0e24:	a90f      	add	r1, sp, #60	; 0x3c
   c0e26:	4630      	mov	r0, r6
   c0e28:	f000 fe2a 	bl	c1a80 <_ZN6StringC1EOS_>
   c0e2c:	e7dc      	b.n	c0de8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0e2e:	2600      	movs	r6, #0
   c0e30:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0e34:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0e36:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0e3e:	429e      	cmp	r6, r3
   c0e40:	da7c      	bge.n	c0f3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0e42:	0133      	lsls	r3, r6, #4
   c0e44:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0e46:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0e48:	b90b      	cbnz	r3, c0e4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c0e4a:	3601      	adds	r6, #1
   c0e4c:	e7f5      	b.n	c0e3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0e4e:	2300      	movs	r3, #0
   c0e50:	9307      	str	r3, [sp, #28]
   c0e52:	fb09 f306 	mul.w	r3, r9, r6
   c0e56:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0e58:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c0e5a:	a907      	add	r1, sp, #28
   c0e5c:	a806      	add	r0, sp, #24
   c0e5e:	f7ff fb22 	bl	c04a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0e62:	4682      	mov	sl, r0
   c0e64:	2800      	cmp	r0, #0
   c0e66:	d0f0      	beq.n	c0e4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0e68:	f04f 0300 	mov.w	r3, #0
   c0e6c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0e70:	4601      	mov	r1, r0
   c0e72:	9a07      	ldr	r2, [sp, #28]
   c0e74:	f10d 0317 	add.w	r3, sp, #23
   c0e78:	4628      	mov	r0, r5
   c0e7a:	f7ff fbb1 	bl	c05e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0e7e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0e82:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0e84:	2f00      	cmp	r7, #0
   c0e86:	d14a      	bne.n	c0f1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0e88:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0e8c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0e90:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0e98:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0e9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0ea0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0ea2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0ea6:	4293      	cmp	r3, r2
   c0ea8:	db17      	blt.n	c0eda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0eaa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0eae:	f1ba 0f00 	cmp.w	sl, #0
   c0eb2:	dd30      	ble.n	c0f16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0eb4:	fb09 f00a 	mul.w	r0, r9, sl
   c0eb8:	f7fd fa3a 	bl	be330 <malloc>
            if (!d) {
   c0ebc:	4683      	mov	fp, r0
   c0ebe:	b360      	cbz	r0, c0f1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0ec0:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0ec4:	fb09 1202 	mla	r2, r9, r2, r1
   c0ec8:	f7ff feea 	bl	c0ca0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0ecc:	6828      	ldr	r0, [r5, #0]
   c0ece:	f7fd fa37 	bl	be340 <free>
        data_ = d;
   c0ed2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0ed6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0eda:	682b      	ldr	r3, [r5, #0]
   c0edc:	9a01      	ldr	r2, [sp, #4]
   c0ede:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0ee2:	686a      	ldr	r2, [r5, #4]
   c0ee4:	4651      	mov	r1, sl
   c0ee6:	fb09 3202 	mla	r2, r9, r2, r3
   c0eea:	f10a 0014 	add.w	r0, sl, #20
   c0eee:	f7ff fed7 	bl	c0ca0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0ef2:	f1ba 0f00 	cmp.w	sl, #0
   c0ef6:	d003      	beq.n	c0f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0ef8:	a90f      	add	r1, sp, #60	; 0x3c
   c0efa:	4650      	mov	r0, sl
   c0efc:	f7ff fb5d 	bl	c05ba <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0f00:	686b      	ldr	r3, [r5, #4]
   c0f02:	3301      	adds	r3, #1
   c0f04:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0f06:	a811      	add	r0, sp, #68	; 0x44
   c0f08:	f7ff fcdc 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0f0c:	b13f      	cbz	r7, c0f1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0f0e:	a80b      	add	r0, sp, #44	; 0x2c
   c0f10:	f7ff fcd8 	bl	c08c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0f14:	e771      	b.n	c0dfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0f16:	46bb      	mov	fp, r7
   c0f18:	e7d8      	b.n	c0ecc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0f1a:	2701      	movs	r7, #1
   c0f1c:	e7f3      	b.n	c0f06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0f1e:	9b01      	ldr	r3, [sp, #4]
   c0f20:	682d      	ldr	r5, [r5, #0]
   c0f22:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0f26:	9b06      	ldr	r3, [sp, #24]
   c0f28:	781b      	ldrb	r3, [r3, #0]
   c0f2a:	b92b      	cbnz	r3, c0f38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0f2c:	f8d8 3000 	ldr.w	r3, [r8]
   c0f30:	9a02      	ldr	r2, [sp, #8]
   c0f32:	4413      	add	r3, r2
   c0f34:	7c1b      	ldrb	r3, [r3, #16]
   c0f36:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0f38:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0f3a:	e78e      	b.n	c0e5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f3c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0f3e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f40:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0f42:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f44:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0f46:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c0f4a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f4c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0f4e:	60a2      	str	r2, [r4, #8]
   c0f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0f52:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f54:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0f56:	60e2      	str	r2, [r4, #12]
   c0f58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c0f5a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0f5c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0f5e:	6122      	str	r2, [r4, #16]
   c0f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0f62:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0f64:	9b03      	ldr	r3, [sp, #12]
   c0f66:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0f68:	6162      	str	r2, [r4, #20]
   c0f6a:	7623      	strb	r3, [r4, #24]
   c0f6c:	e7cf      	b.n	c0f0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0f70 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0f72:	4604      	mov	r4, r0
   c0f74:	b087      	sub	sp, #28
   c0f76:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0f78:	4626      	mov	r6, r4
        stream_(&stream) {
   c0f7a:	4619      	mov	r1, r3
   c0f7c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0f7e:	4617      	mov	r7, r2
        stream_(&stream) {
   c0f80:	f7f5 fc1a 	bl	b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0f84:	4b0b      	ldr	r3, [pc, #44]	; (c0fb4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0f86:	f846 3b04 	str.w	r3, [r6], #4
   c0f8a:	4669      	mov	r1, sp
   c0f8c:	a803      	add	r0, sp, #12
   c0f8e:	f7f5 fc13 	bl	b67b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0f92:	aa03      	add	r2, sp, #12
   c0f94:	4639      	mov	r1, r7
   c0f96:	4630      	mov	r0, r6
   c0f98:	f7ff fef0 	bl	c0d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0f9c:	a803      	add	r0, sp, #12
   c0f9e:	f7f5 f90f 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0fa2:	4668      	mov	r0, sp
   c0fa4:	f7f5 f90c 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0fa8:	4b03      	ldr	r3, [pc, #12]	; (c0fb8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0faa:	6023      	str	r3, [r4, #0]
}
   c0fac:	4620      	mov	r0, r4
        stream_(&stream) {
   c0fae:	6225      	str	r5, [r4, #32]
}
   c0fb0:	b007      	add	sp, #28
   c0fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0fb4:	000c6e90 	.word	0x000c6e90
   c0fb8:	000c808c 	.word	0x000c808c

000c0fbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0fbe:	460f      	mov	r7, r1
   c0fc0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0fc2:	491d      	ldr	r1, [pc, #116]	; (c1038 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0fc6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0fc8:	4616      	mov	r6, r2
   c0fca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0fcc:	f003 fbc8 	bl	c4760 <strcmp>
   c0fd0:	b9c0      	cbnz	r0, c1004 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0fd2:	b1a4      	cbz	r4, c0ffe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0fd4:	4629      	mov	r1, r5
   c0fd6:	a801      	add	r0, sp, #4
   c0fd8:	f7ff fcbc 	bl	c0954 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0fdc:	4917      	ldr	r1, [pc, #92]	; (c103c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0fde:	2024      	movs	r0, #36	; 0x24
   c0fe0:	f001 f936 	bl	c2250 <_ZnwjRKSt9nothrow_t>
   c0fe4:	4605      	mov	r5, r0
   c0fe6:	b130      	cbz	r0, c0ff6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0fe8:	ab01      	add	r3, sp, #4
   c0fea:	4632      	mov	r2, r6
   c0fec:	4621      	mov	r1, r4
   c0fee:	f7ff ffbf 	bl	c0f70 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0ff2:	4b13      	ldr	r3, [pc, #76]	; (c1040 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0ff4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0ff6:	a801      	add	r0, sp, #4
   c0ff8:	f7f5 f8e2 	bl	b61c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0ffc:	462c      	mov	r4, r5
}
   c0ffe:	4620      	mov	r0, r4
   c1000:	b005      	add	sp, #20
   c1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c1004:	490f      	ldr	r1, [pc, #60]	; (c1044 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c1006:	4638      	mov	r0, r7
   c1008:	f003 fbaa 	bl	c4760 <strcmp>
   c100c:	b990      	cbnz	r0, c1034 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c100e:	2c00      	cmp	r4, #0
   c1010:	d0f5      	beq.n	c0ffe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c1012:	4629      	mov	r1, r5
   c1014:	a801      	add	r0, sp, #4
   c1016:	f7ff fc9d 	bl	c0954 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c101a:	4908      	ldr	r1, [pc, #32]	; (c103c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c101c:	2024      	movs	r0, #36	; 0x24
   c101e:	f001 f917 	bl	c2250 <_ZnwjRKSt9nothrow_t>
   c1022:	4605      	mov	r5, r0
   c1024:	2800      	cmp	r0, #0
   c1026:	d0e6      	beq.n	c0ff6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c1028:	ab01      	add	r3, sp, #4
   c102a:	4632      	mov	r2, r6
   c102c:	4621      	mov	r1, r4
   c102e:	f7ff ff9f 	bl	c0f70 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c1032:	e7e0      	b.n	c0ff6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c1034:	2400      	movs	r4, #0
   c1036:	e7e2      	b.n	c0ffe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c1038:	000c8011 	.word	0x000c8011
   c103c:	000c81a4 	.word	0x000c81a4
   c1040:	000c80a4 	.word	0x000c80a4
   c1044:	000c8015 	.word	0x000c8015

000c1048 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c1048:	4b01      	ldr	r3, [pc, #4]	; (c1050 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c104a:	4a02      	ldr	r2, [pc, #8]	; (c1054 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c104c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c104e:	4770      	bx	lr
   c1050:	2003e674 	.word	0x2003e674
   c1054:	000c8026 	.word	0x000c8026

000c1058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c105c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c105e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1062:	4604      	mov	r4, r0
   c1064:	460e      	mov	r6, r1
   c1066:	4617      	mov	r7, r2
   c1068:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c106a:	f000 ff21 	bl	c1eb0 <_Z16_fetch_usbserialv>
   c106e:	4581      	cmp	r9, r0
   c1070:	d04c      	beq.n	c110c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c1072:	792b      	ldrb	r3, [r5, #4]
   c1074:	0719      	lsls	r1, r3, #28
   c1076:	d504      	bpl.n	c1082 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c1078:	696a      	ldr	r2, [r5, #20]
   c107a:	4954      	ldr	r1, [pc, #336]	; (c11cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c107c:	4620      	mov	r0, r4
   c107e:	f7ff fa8d 	bl	c059c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c1082:	f1b8 0f00 	cmp.w	r8, #0
   c1086:	d00d      	beq.n	c10a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c1088:	215b      	movs	r1, #91	; 0x5b
   c108a:	4620      	mov	r0, r4
   c108c:	f7ff fa7a 	bl	c0584 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c1090:	4641      	mov	r1, r8
   c1092:	4620      	mov	r0, r4
   c1094:	f7ff fa67 	bl	c0566 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c1098:	6823      	ldr	r3, [r4, #0]
   c109a:	494d      	ldr	r1, [pc, #308]	; (c11d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c109c:	68db      	ldr	r3, [r3, #12]
   c109e:	2202      	movs	r2, #2
   c10a0:	4620      	mov	r0, r4
   c10a2:	4798      	blx	r3
    if (attr.has_file) {
   c10a4:	792b      	ldrb	r3, [r5, #4]
   c10a6:	07da      	lsls	r2, r3, #31
   c10a8:	d523      	bpl.n	c10f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c10aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c10ae:	212f      	movs	r1, #47	; 0x2f
   c10b0:	4640      	mov	r0, r8
   c10b2:	f003 fbd2 	bl	c485a <strrchr>
    if (s1) {
   c10b6:	b108      	cbz	r0, c10bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c10b8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c10bc:	4641      	mov	r1, r8
   c10be:	4620      	mov	r0, r4
   c10c0:	f7ff fa51 	bl	c0566 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c10c4:	792b      	ldrb	r3, [r5, #4]
   c10c6:	079b      	lsls	r3, r3, #30
   c10c8:	d508      	bpl.n	c10dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c10ca:	213a      	movs	r1, #58	; 0x3a
   c10cc:	4620      	mov	r0, r4
   c10ce:	f7ff fa59 	bl	c0584 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c10d2:	68ea      	ldr	r2, [r5, #12]
   c10d4:	493f      	ldr	r1, [pc, #252]	; (c11d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c10d6:	4620      	mov	r0, r4
   c10d8:	f7ff fa60 	bl	c059c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c10dc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c10de:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c10e0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c10e4:	68db      	ldr	r3, [r3, #12]
   c10e6:	bf14      	ite	ne
   c10e8:	493b      	ldrne	r1, [pc, #236]	; (c11d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c10ea:	493c      	ldreq	r1, [pc, #240]	; (c11dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c10ec:	2202      	movs	r2, #2
            write(": ", 2);
   c10ee:	4620      	mov	r0, r4
   c10f0:	4798      	blx	r3
    if (attr.has_function) {
   c10f2:	792b      	ldrb	r3, [r5, #4]
   c10f4:	0758      	lsls	r0, r3, #29
   c10f6:	d51d      	bpl.n	c1134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c10f8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c10fa:	460b      	mov	r3, r1
   c10fc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c10fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1102:	b160      	cbz	r0, c111e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c1104:	2820      	cmp	r0, #32
   c1106:	d108      	bne.n	c111a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c1108:	4619      	mov	r1, r3
   c110a:	e7f7      	b.n	c10fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c110c:	4834      	ldr	r0, [pc, #208]	; (c11e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c110e:	f000 f966 	bl	c13de <_ZN5spark12NetworkClass9listeningEv>
   c1112:	2800      	cmp	r0, #0
   c1114:	d0ad      	beq.n	c1072 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c1116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c111a:	2828      	cmp	r0, #40	; 0x28
   c111c:	d1ee      	bne.n	c10fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c111e:	6823      	ldr	r3, [r4, #0]
   c1120:	1a52      	subs	r2, r2, r1
   c1122:	68db      	ldr	r3, [r3, #12]
   c1124:	4620      	mov	r0, r4
   c1126:	4798      	blx	r3
        write("(): ", 4);
   c1128:	6823      	ldr	r3, [r4, #0]
   c112a:	492e      	ldr	r1, [pc, #184]	; (c11e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c112c:	68db      	ldr	r3, [r3, #12]
   c112e:	2204      	movs	r2, #4
   c1130:	4620      	mov	r0, r4
   c1132:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c1134:	2100      	movs	r1, #0
   c1136:	4638      	mov	r0, r7
   c1138:	f7fc fffc 	bl	be134 <log_level_name>
   c113c:	4601      	mov	r1, r0
    write(s);
   c113e:	4620      	mov	r0, r4
   c1140:	f7ff fa11 	bl	c0566 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c1144:	6823      	ldr	r3, [r4, #0]
   c1146:	4925      	ldr	r1, [pc, #148]	; (c11dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c1148:	68db      	ldr	r3, [r3, #12]
   c114a:	2202      	movs	r2, #2
   c114c:	4620      	mov	r0, r4
   c114e:	4798      	blx	r3
    if (msg) {
   c1150:	b11e      	cbz	r6, c115a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c1152:	4631      	mov	r1, r6
   c1154:	4620      	mov	r0, r4
   c1156:	f7ff fa06 	bl	c0566 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c115a:	792b      	ldrb	r3, [r5, #4]
   c115c:	f013 0f30 	tst.w	r3, #48	; 0x30
   c1160:	d02c      	beq.n	c11bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c1162:	6823      	ldr	r3, [r4, #0]
   c1164:	4920      	ldr	r1, [pc, #128]	; (c11e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c1166:	68db      	ldr	r3, [r3, #12]
   c1168:	2202      	movs	r2, #2
   c116a:	4620      	mov	r0, r4
   c116c:	4798      	blx	r3
        if (attr.has_code) {
   c116e:	792b      	ldrb	r3, [r5, #4]
   c1170:	06d9      	lsls	r1, r3, #27
   c1172:	d50a      	bpl.n	c118a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c1174:	6823      	ldr	r3, [r4, #0]
   c1176:	491d      	ldr	r1, [pc, #116]	; (c11ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c1178:	68db      	ldr	r3, [r3, #12]
   c117a:	2207      	movs	r2, #7
   c117c:	4620      	mov	r0, r4
   c117e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c1180:	69aa      	ldr	r2, [r5, #24]
   c1182:	491b      	ldr	r1, [pc, #108]	; (c11f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c1184:	4620      	mov	r0, r4
   c1186:	f7ff fa09 	bl	c059c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c118a:	792b      	ldrb	r3, [r5, #4]
   c118c:	069a      	lsls	r2, r3, #26
   c118e:	d511      	bpl.n	c11b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c1190:	06db      	lsls	r3, r3, #27
   c1192:	d505      	bpl.n	c11a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c1194:	6823      	ldr	r3, [r4, #0]
   c1196:	4910      	ldr	r1, [pc, #64]	; (c11d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c1198:	68db      	ldr	r3, [r3, #12]
   c119a:	2202      	movs	r2, #2
   c119c:	4620      	mov	r0, r4
   c119e:	4798      	blx	r3
            write("details = ", 10);
   c11a0:	6823      	ldr	r3, [r4, #0]
   c11a2:	4914      	ldr	r1, [pc, #80]	; (c11f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c11a4:	68db      	ldr	r3, [r3, #12]
   c11a6:	4620      	mov	r0, r4
   c11a8:	220a      	movs	r2, #10
   c11aa:	4798      	blx	r3
            write(attr.details);
   c11ac:	69e9      	ldr	r1, [r5, #28]
   c11ae:	4620      	mov	r0, r4
   c11b0:	f7ff f9d9 	bl	c0566 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c11b4:	215d      	movs	r1, #93	; 0x5d
   c11b6:	4620      	mov	r0, r4
   c11b8:	f7ff f9e4 	bl	c0584 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c11bc:	6823      	ldr	r3, [r4, #0]
   c11be:	490e      	ldr	r1, [pc, #56]	; (c11f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c11c0:	68db      	ldr	r3, [r3, #12]
   c11c2:	4620      	mov	r0, r4
   c11c4:	2202      	movs	r2, #2
}
   c11c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c11ca:	4718      	bx	r3
   c11cc:	000c802a 	.word	0x000c802a
   c11d0:	000c8031 	.word	0x000c8031
   c11d4:	000c69d4 	.word	0x000c69d4
   c11d8:	000c8034 	.word	0x000c8034
   c11dc:	000c8039 	.word	0x000c8039
   c11e0:	2003e6a0 	.word	0x2003e6a0
   c11e4:	000c8037 	.word	0x000c8037
   c11e8:	000c803c 	.word	0x000c803c
   c11ec:	000c803f 	.word	0x000c803f
   c11f0:	000c8047 	.word	0x000c8047
   c11f4:	000c804a 	.word	0x000c804a
   c11f8:	000c8055 	.word	0x000c8055

000c11fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c11fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1200:	b085      	sub	sp, #20
    return stream_;
   c1202:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c1206:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1208:	4605      	mov	r5, r0
   c120a:	460f      	mov	r7, r1
   c120c:	4690      	mov	r8, r2
   c120e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c1210:	f000 fe4e 	bl	c1eb0 <_Z16_fetch_usbserialv>
   c1214:	4581      	cmp	r9, r0
   c1216:	d105      	bne.n	c1224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c1218:	4849      	ldr	r0, [pc, #292]	; (c1340 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c121a:	f000 f8e0 	bl	c13de <_ZN5spark12NetworkClass9listeningEv>
   c121e:	2800      	cmp	r0, #0
   c1220:	f040 808a 	bne.w	c1338 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c1224:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c1226:	4a47      	ldr	r2, [pc, #284]	; (c1344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c1228:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c122a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c122e:	a801      	add	r0, sp, #4
        strm_(stream) {
   c1230:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c1232:	f88d 9008 	strb.w	r9, [sp, #8]
   c1236:	f7ff f850 	bl	c02da <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c123a:	4649      	mov	r1, r9
   c123c:	4640      	mov	r0, r8
   c123e:	f7fc ff79 	bl	be134 <log_level_name>
    json.name("l", 1).value(s);
   c1242:	4941      	ldr	r1, [pc, #260]	; (c1348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c1244:	4680      	mov	r8, r0
   c1246:	2201      	movs	r2, #1
   c1248:	a801      	add	r0, sp, #4
   c124a:	f7ff f8d5 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c124e:	4641      	mov	r1, r8
   c1250:	f7ff f97b 	bl	c054a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c1254:	b13f      	cbz	r7, c1266 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c1256:	493d      	ldr	r1, [pc, #244]	; (c134c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c1258:	2201      	movs	r2, #1
   c125a:	a801      	add	r0, sp, #4
   c125c:	f7ff f8cc 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1260:	4639      	mov	r1, r7
   c1262:	f7ff f972 	bl	c054a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c1266:	b13e      	cbz	r6, c1278 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c1268:	4939      	ldr	r1, [pc, #228]	; (c1350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c126a:	2201      	movs	r2, #1
   c126c:	a801      	add	r0, sp, #4
   c126e:	f7ff f8c3 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1272:	4631      	mov	r1, r6
   c1274:	f7ff f969 	bl	c054a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c1278:	7923      	ldrb	r3, [r4, #4]
   c127a:	07df      	lsls	r7, r3, #31
   c127c:	d50e      	bpl.n	c129c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c127e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c1280:	212f      	movs	r1, #47	; 0x2f
   c1282:	4630      	mov	r0, r6
   c1284:	f003 fae9 	bl	c485a <strrchr>
    if (s1) {
   c1288:	b100      	cbz	r0, c128c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c128a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c128c:	4931      	ldr	r1, [pc, #196]	; (c1354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c128e:	2201      	movs	r2, #1
   c1290:	a801      	add	r0, sp, #4
   c1292:	f7ff f8b1 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1296:	4631      	mov	r1, r6
   c1298:	f7ff f957 	bl	c054a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c129c:	7923      	ldrb	r3, [r4, #4]
   c129e:	079e      	lsls	r6, r3, #30
   c12a0:	d507      	bpl.n	c12b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c12a2:	492d      	ldr	r1, [pc, #180]	; (c1358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c12a4:	2202      	movs	r2, #2
   c12a6:	a801      	add	r0, sp, #4
   c12a8:	f7ff f8a6 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c12ac:	68e1      	ldr	r1, [r4, #12]
   c12ae:	f7ff f821 	bl	c02f4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c12b2:	7923      	ldrb	r3, [r4, #4]
   c12b4:	0758      	lsls	r0, r3, #29
   c12b6:	d514      	bpl.n	c12e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c12b8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c12ba:	4633      	mov	r3, r6
   c12bc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c12be:	f813 2b01 	ldrb.w	r2, [r3], #1
   c12c2:	b12a      	cbz	r2, c12d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c12c4:	2a20      	cmp	r2, #32
   c12c6:	d101      	bne.n	c12cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c12c8:	461e      	mov	r6, r3
   c12ca:	e7f7      	b.n	c12bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c12cc:	2a28      	cmp	r2, #40	; 0x28
   c12ce:	d1f5      	bne.n	c12bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c12d0:	4922      	ldr	r1, [pc, #136]	; (c135c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c12d2:	2202      	movs	r2, #2
   c12d4:	a801      	add	r0, sp, #4
   c12d6:	f7ff f88f 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c12da:	1bba      	subs	r2, r7, r6
   c12dc:	4631      	mov	r1, r6
   c12de:	f7ff f89b 	bl	c0418 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c12e2:	7923      	ldrb	r3, [r4, #4]
   c12e4:	0719      	lsls	r1, r3, #28
   c12e6:	d507      	bpl.n	c12f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c12e8:	491d      	ldr	r1, [pc, #116]	; (c1360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c12ea:	2201      	movs	r2, #1
   c12ec:	a801      	add	r0, sp, #4
   c12ee:	f7ff f883 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c12f2:	6961      	ldr	r1, [r4, #20]
   c12f4:	f7ff f810 	bl	c0318 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c12f8:	7923      	ldrb	r3, [r4, #4]
   c12fa:	06da      	lsls	r2, r3, #27
   c12fc:	d508      	bpl.n	c1310 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c12fe:	2204      	movs	r2, #4
   c1300:	4918      	ldr	r1, [pc, #96]	; (c1364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c1302:	eb0d 0002 	add.w	r0, sp, r2
   c1306:	f7ff f877 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c130a:	69a1      	ldr	r1, [r4, #24]
   c130c:	f7fe fff2 	bl	c02f4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c1310:	7923      	ldrb	r3, [r4, #4]
   c1312:	069b      	lsls	r3, r3, #26
   c1314:	d507      	bpl.n	c1326 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c1316:	4914      	ldr	r1, [pc, #80]	; (c1368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c1318:	2206      	movs	r2, #6
   c131a:	a801      	add	r0, sp, #4
   c131c:	f7ff f86c 	bl	c03f8 <_ZN5spark10JSONWriter4nameEPKcj>
   c1320:	69e1      	ldr	r1, [r4, #28]
   c1322:	f7ff f912 	bl	c054a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c1326:	a801      	add	r0, sp, #4
   c1328:	f7fe ffc1 	bl	c02ae <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c132c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c132e:	490f      	ldr	r1, [pc, #60]	; (c136c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c1330:	6803      	ldr	r3, [r0, #0]
   c1332:	2202      	movs	r2, #2
   c1334:	68db      	ldr	r3, [r3, #12]
   c1336:	4798      	blx	r3
}
   c1338:	b005      	add	sp, #20
   c133a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c133e:	bf00      	nop
   c1340:	2003e6a0 	.word	0x2003e6a0
   c1344:	000c8074 	.word	0x000c8074
   c1348:	000c8007 	.word	0x000c8007
   c134c:	000c8058 	.word	0x000c8058
   c1350:	000c89c6 	.word	0x000c89c6
   c1354:	000c6a55 	.word	0x000c6a55
   c1358:	000c805a 	.word	0x000c805a
   c135c:	000c805d 	.word	0x000c805d
   c1360:	000c6d06 	.word	0x000c6d06
   c1364:	000c8060 	.word	0x000c8060
   c1368:	000c8065 	.word	0x000c8065
   c136c:	000c8055 	.word	0x000c8055

000c1370 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c1370:	2300      	movs	r3, #0
   c1372:	6840      	ldr	r0, [r0, #4]
   c1374:	461a      	mov	r2, r3
   c1376:	f7fc bf7b 	b.w	be270 <network_connect>

000c137a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c137a:	6840      	ldr	r0, [r0, #4]
   c137c:	2200      	movs	r2, #0
   c137e:	2102      	movs	r1, #2
   c1380:	f7fc bf86 	b.w	be290 <network_disconnect>

000c1384 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c1384:	2200      	movs	r2, #0
   c1386:	6840      	ldr	r0, [r0, #4]
   c1388:	4611      	mov	r1, r2
   c138a:	f7fc bf79 	b.w	be280 <network_connecting>

000c138e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c138e:	2200      	movs	r2, #0
   c1390:	6840      	ldr	r0, [r0, #4]
   c1392:	4611      	mov	r1, r2
   c1394:	f7fc bf84 	b.w	be2a0 <network_ready>

000c1398 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c1398:	2300      	movs	r3, #0
   c139a:	6840      	ldr	r0, [r0, #4]
   c139c:	461a      	mov	r2, r3
   c139e:	4619      	mov	r1, r3
   c13a0:	f7fc bf86 	b.w	be2b0 <network_on>

000c13a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c13a4:	2300      	movs	r3, #0
   c13a6:	6840      	ldr	r0, [r0, #4]
   c13a8:	461a      	mov	r2, r3
   c13aa:	4619      	mov	r1, r3
   c13ac:	f7fc bf88 	b.w	be2c0 <network_off>

000c13b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c13b0:	6840      	ldr	r0, [r0, #4]
   c13b2:	2100      	movs	r1, #0
   c13b4:	f7fc bfac 	b.w	be310 <network_is_on>

000c13b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c13b8:	6840      	ldr	r0, [r0, #4]
   c13ba:	2100      	movs	r1, #0
   c13bc:	f7fc bfb0 	b.w	be320 <network_is_off>

000c13c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c13c0:	6840      	ldr	r0, [r0, #4]
   c13c2:	2200      	movs	r2, #0
   c13c4:	f081 0101 	eor.w	r1, r1, #1
   c13c8:	f7fc bf82 	b.w	be2d0 <network_listen>

000c13cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c13cc:	6840      	ldr	r0, [r0, #4]
   c13ce:	2200      	movs	r2, #0
   c13d0:	f7fc bf8e 	b.w	be2f0 <network_set_listen_timeout>

000c13d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c13d4:	2200      	movs	r2, #0
   c13d6:	6840      	ldr	r0, [r0, #4]
   c13d8:	4611      	mov	r1, r2
   c13da:	f7fc bf91 	b.w	be300 <network_get_listen_timeout>

000c13de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c13de:	2200      	movs	r2, #0
   c13e0:	6840      	ldr	r0, [r0, #4]
   c13e2:	4611      	mov	r1, r2
   c13e4:	f7fc bf7c 	b.w	be2e0 <network_listening>

000c13e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c13e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c13ec:	b095      	sub	sp, #84	; 0x54
   c13ee:	4614      	mov	r4, r2
   c13f0:	460d      	mov	r5, r1
   c13f2:	4607      	mov	r7, r0
    IPAddress addr;
   c13f4:	f7fe fe0a 	bl	c000c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c13f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c13fa:	221c      	movs	r2, #28
   c13fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c13fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1400:	f003 f952 	bl	c46a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c1404:	2340      	movs	r3, #64	; 0x40
   c1406:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1408:	4620      	mov	r0, r4
   c140a:	466b      	mov	r3, sp
   c140c:	aa0c      	add	r2, sp, #48	; 0x30
   c140e:	2100      	movs	r1, #0
   c1410:	f7fc fd70 	bl	bdef4 <netdb_getaddrinfo>
    if (!r) {
   c1414:	4604      	mov	r4, r0
   c1416:	2800      	cmp	r0, #0
   c1418:	d14b      	bne.n	c14b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c141a:	4602      	mov	r2, r0
   c141c:	2101      	movs	r1, #1
   c141e:	6868      	ldr	r0, [r5, #4]
   c1420:	f7fc ff3e 	bl	be2a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1424:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1426:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1428:	4622      	mov	r2, r4
   c142a:	6868      	ldr	r0, [r5, #4]
   c142c:	f7fc ff38 	bl	be2a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1430:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1432:	4681      	mov	r9, r0
        bool ok = false;
   c1434:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1436:	2e00      	cmp	r6, #0
   c1438:	d03b      	beq.n	c14b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c143a:	2900      	cmp	r1, #0
   c143c:	d139      	bne.n	c14b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c143e:	6873      	ldr	r3, [r6, #4]
   c1440:	2b02      	cmp	r3, #2
   c1442:	d003      	beq.n	c144c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c1444:	2b0a      	cmp	r3, #10
   c1446:	d011      	beq.n	c146c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1448:	69f6      	ldr	r6, [r6, #28]
   c144a:	e7f4      	b.n	c1436 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c144c:	f1b8 0f00 	cmp.w	r8, #0
   c1450:	d0fa      	beq.n	c1448 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c1452:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c1454:	a806      	add	r0, sp, #24
   c1456:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c1458:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c145a:	f7fe fe05 	bl	c0068 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1460:	1d3c      	adds	r4, r7, #4
   c1462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1464:	682b      	ldr	r3, [r5, #0]
   c1466:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1468:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c146a:	e7ed      	b.n	c1448 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c146c:	f1b9 0f00 	cmp.w	r9, #0
   c1470:	d0ea      	beq.n	c1448 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c1472:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c1474:	2210      	movs	r2, #16
   c1476:	a801      	add	r0, sp, #4
   c1478:	f003 f916 	bl	c46a8 <memset>
                    a.v = 6;
   c147c:	2306      	movs	r3, #6
   c147e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1482:	ad01      	add	r5, sp, #4
   c1484:	f104 0308 	add.w	r3, r4, #8
   c1488:	3418      	adds	r4, #24
   c148a:	6818      	ldr	r0, [r3, #0]
   c148c:	6859      	ldr	r1, [r3, #4]
   c148e:	462a      	mov	r2, r5
   c1490:	c203      	stmia	r2!, {r0, r1}
   c1492:	3308      	adds	r3, #8
   c1494:	42a3      	cmp	r3, r4
   c1496:	4615      	mov	r5, r2
   c1498:	d1f7      	bne.n	c148a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c149a:	a901      	add	r1, sp, #4
   c149c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c149e:	ad07      	add	r5, sp, #28
   c14a0:	f7fe fdc2 	bl	c0028 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c14a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c14a6:	1d3c      	adds	r4, r7, #4
   c14a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c14aa:	682b      	ldr	r3, [r5, #0]
   c14ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c14ae:	4649      	mov	r1, r9
   c14b0:	e7ca      	b.n	c1448 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c14b2:	9800      	ldr	r0, [sp, #0]
   c14b4:	f7fc fd16 	bl	bdee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c14b8:	4638      	mov	r0, r7
   c14ba:	b015      	add	sp, #84	; 0x54
   c14bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c14c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c14c0:	4b02      	ldr	r3, [pc, #8]	; (c14cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c14c2:	4a03      	ldr	r2, [pc, #12]	; (c14d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c14c4:	601a      	str	r2, [r3, #0]
   c14c6:	2200      	movs	r2, #0
   c14c8:	605a      	str	r2, [r3, #4]

} // spark
   c14ca:	4770      	bx	lr
   c14cc:	2003e6a0 	.word	0x2003e6a0
   c14d0:	000c80ec 	.word	0x000c80ec

000c14d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c14d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c14d6:	4606      	mov	r6, r0
   c14d8:	460d      	mov	r5, r1
  size_t n = 0;
   c14da:	188f      	adds	r7, r1, r2
   c14dc:	2400      	movs	r4, #0
  while (size--) {
   c14de:	42bd      	cmp	r5, r7
   c14e0:	d00c      	beq.n	c14fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c14e2:	6833      	ldr	r3, [r6, #0]
   c14e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   c14e8:	689b      	ldr	r3, [r3, #8]
   c14ea:	4630      	mov	r0, r6
   c14ec:	4798      	blx	r3
     if (chunk>=0)
   c14ee:	1e03      	subs	r3, r0, #0
   c14f0:	db01      	blt.n	c14f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c14f2:	441c      	add	r4, r3
  while (size--) {
   c14f4:	e7f3      	b.n	c14de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c14f6:	2c00      	cmp	r4, #0
   c14f8:	bf08      	it	eq
   c14fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c14fc:	4620      	mov	r0, r4
   c14fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1500 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c1500:	b508      	push	{r3, lr}
  return write(str);
   c1502:	f7f6 fa5b 	bl	b79bc <_ZN5Print5writeEPKc>
}
   c1506:	bd08      	pop	{r3, pc}

000c1508 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c1508:	6803      	ldr	r3, [r0, #0]
   c150a:	689b      	ldr	r3, [r3, #8]
   c150c:	4718      	bx	r3

000c150e <_ZN5Print5printEPK19__FlashStringHelper>:
   c150e:	b508      	push	{r3, lr}
   c1510:	f7f6 fa54 	bl	b79bc <_ZN5Print5writeEPKc>
   c1514:	bd08      	pop	{r3, pc}

000c1516 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c1516:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c1518:	210d      	movs	r1, #13
{
   c151a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c151c:	f7ff fff4 	bl	c1508 <_ZN5Print5printEc>
  n += print('\n');
   c1520:	210a      	movs	r1, #10
  size_t n = print('\r');
   c1522:	4604      	mov	r4, r0
  n += print('\n');
   c1524:	4628      	mov	r0, r5
   c1526:	f7ff ffef 	bl	c1508 <_ZN5Print5printEc>
  return n;
}
   c152a:	4420      	add	r0, r4
   c152c:	bd38      	pop	{r3, r4, r5, pc}

000c152e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c152e:	b538      	push	{r3, r4, r5, lr}
   c1530:	4605      	mov	r5, r0
  return write(str);
   c1532:	f7f6 fa43 	bl	b79bc <_ZN5Print5writeEPKc>
   c1536:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c1538:	4628      	mov	r0, r5
   c153a:	f7ff ffec 	bl	c1516 <_ZN5Print7printlnEv>
  return n;
}
   c153e:	4420      	add	r0, r4
   c1540:	bd38      	pop	{r3, r4, r5, pc}

000c1542 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c1542:	f7ff bff4 	b.w	c152e <_ZN5Print7printlnEPKc>

000c1546 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c1546:	b530      	push	{r4, r5, lr}
   c1548:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c154a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c154c:	2a01      	cmp	r2, #1
  *str = '\0';
   c154e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c1552:	bf98      	it	ls
   c1554:	220a      	movls	r2, #10
   c1556:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c1558:	460d      	mov	r5, r1
   c155a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c155e:	fb01 5312 	mls	r3, r1, r2, r5
   c1562:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c1566:	2b09      	cmp	r3, #9
   c1568:	bf94      	ite	ls
   c156a:	3330      	addls	r3, #48	; 0x30
   c156c:	3337      	addhi	r3, #55	; 0x37
   c156e:	b2db      	uxtb	r3, r3
  } while(n);
   c1570:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c1572:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c1576:	d9ef      	bls.n	c1558 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c1578:	4621      	mov	r1, r4
   c157a:	f7f6 fa1f 	bl	b79bc <_ZN5Print5writeEPKc>
}
   c157e:	b00b      	add	sp, #44	; 0x2c
   c1580:	bd30      	pop	{r4, r5, pc}

000c1582 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c1582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1586:	b086      	sub	sp, #24
   c1588:	af00      	add	r7, sp, #0
   c158a:	4605      	mov	r5, r0
   c158c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c158e:	1d38      	adds	r0, r7, #4
   c1590:	2114      	movs	r1, #20
{
   c1592:	4614      	mov	r4, r2
    va_copy(args2, args);
   c1594:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c1596:	f7fc fefb 	bl	be390 <vsnprintf>

    if (n<bufsize)
   c159a:	2813      	cmp	r0, #19
   c159c:	d80e      	bhi.n	c15bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c159e:	1d39      	adds	r1, r7, #4
   c15a0:	4628      	mov	r0, r5
   c15a2:	f7f6 fa0b 	bl	b79bc <_ZN5Print5writeEPKc>
   c15a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c15a8:	b11e      	cbz	r6, c15b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c15aa:	4628      	mov	r0, r5
   c15ac:	f7ff ffb3 	bl	c1516 <_ZN5Print7printlnEv>
   c15b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c15b2:	4620      	mov	r0, r4
   c15b4:	3718      	adds	r7, #24
   c15b6:	46bd      	mov	sp, r7
   c15b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c15bc:	f100 0308 	add.w	r3, r0, #8
   c15c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c15c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   c15c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c15ca:	4622      	mov	r2, r4
   c15cc:	1c41      	adds	r1, r0, #1
   c15ce:	683b      	ldr	r3, [r7, #0]
   c15d0:	4668      	mov	r0, sp
   c15d2:	f7fc fedd 	bl	be390 <vsnprintf>
  return write(str);
   c15d6:	4669      	mov	r1, sp
   c15d8:	4628      	mov	r0, r5
   c15da:	f7f6 f9ef 	bl	b79bc <_ZN5Print5writeEPKc>
   c15de:	4604      	mov	r4, r0
   c15e0:	46c5      	mov	sp, r8
   c15e2:	e7e1      	b.n	c15a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c15e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c15e4:	4b01      	ldr	r3, [pc, #4]	; (c15ec <_GLOBAL__sub_I_RGB+0x8>)
   c15e6:	2200      	movs	r2, #0
   c15e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c15ea:	4770      	bx	lr
   c15ec:	2003e6a8 	.word	0x2003e6a8

000c15f0 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c15f0:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c15f4:	1c53      	adds	r3, r2, #1
   c15f6:	d00b      	beq.n	c1610 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c15f8:	8843      	ldrh	r3, [r0, #2]
   c15fa:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c15fc:	428b      	cmp	r3, r1
   c15fe:	d803      	bhi.n	c1608 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c1600:	4288      	cmp	r0, r1
   c1602:	4603      	mov	r3, r0
   c1604:	bf28      	it	cs
   c1606:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c1608:	4619      	mov	r1, r3
   c160a:	b290      	uxth	r0, r2
   c160c:	f7fc bc8a 	b.w	bdf24 <HAL_Servo_Write_Pulse_Width>
}
   c1610:	4770      	bx	lr

000c1612 <_ZN5Servo5writeEi>:
{
   c1612:	b513      	push	{r0, r1, r4, lr}
   c1614:	4604      	mov	r4, r0
   c1616:	4608      	mov	r0, r1
   c1618:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c161c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c1620:	4288      	cmp	r0, r1
   c1622:	db10      	blt.n	c1646 <_ZN5Servo5writeEi+0x34>
   c1624:	4290      	cmp	r0, r2
   c1626:	bfa8      	it	ge
   c1628:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c162a:	88a3      	ldrh	r3, [r4, #4]
   c162c:	9300      	str	r3, [sp, #0]
   c162e:	8863      	ldrh	r3, [r4, #2]
   c1630:	f7fc fee6 	bl	be400 <_Z3mapiiiii>
   c1634:	68e1      	ldr	r1, [r4, #12]
   c1636:	4401      	add	r1, r0
   c1638:	b289      	uxth	r1, r1
   c163a:	4620      	mov	r0, r4
}
   c163c:	b002      	add	sp, #8
   c163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c1642:	f7ff bfd5 	b.w	c15f0 <_ZN5Servo17writeMicrosecondsEt>
   c1646:	4608      	mov	r0, r1
   c1648:	e7ef      	b.n	c162a <_ZN5Servo5writeEi+0x18>
	...

000c164c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c164c:	4a04      	ldr	r2, [pc, #16]	; (c1660 <_ZN5Servo11resetFieldsEv+0x14>)
   c164e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c1652:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c1656:	23b4      	movs	r3, #180	; 0xb4
   c1658:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c165a:	2300      	movs	r3, #0
   c165c:	60c3      	str	r3, [r0, #12]
}
   c165e:	4770      	bx	lr
   c1660:	0220ffff 	.word	0x0220ffff

000c1664 <_ZN5ServoC1Ev>:
Servo::Servo()
   c1664:	b508      	push	{r3, lr}
  this->resetFields();
   c1666:	f7ff fff1 	bl	c164c <_ZN5Servo11resetFieldsEv>
}
   c166a:	bd08      	pop	{r3, pc}

000c166c <_ZN5Servo6detachEv>:
{
   c166c:	b510      	push	{r4, lr}
   c166e:	4604      	mov	r4, r0
   c1670:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c1674:	1c43      	adds	r3, r0, #1
   c1676:	d007      	beq.n	c1688 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c1678:	b280      	uxth	r0, r0
   c167a:	f7fc fc4b 	bl	bdf14 <HAL_Servo_Detach>
  this->resetFields();
   c167e:	4620      	mov	r0, r4
   c1680:	f7ff ffe4 	bl	c164c <_ZN5Servo11resetFieldsEv>
  return true;
   c1684:	2001      	movs	r0, #1
}
   c1686:	bd10      	pop	{r4, pc}
    return false;
   c1688:	2000      	movs	r0, #0
   c168a:	e7fc      	b.n	c1686 <_ZN5Servo6detachEv+0x1a>

000c168c <_ZN5Servo6attachEtttss>:
{
   c168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1690:	460d      	mov	r5, r1
   c1692:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c1694:	2102      	movs	r1, #2
   c1696:	4628      	mov	r0, r5
{
   c1698:	4690      	mov	r8, r2
   c169a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c169c:	f7fc fb6a 	bl	bdd74 <HAL_Validate_Pin_Function>
   c16a0:	2802      	cmp	r0, #2
   c16a2:	d003      	beq.n	c16ac <_ZN5Servo6attachEtttss+0x20>
    return false;
   c16a4:	2600      	movs	r6, #0
}
   c16a6:	4630      	mov	r0, r6
   c16a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c16ac:	4628      	mov	r0, r5
   c16ae:	f000 fcc1 	bl	c2034 <pinAvailable>
   c16b2:	4606      	mov	r6, r0
   c16b4:	2800      	cmp	r0, #0
   c16b6:	d0f5      	beq.n	c16a4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c16b8:	f9b4 3000 	ldrsh.w	r3, [r4]
   c16bc:	3301      	adds	r3, #1
   c16be:	d002      	beq.n	c16c6 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c16c0:	4620      	mov	r0, r4
   c16c2:	f7ff ffd3 	bl	c166c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c16c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c16ca:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c16cc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c16d0:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c16d2:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c16d6:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c16d8:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c16da:	4628      	mov	r0, r5
   c16dc:	f7fc fc12 	bl	bdf04 <HAL_Servo_Attach>
  return true;
   c16e0:	e7e1      	b.n	c16a6 <_ZN5Servo6attachEtttss+0x1a>

000c16e2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c16e2:	2100      	movs	r1, #0
   c16e4:	f7fc bc7e 	b.w	bdfe4 <hal_spi_release>

000c16e8 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c16e8:	2100      	movs	r1, #0
   c16ea:	f7fc bc73 	b.w	bdfd4 <hal_spi_acquire>

000c16ee <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c16ee:	b510      	push	{r4, lr}
   c16f0:	4604      	mov	r4, r0
   c16f2:	4608      	mov	r0, r1
{
    _spi = spi;
   c16f4:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c16f6:	f7fc fc35 	bl	bdf64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c16fa:	2300      	movs	r3, #0
   c16fc:	6063      	str	r3, [r4, #4]
}
   c16fe:	4620      	mov	r0, r4
   c1700:	bd10      	pop	{r4, pc}

000c1702 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c1702:	b513      	push	{r0, r1, r4, lr}
   c1704:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c1706:	7800      	ldrb	r0, [r0, #0]
   c1708:	f7ff ffee 	bl	c16e8 <_ZN8SPIClass4lockEv.isra.0>
   c170c:	b958      	cbnz	r0, c1726 <_ZN8SPIClass5beginEv+0x24>
   c170e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c1710:	9001      	str	r0, [sp, #4]
   c1712:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c1716:	f7fc fc0d 	bl	bdf34 <hal_spi_begin>
        unlock();
   c171a:	9801      	ldr	r0, [sp, #4]
    }
}
   c171c:	b002      	add	sp, #8
   c171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1722:	f7ff bfde 	b.w	c16e2 <_ZN8SPIClass6unlockEv.isra.0>
   c1726:	b002      	add	sp, #8
   c1728:	bd10      	pop	{r4, pc}

000c172a <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c172a:	b513      	push	{r0, r1, r4, lr}
   c172c:	4604      	mov	r4, r0
    if (!lock())
   c172e:	7800      	ldrb	r0, [r0, #0]
{
   c1730:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c1734:	f7ff ffd8 	bl	c16e8 <_ZN8SPIClass4lockEv.isra.0>
   c1738:	e9dd 2100 	ldrd	r2, r1, [sp]
   c173c:	4603      	mov	r3, r0
   c173e:	b948      	cbnz	r0, c1754 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c1740:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c1742:	9000      	str	r0, [sp, #0]
   c1744:	f7fc fc2e 	bl	bdfa4 <hal_spi_begin_ext>
        unlock();
   c1748:	9800      	ldr	r0, [sp, #0]
    }
}
   c174a:	b002      	add	sp, #8
   c174c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1750:	f7ff bfc7 	b.w	c16e2 <_ZN8SPIClass6unlockEv.isra.0>
   c1754:	b002      	add	sp, #8
   c1756:	bd10      	pop	{r4, pc}

000c1758 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c1758:	7800      	ldrb	r0, [r0, #0]
   c175a:	f7ff bfc2 	b.w	c16e2 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c1760 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c1760:	0840      	lsrs	r0, r0, #1
{
   c1762:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c1764:	6018      	str	r0, [r3, #0]
   c1766:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c1768:	6818      	ldr	r0, [r3, #0]
   c176a:	4288      	cmp	r0, r1
   c176c:	b2e5      	uxtb	r5, r4
   c176e:	d906      	bls.n	c177e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c1770:	3401      	adds	r4, #1
   c1772:	2c08      	cmp	r4, #8
   c1774:	d002      	beq.n	c177c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c1776:	0840      	lsrs	r0, r0, #1
   c1778:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c177a:	e7f5      	b.n	c1768 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c177c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c177e:	4b02      	ldr	r3, [pc, #8]	; (c1788 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c1780:	5d5b      	ldrb	r3, [r3, r5]
   c1782:	7013      	strb	r3, [r2, #0]
}
   c1784:	bd30      	pop	{r4, r5, pc}
   c1786:	bf00      	nop
   c1788:	000c8120 	.word	0x000c8120

000c178c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1790:	4606      	mov	r6, r0
   c1792:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c1794:	7800      	ldrb	r0, [r0, #0]
{
   c1796:	460c      	mov	r4, r1
    CHECK(lock());
   c1798:	f7ff ffa6 	bl	c16e8 <_ZN8SPIClass4lockEv.isra.0>
   c179c:	2800      	cmp	r0, #0
   c179e:	db1b      	blt.n	c17d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c17a0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c17a2:	2214      	movs	r2, #20
   c17a4:	2100      	movs	r1, #0
   c17a6:	a809      	add	r0, sp, #36	; 0x24
   c17a8:	f002 ff7e 	bl	c46a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c17ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c17ae:	2200      	movs	r2, #0
   c17b0:	a909      	add	r1, sp, #36	; 0x24
   c17b2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c17b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c17b8:	f7fc fbe4 	bl	bdf84 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c17bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c17c0:	b113      	cbz	r3, c17c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c17c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c17c6:	b155      	cbz	r5, c17de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c17c8:	2700      	movs	r7, #0
   c17ca:	46b9      	mov	r9, r7
   c17cc:	46b8      	mov	r8, r7
   c17ce:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c17d0:	7923      	ldrb	r3, [r4, #4]
   c17d2:	b15d      	cbz	r5, c17ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c17d4:	b1c3      	cbz	r3, c1808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c17d6:	2000      	movs	r0, #0
}
   c17d8:	b00f      	add	sp, #60	; 0x3c
   c17da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c17de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c17e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c17e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c17ea:	e7f1      	b.n	c17d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c17ec:	2b00      	cmp	r3, #0
   c17ee:	d135      	bne.n	c185c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c17f0:	68a3      	ldr	r3, [r4, #8]
   c17f2:	4543      	cmp	r3, r8
   c17f4:	d108      	bne.n	c1808 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c17f6:	f88d 9020 	strb.w	r9, [sp, #32]
   c17fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c17fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1802:	89a3      	ldrh	r3, [r4, #12]
   c1804:	429a      	cmp	r2, r3
   c1806:	d0e6      	beq.n	c17d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c1808:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c180a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c180c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1810:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1812:	ab04      	add	r3, sp, #16
   c1814:	f10d 020f 	add.w	r2, sp, #15
   c1818:	f7ff ffa2 	bl	c1760 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c181c:	7921      	ldrb	r1, [r4, #4]
   c181e:	b985      	cbnz	r5, c1842 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1820:	b989      	cbnz	r1, c1846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1822:	68a3      	ldr	r3, [r4, #8]
   c1824:	4543      	cmp	r3, r8
   c1826:	d30e      	bcc.n	c1846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c1828:	f88d 9020 	strb.w	r9, [sp, #32]
   c182c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1830:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1834:	89a3      	ldrh	r3, [r4, #12]
   c1836:	429a      	cmp	r2, r3
   c1838:	d105      	bne.n	c1846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c183a:	9b04      	ldr	r3, [sp, #16]
   c183c:	4543      	cmp	r3, r8
   c183e:	d102      	bne.n	c1846 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1840:	e7c9      	b.n	c17d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c1842:	2900      	cmp	r1, #0
   c1844:	d1f9      	bne.n	c183a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c1846:	2300      	movs	r3, #0
   c1848:	9301      	str	r3, [sp, #4]
   c184a:	7b63      	ldrb	r3, [r4, #13]
   c184c:	9300      	str	r3, [sp, #0]
   c184e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c1852:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c1854:	7830      	ldrb	r0, [r6, #0]
   c1856:	f7fc fbb5 	bl	bdfc4 <hal_spi_set_settings>
   c185a:	e7bc      	b.n	c17d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c185c:	e9cd 5500 	strd	r5, r5, [sp]
   c1860:	462b      	mov	r3, r5
   c1862:	462a      	mov	r2, r5
   c1864:	2101      	movs	r1, #1
   c1866:	e7f5      	b.n	c1854 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c1868 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c1868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c186c:	b088      	sub	sp, #32
    unsigned clock = 0;
   c186e:	2300      	movs	r3, #0
{
   c1870:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c1872:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c1874:	9302      	str	r3, [sp, #8]
{
   c1876:	460e      	mov	r6, r1
   c1878:	4617      	mov	r7, r2
    if (!lock())
   c187a:	f7ff ff35 	bl	c16e8 <_ZN8SPIClass4lockEv.isra.0>
   c187e:	4605      	mov	r5, r0
   c1880:	bb00      	cbnz	r0, c18c4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c1882:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c1886:	4601      	mov	r1, r0
   c1888:	2214      	movs	r2, #20
   c188a:	a803      	add	r0, sp, #12
   c188c:	f002 ff0c 	bl	c46a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c1890:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c1892:	462a      	mov	r2, r5
   c1894:	a903      	add	r1, sp, #12
   c1896:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c1898:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c189c:	f7fc fb72 	bl	bdf84 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c18a0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c18a2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c18a6:	ab02      	add	r3, sp, #8
   c18a8:	f10d 0207 	add.w	r2, sp, #7
   c18ac:	fb07 f106 	mul.w	r1, r7, r6
   c18b0:	f7ff ff56 	bl	c1760 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c18b4:	7820      	ldrb	r0, [r4, #0]
   c18b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c18ba:	f7fc fb43 	bl	bdf44 <hal_spi_set_clock_divider>
        unlock();
   c18be:	7820      	ldrb	r0, [r4, #0]
   c18c0:	f7ff ff0f 	bl	c16e2 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c18c4:	9802      	ldr	r0, [sp, #8]
   c18c6:	b008      	add	sp, #32
   c18c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c18cc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c18cc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c18ce:	7800      	ldrb	r0, [r0, #0]
   c18d0:	f7fc fb40 	bl	bdf54 <hal_spi_transfer>
}
   c18d4:	b2c0      	uxtb	r0, r0
   c18d6:	bd08      	pop	{r3, pc}

000c18d8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c18d8:	b530      	push	{r4, r5, lr}
   c18da:	b087      	sub	sp, #28
   c18dc:	4604      	mov	r4, r0
   c18de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c18e0:	9500      	str	r5, [sp, #0]
   c18e2:	7800      	ldrb	r0, [r0, #0]
   c18e4:	f7fc fb56 	bl	bdf94 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c18e8:	b93d      	cbnz	r5, c18fa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c18ea:	7820      	ldrb	r0, [r4, #0]
   c18ec:	a902      	add	r1, sp, #8
   c18ee:	f7fc fb61 	bl	bdfb4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c18f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c18f6:	07db      	lsls	r3, r3, #31
   c18f8:	d4f7      	bmi.n	c18ea <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c18fa:	b007      	add	sp, #28
   c18fc:	bd30      	pop	{r4, r5, pc}

000c18fe <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c18fe:	b510      	push	{r4, lr}
   c1900:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c1902:	f7fc fa1f 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c1906:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c1908:	6823      	ldr	r3, [r4, #0]
   c190a:	4620      	mov	r0, r4
   c190c:	695b      	ldr	r3, [r3, #20]
   c190e:	4798      	blx	r3
    if (c >= 0) return c;
   c1910:	2800      	cmp	r0, #0
   c1912:	da08      	bge.n	c1926 <_ZN6Stream9timedReadEv+0x28>
   c1914:	f7fc fa16 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c1918:	68e3      	ldr	r3, [r4, #12]
   c191a:	1ac0      	subs	r0, r0, r3
   c191c:	68a3      	ldr	r3, [r4, #8]
   c191e:	4298      	cmp	r0, r3
   c1920:	d3f2      	bcc.n	c1908 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c1922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c1926:	bd10      	pop	{r4, pc}

000c1928 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c1928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c192c:	4607      	mov	r7, r0
   c192e:	4688      	mov	r8, r1
   c1930:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c1932:	461d      	mov	r5, r3
   c1934:	b173      	cbz	r3, c1954 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c1936:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c1938:	4638      	mov	r0, r7
   c193a:	f7ff ffe0 	bl	c18fe <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c193e:	1e03      	subs	r3, r0, #0
   c1940:	db05      	blt.n	c194e <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c1942:	4543      	cmp	r3, r8
   c1944:	d003      	beq.n	c194e <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c1946:	5533      	strb	r3, [r6, r4]
    index++;
   c1948:	3401      	adds	r4, #1
  while (index < length) {
   c194a:	42a5      	cmp	r5, r4
   c194c:	d1f4      	bne.n	c1938 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c194e:	4620      	mov	r0, r4
   c1950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c1954:	461c      	mov	r4, r3
   c1956:	e7fa      	b.n	c194e <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c1958 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c1958:	b570      	push	{r4, r5, r6, lr}
   c195a:	460d      	mov	r5, r1
  String ret;
   c195c:	4909      	ldr	r1, [pc, #36]	; (c1984 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c195e:	4604      	mov	r4, r0
   c1960:	4616      	mov	r6, r2
  String ret;
   c1962:	f000 f85c 	bl	c1a1e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c1966:	4628      	mov	r0, r5
   c1968:	f7ff ffc9 	bl	c18fe <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c196c:	2800      	cmp	r0, #0
   c196e:	db06      	blt.n	c197e <_ZN6Stream15readStringUntilEc+0x26>
   c1970:	4286      	cmp	r6, r0
   c1972:	d004      	beq.n	c197e <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c1974:	b2c1      	uxtb	r1, r0
   c1976:	4620      	mov	r0, r4
   c1978:	f000 f8d0 	bl	c1b1c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c197c:	e7f3      	b.n	c1966 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c197e:	4620      	mov	r0, r4
   c1980:	bd70      	pop	{r4, r5, r6, pc}
   c1982:	bf00      	nop
   c1984:	000c8057 	.word	0x000c8057

000c1988 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c1988:	b510      	push	{r4, lr}
   c198a:	4604      	mov	r4, r0
{
	free(buffer);
   c198c:	6800      	ldr	r0, [r0, #0]
   c198e:	f7fc fcd7 	bl	be340 <free>
}
   c1992:	4620      	mov	r0, r4
   c1994:	bd10      	pop	{r4, pc}

000c1996 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c1996:	b510      	push	{r4, lr}
   c1998:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c199a:	6800      	ldr	r0, [r0, #0]
   c199c:	b108      	cbz	r0, c19a2 <_ZN6String10invalidateEv+0xc>
   c199e:	f7fc fccf 	bl	be340 <free>
	buffer = NULL;
   c19a2:	2300      	movs	r3, #0
	capacity = len = 0;
   c19a4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c19a8:	6023      	str	r3, [r4, #0]
}
   c19aa:	bd10      	pop	{r4, pc}

000c19ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c19ac:	b538      	push	{r3, r4, r5, lr}
   c19ae:	4604      	mov	r4, r0
   c19b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c19b2:	6800      	ldr	r0, [r0, #0]
   c19b4:	3101      	adds	r1, #1
   c19b6:	f7fc fccb 	bl	be350 <realloc>
	if (newbuffer) {
   c19ba:	b110      	cbz	r0, c19c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c19bc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c19c0:	2001      	movs	r0, #1
	}
	return 0;
}
   c19c2:	bd38      	pop	{r3, r4, r5, pc}

000c19c4 <_ZN6String7reserveEj>:
{
   c19c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c19c6:	6803      	ldr	r3, [r0, #0]
{
   c19c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c19ca:	b123      	cbz	r3, c19d6 <_ZN6String7reserveEj+0x12>
   c19cc:	6843      	ldr	r3, [r0, #4]
   c19ce:	428b      	cmp	r3, r1
   c19d0:	d301      	bcc.n	c19d6 <_ZN6String7reserveEj+0x12>
   c19d2:	2001      	movs	r0, #1
}
   c19d4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c19d6:	4620      	mov	r0, r4
   c19d8:	f7ff ffe8 	bl	c19ac <_ZN6String12changeBufferEj>
   c19dc:	2800      	cmp	r0, #0
   c19de:	d0f9      	beq.n	c19d4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c19e0:	68a3      	ldr	r3, [r4, #8]
   c19e2:	2b00      	cmp	r3, #0
   c19e4:	d1f5      	bne.n	c19d2 <_ZN6String7reserveEj+0xe>
   c19e6:	6822      	ldr	r2, [r4, #0]
   c19e8:	7013      	strb	r3, [r2, #0]
   c19ea:	e7f2      	b.n	c19d2 <_ZN6String7reserveEj+0xe>

000c19ec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c19ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c19ee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c19f0:	4611      	mov	r1, r2
   c19f2:	9201      	str	r2, [sp, #4]
{
   c19f4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c19f6:	f7ff ffe5 	bl	c19c4 <_ZN6String7reserveEj>
   c19fa:	9a01      	ldr	r2, [sp, #4]
   c19fc:	b928      	cbnz	r0, c1a0a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c19fe:	4620      	mov	r0, r4
   c1a00:	f7ff ffc9 	bl	c1996 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c1a04:	4620      	mov	r0, r4
   c1a06:	b003      	add	sp, #12
   c1a08:	bd30      	pop	{r4, r5, pc}
	len = length;
   c1a0a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c1a0c:	4629      	mov	r1, r5
   c1a0e:	6820      	ldr	r0, [r4, #0]
   c1a10:	f002 fe22 	bl	c4658 <memcpy>
	buffer[len] = 0;
   c1a14:	6822      	ldr	r2, [r4, #0]
   c1a16:	68a3      	ldr	r3, [r4, #8]
   c1a18:	2100      	movs	r1, #0
   c1a1a:	54d1      	strb	r1, [r2, r3]
	return *this;
   c1a1c:	e7f2      	b.n	c1a04 <_ZN6String4copyEPKcj+0x18>

000c1a1e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c1a1e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c1a20:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c1a22:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c1a26:	4604      	mov	r4, r0
	len = 0;
   c1a28:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1a2a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c1a2c:	b141      	cbz	r1, c1a40 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c1a2e:	4608      	mov	r0, r1
   c1a30:	9101      	str	r1, [sp, #4]
   c1a32:	f002 fec4 	bl	c47be <strlen>
   c1a36:	9901      	ldr	r1, [sp, #4]
   c1a38:	4602      	mov	r2, r0
   c1a3a:	4620      	mov	r0, r4
   c1a3c:	f7ff ffd6 	bl	c19ec <_ZN6String4copyEPKcj>
}
   c1a40:	4620      	mov	r0, r4
   c1a42:	b002      	add	sp, #8
   c1a44:	bd10      	pop	{r4, pc}

000c1a46 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c1a46:	b538      	push	{r3, r4, r5, lr}
   c1a48:	4605      	mov	r5, r0
	if (buffer) {
   c1a4a:	6800      	ldr	r0, [r0, #0]
{
   c1a4c:	460c      	mov	r4, r1
	if (buffer) {
   c1a4e:	b168      	cbz	r0, c1a6c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c1a50:	686a      	ldr	r2, [r5, #4]
   c1a52:	688b      	ldr	r3, [r1, #8]
   c1a54:	429a      	cmp	r2, r3
   c1a56:	d307      	bcc.n	c1a68 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c1a58:	6809      	ldr	r1, [r1, #0]
   c1a5a:	f002 fe8b 	bl	c4774 <strcpy>
			len = rhs.len;
   c1a5e:	68a3      	ldr	r3, [r4, #8]
   c1a60:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c1a62:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c1a64:	60a3      	str	r3, [r4, #8]
}
   c1a66:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c1a68:	f7fc fc6a 	bl	be340 <free>
	buffer = rhs.buffer;
   c1a6c:	6823      	ldr	r3, [r4, #0]
   c1a6e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c1a70:	6863      	ldr	r3, [r4, #4]
   c1a72:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c1a74:	68a3      	ldr	r3, [r4, #8]
   c1a76:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c1a78:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c1a7a:	e9c4 3300 	strd	r3, r3, [r4]
   c1a7e:	e7f1      	b.n	c1a64 <_ZN6String4moveERS_+0x1e>

000c1a80 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c1a80:	b510      	push	{r4, lr}
	buffer = NULL;
   c1a82:	2300      	movs	r3, #0
	capacity = 0;
   c1a84:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c1a88:	4604      	mov	r4, r0
	len = 0;
   c1a8a:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1a8c:	7303      	strb	r3, [r0, #12]
	move(rval);
   c1a8e:	f7ff ffda 	bl	c1a46 <_ZN6String4moveERS_>
}
   c1a92:	4620      	mov	r0, r4
   c1a94:	bd10      	pop	{r4, pc}

000c1a96 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c1a96:	4288      	cmp	r0, r1
{
   c1a98:	b510      	push	{r4, lr}
   c1a9a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c1a9c:	d005      	beq.n	c1aaa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c1a9e:	680b      	ldr	r3, [r1, #0]
   c1aa0:	b12b      	cbz	r3, c1aae <_ZN6StringaSERKS_+0x18>
   c1aa2:	688a      	ldr	r2, [r1, #8]
   c1aa4:	4619      	mov	r1, r3
   c1aa6:	f7ff ffa1 	bl	c19ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1aaa:	4620      	mov	r0, r4
   c1aac:	bd10      	pop	{r4, pc}
	else invalidate();
   c1aae:	f7ff ff72 	bl	c1996 <_ZN6String10invalidateEv>
   c1ab2:	e7fa      	b.n	c1aaa <_ZN6StringaSERKS_+0x14>

000c1ab4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c1ab4:	b510      	push	{r4, lr}
	buffer = NULL;
   c1ab6:	2300      	movs	r3, #0
String::String(const String &value)
   c1ab8:	4604      	mov	r4, r0
	capacity = 0;
   c1aba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c1abe:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1ac0:	7303      	strb	r3, [r0, #12]
	*this = value;
   c1ac2:	f7ff ffe8 	bl	c1a96 <_ZN6StringaSERKS_>
}
   c1ac6:	4620      	mov	r0, r4
   c1ac8:	bd10      	pop	{r4, pc}

000c1aca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c1aca:	b513      	push	{r0, r1, r4, lr}
   c1acc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c1ace:	b159      	cbz	r1, c1ae8 <_ZN6StringaSEPKc+0x1e>
   c1ad0:	4608      	mov	r0, r1
   c1ad2:	9101      	str	r1, [sp, #4]
   c1ad4:	f002 fe73 	bl	c47be <strlen>
   c1ad8:	9901      	ldr	r1, [sp, #4]
   c1ada:	4602      	mov	r2, r0
   c1adc:	4620      	mov	r0, r4
   c1ade:	f7ff ff85 	bl	c19ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1ae2:	4620      	mov	r0, r4
   c1ae4:	b002      	add	sp, #8
   c1ae6:	bd10      	pop	{r4, pc}
	else invalidate();
   c1ae8:	f7ff ff55 	bl	c1996 <_ZN6String10invalidateEv>
   c1aec:	e7f9      	b.n	c1ae2 <_ZN6StringaSEPKc+0x18>

000c1aee <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c1aee:	b570      	push	{r4, r5, r6, lr}
   c1af0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c1af2:	460e      	mov	r6, r1
   c1af4:	b909      	cbnz	r1, c1afa <_ZN6String6concatEPKcj+0xc>
   c1af6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c1af8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c1afa:	b16a      	cbz	r2, c1b18 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c1afc:	6884      	ldr	r4, [r0, #8]
   c1afe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c1b00:	4621      	mov	r1, r4
   c1b02:	f7ff ff5f 	bl	c19c4 <_ZN6String7reserveEj>
   c1b06:	2800      	cmp	r0, #0
   c1b08:	d0f5      	beq.n	c1af6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c1b0a:	6828      	ldr	r0, [r5, #0]
   c1b0c:	68ab      	ldr	r3, [r5, #8]
   c1b0e:	4631      	mov	r1, r6
   c1b10:	4418      	add	r0, r3
   c1b12:	f002 fe2f 	bl	c4774 <strcpy>
	len = newlen;
   c1b16:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c1b18:	2001      	movs	r0, #1
   c1b1a:	e7ed      	b.n	c1af8 <_ZN6String6concatEPKcj+0xa>

000c1b1c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c1b1c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c1b1e:	2300      	movs	r3, #0
	buf[0] = c;
   c1b20:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c1b24:	2201      	movs	r2, #1
   c1b26:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c1b28:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c1b2c:	f7ff ffdf 	bl	c1aee <_ZN6String6concatEPKcj>
}
   c1b30:	b003      	add	sp, #12
   c1b32:	f85d fb04 	ldr.w	pc, [sp], #4

000c1b36 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c1b36:	6883      	ldr	r3, [r0, #8]
   c1b38:	428b      	cmp	r3, r1
   c1b3a:	d903      	bls.n	c1b44 <_ZNK6StringixEj+0xe>
   c1b3c:	6800      	ldr	r0, [r0, #0]
   c1b3e:	b110      	cbz	r0, c1b46 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c1b40:	5c40      	ldrb	r0, [r0, r1]
   c1b42:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c1b44:	2000      	movs	r0, #0
}
   c1b46:	4770      	bx	lr

000c1b48 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c1b48:	f7ff bff5 	b.w	c1b36 <_ZNK6StringixEj>

000c1b4c <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   c1b4c:	b558      	push	{r3, r4, r6, lr}
   c1b4e:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   c1b50:	b12a      	cbz	r2, c1b5e <_ZNK6String8getBytesEPhjj+0x12>
   c1b52:	b121      	cbz	r1, c1b5e <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   c1b54:	6884      	ldr	r4, [r0, #8]
   c1b56:	42a3      	cmp	r3, r4
   c1b58:	d302      	bcc.n	c1b60 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   c1b5a:	2300      	movs	r3, #0
   c1b5c:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   c1b5e:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   c1b60:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   c1b62:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   c1b64:	6801      	ldr	r1, [r0, #0]
   c1b66:	4294      	cmp	r4, r2
   c1b68:	bf28      	it	cs
   c1b6a:	4614      	movcs	r4, r2
   c1b6c:	4419      	add	r1, r3
   c1b6e:	4622      	mov	r2, r4
   c1b70:	4630      	mov	r0, r6
   c1b72:	f002 fe53 	bl	c481c <strncpy>
	buf[n] = 0;
   c1b76:	2300      	movs	r3, #0
   c1b78:	5533      	strb	r3, [r6, r4]
   c1b7a:	e7f0      	b.n	c1b5e <_ZNK6String8getBytesEPhjj+0x12>

000c1b7c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c1b7c:	4b05      	ldr	r3, [pc, #20]	; (c1b94 <_GLOBAL__sub_I_System+0x18>)
   c1b7e:	2202      	movs	r2, #2
   c1b80:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c1b82:	4b05      	ldr	r3, [pc, #20]	; (c1b98 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c1b84:	4a05      	ldr	r2, [pc, #20]	; (c1b9c <_GLOBAL__sub_I_System+0x20>)
   c1b86:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c1b88:	2000      	movs	r0, #0
   c1b8a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c1b8e:	f7fc baf3 	b.w	be178 <set_system_mode>
   c1b92:	bf00      	nop
   c1b94:	2003e6c4 	.word	0x2003e6c4
   c1b98:	2003e6b8 	.word	0x2003e6b8
   c1b9c:	ffff0000 	.word	0xffff0000

000c1ba0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c1ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c1ba4:	4a15      	ldr	r2, [pc, #84]	; (c1bfc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c1ba6:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1c08 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c1baa:	e9d2 6300 	ldrd	r6, r3, [r2]
   c1bae:	1980      	adds	r0, r0, r6
   c1bb0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c1bb4:	4b12      	ldr	r3, [pc, #72]	; (c1c00 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c1bb6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c1bba:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c1bbe:	1986      	adds	r6, r0, r6
   c1bc0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c1bc4:	42bb      	cmp	r3, r7
   c1bc6:	bf08      	it	eq
   c1bc8:	42b2      	cmpeq	r2, r6
{
   c1bca:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c1bcc:	d013      	beq.n	c1bf6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c1bce:	a903      	add	r1, sp, #12
   c1bd0:	4668      	mov	r0, sp
   c1bd2:	e9cd 6700 	strd	r6, r7, [sp]
   c1bd6:	f7fc fc0b 	bl	be3f0 <localtime_r>
	calendar_time.tm_year += 1900;
   c1bda:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bdc:	4d09      	ldr	r5, [pc, #36]	; (c1c04 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c1bde:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1be2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1be4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c1bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c1bee:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bf2:	6823      	ldr	r3, [r4, #0]
   c1bf4:	602b      	str	r3, [r5, #0]
    }
}
   c1bf6:	b00c      	add	sp, #48	; 0x30
   c1bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1bfc:	2003e6f8 	.word	0x2003e6f8
   c1c00:	2003e6f0 	.word	0x2003e6f0
   c1c04:	2003e6cc 	.word	0x2003e6cc
   c1c08:	2003e700 	.word	0x2003e700

000c1c0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c1c0c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1c0e:	2000      	movs	r0, #0
   c1c10:	f7fc fb1e 	bl	be250 <spark_sync_time_pending>
   c1c14:	b128      	cbz	r0, c1c22 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1c16:	f7fc fb03 	bl	be220 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1c1a:	f080 0001 	eor.w	r0, r0, #1
   c1c1e:	b2c0      	uxtb	r0, r0
    }
   c1c20:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1c22:	2001      	movs	r0, #1
   c1c24:	e7fc      	b.n	c1c20 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1c28 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1c28:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1c2a:	f7ff ffb9 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c1c2e:	4b02      	ldr	r3, [pc, #8]	; (c1c38 <_ZN9TimeClass5monthEx+0x10>)
   c1c30:	6918      	ldr	r0, [r3, #16]
}
   c1c32:	3001      	adds	r0, #1
   c1c34:	bd08      	pop	{r3, pc}
   c1c36:	bf00      	nop
   c1c38:	2003e6cc 	.word	0x2003e6cc

000c1c3c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1c3c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c1c3e:	2000      	movs	r0, #0
   c1c40:	f7fc f888 	bl	bdd54 <hal_rtc_time_is_valid>
    if (rtcstate)
   c1c44:	4604      	mov	r4, r0
   c1c46:	b9a0      	cbnz	r0, c1c72 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1c48:	f7fc fa8e 	bl	be168 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1c4c:	2801      	cmp	r0, #1
   c1c4e:	d110      	bne.n	c1c72 <_ZN9TimeClass7isValidEv+0x36>
   c1c50:	4620      	mov	r0, r4
   c1c52:	f7fc fab1 	bl	be1b8 <system_thread_get_state>
   c1c56:	b960      	cbnz	r0, c1c72 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c1c58:	f7ff ffd8 	bl	c1c0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c1c5c:	b910      	cbnz	r0, c1c64 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c1c5e:	f7fc fad7 	bl	be210 <spark_process>
        while (_while() && !_condition()) {
   c1c62:	e7f9      	b.n	c1c58 <_ZN9TimeClass7isValidEv+0x1c>
   c1c64:	f7ff ffd2 	bl	c1c0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c1c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c1c6c:	2000      	movs	r0, #0
   c1c6e:	f7fc b871 	b.w	bdd54 <hal_rtc_time_is_valid>
}
   c1c72:	4620      	mov	r0, r4
   c1c74:	bd10      	pop	{r4, pc}

000c1c76 <_ZN9TimeClass3nowEv>:
{
   c1c76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c1c78:	f7ff ffe0 	bl	c1c3c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c1c7c:	2210      	movs	r2, #16
   c1c7e:	2100      	movs	r1, #0
   c1c80:	4668      	mov	r0, sp
   c1c82:	f002 fd11 	bl	c46a8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c1c86:	2100      	movs	r1, #0
   c1c88:	4668      	mov	r0, sp
   c1c8a:	f7fc f86b 	bl	bdd64 <hal_rtc_get_time>
}
   c1c8e:	9800      	ldr	r0, [sp, #0]
   c1c90:	b005      	add	sp, #20
   c1c92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1c98 <_ZN9TimeClass4hourEv>:
{
   c1c98:	b508      	push	{r3, lr}
	return hour(now());
   c1c9a:	f7ff ffec 	bl	c1c76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1c9e:	17c1      	asrs	r1, r0, #31
   c1ca0:	f7ff ff7e 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1ca4:	4b01      	ldr	r3, [pc, #4]	; (c1cac <_ZN9TimeClass4hourEv+0x14>)
   c1ca6:	6898      	ldr	r0, [r3, #8]
   c1ca8:	bd08      	pop	{r3, pc}
   c1caa:	bf00      	nop
   c1cac:	2003e6cc 	.word	0x2003e6cc

000c1cb0 <_ZN9TimeClass6minuteEv>:
{
   c1cb0:	b508      	push	{r3, lr}
	return minute(now());
   c1cb2:	f7ff ffe0 	bl	c1c76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1cb6:	17c1      	asrs	r1, r0, #31
   c1cb8:	f7ff ff72 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1cbc:	4b01      	ldr	r3, [pc, #4]	; (c1cc4 <_ZN9TimeClass6minuteEv+0x14>)
   c1cbe:	6858      	ldr	r0, [r3, #4]
   c1cc0:	bd08      	pop	{r3, pc}
   c1cc2:	bf00      	nop
   c1cc4:	2003e6cc 	.word	0x2003e6cc

000c1cc8 <_ZN9TimeClass6secondEv>:
{
   c1cc8:	b508      	push	{r3, lr}
	return second(now());
   c1cca:	f7ff ffd4 	bl	c1c76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1cce:	17c1      	asrs	r1, r0, #31
   c1cd0:	f7ff ff66 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1cd4:	4b01      	ldr	r3, [pc, #4]	; (c1cdc <_ZN9TimeClass6secondEv+0x14>)
   c1cd6:	6818      	ldr	r0, [r3, #0]
   c1cd8:	bd08      	pop	{r3, pc}
   c1cda:	bf00      	nop
   c1cdc:	2003e6cc 	.word	0x2003e6cc

000c1ce0 <_ZN9TimeClass3dayEv>:
{
   c1ce0:	b508      	push	{r3, lr}
	return day(now());
   c1ce2:	f7ff ffc8 	bl	c1c76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1ce6:	17c1      	asrs	r1, r0, #31
   c1ce8:	f7ff ff5a 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1cec:	4b01      	ldr	r3, [pc, #4]	; (c1cf4 <_ZN9TimeClass3dayEv+0x14>)
   c1cee:	68d8      	ldr	r0, [r3, #12]
   c1cf0:	bd08      	pop	{r3, pc}
   c1cf2:	bf00      	nop
   c1cf4:	2003e6cc 	.word	0x2003e6cc

000c1cf8 <_ZN9TimeClass5monthEv>:
{
   c1cf8:	b508      	push	{r3, lr}
	return month(now());
   c1cfa:	f7ff ffbc 	bl	c1c76 <_ZN9TimeClass3nowEv>
}
   c1cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1d02:	17c1      	asrs	r1, r0, #31
   c1d04:	f7ff bf90 	b.w	c1c28 <_ZN9TimeClass5monthEx>

000c1d08 <_ZN9TimeClass4yearEv>:
{
   c1d08:	b508      	push	{r3, lr}
	return year(now());
   c1d0a:	f7ff ffb4 	bl	c1c76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1d0e:	17c1      	asrs	r1, r0, #31
   c1d10:	f7ff ff46 	bl	c1ba0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1d14:	4b01      	ldr	r3, [pc, #4]	; (c1d1c <_ZN9TimeClass4yearEv+0x14>)
   c1d16:	6958      	ldr	r0, [r3, #20]
   c1d18:	bd08      	pop	{r3, pc}
   c1d1a:	bf00      	nop
   c1d1c:	2003e6cc 	.word	0x2003e6cc

000c1d20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1d20:	4b02      	ldr	r3, [pc, #8]	; (c1d2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1d22:	681a      	ldr	r2, [r3, #0]
   c1d24:	4b02      	ldr	r3, [pc, #8]	; (c1d30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1d26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1d28:	4770      	bx	lr
   c1d2a:	bf00      	nop
   c1d2c:	2003db40 	.word	0x2003db40
   c1d30:	2003e6c8 	.word	0x2003e6c8

000c1d34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1d34:	4770      	bx	lr

000c1d36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1d36:	7441      	strb	r1, [r0, #17]
}
   c1d38:	4770      	bx	lr

000c1d3a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1d3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1d3c:	7c00      	ldrb	r0, [r0, #16]
   c1d3e:	f7fc f991 	bl	be064 <hal_usart_available_data_for_write>
}
   c1d42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1d46:	bd08      	pop	{r3, pc}

000c1d48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1d48:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1d4a:	7c00      	ldrb	r0, [r0, #16]
   c1d4c:	f7fc f962 	bl	be014 <hal_usart_available>
}
   c1d50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1d54:	bd08      	pop	{r3, pc}

000c1d56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1d56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1d58:	7c00      	ldrb	r0, [r0, #16]
   c1d5a:	f7fc f96b 	bl	be034 <hal_usart_peek>
}
   c1d5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1d62:	bd08      	pop	{r3, pc}

000c1d64 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1d64:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1d66:	7c00      	ldrb	r0, [r0, #16]
   c1d68:	f7fc f95c 	bl	be024 <hal_usart_read>
}
   c1d6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1d70:	bd08      	pop	{r3, pc}

000c1d72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1d72:	7c00      	ldrb	r0, [r0, #16]
   c1d74:	f7fc b966 	b.w	be044 <hal_usart_flush>

000c1d78 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d7a:	7c45      	ldrb	r5, [r0, #17]
{
   c1d7c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d7e:	b12d      	cbz	r5, c1d8c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1d80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1d82:	b003      	add	sp, #12
   c1d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1d88:	f7fc b93c 	b.w	be004 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d8c:	7c00      	ldrb	r0, [r0, #16]
   c1d8e:	9101      	str	r1, [sp, #4]
   c1d90:	f7fc f968 	bl	be064 <hal_usart_available_data_for_write>
   c1d94:	2800      	cmp	r0, #0
   c1d96:	9901      	ldr	r1, [sp, #4]
   c1d98:	dcf2      	bgt.n	c1d80 <_ZN11USARTSerial5writeEh+0x8>
}
   c1d9a:	4628      	mov	r0, r5
   c1d9c:	b003      	add	sp, #12
   c1d9e:	bd30      	pop	{r4, r5, pc}

000c1da0 <_ZN11USARTSerialD0Ev>:
   c1da0:	b510      	push	{r4, lr}
   c1da2:	2114      	movs	r1, #20
   c1da4:	4604      	mov	r4, r0
   c1da6:	f7f2 f97c 	bl	b40a2 <_ZdlPvj>
   c1daa:	4620      	mov	r0, r4
   c1dac:	bd10      	pop	{r4, pc}
	...

000c1db0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1db0:	b510      	push	{r4, lr}
   c1db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1db6:	4604      	mov	r4, r0
   c1db8:	4608      	mov	r0, r1
   c1dba:	4611      	mov	r1, r2
   c1dbc:	2200      	movs	r2, #0
   c1dbe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1dc2:	4b04      	ldr	r3, [pc, #16]	; (c1dd4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1dc4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1dc6:	2301      	movs	r3, #1
  _serial = serial;
   c1dc8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1dca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1dcc:	f7fc f95a 	bl	be084 <hal_usart_init_ex>
}
   c1dd0:	4620      	mov	r0, r4
   c1dd2:	bd10      	pop	{r4, pc}
   c1dd4:	000c814c 	.word	0x000c814c

000c1dd8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1dd8:	7c00      	ldrb	r0, [r0, #16]
   c1dda:	2300      	movs	r3, #0
   c1ddc:	f7fc b94a 	b.w	be074 <hal_usart_begin_config>

000c1de0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1de0:	2200      	movs	r2, #0
   c1de2:	f7ff bff9 	b.w	c1dd8 <_ZN11USARTSerial5beginEmm>

000c1de6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1de6:	7c00      	ldrb	r0, [r0, #16]
   c1de8:	f7fc b904 	b.w	bdff4 <hal_usart_end>

000c1dec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1dec:	7441      	strb	r1, [r0, #17]
}
   c1dee:	4770      	bx	lr

000c1df0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1df0:	4770      	bx	lr

000c1df2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1df2:	4770      	bx	lr

000c1df4 <_ZN9USBSerial4readEv>:
{
   c1df4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1df6:	2100      	movs	r1, #0
   c1df8:	7c00      	ldrb	r0, [r0, #16]
   c1dfa:	f7fc f973 	bl	be0e4 <HAL_USB_USART_Receive_Data>
}
   c1dfe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1e02:	bd08      	pop	{r3, pc}

000c1e04 <_ZN9USBSerial4peekEv>:
{
   c1e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1e06:	2101      	movs	r1, #1
   c1e08:	7c00      	ldrb	r0, [r0, #16]
   c1e0a:	f7fc f96b 	bl	be0e4 <HAL_USB_USART_Receive_Data>
}
   c1e0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1e12:	bd08      	pop	{r3, pc}

000c1e14 <_ZN9USBSerial17availableForWriteEv>:
{
   c1e14:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1e16:	7c00      	ldrb	r0, [r0, #16]
   c1e18:	f7fc f95c 	bl	be0d4 <HAL_USB_USART_Available_Data_For_Write>
}
   c1e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1e20:	bd08      	pop	{r3, pc}

000c1e22 <_ZN9USBSerial9availableEv>:
{
   c1e22:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1e24:	7c00      	ldrb	r0, [r0, #16]
   c1e26:	f7fc f94d 	bl	be0c4 <HAL_USB_USART_Available_Data>
}
   c1e2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1e2e:	bd08      	pop	{r3, pc}

000c1e30 <_ZN9USBSerial5writeEh>:
{
   c1e30:	b513      	push	{r0, r1, r4, lr}
   c1e32:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1e34:	7c00      	ldrb	r0, [r0, #16]
{
   c1e36:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1e38:	f7fc f94c 	bl	be0d4 <HAL_USB_USART_Available_Data_For_Write>
   c1e3c:	2800      	cmp	r0, #0
   c1e3e:	9901      	ldr	r1, [sp, #4]
   c1e40:	dc01      	bgt.n	c1e46 <_ZN9USBSerial5writeEh+0x16>
   c1e42:	7c60      	ldrb	r0, [r4, #17]
   c1e44:	b120      	cbz	r0, c1e50 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1e46:	7c20      	ldrb	r0, [r4, #16]
   c1e48:	f7fc f954 	bl	be0f4 <HAL_USB_USART_Send_Data>
   c1e4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1e50:	b002      	add	sp, #8
   c1e52:	bd10      	pop	{r4, pc}

000c1e54 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1e54:	7c00      	ldrb	r0, [r0, #16]
   c1e56:	f7fc b955 	b.w	be104 <HAL_USB_USART_Flush_Data>

000c1e5a <_ZN9USBSerialD0Ev>:
   c1e5a:	b510      	push	{r4, lr}
   c1e5c:	2114      	movs	r1, #20
   c1e5e:	4604      	mov	r4, r0
   c1e60:	f7f2 f91f 	bl	b40a2 <_ZdlPvj>
   c1e64:	4620      	mov	r0, r4
   c1e66:	bd10      	pop	{r4, pc}

000c1e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1e68:	b510      	push	{r4, lr}
   c1e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1e6e:	4604      	mov	r4, r0
   c1e70:	4608      	mov	r0, r1
   c1e72:	2100      	movs	r1, #0
   c1e74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1e78:	4b04      	ldr	r3, [pc, #16]	; (c1e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1e7a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1e7c:	2301      	movs	r3, #1
  _serial = serial;
   c1e7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1e80:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1e82:	4611      	mov	r1, r2
   c1e84:	f7fc f906 	bl	be094 <HAL_USB_USART_Init>
}
   c1e88:	4620      	mov	r0, r4
   c1e8a:	bd10      	pop	{r4, pc}
   c1e8c:	000c817c 	.word	0x000c817c

000c1e90 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1e90:	7c00      	ldrb	r0, [r0, #16]
   c1e92:	2200      	movs	r2, #0
   c1e94:	f7fc b906 	b.w	be0a4 <HAL_USB_USART_Begin>

000c1e98 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1e98:	7c00      	ldrb	r0, [r0, #16]
   c1e9a:	f7fc b90b 	b.w	be0b4 <HAL_USB_USART_End>

000c1e9e <_Z19acquireSerialBufferv>:
{
   c1e9e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1ea0:	2214      	movs	r2, #20
{
   c1ea2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1ea4:	2100      	movs	r1, #0
   c1ea6:	f002 fbff 	bl	c46a8 <memset>
}
   c1eaa:	4620      	mov	r0, r4
   c1eac:	bd10      	pop	{r4, pc}
	...

000c1eb0 <_Z16_fetch_usbserialv>:
{
   c1eb0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1eb2:	4c0f      	ldr	r4, [pc, #60]	; (c1ef0 <_Z16_fetch_usbserialv+0x40>)
{
   c1eb4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1eb6:	a803      	add	r0, sp, #12
   c1eb8:	f7ff fff1 	bl	c1e9e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1ebc:	7821      	ldrb	r1, [r4, #0]
   c1ebe:	f3bf 8f5b 	dmb	ish
   c1ec2:	f011 0101 	ands.w	r1, r1, #1
   c1ec6:	d10f      	bne.n	c1ee8 <_Z16_fetch_usbserialv+0x38>
   c1ec8:	4620      	mov	r0, r4
   c1eca:	9101      	str	r1, [sp, #4]
   c1ecc:	f7f2 f8f8 	bl	b40c0 <__cxa_guard_acquire>
   c1ed0:	9901      	ldr	r1, [sp, #4]
   c1ed2:	b148      	cbz	r0, c1ee8 <_Z16_fetch_usbserialv+0x38>
   c1ed4:	aa03      	add	r2, sp, #12
   c1ed6:	4807      	ldr	r0, [pc, #28]	; (c1ef4 <_Z16_fetch_usbserialv+0x44>)
   c1ed8:	f7ff ffc6 	bl	c1e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1edc:	4620      	mov	r0, r4
   c1ede:	f7f2 f8f4 	bl	b40ca <__cxa_guard_release>
   c1ee2:	4805      	ldr	r0, [pc, #20]	; (c1ef8 <_Z16_fetch_usbserialv+0x48>)
   c1ee4:	f002 fb92 	bl	c460c <atexit>
	return _usbserial;
}
   c1ee8:	4802      	ldr	r0, [pc, #8]	; (c1ef4 <_Z16_fetch_usbserialv+0x44>)
   c1eea:	b008      	add	sp, #32
   c1eec:	bd10      	pop	{r4, pc}
   c1eee:	bf00      	nop
   c1ef0:	2003e708 	.word	0x2003e708
   c1ef4:	2003e70c 	.word	0x2003e70c
   c1ef8:	000c1df1 	.word	0x000c1df1

000c1efc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1efc:	4b01      	ldr	r3, [pc, #4]	; (c1f04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c1efe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1f00:	4770      	bx	lr
   c1f02:	bf00      	nop
   c1f04:	2003db48 	.word	0x2003db48

000c1f08 <serialEventRun>:
{
   c1f08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c1f0a:	4b0b      	ldr	r3, [pc, #44]	; (c1f38 <serialEventRun+0x30>)
   c1f0c:	b143      	cbz	r3, c1f20 <serialEventRun+0x18>
   c1f0e:	f7ff ffcf 	bl	c1eb0 <_Z16_fetch_usbserialv>
   c1f12:	6803      	ldr	r3, [r0, #0]
   c1f14:	691b      	ldr	r3, [r3, #16]
   c1f16:	4798      	blx	r3
   c1f18:	2800      	cmp	r0, #0
   c1f1a:	dd01      	ble.n	c1f20 <serialEventRun+0x18>
        serialEvent();
   c1f1c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1f20:	4b06      	ldr	r3, [pc, #24]	; (c1f3c <serialEventRun+0x34>)
   c1f22:	b143      	cbz	r3, c1f36 <serialEventRun+0x2e>
   c1f24:	f000 f970 	bl	c2208 <_Z22__fetch_global_Serial1v>
   c1f28:	6803      	ldr	r3, [r0, #0]
   c1f2a:	691b      	ldr	r3, [r3, #16]
   c1f2c:	4798      	blx	r3
   c1f2e:	2800      	cmp	r0, #0
   c1f30:	dd01      	ble.n	c1f36 <serialEventRun+0x2e>
        serialEvent1();
   c1f32:	f3af 8000 	nop.w
}
   c1f36:	bd08      	pop	{r3, pc}
	...

000c1f40 <_post_loop>:
{
   c1f40:	b508      	push	{r3, lr}
	serialEventRun();
   c1f42:	f7ff ffe1 	bl	c1f08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1f46:	f7fb fefd 	bl	bdd44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1f4a:	4b01      	ldr	r3, [pc, #4]	; (c1f50 <_post_loop+0x10>)
   c1f4c:	6018      	str	r0, [r3, #0]
}
   c1f4e:	bd08      	pop	{r3, pc}
   c1f50:	2003e728 	.word	0x2003e728

000c1f54 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1f54:	4805      	ldr	r0, [pc, #20]	; (c1f6c <_Z33system_initialize_user_backup_ramv+0x18>)
   c1f56:	4a06      	ldr	r2, [pc, #24]	; (c1f70 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1f58:	4906      	ldr	r1, [pc, #24]	; (c1f74 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1f5a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1f5c:	1a12      	subs	r2, r2, r0
   c1f5e:	f002 fb7b 	bl	c4658 <memcpy>
    __backup_sram_signature = signature;
   c1f62:	4b05      	ldr	r3, [pc, #20]	; (c1f78 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1f64:	4a05      	ldr	r2, [pc, #20]	; (c1f7c <_Z33system_initialize_user_backup_ramv+0x28>)
   c1f66:	601a      	str	r2, [r3, #0]
}
   c1f68:	bd08      	pop	{r3, pc}
   c1f6a:	bf00      	nop
   c1f6c:	2003f400 	.word	0x2003f400
   c1f70:	2003f404 	.word	0x2003f404
   c1f74:	000c8b14 	.word	0x000c8b14
   c1f78:	2003f400 	.word	0x2003f400
   c1f7c:	9a271c1e 	.word	0x9a271c1e

000c1f80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1f80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1f82:	2300      	movs	r3, #0
   c1f84:	9300      	str	r3, [sp, #0]
   c1f86:	461a      	mov	r2, r3
   c1f88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1f8c:	f7fc f92e 	bl	be1ec <system_ctrl_set_result>
}
   c1f90:	b003      	add	sp, #12
   c1f92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1f98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1f98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c1f9a:	8843      	ldrh	r3, [r0, #2]
   c1f9c:	2b0a      	cmp	r3, #10
   c1f9e:	d008      	beq.n	c1fb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1fa0:	2b50      	cmp	r3, #80	; 0x50
   c1fa2:	d10b      	bne.n	c1fbc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1fa4:	4b09      	ldr	r3, [pc, #36]	; (c1fcc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1fa6:	681b      	ldr	r3, [r3, #0]
   c1fa8:	b14b      	cbz	r3, c1fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c1faa:	b003      	add	sp, #12
   c1fac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1fb0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1fb2:	f7ff ffe5 	bl	c1f80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1fb6:	b003      	add	sp, #12
   c1fb8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1fbc:	2300      	movs	r3, #0
   c1fbe:	9300      	str	r3, [sp, #0]
   c1fc0:	461a      	mov	r2, r3
   c1fc2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1fc6:	f7fc f911 	bl	be1ec <system_ctrl_set_result>
}
   c1fca:	e7f4      	b.n	c1fb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c1fcc:	2003e724 	.word	0x2003e724

000c1fd0 <module_user_init_hook>:
{
   c1fd0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1fd2:	4812      	ldr	r0, [pc, #72]	; (c201c <module_user_init_hook+0x4c>)
   c1fd4:	2100      	movs	r1, #0
   c1fd6:	f7fc fa03 	bl	be3e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c1fda:	4b11      	ldr	r3, [pc, #68]	; (c2020 <module_user_init_hook+0x50>)
   c1fdc:	681a      	ldr	r2, [r3, #0]
   c1fde:	4b11      	ldr	r3, [pc, #68]	; (c2024 <module_user_init_hook+0x54>)
   c1fe0:	429a      	cmp	r2, r3
   c1fe2:	4b11      	ldr	r3, [pc, #68]	; (c2028 <module_user_init_hook+0x58>)
   c1fe4:	bf0c      	ite	eq
   c1fe6:	2201      	moveq	r2, #1
   c1fe8:	2200      	movne	r2, #0
   c1fea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c1fec:	d001      	beq.n	c1ff2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c1fee:	f7ff ffb1 	bl	c1f54 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1ff2:	f7fb fe8f 	bl	bdd14 <HAL_RNG_GetRandomNumber>
   c1ff6:	4604      	mov	r4, r0
    srand(seed);
   c1ff8:	f002 fb5e 	bl	c46b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1ffc:	4b0b      	ldr	r3, [pc, #44]	; (c202c <module_user_init_hook+0x5c>)
   c1ffe:	b113      	cbz	r3, c2006 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c2000:	4620      	mov	r0, r4
   c2002:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c2006:	2100      	movs	r1, #0
   c2008:	4808      	ldr	r0, [pc, #32]	; (c202c <module_user_init_hook+0x5c>)
   c200a:	f7fc f929 	bl	be260 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c200e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c2012:	4807      	ldr	r0, [pc, #28]	; (c2030 <module_user_init_hook+0x60>)
   c2014:	2100      	movs	r1, #0
   c2016:	f7fc b8df 	b.w	be1d8 <system_ctrl_set_app_request_handler>
   c201a:	bf00      	nop
   c201c:	000c1efd 	.word	0x000c1efd
   c2020:	2003f400 	.word	0x2003f400
   c2024:	9a271c1e 	.word	0x9a271c1e
   c2028:	2003e720 	.word	0x2003e720
   c202c:	00000000 	.word	0x00000000
   c2030:	000c1f99 	.word	0x000c1f99

000c2034 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c2034:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c2036:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c2038:	d902      	bls.n	c2040 <pinAvailable+0xc>
    return false;
   c203a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c203c:	b002      	add	sp, #8
   c203e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c2040:	f1a0 030b 	sub.w	r3, r0, #11
   c2044:	2b02      	cmp	r3, #2
   c2046:	d81a      	bhi.n	c207e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c2048:	4c17      	ldr	r4, [pc, #92]	; (c20a8 <pinAvailable+0x74>)
   c204a:	7821      	ldrb	r1, [r4, #0]
   c204c:	f3bf 8f5b 	dmb	ish
   c2050:	f011 0101 	ands.w	r1, r1, #1
   c2054:	d10b      	bne.n	c206e <pinAvailable+0x3a>
   c2056:	4620      	mov	r0, r4
   c2058:	9101      	str	r1, [sp, #4]
   c205a:	f7f2 f831 	bl	b40c0 <__cxa_guard_acquire>
   c205e:	9901      	ldr	r1, [sp, #4]
   c2060:	b128      	cbz	r0, c206e <pinAvailable+0x3a>
   c2062:	4812      	ldr	r0, [pc, #72]	; (c20ac <pinAvailable+0x78>)
   c2064:	f7ff fb43 	bl	c16ee <_ZN8SPIClassC1E19hal_spi_interface_t>
   c2068:	4620      	mov	r0, r4
   c206a:	f7f2 f82e 	bl	b40ca <__cxa_guard_release>
   c206e:	4b0f      	ldr	r3, [pc, #60]	; (c20ac <pinAvailable+0x78>)
   c2070:	7818      	ldrb	r0, [r3, #0]
   c2072:	f7fb ff7f 	bl	bdf74 <hal_spi_is_enabled>
   c2076:	2800      	cmp	r0, #0
   c2078:	d1df      	bne.n	c203a <pinAvailable+0x6>
  return true; // 'pin' is available
   c207a:	2001      	movs	r0, #1
   c207c:	e7de      	b.n	c203c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c207e:	2801      	cmp	r0, #1
   c2080:	d809      	bhi.n	c2096 <pinAvailable+0x62>
   c2082:	f000 f881 	bl	c2188 <_Z19__fetch_global_Wirev>
   c2086:	2100      	movs	r1, #0
   c2088:	7c00      	ldrb	r0, [r0, #16]
   c208a:	f7fb ff0b 	bl	bdea4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c208e:	f080 0001 	eor.w	r0, r0, #1
   c2092:	b2c0      	uxtb	r0, r0
   c2094:	e7d2      	b.n	c203c <pinAvailable+0x8>
   c2096:	3809      	subs	r0, #9
   c2098:	2801      	cmp	r0, #1
   c209a:	d8ee      	bhi.n	c207a <pinAvailable+0x46>
   c209c:	f000 f8b4 	bl	c2208 <_Z22__fetch_global_Serial1v>
   c20a0:	7c00      	ldrb	r0, [r0, #16]
   c20a2:	f7fb ffd7 	bl	be054 <hal_usart_is_enabled>
   c20a6:	e7f2      	b.n	c208e <pinAvailable+0x5a>
   c20a8:	2003dd2c 	.word	0x2003dd2c
   c20ac:	2003dd30 	.word	0x2003dd30

000c20b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c20b0:	2825      	cmp	r0, #37	; 0x25
{
   c20b2:	b538      	push	{r3, r4, r5, lr}
   c20b4:	4604      	mov	r4, r0
   c20b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c20b8:	d80a      	bhi.n	c20d0 <pinMode+0x20>
   c20ba:	29ff      	cmp	r1, #255	; 0xff
   c20bc:	d008      	beq.n	c20d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c20be:	f7ff ffb9 	bl	c2034 <pinAvailable>
   c20c2:	b128      	cbz	r0, c20d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c20c4:	4629      	mov	r1, r5
   c20c6:	4620      	mov	r0, r4
}
   c20c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c20cc:	f7fb be5a 	b.w	bdd84 <HAL_Pin_Mode>
}
   c20d0:	bd38      	pop	{r3, r4, r5, pc}

000c20d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c20d2:	b538      	push	{r3, r4, r5, lr}
   c20d4:	4604      	mov	r4, r0
   c20d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c20d8:	f7fb fe5c 	bl	bdd94 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c20dc:	28ff      	cmp	r0, #255	; 0xff
   c20de:	d010      	beq.n	c2102 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c20e0:	2806      	cmp	r0, #6
   c20e2:	d804      	bhi.n	c20ee <digitalWrite+0x1c>
   c20e4:	234d      	movs	r3, #77	; 0x4d
   c20e6:	fa23 f000 	lsr.w	r0, r3, r0
   c20ea:	07c3      	lsls	r3, r0, #31
   c20ec:	d409      	bmi.n	c2102 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c20ee:	4620      	mov	r0, r4
   c20f0:	f7ff ffa0 	bl	c2034 <pinAvailable>
   c20f4:	b128      	cbz	r0, c2102 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c20f6:	4629      	mov	r1, r5
   c20f8:	4620      	mov	r0, r4
}
   c20fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c20fe:	f7fb be51 	b.w	bdda4 <HAL_GPIO_Write>
}
   c2102:	bd38      	pop	{r3, r4, r5, pc}

000c2104 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c2104:	b510      	push	{r4, lr}
   c2106:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c2108:	f7fb fe44 	bl	bdd94 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c210c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c210e:	b2db      	uxtb	r3, r3
   c2110:	2b01      	cmp	r3, #1
   c2112:	d908      	bls.n	c2126 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c2114:	4620      	mov	r0, r4
   c2116:	f7ff ff8d 	bl	c2034 <pinAvailable>
   c211a:	b120      	cbz	r0, c2126 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c211c:	4620      	mov	r0, r4
}
   c211e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c2122:	f7fb be47 	b.w	bddb4 <HAL_GPIO_Read>
}
   c2126:	2000      	movs	r0, #0
   c2128:	bd10      	pop	{r4, pc}

000c212a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c212a:	280d      	cmp	r0, #13
{
   c212c:	b510      	push	{r4, lr}
   c212e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c2130:	bf9c      	itt	ls
   c2132:	340e      	addls	r4, #14
   c2134:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c2136:	4620      	mov	r0, r4
   c2138:	f7ff ff7c 	bl	c2034 <pinAvailable>
   c213c:	b150      	cbz	r0, c2154 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c213e:	2103      	movs	r1, #3
   c2140:	4620      	mov	r0, r4
   c2142:	f7fb fe17 	bl	bdd74 <HAL_Validate_Pin_Function>
   c2146:	2803      	cmp	r0, #3
   c2148:	d104      	bne.n	c2154 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c214a:	4620      	mov	r0, r4
}
   c214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c2150:	f7fb be58 	b.w	bde04 <hal_adc_read>
}
   c2154:	2000      	movs	r0, #0
   c2156:	bd10      	pop	{r4, pc}

000c2158 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c2158:	4770      	bx	lr
	...

000c215c <_Z17acquireWireBufferv>:
{
   c215c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c215e:	2520      	movs	r5, #32
   c2160:	2314      	movs	r3, #20
{
   c2162:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c2164:	6003      	str	r3, [r0, #0]
   c2166:	6085      	str	r5, [r0, #8]
   c2168:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c216a:	4906      	ldr	r1, [pc, #24]	; (c2184 <_Z17acquireWireBufferv+0x28>)
   c216c:	4628      	mov	r0, r5
   c216e:	f000 f871 	bl	c2254 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2172:	4904      	ldr	r1, [pc, #16]	; (c2184 <_Z17acquireWireBufferv+0x28>)
	};
   c2174:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2176:	4628      	mov	r0, r5
   c2178:	f000 f86c 	bl	c2254 <_ZnajRKSt9nothrow_t>
	};
   c217c:	60e0      	str	r0, [r4, #12]
}
   c217e:	4620      	mov	r0, r4
   c2180:	bd38      	pop	{r3, r4, r5, pc}
   c2182:	bf00      	nop
   c2184:	000c81a4 	.word	0x000c81a4

000c2188 <_Z19__fetch_global_Wirev>:
{
   c2188:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c218a:	4d0e      	ldr	r5, [pc, #56]	; (c21c4 <_Z19__fetch_global_Wirev+0x3c>)
   c218c:	7829      	ldrb	r1, [r5, #0]
   c218e:	f3bf 8f5b 	dmb	ish
   c2192:	f011 0401 	ands.w	r4, r1, #1
{
   c2196:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c2198:	d111      	bne.n	c21be <_Z19__fetch_global_Wirev+0x36>
   c219a:	4628      	mov	r0, r5
   c219c:	f7f1 ff90 	bl	b40c0 <__cxa_guard_acquire>
   c21a0:	b168      	cbz	r0, c21be <_Z19__fetch_global_Wirev+0x36>
   c21a2:	a801      	add	r0, sp, #4
   c21a4:	f7ff ffda 	bl	c215c <_Z17acquireWireBufferv>
   c21a8:	aa01      	add	r2, sp, #4
   c21aa:	4621      	mov	r1, r4
   c21ac:	4806      	ldr	r0, [pc, #24]	; (c21c8 <_Z19__fetch_global_Wirev+0x40>)
   c21ae:	f7fd fe6d 	bl	bfe8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c21b2:	4628      	mov	r0, r5
   c21b4:	f7f1 ff89 	bl	b40ca <__cxa_guard_release>
   c21b8:	4804      	ldr	r0, [pc, #16]	; (c21cc <_Z19__fetch_global_Wirev+0x44>)
   c21ba:	f002 fa27 	bl	c460c <atexit>
	return wire;
}
   c21be:	4802      	ldr	r0, [pc, #8]	; (c21c8 <_Z19__fetch_global_Wirev+0x40>)
   c21c0:	b007      	add	sp, #28
   c21c2:	bd30      	pop	{r4, r5, pc}
   c21c4:	2003e72c 	.word	0x2003e72c
   c21c8:	2003e730 	.word	0x2003e730
   c21cc:	000c2159 	.word	0x000c2159

000c21d0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c21d0:	4770      	bx	lr
	...

000c21d4 <_Z20acquireSerial1Bufferv>:
{
   c21d4:	b538      	push	{r3, r4, r5, lr}
   c21d6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c21d8:	2514      	movs	r5, #20
   c21da:	462a      	mov	r2, r5
   c21dc:	2100      	movs	r1, #0
   c21de:	f002 fa63 	bl	c46a8 <memset>
   c21e2:	8025      	strh	r5, [r4, #0]
   c21e4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21e6:	4907      	ldr	r1, [pc, #28]	; (c2204 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c21e8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21ea:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c21ec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21ee:	f000 f831 	bl	c2254 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21f2:	4904      	ldr	r1, [pc, #16]	; (c2204 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c21f4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21f6:	4628      	mov	r0, r5
   c21f8:	f000 f82c 	bl	c2254 <_ZnajRKSt9nothrow_t>
    };
   c21fc:	60e0      	str	r0, [r4, #12]
}
   c21fe:	4620      	mov	r0, r4
   c2200:	bd38      	pop	{r3, r4, r5, pc}
   c2202:	bf00      	nop
   c2204:	000c81a4 	.word	0x000c81a4

000c2208 <_Z22__fetch_global_Serial1v>:
{
   c2208:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c220a:	4d0e      	ldr	r5, [pc, #56]	; (c2244 <_Z22__fetch_global_Serial1v+0x3c>)
   c220c:	7829      	ldrb	r1, [r5, #0]
   c220e:	f3bf 8f5b 	dmb	ish
   c2212:	f011 0401 	ands.w	r4, r1, #1
{
   c2216:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2218:	d111      	bne.n	c223e <_Z22__fetch_global_Serial1v+0x36>
   c221a:	4628      	mov	r0, r5
   c221c:	f7f1 ff50 	bl	b40c0 <__cxa_guard_acquire>
   c2220:	b168      	cbz	r0, c223e <_Z22__fetch_global_Serial1v+0x36>
   c2222:	a801      	add	r0, sp, #4
   c2224:	f7ff ffd6 	bl	c21d4 <_Z20acquireSerial1Bufferv>
   c2228:	aa01      	add	r2, sp, #4
   c222a:	4621      	mov	r1, r4
   c222c:	4806      	ldr	r0, [pc, #24]	; (c2248 <_Z22__fetch_global_Serial1v+0x40>)
   c222e:	f7ff fdbf 	bl	c1db0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c2232:	4628      	mov	r0, r5
   c2234:	f7f1 ff49 	bl	b40ca <__cxa_guard_release>
   c2238:	4804      	ldr	r0, [pc, #16]	; (c224c <_Z22__fetch_global_Serial1v+0x44>)
   c223a:	f002 f9e7 	bl	c460c <atexit>
    return serial1;
}
   c223e:	4802      	ldr	r0, [pc, #8]	; (c2248 <_Z22__fetch_global_Serial1v+0x40>)
   c2240:	b007      	add	sp, #28
   c2242:	bd30      	pop	{r4, r5, pc}
   c2244:	2003e744 	.word	0x2003e744
   c2248:	2003e748 	.word	0x2003e748
   c224c:	000c21d1 	.word	0x000c21d1

000c2250 <_ZnwjRKSt9nothrow_t>:
   c2250:	f7f1 bf21 	b.w	b4096 <_Znwj>

000c2254 <_ZnajRKSt9nothrow_t>:
   c2254:	f7f1 bf21 	b.w	b409a <_Znaj>

000c2258 <_ZSt25__throw_bad_function_callv>:
   c2258:	b508      	push	{r3, lr}
   c225a:	f7fc f8a1 	bl	be3a0 <abort>
	...

000c2260 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c2260:	4901      	ldr	r1, [pc, #4]	; (c2268 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c2262:	f000 b8f9 	b.w	c2458 <_ZNKSt9type_infoeqERKS_>
   c2266:	bf00      	nop
   c2268:	000c81c0 	.word	0x000c81c0

000c226c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c226c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c226e:	2400      	movs	r4, #0
   c2270:	2310      	movs	r3, #16
   c2272:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c2276:	6803      	ldr	r3, [r0, #0]
   c2278:	4615      	mov	r5, r2
   c227a:	699e      	ldr	r6, [r3, #24]
   c227c:	6812      	ldr	r2, [r2, #0]
   c227e:	466b      	mov	r3, sp
   c2280:	e9cd 4400 	strd	r4, r4, [sp]
   c2284:	47b0      	blx	r6
   c2286:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c228a:	f003 0306 	and.w	r3, r3, #6
   c228e:	2b06      	cmp	r3, #6
   c2290:	bf03      	ittte	eq
   c2292:	9b00      	ldreq	r3, [sp, #0]
   c2294:	602b      	streq	r3, [r5, #0]
   c2296:	2001      	moveq	r0, #1
   c2298:	4620      	movne	r0, r4
   c229a:	b004      	add	sp, #16
   c229c:	bd70      	pop	{r4, r5, r6, pc}

000c229e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c229e:	9800      	ldr	r0, [sp, #0]
   c22a0:	4290      	cmp	r0, r2
   c22a2:	bf14      	ite	ne
   c22a4:	2001      	movne	r0, #1
   c22a6:	2006      	moveq	r0, #6
   c22a8:	4770      	bx	lr
	...

000c22ac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c22ac:	b510      	push	{r4, lr}
   c22ae:	4b03      	ldr	r3, [pc, #12]	; (c22bc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c22b0:	6003      	str	r3, [r0, #0]
   c22b2:	4604      	mov	r4, r0
   c22b4:	f000 f8cd 	bl	c2452 <_ZNSt9type_infoD1Ev>
   c22b8:	4620      	mov	r0, r4
   c22ba:	bd10      	pop	{r4, pc}
   c22bc:	000c8200 	.word	0x000c8200

000c22c0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c22c0:	b510      	push	{r4, lr}
   c22c2:	4604      	mov	r4, r0
   c22c4:	f7ff fff2 	bl	c22ac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c22c8:	4620      	mov	r0, r4
   c22ca:	2108      	movs	r1, #8
   c22cc:	f7f1 fee9 	bl	b40a2 <_ZdlPvj>
   c22d0:	4620      	mov	r0, r4
   c22d2:	bd10      	pop	{r4, pc}

000c22d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c22d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c22d8:	461f      	mov	r7, r3
   c22da:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c22de:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c22e2:	4598      	cmp	r8, r3
   c22e4:	4606      	mov	r6, r0
   c22e6:	4615      	mov	r5, r2
   c22e8:	d107      	bne.n	c22fa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c22ea:	9907      	ldr	r1, [sp, #28]
   c22ec:	f000 f8b4 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c22f0:	b118      	cbz	r0, c22fa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c22f2:	7165      	strb	r5, [r4, #5]
   c22f4:	2000      	movs	r0, #0
   c22f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c22fa:	4639      	mov	r1, r7
   c22fc:	4630      	mov	r0, r6
   c22fe:	f000 f8ab 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c2302:	2800      	cmp	r0, #0
   c2304:	d0f6      	beq.n	c22f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c2306:	2301      	movs	r3, #1
   c2308:	f8c4 8000 	str.w	r8, [r4]
   c230c:	7125      	strb	r5, [r4, #4]
   c230e:	71a3      	strb	r3, [r4, #6]
   c2310:	e7f0      	b.n	c22f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c2312 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c2312:	b538      	push	{r3, r4, r5, lr}
   c2314:	4615      	mov	r5, r2
   c2316:	461c      	mov	r4, r3
   c2318:	f000 f89e 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c231c:	b120      	cbz	r0, c2328 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c231e:	2308      	movs	r3, #8
   c2320:	60e3      	str	r3, [r4, #12]
   c2322:	2306      	movs	r3, #6
   c2324:	6025      	str	r5, [r4, #0]
   c2326:	7123      	strb	r3, [r4, #4]
   c2328:	bd38      	pop	{r3, r4, r5, pc}

000c232a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c232a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c232c:	4605      	mov	r5, r0
   c232e:	460c      	mov	r4, r1
   c2330:	9201      	str	r2, [sp, #4]
   c2332:	461e      	mov	r6, r3
   c2334:	f000 f890 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c2338:	b950      	cbnz	r0, c2350 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c233a:	2e03      	cmp	r6, #3
   c233c:	d808      	bhi.n	c2350 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c233e:	6823      	ldr	r3, [r4, #0]
   c2340:	9a01      	ldr	r2, [sp, #4]
   c2342:	695b      	ldr	r3, [r3, #20]
   c2344:	4629      	mov	r1, r5
   c2346:	4620      	mov	r0, r4
   c2348:	b002      	add	sp, #8
   c234a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c234e:	4718      	bx	r3
   c2350:	b002      	add	sp, #8
   c2352:	bd70      	pop	{r4, r5, r6, pc}

000c2354 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2354:	b510      	push	{r4, lr}
   c2356:	4b03      	ldr	r3, [pc, #12]	; (c2364 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c2358:	6003      	str	r3, [r0, #0]
   c235a:	4604      	mov	r4, r0
   c235c:	f7ff ffa6 	bl	c22ac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2360:	4620      	mov	r0, r4
   c2362:	bd10      	pop	{r4, pc}
   c2364:	000c8260 	.word	0x000c8260

000c2368 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c2368:	b510      	push	{r4, lr}
   c236a:	4604      	mov	r4, r0
   c236c:	f7ff fff2 	bl	c2354 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c2370:	4620      	mov	r0, r4
   c2372:	210c      	movs	r1, #12
   c2374:	f7f1 fe95 	bl	b40a2 <_ZdlPvj>
   c2378:	4620      	mov	r0, r4
   c237a:	bd10      	pop	{r4, pc}

000c237c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c237c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c237e:	9f08      	ldr	r7, [sp, #32]
   c2380:	4297      	cmp	r7, r2
   c2382:	4605      	mov	r5, r0
   c2384:	460e      	mov	r6, r1
   c2386:	4614      	mov	r4, r2
   c2388:	d00a      	beq.n	c23a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c238a:	68a8      	ldr	r0, [r5, #8]
   c238c:	6802      	ldr	r2, [r0, #0]
   c238e:	9708      	str	r7, [sp, #32]
   c2390:	6a15      	ldr	r5, [r2, #32]
   c2392:	4631      	mov	r1, r6
   c2394:	4622      	mov	r2, r4
   c2396:	46ac      	mov	ip, r5
   c2398:	b003      	add	sp, #12
   c239a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c239e:	4760      	bx	ip
   c23a0:	4619      	mov	r1, r3
   c23a2:	9301      	str	r3, [sp, #4]
   c23a4:	f000 f858 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c23a8:	9b01      	ldr	r3, [sp, #4]
   c23aa:	2800      	cmp	r0, #0
   c23ac:	d0ed      	beq.n	c238a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c23ae:	2006      	movs	r0, #6
   c23b0:	b003      	add	sp, #12
   c23b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c23b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c23b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c23b8:	460d      	mov	r5, r1
   c23ba:	4619      	mov	r1, r3
   c23bc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c23c0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c23c4:	4681      	mov	r9, r0
   c23c6:	4617      	mov	r7, r2
   c23c8:	4698      	mov	r8, r3
   c23ca:	f000 f845 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c23ce:	b190      	cbz	r0, c23f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c23d0:	2d00      	cmp	r5, #0
   c23d2:	6034      	str	r4, [r6, #0]
   c23d4:	7137      	strb	r7, [r6, #4]
   c23d6:	db09      	blt.n	c23ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c23d8:	1961      	adds	r1, r4, r5
   c23da:	458a      	cmp	sl, r1
   c23dc:	bf0c      	ite	eq
   c23de:	2106      	moveq	r1, #6
   c23e0:	2101      	movne	r1, #1
   c23e2:	71b1      	strb	r1, [r6, #6]
   c23e4:	2000      	movs	r0, #0
   c23e6:	b001      	add	sp, #4
   c23e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c23ec:	3502      	adds	r5, #2
   c23ee:	d1f9      	bne.n	c23e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c23f0:	2301      	movs	r3, #1
   c23f2:	71b3      	strb	r3, [r6, #6]
   c23f4:	e7f6      	b.n	c23e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c23f6:	4554      	cmp	r4, sl
   c23f8:	d106      	bne.n	c2408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c23fa:	4659      	mov	r1, fp
   c23fc:	4648      	mov	r0, r9
   c23fe:	f000 f82b 	bl	c2458 <_ZNKSt9type_infoeqERKS_>
   c2402:	b108      	cbz	r0, c2408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c2404:	7177      	strb	r7, [r6, #5]
   c2406:	e7ed      	b.n	c23e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c2408:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c240c:	6803      	ldr	r3, [r0, #0]
   c240e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c2412:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c2416:	69dc      	ldr	r4, [r3, #28]
   c2418:	463a      	mov	r2, r7
   c241a:	4643      	mov	r3, r8
   c241c:	4629      	mov	r1, r5
   c241e:	46a4      	mov	ip, r4
   c2420:	b001      	add	sp, #4
   c2422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2426:	4760      	bx	ip

000c2428 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c2428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c242c:	4607      	mov	r7, r0
   c242e:	460c      	mov	r4, r1
   c2430:	4615      	mov	r5, r2
   c2432:	461e      	mov	r6, r3
   c2434:	f7ff ff6d 	bl	c2312 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c2438:	b948      	cbnz	r0, c244e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c243a:	68b8      	ldr	r0, [r7, #8]
   c243c:	6803      	ldr	r3, [r0, #0]
   c243e:	699f      	ldr	r7, [r3, #24]
   c2440:	462a      	mov	r2, r5
   c2442:	4633      	mov	r3, r6
   c2444:	4621      	mov	r1, r4
   c2446:	46bc      	mov	ip, r7
   c2448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c244c:	4760      	bx	ip
   c244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c2452 <_ZNSt9type_infoD1Ev>:
   c2452:	4770      	bx	lr

000c2454 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2454:	2000      	movs	r0, #0
   c2456:	4770      	bx	lr

000c2458 <_ZNKSt9type_infoeqERKS_>:
   c2458:	4281      	cmp	r1, r0
   c245a:	b508      	push	{r3, lr}
   c245c:	d00e      	beq.n	c247c <_ZNKSt9type_infoeqERKS_+0x24>
   c245e:	6840      	ldr	r0, [r0, #4]
   c2460:	7803      	ldrb	r3, [r0, #0]
   c2462:	2b2a      	cmp	r3, #42	; 0x2a
   c2464:	d00c      	beq.n	c2480 <_ZNKSt9type_infoeqERKS_+0x28>
   c2466:	6849      	ldr	r1, [r1, #4]
   c2468:	780b      	ldrb	r3, [r1, #0]
   c246a:	2b2a      	cmp	r3, #42	; 0x2a
   c246c:	bf08      	it	eq
   c246e:	3101      	addeq	r1, #1
   c2470:	f002 f976 	bl	c4760 <strcmp>
   c2474:	fab0 f080 	clz	r0, r0
   c2478:	0940      	lsrs	r0, r0, #5
   c247a:	bd08      	pop	{r3, pc}
   c247c:	2001      	movs	r0, #1
   c247e:	e7fc      	b.n	c247a <_ZNKSt9type_infoeqERKS_+0x22>
   c2480:	2000      	movs	r0, #0
   c2482:	e7fa      	b.n	c247a <_ZNKSt9type_infoeqERKS_+0x22>

000c2484 <cosf>:
   c2484:	ee10 3a10 	vmov	r3, s0
   c2488:	4a18      	ldr	r2, [pc, #96]	; (c24ec <cosf+0x68>)
   c248a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c248e:	4293      	cmp	r3, r2
   c2490:	dd1b      	ble.n	c24ca <cosf+0x46>
   c2492:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c2496:	db02      	blt.n	c249e <cosf+0x1a>
   c2498:	ee30 0a40 	vsub.f32	s0, s0, s0
   c249c:	4770      	bx	lr
   c249e:	b500      	push	{lr}
   c24a0:	b083      	sub	sp, #12
   c24a2:	4668      	mov	r0, sp
   c24a4:	f000 fb12 	bl	c2acc <__ieee754_rem_pio2f>
   c24a8:	f000 0003 	and.w	r0, r0, #3
   c24ac:	2801      	cmp	r0, #1
   c24ae:	eddd 0a01 	vldr	s1, [sp, #4]
   c24b2:	ed9d 0a00 	vldr	s0, [sp]
   c24b6:	d00c      	beq.n	c24d2 <cosf+0x4e>
   c24b8:	2802      	cmp	r0, #2
   c24ba:	d012      	beq.n	c24e2 <cosf+0x5e>
   c24bc:	b170      	cbz	r0, c24dc <cosf+0x58>
   c24be:	2001      	movs	r0, #1
   c24c0:	f000 fff6 	bl	c34b0 <__kernel_sinf>
   c24c4:	b003      	add	sp, #12
   c24c6:	f85d fb04 	ldr.w	pc, [sp], #4
   c24ca:	eddf 0a09 	vldr	s1, [pc, #36]	; c24f0 <cosf+0x6c>
   c24ce:	f000 bc33 	b.w	c2d38 <__kernel_cosf>
   c24d2:	f000 ffed 	bl	c34b0 <__kernel_sinf>
   c24d6:	eeb1 0a40 	vneg.f32	s0, s0
   c24da:	e7f3      	b.n	c24c4 <cosf+0x40>
   c24dc:	f000 fc2c 	bl	c2d38 <__kernel_cosf>
   c24e0:	e7f0      	b.n	c24c4 <cosf+0x40>
   c24e2:	f000 fc29 	bl	c2d38 <__kernel_cosf>
   c24e6:	eeb1 0a40 	vneg.f32	s0, s0
   c24ea:	e7eb      	b.n	c24c4 <cosf+0x40>
   c24ec:	3f490fd8 	.word	0x3f490fd8
   c24f0:	00000000 	.word	0x00000000

000c24f4 <sinf>:
   c24f4:	ee10 3a10 	vmov	r3, s0
   c24f8:	4a19      	ldr	r2, [pc, #100]	; (c2560 <sinf+0x6c>)
   c24fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c24fe:	4293      	cmp	r3, r2
   c2500:	dd1c      	ble.n	c253c <sinf+0x48>
   c2502:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c2506:	db02      	blt.n	c250e <sinf+0x1a>
   c2508:	ee30 0a40 	vsub.f32	s0, s0, s0
   c250c:	4770      	bx	lr
   c250e:	b500      	push	{lr}
   c2510:	b083      	sub	sp, #12
   c2512:	4668      	mov	r0, sp
   c2514:	f000 fada 	bl	c2acc <__ieee754_rem_pio2f>
   c2518:	f000 0003 	and.w	r0, r0, #3
   c251c:	2801      	cmp	r0, #1
   c251e:	eddd 0a01 	vldr	s1, [sp, #4]
   c2522:	ed9d 0a00 	vldr	s0, [sp]
   c2526:	d00e      	beq.n	c2546 <sinf+0x52>
   c2528:	2802      	cmp	r0, #2
   c252a:	d013      	beq.n	c2554 <sinf+0x60>
   c252c:	b170      	cbz	r0, c254c <sinf+0x58>
   c252e:	f000 fc03 	bl	c2d38 <__kernel_cosf>
   c2532:	eeb1 0a40 	vneg.f32	s0, s0
   c2536:	b003      	add	sp, #12
   c2538:	f85d fb04 	ldr.w	pc, [sp], #4
   c253c:	eddf 0a09 	vldr	s1, [pc, #36]	; c2564 <sinf+0x70>
   c2540:	2000      	movs	r0, #0
   c2542:	f000 bfb5 	b.w	c34b0 <__kernel_sinf>
   c2546:	f000 fbf7 	bl	c2d38 <__kernel_cosf>
   c254a:	e7f4      	b.n	c2536 <sinf+0x42>
   c254c:	2001      	movs	r0, #1
   c254e:	f000 ffaf 	bl	c34b0 <__kernel_sinf>
   c2552:	e7f0      	b.n	c2536 <sinf+0x42>
   c2554:	2001      	movs	r0, #1
   c2556:	f000 ffab 	bl	c34b0 <__kernel_sinf>
   c255a:	eeb1 0a40 	vneg.f32	s0, s0
   c255e:	e7ea      	b.n	c2536 <sinf+0x42>
   c2560:	3f490fd8 	.word	0x3f490fd8
   c2564:	00000000 	.word	0x00000000

000c2568 <atan2>:
   c2568:	f000 b866 	b.w	c2638 <__ieee754_atan2>

000c256c <sqrt>:
   c256c:	b538      	push	{r3, r4, r5, lr}
   c256e:	ed2d 8b02 	vpush	{d8}
   c2572:	ec55 4b10 	vmov	r4, r5, d0
   c2576:	f000 f935 	bl	c27e4 <__ieee754_sqrt>
   c257a:	4b18      	ldr	r3, [pc, #96]	; (c25dc <sqrt+0x70>)
   c257c:	eeb0 8a40 	vmov.f32	s16, s0
   c2580:	eef0 8a60 	vmov.f32	s17, s1
   c2584:	f993 3000 	ldrsb.w	r3, [r3]
   c2588:	3301      	adds	r3, #1
   c258a:	d00d      	beq.n	c25a8 <sqrt+0x3c>
   c258c:	4622      	mov	r2, r4
   c258e:	462b      	mov	r3, r5
   c2590:	4620      	mov	r0, r4
   c2592:	4629      	mov	r1, r5
   c2594:	f001 ff6e 	bl	c4474 <__aeabi_dcmpun>
   c2598:	b930      	cbnz	r0, c25a8 <sqrt+0x3c>
   c259a:	2200      	movs	r2, #0
   c259c:	2300      	movs	r3, #0
   c259e:	4620      	mov	r0, r4
   c25a0:	4629      	mov	r1, r5
   c25a2:	f001 ff3f 	bl	c4424 <__aeabi_dcmplt>
   c25a6:	b930      	cbnz	r0, c25b6 <sqrt+0x4a>
   c25a8:	eeb0 0a48 	vmov.f32	s0, s16
   c25ac:	eef0 0a68 	vmov.f32	s1, s17
   c25b0:	ecbd 8b02 	vpop	{d8}
   c25b4:	bd38      	pop	{r3, r4, r5, pc}
   c25b6:	f7fb ff03 	bl	be3c0 <__errno>
   c25ba:	2200      	movs	r2, #0
   c25bc:	2300      	movs	r3, #0
   c25be:	2121      	movs	r1, #33	; 0x21
   c25c0:	6001      	str	r1, [r0, #0]
   c25c2:	4610      	mov	r0, r2
   c25c4:	4619      	mov	r1, r3
   c25c6:	f001 fde5 	bl	c4194 <__aeabi_ddiv>
   c25ca:	ec41 0b18 	vmov	d8, r0, r1
   c25ce:	eeb0 0a48 	vmov.f32	s0, s16
   c25d2:	eef0 0a68 	vmov.f32	s1, s17
   c25d6:	ecbd 8b02 	vpop	{d8}
   c25da:	bd38      	pop	{r3, r4, r5, pc}
   c25dc:	2003db44 	.word	0x2003db44

000c25e0 <atan2f>:
   c25e0:	f000 b9cc 	b.w	c297c <__ieee754_atan2f>

000c25e4 <sqrtf>:
   c25e4:	b508      	push	{r3, lr}
   c25e6:	ed2d 8b02 	vpush	{d8}
   c25ea:	eeb0 8a40 	vmov.f32	s16, s0
   c25ee:	f000 fb9f 	bl	c2d30 <__ieee754_sqrtf>
   c25f2:	4b0e      	ldr	r3, [pc, #56]	; (c262c <sqrtf+0x48>)
   c25f4:	f993 3000 	ldrsb.w	r3, [r3]
   c25f8:	3301      	adds	r3, #1
   c25fa:	d00b      	beq.n	c2614 <sqrtf+0x30>
   c25fc:	eeb4 8a48 	vcmp.f32	s16, s16
   c2600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2604:	d606      	bvs.n	c2614 <sqrtf+0x30>
   c2606:	eddf 8a0a 	vldr	s17, [pc, #40]	; c2630 <sqrtf+0x4c>
   c260a:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2612:	d402      	bmi.n	c261a <sqrtf+0x36>
   c2614:	ecbd 8b02 	vpop	{d8}
   c2618:	bd08      	pop	{r3, pc}
   c261a:	f7fb fed1 	bl	be3c0 <__errno>
   c261e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c2622:	ecbd 8b02 	vpop	{d8}
   c2626:	2321      	movs	r3, #33	; 0x21
   c2628:	6003      	str	r3, [r0, #0]
   c262a:	bd08      	pop	{r3, pc}
   c262c:	2003db44 	.word	0x2003db44
	...

000c2638 <__ieee754_atan2>:
   c2638:	ec51 0b11 	vmov	r0, r1, d1
   c263c:	4243      	negs	r3, r0
   c263e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2642:	4303      	orrs	r3, r0
   c2644:	4e64      	ldr	r6, [pc, #400]	; (c27d8 <__ieee754_atan2+0x1a0>)
   c2646:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c264a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c264e:	42b3      	cmp	r3, r6
   c2650:	ec55 4b10 	vmov	r4, r5, d0
   c2654:	d83e      	bhi.n	c26d4 <__ieee754_atan2+0x9c>
   c2656:	4263      	negs	r3, r4
   c2658:	4323      	orrs	r3, r4
   c265a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c265e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c2662:	42b3      	cmp	r3, r6
   c2664:	46a9      	mov	r9, r5
   c2666:	d835      	bhi.n	c26d4 <__ieee754_atan2+0x9c>
   c2668:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c266c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2670:	4303      	orrs	r3, r0
   c2672:	d03e      	beq.n	c26f2 <__ieee754_atan2+0xba>
   c2674:	178f      	asrs	r7, r1, #30
   c2676:	f007 0702 	and.w	r7, r7, #2
   c267a:	ea5a 0304 	orrs.w	r3, sl, r4
   c267e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c2682:	d02f      	beq.n	c26e4 <__ieee754_atan2+0xac>
   c2684:	ea5e 0300 	orrs.w	r3, lr, r0
   c2688:	d037      	beq.n	c26fa <__ieee754_atan2+0xc2>
   c268a:	45b6      	cmp	lr, r6
   c268c:	d044      	beq.n	c2718 <__ieee754_atan2+0xe0>
   c268e:	45b2      	cmp	sl, r6
   c2690:	d033      	beq.n	c26fa <__ieee754_atan2+0xc2>
   c2692:	ebaa 0e0e 	sub.w	lr, sl, lr
   c2696:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c269a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c269e:	da38      	bge.n	c2712 <__ieee754_atan2+0xda>
   c26a0:	2900      	cmp	r1, #0
   c26a2:	da45      	bge.n	c2730 <__ieee754_atan2+0xf8>
   c26a4:	333c      	adds	r3, #60	; 0x3c
   c26a6:	da43      	bge.n	c2730 <__ieee754_atan2+0xf8>
   c26a8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c27a0 <__ieee754_atan2+0x168>
   c26ac:	2f01      	cmp	r7, #1
   c26ae:	d05d      	beq.n	c276c <__ieee754_atan2+0x134>
   c26b0:	2f02      	cmp	r7, #2
   c26b2:	d04a      	beq.n	c274a <__ieee754_atan2+0x112>
   c26b4:	b1a7      	cbz	r7, c26e0 <__ieee754_atan2+0xa8>
   c26b6:	ec51 0b10 	vmov	r0, r1, d0
   c26ba:	a33b      	add	r3, pc, #236	; (adr r3, c27a8 <__ieee754_atan2+0x170>)
   c26bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c26c0:	f001 fa86 	bl	c3bd0 <__aeabi_dsub>
   c26c4:	a33a      	add	r3, pc, #232	; (adr r3, c27b0 <__ieee754_atan2+0x178>)
   c26c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c26ca:	f001 fa81 	bl	c3bd0 <__aeabi_dsub>
   c26ce:	ec41 0b10 	vmov	d0, r0, r1
   c26d2:	e005      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c26d4:	4622      	mov	r2, r4
   c26d6:	462b      	mov	r3, r5
   c26d8:	f001 fa7c 	bl	c3bd4 <__adddf3>
   c26dc:	ec41 0b10 	vmov	d0, r0, r1
   c26e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c26e4:	2f02      	cmp	r7, #2
   c26e6:	d00e      	beq.n	c2706 <__ieee754_atan2+0xce>
   c26e8:	2f03      	cmp	r7, #3
   c26ea:	d1f9      	bne.n	c26e0 <__ieee754_atan2+0xa8>
   c26ec:	ed9f 0b32 	vldr	d0, [pc, #200]	; c27b8 <__ieee754_atan2+0x180>
   c26f0:	e7f6      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c26f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c26f6:	f000 bf23 	b.w	c3540 <atan>
   c26fa:	f1b9 0f00 	cmp.w	r9, #0
   c26fe:	db05      	blt.n	c270c <__ieee754_atan2+0xd4>
   c2700:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c27c0 <__ieee754_atan2+0x188>
   c2704:	e7ec      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c2706:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c27b0 <__ieee754_atan2+0x178>
   c270a:	e7e9      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c270c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c27c8 <__ieee754_atan2+0x190>
   c2710:	e7e6      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c2712:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c27c0 <__ieee754_atan2+0x188>
   c2716:	e7c9      	b.n	c26ac <__ieee754_atan2+0x74>
   c2718:	45f2      	cmp	sl, lr
   c271a:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c271e:	d02e      	beq.n	c277e <__ieee754_atan2+0x146>
   c2720:	2f02      	cmp	r7, #2
   c2722:	d834      	bhi.n	c278e <__ieee754_atan2+0x156>
   c2724:	4b2d      	ldr	r3, [pc, #180]	; (c27dc <__ieee754_atan2+0x1a4>)
   c2726:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c272a:	ed97 0b00 	vldr	d0, [r7]
   c272e:	e7d7      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c2730:	4602      	mov	r2, r0
   c2732:	460b      	mov	r3, r1
   c2734:	4620      	mov	r0, r4
   c2736:	4629      	mov	r1, r5
   c2738:	f001 fd2c 	bl	c4194 <__aeabi_ddiv>
   c273c:	ec41 0b10 	vmov	d0, r0, r1
   c2740:	f001 f89e 	bl	c3880 <fabs>
   c2744:	f000 fefc 	bl	c3540 <atan>
   c2748:	e7b0      	b.n	c26ac <__ieee754_atan2+0x74>
   c274a:	a317      	add	r3, pc, #92	; (adr r3, c27a8 <__ieee754_atan2+0x170>)
   c274c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2750:	ec51 0b10 	vmov	r0, r1, d0
   c2754:	f001 fa3c 	bl	c3bd0 <__aeabi_dsub>
   c2758:	4602      	mov	r2, r0
   c275a:	460b      	mov	r3, r1
   c275c:	a114      	add	r1, pc, #80	; (adr r1, c27b0 <__ieee754_atan2+0x178>)
   c275e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2762:	f001 fa35 	bl	c3bd0 <__aeabi_dsub>
   c2766:	ec41 0b10 	vmov	d0, r0, r1
   c276a:	e7b9      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c276c:	ee10 1a90 	vmov	r1, s1
   c2770:	ec53 2b10 	vmov	r2, r3, d0
   c2774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2778:	ec43 2b10 	vmov	d0, r2, r3
   c277c:	e7b0      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c277e:	2f02      	cmp	r7, #2
   c2780:	d808      	bhi.n	c2794 <__ieee754_atan2+0x15c>
   c2782:	4b17      	ldr	r3, [pc, #92]	; (c27e0 <__ieee754_atan2+0x1a8>)
   c2784:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2788:	ed97 0b00 	vldr	d0, [r7]
   c278c:	e7a8      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c278e:	ed9f 0b04 	vldr	d0, [pc, #16]	; c27a0 <__ieee754_atan2+0x168>
   c2792:	e7a5      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c2794:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c27d0 <__ieee754_atan2+0x198>
   c2798:	e7a2      	b.n	c26e0 <__ieee754_atan2+0xa8>
   c279a:	bf00      	nop
   c279c:	f3af 8000 	nop.w
	...
   c27a8:	33145c07 	.word	0x33145c07
   c27ac:	3ca1a626 	.word	0x3ca1a626
   c27b0:	54442d18 	.word	0x54442d18
   c27b4:	400921fb 	.word	0x400921fb
   c27b8:	54442d18 	.word	0x54442d18
   c27bc:	c00921fb 	.word	0xc00921fb
   c27c0:	54442d18 	.word	0x54442d18
   c27c4:	3ff921fb 	.word	0x3ff921fb
   c27c8:	54442d18 	.word	0x54442d18
   c27cc:	bff921fb 	.word	0xbff921fb
   c27d0:	54442d18 	.word	0x54442d18
   c27d4:	3fe921fb 	.word	0x3fe921fb
   c27d8:	7ff00000 	.word	0x7ff00000
   c27dc:	000c82b8 	.word	0x000c82b8
   c27e0:	000c82a0 	.word	0x000c82a0

000c27e4 <__ieee754_sqrt>:
   c27e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c27e8:	4a63      	ldr	r2, [pc, #396]	; (c2978 <__ieee754_sqrt+0x194>)
   c27ea:	ec55 4b10 	vmov	r4, r5, d0
   c27ee:	43aa      	bics	r2, r5
   c27f0:	f000 809f 	beq.w	c2932 <__ieee754_sqrt+0x14e>
   c27f4:	2d00      	cmp	r5, #0
   c27f6:	ee10 ca10 	vmov	ip, s0
   c27fa:	462b      	mov	r3, r5
   c27fc:	dd54      	ble.n	c28a8 <__ieee754_sqrt+0xc4>
   c27fe:	1529      	asrs	r1, r5, #20
   c2800:	d063      	beq.n	c28ca <__ieee754_sqrt+0xe6>
   c2802:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c2806:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c280a:	07c9      	lsls	r1, r1, #31
   c280c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c2810:	d404      	bmi.n	c281c <__ieee754_sqrt+0x38>
   c2812:	005b      	lsls	r3, r3, #1
   c2814:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2818:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c281c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c2820:	2600      	movs	r6, #0
   c2822:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c2826:	107f      	asrs	r7, r7, #1
   c2828:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c282c:	f04f 0e16 	mov.w	lr, #22
   c2830:	4634      	mov	r4, r6
   c2832:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c2836:	18a1      	adds	r1, r4, r2
   c2838:	4299      	cmp	r1, r3
   c283a:	dc02      	bgt.n	c2842 <__ieee754_sqrt+0x5e>
   c283c:	1a5b      	subs	r3, r3, r1
   c283e:	188c      	adds	r4, r1, r2
   c2840:	4416      	add	r6, r2
   c2842:	005b      	lsls	r3, r3, #1
   c2844:	f1be 0e01 	subs.w	lr, lr, #1
   c2848:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c284c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2850:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2854:	d1ef      	bne.n	c2836 <__ieee754_sqrt+0x52>
   c2856:	4675      	mov	r5, lr
   c2858:	2020      	movs	r0, #32
   c285a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c285e:	e00a      	b.n	c2876 <__ieee754_sqrt+0x92>
   c2860:	d044      	beq.n	c28ec <__ieee754_sqrt+0x108>
   c2862:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c2866:	3801      	subs	r0, #1
   c2868:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c286c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2870:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2874:	d043      	beq.n	c28fe <__ieee754_sqrt+0x11a>
   c2876:	42a3      	cmp	r3, r4
   c2878:	eb02 010e 	add.w	r1, r2, lr
   c287c:	ddf0      	ble.n	c2860 <__ieee754_sqrt+0x7c>
   c287e:	2900      	cmp	r1, #0
   c2880:	eb01 0e02 	add.w	lr, r1, r2
   c2884:	db0a      	blt.n	c289c <__ieee754_sqrt+0xb8>
   c2886:	46a0      	mov	r8, r4
   c2888:	1b1b      	subs	r3, r3, r4
   c288a:	4561      	cmp	r1, ip
   c288c:	bf88      	it	hi
   c288e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c2892:	ebac 0c01 	sub.w	ip, ip, r1
   c2896:	4415      	add	r5, r2
   c2898:	4644      	mov	r4, r8
   c289a:	e7e2      	b.n	c2862 <__ieee754_sqrt+0x7e>
   c289c:	f1be 0f00 	cmp.w	lr, #0
   c28a0:	dbf1      	blt.n	c2886 <__ieee754_sqrt+0xa2>
   c28a2:	f104 0801 	add.w	r8, r4, #1
   c28a6:	e7ef      	b.n	c2888 <__ieee754_sqrt+0xa4>
   c28a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c28ac:	4322      	orrs	r2, r4
   c28ae:	d038      	beq.n	c2922 <__ieee754_sqrt+0x13e>
   c28b0:	2d00      	cmp	r5, #0
   c28b2:	d14e      	bne.n	c2952 <__ieee754_sqrt+0x16e>
   c28b4:	4629      	mov	r1, r5
   c28b6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c28ba:	3915      	subs	r1, #21
   c28bc:	4613      	mov	r3, r2
   c28be:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c28c2:	2a00      	cmp	r2, #0
   c28c4:	d0f7      	beq.n	c28b6 <__ieee754_sqrt+0xd2>
   c28c6:	02d6      	lsls	r6, r2, #11
   c28c8:	d450      	bmi.n	c296c <__ieee754_sqrt+0x188>
   c28ca:	2000      	movs	r0, #0
   c28cc:	005b      	lsls	r3, r3, #1
   c28ce:	02dd      	lsls	r5, r3, #11
   c28d0:	4604      	mov	r4, r0
   c28d2:	f100 0001 	add.w	r0, r0, #1
   c28d6:	d5f9      	bpl.n	c28cc <__ieee754_sqrt+0xe8>
   c28d8:	461a      	mov	r2, r3
   c28da:	4663      	mov	r3, ip
   c28dc:	fa0c fc00 	lsl.w	ip, ip, r0
   c28e0:	f1c0 0020 	rsb	r0, r0, #32
   c28e4:	40c3      	lsrs	r3, r0
   c28e6:	1b09      	subs	r1, r1, r4
   c28e8:	4313      	orrs	r3, r2
   c28ea:	e78a      	b.n	c2802 <__ieee754_sqrt+0x1e>
   c28ec:	4561      	cmp	r1, ip
   c28ee:	d8b8      	bhi.n	c2862 <__ieee754_sqrt+0x7e>
   c28f0:	2900      	cmp	r1, #0
   c28f2:	eb01 0e02 	add.w	lr, r1, r2
   c28f6:	dbd1      	blt.n	c289c <__ieee754_sqrt+0xb8>
   c28f8:	4698      	mov	r8, r3
   c28fa:	2300      	movs	r3, #0
   c28fc:	e7c9      	b.n	c2892 <__ieee754_sqrt+0xae>
   c28fe:	ea53 030c 	orrs.w	r3, r3, ip
   c2902:	d110      	bne.n	c2926 <__ieee754_sqrt+0x142>
   c2904:	0868      	lsrs	r0, r5, #1
   c2906:	1071      	asrs	r1, r6, #1
   c2908:	07f3      	lsls	r3, r6, #31
   c290a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c290e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c2912:	bf48      	it	mi
   c2914:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c2918:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c291c:	4602      	mov	r2, r0
   c291e:	ec43 2b10 	vmov	d0, r2, r3
   c2922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2926:	1c6a      	adds	r2, r5, #1
   c2928:	bf16      	itet	ne
   c292a:	1c68      	addne	r0, r5, #1
   c292c:	3601      	addeq	r6, #1
   c292e:	0840      	lsrne	r0, r0, #1
   c2930:	e7e9      	b.n	c2906 <__ieee754_sqrt+0x122>
   c2932:	ee10 2a10 	vmov	r2, s0
   c2936:	ee10 0a10 	vmov	r0, s0
   c293a:	462b      	mov	r3, r5
   c293c:	4629      	mov	r1, r5
   c293e:	f001 faff 	bl	c3f40 <__aeabi_dmul>
   c2942:	4622      	mov	r2, r4
   c2944:	462b      	mov	r3, r5
   c2946:	f001 f945 	bl	c3bd4 <__adddf3>
   c294a:	ec41 0b10 	vmov	d0, r0, r1
   c294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2952:	ee10 2a10 	vmov	r2, s0
   c2956:	4620      	mov	r0, r4
   c2958:	4629      	mov	r1, r5
   c295a:	f001 f939 	bl	c3bd0 <__aeabi_dsub>
   c295e:	4602      	mov	r2, r0
   c2960:	460b      	mov	r3, r1
   c2962:	f001 fc17 	bl	c4194 <__aeabi_ddiv>
   c2966:	ec41 0b10 	vmov	d0, r0, r1
   c296a:	e7da      	b.n	c2922 <__ieee754_sqrt+0x13e>
   c296c:	4663      	mov	r3, ip
   c296e:	2020      	movs	r0, #32
   c2970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c2974:	e7b6      	b.n	c28e4 <__ieee754_sqrt+0x100>
   c2976:	bf00      	nop
   c2978:	7ff00000 	.word	0x7ff00000

000c297c <__ieee754_atan2f>:
   c297c:	b510      	push	{r4, lr}
   c297e:	b082      	sub	sp, #8
   c2980:	edcd 0a01 	vstr	s1, [sp, #4]
   c2984:	9b01      	ldr	r3, [sp, #4]
   c2986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c298a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c298e:	eef0 7a40 	vmov.f32	s15, s0
   c2992:	dc30      	bgt.n	c29f6 <__ieee754_atan2f+0x7a>
   c2994:	ee10 0a10 	vmov	r0, s0
   c2998:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c299c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c29a0:	dc29      	bgt.n	c29f6 <__ieee754_atan2f+0x7a>
   c29a2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c29a6:	d042      	beq.n	c2a2e <__ieee754_atan2f+0xb2>
   c29a8:	179c      	asrs	r4, r3, #30
   c29aa:	f004 0402 	and.w	r4, r4, #2
   c29ae:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c29b2:	b331      	cbz	r1, c2a02 <__ieee754_atan2f+0x86>
   c29b4:	b37a      	cbz	r2, c2a16 <__ieee754_atan2f+0x9a>
   c29b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c29ba:	d040      	beq.n	c2a3e <__ieee754_atan2f+0xc2>
   c29bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c29c0:	d029      	beq.n	c2a16 <__ieee754_atan2f+0x9a>
   c29c2:	1a8a      	subs	r2, r1, r2
   c29c4:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c29c8:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c29cc:	da34      	bge.n	c2a38 <__ieee754_atan2f+0xbc>
   c29ce:	2b00      	cmp	r3, #0
   c29d0:	da42      	bge.n	c2a58 <__ieee754_atan2f+0xdc>
   c29d2:	313c      	adds	r1, #60	; 0x3c
   c29d4:	da40      	bge.n	c2a58 <__ieee754_atan2f+0xdc>
   c29d6:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2aa8 <__ieee754_atan2f+0x12c>
   c29da:	2c01      	cmp	r4, #1
   c29dc:	d04e      	beq.n	c2a7c <__ieee754_atan2f+0x100>
   c29de:	2c02      	cmp	r4, #2
   c29e0:	d043      	beq.n	c2a6a <__ieee754_atan2f+0xee>
   c29e2:	b164      	cbz	r4, c29fe <__ieee754_atan2f+0x82>
   c29e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; c2aac <__ieee754_atan2f+0x130>
   c29e8:	eddf 7a31 	vldr	s15, [pc, #196]	; c2ab0 <__ieee754_atan2f+0x134>
   c29ec:	ee30 0a07 	vadd.f32	s0, s0, s14
   c29f0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c29f4:	e003      	b.n	c29fe <__ieee754_atan2f+0x82>
   c29f6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c29fa:	ee37 0a27 	vadd.f32	s0, s14, s15
   c29fe:	b002      	add	sp, #8
   c2a00:	bd10      	pop	{r4, pc}
   c2a02:	2c02      	cmp	r4, #2
   c2a04:	d010      	beq.n	c2a28 <__ieee754_atan2f+0xac>
   c2a06:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2ab4 <__ieee754_atan2f+0x138>
   c2a0a:	2c03      	cmp	r4, #3
   c2a0c:	bf18      	it	ne
   c2a0e:	eeb0 0a67 	vmovne.f32	s0, s15
   c2a12:	b002      	add	sp, #8
   c2a14:	bd10      	pop	{r4, pc}
   c2a16:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2ab8 <__ieee754_atan2f+0x13c>
   c2a1a:	eddf 7a28 	vldr	s15, [pc, #160]	; c2abc <__ieee754_atan2f+0x140>
   c2a1e:	2800      	cmp	r0, #0
   c2a20:	bfb8      	it	lt
   c2a22:	eeb0 0a67 	vmovlt.f32	s0, s15
   c2a26:	e7ea      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a28:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2ab0 <__ieee754_atan2f+0x134>
   c2a2c:	e7e7      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a2e:	b002      	add	sp, #8
   c2a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2a34:	f000 bf2e 	b.w	c3894 <atanf>
   c2a38:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2ab8 <__ieee754_atan2f+0x13c>
   c2a3c:	e7cd      	b.n	c29da <__ieee754_atan2f+0x5e>
   c2a3e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2a42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c2a46:	d020      	beq.n	c2a8a <__ieee754_atan2f+0x10e>
   c2a48:	2c02      	cmp	r4, #2
   c2a4a:	d826      	bhi.n	c2a9a <__ieee754_atan2f+0x11e>
   c2a4c:	4b1c      	ldr	r3, [pc, #112]	; (c2ac0 <__ieee754_atan2f+0x144>)
   c2a4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2a52:	ed94 0a00 	vldr	s0, [r4]
   c2a56:	e7d2      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a58:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2a5c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2a60:	f000 fff2 	bl	c3a48 <fabsf>
   c2a64:	f000 ff16 	bl	c3894 <atanf>
   c2a68:	e7b7      	b.n	c29da <__ieee754_atan2f+0x5e>
   c2a6a:	ed9f 7a10 	vldr	s14, [pc, #64]	; c2aac <__ieee754_atan2f+0x130>
   c2a6e:	eddf 7a10 	vldr	s15, [pc, #64]	; c2ab0 <__ieee754_atan2f+0x134>
   c2a72:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2a76:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c2a7a:	e7c0      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a7c:	ee10 3a10 	vmov	r3, s0
   c2a80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c2a84:	ee00 3a10 	vmov	s0, r3
   c2a88:	e7b9      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a8a:	2c02      	cmp	r4, #2
   c2a8c:	d808      	bhi.n	c2aa0 <__ieee754_atan2f+0x124>
   c2a8e:	4b0d      	ldr	r3, [pc, #52]	; (c2ac4 <__ieee754_atan2f+0x148>)
   c2a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2a94:	ed94 0a00 	vldr	s0, [r4]
   c2a98:	e7b1      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2a9a:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2aa8 <__ieee754_atan2f+0x12c>
   c2a9e:	e7ae      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2aa0:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2ac8 <__ieee754_atan2f+0x14c>
   c2aa4:	e7ab      	b.n	c29fe <__ieee754_atan2f+0x82>
   c2aa6:	bf00      	nop
   c2aa8:	00000000 	.word	0x00000000
   c2aac:	33bbbd2e 	.word	0x33bbbd2e
   c2ab0:	40490fdb 	.word	0x40490fdb
   c2ab4:	c0490fdb 	.word	0xc0490fdb
   c2ab8:	3fc90fdb 	.word	0x3fc90fdb
   c2abc:	bfc90fdb 	.word	0xbfc90fdb
   c2ac0:	000c82dc 	.word	0x000c82dc
   c2ac4:	000c82d0 	.word	0x000c82d0
   c2ac8:	3f490fdb 	.word	0x3f490fdb

000c2acc <__ieee754_rem_pio2f>:
   c2acc:	b570      	push	{r4, r5, r6, lr}
   c2ace:	ee10 3a10 	vmov	r3, s0
   c2ad2:	4a89      	ldr	r2, [pc, #548]	; (c2cf8 <__ieee754_rem_pio2f+0x22c>)
   c2ad4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2ad8:	4294      	cmp	r4, r2
   c2ada:	b086      	sub	sp, #24
   c2adc:	4605      	mov	r5, r0
   c2ade:	dd70      	ble.n	c2bc2 <__ieee754_rem_pio2f+0xf6>
   c2ae0:	4a86      	ldr	r2, [pc, #536]	; (c2cfc <__ieee754_rem_pio2f+0x230>)
   c2ae2:	4294      	cmp	r4, r2
   c2ae4:	ee10 6a10 	vmov	r6, s0
   c2ae8:	dc22      	bgt.n	c2b30 <__ieee754_rem_pio2f+0x64>
   c2aea:	2b00      	cmp	r3, #0
   c2aec:	eddf 7a84 	vldr	s15, [pc, #528]	; c2d00 <__ieee754_rem_pio2f+0x234>
   c2af0:	4a84      	ldr	r2, [pc, #528]	; (c2d04 <__ieee754_rem_pio2f+0x238>)
   c2af2:	f024 040f 	bic.w	r4, r4, #15
   c2af6:	eeb0 7a40 	vmov.f32	s14, s0
   c2afa:	f340 80e4 	ble.w	c2cc6 <__ieee754_rem_pio2f+0x1fa>
   c2afe:	4294      	cmp	r4, r2
   c2b00:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2b04:	bf09      	itett	eq
   c2b06:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2d08 <__ieee754_rem_pio2f+0x23c>
   c2b0a:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2d0c <__ieee754_rem_pio2f+0x240>
   c2b0e:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2d10 <__ieee754_rem_pio2f+0x244>
   c2b12:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c2b16:	2001      	movs	r0, #1
   c2b18:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c2b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2b20:	edc5 6a00 	vstr	s13, [r5]
   c2b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b28:	edc5 7a01 	vstr	s15, [r5, #4]
   c2b2c:	b006      	add	sp, #24
   c2b2e:	bd70      	pop	{r4, r5, r6, pc}
   c2b30:	4a78      	ldr	r2, [pc, #480]	; (c2d14 <__ieee754_rem_pio2f+0x248>)
   c2b32:	4294      	cmp	r4, r2
   c2b34:	dd54      	ble.n	c2be0 <__ieee754_rem_pio2f+0x114>
   c2b36:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2b3a:	da49      	bge.n	c2bd0 <__ieee754_rem_pio2f+0x104>
   c2b3c:	15e2      	asrs	r2, r4, #23
   c2b3e:	3a86      	subs	r2, #134	; 0x86
   c2b40:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2b44:	ee07 3a90 	vmov	s15, r3
   c2b48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2b4c:	eddf 6a72 	vldr	s13, [pc, #456]	; c2d18 <__ieee754_rem_pio2f+0x24c>
   c2b50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b58:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2b60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b6c:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2b74:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b7c:	edcd 7a05 	vstr	s15, [sp, #20]
   c2b80:	f040 8090 	bne.w	c2ca4 <__ieee754_rem_pio2f+0x1d8>
   c2b84:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b8c:	bf14      	ite	ne
   c2b8e:	2302      	movne	r3, #2
   c2b90:	2301      	moveq	r3, #1
   c2b92:	4962      	ldr	r1, [pc, #392]	; (c2d1c <__ieee754_rem_pio2f+0x250>)
   c2b94:	9101      	str	r1, [sp, #4]
   c2b96:	2102      	movs	r1, #2
   c2b98:	9100      	str	r1, [sp, #0]
   c2b9a:	a803      	add	r0, sp, #12
   c2b9c:	4629      	mov	r1, r5
   c2b9e:	f000 f94d 	bl	c2e3c <__kernel_rem_pio2f>
   c2ba2:	2e00      	cmp	r6, #0
   c2ba4:	dac2      	bge.n	c2b2c <__ieee754_rem_pio2f+0x60>
   c2ba6:	ed95 7a00 	vldr	s14, [r5]
   c2baa:	edd5 7a01 	vldr	s15, [r5, #4]
   c2bae:	eeb1 7a47 	vneg.f32	s14, s14
   c2bb2:	eef1 7a67 	vneg.f32	s15, s15
   c2bb6:	ed85 7a00 	vstr	s14, [r5]
   c2bba:	edc5 7a01 	vstr	s15, [r5, #4]
   c2bbe:	4240      	negs	r0, r0
   c2bc0:	e7b4      	b.n	c2b2c <__ieee754_rem_pio2f+0x60>
   c2bc2:	2200      	movs	r2, #0
   c2bc4:	ed85 0a00 	vstr	s0, [r5]
   c2bc8:	6042      	str	r2, [r0, #4]
   c2bca:	2000      	movs	r0, #0
   c2bcc:	b006      	add	sp, #24
   c2bce:	bd70      	pop	{r4, r5, r6, pc}
   c2bd0:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2bd4:	2000      	movs	r0, #0
   c2bd6:	edc5 7a01 	vstr	s15, [r5, #4]
   c2bda:	edc5 7a00 	vstr	s15, [r5]
   c2bde:	e7a5      	b.n	c2b2c <__ieee754_rem_pio2f+0x60>
   c2be0:	f000 ff32 	bl	c3a48 <fabsf>
   c2be4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2d20 <__ieee754_rem_pio2f+0x254>
   c2be8:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2d00 <__ieee754_rem_pio2f+0x234>
   c2bec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2bf0:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2bf4:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2d0c <__ieee754_rem_pio2f+0x240>
   c2bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2bfc:	ee17 0a90 	vmov	r0, s15
   c2c00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2c04:	281f      	cmp	r0, #31
   c2c06:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2c0a:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2c0e:	eeb1 6a66 	vneg.f32	s12, s13
   c2c12:	dc1e      	bgt.n	c2c52 <__ieee754_rem_pio2f+0x186>
   c2c14:	4a43      	ldr	r2, [pc, #268]	; (c2d24 <__ieee754_rem_pio2f+0x258>)
   c2c16:	1e41      	subs	r1, r0, #1
   c2c18:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2c1c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2c20:	4293      	cmp	r3, r2
   c2c22:	d016      	beq.n	c2c52 <__ieee754_rem_pio2f+0x186>
   c2c24:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2c28:	ed85 7a00 	vstr	s14, [r5]
   c2c2c:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2c30:	2e00      	cmp	r6, #0
   c2c32:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2c36:	ed85 0a01 	vstr	s0, [r5, #4]
   c2c3a:	f6bf af77 	bge.w	c2b2c <__ieee754_rem_pio2f+0x60>
   c2c3e:	eeb1 7a47 	vneg.f32	s14, s14
   c2c42:	eeb1 0a40 	vneg.f32	s0, s0
   c2c46:	ed85 7a00 	vstr	s14, [r5]
   c2c4a:	ed85 0a01 	vstr	s0, [r5, #4]
   c2c4e:	4240      	negs	r0, r0
   c2c50:	e76c      	b.n	c2b2c <__ieee754_rem_pio2f+0x60>
   c2c52:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2c56:	15e2      	asrs	r2, r4, #23
   c2c58:	ee17 3a10 	vmov	r3, s14
   c2c5c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2c60:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2c64:	2c08      	cmp	r4, #8
   c2c66:	dddf      	ble.n	c2c28 <__ieee754_rem_pio2f+0x15c>
   c2c68:	eddf 7a27 	vldr	s15, [pc, #156]	; c2d08 <__ieee754_rem_pio2f+0x23c>
   c2c6c:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2d10 <__ieee754_rem_pio2f+0x244>
   c2c70:	eef0 5a40 	vmov.f32	s11, s0
   c2c74:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2c78:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2c7c:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2c80:	eef0 7a40 	vmov.f32	s15, s0
   c2c84:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2c88:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2c8c:	ee17 3a10 	vmov	r3, s14
   c2c90:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2c94:	1ad2      	subs	r2, r2, r3
   c2c96:	2a19      	cmp	r2, #25
   c2c98:	dc06      	bgt.n	c2ca8 <__ieee754_rem_pio2f+0x1dc>
   c2c9a:	eeb0 0a65 	vmov.f32	s0, s11
   c2c9e:	ed85 7a00 	vstr	s14, [r5]
   c2ca2:	e7c3      	b.n	c2c2c <__ieee754_rem_pio2f+0x160>
   c2ca4:	2303      	movs	r3, #3
   c2ca6:	e774      	b.n	c2b92 <__ieee754_rem_pio2f+0xc6>
   c2ca8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2d28 <__ieee754_rem_pio2f+0x25c>
   c2cac:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2d2c <__ieee754_rem_pio2f+0x260>
   c2cb0:	eeb0 0a65 	vmov.f32	s0, s11
   c2cb4:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2cb8:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2cbc:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2cc0:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2cc4:	e7ae      	b.n	c2c24 <__ieee754_rem_pio2f+0x158>
   c2cc6:	4294      	cmp	r4, r2
   c2cc8:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2ccc:	bf09      	itett	eq
   c2cce:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2d08 <__ieee754_rem_pio2f+0x23c>
   c2cd2:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2d0c <__ieee754_rem_pio2f+0x240>
   c2cd6:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2d10 <__ieee754_rem_pio2f+0x244>
   c2cda:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2ce2:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2ce6:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2cea:	edc5 6a00 	vstr	s13, [r5]
   c2cee:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2cf2:	edc5 7a01 	vstr	s15, [r5, #4]
   c2cf6:	e719      	b.n	c2b2c <__ieee754_rem_pio2f+0x60>
   c2cf8:	3f490fd8 	.word	0x3f490fd8
   c2cfc:	4016cbe3 	.word	0x4016cbe3
   c2d00:	3fc90f80 	.word	0x3fc90f80
   c2d04:	3fc90fd0 	.word	0x3fc90fd0
   c2d08:	37354400 	.word	0x37354400
   c2d0c:	37354443 	.word	0x37354443
   c2d10:	2e85a308 	.word	0x2e85a308
   c2d14:	43490f80 	.word	0x43490f80
   c2d18:	43800000 	.word	0x43800000
   c2d1c:	000c8368 	.word	0x000c8368
   c2d20:	3f22f984 	.word	0x3f22f984
   c2d24:	000c82e8 	.word	0x000c82e8
   c2d28:	2e85a300 	.word	0x2e85a300
   c2d2c:	248d3132 	.word	0x248d3132

000c2d30 <__ieee754_sqrtf>:
   c2d30:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2d34:	4770      	bx	lr
   c2d36:	bf00      	nop

000c2d38 <__kernel_cosf>:
   c2d38:	ee10 3a10 	vmov	r3, s0
   c2d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2d40:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2d44:	da2c      	bge.n	c2da0 <__kernel_cosf+0x68>
   c2d46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2d4a:	ee17 3a90 	vmov	r3, s15
   c2d4e:	2b00      	cmp	r3, #0
   c2d50:	d060      	beq.n	c2e14 <__kernel_cosf+0xdc>
   c2d52:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2d56:	eddf 7a31 	vldr	s15, [pc, #196]	; c2e1c <__kernel_cosf+0xe4>
   c2d5a:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2e20 <__kernel_cosf+0xe8>
   c2d5e:	eddf 5a31 	vldr	s11, [pc, #196]	; c2e24 <__kernel_cosf+0xec>
   c2d62:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2e28 <__kernel_cosf+0xf0>
   c2d66:	eddf 6a31 	vldr	s13, [pc, #196]	; c2e2c <__kernel_cosf+0xf4>
   c2d6a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2d6e:	eddf 7a30 	vldr	s15, [pc, #192]	; c2e30 <__kernel_cosf+0xf8>
   c2d72:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2d76:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2d7a:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2d7e:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2d82:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2d86:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2d8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2d8e:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2d92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2d96:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2d9a:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2d9e:	4770      	bx	lr
   c2da0:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2da4:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2e1c <__kernel_cosf+0xe4>
   c2da8:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2e20 <__kernel_cosf+0xe8>
   c2dac:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2e24 <__kernel_cosf+0xec>
   c2db0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2e28 <__kernel_cosf+0xf0>
   c2db4:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2e2c <__kernel_cosf+0xf4>
   c2db8:	4a1e      	ldr	r2, [pc, #120]	; (c2e34 <__kernel_cosf+0xfc>)
   c2dba:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2dbe:	4293      	cmp	r3, r2
   c2dc0:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2e30 <__kernel_cosf+0xf8>
   c2dc4:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2dc8:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2dcc:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2dd0:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2dd4:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2dd8:	ddd5      	ble.n	c2d86 <__kernel_cosf+0x4e>
   c2dda:	4a17      	ldr	r2, [pc, #92]	; (c2e38 <__kernel_cosf+0x100>)
   c2ddc:	4293      	cmp	r3, r2
   c2dde:	dc14      	bgt.n	c2e0a <__kernel_cosf+0xd2>
   c2de0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2de4:	ee07 3a90 	vmov	s15, r3
   c2de8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2dec:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2df0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2df4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2df8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2dfc:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2e00:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2e04:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2e08:	4770      	bx	lr
   c2e0a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2e0e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2e12:	e7ed      	b.n	c2df0 <__kernel_cosf+0xb8>
   c2e14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2e18:	4770      	bx	lr
   c2e1a:	bf00      	nop
   c2e1c:	ad47d74e 	.word	0xad47d74e
   c2e20:	310f74f6 	.word	0x310f74f6
   c2e24:	b493f27c 	.word	0xb493f27c
   c2e28:	37d00d01 	.word	0x37d00d01
   c2e2c:	3d2aaaab 	.word	0x3d2aaaab
   c2e30:	bab60b61 	.word	0xbab60b61
   c2e34:	3e999999 	.word	0x3e999999
   c2e38:	3f480000 	.word	0x3f480000

000c2e3c <__kernel_rem_pio2f>:
   c2e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2e40:	ed2d 8b04 	vpush	{d8-d9}
   c2e44:	b0db      	sub	sp, #364	; 0x16c
   c2e46:	461c      	mov	r4, r3
   c2e48:	9303      	str	r3, [sp, #12]
   c2e4a:	9106      	str	r1, [sp, #24]
   c2e4c:	4ba3      	ldr	r3, [pc, #652]	; (c30dc <__kernel_rem_pio2f+0x2a0>)
   c2e4e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2e50:	9208      	str	r2, [sp, #32]
   c2e52:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2e56:	1d11      	adds	r1, r2, #4
   c2e58:	4682      	mov	sl, r0
   c2e5a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2e5e:	f2c0 82a2 	blt.w	c33a6 <__kernel_rem_pio2f+0x56a>
   c2e62:	1ed3      	subs	r3, r2, #3
   c2e64:	bf44      	itt	mi
   c2e66:	4613      	movmi	r3, r2
   c2e68:	3304      	addmi	r3, #4
   c2e6a:	10db      	asrs	r3, r3, #3
   c2e6c:	9302      	str	r3, [sp, #8]
   c2e6e:	3301      	adds	r3, #1
   c2e70:	00db      	lsls	r3, r3, #3
   c2e72:	9307      	str	r3, [sp, #28]
   c2e74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2e78:	1a9b      	subs	r3, r3, r2
   c2e7a:	9305      	str	r3, [sp, #20]
   c2e7c:	9b02      	ldr	r3, [sp, #8]
   c2e7e:	eb15 0108 	adds.w	r1, r5, r8
   c2e82:	eba3 0308 	sub.w	r3, r3, r8
   c2e86:	d416      	bmi.n	c2eb6 <__kernel_rem_pio2f+0x7a>
   c2e88:	3101      	adds	r1, #1
   c2e8a:	ed9f 7a95 	vldr	s14, [pc, #596]	; c30e0 <__kernel_rem_pio2f+0x2a4>
   c2e8e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2e90:	4419      	add	r1, r3
   c2e92:	aa1e      	add	r2, sp, #120	; 0x78
   c2e94:	2b00      	cmp	r3, #0
   c2e96:	bfa4      	itt	ge
   c2e98:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2e9c:	ee07 4a90 	vmovge	s15, r4
   c2ea0:	f103 0301 	add.w	r3, r3, #1
   c2ea4:	bfac      	ite	ge
   c2ea6:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2eaa:	eef0 7a47 	vmovlt.f32	s15, s14
   c2eae:	428b      	cmp	r3, r1
   c2eb0:	ece2 7a01 	vstmia	r2!, {s15}
   c2eb4:	d1ee      	bne.n	c2e94 <__kernel_rem_pio2f+0x58>
   c2eb6:	2d00      	cmp	r5, #0
   c2eb8:	f2c0 82e5 	blt.w	c3486 <__kernel_rem_pio2f+0x64a>
   c2ebc:	9b03      	ldr	r3, [sp, #12]
   c2ebe:	a91e      	add	r1, sp, #120	; 0x78
   c2ec0:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2ec4:	ae46      	add	r6, sp, #280	; 0x118
   c2ec6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2eca:	4640      	mov	r0, r8
   c2ecc:	18ef      	adds	r7, r5, r3
   c2ece:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2ed2:	f1b8 0f00 	cmp.w	r8, #0
   c2ed6:	eddf 7a82 	vldr	s15, [pc, #520]	; c30e0 <__kernel_rem_pio2f+0x2a4>
   c2eda:	db09      	blt.n	c2ef0 <__kernel_rem_pio2f+0xb4>
   c2edc:	4622      	mov	r2, r4
   c2ede:	4653      	mov	r3, sl
   c2ee0:	ecf3 6a01 	vldmia	r3!, {s13}
   c2ee4:	ed32 7a01 	vldmdb	r2!, {s14}
   c2ee8:	428b      	cmp	r3, r1
   c2eea:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2eee:	d1f7      	bne.n	c2ee0 <__kernel_rem_pio2f+0xa4>
   c2ef0:	3001      	adds	r0, #1
   c2ef2:	42b8      	cmp	r0, r7
   c2ef4:	ece6 7a01 	vstmia	r6!, {s15}
   c2ef8:	f104 0404 	add.w	r4, r4, #4
   c2efc:	d1e9      	bne.n	c2ed2 <__kernel_rem_pio2f+0x96>
   c2efe:	ab09      	add	r3, sp, #36	; 0x24
   c2f00:	af0a      	add	r7, sp, #40	; 0x28
   c2f02:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2f06:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2f0a:	3b08      	subs	r3, #8
   c2f0c:	ed9f 9a76 	vldr	s18, [pc, #472]	; c30e8 <__kernel_rem_pio2f+0x2ac>
   c2f10:	eddf 8a74 	vldr	s17, [pc, #464]	; c30e4 <__kernel_rem_pio2f+0x2a8>
   c2f14:	9805      	ldr	r0, [sp, #20]
   c2f16:	9304      	str	r3, [sp, #16]
   c2f18:	eb0a 040c 	add.w	r4, sl, ip
   c2f1c:	ae46      	add	r6, sp, #280	; 0x118
   c2f1e:	9500      	str	r5, [sp, #0]
   c2f20:	ab5a      	add	r3, sp, #360	; 0x168
   c2f22:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2f26:	2d00      	cmp	r5, #0
   c2f28:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2f2c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2f30:	dd16      	ble.n	c2f60 <__kernel_rem_pio2f+0x124>
   c2f32:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2f36:	463a      	mov	r2, r7
   c2f38:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2f3c:	eeb0 7a40 	vmov.f32	s14, s0
   c2f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2f44:	ed73 6a01 	vldmdb	r3!, {s13}
   c2f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f4c:	42b3      	cmp	r3, r6
   c2f4e:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2f52:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2f56:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2f5a:	eca2 7a01 	vstmia	r2!, {s14}
   c2f5e:	d1eb      	bne.n	c2f38 <__kernel_rem_pio2f+0xfc>
   c2f60:	9001      	str	r0, [sp, #4]
   c2f62:	f000 fdbf 	bl	c3ae4 <scalbnf>
   c2f66:	eeb0 8a40 	vmov.f32	s16, s0
   c2f6a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2f6e:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2f72:	f000 fd71 	bl	c3a58 <floorf>
   c2f76:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2f7a:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2f7e:	9801      	ldr	r0, [sp, #4]
   c2f80:	2800      	cmp	r0, #0
   c2f82:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2f86:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2f8a:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2f8e:	dd79      	ble.n	c3084 <__kernel_rem_pio2f+0x248>
   c2f90:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c2f94:	f1c0 0308 	rsb	r3, r0, #8
   c2f98:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2f9c:	fa41 fc03 	asr.w	ip, r1, r3
   c2fa0:	fa0c f303 	lsl.w	r3, ip, r3
   c2fa4:	1acb      	subs	r3, r1, r3
   c2fa6:	f1c0 0207 	rsb	r2, r0, #7
   c2faa:	ee19 1a90 	vmov	r1, s19
   c2fae:	fa43 f202 	asr.w	r2, r3, r2
   c2fb2:	4461      	add	r1, ip
   c2fb4:	2a00      	cmp	r2, #0
   c2fb6:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2fba:	ee09 1a90 	vmov	s19, r1
   c2fbe:	dc69      	bgt.n	c3094 <__kernel_rem_pio2f+0x258>
   c2fc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2fc8:	f040 80c1 	bne.w	c314e <__kernel_rem_pio2f+0x312>
   c2fcc:	9b00      	ldr	r3, [sp, #0]
   c2fce:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c2fd2:	455b      	cmp	r3, fp
   c2fd4:	dc10      	bgt.n	c2ff8 <__kernel_rem_pio2f+0x1bc>
   c2fd6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2fda:	3b01      	subs	r3, #1
   c2fdc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2fe0:	2100      	movs	r1, #0
   c2fe2:	4694      	mov	ip, r2
   c2fe4:	f853 2904 	ldr.w	r2, [r3], #-4
   c2fe8:	454b      	cmp	r3, r9
   c2fea:	ea41 0102 	orr.w	r1, r1, r2
   c2fee:	d1f9      	bne.n	c2fe4 <__kernel_rem_pio2f+0x1a8>
   c2ff0:	4662      	mov	r2, ip
   c2ff2:	2900      	cmp	r1, #0
   c2ff4:	f040 80f3 	bne.w	c31de <__kernel_rem_pio2f+0x3a2>
   c2ff8:	9b00      	ldr	r3, [sp, #0]
   c2ffa:	3b01      	subs	r3, #1
   c2ffc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c3000:	2b00      	cmp	r3, #0
   c3002:	f040 80e8 	bne.w	c31d6 <__kernel_rem_pio2f+0x39a>
   c3006:	9b04      	ldr	r3, [sp, #16]
   c3008:	f04f 0c01 	mov.w	ip, #1
   c300c:	f853 2904 	ldr.w	r2, [r3], #-4
   c3010:	f10c 0c01 	add.w	ip, ip, #1
   c3014:	2a00      	cmp	r2, #0
   c3016:	d0f9      	beq.n	c300c <__kernel_rem_pio2f+0x1d0>
   c3018:	1c6b      	adds	r3, r5, #1
   c301a:	44ac      	add	ip, r5
   c301c:	469e      	mov	lr, r3
   c301e:	9a03      	ldr	r2, [sp, #12]
   c3020:	1951      	adds	r1, r2, r5
   c3022:	9a02      	ldr	r2, [sp, #8]
   c3024:	eb02 0b03 	add.w	fp, r2, r3
   c3028:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c302c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c302e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c3032:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c3036:	ab1e      	add	r3, sp, #120	; 0x78
   c3038:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c303c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c3040:	eddb 7a01 	vldr	s15, [fp, #4]
   c3044:	ed9f 7a26 	vldr	s14, [pc, #152]	; c30e0 <__kernel_rem_pio2f+0x2a4>
   c3048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c304c:	f1b8 0f00 	cmp.w	r8, #0
   c3050:	f10b 0b04 	add.w	fp, fp, #4
   c3054:	edc1 7a00 	vstr	s15, [r1]
   c3058:	460a      	mov	r2, r1
   c305a:	f101 0104 	add.w	r1, r1, #4
   c305e:	db09      	blt.n	c3074 <__kernel_rem_pio2f+0x238>
   c3060:	4653      	mov	r3, sl
   c3062:	e001      	b.n	c3068 <__kernel_rem_pio2f+0x22c>
   c3064:	ed72 7a01 	vldmdb	r2!, {s15}
   c3068:	ecf3 6a01 	vldmia	r3!, {s13}
   c306c:	42a3      	cmp	r3, r4
   c306e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c3072:	d1f7      	bne.n	c3064 <__kernel_rem_pio2f+0x228>
   c3074:	f10e 0e01 	add.w	lr, lr, #1
   c3078:	45e6      	cmp	lr, ip
   c307a:	eca5 7a01 	vstmia	r5!, {s14}
   c307e:	dddf      	ble.n	c3040 <__kernel_rem_pio2f+0x204>
   c3080:	4665      	mov	r5, ip
   c3082:	e74d      	b.n	c2f20 <__kernel_rem_pio2f+0xe4>
   c3084:	f040 809d 	bne.w	c31c2 <__kernel_rem_pio2f+0x386>
   c3088:	1e6b      	subs	r3, r5, #1
   c308a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c308e:	1212      	asrs	r2, r2, #8
   c3090:	2a00      	cmp	r2, #0
   c3092:	dd95      	ble.n	c2fc0 <__kernel_rem_pio2f+0x184>
   c3094:	ee19 3a90 	vmov	r3, s19
   c3098:	2d00      	cmp	r5, #0
   c309a:	f103 0301 	add.w	r3, r3, #1
   c309e:	ee09 3a90 	vmov	s19, r3
   c30a2:	f340 8196 	ble.w	c33d2 <__kernel_rem_pio2f+0x596>
   c30a6:	6839      	ldr	r1, [r7, #0]
   c30a8:	2900      	cmp	r1, #0
   c30aa:	f040 8080 	bne.w	c31ae <__kernel_rem_pio2f+0x372>
   c30ae:	2d01      	cmp	r5, #1
   c30b0:	d026      	beq.n	c3100 <__kernel_rem_pio2f+0x2c4>
   c30b2:	463b      	mov	r3, r7
   c30b4:	f04f 0c01 	mov.w	ip, #1
   c30b8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c30bc:	2900      	cmp	r1, #0
   c30be:	d07a      	beq.n	c31b6 <__kernel_rem_pio2f+0x37a>
   c30c0:	f10c 0301 	add.w	r3, ip, #1
   c30c4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c30c8:	429d      	cmp	r5, r3
   c30ca:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c30ce:	dd16      	ble.n	c30fe <__kernel_rem_pio2f+0x2c2>
   c30d0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c30d4:	44bb      	add	fp, r7
   c30d6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c30da:	e00a      	b.n	c30f2 <__kernel_rem_pio2f+0x2b6>
   c30dc:	000c86ac 	.word	0x000c86ac
   c30e0:	00000000 	.word	0x00000000
   c30e4:	43800000 	.word	0x43800000
   c30e8:	3b800000 	.word	0x3b800000
   c30ec:	3fc90000 	.word	0x3fc90000
   c30f0:	6819      	ldr	r1, [r3, #0]
   c30f2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c30f6:	f843 1b04 	str.w	r1, [r3], #4
   c30fa:	455b      	cmp	r3, fp
   c30fc:	d1f8      	bne.n	c30f0 <__kernel_rem_pio2f+0x2b4>
   c30fe:	2101      	movs	r1, #1
   c3100:	2800      	cmp	r0, #0
   c3102:	dd0c      	ble.n	c311e <__kernel_rem_pio2f+0x2e2>
   c3104:	2801      	cmp	r0, #1
   c3106:	f000 8145 	beq.w	c3394 <__kernel_rem_pio2f+0x558>
   c310a:	2802      	cmp	r0, #2
   c310c:	d107      	bne.n	c311e <__kernel_rem_pio2f+0x2e2>
   c310e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c3112:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c3116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c311a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c311e:	2a02      	cmp	r2, #2
   c3120:	f47f af4e 	bne.w	c2fc0 <__kernel_rem_pio2f+0x184>
   c3124:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c3128:	ee30 8a48 	vsub.f32	s16, s0, s16
   c312c:	2900      	cmp	r1, #0
   c312e:	f43f af47 	beq.w	c2fc0 <__kernel_rem_pio2f+0x184>
   c3132:	9209      	str	r2, [sp, #36]	; 0x24
   c3134:	9001      	str	r0, [sp, #4]
   c3136:	f000 fcd5 	bl	c3ae4 <scalbnf>
   c313a:	ee38 8a40 	vsub.f32	s16, s16, s0
   c313e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c3140:	9801      	ldr	r0, [sp, #4]
   c3142:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c3146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c314a:	f43f af3f 	beq.w	c2fcc <__kernel_rem_pio2f+0x190>
   c314e:	9202      	str	r2, [sp, #8]
   c3150:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c3154:	eeb0 0a48 	vmov.f32	s0, s16
   c3158:	1a98      	subs	r0, r3, r2
   c315a:	9501      	str	r5, [sp, #4]
   c315c:	9d00      	ldr	r5, [sp, #0]
   c315e:	f000 fcc1 	bl	c3ae4 <scalbnf>
   c3162:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c30e4 <__kernel_rem_pio2f+0x2a8>
   c3166:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c316e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c3172:	f2c0 8156 	blt.w	c3422 <__kernel_rem_pio2f+0x5e6>
   c3176:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c30e8 <__kernel_rem_pio2f+0x2ac>
   c317a:	9905      	ldr	r1, [sp, #20]
   c317c:	ee60 7a27 	vmul.f32	s15, s0, s15
   c3180:	3108      	adds	r1, #8
   c3182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3186:	9105      	str	r1, [sp, #20]
   c3188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c318c:	f103 0b01 	add.w	fp, r3, #1
   c3190:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c3194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3198:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c319c:	ee10 1a10 	vmov	r1, s0
   c31a0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c31a4:	ee17 3a90 	vmov	r3, s15
   c31a8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c31ac:	e02e      	b.n	c320c <__kernel_rem_pio2f+0x3d0>
   c31ae:	2301      	movs	r3, #1
   c31b0:	f04f 0c00 	mov.w	ip, #0
   c31b4:	e786      	b.n	c30c4 <__kernel_rem_pio2f+0x288>
   c31b6:	f10c 0c01 	add.w	ip, ip, #1
   c31ba:	45ac      	cmp	ip, r5
   c31bc:	f47f af7c 	bne.w	c30b8 <__kernel_rem_pio2f+0x27c>
   c31c0:	e79e      	b.n	c3100 <__kernel_rem_pio2f+0x2c4>
   c31c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c31c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c31ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c31ce:	f280 80ef 	bge.w	c33b0 <__kernel_rem_pio2f+0x574>
   c31d2:	2200      	movs	r2, #0
   c31d4:	e6f4      	b.n	c2fc0 <__kernel_rem_pio2f+0x184>
   c31d6:	1c6b      	adds	r3, r5, #1
   c31d8:	469e      	mov	lr, r3
   c31da:	469c      	mov	ip, r3
   c31dc:	e71f      	b.n	c301e <__kernel_rem_pio2f+0x1e2>
   c31de:	9905      	ldr	r1, [sp, #20]
   c31e0:	f1a1 0008 	sub.w	r0, r1, #8
   c31e4:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c31e8:	9005      	str	r0, [sp, #20]
   c31ea:	462b      	mov	r3, r5
   c31ec:	9d00      	ldr	r5, [sp, #0]
   c31ee:	b969      	cbnz	r1, c320c <__kernel_rem_pio2f+0x3d0>
   c31f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c31f4:	3b02      	subs	r3, #2
   c31f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c31fa:	4601      	mov	r1, r0
   c31fc:	f853 0904 	ldr.w	r0, [r3], #-4
   c3200:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c3204:	3908      	subs	r1, #8
   c3206:	2800      	cmp	r0, #0
   c3208:	d0f8      	beq.n	c31fc <__kernel_rem_pio2f+0x3c0>
   c320a:	9105      	str	r1, [sp, #20]
   c320c:	9805      	ldr	r0, [sp, #20]
   c320e:	9200      	str	r2, [sp, #0]
   c3210:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c3214:	f000 fc66 	bl	c3ae4 <scalbnf>
   c3218:	f1bb 0f00 	cmp.w	fp, #0
   c321c:	9a00      	ldr	r2, [sp, #0]
   c321e:	f2c0 8125 	blt.w	c346c <__kernel_rem_pio2f+0x630>
   c3222:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c3226:	ab46      	add	r3, sp, #280	; 0x118
   c3228:	eb03 060e 	add.w	r6, r3, lr
   c322c:	f10e 0c04 	add.w	ip, lr, #4
   c3230:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c30e8 <__kernel_rem_pio2f+0x2ac>
   c3234:	eb07 030c 	add.w	r3, r7, ip
   c3238:	1d31      	adds	r1, r6, #4
   c323a:	ed73 7a01 	vldmdb	r3!, {s15}
   c323e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c3242:	42bb      	cmp	r3, r7
   c3244:	ee67 7a80 	vmul.f32	s15, s15, s0
   c3248:	ee20 0a07 	vmul.f32	s0, s0, s14
   c324c:	ed61 7a01 	vstmdb	r1!, {s15}
   c3250:	d1f3      	bne.n	c323a <__kernel_rem_pio2f+0x3fe>
   c3252:	2d00      	cmp	r5, #0
   c3254:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c30ec <__kernel_rem_pio2f+0x2b0>
   c3258:	f04f 0400 	mov.w	r4, #0
   c325c:	db20      	blt.n	c32a0 <__kernel_rem_pio2f+0x464>
   c325e:	4892      	ldr	r0, [pc, #584]	; (c34a8 <__kernel_rem_pio2f+0x66c>)
   c3260:	eddf 7a92 	vldr	s15, [pc, #584]	; c34ac <__kernel_rem_pio2f+0x670>
   c3264:	eeb0 7a46 	vmov.f32	s14, s12
   c3268:	4631      	mov	r1, r6
   c326a:	2300      	movs	r3, #0
   c326c:	e003      	b.n	c3276 <__kernel_rem_pio2f+0x43a>
   c326e:	429c      	cmp	r4, r3
   c3270:	db08      	blt.n	c3284 <__kernel_rem_pio2f+0x448>
   c3272:	ecb0 7a01 	vldmia	r0!, {s14}
   c3276:	ecf1 6a01 	vldmia	r1!, {s13}
   c327a:	3301      	adds	r3, #1
   c327c:	429d      	cmp	r5, r3
   c327e:	eee6 7a87 	vfma.f32	s15, s13, s14
   c3282:	daf4      	bge.n	c326e <__kernel_rem_pio2f+0x432>
   c3284:	ab5a      	add	r3, sp, #360	; 0x168
   c3286:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c328a:	45a3      	cmp	fp, r4
   c328c:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3290:	f1a6 0604 	sub.w	r6, r6, #4
   c3294:	f104 0301 	add.w	r3, r4, #1
   c3298:	d005      	beq.n	c32a6 <__kernel_rem_pio2f+0x46a>
   c329a:	2d00      	cmp	r5, #0
   c329c:	461c      	mov	r4, r3
   c329e:	dade      	bge.n	c325e <__kernel_rem_pio2f+0x422>
   c32a0:	eddf 7a82 	vldr	s15, [pc, #520]	; c34ac <__kernel_rem_pio2f+0x670>
   c32a4:	e7ee      	b.n	c3284 <__kernel_rem_pio2f+0x448>
   c32a6:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c32a8:	2902      	cmp	r1, #2
   c32aa:	dc1c      	bgt.n	c32e6 <__kernel_rem_pio2f+0x4aa>
   c32ac:	2900      	cmp	r1, #0
   c32ae:	f300 8092 	bgt.w	c33d6 <__kernel_rem_pio2f+0x59a>
   c32b2:	d10f      	bne.n	c32d4 <__kernel_rem_pio2f+0x498>
   c32b4:	ab32      	add	r3, sp, #200	; 0xc8
   c32b6:	eddf 7a7d 	vldr	s15, [pc, #500]	; c34ac <__kernel_rem_pio2f+0x670>
   c32ba:	449c      	add	ip, r3
   c32bc:	ed3c 7a01 	vldmdb	ip!, {s14}
   c32c0:	4563      	cmp	r3, ip
   c32c2:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32c6:	d1f9      	bne.n	c32bc <__kernel_rem_pio2f+0x480>
   c32c8:	b10a      	cbz	r2, c32ce <__kernel_rem_pio2f+0x492>
   c32ca:	eef1 7a67 	vneg.f32	s15, s15
   c32ce:	9b06      	ldr	r3, [sp, #24]
   c32d0:	edc3 7a00 	vstr	s15, [r3]
   c32d4:	ee19 3a90 	vmov	r3, s19
   c32d8:	f003 0007 	and.w	r0, r3, #7
   c32dc:	b05b      	add	sp, #364	; 0x16c
   c32de:	ecbd 8b04 	vpop	{d8-d9}
   c32e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c32e6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c32e8:	2b03      	cmp	r3, #3
   c32ea:	d1f3      	bne.n	c32d4 <__kernel_rem_pio2f+0x498>
   c32ec:	f1bb 0f00 	cmp.w	fp, #0
   c32f0:	f000 80d1 	beq.w	c3496 <__kernel_rem_pio2f+0x65a>
   c32f4:	ab5a      	add	r3, sp, #360	; 0x168
   c32f6:	4473      	add	r3, lr
   c32f8:	a932      	add	r1, sp, #200	; 0xc8
   c32fa:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c32fe:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c3302:	ed73 7a01 	vldmdb	r3!, {s15}
   c3306:	eef0 6a47 	vmov.f32	s13, s14
   c330a:	ee37 7a27 	vadd.f32	s14, s14, s15
   c330e:	4299      	cmp	r1, r3
   c3310:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3314:	ed83 7a00 	vstr	s14, [r3]
   c3318:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c331c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3320:	d1ef      	bne.n	c3302 <__kernel_rem_pio2f+0x4c6>
   c3322:	f1bb 0f01 	cmp.w	fp, #1
   c3326:	f340 80b6 	ble.w	c3496 <__kernel_rem_pio2f+0x65a>
   c332a:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c332e:	ab5a      	add	r3, sp, #360	; 0x168
   c3330:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c3334:	449e      	add	lr, r3
   c3336:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c333a:	f10b 0304 	add.w	r3, fp, #4
   c333e:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c3342:	440b      	add	r3, r1
   c3344:	a833      	add	r0, sp, #204	; 0xcc
   c3346:	ed73 7a01 	vldmdb	r3!, {s15}
   c334a:	eef0 6a47 	vmov.f32	s13, s14
   c334e:	ee37 7a27 	vadd.f32	s14, s14, s15
   c3352:	4298      	cmp	r0, r3
   c3354:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3358:	ed83 7a00 	vstr	s14, [r3]
   c335c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3360:	edc3 7a01 	vstr	s15, [r3, #4]
   c3364:	d1ef      	bne.n	c3346 <__kernel_rem_pio2f+0x50a>
   c3366:	f10b 0b08 	add.w	fp, fp, #8
   c336a:	eddf 7a50 	vldr	s15, [pc, #320]	; c34ac <__kernel_rem_pio2f+0x670>
   c336e:	eb01 030b 	add.w	r3, r1, fp
   c3372:	3108      	adds	r1, #8
   c3374:	ed33 7a01 	vldmdb	r3!, {s14}
   c3378:	4299      	cmp	r1, r3
   c337a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c337e:	d1f9      	bne.n	c3374 <__kernel_rem_pio2f+0x538>
   c3380:	2a00      	cmp	r2, #0
   c3382:	d156      	bne.n	c3432 <__kernel_rem_pio2f+0x5f6>
   c3384:	9906      	ldr	r1, [sp, #24]
   c3386:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c3388:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c338a:	600a      	str	r2, [r1, #0]
   c338c:	604b      	str	r3, [r1, #4]
   c338e:	edc1 7a02 	vstr	s15, [r1, #8]
   c3392:	e79f      	b.n	c32d4 <__kernel_rem_pio2f+0x498>
   c3394:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c3398:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c33a0:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c33a4:	e6bb      	b.n	c311e <__kernel_rem_pio2f+0x2e2>
   c33a6:	2308      	movs	r3, #8
   c33a8:	9307      	str	r3, [sp, #28]
   c33aa:	2300      	movs	r3, #0
   c33ac:	9302      	str	r3, [sp, #8]
   c33ae:	e561      	b.n	c2e74 <__kernel_rem_pio2f+0x38>
   c33b0:	ee19 3a90 	vmov	r3, s19
   c33b4:	2d00      	cmp	r5, #0
   c33b6:	f103 0301 	add.w	r3, r3, #1
   c33ba:	ee09 3a90 	vmov	s19, r3
   c33be:	bfc8      	it	gt
   c33c0:	2202      	movgt	r2, #2
   c33c2:	f73f ae70 	bgt.w	c30a6 <__kernel_rem_pio2f+0x26a>
   c33c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c33ca:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c33ce:	2202      	movs	r2, #2
   c33d0:	e5f6      	b.n	c2fc0 <__kernel_rem_pio2f+0x184>
   c33d2:	2100      	movs	r1, #0
   c33d4:	e694      	b.n	c3100 <__kernel_rem_pio2f+0x2c4>
   c33d6:	a932      	add	r1, sp, #200	; 0xc8
   c33d8:	eddf 7a34 	vldr	s15, [pc, #208]	; c34ac <__kernel_rem_pio2f+0x670>
   c33dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c33e0:	ed33 7a01 	vldmdb	r3!, {s14}
   c33e4:	4299      	cmp	r1, r3
   c33e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c33ea:	d1f9      	bne.n	c33e0 <__kernel_rem_pio2f+0x5a4>
   c33ec:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c33f0:	bb8a      	cbnz	r2, c3456 <__kernel_rem_pio2f+0x61a>
   c33f2:	9b06      	ldr	r3, [sp, #24]
   c33f4:	f1bb 0f00 	cmp.w	fp, #0
   c33f8:	edc3 7a00 	vstr	s15, [r3]
   c33fc:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3400:	dd0b      	ble.n	c341a <__kernel_rem_pio2f+0x5de>
   c3402:	a933      	add	r1, sp, #204	; 0xcc
   c3404:	2301      	movs	r3, #1
   c3406:	ecb1 7a01 	vldmia	r1!, {s14}
   c340a:	3301      	adds	r3, #1
   c340c:	459b      	cmp	fp, r3
   c340e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3412:	daf8      	bge.n	c3406 <__kernel_rem_pio2f+0x5ca>
   c3414:	b10a      	cbz	r2, c341a <__kernel_rem_pio2f+0x5de>
   c3416:	eef1 7a67 	vneg.f32	s15, s15
   c341a:	9b06      	ldr	r3, [sp, #24]
   c341c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3420:	e758      	b.n	c32d4 <__kernel_rem_pio2f+0x498>
   c3422:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c3426:	469b      	mov	fp, r3
   c3428:	ee10 1a10 	vmov	r1, s0
   c342c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3430:	e6ec      	b.n	c320c <__kernel_rem_pio2f+0x3d0>
   c3432:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c3436:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c343a:	9b06      	ldr	r3, [sp, #24]
   c343c:	eef1 6a66 	vneg.f32	s13, s13
   c3440:	eeb1 7a47 	vneg.f32	s14, s14
   c3444:	eef1 7a67 	vneg.f32	s15, s15
   c3448:	edc3 6a00 	vstr	s13, [r3]
   c344c:	ed83 7a01 	vstr	s14, [r3, #4]
   c3450:	edc3 7a02 	vstr	s15, [r3, #8]
   c3454:	e73e      	b.n	c32d4 <__kernel_rem_pio2f+0x498>
   c3456:	9b06      	ldr	r3, [sp, #24]
   c3458:	eef1 6a67 	vneg.f32	s13, s15
   c345c:	f1bb 0f00 	cmp.w	fp, #0
   c3460:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3464:	edc3 6a00 	vstr	s13, [r3]
   c3468:	dccb      	bgt.n	c3402 <__kernel_rem_pio2f+0x5c6>
   c346a:	e7d4      	b.n	c3416 <__kernel_rem_pio2f+0x5da>
   c346c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c346e:	2b02      	cmp	r3, #2
   c3470:	dc0d      	bgt.n	c348e <__kernel_rem_pio2f+0x652>
   c3472:	2b00      	cmp	r3, #0
   c3474:	dc14      	bgt.n	c34a0 <__kernel_rem_pio2f+0x664>
   c3476:	f47f af2d 	bne.w	c32d4 <__kernel_rem_pio2f+0x498>
   c347a:	eddf 7a0c 	vldr	s15, [pc, #48]	; c34ac <__kernel_rem_pio2f+0x670>
   c347e:	2a00      	cmp	r2, #0
   c3480:	f43f af25 	beq.w	c32ce <__kernel_rem_pio2f+0x492>
   c3484:	e721      	b.n	c32ca <__kernel_rem_pio2f+0x48e>
   c3486:	9b03      	ldr	r3, [sp, #12]
   c3488:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c348c:	e537      	b.n	c2efe <__kernel_rem_pio2f+0xc2>
   c348e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3490:	2b03      	cmp	r3, #3
   c3492:	f47f af1f 	bne.w	c32d4 <__kernel_rem_pio2f+0x498>
   c3496:	eddf 7a05 	vldr	s15, [pc, #20]	; c34ac <__kernel_rem_pio2f+0x670>
   c349a:	2a00      	cmp	r2, #0
   c349c:	d1c9      	bne.n	c3432 <__kernel_rem_pio2f+0x5f6>
   c349e:	e771      	b.n	c3384 <__kernel_rem_pio2f+0x548>
   c34a0:	eddf 7a02 	vldr	s15, [pc, #8]	; c34ac <__kernel_rem_pio2f+0x670>
   c34a4:	e7a2      	b.n	c33ec <__kernel_rem_pio2f+0x5b0>
   c34a6:	bf00      	nop
   c34a8:	000c8684 	.word	0x000c8684
   c34ac:	00000000 	.word	0x00000000

000c34b0 <__kernel_sinf>:
   c34b0:	ee10 3a10 	vmov	r3, s0
   c34b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c34b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c34bc:	da04      	bge.n	c34c8 <__kernel_sinf+0x18>
   c34be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c34c2:	ee17 3a90 	vmov	r3, s15
   c34c6:	b35b      	cbz	r3, c3520 <__kernel_sinf+0x70>
   c34c8:	ee60 7a00 	vmul.f32	s15, s0, s0
   c34cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; c3524 <__kernel_sinf+0x74>
   c34d0:	eddf 5a15 	vldr	s11, [pc, #84]	; c3528 <__kernel_sinf+0x78>
   c34d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; c352c <__kernel_sinf+0x7c>
   c34d8:	eddf 6a15 	vldr	s13, [pc, #84]	; c3530 <__kernel_sinf+0x80>
   c34dc:	eee7 5a87 	vfma.f32	s11, s15, s14
   c34e0:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3534 <__kernel_sinf+0x84>
   c34e4:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c34e8:	ee20 5a27 	vmul.f32	s10, s0, s15
   c34ec:	eee6 6a27 	vfma.f32	s13, s12, s15
   c34f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c34f4:	b930      	cbnz	r0, c3504 <__kernel_sinf+0x54>
   c34f6:	eddf 6a10 	vldr	s13, [pc, #64]	; c3538 <__kernel_sinf+0x88>
   c34fa:	eee7 6a87 	vfma.f32	s13, s15, s14
   c34fe:	eea6 0a85 	vfma.f32	s0, s13, s10
   c3502:	4770      	bx	lr
   c3504:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c3508:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c350c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c3510:	eddf 6a0a 	vldr	s13, [pc, #40]	; c353c <__kernel_sinf+0x8c>
   c3514:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c3518:	eee5 0a26 	vfma.f32	s1, s10, s13
   c351c:	ee30 0a60 	vsub.f32	s0, s0, s1
   c3520:	4770      	bx	lr
   c3522:	bf00      	nop
   c3524:	2f2ec9d3 	.word	0x2f2ec9d3
   c3528:	b2d72f34 	.word	0xb2d72f34
   c352c:	3638ef1b 	.word	0x3638ef1b
   c3530:	b9500d01 	.word	0xb9500d01
   c3534:	3c088889 	.word	0x3c088889
   c3538:	be2aaaab 	.word	0xbe2aaaab
   c353c:	3e2aaaab 	.word	0x3e2aaaab

000c3540 <atan>:
   c3540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3544:	ec55 4b10 	vmov	r4, r5, d0
   c3548:	4bc3      	ldr	r3, [pc, #780]	; (c3858 <atan+0x318>)
   c354a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c354e:	429e      	cmp	r6, r3
   c3550:	46aa      	mov	sl, r5
   c3552:	dd17      	ble.n	c3584 <atan+0x44>
   c3554:	4bc1      	ldr	r3, [pc, #772]	; (c385c <atan+0x31c>)
   c3556:	429e      	cmp	r6, r3
   c3558:	dc0a      	bgt.n	c3570 <atan+0x30>
   c355a:	d007      	beq.n	c356c <atan+0x2c>
   c355c:	f1ba 0f00 	cmp.w	sl, #0
   c3560:	f340 80cb 	ble.w	c36fa <atan+0x1ba>
   c3564:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c37e8 <atan+0x2a8>
   c3568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c356c:	2c00      	cmp	r4, #0
   c356e:	d0f5      	beq.n	c355c <atan+0x1c>
   c3570:	4622      	mov	r2, r4
   c3572:	462b      	mov	r3, r5
   c3574:	4620      	mov	r0, r4
   c3576:	4629      	mov	r1, r5
   c3578:	f000 fb2c 	bl	c3bd4 <__adddf3>
   c357c:	ec41 0b10 	vmov	d0, r0, r1
   c3580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3584:	4bb6      	ldr	r3, [pc, #728]	; (c3860 <atan+0x320>)
   c3586:	429e      	cmp	r6, r3
   c3588:	f300 80bb 	bgt.w	c3702 <atan+0x1c2>
   c358c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3590:	429e      	cmp	r6, r3
   c3592:	f340 80a0 	ble.w	c36d6 <atan+0x196>
   c3596:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c359a:	4622      	mov	r2, r4
   c359c:	462b      	mov	r3, r5
   c359e:	4620      	mov	r0, r4
   c35a0:	4629      	mov	r1, r5
   c35a2:	f000 fccd 	bl	c3f40 <__aeabi_dmul>
   c35a6:	4602      	mov	r2, r0
   c35a8:	460b      	mov	r3, r1
   c35aa:	4680      	mov	r8, r0
   c35ac:	4689      	mov	r9, r1
   c35ae:	f000 fcc7 	bl	c3f40 <__aeabi_dmul>
   c35b2:	a38f      	add	r3, pc, #572	; (adr r3, c37f0 <atan+0x2b0>)
   c35b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35b8:	4606      	mov	r6, r0
   c35ba:	460f      	mov	r7, r1
   c35bc:	f000 fcc0 	bl	c3f40 <__aeabi_dmul>
   c35c0:	a38d      	add	r3, pc, #564	; (adr r3, c37f8 <atan+0x2b8>)
   c35c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35c6:	f000 fb05 	bl	c3bd4 <__adddf3>
   c35ca:	4632      	mov	r2, r6
   c35cc:	463b      	mov	r3, r7
   c35ce:	f000 fcb7 	bl	c3f40 <__aeabi_dmul>
   c35d2:	a38b      	add	r3, pc, #556	; (adr r3, c3800 <atan+0x2c0>)
   c35d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35d8:	f000 fafc 	bl	c3bd4 <__adddf3>
   c35dc:	4632      	mov	r2, r6
   c35de:	463b      	mov	r3, r7
   c35e0:	f000 fcae 	bl	c3f40 <__aeabi_dmul>
   c35e4:	a388      	add	r3, pc, #544	; (adr r3, c3808 <atan+0x2c8>)
   c35e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35ea:	f000 faf3 	bl	c3bd4 <__adddf3>
   c35ee:	4632      	mov	r2, r6
   c35f0:	463b      	mov	r3, r7
   c35f2:	f000 fca5 	bl	c3f40 <__aeabi_dmul>
   c35f6:	a386      	add	r3, pc, #536	; (adr r3, c3810 <atan+0x2d0>)
   c35f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35fc:	f000 faea 	bl	c3bd4 <__adddf3>
   c3600:	4632      	mov	r2, r6
   c3602:	463b      	mov	r3, r7
   c3604:	f000 fc9c 	bl	c3f40 <__aeabi_dmul>
   c3608:	a383      	add	r3, pc, #524	; (adr r3, c3818 <atan+0x2d8>)
   c360a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c360e:	f000 fae1 	bl	c3bd4 <__adddf3>
   c3612:	4642      	mov	r2, r8
   c3614:	464b      	mov	r3, r9
   c3616:	f000 fc93 	bl	c3f40 <__aeabi_dmul>
   c361a:	a381      	add	r3, pc, #516	; (adr r3, c3820 <atan+0x2e0>)
   c361c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3620:	4680      	mov	r8, r0
   c3622:	4689      	mov	r9, r1
   c3624:	4630      	mov	r0, r6
   c3626:	4639      	mov	r1, r7
   c3628:	f000 fc8a 	bl	c3f40 <__aeabi_dmul>
   c362c:	a37e      	add	r3, pc, #504	; (adr r3, c3828 <atan+0x2e8>)
   c362e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3632:	f000 facd 	bl	c3bd0 <__aeabi_dsub>
   c3636:	4632      	mov	r2, r6
   c3638:	463b      	mov	r3, r7
   c363a:	f000 fc81 	bl	c3f40 <__aeabi_dmul>
   c363e:	a37c      	add	r3, pc, #496	; (adr r3, c3830 <atan+0x2f0>)
   c3640:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3644:	f000 fac4 	bl	c3bd0 <__aeabi_dsub>
   c3648:	4632      	mov	r2, r6
   c364a:	463b      	mov	r3, r7
   c364c:	f000 fc78 	bl	c3f40 <__aeabi_dmul>
   c3650:	a379      	add	r3, pc, #484	; (adr r3, c3838 <atan+0x2f8>)
   c3652:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3656:	f000 fabb 	bl	c3bd0 <__aeabi_dsub>
   c365a:	4632      	mov	r2, r6
   c365c:	463b      	mov	r3, r7
   c365e:	f000 fc6f 	bl	c3f40 <__aeabi_dmul>
   c3662:	a377      	add	r3, pc, #476	; (adr r3, c3840 <atan+0x300>)
   c3664:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3668:	f000 fab2 	bl	c3bd0 <__aeabi_dsub>
   c366c:	4632      	mov	r2, r6
   c366e:	463b      	mov	r3, r7
   c3670:	f000 fc66 	bl	c3f40 <__aeabi_dmul>
   c3674:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c3678:	4602      	mov	r2, r0
   c367a:	460b      	mov	r3, r1
   c367c:	4640      	mov	r0, r8
   c367e:	4649      	mov	r1, r9
   c3680:	d062      	beq.n	c3748 <atan+0x208>
   c3682:	f000 faa7 	bl	c3bd4 <__adddf3>
   c3686:	4e77      	ldr	r6, [pc, #476]	; (c3864 <atan+0x324>)
   c3688:	4622      	mov	r2, r4
   c368a:	462b      	mov	r3, r5
   c368c:	f000 fc58 	bl	c3f40 <__aeabi_dmul>
   c3690:	4b75      	ldr	r3, [pc, #468]	; (c3868 <atan+0x328>)
   c3692:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c3696:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c369a:	449b      	add	fp, r3
   c369c:	e9db 2300 	ldrd	r2, r3, [fp]
   c36a0:	f000 fa96 	bl	c3bd0 <__aeabi_dsub>
   c36a4:	4622      	mov	r2, r4
   c36a6:	462b      	mov	r3, r5
   c36a8:	f000 fa92 	bl	c3bd0 <__aeabi_dsub>
   c36ac:	4602      	mov	r2, r0
   c36ae:	460b      	mov	r3, r1
   c36b0:	e9d6 0100 	ldrd	r0, r1, [r6]
   c36b4:	f000 fa8c 	bl	c3bd0 <__aeabi_dsub>
   c36b8:	f1ba 0f00 	cmp.w	sl, #0
   c36bc:	ec41 0b10 	vmov	d0, r0, r1
   c36c0:	f6bf af5e 	bge.w	c3580 <atan+0x40>
   c36c4:	ee10 1a90 	vmov	r1, s1
   c36c8:	4602      	mov	r2, r0
   c36ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c36ce:	ec43 2b10 	vmov	d0, r2, r3
   c36d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c36d6:	a35c      	add	r3, pc, #368	; (adr r3, c3848 <atan+0x308>)
   c36d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c36dc:	ee10 0a10 	vmov	r0, s0
   c36e0:	4629      	mov	r1, r5
   c36e2:	f000 fa77 	bl	c3bd4 <__adddf3>
   c36e6:	4b61      	ldr	r3, [pc, #388]	; (c386c <atan+0x32c>)
   c36e8:	2200      	movs	r2, #0
   c36ea:	f000 feb9 	bl	c4460 <__aeabi_dcmpgt>
   c36ee:	2800      	cmp	r0, #0
   c36f0:	f43f af51 	beq.w	c3596 <atan+0x56>
   c36f4:	ec45 4b10 	vmov	d0, r4, r5
   c36f8:	e742      	b.n	c3580 <atan+0x40>
   c36fa:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3850 <atan+0x310>
   c36fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3702:	f000 f8bd 	bl	c3880 <fabs>
   c3706:	4b5a      	ldr	r3, [pc, #360]	; (c3870 <atan+0x330>)
   c3708:	429e      	cmp	r6, r3
   c370a:	ec55 4b10 	vmov	r4, r5, d0
   c370e:	dc2b      	bgt.n	c3768 <atan+0x228>
   c3710:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c3714:	429e      	cmp	r6, r3
   c3716:	dc56      	bgt.n	c37c6 <atan+0x286>
   c3718:	ee10 2a10 	vmov	r2, s0
   c371c:	462b      	mov	r3, r5
   c371e:	ee10 0a10 	vmov	r0, s0
   c3722:	4629      	mov	r1, r5
   c3724:	f000 fa56 	bl	c3bd4 <__adddf3>
   c3728:	4b50      	ldr	r3, [pc, #320]	; (c386c <atan+0x32c>)
   c372a:	2200      	movs	r2, #0
   c372c:	f000 fa50 	bl	c3bd0 <__aeabi_dsub>
   c3730:	4602      	mov	r2, r0
   c3732:	460b      	mov	r3, r1
   c3734:	4620      	mov	r0, r4
   c3736:	4629      	mov	r1, r5
   c3738:	4614      	mov	r4, r2
   c373a:	461d      	mov	r5, r3
   c373c:	f04f 0b00 	mov.w	fp, #0
   c3740:	2200      	movs	r2, #0
   c3742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3746:	e027      	b.n	c3798 <atan+0x258>
   c3748:	f000 fa44 	bl	c3bd4 <__adddf3>
   c374c:	4622      	mov	r2, r4
   c374e:	462b      	mov	r3, r5
   c3750:	f000 fbf6 	bl	c3f40 <__aeabi_dmul>
   c3754:	4602      	mov	r2, r0
   c3756:	460b      	mov	r3, r1
   c3758:	4620      	mov	r0, r4
   c375a:	4629      	mov	r1, r5
   c375c:	f000 fa38 	bl	c3bd0 <__aeabi_dsub>
   c3760:	ec41 0b10 	vmov	d0, r0, r1
   c3764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3768:	4b42      	ldr	r3, [pc, #264]	; (c3874 <atan+0x334>)
   c376a:	429e      	cmp	r6, r3
   c376c:	da1f      	bge.n	c37ae <atan+0x26e>
   c376e:	4b42      	ldr	r3, [pc, #264]	; (c3878 <atan+0x338>)
   c3770:	2200      	movs	r2, #0
   c3772:	4629      	mov	r1, r5
   c3774:	ee10 0a10 	vmov	r0, s0
   c3778:	f000 fa2a 	bl	c3bd0 <__aeabi_dsub>
   c377c:	4602      	mov	r2, r0
   c377e:	460b      	mov	r3, r1
   c3780:	4620      	mov	r0, r4
   c3782:	4629      	mov	r1, r5
   c3784:	4614      	mov	r4, r2
   c3786:	461d      	mov	r5, r3
   c3788:	2200      	movs	r2, #0
   c378a:	4b3b      	ldr	r3, [pc, #236]	; (c3878 <atan+0x338>)
   c378c:	f04f 0b02 	mov.w	fp, #2
   c3790:	f000 fbd6 	bl	c3f40 <__aeabi_dmul>
   c3794:	4b35      	ldr	r3, [pc, #212]	; (c386c <atan+0x32c>)
   c3796:	2200      	movs	r2, #0
   c3798:	f000 fa1c 	bl	c3bd4 <__adddf3>
   c379c:	4602      	mov	r2, r0
   c379e:	460b      	mov	r3, r1
   c37a0:	4620      	mov	r0, r4
   c37a2:	4629      	mov	r1, r5
   c37a4:	f000 fcf6 	bl	c4194 <__aeabi_ddiv>
   c37a8:	4604      	mov	r4, r0
   c37aa:	460d      	mov	r5, r1
   c37ac:	e6f5      	b.n	c359a <atan+0x5a>
   c37ae:	462b      	mov	r3, r5
   c37b0:	4932      	ldr	r1, [pc, #200]	; (c387c <atan+0x33c>)
   c37b2:	ee10 2a10 	vmov	r2, s0
   c37b6:	2000      	movs	r0, #0
   c37b8:	f000 fcec 	bl	c4194 <__aeabi_ddiv>
   c37bc:	f04f 0b03 	mov.w	fp, #3
   c37c0:	4604      	mov	r4, r0
   c37c2:	460d      	mov	r5, r1
   c37c4:	e6e9      	b.n	c359a <atan+0x5a>
   c37c6:	4b29      	ldr	r3, [pc, #164]	; (c386c <atan+0x32c>)
   c37c8:	2200      	movs	r2, #0
   c37ca:	4629      	mov	r1, r5
   c37cc:	ee10 0a10 	vmov	r0, s0
   c37d0:	f000 f9fe 	bl	c3bd0 <__aeabi_dsub>
   c37d4:	4602      	mov	r2, r0
   c37d6:	460b      	mov	r3, r1
   c37d8:	4620      	mov	r0, r4
   c37da:	4629      	mov	r1, r5
   c37dc:	f04f 0b01 	mov.w	fp, #1
   c37e0:	4614      	mov	r4, r2
   c37e2:	461d      	mov	r5, r3
   c37e4:	e7d6      	b.n	c3794 <atan+0x254>
   c37e6:	bf00      	nop
   c37e8:	54442d18 	.word	0x54442d18
   c37ec:	3ff921fb 	.word	0x3ff921fb
   c37f0:	e322da11 	.word	0xe322da11
   c37f4:	3f90ad3a 	.word	0x3f90ad3a
   c37f8:	24760deb 	.word	0x24760deb
   c37fc:	3fa97b4b 	.word	0x3fa97b4b
   c3800:	a0d03d51 	.word	0xa0d03d51
   c3804:	3fb10d66 	.word	0x3fb10d66
   c3808:	c54c206e 	.word	0xc54c206e
   c380c:	3fb745cd 	.word	0x3fb745cd
   c3810:	920083ff 	.word	0x920083ff
   c3814:	3fc24924 	.word	0x3fc24924
   c3818:	5555550d 	.word	0x5555550d
   c381c:	3fd55555 	.word	0x3fd55555
   c3820:	2c6a6c2f 	.word	0x2c6a6c2f
   c3824:	bfa2b444 	.word	0xbfa2b444
   c3828:	52defd9a 	.word	0x52defd9a
   c382c:	3fadde2d 	.word	0x3fadde2d
   c3830:	af749a6d 	.word	0xaf749a6d
   c3834:	3fb3b0f2 	.word	0x3fb3b0f2
   c3838:	fe231671 	.word	0xfe231671
   c383c:	3fbc71c6 	.word	0x3fbc71c6
   c3840:	9998ebc4 	.word	0x9998ebc4
   c3844:	3fc99999 	.word	0x3fc99999
   c3848:	8800759c 	.word	0x8800759c
   c384c:	7e37e43c 	.word	0x7e37e43c
   c3850:	54442d18 	.word	0x54442d18
   c3854:	bff921fb 	.word	0xbff921fb
   c3858:	440fffff 	.word	0x440fffff
   c385c:	7ff00000 	.word	0x7ff00000
   c3860:	3fdbffff 	.word	0x3fdbffff
   c3864:	000c86b8 	.word	0x000c86b8
   c3868:	000c86d8 	.word	0x000c86d8
   c386c:	3ff00000 	.word	0x3ff00000
   c3870:	3ff2ffff 	.word	0x3ff2ffff
   c3874:	40038000 	.word	0x40038000
   c3878:	3ff80000 	.word	0x3ff80000
   c387c:	bff00000 	.word	0xbff00000

000c3880 <fabs>:
   c3880:	ec51 0b10 	vmov	r0, r1, d0
   c3884:	ee10 2a10 	vmov	r2, s0
   c3888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c388c:	ec43 2b10 	vmov	d0, r2, r3
   c3890:	4770      	bx	lr
   c3892:	bf00      	nop

000c3894 <atanf>:
   c3894:	b538      	push	{r3, r4, r5, lr}
   c3896:	ee10 5a10 	vmov	r5, s0
   c389a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c389e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c38a2:	eef0 7a40 	vmov.f32	s15, s0
   c38a6:	db0b      	blt.n	c38c0 <atanf+0x2c>
   c38a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c38ac:	dc5b      	bgt.n	c3966 <atanf+0xd2>
   c38ae:	eddf 7a53 	vldr	s15, [pc, #332]	; c39fc <atanf+0x168>
   c38b2:	ed9f 0a53 	vldr	s0, [pc, #332]	; c3a00 <atanf+0x16c>
   c38b6:	2d00      	cmp	r5, #0
   c38b8:	bfc8      	it	gt
   c38ba:	eeb0 0a67 	vmovgt.f32	s0, s15
   c38be:	bd38      	pop	{r3, r4, r5, pc}
   c38c0:	4b50      	ldr	r3, [pc, #320]	; (c3a04 <atanf+0x170>)
   c38c2:	429c      	cmp	r4, r3
   c38c4:	dc5e      	bgt.n	c3984 <atanf+0xf0>
   c38c6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c38ca:	db4f      	blt.n	c396c <atanf+0xd8>
   c38cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c38d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c38d4:	eddf 4a4c 	vldr	s9, [pc, #304]	; c3a08 <atanf+0x174>
   c38d8:	eddf 5a4c 	vldr	s11, [pc, #304]	; c3a0c <atanf+0x178>
   c38dc:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c3a10 <atanf+0x17c>
   c38e0:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c3a14 <atanf+0x180>
   c38e4:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c38e8:	eeb0 6a66 	vmov.f32	s12, s13
   c38ec:	eee7 5a24 	vfma.f32	s11, s14, s9
   c38f0:	1c5a      	adds	r2, r3, #1
   c38f2:	eddf 4a49 	vldr	s9, [pc, #292]	; c3a18 <atanf+0x184>
   c38f6:	eddf 6a49 	vldr	s13, [pc, #292]	; c3a1c <atanf+0x188>
   c38fa:	eea5 5a87 	vfma.f32	s10, s11, s14
   c38fe:	eee7 6a24 	vfma.f32	s13, s14, s9
   c3902:	eddf 5a47 	vldr	s11, [pc, #284]	; c3a20 <atanf+0x18c>
   c3906:	eddf 4a47 	vldr	s9, [pc, #284]	; c3a24 <atanf+0x190>
   c390a:	eee6 5a87 	vfma.f32	s11, s13, s14
   c390e:	eea5 4a07 	vfma.f32	s8, s10, s14
   c3912:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3a28 <atanf+0x194>
   c3916:	eddf 6a45 	vldr	s13, [pc, #276]	; c3a2c <atanf+0x198>
   c391a:	eea5 5a87 	vfma.f32	s10, s11, s14
   c391e:	eee4 4a07 	vfma.f32	s9, s8, s14
   c3922:	eddf 5a43 	vldr	s11, [pc, #268]	; c3a30 <atanf+0x19c>
   c3926:	eee4 6a87 	vfma.f32	s13, s9, s14
   c392a:	eee5 5a07 	vfma.f32	s11, s10, s14
   c392e:	ee66 6a86 	vmul.f32	s13, s13, s12
   c3932:	ee25 7a87 	vmul.f32	s14, s11, s14
   c3936:	d03a      	beq.n	c39ae <atanf+0x11a>
   c3938:	4a3e      	ldr	r2, [pc, #248]	; (c3a34 <atanf+0x1a0>)
   c393a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c393e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3942:	ed92 0a00 	vldr	s0, [r2]
   c3946:	4a3c      	ldr	r2, [pc, #240]	; (c3a38 <atanf+0x1a4>)
   c3948:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c394c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3950:	2d00      	cmp	r5, #0
   c3952:	ed93 7a00 	vldr	s14, [r3]
   c3956:	ee70 7a67 	vsub.f32	s15, s0, s15
   c395a:	ee37 0a67 	vsub.f32	s0, s14, s15
   c395e:	daae      	bge.n	c38be <atanf+0x2a>
   c3960:	eeb1 0a40 	vneg.f32	s0, s0
   c3964:	bd38      	pop	{r3, r4, r5, pc}
   c3966:	ee30 0a00 	vadd.f32	s0, s0, s0
   c396a:	bd38      	pop	{r3, r4, r5, pc}
   c396c:	ed9f 7a33 	vldr	s14, [pc, #204]	; c3a3c <atanf+0x1a8>
   c3970:	ee30 7a07 	vadd.f32	s14, s0, s14
   c3974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3978:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3980:	dda4      	ble.n	c38cc <atanf+0x38>
   c3982:	bd38      	pop	{r3, r4, r5, pc}
   c3984:	f000 f860 	bl	c3a48 <fabsf>
   c3988:	4b2d      	ldr	r3, [pc, #180]	; (c3a40 <atanf+0x1ac>)
   c398a:	429c      	cmp	r4, r3
   c398c:	dc16      	bgt.n	c39bc <atanf+0x128>
   c398e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c3992:	429c      	cmp	r4, r3
   c3994:	dc27      	bgt.n	c39e6 <atanf+0x152>
   c3996:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c399a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c399e:	eea0 7a27 	vfma.f32	s14, s0, s15
   c39a2:	2300      	movs	r3, #0
   c39a4:	ee30 0a27 	vadd.f32	s0, s0, s15
   c39a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c39ac:	e790      	b.n	c38d0 <atanf+0x3c>
   c39ae:	ee76 6a87 	vadd.f32	s13, s13, s14
   c39b2:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c39b6:	eeb0 0a67 	vmov.f32	s0, s15
   c39ba:	bd38      	pop	{r3, r4, r5, pc}
   c39bc:	4b21      	ldr	r3, [pc, #132]	; (c3a44 <atanf+0x1b0>)
   c39be:	429c      	cmp	r4, r3
   c39c0:	dc0b      	bgt.n	c39da <atanf+0x146>
   c39c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c39c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c39ca:	eea0 7a27 	vfma.f32	s14, s0, s15
   c39ce:	2302      	movs	r3, #2
   c39d0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c39d4:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c39d8:	e77a      	b.n	c38d0 <atanf+0x3c>
   c39da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c39de:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c39e2:	2303      	movs	r3, #3
   c39e4:	e774      	b.n	c38d0 <atanf+0x3c>
   c39e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c39ea:	ee30 7a67 	vsub.f32	s14, s0, s15
   c39ee:	ee30 0a27 	vadd.f32	s0, s0, s15
   c39f2:	2301      	movs	r3, #1
   c39f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c39f8:	e76a      	b.n	c38d0 <atanf+0x3c>
   c39fa:	bf00      	nop
   c39fc:	3fc90fdb 	.word	0x3fc90fdb
   c3a00:	bfc90fdb 	.word	0xbfc90fdb
   c3a04:	3edfffff 	.word	0x3edfffff
   c3a08:	3c8569d7 	.word	0x3c8569d7
   c3a0c:	3d4bda59 	.word	0x3d4bda59
   c3a10:	3d886b35 	.word	0x3d886b35
   c3a14:	3dba2e6e 	.word	0x3dba2e6e
   c3a18:	bd15a221 	.word	0xbd15a221
   c3a1c:	bd6ef16b 	.word	0xbd6ef16b
   c3a20:	bd9d8795 	.word	0xbd9d8795
   c3a24:	3e124925 	.word	0x3e124925
   c3a28:	bde38e38 	.word	0xbde38e38
   c3a2c:	3eaaaaab 	.word	0x3eaaaaab
   c3a30:	be4ccccd 	.word	0xbe4ccccd
   c3a34:	000c8708 	.word	0x000c8708
   c3a38:	000c86f8 	.word	0x000c86f8
   c3a3c:	7149f2ca 	.word	0x7149f2ca
   c3a40:	3f97ffff 	.word	0x3f97ffff
   c3a44:	401bffff 	.word	0x401bffff

000c3a48 <fabsf>:
   c3a48:	ee10 3a10 	vmov	r3, s0
   c3a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3a50:	ee00 3a10 	vmov	s0, r3
   c3a54:	4770      	bx	lr
   c3a56:	bf00      	nop

000c3a58 <floorf>:
   c3a58:	ee10 2a10 	vmov	r2, s0
   c3a5c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3a60:	3b7f      	subs	r3, #127	; 0x7f
   c3a62:	2b16      	cmp	r3, #22
   c3a64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3a68:	dc28      	bgt.n	c3abc <floorf+0x64>
   c3a6a:	2b00      	cmp	r3, #0
   c3a6c:	db18      	blt.n	c3aa0 <floorf+0x48>
   c3a6e:	491a      	ldr	r1, [pc, #104]	; (c3ad8 <floorf+0x80>)
   c3a70:	4119      	asrs	r1, r3
   c3a72:	420a      	tst	r2, r1
   c3a74:	d021      	beq.n	c3aba <floorf+0x62>
   c3a76:	eddf 7a19 	vldr	s15, [pc, #100]	; c3adc <floorf+0x84>
   c3a7a:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3a86:	dd18      	ble.n	c3aba <floorf+0x62>
   c3a88:	2a00      	cmp	r2, #0
   c3a8a:	da04      	bge.n	c3a96 <floorf+0x3e>
   c3a8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3a90:	fa40 f303 	asr.w	r3, r0, r3
   c3a94:	441a      	add	r2, r3
   c3a96:	ea22 0301 	bic.w	r3, r2, r1
   c3a9a:	ee00 3a10 	vmov	s0, r3
   c3a9e:	4770      	bx	lr
   c3aa0:	eddf 7a0e 	vldr	s15, [pc, #56]	; c3adc <floorf+0x84>
   c3aa4:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3ab0:	dd03      	ble.n	c3aba <floorf+0x62>
   c3ab2:	2a00      	cmp	r2, #0
   c3ab4:	db08      	blt.n	c3ac8 <floorf+0x70>
   c3ab6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3ae0 <floorf+0x88>
   c3aba:	4770      	bx	lr
   c3abc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3ac0:	d3fb      	bcc.n	c3aba <floorf+0x62>
   c3ac2:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3ac6:	4770      	bx	lr
   c3ac8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c3acc:	2900      	cmp	r1, #0
   c3ace:	bf18      	it	ne
   c3ad0:	eeb0 0a67 	vmovne.f32	s0, s15
   c3ad4:	4770      	bx	lr
   c3ad6:	bf00      	nop
   c3ad8:	007fffff 	.word	0x007fffff
   c3adc:	7149f2ca 	.word	0x7149f2ca
   c3ae0:	00000000 	.word	0x00000000

000c3ae4 <scalbnf>:
   c3ae4:	b082      	sub	sp, #8
   c3ae6:	ed8d 0a01 	vstr	s0, [sp, #4]
   c3aea:	9b01      	ldr	r3, [sp, #4]
   c3aec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c3af0:	d02a      	beq.n	c3b48 <scalbnf+0x64>
   c3af2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c3af6:	d223      	bcs.n	c3b40 <scalbnf+0x5c>
   c3af8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c3afc:	d128      	bne.n	c3b50 <scalbnf+0x6c>
   c3afe:	ed9d 7a01 	vldr	s14, [sp, #4]
   c3b02:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3bac <scalbnf+0xc8>
   c3b06:	4b2a      	ldr	r3, [pc, #168]	; (c3bb0 <scalbnf+0xcc>)
   c3b08:	ee67 7a27 	vmul.f32	s15, s14, s15
   c3b0c:	4298      	cmp	r0, r3
   c3b0e:	edcd 7a01 	vstr	s15, [sp, #4]
   c3b12:	db37      	blt.n	c3b84 <scalbnf+0xa0>
   c3b14:	9b01      	ldr	r3, [sp, #4]
   c3b16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c3b1a:	3a19      	subs	r2, #25
   c3b1c:	4402      	add	r2, r0
   c3b1e:	2afe      	cmp	r2, #254	; 0xfe
   c3b20:	dd1a      	ble.n	c3b58 <scalbnf+0x74>
   c3b22:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3bb4 <scalbnf+0xd0>
   c3b26:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3bb8 <scalbnf+0xd4>
   c3b2a:	9b01      	ldr	r3, [sp, #4]
   c3b2c:	2b00      	cmp	r3, #0
   c3b2e:	eef0 7a40 	vmov.f32	s15, s0
   c3b32:	bfb8      	it	lt
   c3b34:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3b38:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3b3c:	b002      	add	sp, #8
   c3b3e:	4770      	bx	lr
   c3b40:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3b44:	b002      	add	sp, #8
   c3b46:	4770      	bx	lr
   c3b48:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3b4c:	b002      	add	sp, #8
   c3b4e:	4770      	bx	lr
   c3b50:	0dd2      	lsrs	r2, r2, #23
   c3b52:	4402      	add	r2, r0
   c3b54:	2afe      	cmp	r2, #254	; 0xfe
   c3b56:	dce4      	bgt.n	c3b22 <scalbnf+0x3e>
   c3b58:	2a00      	cmp	r2, #0
   c3b5a:	dc0b      	bgt.n	c3b74 <scalbnf+0x90>
   c3b5c:	f112 0f16 	cmn.w	r2, #22
   c3b60:	da17      	bge.n	c3b92 <scalbnf+0xae>
   c3b62:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3b66:	4298      	cmp	r0, r3
   c3b68:	dcdb      	bgt.n	c3b22 <scalbnf+0x3e>
   c3b6a:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3bbc <scalbnf+0xd8>
   c3b6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3bc0 <scalbnf+0xdc>
   c3b72:	e7da      	b.n	c3b2a <scalbnf+0x46>
   c3b74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3b78:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3b7c:	ee00 3a10 	vmov	s0, r3
   c3b80:	b002      	add	sp, #8
   c3b82:	4770      	bx	lr
   c3b84:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3bbc <scalbnf+0xd8>
   c3b88:	eddd 7a01 	vldr	s15, [sp, #4]
   c3b8c:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3b90:	e7d8      	b.n	c3b44 <scalbnf+0x60>
   c3b92:	3219      	adds	r2, #25
   c3b94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3b98:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3b9c:	eddf 7a09 	vldr	s15, [pc, #36]	; c3bc4 <scalbnf+0xe0>
   c3ba0:	ee07 3a10 	vmov	s14, r3
   c3ba4:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3ba8:	e7cc      	b.n	c3b44 <scalbnf+0x60>
   c3baa:	bf00      	nop
   c3bac:	4c000000 	.word	0x4c000000
   c3bb0:	ffff3cb0 	.word	0xffff3cb0
   c3bb4:	7149f2ca 	.word	0x7149f2ca
   c3bb8:	f149f2ca 	.word	0xf149f2ca
   c3bbc:	0da24260 	.word	0x0da24260
   c3bc0:	8da24260 	.word	0x8da24260
   c3bc4:	33000000 	.word	0x33000000

000c3bc8 <__aeabi_drsub>:
   c3bc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c3bcc:	e002      	b.n	c3bd4 <__adddf3>
   c3bce:	bf00      	nop

000c3bd0 <__aeabi_dsub>:
   c3bd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3bd4 <__adddf3>:
   c3bd4:	b530      	push	{r4, r5, lr}
   c3bd6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3bda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3bde:	ea94 0f05 	teq	r4, r5
   c3be2:	bf08      	it	eq
   c3be4:	ea90 0f02 	teqeq	r0, r2
   c3be8:	bf1f      	itttt	ne
   c3bea:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3bee:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3bf2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3bf6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3bfa:	f000 80e2 	beq.w	c3dc2 <__adddf3+0x1ee>
   c3bfe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3c02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3c06:	bfb8      	it	lt
   c3c08:	426d      	neglt	r5, r5
   c3c0a:	dd0c      	ble.n	c3c26 <__adddf3+0x52>
   c3c0c:	442c      	add	r4, r5
   c3c0e:	ea80 0202 	eor.w	r2, r0, r2
   c3c12:	ea81 0303 	eor.w	r3, r1, r3
   c3c16:	ea82 0000 	eor.w	r0, r2, r0
   c3c1a:	ea83 0101 	eor.w	r1, r3, r1
   c3c1e:	ea80 0202 	eor.w	r2, r0, r2
   c3c22:	ea81 0303 	eor.w	r3, r1, r3
   c3c26:	2d36      	cmp	r5, #54	; 0x36
   c3c28:	bf88      	it	hi
   c3c2a:	bd30      	pophi	{r4, r5, pc}
   c3c2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3c30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3c34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3c38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3c3c:	d002      	beq.n	c3c44 <__adddf3+0x70>
   c3c3e:	4240      	negs	r0, r0
   c3c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3c44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3c4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3c50:	d002      	beq.n	c3c58 <__adddf3+0x84>
   c3c52:	4252      	negs	r2, r2
   c3c54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3c58:	ea94 0f05 	teq	r4, r5
   c3c5c:	f000 80a7 	beq.w	c3dae <__adddf3+0x1da>
   c3c60:	f1a4 0401 	sub.w	r4, r4, #1
   c3c64:	f1d5 0e20 	rsbs	lr, r5, #32
   c3c68:	db0d      	blt.n	c3c86 <__adddf3+0xb2>
   c3c6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3c6e:	fa22 f205 	lsr.w	r2, r2, r5
   c3c72:	1880      	adds	r0, r0, r2
   c3c74:	f141 0100 	adc.w	r1, r1, #0
   c3c78:	fa03 f20e 	lsl.w	r2, r3, lr
   c3c7c:	1880      	adds	r0, r0, r2
   c3c7e:	fa43 f305 	asr.w	r3, r3, r5
   c3c82:	4159      	adcs	r1, r3
   c3c84:	e00e      	b.n	c3ca4 <__adddf3+0xd0>
   c3c86:	f1a5 0520 	sub.w	r5, r5, #32
   c3c8a:	f10e 0e20 	add.w	lr, lr, #32
   c3c8e:	2a01      	cmp	r2, #1
   c3c90:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3c94:	bf28      	it	cs
   c3c96:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3c9a:	fa43 f305 	asr.w	r3, r3, r5
   c3c9e:	18c0      	adds	r0, r0, r3
   c3ca0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3ca4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3ca8:	d507      	bpl.n	c3cba <__adddf3+0xe6>
   c3caa:	f04f 0e00 	mov.w	lr, #0
   c3cae:	f1dc 0c00 	rsbs	ip, ip, #0
   c3cb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3cb6:	eb6e 0101 	sbc.w	r1, lr, r1
   c3cba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3cbe:	d31b      	bcc.n	c3cf8 <__adddf3+0x124>
   c3cc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3cc4:	d30c      	bcc.n	c3ce0 <__adddf3+0x10c>
   c3cc6:	0849      	lsrs	r1, r1, #1
   c3cc8:	ea5f 0030 	movs.w	r0, r0, rrx
   c3ccc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3cd0:	f104 0401 	add.w	r4, r4, #1
   c3cd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3cd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3cdc:	f080 809a 	bcs.w	c3e14 <__adddf3+0x240>
   c3ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3ce4:	bf08      	it	eq
   c3ce6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3cea:	f150 0000 	adcs.w	r0, r0, #0
   c3cee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3cf2:	ea41 0105 	orr.w	r1, r1, r5
   c3cf6:	bd30      	pop	{r4, r5, pc}
   c3cf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3cfc:	4140      	adcs	r0, r0
   c3cfe:	eb41 0101 	adc.w	r1, r1, r1
   c3d02:	3c01      	subs	r4, #1
   c3d04:	bf28      	it	cs
   c3d06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3d0a:	d2e9      	bcs.n	c3ce0 <__adddf3+0x10c>
   c3d0c:	f091 0f00 	teq	r1, #0
   c3d10:	bf04      	itt	eq
   c3d12:	4601      	moveq	r1, r0
   c3d14:	2000      	moveq	r0, #0
   c3d16:	fab1 f381 	clz	r3, r1
   c3d1a:	bf08      	it	eq
   c3d1c:	3320      	addeq	r3, #32
   c3d1e:	f1a3 030b 	sub.w	r3, r3, #11
   c3d22:	f1b3 0220 	subs.w	r2, r3, #32
   c3d26:	da0c      	bge.n	c3d42 <__adddf3+0x16e>
   c3d28:	320c      	adds	r2, #12
   c3d2a:	dd08      	ble.n	c3d3e <__adddf3+0x16a>
   c3d2c:	f102 0c14 	add.w	ip, r2, #20
   c3d30:	f1c2 020c 	rsb	r2, r2, #12
   c3d34:	fa01 f00c 	lsl.w	r0, r1, ip
   c3d38:	fa21 f102 	lsr.w	r1, r1, r2
   c3d3c:	e00c      	b.n	c3d58 <__adddf3+0x184>
   c3d3e:	f102 0214 	add.w	r2, r2, #20
   c3d42:	bfd8      	it	le
   c3d44:	f1c2 0c20 	rsble	ip, r2, #32
   c3d48:	fa01 f102 	lsl.w	r1, r1, r2
   c3d4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3d50:	bfdc      	itt	le
   c3d52:	ea41 010c 	orrle.w	r1, r1, ip
   c3d56:	4090      	lslle	r0, r2
   c3d58:	1ae4      	subs	r4, r4, r3
   c3d5a:	bfa2      	ittt	ge
   c3d5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3d60:	4329      	orrge	r1, r5
   c3d62:	bd30      	popge	{r4, r5, pc}
   c3d64:	ea6f 0404 	mvn.w	r4, r4
   c3d68:	3c1f      	subs	r4, #31
   c3d6a:	da1c      	bge.n	c3da6 <__adddf3+0x1d2>
   c3d6c:	340c      	adds	r4, #12
   c3d6e:	dc0e      	bgt.n	c3d8e <__adddf3+0x1ba>
   c3d70:	f104 0414 	add.w	r4, r4, #20
   c3d74:	f1c4 0220 	rsb	r2, r4, #32
   c3d78:	fa20 f004 	lsr.w	r0, r0, r4
   c3d7c:	fa01 f302 	lsl.w	r3, r1, r2
   c3d80:	ea40 0003 	orr.w	r0, r0, r3
   c3d84:	fa21 f304 	lsr.w	r3, r1, r4
   c3d88:	ea45 0103 	orr.w	r1, r5, r3
   c3d8c:	bd30      	pop	{r4, r5, pc}
   c3d8e:	f1c4 040c 	rsb	r4, r4, #12
   c3d92:	f1c4 0220 	rsb	r2, r4, #32
   c3d96:	fa20 f002 	lsr.w	r0, r0, r2
   c3d9a:	fa01 f304 	lsl.w	r3, r1, r4
   c3d9e:	ea40 0003 	orr.w	r0, r0, r3
   c3da2:	4629      	mov	r1, r5
   c3da4:	bd30      	pop	{r4, r5, pc}
   c3da6:	fa21 f004 	lsr.w	r0, r1, r4
   c3daa:	4629      	mov	r1, r5
   c3dac:	bd30      	pop	{r4, r5, pc}
   c3dae:	f094 0f00 	teq	r4, #0
   c3db2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3db6:	bf06      	itte	eq
   c3db8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3dbc:	3401      	addeq	r4, #1
   c3dbe:	3d01      	subne	r5, #1
   c3dc0:	e74e      	b.n	c3c60 <__adddf3+0x8c>
   c3dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3dc6:	bf18      	it	ne
   c3dc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3dcc:	d029      	beq.n	c3e22 <__adddf3+0x24e>
   c3dce:	ea94 0f05 	teq	r4, r5
   c3dd2:	bf08      	it	eq
   c3dd4:	ea90 0f02 	teqeq	r0, r2
   c3dd8:	d005      	beq.n	c3de6 <__adddf3+0x212>
   c3dda:	ea54 0c00 	orrs.w	ip, r4, r0
   c3dde:	bf04      	itt	eq
   c3de0:	4619      	moveq	r1, r3
   c3de2:	4610      	moveq	r0, r2
   c3de4:	bd30      	pop	{r4, r5, pc}
   c3de6:	ea91 0f03 	teq	r1, r3
   c3dea:	bf1e      	ittt	ne
   c3dec:	2100      	movne	r1, #0
   c3dee:	2000      	movne	r0, #0
   c3df0:	bd30      	popne	{r4, r5, pc}
   c3df2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3df6:	d105      	bne.n	c3e04 <__adddf3+0x230>
   c3df8:	0040      	lsls	r0, r0, #1
   c3dfa:	4149      	adcs	r1, r1
   c3dfc:	bf28      	it	cs
   c3dfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3e02:	bd30      	pop	{r4, r5, pc}
   c3e04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3e08:	bf3c      	itt	cc
   c3e0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3e0e:	bd30      	popcc	{r4, r5, pc}
   c3e10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3e14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3e1c:	f04f 0000 	mov.w	r0, #0
   c3e20:	bd30      	pop	{r4, r5, pc}
   c3e22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3e26:	bf1a      	itte	ne
   c3e28:	4619      	movne	r1, r3
   c3e2a:	4610      	movne	r0, r2
   c3e2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3e30:	bf1c      	itt	ne
   c3e32:	460b      	movne	r3, r1
   c3e34:	4602      	movne	r2, r0
   c3e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3e3a:	bf06      	itte	eq
   c3e3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3e40:	ea91 0f03 	teqeq	r1, r3
   c3e44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3e48:	bd30      	pop	{r4, r5, pc}
   c3e4a:	bf00      	nop

000c3e4c <__aeabi_ui2d>:
   c3e4c:	f090 0f00 	teq	r0, #0
   c3e50:	bf04      	itt	eq
   c3e52:	2100      	moveq	r1, #0
   c3e54:	4770      	bxeq	lr
   c3e56:	b530      	push	{r4, r5, lr}
   c3e58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3e5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3e60:	f04f 0500 	mov.w	r5, #0
   c3e64:	f04f 0100 	mov.w	r1, #0
   c3e68:	e750      	b.n	c3d0c <__adddf3+0x138>
   c3e6a:	bf00      	nop

000c3e6c <__aeabi_i2d>:
   c3e6c:	f090 0f00 	teq	r0, #0
   c3e70:	bf04      	itt	eq
   c3e72:	2100      	moveq	r1, #0
   c3e74:	4770      	bxeq	lr
   c3e76:	b530      	push	{r4, r5, lr}
   c3e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3e80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3e84:	bf48      	it	mi
   c3e86:	4240      	negmi	r0, r0
   c3e88:	f04f 0100 	mov.w	r1, #0
   c3e8c:	e73e      	b.n	c3d0c <__adddf3+0x138>
   c3e8e:	bf00      	nop

000c3e90 <__aeabi_f2d>:
   c3e90:	0042      	lsls	r2, r0, #1
   c3e92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3e96:	ea4f 0131 	mov.w	r1, r1, rrx
   c3e9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3e9e:	bf1f      	itttt	ne
   c3ea0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3ea8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3eac:	4770      	bxne	lr
   c3eae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3eb2:	bf08      	it	eq
   c3eb4:	4770      	bxeq	lr
   c3eb6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3eba:	bf04      	itt	eq
   c3ebc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3ec0:	4770      	bxeq	lr
   c3ec2:	b530      	push	{r4, r5, lr}
   c3ec4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3ec8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3ed0:	e71c      	b.n	c3d0c <__adddf3+0x138>
   c3ed2:	bf00      	nop

000c3ed4 <__aeabi_ul2d>:
   c3ed4:	ea50 0201 	orrs.w	r2, r0, r1
   c3ed8:	bf08      	it	eq
   c3eda:	4770      	bxeq	lr
   c3edc:	b530      	push	{r4, r5, lr}
   c3ede:	f04f 0500 	mov.w	r5, #0
   c3ee2:	e00a      	b.n	c3efa <__aeabi_l2d+0x16>

000c3ee4 <__aeabi_l2d>:
   c3ee4:	ea50 0201 	orrs.w	r2, r0, r1
   c3ee8:	bf08      	it	eq
   c3eea:	4770      	bxeq	lr
   c3eec:	b530      	push	{r4, r5, lr}
   c3eee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3ef2:	d502      	bpl.n	c3efa <__aeabi_l2d+0x16>
   c3ef4:	4240      	negs	r0, r0
   c3ef6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3efa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3efe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3f02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3f06:	f43f aed8 	beq.w	c3cba <__adddf3+0xe6>
   c3f0a:	f04f 0203 	mov.w	r2, #3
   c3f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3f12:	bf18      	it	ne
   c3f14:	3203      	addne	r2, #3
   c3f16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3f1a:	bf18      	it	ne
   c3f1c:	3203      	addne	r2, #3
   c3f1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3f22:	f1c2 0320 	rsb	r3, r2, #32
   c3f26:	fa00 fc03 	lsl.w	ip, r0, r3
   c3f2a:	fa20 f002 	lsr.w	r0, r0, r2
   c3f2e:	fa01 fe03 	lsl.w	lr, r1, r3
   c3f32:	ea40 000e 	orr.w	r0, r0, lr
   c3f36:	fa21 f102 	lsr.w	r1, r1, r2
   c3f3a:	4414      	add	r4, r2
   c3f3c:	e6bd      	b.n	c3cba <__adddf3+0xe6>
   c3f3e:	bf00      	nop

000c3f40 <__aeabi_dmul>:
   c3f40:	b570      	push	{r4, r5, r6, lr}
   c3f42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3f46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3f4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3f4e:	bf1d      	ittte	ne
   c3f50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3f54:	ea94 0f0c 	teqne	r4, ip
   c3f58:	ea95 0f0c 	teqne	r5, ip
   c3f5c:	f000 f8de 	bleq	c411c <__aeabi_dmul+0x1dc>
   c3f60:	442c      	add	r4, r5
   c3f62:	ea81 0603 	eor.w	r6, r1, r3
   c3f66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3f6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3f6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3f72:	bf18      	it	ne
   c3f74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3f80:	d038      	beq.n	c3ff4 <__aeabi_dmul+0xb4>
   c3f82:	fba0 ce02 	umull	ip, lr, r0, r2
   c3f86:	f04f 0500 	mov.w	r5, #0
   c3f8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3f8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3f92:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3f96:	f04f 0600 	mov.w	r6, #0
   c3f9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3f9e:	f09c 0f00 	teq	ip, #0
   c3fa2:	bf18      	it	ne
   c3fa4:	f04e 0e01 	orrne.w	lr, lr, #1
   c3fa8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3fac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3fb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3fb4:	d204      	bcs.n	c3fc0 <__aeabi_dmul+0x80>
   c3fb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3fba:	416d      	adcs	r5, r5
   c3fbc:	eb46 0606 	adc.w	r6, r6, r6
   c3fc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3fc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3fc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3fcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3fd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3fd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3fd8:	bf88      	it	hi
   c3fda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3fde:	d81e      	bhi.n	c401e <__aeabi_dmul+0xde>
   c3fe0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3fe4:	bf08      	it	eq
   c3fe6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3fea:	f150 0000 	adcs.w	r0, r0, #0
   c3fee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3ff2:	bd70      	pop	{r4, r5, r6, pc}
   c3ff4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3ff8:	ea46 0101 	orr.w	r1, r6, r1
   c3ffc:	ea40 0002 	orr.w	r0, r0, r2
   c4000:	ea81 0103 	eor.w	r1, r1, r3
   c4004:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c4008:	bfc2      	ittt	gt
   c400a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c400e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c4012:	bd70      	popgt	{r4, r5, r6, pc}
   c4014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4018:	f04f 0e00 	mov.w	lr, #0
   c401c:	3c01      	subs	r4, #1
   c401e:	f300 80ab 	bgt.w	c4178 <__aeabi_dmul+0x238>
   c4022:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c4026:	bfde      	ittt	le
   c4028:	2000      	movle	r0, #0
   c402a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c402e:	bd70      	pople	{r4, r5, r6, pc}
   c4030:	f1c4 0400 	rsb	r4, r4, #0
   c4034:	3c20      	subs	r4, #32
   c4036:	da35      	bge.n	c40a4 <__aeabi_dmul+0x164>
   c4038:	340c      	adds	r4, #12
   c403a:	dc1b      	bgt.n	c4074 <__aeabi_dmul+0x134>
   c403c:	f104 0414 	add.w	r4, r4, #20
   c4040:	f1c4 0520 	rsb	r5, r4, #32
   c4044:	fa00 f305 	lsl.w	r3, r0, r5
   c4048:	fa20 f004 	lsr.w	r0, r0, r4
   c404c:	fa01 f205 	lsl.w	r2, r1, r5
   c4050:	ea40 0002 	orr.w	r0, r0, r2
   c4054:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c4058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c405c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4060:	fa21 f604 	lsr.w	r6, r1, r4
   c4064:	eb42 0106 	adc.w	r1, r2, r6
   c4068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c406c:	bf08      	it	eq
   c406e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c4072:	bd70      	pop	{r4, r5, r6, pc}
   c4074:	f1c4 040c 	rsb	r4, r4, #12
   c4078:	f1c4 0520 	rsb	r5, r4, #32
   c407c:	fa00 f304 	lsl.w	r3, r0, r4
   c4080:	fa20 f005 	lsr.w	r0, r0, r5
   c4084:	fa01 f204 	lsl.w	r2, r1, r4
   c4088:	ea40 0002 	orr.w	r0, r0, r2
   c408c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4094:	f141 0100 	adc.w	r1, r1, #0
   c4098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c409c:	bf08      	it	eq
   c409e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c40a2:	bd70      	pop	{r4, r5, r6, pc}
   c40a4:	f1c4 0520 	rsb	r5, r4, #32
   c40a8:	fa00 f205 	lsl.w	r2, r0, r5
   c40ac:	ea4e 0e02 	orr.w	lr, lr, r2
   c40b0:	fa20 f304 	lsr.w	r3, r0, r4
   c40b4:	fa01 f205 	lsl.w	r2, r1, r5
   c40b8:	ea43 0302 	orr.w	r3, r3, r2
   c40bc:	fa21 f004 	lsr.w	r0, r1, r4
   c40c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c40c4:	fa21 f204 	lsr.w	r2, r1, r4
   c40c8:	ea20 0002 	bic.w	r0, r0, r2
   c40cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c40d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c40d4:	bf08      	it	eq
   c40d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c40da:	bd70      	pop	{r4, r5, r6, pc}
   c40dc:	f094 0f00 	teq	r4, #0
   c40e0:	d10f      	bne.n	c4102 <__aeabi_dmul+0x1c2>
   c40e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c40e6:	0040      	lsls	r0, r0, #1
   c40e8:	eb41 0101 	adc.w	r1, r1, r1
   c40ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c40f0:	bf08      	it	eq
   c40f2:	3c01      	subeq	r4, #1
   c40f4:	d0f7      	beq.n	c40e6 <__aeabi_dmul+0x1a6>
   c40f6:	ea41 0106 	orr.w	r1, r1, r6
   c40fa:	f095 0f00 	teq	r5, #0
   c40fe:	bf18      	it	ne
   c4100:	4770      	bxne	lr
   c4102:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c4106:	0052      	lsls	r2, r2, #1
   c4108:	eb43 0303 	adc.w	r3, r3, r3
   c410c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c4110:	bf08      	it	eq
   c4112:	3d01      	subeq	r5, #1
   c4114:	d0f7      	beq.n	c4106 <__aeabi_dmul+0x1c6>
   c4116:	ea43 0306 	orr.w	r3, r3, r6
   c411a:	4770      	bx	lr
   c411c:	ea94 0f0c 	teq	r4, ip
   c4120:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4124:	bf18      	it	ne
   c4126:	ea95 0f0c 	teqne	r5, ip
   c412a:	d00c      	beq.n	c4146 <__aeabi_dmul+0x206>
   c412c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4130:	bf18      	it	ne
   c4132:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4136:	d1d1      	bne.n	c40dc <__aeabi_dmul+0x19c>
   c4138:	ea81 0103 	eor.w	r1, r1, r3
   c413c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4140:	f04f 0000 	mov.w	r0, #0
   c4144:	bd70      	pop	{r4, r5, r6, pc}
   c4146:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c414a:	bf06      	itte	eq
   c414c:	4610      	moveq	r0, r2
   c414e:	4619      	moveq	r1, r3
   c4150:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4154:	d019      	beq.n	c418a <__aeabi_dmul+0x24a>
   c4156:	ea94 0f0c 	teq	r4, ip
   c415a:	d102      	bne.n	c4162 <__aeabi_dmul+0x222>
   c415c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c4160:	d113      	bne.n	c418a <__aeabi_dmul+0x24a>
   c4162:	ea95 0f0c 	teq	r5, ip
   c4166:	d105      	bne.n	c4174 <__aeabi_dmul+0x234>
   c4168:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c416c:	bf1c      	itt	ne
   c416e:	4610      	movne	r0, r2
   c4170:	4619      	movne	r1, r3
   c4172:	d10a      	bne.n	c418a <__aeabi_dmul+0x24a>
   c4174:	ea81 0103 	eor.w	r1, r1, r3
   c4178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c417c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c4184:	f04f 0000 	mov.w	r0, #0
   c4188:	bd70      	pop	{r4, r5, r6, pc}
   c418a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c418e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c4192:	bd70      	pop	{r4, r5, r6, pc}

000c4194 <__aeabi_ddiv>:
   c4194:	b570      	push	{r4, r5, r6, lr}
   c4196:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c419a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c419e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c41a2:	bf1d      	ittte	ne
   c41a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c41a8:	ea94 0f0c 	teqne	r4, ip
   c41ac:	ea95 0f0c 	teqne	r5, ip
   c41b0:	f000 f8a7 	bleq	c4302 <__aeabi_ddiv+0x16e>
   c41b4:	eba4 0405 	sub.w	r4, r4, r5
   c41b8:	ea81 0e03 	eor.w	lr, r1, r3
   c41bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c41c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c41c4:	f000 8088 	beq.w	c42d8 <__aeabi_ddiv+0x144>
   c41c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c41cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c41d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c41d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c41d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c41dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c41e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c41e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c41e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c41ec:	429d      	cmp	r5, r3
   c41ee:	bf08      	it	eq
   c41f0:	4296      	cmpeq	r6, r2
   c41f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c41f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c41fa:	d202      	bcs.n	c4202 <__aeabi_ddiv+0x6e>
   c41fc:	085b      	lsrs	r3, r3, #1
   c41fe:	ea4f 0232 	mov.w	r2, r2, rrx
   c4202:	1ab6      	subs	r6, r6, r2
   c4204:	eb65 0503 	sbc.w	r5, r5, r3
   c4208:	085b      	lsrs	r3, r3, #1
   c420a:	ea4f 0232 	mov.w	r2, r2, rrx
   c420e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c4212:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c4216:	ebb6 0e02 	subs.w	lr, r6, r2
   c421a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c421e:	bf22      	ittt	cs
   c4220:	1ab6      	subcs	r6, r6, r2
   c4222:	4675      	movcs	r5, lr
   c4224:	ea40 000c 	orrcs.w	r0, r0, ip
   c4228:	085b      	lsrs	r3, r3, #1
   c422a:	ea4f 0232 	mov.w	r2, r2, rrx
   c422e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4232:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4236:	bf22      	ittt	cs
   c4238:	1ab6      	subcs	r6, r6, r2
   c423a:	4675      	movcs	r5, lr
   c423c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c4240:	085b      	lsrs	r3, r3, #1
   c4242:	ea4f 0232 	mov.w	r2, r2, rrx
   c4246:	ebb6 0e02 	subs.w	lr, r6, r2
   c424a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c424e:	bf22      	ittt	cs
   c4250:	1ab6      	subcs	r6, r6, r2
   c4252:	4675      	movcs	r5, lr
   c4254:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4258:	085b      	lsrs	r3, r3, #1
   c425a:	ea4f 0232 	mov.w	r2, r2, rrx
   c425e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4262:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4266:	bf22      	ittt	cs
   c4268:	1ab6      	subcs	r6, r6, r2
   c426a:	4675      	movcs	r5, lr
   c426c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4270:	ea55 0e06 	orrs.w	lr, r5, r6
   c4274:	d018      	beq.n	c42a8 <__aeabi_ddiv+0x114>
   c4276:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c427a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c427e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c4282:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c4286:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c428a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c428e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4292:	d1c0      	bne.n	c4216 <__aeabi_ddiv+0x82>
   c4294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4298:	d10b      	bne.n	c42b2 <__aeabi_ddiv+0x11e>
   c429a:	ea41 0100 	orr.w	r1, r1, r0
   c429e:	f04f 0000 	mov.w	r0, #0
   c42a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c42a6:	e7b6      	b.n	c4216 <__aeabi_ddiv+0x82>
   c42a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c42ac:	bf04      	itt	eq
   c42ae:	4301      	orreq	r1, r0
   c42b0:	2000      	moveq	r0, #0
   c42b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c42b6:	bf88      	it	hi
   c42b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c42bc:	f63f aeaf 	bhi.w	c401e <__aeabi_dmul+0xde>
   c42c0:	ebb5 0c03 	subs.w	ip, r5, r3
   c42c4:	bf04      	itt	eq
   c42c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c42ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c42ce:	f150 0000 	adcs.w	r0, r0, #0
   c42d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c42d6:	bd70      	pop	{r4, r5, r6, pc}
   c42d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c42dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c42e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c42e4:	bfc2      	ittt	gt
   c42e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c42ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c42ee:	bd70      	popgt	{r4, r5, r6, pc}
   c42f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c42f4:	f04f 0e00 	mov.w	lr, #0
   c42f8:	3c01      	subs	r4, #1
   c42fa:	e690      	b.n	c401e <__aeabi_dmul+0xde>
   c42fc:	ea45 0e06 	orr.w	lr, r5, r6
   c4300:	e68d      	b.n	c401e <__aeabi_dmul+0xde>
   c4302:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4306:	ea94 0f0c 	teq	r4, ip
   c430a:	bf08      	it	eq
   c430c:	ea95 0f0c 	teqeq	r5, ip
   c4310:	f43f af3b 	beq.w	c418a <__aeabi_dmul+0x24a>
   c4314:	ea94 0f0c 	teq	r4, ip
   c4318:	d10a      	bne.n	c4330 <__aeabi_ddiv+0x19c>
   c431a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c431e:	f47f af34 	bne.w	c418a <__aeabi_dmul+0x24a>
   c4322:	ea95 0f0c 	teq	r5, ip
   c4326:	f47f af25 	bne.w	c4174 <__aeabi_dmul+0x234>
   c432a:	4610      	mov	r0, r2
   c432c:	4619      	mov	r1, r3
   c432e:	e72c      	b.n	c418a <__aeabi_dmul+0x24a>
   c4330:	ea95 0f0c 	teq	r5, ip
   c4334:	d106      	bne.n	c4344 <__aeabi_ddiv+0x1b0>
   c4336:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c433a:	f43f aefd 	beq.w	c4138 <__aeabi_dmul+0x1f8>
   c433e:	4610      	mov	r0, r2
   c4340:	4619      	mov	r1, r3
   c4342:	e722      	b.n	c418a <__aeabi_dmul+0x24a>
   c4344:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4348:	bf18      	it	ne
   c434a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c434e:	f47f aec5 	bne.w	c40dc <__aeabi_dmul+0x19c>
   c4352:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c4356:	f47f af0d 	bne.w	c4174 <__aeabi_dmul+0x234>
   c435a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c435e:	f47f aeeb 	bne.w	c4138 <__aeabi_dmul+0x1f8>
   c4362:	e712      	b.n	c418a <__aeabi_dmul+0x24a>

000c4364 <__gedf2>:
   c4364:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4368:	e006      	b.n	c4378 <__cmpdf2+0x4>
   c436a:	bf00      	nop

000c436c <__ledf2>:
   c436c:	f04f 0c01 	mov.w	ip, #1
   c4370:	e002      	b.n	c4378 <__cmpdf2+0x4>
   c4372:	bf00      	nop

000c4374 <__cmpdf2>:
   c4374:	f04f 0c01 	mov.w	ip, #1
   c4378:	f84d cd04 	str.w	ip, [sp, #-4]!
   c437c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4388:	bf18      	it	ne
   c438a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c438e:	d01b      	beq.n	c43c8 <__cmpdf2+0x54>
   c4390:	b001      	add	sp, #4
   c4392:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c4396:	bf0c      	ite	eq
   c4398:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c439c:	ea91 0f03 	teqne	r1, r3
   c43a0:	bf02      	ittt	eq
   c43a2:	ea90 0f02 	teqeq	r0, r2
   c43a6:	2000      	moveq	r0, #0
   c43a8:	4770      	bxeq	lr
   c43aa:	f110 0f00 	cmn.w	r0, #0
   c43ae:	ea91 0f03 	teq	r1, r3
   c43b2:	bf58      	it	pl
   c43b4:	4299      	cmppl	r1, r3
   c43b6:	bf08      	it	eq
   c43b8:	4290      	cmpeq	r0, r2
   c43ba:	bf2c      	ite	cs
   c43bc:	17d8      	asrcs	r0, r3, #31
   c43be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c43c2:	f040 0001 	orr.w	r0, r0, #1
   c43c6:	4770      	bx	lr
   c43c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c43cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43d0:	d102      	bne.n	c43d8 <__cmpdf2+0x64>
   c43d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c43d6:	d107      	bne.n	c43e8 <__cmpdf2+0x74>
   c43d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c43dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43e0:	d1d6      	bne.n	c4390 <__cmpdf2+0x1c>
   c43e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c43e6:	d0d3      	beq.n	c4390 <__cmpdf2+0x1c>
   c43e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c43ec:	4770      	bx	lr
   c43ee:	bf00      	nop

000c43f0 <__aeabi_cdrcmple>:
   c43f0:	4684      	mov	ip, r0
   c43f2:	4610      	mov	r0, r2
   c43f4:	4662      	mov	r2, ip
   c43f6:	468c      	mov	ip, r1
   c43f8:	4619      	mov	r1, r3
   c43fa:	4663      	mov	r3, ip
   c43fc:	e000      	b.n	c4400 <__aeabi_cdcmpeq>
   c43fe:	bf00      	nop

000c4400 <__aeabi_cdcmpeq>:
   c4400:	b501      	push	{r0, lr}
   c4402:	f7ff ffb7 	bl	c4374 <__cmpdf2>
   c4406:	2800      	cmp	r0, #0
   c4408:	bf48      	it	mi
   c440a:	f110 0f00 	cmnmi.w	r0, #0
   c440e:	bd01      	pop	{r0, pc}

000c4410 <__aeabi_dcmpeq>:
   c4410:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4414:	f7ff fff4 	bl	c4400 <__aeabi_cdcmpeq>
   c4418:	bf0c      	ite	eq
   c441a:	2001      	moveq	r0, #1
   c441c:	2000      	movne	r0, #0
   c441e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4422:	bf00      	nop

000c4424 <__aeabi_dcmplt>:
   c4424:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4428:	f7ff ffea 	bl	c4400 <__aeabi_cdcmpeq>
   c442c:	bf34      	ite	cc
   c442e:	2001      	movcc	r0, #1
   c4430:	2000      	movcs	r0, #0
   c4432:	f85d fb08 	ldr.w	pc, [sp], #8
   c4436:	bf00      	nop

000c4438 <__aeabi_dcmple>:
   c4438:	f84d ed08 	str.w	lr, [sp, #-8]!
   c443c:	f7ff ffe0 	bl	c4400 <__aeabi_cdcmpeq>
   c4440:	bf94      	ite	ls
   c4442:	2001      	movls	r0, #1
   c4444:	2000      	movhi	r0, #0
   c4446:	f85d fb08 	ldr.w	pc, [sp], #8
   c444a:	bf00      	nop

000c444c <__aeabi_dcmpge>:
   c444c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4450:	f7ff ffce 	bl	c43f0 <__aeabi_cdrcmple>
   c4454:	bf94      	ite	ls
   c4456:	2001      	movls	r0, #1
   c4458:	2000      	movhi	r0, #0
   c445a:	f85d fb08 	ldr.w	pc, [sp], #8
   c445e:	bf00      	nop

000c4460 <__aeabi_dcmpgt>:
   c4460:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4464:	f7ff ffc4 	bl	c43f0 <__aeabi_cdrcmple>
   c4468:	bf34      	ite	cc
   c446a:	2001      	movcc	r0, #1
   c446c:	2000      	movcs	r0, #0
   c446e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4472:	bf00      	nop

000c4474 <__aeabi_dcmpun>:
   c4474:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4478:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c447c:	d102      	bne.n	c4484 <__aeabi_dcmpun+0x10>
   c447e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4482:	d10a      	bne.n	c449a <__aeabi_dcmpun+0x26>
   c4484:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4488:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c448c:	d102      	bne.n	c4494 <__aeabi_dcmpun+0x20>
   c448e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4492:	d102      	bne.n	c449a <__aeabi_dcmpun+0x26>
   c4494:	f04f 0000 	mov.w	r0, #0
   c4498:	4770      	bx	lr
   c449a:	f04f 0001 	mov.w	r0, #1
   c449e:	4770      	bx	lr

000c44a0 <__aeabi_d2iz>:
   c44a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c44a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c44a8:	d215      	bcs.n	c44d6 <__aeabi_d2iz+0x36>
   c44aa:	d511      	bpl.n	c44d0 <__aeabi_d2iz+0x30>
   c44ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c44b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c44b4:	d912      	bls.n	c44dc <__aeabi_d2iz+0x3c>
   c44b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c44ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c44be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c44c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c44c6:	fa23 f002 	lsr.w	r0, r3, r2
   c44ca:	bf18      	it	ne
   c44cc:	4240      	negne	r0, r0
   c44ce:	4770      	bx	lr
   c44d0:	f04f 0000 	mov.w	r0, #0
   c44d4:	4770      	bx	lr
   c44d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c44da:	d105      	bne.n	c44e8 <__aeabi_d2iz+0x48>
   c44dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c44e0:	bf08      	it	eq
   c44e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c44e6:	4770      	bx	lr
   c44e8:	f04f 0000 	mov.w	r0, #0
   c44ec:	4770      	bx	lr
   c44ee:	bf00      	nop

000c44f0 <__aeabi_d2uiz>:
   c44f0:	004a      	lsls	r2, r1, #1
   c44f2:	d211      	bcs.n	c4518 <__aeabi_d2uiz+0x28>
   c44f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c44f8:	d211      	bcs.n	c451e <__aeabi_d2uiz+0x2e>
   c44fa:	d50d      	bpl.n	c4518 <__aeabi_d2uiz+0x28>
   c44fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4500:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4504:	d40e      	bmi.n	c4524 <__aeabi_d2uiz+0x34>
   c4506:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c450a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c450e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4512:	fa23 f002 	lsr.w	r0, r3, r2
   c4516:	4770      	bx	lr
   c4518:	f04f 0000 	mov.w	r0, #0
   c451c:	4770      	bx	lr
   c451e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c4522:	d102      	bne.n	c452a <__aeabi_d2uiz+0x3a>
   c4524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4528:	4770      	bx	lr
   c452a:	f04f 0000 	mov.w	r0, #0
   c452e:	4770      	bx	lr

000c4530 <__aeabi_d2f>:
   c4530:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4534:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c4538:	bf24      	itt	cs
   c453a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c453e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c4542:	d90d      	bls.n	c4560 <__aeabi_d2f+0x30>
   c4544:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c4548:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c454c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4550:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c4554:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4558:	bf08      	it	eq
   c455a:	f020 0001 	biceq.w	r0, r0, #1
   c455e:	4770      	bx	lr
   c4560:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c4564:	d121      	bne.n	c45aa <__aeabi_d2f+0x7a>
   c4566:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c456a:	bfbc      	itt	lt
   c456c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4570:	4770      	bxlt	lr
   c4572:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4576:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c457a:	f1c2 0218 	rsb	r2, r2, #24
   c457e:	f1c2 0c20 	rsb	ip, r2, #32
   c4582:	fa10 f30c 	lsls.w	r3, r0, ip
   c4586:	fa20 f002 	lsr.w	r0, r0, r2
   c458a:	bf18      	it	ne
   c458c:	f040 0001 	orrne.w	r0, r0, #1
   c4590:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c4594:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4598:	fa03 fc0c 	lsl.w	ip, r3, ip
   c459c:	ea40 000c 	orr.w	r0, r0, ip
   c45a0:	fa23 f302 	lsr.w	r3, r3, r2
   c45a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c45a8:	e7cc      	b.n	c4544 <__aeabi_d2f+0x14>
   c45aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c45ae:	d107      	bne.n	c45c0 <__aeabi_d2f+0x90>
   c45b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c45b4:	bf1e      	ittt	ne
   c45b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c45ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c45be:	4770      	bxne	lr
   c45c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c45c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c45c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c45cc:	4770      	bx	lr
   c45ce:	bf00      	nop

000c45d0 <__aeabi_d2ulz>:
   c45d0:	b5d0      	push	{r4, r6, r7, lr}
   c45d2:	4b0c      	ldr	r3, [pc, #48]	; (c4604 <__aeabi_d2ulz+0x34>)
   c45d4:	2200      	movs	r2, #0
   c45d6:	4606      	mov	r6, r0
   c45d8:	460f      	mov	r7, r1
   c45da:	f7ff fcb1 	bl	c3f40 <__aeabi_dmul>
   c45de:	f7ff ff87 	bl	c44f0 <__aeabi_d2uiz>
   c45e2:	4604      	mov	r4, r0
   c45e4:	f7ff fc32 	bl	c3e4c <__aeabi_ui2d>
   c45e8:	4b07      	ldr	r3, [pc, #28]	; (c4608 <__aeabi_d2ulz+0x38>)
   c45ea:	2200      	movs	r2, #0
   c45ec:	f7ff fca8 	bl	c3f40 <__aeabi_dmul>
   c45f0:	4602      	mov	r2, r0
   c45f2:	460b      	mov	r3, r1
   c45f4:	4630      	mov	r0, r6
   c45f6:	4639      	mov	r1, r7
   c45f8:	f7ff faea 	bl	c3bd0 <__aeabi_dsub>
   c45fc:	f7ff ff78 	bl	c44f0 <__aeabi_d2uiz>
   c4600:	4621      	mov	r1, r4
   c4602:	bdd0      	pop	{r4, r6, r7, pc}
   c4604:	3df00000 	.word	0x3df00000
   c4608:	41f00000 	.word	0x41f00000

000c460c <atexit>:
   c460c:	2300      	movs	r3, #0
   c460e:	4601      	mov	r1, r0
   c4610:	461a      	mov	r2, r3
   c4612:	4618      	mov	r0, r3
   c4614:	f001 b806 	b.w	c5624 <__register_exitproc>

000c4618 <atof>:
   c4618:	2100      	movs	r1, #0
   c461a:	f000 bf6b 	b.w	c54f4 <strtod>

000c461e <atoi>:
   c461e:	220a      	movs	r2, #10
   c4620:	2100      	movs	r1, #0
   c4622:	f000 bff5 	b.w	c5610 <strtol>
	...

000c4628 <isprint>:
   c4628:	4b02      	ldr	r3, [pc, #8]	; (c4634 <isprint+0xc>)
   c462a:	4418      	add	r0, r3
   c462c:	7840      	ldrb	r0, [r0, #1]
   c462e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c4632:	4770      	bx	lr
   c4634:	000c87e8 	.word	0x000c87e8

000c4638 <memcmp>:
   c4638:	b510      	push	{r4, lr}
   c463a:	3901      	subs	r1, #1
   c463c:	4402      	add	r2, r0
   c463e:	4290      	cmp	r0, r2
   c4640:	d101      	bne.n	c4646 <memcmp+0xe>
   c4642:	2000      	movs	r0, #0
   c4644:	e005      	b.n	c4652 <memcmp+0x1a>
   c4646:	7803      	ldrb	r3, [r0, #0]
   c4648:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c464c:	42a3      	cmp	r3, r4
   c464e:	d001      	beq.n	c4654 <memcmp+0x1c>
   c4650:	1b18      	subs	r0, r3, r4
   c4652:	bd10      	pop	{r4, pc}
   c4654:	3001      	adds	r0, #1
   c4656:	e7f2      	b.n	c463e <memcmp+0x6>

000c4658 <memcpy>:
   c4658:	440a      	add	r2, r1
   c465a:	4291      	cmp	r1, r2
   c465c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c4660:	d100      	bne.n	c4664 <memcpy+0xc>
   c4662:	4770      	bx	lr
   c4664:	b510      	push	{r4, lr}
   c4666:	f811 4b01 	ldrb.w	r4, [r1], #1
   c466a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c466e:	4291      	cmp	r1, r2
   c4670:	d1f9      	bne.n	c4666 <memcpy+0xe>
   c4672:	bd10      	pop	{r4, pc}

000c4674 <memmove>:
   c4674:	4288      	cmp	r0, r1
   c4676:	b510      	push	{r4, lr}
   c4678:	eb01 0402 	add.w	r4, r1, r2
   c467c:	d902      	bls.n	c4684 <memmove+0x10>
   c467e:	4284      	cmp	r4, r0
   c4680:	4623      	mov	r3, r4
   c4682:	d807      	bhi.n	c4694 <memmove+0x20>
   c4684:	1e43      	subs	r3, r0, #1
   c4686:	42a1      	cmp	r1, r4
   c4688:	d008      	beq.n	c469c <memmove+0x28>
   c468a:	f811 2b01 	ldrb.w	r2, [r1], #1
   c468e:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4692:	e7f8      	b.n	c4686 <memmove+0x12>
   c4694:	4402      	add	r2, r0
   c4696:	4601      	mov	r1, r0
   c4698:	428a      	cmp	r2, r1
   c469a:	d100      	bne.n	c469e <memmove+0x2a>
   c469c:	bd10      	pop	{r4, pc}
   c469e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c46a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c46a6:	e7f7      	b.n	c4698 <memmove+0x24>

000c46a8 <memset>:
   c46a8:	4402      	add	r2, r0
   c46aa:	4603      	mov	r3, r0
   c46ac:	4293      	cmp	r3, r2
   c46ae:	d100      	bne.n	c46b2 <memset+0xa>
   c46b0:	4770      	bx	lr
   c46b2:	f803 1b01 	strb.w	r1, [r3], #1
   c46b6:	e7f9      	b.n	c46ac <memset+0x4>

000c46b8 <srand>:
   c46b8:	b538      	push	{r3, r4, r5, lr}
   c46ba:	4b10      	ldr	r3, [pc, #64]	; (c46fc <srand+0x44>)
   c46bc:	681d      	ldr	r5, [r3, #0]
   c46be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c46c0:	4604      	mov	r4, r0
   c46c2:	b9b3      	cbnz	r3, c46f2 <srand+0x3a>
   c46c4:	2018      	movs	r0, #24
   c46c6:	f7f9 fe33 	bl	be330 <malloc>
   c46ca:	4602      	mov	r2, r0
   c46cc:	63a8      	str	r0, [r5, #56]	; 0x38
   c46ce:	b920      	cbnz	r0, c46da <srand+0x22>
   c46d0:	4b0b      	ldr	r3, [pc, #44]	; (c4700 <srand+0x48>)
   c46d2:	480c      	ldr	r0, [pc, #48]	; (c4704 <srand+0x4c>)
   c46d4:	2142      	movs	r1, #66	; 0x42
   c46d6:	f7f9 fe7b 	bl	be3d0 <__assert_func>
   c46da:	490b      	ldr	r1, [pc, #44]	; (c4708 <srand+0x50>)
   c46dc:	4b0b      	ldr	r3, [pc, #44]	; (c470c <srand+0x54>)
   c46de:	e9c0 1300 	strd	r1, r3, [r0]
   c46e2:	4b0b      	ldr	r3, [pc, #44]	; (c4710 <srand+0x58>)
   c46e4:	6083      	str	r3, [r0, #8]
   c46e6:	230b      	movs	r3, #11
   c46e8:	8183      	strh	r3, [r0, #12]
   c46ea:	2100      	movs	r1, #0
   c46ec:	2001      	movs	r0, #1
   c46ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c46f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c46f4:	2200      	movs	r2, #0
   c46f6:	611c      	str	r4, [r3, #16]
   c46f8:	615a      	str	r2, [r3, #20]
   c46fa:	bd38      	pop	{r3, r4, r5, pc}
   c46fc:	2003db48 	.word	0x2003db48
   c4700:	000c8718 	.word	0x000c8718
   c4704:	000c872f 	.word	0x000c872f
   c4708:	abcd330e 	.word	0xabcd330e
   c470c:	e66d1234 	.word	0xe66d1234
   c4710:	0005deec 	.word	0x0005deec

000c4714 <strcat>:
   c4714:	b510      	push	{r4, lr}
   c4716:	4602      	mov	r2, r0
   c4718:	7814      	ldrb	r4, [r2, #0]
   c471a:	4613      	mov	r3, r2
   c471c:	3201      	adds	r2, #1
   c471e:	2c00      	cmp	r4, #0
   c4720:	d1fa      	bne.n	c4718 <strcat+0x4>
   c4722:	3b01      	subs	r3, #1
   c4724:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4728:	f803 2f01 	strb.w	r2, [r3, #1]!
   c472c:	2a00      	cmp	r2, #0
   c472e:	d1f9      	bne.n	c4724 <strcat+0x10>
   c4730:	bd10      	pop	{r4, pc}

000c4732 <strchr>:
   c4732:	b2c9      	uxtb	r1, r1
   c4734:	4603      	mov	r3, r0
   c4736:	f810 2b01 	ldrb.w	r2, [r0], #1
   c473a:	b11a      	cbz	r2, c4744 <strchr+0x12>
   c473c:	428a      	cmp	r2, r1
   c473e:	d1f9      	bne.n	c4734 <strchr+0x2>
   c4740:	4618      	mov	r0, r3
   c4742:	4770      	bx	lr
   c4744:	2900      	cmp	r1, #0
   c4746:	bf18      	it	ne
   c4748:	2300      	movne	r3, #0
   c474a:	e7f9      	b.n	c4740 <strchr+0xe>

000c474c <strchrnul>:
   c474c:	b510      	push	{r4, lr}
   c474e:	4604      	mov	r4, r0
   c4750:	f7ff ffef 	bl	c4732 <strchr>
   c4754:	b918      	cbnz	r0, c475e <strchrnul+0x12>
   c4756:	4620      	mov	r0, r4
   c4758:	f000 f831 	bl	c47be <strlen>
   c475c:	4420      	add	r0, r4
   c475e:	bd10      	pop	{r4, pc}

000c4760 <strcmp>:
   c4760:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4764:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4768:	2a01      	cmp	r2, #1
   c476a:	bf28      	it	cs
   c476c:	429a      	cmpcs	r2, r3
   c476e:	d0f7      	beq.n	c4760 <strcmp>
   c4770:	1ad0      	subs	r0, r2, r3
   c4772:	4770      	bx	lr

000c4774 <strcpy>:
   c4774:	4603      	mov	r3, r0
   c4776:	f811 2b01 	ldrb.w	r2, [r1], #1
   c477a:	f803 2b01 	strb.w	r2, [r3], #1
   c477e:	2a00      	cmp	r2, #0
   c4780:	d1f9      	bne.n	c4776 <strcpy+0x2>
   c4782:	4770      	bx	lr

000c4784 <strdup>:
   c4784:	4b02      	ldr	r3, [pc, #8]	; (c4790 <strdup+0xc>)
   c4786:	4601      	mov	r1, r0
   c4788:	6818      	ldr	r0, [r3, #0]
   c478a:	f000 b803 	b.w	c4794 <_strdup_r>
   c478e:	bf00      	nop
   c4790:	2003db48 	.word	0x2003db48

000c4794 <_strdup_r>:
   c4794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4796:	4604      	mov	r4, r0
   c4798:	4608      	mov	r0, r1
   c479a:	460d      	mov	r5, r1
   c479c:	f000 f80f 	bl	c47be <strlen>
   c47a0:	1c42      	adds	r2, r0, #1
   c47a2:	4611      	mov	r1, r2
   c47a4:	4620      	mov	r0, r4
   c47a6:	9201      	str	r2, [sp, #4]
   c47a8:	f7f9 fe02 	bl	be3b0 <_malloc_r>
   c47ac:	4604      	mov	r4, r0
   c47ae:	b118      	cbz	r0, c47b8 <_strdup_r+0x24>
   c47b0:	9a01      	ldr	r2, [sp, #4]
   c47b2:	4629      	mov	r1, r5
   c47b4:	f7ff ff50 	bl	c4658 <memcpy>
   c47b8:	4620      	mov	r0, r4
   c47ba:	b003      	add	sp, #12
   c47bc:	bd30      	pop	{r4, r5, pc}

000c47be <strlen>:
   c47be:	4603      	mov	r3, r0
   c47c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   c47c4:	2a00      	cmp	r2, #0
   c47c6:	d1fb      	bne.n	c47c0 <strlen+0x2>
   c47c8:	1a18      	subs	r0, r3, r0
   c47ca:	3801      	subs	r0, #1
   c47cc:	4770      	bx	lr
	...

000c47d0 <strlwr>:
   c47d0:	b510      	push	{r4, lr}
   c47d2:	4c07      	ldr	r4, [pc, #28]	; (c47f0 <strlwr+0x20>)
   c47d4:	1e42      	subs	r2, r0, #1
   c47d6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c47da:	b903      	cbnz	r3, c47de <strlwr+0xe>
   c47dc:	bd10      	pop	{r4, pc}
   c47de:	5ce1      	ldrb	r1, [r4, r3]
   c47e0:	f001 0103 	and.w	r1, r1, #3
   c47e4:	2901      	cmp	r1, #1
   c47e6:	bf08      	it	eq
   c47e8:	3320      	addeq	r3, #32
   c47ea:	7013      	strb	r3, [r2, #0]
   c47ec:	e7f3      	b.n	c47d6 <strlwr+0x6>
   c47ee:	bf00      	nop
   c47f0:	000c87e9 	.word	0x000c87e9

000c47f4 <strncmp>:
   c47f4:	b510      	push	{r4, lr}
   c47f6:	b17a      	cbz	r2, c4818 <strncmp+0x24>
   c47f8:	4603      	mov	r3, r0
   c47fa:	3901      	subs	r1, #1
   c47fc:	1884      	adds	r4, r0, r2
   c47fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4802:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c4806:	4290      	cmp	r0, r2
   c4808:	d101      	bne.n	c480e <strncmp+0x1a>
   c480a:	42a3      	cmp	r3, r4
   c480c:	d101      	bne.n	c4812 <strncmp+0x1e>
   c480e:	1a80      	subs	r0, r0, r2
   c4810:	bd10      	pop	{r4, pc}
   c4812:	2800      	cmp	r0, #0
   c4814:	d1f3      	bne.n	c47fe <strncmp+0xa>
   c4816:	e7fa      	b.n	c480e <strncmp+0x1a>
   c4818:	4610      	mov	r0, r2
   c481a:	e7f9      	b.n	c4810 <strncmp+0x1c>

000c481c <strncpy>:
   c481c:	b510      	push	{r4, lr}
   c481e:	3901      	subs	r1, #1
   c4820:	4603      	mov	r3, r0
   c4822:	b132      	cbz	r2, c4832 <strncpy+0x16>
   c4824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4828:	f803 4b01 	strb.w	r4, [r3], #1
   c482c:	3a01      	subs	r2, #1
   c482e:	2c00      	cmp	r4, #0
   c4830:	d1f7      	bne.n	c4822 <strncpy+0x6>
   c4832:	441a      	add	r2, r3
   c4834:	2100      	movs	r1, #0
   c4836:	4293      	cmp	r3, r2
   c4838:	d100      	bne.n	c483c <strncpy+0x20>
   c483a:	bd10      	pop	{r4, pc}
   c483c:	f803 1b01 	strb.w	r1, [r3], #1
   c4840:	e7f9      	b.n	c4836 <strncpy+0x1a>

000c4842 <strnlen>:
   c4842:	b510      	push	{r4, lr}
   c4844:	4602      	mov	r2, r0
   c4846:	4401      	add	r1, r0
   c4848:	428a      	cmp	r2, r1
   c484a:	4613      	mov	r3, r2
   c484c:	d003      	beq.n	c4856 <strnlen+0x14>
   c484e:	781c      	ldrb	r4, [r3, #0]
   c4850:	3201      	adds	r2, #1
   c4852:	2c00      	cmp	r4, #0
   c4854:	d1f8      	bne.n	c4848 <strnlen+0x6>
   c4856:	1a18      	subs	r0, r3, r0
   c4858:	bd10      	pop	{r4, pc}

000c485a <strrchr>:
   c485a:	b538      	push	{r3, r4, r5, lr}
   c485c:	4603      	mov	r3, r0
   c485e:	460c      	mov	r4, r1
   c4860:	b969      	cbnz	r1, c487e <strrchr+0x24>
   c4862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4866:	f7ff bf64 	b.w	c4732 <strchr>
   c486a:	1c43      	adds	r3, r0, #1
   c486c:	4605      	mov	r5, r0
   c486e:	4621      	mov	r1, r4
   c4870:	4618      	mov	r0, r3
   c4872:	f7ff ff5e 	bl	c4732 <strchr>
   c4876:	2800      	cmp	r0, #0
   c4878:	d1f7      	bne.n	c486a <strrchr+0x10>
   c487a:	4628      	mov	r0, r5
   c487c:	bd38      	pop	{r3, r4, r5, pc}
   c487e:	2500      	movs	r5, #0
   c4880:	e7f5      	b.n	c486e <strrchr+0x14>

000c4882 <strstr>:
   c4882:	780a      	ldrb	r2, [r1, #0]
   c4884:	b570      	push	{r4, r5, r6, lr}
   c4886:	b96a      	cbnz	r2, c48a4 <strstr+0x22>
   c4888:	bd70      	pop	{r4, r5, r6, pc}
   c488a:	429a      	cmp	r2, r3
   c488c:	d109      	bne.n	c48a2 <strstr+0x20>
   c488e:	460c      	mov	r4, r1
   c4890:	4605      	mov	r5, r0
   c4892:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c4896:	2b00      	cmp	r3, #0
   c4898:	d0f6      	beq.n	c4888 <strstr+0x6>
   c489a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c489e:	429e      	cmp	r6, r3
   c48a0:	d0f7      	beq.n	c4892 <strstr+0x10>
   c48a2:	3001      	adds	r0, #1
   c48a4:	7803      	ldrb	r3, [r0, #0]
   c48a6:	2b00      	cmp	r3, #0
   c48a8:	d1ef      	bne.n	c488a <strstr+0x8>
   c48aa:	4618      	mov	r0, r3
   c48ac:	e7ec      	b.n	c4888 <strstr+0x6>

000c48ae <sulp>:
   c48ae:	b570      	push	{r4, r5, r6, lr}
   c48b0:	4604      	mov	r4, r0
   c48b2:	460d      	mov	r5, r1
   c48b4:	ec45 4b10 	vmov	d0, r4, r5
   c48b8:	4616      	mov	r6, r2
   c48ba:	f001 fe0d 	bl	c64d8 <__ulp>
   c48be:	ec51 0b10 	vmov	r0, r1, d0
   c48c2:	b17e      	cbz	r6, c48e4 <sulp+0x36>
   c48c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c48c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c48cc:	2b00      	cmp	r3, #0
   c48ce:	dd09      	ble.n	c48e4 <sulp+0x36>
   c48d0:	051b      	lsls	r3, r3, #20
   c48d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c48d6:	2400      	movs	r4, #0
   c48d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c48dc:	4622      	mov	r2, r4
   c48de:	462b      	mov	r3, r5
   c48e0:	f7ff fb2e 	bl	c3f40 <__aeabi_dmul>
   c48e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000c48e8 <_strtod_l>:
   c48e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c48ec:	ed2d 8b02 	vpush	{d8}
   c48f0:	b09d      	sub	sp, #116	; 0x74
   c48f2:	461f      	mov	r7, r3
   c48f4:	2300      	movs	r3, #0
   c48f6:	9318      	str	r3, [sp, #96]	; 0x60
   c48f8:	4ba2      	ldr	r3, [pc, #648]	; (c4b84 <_strtod_l+0x29c>)
   c48fa:	9213      	str	r2, [sp, #76]	; 0x4c
   c48fc:	681b      	ldr	r3, [r3, #0]
   c48fe:	9305      	str	r3, [sp, #20]
   c4900:	4604      	mov	r4, r0
   c4902:	4618      	mov	r0, r3
   c4904:	4688      	mov	r8, r1
   c4906:	f7ff ff5a 	bl	c47be <strlen>
   c490a:	f04f 0a00 	mov.w	sl, #0
   c490e:	4605      	mov	r5, r0
   c4910:	f04f 0b00 	mov.w	fp, #0
   c4914:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c491a:	781a      	ldrb	r2, [r3, #0]
   c491c:	2a2b      	cmp	r2, #43	; 0x2b
   c491e:	d04e      	beq.n	c49be <_strtod_l+0xd6>
   c4920:	d83b      	bhi.n	c499a <_strtod_l+0xb2>
   c4922:	2a0d      	cmp	r2, #13
   c4924:	d834      	bhi.n	c4990 <_strtod_l+0xa8>
   c4926:	2a08      	cmp	r2, #8
   c4928:	d834      	bhi.n	c4994 <_strtod_l+0xac>
   c492a:	2a00      	cmp	r2, #0
   c492c:	d03e      	beq.n	c49ac <_strtod_l+0xc4>
   c492e:	2300      	movs	r3, #0
   c4930:	930a      	str	r3, [sp, #40]	; 0x28
   c4932:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c4934:	7833      	ldrb	r3, [r6, #0]
   c4936:	2b30      	cmp	r3, #48	; 0x30
   c4938:	f040 80b0 	bne.w	c4a9c <_strtod_l+0x1b4>
   c493c:	7873      	ldrb	r3, [r6, #1]
   c493e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4942:	2b58      	cmp	r3, #88	; 0x58
   c4944:	d168      	bne.n	c4a18 <_strtod_l+0x130>
   c4946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4948:	9301      	str	r3, [sp, #4]
   c494a:	ab18      	add	r3, sp, #96	; 0x60
   c494c:	9702      	str	r7, [sp, #8]
   c494e:	9300      	str	r3, [sp, #0]
   c4950:	4a8d      	ldr	r2, [pc, #564]	; (c4b88 <_strtod_l+0x2a0>)
   c4952:	ab19      	add	r3, sp, #100	; 0x64
   c4954:	a917      	add	r1, sp, #92	; 0x5c
   c4956:	4620      	mov	r0, r4
   c4958:	f000 ff2e 	bl	c57b8 <__gethex>
   c495c:	f010 0707 	ands.w	r7, r0, #7
   c4960:	4605      	mov	r5, r0
   c4962:	d005      	beq.n	c4970 <_strtod_l+0x88>
   c4964:	2f06      	cmp	r7, #6
   c4966:	d12c      	bne.n	c49c2 <_strtod_l+0xda>
   c4968:	3601      	adds	r6, #1
   c496a:	2300      	movs	r3, #0
   c496c:	9617      	str	r6, [sp, #92]	; 0x5c
   c496e:	930a      	str	r3, [sp, #40]	; 0x28
   c4970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4972:	2b00      	cmp	r3, #0
   c4974:	f040 8590 	bne.w	c5498 <_strtod_l+0xbb0>
   c4978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c497a:	b1eb      	cbz	r3, c49b8 <_strtod_l+0xd0>
   c497c:	4652      	mov	r2, sl
   c497e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c4982:	ec43 2b10 	vmov	d0, r2, r3
   c4986:	b01d      	add	sp, #116	; 0x74
   c4988:	ecbd 8b02 	vpop	{d8}
   c498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4990:	2a20      	cmp	r2, #32
   c4992:	d1cc      	bne.n	c492e <_strtod_l+0x46>
   c4994:	3301      	adds	r3, #1
   c4996:	9317      	str	r3, [sp, #92]	; 0x5c
   c4998:	e7be      	b.n	c4918 <_strtod_l+0x30>
   c499a:	2a2d      	cmp	r2, #45	; 0x2d
   c499c:	d1c7      	bne.n	c492e <_strtod_l+0x46>
   c499e:	2201      	movs	r2, #1
   c49a0:	920a      	str	r2, [sp, #40]	; 0x28
   c49a2:	1c5a      	adds	r2, r3, #1
   c49a4:	9217      	str	r2, [sp, #92]	; 0x5c
   c49a6:	785b      	ldrb	r3, [r3, #1]
   c49a8:	2b00      	cmp	r3, #0
   c49aa:	d1c2      	bne.n	c4932 <_strtod_l+0x4a>
   c49ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c49ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c49b2:	2b00      	cmp	r3, #0
   c49b4:	f040 856e 	bne.w	c5494 <_strtod_l+0xbac>
   c49b8:	4652      	mov	r2, sl
   c49ba:	465b      	mov	r3, fp
   c49bc:	e7e1      	b.n	c4982 <_strtod_l+0x9a>
   c49be:	2200      	movs	r2, #0
   c49c0:	e7ee      	b.n	c49a0 <_strtod_l+0xb8>
   c49c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c49c4:	b13a      	cbz	r2, c49d6 <_strtod_l+0xee>
   c49c6:	2135      	movs	r1, #53	; 0x35
   c49c8:	a81a      	add	r0, sp, #104	; 0x68
   c49ca:	f001 fe90 	bl	c66ee <__copybits>
   c49ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   c49d0:	4620      	mov	r0, r4
   c49d2:	f001 fa4f 	bl	c5e74 <_Bfree>
   c49d6:	3f01      	subs	r7, #1
   c49d8:	2f04      	cmp	r7, #4
   c49da:	d806      	bhi.n	c49ea <_strtod_l+0x102>
   c49dc:	e8df f007 	tbb	[pc, r7]
   c49e0:	1714030a 	.word	0x1714030a
   c49e4:	0a          	.byte	0x0a
   c49e5:	00          	.byte	0x00
   c49e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c49ea:	0728      	lsls	r0, r5, #28
   c49ec:	d5c0      	bpl.n	c4970 <_strtod_l+0x88>
   c49ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c49f2:	e7bd      	b.n	c4970 <_strtod_l+0x88>
   c49f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c49f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c49fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c49fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c4a02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c4a06:	e7f0      	b.n	c49ea <_strtod_l+0x102>
   c4a08:	f8df b180 	ldr.w	fp, [pc, #384]	; c4b8c <_strtod_l+0x2a4>
   c4a0c:	e7ed      	b.n	c49ea <_strtod_l+0x102>
   c4a0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c4a12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4a16:	e7e8      	b.n	c49ea <_strtod_l+0x102>
   c4a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a1a:	1c5a      	adds	r2, r3, #1
   c4a1c:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a1e:	785b      	ldrb	r3, [r3, #1]
   c4a20:	2b30      	cmp	r3, #48	; 0x30
   c4a22:	d0f9      	beq.n	c4a18 <_strtod_l+0x130>
   c4a24:	2b00      	cmp	r3, #0
   c4a26:	d0a3      	beq.n	c4970 <_strtod_l+0x88>
   c4a28:	2301      	movs	r3, #1
   c4a2a:	f04f 0900 	mov.w	r9, #0
   c4a2e:	9304      	str	r3, [sp, #16]
   c4a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a32:	9308      	str	r3, [sp, #32]
   c4a34:	f8cd 901c 	str.w	r9, [sp, #28]
   c4a38:	464f      	mov	r7, r9
   c4a3a:	220a      	movs	r2, #10
   c4a3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c4a3e:	7806      	ldrb	r6, [r0, #0]
   c4a40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c4a44:	b2d9      	uxtb	r1, r3
   c4a46:	2909      	cmp	r1, #9
   c4a48:	d92a      	bls.n	c4aa0 <_strtod_l+0x1b8>
   c4a4a:	9905      	ldr	r1, [sp, #20]
   c4a4c:	462a      	mov	r2, r5
   c4a4e:	f7ff fed1 	bl	c47f4 <strncmp>
   c4a52:	b398      	cbz	r0, c4abc <_strtod_l+0x1d4>
   c4a54:	2000      	movs	r0, #0
   c4a56:	4632      	mov	r2, r6
   c4a58:	463d      	mov	r5, r7
   c4a5a:	9005      	str	r0, [sp, #20]
   c4a5c:	4603      	mov	r3, r0
   c4a5e:	2a65      	cmp	r2, #101	; 0x65
   c4a60:	d001      	beq.n	c4a66 <_strtod_l+0x17e>
   c4a62:	2a45      	cmp	r2, #69	; 0x45
   c4a64:	d118      	bne.n	c4a98 <_strtod_l+0x1b0>
   c4a66:	b91d      	cbnz	r5, c4a70 <_strtod_l+0x188>
   c4a68:	9a04      	ldr	r2, [sp, #16]
   c4a6a:	4302      	orrs	r2, r0
   c4a6c:	d09e      	beq.n	c49ac <_strtod_l+0xc4>
   c4a6e:	2500      	movs	r5, #0
   c4a70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4a74:	f108 0201 	add.w	r2, r8, #1
   c4a78:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a7a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c4a7e:	2a2b      	cmp	r2, #43	; 0x2b
   c4a80:	d075      	beq.n	c4b6e <_strtod_l+0x286>
   c4a82:	2a2d      	cmp	r2, #45	; 0x2d
   c4a84:	d07b      	beq.n	c4b7e <_strtod_l+0x296>
   c4a86:	f04f 0c00 	mov.w	ip, #0
   c4a8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c4a8e:	2909      	cmp	r1, #9
   c4a90:	f240 8082 	bls.w	c4b98 <_strtod_l+0x2b0>
   c4a94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4a98:	2600      	movs	r6, #0
   c4a9a:	e09d      	b.n	c4bd8 <_strtod_l+0x2f0>
   c4a9c:	2300      	movs	r3, #0
   c4a9e:	e7c4      	b.n	c4a2a <_strtod_l+0x142>
   c4aa0:	2f08      	cmp	r7, #8
   c4aa2:	bfd8      	it	le
   c4aa4:	9907      	ldrle	r1, [sp, #28]
   c4aa6:	f100 0001 	add.w	r0, r0, #1
   c4aaa:	bfda      	itte	le
   c4aac:	fb02 3301 	mlale	r3, r2, r1, r3
   c4ab0:	9307      	strle	r3, [sp, #28]
   c4ab2:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4ab6:	3701      	adds	r7, #1
   c4ab8:	9017      	str	r0, [sp, #92]	; 0x5c
   c4aba:	e7bf      	b.n	c4a3c <_strtod_l+0x154>
   c4abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4abe:	195a      	adds	r2, r3, r5
   c4ac0:	9217      	str	r2, [sp, #92]	; 0x5c
   c4ac2:	5d5a      	ldrb	r2, [r3, r5]
   c4ac4:	2f00      	cmp	r7, #0
   c4ac6:	d037      	beq.n	c4b38 <_strtod_l+0x250>
   c4ac8:	9005      	str	r0, [sp, #20]
   c4aca:	463d      	mov	r5, r7
   c4acc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c4ad0:	2b09      	cmp	r3, #9
   c4ad2:	d912      	bls.n	c4afa <_strtod_l+0x212>
   c4ad4:	2301      	movs	r3, #1
   c4ad6:	e7c2      	b.n	c4a5e <_strtod_l+0x176>
   c4ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4ada:	1c5a      	adds	r2, r3, #1
   c4adc:	9217      	str	r2, [sp, #92]	; 0x5c
   c4ade:	785a      	ldrb	r2, [r3, #1]
   c4ae0:	3001      	adds	r0, #1
   c4ae2:	2a30      	cmp	r2, #48	; 0x30
   c4ae4:	d0f8      	beq.n	c4ad8 <_strtod_l+0x1f0>
   c4ae6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c4aea:	2b08      	cmp	r3, #8
   c4aec:	f200 84d9 	bhi.w	c54a2 <_strtod_l+0xbba>
   c4af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4af2:	9005      	str	r0, [sp, #20]
   c4af4:	2000      	movs	r0, #0
   c4af6:	9308      	str	r3, [sp, #32]
   c4af8:	4605      	mov	r5, r0
   c4afa:	3a30      	subs	r2, #48	; 0x30
   c4afc:	f100 0301 	add.w	r3, r0, #1
   c4b00:	d014      	beq.n	c4b2c <_strtod_l+0x244>
   c4b02:	9905      	ldr	r1, [sp, #20]
   c4b04:	4419      	add	r1, r3
   c4b06:	9105      	str	r1, [sp, #20]
   c4b08:	462b      	mov	r3, r5
   c4b0a:	eb00 0e05 	add.w	lr, r0, r5
   c4b0e:	210a      	movs	r1, #10
   c4b10:	4573      	cmp	r3, lr
   c4b12:	d113      	bne.n	c4b3c <_strtod_l+0x254>
   c4b14:	182b      	adds	r3, r5, r0
   c4b16:	2b08      	cmp	r3, #8
   c4b18:	f105 0501 	add.w	r5, r5, #1
   c4b1c:	4405      	add	r5, r0
   c4b1e:	dc1c      	bgt.n	c4b5a <_strtod_l+0x272>
   c4b20:	9907      	ldr	r1, [sp, #28]
   c4b22:	230a      	movs	r3, #10
   c4b24:	fb03 2301 	mla	r3, r3, r1, r2
   c4b28:	9307      	str	r3, [sp, #28]
   c4b2a:	2300      	movs	r3, #0
   c4b2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b2e:	1c51      	adds	r1, r2, #1
   c4b30:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b32:	7852      	ldrb	r2, [r2, #1]
   c4b34:	4618      	mov	r0, r3
   c4b36:	e7c9      	b.n	c4acc <_strtod_l+0x1e4>
   c4b38:	4638      	mov	r0, r7
   c4b3a:	e7d2      	b.n	c4ae2 <_strtod_l+0x1fa>
   c4b3c:	2b08      	cmp	r3, #8
   c4b3e:	dc04      	bgt.n	c4b4a <_strtod_l+0x262>
   c4b40:	9e07      	ldr	r6, [sp, #28]
   c4b42:	434e      	muls	r6, r1
   c4b44:	9607      	str	r6, [sp, #28]
   c4b46:	3301      	adds	r3, #1
   c4b48:	e7e2      	b.n	c4b10 <_strtod_l+0x228>
   c4b4a:	f103 0c01 	add.w	ip, r3, #1
   c4b4e:	f1bc 0f10 	cmp.w	ip, #16
   c4b52:	bfd8      	it	le
   c4b54:	fb01 f909 	mulle.w	r9, r1, r9
   c4b58:	e7f5      	b.n	c4b46 <_strtod_l+0x25e>
   c4b5a:	2d10      	cmp	r5, #16
   c4b5c:	bfdc      	itt	le
   c4b5e:	230a      	movle	r3, #10
   c4b60:	fb03 2909 	mlale	r9, r3, r9, r2
   c4b64:	e7e1      	b.n	c4b2a <_strtod_l+0x242>
   c4b66:	2300      	movs	r3, #0
   c4b68:	9305      	str	r3, [sp, #20]
   c4b6a:	2301      	movs	r3, #1
   c4b6c:	e77c      	b.n	c4a68 <_strtod_l+0x180>
   c4b6e:	f04f 0c00 	mov.w	ip, #0
   c4b72:	f108 0202 	add.w	r2, r8, #2
   c4b76:	9217      	str	r2, [sp, #92]	; 0x5c
   c4b78:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4b7c:	e785      	b.n	c4a8a <_strtod_l+0x1a2>
   c4b7e:	f04f 0c01 	mov.w	ip, #1
   c4b82:	e7f6      	b.n	c4b72 <_strtod_l+0x28a>
   c4b84:	000c895c 	.word	0x000c895c
   c4b88:	000c8794 	.word	0x000c8794
   c4b8c:	7ff00000 	.word	0x7ff00000
   c4b90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b92:	1c51      	adds	r1, r2, #1
   c4b94:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b96:	7852      	ldrb	r2, [r2, #1]
   c4b98:	2a30      	cmp	r2, #48	; 0x30
   c4b9a:	d0f9      	beq.n	c4b90 <_strtod_l+0x2a8>
   c4b9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4ba0:	2908      	cmp	r1, #8
   c4ba2:	f63f af79 	bhi.w	c4a98 <_strtod_l+0x1b0>
   c4ba6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4baa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4bac:	9206      	str	r2, [sp, #24]
   c4bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4bb0:	1c51      	adds	r1, r2, #1
   c4bb2:	9117      	str	r1, [sp, #92]	; 0x5c
   c4bb4:	7852      	ldrb	r2, [r2, #1]
   c4bb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4bba:	2e09      	cmp	r6, #9
   c4bbc:	d937      	bls.n	c4c2e <_strtod_l+0x346>
   c4bbe:	9e06      	ldr	r6, [sp, #24]
   c4bc0:	1b89      	subs	r1, r1, r6
   c4bc2:	2908      	cmp	r1, #8
   c4bc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4bc8:	dc02      	bgt.n	c4bd0 <_strtod_l+0x2e8>
   c4bca:	4576      	cmp	r6, lr
   c4bcc:	bfa8      	it	ge
   c4bce:	4676      	movge	r6, lr
   c4bd0:	f1bc 0f00 	cmp.w	ip, #0
   c4bd4:	d000      	beq.n	c4bd8 <_strtod_l+0x2f0>
   c4bd6:	4276      	negs	r6, r6
   c4bd8:	2d00      	cmp	r5, #0
   c4bda:	d14d      	bne.n	c4c78 <_strtod_l+0x390>
   c4bdc:	9904      	ldr	r1, [sp, #16]
   c4bde:	4301      	orrs	r1, r0
   c4be0:	f47f aec6 	bne.w	c4970 <_strtod_l+0x88>
   c4be4:	2b00      	cmp	r3, #0
   c4be6:	f47f aee1 	bne.w	c49ac <_strtod_l+0xc4>
   c4bea:	2a69      	cmp	r2, #105	; 0x69
   c4bec:	d027      	beq.n	c4c3e <_strtod_l+0x356>
   c4bee:	dc24      	bgt.n	c4c3a <_strtod_l+0x352>
   c4bf0:	2a49      	cmp	r2, #73	; 0x49
   c4bf2:	d024      	beq.n	c4c3e <_strtod_l+0x356>
   c4bf4:	2a4e      	cmp	r2, #78	; 0x4e
   c4bf6:	f47f aed9 	bne.w	c49ac <_strtod_l+0xc4>
   c4bfa:	499f      	ldr	r1, [pc, #636]	; (c4e78 <_strtod_l+0x590>)
   c4bfc:	a817      	add	r0, sp, #92	; 0x5c
   c4bfe:	f001 f833 	bl	c5c68 <__match>
   c4c02:	2800      	cmp	r0, #0
   c4c04:	f43f aed2 	beq.w	c49ac <_strtod_l+0xc4>
   c4c08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4c0a:	781b      	ldrb	r3, [r3, #0]
   c4c0c:	2b28      	cmp	r3, #40	; 0x28
   c4c0e:	d12d      	bne.n	c4c6c <_strtod_l+0x384>
   c4c10:	499a      	ldr	r1, [pc, #616]	; (c4e7c <_strtod_l+0x594>)
   c4c12:	aa1a      	add	r2, sp, #104	; 0x68
   c4c14:	a817      	add	r0, sp, #92	; 0x5c
   c4c16:	f001 f83b 	bl	c5c90 <__hexnan>
   c4c1a:	2805      	cmp	r0, #5
   c4c1c:	d126      	bne.n	c4c6c <_strtod_l+0x384>
   c4c1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4c20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4c24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4c28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4c2c:	e6a0      	b.n	c4970 <_strtod_l+0x88>
   c4c2e:	210a      	movs	r1, #10
   c4c30:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4c34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4c38:	e7b9      	b.n	c4bae <_strtod_l+0x2c6>
   c4c3a:	2a6e      	cmp	r2, #110	; 0x6e
   c4c3c:	e7db      	b.n	c4bf6 <_strtod_l+0x30e>
   c4c3e:	4990      	ldr	r1, [pc, #576]	; (c4e80 <_strtod_l+0x598>)
   c4c40:	a817      	add	r0, sp, #92	; 0x5c
   c4c42:	f001 f811 	bl	c5c68 <__match>
   c4c46:	2800      	cmp	r0, #0
   c4c48:	f43f aeb0 	beq.w	c49ac <_strtod_l+0xc4>
   c4c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4c4e:	498d      	ldr	r1, [pc, #564]	; (c4e84 <_strtod_l+0x59c>)
   c4c50:	3b01      	subs	r3, #1
   c4c52:	a817      	add	r0, sp, #92	; 0x5c
   c4c54:	9317      	str	r3, [sp, #92]	; 0x5c
   c4c56:	f001 f807 	bl	c5c68 <__match>
   c4c5a:	b910      	cbnz	r0, c4c62 <_strtod_l+0x37a>
   c4c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4c5e:	3301      	adds	r3, #1
   c4c60:	9317      	str	r3, [sp, #92]	; 0x5c
   c4c62:	f8df b230 	ldr.w	fp, [pc, #560]	; c4e94 <_strtod_l+0x5ac>
   c4c66:	f04f 0a00 	mov.w	sl, #0
   c4c6a:	e681      	b.n	c4970 <_strtod_l+0x88>
   c4c6c:	4886      	ldr	r0, [pc, #536]	; (c4e88 <_strtod_l+0x5a0>)
   c4c6e:	f001 fd93 	bl	c6798 <nan>
   c4c72:	ec5b ab10 	vmov	sl, fp, d0
   c4c76:	e67b      	b.n	c4970 <_strtod_l+0x88>
   c4c78:	9b05      	ldr	r3, [sp, #20]
   c4c7a:	9807      	ldr	r0, [sp, #28]
   c4c7c:	1af3      	subs	r3, r6, r3
   c4c7e:	2f00      	cmp	r7, #0
   c4c80:	bf08      	it	eq
   c4c82:	462f      	moveq	r7, r5
   c4c84:	2d10      	cmp	r5, #16
   c4c86:	9306      	str	r3, [sp, #24]
   c4c88:	46a8      	mov	r8, r5
   c4c8a:	bfa8      	it	ge
   c4c8c:	f04f 0810 	movge.w	r8, #16
   c4c90:	f7ff f8dc 	bl	c3e4c <__aeabi_ui2d>
   c4c94:	2d09      	cmp	r5, #9
   c4c96:	4682      	mov	sl, r0
   c4c98:	468b      	mov	fp, r1
   c4c9a:	dd13      	ble.n	c4cc4 <_strtod_l+0x3dc>
   c4c9c:	4b7b      	ldr	r3, [pc, #492]	; (c4e8c <_strtod_l+0x5a4>)
   c4c9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4ca2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4ca6:	f7ff f94b 	bl	c3f40 <__aeabi_dmul>
   c4caa:	4682      	mov	sl, r0
   c4cac:	4648      	mov	r0, r9
   c4cae:	468b      	mov	fp, r1
   c4cb0:	f7ff f8cc 	bl	c3e4c <__aeabi_ui2d>
   c4cb4:	4602      	mov	r2, r0
   c4cb6:	460b      	mov	r3, r1
   c4cb8:	4650      	mov	r0, sl
   c4cba:	4659      	mov	r1, fp
   c4cbc:	f7fe ff8a 	bl	c3bd4 <__adddf3>
   c4cc0:	4682      	mov	sl, r0
   c4cc2:	468b      	mov	fp, r1
   c4cc4:	2d0f      	cmp	r5, #15
   c4cc6:	dc38      	bgt.n	c4d3a <_strtod_l+0x452>
   c4cc8:	9b06      	ldr	r3, [sp, #24]
   c4cca:	2b00      	cmp	r3, #0
   c4ccc:	f43f ae50 	beq.w	c4970 <_strtod_l+0x88>
   c4cd0:	dd24      	ble.n	c4d1c <_strtod_l+0x434>
   c4cd2:	2b16      	cmp	r3, #22
   c4cd4:	dc0b      	bgt.n	c4cee <_strtod_l+0x406>
   c4cd6:	496d      	ldr	r1, [pc, #436]	; (c4e8c <_strtod_l+0x5a4>)
   c4cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4ce0:	4652      	mov	r2, sl
   c4ce2:	465b      	mov	r3, fp
   c4ce4:	f7ff f92c 	bl	c3f40 <__aeabi_dmul>
   c4ce8:	4682      	mov	sl, r0
   c4cea:	468b      	mov	fp, r1
   c4cec:	e640      	b.n	c4970 <_strtod_l+0x88>
   c4cee:	9a06      	ldr	r2, [sp, #24]
   c4cf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4cf4:	4293      	cmp	r3, r2
   c4cf6:	db20      	blt.n	c4d3a <_strtod_l+0x452>
   c4cf8:	4c64      	ldr	r4, [pc, #400]	; (c4e8c <_strtod_l+0x5a4>)
   c4cfa:	f1c5 050f 	rsb	r5, r5, #15
   c4cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4d02:	4652      	mov	r2, sl
   c4d04:	465b      	mov	r3, fp
   c4d06:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4d0a:	f7ff f919 	bl	c3f40 <__aeabi_dmul>
   c4d0e:	9b06      	ldr	r3, [sp, #24]
   c4d10:	1b5d      	subs	r5, r3, r5
   c4d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4d16:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4d1a:	e7e3      	b.n	c4ce4 <_strtod_l+0x3fc>
   c4d1c:	9b06      	ldr	r3, [sp, #24]
   c4d1e:	3316      	adds	r3, #22
   c4d20:	db0b      	blt.n	c4d3a <_strtod_l+0x452>
   c4d22:	9b05      	ldr	r3, [sp, #20]
   c4d24:	1b9e      	subs	r6, r3, r6
   c4d26:	4b59      	ldr	r3, [pc, #356]	; (c4e8c <_strtod_l+0x5a4>)
   c4d28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4d2c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4d30:	4650      	mov	r0, sl
   c4d32:	4659      	mov	r1, fp
   c4d34:	f7ff fa2e 	bl	c4194 <__aeabi_ddiv>
   c4d38:	e7d6      	b.n	c4ce8 <_strtod_l+0x400>
   c4d3a:	9b06      	ldr	r3, [sp, #24]
   c4d3c:	eba5 0808 	sub.w	r8, r5, r8
   c4d40:	4498      	add	r8, r3
   c4d42:	f1b8 0f00 	cmp.w	r8, #0
   c4d46:	dd74      	ble.n	c4e32 <_strtod_l+0x54a>
   c4d48:	f018 030f 	ands.w	r3, r8, #15
   c4d4c:	d00a      	beq.n	c4d64 <_strtod_l+0x47c>
   c4d4e:	494f      	ldr	r1, [pc, #316]	; (c4e8c <_strtod_l+0x5a4>)
   c4d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4d54:	4652      	mov	r2, sl
   c4d56:	465b      	mov	r3, fp
   c4d58:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4d5c:	f7ff f8f0 	bl	c3f40 <__aeabi_dmul>
   c4d60:	4682      	mov	sl, r0
   c4d62:	468b      	mov	fp, r1
   c4d64:	f038 080f 	bics.w	r8, r8, #15
   c4d68:	d04f      	beq.n	c4e0a <_strtod_l+0x522>
   c4d6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4d6e:	dd22      	ble.n	c4db6 <_strtod_l+0x4ce>
   c4d70:	2500      	movs	r5, #0
   c4d72:	462e      	mov	r6, r5
   c4d74:	9507      	str	r5, [sp, #28]
   c4d76:	9505      	str	r5, [sp, #20]
   c4d78:	2322      	movs	r3, #34	; 0x22
   c4d7a:	f8df b118 	ldr.w	fp, [pc, #280]	; c4e94 <_strtod_l+0x5ac>
   c4d7e:	6023      	str	r3, [r4, #0]
   c4d80:	f04f 0a00 	mov.w	sl, #0
   c4d84:	9b07      	ldr	r3, [sp, #28]
   c4d86:	2b00      	cmp	r3, #0
   c4d88:	f43f adf2 	beq.w	c4970 <_strtod_l+0x88>
   c4d8c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4d8e:	4620      	mov	r0, r4
   c4d90:	f001 f870 	bl	c5e74 <_Bfree>
   c4d94:	9905      	ldr	r1, [sp, #20]
   c4d96:	4620      	mov	r0, r4
   c4d98:	f001 f86c 	bl	c5e74 <_Bfree>
   c4d9c:	4631      	mov	r1, r6
   c4d9e:	4620      	mov	r0, r4
   c4da0:	f001 f868 	bl	c5e74 <_Bfree>
   c4da4:	9907      	ldr	r1, [sp, #28]
   c4da6:	4620      	mov	r0, r4
   c4da8:	f001 f864 	bl	c5e74 <_Bfree>
   c4dac:	4629      	mov	r1, r5
   c4dae:	4620      	mov	r0, r4
   c4db0:	f001 f860 	bl	c5e74 <_Bfree>
   c4db4:	e5dc      	b.n	c4970 <_strtod_l+0x88>
   c4db6:	4b36      	ldr	r3, [pc, #216]	; (c4e90 <_strtod_l+0x5a8>)
   c4db8:	9304      	str	r3, [sp, #16]
   c4dba:	2300      	movs	r3, #0
   c4dbc:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4dc0:	4650      	mov	r0, sl
   c4dc2:	4659      	mov	r1, fp
   c4dc4:	4699      	mov	r9, r3
   c4dc6:	f1b8 0f01 	cmp.w	r8, #1
   c4dca:	dc21      	bgt.n	c4e10 <_strtod_l+0x528>
   c4dcc:	b10b      	cbz	r3, c4dd2 <_strtod_l+0x4ea>
   c4dce:	4682      	mov	sl, r0
   c4dd0:	468b      	mov	fp, r1
   c4dd2:	4b2f      	ldr	r3, [pc, #188]	; (c4e90 <_strtod_l+0x5a8>)
   c4dd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4dd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4ddc:	4652      	mov	r2, sl
   c4dde:	465b      	mov	r3, fp
   c4de0:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4de4:	f7ff f8ac 	bl	c3f40 <__aeabi_dmul>
   c4de8:	4b2a      	ldr	r3, [pc, #168]	; (c4e94 <_strtod_l+0x5ac>)
   c4dea:	460a      	mov	r2, r1
   c4dec:	400b      	ands	r3, r1
   c4dee:	492a      	ldr	r1, [pc, #168]	; (c4e98 <_strtod_l+0x5b0>)
   c4df0:	428b      	cmp	r3, r1
   c4df2:	4682      	mov	sl, r0
   c4df4:	d8bc      	bhi.n	c4d70 <_strtod_l+0x488>
   c4df6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4dfa:	428b      	cmp	r3, r1
   c4dfc:	bf86      	itte	hi
   c4dfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4e9c <_strtod_l+0x5b4>
   c4e02:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c4e06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4e0a:	2300      	movs	r3, #0
   c4e0c:	9304      	str	r3, [sp, #16]
   c4e0e:	e084      	b.n	c4f1a <_strtod_l+0x632>
   c4e10:	f018 0f01 	tst.w	r8, #1
   c4e14:	d005      	beq.n	c4e22 <_strtod_l+0x53a>
   c4e16:	9b04      	ldr	r3, [sp, #16]
   c4e18:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e1c:	f7ff f890 	bl	c3f40 <__aeabi_dmul>
   c4e20:	2301      	movs	r3, #1
   c4e22:	9a04      	ldr	r2, [sp, #16]
   c4e24:	3208      	adds	r2, #8
   c4e26:	f109 0901 	add.w	r9, r9, #1
   c4e2a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4e2e:	9204      	str	r2, [sp, #16]
   c4e30:	e7c9      	b.n	c4dc6 <_strtod_l+0x4de>
   c4e32:	d0ea      	beq.n	c4e0a <_strtod_l+0x522>
   c4e34:	f1c8 0800 	rsb	r8, r8, #0
   c4e38:	f018 020f 	ands.w	r2, r8, #15
   c4e3c:	d00a      	beq.n	c4e54 <_strtod_l+0x56c>
   c4e3e:	4b13      	ldr	r3, [pc, #76]	; (c4e8c <_strtod_l+0x5a4>)
   c4e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4e44:	4650      	mov	r0, sl
   c4e46:	4659      	mov	r1, fp
   c4e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e4c:	f7ff f9a2 	bl	c4194 <__aeabi_ddiv>
   c4e50:	4682      	mov	sl, r0
   c4e52:	468b      	mov	fp, r1
   c4e54:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4e58:	d0d7      	beq.n	c4e0a <_strtod_l+0x522>
   c4e5a:	f1b8 0f1f 	cmp.w	r8, #31
   c4e5e:	dd1f      	ble.n	c4ea0 <_strtod_l+0x5b8>
   c4e60:	2500      	movs	r5, #0
   c4e62:	462e      	mov	r6, r5
   c4e64:	9507      	str	r5, [sp, #28]
   c4e66:	9505      	str	r5, [sp, #20]
   c4e68:	2322      	movs	r3, #34	; 0x22
   c4e6a:	f04f 0a00 	mov.w	sl, #0
   c4e6e:	f04f 0b00 	mov.w	fp, #0
   c4e72:	6023      	str	r3, [r4, #0]
   c4e74:	e786      	b.n	c4d84 <_strtod_l+0x49c>
   c4e76:	bf00      	nop
   c4e78:	000c8791 	.word	0x000c8791
   c4e7c:	000c87a8 	.word	0x000c87a8
   c4e80:	000c8788 	.word	0x000c8788
   c4e84:	000c878b 	.word	0x000c878b
   c4e88:	000c8057 	.word	0x000c8057
   c4e8c:	000c89f0 	.word	0x000c89f0
   c4e90:	000c89c8 	.word	0x000c89c8
   c4e94:	7ff00000 	.word	0x7ff00000
   c4e98:	7ca00000 	.word	0x7ca00000
   c4e9c:	7fefffff 	.word	0x7fefffff
   c4ea0:	f018 0310 	ands.w	r3, r8, #16
   c4ea4:	bf18      	it	ne
   c4ea6:	236a      	movne	r3, #106	; 0x6a
   c4ea8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c5258 <_strtod_l+0x970>
   c4eac:	9304      	str	r3, [sp, #16]
   c4eae:	4650      	mov	r0, sl
   c4eb0:	4659      	mov	r1, fp
   c4eb2:	2300      	movs	r3, #0
   c4eb4:	f018 0f01 	tst.w	r8, #1
   c4eb8:	d004      	beq.n	c4ec4 <_strtod_l+0x5dc>
   c4eba:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4ebe:	f7ff f83f 	bl	c3f40 <__aeabi_dmul>
   c4ec2:	2301      	movs	r3, #1
   c4ec4:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4ec8:	f109 0908 	add.w	r9, r9, #8
   c4ecc:	d1f2      	bne.n	c4eb4 <_strtod_l+0x5cc>
   c4ece:	b10b      	cbz	r3, c4ed4 <_strtod_l+0x5ec>
   c4ed0:	4682      	mov	sl, r0
   c4ed2:	468b      	mov	fp, r1
   c4ed4:	9b04      	ldr	r3, [sp, #16]
   c4ed6:	b1c3      	cbz	r3, c4f0a <_strtod_l+0x622>
   c4ed8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4edc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4ee0:	2b00      	cmp	r3, #0
   c4ee2:	4659      	mov	r1, fp
   c4ee4:	dd11      	ble.n	c4f0a <_strtod_l+0x622>
   c4ee6:	2b1f      	cmp	r3, #31
   c4ee8:	f340 8124 	ble.w	c5134 <_strtod_l+0x84c>
   c4eec:	2b34      	cmp	r3, #52	; 0x34
   c4eee:	bfde      	ittt	le
   c4ef0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4ef4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c4ef8:	fa03 f202 	lslle.w	r2, r3, r2
   c4efc:	f04f 0a00 	mov.w	sl, #0
   c4f00:	bfcc      	ite	gt
   c4f02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4f06:	ea02 0b01 	andle.w	fp, r2, r1
   c4f0a:	2200      	movs	r2, #0
   c4f0c:	2300      	movs	r3, #0
   c4f0e:	4650      	mov	r0, sl
   c4f10:	4659      	mov	r1, fp
   c4f12:	f7ff fa7d 	bl	c4410 <__aeabi_dcmpeq>
   c4f16:	2800      	cmp	r0, #0
   c4f18:	d1a2      	bne.n	c4e60 <_strtod_l+0x578>
   c4f1a:	9b07      	ldr	r3, [sp, #28]
   c4f1c:	9300      	str	r3, [sp, #0]
   c4f1e:	9908      	ldr	r1, [sp, #32]
   c4f20:	462b      	mov	r3, r5
   c4f22:	463a      	mov	r2, r7
   c4f24:	4620      	mov	r0, r4
   c4f26:	f001 f80d 	bl	c5f44 <__s2b>
   c4f2a:	9007      	str	r0, [sp, #28]
   c4f2c:	2800      	cmp	r0, #0
   c4f2e:	f43f af1f 	beq.w	c4d70 <_strtod_l+0x488>
   c4f32:	9b05      	ldr	r3, [sp, #20]
   c4f34:	1b9e      	subs	r6, r3, r6
   c4f36:	9b06      	ldr	r3, [sp, #24]
   c4f38:	2b00      	cmp	r3, #0
   c4f3a:	bfb4      	ite	lt
   c4f3c:	4633      	movlt	r3, r6
   c4f3e:	2300      	movge	r3, #0
   c4f40:	930c      	str	r3, [sp, #48]	; 0x30
   c4f42:	9b06      	ldr	r3, [sp, #24]
   c4f44:	2500      	movs	r5, #0
   c4f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4f4a:	9312      	str	r3, [sp, #72]	; 0x48
   c4f4c:	462e      	mov	r6, r5
   c4f4e:	9b07      	ldr	r3, [sp, #28]
   c4f50:	4620      	mov	r0, r4
   c4f52:	6859      	ldr	r1, [r3, #4]
   c4f54:	f000 ff4e 	bl	c5df4 <_Balloc>
   c4f58:	9005      	str	r0, [sp, #20]
   c4f5a:	2800      	cmp	r0, #0
   c4f5c:	f43f af0c 	beq.w	c4d78 <_strtod_l+0x490>
   c4f60:	9b07      	ldr	r3, [sp, #28]
   c4f62:	691a      	ldr	r2, [r3, #16]
   c4f64:	3202      	adds	r2, #2
   c4f66:	f103 010c 	add.w	r1, r3, #12
   c4f6a:	0092      	lsls	r2, r2, #2
   c4f6c:	300c      	adds	r0, #12
   c4f6e:	f7ff fb73 	bl	c4658 <memcpy>
   c4f72:	ec4b ab10 	vmov	d0, sl, fp
   c4f76:	aa1a      	add	r2, sp, #104	; 0x68
   c4f78:	a919      	add	r1, sp, #100	; 0x64
   c4f7a:	4620      	mov	r0, r4
   c4f7c:	f001 fb28 	bl	c65d0 <__d2b>
   c4f80:	ec4b ab18 	vmov	d8, sl, fp
   c4f84:	9018      	str	r0, [sp, #96]	; 0x60
   c4f86:	2800      	cmp	r0, #0
   c4f88:	f43f aef6 	beq.w	c4d78 <_strtod_l+0x490>
   c4f8c:	2101      	movs	r1, #1
   c4f8e:	4620      	mov	r0, r4
   c4f90:	f001 f872 	bl	c6078 <__i2b>
   c4f94:	4606      	mov	r6, r0
   c4f96:	2800      	cmp	r0, #0
   c4f98:	f43f aeee 	beq.w	c4d78 <_strtod_l+0x490>
   c4f9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4f9e:	9904      	ldr	r1, [sp, #16]
   c4fa0:	2b00      	cmp	r3, #0
   c4fa2:	bfab      	itete	ge
   c4fa4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4fa6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4fa8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4faa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4fae:	bfac      	ite	ge
   c4fb0:	eb03 0902 	addge.w	r9, r3, r2
   c4fb4:	1ad7      	sublt	r7, r2, r3
   c4fb6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4fb8:	eba3 0801 	sub.w	r8, r3, r1
   c4fbc:	4490      	add	r8, r2
   c4fbe:	4ba1      	ldr	r3, [pc, #644]	; (c5244 <_strtod_l+0x95c>)
   c4fc0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4fc4:	4598      	cmp	r8, r3
   c4fc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4fca:	f280 80c7 	bge.w	c515c <_strtod_l+0x874>
   c4fce:	eba3 0308 	sub.w	r3, r3, r8
   c4fd2:	2b1f      	cmp	r3, #31
   c4fd4:	eba2 0203 	sub.w	r2, r2, r3
   c4fd8:	f04f 0101 	mov.w	r1, #1
   c4fdc:	f300 80b1 	bgt.w	c5142 <_strtod_l+0x85a>
   c4fe0:	fa01 f303 	lsl.w	r3, r1, r3
   c4fe4:	930d      	str	r3, [sp, #52]	; 0x34
   c4fe6:	2300      	movs	r3, #0
   c4fe8:	9308      	str	r3, [sp, #32]
   c4fea:	eb09 0802 	add.w	r8, r9, r2
   c4fee:	9b04      	ldr	r3, [sp, #16]
   c4ff0:	45c1      	cmp	r9, r8
   c4ff2:	4417      	add	r7, r2
   c4ff4:	441f      	add	r7, r3
   c4ff6:	464b      	mov	r3, r9
   c4ff8:	bfa8      	it	ge
   c4ffa:	4643      	movge	r3, r8
   c4ffc:	42bb      	cmp	r3, r7
   c4ffe:	bfa8      	it	ge
   c5000:	463b      	movge	r3, r7
   c5002:	2b00      	cmp	r3, #0
   c5004:	bfc2      	ittt	gt
   c5006:	eba8 0803 	subgt.w	r8, r8, r3
   c500a:	1aff      	subgt	r7, r7, r3
   c500c:	eba9 0903 	subgt.w	r9, r9, r3
   c5010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c5012:	2b00      	cmp	r3, #0
   c5014:	dd17      	ble.n	c5046 <_strtod_l+0x75e>
   c5016:	4631      	mov	r1, r6
   c5018:	461a      	mov	r2, r3
   c501a:	4620      	mov	r0, r4
   c501c:	f001 f8ec 	bl	c61f8 <__pow5mult>
   c5020:	4606      	mov	r6, r0
   c5022:	2800      	cmp	r0, #0
   c5024:	f43f aea8 	beq.w	c4d78 <_strtod_l+0x490>
   c5028:	4601      	mov	r1, r0
   c502a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c502c:	4620      	mov	r0, r4
   c502e:	f001 f839 	bl	c60a4 <__multiply>
   c5032:	900b      	str	r0, [sp, #44]	; 0x2c
   c5034:	2800      	cmp	r0, #0
   c5036:	f43f ae9f 	beq.w	c4d78 <_strtod_l+0x490>
   c503a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c503c:	4620      	mov	r0, r4
   c503e:	f000 ff19 	bl	c5e74 <_Bfree>
   c5042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5044:	9318      	str	r3, [sp, #96]	; 0x60
   c5046:	f1b8 0f00 	cmp.w	r8, #0
   c504a:	f300 808c 	bgt.w	c5166 <_strtod_l+0x87e>
   c504e:	9b06      	ldr	r3, [sp, #24]
   c5050:	2b00      	cmp	r3, #0
   c5052:	dd08      	ble.n	c5066 <_strtod_l+0x77e>
   c5054:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c5056:	9905      	ldr	r1, [sp, #20]
   c5058:	4620      	mov	r0, r4
   c505a:	f001 f8cd 	bl	c61f8 <__pow5mult>
   c505e:	9005      	str	r0, [sp, #20]
   c5060:	2800      	cmp	r0, #0
   c5062:	f43f ae89 	beq.w	c4d78 <_strtod_l+0x490>
   c5066:	2f00      	cmp	r7, #0
   c5068:	dd08      	ble.n	c507c <_strtod_l+0x794>
   c506a:	9905      	ldr	r1, [sp, #20]
   c506c:	463a      	mov	r2, r7
   c506e:	4620      	mov	r0, r4
   c5070:	f001 f91c 	bl	c62ac <__lshift>
   c5074:	9005      	str	r0, [sp, #20]
   c5076:	2800      	cmp	r0, #0
   c5078:	f43f ae7e 	beq.w	c4d78 <_strtod_l+0x490>
   c507c:	f1b9 0f00 	cmp.w	r9, #0
   c5080:	dd08      	ble.n	c5094 <_strtod_l+0x7ac>
   c5082:	4631      	mov	r1, r6
   c5084:	464a      	mov	r2, r9
   c5086:	4620      	mov	r0, r4
   c5088:	f001 f910 	bl	c62ac <__lshift>
   c508c:	4606      	mov	r6, r0
   c508e:	2800      	cmp	r0, #0
   c5090:	f43f ae72 	beq.w	c4d78 <_strtod_l+0x490>
   c5094:	9a05      	ldr	r2, [sp, #20]
   c5096:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5098:	4620      	mov	r0, r4
   c509a:	f001 f993 	bl	c63c4 <__mdiff>
   c509e:	4605      	mov	r5, r0
   c50a0:	2800      	cmp	r0, #0
   c50a2:	f43f ae69 	beq.w	c4d78 <_strtod_l+0x490>
   c50a6:	68c3      	ldr	r3, [r0, #12]
   c50a8:	930b      	str	r3, [sp, #44]	; 0x2c
   c50aa:	2300      	movs	r3, #0
   c50ac:	60c3      	str	r3, [r0, #12]
   c50ae:	4631      	mov	r1, r6
   c50b0:	f001 f96c 	bl	c638c <__mcmp>
   c50b4:	2800      	cmp	r0, #0
   c50b6:	da60      	bge.n	c517a <_strtod_l+0x892>
   c50b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c50ba:	ea53 030a 	orrs.w	r3, r3, sl
   c50be:	f040 8082 	bne.w	c51c6 <_strtod_l+0x8de>
   c50c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c50c6:	2b00      	cmp	r3, #0
   c50c8:	d17d      	bne.n	c51c6 <_strtod_l+0x8de>
   c50ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c50ce:	0d1b      	lsrs	r3, r3, #20
   c50d0:	051b      	lsls	r3, r3, #20
   c50d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c50d6:	d976      	bls.n	c51c6 <_strtod_l+0x8de>
   c50d8:	696b      	ldr	r3, [r5, #20]
   c50da:	b913      	cbnz	r3, c50e2 <_strtod_l+0x7fa>
   c50dc:	692b      	ldr	r3, [r5, #16]
   c50de:	2b01      	cmp	r3, #1
   c50e0:	dd71      	ble.n	c51c6 <_strtod_l+0x8de>
   c50e2:	4629      	mov	r1, r5
   c50e4:	2201      	movs	r2, #1
   c50e6:	4620      	mov	r0, r4
   c50e8:	f001 f8e0 	bl	c62ac <__lshift>
   c50ec:	4631      	mov	r1, r6
   c50ee:	4605      	mov	r5, r0
   c50f0:	f001 f94c 	bl	c638c <__mcmp>
   c50f4:	2800      	cmp	r0, #0
   c50f6:	dd66      	ble.n	c51c6 <_strtod_l+0x8de>
   c50f8:	9904      	ldr	r1, [sp, #16]
   c50fa:	4a53      	ldr	r2, [pc, #332]	; (c5248 <_strtod_l+0x960>)
   c50fc:	465b      	mov	r3, fp
   c50fe:	2900      	cmp	r1, #0
   c5100:	f000 8081 	beq.w	c5206 <_strtod_l+0x91e>
   c5104:	ea02 010b 	and.w	r1, r2, fp
   c5108:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c510c:	dc7b      	bgt.n	c5206 <_strtod_l+0x91e>
   c510e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c5112:	f77f aea9 	ble.w	c4e68 <_strtod_l+0x580>
   c5116:	4b4d      	ldr	r3, [pc, #308]	; (c524c <_strtod_l+0x964>)
   c5118:	4650      	mov	r0, sl
   c511a:	4659      	mov	r1, fp
   c511c:	2200      	movs	r2, #0
   c511e:	f7fe ff0f 	bl	c3f40 <__aeabi_dmul>
   c5122:	460b      	mov	r3, r1
   c5124:	4303      	orrs	r3, r0
   c5126:	bf08      	it	eq
   c5128:	2322      	moveq	r3, #34	; 0x22
   c512a:	4682      	mov	sl, r0
   c512c:	468b      	mov	fp, r1
   c512e:	bf08      	it	eq
   c5130:	6023      	streq	r3, [r4, #0]
   c5132:	e62b      	b.n	c4d8c <_strtod_l+0x4a4>
   c5134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5138:	fa02 f303 	lsl.w	r3, r2, r3
   c513c:	ea03 0a0a 	and.w	sl, r3, sl
   c5140:	e6e3      	b.n	c4f0a <_strtod_l+0x622>
   c5142:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c5146:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c514a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c514e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c5152:	fa01 f308 	lsl.w	r3, r1, r8
   c5156:	9308      	str	r3, [sp, #32]
   c5158:	910d      	str	r1, [sp, #52]	; 0x34
   c515a:	e746      	b.n	c4fea <_strtod_l+0x702>
   c515c:	2300      	movs	r3, #0
   c515e:	9308      	str	r3, [sp, #32]
   c5160:	2301      	movs	r3, #1
   c5162:	930d      	str	r3, [sp, #52]	; 0x34
   c5164:	e741      	b.n	c4fea <_strtod_l+0x702>
   c5166:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5168:	4642      	mov	r2, r8
   c516a:	4620      	mov	r0, r4
   c516c:	f001 f89e 	bl	c62ac <__lshift>
   c5170:	9018      	str	r0, [sp, #96]	; 0x60
   c5172:	2800      	cmp	r0, #0
   c5174:	f47f af6b 	bne.w	c504e <_strtod_l+0x766>
   c5178:	e5fe      	b.n	c4d78 <_strtod_l+0x490>
   c517a:	465f      	mov	r7, fp
   c517c:	d16e      	bne.n	c525c <_strtod_l+0x974>
   c517e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c5180:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5184:	b342      	cbz	r2, c51d8 <_strtod_l+0x8f0>
   c5186:	4a32      	ldr	r2, [pc, #200]	; (c5250 <_strtod_l+0x968>)
   c5188:	4293      	cmp	r3, r2
   c518a:	d128      	bne.n	c51de <_strtod_l+0x8f6>
   c518c:	9b04      	ldr	r3, [sp, #16]
   c518e:	4651      	mov	r1, sl
   c5190:	b1eb      	cbz	r3, c51ce <_strtod_l+0x8e6>
   c5192:	4b2d      	ldr	r3, [pc, #180]	; (c5248 <_strtod_l+0x960>)
   c5194:	403b      	ands	r3, r7
   c5196:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c519a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c519e:	d819      	bhi.n	c51d4 <_strtod_l+0x8ec>
   c51a0:	0d1b      	lsrs	r3, r3, #20
   c51a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c51a6:	fa02 f303 	lsl.w	r3, r2, r3
   c51aa:	4299      	cmp	r1, r3
   c51ac:	d117      	bne.n	c51de <_strtod_l+0x8f6>
   c51ae:	4b29      	ldr	r3, [pc, #164]	; (c5254 <_strtod_l+0x96c>)
   c51b0:	429f      	cmp	r7, r3
   c51b2:	d102      	bne.n	c51ba <_strtod_l+0x8d2>
   c51b4:	3101      	adds	r1, #1
   c51b6:	f43f addf 	beq.w	c4d78 <_strtod_l+0x490>
   c51ba:	4b23      	ldr	r3, [pc, #140]	; (c5248 <_strtod_l+0x960>)
   c51bc:	403b      	ands	r3, r7
   c51be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c51c2:	f04f 0a00 	mov.w	sl, #0
   c51c6:	9b04      	ldr	r3, [sp, #16]
   c51c8:	2b00      	cmp	r3, #0
   c51ca:	d1a4      	bne.n	c5116 <_strtod_l+0x82e>
   c51cc:	e5de      	b.n	c4d8c <_strtod_l+0x4a4>
   c51ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c51d2:	e7ea      	b.n	c51aa <_strtod_l+0x8c2>
   c51d4:	4613      	mov	r3, r2
   c51d6:	e7e8      	b.n	c51aa <_strtod_l+0x8c2>
   c51d8:	ea53 030a 	orrs.w	r3, r3, sl
   c51dc:	d08c      	beq.n	c50f8 <_strtod_l+0x810>
   c51de:	9b08      	ldr	r3, [sp, #32]
   c51e0:	b1db      	cbz	r3, c521a <_strtod_l+0x932>
   c51e2:	423b      	tst	r3, r7
   c51e4:	d0ef      	beq.n	c51c6 <_strtod_l+0x8de>
   c51e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c51e8:	9a04      	ldr	r2, [sp, #16]
   c51ea:	4650      	mov	r0, sl
   c51ec:	4659      	mov	r1, fp
   c51ee:	b1c3      	cbz	r3, c5222 <_strtod_l+0x93a>
   c51f0:	f7ff fb5d 	bl	c48ae <sulp>
   c51f4:	4602      	mov	r2, r0
   c51f6:	460b      	mov	r3, r1
   c51f8:	ec51 0b18 	vmov	r0, r1, d8
   c51fc:	f7fe fcea 	bl	c3bd4 <__adddf3>
   c5200:	4682      	mov	sl, r0
   c5202:	468b      	mov	fp, r1
   c5204:	e7df      	b.n	c51c6 <_strtod_l+0x8de>
   c5206:	4013      	ands	r3, r2
   c5208:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c520c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c5210:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c5214:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c5218:	e7d5      	b.n	c51c6 <_strtod_l+0x8de>
   c521a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c521c:	ea13 0f0a 	tst.w	r3, sl
   c5220:	e7e0      	b.n	c51e4 <_strtod_l+0x8fc>
   c5222:	f7ff fb44 	bl	c48ae <sulp>
   c5226:	4602      	mov	r2, r0
   c5228:	460b      	mov	r3, r1
   c522a:	ec51 0b18 	vmov	r0, r1, d8
   c522e:	f7fe fccf 	bl	c3bd0 <__aeabi_dsub>
   c5232:	2200      	movs	r2, #0
   c5234:	2300      	movs	r3, #0
   c5236:	4682      	mov	sl, r0
   c5238:	468b      	mov	fp, r1
   c523a:	f7ff f8e9 	bl	c4410 <__aeabi_dcmpeq>
   c523e:	2800      	cmp	r0, #0
   c5240:	d0c1      	beq.n	c51c6 <_strtod_l+0x8de>
   c5242:	e611      	b.n	c4e68 <_strtod_l+0x580>
   c5244:	fffffc02 	.word	0xfffffc02
   c5248:	7ff00000 	.word	0x7ff00000
   c524c:	39500000 	.word	0x39500000
   c5250:	000fffff 	.word	0x000fffff
   c5254:	7fefffff 	.word	0x7fefffff
   c5258:	000c87c0 	.word	0x000c87c0
   c525c:	4631      	mov	r1, r6
   c525e:	4628      	mov	r0, r5
   c5260:	f001 fa12 	bl	c6688 <__ratio>
   c5264:	ec59 8b10 	vmov	r8, r9, d0
   c5268:	ee10 0a10 	vmov	r0, s0
   c526c:	2200      	movs	r2, #0
   c526e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5272:	4649      	mov	r1, r9
   c5274:	f7ff f8e0 	bl	c4438 <__aeabi_dcmple>
   c5278:	2800      	cmp	r0, #0
   c527a:	d07a      	beq.n	c5372 <_strtod_l+0xa8a>
   c527c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c527e:	2b00      	cmp	r3, #0
   c5280:	d04a      	beq.n	c5318 <_strtod_l+0xa30>
   c5282:	4b95      	ldr	r3, [pc, #596]	; (c54d8 <_strtod_l+0xbf0>)
   c5284:	2200      	movs	r2, #0
   c5286:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c528a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c54d8 <_strtod_l+0xbf0>
   c528e:	f04f 0800 	mov.w	r8, #0
   c5292:	4b92      	ldr	r3, [pc, #584]	; (c54dc <_strtod_l+0xbf4>)
   c5294:	403b      	ands	r3, r7
   c5296:	930d      	str	r3, [sp, #52]	; 0x34
   c5298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c529a:	4b91      	ldr	r3, [pc, #580]	; (c54e0 <_strtod_l+0xbf8>)
   c529c:	429a      	cmp	r2, r3
   c529e:	f040 80b0 	bne.w	c5402 <_strtod_l+0xb1a>
   c52a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c52a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c52aa:	ec4b ab10 	vmov	d0, sl, fp
   c52ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c52b2:	f001 f911 	bl	c64d8 <__ulp>
   c52b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c52ba:	ec53 2b10 	vmov	r2, r3, d0
   c52be:	f7fe fe3f 	bl	c3f40 <__aeabi_dmul>
   c52c2:	4652      	mov	r2, sl
   c52c4:	465b      	mov	r3, fp
   c52c6:	f7fe fc85 	bl	c3bd4 <__adddf3>
   c52ca:	460b      	mov	r3, r1
   c52cc:	4983      	ldr	r1, [pc, #524]	; (c54dc <_strtod_l+0xbf4>)
   c52ce:	4a85      	ldr	r2, [pc, #532]	; (c54e4 <_strtod_l+0xbfc>)
   c52d0:	4019      	ands	r1, r3
   c52d2:	4291      	cmp	r1, r2
   c52d4:	4682      	mov	sl, r0
   c52d6:	d960      	bls.n	c539a <_strtod_l+0xab2>
   c52d8:	ee18 3a90 	vmov	r3, s17
   c52dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c52e0:	4293      	cmp	r3, r2
   c52e2:	d104      	bne.n	c52ee <_strtod_l+0xa06>
   c52e4:	ee18 3a10 	vmov	r3, s16
   c52e8:	3301      	adds	r3, #1
   c52ea:	f43f ad45 	beq.w	c4d78 <_strtod_l+0x490>
   c52ee:	f8df b200 	ldr.w	fp, [pc, #512]	; c54f0 <_strtod_l+0xc08>
   c52f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c52f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c52f8:	4620      	mov	r0, r4
   c52fa:	f000 fdbb 	bl	c5e74 <_Bfree>
   c52fe:	9905      	ldr	r1, [sp, #20]
   c5300:	4620      	mov	r0, r4
   c5302:	f000 fdb7 	bl	c5e74 <_Bfree>
   c5306:	4631      	mov	r1, r6
   c5308:	4620      	mov	r0, r4
   c530a:	f000 fdb3 	bl	c5e74 <_Bfree>
   c530e:	4629      	mov	r1, r5
   c5310:	4620      	mov	r0, r4
   c5312:	f000 fdaf 	bl	c5e74 <_Bfree>
   c5316:	e61a      	b.n	c4f4e <_strtod_l+0x666>
   c5318:	f1ba 0f00 	cmp.w	sl, #0
   c531c:	d11b      	bne.n	c5356 <_strtod_l+0xa6e>
   c531e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5322:	b9f3      	cbnz	r3, c5362 <_strtod_l+0xa7a>
   c5324:	4b6c      	ldr	r3, [pc, #432]	; (c54d8 <_strtod_l+0xbf0>)
   c5326:	2200      	movs	r2, #0
   c5328:	4640      	mov	r0, r8
   c532a:	4649      	mov	r1, r9
   c532c:	f7ff f87a 	bl	c4424 <__aeabi_dcmplt>
   c5330:	b9d0      	cbnz	r0, c5368 <_strtod_l+0xa80>
   c5332:	4640      	mov	r0, r8
   c5334:	4649      	mov	r1, r9
   c5336:	4b6c      	ldr	r3, [pc, #432]	; (c54e8 <_strtod_l+0xc00>)
   c5338:	2200      	movs	r2, #0
   c533a:	f7fe fe01 	bl	c3f40 <__aeabi_dmul>
   c533e:	4680      	mov	r8, r0
   c5340:	4689      	mov	r9, r1
   c5342:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c5346:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c534a:	9315      	str	r3, [sp, #84]	; 0x54
   c534c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5350:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5354:	e79d      	b.n	c5292 <_strtod_l+0x9aa>
   c5356:	f1ba 0f01 	cmp.w	sl, #1
   c535a:	d102      	bne.n	c5362 <_strtod_l+0xa7a>
   c535c:	2f00      	cmp	r7, #0
   c535e:	f43f ad83 	beq.w	c4e68 <_strtod_l+0x580>
   c5362:	4b62      	ldr	r3, [pc, #392]	; (c54ec <_strtod_l+0xc04>)
   c5364:	2200      	movs	r2, #0
   c5366:	e78e      	b.n	c5286 <_strtod_l+0x99e>
   c5368:	f8df 917c 	ldr.w	r9, [pc, #380]	; c54e8 <_strtod_l+0xc00>
   c536c:	f04f 0800 	mov.w	r8, #0
   c5370:	e7e7      	b.n	c5342 <_strtod_l+0xa5a>
   c5372:	4b5d      	ldr	r3, [pc, #372]	; (c54e8 <_strtod_l+0xc00>)
   c5374:	4640      	mov	r0, r8
   c5376:	4649      	mov	r1, r9
   c5378:	2200      	movs	r2, #0
   c537a:	f7fe fde1 	bl	c3f40 <__aeabi_dmul>
   c537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5380:	4680      	mov	r8, r0
   c5382:	4689      	mov	r9, r1
   c5384:	b933      	cbnz	r3, c5394 <_strtod_l+0xaac>
   c5386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c538a:	900e      	str	r0, [sp, #56]	; 0x38
   c538c:	930f      	str	r3, [sp, #60]	; 0x3c
   c538e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c5392:	e7dd      	b.n	c5350 <_strtod_l+0xa68>
   c5394:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5398:	e7f9      	b.n	c538e <_strtod_l+0xaa6>
   c539a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c539e:	9b04      	ldr	r3, [sp, #16]
   c53a0:	2b00      	cmp	r3, #0
   c53a2:	d1a8      	bne.n	c52f6 <_strtod_l+0xa0e>
   c53a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c53a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c53aa:	0d1b      	lsrs	r3, r3, #20
   c53ac:	051b      	lsls	r3, r3, #20
   c53ae:	429a      	cmp	r2, r3
   c53b0:	d1a1      	bne.n	c52f6 <_strtod_l+0xa0e>
   c53b2:	4640      	mov	r0, r8
   c53b4:	4649      	mov	r1, r9
   c53b6:	f001 fa05 	bl	c67c4 <__aeabi_d2lz>
   c53ba:	f7fe fd93 	bl	c3ee4 <__aeabi_l2d>
   c53be:	4602      	mov	r2, r0
   c53c0:	460b      	mov	r3, r1
   c53c2:	4640      	mov	r0, r8
   c53c4:	4649      	mov	r1, r9
   c53c6:	f7fe fc03 	bl	c3bd0 <__aeabi_dsub>
   c53ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c53cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c53d0:	ea43 030a 	orr.w	r3, r3, sl
   c53d4:	4313      	orrs	r3, r2
   c53d6:	4680      	mov	r8, r0
   c53d8:	4689      	mov	r9, r1
   c53da:	d055      	beq.n	c5488 <_strtod_l+0xba0>
   c53dc:	a336      	add	r3, pc, #216	; (adr r3, c54b8 <_strtod_l+0xbd0>)
   c53de:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53e2:	f7ff f81f 	bl	c4424 <__aeabi_dcmplt>
   c53e6:	2800      	cmp	r0, #0
   c53e8:	f47f acd0 	bne.w	c4d8c <_strtod_l+0x4a4>
   c53ec:	a334      	add	r3, pc, #208	; (adr r3, c54c0 <_strtod_l+0xbd8>)
   c53ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53f2:	4640      	mov	r0, r8
   c53f4:	4649      	mov	r1, r9
   c53f6:	f7ff f833 	bl	c4460 <__aeabi_dcmpgt>
   c53fa:	2800      	cmp	r0, #0
   c53fc:	f43f af7b 	beq.w	c52f6 <_strtod_l+0xa0e>
   c5400:	e4c4      	b.n	c4d8c <_strtod_l+0x4a4>
   c5402:	9b04      	ldr	r3, [sp, #16]
   c5404:	b333      	cbz	r3, c5454 <_strtod_l+0xb6c>
   c5406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c5408:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c540c:	d822      	bhi.n	c5454 <_strtod_l+0xb6c>
   c540e:	a32e      	add	r3, pc, #184	; (adr r3, c54c8 <_strtod_l+0xbe0>)
   c5410:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5414:	4640      	mov	r0, r8
   c5416:	4649      	mov	r1, r9
   c5418:	f7ff f80e 	bl	c4438 <__aeabi_dcmple>
   c541c:	b1a0      	cbz	r0, c5448 <_strtod_l+0xb60>
   c541e:	4649      	mov	r1, r9
   c5420:	4640      	mov	r0, r8
   c5422:	f7ff f865 	bl	c44f0 <__aeabi_d2uiz>
   c5426:	2801      	cmp	r0, #1
   c5428:	bf38      	it	cc
   c542a:	2001      	movcc	r0, #1
   c542c:	f7fe fd0e 	bl	c3e4c <__aeabi_ui2d>
   c5430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5432:	4680      	mov	r8, r0
   c5434:	4689      	mov	r9, r1
   c5436:	bb23      	cbnz	r3, c5482 <_strtod_l+0xb9a>
   c5438:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c543c:	9010      	str	r0, [sp, #64]	; 0x40
   c543e:	9311      	str	r3, [sp, #68]	; 0x44
   c5440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c5444:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5448:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c544a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c544c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5450:	1a9b      	subs	r3, r3, r2
   c5452:	9309      	str	r3, [sp, #36]	; 0x24
   c5454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5458:	eeb0 0a48 	vmov.f32	s0, s16
   c545c:	eef0 0a68 	vmov.f32	s1, s17
   c5460:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5464:	f001 f838 	bl	c64d8 <__ulp>
   c5468:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c546c:	ec53 2b10 	vmov	r2, r3, d0
   c5470:	f7fe fd66 	bl	c3f40 <__aeabi_dmul>
   c5474:	ec53 2b18 	vmov	r2, r3, d8
   c5478:	f7fe fbac 	bl	c3bd4 <__adddf3>
   c547c:	4682      	mov	sl, r0
   c547e:	468b      	mov	fp, r1
   c5480:	e78d      	b.n	c539e <_strtod_l+0xab6>
   c5482:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c5486:	e7db      	b.n	c5440 <_strtod_l+0xb58>
   c5488:	a311      	add	r3, pc, #68	; (adr r3, c54d0 <_strtod_l+0xbe8>)
   c548a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c548e:	f7fe ffc9 	bl	c4424 <__aeabi_dcmplt>
   c5492:	e7b2      	b.n	c53fa <_strtod_l+0xb12>
   c5494:	2300      	movs	r3, #0
   c5496:	930a      	str	r3, [sp, #40]	; 0x28
   c5498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c549a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c549c:	6013      	str	r3, [r2, #0]
   c549e:	f7ff ba6b 	b.w	c4978 <_strtod_l+0x90>
   c54a2:	2a65      	cmp	r2, #101	; 0x65
   c54a4:	f43f ab5f 	beq.w	c4b66 <_strtod_l+0x27e>
   c54a8:	2a45      	cmp	r2, #69	; 0x45
   c54aa:	f43f ab5c 	beq.w	c4b66 <_strtod_l+0x27e>
   c54ae:	2301      	movs	r3, #1
   c54b0:	f7ff bb94 	b.w	c4bdc <_strtod_l+0x2f4>
   c54b4:	f3af 8000 	nop.w
   c54b8:	94a03595 	.word	0x94a03595
   c54bc:	3fdfffff 	.word	0x3fdfffff
   c54c0:	35afe535 	.word	0x35afe535
   c54c4:	3fe00000 	.word	0x3fe00000
   c54c8:	ffc00000 	.word	0xffc00000
   c54cc:	41dfffff 	.word	0x41dfffff
   c54d0:	94a03595 	.word	0x94a03595
   c54d4:	3fcfffff 	.word	0x3fcfffff
   c54d8:	3ff00000 	.word	0x3ff00000
   c54dc:	7ff00000 	.word	0x7ff00000
   c54e0:	7fe00000 	.word	0x7fe00000
   c54e4:	7c9fffff 	.word	0x7c9fffff
   c54e8:	3fe00000 	.word	0x3fe00000
   c54ec:	bff00000 	.word	0xbff00000
   c54f0:	7fefffff 	.word	0x7fefffff

000c54f4 <strtod>:
   c54f4:	460a      	mov	r2, r1
   c54f6:	4601      	mov	r1, r0
   c54f8:	4802      	ldr	r0, [pc, #8]	; (c5504 <strtod+0x10>)
   c54fa:	4b03      	ldr	r3, [pc, #12]	; (c5508 <strtod+0x14>)
   c54fc:	6800      	ldr	r0, [r0, #0]
   c54fe:	f7ff b9f3 	b.w	c48e8 <_strtod_l>
   c5502:	bf00      	nop
   c5504:	2003db48 	.word	0x2003db48
   c5508:	2003dbb4 	.word	0x2003dbb4

000c550c <_strtol_l.constprop.0>:
   c550c:	2b01      	cmp	r3, #1
   c550e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5512:	d001      	beq.n	c5518 <_strtol_l.constprop.0+0xc>
   c5514:	2b24      	cmp	r3, #36	; 0x24
   c5516:	d906      	bls.n	c5526 <_strtol_l.constprop.0+0x1a>
   c5518:	f7f8 ff52 	bl	be3c0 <__errno>
   c551c:	2316      	movs	r3, #22
   c551e:	6003      	str	r3, [r0, #0]
   c5520:	2000      	movs	r0, #0
   c5522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5526:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c560c <_strtol_l.constprop.0+0x100>
   c552a:	460d      	mov	r5, r1
   c552c:	462e      	mov	r6, r5
   c552e:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5532:	f814 700c 	ldrb.w	r7, [r4, ip]
   c5536:	f017 0708 	ands.w	r7, r7, #8
   c553a:	d1f7      	bne.n	c552c <_strtol_l.constprop.0+0x20>
   c553c:	2c2d      	cmp	r4, #45	; 0x2d
   c553e:	d132      	bne.n	c55a6 <_strtol_l.constprop.0+0x9a>
   c5540:	782c      	ldrb	r4, [r5, #0]
   c5542:	2701      	movs	r7, #1
   c5544:	1cb5      	adds	r5, r6, #2
   c5546:	2b00      	cmp	r3, #0
   c5548:	d05b      	beq.n	c5602 <_strtol_l.constprop.0+0xf6>
   c554a:	2b10      	cmp	r3, #16
   c554c:	d109      	bne.n	c5562 <_strtol_l.constprop.0+0x56>
   c554e:	2c30      	cmp	r4, #48	; 0x30
   c5550:	d107      	bne.n	c5562 <_strtol_l.constprop.0+0x56>
   c5552:	782c      	ldrb	r4, [r5, #0]
   c5554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5558:	2c58      	cmp	r4, #88	; 0x58
   c555a:	d14d      	bne.n	c55f8 <_strtol_l.constprop.0+0xec>
   c555c:	786c      	ldrb	r4, [r5, #1]
   c555e:	2310      	movs	r3, #16
   c5560:	3502      	adds	r5, #2
   c5562:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c5566:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c556a:	f04f 0c00 	mov.w	ip, #0
   c556e:	fbb8 f9f3 	udiv	r9, r8, r3
   c5572:	4666      	mov	r6, ip
   c5574:	fb03 8a19 	mls	sl, r3, r9, r8
   c5578:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c557c:	f1be 0f09 	cmp.w	lr, #9
   c5580:	d816      	bhi.n	c55b0 <_strtol_l.constprop.0+0xa4>
   c5582:	4674      	mov	r4, lr
   c5584:	42a3      	cmp	r3, r4
   c5586:	dd24      	ble.n	c55d2 <_strtol_l.constprop.0+0xc6>
   c5588:	f1bc 0f00 	cmp.w	ip, #0
   c558c:	db1e      	blt.n	c55cc <_strtol_l.constprop.0+0xc0>
   c558e:	45b1      	cmp	r9, r6
   c5590:	d31c      	bcc.n	c55cc <_strtol_l.constprop.0+0xc0>
   c5592:	d101      	bne.n	c5598 <_strtol_l.constprop.0+0x8c>
   c5594:	45a2      	cmp	sl, r4
   c5596:	db19      	blt.n	c55cc <_strtol_l.constprop.0+0xc0>
   c5598:	fb06 4603 	mla	r6, r6, r3, r4
   c559c:	f04f 0c01 	mov.w	ip, #1
   c55a0:	f815 4b01 	ldrb.w	r4, [r5], #1
   c55a4:	e7e8      	b.n	c5578 <_strtol_l.constprop.0+0x6c>
   c55a6:	2c2b      	cmp	r4, #43	; 0x2b
   c55a8:	bf04      	itt	eq
   c55aa:	782c      	ldrbeq	r4, [r5, #0]
   c55ac:	1cb5      	addeq	r5, r6, #2
   c55ae:	e7ca      	b.n	c5546 <_strtol_l.constprop.0+0x3a>
   c55b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c55b4:	f1be 0f19 	cmp.w	lr, #25
   c55b8:	d801      	bhi.n	c55be <_strtol_l.constprop.0+0xb2>
   c55ba:	3c37      	subs	r4, #55	; 0x37
   c55bc:	e7e2      	b.n	c5584 <_strtol_l.constprop.0+0x78>
   c55be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c55c2:	f1be 0f19 	cmp.w	lr, #25
   c55c6:	d804      	bhi.n	c55d2 <_strtol_l.constprop.0+0xc6>
   c55c8:	3c57      	subs	r4, #87	; 0x57
   c55ca:	e7db      	b.n	c5584 <_strtol_l.constprop.0+0x78>
   c55cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c55d0:	e7e6      	b.n	c55a0 <_strtol_l.constprop.0+0x94>
   c55d2:	f1bc 0f00 	cmp.w	ip, #0
   c55d6:	da05      	bge.n	c55e4 <_strtol_l.constprop.0+0xd8>
   c55d8:	2322      	movs	r3, #34	; 0x22
   c55da:	6003      	str	r3, [r0, #0]
   c55dc:	4646      	mov	r6, r8
   c55de:	b942      	cbnz	r2, c55f2 <_strtol_l.constprop.0+0xe6>
   c55e0:	4630      	mov	r0, r6
   c55e2:	e79e      	b.n	c5522 <_strtol_l.constprop.0+0x16>
   c55e4:	b107      	cbz	r7, c55e8 <_strtol_l.constprop.0+0xdc>
   c55e6:	4276      	negs	r6, r6
   c55e8:	2a00      	cmp	r2, #0
   c55ea:	d0f9      	beq.n	c55e0 <_strtol_l.constprop.0+0xd4>
   c55ec:	f1bc 0f00 	cmp.w	ip, #0
   c55f0:	d000      	beq.n	c55f4 <_strtol_l.constprop.0+0xe8>
   c55f2:	1e69      	subs	r1, r5, #1
   c55f4:	6011      	str	r1, [r2, #0]
   c55f6:	e7f3      	b.n	c55e0 <_strtol_l.constprop.0+0xd4>
   c55f8:	2430      	movs	r4, #48	; 0x30
   c55fa:	2b00      	cmp	r3, #0
   c55fc:	d1b1      	bne.n	c5562 <_strtol_l.constprop.0+0x56>
   c55fe:	2308      	movs	r3, #8
   c5600:	e7af      	b.n	c5562 <_strtol_l.constprop.0+0x56>
   c5602:	2c30      	cmp	r4, #48	; 0x30
   c5604:	d0a5      	beq.n	c5552 <_strtol_l.constprop.0+0x46>
   c5606:	230a      	movs	r3, #10
   c5608:	e7ab      	b.n	c5562 <_strtol_l.constprop.0+0x56>
   c560a:	bf00      	nop
   c560c:	000c87e9 	.word	0x000c87e9

000c5610 <strtol>:
   c5610:	4613      	mov	r3, r2
   c5612:	460a      	mov	r2, r1
   c5614:	4601      	mov	r1, r0
   c5616:	4802      	ldr	r0, [pc, #8]	; (c5620 <strtol+0x10>)
   c5618:	6800      	ldr	r0, [r0, #0]
   c561a:	f7ff bf77 	b.w	c550c <_strtol_l.constprop.0>
   c561e:	bf00      	nop
   c5620:	2003db48 	.word	0x2003db48

000c5624 <__register_exitproc>:
   c5624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5628:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c56e4 <__register_exitproc+0xc0>
   c562c:	4606      	mov	r6, r0
   c562e:	f8d8 0000 	ldr.w	r0, [r8]
   c5632:	461f      	mov	r7, r3
   c5634:	460d      	mov	r5, r1
   c5636:	4691      	mov	r9, r2
   c5638:	f000 fbc6 	bl	c5dc8 <__retarget_lock_acquire_recursive>
   c563c:	4b25      	ldr	r3, [pc, #148]	; (c56d4 <__register_exitproc+0xb0>)
   c563e:	681c      	ldr	r4, [r3, #0]
   c5640:	b934      	cbnz	r4, c5650 <__register_exitproc+0x2c>
   c5642:	4c25      	ldr	r4, [pc, #148]	; (c56d8 <__register_exitproc+0xb4>)
   c5644:	601c      	str	r4, [r3, #0]
   c5646:	4b25      	ldr	r3, [pc, #148]	; (c56dc <__register_exitproc+0xb8>)
   c5648:	b113      	cbz	r3, c5650 <__register_exitproc+0x2c>
   c564a:	681b      	ldr	r3, [r3, #0]
   c564c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5650:	6863      	ldr	r3, [r4, #4]
   c5652:	2b1f      	cmp	r3, #31
   c5654:	dd07      	ble.n	c5666 <__register_exitproc+0x42>
   c5656:	f8d8 0000 	ldr.w	r0, [r8]
   c565a:	f000 fbb7 	bl	c5dcc <__retarget_lock_release_recursive>
   c565e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c5662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5666:	b34e      	cbz	r6, c56bc <__register_exitproc+0x98>
   c5668:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c566c:	b988      	cbnz	r0, c5692 <__register_exitproc+0x6e>
   c566e:	4b1c      	ldr	r3, [pc, #112]	; (c56e0 <__register_exitproc+0xbc>)
   c5670:	b923      	cbnz	r3, c567c <__register_exitproc+0x58>
   c5672:	f8d8 0000 	ldr.w	r0, [r8]
   c5676:	f000 fba8 	bl	c5dca <__retarget_lock_release>
   c567a:	e7f0      	b.n	c565e <__register_exitproc+0x3a>
   c567c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5680:	f7f8 fe56 	bl	be330 <malloc>
   c5684:	2800      	cmp	r0, #0
   c5686:	d0f4      	beq.n	c5672 <__register_exitproc+0x4e>
   c5688:	2300      	movs	r3, #0
   c568a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c568e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c5692:	6863      	ldr	r3, [r4, #4]
   c5694:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5698:	2201      	movs	r2, #1
   c569a:	409a      	lsls	r2, r3
   c569c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c56a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c56a4:	4313      	orrs	r3, r2
   c56a6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c56aa:	2e02      	cmp	r6, #2
   c56ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c56b0:	bf02      	ittt	eq
   c56b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c56b6:	4313      	orreq	r3, r2
   c56b8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c56bc:	6863      	ldr	r3, [r4, #4]
   c56be:	f8d8 0000 	ldr.w	r0, [r8]
   c56c2:	1c5a      	adds	r2, r3, #1
   c56c4:	3302      	adds	r3, #2
   c56c6:	6062      	str	r2, [r4, #4]
   c56c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c56cc:	f000 fb7e 	bl	c5dcc <__retarget_lock_release_recursive>
   c56d0:	2000      	movs	r0, #0
   c56d2:	e7c6      	b.n	c5662 <__register_exitproc+0x3e>
   c56d4:	2003e7e8 	.word	0x2003e7e8
   c56d8:	2003e75c 	.word	0x2003e75c
   c56dc:	00000000 	.word	0x00000000
   c56e0:	000be331 	.word	0x000be331
   c56e4:	2003dbac 	.word	0x2003dbac

000c56e8 <rshift>:
   c56e8:	6903      	ldr	r3, [r0, #16]
   c56ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c56ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c56f2:	ea4f 1261 	mov.w	r2, r1, asr #5
   c56f6:	f100 0414 	add.w	r4, r0, #20
   c56fa:	dd45      	ble.n	c5788 <rshift+0xa0>
   c56fc:	f011 011f 	ands.w	r1, r1, #31
   c5700:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c5704:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c5708:	d10c      	bne.n	c5724 <rshift+0x3c>
   c570a:	f100 0710 	add.w	r7, r0, #16
   c570e:	4629      	mov	r1, r5
   c5710:	42b1      	cmp	r1, r6
   c5712:	d334      	bcc.n	c577e <rshift+0x96>
   c5714:	1a9b      	subs	r3, r3, r2
   c5716:	009b      	lsls	r3, r3, #2
   c5718:	1eea      	subs	r2, r5, #3
   c571a:	4296      	cmp	r6, r2
   c571c:	bf38      	it	cc
   c571e:	2300      	movcc	r3, #0
   c5720:	4423      	add	r3, r4
   c5722:	e015      	b.n	c5750 <rshift+0x68>
   c5724:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c5728:	f1c1 0820 	rsb	r8, r1, #32
   c572c:	40cf      	lsrs	r7, r1
   c572e:	f105 0e04 	add.w	lr, r5, #4
   c5732:	46a1      	mov	r9, r4
   c5734:	4576      	cmp	r6, lr
   c5736:	46f4      	mov	ip, lr
   c5738:	d815      	bhi.n	c5766 <rshift+0x7e>
   c573a:	1a9a      	subs	r2, r3, r2
   c573c:	0092      	lsls	r2, r2, #2
   c573e:	3a04      	subs	r2, #4
   c5740:	3501      	adds	r5, #1
   c5742:	42ae      	cmp	r6, r5
   c5744:	bf38      	it	cc
   c5746:	2200      	movcc	r2, #0
   c5748:	18a3      	adds	r3, r4, r2
   c574a:	50a7      	str	r7, [r4, r2]
   c574c:	b107      	cbz	r7, c5750 <rshift+0x68>
   c574e:	3304      	adds	r3, #4
   c5750:	1b1a      	subs	r2, r3, r4
   c5752:	42a3      	cmp	r3, r4
   c5754:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5758:	bf08      	it	eq
   c575a:	2300      	moveq	r3, #0
   c575c:	6102      	str	r2, [r0, #16]
   c575e:	bf08      	it	eq
   c5760:	6143      	streq	r3, [r0, #20]
   c5762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5766:	f8dc c000 	ldr.w	ip, [ip]
   c576a:	fa0c fc08 	lsl.w	ip, ip, r8
   c576e:	ea4c 0707 	orr.w	r7, ip, r7
   c5772:	f849 7b04 	str.w	r7, [r9], #4
   c5776:	f85e 7b04 	ldr.w	r7, [lr], #4
   c577a:	40cf      	lsrs	r7, r1
   c577c:	e7da      	b.n	c5734 <rshift+0x4c>
   c577e:	f851 cb04 	ldr.w	ip, [r1], #4
   c5782:	f847 cf04 	str.w	ip, [r7, #4]!
   c5786:	e7c3      	b.n	c5710 <rshift+0x28>
   c5788:	4623      	mov	r3, r4
   c578a:	e7e1      	b.n	c5750 <rshift+0x68>

000c578c <__hexdig_fun>:
   c578c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5790:	2b09      	cmp	r3, #9
   c5792:	d802      	bhi.n	c579a <__hexdig_fun+0xe>
   c5794:	3820      	subs	r0, #32
   c5796:	b2c0      	uxtb	r0, r0
   c5798:	4770      	bx	lr
   c579a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c579e:	2b05      	cmp	r3, #5
   c57a0:	d801      	bhi.n	c57a6 <__hexdig_fun+0x1a>
   c57a2:	3847      	subs	r0, #71	; 0x47
   c57a4:	e7f7      	b.n	c5796 <__hexdig_fun+0xa>
   c57a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c57aa:	2b05      	cmp	r3, #5
   c57ac:	d801      	bhi.n	c57b2 <__hexdig_fun+0x26>
   c57ae:	3827      	subs	r0, #39	; 0x27
   c57b0:	e7f1      	b.n	c5796 <__hexdig_fun+0xa>
   c57b2:	2000      	movs	r0, #0
   c57b4:	4770      	bx	lr
	...

000c57b8 <__gethex>:
   c57b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c57bc:	ed2d 8b02 	vpush	{d8}
   c57c0:	b089      	sub	sp, #36	; 0x24
   c57c2:	ee08 0a10 	vmov	s16, r0
   c57c6:	9304      	str	r3, [sp, #16]
   c57c8:	4bb4      	ldr	r3, [pc, #720]	; (c5a9c <__gethex+0x2e4>)
   c57ca:	681b      	ldr	r3, [r3, #0]
   c57cc:	9301      	str	r3, [sp, #4]
   c57ce:	4618      	mov	r0, r3
   c57d0:	468b      	mov	fp, r1
   c57d2:	4690      	mov	r8, r2
   c57d4:	f7fe fff3 	bl	c47be <strlen>
   c57d8:	9b01      	ldr	r3, [sp, #4]
   c57da:	f8db 2000 	ldr.w	r2, [fp]
   c57de:	4403      	add	r3, r0
   c57e0:	4682      	mov	sl, r0
   c57e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c57e6:	9305      	str	r3, [sp, #20]
   c57e8:	1c93      	adds	r3, r2, #2
   c57ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c57ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c57f2:	32fe      	adds	r2, #254	; 0xfe
   c57f4:	18d1      	adds	r1, r2, r3
   c57f6:	461f      	mov	r7, r3
   c57f8:	f813 0b01 	ldrb.w	r0, [r3], #1
   c57fc:	9100      	str	r1, [sp, #0]
   c57fe:	2830      	cmp	r0, #48	; 0x30
   c5800:	d0f8      	beq.n	c57f4 <__gethex+0x3c>
   c5802:	f7ff ffc3 	bl	c578c <__hexdig_fun>
   c5806:	4604      	mov	r4, r0
   c5808:	2800      	cmp	r0, #0
   c580a:	d13a      	bne.n	c5882 <__gethex+0xca>
   c580c:	9901      	ldr	r1, [sp, #4]
   c580e:	4652      	mov	r2, sl
   c5810:	4638      	mov	r0, r7
   c5812:	f7fe ffef 	bl	c47f4 <strncmp>
   c5816:	4605      	mov	r5, r0
   c5818:	2800      	cmp	r0, #0
   c581a:	d168      	bne.n	c58ee <__gethex+0x136>
   c581c:	f817 000a 	ldrb.w	r0, [r7, sl]
   c5820:	eb07 060a 	add.w	r6, r7, sl
   c5824:	f7ff ffb2 	bl	c578c <__hexdig_fun>
   c5828:	2800      	cmp	r0, #0
   c582a:	d062      	beq.n	c58f2 <__gethex+0x13a>
   c582c:	4633      	mov	r3, r6
   c582e:	7818      	ldrb	r0, [r3, #0]
   c5830:	2830      	cmp	r0, #48	; 0x30
   c5832:	461f      	mov	r7, r3
   c5834:	f103 0301 	add.w	r3, r3, #1
   c5838:	d0f9      	beq.n	c582e <__gethex+0x76>
   c583a:	f7ff ffa7 	bl	c578c <__hexdig_fun>
   c583e:	2301      	movs	r3, #1
   c5840:	fab0 f480 	clz	r4, r0
   c5844:	0964      	lsrs	r4, r4, #5
   c5846:	4635      	mov	r5, r6
   c5848:	9300      	str	r3, [sp, #0]
   c584a:	463a      	mov	r2, r7
   c584c:	4616      	mov	r6, r2
   c584e:	3201      	adds	r2, #1
   c5850:	7830      	ldrb	r0, [r6, #0]
   c5852:	f7ff ff9b 	bl	c578c <__hexdig_fun>
   c5856:	2800      	cmp	r0, #0
   c5858:	d1f8      	bne.n	c584c <__gethex+0x94>
   c585a:	9901      	ldr	r1, [sp, #4]
   c585c:	4652      	mov	r2, sl
   c585e:	4630      	mov	r0, r6
   c5860:	f7fe ffc8 	bl	c47f4 <strncmp>
   c5864:	b980      	cbnz	r0, c5888 <__gethex+0xd0>
   c5866:	b94d      	cbnz	r5, c587c <__gethex+0xc4>
   c5868:	eb06 050a 	add.w	r5, r6, sl
   c586c:	462a      	mov	r2, r5
   c586e:	4616      	mov	r6, r2
   c5870:	3201      	adds	r2, #1
   c5872:	7830      	ldrb	r0, [r6, #0]
   c5874:	f7ff ff8a 	bl	c578c <__hexdig_fun>
   c5878:	2800      	cmp	r0, #0
   c587a:	d1f8      	bne.n	c586e <__gethex+0xb6>
   c587c:	1bad      	subs	r5, r5, r6
   c587e:	00ad      	lsls	r5, r5, #2
   c5880:	e004      	b.n	c588c <__gethex+0xd4>
   c5882:	2400      	movs	r4, #0
   c5884:	4625      	mov	r5, r4
   c5886:	e7e0      	b.n	c584a <__gethex+0x92>
   c5888:	2d00      	cmp	r5, #0
   c588a:	d1f7      	bne.n	c587c <__gethex+0xc4>
   c588c:	7833      	ldrb	r3, [r6, #0]
   c588e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c5892:	2b50      	cmp	r3, #80	; 0x50
   c5894:	d13b      	bne.n	c590e <__gethex+0x156>
   c5896:	7873      	ldrb	r3, [r6, #1]
   c5898:	2b2b      	cmp	r3, #43	; 0x2b
   c589a:	d02c      	beq.n	c58f6 <__gethex+0x13e>
   c589c:	2b2d      	cmp	r3, #45	; 0x2d
   c589e:	d02e      	beq.n	c58fe <__gethex+0x146>
   c58a0:	1c71      	adds	r1, r6, #1
   c58a2:	f04f 0900 	mov.w	r9, #0
   c58a6:	7808      	ldrb	r0, [r1, #0]
   c58a8:	f7ff ff70 	bl	c578c <__hexdig_fun>
   c58ac:	1e43      	subs	r3, r0, #1
   c58ae:	b2db      	uxtb	r3, r3
   c58b0:	2b18      	cmp	r3, #24
   c58b2:	d82c      	bhi.n	c590e <__gethex+0x156>
   c58b4:	f1a0 0210 	sub.w	r2, r0, #16
   c58b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c58bc:	f7ff ff66 	bl	c578c <__hexdig_fun>
   c58c0:	1e43      	subs	r3, r0, #1
   c58c2:	b2db      	uxtb	r3, r3
   c58c4:	2b18      	cmp	r3, #24
   c58c6:	d91d      	bls.n	c5904 <__gethex+0x14c>
   c58c8:	f1b9 0f00 	cmp.w	r9, #0
   c58cc:	d000      	beq.n	c58d0 <__gethex+0x118>
   c58ce:	4252      	negs	r2, r2
   c58d0:	4415      	add	r5, r2
   c58d2:	f8cb 1000 	str.w	r1, [fp]
   c58d6:	b1e4      	cbz	r4, c5912 <__gethex+0x15a>
   c58d8:	9b00      	ldr	r3, [sp, #0]
   c58da:	2b00      	cmp	r3, #0
   c58dc:	bf14      	ite	ne
   c58de:	2700      	movne	r7, #0
   c58e0:	2706      	moveq	r7, #6
   c58e2:	4638      	mov	r0, r7
   c58e4:	b009      	add	sp, #36	; 0x24
   c58e6:	ecbd 8b02 	vpop	{d8}
   c58ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c58ee:	463e      	mov	r6, r7
   c58f0:	4625      	mov	r5, r4
   c58f2:	2401      	movs	r4, #1
   c58f4:	e7ca      	b.n	c588c <__gethex+0xd4>
   c58f6:	f04f 0900 	mov.w	r9, #0
   c58fa:	1cb1      	adds	r1, r6, #2
   c58fc:	e7d3      	b.n	c58a6 <__gethex+0xee>
   c58fe:	f04f 0901 	mov.w	r9, #1
   c5902:	e7fa      	b.n	c58fa <__gethex+0x142>
   c5904:	230a      	movs	r3, #10
   c5906:	fb03 0202 	mla	r2, r3, r2, r0
   c590a:	3a10      	subs	r2, #16
   c590c:	e7d4      	b.n	c58b8 <__gethex+0x100>
   c590e:	4631      	mov	r1, r6
   c5910:	e7df      	b.n	c58d2 <__gethex+0x11a>
   c5912:	1bf3      	subs	r3, r6, r7
   c5914:	3b01      	subs	r3, #1
   c5916:	4621      	mov	r1, r4
   c5918:	2b07      	cmp	r3, #7
   c591a:	dc0b      	bgt.n	c5934 <__gethex+0x17c>
   c591c:	ee18 0a10 	vmov	r0, s16
   c5920:	f000 fa68 	bl	c5df4 <_Balloc>
   c5924:	4604      	mov	r4, r0
   c5926:	b940      	cbnz	r0, c593a <__gethex+0x182>
   c5928:	4b5d      	ldr	r3, [pc, #372]	; (c5aa0 <__gethex+0x2e8>)
   c592a:	4602      	mov	r2, r0
   c592c:	21de      	movs	r1, #222	; 0xde
   c592e:	485d      	ldr	r0, [pc, #372]	; (c5aa4 <__gethex+0x2ec>)
   c5930:	f7f8 fd4e 	bl	be3d0 <__assert_func>
   c5934:	3101      	adds	r1, #1
   c5936:	105b      	asrs	r3, r3, #1
   c5938:	e7ee      	b.n	c5918 <__gethex+0x160>
   c593a:	f100 0914 	add.w	r9, r0, #20
   c593e:	f04f 0b00 	mov.w	fp, #0
   c5942:	f1ca 0301 	rsb	r3, sl, #1
   c5946:	f8cd 9008 	str.w	r9, [sp, #8]
   c594a:	f8cd b000 	str.w	fp, [sp]
   c594e:	9306      	str	r3, [sp, #24]
   c5950:	42b7      	cmp	r7, r6
   c5952:	d340      	bcc.n	c59d6 <__gethex+0x21e>
   c5954:	9802      	ldr	r0, [sp, #8]
   c5956:	9b00      	ldr	r3, [sp, #0]
   c5958:	f840 3b04 	str.w	r3, [r0], #4
   c595c:	eba0 0009 	sub.w	r0, r0, r9
   c5960:	1080      	asrs	r0, r0, #2
   c5962:	0146      	lsls	r6, r0, #5
   c5964:	6120      	str	r0, [r4, #16]
   c5966:	4618      	mov	r0, r3
   c5968:	f000 fb36 	bl	c5fd8 <__hi0bits>
   c596c:	1a30      	subs	r0, r6, r0
   c596e:	f8d8 6000 	ldr.w	r6, [r8]
   c5972:	42b0      	cmp	r0, r6
   c5974:	dd63      	ble.n	c5a3e <__gethex+0x286>
   c5976:	1b87      	subs	r7, r0, r6
   c5978:	4639      	mov	r1, r7
   c597a:	4620      	mov	r0, r4
   c597c:	f000 feda 	bl	c6734 <__any_on>
   c5980:	4682      	mov	sl, r0
   c5982:	b1a8      	cbz	r0, c59b0 <__gethex+0x1f8>
   c5984:	1e7b      	subs	r3, r7, #1
   c5986:	1159      	asrs	r1, r3, #5
   c5988:	f003 021f 	and.w	r2, r3, #31
   c598c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5990:	f04f 0a01 	mov.w	sl, #1
   c5994:	fa0a f202 	lsl.w	r2, sl, r2
   c5998:	420a      	tst	r2, r1
   c599a:	d009      	beq.n	c59b0 <__gethex+0x1f8>
   c599c:	4553      	cmp	r3, sl
   c599e:	dd05      	ble.n	c59ac <__gethex+0x1f4>
   c59a0:	1eb9      	subs	r1, r7, #2
   c59a2:	4620      	mov	r0, r4
   c59a4:	f000 fec6 	bl	c6734 <__any_on>
   c59a8:	2800      	cmp	r0, #0
   c59aa:	d145      	bne.n	c5a38 <__gethex+0x280>
   c59ac:	f04f 0a02 	mov.w	sl, #2
   c59b0:	4639      	mov	r1, r7
   c59b2:	4620      	mov	r0, r4
   c59b4:	f7ff fe98 	bl	c56e8 <rshift>
   c59b8:	443d      	add	r5, r7
   c59ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c59be:	42ab      	cmp	r3, r5
   c59c0:	da4c      	bge.n	c5a5c <__gethex+0x2a4>
   c59c2:	ee18 0a10 	vmov	r0, s16
   c59c6:	4621      	mov	r1, r4
   c59c8:	f000 fa54 	bl	c5e74 <_Bfree>
   c59cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c59ce:	2300      	movs	r3, #0
   c59d0:	6013      	str	r3, [r2, #0]
   c59d2:	27a3      	movs	r7, #163	; 0xa3
   c59d4:	e785      	b.n	c58e2 <__gethex+0x12a>
   c59d6:	1e73      	subs	r3, r6, #1
   c59d8:	9a05      	ldr	r2, [sp, #20]
   c59da:	9303      	str	r3, [sp, #12]
   c59dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c59e0:	4293      	cmp	r3, r2
   c59e2:	d019      	beq.n	c5a18 <__gethex+0x260>
   c59e4:	f1bb 0f20 	cmp.w	fp, #32
   c59e8:	d107      	bne.n	c59fa <__gethex+0x242>
   c59ea:	9b02      	ldr	r3, [sp, #8]
   c59ec:	9a00      	ldr	r2, [sp, #0]
   c59ee:	f843 2b04 	str.w	r2, [r3], #4
   c59f2:	9302      	str	r3, [sp, #8]
   c59f4:	2300      	movs	r3, #0
   c59f6:	9300      	str	r3, [sp, #0]
   c59f8:	469b      	mov	fp, r3
   c59fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c59fe:	f7ff fec5 	bl	c578c <__hexdig_fun>
   c5a02:	9b00      	ldr	r3, [sp, #0]
   c5a04:	f000 000f 	and.w	r0, r0, #15
   c5a08:	fa00 f00b 	lsl.w	r0, r0, fp
   c5a0c:	4303      	orrs	r3, r0
   c5a0e:	9300      	str	r3, [sp, #0]
   c5a10:	f10b 0b04 	add.w	fp, fp, #4
   c5a14:	9b03      	ldr	r3, [sp, #12]
   c5a16:	e00d      	b.n	c5a34 <__gethex+0x27c>
   c5a18:	9b03      	ldr	r3, [sp, #12]
   c5a1a:	9a06      	ldr	r2, [sp, #24]
   c5a1c:	4413      	add	r3, r2
   c5a1e:	42bb      	cmp	r3, r7
   c5a20:	d3e0      	bcc.n	c59e4 <__gethex+0x22c>
   c5a22:	4618      	mov	r0, r3
   c5a24:	9901      	ldr	r1, [sp, #4]
   c5a26:	9307      	str	r3, [sp, #28]
   c5a28:	4652      	mov	r2, sl
   c5a2a:	f7fe fee3 	bl	c47f4 <strncmp>
   c5a2e:	9b07      	ldr	r3, [sp, #28]
   c5a30:	2800      	cmp	r0, #0
   c5a32:	d1d7      	bne.n	c59e4 <__gethex+0x22c>
   c5a34:	461e      	mov	r6, r3
   c5a36:	e78b      	b.n	c5950 <__gethex+0x198>
   c5a38:	f04f 0a03 	mov.w	sl, #3
   c5a3c:	e7b8      	b.n	c59b0 <__gethex+0x1f8>
   c5a3e:	da0a      	bge.n	c5a56 <__gethex+0x29e>
   c5a40:	1a37      	subs	r7, r6, r0
   c5a42:	4621      	mov	r1, r4
   c5a44:	ee18 0a10 	vmov	r0, s16
   c5a48:	463a      	mov	r2, r7
   c5a4a:	f000 fc2f 	bl	c62ac <__lshift>
   c5a4e:	1bed      	subs	r5, r5, r7
   c5a50:	4604      	mov	r4, r0
   c5a52:	f100 0914 	add.w	r9, r0, #20
   c5a56:	f04f 0a00 	mov.w	sl, #0
   c5a5a:	e7ae      	b.n	c59ba <__gethex+0x202>
   c5a5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5a60:	42a8      	cmp	r0, r5
   c5a62:	dd72      	ble.n	c5b4a <__gethex+0x392>
   c5a64:	1b45      	subs	r5, r0, r5
   c5a66:	42ae      	cmp	r6, r5
   c5a68:	dc36      	bgt.n	c5ad8 <__gethex+0x320>
   c5a6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5a6e:	2b02      	cmp	r3, #2
   c5a70:	d02a      	beq.n	c5ac8 <__gethex+0x310>
   c5a72:	2b03      	cmp	r3, #3
   c5a74:	d02c      	beq.n	c5ad0 <__gethex+0x318>
   c5a76:	2b01      	cmp	r3, #1
   c5a78:	d11c      	bne.n	c5ab4 <__gethex+0x2fc>
   c5a7a:	42ae      	cmp	r6, r5
   c5a7c:	d11a      	bne.n	c5ab4 <__gethex+0x2fc>
   c5a7e:	2e01      	cmp	r6, #1
   c5a80:	d112      	bne.n	c5aa8 <__gethex+0x2f0>
   c5a82:	9a04      	ldr	r2, [sp, #16]
   c5a84:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5a88:	6013      	str	r3, [r2, #0]
   c5a8a:	2301      	movs	r3, #1
   c5a8c:	6123      	str	r3, [r4, #16]
   c5a8e:	f8c9 3000 	str.w	r3, [r9]
   c5a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5a94:	2762      	movs	r7, #98	; 0x62
   c5a96:	601c      	str	r4, [r3, #0]
   c5a98:	e723      	b.n	c58e2 <__gethex+0x12a>
   c5a9a:	bf00      	nop
   c5a9c:	000c895c 	.word	0x000c895c
   c5aa0:	000c88e9 	.word	0x000c88e9
   c5aa4:	000c88fa 	.word	0x000c88fa
   c5aa8:	1e71      	subs	r1, r6, #1
   c5aaa:	4620      	mov	r0, r4
   c5aac:	f000 fe42 	bl	c6734 <__any_on>
   c5ab0:	2800      	cmp	r0, #0
   c5ab2:	d1e6      	bne.n	c5a82 <__gethex+0x2ca>
   c5ab4:	ee18 0a10 	vmov	r0, s16
   c5ab8:	4621      	mov	r1, r4
   c5aba:	f000 f9db 	bl	c5e74 <_Bfree>
   c5abe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5ac0:	2300      	movs	r3, #0
   c5ac2:	6013      	str	r3, [r2, #0]
   c5ac4:	2750      	movs	r7, #80	; 0x50
   c5ac6:	e70c      	b.n	c58e2 <__gethex+0x12a>
   c5ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5aca:	2b00      	cmp	r3, #0
   c5acc:	d1f2      	bne.n	c5ab4 <__gethex+0x2fc>
   c5ace:	e7d8      	b.n	c5a82 <__gethex+0x2ca>
   c5ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5ad2:	2b00      	cmp	r3, #0
   c5ad4:	d1d5      	bne.n	c5a82 <__gethex+0x2ca>
   c5ad6:	e7ed      	b.n	c5ab4 <__gethex+0x2fc>
   c5ad8:	1e6f      	subs	r7, r5, #1
   c5ada:	f1ba 0f00 	cmp.w	sl, #0
   c5ade:	d131      	bne.n	c5b44 <__gethex+0x38c>
   c5ae0:	b127      	cbz	r7, c5aec <__gethex+0x334>
   c5ae2:	4639      	mov	r1, r7
   c5ae4:	4620      	mov	r0, r4
   c5ae6:	f000 fe25 	bl	c6734 <__any_on>
   c5aea:	4682      	mov	sl, r0
   c5aec:	117b      	asrs	r3, r7, #5
   c5aee:	2101      	movs	r1, #1
   c5af0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c5af4:	f007 071f 	and.w	r7, r7, #31
   c5af8:	fa01 f707 	lsl.w	r7, r1, r7
   c5afc:	421f      	tst	r7, r3
   c5afe:	4629      	mov	r1, r5
   c5b00:	4620      	mov	r0, r4
   c5b02:	bf18      	it	ne
   c5b04:	f04a 0a02 	orrne.w	sl, sl, #2
   c5b08:	1b76      	subs	r6, r6, r5
   c5b0a:	f7ff fded 	bl	c56e8 <rshift>
   c5b0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c5b12:	2702      	movs	r7, #2
   c5b14:	f1ba 0f00 	cmp.w	sl, #0
   c5b18:	d048      	beq.n	c5bac <__gethex+0x3f4>
   c5b1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5b1e:	2b02      	cmp	r3, #2
   c5b20:	d015      	beq.n	c5b4e <__gethex+0x396>
   c5b22:	2b03      	cmp	r3, #3
   c5b24:	d017      	beq.n	c5b56 <__gethex+0x39e>
   c5b26:	2b01      	cmp	r3, #1
   c5b28:	d109      	bne.n	c5b3e <__gethex+0x386>
   c5b2a:	f01a 0f02 	tst.w	sl, #2
   c5b2e:	d006      	beq.n	c5b3e <__gethex+0x386>
   c5b30:	f8d9 0000 	ldr.w	r0, [r9]
   c5b34:	ea4a 0a00 	orr.w	sl, sl, r0
   c5b38:	f01a 0f01 	tst.w	sl, #1
   c5b3c:	d10e      	bne.n	c5b5c <__gethex+0x3a4>
   c5b3e:	f047 0710 	orr.w	r7, r7, #16
   c5b42:	e033      	b.n	c5bac <__gethex+0x3f4>
   c5b44:	f04f 0a01 	mov.w	sl, #1
   c5b48:	e7d0      	b.n	c5aec <__gethex+0x334>
   c5b4a:	2701      	movs	r7, #1
   c5b4c:	e7e2      	b.n	c5b14 <__gethex+0x35c>
   c5b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5b50:	f1c3 0301 	rsb	r3, r3, #1
   c5b54:	9315      	str	r3, [sp, #84]	; 0x54
   c5b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5b58:	2b00      	cmp	r3, #0
   c5b5a:	d0f0      	beq.n	c5b3e <__gethex+0x386>
   c5b5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5b60:	f104 0314 	add.w	r3, r4, #20
   c5b64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5b68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5b6c:	f04f 0c00 	mov.w	ip, #0
   c5b70:	4618      	mov	r0, r3
   c5b72:	f853 2b04 	ldr.w	r2, [r3], #4
   c5b76:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c5b7a:	d01c      	beq.n	c5bb6 <__gethex+0x3fe>
   c5b7c:	3201      	adds	r2, #1
   c5b7e:	6002      	str	r2, [r0, #0]
   c5b80:	2f02      	cmp	r7, #2
   c5b82:	f104 0314 	add.w	r3, r4, #20
   c5b86:	d13f      	bne.n	c5c08 <__gethex+0x450>
   c5b88:	f8d8 2000 	ldr.w	r2, [r8]
   c5b8c:	3a01      	subs	r2, #1
   c5b8e:	42b2      	cmp	r2, r6
   c5b90:	d10a      	bne.n	c5ba8 <__gethex+0x3f0>
   c5b92:	1171      	asrs	r1, r6, #5
   c5b94:	2201      	movs	r2, #1
   c5b96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5b9a:	f006 061f 	and.w	r6, r6, #31
   c5b9e:	fa02 f606 	lsl.w	r6, r2, r6
   c5ba2:	421e      	tst	r6, r3
   c5ba4:	bf18      	it	ne
   c5ba6:	4617      	movne	r7, r2
   c5ba8:	f047 0720 	orr.w	r7, r7, #32
   c5bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5bae:	601c      	str	r4, [r3, #0]
   c5bb0:	9b04      	ldr	r3, [sp, #16]
   c5bb2:	601d      	str	r5, [r3, #0]
   c5bb4:	e695      	b.n	c58e2 <__gethex+0x12a>
   c5bb6:	4299      	cmp	r1, r3
   c5bb8:	f843 cc04 	str.w	ip, [r3, #-4]
   c5bbc:	d8d8      	bhi.n	c5b70 <__gethex+0x3b8>
   c5bbe:	68a3      	ldr	r3, [r4, #8]
   c5bc0:	459b      	cmp	fp, r3
   c5bc2:	db19      	blt.n	c5bf8 <__gethex+0x440>
   c5bc4:	6861      	ldr	r1, [r4, #4]
   c5bc6:	ee18 0a10 	vmov	r0, s16
   c5bca:	3101      	adds	r1, #1
   c5bcc:	f000 f912 	bl	c5df4 <_Balloc>
   c5bd0:	4681      	mov	r9, r0
   c5bd2:	b918      	cbnz	r0, c5bdc <__gethex+0x424>
   c5bd4:	4b1a      	ldr	r3, [pc, #104]	; (c5c40 <__gethex+0x488>)
   c5bd6:	4602      	mov	r2, r0
   c5bd8:	2184      	movs	r1, #132	; 0x84
   c5bda:	e6a8      	b.n	c592e <__gethex+0x176>
   c5bdc:	6922      	ldr	r2, [r4, #16]
   c5bde:	3202      	adds	r2, #2
   c5be0:	f104 010c 	add.w	r1, r4, #12
   c5be4:	0092      	lsls	r2, r2, #2
   c5be6:	300c      	adds	r0, #12
   c5be8:	f7fe fd36 	bl	c4658 <memcpy>
   c5bec:	4621      	mov	r1, r4
   c5bee:	ee18 0a10 	vmov	r0, s16
   c5bf2:	f000 f93f 	bl	c5e74 <_Bfree>
   c5bf6:	464c      	mov	r4, r9
   c5bf8:	6923      	ldr	r3, [r4, #16]
   c5bfa:	1c5a      	adds	r2, r3, #1
   c5bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5c00:	6122      	str	r2, [r4, #16]
   c5c02:	2201      	movs	r2, #1
   c5c04:	615a      	str	r2, [r3, #20]
   c5c06:	e7bb      	b.n	c5b80 <__gethex+0x3c8>
   c5c08:	6922      	ldr	r2, [r4, #16]
   c5c0a:	455a      	cmp	r2, fp
   c5c0c:	dd0b      	ble.n	c5c26 <__gethex+0x46e>
   c5c0e:	2101      	movs	r1, #1
   c5c10:	4620      	mov	r0, r4
   c5c12:	f7ff fd69 	bl	c56e8 <rshift>
   c5c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5c1a:	3501      	adds	r5, #1
   c5c1c:	42ab      	cmp	r3, r5
   c5c1e:	f6ff aed0 	blt.w	c59c2 <__gethex+0x20a>
   c5c22:	2701      	movs	r7, #1
   c5c24:	e7c0      	b.n	c5ba8 <__gethex+0x3f0>
   c5c26:	f016 061f 	ands.w	r6, r6, #31
   c5c2a:	d0fa      	beq.n	c5c22 <__gethex+0x46a>
   c5c2c:	4453      	add	r3, sl
   c5c2e:	f1c6 0620 	rsb	r6, r6, #32
   c5c32:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5c36:	f000 f9cf 	bl	c5fd8 <__hi0bits>
   c5c3a:	42b0      	cmp	r0, r6
   c5c3c:	dbe7      	blt.n	c5c0e <__gethex+0x456>
   c5c3e:	e7f0      	b.n	c5c22 <__gethex+0x46a>
   c5c40:	000c88e9 	.word	0x000c88e9

000c5c44 <L_shift>:
   c5c44:	f1c2 0208 	rsb	r2, r2, #8
   c5c48:	0092      	lsls	r2, r2, #2
   c5c4a:	b570      	push	{r4, r5, r6, lr}
   c5c4c:	f1c2 0620 	rsb	r6, r2, #32
   c5c50:	6843      	ldr	r3, [r0, #4]
   c5c52:	6804      	ldr	r4, [r0, #0]
   c5c54:	fa03 f506 	lsl.w	r5, r3, r6
   c5c58:	432c      	orrs	r4, r5
   c5c5a:	40d3      	lsrs	r3, r2
   c5c5c:	6004      	str	r4, [r0, #0]
   c5c5e:	f840 3f04 	str.w	r3, [r0, #4]!
   c5c62:	4288      	cmp	r0, r1
   c5c64:	d3f4      	bcc.n	c5c50 <L_shift+0xc>
   c5c66:	bd70      	pop	{r4, r5, r6, pc}

000c5c68 <__match>:
   c5c68:	b530      	push	{r4, r5, lr}
   c5c6a:	6803      	ldr	r3, [r0, #0]
   c5c6c:	3301      	adds	r3, #1
   c5c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5c72:	b914      	cbnz	r4, c5c7a <__match+0x12>
   c5c74:	6003      	str	r3, [r0, #0]
   c5c76:	2001      	movs	r0, #1
   c5c78:	bd30      	pop	{r4, r5, pc}
   c5c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5c7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5c82:	2d19      	cmp	r5, #25
   c5c84:	bf98      	it	ls
   c5c86:	3220      	addls	r2, #32
   c5c88:	42a2      	cmp	r2, r4
   c5c8a:	d0f0      	beq.n	c5c6e <__match+0x6>
   c5c8c:	2000      	movs	r0, #0
   c5c8e:	e7f3      	b.n	c5c78 <__match+0x10>

000c5c90 <__hexnan>:
   c5c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5c94:	680b      	ldr	r3, [r1, #0]
   c5c96:	115e      	asrs	r6, r3, #5
   c5c98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5c9c:	f013 031f 	ands.w	r3, r3, #31
   c5ca0:	b087      	sub	sp, #28
   c5ca2:	bf18      	it	ne
   c5ca4:	3604      	addne	r6, #4
   c5ca6:	2500      	movs	r5, #0
   c5ca8:	1f37      	subs	r7, r6, #4
   c5caa:	4690      	mov	r8, r2
   c5cac:	6802      	ldr	r2, [r0, #0]
   c5cae:	9301      	str	r3, [sp, #4]
   c5cb0:	4682      	mov	sl, r0
   c5cb2:	f846 5c04 	str.w	r5, [r6, #-4]
   c5cb6:	46b9      	mov	r9, r7
   c5cb8:	463c      	mov	r4, r7
   c5cba:	9502      	str	r5, [sp, #8]
   c5cbc:	46ab      	mov	fp, r5
   c5cbe:	7851      	ldrb	r1, [r2, #1]
   c5cc0:	1c53      	adds	r3, r2, #1
   c5cc2:	9303      	str	r3, [sp, #12]
   c5cc4:	b341      	cbz	r1, c5d18 <__hexnan+0x88>
   c5cc6:	4608      	mov	r0, r1
   c5cc8:	9205      	str	r2, [sp, #20]
   c5cca:	9104      	str	r1, [sp, #16]
   c5ccc:	f7ff fd5e 	bl	c578c <__hexdig_fun>
   c5cd0:	2800      	cmp	r0, #0
   c5cd2:	d14f      	bne.n	c5d74 <__hexnan+0xe4>
   c5cd4:	9904      	ldr	r1, [sp, #16]
   c5cd6:	9a05      	ldr	r2, [sp, #20]
   c5cd8:	2920      	cmp	r1, #32
   c5cda:	d818      	bhi.n	c5d0e <__hexnan+0x7e>
   c5cdc:	9b02      	ldr	r3, [sp, #8]
   c5cde:	459b      	cmp	fp, r3
   c5ce0:	dd13      	ble.n	c5d0a <__hexnan+0x7a>
   c5ce2:	454c      	cmp	r4, r9
   c5ce4:	d206      	bcs.n	c5cf4 <__hexnan+0x64>
   c5ce6:	2d07      	cmp	r5, #7
   c5ce8:	dc04      	bgt.n	c5cf4 <__hexnan+0x64>
   c5cea:	462a      	mov	r2, r5
   c5cec:	4649      	mov	r1, r9
   c5cee:	4620      	mov	r0, r4
   c5cf0:	f7ff ffa8 	bl	c5c44 <L_shift>
   c5cf4:	4544      	cmp	r4, r8
   c5cf6:	d950      	bls.n	c5d9a <__hexnan+0x10a>
   c5cf8:	2300      	movs	r3, #0
   c5cfa:	f1a4 0904 	sub.w	r9, r4, #4
   c5cfe:	f844 3c04 	str.w	r3, [r4, #-4]
   c5d02:	f8cd b008 	str.w	fp, [sp, #8]
   c5d06:	464c      	mov	r4, r9
   c5d08:	461d      	mov	r5, r3
   c5d0a:	9a03      	ldr	r2, [sp, #12]
   c5d0c:	e7d7      	b.n	c5cbe <__hexnan+0x2e>
   c5d0e:	2929      	cmp	r1, #41	; 0x29
   c5d10:	d156      	bne.n	c5dc0 <__hexnan+0x130>
   c5d12:	3202      	adds	r2, #2
   c5d14:	f8ca 2000 	str.w	r2, [sl]
   c5d18:	f1bb 0f00 	cmp.w	fp, #0
   c5d1c:	d050      	beq.n	c5dc0 <__hexnan+0x130>
   c5d1e:	454c      	cmp	r4, r9
   c5d20:	d206      	bcs.n	c5d30 <__hexnan+0xa0>
   c5d22:	2d07      	cmp	r5, #7
   c5d24:	dc04      	bgt.n	c5d30 <__hexnan+0xa0>
   c5d26:	462a      	mov	r2, r5
   c5d28:	4649      	mov	r1, r9
   c5d2a:	4620      	mov	r0, r4
   c5d2c:	f7ff ff8a 	bl	c5c44 <L_shift>
   c5d30:	4544      	cmp	r4, r8
   c5d32:	d934      	bls.n	c5d9e <__hexnan+0x10e>
   c5d34:	f1a8 0204 	sub.w	r2, r8, #4
   c5d38:	4623      	mov	r3, r4
   c5d3a:	f853 1b04 	ldr.w	r1, [r3], #4
   c5d3e:	f842 1f04 	str.w	r1, [r2, #4]!
   c5d42:	429f      	cmp	r7, r3
   c5d44:	d2f9      	bcs.n	c5d3a <__hexnan+0xaa>
   c5d46:	1b3b      	subs	r3, r7, r4
   c5d48:	f023 0303 	bic.w	r3, r3, #3
   c5d4c:	3304      	adds	r3, #4
   c5d4e:	3401      	adds	r4, #1
   c5d50:	3e03      	subs	r6, #3
   c5d52:	42b4      	cmp	r4, r6
   c5d54:	bf88      	it	hi
   c5d56:	2304      	movhi	r3, #4
   c5d58:	4443      	add	r3, r8
   c5d5a:	2200      	movs	r2, #0
   c5d5c:	f843 2b04 	str.w	r2, [r3], #4
   c5d60:	429f      	cmp	r7, r3
   c5d62:	d2fb      	bcs.n	c5d5c <__hexnan+0xcc>
   c5d64:	683b      	ldr	r3, [r7, #0]
   c5d66:	b91b      	cbnz	r3, c5d70 <__hexnan+0xe0>
   c5d68:	4547      	cmp	r7, r8
   c5d6a:	d127      	bne.n	c5dbc <__hexnan+0x12c>
   c5d6c:	2301      	movs	r3, #1
   c5d6e:	603b      	str	r3, [r7, #0]
   c5d70:	2005      	movs	r0, #5
   c5d72:	e026      	b.n	c5dc2 <__hexnan+0x132>
   c5d74:	3501      	adds	r5, #1
   c5d76:	2d08      	cmp	r5, #8
   c5d78:	f10b 0b01 	add.w	fp, fp, #1
   c5d7c:	dd06      	ble.n	c5d8c <__hexnan+0xfc>
   c5d7e:	4544      	cmp	r4, r8
   c5d80:	d9c3      	bls.n	c5d0a <__hexnan+0x7a>
   c5d82:	2300      	movs	r3, #0
   c5d84:	f844 3c04 	str.w	r3, [r4, #-4]
   c5d88:	2501      	movs	r5, #1
   c5d8a:	3c04      	subs	r4, #4
   c5d8c:	6822      	ldr	r2, [r4, #0]
   c5d8e:	f000 000f 	and.w	r0, r0, #15
   c5d92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5d96:	6022      	str	r2, [r4, #0]
   c5d98:	e7b7      	b.n	c5d0a <__hexnan+0x7a>
   c5d9a:	2508      	movs	r5, #8
   c5d9c:	e7b5      	b.n	c5d0a <__hexnan+0x7a>
   c5d9e:	9b01      	ldr	r3, [sp, #4]
   c5da0:	2b00      	cmp	r3, #0
   c5da2:	d0df      	beq.n	c5d64 <__hexnan+0xd4>
   c5da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5da8:	f1c3 0320 	rsb	r3, r3, #32
   c5dac:	fa22 f303 	lsr.w	r3, r2, r3
   c5db0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5db4:	401a      	ands	r2, r3
   c5db6:	f846 2c04 	str.w	r2, [r6, #-4]
   c5dba:	e7d3      	b.n	c5d64 <__hexnan+0xd4>
   c5dbc:	3f04      	subs	r7, #4
   c5dbe:	e7d1      	b.n	c5d64 <__hexnan+0xd4>
   c5dc0:	2004      	movs	r0, #4
   c5dc2:	b007      	add	sp, #28
   c5dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5dc8 <__retarget_lock_acquire_recursive>:
   c5dc8:	4770      	bx	lr

000c5dca <__retarget_lock_release>:
   c5dca:	4770      	bx	lr

000c5dcc <__retarget_lock_release_recursive>:
   c5dcc:	4770      	bx	lr

000c5dce <__ascii_mbtowc>:
   c5dce:	b082      	sub	sp, #8
   c5dd0:	b901      	cbnz	r1, c5dd4 <__ascii_mbtowc+0x6>
   c5dd2:	a901      	add	r1, sp, #4
   c5dd4:	b142      	cbz	r2, c5de8 <__ascii_mbtowc+0x1a>
   c5dd6:	b14b      	cbz	r3, c5dec <__ascii_mbtowc+0x1e>
   c5dd8:	7813      	ldrb	r3, [r2, #0]
   c5dda:	600b      	str	r3, [r1, #0]
   c5ddc:	7812      	ldrb	r2, [r2, #0]
   c5dde:	1e10      	subs	r0, r2, #0
   c5de0:	bf18      	it	ne
   c5de2:	2001      	movne	r0, #1
   c5de4:	b002      	add	sp, #8
   c5de6:	4770      	bx	lr
   c5de8:	4610      	mov	r0, r2
   c5dea:	e7fb      	b.n	c5de4 <__ascii_mbtowc+0x16>
   c5dec:	f06f 0001 	mvn.w	r0, #1
   c5df0:	e7f8      	b.n	c5de4 <__ascii_mbtowc+0x16>
	...

000c5df4 <_Balloc>:
   c5df4:	b570      	push	{r4, r5, r6, lr}
   c5df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5df8:	4604      	mov	r4, r0
   c5dfa:	460d      	mov	r5, r1
   c5dfc:	b976      	cbnz	r6, c5e1c <_Balloc+0x28>
   c5dfe:	2010      	movs	r0, #16
   c5e00:	f7f8 fa96 	bl	be330 <malloc>
   c5e04:	4602      	mov	r2, r0
   c5e06:	6260      	str	r0, [r4, #36]	; 0x24
   c5e08:	b920      	cbnz	r0, c5e14 <_Balloc+0x20>
   c5e0a:	4b18      	ldr	r3, [pc, #96]	; (c5e6c <_Balloc+0x78>)
   c5e0c:	4818      	ldr	r0, [pc, #96]	; (c5e70 <_Balloc+0x7c>)
   c5e0e:	2166      	movs	r1, #102	; 0x66
   c5e10:	f7f8 fade 	bl	be3d0 <__assert_func>
   c5e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5e18:	6006      	str	r6, [r0, #0]
   c5e1a:	60c6      	str	r6, [r0, #12]
   c5e1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5e1e:	68f3      	ldr	r3, [r6, #12]
   c5e20:	b183      	cbz	r3, c5e44 <_Balloc+0x50>
   c5e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5e24:	68db      	ldr	r3, [r3, #12]
   c5e26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5e2a:	b9b8      	cbnz	r0, c5e5c <_Balloc+0x68>
   c5e2c:	2101      	movs	r1, #1
   c5e2e:	fa01 f605 	lsl.w	r6, r1, r5
   c5e32:	1d72      	adds	r2, r6, #5
   c5e34:	0092      	lsls	r2, r2, #2
   c5e36:	4620      	mov	r0, r4
   c5e38:	f000 fc9d 	bl	c6776 <_calloc_r>
   c5e3c:	b160      	cbz	r0, c5e58 <_Balloc+0x64>
   c5e3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5e42:	e00e      	b.n	c5e62 <_Balloc+0x6e>
   c5e44:	2221      	movs	r2, #33	; 0x21
   c5e46:	2104      	movs	r1, #4
   c5e48:	4620      	mov	r0, r4
   c5e4a:	f000 fc94 	bl	c6776 <_calloc_r>
   c5e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5e50:	60f0      	str	r0, [r6, #12]
   c5e52:	68db      	ldr	r3, [r3, #12]
   c5e54:	2b00      	cmp	r3, #0
   c5e56:	d1e4      	bne.n	c5e22 <_Balloc+0x2e>
   c5e58:	2000      	movs	r0, #0
   c5e5a:	bd70      	pop	{r4, r5, r6, pc}
   c5e5c:	6802      	ldr	r2, [r0, #0]
   c5e5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5e62:	2300      	movs	r3, #0
   c5e64:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5e68:	e7f7      	b.n	c5e5a <_Balloc+0x66>
   c5e6a:	bf00      	nop
   c5e6c:	000c8718 	.word	0x000c8718
   c5e70:	000c896e 	.word	0x000c896e

000c5e74 <_Bfree>:
   c5e74:	b570      	push	{r4, r5, r6, lr}
   c5e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5e78:	4605      	mov	r5, r0
   c5e7a:	460c      	mov	r4, r1
   c5e7c:	b976      	cbnz	r6, c5e9c <_Bfree+0x28>
   c5e7e:	2010      	movs	r0, #16
   c5e80:	f7f8 fa56 	bl	be330 <malloc>
   c5e84:	4602      	mov	r2, r0
   c5e86:	6268      	str	r0, [r5, #36]	; 0x24
   c5e88:	b920      	cbnz	r0, c5e94 <_Bfree+0x20>
   c5e8a:	4b09      	ldr	r3, [pc, #36]	; (c5eb0 <_Bfree+0x3c>)
   c5e8c:	4809      	ldr	r0, [pc, #36]	; (c5eb4 <_Bfree+0x40>)
   c5e8e:	218a      	movs	r1, #138	; 0x8a
   c5e90:	f7f8 fa9e 	bl	be3d0 <__assert_func>
   c5e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5e98:	6006      	str	r6, [r0, #0]
   c5e9a:	60c6      	str	r6, [r0, #12]
   c5e9c:	b13c      	cbz	r4, c5eae <_Bfree+0x3a>
   c5e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5ea0:	6862      	ldr	r2, [r4, #4]
   c5ea2:	68db      	ldr	r3, [r3, #12]
   c5ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5ea8:	6021      	str	r1, [r4, #0]
   c5eaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5eae:	bd70      	pop	{r4, r5, r6, pc}
   c5eb0:	000c8718 	.word	0x000c8718
   c5eb4:	000c896e 	.word	0x000c896e

000c5eb8 <__multadd>:
   c5eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5ebc:	690d      	ldr	r5, [r1, #16]
   c5ebe:	4607      	mov	r7, r0
   c5ec0:	460c      	mov	r4, r1
   c5ec2:	461e      	mov	r6, r3
   c5ec4:	f101 0c14 	add.w	ip, r1, #20
   c5ec8:	2000      	movs	r0, #0
   c5eca:	f8dc 3000 	ldr.w	r3, [ip]
   c5ece:	b299      	uxth	r1, r3
   c5ed0:	fb02 6101 	mla	r1, r2, r1, r6
   c5ed4:	0c1e      	lsrs	r6, r3, #16
   c5ed6:	0c0b      	lsrs	r3, r1, #16
   c5ed8:	fb02 3306 	mla	r3, r2, r6, r3
   c5edc:	b289      	uxth	r1, r1
   c5ede:	3001      	adds	r0, #1
   c5ee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5ee4:	4285      	cmp	r5, r0
   c5ee6:	f84c 1b04 	str.w	r1, [ip], #4
   c5eea:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5eee:	dcec      	bgt.n	c5eca <__multadd+0x12>
   c5ef0:	b30e      	cbz	r6, c5f36 <__multadd+0x7e>
   c5ef2:	68a3      	ldr	r3, [r4, #8]
   c5ef4:	42ab      	cmp	r3, r5
   c5ef6:	dc19      	bgt.n	c5f2c <__multadd+0x74>
   c5ef8:	6861      	ldr	r1, [r4, #4]
   c5efa:	4638      	mov	r0, r7
   c5efc:	3101      	adds	r1, #1
   c5efe:	f7ff ff79 	bl	c5df4 <_Balloc>
   c5f02:	4680      	mov	r8, r0
   c5f04:	b928      	cbnz	r0, c5f12 <__multadd+0x5a>
   c5f06:	4602      	mov	r2, r0
   c5f08:	4b0c      	ldr	r3, [pc, #48]	; (c5f3c <__multadd+0x84>)
   c5f0a:	480d      	ldr	r0, [pc, #52]	; (c5f40 <__multadd+0x88>)
   c5f0c:	21b5      	movs	r1, #181	; 0xb5
   c5f0e:	f7f8 fa5f 	bl	be3d0 <__assert_func>
   c5f12:	6922      	ldr	r2, [r4, #16]
   c5f14:	3202      	adds	r2, #2
   c5f16:	f104 010c 	add.w	r1, r4, #12
   c5f1a:	0092      	lsls	r2, r2, #2
   c5f1c:	300c      	adds	r0, #12
   c5f1e:	f7fe fb9b 	bl	c4658 <memcpy>
   c5f22:	4621      	mov	r1, r4
   c5f24:	4638      	mov	r0, r7
   c5f26:	f7ff ffa5 	bl	c5e74 <_Bfree>
   c5f2a:	4644      	mov	r4, r8
   c5f2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5f30:	3501      	adds	r5, #1
   c5f32:	615e      	str	r6, [r3, #20]
   c5f34:	6125      	str	r5, [r4, #16]
   c5f36:	4620      	mov	r0, r4
   c5f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5f3c:	000c88e9 	.word	0x000c88e9
   c5f40:	000c896e 	.word	0x000c896e

000c5f44 <__s2b>:
   c5f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5f48:	460c      	mov	r4, r1
   c5f4a:	4615      	mov	r5, r2
   c5f4c:	461f      	mov	r7, r3
   c5f4e:	2209      	movs	r2, #9
   c5f50:	3308      	adds	r3, #8
   c5f52:	4606      	mov	r6, r0
   c5f54:	fb93 f3f2 	sdiv	r3, r3, r2
   c5f58:	2100      	movs	r1, #0
   c5f5a:	2201      	movs	r2, #1
   c5f5c:	429a      	cmp	r2, r3
   c5f5e:	db09      	blt.n	c5f74 <__s2b+0x30>
   c5f60:	4630      	mov	r0, r6
   c5f62:	f7ff ff47 	bl	c5df4 <_Balloc>
   c5f66:	b940      	cbnz	r0, c5f7a <__s2b+0x36>
   c5f68:	4602      	mov	r2, r0
   c5f6a:	4b19      	ldr	r3, [pc, #100]	; (c5fd0 <__s2b+0x8c>)
   c5f6c:	4819      	ldr	r0, [pc, #100]	; (c5fd4 <__s2b+0x90>)
   c5f6e:	21ce      	movs	r1, #206	; 0xce
   c5f70:	f7f8 fa2e 	bl	be3d0 <__assert_func>
   c5f74:	0052      	lsls	r2, r2, #1
   c5f76:	3101      	adds	r1, #1
   c5f78:	e7f0      	b.n	c5f5c <__s2b+0x18>
   c5f7a:	9b08      	ldr	r3, [sp, #32]
   c5f7c:	6143      	str	r3, [r0, #20]
   c5f7e:	2d09      	cmp	r5, #9
   c5f80:	f04f 0301 	mov.w	r3, #1
   c5f84:	6103      	str	r3, [r0, #16]
   c5f86:	dd16      	ble.n	c5fb6 <__s2b+0x72>
   c5f88:	f104 0909 	add.w	r9, r4, #9
   c5f8c:	46c8      	mov	r8, r9
   c5f8e:	442c      	add	r4, r5
   c5f90:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5f94:	4601      	mov	r1, r0
   c5f96:	3b30      	subs	r3, #48	; 0x30
   c5f98:	220a      	movs	r2, #10
   c5f9a:	4630      	mov	r0, r6
   c5f9c:	f7ff ff8c 	bl	c5eb8 <__multadd>
   c5fa0:	45a0      	cmp	r8, r4
   c5fa2:	d1f5      	bne.n	c5f90 <__s2b+0x4c>
   c5fa4:	f1a5 0408 	sub.w	r4, r5, #8
   c5fa8:	444c      	add	r4, r9
   c5faa:	1b2d      	subs	r5, r5, r4
   c5fac:	1963      	adds	r3, r4, r5
   c5fae:	42bb      	cmp	r3, r7
   c5fb0:	db04      	blt.n	c5fbc <__s2b+0x78>
   c5fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5fb6:	340a      	adds	r4, #10
   c5fb8:	2509      	movs	r5, #9
   c5fba:	e7f6      	b.n	c5faa <__s2b+0x66>
   c5fbc:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5fc0:	4601      	mov	r1, r0
   c5fc2:	3b30      	subs	r3, #48	; 0x30
   c5fc4:	220a      	movs	r2, #10
   c5fc6:	4630      	mov	r0, r6
   c5fc8:	f7ff ff76 	bl	c5eb8 <__multadd>
   c5fcc:	e7ee      	b.n	c5fac <__s2b+0x68>
   c5fce:	bf00      	nop
   c5fd0:	000c88e9 	.word	0x000c88e9
   c5fd4:	000c896e 	.word	0x000c896e

000c5fd8 <__hi0bits>:
   c5fd8:	0c03      	lsrs	r3, r0, #16
   c5fda:	041b      	lsls	r3, r3, #16
   c5fdc:	b9d3      	cbnz	r3, c6014 <__hi0bits+0x3c>
   c5fde:	0400      	lsls	r0, r0, #16
   c5fe0:	2310      	movs	r3, #16
   c5fe2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5fe6:	bf04      	itt	eq
   c5fe8:	0200      	lsleq	r0, r0, #8
   c5fea:	3308      	addeq	r3, #8
   c5fec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5ff0:	bf04      	itt	eq
   c5ff2:	0100      	lsleq	r0, r0, #4
   c5ff4:	3304      	addeq	r3, #4
   c5ff6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5ffa:	bf04      	itt	eq
   c5ffc:	0080      	lsleq	r0, r0, #2
   c5ffe:	3302      	addeq	r3, #2
   c6000:	2800      	cmp	r0, #0
   c6002:	db05      	blt.n	c6010 <__hi0bits+0x38>
   c6004:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c6008:	f103 0301 	add.w	r3, r3, #1
   c600c:	bf08      	it	eq
   c600e:	2320      	moveq	r3, #32
   c6010:	4618      	mov	r0, r3
   c6012:	4770      	bx	lr
   c6014:	2300      	movs	r3, #0
   c6016:	e7e4      	b.n	c5fe2 <__hi0bits+0xa>

000c6018 <__lo0bits>:
   c6018:	6803      	ldr	r3, [r0, #0]
   c601a:	f013 0207 	ands.w	r2, r3, #7
   c601e:	4601      	mov	r1, r0
   c6020:	d00b      	beq.n	c603a <__lo0bits+0x22>
   c6022:	07da      	lsls	r2, r3, #31
   c6024:	d423      	bmi.n	c606e <__lo0bits+0x56>
   c6026:	0798      	lsls	r0, r3, #30
   c6028:	bf49      	itett	mi
   c602a:	085b      	lsrmi	r3, r3, #1
   c602c:	089b      	lsrpl	r3, r3, #2
   c602e:	2001      	movmi	r0, #1
   c6030:	600b      	strmi	r3, [r1, #0]
   c6032:	bf5c      	itt	pl
   c6034:	600b      	strpl	r3, [r1, #0]
   c6036:	2002      	movpl	r0, #2
   c6038:	4770      	bx	lr
   c603a:	b298      	uxth	r0, r3
   c603c:	b9a8      	cbnz	r0, c606a <__lo0bits+0x52>
   c603e:	0c1b      	lsrs	r3, r3, #16
   c6040:	2010      	movs	r0, #16
   c6042:	b2da      	uxtb	r2, r3
   c6044:	b90a      	cbnz	r2, c604a <__lo0bits+0x32>
   c6046:	3008      	adds	r0, #8
   c6048:	0a1b      	lsrs	r3, r3, #8
   c604a:	071a      	lsls	r2, r3, #28
   c604c:	bf04      	itt	eq
   c604e:	091b      	lsreq	r3, r3, #4
   c6050:	3004      	addeq	r0, #4
   c6052:	079a      	lsls	r2, r3, #30
   c6054:	bf04      	itt	eq
   c6056:	089b      	lsreq	r3, r3, #2
   c6058:	3002      	addeq	r0, #2
   c605a:	07da      	lsls	r2, r3, #31
   c605c:	d403      	bmi.n	c6066 <__lo0bits+0x4e>
   c605e:	085b      	lsrs	r3, r3, #1
   c6060:	f100 0001 	add.w	r0, r0, #1
   c6064:	d005      	beq.n	c6072 <__lo0bits+0x5a>
   c6066:	600b      	str	r3, [r1, #0]
   c6068:	4770      	bx	lr
   c606a:	4610      	mov	r0, r2
   c606c:	e7e9      	b.n	c6042 <__lo0bits+0x2a>
   c606e:	2000      	movs	r0, #0
   c6070:	4770      	bx	lr
   c6072:	2020      	movs	r0, #32
   c6074:	4770      	bx	lr
	...

000c6078 <__i2b>:
   c6078:	b510      	push	{r4, lr}
   c607a:	460c      	mov	r4, r1
   c607c:	2101      	movs	r1, #1
   c607e:	f7ff feb9 	bl	c5df4 <_Balloc>
   c6082:	4602      	mov	r2, r0
   c6084:	b928      	cbnz	r0, c6092 <__i2b+0x1a>
   c6086:	4b05      	ldr	r3, [pc, #20]	; (c609c <__i2b+0x24>)
   c6088:	4805      	ldr	r0, [pc, #20]	; (c60a0 <__i2b+0x28>)
   c608a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c608e:	f7f8 f99f 	bl	be3d0 <__assert_func>
   c6092:	2301      	movs	r3, #1
   c6094:	6144      	str	r4, [r0, #20]
   c6096:	6103      	str	r3, [r0, #16]
   c6098:	bd10      	pop	{r4, pc}
   c609a:	bf00      	nop
   c609c:	000c88e9 	.word	0x000c88e9
   c60a0:	000c896e 	.word	0x000c896e

000c60a4 <__multiply>:
   c60a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c60a8:	4691      	mov	r9, r2
   c60aa:	690a      	ldr	r2, [r1, #16]
   c60ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c60b0:	429a      	cmp	r2, r3
   c60b2:	bfb8      	it	lt
   c60b4:	460b      	movlt	r3, r1
   c60b6:	460c      	mov	r4, r1
   c60b8:	bfbc      	itt	lt
   c60ba:	464c      	movlt	r4, r9
   c60bc:	4699      	movlt	r9, r3
   c60be:	6927      	ldr	r7, [r4, #16]
   c60c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c60c4:	68a3      	ldr	r3, [r4, #8]
   c60c6:	6861      	ldr	r1, [r4, #4]
   c60c8:	eb07 060a 	add.w	r6, r7, sl
   c60cc:	42b3      	cmp	r3, r6
   c60ce:	b085      	sub	sp, #20
   c60d0:	bfb8      	it	lt
   c60d2:	3101      	addlt	r1, #1
   c60d4:	f7ff fe8e 	bl	c5df4 <_Balloc>
   c60d8:	b930      	cbnz	r0, c60e8 <__multiply+0x44>
   c60da:	4602      	mov	r2, r0
   c60dc:	4b44      	ldr	r3, [pc, #272]	; (c61f0 <__multiply+0x14c>)
   c60de:	4845      	ldr	r0, [pc, #276]	; (c61f4 <__multiply+0x150>)
   c60e0:	f240 115d 	movw	r1, #349	; 0x15d
   c60e4:	f7f8 f974 	bl	be3d0 <__assert_func>
   c60e8:	f100 0514 	add.w	r5, r0, #20
   c60ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c60f0:	462b      	mov	r3, r5
   c60f2:	2200      	movs	r2, #0
   c60f4:	4543      	cmp	r3, r8
   c60f6:	d321      	bcc.n	c613c <__multiply+0x98>
   c60f8:	f104 0314 	add.w	r3, r4, #20
   c60fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c6100:	f109 0314 	add.w	r3, r9, #20
   c6104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c6108:	9202      	str	r2, [sp, #8]
   c610a:	1b3a      	subs	r2, r7, r4
   c610c:	3a15      	subs	r2, #21
   c610e:	f022 0203 	bic.w	r2, r2, #3
   c6112:	3204      	adds	r2, #4
   c6114:	f104 0115 	add.w	r1, r4, #21
   c6118:	428f      	cmp	r7, r1
   c611a:	bf38      	it	cc
   c611c:	2204      	movcc	r2, #4
   c611e:	9201      	str	r2, [sp, #4]
   c6120:	9a02      	ldr	r2, [sp, #8]
   c6122:	9303      	str	r3, [sp, #12]
   c6124:	429a      	cmp	r2, r3
   c6126:	d80c      	bhi.n	c6142 <__multiply+0x9e>
   c6128:	2e00      	cmp	r6, #0
   c612a:	dd03      	ble.n	c6134 <__multiply+0x90>
   c612c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c6130:	2b00      	cmp	r3, #0
   c6132:	d05a      	beq.n	c61ea <__multiply+0x146>
   c6134:	6106      	str	r6, [r0, #16]
   c6136:	b005      	add	sp, #20
   c6138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c613c:	f843 2b04 	str.w	r2, [r3], #4
   c6140:	e7d8      	b.n	c60f4 <__multiply+0x50>
   c6142:	f8b3 a000 	ldrh.w	sl, [r3]
   c6146:	f1ba 0f00 	cmp.w	sl, #0
   c614a:	d024      	beq.n	c6196 <__multiply+0xf2>
   c614c:	f104 0e14 	add.w	lr, r4, #20
   c6150:	46a9      	mov	r9, r5
   c6152:	f04f 0c00 	mov.w	ip, #0
   c6156:	f85e 2b04 	ldr.w	r2, [lr], #4
   c615a:	f8d9 1000 	ldr.w	r1, [r9]
   c615e:	fa1f fb82 	uxth.w	fp, r2
   c6162:	b289      	uxth	r1, r1
   c6164:	fb0a 110b 	mla	r1, sl, fp, r1
   c6168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c616c:	f8d9 2000 	ldr.w	r2, [r9]
   c6170:	4461      	add	r1, ip
   c6172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c6176:	fb0a c20b 	mla	r2, sl, fp, ip
   c617a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c617e:	b289      	uxth	r1, r1
   c6180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c6184:	4577      	cmp	r7, lr
   c6186:	f849 1b04 	str.w	r1, [r9], #4
   c618a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c618e:	d8e2      	bhi.n	c6156 <__multiply+0xb2>
   c6190:	9a01      	ldr	r2, [sp, #4]
   c6192:	f845 c002 	str.w	ip, [r5, r2]
   c6196:	9a03      	ldr	r2, [sp, #12]
   c6198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c619c:	3304      	adds	r3, #4
   c619e:	f1b9 0f00 	cmp.w	r9, #0
   c61a2:	d020      	beq.n	c61e6 <__multiply+0x142>
   c61a4:	6829      	ldr	r1, [r5, #0]
   c61a6:	f104 0c14 	add.w	ip, r4, #20
   c61aa:	46ae      	mov	lr, r5
   c61ac:	f04f 0a00 	mov.w	sl, #0
   c61b0:	f8bc b000 	ldrh.w	fp, [ip]
   c61b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c61b8:	fb09 220b 	mla	r2, r9, fp, r2
   c61bc:	4492      	add	sl, r2
   c61be:	b289      	uxth	r1, r1
   c61c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c61c4:	f84e 1b04 	str.w	r1, [lr], #4
   c61c8:	f85c 2b04 	ldr.w	r2, [ip], #4
   c61cc:	f8be 1000 	ldrh.w	r1, [lr]
   c61d0:	0c12      	lsrs	r2, r2, #16
   c61d2:	fb09 1102 	mla	r1, r9, r2, r1
   c61d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c61da:	4567      	cmp	r7, ip
   c61dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c61e0:	d8e6      	bhi.n	c61b0 <__multiply+0x10c>
   c61e2:	9a01      	ldr	r2, [sp, #4]
   c61e4:	50a9      	str	r1, [r5, r2]
   c61e6:	3504      	adds	r5, #4
   c61e8:	e79a      	b.n	c6120 <__multiply+0x7c>
   c61ea:	3e01      	subs	r6, #1
   c61ec:	e79c      	b.n	c6128 <__multiply+0x84>
   c61ee:	bf00      	nop
   c61f0:	000c88e9 	.word	0x000c88e9
   c61f4:	000c896e 	.word	0x000c896e

000c61f8 <__pow5mult>:
   c61f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c61fc:	4615      	mov	r5, r2
   c61fe:	f012 0203 	ands.w	r2, r2, #3
   c6202:	4606      	mov	r6, r0
   c6204:	460f      	mov	r7, r1
   c6206:	d007      	beq.n	c6218 <__pow5mult+0x20>
   c6208:	4c25      	ldr	r4, [pc, #148]	; (c62a0 <__pow5mult+0xa8>)
   c620a:	3a01      	subs	r2, #1
   c620c:	2300      	movs	r3, #0
   c620e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c6212:	f7ff fe51 	bl	c5eb8 <__multadd>
   c6216:	4607      	mov	r7, r0
   c6218:	10ad      	asrs	r5, r5, #2
   c621a:	d03d      	beq.n	c6298 <__pow5mult+0xa0>
   c621c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c621e:	b97c      	cbnz	r4, c6240 <__pow5mult+0x48>
   c6220:	2010      	movs	r0, #16
   c6222:	f7f8 f885 	bl	be330 <malloc>
   c6226:	4602      	mov	r2, r0
   c6228:	6270      	str	r0, [r6, #36]	; 0x24
   c622a:	b928      	cbnz	r0, c6238 <__pow5mult+0x40>
   c622c:	4b1d      	ldr	r3, [pc, #116]	; (c62a4 <__pow5mult+0xac>)
   c622e:	481e      	ldr	r0, [pc, #120]	; (c62a8 <__pow5mult+0xb0>)
   c6230:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c6234:	f7f8 f8cc 	bl	be3d0 <__assert_func>
   c6238:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c623c:	6004      	str	r4, [r0, #0]
   c623e:	60c4      	str	r4, [r0, #12]
   c6240:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c6244:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c6248:	b94c      	cbnz	r4, c625e <__pow5mult+0x66>
   c624a:	f240 2171 	movw	r1, #625	; 0x271
   c624e:	4630      	mov	r0, r6
   c6250:	f7ff ff12 	bl	c6078 <__i2b>
   c6254:	2300      	movs	r3, #0
   c6256:	f8c8 0008 	str.w	r0, [r8, #8]
   c625a:	4604      	mov	r4, r0
   c625c:	6003      	str	r3, [r0, #0]
   c625e:	f04f 0900 	mov.w	r9, #0
   c6262:	07eb      	lsls	r3, r5, #31
   c6264:	d50a      	bpl.n	c627c <__pow5mult+0x84>
   c6266:	4639      	mov	r1, r7
   c6268:	4622      	mov	r2, r4
   c626a:	4630      	mov	r0, r6
   c626c:	f7ff ff1a 	bl	c60a4 <__multiply>
   c6270:	4639      	mov	r1, r7
   c6272:	4680      	mov	r8, r0
   c6274:	4630      	mov	r0, r6
   c6276:	f7ff fdfd 	bl	c5e74 <_Bfree>
   c627a:	4647      	mov	r7, r8
   c627c:	106d      	asrs	r5, r5, #1
   c627e:	d00b      	beq.n	c6298 <__pow5mult+0xa0>
   c6280:	6820      	ldr	r0, [r4, #0]
   c6282:	b938      	cbnz	r0, c6294 <__pow5mult+0x9c>
   c6284:	4622      	mov	r2, r4
   c6286:	4621      	mov	r1, r4
   c6288:	4630      	mov	r0, r6
   c628a:	f7ff ff0b 	bl	c60a4 <__multiply>
   c628e:	6020      	str	r0, [r4, #0]
   c6290:	f8c0 9000 	str.w	r9, [r0]
   c6294:	4604      	mov	r4, r0
   c6296:	e7e4      	b.n	c6262 <__pow5mult+0x6a>
   c6298:	4638      	mov	r0, r7
   c629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c629e:	bf00      	nop
   c62a0:	000c8ab8 	.word	0x000c8ab8
   c62a4:	000c8718 	.word	0x000c8718
   c62a8:	000c896e 	.word	0x000c896e

000c62ac <__lshift>:
   c62ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c62b0:	460c      	mov	r4, r1
   c62b2:	6849      	ldr	r1, [r1, #4]
   c62b4:	6923      	ldr	r3, [r4, #16]
   c62b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c62ba:	68a3      	ldr	r3, [r4, #8]
   c62bc:	4607      	mov	r7, r0
   c62be:	4691      	mov	r9, r2
   c62c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c62c4:	f108 0601 	add.w	r6, r8, #1
   c62c8:	42b3      	cmp	r3, r6
   c62ca:	db0b      	blt.n	c62e4 <__lshift+0x38>
   c62cc:	4638      	mov	r0, r7
   c62ce:	f7ff fd91 	bl	c5df4 <_Balloc>
   c62d2:	4605      	mov	r5, r0
   c62d4:	b948      	cbnz	r0, c62ea <__lshift+0x3e>
   c62d6:	4602      	mov	r2, r0
   c62d8:	4b2a      	ldr	r3, [pc, #168]	; (c6384 <__lshift+0xd8>)
   c62da:	482b      	ldr	r0, [pc, #172]	; (c6388 <__lshift+0xdc>)
   c62dc:	f240 11d9 	movw	r1, #473	; 0x1d9
   c62e0:	f7f8 f876 	bl	be3d0 <__assert_func>
   c62e4:	3101      	adds	r1, #1
   c62e6:	005b      	lsls	r3, r3, #1
   c62e8:	e7ee      	b.n	c62c8 <__lshift+0x1c>
   c62ea:	2300      	movs	r3, #0
   c62ec:	f100 0114 	add.w	r1, r0, #20
   c62f0:	f100 0210 	add.w	r2, r0, #16
   c62f4:	4618      	mov	r0, r3
   c62f6:	4553      	cmp	r3, sl
   c62f8:	db37      	blt.n	c636a <__lshift+0xbe>
   c62fa:	6920      	ldr	r0, [r4, #16]
   c62fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c6300:	f104 0314 	add.w	r3, r4, #20
   c6304:	f019 091f 	ands.w	r9, r9, #31
   c6308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c630c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c6310:	d02f      	beq.n	c6372 <__lshift+0xc6>
   c6312:	f1c9 0e20 	rsb	lr, r9, #32
   c6316:	468a      	mov	sl, r1
   c6318:	f04f 0c00 	mov.w	ip, #0
   c631c:	681a      	ldr	r2, [r3, #0]
   c631e:	fa02 f209 	lsl.w	r2, r2, r9
   c6322:	ea42 020c 	orr.w	r2, r2, ip
   c6326:	f84a 2b04 	str.w	r2, [sl], #4
   c632a:	f853 2b04 	ldr.w	r2, [r3], #4
   c632e:	4298      	cmp	r0, r3
   c6330:	fa22 fc0e 	lsr.w	ip, r2, lr
   c6334:	d8f2      	bhi.n	c631c <__lshift+0x70>
   c6336:	1b03      	subs	r3, r0, r4
   c6338:	3b15      	subs	r3, #21
   c633a:	f023 0303 	bic.w	r3, r3, #3
   c633e:	3304      	adds	r3, #4
   c6340:	f104 0215 	add.w	r2, r4, #21
   c6344:	4290      	cmp	r0, r2
   c6346:	bf38      	it	cc
   c6348:	2304      	movcc	r3, #4
   c634a:	f841 c003 	str.w	ip, [r1, r3]
   c634e:	f1bc 0f00 	cmp.w	ip, #0
   c6352:	d001      	beq.n	c6358 <__lshift+0xac>
   c6354:	f108 0602 	add.w	r6, r8, #2
   c6358:	3e01      	subs	r6, #1
   c635a:	4638      	mov	r0, r7
   c635c:	612e      	str	r6, [r5, #16]
   c635e:	4621      	mov	r1, r4
   c6360:	f7ff fd88 	bl	c5e74 <_Bfree>
   c6364:	4628      	mov	r0, r5
   c6366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c636a:	f842 0f04 	str.w	r0, [r2, #4]!
   c636e:	3301      	adds	r3, #1
   c6370:	e7c1      	b.n	c62f6 <__lshift+0x4a>
   c6372:	3904      	subs	r1, #4
   c6374:	f853 2b04 	ldr.w	r2, [r3], #4
   c6378:	f841 2f04 	str.w	r2, [r1, #4]!
   c637c:	4298      	cmp	r0, r3
   c637e:	d8f9      	bhi.n	c6374 <__lshift+0xc8>
   c6380:	e7ea      	b.n	c6358 <__lshift+0xac>
   c6382:	bf00      	nop
   c6384:	000c88e9 	.word	0x000c88e9
   c6388:	000c896e 	.word	0x000c896e

000c638c <__mcmp>:
   c638c:	b530      	push	{r4, r5, lr}
   c638e:	6902      	ldr	r2, [r0, #16]
   c6390:	690c      	ldr	r4, [r1, #16]
   c6392:	1b12      	subs	r2, r2, r4
   c6394:	d10e      	bne.n	c63b4 <__mcmp+0x28>
   c6396:	f100 0314 	add.w	r3, r0, #20
   c639a:	3114      	adds	r1, #20
   c639c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c63a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c63a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c63a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c63ac:	42a5      	cmp	r5, r4
   c63ae:	d003      	beq.n	c63b8 <__mcmp+0x2c>
   c63b0:	d305      	bcc.n	c63be <__mcmp+0x32>
   c63b2:	2201      	movs	r2, #1
   c63b4:	4610      	mov	r0, r2
   c63b6:	bd30      	pop	{r4, r5, pc}
   c63b8:	4283      	cmp	r3, r0
   c63ba:	d3f3      	bcc.n	c63a4 <__mcmp+0x18>
   c63bc:	e7fa      	b.n	c63b4 <__mcmp+0x28>
   c63be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c63c2:	e7f7      	b.n	c63b4 <__mcmp+0x28>

000c63c4 <__mdiff>:
   c63c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c63c8:	460c      	mov	r4, r1
   c63ca:	4606      	mov	r6, r0
   c63cc:	4611      	mov	r1, r2
   c63ce:	4620      	mov	r0, r4
   c63d0:	4690      	mov	r8, r2
   c63d2:	f7ff ffdb 	bl	c638c <__mcmp>
   c63d6:	1e05      	subs	r5, r0, #0
   c63d8:	d110      	bne.n	c63fc <__mdiff+0x38>
   c63da:	4629      	mov	r1, r5
   c63dc:	4630      	mov	r0, r6
   c63de:	f7ff fd09 	bl	c5df4 <_Balloc>
   c63e2:	b930      	cbnz	r0, c63f2 <__mdiff+0x2e>
   c63e4:	4b3a      	ldr	r3, [pc, #232]	; (c64d0 <__mdiff+0x10c>)
   c63e6:	4602      	mov	r2, r0
   c63e8:	f240 2132 	movw	r1, #562	; 0x232
   c63ec:	4839      	ldr	r0, [pc, #228]	; (c64d4 <__mdiff+0x110>)
   c63ee:	f7f7 ffef 	bl	be3d0 <__assert_func>
   c63f2:	2301      	movs	r3, #1
   c63f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c63f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c63fc:	bfa4      	itt	ge
   c63fe:	4643      	movge	r3, r8
   c6400:	46a0      	movge	r8, r4
   c6402:	4630      	mov	r0, r6
   c6404:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c6408:	bfa6      	itte	ge
   c640a:	461c      	movge	r4, r3
   c640c:	2500      	movge	r5, #0
   c640e:	2501      	movlt	r5, #1
   c6410:	f7ff fcf0 	bl	c5df4 <_Balloc>
   c6414:	b920      	cbnz	r0, c6420 <__mdiff+0x5c>
   c6416:	4b2e      	ldr	r3, [pc, #184]	; (c64d0 <__mdiff+0x10c>)
   c6418:	4602      	mov	r2, r0
   c641a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c641e:	e7e5      	b.n	c63ec <__mdiff+0x28>
   c6420:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c6424:	6926      	ldr	r6, [r4, #16]
   c6426:	60c5      	str	r5, [r0, #12]
   c6428:	f104 0914 	add.w	r9, r4, #20
   c642c:	f108 0514 	add.w	r5, r8, #20
   c6430:	f100 0e14 	add.w	lr, r0, #20
   c6434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c6438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c643c:	f108 0210 	add.w	r2, r8, #16
   c6440:	46f2      	mov	sl, lr
   c6442:	2100      	movs	r1, #0
   c6444:	f859 3b04 	ldr.w	r3, [r9], #4
   c6448:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c644c:	fa1f f883 	uxth.w	r8, r3
   c6450:	fa11 f18b 	uxtah	r1, r1, fp
   c6454:	0c1b      	lsrs	r3, r3, #16
   c6456:	eba1 0808 	sub.w	r8, r1, r8
   c645a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c645e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c6462:	fa1f f888 	uxth.w	r8, r8
   c6466:	1419      	asrs	r1, r3, #16
   c6468:	454e      	cmp	r6, r9
   c646a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c646e:	f84a 3b04 	str.w	r3, [sl], #4
   c6472:	d8e7      	bhi.n	c6444 <__mdiff+0x80>
   c6474:	1b33      	subs	r3, r6, r4
   c6476:	3b15      	subs	r3, #21
   c6478:	f023 0303 	bic.w	r3, r3, #3
   c647c:	3304      	adds	r3, #4
   c647e:	3415      	adds	r4, #21
   c6480:	42a6      	cmp	r6, r4
   c6482:	bf38      	it	cc
   c6484:	2304      	movcc	r3, #4
   c6486:	441d      	add	r5, r3
   c6488:	4473      	add	r3, lr
   c648a:	469e      	mov	lr, r3
   c648c:	462e      	mov	r6, r5
   c648e:	4566      	cmp	r6, ip
   c6490:	d30e      	bcc.n	c64b0 <__mdiff+0xec>
   c6492:	f10c 0203 	add.w	r2, ip, #3
   c6496:	1b52      	subs	r2, r2, r5
   c6498:	f022 0203 	bic.w	r2, r2, #3
   c649c:	3d03      	subs	r5, #3
   c649e:	45ac      	cmp	ip, r5
   c64a0:	bf38      	it	cc
   c64a2:	2200      	movcc	r2, #0
   c64a4:	441a      	add	r2, r3
   c64a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c64aa:	b17b      	cbz	r3, c64cc <__mdiff+0x108>
   c64ac:	6107      	str	r7, [r0, #16]
   c64ae:	e7a3      	b.n	c63f8 <__mdiff+0x34>
   c64b0:	f856 8b04 	ldr.w	r8, [r6], #4
   c64b4:	fa11 f288 	uxtah	r2, r1, r8
   c64b8:	1414      	asrs	r4, r2, #16
   c64ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c64be:	b292      	uxth	r2, r2
   c64c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c64c4:	f84e 2b04 	str.w	r2, [lr], #4
   c64c8:	1421      	asrs	r1, r4, #16
   c64ca:	e7e0      	b.n	c648e <__mdiff+0xca>
   c64cc:	3f01      	subs	r7, #1
   c64ce:	e7ea      	b.n	c64a6 <__mdiff+0xe2>
   c64d0:	000c88e9 	.word	0x000c88e9
   c64d4:	000c896e 	.word	0x000c896e

000c64d8 <__ulp>:
   c64d8:	b082      	sub	sp, #8
   c64da:	ed8d 0b00 	vstr	d0, [sp]
   c64de:	9b01      	ldr	r3, [sp, #4]
   c64e0:	4912      	ldr	r1, [pc, #72]	; (c652c <__ulp+0x54>)
   c64e2:	4019      	ands	r1, r3
   c64e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c64e8:	2900      	cmp	r1, #0
   c64ea:	dd05      	ble.n	c64f8 <__ulp+0x20>
   c64ec:	2200      	movs	r2, #0
   c64ee:	460b      	mov	r3, r1
   c64f0:	ec43 2b10 	vmov	d0, r2, r3
   c64f4:	b002      	add	sp, #8
   c64f6:	4770      	bx	lr
   c64f8:	4249      	negs	r1, r1
   c64fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c64fe:	ea4f 5021 	mov.w	r0, r1, asr #20
   c6502:	f04f 0200 	mov.w	r2, #0
   c6506:	f04f 0300 	mov.w	r3, #0
   c650a:	da04      	bge.n	c6516 <__ulp+0x3e>
   c650c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c6510:	fa41 f300 	asr.w	r3, r1, r0
   c6514:	e7ec      	b.n	c64f0 <__ulp+0x18>
   c6516:	f1a0 0114 	sub.w	r1, r0, #20
   c651a:	291e      	cmp	r1, #30
   c651c:	bfda      	itte	le
   c651e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c6522:	fa20 f101 	lsrle.w	r1, r0, r1
   c6526:	2101      	movgt	r1, #1
   c6528:	460a      	mov	r2, r1
   c652a:	e7e1      	b.n	c64f0 <__ulp+0x18>
   c652c:	7ff00000 	.word	0x7ff00000

000c6530 <__b2d>:
   c6530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c6532:	6905      	ldr	r5, [r0, #16]
   c6534:	f100 0714 	add.w	r7, r0, #20
   c6538:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c653c:	1f2e      	subs	r6, r5, #4
   c653e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c6542:	4620      	mov	r0, r4
   c6544:	f7ff fd48 	bl	c5fd8 <__hi0bits>
   c6548:	f1c0 0320 	rsb	r3, r0, #32
   c654c:	280a      	cmp	r0, #10
   c654e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c65cc <__b2d+0x9c>
   c6552:	600b      	str	r3, [r1, #0]
   c6554:	dc14      	bgt.n	c6580 <__b2d+0x50>
   c6556:	f1c0 0e0b 	rsb	lr, r0, #11
   c655a:	fa24 f10e 	lsr.w	r1, r4, lr
   c655e:	42b7      	cmp	r7, r6
   c6560:	ea41 030c 	orr.w	r3, r1, ip
   c6564:	bf34      	ite	cc
   c6566:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c656a:	2100      	movcs	r1, #0
   c656c:	3015      	adds	r0, #21
   c656e:	fa04 f000 	lsl.w	r0, r4, r0
   c6572:	fa21 f10e 	lsr.w	r1, r1, lr
   c6576:	ea40 0201 	orr.w	r2, r0, r1
   c657a:	ec43 2b10 	vmov	d0, r2, r3
   c657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c6580:	42b7      	cmp	r7, r6
   c6582:	bf3a      	itte	cc
   c6584:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6588:	f1a5 0608 	subcc.w	r6, r5, #8
   c658c:	2100      	movcs	r1, #0
   c658e:	380b      	subs	r0, #11
   c6590:	d017      	beq.n	c65c2 <__b2d+0x92>
   c6592:	f1c0 0c20 	rsb	ip, r0, #32
   c6596:	fa04 f500 	lsl.w	r5, r4, r0
   c659a:	42be      	cmp	r6, r7
   c659c:	fa21 f40c 	lsr.w	r4, r1, ip
   c65a0:	ea45 0504 	orr.w	r5, r5, r4
   c65a4:	bf8c      	ite	hi
   c65a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c65aa:	2400      	movls	r4, #0
   c65ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c65b0:	fa01 f000 	lsl.w	r0, r1, r0
   c65b4:	fa24 f40c 	lsr.w	r4, r4, ip
   c65b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c65bc:	ea40 0204 	orr.w	r2, r0, r4
   c65c0:	e7db      	b.n	c657a <__b2d+0x4a>
   c65c2:	ea44 030c 	orr.w	r3, r4, ip
   c65c6:	460a      	mov	r2, r1
   c65c8:	e7d7      	b.n	c657a <__b2d+0x4a>
   c65ca:	bf00      	nop
   c65cc:	3ff00000 	.word	0x3ff00000

000c65d0 <__d2b>:
   c65d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c65d4:	4689      	mov	r9, r1
   c65d6:	2101      	movs	r1, #1
   c65d8:	ec57 6b10 	vmov	r6, r7, d0
   c65dc:	4690      	mov	r8, r2
   c65de:	f7ff fc09 	bl	c5df4 <_Balloc>
   c65e2:	4604      	mov	r4, r0
   c65e4:	b930      	cbnz	r0, c65f4 <__d2b+0x24>
   c65e6:	4602      	mov	r2, r0
   c65e8:	4b25      	ldr	r3, [pc, #148]	; (c6680 <__d2b+0xb0>)
   c65ea:	4826      	ldr	r0, [pc, #152]	; (c6684 <__d2b+0xb4>)
   c65ec:	f240 310a 	movw	r1, #778	; 0x30a
   c65f0:	f7f7 feee 	bl	be3d0 <__assert_func>
   c65f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c65f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c65fc:	bb35      	cbnz	r5, c664c <__d2b+0x7c>
   c65fe:	2e00      	cmp	r6, #0
   c6600:	9301      	str	r3, [sp, #4]
   c6602:	d028      	beq.n	c6656 <__d2b+0x86>
   c6604:	4668      	mov	r0, sp
   c6606:	9600      	str	r6, [sp, #0]
   c6608:	f7ff fd06 	bl	c6018 <__lo0bits>
   c660c:	9900      	ldr	r1, [sp, #0]
   c660e:	b300      	cbz	r0, c6652 <__d2b+0x82>
   c6610:	9a01      	ldr	r2, [sp, #4]
   c6612:	f1c0 0320 	rsb	r3, r0, #32
   c6616:	fa02 f303 	lsl.w	r3, r2, r3
   c661a:	430b      	orrs	r3, r1
   c661c:	40c2      	lsrs	r2, r0
   c661e:	6163      	str	r3, [r4, #20]
   c6620:	9201      	str	r2, [sp, #4]
   c6622:	9b01      	ldr	r3, [sp, #4]
   c6624:	61a3      	str	r3, [r4, #24]
   c6626:	2b00      	cmp	r3, #0
   c6628:	bf14      	ite	ne
   c662a:	2202      	movne	r2, #2
   c662c:	2201      	moveq	r2, #1
   c662e:	6122      	str	r2, [r4, #16]
   c6630:	b1d5      	cbz	r5, c6668 <__d2b+0x98>
   c6632:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c6636:	4405      	add	r5, r0
   c6638:	f8c9 5000 	str.w	r5, [r9]
   c663c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6640:	f8c8 0000 	str.w	r0, [r8]
   c6644:	4620      	mov	r0, r4
   c6646:	b003      	add	sp, #12
   c6648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c664c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6650:	e7d5      	b.n	c65fe <__d2b+0x2e>
   c6652:	6161      	str	r1, [r4, #20]
   c6654:	e7e5      	b.n	c6622 <__d2b+0x52>
   c6656:	a801      	add	r0, sp, #4
   c6658:	f7ff fcde 	bl	c6018 <__lo0bits>
   c665c:	9b01      	ldr	r3, [sp, #4]
   c665e:	6163      	str	r3, [r4, #20]
   c6660:	2201      	movs	r2, #1
   c6662:	6122      	str	r2, [r4, #16]
   c6664:	3020      	adds	r0, #32
   c6666:	e7e3      	b.n	c6630 <__d2b+0x60>
   c6668:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c666c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6670:	f8c9 0000 	str.w	r0, [r9]
   c6674:	6918      	ldr	r0, [r3, #16]
   c6676:	f7ff fcaf 	bl	c5fd8 <__hi0bits>
   c667a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c667e:	e7df      	b.n	c6640 <__d2b+0x70>
   c6680:	000c88e9 	.word	0x000c88e9
   c6684:	000c896e 	.word	0x000c896e

000c6688 <__ratio>:
   c6688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c668c:	4688      	mov	r8, r1
   c668e:	4669      	mov	r1, sp
   c6690:	4681      	mov	r9, r0
   c6692:	f7ff ff4d 	bl	c6530 <__b2d>
   c6696:	a901      	add	r1, sp, #4
   c6698:	4640      	mov	r0, r8
   c669a:	ec55 4b10 	vmov	r4, r5, d0
   c669e:	f7ff ff47 	bl	c6530 <__b2d>
   c66a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c66a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c66aa:	eba3 0c02 	sub.w	ip, r3, r2
   c66ae:	e9dd 3200 	ldrd	r3, r2, [sp]
   c66b2:	1a9b      	subs	r3, r3, r2
   c66b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c66b8:	ec51 0b10 	vmov	r0, r1, d0
   c66bc:	2b00      	cmp	r3, #0
   c66be:	bfd6      	itet	le
   c66c0:	460a      	movle	r2, r1
   c66c2:	462a      	movgt	r2, r5
   c66c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c66c8:	468b      	mov	fp, r1
   c66ca:	462f      	mov	r7, r5
   c66cc:	bfd4      	ite	le
   c66ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c66d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c66d6:	4620      	mov	r0, r4
   c66d8:	ee10 2a10 	vmov	r2, s0
   c66dc:	465b      	mov	r3, fp
   c66de:	4639      	mov	r1, r7
   c66e0:	f7fd fd58 	bl	c4194 <__aeabi_ddiv>
   c66e4:	ec41 0b10 	vmov	d0, r0, r1
   c66e8:	b003      	add	sp, #12
   c66ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c66ee <__copybits>:
   c66ee:	3901      	subs	r1, #1
   c66f0:	b570      	push	{r4, r5, r6, lr}
   c66f2:	1149      	asrs	r1, r1, #5
   c66f4:	6914      	ldr	r4, [r2, #16]
   c66f6:	3101      	adds	r1, #1
   c66f8:	f102 0314 	add.w	r3, r2, #20
   c66fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c6700:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c6704:	1f05      	subs	r5, r0, #4
   c6706:	42a3      	cmp	r3, r4
   c6708:	d30c      	bcc.n	c6724 <__copybits+0x36>
   c670a:	1aa3      	subs	r3, r4, r2
   c670c:	3b11      	subs	r3, #17
   c670e:	f023 0303 	bic.w	r3, r3, #3
   c6712:	3211      	adds	r2, #17
   c6714:	42a2      	cmp	r2, r4
   c6716:	bf88      	it	hi
   c6718:	2300      	movhi	r3, #0
   c671a:	4418      	add	r0, r3
   c671c:	2300      	movs	r3, #0
   c671e:	4288      	cmp	r0, r1
   c6720:	d305      	bcc.n	c672e <__copybits+0x40>
   c6722:	bd70      	pop	{r4, r5, r6, pc}
   c6724:	f853 6b04 	ldr.w	r6, [r3], #4
   c6728:	f845 6f04 	str.w	r6, [r5, #4]!
   c672c:	e7eb      	b.n	c6706 <__copybits+0x18>
   c672e:	f840 3b04 	str.w	r3, [r0], #4
   c6732:	e7f4      	b.n	c671e <__copybits+0x30>

000c6734 <__any_on>:
   c6734:	f100 0214 	add.w	r2, r0, #20
   c6738:	6900      	ldr	r0, [r0, #16]
   c673a:	114b      	asrs	r3, r1, #5
   c673c:	4298      	cmp	r0, r3
   c673e:	b510      	push	{r4, lr}
   c6740:	db11      	blt.n	c6766 <__any_on+0x32>
   c6742:	dd0a      	ble.n	c675a <__any_on+0x26>
   c6744:	f011 011f 	ands.w	r1, r1, #31
   c6748:	d007      	beq.n	c675a <__any_on+0x26>
   c674a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c674e:	fa24 f001 	lsr.w	r0, r4, r1
   c6752:	fa00 f101 	lsl.w	r1, r0, r1
   c6756:	428c      	cmp	r4, r1
   c6758:	d10b      	bne.n	c6772 <__any_on+0x3e>
   c675a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c675e:	4293      	cmp	r3, r2
   c6760:	d803      	bhi.n	c676a <__any_on+0x36>
   c6762:	2000      	movs	r0, #0
   c6764:	bd10      	pop	{r4, pc}
   c6766:	4603      	mov	r3, r0
   c6768:	e7f7      	b.n	c675a <__any_on+0x26>
   c676a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c676e:	2900      	cmp	r1, #0
   c6770:	d0f5      	beq.n	c675e <__any_on+0x2a>
   c6772:	2001      	movs	r0, #1
   c6774:	e7f6      	b.n	c6764 <__any_on+0x30>

000c6776 <_calloc_r>:
   c6776:	b513      	push	{r0, r1, r4, lr}
   c6778:	434a      	muls	r2, r1
   c677a:	4611      	mov	r1, r2
   c677c:	9201      	str	r2, [sp, #4]
   c677e:	f7f7 fe17 	bl	be3b0 <_malloc_r>
   c6782:	4604      	mov	r4, r0
   c6784:	b118      	cbz	r0, c678e <_calloc_r+0x18>
   c6786:	9a01      	ldr	r2, [sp, #4]
   c6788:	2100      	movs	r1, #0
   c678a:	f7fd ff8d 	bl	c46a8 <memset>
   c678e:	4620      	mov	r0, r4
   c6790:	b002      	add	sp, #8
   c6792:	bd10      	pop	{r4, pc}
   c6794:	0000      	movs	r0, r0
	...

000c6798 <nan>:
   c6798:	ed9f 0b01 	vldr	d0, [pc, #4]	; c67a0 <nan+0x8>
   c679c:	4770      	bx	lr
   c679e:	bf00      	nop
   c67a0:	00000000 	.word	0x00000000
   c67a4:	7ff80000 	.word	0x7ff80000

000c67a8 <__ascii_wctomb>:
   c67a8:	b149      	cbz	r1, c67be <__ascii_wctomb+0x16>
   c67aa:	2aff      	cmp	r2, #255	; 0xff
   c67ac:	bf85      	ittet	hi
   c67ae:	238a      	movhi	r3, #138	; 0x8a
   c67b0:	6003      	strhi	r3, [r0, #0]
   c67b2:	700a      	strbls	r2, [r1, #0]
   c67b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c67b8:	bf98      	it	ls
   c67ba:	2001      	movls	r0, #1
   c67bc:	4770      	bx	lr
   c67be:	4608      	mov	r0, r1
   c67c0:	4770      	bx	lr
	...

000c67c4 <__aeabi_d2lz>:
   c67c4:	b538      	push	{r3, r4, r5, lr}
   c67c6:	2200      	movs	r2, #0
   c67c8:	2300      	movs	r3, #0
   c67ca:	4604      	mov	r4, r0
   c67cc:	460d      	mov	r5, r1
   c67ce:	f7fd fe29 	bl	c4424 <__aeabi_dcmplt>
   c67d2:	b928      	cbnz	r0, c67e0 <__aeabi_d2lz+0x1c>
   c67d4:	4620      	mov	r0, r4
   c67d6:	4629      	mov	r1, r5
   c67d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c67dc:	f7fd bef8 	b.w	c45d0 <__aeabi_d2ulz>
   c67e0:	4620      	mov	r0, r4
   c67e2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c67e6:	f7fd fef3 	bl	c45d0 <__aeabi_d2ulz>
   c67ea:	4240      	negs	r0, r0
   c67ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c67f0:	bd38      	pop	{r3, r4, r5, pc}
   c67f2:	bf00      	nop

000c67f4 <dynalib_user>:
   c67f4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c6804:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c6814:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c6824:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c6834:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c6844:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c6854:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c6864:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c6874:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c6884:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c6894:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c68a4:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c68b4:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c68c4:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c68d4:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c68e4:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c68f4:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c6904:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c6914:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6924:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c6934:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c6944:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c6954:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c6964:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6974:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c6984:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c6994:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c69a4:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c69b4:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c69c4:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c69d4:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   c69e4:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   c69f4:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   c6a04:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   c6a14:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   c6a24:	7463 006c 7325 2520 2073 6425 2520 2064     ctl.%s %s %d %d 
   c6a34:	6425 4e00 7765 7420 7261 6567 2074 5047     %d.New target GP
   c6a44:	2c53 4c20 7461 203a 6625 4c20 6e6f 203a     S, Lat: %f Lon: 
   c6a54:	6625 6d00 7274 5200 6365 6965 6576 2064     %f.mtr.Received 
   c6a64:	6f4d 6f74 2072 6f43 6d6d 6e61 3a64 4c20     Motor Command: L
   c6a74:	7053 6565 3d64 6425 522c 7053 6565 3d64     Speed=%d,RSpeed=
   c6a84:	6425 7200 7165 7000 7374 5b00 5550 5354     %d.req.pts.[PUTS
   c6a94:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c6aa4:	2067 6f43 6d6d 6e61 3a64 2520 0073 7073     g Command: %s.sp
   c6ab4:	0063 7768 0061 6d64 0070 6765 0070 7325     c.hwa.dmp.egp.%s
   c6ac4:	2520 0073 7473 0070 495b 464e 5d4f 5220      %s.stp.[INFO] R
   c6ad4:	6365 6965 6576 2064 544c 2045 654d 7373     eceived LTE Mess
   c6ae4:	6761 3a65 2520 0073 654e 2077 5442 4320     age: %s.New BT C
   c6af4:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c6b04:	6365 6965 6576 2064 4c42 2045 654d 7373     eceived BLE Mess
   c6b14:	6761 3a65 2520 0073 7245 6f72 2c72 4320     age: %s.Error, C
   c6b24:	756f 646c 6e20 746f 6920 696e 6974 6c61     ould not initial
   c6b34:	7a69 2065 5047 0053 614c 3a74 2520 2066     ize GPS.Lat: %f 
   c6b44:	6f4c 206e 6625 5420 614c 3a74 2520 2066     Lon %f TLat: %f 
   c6b54:	4c54 6e6f 203a 6625 202c 6f43 706d 7361     TLon: %f, Compas
   c6b64:	3a73 2520 2c66 5420 6172 6576 206c 6468     s: %f, Travel hd
   c6b74:	203a 6625 202c 2054 6544 746c 3a61 2520     : %f, T Delta: %
   c6b84:	2c66 4420 7369 3a74 2520 0066 3025 6432     f, Dist: %f.%02d
   c6b94:	3025 6432 3025 6434 3025 6432 3025 6432     %02d%04d%02d%02d
   c6ba4:	3025 6432 2500 2c73 6625 252c 2c66 6625     %02d.%s,%f,%f,%f
   c6bb4:	252c 2c66 6625 252c 2c66 6625 4e00 7765     ,%f,%f,%f,%f.New
   c6bc4:	5820 6542 2065 6f43 6d6d 6e61 3a64 5b00      XBee Command:.[
   c6bd4:	4e49 4f46 205d 6552 6563 7669 6465 5820     INFO] Received X
   c6be4:	6542 2065 654d 7373 6761 3a65 2520 0073     Bee Message: %s.
   c6bf4:	6e45 6574 6972 676e 4420 7461 2061 664f     Entering Data Of
   c6c04:	6c66 616f 6564 2072 6f4d 6564 2f00 4500     floader Mode./.E
   c6c14:	7272 726f 202c 6f63 6c75 2064 6f6e 2074     rror, could not 
   c6c24:	706f 6e65 7220 6f6f 2074 4453 6320 7261     open root SD car
   c6c34:	2064 6964 6572 7463 726f 0079 6157 7469     d directory.Wait
   c6c44:	6e69 2067 6f66 2072 4343 7548 2062 6f63     ing for CCHub co
   c6c54:	6e6e 6365 6974 6e6f 2e2e 002e 7453 7261     nnection....Star
   c6c64:	6974 676e 7420 6172 736e 6566 2e72 2e2e     ting transfer...
   c6c74:	4300 6568 6b63 6e69 2067 6669 6620 6c69     .Checking if fil
   c6c84:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   c6c94:	2072 742e 7478 2e2e 002e 632e 7673 6600     r .txt.....csv.f
   c6ca4:	6c69 6465 6e6f 0065 6966 656c 616e 656d     iledone.filename
   c6cb4:	5300 6e65 6964 676e 6320 6d6f 616d 646e     .Sending command
   c6cc4:	2520 0073 6946 656c 2520 2073 7369 6120      %s.File %s is a
   c6cd4:	2e20 7363 2076 726f 2e20 7874 2074 7270      .csv or .txt pr
   c6ce4:	6e69 6974 676e 6420 7461 0061 6966 656c     inting data.file
   c6cf4:	6f63 706d 2500 2573 3230 0078 6f42 3174     comp.%s%02x.Bot1
   c6d04:	6164 0074 2542 4364 7343 736e 3025 362e     dat.B%dCCsns%0.6
   c6d14:	2066 3025 362e 2066 6425 2520 2064 6425     f %0.6f %d %d %d
   c6d24:	2520 2064 6425 0020 6553 646e 6e69 2067      %d %d .Sending 
   c6d34:	2061 7473 7461 7375 7520 6470 7461 2165     a status update!
   c6d44:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   c6d54:	2e30 6636 2520 2e30 6636 0020 4343 7548     0.6f %0.6f .CCHu
   c6d64:	0062 6e49 7570 2074 6f43 6d6d 6e61 0064     b.Input Command.
   c6d74:	6146 6c69 6465 7420 206f 6966 646e 4c20     Failed to find L
   c6d84:	5349 4d33 4c44 6320 6968 0070 494c 3353     IS3MDL chip.LIS3
   c6d94:	444d 204c 6f46 6e75 2164 5700 7461 7265     MDL Found!.Water
   c6da4:	6f42 0074 4c5f 474f 742e 7478 4500 7272     Bot._LOG.txt.Err
   c6db4:	726f 203a 6f63 6c75 2064 6f6e 2074 6f63     or: could not co
   c6dc4:	6e6e 6365 2074 6f74 5320 2044 6163 6472     nnect to SD card
   c6dd4:	0021 6954 656d 4c2c 7461 7469 6475 2c65     !.Time,Latitude,
   c6de4:	6f4c 676e 7469 6475 2c65 6554 706d 7265     Longitude,Temper
   c6df4:	7461 7275 2c65 4870 442c 7369 6f73 766c     ature,pH,Dissolv
   c6e04:	6465 4f20 2c32 6f43 646e 6375 6974 6976     ed O2,Conductivi
   c6e14:	7974 3020 312e 2c4b 6f43 646e 6375 6974     ty 0.1K,Conducti
   c6e24:	6976 7974 3120 004b 495b 464e 5d4f 5720     vity 1K.[INFO] W
   c6e34:	7461 7265 6f42 2074 6425 203a 7453 7261     aterBot %d: Star
   c6e44:	6574 2064 6f4c 6767 6e69 2167 7400 0078     ted Logging!.tx.
   c6e54:	7872 6f00 6666 6400 6762 0000               rx.off.dbg..

000c6e60 <_ZTVN8particle11SPISettingsE>:
	...
   c6e68:	4379 000b 40d1 000b 4183 000b               yC...@...A..

000c6e74 <_ZTV5Timer>:
	...
   c6e7c:	44e5 000b 452d 000b 41e9 000b               .D..-E...A..

000c6e88 <_ZTVN5spark10LogHandlerE>:
	...
   c6e98:	40a9 000b 40d3 000b                         .@...@..

000c6ea0 <_ZTVN8particle9LEDStatusE>:
	...
   c6ea8:	42c1 000b 42dd 000b 40dd 000b               .B...B...@..

000c6eb4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6ebc:	42f1 000b 4325 000b 1059 000c 40d5 000b     .B..%C..Y....@..

000c6ecc <_ZTV4File>:
	...
   c6ed4:	4181 000b 4191 000b 41d1 000b 41cb 000b     .A...A...A...A..
   c6ee4:	40df 000b 41ab 000b 41a5 000b 419f 000b     .@...A...A...A..
   c6ef4:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6f04:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6f14:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6f24:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6f34:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6f44:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6f54:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6f64:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6f74:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6f84:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6f94:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6fa4:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6fb0 <CSWTCH.409>:
   c6fb0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6fc0:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6fd0:	444d 004c                                   MDL.

000c6fd4 <CSWTCH.26>:
   c6fd4:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c6fe4 <_ZTV16Adafruit_LIS3MDL>:
	...
   c6fec:	82fb 000b 8345 000b 82f9 000b 83f5 000b     ....E...........
   c6ffc:	82fd 000b 6573 5074 6361 656b 4374 6766     ....setPacketCfg
   c700c:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c701c:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c702c:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c703c:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c704c:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c705c:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c706c:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c707c:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c708c:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c709c:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c70ac:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c70bc:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c70cc:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c70dc:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c70ec:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c70fc:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c710c:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c711c:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c712c:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c713c:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c714c:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c715c:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c716c:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c717c:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c718c:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c719c:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c71ac:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c71bc:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c71cc:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c71dc:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c71ec:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c71fc:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c720c:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c721c:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c722c:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c723c:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c724c:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c725c:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c726c:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c727c:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c728c:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c729c:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c72ac:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c72bc:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c72cc:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c72dc:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c72ec:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c72fc:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c730c:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c731c:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c732c:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c733c:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c734c:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c735c:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c736c:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c737c:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c738c:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c739c:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c73ac:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c73bc:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c73cc:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c73dc:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c73ec:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c73fc:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c740c:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c741c:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c742c:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c743c:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c744c:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c745c:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c746c:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c747c:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c748c:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c749c:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c74ac:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c74bc:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c74cc:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c74dc:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c74ec:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c74fc:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c750c:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c751c:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c752c:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c753c:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c754c:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c755c:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c756c:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c757c:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c758c:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c759c:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c75ac:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c75bc:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c75cc:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c75dc:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c75ec:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c75fc:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c760c:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c761c:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c762c:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c763c:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c764c:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c765c:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c766c:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c767c:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c768c:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c769c:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c76ac:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c76bc:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c76cc:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c76dc:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c76ec:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c76fc:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c770c:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c771c:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c772c:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c773c:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c774c:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c775c:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c776c:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c777c:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c778c:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c779c:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c77ac:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c77bc:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c77cc:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c77dc:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c77ec:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c77fc:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c780c:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c781c:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c782c:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c783c:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c784c:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c785c:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c786c:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c787c:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c788c:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c789c:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c78ac:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c78bc:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c78cc:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c78dc:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c78ec:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c78fc:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c790c:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c791c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c792c:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c793c:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c794c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c795c:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c796c:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c797c:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c798c:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c799c:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c79ac:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c79bc:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c79cc:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c79dc:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c79ec:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c79fc:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c7a0c:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c7a1c:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c7a2c:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c7a3c:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c7a4c:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c7a5c:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c7a6c:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c7a7c:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c7a8c:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c7a9c:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c7aac:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c7abc:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c7acc:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c7adc:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c7aec:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c7afc:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c7b0c:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c7b1c:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c7b2c:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c7b3c:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c7b4c:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c7b5c:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c7b6c:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c7b7c:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c7b8c:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c7b9c:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c7bac:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c7bbc:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c7bcc:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c7bdc:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c7bec:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c7bfc:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c7c0c:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c7c1c:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c7c2c:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c7c3c:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c7c4c:	7365 2e73 2e2e 0000                         ess.....

000c7c54 <CSWTCH.334>:
   c7c54:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7c64:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7c74:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7c94:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7cbc:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7d10:	0000 0010 0004                              ......

000c7d16 <CSWTCH.335>:
   c7d16:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7d32:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7d3e <CSWTCH.336>:
   c7d3e:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c7d4e:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c7d5e:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c7d6e:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c7d7e:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c7d8e:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c7d9e:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c7dae:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c7dbe:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c7dce:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c7dde:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c7dee:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c7dfe:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c7e0e:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c7e1e:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c7e2e:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c7e3e:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c7e4e:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c7e5e:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c7e6e:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c7e7e:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c7e90 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e98:	e44d 000b e4b1 000b e585 000b e4db 000b     M...............
   c7ea8:	e451 000b                                   Q...

000c7eac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7eb4:	e449 000b e4bf 000b e44b 000b e4e1 000b     I.......K.......
   c7ec4:	e471 000b                                   q...

000c7ec8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7ed0:	e447 000b e4cd 000b ed41 000b e4e7 000b     G.......A.......
   c7ee0:	e491 000b                                   ....

000c7ee4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7ef0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7f02 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7f02:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7f12 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7f12:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7f24 <_ZTVN5spark13CellularClassE>:
	...
   c7f2c:	f803 000b f7f9 000b f7ef 000b f7a5 000b     ................
   c7f3c:	f7e3 000b f7d7 000b 13b1 000c 13b9 000c     ................
   c7f4c:	f7cb 000b f7c3 000b f7b9 000b f7af 000b     ................
   c7f5c:	13e9 000c                                   ....

000c7f60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7f68:	f83d 000b f843 000b f881 000b f851 000b     =...C.......Q...
   c7f78:	f83f 000b                                   ?...

000c7f7c <_ZTVN5spark13EthernetClassE>:
	...
   c7f84:	fe17 000b fe0d 000b fe03 000b fdf9 000b     ................
   c7f94:	fded 000b fde1 000b 13b1 000c 13b9 000c     ................
   c7fa4:	fdd5 000b fdcd 000b fdc3 000b fdb9 000b     ................
   c7fb4:	13e9 000c                                   ....

000c7fb8 <_ZTV7TwoWire>:
	...
   c7fc0:	fe35 000b fe7f 000b fe57 000b fe37 000b     5.......W...7...
   c7fd0:	fe5f 000b fe67 000b fe6f 000b fe77 000b     _...g...o...w...

000c7fe0 <_ZTV9IPAddress>:
	...
   c7fe8:	ffa9 000b ff99 000b ff9b 000b 7525 7500     ............%u.u
   c7ff8:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c8008:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c8018:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c8028:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c8038:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c8048:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c8058:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c8068:	6961 006c                                   ail.

000c806c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c8074:	04a5 000c 04cb 000c 0489 000c 00b7 000c     ................

000c8084 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c808c:	0901 000c 0919 000c 1059 000c 40d5 000b     ........Y....@..

000c809c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c80a4:	092d 000c 0941 000c 11fd 000c 0491 000c     -...A...........

000c80b4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c80bc:	04a3 000c 04d9 000c 0fbd 000c 0493 000c     ................

000c80cc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c80d4:	04a1 000c 04e7 000c 0869 000c 0509 000c     ........i.......

000c80e4 <_ZTVN5spark12NetworkClassE>:
	...
   c80ec:	1371 000c 137b 000c 1385 000c 138f 000c     q...{...........
   c80fc:	1399 000c 13a5 000c 13b1 000c 13b9 000c     ................
   c810c:	13c1 000c 13cd 000c 13d5 000c 13df 000c     ................
   c811c:	13e9 000c                                   ....

000c8120 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c8120:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c8130:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c8140:	6d69 0065                                   ime.

000c8144 <_ZTV11USARTSerial>:
	...
   c814c:	1d35 000c 1da1 000c 1d79 000c 14d5 000c     5.......y.......
   c815c:	1d49 000c 1d65 000c 1d57 000c 1d73 000c     I...e...W...s...
   c816c:	1d37 000c 1d3b 000c                         7...;...

000c8174 <_ZTV9USBSerial>:
	...
   c817c:	1df3 000c 1e5b 000c 1e31 000c 14d5 000c     ....[...1.......
   c818c:	1e23 000c 1df5 000c 1e05 000c 1e55 000c     #...........U...
   c819c:	1e15 000c 1ded 000c                         ........

000c81a4 <_ZSt7nothrow>:
	...

000c81a5 <_ZTSSt19_Sp_make_shared_tag>:
   c81a5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c81b5:	6572 5f64 6174 0067 0000                     red_tag....

000c81c0 <_ZTISt19_Sp_make_shared_tag>:
   c81c0:	8200 000c 81a5 000c                         ........

000c81c8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c81c8:	8260 000c 81d4 000c 8284 000c               `...........

000c81d4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c81d4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c81e4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c81f4:	0045 0000                                   E...

000c81f8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c81f8:	0000 0000 81c8 000c 22ad 000c 22c1 000c     ........."..."..
   c8208:	2455 000c 2455 000c 232b 000c 226d 000c     U$..U$..+#..m"..
   c8218:	2313 000c 22d5 000c 229f 000c               .#..."..."..

000c8224 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c8224:	8260 000c 8230 000c 81c8 000c               `...0.......

000c8230 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c8230:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c8240:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c8250:	666e 456f 0000 0000                         nfoE....

000c8258 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c8258:	0000 0000 8224 000c 2355 000c 2369 000c     ....$...U#..i#..
   c8268:	2455 000c 2455 000c 232b 000c 226d 000c     U$..U$..+#..m"..
   c8278:	2429 000c 23b5 000c 237d 000c               )$...#..}#..

000c8284 <_ZTISt9type_info>:
   c8284:	8200 000c 828c 000c                         ........

000c828c <_ZTSSt9type_info>:
   c828c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c829c:	0000 0000                                   ....

000c82a0 <CSWTCH.8>:
   c82a0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c82b0:	21d2 7f33 d97c c002                         .!3.|...

000c82b8 <CSWTCH.9>:
   c82b8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c82c8:	2d18 5444 21fb c009                         .-DT.!..

000c82d0 <CSWTCH.8>:
   c82d0:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c82dc <CSWTCH.9>:
   c82dc:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c82e8 <npio2_hw>:
   c82e8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c82f8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c8308:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c8318:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c8328:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c8338:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c8348:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8358:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8368 <two_over_pi>:
   c8368:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8378:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8388:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8398:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c83a8:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c83b8:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c83c8:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c83d8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c83e8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c83f8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c8408:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c8418:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c8428:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c8438:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c8448:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8458:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8468:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8478:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8488:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8498:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c84a8:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c84b8:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c84c8:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c84d8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c84e8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c84f8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c8508:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c8518:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c8528:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c8538:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c8548:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8558:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8568:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8578:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8588:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8598:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c85a8:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c85b8:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c85c8:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c85d8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c85e8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c85f8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c8608:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c8618:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c8628:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c8638:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c8648:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8658:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8668:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8678:	008c 0000 006b 0000                         ....k...

000c8680 <PIo2>:
   c8680:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8690:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c86a0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c86ac <init_jk>:
   c86ac:	0004 0000 0007 0000 0009 0000               ............

000c86b8 <atanhi>:
   c86b8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c86c8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c86d8 <atanlo>:
   c86d8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c86e8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c86f8 <atanhi>:
   c86f8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c8708 <atanlo>:
   c8708:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c8718:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c8728:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c8738:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c8748:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c8758:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c8768:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c8778:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c8788:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c8794 <fpi.1>:
   c8794:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c87a4:	0000 0000                                   ....

000c87a8 <fpinan.0>:
   c87a8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c87c0 <tinytens>:
   c87c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c87d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c87e0:	6f43 64ac 0628 1168                         Co.d(.h.

000c87e8 <_ctype_>:
   c87e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c87f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c8808:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c8818:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c8828:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c8838:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8848:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8858:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8868:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c88e8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c88f8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c8908:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c8918:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c8928:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c8938:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c8948:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c8958:	632e 0000                                   .c..

000c895c <_C_numeric_locale>:
   c895c:	71d7 000c 8057 000c dbb0 2003 4f50 4953     .q..W...... POSI
   c896c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c897c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c898c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c899c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c89ac:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c89bc:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c89c8 <__mprec_bigtens>:
   c89c8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c89d8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c89e8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c89f0 <__mprec_tens>:
   c89f0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8a00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c8a10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8a20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8a30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8a40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8a50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8a60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8a70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8a80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8a90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8aa0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8ab0:	9db4 79d9 7843 44ea                         ...yCx.D

000c8ab8 <p05.0>:
   c8ab8:	0005 0000 0019 0000 007d 0000               ........}...

000c8ac4 <link_const_variable_data_end>:
   c8ac4:	000b681d 	.word	0x000b681d
   c8ac8:	000bf795 	.word	0x000bf795
   c8acc:	000bf80d 	.word	0x000bf80d
   c8ad0:	000bfe21 	.word	0x000bfe21
   c8ad4:	000c1049 	.word	0x000c1049
   c8ad8:	000c14c1 	.word	0x000c14c1
   c8adc:	000c15e5 	.word	0x000c15e5
   c8ae0:	000c1b7d 	.word	0x000c1b7d
   c8ae4:	000c1d21 	.word	0x000c1d21

000c8ae8 <link_constructors_end>:
	...
